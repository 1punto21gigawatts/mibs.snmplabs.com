#
# PySNMP MIB module ELTEX-SMI (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-SMI
# Produced by pysmi-0.3.4 at Wed May  1 13:00:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Counter32, Gauge32, TimeTicks, Counter64, Bits, ObjectIdentity, Integer32, Unsigned32, MibIdentifier, IpAddress, ModuleIdentity, enterprises, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Gauge32", "TimeTicks", "Counter64", "Bits", "ObjectIdentity", "Integer32", "Unsigned32", "MibIdentifier", "IpAddress", "ModuleIdentity", "enterprises", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString")
eltex = ModuleIdentity((1, 3, 6, 1, 4, 1, 34300))
if mibBuilder.loadTexts: eltex.setLastUpdated('200906031500Z')
if mibBuilder.loadTexts: eltex.setOrganization('Eltex Co')
if mibBuilder.loadTexts: eltex.setContactInfo('eltex@gcom.ru')
if mibBuilder.loadTexts: eltex.setDescription('The Structure of Management Information for Eltex Networks.')
elHardware = ObjectIdentity((1, 3, 6, 1, 4, 1, 34300, 1))
if mibBuilder.loadTexts: elHardware.setStatus('current')
if mibBuilder.loadTexts: elHardware.setDescription('The root of eltex hardware OIDs.')
elSoftware = ObjectIdentity((1, 3, 6, 1, 4, 1, 34300, 2))
if mibBuilder.loadTexts: elSoftware.setStatus('current')
if mibBuilder.loadTexts: elSoftware.setDescription('The root of eltex software OIDs.')
eltrapGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 34300, 3))
if mibBuilder.loadTexts: eltrapGroup.setStatus('current')
if mibBuilder.loadTexts: eltrapGroup.setDescription('The root of eltex traps objects.')
mc240AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 3))
mc240StreamAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 1)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240StreamAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240StreamAlarmTrap.setDescription('mc-240 stream alarm trap. Severity: alert')
mc240SyncAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 2)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240SyncAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240SyncAlarmTrap.setDescription('mc-240 sync alarm trap. Severity: warning')
mc240ss7LinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 3)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240ss7LinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240ss7LinkAlarmTrap.setDescription('mc-240 ss7 link alarm trap. Severity: alert')
mc240ss7LinksetAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 4)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240ss7LinksetAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240ss7LinksetAlarmTrap.setDescription('mc-240 ss7 linkset alarm trap. Severity: critical')
mc240FileAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 5)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240FileAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240FileAlarmTrap.setDescription('mc-240 file alarm trap. Severity: critical')
mc240CardAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 6)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240CardAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240CardAlarmTrap.setDescription('mc-240 card alarm trap. Severity: critical')
mxlDPSAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 7)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: mxlDPSAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxlDPSAlarmTrap.setDescription('mxl DSL DP system alarm trap')
mxlTELEAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 8)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: mxlTELEAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxlTELEAlarmTrap.setDescription('mxl DSL DP system alarm trap')
mc240UPSAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 9)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240UPSAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240UPSAlarmTrap.setDescription('mc240 UPS alarm trap')
mc240SensAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 10)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240SensAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mc240SensAlarmTrap.setDescription('mc240 sensor alarm trap (mcTrapExState = sensors bit mask, param1=temp,C, param2=Hum,%)')
dslamLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 11)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: dslamLinkDownTrap.setDescription('dslam link down trap (mcTrapExState = link state, param1 = ADSLport)')
dslamDSRateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 12)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamDSRateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: dslamDSRateAlarmTrap.setDescription('Downstream rate for dslam ADSL port change (mcTrapExState = 2-increase 1-decrease, param1 = ADSLport)')
dslamUSRateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 13)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamUSRateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: dslamUSRateAlarmTrap.setDescription('Downstream rate for dslam ADSL port change (mcTrapExState = 2-increase 1-decrease, param1 = ADSLport)')
ponONUAuthAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 14)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: ponONUAuthAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponONUAuthAlarmTrap.setDescription("Bad registration ONU Event (mcTrapLParam1=Optical Interface Number, mcTrapDescr='description with MAC addr ONU')")
ponEthAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 15)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: ponEthAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponEthAlarmTrap.setDescription("Eth Link Down, mcTrapLParam1=Link Number, Description='GePON: Eth Link N down'")
ponOpticalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 16)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: ponOpticalAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponOpticalAlarmTrap.setDescription('The optical link N (mcTrapLParam1) has no active devices')
dslamOverheatAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 17)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamOverheatAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: dslamOverheatAlarmTrap.setDescription('overheat (mcTrapExState = 1 -> DSP, = 2 -> PWR, param1 = val of temp * 10)')
dslamVoltageAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 18)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamVoltageAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: dslamVoltageAlarmTrap.setDescription('when voltage deviation become more 10% (param1 = number of voltage nominal mean 12, -12, 3.3, 2.5, 1.8, 1.25, 1.5, 1 correspondly, param2 - whole number part temperature value, param3 - decimal part temperature value )')
dslamSessionAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 19)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamSessionAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: dslamSessionAlarmTrap.setDescription('Trap sending when connection happen, mcTrapLParam1 - means connection from (0)-CLI (1)->Webs (2)->SNMP')
dslamEthLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 3, 20)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamEthLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: dslamEthLinkAlarmTrap.setDescription('Trap sending when switch port link DOWN, mcTrapLParam1 - means port num: for mxa: 0 - p0; 1 - p1; 2 - p2; 3 - cpu; 4 - dsl0; 5 - sfp; 6 - dsl1; for asl: 0 - lan; 3 - cpu; 4 - dsl0; 5 - dsl1; 6 - s0; 7 - s1')
mc240OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 4))
mc240StreamOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 1)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240StreamOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240StreamOkTrap.setDescription('mc-240 stream ok trap. Severity: alert')
mc240SyncOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 2)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240SyncOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240SyncOkTrap.setDescription('mc-240 sync ok trap. Severity: warning')
mc240ss7LinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 3)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240ss7LinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240ss7LinkOkTrap.setDescription('mc-240 ss7 link ok trap. Severity: alert')
mc240ss7LinksetOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 4)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240ss7LinksetOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240ss7LinksetOkTrap.setDescription('mc-240 ss7 linkset ok trap. Severity: critical')
mc240FileOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 5)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240FileOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240FileOkTrap.setDescription('mc-240 file ok trap. Severity: critical')
mc240CardOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 6)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240CardOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240CardOkTrap.setDescription('mc-240 card trap. Severity: critical')
mxlDPSOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 7)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: mxlDPSOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxlDPSOkTrap.setDescription('mxl DSL DP system alarm trap (normal state)')
mxlTELEOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 8)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: mxlTELEOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxlTELEOkTrap.setDescription('mxl DSL DP system alarm trap (normal state)')
mc240UPSOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 9)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240UPSOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240UPSOkTrap.setDescription('mc240 UPS alarm trap (normal state)')
mc240SensOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 10)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if mibBuilder.loadTexts: mc240SensOkTrap.setStatus('current')
if mibBuilder.loadTexts: mc240SensOkTrap.setDescription('mc240 sensor alarm trap (normal state)')
dslamLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 11)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: dslamLinkUpTrap.setDescription('dslam link up trap (mcTrapExState = link state == 0, param1 = ADSLport)')
dslamDSRateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 12)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamDSRateOkTrap.setStatus('current')
if mibBuilder.loadTexts: dslamDSRateOkTrap.setDescription('Downstream rate for dslam ADSL port change (mcTrapExState = 0-reate not change, param1 = ADSLport)')
dslamUSRateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 13)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamUSRateOkTrap.setStatus('current')
if mibBuilder.loadTexts: dslamUSRateOkTrap.setDescription('Downstream rate for dslam ADSL port change (mcTrapExState = 0-reate not change, param1 = ADSLport)')
ponONUAuthOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 14)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: ponONUAuthOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponONUAuthOkTrap.setDescription("Normal registration ONU Event (mcTrapLParam1=Optical Interface Number, mcTrapDescr='description with MAC addr ONU')")
ponEthOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 15)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: ponEthOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponEthOkTrap.setDescription("Eth Link Up, mcTrapLParam1=Link Number, Description='GePON: Eth Link N up'")
ponOpticalOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 16)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: ponOpticalOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponOpticalOkTrap.setDescription('The optical link N (mcTrapLParam1) has M (mcTrapLParam2) active devices')
dslamOverheatOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 17)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamOverheatOkTrap.setStatus('current')
if mibBuilder.loadTexts: dslamOverheatOkTrap.setDescription('overheat (mcTrapExState = 1 -> DSP, = 2 -> PWR, param1 = val of temp * 10)')
dslamVoltageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 18)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamVoltageOkTrap.setStatus('current')
if mibBuilder.loadTexts: dslamVoltageOkTrap.setDescription('when voltage deviation become less 10% (param1 = number of voltage nominal mean 12, -12, 3.3, 2.5, 1.8, 1.25, 1.5, 1 correspondly, param2 - whole number part temperature value, param3 - decimal part temperature value )')
dslamSessionOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 19)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamSessionOkTrap.setStatus('current')
if mibBuilder.loadTexts: dslamSessionOkTrap.setDescription('Trap sending when connection closed, mcTrapLParam1 - means disconnection from (0)-CLI (1)->Webs (2)->SNMP')
dslamEthLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 4, 20)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: dslamEthLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: dslamEthLinkOkTrap.setDescription('Trap sending when switch port link UP, mcTrapLParam1 - means port num: for mxa: 0 - p0; 1 - p1; 2 - p2; 3 - cpu; 4 - dsl0; 5 - sfp; 6 - dsl1; for asl: 0 - lan; 3 - cpu; 4 - dsl0; 5 - dsl1; 6 - s0; 7 - s1')
mc240TrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 5))
mcTrapExState = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapExState.setStatus('current')
if mibBuilder.loadTexts: mcTrapExState.setDescription('state (additional state)')
mcTrapLParam1 = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapLParam1.setStatus('current')
if mibBuilder.loadTexts: mcTrapLParam1.setDescription('param-1 (slot or index)')
mcTrapLParam2 = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapLParam2.setStatus('current')
if mibBuilder.loadTexts: mcTrapLParam2.setDescription('param-2 (port or index)')
mcTrapLParam3 = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapLParam3.setStatus('current')
if mibBuilder.loadTexts: mcTrapLParam3.setDescription('param-3 (other index)')
mcTrapID = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapID.setStatus('current')
if mibBuilder.loadTexts: mcTrapID.setDescription('ID (pbx trap id)')
mcTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapDescr.setStatus('current')
if mibBuilder.loadTexts: mcTrapDescr.setDescription('Alarm description')
mcTrapRestoredAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapRestoredAlarmID.setStatus('current')
if mibBuilder.loadTexts: mcTrapRestoredAlarmID.setDescription('If this restore event then here writed Alarm ID. If this alarm event then mcTrapRestoredAlarmID=0.')
mcTrapSyncType = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapSyncType.setStatus('current')
if mibBuilder.loadTexts: mcTrapSyncType.setDescription('Type of trap: 0 - Normal; 1 - Journal alarms; 2 - Active alarms')
mcReservedFlag = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcReservedFlag.setStatus('current')
if mibBuilder.loadTexts: mcReservedFlag.setDescription('Reserved flag')
omsOperationAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 20))
omsOperationOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 21))
omsOperationCommandAlarm = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 20, 1)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: omsOperationCommandAlarm.setStatus('current')
if mibBuilder.loadTexts: omsOperationCommandAlarm.setDescription(' mcTrapLParam1 = command <upload=1, download=2, apply=3, confirm=4, save=5>; mcTrapLParam2 = filetype <pattern=1, private=2, binary=3> mcTrapDescr = Description of operarion: DeviceName, command <upload, download, apply, confirm, save>, tftp host, config filename, status=Error, cause of error')
omsOperationCommandOk = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 21, 1)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"))
if mibBuilder.loadTexts: omsOperationCommandOk.setStatus('current')
if mibBuilder.loadTexts: omsOperationCommandOk.setDescription(' mcTrapLParam1 = command <upload=1, download=2, apply=3, confirm=4, save=5>; mcTrapLParam2 = filetype <pattern=1, private=2, binary=3> mcTrapDescr = Description of operarion: DeviceName, command <upload, download, apply, confirm, save>, tftp host, config filename, status=Ok')
mp800mkAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 8))
mp800mkMPStatusAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 1)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkMPStatusAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkMPStatusAlarmTrap.setDescription('MP operation error.')
mp800mkInpParmAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 2)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkInpParmAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkInpParmAlarmTrap.setDescription('Incorrect input parameters.')
mp800mkUEPConfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 3)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkUEPConfAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkUEPConfAlarmTrap.setDescription('UEP configuration error.')
mp800mkTMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 4)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkTMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkTMAlarmTrap.setDescription('Temperature measurement error.')
mp800mkACVMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 5)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkACVMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkACVMAlarmTrap.setDescription('ACV measurement error.')
mp800mkIbatMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 6)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkIbatMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkIbatMAlarmTrap.setDescription('Battery current measurement error.')
mp800mkVbatMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 7)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkVbatMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkVbatMAlarmTrap.setDescription('Battery voltage measurement error.')
mp800mkVbatChAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 8)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkVbatChAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkVbatChAlarmTrap.setDescription("Can't change (increase or decrease) battery voltage.")
mp800mkRlsDevAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 9)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkRlsDevAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkRlsDevAlarmTrap.setDescription('Release device is off (battery disconnected).')
mp800mkDVcellAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 10)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkDVcellAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkDVcellAlarmTrap.setDescription('Battery cell voltage spread is out of range.')
mp800mkACVAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 11)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkACVAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkACVAlarmTrap.setDescription('AC voltage is out of range.')
mp800mkBatChargeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 12)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkBatChargeAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkBatChargeAlarmTrap.setDescription('Battery is close to total discharge.')
mp800mkIloadAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 13)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkIloadAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkIloadAlarmTrap.setDescription('Load current is out of range.')
mp800mkIbatChAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 14)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkIbatChAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkIbatChAlarmTrap.setDescription('Battery charge current is too high.')
mp800mkSuppAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 15)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkSuppAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkSuppAlarmTrap.setDescription('Power supply from battery.')
mp800mkBatConnAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 8, 16)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkBatConnAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkBatConnAlarmTrap.setDescription("Battery is disconnected from MPs' output.")
mp800mkOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 9))
mp800mkMPStatusOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 1)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkMPStatusOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkMPStatusOkTrap.setDescription('MP operation OK.')
mp800mkInpParmOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 2)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkInpParmOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkInpParmOkTrap.setDescription('Input parameters OK.')
mp800mkUEPConfOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 3)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkUEPConfOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkUEPConfOkTrap.setDescription('UEP configuration OK.')
mp800mkTMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 4)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkTMOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkTMOkTrap.setDescription('Temperature measurement OK.')
mp800mkACVMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 5)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkACVMOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkACVMOkTrap.setDescription('ACV measurement OK.')
mp800mkIbatMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 6)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkIbatMOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkIbatMOkTrap.setDescription('Battery current measurement OK.')
mp800mkVbatMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 7)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkVbatMOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkVbatMOkTrap.setDescription('Battery voltage measurement OK.')
mp800mkVbatChOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 8)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkVbatChOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkVbatChOkTrap.setDescription('Battery voltage changing OK.')
mp800mkRlsDevOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 9)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkRlsDevOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkRlsDevOkTrap.setDescription('Release device is on.')
mp800mkDVcellOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 10)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkDVcellOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkDVcellOkTrap.setDescription('Battery cell voltage spread is in range.')
mp800mkACVOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 11)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkACVOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkACVOkTrap.setDescription('AC voltage is in range.')
mp800mkBatChargeOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 12)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkBatChargeOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkBatChargeOkTrap.setDescription('Battery charge status is OK.')
mp800mkIloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 13)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkIloadOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkIloadOkTrap.setDescription('Load current is in range.')
mp800mkIbatChOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 14)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkIbatChOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkIbatChOkTrap.setDescription('Battery charge current is in range.')
mp800mkSuppOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 15)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkSuppOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkSuppOkTrap.setDescription('Power supply from MPs.')
mp800mkBatConnOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 34300, 3, 9, 16)).setObjects(("ELTEX-SMI", "mp800mkTrapParameter"), ("ELTEX-SMI", "mp800mkTrapValue"), ("ELTEX-SMI", "mp800mkTrapComment"))
if mibBuilder.loadTexts: mp800mkBatConnOkTrap.setStatus('current')
if mibBuilder.loadTexts: mp800mkBatConnOkTrap.setDescription("Battery is connected to MPs' output.")
mp800mkTrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 34300, 3, 10))
mp800mkTrapParameter = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp800mkTrapParameter.setStatus('current')
if mibBuilder.loadTexts: mp800mkTrapParameter.setDescription('Parameter (V, I, T, etc...)')
mp800mkTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp800mkTrapValue.setStatus('current')
if mibBuilder.loadTexts: mp800mkTrapValue.setDescription('Value (X mV, Y mA, Z grad, etc...)')
mp800mkTrapComment = MibScalar((1, 3, 6, 1, 4, 1, 34300, 3, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp800mkTrapComment.setStatus('current')
if mibBuilder.loadTexts: mp800mkTrapComment.setDescription('Comment (V is out of range [Vmin ... Vmax]!, etc...)')
eltrapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 34300, 3, 100)).setObjects(("ELTEX-SMI", "mc240StreamAlarmTrap"), ("ELTEX-SMI", "mc240SyncAlarmTrap"), ("ELTEX-SMI", "mc240ss7LinkAlarmTrap"), ("ELTEX-SMI", "mc240ss7LinksetAlarmTrap"), ("ELTEX-SMI", "mc240FileAlarmTrap"), ("ELTEX-SMI", "mc240CardAlarmTrap"), ("ELTEX-SMI", "mxlDPSAlarmTrap"), ("ELTEX-SMI", "mxlTELEAlarmTrap"), ("ELTEX-SMI", "mc240UPSAlarmTrap"), ("ELTEX-SMI", "mc240SensAlarmTrap"), ("ELTEX-SMI", "dslamLinkDownTrap"), ("ELTEX-SMI", "dslamDSRateAlarmTrap"), ("ELTEX-SMI", "dslamUSRateAlarmTrap"), ("ELTEX-SMI", "ponONUAuthAlarmTrap"), ("ELTEX-SMI", "ponEthAlarmTrap"), ("ELTEX-SMI", "ponOpticalAlarmTrap"), ("ELTEX-SMI", "mc240StreamOkTrap"), ("ELTEX-SMI", "mc240SyncOkTrap"), ("ELTEX-SMI", "mc240ss7LinkOkTrap"), ("ELTEX-SMI", "mc240ss7LinksetOkTrap"), ("ELTEX-SMI", "mc240FileOkTrap"), ("ELTEX-SMI", "mc240CardOkTrap"), ("ELTEX-SMI", "mxlDPSOkTrap"), ("ELTEX-SMI", "mxlTELEOkTrap"), ("ELTEX-SMI", "mc240UPSOkTrap"), ("ELTEX-SMI", "mc240SensOkTrap"), ("ELTEX-SMI", "dslamLinkUpTrap"), ("ELTEX-SMI", "dslamDSRateOkTrap"), ("ELTEX-SMI", "dslamUSRateOkTrap"), ("ELTEX-SMI", "ponONUAuthOkTrap"), ("ELTEX-SMI", "ponEthOkTrap"), ("ELTEX-SMI", "ponOpticalOkTrap"), ("ELTEX-SMI", "dslamOverheatAlarmTrap"), ("ELTEX-SMI", "dslamVoltageAlarmTrap"), ("ELTEX-SMI", "dslamSessionAlarmTrap"), ("ELTEX-SMI", "dslamEthLinkAlarmTrap"), ("ELTEX-SMI", "dslamOverheatOkTrap"), ("ELTEX-SMI", "dslamVoltageOkTrap"), ("ELTEX-SMI", "dslamSessionOkTrap"), ("ELTEX-SMI", "dslamEthLinkOkTrap"), ("ELTEX-SMI", "mp800mkMPStatusAlarmTrap"), ("ELTEX-SMI", "mp800mkInpParmAlarmTrap"), ("ELTEX-SMI", "mp800mkUEPConfAlarmTrap"), ("ELTEX-SMI", "mp800mkTMAlarmTrap"), ("ELTEX-SMI", "mp800mkACVMAlarmTrap"), ("ELTEX-SMI", "mp800mkIbatMAlarmTrap"), ("ELTEX-SMI", "mp800mkVbatMAlarmTrap"), ("ELTEX-SMI", "mp800mkVbatChAlarmTrap"), ("ELTEX-SMI", "mp800mkRlsDevAlarmTrap"), ("ELTEX-SMI", "mp800mkDVcellAlarmTrap"), ("ELTEX-SMI", "mp800mkACVAlarmTrap"), ("ELTEX-SMI", "mp800mkBatChargeAlarmTrap"), ("ELTEX-SMI", "mp800mkIloadAlarmTrap"), ("ELTEX-SMI", "mp800mkIbatChAlarmTrap"), ("ELTEX-SMI", "mp800mkSuppAlarmTrap"), ("ELTEX-SMI", "mp800mkBatConnAlarmTrap"), ("ELTEX-SMI", "mp800mkMPStatusOkTrap"), ("ELTEX-SMI", "mp800mkInpParmOkTrap"), ("ELTEX-SMI", "mp800mkUEPConfOkTrap"), ("ELTEX-SMI", "mp800mkTMOkTrap"), ("ELTEX-SMI", "mp800mkACVMOkTrap"), ("ELTEX-SMI", "mp800mkIbatMOkTrap"), ("ELTEX-SMI", "mp800mkVbatMOkTrap"), ("ELTEX-SMI", "mp800mkVbatChOkTrap"), ("ELTEX-SMI", "mp800mkRlsDevOkTrap"), ("ELTEX-SMI", "mp800mkDVcellOkTrap"), ("ELTEX-SMI", "mp800mkACVOkTrap"), ("ELTEX-SMI", "mp800mkBatChargeOkTrap"), ("ELTEX-SMI", "mp800mkIloadOkTrap"), ("ELTEX-SMI", "mp800mkIbatChOkTrap"), ("ELTEX-SMI", "mp800mkSuppOkTrap"), ("ELTEX-SMI", "mp800mkBatConnOkTrap"), ("ELTEX-SMI", "omsOperationCommandAlarm"), ("ELTEX-SMI", "omsOperationCommandOk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eltrapNotificationGroup = eltrapNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: eltrapNotificationGroup.setDescription('')
eltrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34300, 3, 101)).setObjects(("ELTEX-SMI", "mcTrapExState"), ("ELTEX-SMI", "mcTrapLParam1"), ("ELTEX-SMI", "mcTrapLParam2"), ("ELTEX-SMI", "mcTrapLParam3"), ("ELTEX-SMI", "mcTrapID"), ("ELTEX-SMI", "mcTrapDescr"), ("ELTEX-SMI", "mcTrapRestoredAlarmID"), ("ELTEX-SMI", "mcTrapSyncType"), ("ELTEX-SMI", "mcReservedFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eltrapObjectGroup = eltrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: eltrapObjectGroup.setDescription('')
mibBuilder.exportSymbols("ELTEX-SMI", dslamLinkDownTrap=dslamLinkDownTrap, mc240CardAlarmTrap=mc240CardAlarmTrap, mp800mkVbatMAlarmTrap=mp800mkVbatMAlarmTrap, mp800mkTrapComment=mp800mkTrapComment, mc240FileOkTrap=mc240FileOkTrap, mp800mkMPStatusAlarmTrap=mp800mkMPStatusAlarmTrap, dslamEthLinkOkTrap=dslamEthLinkOkTrap, mp800mkIbatMAlarmTrap=mp800mkIbatMAlarmTrap, omsOperationOkTraps=omsOperationOkTraps, mc240ss7LinkAlarmTrap=mc240ss7LinkAlarmTrap, dslamDSRateOkTrap=dslamDSRateOkTrap, mc240SensOkTrap=mc240SensOkTrap, mc240ss7LinkOkTrap=mc240ss7LinkOkTrap, mp800mkIbatChAlarmTrap=mp800mkIbatChAlarmTrap, mc240FileAlarmTrap=mc240FileAlarmTrap, mp800mkACVMOkTrap=mp800mkACVMOkTrap, mp800mkVbatChOkTrap=mp800mkVbatChOkTrap, mp800mkIbatChOkTrap=mp800mkIbatChOkTrap, mp800mkTrapValue=mp800mkTrapValue, mp800mkBatConnOkTrap=mp800mkBatConnOkTrap, eltrapNotificationGroup=eltrapNotificationGroup, mp800mkVbatChAlarmTrap=mp800mkVbatChAlarmTrap, dslamUSRateAlarmTrap=dslamUSRateAlarmTrap, mc240TrapTypes=mc240TrapTypes, dslamVoltageOkTrap=dslamVoltageOkTrap, mp800mkDVcellAlarmTrap=mp800mkDVcellAlarmTrap, mc240SensAlarmTrap=mc240SensAlarmTrap, elSoftware=elSoftware, omsOperationCommandOk=omsOperationCommandOk, dslamVoltageAlarmTrap=dslamVoltageAlarmTrap, mxlDPSAlarmTrap=mxlDPSAlarmTrap, ponONUAuthAlarmTrap=ponONUAuthAlarmTrap, mp800mkUEPConfOkTrap=mp800mkUEPConfOkTrap, mcTrapLParam3=mcTrapLParam3, ponONUAuthOkTrap=ponONUAuthOkTrap, mc240UPSOkTrap=mc240UPSOkTrap, mp800mkInpParmOkTrap=mp800mkInpParmOkTrap, mc240ss7LinksetOkTrap=mc240ss7LinksetOkTrap, mxlDPSOkTrap=mxlDPSOkTrap, ponOpticalOkTrap=ponOpticalOkTrap, mp800mkIbatMOkTrap=mp800mkIbatMOkTrap, mp800mkInpParmAlarmTrap=mp800mkInpParmAlarmTrap, mp800mkMPStatusOkTrap=mp800mkMPStatusOkTrap, mp800mkVbatMOkTrap=mp800mkVbatMOkTrap, mc240SyncAlarmTrap=mc240SyncAlarmTrap, mcTrapExState=mcTrapExState, mp800mkRlsDevAlarmTrap=mp800mkRlsDevAlarmTrap, dslamSessionAlarmTrap=dslamSessionAlarmTrap, mp800mkTrapTypes=mp800mkTrapTypes, ponEthAlarmTrap=ponEthAlarmTrap, mcReservedFlag=mcReservedFlag, dslamDSRateAlarmTrap=dslamDSRateAlarmTrap, mp800mkDVcellOkTrap=mp800mkDVcellOkTrap, omsOperationAlarmTraps=omsOperationAlarmTraps, mcTrapRestoredAlarmID=mcTrapRestoredAlarmID, mcTrapLParam2=mcTrapLParam2, elHardware=elHardware, dslamOverheatAlarmTrap=dslamOverheatAlarmTrap, mc240StreamOkTrap=mc240StreamOkTrap, mcTrapDescr=mcTrapDescr, mc240OkTraps=mc240OkTraps, eltrapObjectGroup=eltrapObjectGroup, mc240SyncOkTrap=mc240SyncOkTrap, mp800mkTMAlarmTrap=mp800mkTMAlarmTrap, dslamLinkUpTrap=dslamLinkUpTrap, mp800mkBatChargeOkTrap=mp800mkBatChargeOkTrap, mc240StreamAlarmTrap=mc240StreamAlarmTrap, mp800mkBatConnAlarmTrap=mp800mkBatConnAlarmTrap, mcTrapID=mcTrapID, mp800mkACVOkTrap=mp800mkACVOkTrap, ponOpticalAlarmTrap=ponOpticalAlarmTrap, mp800mkOkTraps=mp800mkOkTraps, mp800mkSuppAlarmTrap=mp800mkSuppAlarmTrap, mp800mkUEPConfAlarmTrap=mp800mkUEPConfAlarmTrap, mc240CardOkTrap=mc240CardOkTrap, mp800mkIloadAlarmTrap=mp800mkIloadAlarmTrap, PYSNMP_MODULE_ID=eltex, mxlTELEOkTrap=mxlTELEOkTrap, mp800mkAlarmTraps=mp800mkAlarmTraps, mc240AlarmTraps=mc240AlarmTraps, mp800mkTrapParameter=mp800mkTrapParameter, dslamEthLinkAlarmTrap=dslamEthLinkAlarmTrap, mp800mkSuppOkTrap=mp800mkSuppOkTrap, omsOperationCommandAlarm=omsOperationCommandAlarm, eltrapGroup=eltrapGroup, mp800mkIloadOkTrap=mp800mkIloadOkTrap, mcTrapSyncType=mcTrapSyncType, mcTrapLParam1=mcTrapLParam1, mp800mkRlsDevOkTrap=mp800mkRlsDevOkTrap, ponEthOkTrap=ponEthOkTrap, dslamOverheatOkTrap=dslamOverheatOkTrap, dslamSessionOkTrap=dslamSessionOkTrap, mxlTELEAlarmTrap=mxlTELEAlarmTrap, mp800mkACVAlarmTrap=mp800mkACVAlarmTrap, eltex=eltex, mc240ss7LinksetAlarmTrap=mc240ss7LinksetAlarmTrap, dslamUSRateOkTrap=dslamUSRateOkTrap, mc240UPSAlarmTrap=mc240UPSAlarmTrap, mp800mkTMOkTrap=mp800mkTMOkTrap, mp800mkBatChargeAlarmTrap=mp800mkBatChargeAlarmTrap, mp800mkACVMAlarmTrap=mp800mkACVMAlarmTrap)
