#
# PySNMP MIB module ADTRAN-ATLAS-UNIT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-ATLAS-UNIT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
frCircuitDlci, frCircuitIfIndex = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitDlci", "frCircuitIfIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, enterprises, Counter64, Gauge32, NotificationType, Bits, TimeTicks, ObjectIdentity, ModuleIdentity, IpAddress, Integer32, Unsigned32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Counter64", "Gauge32", "NotificationType", "Bits", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Integer32", "Unsigned32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adtran = MibIdentifier((1, 3, 6, 1, 4, 1, 664))
adMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2))
adATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154))
adGenATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1))
adATLASUnitmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5))
adATLASUnitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1))
adATLASUnitUtil = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3))
adATLASUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 4))
adATLASUpdateFw = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1))
adATLASConfigXfer = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2))
class AdTftpConfigXferStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("idle", 1), ("tftpFilenotFound", 2), ("tftpServerTimeout", 3), ("errorNotEnoughMmemory", 4), ("tftpDownloadInProgress", 5), ("tftpUploadInProgress", 6), ("tftpDownloadFailed", 7), ("tftpUploadFailed", 8), ("tftpDownloadComplete", 9), ("tftpUploadComplete", 10), ("tftpBadConfigFile", 11), ("tftpBadFilesize", 12), ("tftpNVRAMcfgCopyFailed", 13), ("downloadCopyingInternalConfig", 14), ("tftpFiletypeNotBinary", 15), ("tftpFileRevisionTooOld", 16), ("tftpRemoteDiskFull", 17), ("tftpFileAlreadyExists", 18), ("tftpFileAccessViolation", 19), ("tftpBadFileChecksum", 20), ("tftpReadNVRAMparseFailed", 21), ("downoadWaitingOnNVRAMsave", 22), ("uploadWritingInternalConfig", 23))

adATLASUnitIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitIfNumber.setDescription('The number of physical interfaces (regardless of their current state) present on this system. The same as ifNumber defined in the MIB-2 interfaces group.')
adATLASUnitPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 2), )
if mibBuilder.loadTexts: adATLASUnitPortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortInfoTable.setDescription('A table of hardware oriented port information on each card. This only includes actual card ports, and not layered logical interfaces.')
adATLASUnitPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 2, 1), ).setIndexNames((0, "ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), (0, "ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"))
if mibBuilder.loadTexts: adATLASUnitPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortInfoEntry.setDescription('A row table entry exists for each card/port pair.')
adATLASUnitPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inTest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortStatus.setDescription('The current status of the port.')
adATLASUnitPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortIfIndex.setDescription('The interface number identified as ifIndex from the MIB-II interfaces table as defined by the slot and port numbers in this device.')
adATLASUnitPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitPortDescription.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortDescription.setDescription('A character string to identify the name of a port.')
adATLASUnitPortSlotMapTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 3), )
if mibBuilder.loadTexts: adATLASUnitPortSlotMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortSlotMapTable.setDescription('Table to map ifIndex to slot and port.')
adATLASUnitPortSlotMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adATLASUnitPortSlotMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortSlotMapEntry.setDescription('An entry exists for each interface which is mapped to a physical slot/port pair.')
adATLASUnitSlotAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitSlotAddress.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitSlotAddress.setDescription('The slot in which this port is contained. Slot 0 is reported for the system controller and all logical interfaces.')
adATLASUnitPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitPortAddress.setDescription('The port number within the slot. Port 0 is reported for all logical interfaces.')
adATLASUpdateFwModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASUpdateFwModuleNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUpdateFwModuleNum.setDescription('The slot containing the module to be updated with the firmware. If -1 is returned, no slot has been selected.')
adATLASUpdateFwTFTPSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASUpdateFwTFTPSrvAddr.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUpdateFwTFTPSrvAddr.setDescription('The IP address of the TFTP server.')
adATLASUpdateFwTFTPSrvFileName = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASUpdateFwTFTPSrvFileName.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUpdateFwTFTPSrvFileName.setDescription('The name of the file to transfer from the TFTP server.')
adATLASUpdateFwCurrStatus = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUpdateFwCurrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUpdateFwCurrStatus.setDescription('Status of the current firmware update.')
adATLASUpdateFwPrevStatus = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUpdateFwPrevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUpdateFwPrevStatus.setDescription('Status of the previous firmware update.')
adATLASUpdateFwControl = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASUpdateFwControl.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUpdateFwControl.setDescription('Start the firmware update by setting value to 1 and stop the firmware update in progress by setting value to 2. The value will be 2 if a firmware update is in progress, and 1 otherwise.')
adATLASConfigXferTFTPSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASConfigXferTFTPSrvAddr.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASConfigXferTFTPSrvAddr.setDescription('The IP address of the TFTP server.')
adATLASConfigXferTFTPSrvFileName = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASConfigXferTFTPSrvFileName.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASConfigXferTFTPSrvFileName.setDescription('The name of the file to transfer to/from the TFTP server.')
adATLASConfigXferCurrStatus = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2, 3), AdTftpConfigXferStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASConfigXferCurrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASConfigXferCurrStatus.setDescription('Status of the current configuration transfer.')
adATLASConfigXferPrevStatus = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2, 4), AdTftpConfigXferStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASConfigXferPrevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASConfigXferPrevStatus.setDescription('Status of the previous configuration transfer.')
adATLASConfigXferDwnldControl = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("loadAndUseCfg", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASConfigXferDwnldControl.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASConfigXferDwnldControl.setDescription('Set value to 1 to transfer the configuration file from the TFTP server and switch to the configuration.')
adATLASConfigXferUpldControl = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("saveCfg", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASConfigXferUpldControl.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASConfigXferUpldControl.setDescription('Set value to 1 to transfer the configuration file to the TFTP server.')
adATLASUnitFPStatus = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASUnitFPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASUnitFPStatus.setDescription('A bit-encoded variable that gives the overall front panel status of the Atlas product. It is encoded as follows: OFF 0x00 OK 0x01 ONLINE 0x02 TESTING 0x04 FLASH DOWNLOAD 0x08 ERROR 0x10 ALARM 0x20 STANDBY 0x40 WARN 0x80 Note: Multiple bits may be set concurrently, based on the current state of the modules contained within the Atlas product.')
adATLASFrSwToBkup = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400500)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: adATLASFrSwToBkup.setDescription('This trap indicates that the indicated Virtual Circuit has switched to a backup state.')
adATLASFrSwToPrimary = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400501)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: adATLASFrSwToPrimary.setDescription('This trap indicates that the indicated Virtual Circuit has been restored to the primary state.')
mibBuilder.exportSymbols("ADTRAN-ATLAS-UNIT-MIB", adATLASConfigXferTFTPSrvAddr=adATLASConfigXferTFTPSrvAddr, adATLASConfigXfer=adATLASConfigXfer, adATLASConfigXferDwnldControl=adATLASConfigXferDwnldControl, adATLASUpdateFwControl=adATLASUpdateFwControl, adATLASUpdateFwTFTPSrvAddr=adATLASUpdateFwTFTPSrvAddr, adATLASConfigXferTFTPSrvFileName=adATLASConfigXferTFTPSrvFileName, adATLASUnitPortSlotMapEntry=adATLASUnitPortSlotMapEntry, adATLASUnitPortIfIndex=adATLASUnitPortIfIndex, adATLASUnitSlotAddress=adATLASUnitSlotAddress, adATLASUnitPortAddress=adATLASUnitPortAddress, adATLASConfigXferUpldControl=adATLASConfigXferUpldControl, adATLASUnitPortInfoTable=adATLASUnitPortInfoTable, adATLASUnitInfo=adATLASUnitInfo, adATLASUpdateFwModuleNum=adATLASUpdateFwModuleNum, adATLASFrSwToBkup=adATLASFrSwToBkup, adATLASUpdateFwCurrStatus=adATLASUpdateFwCurrStatus, adATLASUpdateFwPrevStatus=adATLASUpdateFwPrevStatus, adtran=adtran, adATLASUnitPortInfoEntry=adATLASUnitPortInfoEntry, adATLASUnitPortDescription=adATLASUnitPortDescription, adMgmt=adMgmt, adGenATLASmg=adGenATLASmg, AdTftpConfigXferStatus=AdTftpConfigXferStatus, adATLASmg=adATLASmg, adATLASUnitPortStatus=adATLASUnitPortStatus, adATLASFrSwToPrimary=adATLASFrSwToPrimary, adATLASConfigXferPrevStatus=adATLASConfigXferPrevStatus, adATLASUnitUtil=adATLASUnitUtil, adATLASUnitStatus=adATLASUnitStatus, adATLASConfigXferCurrStatus=adATLASConfigXferCurrStatus, adATLASUnitIfNumber=adATLASUnitIfNumber, adATLASUnitmg=adATLASUnitmg, adATLASUnitPortSlotMapTable=adATLASUnitPortSlotMapTable, adATLASUpdateFwTFTPSrvFileName=adATLASUpdateFwTFTPSrvFileName, adATLASUpdateFw=adATLASUpdateFw, adATLASUnitFPStatus=adATLASUnitFPStatus)
