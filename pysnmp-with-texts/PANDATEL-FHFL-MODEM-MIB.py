#
# PySNMP MIB module PANDATEL-FHFL-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-FHFL-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, ObjectIdentity, NotificationType, Unsigned32, enterprises, Gauge32, Integer32, Bits, iso, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "ObjectIdentity", "NotificationType", "Unsigned32", "enterprises", "Gauge32", "Integer32", "Bits", "iso", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fhfl_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 101)).setLabel("fhfl-modem")
fhfl = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101))
fhflModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1), )
if mibBuilder.loadTexts: fhflModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: fhflModemTable.setDescription('Table of all FH/FL modems in all racks.')
fhflTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1), ).setIndexNames((0, "PANDATEL-FHFL-MODEM-MIB", "mdmRack"), (0, "PANDATEL-FHFL-MODEM-MIB", "mdmModem"), (0, "PANDATEL-FHFL-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: fhflTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fhflTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the modem is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This variable displays the slot number where the corresponding modem is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This variable displays the location of the corresponding modem: 'local' or 'remote'. The modem which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this modem.')
mdmInterfaceEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setDescription("Interface mode of the unit: 'dte', 'dce', 'te', or 'nt'.")
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99))).clone(namedValues=NamedValues(("other", 1), ("e1", 2), ("t1", 3), ("e2", 4), ("t2", 5), ("e1-t1", 6), ("e2-t2", 7), ("e3", 8), ("t3", 9), ("hssi", 10), ("atm", 11), ("eth10base-t-fullduplex", 12), ("eth10base-t-halfduplex", 13), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemProperty.setDescription("The speed class of the unit: 'e1' or 't1'.")
mdmClockSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dual", 2), ("single", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSystem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSystem.setDescription("The clock system of the link: 'single' or 'dual'. The remote unit's configuration changes simultaneously.")
mdmClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSource.setDescription("The clock source of the link: 'internal', 'remote' or 'external'.")
mdmDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRate.setDescription('The data rate at the interface in bits per seconds. The data rate at the remote counterpart changes simultaneously.')
mdmLocalCarrierDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 101, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fo-link-and-remote-handshake", 2), ("fo-link", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLocalCarrierDetect.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLocalCarrierDetect.setDescription("The data carrier detect mode at the interface: if set to 'fo-link-and-remote-handshake' the DCD signal (resp. I for X.21, etc.) follows link status and remote RTS (resp. C for X.21, etc.), if set to 'fo-link' the DCD signal follows link status only.")
mibBuilder.exportSymbols("PANDATEL-FHFL-MODEM-MIB", mdmClockSource=mdmClockSource, mdmDataRate=mdmDataRate, mdmInterfaceEmulationMode=mdmInterfaceEmulationMode, fhflTableEntry=fhflTableEntry, mdmModem=mdmModem, fhflModemTable=fhflModemTable, mdmModemName=mdmModemName, mdmLocalCarrierDetect=mdmLocalCarrierDetect, mdmPosition=mdmPosition, mdmClockSystem=mdmClockSystem, mdmModemProperty=mdmModemProperty, fhfl=fhfl, fhfl_modem=fhfl_modem, mdmRack=mdmRack)
