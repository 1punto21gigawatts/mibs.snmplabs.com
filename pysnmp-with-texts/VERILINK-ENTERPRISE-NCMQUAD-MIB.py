#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMQUAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMQUAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, enterprises, iso, MibIdentifier, ObjectIdentity, Gauge32, Bits, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Counter32, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "iso", "MibIdentifier", "ObjectIdentity", "Gauge32", "Bits", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
verilink = MibIdentifier((1, 3, 6, 1, 4, 1, 321))
as2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 1))
ncm_quad = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 1, 3009)).setLabel("ncm-quad")
ncmquadConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000), )
if mibBuilder.loadTexts: ncmquadConfigTable.setStatus('mandatory')
ncmquadConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMQUAD-MIB", "ncmquadLineIndex"))
if mibBuilder.loadTexts: ncmquadConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadConfigEntry.setDescription('An entry in the QUAD Configuration table.')
ncmquadLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLineIndex.setDescription('This object is the identifier of a Inter- face on a managed device. If there is an ifEn- try that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmquadIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadIfIndex.setDescription('This value for this object is equal to the value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
ncmquadEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("near-End", 0), ("far-End", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadEndId.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadEndId.setDescription('This value for this object indicates which end of the equipment it is configuring.')
ncmquadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadPort.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadPort.setDescription('This variable indicates Whether the port is in service or out of service')
ncmquadLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("eSF", 2), ("d4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadLineType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLineType.setDescription('This variable indicates the variety of Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: ESF Extended SuperFrame DS1 D4 AT&T D4 format DS1')
ncmquadLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 2, 5))).clone(namedValues=NamedValues(("other", 6), ("b8ZS", 2), ("aMI", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. B8ZS refers to the use of a specified pat- tern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data.')
ncmquadFDL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadFDL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadFDL.setDescription('The variable specifies the Disable/Enable of the ncmfdl State.')
ncmquadDensityPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("d80Zeros", 1), ("d15Zeros", 2), ("d12d5c80Zero", 3), ("tR-62411", 4), ("other", 5), ("disabled", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadDensityPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadDensityPattern.setDescription("This variable indicates what type of density network is being sent on the port or line by the device. The values mean : 'Disabled' refers to no network ones density exist. 'D80Zeros' refers to send a request for network one's density of 80 zeroes density pattern. 'D15Zeros' refers to send a request for network one's density of 15 zeroes density pattern. 'D12d5c80Zero'refers to send a request for 12.5% and 80 zeroes network one's density pattern. 'TR_62411' refers to sending a request for TR6241 network density pattern. 'Other' refers to sending a network's density pattern other than those described by this object[pvt]**.")
ncmquadNetworkLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bldLn-0db", 1), ("bldLnNeg7d5db", 2), ("bldLnNeg15db", 3), ("bldLnNeg22d5", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadNetworkLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadNetworkLineBuildOut.setDescription('This variable indicates the db rate at which the line or port using, i.e., is 0 , -7.5db, -15db or -22.5db.[pvt]')
ncmquadNetworkLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadNetworkLoopConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadNetworkLoopConfig.setDescription(' This variable represents whether the device can be configured throught the network for loopback. Here values mean : Disabled: This device cannot be loopbacked throught network. Enabled: This device can be loopbacked throught the network.')
ncmquadLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAlarms", 1), ("alarms", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLineStatus.setDescription("This variable indicates the Line Status of the interface. It contains loopback, failure, re- ceived 'alarm' and transmitted 'alarm' infor- mation. NoAlarms This variables indicates their is no alarms on this port or this line. Alarms This variables indicates their is alarms on line with any of the following bit map : The ncmquadLineStatus is a bit map represented as a sum, therefore, it can represent multiple failures (alarms) and a LoopbackState simultaneously. If the ncmquadLoopbackState bit is set, the loopback in ef- fect can be determined from the ncmquadLoopbackConfig object. The various bit positions are: 0 Reserved 1 quadCRC6error (1 = yes, 0 = no) 2 Reserved 3 FramingSlip (1 = yes, 0 = no) 4 quadRAI (1 = yes, 0 = no) 5 quadLOF LOF (1 = yes, 0 = no) 6 quadAIS AIS (1 = yes, 0 = no) 7 quadLOS LOS (1 = yes, 0 = no) 8~15 ReservedForOtherFailure ")
ncmquadLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 3, 10, 5, 11, 7, 13, 8, 14))).clone(namedValues=NamedValues(("noLoop", 1), ("quadActPayloadLoop", 2), ("quadDeactPayloadLoop", 9), ("quadActLineLoop", 3), ("quadDeactLineLoop", 10), ("quadActLocalLoopbk", 5), ("quadDeactLocalLoopbk", 11), ("quadActLLBBOP", 7), ("quadDeactLLBBOP", 13), ("quadActPLBBOP", 8), ("quadDeactPLBBOP", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadLoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLoopbackConfig.setDescription("This variable represents the loopback confi- guration of the DS1 interface. Agents support- ing read/write access should return badValue in response to a requested loopback state that the interface does not support. The values mean: quadNoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as it's value. quadPayloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for re- transmission after it has passed through the device's framing function. quadLineLoop The received signal at this interface does not go through the device (minimum pene- tration) but is looped back out. quadLocalLoopbk This variable indicates whether the local loopback is enabled or disabled on the port or line by the device. quadOtherLoop Loopbacks that are not defined here.")
ncmquadSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 7, 8))).clone(namedValues=NamedValues(("noCode", 1), ("qRSS", 5), ("three-in-24type", 7), ("other", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadSendCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadSendCode.setDescription('This variable indicates what type of code is being sent across the DS1 interface by the dev- ice. The values mean: NoCode sending looped or normal data QRSS sending a Quasi-Random Signal (QRSS) test pattern 3in24type sending a fixed test pattern of 3 bits set in 24 Other sending a test pattern other than those described by this object')
ncmquadResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadResetPerfReg.setDescription('Reset Performance Monitoring registers.')
ncmquadValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online.')
ncmquadTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period.')
ncmquadResetT1Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11000, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadResetT1Error.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadResetT1Error.setDescription('This variable indicates the option for reseting the T1 error counters.')
ncmquadLossCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001), )
if mibBuilder.loadTexts: ncmquadLossCurrentTable.setStatus('mandatory')
ncmquadLCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMQUAD-MIB", "ncmquadLCurrentIndex"))
if mibBuilder.loadTexts: ncmquadLCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentEntry.setDescription('An entry in the Loss Current table.')
ncmquadLCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmquadLineIndex object instance.')
ncmquadCurrentEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("near-End", 0), ("far-End", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadCurrentEndId.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadCurrentEndId.setDescription('This value for this object indicates which end of the equipment it is acessing.')
ncmquadLCurrentASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentASs.setDescription('The number of Availabe Seconds, encountered by a DS1 interface in the current 15 minute inter- val. Remark: Available Seconds does not support for QUAD 2164.')
ncmquadLCurrentLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentLOSs.setDescription('The number of Loss Of Signal Seconds encoun- tered by a DS1 interface in the current 15 minute interval.')
ncmquadLCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentAISs.setDescription('The number of Alarm indication Signal Seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmquadLCurrentLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentLOFs.setDescription('The number of Loss of Frame Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentOFs.setDescription('The number of Out of Frame Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentESs.setDescription('The number of Errored Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentSEFs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentUASs.setDescription('The number of Out of Unavailable Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentBESs.setDescription('The number of Bursty Errored Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentESAs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentESAs.setDescription('The number of ESAs encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentSASs.setDescription('The number of SASs encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentCSSs.setDescription('The number of CSSs encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLCurrentLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11001, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLCurrentLOFCs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLCurrentLOFCs.setDescription('The number of LOFCs encountered by a DS1 interface in the current 15 minute in- terval.')
ncmquadLossIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002), )
if mibBuilder.loadTexts: ncmquadLossIntervalTable.setStatus('mandatory')
ncmquadLIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMQUAD-MIB", "ncmquadLIntervalIndex"))
if mibBuilder.loadTexts: ncmquadLIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalEntry.setDescription('An entry in the Loss Interval table.')
ncmquadLIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmquadLineIndex object instance.')
ncmquadLIntervalEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("near-End", 0), ("far-End", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalEndId.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalEndId.setDescription('This value for this object indicates which end of the equipment it is accessing.')
ncmquadLIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmquadLIntervalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in one of the previous 96, indi- vidual 15 minute, intervals. Remark: Available Seconds does not support for QUAD 2164.')
ncmquadLIntervalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalLOSs.setDescription('The number of Loss of Signal Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalAISs.setDescription('The number of Alarm Indication Signal Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalLOFs.setDescription('The number of Loss Of Frame Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalOFs.setDescription('The number of Out Of Frame Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalESs.setDescription('The number of Error Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalSESs.setDescription('The number of Severe Error Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalSEFs.setDescription('The number of Severly Errored Frame Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalBESs.setDescription('The number of Bursty Error Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalESAs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalESAs.setDescription('The number of ESAs Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalSASs.setDescription('The number of SASs encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalCSSs.setDescription('The number of CSSs encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLIntervalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11002, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLIntervalLOFCs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLIntervalLOFCs.setDescription('The number of LOFCs encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmquadLossTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003), )
if mibBuilder.loadTexts: ncmquadLossTotalTable.setStatus('mandatory')
ncmquadLTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMQUAD-MIB", "ncmquadLTotalIndex"))
if mibBuilder.loadTexts: ncmquadLTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalEntry.setDescription('An entry in the DS1 Total Loss table.')
ncmquadLTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmquadLineIndex object instance.')
ncmquadTotalEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("near-End", 0), ("far-End", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadTotalEndId.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadTotalEndId.setDescription('This value for this object indicates which end of the equipment it is accessing.')
ncmquadLTotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in the previous 24 hour interval. Remark: Available Seconds does not support for QUAD 2164.')
ncmquadLTotalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalLOSs.setDescription('The number of Loss Of Signal Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalAISs.setDescription('The number of Alarm Indication Signal Seconds encountered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalLOFs.setDescription('The number of Loss Of Frame Seconds encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmquadLTotalOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalOFs.setDescription('The number of Controlled Slip Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalESs.setDescription('The number of Errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalSESs.setDescription('The number of Severly Errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalSEFs.setDescription('The number of Severly Errored Frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalBESs.setDescription('The number of Bursty Errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalESAs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalESAs.setDescription('The number of ESAs Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalSASs.setDescription('The number of SASs encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalCSSs.setDescription('The number of CSSs Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmquadLTotalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11003, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadLTotalLOFCs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadLTotalLOFCs.setDescription('The number of LOFCs Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmadvancedT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004), )
if mibBuilder.loadTexts: ncmadvancedT1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvancedT1ConfigTable.setDescription('The ncmadvanced T1 Configuration table.')
ncmadvancedT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMQUAD-MIB", "ncmadvancedT1LineIndex"))
if mibBuilder.loadTexts: ncmadvancedT1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvancedT1ConfigEntry.setDescription('An entry in the ncmadvanced T1 Configuration table.')
ncmadvancedT1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmadvancedT1LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvancedT1LineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmportIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("port-1", 0), ("port-2", 1), ("port-3", 2), ("port-4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmportIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ncmportIdentifier.setDescription('The variable specifies the port identifier and port_3 and port_4 are for Quad T1 only.')
ncmfdlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("terminated", 0), ("pass", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlMode.setDescription('The variable specifies the ncmfdl mode which is bit 0 of ncmfdl Parameter1.')
ncmfdlStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 8, 12))).clone(namedValues=NamedValues(("reserved", 0), ("type-54016", 4), ("type-T1-403", 8), ("type-both", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlStandard.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlStandard.setDescription('The variable specifies the ncmfdl standard which is bits 1 and bit 2 of ncmfdl Parameter1.')
ncmfdlPerformanceReport = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 32, 64))).clone(namedValues=NamedValues(("disable", 0), ("user", 32), ("telco", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlPerformanceReport.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlPerformanceReport.setDescription('The variable specifies the ncmfdl standard which is bits 3 and bit 4 of ncmfdl Parameter1.')
ncmfdlLBEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlLBEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlLBEnableDisable.setDescription('The variable specifies the Disable/Enable of the ncmfdl Loopback which is bit 0 of the ncmfdl_loop')
ncmfdlLLBT1BOPMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlLLBT1BOPMsg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlLLBT1BOPMsg.setDescription('The variable specifies the Disable/Enable of the send/receive of the LLB T1.403 BOP Messages. It is the bit 1 of the ncmfdl_loop')
ncmfdlPLBT1BOPMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlPLBT1BOPMsg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlPLBT1BOPMsg.setDescription('The variable specifies the Disable/Enable of the send/receive of the PLB T1.403 BOP Messages. It is the bit 2 of the ncmfdl_loop')
ncmfdlIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-ones", 0), ("flags", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlIdlePattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlIdlePattern.setDescription('The variable specifies the ncmfdl idle pattern which is bit 0 of ncmfdl Parameter2.')
ncmfdlMonitoringCsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11004, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 8))).clone(namedValues=NamedValues(("polling", 0), ("no-polling", 4), ("unsolicited-messages", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmfdlMonitoringCsuType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmfdlMonitoringCsuType.setDescription('The variable specifies the ncmfdl standard which is bits 1 and bit 2 of ncmfdl Parameter2.')
ncmquadSyncTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005), )
if mibBuilder.loadTexts: ncmquadSyncTable.setStatus('mandatory')
ncmquadSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMQUAD-MIB", "ncmquadLineIndex"))
if mibBuilder.loadTexts: ncmquadSyncEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadSyncEntry.setDescription('An entry in the QUAD Sync Time table.')
ncmquadSyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadSyncIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadSyncIndex.setDescription('This object is the identifier of a Inter- face on a managed device. If there is an ifEn- try that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmquadSyncEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("near-End", 0), ("far-End", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadSyncEndId.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadSyncEndId.setDescription('This value for this object indicates which end of the equipment it is configuring.')
ncmquadClkSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("primary", 0), ("alt-1", 1), ("alt-2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmquadClkSyncSource.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkSyncSource.setDescription('This variable indicates Current Clk Source Active i.e., primary, Alt_1 or Alt_2 source.')
ncmquadClkCardPrim = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("c-1", 0), ("c-2", 1), ("c-3", 2), ("c-4", 3), ("c-5", 4), ("c-6", 5), ("c-7", 6), ("c-8", 7), ("c-9", 8), ("c-10", 9), ("c-11", 10), ("c-12", 11), ("c-13", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadClkCardPrim.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkCardPrim.setDescription(' This variable indicates the primary clock source from which card of the that shelf. ')
ncmquadClkSyncPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 0), ("external", 1), ("masterNet1", 2), ("masterNet2", 3), ("masterNet3", 4), ("masterNet4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadClkSyncPrimary.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkSyncPrimary.setDescription('This variable indicates the Clock source internal, external or network port. Setting Auto restore one can have auto restore Capability.')
ncmquadAutoRestorePrim = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadAutoRestorePrim.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadAutoRestorePrim.setDescription('This variable indicates the Clock source auto restore or not for Internal, external or network clocks.')
ncmquadClkCardAlt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("c-1", 0), ("c-2", 1), ("c-3", 2), ("c-4", 3), ("c-5", 4), ("c-6", 5), ("c-7", 6), ("c-8", 7), ("c-9", 8), ("c-10", 9), ("c-11", 10), ("c-12", 11), ("c-13", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadClkCardAlt1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkCardAlt1.setDescription(' This variable indicates the primary clock source from which card of the that shelf. ')
ncmquadClkSyncAlt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 0), ("external", 1), ("masterNet1", 2), ("masterNet2", 3), ("masterNet3", 4), ("masterNet4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadClkSyncAlt1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkSyncAlt1.setDescription('This variable indicates the Clock source internal, external or network port. Setting Auto restore one can have auto restore Capability.')
ncmquadAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadAutoRestore1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadAutoRestore1.setDescription('This variable indicates the Clock source auto restore or not for Internal, external or network clocks.')
ncmquadClkCardAlt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("c-1", 0), ("c-2", 1), ("c-3", 2), ("c-4", 3), ("c-5", 4), ("c-6", 5), ("c-7", 6), ("c-8", 7), ("c-9", 8), ("c-10", 9), ("c-11", 10), ("c-12", 11), ("c-13", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadClkCardAlt2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkCardAlt2.setDescription(' This variable indicates the primary clock source from which card of the that shelf. ')
ncmquadClkSyncAlt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 0), ("external", 1), ("masterNet1", 2), ("masterNet2", 3), ("masterNet3", 4), ("masterNet4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadClkSyncAlt2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadClkSyncAlt2.setDescription('This variable indicates the Clock source internal, external or network port. Setting Auto restore one can have auto restore Capability.')
ncmquadAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3009, 11005, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmquadAutoRestore2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmquadAutoRestore2.setDescription('This variable indicates the Clock source auto restore or not for Internal, external or network clocks.')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMQUAD-MIB", ncmquadFDL=ncmquadFDL, ncmquadLTotalBESs=ncmquadLTotalBESs, ncmquadLossTotalTable=ncmquadLossTotalTable, ncmfdlLBEnableDisable=ncmfdlLBEnableDisable, ncmquadLTotalSASs=ncmquadLTotalSASs, ncmquadLTotalIndex=ncmquadLTotalIndex, ncmquadEndId=ncmquadEndId, ncmquadLIntervalEndId=ncmquadLIntervalEndId, ncmadvancedT1ConfigTable=ncmadvancedT1ConfigTable, ncmquadLoopbackConfig=ncmquadLoopbackConfig, verilink=verilink, ncmquadLIntervalAISs=ncmquadLIntervalAISs, ncmquadLIntervalESAs=ncmquadLIntervalESAs, ncmquadResetPerfReg=ncmquadResetPerfReg, ncmquadLIntervalCSSs=ncmquadLIntervalCSSs, ncmquadNetworkLineBuildOut=ncmquadNetworkLineBuildOut, ncmquadLCurrentSEFs=ncmquadLCurrentSEFs, ncmquadSendCode=ncmquadSendCode, ncmquadTimeElapsed=ncmquadTimeElapsed, ncmquadLIntervalLOSs=ncmquadLIntervalLOSs, ncmquadValidIntervals=ncmquadValidIntervals, ncmquadPort=ncmquadPort, ncmquadLTotalOFs=ncmquadLTotalOFs, ncm_quad=ncm_quad, ncmquadSyncEndId=ncmquadSyncEndId, ncmquadLIntervalOFs=ncmquadLIntervalOFs, ncmquadLineType=ncmquadLineType, ncmfdlIdlePattern=ncmfdlIdlePattern, ncmquadLTotalEntry=ncmquadLTotalEntry, ncmquadAutoRestore2=ncmquadAutoRestore2, ncmquadLIntervalSASs=ncmquadLIntervalSASs, ncmquadLTotalUASs=ncmquadLTotalUASs, ncmquadClkSyncSource=ncmquadClkSyncSource, ncmquadLIntervalSESs=ncmquadLIntervalSESs, as2000=as2000, ncmquadLCurrentESAs=ncmquadLCurrentESAs, ncmquadLIntervalSEFs=ncmquadLIntervalSEFs, ncmquadSyncTable=ncmquadSyncTable, ncmquadTotalEndId=ncmquadTotalEndId, ncmquadLIntervalUASs=ncmquadLIntervalUASs, ncmquadLossCurrentTable=ncmquadLossCurrentTable, ncmquadConfigTable=ncmquadConfigTable, ncmquadIfIndex=ncmquadIfIndex, ncmfdlPLBT1BOPMsg=ncmfdlPLBT1BOPMsg, ncmquadLIntervalBESs=ncmquadLIntervalBESs, ncmquadLIntervalLOFs=ncmquadLIntervalLOFs, ncmquadClkCardAlt1=ncmquadClkCardAlt1, ncmquadClkCardAlt2=ncmquadClkCardAlt2, ncmquadLCurrentOFs=ncmquadLCurrentOFs, ncmquadLTotalLOFCs=ncmquadLTotalLOFCs, ncmquadLIntervalASs=ncmquadLIntervalASs, ncmquadLCurrentSESs=ncmquadLCurrentSESs, ncmquadLineCoding=ncmquadLineCoding, ncmfdlStandard=ncmfdlStandard, ncmquadLTotalESAs=ncmquadLTotalESAs, ncmquadLCurrentLOFCs=ncmquadLCurrentLOFCs, ncmquadLIntervalIndex=ncmquadLIntervalIndex, ncmquadLTotalSESs=ncmquadLTotalSESs, ncmfdlMode=ncmfdlMode, ncmquadLineIndex=ncmquadLineIndex, ncmquadLTotalLOFs=ncmquadLTotalLOFs, ncmportIdentifier=ncmportIdentifier, ncmquadLineStatus=ncmquadLineStatus, ncmquadLIntervalLOFCs=ncmquadLIntervalLOFCs, ncmquadLIntervalNumber=ncmquadLIntervalNumber, ncmfdlLLBT1BOPMsg=ncmfdlLLBT1BOPMsg, ncmquadLTotalCSSs=ncmquadLTotalCSSs, ncmquadLCurrentBESs=ncmquadLCurrentBESs, ncmquadClkSyncAlt2=ncmquadClkSyncAlt2, ncmquadClkSyncPrimary=ncmquadClkSyncPrimary, ncmquadClkSyncAlt1=ncmquadClkSyncAlt1, ncmquadLCurrentEntry=ncmquadLCurrentEntry, ncmquadResetT1Error=ncmquadResetT1Error, ncmquadLTotalSEFs=ncmquadLTotalSEFs, ncmadvancedT1LineIndex=ncmadvancedT1LineIndex, ncmfdlPerformanceReport=ncmfdlPerformanceReport, ncmquadLIntervalEntry=ncmquadLIntervalEntry, ncmquadConfigEntry=ncmquadConfigEntry, ncmquadLossIntervalTable=ncmquadLossIntervalTable, ncmquadLTotalASs=ncmquadLTotalASs, ncmquadLCurrentIndex=ncmquadLCurrentIndex, ncmquadLTotalESs=ncmquadLTotalESs, ncmquadLCurrentCSSs=ncmquadLCurrentCSSs, ncmquadLTotalLOSs=ncmquadLTotalLOSs, ncmquadLCurrentUASs=ncmquadLCurrentUASs, ncmfdlMonitoringCsuType=ncmfdlMonitoringCsuType, ncmquadAutoRestore1=ncmquadAutoRestore1, ncmquadLCurrentLOFs=ncmquadLCurrentLOFs, ncmquadLCurrentSASs=ncmquadLCurrentSASs, ncmquadLCurrentAISs=ncmquadLCurrentAISs, ncmquadLIntervalESs=ncmquadLIntervalESs, ncmquadClkCardPrim=ncmquadClkCardPrim, ncmquadLCurrentASs=ncmquadLCurrentASs, ncmquadLCurrentLOSs=ncmquadLCurrentLOSs, ncmquadLTotalAISs=ncmquadLTotalAISs, ncmquadNetworkLoopConfig=ncmquadNetworkLoopConfig, ncmquadDensityPattern=ncmquadDensityPattern, ncmquadLCurrentESs=ncmquadLCurrentESs, ncmquadSyncEntry=ncmquadSyncEntry, ncmquadCurrentEndId=ncmquadCurrentEndId, ncmquadSyncIndex=ncmquadSyncIndex, ncmadvancedT1ConfigEntry=ncmadvancedT1ConfigEntry, ncmquadAutoRestorePrim=ncmquadAutoRestorePrim)
