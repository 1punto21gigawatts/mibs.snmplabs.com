#
# PySNMP MIB module D5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/D5-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:36:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipAdEntAddr, = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysDescr, snmp, sysUpTime = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "snmp", "sysUpTime")
IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType, enterprises, Integer32, ObjectIdentity, Counter32, MibIdentifier, iso, Counter64, Gauge32, ModuleIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType", "enterprises", "Integer32", "ObjectIdentity", "Counter32", "MibIdentifier", "iso", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

symplex = MibIdentifier((1, 3, 6, 1, 4, 1, 385))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1))
datamizerHseries = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 1))
directrouteSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 2))
directroute4Series = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 3))
datamizerVseries = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 4))
drcalldata = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 4, 1))
callDataTrapAddr = MibScalar((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataTrapAddr.setStatus('mandatory')
if mibBuilder.loadTexts: callDataTrapAddr.setDescription('The IP address of the device to which Call Data traps will be sent. Set to 0.0.0.0 to disable Call Data traps.')
callDataTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataTotalActiveCalls.setStatus('mandatory')
if mibBuilder.loadTexts: callDataTotalActiveCalls.setDescription('The total number of currently active calls.')
callDataActvTable = MibTable((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3), )
if mibBuilder.loadTexts: callDataActvTable.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvTable.setDescription('A list of active call entries.')
callDataActvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1), ).setIndexNames((0, "D5-MIB", "callDataActvIndex"))
if mibBuilder.loadTexts: callDataActvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvEntry.setDescription('')
callDataActvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvIndex.setDescription('The index of this call event in the callDataTable.')
callDataActvReqTime = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvReqTime.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvReqTime.setDescription('The time that this call was initiated.')
callDataActvEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvEstTime.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvEstTime.setDescription('The time that this call connected to the remote system.')
callDataActvCurrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvCurrTime.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvCurrTime.setDescription('This field will return the current timestamp.')
callDataActvSourceSys = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvSourceSys.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvSourceSys.setDescription('The System Name of the unit making the call.')
callDataActvDestSys = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvDestSys.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvDestSys.setDescription('The System Name of the unit being called.')
callDataActvPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvPhoneNum.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvPhoneNum.setDescription('The Phone Number used when the call was placed.')
callDataActvBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvBandwidth.setDescription('The speed in bps used for the connection.')
callDataActvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("active", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataActvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: callDataActvStatus.setDescription('The current status of the call. (call active, call failed, etc.)')
callDataCompTable = MibTable((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4), )
if mibBuilder.loadTexts: callDataCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompTable.setDescription('A list of completed call entries.')
callDataCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1), ).setIndexNames((0, "D5-MIB", "callDataCompIndex"))
if mibBuilder.loadTexts: callDataCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompEntry.setDescription('')
callDataCompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompIndex.setDescription('The index of this call event in the callDataTable.')
callDataCompReqTime = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompReqTime.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompReqTime.setDescription('The time that this call was initiated.')
callDataCompEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompEstTime.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompEstTime.setDescription('The time that this call connected to the remote system.')
callDataCompRelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompRelTime.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompRelTime.setDescription('The time that an established call released, or a requested call was marked as failing.')
callDataCompSourceSys = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompSourceSys.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompSourceSys.setDescription('The System Name of the unit making the call.')
callDataCompDestSys = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompDestSys.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompDestSys.setDescription('The System Name of the unit being called.')
callDataCompPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompPhoneNum.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompPhoneNum.setDescription('The Phone Number used when the call was placed.')
callDataCompBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompBandwidth.setDescription('The speed in bps used for the connection.')
callDataCompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("active", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callDataCompStatus.setStatus('mandatory')
if mibBuilder.loadTexts: callDataCompStatus.setDescription('The current status of the call. (call active, call failed, etc.)')
d5system = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 4, 2))
drProdType = MibScalar((1, 3, 6, 1, 4, 1, 385, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("datamizer-5", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drProdType.setStatus('mandatory')
if mibBuilder.loadTexts: drProdType.setDescription('The type of product.')
drSoftVersion = MibScalar((1, 3, 6, 1, 4, 1, 385, 1, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drSoftVersion.setStatus('mandatory')
if mibBuilder.loadTexts: drSoftVersion.setDescription('The Software version.')
d5stats = MibIdentifier((1, 3, 6, 1, 4, 1, 385, 1, 4, 3))
d5PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1), )
if mibBuilder.loadTexts: d5PortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: d5PortStatsTable.setDescription('A list of statistics collected for each Datamizer V port.')
d5PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1), ).setIndexNames((0, "D5-MIB", "d5StatsPortIndex"))
if mibBuilder.loadTexts: d5PortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: d5PortStatsEntry.setDescription('')
d5StatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("briA", 1), ("briB", 2), ("briC", 3), ("briD", 4), ("lanE", 5), ("serialHostF", 6), ("serialTrunkG", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortIndex.setDescription('The index of this port in the d5StatsTable.')
d5StatsPortPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortPacketsIn.setDescription('Raw count of incoming packets received on this port since power-up.')
d5StatsPortPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortPacketsOut.setDescription('Raw count of outgoing packets transmitted on this port since power-up.')
d5StatsPortPPSIn = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortPPSIn.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortPPSIn.setDescription('Received packets per second averaged over a configured interval.')
d5StatsPortPPSOut = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortPPSOut.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortPPSOut.setDescription('Transmitted packets per second averaged over a configured interval.')
d5StatsPortBPSIn = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortBPSIn.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortBPSIn.setDescription('Received bits per second averaged over a configured interval.')
d5StatsPortBPSOut = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5StatsPortBPSOut.setStatus('mandatory')
if mibBuilder.loadTexts: d5StatsPortBPSOut.setDescription('Transmitted bits per second averaged over a configured interval.')
d5PortStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one-minute", 1), ("fifteen-minutes", 2), ("thirty-minutes", 3), ("sixty-minutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d5PortStatsInterval.setStatus('mandatory')
if mibBuilder.loadTexts: d5PortStatsInterval.setDescription('The length of time over which the preceding stats are averaged.')
d5SystemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 3), )
if mibBuilder.loadTexts: d5SystemStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: d5SystemStatsTable.setDescription('A list of events collected for this Datamizer V unit.')
d5SystemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 3, 1), ).setIndexNames((0, "D5-MIB", "d5SystemStatsIndex"))
if mibBuilder.loadTexts: d5SystemStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: d5SystemStatsEntry.setDescription('')
d5SystemStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wanDataErrors", 1), ("serialHostDataErrors", 2), ("lanDataErrors", 3), ("congestionDetection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5SystemStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: d5SystemStatsIndex.setDescription('The index of this type of event in the d5SystemStatsTable.')
d5SystemStatsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 385, 1, 4, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d5SystemStatsCount.setStatus('mandatory')
if mibBuilder.loadTexts: d5SystemStatsCount.setDescription('Raw count of events of this type detected since power-up.')
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: coldStart.setDescription("A coldStart trap signifies that the sending protocol entity is reinitializing itself such that the agent's configuration or the protocol entity implementation may be altered.")
warmStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,1))
if mibBuilder.loadTexts: warmStart.setDescription('A warmStart trap signifies that the sending protocol entity is reinitializing itself such that neither the agent configuration nor the protocol entity implementation is altered.')
linkDown = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linkDown.setDescription("A linkDown trap signifies that the sending protocol entity recognizes a failure in one of the communication links represented in the agent's configuration.")
linkUp = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linkUp.setDescription("A linkUp trap signifies that the sending protocol entity recognizes that one of the communication links represented in the agent's configuration has come up.")
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,4)).setObjects(("IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: authenticationFailure.setDescription('An authenticationFailure trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated. While implementations of the SNMP must be capable of generating this trap, they must also be capable of suppressing the emission of such traps via an implementation- specific mechanism.')
egpNeighborLoss = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,5)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: egpNeighborLoss.setDescription('An egpNeighborLoss trap signifies that an EGP neighbor for whom the sending protocol entity was an EGP peer has been marked down and the peer relationship no longer obtains.')
unspecifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,1)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: unspecifiedTrap.setDescription("An alarm condition has occured within the unit. This trap's text will provide details on the alarm.")
startDisasterRecovery = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,2)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: startDisasterRecovery.setDescription('A startDisasterRecovery trap signifies that the normal external path to a remote site has been lost, and an ISDN connection to that site will be made.')
stopDisasterRecovery = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,3)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: stopDisasterRecovery.setDescription('A stopDisasterRecovery trap signifies that the normal external path to a remote site has been recovered, any ISDN connections to that site will be terminated.')
noBChannel = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,4)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: noBChannel.setDescription('A noBChannel trap signifies that the desired call to a remote site using a phone number was unsuccessful, this phone number has now been disabled.')
dailyConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,5)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: dailyConnLimit.setDescription('A dailyConnLimit trap signifies that the cummulative connect time for originated calls to a remote site has been exceeded. No additional calls can be placed to this site until the next day; unless the administrator intervenes.')
monthlyConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,6)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: monthlyConnLimit.setDescription('A monthlyConnLimit trap signifies that the cummulative connect time for originated calls to a remote site has been exceeded. No additional calls can be placed to this site until the next month; unless the administrator intervenes.')
dataErrorBChannel = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,7)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: dataErrorBChannel.setDescription('A dataErrorBChannel trap signifies that the data received on a trunk has been received in error.')
pppVersion = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,8)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: pppVersion.setDescription('A pppVersion trap signifies that the PPP/LCP versions used by this unit and its peer are incompatible.')
ipTableFull = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,9)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: ipTableFull.setDescription('An ipTableFull trap signifies that the IP Address Table is full and another entry cannot be made at this time.')
macTableFull = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,10)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: macTableFull.setDescription('A macTableFull trap signifies that the MAC Address Table is full and another entry cannot be made at this time.')
routeTableFull = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,11)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: routeTableFull.setDescription('A routeTableFull trap signifies that either the IP RIP, IPX RIP, or IPX SAP Table is full and another entry cannot be made at this time.')
duplicateItem = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,12)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: duplicateItem.setDescription('A duplicateItem trap signifies that some protocol entity (such as an IPX Network) has been discovered at two sites.')
noDChannel = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,13)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: noDChannel.setDescription('A noDChannel trap signifies that the D channel connection to the switch for a port cannot be made.')
lostDedicated = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,14)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: lostDedicated.setDescription('A lostDedicated trap signifies that the dedicated trunk connection has been lost.')
compCallData = NotificationType((1, 3, 6, 1, 4, 1, 385) + (0,15)).setObjects(("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: compCallData.setDescription('A compCallData trap signifies that the Completed Call records need to be retrieved from the unit.')
mibBuilder.exportSymbols("D5-MIB", products=products, callDataActvCurrTime=callDataActvCurrTime, callDataCompDestSys=callDataCompDestSys, callDataCompSourceSys=callDataCompSourceSys, d5StatsPortPacketsOut=d5StatsPortPacketsOut, directroute4Series=directroute4Series, coldStart=coldStart, d5PortStatsTable=d5PortStatsTable, callDataCompEstTime=callDataCompEstTime, callDataActvEntry=callDataActvEntry, callDataCompEntry=callDataCompEntry, d5StatsPortBPSOut=d5StatsPortBPSOut, callDataCompTable=callDataCompTable, callDataCompReqTime=callDataCompReqTime, macTableFull=macTableFull, compCallData=compCallData, DisplayString=DisplayString, ipTableFull=ipTableFull, d5stats=d5stats, d5PortStatsInterval=d5PortStatsInterval, callDataTotalActiveCalls=callDataTotalActiveCalls, d5SystemStatsCount=d5SystemStatsCount, startDisasterRecovery=startDisasterRecovery, callDataActvDestSys=callDataActvDestSys, callDataActvStatus=callDataActvStatus, symplex=symplex, drcalldata=drcalldata, callDataCompPhoneNum=callDataCompPhoneNum, callDataCompBandwidth=callDataCompBandwidth, d5StatsPortPacketsIn=d5StatsPortPacketsIn, warmStart=warmStart, drProdType=drProdType, dailyConnLimit=dailyConnLimit, duplicateItem=duplicateItem, egpNeighborLoss=egpNeighborLoss, callDataCompStatus=callDataCompStatus, d5PortStatsEntry=d5PortStatsEntry, callDataActvPhoneNum=callDataActvPhoneNum, callDataCompRelTime=callDataCompRelTime, callDataActvBandwidth=callDataActvBandwidth, d5StatsPortPPSIn=d5StatsPortPPSIn, d5system=d5system, datamizerVseries=datamizerVseries, linkUp=linkUp, d5StatsPortBPSIn=d5StatsPortBPSIn, d5SystemStatsTable=d5SystemStatsTable, d5SystemStatsEntry=d5SystemStatsEntry, monthlyConnLimit=monthlyConnLimit, callDataActvSourceSys=callDataActvSourceSys, d5StatsPortPPSOut=d5StatsPortPPSOut, noDChannel=noDChannel, dataErrorBChannel=dataErrorBChannel, drSoftVersion=drSoftVersion, routeTableFull=routeTableFull, unspecifiedTrap=unspecifiedTrap, lostDedicated=lostDedicated, d5StatsPortIndex=d5StatsPortIndex, callDataActvTable=callDataActvTable, noBChannel=noBChannel, directrouteSeries=directrouteSeries, callDataTrapAddr=callDataTrapAddr, callDataActvEstTime=callDataActvEstTime, linkDown=linkDown, stopDisasterRecovery=stopDisasterRecovery, datamizerHseries=datamizerHseries, callDataActvIndex=callDataActvIndex, callDataActvReqTime=callDataActvReqTime, d5SystemStatsIndex=d5SystemStatsIndex, callDataCompIndex=callDataCompIndex, authenticationFailure=authenticationFailure, pppVersion=pppVersion)
