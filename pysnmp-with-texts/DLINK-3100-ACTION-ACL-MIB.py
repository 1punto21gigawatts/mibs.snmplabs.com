#
# PySNMP MIB module DLINK-3100-ACTION-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-ACTION-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, NotificationType, Bits, Unsigned32, MibIdentifier, Counter64, iso, Gauge32, Counter32, ModuleIdentity, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "NotificationType", "Bits", "Unsigned32", "MibIdentifier", "Counter64", "iso", "Gauge32", "Counter32", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
rlActionAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130))
rlActionAcl.setRevisions(('2007-11-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlActionAcl.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlActionAcl.setLastUpdated('2007111800Z')
if mibBuilder.loadTexts: rlActionAcl.setOrganization('Dlink, Inc.')
if mibBuilder.loadTexts: rlActionAcl.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rlActionAcl.setDescription('Dlink ACLs MIBs')
class ClassMapAction(TextualConvention, Integer32):
    description = 'Specifies one of 8 Class-map actios: 1- no action. 2- Mark IP-Precedence. 3- Mark DSCP. 4- Set Egress queueu 5- Mark VPT 6- Choose queue by the VPT. 7- Choose queue by the DSCP. 8- Choose queue by the TCP/UDP port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("setIP-Precedence", 2), ("setDSCP", 3), ("setQueue", 4), ("setCos", 5), ("trustCos", 6), ("trustDSCP", 7), ("trustTCP-UDPport", 8), ("trustCosDscp", 9))

rlActionAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclTable.setStatus('current')
if mibBuilder.loadTexts: rlActionAclTable.setDescription('This table holds the group membership information and the group/ports status')
rlActionAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "DLINK-3100-ACTION-ACL-MIB", "rlActionAclAclIndex"))
if mibBuilder.loadTexts: rlActionAclEntry.setStatus('current')
if mibBuilder.loadTexts: rlActionAclEntry.setDescription('The row definition for this table.')
rlActionAclAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240)))
if mibBuilder.loadTexts: rlActionAclAclIndex.setStatus('current')
if mibBuilder.loadTexts: rlActionAclAclIndex.setDescription('The Access Id/ ACL Index')
rlActionAclPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclPorts.setStatus('current')
if mibBuilder.loadTexts: rlActionAclPorts.setDescription('Portlist of ports associated with the ACL Index')
rlActionAclClassMapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1, 3), ClassMapAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclClassMapAction.setStatus('current')
if mibBuilder.loadTexts: rlActionAclClassMapAction.setDescription('Action to perform on data base for ACL (add/remove)')
rlActionAclClassMapMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclClassMapMarkValue.setStatus('current')
if mibBuilder.loadTexts: rlActionAclClassMapMarkValue.setDescription('The policer index bounded to the action of that ACL')
rlActionAclPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: rlActionAclPolicerIndex.setDescription('The policer index bounded to the action of that ACL')
rlActionAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclStatus.setStatus('current')
if mibBuilder.loadTexts: rlActionAclStatus.setDescription('The index of profile to perform the action')
rlPort2AclsMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPort2AclsMappingTable.setStatus('current')
if mibBuilder.loadTexts: rlPort2AclsMappingTable.setDescription('This table holds the group membership information and the group/ports status')
rlPort2AclsMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "DLINK-3100-ACTION-ACL-MIB", "rlPorts2AclsMappingPortIndex"))
if mibBuilder.loadTexts: rlPort2AclsMappingEntry.setStatus('current')
if mibBuilder.loadTexts: rlPort2AclsMappingEntry.setDescription('The row definition for this table.')
rlPorts2AclsMappingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPorts2AclsMappingPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPorts2AclsMappingPortIndex.setDescription('The ifindex')
rlPorts2AclsMappingPortAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPorts2AclsMappingPortAcls.setStatus('current')
if mibBuilder.loadTexts: rlPorts2AclsMappingPortAcls.setDescription('Portlist of ACLs associated with the ifIndex')
rlActionAclDeleteProfileIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlActionAclDeleteProfileIndex.setStatus('current')
if mibBuilder.loadTexts: rlActionAclDeleteProfileIndex.setDescription('The scalar defines access profile index to be deleted.')
rlNumOfUsedTcamAces = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 130, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNumOfUsedTcamAces.setStatus('current')
if mibBuilder.loadTexts: rlNumOfUsedTcamAces.setDescription('Read used Tcam Aces')
mibBuilder.exportSymbols("DLINK-3100-ACTION-ACL-MIB", ClassMapAction=ClassMapAction, rlActionAclPorts=rlActionAclPorts, rlActionAclTable=rlActionAclTable, rlActionAclClassMapMarkValue=rlActionAclClassMapMarkValue, PYSNMP_MODULE_ID=rlActionAcl, rlPorts2AclsMappingPortIndex=rlPorts2AclsMappingPortIndex, rlActionAclPolicerIndex=rlActionAclPolicerIndex, rlPorts2AclsMappingPortAcls=rlPorts2AclsMappingPortAcls, rlActionAcl=rlActionAcl, rlActionAclDeleteProfileIndex=rlActionAclDeleteProfileIndex, rlActionAclEntry=rlActionAclEntry, rlPort2AclsMappingTable=rlPort2AclsMappingTable, rlActionAclStatus=rlActionAclStatus, rlPort2AclsMappingEntry=rlPort2AclsMappingEntry, rlNumOfUsedTcamAces=rlNumOfUsedTcamAces, rlActionAclAclIndex=rlActionAclAclIndex, rlActionAclClassMapAction=rlActionAclClassMapAction)
