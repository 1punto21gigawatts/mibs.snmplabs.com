#
# PySNMP MIB module BENU-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BENU-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:37:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
Gauge32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, TimeTicks, iso, Bits, Counter32, ObjectIdentity, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "TimeTicks", "iso", "Bits", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bVLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8))
bVLANMIB.setRevisions(('2015-05-07 00:00', '2015-04-14 00:00', '2015-01-06 00:00', '2014-11-17 00:00', '2014-08-04 00:00', '2014-06-24 00:00', '2014-05-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bVLANMIB.setRevisionsDescriptions(('Added bWagVlanTotalBytesRcvd and bWagVlanTotalBytesSent columns in bWagVlanStatsTable', 'Updated MIB file with change in bVlanCurrentNumber Syntax', 'VLAN object-types and notification-types separated.', 'updated MIB file with change in bVLANNotifObjects', 'updated MIB file with correct revision and descriptions.', 'Added VLAN information per port Table', 'This version introduces support for VLAN',))
if mibBuilder.loadTexts: bVLANMIB.setLastUpdated('201505070000Z')
if mibBuilder.loadTexts: bVLANMIB.setOrganization('Benu Networks')
if mibBuilder.loadTexts: bVLANMIB.setContactInfo('Benu Networks Inc, 300 Concord Road, Billerca MA 01821 Email: support@benunets.com')
if mibBuilder.loadTexts: bVLANMIB.setDescription('This MIB module defines VLAN statistics. Copyright (C) 2014 by Benu Networks, Inc. All rights reserved.')
bVLANMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1))
if mibBuilder.loadTexts: bVLANMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bVLANMIBObjects.setDescription('MIB objects for VLAN utilization statistics are defined in this branch.')
bVLANNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 0))
if mibBuilder.loadTexts: bVLANNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bVLANNotifObjects.setDescription('Notifications of VLAN utilization statistics are defined in this branch.')
bVLANNotifVariables = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 2))
if mibBuilder.loadTexts: bVLANNotifVariables.setStatus('current')
if mibBuilder.loadTexts: bVLANNotifVariables.setDescription('MIB objects for VLAN notifications are defined in this branch.')
bVlanTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: bVlanTable.setStatus('current')
if mibBuilder.loadTexts: bVlanTable.setDescription('The table of VLAN utilization performance metrics of each interface.')
bVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "BENU-VLAN-MIB", "bVlanPortIndex"), (0, "BENU-VLAN-MIB", "bVlanIndex"))
if mibBuilder.loadTexts: bVlanEntry.setStatus('current')
if mibBuilder.loadTexts: bVlanEntry.setDescription('An entry containing VLAN utilization performance metrics for each interface.')
bVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: bVlanPortIndex.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
bVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: bVlanIndex.setStatus('current')
if mibBuilder.loadTexts: bVlanIndex.setDescription('VLAN id configued on port.')
bVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanName.setStatus('current')
if mibBuilder.loadTexts: bVlanName.setDescription('VLAN name configured on port')
bVlanMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanMTU.setStatus('current')
if mibBuilder.loadTexts: bVlanMTU.setDescription('VLAN MTU configured on port')
bVlanEncapName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanEncapName.setStatus('current')
if mibBuilder.loadTexts: bVlanEncapName.setDescription('VLAN encapsulation name configured on port')
bVlanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanAdminStatus.setStatus('current')
if mibBuilder.loadTexts: bVlanAdminStatus.setDescription('The desired state of the interface. When a managed system initializes, all interfaces start with bVlanAdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, bVlanAdminStatus is then changed to up(1) state (or remains in the down(2) state).')
bVlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanOperStatus.setStatus('current')
if mibBuilder.loadTexts: bVlanOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. If bVlanAdminStatus is down(2) then bVlanOperStatus should be down(2). If bVlanAdminStatus is changed to up(1) then bVlanOperStatus should change to up(1) if the interface is ready to transmit and receive network traffic; it should change to dormant(5) if the interface is waiting for external actions (such as a serial line waiting for an incoming connection); it should remain in the down(2) state if and only if there is a fault that prevents it from going to the up(1) state; it should remain in the notPresent(6) state if the interface has missing (typically, hardware) components.')
bWagVlanTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 2), )
if mibBuilder.loadTexts: bWagVlanTable.setStatus('current')
if mibBuilder.loadTexts: bWagVlanTable.setDescription('The table of VLAN utilization performance metrics of each interface.')
bWagVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 2, 1), ).setIndexNames((0, "BENU-VLAN-MIB", "bWagVlanPortIndex"), (0, "BENU-VLAN-MIB", "bWagVlanIndex"))
if mibBuilder.loadTexts: bWagVlanEntry.setStatus('current')
if mibBuilder.loadTexts: bWagVlanEntry.setDescription('A logical row in bWagVlanTable')
bWagVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: bWagVlanPortIndex.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
bWagVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagVlanIndex.setStatus('current')
if mibBuilder.loadTexts: bWagVlanIndex.setDescription('VLAN id of the port.')
bWagVlanSubscriberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagVlanSubscriberCount.setStatus('current')
if mibBuilder.loadTexts: bWagVlanSubscriberCount.setDescription('Number of subscribers currently using this VLAN tunnel.')
bWagVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3), )
if mibBuilder.loadTexts: bWagVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagVlanStatsTable.setDescription('The table of VLAN utilization performance metrics of each interface.')
bWagVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1), ).setIndexNames((0, "BENU-VLAN-MIB", "bWagVlanStatsPortIndex"), (0, "BENU-VLAN-MIB", "bWagVlanStatsIndex"))
if mibBuilder.loadTexts: bWagVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagVlanStatsEntry.setDescription('An entry containing VLAN utilization performance metrics for each interface.')
bWagVlanStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagVlanStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: bWagVlanStatsPortIndex.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
bWagVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagVlanStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bWagVlanStatsIndex.setDescription('VLAN id of the port.')
bWagVlanTotalPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagVlanTotalPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: bWagVlanTotalPktsRcvd.setDescription('Total number of packets received from this port.')
bWagVlanTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagVlanTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: bWagVlanTotalPktsSent.setDescription('Total number of packets sent from this port.')
bWagVlanTotalBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagVlanTotalBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: bWagVlanTotalBytesRcvd.setDescription('Total number of bytes received from this port.')
bWagVlanTotalBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagVlanTotalBytesSent.setStatus('current')
if mibBuilder.loadTexts: bWagVlanTotalBytesSent.setDescription('Total number of bytes sent from this port.')
bVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 4), )
if mibBuilder.loadTexts: bVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: bVlanPortTable.setDescription('The table of VLAN information per port.')
bVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 4, 1), ).setIndexNames((0, "BENU-VLAN-MIB", "bVlanPerPortIndex"))
if mibBuilder.loadTexts: bVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: bVlanPortEntry.setDescription('An entry containing VLAN information per port')
bVlanPerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: bVlanPerPortIndex.setStatus('current')
if mibBuilder.loadTexts: bVlanPerPortIndex.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
bVlanTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanTotal.setStatus('current')
if mibBuilder.loadTexts: bVlanTotal.setDescription("The total number of VLAN's created per port")
bVlanActive = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanActive.setStatus('current')
if mibBuilder.loadTexts: bVlanActive.setDescription('Number of VLANs created and active on this port.')
bVlanCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanCurrentNumber.setStatus('current')
if mibBuilder.loadTexts: bVlanCurrentNumber.setDescription("Total number of VLAN's created and active at present")
bVlanAssocSub = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bVlanAssocSub.setStatus('current')
if mibBuilder.loadTexts: bVlanAssocSub.setDescription("Total number of VLAN's with associated subscribers")
bVlanPortId = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bVlanPortId.setStatus('current')
if mibBuilder.loadTexts: bVlanPortId.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
bVlanId = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 2, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bVlanId.setStatus('current')
if mibBuilder.loadTexts: bVlanId.setDescription('VLAN id configured on port.')
bVlanEncapEnable = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 0, 1)).setObjects(("BENU-VLAN-MIB", "bVlanPortId"))
if mibBuilder.loadTexts: bVlanEncapEnable.setStatus('current')
if mibBuilder.loadTexts: bVlanEncapEnable.setDescription('A bVlanEncapEnable trap signifies that the SNMP entity, acting in an agent role, has detected that encapsulation 802.1q is enabled on the port')
bVlanEncapDisable = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 0, 2)).setObjects(("BENU-VLAN-MIB", "bVlanPortId"))
if mibBuilder.loadTexts: bVlanEncapDisable.setStatus('current')
if mibBuilder.loadTexts: bVlanEncapDisable.setDescription('A bVlanEncapEnable trap signifies that the SNMP entity, acting in an agent role, has detected that encapsulation 802.1q is disabled on the port')
bVlanCreate = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 0, 3)).setObjects(("BENU-VLAN-MIB", "bVlanPortId"), ("BENU-VLAN-MIB", "bVlanId"))
if mibBuilder.loadTexts: bVlanCreate.setStatus('current')
if mibBuilder.loadTexts: bVlanCreate.setDescription('A bVlanCreate trap signifies that the SNMP entity, acting in an agent role, has detected that VLAN is created with bVlanIndex')
bVlanDelete = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 8, 0, 4)).setObjects(("BENU-VLAN-MIB", "bVlanPortId"), ("BENU-VLAN-MIB", "bVlanId"))
if mibBuilder.loadTexts: bVlanDelete.setStatus('current')
if mibBuilder.loadTexts: bVlanDelete.setDescription('A bVlanDelete trap signifies that the SNMP entity, acting in an agent role, has detected that VLAN is deleted with bVlanIndex')
mibBuilder.exportSymbols("BENU-VLAN-MIB", bVlanDelete=bVlanDelete, bVLANNotifVariables=bVLANNotifVariables, bVLANMIB=bVLANMIB, PYSNMP_MODULE_ID=bVLANMIB, bVlanPerPortIndex=bVlanPerPortIndex, bVlanEncapEnable=bVlanEncapEnable, bWagVlanEntry=bWagVlanEntry, bVlanCurrentNumber=bVlanCurrentNumber, bVlanAssocSub=bVlanAssocSub, bVlanEntry=bVlanEntry, bVlanId=bVlanId, bVlanTable=bVlanTable, bVlanAdminStatus=bVlanAdminStatus, bVlanOperStatus=bVlanOperStatus, bWagVlanPortIndex=bWagVlanPortIndex, bVLANMIBObjects=bVLANMIBObjects, bWagVlanSubscriberCount=bWagVlanSubscriberCount, bVlanPortIndex=bVlanPortIndex, bWagVlanStatsEntry=bWagVlanStatsEntry, bWagVlanTotalPktsSent=bWagVlanTotalPktsSent, bWagVlanTotalBytesRcvd=bWagVlanTotalBytesRcvd, bVlanPortTable=bVlanPortTable, bVLANNotifObjects=bVLANNotifObjects, bVlanPortEntry=bVlanPortEntry, bVlanIndex=bVlanIndex, bWagVlanIndex=bWagVlanIndex, bVlanPortId=bVlanPortId, bVlanEncapName=bVlanEncapName, bVlanMTU=bVlanMTU, bWagVlanStatsPortIndex=bWagVlanStatsPortIndex, bWagVlanTable=bWagVlanTable, bWagVlanTotalBytesSent=bWagVlanTotalBytesSent, bWagVlanStatsTable=bWagVlanStatsTable, bWagVlanTotalPktsRcvd=bWagVlanTotalPktsRcvd, bVlanTotal=bVlanTotal, bVlanCreate=bVlanCreate, bVlanEncapDisable=bVlanEncapDisable, bWagVlanStatsIndex=bWagVlanStatsIndex, bVlanName=bVlanName, bVlanActive=bVlanActive)
