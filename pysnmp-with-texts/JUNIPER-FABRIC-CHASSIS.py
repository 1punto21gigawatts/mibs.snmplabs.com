#
# PySNMP MIB module JUNIPER-FABRIC-CHASSIS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-FABRIC-CHASSIS
# Produced by pysmi-0.3.4 at Wed May  1 13:59:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
JnxChassisId, = mibBuilder.importSymbols("JUNIPER-MIB", "JnxChassisId")
jnxDcfMibRoot, jnxFabricChassisTraps, jnxFabricChassisOKTraps = mibBuilder.importSymbols("JUNIPER-SMI", "jnxDcfMibRoot", "jnxFabricChassisTraps", "jnxFabricChassisOKTraps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ObjectIdentity, ModuleIdentity, Counter32, Integer32, IpAddress, Bits, iso, Counter64, TimeTicks, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Counter32", "Integer32", "IpAddress", "Bits", "iso", "Counter64", "TimeTicks", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
jnxFabricAnatomy = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2))
jnxFabricAnatomy.setRevisions(('2012-09-13 00:00', '2012-07-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxFabricAnatomy.setRevisionsDescriptions(('Added director group device (DG) enum to JnxFabricContainersFamily.', 'Modified the description for JnxFabricDeviceId. Added ufabric as part of JnxFabricContainersFamily.',))
if mibBuilder.loadTexts: jnxFabricAnatomy.setLastUpdated('201209130000Z')
if mibBuilder.loadTexts: jnxFabricAnatomy.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxFabricAnatomy.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxFabricAnatomy.setDescription("The MIB modules representing Juniper Networks' Quantum Fabric hardware components.")
jnxFabricAnatomyScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1))
jnxFabricAnatomyTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2))
class JnxFabricDeviceId(TextualConvention, Integer32):
    description = 'The device identifier assigned to the individual devices across the fabric by SFC. This shall be a unique index for each of the devices constituting the fabric.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class JnxFabricContainersFamily(TextualConvention, Integer32):
    description = 'The family of container that defines the device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fabricChassis", 1), ("fabricNode", 2), ("ufabric", 3), ("directorGroupDevice", 4))

jnxFabricClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricClass.setStatus('current')
if mibBuilder.loadTexts: jnxFabricClass.setDescription('The product line of the fabric switch.')
jnxFabricDescr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDescr.setDescription('The name, model, or detailed description of the fabric, indicating which product the fabric is about.')
jnxFabricSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricSerialNo.setStatus('current')
if mibBuilder.loadTexts: jnxFabricSerialNo.setDescription('The serial number of this subject, blank if unknown or unavailable.')
jnxFabricRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRevision.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRevision.setDescription('The revision of this subject, blank if unknown or unavailable.')
jnxFabricFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFirmwareRevision.setDescription('The firmware (u-boot) revision of this subject, blank if unknown or unavailable.')
jnxFabricLastInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 6), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricLastInstalled.setStatus('current')
if mibBuilder.loadTexts: jnxFabricLastInstalled.setDescription('The value of sysUpTime when the subject was last installed, up-and-running. Zero if unknown or already up-and-running when the agent was up.')
jnxFabricContentsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 7), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsLastChange.setDescription('The value of sysUpTime when the fabric contents table last changed. Zero if unknown or already existing when the agent was up.')
jnxFabricFilledLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 1, 8), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledLastChange.setDescription('The value of sysUpTime when the fabric filled status table last changed. Zero if unknown or already at that state when the agent was up.')
jnxFabricDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1), )
if mibBuilder.loadTexts: jnxFabricDeviceTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceTable.setDescription('A list of fabric device entries.')
jnxFabricDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"))
if mibBuilder.loadTexts: jnxFabricDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntry.setDescription('An entry of fabric device table.')
jnxFabricDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 1), JnxFabricDeviceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceIndex.setDescription('Identifies the device on which the contents of this row exists.')
jnxFabricDeviceEntryContainersFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 2), JnxFabricContainersFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryContainersFamily.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryContainersFamily.setDescription('The family of container that defines this device.')
jnxFabricDeviceEntryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryClass.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryClass.setDescription('The productline of the device entry.')
jnxFabricDeviceEntryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryModel.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryModel.setDescription('The model object identifier of the device entry.')
jnxFabricDeviceEntryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryDescr.setDescription('The name or detailed description of the device entry.')
jnxFabricDeviceEntrySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntrySerialNo.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntrySerialNo.setDescription('The serial number of this subject, blank if unknown or unavailable.')
jnxFabricDeviceEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryName.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryName.setDescription('The name of this subject which is same as the serial number unless a device alias has been configured.')
jnxFabricDeviceEntryRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryRevision.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryRevision.setDescription('The revision of this subject, blank if unknown or unavailable.')
jnxFabricDeviceEntryFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryFirmwareRevision.setDescription('The firmware (u-boot) revision of this subject, blank if unknown or unavailable.')
jnxFabricDeviceEntryInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 10), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryInstalled.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryInstalled.setDescription('The value of sysUpTime when the subject was last installed, up-and-running. Zero if unknown or already up-and-running when the agent was up.')
jnxFabricDeviceEntryContentsLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 11), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryContentsLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryContentsLastChange.setDescription('The value of sysUpTime when the contents table last changed. Zero if unknown or already existing when the agent was up.')
jnxFabricDeviceEntryFilledLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 12), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryFilledLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryFilledLastChange.setDescription('The value of sysUpTime when the filled status table last changed. Zero if unknown or already at that state when the agent was up.')
jnxFabricDeviceEntryKernelMemoryUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricDeviceEntryKernelMemoryUsedPercent.setStatus('current')
if mibBuilder.loadTexts: jnxFabricDeviceEntryKernelMemoryUsedPercent.setDescription('The percentage of kernel memory used of this subject. 0 if unavailable or inapplicable.')
jnxFabricContainersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2), )
if mibBuilder.loadTexts: jnxFabricContainersTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersTable.setDescription('A list of containers entries.')
jnxFabricContainersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContainersFamily"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContainersIndex"))
if mibBuilder.loadTexts: jnxFabricContainersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersEntry.setDescription('An entry of containers table. Each entry is indexed by the container table type and the container index.')
jnxFabricContainersFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 1), JnxFabricContainersFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersFamily.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersFamily.setDescription('The family of container.')
jnxFabricContainersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersIndex.setDescription('The index for this entry.')
jnxFabricContainersView = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 3), Bits().clone(namedValues=NamedValues(("viewFront", 0), ("viewRear", 1), ("viewTop", 2), ("viewBottom", 3), ("viewLeftHandSide", 4), ("viewRightHandSide", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersView.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersView.setDescription('The view(s) from which the specific container appears. This variable indicates that the specific container is embedded and accessible from the corresponding view(s). The value is a bit map represented as a sum. If multiple bits are set, the specified container(s) are located and accessible from that set of views. The various values representing the bit positions and its corresponding views are: 1 front 2 rear 4 top 8 bottom 16 leftHandSide 32 rightHandSide Note 1: LefHandSide and rightHandSide are referred to based on the view from the front. Note 2: If the specified containers are scattered around various views, the numbering is according to the following sequence: front -> rear -> top -> bottom -> leftHandSide -> rightHandSide For each view plane, the numbering sequence is first from left to right, and then from up to down. Note 3: Even though the value in chassis hardware (e.g. slot number) may be labelled from 0, 1, 2, and up, all the indices in MIB start with 1 (not 0) according to network management convention.')
jnxFabricContainersLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersLevel.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersLevel.setDescription('The abstraction level of the chassis or device. It is enumerated from the outside to the inside, from the outer layer to the inner layer. For example, top level (i.e. level 0) refers to chassis frame, level 1 FPC slot within chassis frame, level 2 PIC space within FPC slot.')
jnxFabricContainersWithin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersWithin.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersWithin.setDescription('The index of its next higher level container housing this entry. The associated jnxFabricContainersIndex in the jnxFabricContainersTable represents its next higher level container.')
jnxFabricContainersType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersType.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersType.setDescription('The type of this container.')
jnxFabricContainersDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersDescr.setDescription('The name or detailed description of this subject.')
jnxFabricContainersCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContainersCount.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContainersCount.setDescription('The maximum number of containers of this level per container of the next higher level. e.g. if there are six level 2 containers in level 1 container, then jnxFabricContainersCount for level 2 is six.')
jnxFabricContentsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3), )
if mibBuilder.loadTexts: jnxFabricContentsTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsTable.setDescription('A list of contents entries.')
jnxFabricContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"))
if mibBuilder.loadTexts: jnxFabricContentsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsEntry.setDescription('An entry of contents table.')
jnxFabricContentsContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsContainerIndex.setDescription('The associated jnxFabricContainersIndex in the jnxFabricContainersTable.')
jnxFabricContentsL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsL1Index.setDescription('The level one index of the container housing this subject. Zero if unavailable or inapplicable.')
jnxFabricContentsL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsL2Index.setDescription('The level two index of the container housing this subject. Zero if unavailable or inapplicable.')
jnxFabricContentsL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsL3Index.setDescription('The level three index of the container housing this subject. Zero if unavailable or inapplicable.')
jnxFabricContentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsType.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsType.setDescription('The type of this subject. zeroDotZero if unknown.')
jnxFabricContentsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsDescr.setDescription('The name or detailed description of this subject.')
jnxFabricContentsSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsSerialNo.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsSerialNo.setDescription('The serial number of this subject, blank if unknown or unavailable.')
jnxFabricContentsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsRevision.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsRevision.setDescription('The revision of this subject, blank if unknown or unavailable.')
jnxFabricContentsInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 9), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsInstalled.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsInstalled.setDescription('The value of sysUpTime when the subject was last installed, up-and-running. Zero if unknown or already up-and-running when the agent was up.')
jnxFabricContentsPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsPartNo.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsPartNo.setDescription('The part number of this subject, blank if unknown or unavailable.')
jnxFabricContentsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 11), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsChassisId.setDescription('Identifies the chassis on which the contents of this row exists.')
jnxFabricContentsChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsChassisDescr.setDescription('A textual description of the chassis on which the contents of this row exists.')
jnxFabricContentsChassisCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricContentsChassisCleiCode.setStatus('current')
if mibBuilder.loadTexts: jnxFabricContentsChassisCleiCode.setDescription('The clei code of this subject, blank if unknown or unavailable. A CLEI code is an intelligent code that consists of 10 alphanumeric characters with 4 data elements. The first data element is considered the basic code with the first 2 characters indicating the technology or equipment type, and the third and fourth characters denoting the functional sub-category. The second data element represents the features, and its three characters denote functional capabilities or changes. The third data element has one character and denotes a reference to a manufacturer, system ID, specification, or drawing. The fourth data element consists of two characters and contains complementary data. These two characters provide a means of differentiating or providing uniqueness between the eight character CLEI codes by identifying the manufacturing vintage of the product. Names are assigned via procedures defined in [GR485]. The assigned maintenance agent for the CLEI code, Telcordia Technologies, is responsible for assigning certain equipment and other identifiers (e.g., location, manufacturer/supplier) for the telecommunications industry.')
jnxFabricFilledTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4), )
if mibBuilder.loadTexts: jnxFabricFilledTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledTable.setDescription('A list of filled status entries.')
jnxFabricFilledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledContainerIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFilledL3Index"))
if mibBuilder.loadTexts: jnxFabricFilledEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledEntry.setDescription('An entry of filled status table.')
jnxFabricFilledContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledContainerIndex.setDescription('The associated jnxFabricContainersIndex in the jnxFabricContainersTable.')
jnxFabricFilledL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledL1Index.setDescription('The level one index of the container housing this subject. Zero if unavailable or inapplicable.')
jnxFabricFilledL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledL2Index.setDescription('The level two index of the container housing this subject. Zero if unavailable or inapplicable.')
jnxFabricFilledL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledL3Index.setDescription('The level three index of the container housing this subject. Zero if unavailable or inapplicable.')
jnxFabricFilledDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledDescr.setDescription('The name or detailed description of this subject.')
jnxFabricFilledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("filled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledState.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledState.setDescription('The filled state of this subject.')
jnxFabricFilledChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 7), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledChassisId.setDescription('Identifies the chassis on which the contents of this row exists.')
jnxFabricFilledChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFilledChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFilledChassisDescr.setDescription('A textual description of the chassis on which the contents of this row exists.')
jnxFabricOperatingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5), )
if mibBuilder.loadTexts: jnxFabricOperatingTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingTable.setDescription('A list of operating status entries.')
jnxFabricOperatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingContentsIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingL3Index"))
if mibBuilder.loadTexts: jnxFabricOperatingEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingEntry.setDescription('An entry of operating status table.')
jnxFabricOperatingContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingContentsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingContentsIndex.setDescription('The associated jnxFabricContentsContainerIndex in the jnxFabricContentsTable.')
jnxFabricOperatingL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingL1Index.setDescription('The level one index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingL2Index.setDescription('The level two index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingL3Index.setDescription('The level three index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingDescr.setDescription('The name or detailed description of this subject.')
jnxFabricOperatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("ready", 3), ("reset", 4), ("runningAtFullSpeed", 5), ("down", 6), ("standby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingState.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingState.setDescription('The operating state of this subject.')
jnxFabricOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 7), Integer32()).setUnits('Celsius (degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingTemp.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingTemp.setDescription('The temperature in Celsius (degrees C) of this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingCPU.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingCPU.setDescription('The CPU utilization in percentage of this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingISR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingISR.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingISR.setDescription('The CPU utilization in percentage of this subject spending in interrupt service routine (ISR). Zero if unavailable or inapplicable.')
jnxFabricOperatingDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingDRAMSize.setStatus('deprecated')
if mibBuilder.loadTexts: jnxFabricOperatingDRAMSize.setDescription('The DRAM size in bytes of this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingBuffer.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingBuffer.setDescription('The buffer pool utilization in percentage of this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingHeap.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingHeap.setDescription('The heap utilization in percentage of this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 13), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingUpTime.setDescription('The time interval in 10-millisecond period that this subject has been up and running. Zero if unavailable or inapplicable.')
jnxFabricOperatingLastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 14), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingLastRestart.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingLastRestart.setDescription('The value of sysUpTime when this subject last restarted. Zero if unavailable or inapplicable.')
jnxFabricOperatingMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 15), Integer32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingMemory.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingMemory.setDescription('The installed memory size in Megabytes of this subject. Zero if unavailable or inapplicable.')
jnxFabricOperatingStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("running", 1), ("standby", 2), ("ready", 3), ("runningAtFullSpeed", 4), ("reset", 5), ("down", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingStateOrdered.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingStateOrdered.setDescription("The operating state of this subject. Identical to jnxFabricOperatingState, but with enums ordered from 'most operational' to 'least operational' states.")
jnxFabricOperatingChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 17), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingChassisId.setDescription('Identifies the chassis on which the contents of this row exists.')
jnxFabricOperatingChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingChassisDescr.setDescription('A textual description of the chassis on which the contents of this row exists.')
jnxFabricOperatingRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperatingRestartTime.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperatingRestartTime.setDescription('The time at which this entity last restarted.')
jnxFabricOperating1MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperating1MinLoadAvg.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperating1MinLoadAvg.setDescription('The CPU Load Average over the last 1 minutes Here it will be shown as percentage value Zero if unavailable or inapplicable.')
jnxFabricOperating5MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperating5MinLoadAvg.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperating5MinLoadAvg.setDescription('The CPU Load Average over the last 5 minutes Here it will be shown as percentage value Zero if unavailable or inapplicable.')
jnxFabricOperating15MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricOperating15MinLoadAvg.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOperating15MinLoadAvg.setDescription('The CPU Load Average over the last 15 minutes Here it will be shown as percentage value Zero if unavailable or inapplicable.')
jnxFabricRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6), )
if mibBuilder.loadTexts: jnxFabricRedundancyTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyTable.setDescription('A list of redundancy information entries.')
jnxFabricRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyContentsIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL3Index"))
if mibBuilder.loadTexts: jnxFabricRedundancyEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyEntry.setDescription('An entry in the redundancy information table.')
jnxFabricRedundancyContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyContentsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyContentsIndex.setDescription('The associated jnxFabricContentsContainerIndex in the jnxFabricContentsTable.')
jnxFabricRedundancyL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyL1Index.setDescription('The level one index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricRedundancyL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyL2Index.setDescription('The level two index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricRedundancyL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyL3Index.setDescription('The level three index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricRedundancyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyDescr.setDescription('The name or detailed description of this subject.')
jnxFabricRedundancyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyConfig.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyConfig.setDescription("The election priority of redundancy configuration for this subject. The value 'notApplicable' means no specific instance is configured to be master or backup; whichever component boots up first becomes a master.")
jnxFabricRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyState.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyState.setDescription('The current running state for this subject.')
jnxFabricRedundancySwitchoverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverCount.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverCount.setDescription('The total number of switchover as perceived by this subject since routing engine is up and running. The switchover is defined as a change in state of jnxFabricRedundancyState from master to backup or vice versa. Its value is reset when the routing engine is reset or rebooted.')
jnxFabricRedundancySwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 9), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverTime.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverTime.setDescription('The value of sysUpTime when the jnxFabricRedundancyState of this subject was last switched over from master to backup or vice versa. Zero if unknown or never switched over since the routing engine is up and running.')
jnxFabricRedundancySwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("neverSwitched", 2), ("userSwitched", 3), ("autoSwitched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverReason.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancySwitchoverReason.setDescription('The reason of the last switchover for this subject.')
jnxFabricRedundancyKeepaliveHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveHeartbeat.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveHeartbeat.setDescription('The period of sending keepalive messages between the master and backup subsystems. It is a system-wide preset value in seconds used by internal mastership resolution. Zero if unavailable or inapplicable.')
jnxFabricRedundancyKeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveTimeout.setDescription('The timeout period in seconds, by the keepalive watchdog timer, before initiating a switch over to the backup subsystem. Zero if unavailable or inapplicable.')
jnxFabricRedundancyKeepaliveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveElapsed.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveElapsed.setDescription('The elapsed time in seconds by this subject since receiving the last keepalive message from the other subsystems. Zero if unavailable or inapplicable.')
jnxFabricRedundancyKeepaliveLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveLoss.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyKeepaliveLoss.setDescription('The total number of losses on keepalive messages between the master and backup subsystems as perceived by this subject since the system is up and running. Zero if unavailable or inapplicable.')
jnxFabricRedundancyChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 15), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyChassisId.setDescription('Identifies the chassis on which the contents of this row exists.')
jnxFabricRedundancyChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricRedundancyChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancyChassisDescr.setDescription('A textual description of the chassis on which the contents of this row exists.')
jnxFabricFruTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7), )
if mibBuilder.loadTexts: jnxFabricFruTable.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruTable.setDescription('A list of FRU status entries.')
jnxFabricFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1), ).setIndexNames((0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), (0, "JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"))
if mibBuilder.loadTexts: jnxFabricFruEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruEntry.setDescription('An entry in the FRU status table.')
jnxFabricFruContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruContentsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruContentsIndex.setDescription('The associated jnxFabricContentsContainerIndex in the jnxFabricContentsTable.')
jnxFabricFruL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruL1Index.setDescription('The level one index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricFruL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruL2Index.setDescription('The level two index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricFruL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruL3Index.setDescription('The level three index associated with this subject. Zero if unavailable or inapplicable.')
jnxFabricFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruName.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruName.setDescription('The name or detailed description of this subject.')
jnxFabricFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("clockGenerator", 2), ("flexiblePicConcentrator", 3), ("switchingAndForwardingModule", 4), ("controlBoard", 5), ("routingEngine", 6), ("powerEntryModule", 7), ("frontPanelModule", 8), ("switchInterfaceBoard", 9), ("processorMezzanineBoardForSIB", 10), ("portInterfaceCard", 11), ("craftInterfacePanel", 12), ("fan", 13), ("lineCardChassis", 14), ("forwardingEngineBoard", 15), ("protectedSystemDomain", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruType.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruType.setDescription('The FRU type for this subject.')
jnxFabricFruSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruSlot.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruSlot.setDescription('The slot number of this subject. This is equivalent to jnxFabricFruL1Index in meaning. Zero if unavailable or inapplicable.')
jnxFabricFruState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("present", 3), ("ready", 4), ("announceOnline", 5), ("online", 6), ("anounceOffline", 7), ("offline", 8), ("diagnostic", 9), ("standby", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruState.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruState.setDescription('The current state for this subject.')
jnxFabricFruTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 9), Integer32()).setUnits('Celsius (degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruTemp.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruTemp.setDescription('The temperature in Celsius (degrees C) of this subject. Zero if unavailable or inapplicable.')
jnxFabricFruOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("error", 3), ("noPower", 4), ("configPowerOff", 5), ("configHoldInReset", 6), ("cliCommand", 7), ("buttonPress", 8), ("cliRestart", 9), ("overtempShutdown", 10), ("masterClockDown", 11), ("singleSfmModeChange", 12), ("packetSchedulingModeChange", 13), ("physicalRemoval", 14), ("unresponsiveRestart", 15), ("sonetClockAbsent", 16), ("rddPowerOff", 17), ("majorErrors", 18), ("minorErrors", 19), ("lccHardRestart", 20), ("lccVersionMismatch", 21), ("powerCycle", 22), ("reconnect", 23), ("overvoltage", 24), ("pfeVersionMismatch", 25), ("febRddCfgChange", 26), ("fpcMisconfig", 27), ("fruReconnectFail", 28), ("fruFwddReset", 29), ("fruFebSwitch", 30), ("fruFebOffline", 31), ("fruInServSoftUpgradeError", 32), ("fruChasdPowerRatingExceed", 33), ("fruConfigOffline", 34), ("fruServiceRestartRequest", 35), ("spuResetRequest", 36), ("spuFlowdDown", 37), ("spuSpi4Down", 38), ("spuWatchdogTimeout", 39), ("spuCoreDump", 40), ("fpgaSpi4LinkDown", 41), ("i3Spi4LinkDown", 42), ("cppDisconnect", 43), ("cpuNotBoot", 44), ("spuCoreDumpComplete", 45), ("rstOnSpcSpuFailure", 46), ("softRstOnSpcSpuFailure", 47), ("hwAuthenticationFailure", 48), ("reconnectFpcFail", 49), ("fpcAppFailed", 50), ("fpcKernelCrash", 51), ("spuFlowdDownNoCore", 52), ("spuFlowdCoreDumpIncomplete", 53), ("spuFlowdCoreDumpComplete", 54), ("spuIdpdDownNoCore", 55), ("spuIdpdCoreDumpIncomplete", 56), ("spuIdpdCoreDumpComplete", 57), ("spuCoreDumpIncomplete", 58), ("spuIdpdDown", 59), ("fruPfeReset", 60), ("fruReconnectNotReady", 61), ("fruSfLinkDown", 62), ("fruFabricDown", 63), ("fruAntiCounterfeitRetry", 64), ("fruFPCChassisClusterDisable", 65), ("spuFipsError", 66), ("fruFPCFabricDownOffline", 67), ("febCfgChange", 68), ("routeLocalizationRoleChange", 69), ("fruFpcUnsupported", 70), ("psdVersionMismatch", 71), ("fruResetThresholdExceeded", 72), ("picBounce", 73), ("badVoltage", 74), ("fruFPCReducedFabricBW", 75)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruOfflineReason.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruOfflineReason.setDescription('The offline reason of this subject.')
jnxFabricFruLastPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 11), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruLastPowerOff.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruLastPowerOff.setDescription('The value of sysUpTime when this subject was last powered off. Zero if unavailable or inapplicable.')
jnxFabricFruLastPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 12), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruLastPowerOn.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruLastPowerOn.setDescription('The value of sysUpTime when this subject was last powered on. Zero if unavailable or inapplicable.')
jnxFabricFruPowerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 13), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruPowerUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruPowerUpTime.setDescription('The time interval in 10-millisecond period that this subject has been up and running since the last power on time. Zero if unavailable or inapplicable.')
jnxFabricFruChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 14), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruChassisId.setDescription('Identifies the chassis on which the contents of this row exists.')
jnxFabricFruChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruChassisDescr.setDescription('A textual description of the chassis on which the contents of this row exists.')
jnxFabricFruPsdAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 42, 2, 2, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFabricFruPsdAssignment.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruPsdAssignment.setDescription('The PSD assignment of this subject. Zero if unavailable or not applicable.')
jnxFabricPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 1)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"))
if mibBuilder.loadTexts: jnxFabricPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: jnxFabricPowerSupplyFailure.setDescription('A jnxFabricPowerSupplyFailure trap signifies that the SNMP entity, acting in an agent role, has detected that the specified power supply in the chassis has been in the failure (bad DC output) condition.')
jnxFabricFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 2)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"))
if mibBuilder.loadTexts: jnxFabricFanFailure.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFanFailure.setDescription('A jnxFabricFanFailure trap signifies that the SNMP entity, acting in an agent role, has detected that the specified cooling fan or impeller in the chassis has been in the failure (not spinning) condition.')
jnxFabricOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 3)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingTemp"))
if mibBuilder.loadTexts: jnxFabricOverTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxFabricOverTemperature.setDescription('A jnxFabricOverTemperature trap signifies that the SNMP entity, acting in an agent role, has detected that the specified hardware component in the chassis has experienced over temperature condition.')
jnxFabricRedundancySwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 4)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyConfig"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancyState"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancySwitchoverCount"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancySwitchoverTime"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricRedundancySwitchoverReason"))
if mibBuilder.loadTexts: jnxFabricRedundancySwitchover.setStatus('current')
if mibBuilder.loadTexts: jnxFabricRedundancySwitchover.setDescription('A jnxFabricRedundancySwitchover trap signifies that the SNMP entity, acting in an agent role, has detected that the specified hardware component in the chassis has experienced a redundancy switchover event defined as a change in state of jnxFabricRedundancyState from master to backup or vice versa.')
jnxFabricFruRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 5)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFruRemoval.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruRemoval.setDescription('A jnxFabricFruRemoval trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has been removed from the chassis.')
jnxFabricFruInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 6)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFruInsertion.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruInsertion.setDescription('A jnxFabricFruInsertion trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has been inserted into the chassis.')
jnxFabricFruPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 7)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruOfflineReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOff"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFabricFruPowerOff.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruPowerOff.setDescription('A jnxFabricFruPowerOff trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has been powered off in the chassis.')
jnxFabricFruPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 8)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruOfflineReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOff"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFabricFruPowerOn.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruPowerOn.setDescription('A jnxFabricFruPowerOn trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has been powered on in the chassis.')
jnxFabricFruFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 9)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFruFailed.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruFailed.setDescription('This indicates the specified FRU (Field Replaceable Unit) has failed in the chassis. Most probably this is due toi some hard error such as fru is not powering up or not able to load ukernel. In these cases, fru is replaced.')
jnxFabricFruOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 10)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruOfflineReason"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOff"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFabricFruOffline.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruOffline.setDescription('A jnxFabricFruOffline trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has gone offline in the chassis.')
jnxFabricFruOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 11)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFruOnline.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruOnline.setDescription('A jnxFabricFruOnline trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has gone online in the chassis.')
jnxFabricFruCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 12)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFruCheck.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruCheck.setDescription('A jnxFabricFruCheck trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has encountered some operational errors and gone into check state in the chassis.')
jnxFabricFEBSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 13)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFEBSwitchover.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFEBSwitchover.setDescription('A jnxFabricFEBSwitchover trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FEB (Forwarding Engine Board) has switched over.')
jnxFabricHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 14)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricHardDiskFailed.setStatus('current')
if mibBuilder.loadTexts: jnxFabricHardDiskFailed.setDescription('A jnxHardDiskFailed trap signifies that the SNMP entity, acting in an agent role, has detected that the Disk in the specified Routing Engine has encountered some operational errors and gone into failed state in the chassis.')
jnxFabricHardDiskMissing = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 15)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricHardDiskMissing.setStatus('current')
if mibBuilder.loadTexts: jnxFabricHardDiskMissing.setDescription('A DiskMissing trap signifies that the SNMP entity, acting in an agent role, has detected that hard disk in the specified outing Engine is missing from boot device list.')
jnxFabricBootFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 19, 16)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricBootFromBackup.setStatus('current')
if mibBuilder.loadTexts: jnxFabricBootFromBackup.setDescription('A jnxBootFromBackup trap signifies that the SNMP entity, acting in an agent role, has detected that the specified routing-engine/member has booted from the back up root partition')
jnxFabricPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 1)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"))
if mibBuilder.loadTexts: jnxFabricPowerSupplyOK.setStatus('current')
if mibBuilder.loadTexts: jnxFabricPowerSupplyOK.setDescription('A jnxFabricPowerSupplyOK trap signifies that the SNMP entity, acting in an agent role, has detected that the specified power supply in the chassis has recovered from the failure (bad DC output) condition.')
jnxFabricFanOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 2)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingState"))
if mibBuilder.loadTexts: jnxFabricFanOK.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFanOK.setDescription('A jnxFabricFanOK trap signifies that the SNMP entity, acting in an agent role, has detected that the specified cooling fan or impeller in the chassis has recovered from the failure (not spinning) condition.')
jnxFabricTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 3)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsContainerIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricContentsDescr"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricOperatingTemp"))
if mibBuilder.loadTexts: jnxFabricTemperatureOK.setStatus('current')
if mibBuilder.loadTexts: jnxFabricTemperatureOK.setDescription('A jnxFabricTemperatureOK trap signifies that the SNMP entity, acting in an agent role, has detected that the specified hardware component in the chassis has recovered from over temperature condition.')
jnxFabricFruOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 20, 4)).setObjects(("JUNIPER-FABRIC-CHASSIS", "jnxFabricDeviceIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruContentsIndex"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL1Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL2Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruL3Index"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruName"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruType"), ("JUNIPER-FABRIC-CHASSIS", "jnxFabricFruSlot"))
if mibBuilder.loadTexts: jnxFabricFruOK.setStatus('current')
if mibBuilder.loadTexts: jnxFabricFruOK.setDescription('A jnxFabricFabricFruOK trap signifies that the SNMP entity, acting in an agent role, has detected that the specified FRU (Field Replaceable Unit) has recovered from previous operational errors and it is in ok state in the chassis.')
mibBuilder.exportSymbols("JUNIPER-FABRIC-CHASSIS", jnxFabricFruL3Index=jnxFabricFruL3Index, jnxFabricDeviceEntryDescr=jnxFabricDeviceEntryDescr, jnxFabricOverTemperature=jnxFabricOverTemperature, jnxFabricDeviceEntrySerialNo=jnxFabricDeviceEntrySerialNo, jnxFabricRedundancyChassisId=jnxFabricRedundancyChassisId, jnxFabricContentsRevision=jnxFabricContentsRevision, jnxFabricOperatingDRAMSize=jnxFabricOperatingDRAMSize, jnxFabricContentsContainerIndex=jnxFabricContentsContainerIndex, jnxFabricOperatingDescr=jnxFabricOperatingDescr, jnxFabricRedundancyKeepaliveElapsed=jnxFabricRedundancyKeepaliveElapsed, jnxFabricFruL1Index=jnxFabricFruL1Index, jnxFabricFruPowerOff=jnxFabricFruPowerOff, jnxFabricRevision=jnxFabricRevision, jnxFabricFilledL1Index=jnxFabricFilledL1Index, jnxFabricRedundancySwitchoverTime=jnxFabricRedundancySwitchoverTime, jnxFabricContainersLevel=jnxFabricContainersLevel, jnxFabricFruCheck=jnxFabricFruCheck, jnxFabricContainersTable=jnxFabricContainersTable, jnxFabricFilledDescr=jnxFabricFilledDescr, jnxFabricContainersFamily=jnxFabricContainersFamily, jnxFabricFilledContainerIndex=jnxFabricFilledContainerIndex, jnxFabricOperating1MinLoadAvg=jnxFabricOperating1MinLoadAvg, jnxFabricContentsL1Index=jnxFabricContentsL1Index, jnxFabricDeviceTable=jnxFabricDeviceTable, jnxFabricDeviceEntryClass=jnxFabricDeviceEntryClass, jnxFabricContainersWithin=jnxFabricContainersWithin, jnxFabricFilledChassisId=jnxFabricFilledChassisId, jnxFabricRedundancyTable=jnxFabricRedundancyTable, jnxFabricOperatingCPU=jnxFabricOperatingCPU, jnxFabricOperatingTable=jnxFabricOperatingTable, jnxFabricRedundancyL3Index=jnxFabricRedundancyL3Index, jnxFabricFanFailure=jnxFabricFanFailure, jnxFabricRedundancyEntry=jnxFabricRedundancyEntry, jnxFabricClass=jnxFabricClass, jnxFabricContentsL3Index=jnxFabricContentsL3Index, jnxFabricDeviceEntryRevision=jnxFabricDeviceEntryRevision, jnxFabricContentsChassisId=jnxFabricContentsChassisId, jnxFabricFruType=jnxFabricFruType, jnxFabricContentsLastChange=jnxFabricContentsLastChange, jnxFabricContentsChassisDescr=jnxFabricContentsChassisDescr, jnxFabricFruRemoval=jnxFabricFruRemoval, jnxFabricDeviceEntryFirmwareRevision=jnxFabricDeviceEntryFirmwareRevision, jnxFabricRedundancyKeepaliveLoss=jnxFabricRedundancyKeepaliveLoss, jnxFabricFruTemp=jnxFabricFruTemp, jnxFabricDescr=jnxFabricDescr, jnxFabricFanOK=jnxFabricFanOK, PYSNMP_MODULE_ID=jnxFabricAnatomy, jnxFabricFruOfflineReason=jnxFabricFruOfflineReason, jnxFabricContainersEntry=jnxFabricContainersEntry, jnxFabricRedundancyState=jnxFabricRedundancyState, jnxFabricOperatingLastRestart=jnxFabricOperatingLastRestart, jnxFabricContentsDescr=jnxFabricContentsDescr, jnxFabricFirmwareRevision=jnxFabricFirmwareRevision, jnxFabricContentsEntry=jnxFabricContentsEntry, jnxFabricRedundancyDescr=jnxFabricRedundancyDescr, jnxFabricDeviceEntryName=jnxFabricDeviceEntryName, jnxFabricOperating15MinLoadAvg=jnxFabricOperating15MinLoadAvg, jnxFabricFilledTable=jnxFabricFilledTable, jnxFabricRedundancySwitchover=jnxFabricRedundancySwitchover, jnxFabricTemperatureOK=jnxFabricTemperatureOK, jnxFabricBootFromBackup=jnxFabricBootFromBackup, jnxFabricAnatomyScalars=jnxFabricAnatomyScalars, jnxFabricDeviceIndex=jnxFabricDeviceIndex, jnxFabricContainersIndex=jnxFabricContainersIndex, jnxFabricFruPsdAssignment=jnxFabricFruPsdAssignment, jnxFabricDeviceEntryKernelMemoryUsedPercent=jnxFabricDeviceEntryKernelMemoryUsedPercent, jnxFabricOperatingChassisDescr=jnxFabricOperatingChassisDescr, jnxFabricFruLastPowerOn=jnxFabricFruLastPowerOn, jnxFabricDeviceEntryModel=jnxFabricDeviceEntryModel, jnxFabricFruSlot=jnxFabricFruSlot, jnxFabricOperatingHeap=jnxFabricOperatingHeap, jnxFabricOperatingL2Index=jnxFabricOperatingL2Index, jnxFabricFilledChassisDescr=jnxFabricFilledChassisDescr, jnxFabricOperatingRestartTime=jnxFabricOperatingRestartTime, jnxFabricFruContentsIndex=jnxFabricFruContentsIndex, jnxFabricOperatingStateOrdered=jnxFabricOperatingStateOrdered, jnxFabricContentsChassisCleiCode=jnxFabricContentsChassisCleiCode, jnxFabricFruInsertion=jnxFabricFruInsertion, jnxFabricRedundancyContentsIndex=jnxFabricRedundancyContentsIndex, jnxFabricFEBSwitchover=jnxFabricFEBSwitchover, jnxFabricFruPowerOn=jnxFabricFruPowerOn, jnxFabricFilledLastChange=jnxFabricFilledLastChange, jnxFabricContainersDescr=jnxFabricContainersDescr, jnxFabricFilledState=jnxFabricFilledState, jnxFabricFruEntry=jnxFabricFruEntry, jnxFabricOperatingState=jnxFabricOperatingState, jnxFabricHardDiskFailed=jnxFabricHardDiskFailed, jnxFabricDeviceEntry=jnxFabricDeviceEntry, jnxFabricFruPowerUpTime=jnxFabricFruPowerUpTime, jnxFabricContentsType=jnxFabricContentsType, jnxFabricContainersCount=jnxFabricContainersCount, jnxFabricOperatingL3Index=jnxFabricOperatingL3Index, jnxFabricRedundancyKeepaliveTimeout=jnxFabricRedundancyKeepaliveTimeout, jnxFabricOperatingUpTime=jnxFabricOperatingUpTime, jnxFabricOperatingISR=jnxFabricOperatingISR, jnxFabricOperatingTemp=jnxFabricOperatingTemp, jnxFabricFruOffline=jnxFabricFruOffline, jnxFabricLastInstalled=jnxFabricLastInstalled, jnxFabricAnatomyTables=jnxFabricAnatomyTables, jnxFabricContentsPartNo=jnxFabricContentsPartNo, jnxFabricRedundancySwitchoverReason=jnxFabricRedundancySwitchoverReason, jnxFabricAnatomy=jnxFabricAnatomy, jnxFabricContentsSerialNo=jnxFabricContentsSerialNo, jnxFabricContentsInstalled=jnxFabricContentsInstalled, jnxFabricFruChassisId=jnxFabricFruChassisId, jnxFabricFruState=jnxFabricFruState, jnxFabricOperatingL1Index=jnxFabricOperatingL1Index, jnxFabricRedundancySwitchoverCount=jnxFabricRedundancySwitchoverCount, jnxFabricFilledEntry=jnxFabricFilledEntry, jnxFabricOperatingEntry=jnxFabricOperatingEntry, jnxFabricRedundancyKeepaliveHeartbeat=jnxFabricRedundancyKeepaliveHeartbeat, jnxFabricFruOnline=jnxFabricFruOnline, jnxFabricDeviceEntryFilledLastChange=jnxFabricDeviceEntryFilledLastChange, jnxFabricDeviceEntryContentsLastChange=jnxFabricDeviceEntryContentsLastChange, jnxFabricOperatingContentsIndex=jnxFabricOperatingContentsIndex, jnxFabricHardDiskMissing=jnxFabricHardDiskMissing, jnxFabricFruL2Index=jnxFabricFruL2Index, jnxFabricContainersView=jnxFabricContainersView, jnxFabricOperatingChassisId=jnxFabricOperatingChassisId, jnxFabricRedundancyChassisDescr=jnxFabricRedundancyChassisDescr, jnxFabricFruFailed=jnxFabricFruFailed, jnxFabricRedundancyConfig=jnxFabricRedundancyConfig, jnxFabricPowerSupplyOK=jnxFabricPowerSupplyOK, jnxFabricOperatingBuffer=jnxFabricOperatingBuffer, jnxFabricSerialNo=jnxFabricSerialNo, jnxFabricDeviceEntryContainersFamily=jnxFabricDeviceEntryContainersFamily, JnxFabricContainersFamily=JnxFabricContainersFamily, jnxFabricOperatingMemory=jnxFabricOperatingMemory, jnxFabricFruChassisDescr=jnxFabricFruChassisDescr, jnxFabricContentsL2Index=jnxFabricContentsL2Index, jnxFabricOperating5MinLoadAvg=jnxFabricOperating5MinLoadAvg, jnxFabricContainersType=jnxFabricContainersType, jnxFabricRedundancyL2Index=jnxFabricRedundancyL2Index, jnxFabricFruLastPowerOff=jnxFabricFruLastPowerOff, jnxFabricDeviceEntryInstalled=jnxFabricDeviceEntryInstalled, jnxFabricFilledL2Index=jnxFabricFilledL2Index, jnxFabricFruTable=jnxFabricFruTable, jnxFabricPowerSupplyFailure=jnxFabricPowerSupplyFailure, JnxFabricDeviceId=JnxFabricDeviceId, jnxFabricRedundancyL1Index=jnxFabricRedundancyL1Index, jnxFabricContentsTable=jnxFabricContentsTable, jnxFabricFruName=jnxFabricFruName, jnxFabricFruOK=jnxFabricFruOK, jnxFabricFilledL3Index=jnxFabricFilledL3Index)
