#
# PySNMP MIB module DOCS-LOADBAL3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-LOADBAL3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
NodeName, = mibBuilder.importSymbols("CLAB-TOPO-MIB", "NodeName")
ChannelList, docsIf3CmtsCmRegStatusEntry, RcpId = mibBuilder.importSymbols("DOCS-IF3-MIB", "ChannelList", "docsIf3CmtsCmRegStatusEntry", "RcpId")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
SnmpTagList, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "SnmpTagList")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, MibIdentifier, iso, Counter32, Integer32, Gauge32, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "iso", "Counter32", "Integer32", "Gauge32", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32")
MacAddress, RowStatus, TimeStamp, TruthValue, TextualConvention, DisplayString, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TimeStamp", "TruthValue", "TextualConvention", "DisplayString", "RowPointer")
docsLoadbal3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22))
docsLoadbal3Mib.setRevisions(('2008-05-22 00:00', '2007-12-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsLoadbal3Mib.setRevisionsDescriptions(('Revised Version includes ECN OSSIv3.0-N-08.0645-4 and published as I07', 'Initial version, published as part of the CableLabs OSSIv3.0 specification CM-SP-OSSIv3.0-I05-071206 via ECN OSSIv3.0-N-07.0522-7',))
if mibBuilder.loadTexts: docsLoadbal3Mib.setLastUpdated('200805220000Z')
if mibBuilder.loadTexts: docsLoadbal3Mib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsLoadbal3Mib.setContactInfo('Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027-9750 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsLoadbal3Mib.setDescription('This MIB module contains the management objects for the DOCSIS 3.0 CMTS Load Balanding operation. Copyright 1999-2006 Cable Television Laboratories, Inc. All rights reserved.')
class ChChgInitTechMap(TextualConvention, Bits):
    reference = 'DOCSIS 3.0 MAC and Uper Layer Protocol Specification, CM-SP-MULPIv3.0-I08-080522, Channel Assignment During Registration section.'
    description = "This data type enumerates the allowed initialization techniques for Dynamic Channel Change (DCC) and Dynamic Bonding Change (DBC) operations. The techniques are represented by the 5 most significant bits (MSB). Bits 0 through 4 map to initialization techniques 0 through 4. Each bit position represents the internal associated technique as described below: 'reinitializeMac' Reinitialize the MAC 'broadcastInitRanging' Perform Broadcast initial ranging on new channel before normal operation 'unicastInitRanging' Perform unicast ranging on new channel before normal operation 'initRanging' Perform either broadcast or unicast ranging on new channel before normal operation 'direct' Use the new channel(s) directly without re-initializing or ranging Multiple bits may be set to 1 to allow the CMTS to select the most suitable technique in a proprietary manner. An empty value or a value with all bits in '0' means no channel changes allowed"
    status = 'current'
    namedValues = NamedValues(("reinitializeMac", 0), ("broadcastInitRanging", 1), ("unicastInitRanging", 2), ("initRanging", 3), ("direct", 4))

docsLoadbal3MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1))
docsLoadbal3System = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 1))
docsLoadbal3SystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3SystemEnable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I07-080522 Externally-Directed Load Balancing section.')
if mibBuilder.loadTexts: docsLoadbal3SystemEnable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3SystemEnable.setDescription("This attribute when set to 'true' enables Autonomous Load Balancing operation on the CMTS, otherwise Autonomous Load Balancing is disabled. A failure to enable Autonomous Load Balancing operation is registered in the EnableError attribute. When Autonomous Load Balancing is enabled, the CMTS may reject Externally-Directed Load Balancing operations. However, even when Autonomous Load Balancing is disabled, the CMTS is required to assign load balancing parameters to CMs as provisioned in the configuration file and/or RestrictCM object. This attribute value persists after system reinitialization. There might be cases where this attribute reports a failure and Load Balancing is enabled, for example after system reinitialization where Load Balancing was previously set to enabled but there are issues with the CMTS configuration.")
docsLoadbal3SystemEnableError = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3SystemEnableError.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3SystemEnableError.setDescription('This attribute represents a text message that describes a failure to enable load balancing due configuration errors, or other considerations. The zero-length string indicates no errors occurred during the last Autonomous Load Balancing activation.')
docsLoadbal3ChgOverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2))
docsLoadbal3ChgOverGroupMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupMacAddress.setDescription('This attribute represents the MAC address of the cable modem that the CMTS instructs to move to a new downstream and/or upstream channel set.')
docsLoadbal3ChgOverGroupInitTech = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 2), ChChgInitTechMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupInitTech.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupInitTech.setDescription('This attribute represents the initialization technique that the cable modem is instructed to use when performing multiple-channel change-over operation. The value of this attribute applies to all upstream channels in the channel set.')
docsLoadbal3ChgOverGroupForceUCC = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupForceUCC.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupForceUCC.setDescription("This attribute when set to 'true' indicates that the CMTS forces UCC messages instead of DCC messages. In some cases the CMTS may still use UCC commands even though this attribute value is 'false', for example in an upstream-only change-over operation directed to a CM that the CMTS is aware is only capable of UCC, but the operator is not aware of the CM capabilities. This attribute value is ignored when the target CM for the change-over operation is in MRC mode, or the UsChSet attribute is the zero-length string, or the operation includes changes for downstream channels.")
docsLoadbal3ChgOverGroupdownFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupdownFrequency.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupdownFrequency.setDescription('This attribute represents a single-downstream frequency to which the cable modem is instructed to move using a DCC request. The value zero indicates that this attribute is ignored during a commit operation.')
docsLoadbal3ChgOverGroupMdIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupMdIfIndex.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, CM Receive Channel (RCP/RCC) Encodings section and DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I05-071206, RCC Status Objects section.')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupMdIfIndex.setDescription('This attribute describes the MAC Domain Interface index of the triplet: Mac Domain, RCP-ID and RCC Status Index of the RccStatus object that represents the RCC used in the change-over operation. This MAC Domain Interface Index is also used to provide context for the UsChSet and ServiceFlowInfo attributes.')
docsLoadbal3ChgOverGroupRcpId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 6), RcpId().clone(hexValue="0000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupRcpId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522 CM Receive Channel (RCP/RCC) Encodings section and DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I05-071206, RCC Status Objects section.')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupRcpId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupRcpId.setDescription('This attribute describes the RCP-ID of the triplet: Mac Domain, RCP-ID and RCC Status Index of the RccStatus object that represents the RCC used in the change-over operation.')
docsLoadbal3ChgOverGroupRccId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupRccId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, CM Receive Channel (RCP/RCC) Encodings section and DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I05-071206 RCC Status Objects section.')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupRccId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupRccId.setDescription('This attribute describes the RCC Status Index of the triplet: Mac Domain, RCP-ID and RCC Status Index of the RccStatus object that represents the RCC used in the change-over operation.')
docsLoadbal3ChgOverGroupUsChSet = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 8), ChannelList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupUsChSet.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupUsChSet.setDescription('This attribute describes the Channel list (within the context of the MAC domain identified by MdIfIndex) that represents the final TCS expected from the change-over operation. When the operation is intended for an RCC-only, this attribute is set to zero and the attribute InitTech is ignored.')
docsLoadbal3ChgOverGroupServiceFlowInfo = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupServiceFlowInfo.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupServiceFlowInfo.setDescription("This attribute provides a list of Service Flow ID-Channel Set ID pairs used to control Service Flow assignment in the change-over operation. This is intended as an override to the normal assignment based on SF attributes. This attribute is encoded as a series of 32-bit pairs as follows: - The first four bytes correspond to the value of the Service Flow ID (attribute Id of the ServiceFlow object of the DOCSIS QOS objects. - The last four bytes correspond to the value of the attribute ChSetId of the UsChSet or DsChSet object of the CMTS Bonding Objects. If this attribute does not include tuples for some of the CM's Service Flows, the CMTS determines the respective channels based on SF attributes. Service Flow ID-Channel Set ID pairs matching upstream service flows are ignored if the change-over operation does not affect the TCC of the CM. Similarly, Service Flow ID-Channel Set ID pairs matching downstream service flows are ignored if the change-over operation does not affect the RCC of the CM.")
docsLoadbal3ChgOverGroupTransactionId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupTransactionId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupTransactionId.setDescription('This attribute represents an operator identifier for the change-over operation to be used to correlate logged information in the ChangeOver3 Status object. The CMTS uses this value as the Transaction ID in the DBC-REQ or DCC-REQ message transmitted in association with this operation. If this value is set to zero the CMTS defines its own MAC message Transaction ID value.')
docsLoadbal3ChgOverGroupCommit = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupCommit.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupCommit.setDescription("This attribute when set to 'true' triggers the change-over operation for Externally-Directed Load Balancing. Setting this attribute to 'true' is known as a commit operation. A commit operation is considered successful if the CMTS considers that the entered information is valid and the transaction can be initiated. It does not imply that the channel-change operation itself (i.e. UCC, DCC, DBC transaction) reports success or completion. A commit operation is considered unsuccessful if the CMTS determines that there are invalid attributes values in the ChangeOver object such that the change-over operation cannot be initiated. After system initialization all ChangeOver object parameters are set to default values. After a successful commit operation all ChangeOver object parameters are set to default values with the exception of this attribute (commit) that is set to 'true'. An unsuccessful commit operation is rejected and this attribute reports false in subsequent value queries. With regard to error checking on a commit operation, the following aspects are defined: - The CMTS rejects the commit operation when the MAC address in MacAddr attribute is not from an existing and operational cable modem in the CMTS. - The CMTS rejects the commit operation when there is already a change-over operation in progress for the CM, i.e. the corresponding attribute value in the -ChangeOverStatus object is one of 'messageSent', 'modemDeparting' or 'waitToSendMessage'. - The CMTS rejects the commit operation when neither of the upstream or downstream attribute parameters of the change-over operation are set. When the CM is in MRC disabled mode, only UCC/DCC commands are valid, therefore: - The CMTS ignores the values of RcpId, RccId, and ServiceFlowInfo in the commit operation. - The CMTS rejects the commit operation if neither of DownFrequency or UsChSet were set to non-default values. - The CMTS rejects the commit operation when the UsChSet indicates more than one upstream channel. - A single-upstream-channel change-over operation (no downstream information) is rejected if the upstream channel information corresponds to a non-existent channel or a channel with operational status down. - The CMTS rejects the commit operation for a downstream frequency that the CMTS can determine to be invalid. For example, the downstream frequency corresponds to a channel that is part of the MD-DS-SG in which the target CM is currently registered, and this Downstream Channel is known to be operationally down, in a test mode, mute state, etc. - To move a MRC/MTC-capable CM to a MRC/MTC enabled MAC Domain, the operator needs to reinitialize the CM via a DCC operation by including the appropriate DownFrequency and an InitTech allowing only the 'reinitialize MAC' initialization technique. When the CM is in MRC enabled mode, DCC and DBC commands are valid, therefore: - The CMTS rejects the commit operation if both the Downstream Frequency (via the DownFrequency attribute) and the RCC (via the RcpId and RccId) are set to non-default values. - The CMTS rejects the commit operation if the MdIfIndex attribute value is invalid, or if the triplet MdIfIndex, RcpId, RccId does not resolve in a valid RCC, or at least one of the indicated downstream channels is know to be operationally down, in a test mode, mute state, etc. - The CMTS rejects the commit operation if it can detect the UsChSet includes one or more channels that are not part of the US-SG of the CM, or any of those channels are in operational status down. - The CMTS rejects the commit operation if a service flow entry in the ServiceFlowInfo attribute includes channels that are not part of the CMs target RCS or TCS. After processing the commit operation the CMTS creates or overwrites (if it already exists) an instance of the ChgOverStatus object for the associated CM. After a successful commit operation, the CMTS initiates the change-over transaction using the most appropriate technique. The potential techniques are: - UCC - For upstream-channel-only changes on CMs not operating in MRC mode. - DCC - For upstream and/or downstream channel changes on CMs not operating in MRC mode. - DCC followed by channel assignment in REG-RSP-MP - For MAC Domain re-assignment on CMs operating in MRC mode. In this case, the change-over command might only include a downstream frequency, or might include an RCC defined in the target MAC domain. The upstream channel set may or may not be provided. The only applicable Initialization Technique for this operation is 'reinitializeMAC'. - DBC - For upstream and/or downstream channel set changes on CMs operating in MRC mode.")
docsLoadbal3ChgOverGroupLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 2, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupLastCommit.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverGroupLastCommit.setDescription('The value of sysUpTime when the attribute Commit was last set to true. Zero if never set.')
docsLoadbal3ChgOverStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3), )
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusTable.setDescription('This object reports the status of cable modems instructed to move to a new downstream and/or upstream channel or channel sets when commanded either by an operation in the ChgOver object. An instance in this object is created for each change-over operation committed successfully. If the instance value attribute is not final (the change-over operation is still pending completion), this instance is expected to be updated at some point later to reflect the final state of the change-over operation.')
docsLoadbal3ChgOverStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1), ).setIndexNames((0, "DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusId"))
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusEntry.setDescription('The conceptual row of docsLoadbal3ChgOverStatus.')
docsLoadbal3ChgOverStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusId.setDescription('This key represents a monotonically increasing value for the record that stores the status of the change-over operation. When the ChOverStatus object exceeds the size limit of this object the lowest Id value instances are removed so that the total number of entries no longer exceeds the size limit allowing the CMTS to maintain the most current entries.')
docsLoadbal3ChgOverStatusMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusMacAddr.setDescription('This attribute represents the Mac address set in the ChgOver object commit operation.')
docsLoadbal3ChgOverStatusInitTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 3), ChChgInitTechMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusInitTech.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusInitTech.setDescription('The initialization technique set in change-over operation.')
docsLoadbal3ChgOverStatusDownFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusDownFrequency.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusDownFrequency.setDescription('This attribute represents the new downstream frequency to which the cable modem is instructed to move. The value 0 indicates that the CMTS does not create a TLV for the downstream frequency in the DCC-REQ message. This object has no meaning when executing UCC operations.')
docsLoadbal3ChgOverStatusMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusMdIfIndex.setDescription('This attribute represents the MAC Domain Interface index set in the ChgOver3 object commit operation, or zero.')
docsLoadbal3ChgOverStatusRcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 6), RcpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusRcpId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusRcpId.setDescription('This attribute represents the RCP-ID set in the MultipleChChgOver object commit operation, or all zeros RCP-ID.')
docsLoadbal3ChgOverStatusRccId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusRccId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusRccId.setDescription('This attribute represents the RCC Status Index set in the ChgOver3 object commit operation, or zero.')
docsLoadbal3ChgOverStatusUsChSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 8), ChannelList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusUsChSet.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusUsChSet.setDescription('This attribute represents the Upstream Channel Set ID in the ChgOver3 object commit operation, or zero.')
docsLoadbal3ChgOverStatusServiceFlowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 484))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusServiceFlowInfo.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusServiceFlowInfo.setDescription('This attribute represents the list of Service Flow-Channel Set ID pairs set in the ChgOver object commit operation, or zero-length string.')
docsLoadbal3ChgOverStatusCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ucc", 1), ("dcc", 2), ("dbc", 3), ("crossMD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusCmd.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusCmd.setDescription("The load balancing MAC Management Message exchange type used by the CMTS for the change-over operation in the ChgOver object commit operation. - 'ucc' indicates the usage of Upstream Channel Change (UCC) messages exchange. - 'dcc' indicates the usage of Dynamic Channel Change (DCC) messages exchange. - 'dbc' indicates the usage of Dynamic Bonding Change (DCC) messages exchange - 'crossMD' although this term does not correspond to a MAC Management Message type, it indicates the movement of a CM to a different MAC Domain that includes a sequence of different MAC Management Messages types (i.e. DCC to move the CM to the correct MAC Domain, followed by channel assignment in REG-RSP-MP).")
docsLoadbal3ChgOverStatusTransactionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusTransactionId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusTransactionId.setDescription('This attribute represents the transaction Id value used in the change-over operation.')
docsLoadbal3ChgOverStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("messageSent", 1), ("noOpNeeded", 2), ("modemDeparting", 3), ("waitToSendMessage", 4), ("cmOperationRejected", 5), ("cmtsOperationRejected", 6), ("timeOutT13", 7), ("timeOutT15", 8), ("rejectinit", 9), ("success", 10), ("dbcTimeout", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusValue.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusValue.setDescription("This attribute represents the status of the specified change-over operation. The enumerations are: Change-over using DCC message exchange: 'modemDeparting' The cable modem has responded with a change-over response of either a DCC-RSP with a confirmation code of depart(180) or a UCC-RSP. 'timeOutT13' Failure due to no DCC-RSP with confirmation code depart(180) received prior to expiration of the T13 timer. 'timeOutT15' T15 timer timed out prior to the arrival of a bandwidth request, RNG-REQ message, or DCC-RSP message with confirmation code of arrive(181) from the cable modem. Change-over using DBC message exchange: 'dbcTimeout' The number of DBC-REQ retries was exceeded and no DBC-RSP was received Change-over CMTS verifications: 'messageSent' The CMTS has sent a DOCSIS MAC message request to instruct the CM to do the change-over operation. 'noOpNeed' A change-over operation was requested in which neither the DS and US channels where the CM is operational changed. 'waitToSendMessage' The specified operation is active and CMTS is waiting to send the channel change message with channel info to the cable modem. 'cmOperationRejected' Channel Change operation was rejected by the cable modem. 'cmtsOperationRejected' Channel Change operation was rejected by the Cable Modem Termination System. 'rejectInit' Operation rejected due to unsupported initialization tech requested. 'success' CMTS received an indication that the CM successfully completed the change-over operation. e.g., If an initialization technique of re-initialize the MAC is used, success in indicated by the receipt of a DCC-RSP message with a confirmation code of depart(180) or DBC confirmation code ok/success. In all other DCC cases, success is indicated by: (1) the CMTS received a DCC-RSP message with confirmation code of arrive(181) or (2) the CMTS internally confirms the presence of the CM on the new channel(s).")
docsLoadbal3ChgOverStatusUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 3, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusUpdate.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ChgOverStatusUpdate.setDescription('The value of sysUpTime when the attribute value of this instance was last updated.')
docsLoadbal3CmtsCmParamsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4), )
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsTable.setReference('DOCSIS 3.0 MAC and Uper Layer Protocol Specification, CM-SP-MULPIv3.0-I08-080522, Channel Assignment During Registration section.')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsTable.setDescription('This object represents the autonomous load balancing parameters provisioned for cable modem. The CMTS selects the cable modem Load Balancing Group (GrpId attribute of this object) from multiple sources by following the rules and sequence described below: The CMTS selects the assignment of the CM to a Load Balancing Group by determining first if the CM is in a Restricted Load Balancing Group or in its absence to the General Load Balancing group that corresponds to the MD-CM-SG of the CM. The selection of the Restricted Load Balancing group is achieved by first matching the CM in the RestrictCmCfg Object and if no match is found, by selecting the best match within the ResGrpCfg object. The best match within the ResGrpCfg follows the MULPI requirements on precedences of the CM signaled TLVs: ServiceType ID and Load Balancing Group ID (for backward compatibility of provisioned Group IDs).')
docsLoadbal3CmtsCmParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1), )
docsIf3CmtsCmRegStatusEntry.registerAugmentions(("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsEntry"))
docsLoadbal3CmtsCmParamsEntry.setIndexNames(*docsIf3CmtsCmRegStatusEntry.getIndexNames())
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsEntry.setDescription('The conceptual row of docsLoadbal3CmtsCmParams.')
docsLoadbal3CmtsCmParamsProvGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsProvGrpId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsProvGrpId.setDescription('This attribute indicates the provisioned Load Balancing Group ID TLV the CM signaled to the CMTS during registration, or zero if not provisioned in the CM.')
docsLoadbal3CmtsCmParamsCurrentGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsCurrentGrpId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsCurrentGrpId.setDescription('This attribute references the Load Balancing Group Identifier (Id attribute from the GrpStatus object) associated with the cable modem after the CMTS validates the CM Load Balancing Group ID TLV, Service Type ID TLV and Restricted CM list. The value zero indicates that the Load Balancing Group is invalid, or the General Load Balancing Group is invalid due ambiguous topology resolution.')
docsLoadbal3CmtsCmParamsProvServiceTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsProvServiceTypeID.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsProvServiceTypeID.setDescription('This attribute indicates the provisioned Service Type ID TLV the CM signaled to the CMTS during registration, or the zero-length string if not provisioned in the CM.')
docsLoadbal3CmtsCmParamsCurrentServiceTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsCurrentServiceTypeID.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsCurrentServiceTypeID.setDescription('This attribute represents the Service Type ID the CMTS picked from the Restricted Group of Restricted CM list, or the Service Type Id TLV the CM signaled to the CMTS during registration, or the zero-length string if none was used.')
docsLoadbal3CmtsCmParamsPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsPolicyId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsPolicyId.setDescription('This attribute references the Load Balancing Policy ID associated to the cable modem either from the configuration file or from the General or Restricted Load Balancing Groups CMTS configuration.')
docsLoadbal3CmtsCmParamsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsPriority.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3CmtsCmParamsPriority.setDescription('This attribute references the Load Balancing Priority associated to the cable modem either from the configuration file or from the General or Restricted Load Balancing Groups CMTS configuration.')
docsLoadbal3GeneralGrpDefaults = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 5))
docsLoadbal3GeneralGrpDefaultsEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 5, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpDefaultsEnable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpDefaultsEnable.setDescription('This attribute represents the default value for the Enable attribute of the GeneralLoadBalGrp object.')
docsLoadbal3GeneralGrpDefaultsPolicyId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 5, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpDefaultsPolicyId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpDefaultsPolicyId.setDescription('This attribute represents the default value for the PolicyId attribute of the GeneralLoadBalGrp object.')
docsLoadbal3GeneralGrpDefaultsInitTech = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 5, 3), ChChgInitTechMap().clone(hexValue="F8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpDefaultsInitTech.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpDefaultsInitTech.setDescription('This attribute represents the default value for the InitTechnique attribute of the GeneralLoadBalGrp object.')
docsLoadbal3GeneralGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6), )
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgTable.setDescription('This object provides the parameters for the General Load Balancing Groups of MD-CM-SGs associated with MAC Domain-Fiber Node pairs. This object allows configuration of load balancing parameters for General Load Balancing Groups by way of MAC Domain-Fiber Node pairs. In many deployments, a MAC Domain-Fiber Node pair will equate to an MD-CM-SG (which always equates to a GLBG). In the case where an MD-CM-SG spans multiple Fiber Nodes, there will be multiple instances of this object that represent the General Load Balancing Group (MD-CM-SG). The CMTS MUST enforce that such instances all have the same attribute values. Any time a fiber node is associated to a MAC Domain an instance of this object is defined by the CMTS and populated with default values from the GeneralGrpDefaults object. Similarly when a fiber node is no longer paired with a MAC Domain the corresponding instance is deleted from the object.')
docsLoadbal3GeneralGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpCfgNodeName"))
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgEntry.setDescription('The conceptual row of docsLoadbal3GeneralGrpCfg. The CMTS MUST persist all instances of GeneralGrpCfg across reinitializations.')
docsLoadbal3GeneralGrpCfgNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6, 1, 1), NodeName())
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgNodeName.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgNodeName.setDescription('This key represents the fiber node name being associated with a MAC Domain.')
docsLoadbal3GeneralGrpCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgEnable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgEnable.setDescription("This attribute when set to 'true' enables Autonomous Load Balancing for the General Load Balancing Group associated with this instance. When set to 'false' Autonomous Load Balancing is disabled.")
docsLoadbal3GeneralGrpCfgPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgPolicyId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgPolicyId.setDescription('This attribute defines the default load balancing policy for the General Load Balancing Group associated with this instance.')
docsLoadbal3GeneralGrpCfgInitTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6, 1, 4), ChChgInitTechMap().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgInitTech.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgInitTech.setDescription('This attribute defines the load balancing initialization technique for the General Load Balancing Group associated with this instance.')
docsLoadbal3GeneralGrpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgStatus.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GeneralGrpCfgStatus.setDescription('The conceptual row status of this object.')
docsLoadbal3ResGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7), )
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgTable.setDescription('This object represents the configuration of Restricted Load Balancing Groups.')
docsLoadbal3ResGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1), ).setIndexNames((0, "DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgId"))
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgEntry.setDescription('The conceptual row of docsLoadbal3ResGrpCfg. The CMTS MUST persist all instances of ResGrpCfg across reinitializations.')
docsLoadbal3ResGrpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgId.setReference('DOCSIS 3.0 MAC and Uper Layer Protocol Specification, CM-SP-MULPIv3.0-I08-080522, Channel Assignment During Registration section.')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgId.setDescription('This key represents a unique index assigned to the Restricted Load Balancing Group by the user for provisioning purposes. This value is unique within a CMTS and is matched with the CM signaled Load Balancing Group ID TLV value when determining the CM Load Balancing Group assignment based on such TLV value.')
docsLoadbal3ResGrpCfgMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgMdIfIndex.setDescription('This attribute represents the MAC domain where the Restricted Load balancing Group applies. The value zero is allowed to indicate that vendor-specific mechanisms are used to define the Restricted Load Balancing Group. For example, to provide Load Balancing Groups across MAC domains.')
docsLoadbal3ResGrpCfgDsChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 3), ChannelList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgDsChList.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgDsChList.setDescription('This attribute contains the list of downstream channels of the Restricted Load Balancing Group.')
docsLoadbal3ResGrpCfgUsChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 4), ChannelList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgUsChList.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgUsChList.setDescription('This attribute contains the list of upstream channels of the Restricted Load Balancing Group.')
docsLoadbal3ResGrpCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgEnable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgEnable.setDescription("This attribute when set to 'true' enables Autonomous Load Balancing on this Restricted Load Balancing Group. The value 'false' disables the load balancing operation on this group.")
docsLoadbal3ResGrpCfgInitTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 6), ChChgInitTechMap().clone(hexValue="F8")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgInitTech.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgInitTech.setDescription('This attribute represents the initialization techniques that the CMTS can use to load balance cable modems in the Load Balancing Group.')
docsLoadbal3ResGrpCfgPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgPolicyId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgPolicyId.setDescription('This attribute represents the default load balancing policy of this Restricted Load Balancing Group. A policy is described by a set of conditions (rules) that govern the load balancing process for a cable modem. The CMTS assigns this Policy ID value to a cable modem associated with the group ID when the cable modem does not signal a Policy ID during registration. The Policy ID value is intended to be a numeric reference to an instance of the Policy object. However, It is not required to have an existing or active policy instance in which case it indicates no policy is associated with the Load Balancing Group. The Policy ID of value 0 is reserved to indicate no policy is associated with the load balancing group.')
docsLoadbal3ResGrpCfgServiceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 8), SnmpTagList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgServiceTypeId.setReference('DOCSIS 3.0 MAC and Uper Layer Protocol Specification, CM-SP-MULPIv3.0-I08-080522, Channel Assignment During Registration section.')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgServiceTypeId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgServiceTypeId.setDescription('This attribute represent a space separated list of ServiceType IDs that will be compared against the cable modem provisioned Service Type ID to determine the most appropriate Restricted Load Balancing Group.')
docsLoadbal3ResGrpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgStatus.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3ResGrpCfgStatus.setDescription('The conceptual row status of this object.')
docsLoadbal3GrpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8), )
if mibBuilder.loadTexts: docsLoadbal3GrpStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusTable.setDescription('This object represents the status of all General and Restricted Load Balancing Groups in this CMTS. This object summarizes the load balancing parameters that applies to CMTS system wide Load Balancing Groups. The Load Balancing Groups defined in this object include the configured Restricted Load Balancing Groups and the General Load Balancing Groups derived from the GeneralGrpCfg object.')
docsLoadbal3GrpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1), ).setIndexNames((0, "DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusId"))
if mibBuilder.loadTexts: docsLoadbal3GrpStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusEntry.setDescription('The conceptual row of docsLoadbal3GrpStatus.')
docsLoadbal3GrpStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3GrpStatusId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusId.setDescription('This key represents an unique identifier of a Load Balancing Group in the CMTS.')
docsLoadbal3GrpStatusCfgIdOrZero = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusCfgIdOrZero.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusCfgIdOrZero.setDescription('This attribute references the Id attribute of the instance of the ResGrpCfg this instance corresponds to. The value zero indicates that the instance corresponds to a General Load Balancing Group.')
docsLoadbal3GrpStatusMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusMdIfIndex.setDescription('This attribute represents the MAC domain where the Load Balancing Group applies. The value zero is allowed to indicate that vendor-specific mechanisms are used in load balancing operations. For example, to provide Load Balancing Groups across MAC domains.')
docsLoadbal3GrpStatusMdCmSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusMdCmSgId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusMdCmSgId.setDescription('This attribute corresponds to the MD-CM-SG-ID that includes all the upstream and downstream channels of the Load Balancing Group. The value zero indicates that this instance corresponds to a Restricted Load Balancing Group . If there are vendor-specific Load Balancing Groups configuration ( e.g. MdIfIndex set to zero), this attribute value might not be meaningful.')
docsLoadbal3GrpStatusDsChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 5), ChannelList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusDsChList.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusDsChList.setDescription('This attribute contains the list of downstream channels of the Load Balancing Group. If there are vendor-specific Load Balancing Groups configuration ( e.g. MdIfIndex set to zero), this attribute value might not be meaningful.')
docsLoadbal3GrpStatusUsChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 6), ChannelList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusUsChList.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusUsChList.setDescription('This attribute contains the list of the upstream channels of the Load Balancing Group. If there are vendor-specific Load Balancing Groups configuration ( e.g. MdIfIndex set to zero), this attribute value might not be meaningful.')
docsLoadbal3GrpStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusEnable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusEnable.setDescription("This attribute when set to 'true' indicates that load balancing is enabled on this group, or disabled if set to 'false'.")
docsLoadbal3GrpStatusInitTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 8), ChChgInitTechMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusInitTech.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusInitTech.setDescription('This attribute indicates the initialization techniques that the CMTS can use when load balancing cable modems that are associated with the Load Balancing Group.')
docsLoadbal3GrpStatusPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusPolicyId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusPolicyId.setDescription('This attribute indicates the Policy that the CMTS can use when load balancing cable modems that are associated with the Load Balancing Group.')
docsLoadbal3GrpStatusChgOverSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusChgOverSuccess.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusChgOverSuccess.setDescription('This attribute counts the number of successful Autonomous Load Balancing operations associated with this Load Balancing Group.')
docsLoadbal3GrpStatusChgOverFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsLoadbal3GrpStatusChgOverFails.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3GrpStatusChgOverFails.setDescription('This attribute counts the number of failed Autonomous load balancing operations associated with this Load Balancing Group.')
docsLoadbal3RestrictCmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9), )
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgTable.setDescription('This object describes the list of cable modems being statically provisioned at the CMTS to a Restricted Load Balancing Group. When a CM registers it is either assigned to')
docsLoadbal3RestrictCmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1), ).setIndexNames((0, "DOCS-LOADBAL3-MIB", "docsLoadbal3RestrictCmCfgId"))
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgEntry.setDescription('The conceptual row of docsLoadbal3RestrictCmCfg. The CMTS MUST persist all instances of RestrictCmCfg across reinitializations.')
docsLoadbal3RestrictCmCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgId.setDescription('This key represents the unique identifier of an instance in this object. the CMTS maintains an unique instance per MAC Address/MAC Address Mask combination')
docsLoadbal3RestrictCmCfgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgMacAddr.setDescription('This attribute represents the Mac Address of the cable modem within the Restricted Load Balancing Group.')
docsLoadbal3RestrictCmCfgMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1, 3), MacAddress().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgMacAddrMask.setDescription('This attribute corresponds to a bit mask acting as a wild card to associate a cable modem MAC addresses to a Restricted Load Balancing Group ID referenced by a restricted group Id or a Service Type ID. The cable modem matching criteria is performed by bit-Anded the cable modem MAC address with the MacAddrMAsk attribute and being compared with the bit-ANDed of attributes MacdAddr and MacAddrMask. A cable modem MAC address look up is performed first with instances containing this attribute value not null, if several entries match, the largest consecutive bit match from MSB to LSB is used.')
docsLoadbal3RestrictCmCfgGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgGrpId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgGrpId.setDescription('The attribute represents the Restricted Load Balancing Group identifier of this entry associated with the cable modem MAC address - MAC address mask combination. The value zero indicates that the instance is matched only against the ServiceTypeId value.')
docsLoadbal3RestrictCmCfgServiceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgServiceTypeId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgServiceTypeId.setDescription('This attribute represents the Service Type Id associated with this cable modem MAC address - MAC Address mask combination.. The zero-length string indicates that the instance is matched only against the GrpId value, if both GrpId and this attribute are not present the instance is ignored for matching purposes.')
docsLoadbal3RestrictCmCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgStatus.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3RestrictCmCfgStatus.setDescription('Indicates the status of this conceptual object. There is no restriction on setting columns in this table any time.')
docsLoadbal3PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 10), )
if mibBuilder.loadTexts: docsLoadbal3PolicyTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3PolicyTable.setDescription('This object describes the set of load balancing policies. Instances from this object might be referenced by GrpStatus object . All the rules contained in a load balancing policy apply to an Autonomous Load Balancing operations. Load balancing rules are defined within this specification or can be vendor-defined as well.')
docsLoadbal3PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 10, 1), ).setIndexNames((0, "DOCS-LOADBAL3-MIB", "docsLoadbal3PolicyId"), (0, "DOCS-LOADBAL3-MIB", "docsLoadbal3PolicyRuleId"))
if mibBuilder.loadTexts: docsLoadbal3PolicyEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3PolicyEntry.setDescription('The conceptual row of docsLoadbal3Policy. The CMTS MUST persist all instances of Policy object across reinitializations.')
docsLoadbal3PolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3PolicyId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3PolicyId.setDescription('This key represents the identifier of a load balancing policy.')
docsLoadbal3PolicyRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3PolicyRuleId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3PolicyRuleId.setDescription('This key represents a rule contained within a balancing policy.')
docsLoadbal3PolicyPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 10, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3PolicyPtr.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3PolicyPtr.setDescription('This attribute represents a reference to an instance in a rule or other policy object like BasicRule object.')
docsLoadbal3PolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3PolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3PolicyRowStatus.setDescription('The conceptual row status of this object.')
docsLoadbal3BasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11), )
if mibBuilder.loadTexts: docsLoadbal3BasicRuleTable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleTable.setDescription('This object represents a basic ruleset applicable to a load balancing policy that references it.')
docsLoadbal3BasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11, 1), ).setIndexNames((0, "DOCS-LOADBAL3-MIB", "docsLoadbal3BasicRuleId"))
if mibBuilder.loadTexts: docsLoadbal3BasicRuleEntry.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleEntry.setDescription('The conceptual row of docsLoadbal3BasicRule. The CMTS MUST persist all instances of BasicRule object across reinitializations.')
docsLoadbal3BasicRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsLoadbal3BasicRuleId.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleId.setDescription('This key represents a unique identifier for balancing ruleset of this object.')
docsLoadbal3BasicRuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("disabledPeriod", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3BasicRuleEnable.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleEnable.setDescription("This attribute when set to 'enabled' enables Autonomous Load Balancing (independently of the load balancing group enable/disable state), the rule set is disabled if set to 'disabled', or is disabled during a period of time it set to 'disabledPeriod'.")
docsLoadbal3BasicRuleDisStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3BasicRuleDisStart.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleDisStart.setDescription("This attribute disables load balancing from the time stated by this attribute when the attribute Enable is set to 'disablePeriod'. The time is defined in seconds since midnight.")
docsLoadbal3BasicRuleDisPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3BasicRuleDisPeriod.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleDisPeriod.setDescription("This attribute disables load balancing until the time stated by this attribute when the attribute Enable is set to 'disablePeriod'. The time is defined in seconds of the wall clock since midnight.")
docsLoadbal3BasicRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 1, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsLoadbal3BasicRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3BasicRuleRowStatus.setDescription('The conceptual row status of this object.')
docsLoadbal3MibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 2))
docsLoadbal3MibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 2, 1))
docsLoadbal3MibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 2, 2))
docsLoadbal3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 2, 1, 1)).setObjects(("DOCS-LOADBAL3-MIB", "docsLoadbal3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsLoadbal3Compliance = docsLoadbal3Compliance.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3Compliance.setDescription('The compliance statement for...')
docsLoadbal3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 22, 2, 2, 1)).setObjects(("DOCS-LOADBAL3-MIB", "docsLoadbal3SystemEnable"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3SystemEnableError"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3PolicyPtr"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3PolicyRowStatus"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3BasicRuleEnable"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3BasicRuleDisStart"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3BasicRuleDisPeriod"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3BasicRuleRowStatus"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupMacAddress"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupInitTech"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupForceUCC"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupdownFrequency"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupMdIfIndex"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupRcpId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupRccId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupUsChSet"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupServiceFlowInfo"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupTransactionId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupCommit"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverGroupLastCommit"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusMacAddr"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusInitTech"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusDownFrequency"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusMdIfIndex"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusRcpId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusRccId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusUsChSet"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusServiceFlowInfo"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusCmd"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusTransactionId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusValue"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ChgOverStatusUpdate"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsProvGrpId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsCurrentGrpId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsProvServiceTypeID"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsCurrentServiceTypeID"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsPolicyId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3CmtsCmParamsPriority"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpDefaultsEnable"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpDefaultsPolicyId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpDefaultsInitTech"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpCfgEnable"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpCfgPolicyId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpCfgInitTech"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GeneralGrpCfgStatus"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgMdIfIndex"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgDsChList"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgUsChList"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgEnable"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgInitTech"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgPolicyId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgServiceTypeId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3ResGrpCfgStatus"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusCfgIdOrZero"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusMdIfIndex"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusMdCmSgId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusDsChList"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusUsChList"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusEnable"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusInitTech"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusPolicyId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusChgOverSuccess"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3GrpStatusChgOverFails"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3RestrictCmCfgMacAddr"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3RestrictCmCfgMacAddrMask"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3RestrictCmCfgGrpId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3RestrictCmCfgServiceTypeId"), ("DOCS-LOADBAL3-MIB", "docsLoadbal3RestrictCmCfgStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsLoadbal3Group = docsLoadbal3Group.setStatus('current')
if mibBuilder.loadTexts: docsLoadbal3Group.setDescription('Group of objects implemented in')
mibBuilder.exportSymbols("DOCS-LOADBAL3-MIB", docsLoadbal3ChgOverStatusRccId=docsLoadbal3ChgOverStatusRccId, docsLoadbal3SystemEnable=docsLoadbal3SystemEnable, docsLoadbal3GrpStatusPolicyId=docsLoadbal3GrpStatusPolicyId, docsLoadbal3PolicyId=docsLoadbal3PolicyId, docsLoadbal3ChgOverStatusMacAddr=docsLoadbal3ChgOverStatusMacAddr, docsLoadbal3PolicyRuleId=docsLoadbal3PolicyRuleId, docsLoadbal3ChgOverGroup=docsLoadbal3ChgOverGroup, docsLoadbal3MibObjects=docsLoadbal3MibObjects, docsLoadbal3CmtsCmParamsTable=docsLoadbal3CmtsCmParamsTable, docsLoadbal3GeneralGrpCfgNodeName=docsLoadbal3GeneralGrpCfgNodeName, docsLoadbal3ResGrpCfgId=docsLoadbal3ResGrpCfgId, docsLoadbal3ResGrpCfgTable=docsLoadbal3ResGrpCfgTable, docsLoadbal3GeneralGrpDefaultsInitTech=docsLoadbal3GeneralGrpDefaultsInitTech, docsLoadbal3RestrictCmCfgGrpId=docsLoadbal3RestrictCmCfgGrpId, docsLoadbal3GrpStatusMdCmSgId=docsLoadbal3GrpStatusMdCmSgId, docsLoadbal3ResGrpCfgStatus=docsLoadbal3ResGrpCfgStatus, docsLoadbal3GeneralGrpCfgPolicyId=docsLoadbal3GeneralGrpCfgPolicyId, PYSNMP_MODULE_ID=docsLoadbal3Mib, docsLoadbal3CmtsCmParamsCurrentGrpId=docsLoadbal3CmtsCmParamsCurrentGrpId, docsLoadbal3BasicRuleEntry=docsLoadbal3BasicRuleEntry, docsLoadbal3BasicRuleDisStart=docsLoadbal3BasicRuleDisStart, docsLoadbal3SystemEnableError=docsLoadbal3SystemEnableError, docsLoadbal3ChgOverStatusRcpId=docsLoadbal3ChgOverStatusRcpId, docsLoadbal3ChgOverGroupMacAddress=docsLoadbal3ChgOverGroupMacAddress, docsLoadbal3ChgOverStatusId=docsLoadbal3ChgOverStatusId, docsLoadbal3GeneralGrpCfgEnable=docsLoadbal3GeneralGrpCfgEnable, docsLoadbal3ResGrpCfgUsChList=docsLoadbal3ResGrpCfgUsChList, docsLoadbal3RestrictCmCfgMacAddrMask=docsLoadbal3RestrictCmCfgMacAddrMask, docsLoadbal3RestrictCmCfgId=docsLoadbal3RestrictCmCfgId, docsLoadbal3ChgOverStatusDownFrequency=docsLoadbal3ChgOverStatusDownFrequency, docsLoadbal3ResGrpCfgDsChList=docsLoadbal3ResGrpCfgDsChList, docsLoadbal3GrpStatusChgOverSuccess=docsLoadbal3GrpStatusChgOverSuccess, docsLoadbal3BasicRuleDisPeriod=docsLoadbal3BasicRuleDisPeriod, docsLoadbal3MibConformance=docsLoadbal3MibConformance, docsLoadbal3GrpStatusEnable=docsLoadbal3GrpStatusEnable, docsLoadbal3PolicyPtr=docsLoadbal3PolicyPtr, docsLoadbal3ChgOverGroupUsChSet=docsLoadbal3ChgOverGroupUsChSet, docsLoadbal3Group=docsLoadbal3Group, docsLoadbal3ResGrpCfgMdIfIndex=docsLoadbal3ResGrpCfgMdIfIndex, docsLoadbal3Compliance=docsLoadbal3Compliance, docsLoadbal3MibCompliances=docsLoadbal3MibCompliances, docsLoadbal3ChgOverGroupServiceFlowInfo=docsLoadbal3ChgOverGroupServiceFlowInfo, docsLoadbal3GrpStatusChgOverFails=docsLoadbal3GrpStatusChgOverFails, docsLoadbal3GeneralGrpCfgStatus=docsLoadbal3GeneralGrpCfgStatus, docsLoadbal3GrpStatusMdIfIndex=docsLoadbal3GrpStatusMdIfIndex, docsLoadbal3RestrictCmCfgStatus=docsLoadbal3RestrictCmCfgStatus, docsLoadbal3ChgOverStatusTransactionId=docsLoadbal3ChgOverStatusTransactionId, docsLoadbal3ChgOverStatusEntry=docsLoadbal3ChgOverStatusEntry, docsLoadbal3GrpStatusInitTech=docsLoadbal3GrpStatusInitTech, docsLoadbal3PolicyRowStatus=docsLoadbal3PolicyRowStatus, docsLoadbal3ChgOverGroupRccId=docsLoadbal3ChgOverGroupRccId, docsLoadbal3ChgOverGroupCommit=docsLoadbal3ChgOverGroupCommit, docsLoadbal3ChgOverStatusValue=docsLoadbal3ChgOverStatusValue, docsLoadbal3MibGroups=docsLoadbal3MibGroups, docsLoadbal3GrpStatusCfgIdOrZero=docsLoadbal3GrpStatusCfgIdOrZero, docsLoadbal3Mib=docsLoadbal3Mib, docsLoadbal3CmtsCmParamsCurrentServiceTypeID=docsLoadbal3CmtsCmParamsCurrentServiceTypeID, docsLoadbal3ResGrpCfgServiceTypeId=docsLoadbal3ResGrpCfgServiceTypeId, docsLoadbal3ChgOverStatusServiceFlowInfo=docsLoadbal3ChgOverStatusServiceFlowInfo, docsLoadbal3ResGrpCfgEntry=docsLoadbal3ResGrpCfgEntry, docsLoadbal3ChgOverStatusUsChSet=docsLoadbal3ChgOverStatusUsChSet, docsLoadbal3GeneralGrpDefaultsPolicyId=docsLoadbal3GeneralGrpDefaultsPolicyId, docsLoadbal3ChgOverGroupTransactionId=docsLoadbal3ChgOverGroupTransactionId, docsLoadbal3GeneralGrpCfgInitTech=docsLoadbal3GeneralGrpCfgInitTech, docsLoadbal3GrpStatusEntry=docsLoadbal3GrpStatusEntry, docsLoadbal3GeneralGrpCfgTable=docsLoadbal3GeneralGrpCfgTable, docsLoadbal3ChgOverStatusTable=docsLoadbal3ChgOverStatusTable, docsLoadbal3CmtsCmParamsProvGrpId=docsLoadbal3CmtsCmParamsProvGrpId, docsLoadbal3ChgOverGroupForceUCC=docsLoadbal3ChgOverGroupForceUCC, docsLoadbal3GrpStatusTable=docsLoadbal3GrpStatusTable, docsLoadbal3System=docsLoadbal3System, docsLoadbal3ChgOverStatusUpdate=docsLoadbal3ChgOverStatusUpdate, docsLoadbal3PolicyEntry=docsLoadbal3PolicyEntry, docsLoadbal3RestrictCmCfgMacAddr=docsLoadbal3RestrictCmCfgMacAddr, docsLoadbal3GrpStatusUsChList=docsLoadbal3GrpStatusUsChList, docsLoadbal3GrpStatusId=docsLoadbal3GrpStatusId, docsLoadbal3ChgOverStatusInitTech=docsLoadbal3ChgOverStatusInitTech, docsLoadbal3RestrictCmCfgEntry=docsLoadbal3RestrictCmCfgEntry, docsLoadbal3ChgOverGroupLastCommit=docsLoadbal3ChgOverGroupLastCommit, docsLoadbal3BasicRuleEnable=docsLoadbal3BasicRuleEnable, docsLoadbal3BasicRuleRowStatus=docsLoadbal3BasicRuleRowStatus, docsLoadbal3ChgOverStatusCmd=docsLoadbal3ChgOverStatusCmd, docsLoadbal3GeneralGrpDefaultsEnable=docsLoadbal3GeneralGrpDefaultsEnable, docsLoadbal3PolicyTable=docsLoadbal3PolicyTable, docsLoadbal3ResGrpCfgInitTech=docsLoadbal3ResGrpCfgInitTech, docsLoadbal3GeneralGrpCfgEntry=docsLoadbal3GeneralGrpCfgEntry, ChChgInitTechMap=ChChgInitTechMap, docsLoadbal3ChgOverGroupMdIfIndex=docsLoadbal3ChgOverGroupMdIfIndex, docsLoadbal3ChgOverGroupRcpId=docsLoadbal3ChgOverGroupRcpId, docsLoadbal3ResGrpCfgEnable=docsLoadbal3ResGrpCfgEnable, docsLoadbal3CmtsCmParamsPolicyId=docsLoadbal3CmtsCmParamsPolicyId, docsLoadbal3ChgOverGroupInitTech=docsLoadbal3ChgOverGroupInitTech, docsLoadbal3ChgOverStatusMdIfIndex=docsLoadbal3ChgOverStatusMdIfIndex, docsLoadbal3GrpStatusDsChList=docsLoadbal3GrpStatusDsChList, docsLoadbal3CmtsCmParamsEntry=docsLoadbal3CmtsCmParamsEntry, docsLoadbal3RestrictCmCfgTable=docsLoadbal3RestrictCmCfgTable, docsLoadbal3CmtsCmParamsProvServiceTypeID=docsLoadbal3CmtsCmParamsProvServiceTypeID, docsLoadbal3BasicRuleTable=docsLoadbal3BasicRuleTable, docsLoadbal3RestrictCmCfgServiceTypeId=docsLoadbal3RestrictCmCfgServiceTypeId, docsLoadbal3ChgOverGroupdownFrequency=docsLoadbal3ChgOverGroupdownFrequency, docsLoadbal3ResGrpCfgPolicyId=docsLoadbal3ResGrpCfgPolicyId, docsLoadbal3GeneralGrpDefaults=docsLoadbal3GeneralGrpDefaults, docsLoadbal3BasicRuleId=docsLoadbal3BasicRuleId, docsLoadbal3CmtsCmParamsPriority=docsLoadbal3CmtsCmParamsPriority)
