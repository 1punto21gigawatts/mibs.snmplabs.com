#
# PySNMP MIB module HH3C-NDEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-NDEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:28:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hh3cmlsr, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cmlsr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Gauge32, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, Bits, Counter64, IpAddress, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Gauge32", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "Bits", "Counter64", "IpAddress", "Counter32", "NotificationType")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hh3cNDEC = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2))
hh3cNDEC.setRevisions(('2004-09-15 10:52',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cNDEC.setRevisionsDescriptions(('The initial version of this MIB module',))
if mibBuilder.loadTexts: hh3cNDEC.setLastUpdated('200409150000Z')
if mibBuilder.loadTexts: hh3cNDEC.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cNDEC.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cNDEC.setDescription('This MIB contains objects to manage the NDEC device. ')
hh3chipsNDECSAListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1), )
if mibBuilder.loadTexts: hh3chipsNDECSAListTable.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECSAListTable.setDescription('The table containing the list of all SA entries configured on NDEC by the operator.')
hh3chipsNDECSAListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsPeerIpAddr"), (0, "HH3C-NDEC-MIB", "hh3chipsProtocol"), (0, "HH3C-NDEC-MIB", "hh3chipsSPI"))
if mibBuilder.loadTexts: hh3chipsNDECSAListEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECSAListEntry.setDescription("Each entry contains the attributes associated with a single NDEC'S SA entry.")
hh3chipsPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chipsPeerIpAddr.setDescription('The peer IP address of this SA entry. ')
hh3chipsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50, 51))).clone(namedValues=NamedValues(("ipsecEsp", 50), ("ipsecAh", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsProtocol.setStatus('current')
if mibBuilder.loadTexts: hh3chipsProtocol.setDescription('The Protocol of this SA entry. ')
hh3chipsSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSPI.setStatus('current')
if mibBuilder.loadTexts: hh3chipsSPI.setDescription('The SPI of this SA entry. ')
hh3chipsEncAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ealgNone", 1), ("ealgDescbc", 2), ("ealg3desCbc", 3), ("ealgXBlf", 4), ("ealgXCast", 5), ("ealgXSkipjack", 6), ("ealgXAes", 7), ("ealgXQc5", 8), ("ealgXNsa", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsEncAlgorithm.setStatus('current')
if mibBuilder.loadTexts: hh3chipsEncAlgorithm.setDescription('The encrypt algorithm of this SA entry. ')
hh3chipsAuthAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aalgNone", 1), ("aalgMd5Hmac", 2), ("aalgSha1Hmac", 3), ("aalgMd5Hmac96", 4), ("aalgSha1Hmac96", 5), ("aalgXRipeMd160Hmac96", 6), ("aalgXMd5", 7), ("aalgXSha1", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: hh3chipsAuthAlgorithm.setDescription('The authentication algorithm of this SA entry. ')
hh3chipsLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chipsLocalIpAddr.setDescription('The local IP address of this SA entry. ')
hh3chipsSaLifeKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSaLifeKBytes.setStatus('current')
if mibBuilder.loadTexts: hh3chipsSaLifeKBytes.setDescription('The lifetime of this SA entry in bytes. ')
hh3chipsSaLifeSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSaLifeSecond.setStatus('current')
if mibBuilder.loadTexts: hh3chipsSaLifeSecond.setDescription('The lifetime of this SA entry in seconds. ')
hh3chipsByCard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsByCard.setStatus('current')
if mibBuilder.loadTexts: hh3chipsByCard.setDescription('The flag of this SA on NDEC or not. ')
hh3chipsNegotiateSaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("isakmp", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsNegotiateSaMode.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNegotiateSaMode.setDescription('The type of key used by the IPSec Phase-2 Tunnel. ')
hh3chipsExpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsExpBytes.setStatus('current')
if mibBuilder.loadTexts: hh3chipsExpBytes.setDescription('This object specifies the lifetime in bytes of the tunnels generated using this policy specification.')
hh3chipsSoftBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSoftBytes.setStatus('current')
if mibBuilder.loadTexts: hh3chipsSoftBytes.setDescription('This object specifies the lifetime in bytes of the tunnels generated using this policy specification.')
hh3chipsExpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsExpTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3chipsExpTimeout.setDescription('This object specifies the lifetime in seconds of the tunnels generated using this policy specification.')
hh3chipsSoftTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSoftTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3chipsSoftTimeout.setDescription('This object specifies the lifetime in seconds of the tunnels generated using this policy specification.')
hh3chikeSATable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2), )
if mibBuilder.loadTexts: hh3chikeSATable.setStatus('current')
if mibBuilder.loadTexts: hh3chikeSATable.setDescription('The table containing IKE SA entities configured on NDEC by the operator. ')
hh3chikeSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chikeConnId"))
if mibBuilder.loadTexts: hh3chikeSAEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chikeSAEntry.setDescription('Each entry contains the attributes associated with a single IKE SA entity.')
hh3chikeConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikeConnId.setStatus('current')
if mibBuilder.loadTexts: hh3chikeConnId.setDescription('The identifier of IKE SA connection.')
hh3chikePeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikePeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chikePeerIpAddr.setDescription('The peer IP address of this IKE SA. ')
hh3chikeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikeFlag.setStatus('current')
if mibBuilder.loadTexts: hh3chikeFlag.setDescription('The status of this IKE SA. ')
hh3chikePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unkown", 1), ("phase1", 2), ("phase2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikePhase.setStatus('current')
if mibBuilder.loadTexts: hh3chikePhase.setDescription('The phase of this IKE SA. ')
hh3chikeDoi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unkown", 1), ("ipsec", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikeDoi.setStatus('current')
if mibBuilder.loadTexts: hh3chikeDoi.setDescription('The domain of this IKE SA ')
hh3chikeClearSA = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chikeClearSA.setStatus('current')
if mibBuilder.loadTexts: hh3chikeClearSA.setDescription('Clear this IKE SA or not. ')
hh3chipsIKEPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3), )
if mibBuilder.loadTexts: hh3chipsIKEPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIKEPolicyTable.setDescription('List of all ISAKMP policy entries.')
hh3chipsIKEPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsIsakmpPolPriority"))
if mibBuilder.loadTexts: hh3chipsIKEPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIKEPolicyEntry.setDescription('Each entry includes the properties of a ISAKMP Policy entry.')
hh3chipsIsakmpPolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolPriority.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsakmpPolPriority.setDescription("ISAKMP Policy entry's priority.")
hh3chipsIsakmpPolEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ikeEncryptNone", 1), ("ikeEncryptDesCbc", 2), ("ikeEncryptIdeaCbc", 3), ("ikeEncryptBlowfishcbc", 4), ("ikeEncryptRc5R16B64cbc", 5), ("ikeEncrypt3DesCbc", 6), ("ikeEncryptCastCbc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolEncr.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsakmpPolEncr.setDescription('The specified encryption transform. It is used by Internet Key Exchange(IKE) tunnels to protect the ISAKMP PDUs.')
hh3chipsIsakmpPolHash = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ikeHashNone", 1), ("ikeHashMd5", 2), ("ikeHashSha", 3), ("ikeHashTiger", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolHash.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsakmpPolHash.setDescription('The specified hash transform. It is used by Internet Key Exchange(IKE) tunnels to protect the ISAKMP PDUs.')
hh3chipsIsakmpPolAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ikeAuthPreNone", 1), ("ikeAuthPreShared", 2), ("ikeAuthDss", 3), ("ikeAuthRsaSig", 4), ("ikeAuthRsaEnc", 5), ("ikeAuthRsaEncRev", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolAuth.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsakmpPolAuth.setDescription('The specified peer authentication method. The local entity would authenticate the peer using the method specified by this object when this policy entity is selected to negotiate with a peer.')
hh3chipsIsakmpPolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dhGroup1", 2), ("dhGroup2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolGroup.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsakmpPolGroup.setDescription('This object is used to specify the Oakley group which is used for Diffie Hellman exchange in the Main Mode. The local entity selects the group specified by this object to perform Diffie Hellman exchange with the peer when this policy item is chosen to negotiate the Main Mode with an IKE peer.')
hh3chipsIsakmpPolLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolLifetime.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsakmpPolLifetime.setDescription('This object indicates the lifetime of the IKE tunnels in seconds.')
hh3chipsStaticCryptomapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4), )
if mibBuilder.loadTexts: hh3chipsStaticCryptomapTable.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapTable.setDescription('The table includes the list of the member cryptomaps of the cryptomap sets which are set on the specific entity.')
hh3chipsStaticCryptomapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsStaticCryptomapName"), (0, "HH3C-NDEC-MIB", "hh3chipsStaticCryptomapSN"))
if mibBuilder.loadTexts: hh3chipsStaticCryptomapEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapEntry.setDescription('Each entry contains properites of a single static cryptomap entry. The members of dynamic cryptomap sets, which may be linked with the parent static cryptomap set, are not included in this table.')
hh3chipsStaticCryptomapName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapName.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapName.setDescription('The name of the cryptomap entry in the cryptomap set. This is the first index component of this table.')
hh3chipsStaticCryptomapSN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapSN.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapSN.setDescription('The sequence number of the cryptomap entry in the cryptomap set. This is the second index component of this table.')
hh3chipsStaticCryptomapNegMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("isakmp", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapNegMode.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapNegMode.setDescription('Type of the cryptomap entry. This object may be an ISAKMP cryptomap or manual.')
hh3chipsStaticCryptomapMatchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapMatchAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapMatchAddr.setDescription('The access list number entered by the operatoir while creating this cryptomap. ')
hh3chipsStaticCryptomapPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapPeerIpAddr.setDescription('The IP address of the current peer. Traffic protected by this cryptomap is protected by a tunnel terminating at the device whose IP address is the value of this object.')
hh3chipsStaticCryptomapTransforName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapTransforName.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapTransforName.setDescription('The transform associated with this cryptomap entry.')
hh3chipsStaticCryptomapLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLifetime.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLifetime.setDescription('This object indicates the lifetime of the IPSec SA which is created using this IPSec policy entry.')
hh3chipsStaticCryptomapLifesize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLifesize.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLifesize.setDescription('This object identifies the lifesize of the IPSec SAs generated using this IPSec policy entry. Lifesize means maximum traffic in bytes that may be carried. ')
hh3chipsStaticCryptomapLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLocalIpAddr.setDescription('The value of this object is the local IP address of the IPSec SAs generated using this IPSec policy entry. ')
hh3chipsIfNameUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIfNameUsed.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIfNameUsed.setDescription('This object indicates the name of the interface which uses this IPSec policy entry. ')
hh3chipsInAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInAHSPI.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInAHSPI.setDescription('This object indicates the inbound AH SPI IPSec SAs generated using this IPSec policy entry.')
hh3chipsInESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInESPSPI.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInESPSPI.setDescription('This object indicates the inbound ESP SPI IPSec SAs generated using this IPSec policy entry. ')
hh3chipsOutAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutAHSPI.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutAHSPI.setDescription('This object indicates the outbound AH SPI IPSec SAs generated using this IPSec policy entry. ')
hh3chipsOutESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutESPSPI.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutESPSPI.setDescription('This object indicates the outbound ESP SPI IPSec SAs generated using this IPSec policy entry. ')
hh3chipsInAhHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInAhHexKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInAhHexKeyString.setDescription('This object indicates the inbound AH authentication key IPSec SAs generated using this IPSec policy entry. The AH authentication key is in hex. ')
hh3chipsInEspCipherHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInEspCipherHexKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInEspCipherHexKeyString.setDescription('This object indicates the inbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The ESP authentication key is hex. ')
hh3chipsInEspAuthenHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInEspAuthenHexKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInEspAuthenHexKeyString.setDescription('This object indicates the inbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The ESP authentication key is hex. ')
hh3chipsInAhStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInAhStringKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInAhStringKeyString.setDescription('This object indicates the inbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The key is in string. ')
hh3chipsInEspStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInEspStringKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInEspStringKeyString.setDescription('This object indicates the inbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The key is in string. ')
hh3chipsOutAhHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutAhHexKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutAhHexKeyString.setDescription('This object indicates the outbound AH authentication key IPSec SAs generated using this IPSec policy entry. The key is in hex. ')
hh3chipsOutEspCipherHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutEspCipherHexKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutEspCipherHexKeyString.setDescription('This object indicates the outbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The key is in hex. ')
hh3chipsOutEspAuthenHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutEspAuthenHexKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutEspAuthenHexKeyString.setDescription('This object indicates the outbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The key is in hex. ')
hh3chipsOutAhStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutAhStringKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutAhStringKeyString.setDescription('This object indicates the outbound AH authentication key IPSec SAs generated using this IPSec policy entry. The key is in string. ')
hh3chipsOutEspStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutEspStringKeyString.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutEspStringKeyString.setDescription('This object indicates the outbound ESP authentication key IPSec SAs generated using this IPSec policy entry. The key is in string. ')
hh3chipsTransformNameSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5), )
if mibBuilder.loadTexts: hh3chipsTransformNameSetTable.setStatus('current')
if mibBuilder.loadTexts: hh3chipsTransformNameSetTable.setDescription('Transform set table.')
hh3chipsTransformNameSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsTransformName"))
if mibBuilder.loadTexts: hh3chipsTransformNameSetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chipsTransformNameSetEntry.setDescription('Each entry refers to properties of a transform.')
hh3chipsTransformName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsTransformName.setStatus('current')
if mibBuilder.loadTexts: hh3chipsTransformName.setDescription('Name of the transform entry.')
hh3chipsTransformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsTransformMode.setStatus('current')
if mibBuilder.loadTexts: hh3chipsTransformMode.setDescription('Mode of the transform entry.')
hh3chipsTransformProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ipsecNone", 1), ("ipsecAhNew", 2), ("ipsecAhEspNew", 3), ("ipsecAhEspOld", 4), ("ipsecAhOld", 5), ("ipsecEspNew", 6), ("ipsecEspAhNew", 7), ("ipsecEspAhOld", 8), ("ipsecEspOld", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsTransformProtocol.setStatus('current')
if mibBuilder.loadTexts: hh3chipsTransformProtocol.setDescription('Transform protocol.')
hh3chipsAH = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aalgNone", 1), ("aalgMd5Hmac", 2), ("aalgSha1Hmac", 3), ("aalgMd5Hmac96", 4), ("aalgSha1Hmac96", 5), ("aalgXRipeMd160Hmac96", 6), ("aalgXMd5", 7), ("aalgXSha1", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsAH.setStatus('current')
if mibBuilder.loadTexts: hh3chipsAH.setDescription('Algorithm of AH protocol.')
hh3chipsEespEn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ealgNone", 1), ("ealgDescbc", 2), ("ealg3desCbc", 3), ("ealgXBlf", 4), ("ealgXCast", 5), ("ealgXSkipjack", 6), ("ealgXAes", 7), ("ealgXQc5", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsEespEn.setStatus('current')
if mibBuilder.loadTexts: hh3chipsEespEn.setDescription('Encryption algorithm of ESP protocol.')
hh3chipsEspAu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aalgNone", 1), ("aalgMd5Hmac", 2), ("aalgSha1Hmac", 3), ("aalgMd5Hmac96", 4), ("aalgSha1Hmac96", 5), ("aalgXRipeMd160Hmac96", 6), ("aalgXMd5", 7), ("aalgXSha1", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsEspAu.setStatus('current')
if mibBuilder.loadTexts: hh3chipsEspAu.setDescription('Authentication algorithm of ESP protocol.')
hh3chipsIsCardTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsCardTransform.setStatus('current')
if mibBuilder.loadTexts: hh3chipsIsCardTransform.setDescription('This object indicates the flag of the NDEC is used for IPSec SAs generated using this IPSec policy entry. ')
hh3chipsNDECInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6), )
if mibBuilder.loadTexts: hh3chipsNDECInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECInfoTable.setDescription('Table of NDEC set.')
hh3chipsNDECInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsCardSlot"))
if mibBuilder.loadTexts: hh3chipsNDECInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECInfoEntry.setDescription('Properties of each NDEC. ')
hh3chipsCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardSlot.setStatus('current')
if mibBuilder.loadTexts: hh3chipsCardSlot.setDescription('Slot number of NDEC .')
hh3chipsInPac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInPac.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInPac.setDescription('Total packets of the NDEC recieved.')
hh3chipsOutPac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutPac.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutPac.setDescription('Total packets of the NDEC sent.')
hh3chipsInByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInByte.setStatus('current')
if mibBuilder.loadTexts: hh3chipsInByte.setDescription('Total bytes of the NDEC sent.')
hh3chipsOutByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutByte.setStatus('current')
if mibBuilder.loadTexts: hh3chipsOutByte.setDescription('Total bytes of the NDEC sent.')
hh3chipsDropPac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsDropPac.setStatus('current')
if mibBuilder.loadTexts: hh3chipsDropPac.setDescription('Total packets of the NDEC dropped .')
hh3chipsCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ecStateInvalid", 1), ("ecStateReady", 2), ("ecStateResetting", 3), ("ecStateProgramUpdating", 4), ("ecStateDisable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardStatus.setStatus('current')
if mibBuilder.loadTexts: hh3chipsCardStatus.setDescription('State of the NDEC.')
hh3chipsCardHardVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardHardVer.setStatus('current')
if mibBuilder.loadTexts: hh3chipsCardHardVer.setDescription('Hardware version of the NDEC.')
hh3chipsCardSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardSoftVer.setStatus('current')
if mibBuilder.loadTexts: hh3chipsCardSoftVer.setDescription('Software version of the NDEC.')
hh3chipsCardCPLDVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardCPLDVer.setStatus('current')
if mibBuilder.loadTexts: hh3chipsCardCPLDVer.setDescription('CPLD version of the NDEC.')
hh3chipsCardOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cardClearStatic", 1), ("cardReset", 2), ("cardSynTime", 3), ("cardSysLogOn", 4), ("cardSysLogOff", 5), ("cardSysLogClear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chipsCardOperate.setStatus('current')
if mibBuilder.loadTexts: hh3chipsCardOperate.setDescription("The version of the NDEC's CPLD. cardClearStatic(1): clear the statistics of the card cardReset(2): rest the card cardSynTime(3): synchoronize the clock of the card cardSysLogOn(4):turn on the log of the card cardSysLogOff(5):turn off the log of the card cardSysLogClear(6):clear the log of the card")
hh3chipsDropPacInUnitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsDropPacInUnitTime.setStatus('current')
if mibBuilder.loadTexts: hh3chipsDropPacInUnitTime.setDescription('Dropped packets in unit interval.')
hh3chipsNDECLeaf = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 7))
hh3chipsNDECConnections = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsNDECConnections.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECConnections.setDescription('Total connections of the system at this time.')
hh3chipsNDECBackup = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chipsNDECBackup.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECBackup.setDescription('The flag that NDEC using backup. The value 1 represents using backup The value 0 represents not using backup')
hh3chipsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8))
hh3chipsNDECNormalResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8, 1)).setObjects(("HH3C-NDEC-MIB", "hh3chipsCardSlot"), ("HH3C-NDEC-MIB", "hh3chipsCardHardVer"), ("HH3C-NDEC-MIB", "hh3chipsCardSoftVer"), ("HH3C-NDEC-MIB", "hh3chipsCardCPLDVer"))
if mibBuilder.loadTexts: hh3chipsNDECNormalResetTrap.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECNormalResetTrap.setDescription('This trap is generated when the NDEC card is reset.')
hh3chipsNDECStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8, 2)).setObjects(("HH3C-NDEC-MIB", "hh3chipsCardSlot"), ("HH3C-NDEC-MIB", "hh3chipsCardStatus"))
if mibBuilder.loadTexts: hh3chipsNDECStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECStateChangeTrap.setDescription("This trap is generated when the NDEC card's state changes.")
hh3chipsNDECFlowTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8, 3)).setObjects(("HH3C-NDEC-MIB", "hh3chipsCardSlot"), ("HH3C-NDEC-MIB", "hh3chipsDropPacInUnitTime"))
if mibBuilder.loadTexts: hh3chipsNDECFlowTrap.setStatus('current')
if mibBuilder.loadTexts: hh3chipsNDECFlowTrap.setDescription('This trap is generated when a NDEC card is overloaded.')
mibBuilder.exportSymbols("HH3C-NDEC-MIB", hh3chipsInAHSPI=hh3chipsInAHSPI, hh3chipsTraps=hh3chipsTraps, hh3chikePeerIpAddr=hh3chikePeerIpAddr, hh3chipsIKEPolicyTable=hh3chipsIKEPolicyTable, hh3chipsOutByte=hh3chipsOutByte, hh3chipsDropPacInUnitTime=hh3chipsDropPacInUnitTime, hh3chipsCardCPLDVer=hh3chipsCardCPLDVer, hh3chipsStaticCryptomapName=hh3chipsStaticCryptomapName, hh3chipsOutEspAuthenHexKeyString=hh3chipsOutEspAuthenHexKeyString, hh3chipsNDECInfoEntry=hh3chipsNDECInfoEntry, hh3chipsOutAHSPI=hh3chipsOutAHSPI, hh3chipsIfNameUsed=hh3chipsIfNameUsed, hh3chipsSaLifeSecond=hh3chipsSaLifeSecond, hh3chipsNDECLeaf=hh3chipsNDECLeaf, hh3chipsSPI=hh3chipsSPI, hh3chipsInAhStringKeyString=hh3chipsInAhStringKeyString, hh3chipsExpTimeout=hh3chipsExpTimeout, hh3chipsOutPac=hh3chipsOutPac, hh3chipsInEspCipherHexKeyString=hh3chipsInEspCipherHexKeyString, hh3chipsStaticCryptomapNegMode=hh3chipsStaticCryptomapNegMode, PYSNMP_MODULE_ID=hh3cNDEC, hh3chipsCardOperate=hh3chipsCardOperate, hh3chipsStaticCryptomapMatchAddr=hh3chipsStaticCryptomapMatchAddr, hh3cNDEC=hh3cNDEC, hh3chipsEspAu=hh3chipsEspAu, hh3chipsInEspStringKeyString=hh3chipsInEspStringKeyString, hh3chipsIsCardTransform=hh3chipsIsCardTransform, hh3chipsIKEPolicyEntry=hh3chipsIKEPolicyEntry, hh3chipsIsakmpPolPriority=hh3chipsIsakmpPolPriority, hh3chipsInAhHexKeyString=hh3chipsInAhHexKeyString, hh3chipsByCard=hh3chipsByCard, hh3chipsIsakmpPolEncr=hh3chipsIsakmpPolEncr, hh3chipsNDECSAListEntry=hh3chipsNDECSAListEntry, hh3chikeDoi=hh3chikeDoi, hh3chipsPeerIpAddr=hh3chipsPeerIpAddr, hh3chipsAuthAlgorithm=hh3chipsAuthAlgorithm, hh3chipsNDECInfoTable=hh3chipsNDECInfoTable, hh3chipsStaticCryptomapPeerIpAddr=hh3chipsStaticCryptomapPeerIpAddr, hh3chipsLocalIpAddr=hh3chipsLocalIpAddr, hh3chipsInEspAuthenHexKeyString=hh3chipsInEspAuthenHexKeyString, hh3chipsStaticCryptomapTable=hh3chipsStaticCryptomapTable, hh3chipsOutAhHexKeyString=hh3chipsOutAhHexKeyString, hh3chipsSoftTimeout=hh3chipsSoftTimeout, hh3chipsNDECFlowTrap=hh3chipsNDECFlowTrap, hh3chipsCardStatus=hh3chipsCardStatus, hh3chipsNDECNormalResetTrap=hh3chipsNDECNormalResetTrap, hh3chikeSAEntry=hh3chikeSAEntry, hh3chipsInPac=hh3chipsInPac, hh3chikeSATable=hh3chikeSATable, hh3chipsInByte=hh3chipsInByte, hh3chipsTransformProtocol=hh3chipsTransformProtocol, hh3chipsStaticCryptomapTransforName=hh3chipsStaticCryptomapTransforName, hh3chikeClearSA=hh3chikeClearSA, hh3chipsNDECBackup=hh3chipsNDECBackup, hh3chipsIsakmpPolLifetime=hh3chipsIsakmpPolLifetime, hh3chipsNDECConnections=hh3chipsNDECConnections, hh3chipsNDECSAListTable=hh3chipsNDECSAListTable, hh3chipsNDECStateChangeTrap=hh3chipsNDECStateChangeTrap, hh3chipsIsakmpPolHash=hh3chipsIsakmpPolHash, hh3chipsOutEspCipherHexKeyString=hh3chipsOutEspCipherHexKeyString, hh3chipsSoftBytes=hh3chipsSoftBytes, hh3chipsNegotiateSaMode=hh3chipsNegotiateSaMode, hh3chipsEncAlgorithm=hh3chipsEncAlgorithm, hh3chipsOutEspStringKeyString=hh3chipsOutEspStringKeyString, hh3chipsInESPSPI=hh3chipsInESPSPI, hh3chipsTransformNameSetTable=hh3chipsTransformNameSetTable, hh3chikePhase=hh3chikePhase, hh3chipsStaticCryptomapSN=hh3chipsStaticCryptomapSN, hh3chipsTransformName=hh3chipsTransformName, hh3chipsStaticCryptomapLifesize=hh3chipsStaticCryptomapLifesize, hh3chipsDropPac=hh3chipsDropPac, hh3chipsSaLifeKBytes=hh3chipsSaLifeKBytes, hh3chipsOutESPSPI=hh3chipsOutESPSPI, hh3chipsProtocol=hh3chipsProtocol, hh3chipsOutAhStringKeyString=hh3chipsOutAhStringKeyString, hh3chikeFlag=hh3chikeFlag, hh3chipsIsakmpPolAuth=hh3chipsIsakmpPolAuth, hh3chipsTransformMode=hh3chipsTransformMode, hh3chipsAH=hh3chipsAH, hh3chipsIsakmpPolGroup=hh3chipsIsakmpPolGroup, hh3chipsCardSlot=hh3chipsCardSlot, hh3chipsCardHardVer=hh3chipsCardHardVer, hh3chipsStaticCryptomapLifetime=hh3chipsStaticCryptomapLifetime, hh3chipsTransformNameSetEntry=hh3chipsTransformNameSetEntry, hh3chipsEespEn=hh3chipsEespEn, hh3chipsStaticCryptomapEntry=hh3chipsStaticCryptomapEntry, hh3chipsExpBytes=hh3chipsExpBytes, hh3chipsCardSoftVer=hh3chipsCardSoftVer, hh3chipsStaticCryptomapLocalIpAddr=hh3chipsStaticCryptomapLocalIpAddr, hh3chikeConnId=hh3chikeConnId)
