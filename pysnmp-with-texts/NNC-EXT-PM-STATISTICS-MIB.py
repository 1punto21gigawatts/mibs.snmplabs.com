#
# PySNMP MIB module NNC-EXT-PM-STATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNC-EXT-PM-STATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
atmVclVci, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVplVpi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NncExtIntvlStateType, NncExtRelIntvlNumberType, NncExtAbsIntvlNumberType = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtIntvlStateType", "NncExtRelIntvlNumberType", "NncExtAbsIntvlNumberType")
NncExtCounter64, nncExtensions = mibBuilder.importSymbols("NNCGNI0001-SMI", "NncExtCounter64", "nncExtensions")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, Unsigned32, Counter64, ObjectIdentity, IpAddress, iso, Bits, Integer32, NotificationType, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Unsigned32", "Counter64", "ObjectIdentity", "IpAddress", "iso", "Bits", "Integer32", "NotificationType", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nncExtPmStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 65))
if mibBuilder.loadTexts: nncExtPmStatistics.setLastUpdated('9810021415Z')
if mibBuilder.loadTexts: nncExtPmStatistics.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncExtPmStatistics.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtPmStatistics.setDescription(" This module contains the definitions for statistics collected for OAM Performance Monitoring. The definition and requirement for these statistics are found in GR-1248-CORE. In addition, Cell Loss Ratio has been added as part of the Newbridge extension. This MIB module contains the following tables: OAM PM 15 Minute Current Table OAM PM 15 Minute Interval Table OAM PM 24 Hour Current Table OAM PM 24 Hour Interval Table These tables are heavily influenced by the definition of VPL/VCL described in rfc1695. The number of intervals supported is dependent upon resource availibility on any given product, but should nominally be 32 for 15 Minute intervals and 2 for 24 Hour intervals. To avoid building in massive amounts of storage, some products may adopt a bulk collection scheme. Intervals: Statistics on the performance of VPL/VCLs are collected over a historical stratum of up to a maximum of M intervals. The value of M is a function of a product's storage capability. For example, on the 36170 product, M = 32 for 15 Minute interval. The 15 Minute intervals are aligned to the quarter of one hour of a wall clock. The current interval spans back to the last 15 minute tick on the wall clock. Continuing along the timeline from that point is the most recently completed interval and has an index of 1. The previous interval has an index of 2 and so on. Note that the oldest interval may be incomplete since the statistic collection may have been enabled offset to the quarter or one hour tick. t 0 -1i -2i -3i ===========|===========|===========|===========|=========== current N = 1 N = 2 N = 3 N = 4 ... N = M interval Performance Monitoring Demarcation Values: As defined in GR-1248-CORE, three demarcation values are defined to evaluate the condition of a PM cell block. These are M errored, M lost and M misinserted. These values are configurable on a system-wide basis. Where applicable, the definition of a statistics object in this module will refer to one or more of these values. ")
nncExtPmStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 65, 1))
nncExtPmStatisticsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 65, 2))
nncExtPmStatisticsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 65, 3))
nncExtPmStatisticsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 65, 4))
class NncExtPmCellFlowDirType(TextualConvention, Integer32):
    description = 'This is used to indicate the direction of cell flow. Link describes cells which are traveling to or from an endpoint via the physical interface. Matrix describes cells which are traveling to or from an endpoint via the switching fabric.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("link", 1), ("matrix", 2))

class NncExtPmTestType(TextualConvention, Integer32):
    description = 'This is used to indicate the type of PM test being performed: Segment or End-to-end.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("segment", 1), ("end2end", 2))

nncExtPm15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1), )
if mibBuilder.loadTexts: nncExtPm15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentTable.setDescription('This table contains objects for OAM Performance Monitoring of an endpoint (VP or VC) during the current 15 minute interval.')
nncExtPm15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentCellFlow"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentTest"))
if mibBuilder.loadTexts: nncExtPm15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each row contains current statistics for an endpoint collecting PM statistics. Note that for a VP endpoint, the VCI value is 0.')
nncExtPm15MinCurrentCellFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 1), NncExtPmCellFlowDirType())
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellFlow.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellFlow.setDescription('Link or matrix cell flow')
nncExtPm15MinCurrentTest = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 2), NncExtPmTestType())
if mibBuilder.loadTexts: nncExtPm15MinCurrentTest.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentTest.setDescription('Segment or end-to-end test')
nncExtPm15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncExtPm15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 4), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncExtPm15MinCurrentSECBs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentSECBs.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentSECBs.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentSECBs.setDescription('Severely Errored Cell Blocks. This counter is incremented by one for each PM cell block when M errored, M lost or M misinserted is exceeded.')
nncExtPm15MinCurrentLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentLostCellsClp0And1.setDescription('Lost 0+1 User Information Cells. For each PM cell block, if the number of Lost 0+1 User Information Cells does not exceed M lost, then this number is added to this counter.')
nncExtPm15MinCurrentLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentLostCellsClp0.setDescription('Lost 0 User Information Cells. For each PM cell block, if the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) does not exceed M lost, then this number is added to this counter.')
nncExtPm15MinCurrentMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentMisinsertedCells.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentMisinsertedCells.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentMisinsertedCells.setDescription('Misinserted User Information Cells. For each PM cell block, if the number of excess User Information Cells does not exceed M misinserted, then this number is added to this counter.')
nncExtPm15MinCurrentCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellsClp0And1.setDescription('Number of Transmitted 0+1 User Information Cells. For each PM cell block, the number of 0+1 User Information Cells is added to this counter.')
nncExtPm15MinCurrentCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellsClp0.setDescription('Number of Transmitted 0 User Information Cells. For each PM cell block, the number of 0 User Information Cells is added to this counter.')
nncExtPm15MinCurrentImpairedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentImpairedBlocks.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentImpairedBlocks.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentImpairedBlocks.setDescription('Impaired Blocks. This counter is incremented by one when a PM cell block has at least one impairment of any type.')
nncExtPm15MinCurrentTotalLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentTotalLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentTotalLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentTotalLostCellsClp0And1.setDescription('Total Lost 0+1 User Information Cells. For each PM cell block, the number of Lost 0+1 User Information Cells is added to this counter.')
nncExtPm15MinCurrentTotalLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentTotalLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentTotalLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentTotalLostCellsClp0.setDescription('Total Lost 0 User Information Cells. For each PM cell block, the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) is added to this counter.')
nncExtPm15MinCurrentIBWithCellLossMisinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentIBWithCellLossMisinsert.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinCurrentIBWithCellLossMisinsert.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentIBWithCellLossMisinsert.setDescription('Number of Impaired Blocks with Cell Loss/ Misinsertion. For each PM cell block, the number of lost or misinserted cells is added to this counter.')
nncExtPm15MinCurrentCellLossRatioClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellLossRatioClp0And1.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellLossRatioClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellLossRatioClp0And1.setDescription('Cell Loss Ratio 0+1. Ratio of cell loss calculated by ((Total Lost 0+1 User Information Cells) / (Number of Transmitted 0+1 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm15MinCurrentCellLossRatioClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 1, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellLossRatioClp0.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellLossRatioClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentCellLossRatioClp0.setDescription('Cell Loss Ratio 0. Ratio of cell loss calculated by ((Total Lost 0 User Information Cells) / (Number of Transmitted 0 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2), )
if mibBuilder.loadTexts: nncExtPm15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalTable.setDescription('This table contains objects for OAM Performance Monitoring of an endpoint (VP or VC) over a historical stratum of M 15 minute intervals.')
nncExtPm15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalCellFlow"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalTest"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalNumber"))
if mibBuilder.loadTexts: nncExtPm15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalEntry.setDescription('An entry in the 15 minute interval statistics table. Each row contains interval statistics for an endpoint collecting PM statistics. Note that for a VP endpoint, the VCI value is 0.')
nncExtPm15MinIntervalCellFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 1), NncExtPmCellFlowDirType())
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellFlow.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellFlow.setDescription('Link or matrix cell flow')
nncExtPm15MinIntervalTest = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 2), NncExtPmTestType())
if mibBuilder.loadTexts: nncExtPm15MinIntervalTest.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalTest.setDescription('Segment or end-to-end test')
nncExtPm15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 3), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncExtPm15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncExtPm15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncExtPm15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 5), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncExtPm15MinIntervalSECBs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalSECBs.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalSECBs.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalSECBs.setDescription('Severely Errored Cell Blocks. This counter is incremented by one for each PM cell block when M errored, M lost or M misinserted is exceeded.')
nncExtPm15MinIntervalLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalLostCellsClp0And1.setDescription('Lost 0+1 User Information Cells. For each PM cell block, if the number of Lost 0+1 User Information Cells does not exceed M lost, then this number is added to this counter.')
nncExtPm15MinIntervalLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalLostCellsClp0.setDescription('Lost 0 User Information Cells. For each PM cell block, if the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) does not exceed M lost, then this number is added to this counter.')
nncExtPm15MinIntervalMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalMisinsertedCells.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalMisinsertedCells.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalMisinsertedCells.setDescription('Misinserted User Information Cells. For each PM cell block, if the number of excess User Information Cells does not exceed M misinserted, then this number is added to this counter.')
nncExtPm15MinIntervalCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellsClp0And1.setDescription('Number of Transmitted 0+1 User Information Cells. For each PM cell block, the number of 0+1 User Information Cells is added to this counter.')
nncExtPm15MinIntervalCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellsClp0.setDescription('Number of Transmitted 0 User Information Cells. For each PM cell block, the number of 0 User Information Cells is added to this counter.')
nncExtPm15MinIntervalImpairedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalImpairedBlocks.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalImpairedBlocks.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalImpairedBlocks.setDescription('Impaired Blocks. This counter is incremented by one when a PM cell block has at least one impairment of any type.')
nncExtPm15MinIntervalTotalLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalTotalLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalTotalLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalTotalLostCellsClp0And1.setDescription('Total Lost 0+1 User Information Cells. For each PM cell block, the number of Lost 0+1 User Information Cells is added to this counter.')
nncExtPm15MinIntervalTotalLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalTotalLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalTotalLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalTotalLostCellsClp0.setDescription('Total Lost 0 User Information Cells. For each PM cell block, the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) is added to this counter.')
nncExtPm15MinIntervalIBWithCellLossMisinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalIBWithCellLossMisinsert.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm15MinIntervalIBWithCellLossMisinsert.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalIBWithCellLossMisinsert.setDescription('Number of Impaired Blocks with Cell Loss/ Misinsertion. For each PM cell block, the number of lost or misinserted cells is added to this counter.')
nncExtPm15MinIntervalCellLossRatioClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellLossRatioClp0And1.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellLossRatioClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellLossRatioClp0And1.setDescription('Cell Loss Ratio 0+1. Ratio of cell loss calculated by ((Total Lost 0+1 User Information Cells) / (Number of Transmitted 0+1 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm15MinIntervalCellLossRatioClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 2, 1, 17), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellLossRatioClp0.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellLossRatioClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalCellLossRatioClp0.setDescription('Cell Loss Ratio 0. Ratio of cell loss calculated by ((Total Lost 0 User Information Cells) / (Number of Transmitted 0 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm24HrCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3), )
if mibBuilder.loadTexts: nncExtPm24HrCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentTable.setDescription('This table contains objects for OAM Performance Monitoring of an endpoint (VP or VC) during the current 24 hour interval.')
nncExtPm24HrCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentCellFlow"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentTest"))
if mibBuilder.loadTexts: nncExtPm24HrCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentEntry.setDescription('An entry in the 24 hour current statistics table. Each row contains current statistics for an endpoint collecting PM statistics. Note that for a VP endpoint, the VCI value is 0.')
nncExtPm24HrCurrentCellFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 1), NncExtPmCellFlowDirType())
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellFlow.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellFlow.setDescription('Link or matrix cell flow')
nncExtPm24HrCurrentTest = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 2), NncExtPmTestType())
if mibBuilder.loadTexts: nncExtPm24HrCurrentTest.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentTest.setDescription('Segment or end-to-end test')
nncExtPm24HrCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncExtPm24HrCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 4), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncExtPm24HrCurrentSECBs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBs.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBs.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBs.setDescription('Severely Errored Cell Blocks. This counter is incremented by one for each PM cell block when M errored, M lost or M misinserted is exceeded.')
nncExtPm24HrCurrentErroredCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentErroredCells.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentErroredCells.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentErroredCells.setDescription('Errored Cells. For each PM cell block, if the number of errored cells does not exceed M errored, then this number is added to this counter.')
nncExtPm24HrCurrentLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentLostCellsClp0And1.setDescription('Lost 0+1 User Information Cells. For each PM cell block, if the number of Lost 0+1 User Information Cells does not exceed M lost, then this number is added to this counter.')
nncExtPm24HrCurrentLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentLostCellsClp0.setDescription('Lost 0 User Information Cells. For each PM cell block, if the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) does not exceed M lost, then this number is added to this counter.')
nncExtPm24HrCurrentMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentMisinsertedCells.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentMisinsertedCells.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentMisinsertedCells.setDescription('Misinserted User Information Cells. For each PM cell block, if the number of excess User Information Cells does not exceed M misinserted, then this number is added to this counter.')
nncExtPm24HrCurrentCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellsClp0And1.setDescription('Number of Transmitted 0+1 User Information Cells. For each PM cell block, the number of 0+1 User Information Cells is added to this counter.')
nncExtPm24HrCurrentCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellsClp0.setDescription('Number of Transmitted 0 User Information Cells. For each PM cell block, the number of 0 User Information Cells is added to this counter.')
nncExtPm24HrCurrentImpairedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentImpairedBlocks.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentImpairedBlocks.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentImpairedBlocks.setDescription('Impaired Blocks. This counter is incremented by one when a PM cell block has at least one impairment of any type.')
nncExtPm24HrCurrentTotalLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentTotalLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentTotalLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentTotalLostCellsClp0And1.setDescription('Total Lost 0+1 User Information Cells. For each PM cell block, the number of Lost 0+1 User Information Cells is added to this counter.')
nncExtPm24HrCurrentTotalLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentTotalLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentTotalLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentTotalLostCellsClp0.setDescription('Total Lost 0 User Information Cells. For each PM cell block, the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) is added to this counter.')
nncExtPm24HrCurrentSECBErrored = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBErrored.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBErrored.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBErrored.setDescription('SECB Errored (i.e. SECB due to bit errors). This counter is incremented by one for each PM cell block when M errored is exceeded.')
nncExtPm24HrCurrentSECBMisinserted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBMisinserted.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBMisinserted.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentSECBMisinserted.setDescription('SECB Misinserted (i.e. SECB due to misinserted cells). This counter is incremented by one for each PM cell block when M misinserted is exceeded.')
nncExtPm24HrCurrentIBWithCellLossMisinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 17), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentIBWithCellLossMisinsert.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrCurrentIBWithCellLossMisinsert.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentIBWithCellLossMisinsert.setDescription('Number of Impaired Blocks with Cell Loss/ Misinsertion. For each PM cell block, the number of lost or misinserted cells is added to this counter.')
nncExtPm24HrCurrentCellLossRatioClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 18), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellLossRatioClp0And1.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellLossRatioClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellLossRatioClp0And1.setDescription('Cell Loss Ratio 0+1. Ratio of cell loss calculated by ((Total Lost 0+1 User Information Cells) / (Number of Transmitted 0+1 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm24HrCurrentCellLossRatioClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 3, 1, 19), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellLossRatioClp0.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellLossRatioClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentCellLossRatioClp0.setDescription('Cell Loss Ratio 0. Ratio of cell loss calculated by ((Total Lost 0 User Information Cells) / (Number of Transmitted 0 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm24HrIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4), )
if mibBuilder.loadTexts: nncExtPm24HrIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalTable.setDescription('This table contains objects for OAM Performance Monitoring of an endpoint (VP or VC) over a historical stratum of N 24 hour intervals.')
nncExtPm24HrIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalCellFlow"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalTest"), (0, "NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalNumber"))
if mibBuilder.loadTexts: nncExtPm24HrIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalEntry.setDescription('An entry in the 24 hour interval statistics table. Each row contains interval statistics for an endpoint collecting PM statistics. Note that for a VP endpoint, the VCI value is 0.')
nncExtPm24HrIntervalCellFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 1), NncExtPmCellFlowDirType())
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellFlow.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellFlow.setDescription('Link or matrix cell flow')
nncExtPm24HrIntervalTest = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 2), NncExtPmTestType())
if mibBuilder.loadTexts: nncExtPm24HrIntervalTest.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalTest.setDescription('Segment or end-to-end test')
nncExtPm24HrIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 3), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncExtPm24HrIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncExtPm24HrIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncExtPm24HrIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 5), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncExtPm24HrIntervalSECBs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBs.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBs.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBs.setDescription('Severely Errored Cell Blocks. This counter is incremented by one for each PM cell block when M errored, M lost or M misinserted is exceeded.')
nncExtPm24HrIntervalErroredCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalErroredCells.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalErroredCells.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalErroredCells.setDescription('Errored Cells. For each PM cell block, if the number of errored cells does not exceed M errored, then this number is added to this counter.')
nncExtPm24HrIntervalLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalLostCellsClp0And1.setDescription('Lost 0+1 User Information Cells. For each PM cell block, if the number of Lost 0+1 User Information Cells does not exceed M lost, then this number is added to this counter.')
nncExtPm24HrIntervalLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalLostCellsClp0.setDescription('Lost 0 User Information Cells. For each PM cell block, if the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) does not exceed M lost, then this number is added to this counter.')
nncExtPm24HrIntervalMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalMisinsertedCells.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalMisinsertedCells.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalMisinsertedCells.setDescription('Misinserted User Information Cells. For each PM cell block, if the number of excess User Information Cells does not exceed M misinserted, then this number is added to this counter.')
nncExtPm24HrIntervalCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellsClp0And1.setDescription('Number of Transmitted 0+1 User Information Cells. For each PM cell block, the number of 0+1 User Information Cells is added to this counter.')
nncExtPm24HrIntervalCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellsClp0.setDescription('Number of Transmitted 0 User Information Cells. For each PM cell block, the number of 0 User Information Cells is added to this counter.')
nncExtPm24HrIntervalImpairedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalImpairedBlocks.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalImpairedBlocks.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalImpairedBlocks.setDescription('Impaired Blocks. This counter is incremented by one when a PM cell block has at least one impairment of any type.')
nncExtPm24HrIntervalTotalLostCellsClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalTotalLostCellsClp0And1.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalTotalLostCellsClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalTotalLostCellsClp0And1.setDescription('Total Lost 0+1 User Information Cells. For each PM cell block, the number of Lost 0+1 User Information Cells is added to this counter.')
nncExtPm24HrIntervalTotalLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalTotalLostCellsClp0.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalTotalLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalTotalLostCellsClp0.setDescription('Total Lost 0 User Information Cells. For each PM cell block, the inferred number of Lost 0 User Information Cells (the smaller value of Lost 0 or 0+1 cells) is added to this counter.')
nncExtPm24HrIntervalSECBErrored = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBErrored.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBErrored.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBErrored.setDescription('SECB Errored (i.e. SECB due to bit errors). This counter is incremented by one for each PM cell block when M errored is exceeded.')
nncExtPm24HrIntervalSECBMisinserted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 17), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBMisinserted.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBMisinserted.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalSECBMisinserted.setDescription('SECB Misinserted (i.e. SECB due to misinserted cells). This counter is incremented by one for each PM cell block when M misinserted is exceeded.')
nncExtPm24HrIntervalIBWithCellLossMisinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 18), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalIBWithCellLossMisinsert.setReference('31FS0051, GR-1248-CORE')
if mibBuilder.loadTexts: nncExtPm24HrIntervalIBWithCellLossMisinsert.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalIBWithCellLossMisinsert.setDescription('Number of Impaired Blocks with Cell Loss/ Misinsertion. For each PM cell block, the number of lost or misinserted cells is added to this counter.')
nncExtPm24HrIntervalCellLossRatioClp0And1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 19), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellLossRatioClp0And1.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellLossRatioClp0And1.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellLossRatioClp0And1.setDescription('Cell Loss Ratio 0+1. Ratio of cell loss calculated by ((Total Lost 0+1 User Information Cells) / (Number of Transmitted 0+1 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm24HrIntervalCellLossRatioClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 65, 1, 4, 1, 20), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellLossRatioClp0.setReference('31FS0051')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellLossRatioClp0.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalCellLossRatioClp0.setDescription('Cell Loss Ratio 0. Ratio of cell loss calculated by ((Total Lost 0 User Information Cells) / (Number of Transmitted 0 User Information Cells)) * 1000000000. No consideration is made for cells discarded or tagged by UPC.')
nncExtPm15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 65, 3, 1)).setObjects(("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentCellFlow"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentTest"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentState"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentAbsoluteIntervalNumber"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentSECBs"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentMisinsertedCells"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentImpairedBlocks"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentTotalLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentTotalLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentIBWithCellLossMisinsert"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentCellLossRatioClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentCellLossRatioClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtPm15MinCurrentGroup = nncExtPm15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinCurrentGroup.setDescription('A collection of objects providing current 15 min PM statistics for a PM sink point.')
nncExtPm15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 65, 3, 2)).setObjects(("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalCellFlow"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalTest"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalNumber"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalState"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalAbsoluteIntervalNumber"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalSECBs"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalMisinsertedCells"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalImpairedBlocks"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalTotalLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalTotalLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalIBWithCellLossMisinsert"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalCellLossRatioClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalCellLossRatioClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtPm15MinIntervalGroup = nncExtPm15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtPm15MinIntervalGroup.setDescription('A collection of objects providing interval 15 min PM statistics for a PM sink point.')
nncExtPm24HrCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 65, 3, 3)).setObjects(("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentCellFlow"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentTest"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentState"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentAbsoluteIntervalNumber"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentSECBs"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentErroredCells"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentMisinsertedCells"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentImpairedBlocks"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentTotalLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentTotalLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentSECBErrored"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentSECBMisinserted"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentIBWithCellLossMisinsert"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentCellLossRatioClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentCellLossRatioClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtPm24HrCurrentGroup = nncExtPm24HrCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrCurrentGroup.setDescription('A collection of objects providing current 24 hour PM statistics for a PM sink point.')
nncExtPm24HrIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 65, 3, 4)).setObjects(("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalCellFlow"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalTest"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalNumber"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalState"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalAbsoluteIntervalNumber"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalSECBs"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalErroredCells"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalMisinsertedCells"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalImpairedBlocks"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalTotalLostCellsClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalTotalLostCellsClp0"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalSECBErrored"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalSECBMisinserted"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalIBWithCellLossMisinsert"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalCellLossRatioClp0And1"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalCellLossRatioClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtPm24HrIntervalGroup = nncExtPm24HrIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtPm24HrIntervalGroup.setDescription('A collection of objects providing interval 24 hour PM statistics for a PM sink point.')
nncExtPmStatisticsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 65, 4, 1)).setObjects(("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinCurrentGroup"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm15MinIntervalGroup"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrCurrentGroup"), ("NNC-EXT-PM-STATISTICS-MIB", "nncExtPm24HrIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtPmStatisticsCompliance = nncExtPmStatisticsCompliance.setStatus('current')
if mibBuilder.loadTexts: nncExtPmStatisticsCompliance.setDescription('The compliance statement for Newbridge OAM Performance Monitoring extension.')
mibBuilder.exportSymbols("NNC-EXT-PM-STATISTICS-MIB", nncExtPm24HrCurrentSECBErrored=nncExtPm24HrCurrentSECBErrored, nncExtPm24HrCurrentErroredCells=nncExtPm24HrCurrentErroredCells, nncExtPm24HrCurrentAbsoluteIntervalNumber=nncExtPm24HrCurrentAbsoluteIntervalNumber, nncExtPm24HrIntervalSECBErrored=nncExtPm24HrIntervalSECBErrored, nncExtPm15MinCurrentTotalLostCellsClp0=nncExtPm15MinCurrentTotalLostCellsClp0, nncExtPm24HrCurrentCellLossRatioClp0=nncExtPm24HrCurrentCellLossRatioClp0, nncExtPmStatisticsTraps=nncExtPmStatisticsTraps, nncExtPm24HrIntervalCellsClp0And1=nncExtPm24HrIntervalCellsClp0And1, nncExtPm24HrIntervalCellLossRatioClp0And1=nncExtPm24HrIntervalCellLossRatioClp0And1, nncExtPm24HrCurrentCellsClp0And1=nncExtPm24HrCurrentCellsClp0And1, nncExtPm24HrCurrentSECBs=nncExtPm24HrCurrentSECBs, nncExtPm24HrIntervalTable=nncExtPm24HrIntervalTable, nncExtPm24HrCurrentIBWithCellLossMisinsert=nncExtPm24HrCurrentIBWithCellLossMisinsert, nncExtPm15MinIntervalEntry=nncExtPm15MinIntervalEntry, nncExtPm24HrCurrentCellsClp0=nncExtPm24HrCurrentCellsClp0, nncExtPm15MinCurrentImpairedBlocks=nncExtPm15MinCurrentImpairedBlocks, nncExtPm24HrIntervalCellsClp0=nncExtPm24HrIntervalCellsClp0, nncExtPm15MinCurrentEntry=nncExtPm15MinCurrentEntry, nncExtPm24HrIntervalEntry=nncExtPm24HrIntervalEntry, nncExtPm24HrCurrentTotalLostCellsClp0And1=nncExtPm24HrCurrentTotalLostCellsClp0And1, nncExtPm15MinCurrentCellFlow=nncExtPm15MinCurrentCellFlow, nncExtPm15MinCurrentTest=nncExtPm15MinCurrentTest, nncExtPm24HrIntervalAbsoluteIntervalNumber=nncExtPm24HrIntervalAbsoluteIntervalNumber, nncExtPm15MinIntervalLostCellsClp0And1=nncExtPm15MinIntervalLostCellsClp0And1, NncExtPmCellFlowDirType=NncExtPmCellFlowDirType, nncExtPm15MinCurrentCellsClp0And1=nncExtPm15MinCurrentCellsClp0And1, nncExtPm15MinIntervalCellsClp0And1=nncExtPm15MinIntervalCellsClp0And1, NncExtPmTestType=NncExtPmTestType, PYSNMP_MODULE_ID=nncExtPmStatistics, nncExtPm24HrCurrentMisinsertedCells=nncExtPm24HrCurrentMisinsertedCells, nncExtPmStatisticsCompliances=nncExtPmStatisticsCompliances, nncExtPm15MinCurrentIBWithCellLossMisinsert=nncExtPm15MinCurrentIBWithCellLossMisinsert, nncExtPm24HrIntervalMisinsertedCells=nncExtPm24HrIntervalMisinsertedCells, nncExtPm15MinIntervalCellsClp0=nncExtPm15MinIntervalCellsClp0, nncExtPm15MinIntervalNumber=nncExtPm15MinIntervalNumber, nncExtPm15MinIntervalCellLossRatioClp0And1=nncExtPm15MinIntervalCellLossRatioClp0And1, nncExtPm24HrIntervalState=nncExtPm24HrIntervalState, nncExtPm24HrCurrentState=nncExtPm24HrCurrentState, nncExtPm24HrCurrentTest=nncExtPm24HrCurrentTest, nncExtPm15MinCurrentGroup=nncExtPm15MinCurrentGroup, nncExtPm24HrCurrentLostCellsClp0=nncExtPm24HrCurrentLostCellsClp0, nncExtPmStatisticsGroups=nncExtPmStatisticsGroups, nncExtPmStatisticsCompliance=nncExtPmStatisticsCompliance, nncExtPm15MinCurrentSECBs=nncExtPm15MinCurrentSECBs, nncExtPm24HrIntervalGroup=nncExtPm24HrIntervalGroup, nncExtPm24HrIntervalIBWithCellLossMisinsert=nncExtPm24HrIntervalIBWithCellLossMisinsert, nncExtPm15MinCurrentTotalLostCellsClp0And1=nncExtPm15MinCurrentTotalLostCellsClp0And1, nncExtPm15MinCurrentCellLossRatioClp0=nncExtPm15MinCurrentCellLossRatioClp0, nncExtPm24HrIntervalNumber=nncExtPm24HrIntervalNumber, nncExtPm15MinCurrentLostCellsClp0=nncExtPm15MinCurrentLostCellsClp0, nncExtPm15MinIntervalState=nncExtPm15MinIntervalState, nncExtPm24HrIntervalLostCellsClp0And1=nncExtPm24HrIntervalLostCellsClp0And1, nncExtPm15MinCurrentAbsoluteIntervalNumber=nncExtPm15MinCurrentAbsoluteIntervalNumber, nncExtPm24HrIntervalCellLossRatioClp0=nncExtPm24HrIntervalCellLossRatioClp0, nncExtPm24HrIntervalSECBs=nncExtPm24HrIntervalSECBs, nncExtPm24HrCurrentCellFlow=nncExtPm24HrCurrentCellFlow, nncExtPm15MinCurrentCellsClp0=nncExtPm15MinCurrentCellsClp0, nncExtPm24HrIntervalErroredCells=nncExtPm24HrIntervalErroredCells, nncExtPm24HrCurrentLostCellsClp0And1=nncExtPm24HrCurrentLostCellsClp0And1, nncExtPm24HrIntervalTest=nncExtPm24HrIntervalTest, nncExtPm24HrCurrentEntry=nncExtPm24HrCurrentEntry, nncExtPm24HrIntervalLostCellsClp0=nncExtPm24HrIntervalLostCellsClp0, nncExtPm15MinCurrentState=nncExtPm15MinCurrentState, nncExtPm15MinCurrentTable=nncExtPm15MinCurrentTable, nncExtPm15MinIntervalIBWithCellLossMisinsert=nncExtPm15MinIntervalIBWithCellLossMisinsert, nncExtPm24HrCurrentImpairedBlocks=nncExtPm24HrCurrentImpairedBlocks, nncExtPm15MinIntervalLostCellsClp0=nncExtPm15MinIntervalLostCellsClp0, nncExtPm15MinIntervalGroup=nncExtPm15MinIntervalGroup, nncExtPm15MinIntervalCellLossRatioClp0=nncExtPm15MinIntervalCellLossRatioClp0, nncExtPm24HrCurrentSECBMisinserted=nncExtPm24HrCurrentSECBMisinserted, nncExtPm24HrCurrentGroup=nncExtPm24HrCurrentGroup, nncExtPm15MinIntervalAbsoluteIntervalNumber=nncExtPm15MinIntervalAbsoluteIntervalNumber, nncExtPm15MinIntervalImpairedBlocks=nncExtPm15MinIntervalImpairedBlocks, nncExtPm15MinIntervalMisinsertedCells=nncExtPm15MinIntervalMisinsertedCells, nncExtPm15MinIntervalTable=nncExtPm15MinIntervalTable, nncExtPmStatistics=nncExtPmStatistics, nncExtPmStatisticsObjects=nncExtPmStatisticsObjects, nncExtPm15MinIntervalTest=nncExtPm15MinIntervalTest, nncExtPm24HrCurrentCellLossRatioClp0And1=nncExtPm24HrCurrentCellLossRatioClp0And1, nncExtPm15MinCurrentMisinsertedCells=nncExtPm15MinCurrentMisinsertedCells, nncExtPm15MinCurrentLostCellsClp0And1=nncExtPm15MinCurrentLostCellsClp0And1, nncExtPm15MinIntervalTotalLostCellsClp0And1=nncExtPm15MinIntervalTotalLostCellsClp0And1, nncExtPm15MinIntervalSECBs=nncExtPm15MinIntervalSECBs, nncExtPm15MinIntervalTotalLostCellsClp0=nncExtPm15MinIntervalTotalLostCellsClp0, nncExtPm24HrIntervalTotalLostCellsClp0=nncExtPm24HrIntervalTotalLostCellsClp0, nncExtPm24HrIntervalCellFlow=nncExtPm24HrIntervalCellFlow, nncExtPm24HrCurrentTotalLostCellsClp0=nncExtPm24HrCurrentTotalLostCellsClp0, nncExtPm15MinCurrentCellLossRatioClp0And1=nncExtPm15MinCurrentCellLossRatioClp0And1, nncExtPm24HrIntervalImpairedBlocks=nncExtPm24HrIntervalImpairedBlocks, nncExtPm24HrIntervalSECBMisinserted=nncExtPm24HrIntervalSECBMisinserted, nncExtPm15MinIntervalCellFlow=nncExtPm15MinIntervalCellFlow, nncExtPm24HrCurrentTable=nncExtPm24HrCurrentTable, nncExtPm24HrIntervalTotalLostCellsClp0And1=nncExtPm24HrIntervalTotalLostCellsClp0And1)
