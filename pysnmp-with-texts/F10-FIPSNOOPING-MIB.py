#
# PySNMP MIB module F10-FIPSNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-FIPSNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dot1qVlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Counter64, Unsigned32, ObjectIdentity, MibIdentifier, Integer32, Counter32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Counter64", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Integer32", "Counter32", "Bits", "IpAddress")
DateAndTime, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TextualConvention")
dF10FipSnooping = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 22))
dF10FipSnooping.setRevisions(('2011-12-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dF10FipSnooping.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: dF10FipSnooping.setLastUpdated('201112080000Z')
if mibBuilder.loadTexts: dF10FipSnooping.setOrganization('Dell Inc.')
if mibBuilder.loadTexts: dF10FipSnooping.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: dF10FipSnooping.setDescription('The Dell Networking OS Private MIB for FIP Snooping feature. This MIB module is for configuring FIP snooping related objects and monitoring related FCoE sessions. Terminologies used in this MIB are defined by the T11 FCoE standard. Refer to www.t11.org. This MIB also supports configuration of the following objects: - Port role configuration to identify FCF facing or FCF connected interface - FC-MAP value used by the FCF operating in FPMA mode ')
dF10FIPSCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1))
dF10FIPSAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSAdminMode.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSAdminMode.setDescription('This enables or disables FIP Snooping on the system.')
dF10FIPSFCMAP = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone('0x0EFC00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSFCMAP.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCMAP.setDescription('This object configures the FC-MAP value on the system. Default value is 0x0EFC00.')
dF10FIPSStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("ignore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSStatsClear.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSStatsClear.setDescription("Clear all FIP Snooping statistics in the system. This is write-only value. It always returns '0' on request.")
dF10FIPSVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 3), )
if mibBuilder.loadTexts: dF10FIPSVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanCfgTable.setDescription('A table of the FIP Snooping Vlan configuration entries.')
dF10FIPSVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dF10FIPSVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanCfgEntry.setDescription('Represents entry for a FIP Snooping Vlan.')
dF10FIPSVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanAdminMode.setDescription('This enables or disables FIP Snooping on a selected Vlan interface.')
dF10FIPSVlanFCMAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone('0x0EFC00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSVlanFCMAP.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFCMAP.setDescription('This object configures the FC-MAP value associated with the FIP snooping Vlan. Default value is 0x0EFC00.')
dF10FIPSVlanStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("ignore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSVlanStatsClear.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanStatsClear.setDescription("Clear FIP Snooping statistics on this Vlan. This is write-only value. It always returns '0' on request")
dF10FIPSIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 4), )
if mibBuilder.loadTexts: dF10FIPSIntfTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfTable.setDescription('A table providing configuration for trusted FCF interface mode.')
dF10FIPSIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dF10FIPSIntfEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfEntry.setDescription('FCF trust mode configuration for an interface.')
dF10FIPSIntfPortModeFcf = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("fcf", 1), ("fcoetrusted", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSIntfPortModeFcf.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfPortModeFcf.setDescription('Sets/disables FCF port mode on an interface.')
dF10FIPSIntfStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("ignore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10FIPSIntfStatsClear.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfStatsClear.setDescription("Clear FIP Snooping statistics on this interface. This is write-only value. It always returns '0' on request")
dF10FIPSStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2))
dF10FIPSSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1), )
if mibBuilder.loadTexts: dF10FIPSSessionTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionTable.setDescription('A table for FIP Snooping Session entries.')
dF10FIPSSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1), ).setIndexNames((0, "F10-FIPSNOOPING-MIB", "dF10FIPSSessionVlanIndex"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSSessionFCFMacAddr"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSSessionENodeMacAddr"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSSessionLoginType"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSFCoEMacAddr"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSSessionTentativeIndex"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSSessionFCID"))
if mibBuilder.loadTexts: dF10FIPSSessionEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionEntry.setDescription('Represents an entry in FIP Snooping session table.')
dF10FIPSSessionVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dF10FIPSSessionVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionVlanIndex.setDescription('FCoE Vlan in which the session is established.')
dF10FIPSSessionFCFMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: dF10FIPSSessionFCFMacAddr.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionFCFMacAddr.setDescription('MAC address of the FCF to which the session is established.')
dF10FIPSSessionENodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 3), MacAddress())
if mibBuilder.loadTexts: dF10FIPSSessionENodeMacAddr.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionENodeMacAddr.setDescription('MAC address of the ENode from which the session originated.')
dF10FIPSSessionLoginType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("flogi", 0), ("fdisc", 1))))
if mibBuilder.loadTexts: dF10FIPSSessionLoginType.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionLoginType.setDescription('Type of login requested by ENode.')
dF10FIPSFCoEMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 5), MacAddress())
if mibBuilder.loadTexts: dF10FIPSFCoEMacAddr.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCoEMacAddr.setDescription('MAC address assigned to the VN_Port on the ENode.')
dF10FIPSSessionTentativeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 6), Unsigned32())
if mibBuilder.loadTexts: dF10FIPSSessionTentativeIndex.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionTentativeIndex.setDescription('Index to the tentavtive session.')
dF10FIPSSessionFCID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: dF10FIPSSessionFCID.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionFCID.setDescription('FCID created by FCF for this virtual session.')
dF10FIPSSessionENodeIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSSessionENodeIntf.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionENodeIntf.setDescription('Interface to which the ENode is connected.')
dF10FIPSSessionFCFIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSSessionFCFIntf.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionFCFIntf.setDescription('Interface on which the FCF is discovered.')
dF10FIPSSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSSessionTime.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionTime.setDescription('Time elapsed after this successful virtual session is established by ENode with FCF.')
dF10FIPSSessionExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 450))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSSessionExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionExpiryTime.setDescription('This is virtual connection/session expiry interval. This is used to monitor the status of the session. Session entry is removed when the value reaches 0. This value is reset to 450 secs (5*90secs) every time an associated VN_Port FKA is received from the ENode. This is ignored (marked as NA) if the D-bit is set to one in the FCF Discovery Advertisements.')
dF10FIPSSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSSessionState.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionState.setDescription('This is the state of the virtual session. The state is displayed as TENTATIVE during the process of ENode login to FCF (using FLOGI or FDESC). It displays ACTIVE after ENode and FCF establish a successful virtual connection.')
dF10FIPSENodeTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2), )
if mibBuilder.loadTexts: dF10FIPSENodeTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeTable.setDescription('A table for FIP Snooping discovered ENode entries.')
dF10FIPSENodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1), ).setIndexNames((0, "F10-FIPSNOOPING-MIB", "dF10FIPSENodeVlanIndex"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSENodeMacAddr"))
if mibBuilder.loadTexts: dF10FIPSENodeEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeEntry.setDescription('Represents an entry in FIP Snooping ENodes table.')
dF10FIPSENodeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dF10FIPSENodeVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeVlanIndex.setDescription('FCoE Vlan in which the enode is present.')
dF10FIPSENodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: dF10FIPSENodeMacAddr.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeMacAddr.setDescription('MAC address of the ENode.')
dF10FIPSENodeIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeIntf.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeIntf.setDescription('Interface to which the ENode is connected.')
dF10FIPSENodeNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeNameID.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeNameID.setDescription('Name ID of the ENode.')
dF10FIPSENodeMaxFCoESize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeMaxFCoESize.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeMaxFCoESize.setDescription('Maximum FCoE PDU size the ENode MAC intends to use for FCoE traffic. This is equivalent to the maximum Ethernet frame payload the ENode intends to send.')
dF10FIPSENodeConnectedFCFsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeConnectedFCFsCount.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeConnectedFCFsCount.setDescription('Number of FCFs to which this ENode has FCoE virtual connections established.')
dF10FIPSENodeActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeActiveSessions.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeActiveSessions.setDescription('Number of FCoE virtual connections successfully established by the ENode with FCFs.')
dF10FIPSENodeWaitingSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeWaitingSessions.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeWaitingSessions.setDescription('Number of FCoE virtual connections initiated by ENode and waiting for FCF acceptance.')
dF10FIPSENodeRejectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeRejectedSessions.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeRejectedSessions.setDescription('Number of virtual connections originted from ENode which are rejected by FCFs.')
dF10FIPSENodeTimeSinceDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSENodeTimeSinceDiscovered.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeTimeSinceDiscovered.setDescription('Time elapsed since the ENode is discovered.')
dF10FIPSFCFTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3), )
if mibBuilder.loadTexts: dF10FIPSFCFTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFTable.setDescription('A table for FIP Snooping discovered FCF entries.')
dF10FIPSFCFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1), ).setIndexNames((0, "F10-FIPSNOOPING-MIB", "dF10FIPSFCFVlanIndex"), (0, "F10-FIPSNOOPING-MIB", "dF10FIPSFCFMacAddr"))
if mibBuilder.loadTexts: dF10FIPSFCFEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFEntry.setDescription('Represents an entry in FIP Snooping FCFs table.')
dF10FIPSFCFVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dF10FIPSFCFVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFVlanIndex.setDescription('FCoE Vlan in which the FCF is present.')
dF10FIPSFCFMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: dF10FIPSFCFMacAddr.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFMacAddr.setDescription('MAC address of the FCF.')
dF10FIPSFCFIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFIntf.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFIntf.setDescription('Inteface on which FCF is discovered.')
dF10FIPSFCFNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFNameID.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFNameID.setDescription('Name Identifer of the FCF.')
dF10FIPSFCFFabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFFabricName.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFFabricName.setDescription('Fabric Name identifying the Fabric.')
dF10FIPSFCFAddressingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fpma", 1), ("spma", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFAddressingMode.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFAddressingMode.setDescription('Addressing mode(s) supported by the FCF.')
dF10FIPSFCFPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFPriority.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFPriority.setDescription('This is the priority assigned to FCF. The highest priority value is 0 and the lowest priority value is 255.')
dF10FIPSFCFDbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFDbit.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFDbit.setDescription('This reflects the value of D bit value provided by the most recently received Discovery Advertisement from the FCF.')
dF10FIPSFCFIsAvailableForLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFIsAvailableForLogin.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFIsAvailableForLogin.setDescription('This reflects the value of the A bit provided by the most recently received Discovery Advertisement from the FCF. This provides the information that the transmitting FCF is available for FIP FLOGI/FDISC from ENodes. This is informational and shall have no effect on existing logins.')
dF10FIPSFCFConfiguredFKA = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 450))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFConfiguredFKA.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFConfiguredFKA.setDescription('FIP keepalive interval (FKA_ADV_PERIOD) in seconds configured on the FCF multiplied by five. For example, if the FKA_ADV period configured on the FCF is 80 seconds, the value of this field is 400 seconds.')
dF10FIPSFCFTimeSinceDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFTimeSinceDiscovered.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFTimeSinceDiscovered.setDescription('Time elapsed since the FCF is discovered.')
dF10FIPSFCFConnectedENodesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFConnectedENodesCount.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFConnectedENodesCount.setDescription('Number of ENodes to which FCF has FCoE virtual connections established.')
dF10FIPSFCFSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFSessions.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFSessions.setDescription('Total number of FCoE virtual connections successfully established by the ENodes with this FCF.')
dF10FIPSFCFExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSFCFExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFExpiryTime.setDescription("This indicates the timer value in seconds to monitor the status of the FCF. FCF entry and all its associated virtual sessions will be removed when the value reaches 0. This value is reset to 'Configured FKA-ADV' every time a Discovery Advertisement is received from the FCF-MAC.")
dF10FIPSStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3))
dF10FIPSVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1), )
if mibBuilder.loadTexts: dF10FIPSVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanStatsTable.setDescription('A table containing per-port, per-VLAN statistics for traffic received. Separate objects are provided for both the most-significant and least-significant bits of statistics counters for ports that are associated with this transparent bridge. The most-significant bit objects are only required on high capacity interfaces, as defined in the conformance clauses for these objects. This mechanism is provided as a way to read 64-bit counters for agents which support only SNMPv1. Note that the reporting of most-significant and least- significant counter bits separately runs the risk of missing an overflow of the lower bits in the interval between sampling. The manager must be aware of this possibility, even within the same varbindlist, when interpreting the results of a request or asynchronous notification.')
dF10FIPSVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dF10FIPSVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanStatsEntry.setDescription('FIP Snooping control traffic statistics of a VLAN.')
dF10FIPSVlanVlanRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanVlanRequests.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanVlanRequests.setDescription('Number of VLAN Request messages received on the VLAN.')
dF10FIPSVlanVlanNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanVlanNotifications.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanVlanNotifications.setDescription('Number of VLAN Notification messages received on the VLAN.')
dF10FIPSVlanMCDiscSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanMCDiscSolicits.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanMCDiscSolicits.setDescription('Number of Multicast Discovery Solicitation messages snooped in the VLAN.')
dF10FIPSVlanUnicastDiscSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanUnicastDiscSolicits.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanUnicastDiscSolicits.setDescription('Number of Unicast Discovery Solicitation messages snooped in the VLAN.')
dF10FIPSVlanFLogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFLogis.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFLogis.setDescription('Number of Fabric Login messages snooped in the VLAN.')
dF10FIPSVlanFDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFDiscs.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFDiscs.setDescription('Number of Fabric Discovery Login messages snooped in the VLAN.')
dF10FIPSVlanFLogouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFLogouts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFLogouts.setDescription('Number of Fabric Logout messages snooped in the VLAN.')
dF10FIPSVlanVnPortKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanVnPortKeepAlives.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanVnPortKeepAlives.setDescription('Number of VN_Port keep alive messages snooped in the VLAN.')
dF10FIPSVlanMCDiscAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanMCDiscAdverts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanMCDiscAdverts.setDescription('Number of Multicast Discovery Advertisement messages snooped in the VLAN.')
dF10FIPSVlanUnicastDiscAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanUnicastDiscAdverts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanUnicastDiscAdverts.setDescription('Number of Unicast Discovery Advertisement packets snooped in the VLAN.')
dF10FIPSVlanFLogiAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFLogiAccepts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFLogiAccepts.setDescription('Number of Fabric Login accept packets snooped in the VLAN.')
dF10FIPSVlanFLogiRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFLogiRejects.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFLogiRejects.setDescription('Number of Fabric Login reject packets snooped in the VLAN.')
dF10FIPSVlanFDiscAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFDiscAccepts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFDiscAccepts.setDescription('Number of Fabric Discovery accept packets snooped in the VLAN.')
dF10FIPSVlanFDiscRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFDiscRejects.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFDiscRejects.setDescription('Number of Fabric Discovery reject packets snooped in the VLAN.')
dF10FIPSVlanFLogoutAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFLogoutAccepts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFLogoutAccepts.setDescription('Number of Fabric Logouts accept packets snooped in the VLAN.')
dF10FIPSVlanFLogoutRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFLogoutRejects.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFLogoutRejects.setDescription('Number of Fabric Logouts reject packets snooped in the VLAN.')
dF10FIPSVlanClearVirtLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanClearVirtLinks.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanClearVirtLinks.setDescription('Number of Clear Virtual Link request packets snooped in the VLAN.')
dF10FIPSVlanVnPortSeshTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanVnPortSeshTimeouts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanVnPortSeshTimeouts.setDescription('Number of virtual sessions removed due to session timer expiry in the VLAN.')
dF10FIPSVlanFcfDiscAdvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanFcfDiscAdvTimeouts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanFcfDiscAdvTimeouts.setDescription('Number of ACTIVE sessions timed out due to Discovery Advertisements timer expiry from FCFs in the VLAN.')
dF10FIPSVlanSeshFailsDueToHwCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanSeshFailsDueToHwCfg.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanSeshFailsDueToHwCfg.setDescription('Number of sessions in the VLAN that failed while configuring the hardware.')
dF10FIPSVlanSeshDenyFcfLmtRch = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanSeshDenyFcfLmtRch.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanSeshDenyFcfLmtRch.setDescription('Number of sessions that are denied to be created for the new FCF as the number of FCFs reached the maximum allowed limit supported in the VLAN.')
dF10FIPSVlanSeshDenyENodeLmtRch = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanSeshDenyENodeLmtRch.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanSeshDenyENodeLmtRch.setDescription('Number of sessions that are denied to be created for the new ENode as the number of ENodes reached the maximum allowed limit supported by the system.')
dF10FIPSVlanSeshDenySysLmtRch = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSVlanSeshDenySysLmtRch.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanSeshDenySysLmtRch.setDescription('Number of session create requests denied as the number of sessions reached the maximum allowed limit supported by the system.')
dF10FIPSIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2), )
if mibBuilder.loadTexts: dF10FIPSIntfStatsTable.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfStatsTable.setDescription('A table containing per-port, per-VLAN statistics for traffic received. Separate objects are provided for both the most-significant and least-significant bits of statistics counters for ports that are associated with this transparent bridge. The most-significant bit objects are only required on high capacity interfaces, as defined in the conformance clauses for these objects. This mechanism is provided as a way to read 64-bit counters for agents which support only SNMPv1. Note that the reporting of most-significant and least- significant counter bits separately runs the risk of missing an overflow of the lower bits in the interval between sampling. The manager must be aware of this possibility, even within the same varbindlist, when interpreting the results of a request or asynchronous notification.')
dF10FIPSIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dF10FIPSIntfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfStatsEntry.setDescription('FIP Snooping control traffic statistics on this interface.')
dF10FIPSIntfVlanRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfVlanRequests.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfVlanRequests.setDescription('Number of VLAN Request messages received on the interface.')
dF10FIPSIntfVlanNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfVlanNotifications.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfVlanNotifications.setDescription('Number of VLAN Notification messages received on the interface.')
dF10FIPSIntfMCDiscSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfMCDiscSolicits.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfMCDiscSolicits.setDescription('Number of Multicast Discovery Solicitation messages received on the interface.')
dF10FIPSIntfUnicastDiscSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfUnicastDiscSolicits.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfUnicastDiscSolicits.setDescription('Number of Unicast Discovery Solicitation messages received on the interface.')
dF10FIPSIntfFLogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFLogis.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFLogis.setDescription('Number of Fabric Logins received on the interface.')
dF10FIPSIntfFDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFDiscs.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFDiscs.setDescription('Number of Fabric Discovery logins received on the interface.')
dF10FIPSIntfFLogouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFLogouts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFLogouts.setDescription('Number of Fabric Logouts received on the interface.')
dF10FIPSIntfVnPortKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfVnPortKeepAlives.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfVnPortKeepAlives.setDescription('Number of VN_Port keepalive messages received on the interface.')
dF10FIPSIntfMCDiscAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfMCDiscAdverts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfMCDiscAdverts.setDescription('Number of Multicast Discovery Advertisement messages received on the interface.')
dF10FIPSIntfUnicastDiscAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfUnicastDiscAdverts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfUnicastDiscAdverts.setDescription('Number of Unicast Discovery Advertisement messages received on the interface.')
dF10FIPSIntfFLogiAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFLogiAccepts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFLogiAccepts.setDescription('Number of Fabric Login accept messages received on the interface.')
dF10FIPSIntfFLogiRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFLogiRejects.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFLogiRejects.setDescription('Number of Fabric Login reject messages received on the interface.')
dF10FIPSIntfFDiscAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFDiscAccepts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFDiscAccepts.setDescription('Number of Fabric Discovery accept messages received on the interface.')
dF10FIPSIntfFDiscRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFDiscRejects.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFDiscRejects.setDescription('Number of Fabric Discovery reject messages received on the interface.')
dF10FIPSIntfFLogoutAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFLogoutAccepts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFLogoutAccepts.setDescription('Number of Fabric Logout accept messages received on the interface.')
dF10FIPSIntfFLogoutRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFLogoutRejects.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFLogoutRejects.setDescription('Number of Fabric Logout reject messages received on the interface.')
dF10FIPSIntfClearVirtLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfClearVirtLinks.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfClearVirtLinks.setDescription('Number of Clear Virtual Links messages received on the interface.')
dF10FIPSIntfVnPortSeshTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfVnPortSeshTimeouts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfVnPortSeshTimeouts.setDescription('Number of Virtual sessions removed due to session timer expiry.')
dF10FIPSIntfFcfDiscAdvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfFcfDiscAdvTimeouts.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfFcfDiscAdvTimeouts.setDescription('Number of ACTIVE sessions timed out due to Discovery Advertisements timer expiry from FCFs on this interface.')
dF10FIPSIntfSeshFailsDueToHwCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfSeshFailsDueToHwCfg.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfSeshFailsDueToHwCfg.setDescription('Number of sessions on this interface that failed while configuring the hardware.')
dF10FIPSIntfSeshDenyFcfLmtRch = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfSeshDenyFcfLmtRch.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfSeshDenyFcfLmtRch.setDescription('Number of sessions that are denied to be created on this interface form a new FCF as the number of FCFs count reached the maximum allowed limit in the system.')
dF10FIPSIntfSeshDenyENodeLmtRch = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfSeshDenyENodeLmtRch.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfSeshDenyENodeLmtRch.setDescription('Number of sessions that are denied to be created on this interface form a new ENode/host as the number of ENodes/hosts count reached the maximum allowed limit in the system.')
dF10FIPSIntfSeshDenySysLmtRch = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 22, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10FIPSIntfSeshDenySysLmtRch.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfSeshDenySysLmtRch.setDescription('Number of sessions that are denied to be created as the number of sessions count reached the maximum allowed limit supported in the system. This is a global counter.')
dF10FIPSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4))
dF10FIPSTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0))
dF10FIPSTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 1))
dF10FIPSTrapVlanIndex = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dF10FIPSTrapVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSTrapVlanIndex.setDescription('This object refers to the Vlan Index for which the FIP Snooping trap is being sent.')
dF10FIPSTrapMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dF10FIPSTrapMacAddr.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSTrapMacAddr.setDescription('This object refers to the FCF or Enode MAC Address for which the FIP Snooping trap is being sent.')
dF10MaxFcfsInVlanLmtRchTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 1)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSTrapVlanIndex"))
if mibBuilder.loadTexts: dF10MaxFcfsInVlanLmtRchTrap.setStatus('current')
if mibBuilder.loadTexts: dF10MaxFcfsInVlanLmtRchTrap.setDescription('This trap is sent when number of FCFs reached maximum allowed limit in VLAN.')
dF10MaxENodesLmtRchTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 2))
if mibBuilder.loadTexts: dF10MaxENodesLmtRchTrap.setStatus('current')
if mibBuilder.loadTexts: dF10MaxENodesLmtRchTrap.setDescription('This trap is sent when number of ENodes reached maximum allowed limit in the system.')
dF10MaxSessionLmtRchTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 3))
if mibBuilder.loadTexts: dF10MaxSessionLmtRchTrap.setStatus('current')
if mibBuilder.loadTexts: dF10MaxSessionLmtRchTrap.setDescription('This trap is sent when number of sessions reached maximum allowed limit in the system.')
dF10FcfDroppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 4)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSTrapVlanIndex"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSTrapMacAddr"))
if mibBuilder.loadTexts: dF10FcfDroppedTrap.setStatus('current')
if mibBuilder.loadTexts: dF10FcfDroppedTrap.setDescription('This trap is sent when a new FCF discovered (Discovery Advertisement is received from FCF) is dropped, as the maximum allowed FCFs limit in a VLAN is already reached.')
dF10ENodeDroppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 5)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSTrapVlanIndex"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSTrapMacAddr"))
if mibBuilder.loadTexts: dF10ENodeDroppedTrap.setStatus('current')
if mibBuilder.loadTexts: dF10ENodeDroppedTrap.setDescription('This trap is sent when a new ENode discovered is dropped, as the maximum allowed ENodes limit in the system is already reached.')
dF10SessionRequestDroppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 6)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSTrapVlanIndex"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSTrapMacAddr"))
if mibBuilder.loadTexts: dF10SessionRequestDroppedTrap.setStatus('current')
if mibBuilder.loadTexts: dF10SessionRequestDroppedTrap.setDescription('This trap is sent when a new session request received is dropped, as the maximum allowed session limit in system is already reached.')
dF10AclInstallationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 22, 4, 0, 7))
if mibBuilder.loadTexts: dF10AclInstallationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: dF10AclInstallationFailureTrap.setDescription('This trap is sent when there is a problem in installing the ACL entries due to no space or hardware failure')
dF10FIPSMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5))
dF10FIPSMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 1))
dF10FIPSMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2))
dF10FIPSMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 1, 1)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSCfgObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanCfgObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSSessionObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanStatsObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfStatsObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSTrapsObjectGroup"), ("F10-FIPSNOOPING-MIB", "dF10FIPSTrapObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSMibCompliance = dF10FIPSMibCompliance.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSMibCompliance.setDescription('The compliance statement for Dell Networking OS product which implement the Dell Networking OS FIP Snooping MIB. ')
dF10FIPSCfgObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 1)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSAdminMode"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCMAP"), ("F10-FIPSNOOPING-MIB", "dF10FIPSStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSCfgObjectGroup = dF10FIPSCfgObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSCfgObjectGroup.setDescription('This group represents a collection of objects providing the FIPS system information.')
dF10FIPSVlanCfgObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 2)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSVlanAdminMode"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFCMAP"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSVlanCfgObjectGroup = dF10FIPSVlanCfgObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanCfgObjectGroup.setDescription('This group represents a collection of objects providing the FIPS vlan information.')
dF10FIPSIntfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 3)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSIntfPortModeFcf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSIntfObjectGroup = dF10FIPSIntfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfObjectGroup.setDescription('This group represents a collection of objects providing the FIPS interface information.')
dF10FIPSSessionObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 4)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSSessionENodeIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSSessionFCFIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSSessionTime"), ("F10-FIPSNOOPING-MIB", "dF10FIPSSessionExpiryTime"), ("F10-FIPSNOOPING-MIB", "dF10FIPSSessionState"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSSessionObjectGroup = dF10FIPSSessionObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSSessionObjectGroup.setDescription('This group represents a collection of objects providing the FIPS Session information.')
dF10FIPSENodeObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 5)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSENodeIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeNameID"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeMaxFCoESize"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeConnectedFCFsCount"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeActiveSessions"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeWaitingSessions"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeRejectedSessions"), ("F10-FIPSNOOPING-MIB", "dF10FIPSENodeTimeSinceDiscovered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSENodeObjectGroup = dF10FIPSENodeObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSENodeObjectGroup.setDescription('This group represents a collection of objects providing the FIPS ENode information.')
dF10FIPSFCFObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 6)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSFCFIntf"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFNameID"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFFabricName"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFAddressingMode"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFPriority"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFDbit"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFIsAvailableForLogin"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFConfiguredFKA"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFTimeSinceDiscovered"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFConnectedENodesCount"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFSessions"), ("F10-FIPSNOOPING-MIB", "dF10FIPSFCFExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSFCFObjectGroup = dF10FIPSFCFObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSFCFObjectGroup.setDescription('This group represents a collection of objects providing the FIPS FCF information.')
dF10FIPSVlanStatsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 7)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSVlanVlanRequests"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanVlanNotifications"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanMCDiscSolicits"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanUnicastDiscSolicits"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFLogis"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFDiscs"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFLogouts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanVnPortKeepAlives"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanMCDiscAdverts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanUnicastDiscAdverts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFLogiAccepts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFLogiRejects"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFDiscAccepts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFDiscRejects"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFLogoutAccepts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFLogoutRejects"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanClearVirtLinks"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanVnPortSeshTimeouts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanFcfDiscAdvTimeouts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanSeshFailsDueToHwCfg"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanSeshDenyFcfLmtRch"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanSeshDenyENodeLmtRch"), ("F10-FIPSNOOPING-MIB", "dF10FIPSVlanSeshDenySysLmtRch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSVlanStatsObjectGroup = dF10FIPSVlanStatsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSVlanStatsObjectGroup.setDescription('This group represents a collection of objects providing the FIPS Vlan Statistics information.')
dF10FIPSIntfStatsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 8)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSIntfVlanRequests"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfVlanNotifications"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfMCDiscSolicits"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfUnicastDiscSolicits"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFLogis"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFDiscs"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFLogouts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfVnPortKeepAlives"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfMCDiscAdverts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfUnicastDiscAdverts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFLogiAccepts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFLogiRejects"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFDiscAccepts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFDiscRejects"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFLogoutAccepts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFLogoutRejects"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfClearVirtLinks"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfVnPortSeshTimeouts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfFcfDiscAdvTimeouts"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfSeshFailsDueToHwCfg"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfSeshDenyFcfLmtRch"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfSeshDenyENodeLmtRch"), ("F10-FIPSNOOPING-MIB", "dF10FIPSIntfSeshDenySysLmtRch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSIntfStatsObjectGroup = dF10FIPSIntfStatsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSIntfStatsObjectGroup.setDescription('This group represents a collection of objects providing the FIPS Interface Statistics information.')
dF10FIPSTrapsObjectGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 9)).setObjects(("F10-FIPSNOOPING-MIB", "dF10MaxFcfsInVlanLmtRchTrap"), ("F10-FIPSNOOPING-MIB", "dF10MaxENodesLmtRchTrap"), ("F10-FIPSNOOPING-MIB", "dF10MaxSessionLmtRchTrap"), ("F10-FIPSNOOPING-MIB", "dF10FcfDroppedTrap"), ("F10-FIPSNOOPING-MIB", "dF10ENodeDroppedTrap"), ("F10-FIPSNOOPING-MIB", "dF10SessionRequestDroppedTrap"), ("F10-FIPSNOOPING-MIB", "dF10AclInstallationFailureTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSTrapsObjectGroup = dF10FIPSTrapsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSTrapsObjectGroup.setDescription('This group represents a collection of objects providing the FIPS Trap information.')
dF10FIPSTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 22, 5, 2, 10)).setObjects(("F10-FIPSNOOPING-MIB", "dF10FIPSTrapVlanIndex"), ("F10-FIPSNOOPING-MIB", "dF10FIPSTrapMacAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10FIPSTrapObjectsGroup = dF10FIPSTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: dF10FIPSTrapObjectsGroup.setDescription('This group represents a collection of objects providing the FIPS Trap object information.')
mibBuilder.exportSymbols("F10-FIPSNOOPING-MIB", dF10FIPSIntfVlanNotifications=dF10FIPSIntfVlanNotifications, dF10FIPSIntfFLogiAccepts=dF10FIPSIntfFLogiAccepts, dF10FIPSENodeIntf=dF10FIPSENodeIntf, dF10FIPSVlanStatsObjectGroup=dF10FIPSVlanStatsObjectGroup, dF10FIPSVlanStatsClear=dF10FIPSVlanStatsClear, dF10FIPSVlanFLogiRejects=dF10FIPSVlanFLogiRejects, dF10FIPSVlanVlanRequests=dF10FIPSVlanVlanRequests, dF10FIPSVlanCfgObjectGroup=dF10FIPSVlanCfgObjectGroup, dF10FIPSStatsClear=dF10FIPSStatsClear, dF10FIPSNotifications=dF10FIPSNotifications, dF10FIPSTrapsObjectGroup=dF10FIPSTrapsObjectGroup, dF10FIPSFCFEntry=dF10FIPSFCFEntry, dF10FIPSVlanCfgEntry=dF10FIPSVlanCfgEntry, dF10FIPSVlanFDiscs=dF10FIPSVlanFDiscs, dF10FIPSENodeActiveSessions=dF10FIPSENodeActiveSessions, dF10AclInstallationFailureTrap=dF10AclInstallationFailureTrap, dF10FIPSFCFAddressingMode=dF10FIPSFCFAddressingMode, dF10FIPSMibConformance=dF10FIPSMibConformance, dF10FIPSIntfStatsEntry=dF10FIPSIntfStatsEntry, dF10FIPSMibCompliance=dF10FIPSMibCompliance, dF10FIPSFCMAP=dF10FIPSFCMAP, dF10FIPSIntfVnPortSeshTimeouts=dF10FIPSIntfVnPortSeshTimeouts, dF10FIPSSessionFCID=dF10FIPSSessionFCID, dF10FIPSVlanSeshDenyENodeLmtRch=dF10FIPSVlanSeshDenyENodeLmtRch, dF10FIPSIntfClearVirtLinks=dF10FIPSIntfClearVirtLinks, dF10FIPSVlanAdminMode=dF10FIPSVlanAdminMode, dF10FIPSVlanSeshDenyFcfLmtRch=dF10FIPSVlanSeshDenyFcfLmtRch, dF10FIPSFCFConfiguredFKA=dF10FIPSFCFConfiguredFKA, dF10FIPSSessionEntry=dF10FIPSSessionEntry, dF10FIPSVlanMCDiscSolicits=dF10FIPSVlanMCDiscSolicits, dF10FIPSIntfUnicastDiscAdverts=dF10FIPSIntfUnicastDiscAdverts, dF10FIPSVlanFcfDiscAdvTimeouts=dF10FIPSVlanFcfDiscAdvTimeouts, dF10FIPSCfgObjectGroup=dF10FIPSCfgObjectGroup, dF10FIPSStatusGroup=dF10FIPSStatusGroup, dF10FIPSENodeTable=dF10FIPSENodeTable, dF10FIPSENodeMaxFCoESize=dF10FIPSENodeMaxFCoESize, dF10FIPSIntfObjectGroup=dF10FIPSIntfObjectGroup, dF10FIPSAdminMode=dF10FIPSAdminMode, dF10FIPSFCFExpiryTime=dF10FIPSFCFExpiryTime, dF10FIPSVlanSeshFailsDueToHwCfg=dF10FIPSVlanSeshFailsDueToHwCfg, dF10FIPSVlanVlanNotifications=dF10FIPSVlanVlanNotifications, dF10FIPSTraps=dF10FIPSTraps, dF10MaxFcfsInVlanLmtRchTrap=dF10MaxFcfsInVlanLmtRchTrap, dF10FIPSENodeWaitingSessions=dF10FIPSENodeWaitingSessions, dF10FIPSVlanFDiscRejects=dF10FIPSVlanFDiscRejects, dF10FIPSIntfMCDiscSolicits=dF10FIPSIntfMCDiscSolicits, PYSNMP_MODULE_ID=dF10FipSnooping, dF10FIPSSessionVlanIndex=dF10FIPSSessionVlanIndex, dF10FIPSSessionFCFMacAddr=dF10FIPSSessionFCFMacAddr, dF10FIPSENodeObjectGroup=dF10FIPSENodeObjectGroup, dF10ENodeDroppedTrap=dF10ENodeDroppedTrap, dF10FIPSVlanFLogouts=dF10FIPSVlanFLogouts, dF10FIPSTrapObjectsGroup=dF10FIPSTrapObjectsGroup, dF10FIPSENodeRejectedSessions=dF10FIPSENodeRejectedSessions, dF10FIPSFCFIsAvailableForLogin=dF10FIPSFCFIsAvailableForLogin, dF10FIPSVlanStatsEntry=dF10FIPSVlanStatsEntry, dF10FIPSENodeEntry=dF10FIPSENodeEntry, dF10FIPSENodeMacAddr=dF10FIPSENodeMacAddr, dF10FIPSIntfUnicastDiscSolicits=dF10FIPSIntfUnicastDiscSolicits, dF10FIPSMibCompliances=dF10FIPSMibCompliances, dF10FIPSIntfTable=dF10FIPSIntfTable, dF10FIPSVlanFLogiAccepts=dF10FIPSVlanFLogiAccepts, dF10FIPSVlanFDiscAccepts=dF10FIPSVlanFDiscAccepts, dF10FIPSVlanMCDiscAdverts=dF10FIPSVlanMCDiscAdverts, dF10FIPSFCFTimeSinceDiscovered=dF10FIPSFCFTimeSinceDiscovered, dF10MaxENodesLmtRchTrap=dF10MaxENodesLmtRchTrap, dF10FIPSIntfFDiscRejects=dF10FIPSIntfFDiscRejects, dF10FIPSVlanVnPortKeepAlives=dF10FIPSVlanVnPortKeepAlives, dF10FIPSIntfSeshDenyENodeLmtRch=dF10FIPSIntfSeshDenyENodeLmtRch, dF10FIPSIntfMCDiscAdverts=dF10FIPSIntfMCDiscAdverts, dF10FIPSTrapMacAddr=dF10FIPSTrapMacAddr, dF10FIPSStatisticsGroup=dF10FIPSStatisticsGroup, dF10FIPSSessionLoginType=dF10FIPSSessionLoginType, dF10FIPSFCFConnectedENodesCount=dF10FIPSFCFConnectedENodesCount, dF10FIPSIntfVlanRequests=dF10FIPSIntfVlanRequests, dF10FIPSFCFObjectGroup=dF10FIPSFCFObjectGroup, dF10FIPSSessionTable=dF10FIPSSessionTable, dF10FIPSFCFPriority=dF10FIPSFCFPriority, dF10FIPSIntfSeshDenySysLmtRch=dF10FIPSIntfSeshDenySysLmtRch, dF10FIPSSessionFCFIntf=dF10FIPSSessionFCFIntf, dF10FIPSIntfSeshDenyFcfLmtRch=dF10FIPSIntfSeshDenyFcfLmtRch, dF10FIPSVlanCfgTable=dF10FIPSVlanCfgTable, dF10FIPSIntfFLogoutRejects=dF10FIPSIntfFLogoutRejects, dF10FIPSIntfFLogis=dF10FIPSIntfFLogis, dF10FIPSFCFTable=dF10FIPSFCFTable, dF10FIPSIntfFLogiRejects=dF10FIPSIntfFLogiRejects, dF10FIPSSessionObjectGroup=dF10FIPSSessionObjectGroup, dF10FIPSVlanFLogis=dF10FIPSVlanFLogis, dF10FIPSFCFSessions=dF10FIPSFCFSessions, dF10FIPSIntfVnPortKeepAlives=dF10FIPSIntfVnPortKeepAlives, dF10FIPSTrapObjects=dF10FIPSTrapObjects, dF10FIPSIntfStatsTable=dF10FIPSIntfStatsTable, dF10FIPSIntfFLogoutAccepts=dF10FIPSIntfFLogoutAccepts, dF10FIPSENodeNameID=dF10FIPSENodeNameID, dF10FIPSIntfEntry=dF10FIPSIntfEntry, dF10FIPSFCFVlanIndex=dF10FIPSFCFVlanIndex, dF10FIPSVlanFLogoutAccepts=dF10FIPSVlanFLogoutAccepts, dF10FipSnooping=dF10FipSnooping, dF10FIPSSessionENodeIntf=dF10FIPSSessionENodeIntf, dF10FIPSVlanUnicastDiscSolicits=dF10FIPSVlanUnicastDiscSolicits, dF10FIPSVlanStatsTable=dF10FIPSVlanStatsTable, dF10FIPSIntfSeshFailsDueToHwCfg=dF10FIPSIntfSeshFailsDueToHwCfg, dF10FIPSIntfPortModeFcf=dF10FIPSIntfPortModeFcf, dF10MaxSessionLmtRchTrap=dF10MaxSessionLmtRchTrap, dF10FIPSENodeTimeSinceDiscovered=dF10FIPSENodeTimeSinceDiscovered, dF10FIPSVlanClearVirtLinks=dF10FIPSVlanClearVirtLinks, dF10FIPSSessionENodeMacAddr=dF10FIPSSessionENodeMacAddr, dF10FIPSFCFIntf=dF10FIPSFCFIntf, dF10FIPSFCFFabricName=dF10FIPSFCFFabricName, dF10FIPSSessionTime=dF10FIPSSessionTime, dF10FIPSIntfStatsClear=dF10FIPSIntfStatsClear, dF10FIPSVlanVnPortSeshTimeouts=dF10FIPSVlanVnPortSeshTimeouts, dF10FcfDroppedTrap=dF10FcfDroppedTrap, dF10FIPSFCFMacAddr=dF10FIPSFCFMacAddr, dF10FIPSFCoEMacAddr=dF10FIPSFCoEMacAddr, dF10FIPSENodeVlanIndex=dF10FIPSENodeVlanIndex, dF10FIPSIntfFcfDiscAdvTimeouts=dF10FIPSIntfFcfDiscAdvTimeouts, dF10FIPSVlanSeshDenySysLmtRch=dF10FIPSVlanSeshDenySysLmtRch, dF10SessionRequestDroppedTrap=dF10SessionRequestDroppedTrap, dF10FIPSFCFNameID=dF10FIPSFCFNameID, dF10FIPSIntfFLogouts=dF10FIPSIntfFLogouts, dF10FIPSCfgGroup=dF10FIPSCfgGroup, dF10FIPSSessionState=dF10FIPSSessionState, dF10FIPSVlanUnicastDiscAdverts=dF10FIPSVlanUnicastDiscAdverts, dF10FIPSIntfFDiscs=dF10FIPSIntfFDiscs, dF10FIPSMibGroups=dF10FIPSMibGroups, dF10FIPSSessionTentativeIndex=dF10FIPSSessionTentativeIndex, dF10FIPSIntfStatsObjectGroup=dF10FIPSIntfStatsObjectGroup, dF10FIPSSessionExpiryTime=dF10FIPSSessionExpiryTime, dF10FIPSTrapVlanIndex=dF10FIPSTrapVlanIndex, dF10FIPSIntfFDiscAccepts=dF10FIPSIntfFDiscAccepts, dF10FIPSFCFDbit=dF10FIPSFCFDbit, dF10FIPSENodeConnectedFCFsCount=dF10FIPSENodeConnectedFCFsCount, dF10FIPSVlanFCMAP=dF10FIPSVlanFCMAP, dF10FIPSVlanFLogoutRejects=dF10FIPSVlanFLogoutRejects)
