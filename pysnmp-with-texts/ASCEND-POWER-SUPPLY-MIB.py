#
# PySNMP MIB module ASCEND-POWER-SUPPLY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-POWER-SUPPLY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
powerSupply, = mibBuilder.importSymbols("ASCEND-MIB", "powerSupply")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, Unsigned32, Gauge32, iso, ObjectIdentity, TimeTicks, MibIdentifier, Integer32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Unsigned32", "Gauge32", "iso", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Integer32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
powerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCount.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyCount.setDescription('The number of entries in the powerSupplyTable.')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 529, 18, 2), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('The power supply table.')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 18, 2, 1), ).setIndexNames((0, "ASCEND-POWER-SUPPLY-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('An entry in the power supply table.')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('The index of the powerSupply entry.')
powerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyState.setDescription('The state of the power supply module.')
powerSupplyOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noFailure", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyOperationalState.setDescription('The operational state of the power supply module.')
powerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplySerialNumber.setDescription('Serial number of the power supply module.')
powerSupplyStateTrapState = MibScalar((1, 3, 6, 1, 4, 1, 529, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSupplyStateTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStateTrapState.setDescription('This variable indicates whether the system produces the powerSupplyStateChange trap.')
powerSupplyOperationalStateTrapState = MibScalar((1, 3, 6, 1, 4, 1, 529, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSupplyOperationalStateTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyOperationalStateTrapState.setDescription('This variable indicates whether the system produces the powerSupplyOperationalStateChange trap.')
mibBuilder.exportSymbols("ASCEND-POWER-SUPPLY-MIB", powerSupplyState=powerSupplyState, powerSupplySerialNumber=powerSupplySerialNumber, powerSupplyEntry=powerSupplyEntry, powerSupplyIndex=powerSupplyIndex, powerSupplyOperationalState=powerSupplyOperationalState, powerSupplyStateTrapState=powerSupplyStateTrapState, powerSupplyCount=powerSupplyCount, powerSupplyOperationalStateTrapState=powerSupplyOperationalStateTrapState, powerSupplyTable=powerSupplyTable)
