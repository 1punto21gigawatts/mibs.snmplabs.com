#
# PySNMP MIB module F10-C-SERIES-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-C-SERIES-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10ProcessorModuleType, F10CSeriesPortType, F10HundredthdB, F10MfgDate, F10ChassisType, F10ChassisMode, F10CSeriesCardType, F10CardOperStatus, F10SwDate = mibBuilder.importSymbols("FORCE10-TC", "F10ProcessorModuleType", "F10CSeriesPortType", "F10HundredthdB", "F10MfgDate", "F10ChassisType", "F10ChassisMode", "F10CSeriesCardType", "F10CardOperStatus", "F10SwDate")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Unsigned32, IpAddress, ObjectIdentity, iso, Bits, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, TimeTicks, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "IpAddress", "ObjectIdentity", "iso", "Bits", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "TimeTicks", "MibIdentifier", "Integer32")
DateAndTime, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "TextualConvention", "DisplayString")
f10CSerChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 8))
f10CSerChassisMib.setRevisions(('2012-07-18 12:00', '2008-09-02 12:00', '2007-06-28 12:00', '2007-05-22 12:00', '2013-05-17 12:00', '1906-05-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10CSerChassisMib.setRevisionsDescriptions(('Adding new objects - Dell PPID, Revision, Service Tag, Express Service Code.', 'Import F10CardOperStatus.', 'Import F10ChassisType. Redefine XFP received power object. ', 'The following changes have been made: - add new table: chLineCardUtilTable. - use gauge32 to define utilization objects. - add module conformance.', 'Adding PSU absent under chSysPowerSupplyType Adding support to get the PSU version (1200W or 1600W) Adding support to get the PSU mode (high or low)', 'First draft revision of Dell Force10 c-series chassis mib.',))
if mibBuilder.loadTexts: f10CSerChassisMib.setLastUpdated('201305171200Z')
if mibBuilder.loadTexts: f10CSerChassisMib.setOrganization('Dell Inc')
if mibBuilder.loadTexts: f10CSerChassisMib.setContactInfo('http://support.dell.com/force10')
if mibBuilder.loadTexts: f10CSerChassisMib.setDescription('Dell Force10 C-Series Enterprise Chassis MIB. ')
f10CSerChassisObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2))
chRpmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3))
chAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 4))
chLineCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5))
chType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 1), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chType.setStatus('current')
if mibBuilder.loadTexts: chType.setDescription('The type of chassis.')
chChassisMode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 2), F10ChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chChassisMode.setStatus('current')
if mibBuilder.loadTexts: chChassisMode.setDescription('The chassis mode of this chassis.')
chSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSwVersion.setStatus('current')
if mibBuilder.loadTexts: chSwVersion.setDescription('Current FTOS system images software version.')
chMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chMacAddr.setStatus('current')
if mibBuilder.loadTexts: chMacAddr.setDescription('A 6-octet MAC Address assigned to this chassis. ')
chSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chSerialNumber.setDescription("The chassis's serial number.")
chPartNum = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPartNum.setStatus('current')
if mibBuilder.loadTexts: chPartNum.setDescription("The chassis manufacturer's part number.")
chProductRev = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductRev.setStatus('current')
if mibBuilder.loadTexts: chProductRev.setDescription("The chassis manufacturer's product revision.")
chVendorId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chVendorId.setStatus('current')
if mibBuilder.loadTexts: chVendorId.setDescription("The chassis manufacturer vendor's id.")
chDateCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 9), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chDateCode.setStatus('current')
if mibBuilder.loadTexts: chDateCode.setDescription('The date the chassis was manufactured. ')
chCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCountryCode.setStatus('current')
if mibBuilder.loadTexts: chCountryCode.setDescription("The chassis manufacturer's country code")
chNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSlots.setStatus('current')
if mibBuilder.loadTexts: chNumSlots.setDescription('The total number of physical slots in the chassis for line cards and route process module (rpm ) cards.')
chNumLinecards = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumLinecards.setStatus('current')
if mibBuilder.loadTexts: chNumLinecards.setDescription('The total number of line cards in the chassis. ')
chNumFanTrays = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumFanTrays.setStatus('current')
if mibBuilder.loadTexts: chNumFanTrays.setDescription('The total number of fan trays on the chassis.')
chNumPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: chNumPowerSupplies.setDescription('The total number of power supply in the chassis.')
chNumSfmSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSfmSlots.setStatus('current')
if mibBuilder.loadTexts: chNumSfmSlots.setDescription('The total number of switch fabric modules (sfm) slots in the chassis.')
chPiecePartID = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPiecePartID.setStatus('current')
if mibBuilder.loadTexts: chPiecePartID.setDescription('The chassis piece part id.')
chPPIDRevision = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPPIDRevision.setStatus('current')
if mibBuilder.loadTexts: chPPIDRevision.setDescription('The chassis PPID revision.')
chServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chServiceTag.setStatus('current')
if mibBuilder.loadTexts: chServiceTag.setDescription('The chassis service tag.')
chExpressServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chExpressServiceCode.setStatus('current')
if mibBuilder.loadTexts: chExpressServiceCode.setDescription('The chassis express service code.')
chSysCardTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1), )
if mibBuilder.loadTexts: chSysCardTable.setStatus('current')
if mibBuilder.loadTexts: chSysCardTable.setDescription('A list of cards resident in the chassis. The card table contains the card information of each slot in the chassis. ')
chSysCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysCardSlotIndex"))
if mibBuilder.loadTexts: chSysCardEntry.setStatus('current')
if mibBuilder.loadTexts: chSysCardEntry.setDescription('A list of cards entries containing information for line card. The placement of line cards and rpm cards in the C300 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 7 8 9 10 ( Dell Force10 card number ) 0 1 2 3 0 1 4 5 6 7 | | | | ---------- ---------- | | | | line card | | line card | | | + ----> RPM card +-------> RPM card The placement of line cards and rpm cards in the C150 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 ( Dell Force10 card number ) 0 1 0 1 2 3 | | | | ---- ---- | | | | line card | | line card | | | + ----> RPM card +-------> RPM card ')
chSysCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysCardSlotIndex.setDescription('A unique index for each slot within the chassis. This value is the physical slot number and the value is determined by the chassis slot location where the card is inserted. Valid entries are 1 to the value of chNumSlots.')
chSysCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 2), F10CSeriesCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardType.setStatus('current')
if mibBuilder.loadTexts: chSysCardType.setDescription('Type of card in this slot. The type of cards are defined in F10CSeriesCardType.')
chSysCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumber.setStatus('current')
if mibBuilder.loadTexts: chSysCardNumber.setDescription('This is the card number assigned to the line cards and the RPM cards in the chassis. The line cards number are from 0 to 6. ')
chSysCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumPorts.setStatus('current')
if mibBuilder.loadTexts: chSysCardNumPorts.setDescription('The number of physical ports in each card. The card can have one or more ports depending on the type of cards. If it is a logical card, the value set to zero. ')
chSysCardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardTemp.setStatus('current')
if mibBuilder.loadTexts: chSysCardTemp.setDescription('The temperature of the card. ')
chSysCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardUpTime.setStatus('current')
if mibBuilder.loadTexts: chSysCardUpTime.setDescription('The SysUpTime for this slot. This variable indicates the time since the card last reset.')
chSysCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysCardAdminStatus.setDescription("The admin status of the card. The valid status are as followed: 'up' - card present and ready. 'down' - card is not ready.")
chSysCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 8), F10CardOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysCardOperStatus.setDescription('The current operational state of the card.')
chSysCardBootFlashA = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardBootFlashA.setStatus('current')
if mibBuilder.loadTexts: chSysCardBootFlashA.setDescription('The software version of the boot flash. The card is booted with this boot image A. ')
chSysCardBootFlashB = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardBootFlashB.setStatus('current')
if mibBuilder.loadTexts: chSysCardBootFlashB.setDescription('The software version of the boot flash. The card is booted with this boot image B. ')
chSysCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chSysCardSerialNumber.setDescription('The serial number of the card in this slot.')
chSysCardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPartNum.setStatus('current')
if mibBuilder.loadTexts: chSysCardPartNum.setDescription('The card part number')
chSysCardProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardProductRev.setStatus('current')
if mibBuilder.loadTexts: chSysCardProductRev.setDescription("The card manufacturer's product revision")
chSysCardVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardVendorId.setStatus('current')
if mibBuilder.loadTexts: chSysCardVendorId.setDescription('The vendor id that manufactured the card in this slot.')
chSysCardDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 15), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardDateCode.setStatus('current')
if mibBuilder.loadTexts: chSysCardDateCode.setDescription('The date the card is manufactured.')
chSysCardCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardCountryCode.setStatus('current')
if mibBuilder.loadTexts: chSysCardCountryCode.setDescription("The card manufacturer's country code")
chSysCardPiecePartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPiecePartID.setStatus('current')
if mibBuilder.loadTexts: chSysCardPiecePartID.setDescription("The card's piece part id.")
chSysCardPPIDRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPPIDRevision.setStatus('current')
if mibBuilder.loadTexts: chSysCardPPIDRevision.setDescription("The card's PPID revision.")
chSysCardServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardServiceTag.setStatus('current')
if mibBuilder.loadTexts: chSysCardServiceTag.setDescription("The card's service tag.")
chSysCardExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardExpressServiceCode.setStatus('current')
if mibBuilder.loadTexts: chSysCardExpressServiceCode.setDescription("The card's express service code.")
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
if mibBuilder.loadTexts: chSysPortTable.setDescription('A list of ports in a slot.')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysPortSlotIndex"), (0, "F10-C-SERIES-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPortEntry.setDescription('A port entry containing objects for a particular slot.')
chSysPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortSlotIndex.setDescription('A unique index for each slot within the chassis. This value is determined by the chassis slot number where the card is inserted. Valid entries are 1 to the value of chNumSlots')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIndex.setDescription('A unique index for each slot within the card. This value is determined by the variable chSysSlotNumPorts. This value can also be determined by the chSysCardType. Valid entries are 1 to the value of number of ports availabled')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 3), F10CSeriesPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
if mibBuilder.loadTexts: chSysPortType.setDescription('The type of port in the card.')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortAdminStatus.setDescription('The admin status of the card. The port admin status is Up if the user has configured it to be up otherwise, the admin status is Down.')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortOperStatus.setDescription("The operational status provides further condition of the card. If the chSysPortAdminStatus is 'up', the valid state is 'ready' - the card is present and ready and the chSysPortAdminStatus status is 'up'. 'portDown' - the port is down or not enabled. 'portProblem' - port hardware problems. 'cardProblem' - not used. Same as cardDown. 'cardDown' - the card is downed. 'notPresent' - the card is not present.")
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIfIndex.setDescription('The index of ifIndex in the Interface Mib. This index can link to the ifEntry to get this interface/port information')
chSysXfpRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 7), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysXfpRecvPower.setStatus('current')
if mibBuilder.loadTexts: chSysXfpRecvPower.setDescription(' The power signal strength (dB) received for interface on 10G linecard. ')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorTable.setDescription('A list of Processors resident in this slot.')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysProcessorSlotIndex"), (0, "F10-C-SERIES-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorEntry.setDescription('A list of Processor entries.')
chSysProcessorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorSlotIndex.setDescription('A unique index for each slot within the chassis. This value is determined by the chassis slot number where the card is inserted. Valid entries are 1 to the value of chNumSlots')
chSysProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorIndex.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorIndex.setDescription('A unique index for each Processor within the card. This value is determined by the variable chSysSlotNumProcessors. the valid entries are 1 to the value of number of processors')
chSysProcessorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 3), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorModule.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorModule.setDescription('The type of module running on the Processor.')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorUpTime.setDescription('The SysUpTime for this Processor.')
chSysProcessorNvramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorNvramSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorNvramSize.setDescription('Total Non-volatile RAM in Kbytes.')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorMemSize.setDescription('The size of the RAM in Mb.')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleTable.setDescription('A list of software version information in a processor.')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysSwSlotIndex"), (0, "F10-C-SERIES-CHASSIS-MIB", "chSysSwProcessorIndex"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleEntry.setDescription('A software module entry containing version number information for a particular processor.')
chSysSwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysSwSlotIndex.setDescription('A unique index for each slot within the chassis. This value is determined by the chassis slot number where the card is inserted. Valid entries are 1 to the value of chNumSlots')
chSysSwProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwProcessorIndex.setStatus('current')
if mibBuilder.loadTexts: chSysSwProcessorIndex.setDescription('A unique index for each CPU within the card. This value is determined by the variable chSysSlotNumCPUs. This value can also be determined by the chSysSlotType. Valid entries are 1 to the value of number of cpu')
chSysSwRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setDescription("This variable indicates the software module version that is currently running on the processor. The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.1' indicate major version of 1 and minor release of 1.")
chSysSwRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 4), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setDescription('The release date of this software module.')
chSysSwCurrentBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setDescription("The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.1' indicate major version of 1 and minor release of 1.")
chSysSwCurrentBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setDescription('The release date of this software module If the CPU is reset, the software module running date (chSysSwModuleRunningDate) will change to this current date.')
chSysSwCurrentBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setDescription('Fill this in later')
chSysSwBackupBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setDescription("The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.1' indicate major version of 1 and minor release of 1.")
chSysSwBackupBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setDescription('The backup boot image released date.')
chSysSwBackupBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setDescription('The status of the backup boot image.')
chSysSwNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwNextRebootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwNextRebootImage.setDescription('The boot flash image selection. When the chassis is rebooted, this is the boot image to use.')
chSysSwCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setDescription('The current boot image. This is the boot image described by the chSysSwCurrentBootImgVersion, chSysSwCurrentBootImgDate, and chSysSwCurrentBootImgStatus objects. ')
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyTable.setDescription('A list of power supply resident in this chassis.')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setDescription('A power supply entry containing objects for a particular power supply.')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setDescription('The unique index of the power supply.')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setDescription('The status of the power supply.')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyType.setDescription('The type of the power supply.')
chSysPowerSupplyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("version1", 2), ("version2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyVersion.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyVersion.setDescription('The type of the power supply.')
chSysPowerSupplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("low", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyMode.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyMode.setDescription('The type of the power supply.')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayTable.setDescription('A list of fan tray resident in this chassis.')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayEntry.setDescription('A fan entry containing objects for a particular fan tray.')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayIndex.setDescription('The unique index of the fan tray.')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setDescription('The status of the fan tray.')
chSysSfmTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7), )
if mibBuilder.loadTexts: chSysSfmTable.setStatus('current')
if mibBuilder.loadTexts: chSysSfmTable.setDescription('A list of Swicth Fabric Module in a slot.')
chSysSfmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysSfmIndex"))
if mibBuilder.loadTexts: chSysSfmEntry.setStatus('current')
if mibBuilder.loadTexts: chSysSfmEntry.setDescription('A SFM entry containing objects for a particular slot.')
chSysSfmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmIndex.setStatus('current')
if mibBuilder.loadTexts: chSysSfmIndex.setDescription('A unique index for each SFM within the chassis. The number of SFM slots can be determined with chNumSfmSlots.')
chSysSfmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSfmAdminStatus.setDescription('The admin status of each SFM.')
chSysSfmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("absent", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSfmOperStatus.setDescription("The Operational status provides further condition of Switch Fabric Module card. If the chSysSfmAdminStatus is 'up', the valid state is 'active' - the card is present and ready and the chSysSfmAdminStatus status is 'up'. If the chSysCardOperStatus is 'down', the service states can be as followed: 'absent' - the card is not present. 'standby' - the card is in standby mode.")
chSysSfmErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("not-available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmErrorStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSfmErrorStatus.setDescription("The Operational status provides further condition of Switch Fabric Module card. If the chSysSfmAdminStatus is 'up', the valid state is 'ok' - the card is present and ready and the chSysSfmAdminStatus status is 'up'. If the chSysSfmAdminStatus is 'down', the error status can be as followed: 'not-available' - status not available. 'error' - the card is in error state.")
chRpmNumRpms = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmNumRpms.setStatus('current')
if mibBuilder.loadTexts: chRpmNumRpms.setDescription('The number of RPM installed in the chassis. There is always one primary RPM, but a secondary RPM can also be installed as backup.')
chRpmSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmSlotNumber.setStatus('current')
if mibBuilder.loadTexts: chRpmSlotNumber.setDescription('The primary routing process module slot number. If the primary RPM is switched to secondary RPM, the slot number will be updated here.')
chRpmUptime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmUptime.setStatus('current')
if mibBuilder.loadTexts: chRpmUptime.setDescription('SysUpTime of the last time the RPM is reset. Used the SysUpTime of the control processor as this variable.')
chRpmLastSwitchDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmLastSwitchDate.setStatus('current')
if mibBuilder.loadTexts: chRpmLastSwitchDate.setDescription('The date and time when the Routing Process Module is switched.')
chRpmMajorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMajorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: chRpmMajorAlarmStatus.setDescription('The Major Alarm LED on the Primary RPM card.')
chRpmMinorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMinorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: chRpmMinorAlarmStatus.setDescription('The Minor Alarm LED on the Primary RPM card.')
chRpmUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7), )
if mibBuilder.loadTexts: chRpmUtilTable.setStatus('current')
if mibBuilder.loadTexts: chRpmUtilTable.setDescription('A table listing the cpu and memory utilization in master RPM.')
chRpmUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chRpmCpuIndex"))
if mibBuilder.loadTexts: chRpmUtilEntry.setStatus('current')
if mibBuilder.loadTexts: chRpmUtilEntry.setDescription('A row in each processor cpu and mmory utilization')
chRpmCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuIndex.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuIndex.setDescription('A unique index for each Processor within the RPM. This value is determined by the variable chSysSlotNumProcessors. the valid entries are 1 to the value of number of processors')
chRpmCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 2), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuType.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuType.setDescription('The type of module running on the Processor.')
chRpmCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuUtil5Sec.setDescription('CPU utilization in percentage for last 5 seconds.')
chRpmCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuUtil1Min.setDescription('CPU utilization in percentage for last 1 minute.')
chRpmCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuUtil5Min.setDescription('CPU utilization in percentage for last 5 minutes.')
chRpmMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMemUsageUtil.setStatus('current')
if mibBuilder.loadTexts: chRpmMemUsageUtil.setDescription("Total RPM's memory usage in percentage.")
chLineCardUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1), )
if mibBuilder.loadTexts: chLineCardUtilTable.setStatus('current')
if mibBuilder.loadTexts: chLineCardUtilTable.setDescription('A table listing the cpu and memory utilization in line cards.')
chLineCardUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysCardNumber"))
if mibBuilder.loadTexts: chLineCardUtilEntry.setStatus('current')
if mibBuilder.loadTexts: chLineCardUtilEntry.setDescription('A row in each line card cpu and memory utilization')
chLineCardCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chLineCardCpuUtil5Sec.setDescription('CPU utilization in percentage for last 5 seconds.')
chLineCardCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chLineCardCpuUtil1Min.setDescription('CPU utilization in percentage for last 1 minute.')
chLineCardCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chLineCardCpuUtil5Min.setDescription('CPU utilization in percentage for last 5 minutes.')
chLineCardMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardMemUsageUtil.setStatus('current')
if mibBuilder.loadTexts: chLineCardMemUsageUtil.setDescription('Memory usage in percentage.')
f10CSerChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2))
f10CSerChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 1))
f10CSerChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2))
f10CSerChassisMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 1, 1)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "f10CSerComponentGroup"), ("F10-C-SERIES-CHASSIS-MIB", "f10CSerSystemGroup"), ("F10-C-SERIES-CHASSIS-MIB", "f10CSerRpmGroup"), ("F10-C-SERIES-CHASSIS-MIB", "f10CSerLineCardGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerChassisMibCompliance = f10CSerChassisMibCompliance.setStatus('current')
if mibBuilder.loadTexts: f10CSerChassisMibCompliance.setDescription('The compliance statement for Dell Force10 product which implement the C-Series Chassis MIB.')
f10CSerComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 1)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chType"), ("F10-C-SERIES-CHASSIS-MIB", "chChassisMode"), ("F10-C-SERIES-CHASSIS-MIB", "chSwVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chMacAddr"), ("F10-C-SERIES-CHASSIS-MIB", "chSerialNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chPartNum"), ("F10-C-SERIES-CHASSIS-MIB", "chProductRev"), ("F10-C-SERIES-CHASSIS-MIB", "chVendorId"), ("F10-C-SERIES-CHASSIS-MIB", "chDateCode"), ("F10-C-SERIES-CHASSIS-MIB", "chCountryCode"), ("F10-C-SERIES-CHASSIS-MIB", "chPiecePartID"), ("F10-C-SERIES-CHASSIS-MIB", "chPPIDRevision"), ("F10-C-SERIES-CHASSIS-MIB", "chServiceTag"), ("F10-C-SERIES-CHASSIS-MIB", "chExpressServiceCode"), ("F10-C-SERIES-CHASSIS-MIB", "chNumSlots"), ("F10-C-SERIES-CHASSIS-MIB", "chNumLinecards"), ("F10-C-SERIES-CHASSIS-MIB", "chNumFanTrays"), ("F10-C-SERIES-CHASSIS-MIB", "chNumPowerSupplies"), ("F10-C-SERIES-CHASSIS-MIB", "chNumSfmSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerComponentGroup = f10CSerComponentGroup.setStatus('current')
if mibBuilder.loadTexts: f10CSerComponentGroup.setDescription('A collection of objects providing the overall chassis information.')
f10CSerSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 2)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chSysCardType"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardNumPorts"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardTemp"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardUpTime"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardAdminStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardBootFlashA"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardBootFlashB"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardSerialNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardPartNum"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardProductRev"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardVendorId"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardDateCode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardCountryCode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardPiecePartID"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardPPIDRevision"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardServiceTag"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardExpressServiceCode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortType"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-C-SERIES-CHASSIS-MIB", "chSysXfpRecvPower"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorModule"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorNvramSize"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgDate"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgDate"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgDate"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwNextRebootImage"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImage"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyType"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyMode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSfmAdminStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSfmOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSfmErrorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerSystemGroup = f10CSerSystemGroup.setStatus('current')
if mibBuilder.loadTexts: f10CSerSystemGroup.setDescription('A collection of objects providing the chassis system hardware information.')
f10CSerRpmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 3)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chRpmNumRpms"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmSlotNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmUptime"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmLastSwitchDate"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmMajorAlarmStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmMinorAlarmStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuType"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuUtil5Sec"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuUtil1Min"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuUtil5Min"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerRpmGroup = f10CSerRpmGroup.setStatus('current')
if mibBuilder.loadTexts: f10CSerRpmGroup.setDescription('A collection of objects providing the Route Process Module (RPM) information.')
f10CSerLineCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 4)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chLineCardCpuUtil5Sec"), ("F10-C-SERIES-CHASSIS-MIB", "chLineCardCpuUtil1Min"), ("F10-C-SERIES-CHASSIS-MIB", "chLineCardCpuUtil5Min"), ("F10-C-SERIES-CHASSIS-MIB", "chLineCardMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerLineCardGroup = f10CSerLineCardGroup.setStatus('current')
if mibBuilder.loadTexts: f10CSerLineCardGroup.setDescription('A collection of objects providing CPU and Memory Utilization in the Line cards.')
mibBuilder.exportSymbols("F10-C-SERIES-CHASSIS-MIB", chSysCardProductRev=chSysCardProductRev, chSysSwCurrentBootImgVersion=chSysSwCurrentBootImgVersion, chPPIDRevision=chPPIDRevision, chSysSwNextRebootImage=chSysSwNextRebootImage, chSysSfmErrorStatus=chSysSfmErrorStatus, chSysPortSlotIndex=chSysPortSlotIndex, chNumLinecards=chNumLinecards, chSysProcessorTable=chSysProcessorTable, chRpmCpuUtil5Sec=chRpmCpuUtil5Sec, chDateCode=chDateCode, chRpmMinorAlarmStatus=chRpmMinorAlarmStatus, chSysProcessorNvramSize=chSysProcessorNvramSize, chSysSwBackupBootImgVersion=chSysSwBackupBootImgVersion, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, chMacAddr=chMacAddr, chSysProcessorSlotIndex=chSysProcessorSlotIndex, chProductRev=chProductRev, chSysCardPartNum=chSysCardPartNum, chSysSfmOperStatus=chSysSfmOperStatus, chSwVersion=chSwVersion, f10CSerComponentGroup=f10CSerComponentGroup, chSysPortAdminStatus=chSysPortAdminStatus, chPartNum=chPartNum, chChassisMode=chChassisMode, chNumFanTrays=chNumFanTrays, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chSysCardBootFlashB=chSysCardBootFlashB, chSysPortEntry=chSysPortEntry, f10CSerChassisMibGroups=f10CSerChassisMibGroups, chNumSlots=chNumSlots, chSysPowerSupplyTable=chSysPowerSupplyTable, chSysProcessorEntry=chSysProcessorEntry, chPiecePartID=chPiecePartID, chObjects=chObjects, chSysSwCurrentBootImgDate=chSysSwCurrentBootImgDate, chLineCardObjects=chLineCardObjects, chSysSwModuleEntry=chSysSwModuleEntry, chRpmUptime=chRpmUptime, chSysSfmEntry=chSysSfmEntry, chSysSfmAdminStatus=chSysSfmAdminStatus, chRpmNumRpms=chRpmNumRpms, chCountryCode=chCountryCode, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chServiceTag=chServiceTag, chSysCardCountryCode=chSysCardCountryCode, chSysPortType=chSysPortType, chSysPortTable=chSysPortTable, f10CSerChassisMibCompliances=f10CSerChassisMibCompliances, chRpmLastSwitchDate=chRpmLastSwitchDate, chSysPowerSupplyType=chSysPowerSupplyType, chSysSwRuntimeImgDate=chSysSwRuntimeImgDate, chSysSwBackupBootImgDate=chSysSwBackupBootImgDate, chSysCardTemp=chSysCardTemp, chRpmUtilEntry=chRpmUtilEntry, chAlarmObjects=chAlarmObjects, chSysFanTrayIndex=chSysFanTrayIndex, chSysFanTrayEntry=chSysFanTrayEntry, chSysCardTable=chSysCardTable, chSysSwRuntimeImgVersion=chSysSwRuntimeImgVersion, chRpmCpuIndex=chRpmCpuIndex, chSysSwCurrentBootImgStatus=chSysSwCurrentBootImgStatus, chLineCardCpuUtil5Sec=chLineCardCpuUtil5Sec, chSysCardUpTime=chSysCardUpTime, chSysCardSlotIndex=chSysCardSlotIndex, chSysPortOperStatus=chSysPortOperStatus, chSysPortIndex=chSysPortIndex, chExpressServiceCode=chExpressServiceCode, chLineCardCpuUtil5Min=chLineCardCpuUtil5Min, chSysProcessorModule=chSysProcessorModule, chNumPowerSupplies=chNumPowerSupplies, chSysCardType=chSysCardType, chLineCardUtilTable=chLineCardUtilTable, chSysSwProcessorIndex=chSysSwProcessorIndex, chSysCardServiceTag=chSysCardServiceTag, chRpmUtilTable=chRpmUtilTable, chLineCardUtilEntry=chLineCardUtilEntry, f10CSerRpmGroup=f10CSerRpmGroup, chType=chType, chSysSwCurrentBootImage=chSysSwCurrentBootImage, chSysProcessorMemSize=chSysProcessorMemSize, chSerialNumber=chSerialNumber, chNumSfmSlots=chNumSfmSlots, PYSNMP_MODULE_ID=f10CSerChassisMib, chSysCardNumPorts=chSysCardNumPorts, chRpmMajorAlarmStatus=chRpmMajorAlarmStatus, chVendorId=chVendorId, chRpmSlotNumber=chRpmSlotNumber, chLineCardMemUsageUtil=chLineCardMemUsageUtil, chSysCardPPIDRevision=chSysCardPPIDRevision, chSysSfmTable=chSysSfmTable, chSysCardEntry=chSysCardEntry, chSysCardAdminStatus=chSysCardAdminStatus, chSysPortIfIndex=chSysPortIfIndex, chSysObjects=chSysObjects, chSysPowerSupplyVersion=chSysPowerSupplyVersion, chRpmMemUsageUtil=chRpmMemUsageUtil, f10CSerSystemGroup=f10CSerSystemGroup, chSysSwModuleTable=chSysSwModuleTable, chSysCardPiecePartID=chSysCardPiecePartID, chSysPowerSupplyEntry=chSysPowerSupplyEntry, f10CSerChassisObject=f10CSerChassisObject, chSysXfpRecvPower=chSysXfpRecvPower, chSysCardNumber=chSysCardNumber, chRpmCpuType=chRpmCpuType, chSysCardVendorId=chSysCardVendorId, chRpmCpuUtil5Min=chRpmCpuUtil5Min, chLineCardCpuUtil1Min=chLineCardCpuUtil1Min, chSysSwSlotIndex=chSysSwSlotIndex, chSysCardDateCode=chSysCardDateCode, chSysCardExpressServiceCode=chSysCardExpressServiceCode, chSysFanTrayTable=chSysFanTrayTable, chRpmObjects=chRpmObjects, f10CSerLineCardGroup=f10CSerLineCardGroup, chSysProcessorIndex=chSysProcessorIndex, chSysProcessorUpTime=chSysProcessorUpTime, f10CSerChassisMibCompliance=f10CSerChassisMibCompliance, f10CSerChassisMib=f10CSerChassisMib, chSysCardSerialNumber=chSysCardSerialNumber, chSysSfmIndex=chSysSfmIndex, chRpmCpuUtil1Min=chRpmCpuUtil1Min, f10CSerChassisMibConformance=f10CSerChassisMibConformance, chSysSwBackupBootImgStatus=chSysSwBackupBootImgStatus, chSysPowerSupplyMode=chSysPowerSupplyMode, chSysCardBootFlashA=chSysCardBootFlashA, chSysCardOperStatus=chSysCardOperStatus)
