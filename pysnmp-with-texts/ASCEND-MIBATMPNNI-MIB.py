#
# PySNMP MIB module ASCEND-MIBATMPNNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBATMPNNI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, TimeTicks, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, NotificationType, ModuleIdentity, Counter32, Counter64, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "TimeTicks", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "NotificationType", "ModuleIdentity", "Counter32", "Counter64", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibpnniSummaryAddrEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 44))
mibpnniRouteTnsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 50))
mibpnniNodeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 43))
mibpnniDTLConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 48))
mibpnniIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 45))
mibpnniRouteNodeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 47))
mibpnniRouteAddrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 49))
mibpnniMetricsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 46))
mibpnniSummaryAddrEntryTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 44, 1), )
if mibBuilder.loadTexts: mibpnniSummaryAddrEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniSummaryAddrEntryTable.setDescription('A list of mibpnniSummaryAddrEntry profile entries.')
mibpnniSummaryAddrEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniSummaryAddrEntry-IndexName"))
if mibBuilder.loadTexts: mibpnniSummaryAddrEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniSummaryAddrEntryEntry.setDescription('A mibpnniSummaryAddrEntry entry containing objects that maps to the parameters of mibpnniSummaryAddrEntry profile.')
pnniSummaryAddrEntry_IndexName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 1), DisplayString()).setLabel("pnniSummaryAddrEntry-IndexName").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_IndexName.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_IndexName.setDescription('The name of this profile which is corresponding to the value of the summary-addr-index.')
pnniSummaryAddrEntry_AddrIndex_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 2), Integer32()).setLabel("pnniSummaryAddrEntry-AddrIndex-NodeIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_NodeIndex.setDescription('The node index. ')
pnniSummaryAddrEntry_AddrIndex_Type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("internalSummary", 2), ("externalSummary", 3)))).setLabel("pnniSummaryAddrEntry-AddrIndex-Type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_Type.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_Type.setDescription('The type (e.g. internal or exterior) of summary being described.')
pnniSummaryAddrEntry_AddrIndex_Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 4), DisplayString()).setLabel("pnniSummaryAddrEntry-AddrIndex-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_Address.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_Address.setDescription('The ATM End System Address prefix for the summary.')
pnniSummaryAddrEntry_AddrIndex_PrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 5), Integer32()).setLabel("pnniSummaryAddrEntry-AddrIndex-PrefixLen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_PrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_AddrIndex_PrefixLen.setDescription('The prefix length for the summary.')
pnniSummaryAddrEntry_Suppress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniSummaryAddrEntry-Suppress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_Suppress.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_Suppress.setDescription("Determines what is done with addresses that are being summarized by the instance. The default value (e.g. false) will indicate that the summary should propagate into the peer group. Network Management will be able to set the value of this attribute to `suppress' (e.g. true), which suppresses the summary and any reachable addresses it summarizes from being advertised into the peer group.")
pnniSummaryAddrEntry_State = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("advertising", 2), ("suppressing", 3), ("inactive", 4)))).setLabel("pnniSummaryAddrEntry-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_State.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_State.setDescription('Indicates whether the summary is currently being advertised by the node within the local switching system into its peer group.')
pnniSummaryAddrEntry_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("pnniSummaryAddrEntry-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_Active.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_Active.setDescription('The state of this summary address entry.')
pnniSummaryAddrEntry_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 44, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniSummaryAddrEntry-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSummaryAddrEntry_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniSummaryAddrEntry_Action_o.setDescription('')
mibpnniRouteTnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 50, 1), )
if mibBuilder.loadTexts: mibpnniRouteTnsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniRouteTnsConfigTable.setDescription('A list of mibpnniRouteTnsConfig profile entries.')
mibpnniRouteTnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteTnsConfig-TnsIndex-NodeIndex"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteTnsConfig-TnsIndex-RouteTnsType"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteTnsConfig-TnsIndex-RouteTnsPlan"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteTnsConfig-TnsIndex-RouteTnsId"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteTnsConfig-TnsIndex-RouteTnsIndex"))
if mibBuilder.loadTexts: mibpnniRouteTnsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniRouteTnsConfigEntry.setDescription('A mibpnniRouteTnsConfig entry containing objects that maps to the parameters of mibpnniRouteTnsConfig profile.')
pnniRouteTnsConfig_TnsIndex_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 1), Integer32()).setLabel("pnniRouteTnsConfig-TnsIndex-NodeIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_NodeIndex.setDescription('Index that identifies a logical PNNI node.')
pnniRouteTnsConfig_TnsIndex_RouteTnsType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 2), Integer32()).setLabel("pnniRouteTnsConfig-TnsIndex-RouteTnsType").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsType.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsType.setDescription('The type of network identification used for this transit network.')
pnniRouteTnsConfig_TnsIndex_RouteTnsPlan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 3), Integer32()).setLabel("pnniRouteTnsConfig-TnsIndex-RouteTnsPlan").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsPlan.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsPlan.setDescription('The network identification plan according to which network id has been assigned.')
pnniRouteTnsConfig_TnsIndex_RouteTnsId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 4), DisplayString()).setLabel("pnniRouteTnsConfig-TnsIndex-RouteTnsId").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsId.setDescription('The value of the transit network identifier.')
pnniRouteTnsConfig_TnsIndex_RouteTnsIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 5), Integer32()).setLabel("pnniRouteTnsConfig-TnsIndex-RouteTnsIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIndex_RouteTnsIndex.setDescription('An index into the set of listings of connectivity to a given transit network from a given local node.')
pnniRouteTnsConfig_TnsIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 6), Integer32()).setLabel("pnniRouteTnsConfig-TnsIfIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsIfIndex.setDescription('The local interface over which the transit network can be reached.')
pnniRouteTnsConfig_TnsAdvertisingNodeId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 7), DisplayString()).setLabel("pnniRouteTnsConfig-TnsAdvertisingNodeId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsAdvertisingNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsAdvertisingNodeId.setDescription('The node ID of a node advertising reachability to the transit network.')
pnniRouteTnsConfig_TnsAdvertisedPortId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 8), Integer32()).setLabel("pnniRouteTnsConfig-TnsAdvertisedPortId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsAdvertisedPortId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsAdvertisedPortId.setDescription('The port identifier used from the advertising node to reach the given transit network.')
pnniRouteTnsConfig_TnsRouteType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("other", 2), ("exterior", 5)))).setLabel("pnniRouteTnsConfig-TnsRouteType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsRouteType.setDescription('The type (e.g. exterior or other) of reachability from the advertising node to the transit network.')
pnniRouteTnsConfig_TnsPnniScope = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 10), Integer32()).setLabel("pnniRouteTnsConfig-TnsPnniScope").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsPnniScope.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsPnniScope.setDescription('The PNNI scope of advertisement (i.e. level of PNNI hierarchy) of the reachability from the advertising node to the transit network.')
pnniRouteTnsConfig_TnsVpCapability = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniRouteTnsConfig-TnsVpCapability").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsVpCapability.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsVpCapability.setDescription('Indicates whether VPCs can be established from the advertising node to the reachable transit network.')
pnniRouteTnsConfig_TnsMetricsTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 12), Integer32()).setLabel("pnniRouteTnsConfig-TnsMetricsTag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsMetricsTag.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsMetricsTag.setDescription('The index into the pnniMetricsTable for the traffic parameter values that apply for the connectivity from the advertising node to the transit network.')
pnniRouteTnsConfig_TnsOriginateAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniRouteTnsConfig-TnsOriginateAdvertisement").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsOriginateAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_TnsOriginateAdvertisement.setDescription('Whether or not the transit network specified by this entry is to be advertised by the local node into its PNNI routing domain.')
pnniRouteTnsConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("pnniRouteTnsConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_Active.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_Active.setDescription('The current state of this route TNS entry.')
pnniRouteTnsConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 50, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniRouteTnsConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteTnsConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteTnsConfig_Action_o.setDescription('')
mibpnniNodeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 43, 1), )
if mibBuilder.loadTexts: mibpnniNodeConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniNodeConfigTable.setDescription('A list of mibpnniNodeConfig profile entries.')
mibpnniNodeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniNodeConfig-NodeIndex"))
if mibBuilder.loadTexts: mibpnniNodeConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniNodeConfigEntry.setDescription('A mibpnniNodeConfig entry containing objects that maps to the parameters of mibpnniNodeConfig profile.')
pnniNodeConfig_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 1), Integer32()).setLabel("pnniNodeConfig-NodeIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeConfig_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeIndex.setDescription('A value assigned to a node in this switching system that uniquely identifies it in the MIB.')
pnniNodeConfig_NodeLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 2), Integer32()).setLabel("pnniNodeConfig-NodeLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeLevel.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeLevel.setDescription('The level of PNNI hierarchy at which this node exists. This attribute is used to determine the default node ID and the default peer group ID for this node. This object may only be written when pnniNodeAdminStatus has the value down.')
pnniNodeConfig_NodeId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 3), DisplayString()).setLabel("pnniNodeConfig-NodeId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeId.setDescription('The value the switching system is using to represent itself as this node. If all the bytes of node-id are zero AND all the bytes of the node-peer-group-id are zero, then the value used for the node-id is derived from the node-level and node-atm-address. The derived value is that specified in the pnniNodeId object of the pnniNodeTable in the ATM Forum PNNI MIB.')
pnniNodeConfig_CurrNodeId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 4), DisplayString()).setLabel("pnniNodeConfig-CurrNodeId").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeConfig_CurrNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_CurrNodeId.setDescription('The derived node-id value the switching system is using to represent itself as this node. This value is the value derived from the node-level and the node-atm-address.')
pnniNodeConfig_NodeLowest = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniNodeConfig-NodeLowest").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeLowest.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeLowest.setDescription('Indicates whether this node acts as a lowest level node or whether this node is a logical group node that becomes active when one of the other nodes in this switching system becomes a peer group leader.')
pnniNodeConfig_NodeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setLabel("pnniNodeConfig-NodeAdminStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeAdminStatus.setDescription('Indicates whether the administrative status of the node is up (the node is allowed to become active) or down (the node is forced to be inactive).')
pnniNodeConfig_NodeDomainName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 7), DisplayString()).setLabel("pnniNodeConfig-NodeDomainName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeDomainName.setDescription('The name of the PNNI routing domain in which this node participates. All lowest-level PNNI nodes with the same pnniNodeDomainName are presumed to be connected.')
pnniNodeConfig_NodeAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 8), DisplayString()).setLabel("pnniNodeConfig-NodeAtmAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeAtmAddress.setDescription("This node's ATM End System Address. Remote systems wishing to exchange PNNI protocol packets with this node should direct packets or calls to this address.")
pnniNodeConfig_NodePeerGroupId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 9), DisplayString()).setLabel("pnniNodeConfig-NodePeerGroupId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodePeerGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodePeerGroupId.setDescription('The Peer Group Identifier of the peer group that the given node is to become a member of. If all the bytes of node-peer-group-id are zero AND all the bytes of the node-id are zero, then the value used for the node-peer-group-id is derived from the node-level and node-atm-address. The derived value is that specified in the pnniNodePeerGroupId object of the pnniNodeTable in the ATM Forum PNNI MIB.')
pnniNodeConfig_CurrNodePeerGroupId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 10), DisplayString()).setLabel("pnniNodeConfig-CurrNodePeerGroupId").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeConfig_CurrNodePeerGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_CurrNodePeerGroupId.setDescription('The derived value of the Peer Group Identifier of the peer group that the given node is to become a member of. The derived value is that specified in the pnniNodePeerGroupId object of the pnniNodeTable in the ATM Forum PNNI MIB.')
pnniNodeConfig_NodeRestrictedTransit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniNodeConfig-NodeRestrictedTransit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeRestrictedTransit.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeRestrictedTransit.setDescription('Specifies whether the node is restricted to not allowing support of SVCs transiting this node. This attribute determines the setting of the restricted transit bit in the nodal information group originated by this node.')
pnniNodeConfig_NodeComplexRep = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniNodeConfig-NodeComplexRep").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeComplexRep.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeComplexRep.setDescription("Specifies whether this node uses the complex node representation. A value of `true' indicates that the complex node representation is used, whereas a value of `false' indicates that the simple node representation is used.")
pnniNodeConfig_NodePgl_LeadershipPriority = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 13), Integer32()).setLabel("pnniNodeConfig-NodePgl-LeadershipPriority").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_LeadershipPriority.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_LeadershipPriority.setDescription('The Leadership priority value this node should advertise in its nodal information group for the given peer group. Only the value zero can be used with nodes that are not PGL/LGN capable. As we cannot be a Peer Group Leader in this release, this value is always zero.')
pnniNodeConfig_NodePgl_ParentNodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 14), Integer32()).setLabel("pnniNodeConfig-NodePgl-ParentNodeIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_ParentNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_ParentNodeIndex.setDescription('The local node index used to identify the node that will represent this peer group at the next higher level of hierarchy, if this node becomes peer group leader. The value 0 indicates that there is no parent node.')
pnniNodeConfig_NodePgl_InitTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 15), Integer32()).setLabel("pnniNodeConfig-NodePgl-InitTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_InitTime.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_InitTime.setDescription('The amount of time in seconds this node will delay advertising its choice of preferred PGL after having initialized operation and reached the full state with at least one neighbor in the peer group.')
pnniNodeConfig_NodePgl_OverrideDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 16), Integer32()).setLabel("pnniNodeConfig-NodePgl-OverrideDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_OverrideDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_OverrideDelay.setDescription('The amount of time in seconds a node will wait for itself to be declared the preferred PGL by unanimous agreement among its peers. In the absence of unanimous agreement this will be the amount of time that will pass before this node considers a two thirds majority as sufficient agreement to declare itself peer group leader, abandoning the attempt to get unanimous agreement.')
pnniNodeConfig_NodePgl_ReelectTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 17), Integer32()).setLabel("pnniNodeConfig-NodePgl-ReelectTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_ReelectTime.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodePgl_ReelectTime.setDescription('The amount of time in seconds after losing connectivity to the current peer group leader, that this node will wait before re-starting the process of electing a new peer group leader.')
pnniNodeConfig_NodeTimer_PtseHolddown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 18), Integer32()).setLabel("pnniNodeConfig-NodeTimer-PtseHolddown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PtseHolddown.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PtseHolddown.setDescription('The initial value for the PTSE hold down timer that will be used by the given node to limit the rate at which it can re-originate PTSEs. It must be a positive non-zero number.')
pnniNodeConfig_NodeTimer_HelloHolddown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 19), Integer32()).setLabel("pnniNodeConfig-NodeTimer-HelloHolddown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HelloHolddown.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HelloHolddown.setDescription('The initial value for the Hello hold down timer that will be used by the given node to limit the rate at which it sends Hellos. It must be a positive non-zero number.')
pnniNodeConfig_NodeTimer_HelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 20), Integer32()).setLabel("pnniNodeConfig-NodeTimer-HelloInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HelloInterval.setDescription('The initial value for the Hello Timer. In the absence of triggered Hellos, this node will send one Hello packet on each of its ports on this interval.')
pnniNodeConfig_NodeTimer_HelloInactivityFactor = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 21), Integer32()).setLabel("pnniNodeConfig-NodeTimer-HelloInactivityFactor").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HelloInactivityFactor.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HelloInactivityFactor.setDescription('The value for the Hello Inactivity factor that this node will use to determine when a neighbor has gone down.')
pnniNodeConfig_NodeTimer_HlinkInact = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 22), Integer32()).setLabel("pnniNodeConfig-NodeTimer-HlinkInact").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HlinkInact.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_HlinkInact.setDescription('The amount of time a node will continue to advertise a horizontal (logical) link for which it has not received and processed a LGN Horizontal Link information group.')
pnniNodeConfig_NodeTimer_PtseRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 23), Integer32()).setLabel("pnniNodeConfig-NodeTimer-PtseRefreshInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PtseRefreshInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PtseRefreshInterval.setDescription('The initial value for the Refresh timer that this node will use to drive (re-)origination of PTSEs in the absence of triggered updates.')
pnniNodeConfig_NodeTimer_PtseLifetimeFactor = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 24), Integer32()).setLabel("pnniNodeConfig-NodeTimer-PtseLifetimeFactor").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PtseLifetimeFactor.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PtseLifetimeFactor.setDescription('The value for the lifetime multiplier, expressed as a percentage. The result of multiplying the pnniNodePtseRefreshInterval attribute value by this attribute value is used as the initial lifetime that this node places into self-originated PTSEs.')
pnniNodeConfig_NodeTimer_RxmtInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 25), Integer32()).setLabel("pnniNodeConfig-NodeTimer-RxmtInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_RxmtInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_RxmtInterval.setDescription('The period between retransmissions of unacknowledged Database Summary packets, PTSE Request packets, and PTSPs.')
pnniNodeConfig_NodeTimer_PeerDelayedAckInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 26), Integer32()).setLabel("pnniNodeConfig-NodeTimer-PeerDelayedAckInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PeerDelayedAckInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_PeerDelayedAckInterval.setDescription('The minimum amount of time between transmissions of delayed PTSE acknowledgement packets.')
pnniNodeConfig_NodeTimer_AvcrPm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 27), Integer32()).setLabel("pnniNodeConfig-NodeTimer-AvcrPm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_AvcrPm.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_AvcrPm.setDescription('The proportional multiplier used in the algorithms that determine significant change for AvCR parameters, expressed as a percentage.')
pnniNodeConfig_NodeTimer_AvcrMt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 28), Integer32()).setLabel("pnniNodeConfig-NodeTimer-AvcrMt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_AvcrMt.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_AvcrMt.setDescription('The minimum threshold used in the algorithms that determine signif- icant change for AvCR parameters, expressed as a percentage.')
pnniNodeConfig_NodeTimer_CdvPm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 29), Integer32()).setLabel("pnniNodeConfig-NodeTimer-CdvPm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_CdvPm.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_CdvPm.setDescription('The proportional multiplier used in the algorithms that determine significant change for CDV metrics, expressed as a percentage.')
pnniNodeConfig_NodeTimer_CtdPm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 30), Integer32()).setLabel("pnniNodeConfig-NodeTimer-CtdPm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_CtdPm.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeTimer_CtdPm.setDescription('The proportional multiplier used in the algorithms that determine significant change for CTD metrics, expressed as a percentage.')
pnniNodeConfig_NodeSvccRcc_InitTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 31), Integer32()).setLabel("pnniNodeConfig-NodeSvccRcc-InitTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_InitTime.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_InitTime.setDescription('The amount of time this node will delay initiating establishment of an SVCC to a neighbor with a numerically lower ATM address, after determining that such an SVCC should be established.')
pnniNodeConfig_NodeSvccRcc_RetryTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 32), Integer32()).setLabel("pnniNodeConfig-NodeSvccRcc-RetryTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_RetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_RetryTime.setDescription('The amount of time this node will delay after an apparently still necessary and viable SVCC-based RCC is unexpectedly torn down, before attempting to re-establish it.')
pnniNodeConfig_NodeSvccRcc_CallingIntegrityTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 33), Integer32()).setLabel("pnniNodeConfig-NodeSvccRcc-CallingIntegrityTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_CallingIntegrityTime.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_CallingIntegrityTime.setDescription('The amount of time this node will wait for an SVCC, which it has initiated establishment of as the calling party, to become fully established before giving up and tearing it down.')
pnniNodeConfig_NodeSvccRcc_CalledIntegrityTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 34), Integer32()).setLabel("pnniNodeConfig-NodeSvccRcc-CalledIntegrityTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_CalledIntegrityTime.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_CalledIntegrityTime.setDescription('The amount of time this node will wait for an SVCC, which it has decided to accept as the called party, to become fully established before giving up and tearing it down.')
pnniNodeConfig_NodeSvccRcc_TrafficDescrIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 35), Integer32()).setLabel("pnniNodeConfig-NodeSvccRcc-TrafficDescrIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_TrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeSvccRcc_TrafficDescrIndex.setDescription('An index into the atmTrafficDescrParamTable defined in RFC 1695. This traffic descriptor is used when establishing switched virtual channels for use as SVCC-based RCCs to/from PNNI logical group nodes.')
pnniNodeConfig_NodeScopeMapping_LocalNet = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 36), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-LocalNet").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_LocalNet.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_LocalNet.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value localNetwork(1).')
pnniNodeConfig_NodeScopeMapping_LocalNetPlus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 37), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-LocalNetPlus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_LocalNetPlus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_LocalNetPlus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope localNetworkPlusOne(2).')
pnniNodeConfig_NodeScopeMapping_LocalNetPlus2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 38), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-LocalNetPlus2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_LocalNetPlus2.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_LocalNetPlus2.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope localNetworkPlusTwo(3).')
pnniNodeConfig_NodeScopeMapping_SiteMinus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 39), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-SiteMinus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_SiteMinus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_SiteMinus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value siteMinusOne(4).')
pnniNodeConfig_NodeScopeMapping_IntraSite = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 40), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-IntraSite").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_IntraSite.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_IntraSite.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value intraSite(5).')
pnniNodeConfig_NodeScopeMapping_SitePlus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 41), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-SitePlus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_SitePlus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_SitePlus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value sitePlusOne(6).')
pnniNodeConfig_NodeScopeMapping_OrganizationMinus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 42), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-OrganizationMinus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_OrganizationMinus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_OrganizationMinus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value organizationMinusOne(7).')
pnniNodeConfig_NodeScopeMapping_IntraOrganization = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 43), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-IntraOrganization").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_IntraOrganization.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_IntraOrganization.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value intraOrganization(8).')
pnniNodeConfig_NodeScopeMapping_OrganizationPlus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 44), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-OrganizationPlus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_OrganizationPlus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_OrganizationPlus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value organizationPlusOne(9).')
pnniNodeConfig_NodeScopeMapping_CommunityMinus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 45), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-CommunityMinus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_CommunityMinus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_CommunityMinus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value communityMinusOne(10).')
pnniNodeConfig_NodeScopeMapping_IntraCommunity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 46), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-IntraCommunity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_IntraCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_IntraCommunity.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value intraCommunity(11).')
pnniNodeConfig_NodeScopeMapping_CommunityPlus1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 47), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-CommunityPlus1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_CommunityPlus1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_CommunityPlus1.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value communityPlusOne(12).')
pnniNodeConfig_NodeScopeMapping_Regional = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 48), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-Regional").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_Regional.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_Regional.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value regional(13).')
pnniNodeConfig_NodeScopeMapping_InterRegional = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 49), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-InterRegional").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_InterRegional.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_InterRegional.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value interRegional(14).')
pnniNodeConfig_NodeScopeMapping_Global = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 50), Integer32()).setLabel("pnniNodeConfig-NodeScopeMapping-Global").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_Global.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_NodeScopeMapping_Global.setDescription('The highest level of PNNI hierarchy (i.e. smallest PNNI routing level) that lies within the organizational scope value global(15).')
pnniNodeConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 43, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniNodeConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeConfig_Action_o.setDescription('')
mibpnniDTLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 48, 1), )
if mibBuilder.loadTexts: mibpnniDTLConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniDTLConfigTable.setDescription('A list of mibpnniDTLConfig profile entries.')
mibpnniDTLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniDTLConfig-DtlIndex-NodeIndex"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniDTLConfig-DtlIndex-DtlIndex"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniDTLConfig-DtlIndex-DtlEntryIndex"))
if mibBuilder.loadTexts: mibpnniDTLConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniDTLConfigEntry.setDescription('A mibpnniDTLConfig entry containing objects that maps to the parameters of mibpnniDTLConfig profile.')
pnniDTLConfig_DtlIndex_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 1), Integer32()).setLabel("pnniDTLConfig-DtlIndex-NodeIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniDTLConfig_DtlIndex_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_DtlIndex_NodeIndex.setDescription('Index that identifies a logical PNNI node.')
pnniDTLConfig_DtlIndex_DtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 2), Integer32()).setLabel("pnniDTLConfig-DtlIndex-DtlIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniDTLConfig_DtlIndex_DtlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_DtlIndex_DtlIndex.setDescription("The index in the node's DTL table of this DTL stack.")
pnniDTLConfig_DtlIndex_DtlEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 3), Integer32()).setLabel("pnniDTLConfig-DtlIndex-DtlEntryIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniDTLConfig_DtlIndex_DtlEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_DtlIndex_DtlEntryIndex.setDescription('The index in the current DTL stack of this entry.')
pnniDTLConfig_DtlNodeId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 4), DisplayString()).setLabel("pnniDTLConfig-DtlNodeId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDTLConfig_DtlNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_DtlNodeId.setDescription('The node which is this hop in the DTL stack.')
pnniDTLConfig_DtlPortId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 5), Integer32()).setLabel("pnniDTLConfig-DtlPortId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDTLConfig_DtlPortId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_DtlPortId.setDescription('The port from the pnniDTLNodeId to use as the exit.If the DTL stack does not care, this is coded as zero.')
pnniDTLConfig_DtlLinkType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 2), ("horizontal", 3), ("uplink", 4), ("last", 5)))).setLabel("pnniDTLConfig-DtlLinkType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDTLConfig_DtlLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_DtlLinkType.setDescription('The type of link out from this node (pnniDTLNodeId).This is well defined even if the specific port is not specified.')
pnniDTLConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("pnniDTLConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDTLConfig_Active.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_Active.setDescription('The current state of this DTL entry.')
pnniDTLConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 48, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniDTLConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDTLConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniDTLConfig_Action_o.setDescription('')
mibpnniIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 45, 1), )
if mibBuilder.loadTexts: mibpnniIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniIfConfigTable.setDescription('A list of mibpnniIfConfig profile entries.')
mibpnniIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniIfConfig-Shelf-o"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniIfConfig-Slot-o"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniIfConfig-Item-o"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniIfConfig-LogicalItem-o"))
if mibBuilder.loadTexts: mibpnniIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniIfConfigEntry.setDescription('A mibpnniIfConfig entry containing objects that maps to the parameters of mibpnniIfConfig profile.')
pnniIfConfig_Shelf_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 1), Integer32()).setLabel("pnniIfConfig-Shelf-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniIfConfig_Shelf_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Shelf_o.setDescription('')
pnniIfConfig_Slot_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 2), Integer32()).setLabel("pnniIfConfig-Slot-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniIfConfig_Slot_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Slot_o.setDescription('')
pnniIfConfig_Item_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 3), Integer32()).setLabel("pnniIfConfig-Item-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniIfConfig_Item_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Item_o.setDescription('')
pnniIfConfig_LogicalItem_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 4), Integer32()).setLabel("pnniIfConfig-LogicalItem-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniIfConfig_LogicalItem_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_LogicalItem_o.setDescription('')
pnniIfConfig_Address_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("pnniIfConfig-Address-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_Address_PhysicalAddress_Shelf.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Address_PhysicalAddress_Shelf.setDescription('The number of the shelf that the addressed physical device resides on.')
pnniIfConfig_Address_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("pnniIfConfig-Address-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_Address_PhysicalAddress_Slot.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Address_PhysicalAddress_Slot.setDescription('The number of the slot that the addressed physical device resides on.')
pnniIfConfig_Address_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 7), Integer32()).setLabel("pnniIfConfig-Address-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_Address_PhysicalAddress_ItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Address_PhysicalAddress_ItemNumber.setDescription('A number that specifies an addressable entity within the context of shelf and slot.')
pnniIfConfig_Address_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 8), Integer32()).setLabel("pnniIfConfig-Address-LogicalItem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_Address_LogicalItem.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Address_LogicalItem.setDescription('A number that specifies an addressable logical entity within the context of a physical address.')
pnniIfConfig_IfNodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 9), Integer32()).setLabel("pnniIfConfig-IfNodeIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfNodeIndex.setDescription('Identifies the node within the switching system that the interface is directly attached to. The value zero is not a valid value.')
pnniIfConfig_IfAggrToken = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 10), Integer32()).setLabel("pnniIfConfig-IfAggrToken").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfAggrToken.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfAggrToken.setDescription('The configured aggregation token for this interface. The aggregation token controls what other links the link associated with this interface will be aggregated together with.')
pnniIfConfig_IfVpCapability = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniIfConfig-IfVpCapability").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniIfConfig_IfVpCapability.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfVpCapability.setDescription('Indicates whether the interface is capable of having VPCs established within it or not.')
pnniIfConfig_IfAdmWeightCbr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 12), Integer32()).setLabel("pnniIfConfig-IfAdmWeightCbr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightCbr.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightCbr.setDescription('The administrative weight of this interface for the constant bit rate service category.')
pnniIfConfig_IfAdmWeightRtVbr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 13), Integer32()).setLabel("pnniIfConfig-IfAdmWeightRtVbr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightRtVbr.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightRtVbr.setDescription('The administrative weight of this interface for the real-time variable bit rate service category.')
pnniIfConfig_IfAdmWeightNrtVbr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 14), Integer32()).setLabel("pnniIfConfig-IfAdmWeightNrtVbr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightNrtVbr.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightNrtVbr.setDescription('The administrative weight of this interface for the non-real-time variable bit rate service category.')
pnniIfConfig_IfAdmWeightAbr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 15), Integer32()).setLabel("pnniIfConfig-IfAdmWeightAbr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightAbr.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightAbr.setDescription('The administrative weight of this interface for the available bit rate service category.')
pnniIfConfig_IfAdmWeightUbr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 16), Integer32()).setLabel("pnniIfConfig-IfAdmWeightUbr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightUbr.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfAdmWeightUbr.setDescription('The administrative weight of this interface for the unspecified bit rate service category.')
pnniIfConfig_IfRccServiceCategory = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 2), ("cbr", 3), ("rtVbr", 4), ("nrtVbr", 5), ("abr", 6), ("ubr", 7)))).setLabel("pnniIfConfig-IfRccServiceCategory").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfRccServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfRccServiceCategory.setDescription('The service category used for the PNNI routing control channel (VCI=18) on this interface.')
pnniIfConfig_IfRccQosName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 18), DisplayString()).setLabel("pnniIfConfig-IfRccQosName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_IfRccQosName.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_IfRccQosName.setDescription('The QOS for the PNNI Routing control channel.')
pnniIfConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 45, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniIfConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniIfConfig_Action_o.setDescription('')
mibpnniRouteNodeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 47, 1), )
if mibBuilder.loadTexts: mibpnniRouteNodeConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniRouteNodeConfigTable.setDescription('A list of mibpnniRouteNodeConfig profile entries.')
mibpnniRouteNodeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteNodeConfig-Index-NodeIndex"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteNodeConfig-Index-RouteNodeClass"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteNodeConfig-Index-RouteNodeDestNodeId"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteNodeConfig-Index-RouteNodeDtl"))
if mibBuilder.loadTexts: mibpnniRouteNodeConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniRouteNodeConfigEntry.setDescription('A mibpnniRouteNodeConfig entry containing objects that maps to the parameters of mibpnniRouteNodeConfig profile.')
pnniRouteNodeConfig_Index_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 1), Integer32()).setLabel("pnniRouteNodeConfig-Index-NodeIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_NodeIndex.setDescription('Index that identifies a logical PNNI node.')
pnniRouteNodeConfig_Index_RouteNodeClass = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 2), Integer32()).setLabel("pnniRouteNodeConfig-Index-RouteNodeClass").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_RouteNodeClass.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_RouteNodeClass.setDescription('Indicates the service category with which this forwarding table entry is associated.')
pnniRouteNodeConfig_Index_RouteNodeDestNodeId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 3), DisplayString()).setLabel("pnniRouteNodeConfig-Index-RouteNodeDestNodeId").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_RouteNodeDestNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_RouteNodeDestNodeId.setDescription('The node ID of the destination node to which this route proceeds, and at which the DTL stack for this route terminates.')
pnniRouteNodeConfig_Index_RouteNodeDtl = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 4), Integer32()).setLabel("pnniRouteNodeConfig-Index-RouteNodeDtl").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_RouteNodeDtl.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Index_RouteNodeDtl.setDescription("The index into the owning PNNI node's DTL table of the DTL stack that goes with this route.")
pnniRouteNodeConfig_DestPortId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 5), Integer32()).setLabel("pnniRouteNodeConfig-DestPortId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_DestPortId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_DestPortId.setDescription('The port ID of the destination node at which the route terminates.A port ID of zero indicates the node nucleus.When the destination node is represented by the simple node representation, this value should be set to zero.')
pnniRouteNodeConfig_Proto = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 2), ("local", 3), ("mgmt", 4), ("pnni", 5)))).setLabel("pnniRouteNodeConfig-Proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Proto.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Proto.setDescription('The routing mechanism via which this route was learned.')
pnniRouteNodeConfig_TimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 7), Integer32()).setLabel("pnniRouteNodeConfig-TimeStamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteNodeConfig_TimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_TimeStamp.setDescription("The time at which this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
pnniRouteNodeConfig_NodeInfo = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 8), DisplayString()).setLabel("pnniRouteNodeConfig-NodeInfo").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_NodeInfo.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_NodeInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route,as determined by the value specified in the route's pnniRouteNodeProto value.Currently not supportted and is set to 0.0.")
pnniRouteNodeConfig_GcacClp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("clpequal0", 2), ("clpequal0or1", 3)))).setLabel("pnniRouteNodeConfig-GcacClp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_GcacClp.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_GcacClp.setDescription('For PNNI, indicates whether any advertised GCAC parameters apply for CLP=0 traffic or for CLP=0+1 traffic.')
pnniRouteNodeConfig_FwdMetricAw = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 10), Integer32()).setLabel("pnniRouteNodeConfig-FwdMetricAw").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetricAw.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetricAw.setDescription('The cumulative administrative weight calculated for the forward direction of this route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_FwdMetric1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 11), Integer32()).setLabel("pnniRouteNodeConfig-FwdMetric1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric1.setDescription('An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the maximum possible cell rate (in cells per second) for the forward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_FwdMetric2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 12), Integer32()).setLabel("pnniRouteNodeConfig-FwdMetric2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric2.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric2.setDescription('An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the Available cell rate (in cells per second) for the forward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_FwdMetric3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 13), Integer32()).setLabel("pnniRouteNodeConfig-FwdMetric3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric3.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric3.setDescription('An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the cumulative Max. Cell Transfer Delay (in microseconds) for the forward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_FwdMetric4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 14), Integer32()).setLabel("pnniRouteNodeConfig-FwdMetric4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric4.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric4.setDescription('An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the cumulative Cell Delay Variation (in microseconds)for forward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_FwdMetric5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 15), Integer32()).setLabel("pnniRouteNodeConfig-FwdMetric5").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric5.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMetric5.setDescription("An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the cumulative Cell Loss Ratio for CLP=0 traffic for the forward direction of the route. Cell loss ratio value is computed as 10**(-n) where 'n' is the value returned in this variable.0xFFFFFFFF means the metric is not used.")
pnniRouteNodeConfig_FwdMeteric6 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 16), Integer32()).setLabel("pnniRouteNodeConfig-FwdMeteric6").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMeteric6.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMeteric6.setDescription("An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the cumulative Cell Loss Ratio for CLP=0+1 traffic for the forward direction of the route. Cell loss ratio value is computed as 10**(-n) where 'n' is the returned in this variable.0xFFFFFFFF means the metric is not used.")
pnniRouteNodeConfig_FwdMeteric7 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 17), Integer32()).setLabel("pnniRouteNodeConfig-FwdMeteric7").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMeteric7.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMeteric7.setDescription('An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the Cell Rate Margin (in cells per second) for the forward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_FwdMeteric8 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 18), Integer32()).setLabel("pnniRouteNodeConfig-FwdMeteric8").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMeteric8.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_FwdMeteric8.setDescription('An alternate routing parameter for the forward direction of this route. For information learned from PNNI nodes, this is the Variance Factor (in units of 2**(-8)) for the forward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_BwdMetricAw = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 19), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetricAw").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetricAw.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetricAw.setDescription('The administrative weight calculated for the backward direction of this route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_BwdMetric1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 20), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric1.setDescription('Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the maximum possible cell rate(in cells per second)for the backward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_BwdMetric2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 21), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric2.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric2.setDescription('Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the Available cell rate (in cells per second) for the backward direction of the route. Further information on available bandwidth may be obtainable by reference to the nodal advertisements of the nodes in the path. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_BwdMetric3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 22), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric3.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric3.setDescription('Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the cumulative Max Cell Transfer Delay (in microseconds) for the backward direction of the route.0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_BwdMetric4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 23), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric4.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric4.setDescription('Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the cumulative Cell Delay Variation (in microseconds) for the backward direction of the route. 0xFFFFFFFF means the metric is not used.')
pnniRouteNodeConfig_BwdMetric5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 24), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric5").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric5.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric5.setDescription("Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the cumulative Cell Loss Ratio for CLP=0 traffic for the backward direction of the route. Cell loss ratio value is computed as 10**(-n) where 'n' is the value returned in this variable.0xFFFFFFFF means the metric isn't used.")
pnniRouteNodeConfig_BwdMetric6 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 25), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric6").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric6.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric6.setDescription("Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the cumulative Cell Loss Ratio for CLP=0+1 traffic for the backward direction of the route Cell loss ratio value is computed as 10**(-n) where 'n' is the value returned in this variable.0xFFFFFFFF means the metric isn't used.")
pnniRouteNodeConfig_BwdMetric7 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 26), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric7").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric7.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric7.setDescription("Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the Cell Rate Margin (in cells per second) for the backward direction of the route. 0xFFFFFFFF means the metric isn't used.")
pnniRouteNodeConfig_BwdMetric8 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 27), Integer32()).setLabel("pnniRouteNodeConfig-BwdMetric8").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric8.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_BwdMetric8.setDescription("Alternate routing parameter for the backward direction of this route. For information learned from PNNI nodes, this is the Variance Factor (in units of 2**(-8)) for the backward direction of the route. 0xFFFFFFFF means the metric isn't used.")
pnniRouteNodeConfig_VpCapability = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniRouteNodeConfig-VpCapability").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_VpCapability.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_VpCapability.setDescription('Attribute indicates whether a VPC setup on this route is possible.')
pnniRouteNodeConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("pnniRouteNodeConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Active.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Active.setDescription('The current state of this route node entry.')
pnniRouteNodeConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 47, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniRouteNodeConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteNodeConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteNodeConfig_Action_o.setDescription('')
mibpnniRouteAddrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 49, 1), )
if mibBuilder.loadTexts: mibpnniRouteAddrConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniRouteAddrConfigTable.setDescription('A list of mibpnniRouteAddrConfig profile entries.')
mibpnniRouteAddrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniRouteAddrConfig-Name"))
if mibBuilder.loadTexts: mibpnniRouteAddrConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniRouteAddrConfigEntry.setDescription('A mibpnniRouteAddrConfig entry containing objects that maps to the parameters of mibpnniRouteAddrConfig profile.')
pnniRouteAddrConfig_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 1), DisplayString()).setLabel("pnniRouteAddrConfig-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteAddrConfig_Name.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_Name.setDescription('The name of this profile which is corresponding to the value of the addr-index.')
pnniRouteAddrConfig_AddrIndex_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 2), Integer32()).setLabel("pnniRouteAddrConfig-AddrIndex-NodeIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_NodeIndex.setDescription('Index that identifies a logical PNNI node.')
pnniRouteAddrConfig_AddrIndex_Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 3), DisplayString()).setLabel("pnniRouteAddrConfig-AddrIndex-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_Address.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_Address.setDescription('The value of the ATM End System Address prefix.')
pnniRouteAddrConfig_AddrIndex_PrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 4), Integer32()).setLabel("pnniRouteAddrConfig-AddrIndex-PrefixLen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_PrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_PrefixLen.setDescription('The prefix length to be applied to the ATM End System Address prefix.')
pnniRouteAddrConfig_AddrIndex_Index = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 5), Integer32()).setLabel("pnniRouteAddrConfig-AddrIndex-Index").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_Index.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_AddrIndex_Index.setDescription('An index into the set of listings of connectivity to a given address prefix from a given local node.')
pnniRouteAddrConfig_IfIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 6), Integer32()).setLabel("pnniRouteAddrConfig-IfIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_IfIndex.setDescription('The local interface over which the reachable address can be reached. The value zero indicates an unknown interface or reachability through a remote node.')
pnniRouteAddrConfig_AdvNodeId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 7), DisplayString()).setLabel("pnniRouteAddrConfig-AdvNodeId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_AdvNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_AdvNodeId.setDescription('The node ID of a node advertising reachability to the address prefix. If the local node index is zero, then the advertising node ID must be set to all zeros.')
pnniRouteAddrConfig_AdvPortId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 8), Integer32()).setLabel("pnniRouteAddrConfig-AdvPortId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_AdvPortId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_AdvPortId.setDescription('The port identifier used from the advertising node to reach the given address prefix.')
pnniRouteAddrConfig_Type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 2), ("reject", 3), ("internal", 4), ("exterior", 5)))).setLabel("pnniRouteAddrConfig-Type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_Type.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_Type.setDescription('The type (e.g. internal or exterior) of reachability from the advertising node to the address prefix.')
pnniRouteAddrConfig_Proto = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 2), ("local", 3), ("mgmt", 4), ("pnni", 5)))).setLabel("pnniRouteAddrConfig-Proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteAddrConfig_Proto.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_Proto.setDescription('The routing mechanism via which the connectivity from the advertising node to the reachable address prefix was learned.')
pnniRouteAddrConfig_PnniScope = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 11), Integer32()).setLabel("pnniRouteAddrConfig-PnniScope").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_PnniScope.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_PnniScope.setDescription('The PNNI scope of advertisement (i.e. level of PNNI hierarchy) of the reachability from the advertising node to the address prefix.')
pnniRouteAddrConfig_VpCapability = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniRouteAddrConfig-VpCapability").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_VpCapability.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_VpCapability.setDescription('Indicates whether VPCs can be established from the advertising node to the reachable address prefix.')
pnniRouteAddrConfig_MetricsTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 13), Integer32()).setLabel("pnniRouteAddrConfig-MetricsTag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_MetricsTag.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_MetricsTag.setDescription('The index into the pnniMetricsTable for the traffic parameter values that apply for the connectivity from the advertising node to the reachable address prefix. There will be one or more entries in the pnniMetricsTable whose first instance identifier matches the value of this variable.')
pnniRouteAddrConfig_PtseIdPtseId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 14), Integer32()).setLabel("pnniRouteAddrConfig-PtseIdPtseId").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteAddrConfig_PtseIdPtseId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_PtseIdPtseId.setDescription('For reachable addresses learned via PNNI, this attribute contains the value of the PTSE Identifier for the PTSE being originated by the originating node which contains the information group(s) describing the reachable address. For reachable addresses learned by means other than PNNI, this attribute is set to zero.')
pnniRouteAddrConfig_OriginateAdvert = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("true", 2), ("false", 3)))).setLabel("pnniRouteAddrConfig-OriginateAdvert").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_OriginateAdvert.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_OriginateAdvert.setDescription('Whether or not the reachable address specified by this entry is to be advertised by the local node into its PNNI routing domain.')
pnniRouteAddrConfig_Info = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 16), DisplayString()).setLabel("pnniRouteAddrConfig-Info").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteAddrConfig_Info.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_Info.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this reachable address prefix, as determined by the value specified in the route's pnniRouteAddrProto value. Currently not supportted and is set to 0.0.")
pnniRouteAddrConfig_OperStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("inactive", 2), ("active", 3), ("advertised", 4)))).setLabel("pnniRouteAddrConfig-OperStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteAddrConfig_OperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_OperStatus.setDescription('Indicates whether the reachable address prefix is operationally valid and whether it is being advertised by this node.')
pnniRouteAddrConfig_TimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 18), Integer32()).setLabel("pnniRouteAddrConfig-TimeStamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniRouteAddrConfig_TimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_TimeStamp.setDescription('Indicates when the connectivity from the advertising node to the reachable address prefix became known to the local node.')
pnniRouteAddrConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("pnniRouteAddrConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_Active.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_Active.setDescription('The current state of this route address entry.')
pnniRouteAddrConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 49, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniRouteAddrConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniRouteAddrConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniRouteAddrConfig_Action_o.setDescription('')
mibpnniMetricsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 46, 1), )
if mibBuilder.loadTexts: mibpnniMetricsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniMetricsConfigTable.setDescription('A list of mibpnniMetricsConfig profile entries.')
mibpnniMetricsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPNNI-MIB", "pnniMetricsConfig-MetricsIndex-NodeIndex"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniMetricsConfig-MetricsIndex-MetricsTag"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniMetricsConfig-MetricsIndex-MetricsDirection"), (0, "ASCEND-MIBATMPNNI-MIB", "pnniMetricsConfig-MetricsIndex-MetricsIndex"))
if mibBuilder.loadTexts: mibpnniMetricsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpnniMetricsConfigEntry.setDescription('A mibpnniMetricsConfig entry containing objects that maps to the parameters of mibpnniMetricsConfig profile.')
pnniMetricsConfig_MetricsIndex_NodeIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 1), Integer32()).setLabel("pnniMetricsConfig-MetricsIndex-NodeIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_NodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_NodeIndex.setDescription('Index that identifies a logical PNNI node.')
pnniMetricsConfig_MetricsIndex_MetricsTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 2), Integer32()).setLabel("pnniMetricsConfig-MetricsIndex-MetricsTag").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_MetricsTag.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_MetricsTag.setDescription('An arbitrary integer that is used to associate a set of traffic parameters that are always advertised together.Within this set, the parameters are distinguished by the service categories and direction to which a set of parameters apply.')
pnniMetricsConfig_MetricsIndex_MetricsDirection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 3), Integer32()).setLabel("pnniMetricsConfig-MetricsIndex-MetricsDirection").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_MetricsDirection.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_MetricsDirection.setDescription('The direction, with respect to the advertising node,in which the parameters in this entry apply.')
pnniMetricsConfig_MetricsIndex_MetricsIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 4), Integer32()).setLabel("pnniMetricsConfig-MetricsIndex-MetricsIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_MetricsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsIndex_MetricsIndex.setDescription('An index into the set of parameters associated with the given tag and direction.')
pnniMetricsConfig_MetricsClasses = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 5), Integer32()).setLabel("pnniMetricsConfig-MetricsClasses").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsClasses.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsClasses.setDescription('The service categories to which this set of parameters applies.This is an integer used as a bit mask with each bit that is set representing a single service category for which the resources indicated are avail- able.Bit 5 represents CBR, bit 4 represents real-time VBR, bit 3 represents non-real-time VBR, bit 2 represents ABR, and bit 1 (LSB) represents UBR.')
pnniMetricsConfig_MetricsGcacClp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("clpequal0", 2), ("clpequal0or1", 3)))).setLabel("pnniMetricsConfig-MetricsGcacClp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsGcacClp.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsGcacClp.setDescription('Indicates whether the advertised GCAC parameters apply for CLP=0 traffic or for CLP=0+1 traffic.')
pnniMetricsConfig_MetricsAdminWeight = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 7), Integer32()).setLabel("pnniMetricsConfig-MetricsAdminWeight").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsAdminWeight.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_MetricsAdminWeight.setDescription('The administrative weight from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 8), Integer32()).setLabel("pnniMetricsConfig-Metrics1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics1.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics1.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 9), Integer32()).setLabel("pnniMetricsConfig-Metrics2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics2.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics2.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 10), Integer32()).setLabel("pnniMetricsConfig-Metrics3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics3.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics3.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 11), Integer32()).setLabel("pnniMetricsConfig-Metrics4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics4.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics4.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 12), Integer32()).setLabel("pnniMetricsConfig-Metrics5").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics5.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics5.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics6 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 13), Integer32()).setLabel("pnniMetricsConfig-Metrics6").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics6.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics6.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics7 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 14), Integer32()).setLabel("pnniMetricsConfig-Metrics7").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics7.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics7.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Metrics8 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 15), Integer32()).setLabel("pnniMetricsConfig-Metrics8").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics8.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Metrics8.setDescription('An alternate routing parameter from the advertising node to the remote end of the PNNI entity or to the reachable address or transit network, for the specified service categories.')
pnniMetricsConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("pnniMetricsConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Active.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Active.setDescription('The current state of this metrics entry')
pnniMetricsConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 46, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pnniMetricsConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMetricsConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pnniMetricsConfig_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBATMPNNI-MIB", pnniRouteNodeConfig_FwdMetric5=pnniRouteNodeConfig_FwdMetric5, pnniMetricsConfig_MetricsIndex_MetricsIndex=pnniMetricsConfig_MetricsIndex_MetricsIndex, mibpnniSummaryAddrEntryEntry=mibpnniSummaryAddrEntryEntry, mibpnniNodeConfigTable=mibpnniNodeConfigTable, pnniRouteTnsConfig_TnsOriginateAdvertisement=pnniRouteTnsConfig_TnsOriginateAdvertisement, pnniRouteNodeConfig_FwdMeteric7=pnniRouteNodeConfig_FwdMeteric7, pnniRouteTnsConfig_Active=pnniRouteTnsConfig_Active, pnniRouteNodeConfig_FwdMeteric8=pnniRouteNodeConfig_FwdMeteric8, pnniRouteTnsConfig_TnsIfIndex=pnniRouteTnsConfig_TnsIfIndex, mibpnniMetricsConfig=mibpnniMetricsConfig, pnniNodeConfig_NodeScopeMapping_Regional=pnniNodeConfig_NodeScopeMapping_Regional, pnniNodeConfig_NodeTimer_PtseHolddown=pnniNodeConfig_NodeTimer_PtseHolddown, pnniDTLConfig_DtlPortId=pnniDTLConfig_DtlPortId, pnniRouteNodeConfig_TimeStamp=pnniRouteNodeConfig_TimeStamp, pnniMetricsConfig_Metrics6=pnniMetricsConfig_Metrics6, pnniMetricsConfig_Active=pnniMetricsConfig_Active, pnniIfConfig_Slot_o=pnniIfConfig_Slot_o, pnniIfConfig_IfAdmWeightRtVbr=pnniIfConfig_IfAdmWeightRtVbr, pnniRouteNodeConfig_FwdMetric2=pnniRouteNodeConfig_FwdMetric2, mibpnniNodeConfigEntry=mibpnniNodeConfigEntry, pnniDTLConfig_Action_o=pnniDTLConfig_Action_o, mibpnniDTLConfig=mibpnniDTLConfig, pnniNodeConfig_NodeScopeMapping_IntraCommunity=pnniNodeConfig_NodeScopeMapping_IntraCommunity, pnniSummaryAddrEntry_Suppress=pnniSummaryAddrEntry_Suppress, pnniNodeConfig_NodeTimer_PtseRefreshInterval=pnniNodeConfig_NodeTimer_PtseRefreshInterval, mibpnniRouteNodeConfigEntry=mibpnniRouteNodeConfigEntry, pnniRouteNodeConfig_Active=pnniRouteNodeConfig_Active, pnniIfConfig_IfVpCapability=pnniIfConfig_IfVpCapability, pnniRouteNodeConfig_BwdMetric7=pnniRouteNodeConfig_BwdMetric7, pnniIfConfig_IfAdmWeightCbr=pnniIfConfig_IfAdmWeightCbr, mibpnniRouteAddrConfigEntry=mibpnniRouteAddrConfigEntry, pnniNodeConfig_NodeSvccRcc_InitTime=pnniNodeConfig_NodeSvccRcc_InitTime, pnniRouteTnsConfig_TnsAdvertisedPortId=pnniRouteTnsConfig_TnsAdvertisedPortId, pnniRouteNodeConfig_BwdMetric1=pnniRouteNodeConfig_BwdMetric1, pnniRouteNodeConfig_DestPortId=pnniRouteNodeConfig_DestPortId, mibpnniRouteAddrConfig=mibpnniRouteAddrConfig, pnniNodeConfig_NodePgl_ReelectTime=pnniNodeConfig_NodePgl_ReelectTime, pnniRouteTnsConfig_TnsIndex_RouteTnsId=pnniRouteTnsConfig_TnsIndex_RouteTnsId, pnniRouteNodeConfig_Index_RouteNodeDestNodeId=pnniRouteNodeConfig_Index_RouteNodeDestNodeId, pnniDTLConfig_DtlLinkType=pnniDTLConfig_DtlLinkType, pnniNodeConfig_NodePgl_OverrideDelay=pnniNodeConfig_NodePgl_OverrideDelay, pnniNodeConfig_NodeTimer_HelloHolddown=pnniNodeConfig_NodeTimer_HelloHolddown, pnniIfConfig_Address_PhysicalAddress_ItemNumber=pnniIfConfig_Address_PhysicalAddress_ItemNumber, mibpnniMetricsConfigEntry=mibpnniMetricsConfigEntry, pnniRouteAddrConfig_AddrIndex_PrefixLen=pnniRouteAddrConfig_AddrIndex_PrefixLen, pnniDTLConfig_DtlNodeId=pnniDTLConfig_DtlNodeId, pnniRouteAddrConfig_MetricsTag=pnniRouteAddrConfig_MetricsTag, pnniRouteAddrConfig_Info=pnniRouteAddrConfig_Info, pnniRouteTnsConfig_TnsAdvertisingNodeId=pnniRouteTnsConfig_TnsAdvertisingNodeId, pnniRouteAddrConfig_Name=pnniRouteAddrConfig_Name, pnniRouteAddrConfig_PtseIdPtseId=pnniRouteAddrConfig_PtseIdPtseId, pnniRouteTnsConfig_TnsIndex_RouteTnsPlan=pnniRouteTnsConfig_TnsIndex_RouteTnsPlan, pnniRouteNodeConfig_FwdMeteric6=pnniRouteNodeConfig_FwdMeteric6, mibpnniIfConfig=mibpnniIfConfig, pnniRouteNodeConfig_BwdMetricAw=pnniRouteNodeConfig_BwdMetricAw, pnniNodeConfig_NodePgl_InitTime=pnniNodeConfig_NodePgl_InitTime, pnniMetricsConfig_Metrics1=pnniMetricsConfig_Metrics1, pnniNodeConfig_NodeLowest=pnniNodeConfig_NodeLowest, pnniNodeConfig_NodeTimer_CdvPm=pnniNodeConfig_NodeTimer_CdvPm, pnniDTLConfig_DtlIndex_NodeIndex=pnniDTLConfig_DtlIndex_NodeIndex, pnniNodeConfig_NodeScopeMapping_Global=pnniNodeConfig_NodeScopeMapping_Global, pnniMetricsConfig_MetricsGcacClp=pnniMetricsConfig_MetricsGcacClp, pnniNodeConfig_NodeScopeMapping_LocalNetPlus2=pnniNodeConfig_NodeScopeMapping_LocalNetPlus2, pnniMetricsConfig_Metrics8=pnniMetricsConfig_Metrics8, pnniNodeConfig_NodeDomainName=pnniNodeConfig_NodeDomainName, pnniNodeConfig_NodeScopeMapping_LocalNet=pnniNodeConfig_NodeScopeMapping_LocalNet, pnniIfConfig_IfRccQosName=pnniIfConfig_IfRccQosName, mibpnniRouteTnsConfig=mibpnniRouteTnsConfig, pnniNodeConfig_NodeScopeMapping_IntraSite=pnniNodeConfig_NodeScopeMapping_IntraSite, pnniIfConfig_Address_LogicalItem=pnniIfConfig_Address_LogicalItem, pnniMetricsConfig_Action_o=pnniMetricsConfig_Action_o, pnniRouteAddrConfig_Proto=pnniRouteAddrConfig_Proto, mibpnniNodeConfig=mibpnniNodeConfig, pnniRouteNodeConfig_FwdMetricAw=pnniRouteNodeConfig_FwdMetricAw, pnniIfConfig_LogicalItem_o=pnniIfConfig_LogicalItem_o, pnniNodeConfig_NodeTimer_HelloInactivityFactor=pnniNodeConfig_NodeTimer_HelloInactivityFactor, pnniIfConfig_IfAggrToken=pnniIfConfig_IfAggrToken, pnniDTLConfig_DtlIndex_DtlIndex=pnniDTLConfig_DtlIndex_DtlIndex, pnniDTLConfig_DtlIndex_DtlEntryIndex=pnniDTLConfig_DtlIndex_DtlEntryIndex, pnniNodeConfig_NodeAtmAddress=pnniNodeConfig_NodeAtmAddress, pnniIfConfig_Item_o=pnniIfConfig_Item_o, pnniRouteNodeConfig_BwdMetric3=pnniRouteNodeConfig_BwdMetric3, pnniNodeConfig_Action_o=pnniNodeConfig_Action_o, pnniRouteAddrConfig_AdvNodeId=pnniRouteAddrConfig_AdvNodeId, pnniNodeConfig_NodeSvccRcc_TrafficDescrIndex=pnniNodeConfig_NodeSvccRcc_TrafficDescrIndex, pnniNodeConfig_NodeTimer_AvcrMt=pnniNodeConfig_NodeTimer_AvcrMt, pnniRouteNodeConfig_BwdMetric8=pnniRouteNodeConfig_BwdMetric8, pnniNodeConfig_NodeTimer_RxmtInterval=pnniNodeConfig_NodeTimer_RxmtInterval, pnniSummaryAddrEntry_IndexName=pnniSummaryAddrEntry_IndexName, pnniRouteNodeConfig_Index_NodeIndex=pnniRouteNodeConfig_Index_NodeIndex, pnniNodeConfig_NodeIndex=pnniNodeConfig_NodeIndex, pnniNodeConfig_NodeTimer_PeerDelayedAckInterval=pnniNodeConfig_NodeTimer_PeerDelayedAckInterval, pnniRouteNodeConfig_BwdMetric2=pnniRouteNodeConfig_BwdMetric2, pnniRouteAddrConfig_AddrIndex_Index=pnniRouteAddrConfig_AddrIndex_Index, pnniNodeConfig_NodeComplexRep=pnniNodeConfig_NodeComplexRep, pnniDTLConfig_Active=pnniDTLConfig_Active, pnniIfConfig_IfAdmWeightUbr=pnniIfConfig_IfAdmWeightUbr, pnniNodeConfig_NodeScopeMapping_LocalNetPlus1=pnniNodeConfig_NodeScopeMapping_LocalNetPlus1, pnniSummaryAddrEntry_AddrIndex_Type=pnniSummaryAddrEntry_AddrIndex_Type, mibpnniMetricsConfigTable=mibpnniMetricsConfigTable, pnniRouteAddrConfig_AddrIndex_Address=pnniRouteAddrConfig_AddrIndex_Address, pnniNodeConfig_NodeScopeMapping_SiteMinus1=pnniNodeConfig_NodeScopeMapping_SiteMinus1, pnniRouteAddrConfig_IfIndex=pnniRouteAddrConfig_IfIndex, pnniRouteTnsConfig_TnsIndex_RouteTnsIndex=pnniRouteTnsConfig_TnsIndex_RouteTnsIndex, pnniIfConfig_IfRccServiceCategory=pnniIfConfig_IfRccServiceCategory, pnniMetricsConfig_MetricsAdminWeight=pnniMetricsConfig_MetricsAdminWeight, pnniRouteAddrConfig_VpCapability=pnniRouteAddrConfig_VpCapability, pnniNodeConfig_NodeScopeMapping_CommunityMinus1=pnniNodeConfig_NodeScopeMapping_CommunityMinus1, pnniNodeConfig_NodeLevel=pnniNodeConfig_NodeLevel, pnniMetricsConfig_Metrics4=pnniMetricsConfig_Metrics4, pnniMetricsConfig_Metrics7=pnniMetricsConfig_Metrics7, pnniRouteNodeConfig_Index_RouteNodeDtl=pnniRouteNodeConfig_Index_RouteNodeDtl, pnniRouteAddrConfig_OriginateAdvert=pnniRouteAddrConfig_OriginateAdvert, pnniMetricsConfig_MetricsClasses=pnniMetricsConfig_MetricsClasses, pnniIfConfig_Action_o=pnniIfConfig_Action_o, mibpnniDTLConfigEntry=mibpnniDTLConfigEntry, pnniRouteTnsConfig_TnsIndex_RouteTnsType=pnniRouteTnsConfig_TnsIndex_RouteTnsType, pnniRouteAddrConfig_PnniScope=pnniRouteAddrConfig_PnniScope, pnniNodeConfig_NodeScopeMapping_SitePlus1=pnniNodeConfig_NodeScopeMapping_SitePlus1, pnniNodeConfig_NodeSvccRcc_CalledIntegrityTime=pnniNodeConfig_NodeSvccRcc_CalledIntegrityTime, pnniRouteAddrConfig_TimeStamp=pnniRouteAddrConfig_TimeStamp, pnniMetricsConfig_MetricsIndex_NodeIndex=pnniMetricsConfig_MetricsIndex_NodeIndex, pnniRouteTnsConfig_TnsMetricsTag=pnniRouteTnsConfig_TnsMetricsTag, pnniRouteNodeConfig_Index_RouteNodeClass=pnniRouteNodeConfig_Index_RouteNodeClass, pnniNodeConfig_NodeSvccRcc_CallingIntegrityTime=pnniNodeConfig_NodeSvccRcc_CallingIntegrityTime, pnniNodeConfig_NodeScopeMapping_IntraOrganization=pnniNodeConfig_NodeScopeMapping_IntraOrganization, mibpnniIfConfigTable=mibpnniIfConfigTable, pnniRouteNodeConfig_NodeInfo=pnniRouteNodeConfig_NodeInfo, pnniMetricsConfig_Metrics3=pnniMetricsConfig_Metrics3, pnniSummaryAddrEntry_State=pnniSummaryAddrEntry_State, pnniRouteTnsConfig_TnsPnniScope=pnniRouteTnsConfig_TnsPnniScope, pnniSummaryAddrEntry_AddrIndex_Address=pnniSummaryAddrEntry_AddrIndex_Address, pnniNodeConfig_NodeScopeMapping_InterRegional=pnniNodeConfig_NodeScopeMapping_InterRegional, pnniNodeConfig_NodeRestrictedTransit=pnniNodeConfig_NodeRestrictedTransit, pnniNodeConfig_NodeTimer_HelloInterval=pnniNodeConfig_NodeTimer_HelloInterval, pnniMetricsConfig_MetricsIndex_MetricsTag=pnniMetricsConfig_MetricsIndex_MetricsTag, pnniNodeConfig_NodePgl_ParentNodeIndex=pnniNodeConfig_NodePgl_ParentNodeIndex, mibpnniDTLConfigTable=mibpnniDTLConfigTable, mibpnniRouteNodeConfigTable=mibpnniRouteNodeConfigTable, pnniRouteNodeConfig_FwdMetric3=pnniRouteNodeConfig_FwdMetric3, pnniMetricsConfig_Metrics2=pnniMetricsConfig_Metrics2, pnniNodeConfig_NodePgl_LeadershipPriority=pnniNodeConfig_NodePgl_LeadershipPriority, pnniNodeConfig_NodeScopeMapping_OrganizationMinus1=pnniNodeConfig_NodeScopeMapping_OrganizationMinus1, pnniNodeConfig_NodeAdminStatus=pnniNodeConfig_NodeAdminStatus, pnniNodeConfig_CurrNodeId=pnniNodeConfig_CurrNodeId, pnniNodeConfig_NodeScopeMapping_OrganizationPlus1=pnniNodeConfig_NodeScopeMapping_OrganizationPlus1, pnniNodeConfig_NodeTimer_PtseLifetimeFactor=pnniNodeConfig_NodeTimer_PtseLifetimeFactor, pnniRouteTnsConfig_Action_o=pnniRouteTnsConfig_Action_o, pnniIfConfig_Address_PhysicalAddress_Shelf=pnniIfConfig_Address_PhysicalAddress_Shelf, pnniRouteNodeConfig_GcacClp=pnniRouteNodeConfig_GcacClp, pnniRouteNodeConfig_Action_o=pnniRouteNodeConfig_Action_o, pnniIfConfig_Address_PhysicalAddress_Slot=pnniIfConfig_Address_PhysicalAddress_Slot, mibpnniSummaryAddrEntryTable=mibpnniSummaryAddrEntryTable, pnniSummaryAddrEntry_AddrIndex_PrefixLen=pnniSummaryAddrEntry_AddrIndex_PrefixLen, pnniSummaryAddrEntry_AddrIndex_NodeIndex=pnniSummaryAddrEntry_AddrIndex_NodeIndex, pnniIfConfig_IfNodeIndex=pnniIfConfig_IfNodeIndex, pnniRouteAddrConfig_Active=pnniRouteAddrConfig_Active, pnniIfConfig_IfAdmWeightNrtVbr=pnniIfConfig_IfAdmWeightNrtVbr, pnniRouteNodeConfig_FwdMetric4=pnniRouteNodeConfig_FwdMetric4, pnniRouteNodeConfig_FwdMetric1=pnniRouteNodeConfig_FwdMetric1, mibpnniIfConfigEntry=mibpnniIfConfigEntry, pnniRouteNodeConfig_VpCapability=pnniRouteNodeConfig_VpCapability, pnniNodeConfig_NodeId=pnniNodeConfig_NodeId, pnniIfConfig_Shelf_o=pnniIfConfig_Shelf_o, pnniRouteNodeConfig_BwdMetric5=pnniRouteNodeConfig_BwdMetric5, pnniRouteTnsConfig_TnsRouteType=pnniRouteTnsConfig_TnsRouteType, mibpnniRouteTnsConfigTable=mibpnniRouteTnsConfigTable, pnniNodeConfig_CurrNodePeerGroupId=pnniNodeConfig_CurrNodePeerGroupId, pnniRouteNodeConfig_Proto=pnniRouteNodeConfig_Proto, pnniMetricsConfig_MetricsIndex_MetricsDirection=pnniMetricsConfig_MetricsIndex_MetricsDirection, pnniRouteAddrConfig_OperStatus=pnniRouteAddrConfig_OperStatus, pnniRouteTnsConfig_TnsVpCapability=pnniRouteTnsConfig_TnsVpCapability, pnniNodeConfig_NodeSvccRcc_RetryTime=pnniNodeConfig_NodeSvccRcc_RetryTime, mibpnniRouteAddrConfigTable=mibpnniRouteAddrConfigTable, pnniNodeConfig_NodeTimer_HlinkInact=pnniNodeConfig_NodeTimer_HlinkInact, pnniRouteNodeConfig_BwdMetric6=pnniRouteNodeConfig_BwdMetric6, pnniIfConfig_IfAdmWeightAbr=pnniIfConfig_IfAdmWeightAbr, pnniNodeConfig_NodeScopeMapping_CommunityPlus1=pnniNodeConfig_NodeScopeMapping_CommunityPlus1, DisplayString=DisplayString, pnniRouteAddrConfig_AdvPortId=pnniRouteAddrConfig_AdvPortId, pnniSummaryAddrEntry_Action_o=pnniSummaryAddrEntry_Action_o, pnniNodeConfig_NodeTimer_CtdPm=pnniNodeConfig_NodeTimer_CtdPm, mibpnniSummaryAddrEntry=mibpnniSummaryAddrEntry, pnniRouteAddrConfig_Type=pnniRouteAddrConfig_Type, pnniRouteAddrConfig_Action_o=pnniRouteAddrConfig_Action_o, pnniRouteTnsConfig_TnsIndex_NodeIndex=pnniRouteTnsConfig_TnsIndex_NodeIndex, pnniNodeConfig_NodePeerGroupId=pnniNodeConfig_NodePeerGroupId, mibpnniRouteNodeConfig=mibpnniRouteNodeConfig, pnniMetricsConfig_Metrics5=pnniMetricsConfig_Metrics5, pnniRouteAddrConfig_AddrIndex_NodeIndex=pnniRouteAddrConfig_AddrIndex_NodeIndex, pnniNodeConfig_NodeTimer_AvcrPm=pnniNodeConfig_NodeTimer_AvcrPm, mibpnniRouteTnsConfigEntry=mibpnniRouteTnsConfigEntry, pnniRouteNodeConfig_BwdMetric4=pnniRouteNodeConfig_BwdMetric4, pnniSummaryAddrEntry_Active=pnniSummaryAddrEntry_Active)
