#
# PySNMP MIB module CISCO-WIRELESS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WIRELESS-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CwrCollectionAction, CwrCwErrorFreeSecond, CwrRFZeroIndex, CwrCollectionStatus, CwrRadioSignalAttribute, CwrOscState, CwrCwDegradedMinute, CwrCwConsecutiveSevErrSecond, CwrCwErroredSecond, CwrCwDegradedSecond, CwrThreshLimitType, CwrCwSeverelyErroredSecond, WirelessGauge64 = mibBuilder.importSymbols("CISCO-WIRELESS-TC-MIB", "CwrCollectionAction", "CwrCwErrorFreeSecond", "CwrRFZeroIndex", "CwrCollectionStatus", "CwrRadioSignalAttribute", "CwrOscState", "CwrCwDegradedMinute", "CwrCwConsecutiveSevErrSecond", "CwrCwErroredSecond", "CwrCwDegradedSecond", "CwrThreshLimitType", "CwrCwSeverelyErroredSecond", "WirelessGauge64")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, NotificationType, iso, MibIdentifier, IpAddress, Bits, Counter32, ModuleIdentity, ObjectIdentity, TimeTicks, Counter64, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "iso", "MibIdentifier", "IpAddress", "Bits", "Counter32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter64", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, RowStatus, TextualConvention, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "TimeInterval")
ciscoWirelessIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 136))
ciscoWirelessIfMIB.setRevisions(('2006-01-04 10:03', '2000-02-21 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWirelessIfMIB.setRevisionsDescriptions(('Imported Unsigned32 from SNMPv2-SMI.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWirelessIfMIB.setLastUpdated('200601041003Z')
if mibBuilder.loadTexts: ciscoWirelessIfMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoWirelessIfMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: wireless-nms@cisco.com')
if mibBuilder.loadTexts: ciscoWirelessIfMIB.setDescription("This is the MIB Module for the Cisco Wireless Radio Point to Point interface specification. I) Relationship of the Cisco Wireless Radio IF MIB to Interfaces MIB: One instance of the ifEntry exists for each wireless interface. The ifType of each such interface will be propWirelessP2P(157). If (at least) one IP address is active on an interface with this ifType without the use of any intervening (multiplexing) sub-layer, then it will appear in exactly two ifStackTable entries: i.e., for an ifType=propWirelessP2P(157) interface with ifIndex 'x', the ifStackTable will contain: ifStackStatus.0.x=active ifStackStatus.x.0=active The ifTestTable and ifRcvAddressTable are not supported by this ifType. II) ifEntry for the Wireless MAC Layer: The ifEntry for the wireless MAC Layer supports the following groups in the Interfaces MIB : a. ifGeneralInformationGroup b. ifHCPacketGroup For all those objects where the behavior is as defined in the Interfaces MIB, refer to Interfaces MIB for description. Special conditions or exceptions are explicitly documented here. IfTable Attribute Comments ================= =============================================== ifType, The IANA value of propWirelessP2P(157). ifMtu, Return 1500. ifSpeed, Current configured bandwidth. It can be 1.5Mbits/sec to 12Mbits/sec. ifPhysAddress, Return 0 length octet string. ifAdminStatus, The administrative status of this interface. ifOperStatus, The current operational status of the wireless MAC layer interface. ifLastChange, Refer to the Interfaces MIB. ifInMulticastPkts, Returns 0. ifInBroadcastPkts, Returns 0. ifOutMulticastPkts, Returns 0. ifOutBroadcastPkts, Returns 0. ifHCInMulticastPkts, Not supported. ifHCInBroadcastPkts, Not supported. ifHCOutMulticastPkts, Not supported. ifHCOutBroadcastPkts, Not supported. Glossary The following terms are used in the MIB definitions below. Radio Interface: The interface that provides the wireless communication features. Radio Link: The bi-directional wireless link that exists between two communicating radio. Radio PHY: Represents the transmission characteristics of the Radio Link. RF Unit: The Radio Frequency components and the associated antennas. ARQ: Automatic Repeat Query. Cisco Wireless MIB Organization The Cisco Wireless Radio IF MIB provides the following management groups : o. Radio Base Group This group contains common information about a radio interface . It provides facilities to configure attributes such as self-test, acquisition mode, etc. It includes configuration information used to set up a radio link. o. Radio PHY Quality Group This group provides facilities to control/tune the transmission and reception quality of the Radio Link. The quality of the Radio Link is measured using the metrics defined in radio Radio Link metrics group. o. Radio Frequency Resource Group This contains information about the Radio frequency transmission and reception resources available on the system. This group determines the portions of the radio spectrum at which the radio subsystem can operate. This group in conjunction with the radio PHY group determine the acutal spectrum that gets used for communications. o. Radio Link Metrics Group This group contains metrics to measure the quality of radio Link. This includes metrics such as total received codeword errors, resync count, errored seconds etc. o. Radio Signal Group This group contains information about the radio signal(s) that were received or attributes of the radio signals computed from received signals. This group models the real-time data that is collected. The key characteristics are: 1. The amount of information captured in these parameters is large and cannot be modeled as single values. 2. They represent real-time information, which cannot be polled for as well. 3. Hardware captures this information. All the radio signal characteristics are modeled in three ways: 1. Histogram 2. Timelines 3. Snapshots For management purposes radio signal characteristics are made accessible via: 1. History Group 2. Timeline Group 3. Snapshot Group These groups are described below. o. History Group This group contains information about the radio system characteristics which are inherently modeled as historgrams. Certain characteristics of the radio system may be captured as histograms by the hardware. The user may configure these histograms as needed. It exists for the following reasons: 1. The amount of information contained in these parameters is large and cannot be modeled as single values. 2. They represent real-time information, which cannot be polled for as well. 3. Key signal processing information cannot be captured by normal SNMP (say 1 sec poll interval) monitoring. 4. Hardware captures this information as histograms. 5. In wireless environments this is key information that can be captured for fault and performance management. o. Timeline Group This group contains information about how raw radio signal characteristics that may be captured. Timelines are normally associated with a threshold defined in the threshold group. o. Threshold Group This provides provides facilities to define thresholds on the raw signal attributes that are processed by the hardware. Normally thresholds are used in conjunction with Timelines to capture specific radio signal behavior. o. Snapshot Group This group provides facilities that may be used to capture multiple radio signal attributes keyed to a single user initiated trigger. Simultaneous capture of multiple real-time attributes keyed to a single trigger provides indepth information about the behavior of the system. o. Test Group This provides facilities to establish loopback at various points in the hardware for diagnostic purposes. o. Antenna Group This group provides information about the antenna resources installed and available for use. o. Trap Group It provides the list of traps that the wireless system will generate.")
cwrRadioMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1))
cwrRadioNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 2))
cwrRadioInternal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1))
cwrRadioCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 2))
cwrRadioBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3))
cwrRadioPhyQualityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4))
cwrRadioFreqResGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5))
cwrRadioMetricsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6))
cwrRadioHistoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7))
cwrRadioTimelineGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8))
cwrRadioSnapshotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9))
cwrRadioAntennaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10))
cwrRadioLatestTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 1))
cwrRadioDevTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2))
cwrRadioThreshTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 3))
cwrRadioNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRadioNextIndex.setStatus('current')
if mibBuilder.loadTexts: cwrRadioNextIndex.setDescription('This object should be used to generate unique indices when creating rows in the cwrRadioHistoryGroup, cwrRadioTimelineGroup, and the cwrRadioSnapshotGroup. Every GET request will generate a new index. The index will not be unique across power cycles of the router.')
cwrRadioBaseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1), )
if mibBuilder.loadTexts: cwrRadioBaseTable.setStatus('current')
if mibBuilder.loadTexts: cwrRadioBaseTable.setDescription('This table contains information about the radio common to both the transmit and receive sides.')
cwrRadioBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrRadioBaseEntry.setStatus('current')
if mibBuilder.loadTexts: cwrRadioBaseEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157). Each of these entries are indexed by the value of ifIndex as defined in RFC2863.')
cwrAcquisitionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAcquisitionMode.setStatus('current')
if mibBuilder.loadTexts: cwrAcquisitionMode.setDescription("This object specifies whether the radio should act as the master or as the slave. The slave radio tracks the master's frequency.")
cwrSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("once", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrSelfTest.setStatus('current')
if mibBuilder.loadTexts: cwrSelfTest.setDescription('This object specifies the whether self test should be executed and if so whether to do it every time the radio link is started. Any changes made to this object will reflected the next time the radio link is started. off(1) - Self test never performed. once(2) - Self test will be performed the next time the radio link is started. always(3) - Every time the radio link is started.')
cwrBasePrivacySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBasePrivacySupport.setStatus('current')
if mibBuilder.loadTexts: cwrBasePrivacySupport.setDescription('This object specifies whether the Baseline Privacy feature is available for use on this radio interface. If true then privacy is supported.')
cwrTxRfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 5), CwrRFZeroIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTxRfIndex.setStatus('current')
if mibBuilder.loadTexts: cwrTxRfIndex.setDescription('This object specifies the index into the cwrRfTable identifying the antenna used for transmission. This index will be 0 if the associated transmit antenna is not present.')
cwrRx1RfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 6), CwrRFZeroIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRx1RfIndex.setStatus('current')
if mibBuilder.loadTexts: cwrRx1RfIndex.setDescription('This object specifies the index of the first receive antenna identified by the cwrRfTable. This index will be 0 if the associated receive antenna is not present.')
cwrRx2RfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 7), CwrRFZeroIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRx2RfIndex.setStatus('current')
if mibBuilder.loadTexts: cwrRx2RfIndex.setDescription('This object specifies the index of the second receive antenna in the cwrRfTable. This index will be 0 if the associated receive antenna is not present.')
cwrClockRefExt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrClockRefExt.setStatus('current')
if mibBuilder.loadTexts: cwrClockRefExt.setDescription('When this object is set to true(1), the wireless radio uses a 10MHz external reference clock.')
cwrAntAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntAlignment.setStatus('current')
if mibBuilder.loadTexts: cwrAntAlignment.setDescription("For normal operation this should be set to false(2). If it set true(1), then the radio link is placed in antenna alignment mode. In this mode control signals are sent to the RF resource which enables the operator to monitor the signal received strength at the RF resource. This is mainly used for antenna steering i.e. positioning the antenna for the best possible signal reception. If set to true(1), the radio link's response to rapid changes in signal strength may potentially be affected.")
cwrRadioPhyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2), )
if mibBuilder.loadTexts: cwrRadioPhyTable.setStatus('current')
if mibBuilder.loadTexts: cwrRadioPhyTable.setDescription('This table contains information about the currently configured physical layer. These configuration paramters must match the corresponding configuration parameter at the remote end for the wireless link to be established.')
cwrRadioPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrRadioPhyEntry.setStatus('current')
if mibBuilder.loadTexts: cwrRadioPhyEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157). Each of these entries are indexed by the value of ifIndex as defined in RFC2863.')
cwrNumRxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrNumRxAntenna.setStatus('current')
if mibBuilder.loadTexts: cwrNumRxAntenna.setDescription('This object specifies the number of antennas to be used to receive the wireless transmissions.')
cwrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBandwidth.setStatus('current')
if mibBuilder.loadTexts: cwrBandwidth.setDescription('This object specifies the bandwidth to use. Given bandwidth, the actual throughput of the radio link is determined by the cwrThroughput setting.')
cwrThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrThroughput.setStatus('current')
if mibBuilder.loadTexts: cwrThroughput.setDescription('This represents an throughput expected of the identified radio link. There are 3 possible settings. The settings provide a tradeoff between bandwidth and the reliability of the radio link. The settings are: high(1): For a high throughput. The radio hardware will be configured such that it, favors throughput over error correction. It may not be able to correct all received errors. medium(2): This is a balance between high and low. low(3): The radio hardware is configured such that it trades off throughput for latency and error correction. It tries its very best to correct errors it detects.')
cwrOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bandUNII", 1), ("bandMMDS", 2), ("bandOther", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrOperatingBand.setStatus('current')
if mibBuilder.loadTexts: cwrOperatingBand.setDescription('This object represents the portion of the frequency spectrum in which the radio PHY will operate. bandUNII(1) - The U-NII (Unlicensed National Information Infrastructure) band represents the frequency range 5725.25 to 5823.75 MHz. bandMMDS(2) - The MMDS (Multichannel Multipoint Distribution Service) band represents the frequency range 2150.75 to 2688.25 MHz. bandOther(3)- For all other frequenciy ranges.')
cwrTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000))).setUnits('10Khz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrTxFrequency.setStatus('current')
if mibBuilder.loadTexts: cwrTxFrequency.setDescription('This object represents the center frequency that will be used to transmit data over the radio PHY. The specified transmit frequency must match the operating band and the capability of the RF resource connected to the radio.')
cwrRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000))).setUnits('10Khz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrRxFrequency.setStatus('current')
if mibBuilder.loadTexts: cwrRxFrequency.setDescription('This object represents the center frequency that will be used to receive transmissions over the radio PHY. The specified receive frequency must match the operating band and the capability of the RF resource connected to the radio. The transmit frequency at the local end must be identical to the receive frequency at the remote end for a wireless link to be established.')
cwrTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm - decibel milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrTxPower.setStatus('current')
if mibBuilder.loadTexts: cwrTxPower.setDescription('This object represents the power that the antenna will transmit. The minimum average transmit power for the U-NII or MMDS band is 0.01 microwatts (-80 dBm). Maximum average transmit power: For the MMDS band is 2 Watts i.e. (+33dBm). For the U-NII band is 100 milliwatts i.e. (+20dBm). The power is specified in dBm.')
cwrCableLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('dB - decibel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrCableLoss.setStatus('current')
if mibBuilder.loadTexts: cwrCableLoss.setDescription('This object represents the measured loss in signal power in dB that is imposed by the cable connecting the radio to the antenna head. This value enables the hardware to compensate for the cable loss by adjusting the gain appropriately. A value of 0 represents no degradation in signal due to the cable. This cable loss applies to the transmit antenna identified by cwrTxRfIndex.')
cwrOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notOperational", 1), ("selftest", 2), ("download", 3), ("txOnly", 4), ("acquiring", 5), ("receiveUp", 6), ("transmitUp", 7), ("linkOperational", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrOpStatus.setStatus('current')
if mibBuilder.loadTexts: cwrOpStatus.setDescription("This represents the current state of a radio Link. notOperational(1): The link is not operational. selftest(2) : Power on self test in progress download(3): Image download is in progress. txOnly(4): The radio link will switch to this state if the radio link is configured for transmit only. acquiring(5): Attempting to sync up with the far end transmitter. receiveUp(6): The receive side of the radio link has successfully sync'ed up with remote end. transmitUp(7): Transmit side of the radio link is up and running. linkOperational(8): The radio link is ready for duplex communication.")
cwrCableLossDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('dB - decibel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrCableLossDiversity.setStatus('current')
if mibBuilder.loadTexts: cwrCableLossDiversity.setDescription('This object represents the measured loss in signal power in dB that is imposed by the cable connecting the radio to the antenna head. This value enables the hardware to compensate for the cable loss by adjusting the gain appropriately. A value of 0 represents no degradation in signal due to the cable. This cable loss applies to the receive antenna identified by cwrRxRf2Index.')
cwrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("small", 1), ("medium", 2), ("large", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBurstSize.setStatus('current')
if mibBuilder.loadTexts: cwrBurstSize.setDescription('This object defines the time duration of the data burst sent over the air. The burst size is dependant on the capability of the ODU which is represented by the cwrBurstSizeGroup variable in the cwrRfTable. The user must set this object based on the value of cwrBurstSizeGroup in the cwrRfTable. The approximate time duration for each of the burst sizes are: small(1): 50 microseconds medium(2): 100 microseconds large(3): 200 microseconds')
cwrPhyQualityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1), )
if mibBuilder.loadTexts: cwrPhyQualityTable.setStatus('current')
if mibBuilder.loadTexts: cwrPhyQualityTable.setDescription('This table contains information about the radio PHY quality control parameters. Note that the parameters in this table are automatically determined by the parameters configured in the cwrRadioPhyTable. These parameters may further be used to tune the characteristics when needed.')
cwrPhyQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrPhyQualityEntry.setStatus('current')
if mibBuilder.loadTexts: cwrPhyQualityEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157). Each of these entries are indexed by the value of ifIndex as defined in RFC2863.')
cwrArqPctBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrArqPctBw.setStatus('current')
if mibBuilder.loadTexts: cwrArqPctBw.setDescription('This object specifies the percentage of the total radio PHY bandwidth available to the ARQ engine. Some or all of this allocated bandwidth is used to when detected errors are corrected. The percentage will be approximated to the closest value supported by the ARQ engine.')
cwrArqVoiceLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArqVoiceLatency.setStatus('current')
if mibBuilder.loadTexts: cwrArqVoiceLatency.setDescription('This object identifies the latency value for voice data.')
cwrArqDataLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrArqDataLatency.setStatus('current')
if mibBuilder.loadTexts: cwrArqDataLatency.setDescription('This object specifies the expected latency values for data. Reducing the latency, provides the ARQ engine less time to correct codeword errors. So if latency is reduced sufficiently, the data throughput will get effected. Also note that the latency values on both ends of the link should be kept identical, else the data throughput will be effected.')
cwrArqBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrArqBurstSize.setStatus('current')
if mibBuilder.loadTexts: cwrArqBurstSize.setDescription('This object specifies the maximum number of consecutive ARQ codewords that will be transmitted. ARQ codewords are transmitted for error correction. When an ARQ codeword is transmitted, a data codeword cannot be transmitted in that time slot, resulting jitter on the received data stream. Lower the value of the burst size, lower the peak jitter values.')
cwrArqTypicalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 45000000))).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArqTypicalBitRate.setStatus('current')
if mibBuilder.loadTexts: cwrArqTypicalBitRate.setDescription('This object specifies the typical error free bit rate that is possible on this link given the current configuration as specified in the cwrRadioPhyTable. If the radio channel is excessively noisy then the bit rate will be lower than this value')
cwrArqMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 45000000))).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArqMinBitRate.setStatus('current')
if mibBuilder.loadTexts: cwrArqMinBitRate.setDescription('This object specifies the minimum error free bit rate that is supported on this link given the current configuration as specified in the cwrRadioPhyTable and the settings in this table.')
cwrArqMaxLatencyJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22000))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArqMaxLatencyJitter.setStatus('current')
if mibBuilder.loadTexts: cwrArqMaxLatencyJitter.setDescription('This object specifies the maximum latency jitter introduced by the ARQ engine, based on the settings defined in this table.')
cwrArqReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrArqReset.setStatus('current')
if mibBuilder.loadTexts: cwrArqReset.setDescription('This object when set to true will force the PHY quality parameters to be reset from the cwrRadioPhyTable. Reading this object will always return false. This is useful when arbitrary changes to the ARQ parameters have to be reset to known consistent valid values.')
cwrArqOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrArqOn.setStatus('current')
if mibBuilder.loadTexts: cwrArqOn.setDescription('This object when set to true will enable the Automatic Repeat Query subsystem. Disabling the ARQ subsystem disables a major error correction mechanism of the radio, due to which an operating radio PHY may suffer large performance degradation.')
cwrPhyCorrectedBytesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2), )
if mibBuilder.loadTexts: cwrPhyCorrectedBytesTable.setStatus('current')
if mibBuilder.loadTexts: cwrPhyCorrectedBytesTable.setDescription('This provides information on the number of byte detected and corrected by the ARQ engine. The ARQ engine can correct up to 9 consecutive byte errors. This table keeps a count of the number of byte errors corrected over time. The values in this table are cumulated from link power up.')
cwrPhyCorrectedBytesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrPhyCorrectedBytesEntry.setStatus('current')
if mibBuilder.loadTexts: cwrPhyCorrectedBytesEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157). Each of these entries are indexed by the value of ifIndex as defined in RFC2863.')
cwrArq1ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq1ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq1ByteErrs.setDescription('This object identifies the number of 1 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq2ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq2ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq2ByteErrs.setDescription('This object identifies the number of consecutive 2 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq3ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq3ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq3ByteErrs.setDescription('This object identifies the number of consecutive 3 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq4ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq4ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq4ByteErrs.setDescription('This object identifies the number of consecutive 4 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq5ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq5ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq5ByteErrs.setDescription('This object identifies the number of consecutive 5 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq6ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq6ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq6ByteErrs.setDescription('This object identifies the number of consecutive 6 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq7ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq7ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq7ByteErrs.setDescription('This object identifies the number of consecutive 7 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq8ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq8ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq8ByteErrs.setDescription('This object identifies the number of consecutive 8 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrArq9ByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrArq9ByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwrArq9ByteErrs.setDescription('This object identifies the number of consecutive 9 byte errors that were corrected since the the radio link reached linkOperational state.')
cwrRfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1), )
if mibBuilder.loadTexts: cwrRfTable.setStatus('current')
if mibBuilder.loadTexts: cwrRfTable.setDescription('This table contains information about the state of the radio frequency resources used by the radio link.')
cwrRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrRfIndex"))
if mibBuilder.loadTexts: cwrRfEntry.setStatus('current')
if mibBuilder.loadTexts: cwrRfEntry.setDescription('This represents one entry in the cwrRfTable. This table is largely a read only table which provides details on the state of radio frequency resources available on the system. Physically each RF resource may be realized by one antenna and its associated control hardware. A single antenna and its associated electronics may act as more than 1 RF resource. When an RF resource acts as both a transmit and receive resource, the transmit and receive frequency ranges may overlap. It is indexed by the ifIndex and cwrRfIndex.')
cwrRfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: cwrRfIndex.setStatus('current')
if mibBuilder.loadTexts: cwrRfIndex.setDescription('This object, along with ifIndex, represents the index of this entry in the cwrRfTable.')
cwrRfResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfResIndex.setReference(' Refer to CwrRfEntityTable in CISCO-WIRELESS-EXP-MIB')
if mibBuilder.loadTexts: cwrRfResIndex.setStatus('current')
if mibBuilder.loadTexts: cwrRfResIndex.setDescription('This object represents the index into CwrRfEntityTable. This index identifies the radio frequency resource.')
cwrRFOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rxOnly", 0), ("txOnly", 1), ("rxAndTx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRFOpMode.setStatus('current')
if mibBuilder.loadTexts: cwrRFOpMode.setDescription('This object indicates if this RF resource is being used to either receive, transmit, or both.')
cwrTxFreqRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(215000, 582500))).setUnits('10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTxFreqRangeMin.setStatus('current')
if mibBuilder.loadTexts: cwrTxFreqRangeMin.setDescription('This object represents the minimum frequency at which this RF resource can transmit.')
cwrTxFreqRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(215000, 582500))).setUnits('10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTxFreqRangeMax.setStatus('current')
if mibBuilder.loadTexts: cwrTxFreqRangeMax.setDescription('This object represents the maximum frequency at which this RF resource can transmit.')
cwrRxFreqRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(215000, 582500))).setUnits('10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRxFreqRangeMin.setStatus('current')
if mibBuilder.loadTexts: cwrRxFreqRangeMin.setDescription('This object represents the lowest transmission frequency this RF resource can receive.')
cwrRxFreqRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(215000, 582500))).setUnits('10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRxFreqRangeMax.setStatus('current')
if mibBuilder.loadTexts: cwrRxFreqRangeMax.setDescription('This object represents the highest transmission frequency that this RF resource can receive.')
cwrMinTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 33))).setUnits('dBm Decibel milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrMinTxPower.setStatus('current')
if mibBuilder.loadTexts: cwrMinTxPower.setDescription('This object represents the minimum power that the RF subsystem can supply the antenna.')
cwrMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 33))).setUnits('dBm Decibel milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: cwrMaxTxPower.setDescription('This object represents the maximum power that the RF subsystem can supply the antenna.')
cwrRfTxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 10), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfTxOscState.setStatus('current')
if mibBuilder.loadTexts: cwrRfTxOscState.setDescription('This object represents the state of the transmit oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
cwrRfAntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfAntIndex.setStatus('current')
if mibBuilder.loadTexts: cwrRfAntIndex.setDescription('This object represents the index into the cwrAntennaTable. This object may be 0 if the cwrAntennaTable is not available.')
cwrRfRxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 12), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfRxOscState.setStatus('current')
if mibBuilder.loadTexts: cwrRfRxOscState.setDescription('This object represents the state of the receive oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
cwrRfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 100))).setUnits('Degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfTemperature.setStatus('current')
if mibBuilder.loadTexts: cwrRfTemperature.setDescription('This object represents the current temperature of the RF unit.')
cwrRfSupplyVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("withinSpecification", 1), ("outsideSpecification", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfSupplyVoltageState.setStatus('current')
if mibBuilder.loadTexts: cwrRfSupplyVoltageState.setDescription('This object specifies whether the voltage supply to the RF unit is within specifications or not.')
cwrRfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfStatus.setStatus('current')
if mibBuilder.loadTexts: cwrRfStatus.setDescription('This object specifies whether the RF resource is functioning properly or not. If it is functioning properly then it will be online(1), else offline(2).')
cwrRfControlChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRfControlChannelStatus.setStatus('current')
if mibBuilder.loadTexts: cwrRfControlChannelStatus.setDescription('Each RF resource has an associated control channel. The control channel is used to send/receive control information to the RF resource. For the RF resouce to operate properly, the control channel must be established. This object indicates the status of the control channel ok(1) - RF resource may be controlled successfully notOk(2) - Cannot talk to the RF resource.')
cwrBurstSizeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBurstSizeGroup.setStatus('current')
if mibBuilder.loadTexts: cwrBurstSizeGroup.setDescription('This object indicates the range or burst sizes supported by the ODU. This information is read from the ODU EEPROM. The user may set the cwrBurstSize MIB object in the cwrRadioPhyTable based on the value of this object.')
cwrIntFreqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2), )
if mibBuilder.loadTexts: cwrIntFreqTable.setStatus('current')
if mibBuilder.loadTexts: cwrIntFreqTable.setDescription('This table contains information about the state of the intermediate frequency subsystem on the wireless radio.')
cwrIntFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrIntFreqEntry.setStatus('current')
if mibBuilder.loadTexts: cwrIntFreqEntry.setDescription('This represents one entry in the cwrIntFreqTable. This table is largely a read only table which provides details on the state of the intermediate frequency subsystem available on the wireless radio.')
cwrIfTxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1, 1), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrIfTxOscState.setStatus('current')
if mibBuilder.loadTexts: cwrIfTxOscState.setDescription('This object represents the state of the IF transmit oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
cwrIfRxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1, 2), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrIfRxOscState.setStatus('current')
if mibBuilder.loadTexts: cwrIfRxOscState.setDescription('This object represents the state of the IF receive oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
cwrIfRefOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1, 3), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrIfRefOscState.setStatus('current')
if mibBuilder.loadTexts: cwrIfRefOscState.setDescription('This object represents the state of the IF reference oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
cwrIfResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrIfResIndex.setReference(' Refer to CwrIntFreqEntityTable in CISCO-WIRELESS-EXP-MIB')
if mibBuilder.loadTexts: cwrIfResIndex.setStatus('current')
if mibBuilder.loadTexts: cwrIfResIndex.setDescription('This object represents the index into CwrIntFreqEntityTable. It identifies the intermediate frequency resource.')
cwrIfInpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setUnits('10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrIfInpFreq.setStatus('current')
if mibBuilder.loadTexts: cwrIfInpFreq.setDescription('This object represents the IF input frequency.')
cwrIfOutFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 50000))).setUnits('10 kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrIfOutFreq.setStatus('current')
if mibBuilder.loadTexts: cwrIfOutFreq.setDescription('This object represents the IF output frequency.')
cwrLinkMetricsThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1), )
if mibBuilder.loadTexts: cwrLinkMetricsThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cwrLinkMetricsThresholdTable.setDescription('This table contains threshold values that are the trigger points for controlling the collection of the Link Metrics such as Codeword Errored Seconds and others.')
cwrLinkMetricsThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrLinkMetricsThreshEntry.setStatus('current')
if mibBuilder.loadTexts: cwrLinkMetricsThreshEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157). Each of these entries are indexed by the value of ifIndex as defined in RFC2863.')
cwrLinkCwESThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLinkCwESThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLinkCwESThresh.setDescription('If the number of Codeword Errors detected in a duration of 1 Operational second, is greater than this value then that second is counted as an Errored Second.')
cwrLinkLowCwDSThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLinkLowCwDSThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLinkLowCwDSThresh.setDescription('This object specifies low degraded second threshold. When the number of codeword errors detected are greater or equal than this value and less than cwrLinkHighCwDSThresh then that second is counted as a Codeword Degraded Second.')
cwrLinkHighCwDSThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLinkHighCwDSThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLinkHighCwDSThresh.setDescription('This object specifies high degraded second threshold. When then number of codeword errors detected are greater than this value then that second is counted as a Codeword Severely Errored Second.')
cwrLinkCSESThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLinkCSESThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLinkCSESThresh.setDescription('When the number of severely errored codewords detected consecutively in one second equals this threshold value, the second is counted as a Consecutively Severely Errored Second.')
cwrLink1HrESAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink1HrESAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink1HrESAlarmThresh.setDescription('This object specifies the one hour Codeword Error Second threshold. When the number of Codeword Error Seconds in a 1 Operational Hour period exceeds this limit cwrTrapLink1HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink1HrSESAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink1HrSESAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink1HrSESAlarmThresh.setDescription('This object specifies the one hour Codeword Severely Errored Seconds threshold. When the number of Codeword Severely Errored Seconds in a 1 Operational Hour period exceeds this limit cwrTrapLink1HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink1HrCSESAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink1HrCSESAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink1HrCSESAlarmThresh.setDescription('This object specifies the one hour Codeword Consecutively Severely Errored Seconds threshold. When the number of Codeword Severely Errored Seconds in a 1 Operational Hour period exceeds this limit cwrTrapLink1HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink1HrDCMAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink1HrDCMAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink1HrDCMAlarmThresh.setDescription('This object specifies the one hour Degraded Codeword Minute threshold. When the number of Degraded Codeword Minutes in a 1 Operational Hour period exceeds this limit cwrTrapLink1HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink24HrESAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink24HrESAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink24HrESAlarmThresh.setDescription('This object specifies the 24 hour Codeword Error Second threshold. When the number of Codeword Error Seconds in a 24 Operational Hour period exceeds this limit cwrTrapLink24HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink24HrSESAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink24HrSESAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink24HrSESAlarmThresh.setDescription('This object specifies the one hour Codeword Severely Errored Seconds threshold. When the number of Codeword Severely Errored Seconds in a 1 Operational Hour period exceeds this limit cwrTrapLink24HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink24HrCSESAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink24HrCSESAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink24HrCSESAlarmThresh.setDescription('This object specifies the one hour Codeword Consecutively Severely Errored Seconds threshold. When the number of Codeword Severely Errored Seconds in a 1 Operational Hour period exceeds this limit cwrTrapLink24HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrLink24HrDCMAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLink24HrDCMAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cwrLink24HrDCMAlarmThresh.setDescription('This object specifies the one hour Degraded Codeword Minute threshold. When the number of Degraded Codeword Minutes in a 1 Operational Hour period exceeds this limit cwrTrapLink24HrThresh trap will be generated. Time measurement starts after the first operational second.')
cwrCumulativeMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2), )
if mibBuilder.loadTexts: cwrCumulativeMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cwrCumulativeMetricsTable.setDescription('This table contains metrics used to measure the quality of the radio link identified by the ifIndex. The metrics in this table are cumulated since the last time the system powered up.')
cwrCumulativeMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrCumulativeMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cwrCumulativeMetricsEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157). Each of these entries are indexed by the value of ifIndex as defined in RFC2863.')
cwrAvailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrAvailableSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrAvailableSeconds.setDescription('This object represents the number of Available Seconds cumulated since the link was powered up. It is equal to: Error Free Seconds + Errored Seconds - Severely Errored Seconds.')
cwrUnAvailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrUnAvailableSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrUnAvailableSeconds.setDescription('This object represents the number of seconds that the link was not available for use. It is equal to: Severely Errored Seconds + Sync Loss Seconds.')
cwrSyncLossSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSyncLossSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrSyncLossSeconds.setDescription('This object represents the number of Link Admin Up Seconds during which the radio link was out of sync with the remote end.')
cwrPctErrorFreeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrPctErrorFreeSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrPctErrorFreeSeconds.setDescription('This object represents the ratio of cumulative Codeword Error Free Seconds (EFS) to Link Admin Up seconds, expressed as a percentage.')
cwrPctErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrPctErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrPctErroredSeconds.setDescription('This object represents the ratio of cumulative Codeword Errored Seconds (ES) to Link Admin Up seconds, expressed as a percentage.')
cwrPctSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrPctSeverelyErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrPctSeverelyErroredSeconds.setDescription('This object represents the ratio of cumulative Codeword Severely Errored Seconds (SES) to Link Admin Up seconds, expressed as a percentage.')
cwrPctAvailSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrPctAvailSeconds.setStatus('current')
if mibBuilder.loadTexts: cwrPctAvailSeconds.setDescription('This object represents the ratio of cumulative Available seconds to Link Admin Up seconds, expressed as a percentage.')
cwrPctCwDegradedMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrPctCwDegradedMinutes.setStatus('current')
if mibBuilder.loadTexts: cwrPctCwDegradedMinutes.setDescription('This object represents the ratio of cumulative Codeword Degraded Minutes to Link Admin Up seconds, expressed as a percentage.')
cwrSyncSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSyncSuccessCount.setStatus('current')
if mibBuilder.loadTexts: cwrSyncSuccessCount.setDescription('This object represents number of times the radio link successfully synchronized with the far end.')
cwrSyncFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSyncFailureCount.setStatus('current')
if mibBuilder.loadTexts: cwrSyncFailureCount.setDescription('This object represents number of times the link attempted to synchronize with the far end but failed to.')
cwrManagedSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrManagedSyncLoss.setStatus('current')
if mibBuilder.loadTexts: cwrManagedSyncLoss.setDescription('This object represents number of times the radio link layer was shutdown by operator intervention or a higher layer protocol.')
cwrAutomaticSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrAutomaticSyncLoss.setStatus('current')
if mibBuilder.loadTexts: cwrAutomaticSyncLoss.setDescription('This object represents number of times the radio link was synchronized but lost synchronization with the remote end without manual or higher layer protocol layer intervention.')
cwrLastSyncSuccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrLastSyncSuccessTime.setStatus('current')
if mibBuilder.loadTexts: cwrLastSyncSuccessTime.setDescription('This object represents elapsed time since the radio link successfully synchronized with the remote end.')
cwrLastSyncFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 14), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrLastSyncFailTime.setStatus('current')
if mibBuilder.loadTexts: cwrLastSyncFailTime.setDescription('This object represents elapsed time since the radio link lost synchronization with the remote end.')
cwrEffectivePhyDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrEffectivePhyDataRate.setStatus('current')
if mibBuilder.loadTexts: cwrEffectivePhyDataRate.setDescription('This object represents the effective data throughput of this link while the link was synchronized.')
cwrPctEffectivePhyDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 2, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrPctEffectivePhyDataRate.setStatus('current')
if mibBuilder.loadTexts: cwrPctEffectivePhyDataRate.setDescription('This object represents the ratio of total error free codewords received to the total codewords received as a percentage.')
cwr24HrMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3), )
if mibBuilder.loadTexts: cwr24HrMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cwr24HrMetricsTable.setDescription('This table contains metrics collected over the duration of 24 hours. This table is updated once every day for 32 days. Therefore, this table will have a maximum of 32 entries that provide cumulative status of the link, identified by ifIndex.')
cwr24HrMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwr24HrMetricsIndex"))
if mibBuilder.loadTexts: cwr24HrMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cwr24HrMetricsEntry.setDescription('This represents one entry in the cwr24HrMetricsTable indexed by ifIndex and cwr24HrMetricsIndex. The first entry in the table (cwr24HrMetricsIndex = 1) represents the chronologically oldest data available.')
cwr24HrMetricsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cwr24HrMetricsIndex.setStatus('current')
if mibBuilder.loadTexts: cwr24HrMetricsIndex.setDescription('Each entry represents the sum of the metrics from the previous 24 hour entry + the 24 hour period immdeiately prior to the most recent update.')
cwr24HrUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cwr24HrUpdateTime.setDescription('This object represents time in seconds since system power up at which time this entry was updated.')
cwr24HrErrorFreeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 3), CwrCwErrorFreeSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrErrorFreeSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr24HrErrorFreeSeconds.setDescription('This object represents the cumulative Codeword Error Free Seconds (EFS) detected since link power up, captured at cwr24HrUpdateTime.')
cwr24HrErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 4), CwrCwErroredSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr24HrErroredSeconds.setDescription('This object represents the number of Codeword Error Seconds (ES) detected since link power up, captured at cwr24HrUpdateTime.')
cwr24HrSevErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 5), CwrCwSeverelyErroredSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrSevErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr24HrSevErroredSeconds.setDescription('This object represents the number of Codeword Severely Error Seconds (SES) detected since link power up, captured at cwr24HrUpdateTime.')
cwr24HrConsecSvErrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 6), CwrCwConsecutiveSevErrSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrConsecSvErrSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr24HrConsecSvErrSeconds.setDescription('This object represents the number of Codeword Consecutively Severely Error Seconds (CSES) detected since link power up, captured at cwr24HrUpdateTime.')
cwr24HrDegradedMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 7), CwrCwDegradedMinute()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrDegradedMinutes.setStatus('current')
if mibBuilder.loadTexts: cwr24HrDegradedMinutes.setDescription('This object represents the number of Codeword Degraded Minutes (DM) detected since link power up, captured at cwr24HrUpdateTime.')
cwr24HrTotalErroredCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 8), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrTotalErroredCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr24HrTotalErroredCodewords.setDescription('This object represents the total number of errored codewords detected since link power up, captured at cwr24HrUpdateTime.')
cwr24HrTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 3, 1, 9), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr24HrTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr24HrTotalCodewords.setDescription('This object represents the total number of codewords received on this link since link power up, captured at cwr24HrUpdateTime.')
cwr1HrMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4), )
if mibBuilder.loadTexts: cwr1HrMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cwr1HrMetricsTable.setDescription('This table contains metrics collected over the duration of one hour. This table will have a maximum of 24 entries providing cumulative status of the link, identified by ifIndex, over the past 24 hours. This table is updated once every hour.')
cwr1HrMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwr1HrMetricsIndex"))
if mibBuilder.loadTexts: cwr1HrMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cwr1HrMetricsEntry.setDescription('This represents one entry in the cwr1HrMetricsTable indexed by ifIndex and cwr1HrMetricsIndex. The first entry in the table (cwr1HrMetricsIndex = 1) represents the chronologically oldest data available.')
cwr1HrMetricsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cwr1HrMetricsIndex.setStatus('current')
if mibBuilder.loadTexts: cwr1HrMetricsIndex.setDescription('Each entry represents the sum of the metrics from the previous 1 hour entry + the 1 hour period immdeiately prior to the most recent update.')
cwr1HrUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cwr1HrUpdateTime.setDescription('This object represents time in seconds since system power up at which time this entry was updated.')
cwr1HrErrorFreeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 3), CwrCwErrorFreeSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrErrorFreeSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1HrErrorFreeSeconds.setDescription('This object represents the cumulative Codeword Error Free Seconds (EFS) detected since link power up, captured at cwr1HrUpdateTime.')
cwr1HrErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 4), CwrCwErroredSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1HrErroredSeconds.setDescription('This object represents the cumulative Codeword Errored Seconds (ES) detected since link power up, captured at cwr1HrUpdateTime.')
cwr1HrSevErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 5), CwrCwSeverelyErroredSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrSevErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1HrSevErroredSeconds.setDescription('This object represents the cumulative Codeword Severely Errored Seconds (SES) detected since link power up, captured at cwr1HrUpdateTime.')
cwr1HrConsecSvErrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 6), CwrCwConsecutiveSevErrSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrConsecSvErrSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1HrConsecSvErrSeconds.setDescription('This object represents the cumulative Codeword Consecutive Severely Errored Seconds (CSES) detected since link power up, captured at cwr1HrUpdateTime.')
cwr1HrDegradedMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 7), CwrCwDegradedMinute()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrDegradedMinutes.setStatus('current')
if mibBuilder.loadTexts: cwr1HrDegradedMinutes.setDescription('This object represents the cumulative Codeword Degraded Minutes detected since link power up, captured at cwr1HrUpdateTime.')
cwr1HrErroredCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 8), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrErroredCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr1HrErroredCodewords.setDescription('This object represents the cumulative errored codewords detected since link power up, captured at cwr1HrUpdateTime.')
cwr1HrTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 4, 1, 9), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1HrTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr1HrTotalCodewords.setDescription('This object represents the cumulative total received codewords detected since link power up, captured at cwr1HrUpdateTime.')
cwr1MinMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5), )
if mibBuilder.loadTexts: cwr1MinMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cwr1MinMetricsTable.setDescription('This table contains metrics collected over the duration of one minute. This table will have a maximum of 60 entries providing cumulative status of the link, identified by ifIndex, over the past 60 minutes. This table is updated once every minute.')
cwr1MinMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwr1MinMetricsIndex"))
if mibBuilder.loadTexts: cwr1MinMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cwr1MinMetricsEntry.setDescription('This represents one entry in the cwr1MinMetricsTable indexed by ifIndex and cwr1MinMetricsIndex. The first entry in the table (cwr1MinMetricsIndex = 1) represents the chronologically oldest data available.')
cwr1MinMetricsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: cwr1MinMetricsIndex.setStatus('current')
if mibBuilder.loadTexts: cwr1MinMetricsIndex.setDescription('Each entry represents the sum of the metrics from the previous 1 minute entry + the 1 minute period immdeiately prior to the most recent update.')
cwr1MinUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cwr1MinUpdateTime.setDescription('This object represents time in seconds since system power up at which time this entry was updated.')
cwr1MinErrorFreeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 3), CwrCwErrorFreeSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinErrorFreeSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1MinErrorFreeSeconds.setDescription('This object represents the cumulative Codeword Error Free Seconds (EFS) detected since link power up, captured at cwr1MinUpdateTime.')
cwr1MinErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 4), CwrCwErroredSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1MinErroredSeconds.setDescription('This object represents the cumulative Codeword Errored Seconds (ES) detected since link power up, captured at cwr1MinUpdateTime.')
cwr1MinSevErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 5), CwrCwSeverelyErroredSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinSevErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1MinSevErroredSeconds.setDescription('This object represents the cumulative Codeword Severely Errored Seconds (SES) detected since link power up, captured at cwr1MinUpdateTime.')
cwr1MinConsecSvCwErrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 6), CwrCwConsecutiveSevErrSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinConsecSvCwErrSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1MinConsecSvCwErrSeconds.setDescription('This object represents the cumulative Codeword Consecutively Severely Errored Seconds (CSES) detected since link power up, captured at cwr1MinUpdateTime.')
cwr1MinDegradedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 7), CwrCwDegradedSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinDegradedSeconds.setStatus('current')
if mibBuilder.loadTexts: cwr1MinDegradedSeconds.setDescription('This object represents the cumulative Codeword Degraded Seconds (DS) detected since link power up, captured at cwr1MinUpdateTime.')
cwr1MinErroredCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 8), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinErroredCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr1MinErroredCodewords.setDescription('This object represents the cumulative errored codewords detected since link power up, captured at cwr1MinUpdateTime.')
cwr1MinCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 5, 1, 9), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1MinCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr1MinCodewords.setDescription('This object represents the cumulative total received codewords detected since link power up, captured at cwr1MinUpdateTime.')
cwr1SecMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6), )
if mibBuilder.loadTexts: cwr1SecMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cwr1SecMetricsTable.setDescription('This table contains metrics collected over a duration of 1 second. The data in this table is derived directly from the hardware. This table will have a maximum of 60 entries providing cumulative status of the link, identified by ifIndex, over the past 60 seconds. This table is updated once every second.')
cwr1SecMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwr1SecIndex"))
if mibBuilder.loadTexts: cwr1SecMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cwr1SecMetricsEntry.setDescription('This represents one entry in the cwr1SecMetricsTable indexed by ifIndex and cwr1SecMetricsIndex. The first entry in the table (cwr1SecIndex = 1) represents the chronologically oldest data available.')
cwr1SecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: cwr1SecIndex.setStatus('current')
if mibBuilder.loadTexts: cwr1SecIndex.setDescription('Each entry represents the sum of the metrics from the previous 1 second entry + the 1 second period immdeiately prior to the most recent update.')
cwr1SecUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cwr1SecUpdateTime.setDescription('This object represents time in seconds since system power up at which time this entry was updated.')
cwr1SecRxCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 3), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecRxCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr1SecRxCodewords.setDescription('This object represents the cumulative total number of codewords received by this radio link at the time this entry was updated.')
cwr1SecRSCodewordErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 4), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecRSCodewordErrors.setStatus('current')
if mibBuilder.loadTexts: cwr1SecRSCodewordErrors.setDescription('This object represents the cumulative uncorrectable codewords emitted by the Reed-Solomon error correction engine at the time this entry was updated. This is also called Pre ARQ codeword error.')
cwr1SecArqCodewordErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecArqCodewordErrors.setStatus('current')
if mibBuilder.loadTexts: cwr1SecArqCodewordErrors.setDescription('This object represents the cumulative number of uncorrectable codewords consumed by the Automatic Repeat Query error correction engine at the time this entry was updated. This is also called as Post ARQ codeword error.')
cwr1SecRxRrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecRxRrCount.setStatus('current')
if mibBuilder.loadTexts: cwr1SecRxRrCount.setDescription("This represents the cumulative number of unique RR's (Retransmit Requests) received (from the remote end) at the time this entry was updated. The remote end issues a Retransmit Request if it receives an uncorrectable codeword.")
cwr1SecRxRrEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecRxRrEventCount.setStatus('current')
if mibBuilder.loadTexts: cwr1SecRxRrEventCount.setDescription('This object represents the cumulative number of RRs (Retransmit Requests) that were serviced at the time this entry was updated.')
cwr1SecTxArqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecTxArqCount.setStatus('current')
if mibBuilder.loadTexts: cwr1SecTxArqCount.setDescription("This object represents cumulative number of unique ARQ's that were received by the transmit side of the local end at the time this entry was updated. This provides an indication of how error free the transmisisons of the local end of the link are from the the remote end's perspective.")
cwr1SecTxArqEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecTxArqEventCount.setStatus('current')
if mibBuilder.loadTexts: cwr1SecTxArqEventCount.setDescription("This object represents cumulative number of ARQ's that were serviced at the time this entry was updated. A serviced ARQ results in a re-transmitted codeword.")
cwr1SecCorrectedSyncByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecCorrectedSyncByteErrs.setStatus('current')
if mibBuilder.loadTexts: cwr1SecCorrectedSyncByteErrs.setDescription('This object represents the cumulative number of corrected sync byte errors, at the time this entry was updated.')
cwr1SecConsecutiveCwErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecConsecutiveCwErrs.setStatus('current')
if mibBuilder.loadTexts: cwr1SecConsecutiveCwErrs.setDescription('This object represents the size of the larget block of consecutive codeword errors received since this entry was last updated.')
cwr1SecPostARQGoodCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 6, 6, 1, 12), WirelessGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwr1SecPostARQGoodCodewords.setStatus('current')
if mibBuilder.loadTexts: cwr1SecPostARQGoodCodewords.setDescription('This object represents the cumulative number of error free codewords emitted by the Automatic Repeat Query error correction engine at the time this entry was updated. Also called as Post ARQ good codewords.')
cwrHistCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1), )
if mibBuilder.loadTexts: cwrHistCtrlTable.setStatus('current')
if mibBuilder.loadTexts: cwrHistCtrlTable.setDescription('This table contains information about histograms configured in hardware. When data is collected it will be stored in histogram bins as follows: All values (X < cwrStartBinValue) will be kept in the first histogram bin. Subsequent values will be distributed in the bins based on the cwrBinDelta. Last bin, will contain all values (X > (cwrStartBinValue + (cwrNumBins - 2) * cwrBinDelta)), i.e. any value that is greater than that may be stored in the last bin.')
cwrHistCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrHistIndex"))
if mibBuilder.loadTexts: cwrHistCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: cwrHistCtrlEntry.setDescription('This represents one entry in the cwrHistogramTable. It is indexed by the ifIndex, cwrHistIndex.')
cwrHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwrHistIndex.setStatus('current')
if mibBuilder.loadTexts: cwrHistIndex.setDescription('This object, along with ifIndex, is the index into this table and represents one entry in the table. The entry in this table for which cwrHistIndex = x is associated with the entry in cwrHistSummaryTable and the entry in cwrHistDataTable for which the index variable in those tables has the same value, x.')
cwrHistClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 2), CwrRadioSignalAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistClass.setStatus('current')
if mibBuilder.loadTexts: cwrHistClass.setDescription('This object represents the attribute that is being histogrammed.')
cwrRfResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 3), CwrRFZeroIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrRfResourceId.setStatus('current')
if mibBuilder.loadTexts: cwrRfResourceId.setDescription('This object identifies the RF resource for which this histogram specification applies. If this is 0, the agent will automatically use the most logical value for the specified cwrHistClass. If 0 has been specified then on reading this object the agent will return the RF resource id for which the histogram is being captured.')
cwrDspNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrDspNumber.setStatus('current')
if mibBuilder.loadTexts: cwrDspNumber.setDescription('This object identifies the DSP on which to create the histogram. If 0 is specified then the agent will automatically use the most logical DSP for the specified cwrHistClass parameter. If 0 has been specified then on reading this object the agent will return the DSP number that is being used to capture this histogram.')
cwrStartBinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrStartBinValue.setStatus('current')
if mibBuilder.loadTexts: cwrStartBinValue.setDescription('This object represents the maximum of the values that will be collected in the first bin of the histogram. All values < cwrStartBinValue will be kept in the first histogram bin.')
cwrBinDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2147483647))).setUnits('Powers of 2').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrBinDelta.setStatus('current')
if mibBuilder.loadTexts: cwrBinDelta.setDescription('This object represents the range of values of the sampled data that should be accounted for in one histogram bin. For example all data samples between x..y (where y = x + cwrBinDelta - 1), will be counted and placed in the same bin.')
cwrNumHistBins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 508))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrNumHistBins.setStatus('current')
if mibBuilder.loadTexts: cwrNumHistBins.setDescription('This object represents total number of bins to be created for the histogram.')
cwrUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrUpdateRate.setStatus('current')
if mibBuilder.loadTexts: cwrUpdateRate.setDescription('This object represents rate at which snapshots of the histogram will be available.')
cwrCollDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrCollDuration.setStatus('current')
if mibBuilder.loadTexts: cwrCollDuration.setDescription('This object specifies the duration for which this histogram must be accumulated. After successfully accumulating data for this amount of time the collection stops and the cwrHistStatus changes to statusCaptured.')
cwrOwnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 10), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrOwnerId.setStatus('current')
if mibBuilder.loadTexts: cwrOwnerId.setDescription('This object identifies management station that created this histogram specification.')
cwrHistBitShift = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistBitShift.setStatus('current')
if mibBuilder.loadTexts: cwrHistBitShift.setDescription('This object represents the number of bits by which the signal count is right shifted before it is stored in the histogram bin. This provides a mechanism to uniformly scale the collected histogram to account for overflows.')
cwrHistToneSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cwrCirculate", 1), ("cwrAverage", 2), ("cwrSpecific", 3))).clone('cwrAverage')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistToneSelection.setStatus('current')
if mibBuilder.loadTexts: cwrHistToneSelection.setDescription('This object identifies which tone in a burst should be sampled for capturing the data. cwrCirculate(1): The successive tones will be used for every successive burst. cwrAverage(2): The value of every tone in a burst will be averaged. cwrspecific(3): The identified tone is used.')
cwrHistToneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistToneValue.setStatus('current')
if mibBuilder.loadTexts: cwrHistToneValue.setDescription('If cwrHistToneSelection is cwrSpecificTone then this object identifies tone that should be used for sampling.')
cwrHistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 14), CwrCollectionAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistAction.setStatus('current')
if mibBuilder.loadTexts: cwrHistAction.setDescription('This object represents the action to be carried out on this histogram specification. If a histogram has been successfully captured then it must be cleared before an other capture may be initiated.')
cwrHistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 15), CwrCollectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrHistStatus.setStatus('current')
if mibBuilder.loadTexts: cwrHistStatus.setDescription("This object represents the current state of this histogram collection. Once the histogram collection is complete the status changes statusCaptured and the data is available for use. None of the parameters of a histogram specification may be modified when the specification is in statusInProgress. A statusCaptured or statusStopped histogram must be actionClear'ed before another histogram specification may be started. The histogram may be read accurately between the cwrUpdateRate intervals. If the read spans across the update time data from the previous and current updates can be mingled.")
cwrHistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwrHistRowStatus.setDescription('This object may be used to create or delete a histogram control specification.')
cwrHistPeriodicSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 1, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrHistPeriodicSum.setStatus('current')
if mibBuilder.loadTexts: cwrHistPeriodicSum.setDescription('The histogram data is updated every cwrUpdateRate seconds. When this object is set to true(1), the latest histogram data set is summed with the previous histogram data set and the cwrHistSummaryTable will reflect cumulative values. When set to false(2), only the latest data set is made available and the cwrHistSummarytable will reflect the latest values.')
cwrHistSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 2), )
if mibBuilder.loadTexts: cwrHistSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cwrHistSummaryTable.setDescription('This table contains histogram Summary collected based on the specifications in the cwrHistCtrlTable.')
cwrHistSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrHistIndex"))
if mibBuilder.loadTexts: cwrHistSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cwrHistSummaryEntry.setDescription('This represents one entry in the cwrHistSummaryTable. It is indexed by the ifIndex and cwrHistIndex.')
cwrHistUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrHistUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cwrHistUpdateTime.setDescription('This object represents the time in seconds since power up when this histogram snapshot was retrieved from the hardware.')
cwrHistMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrHistMin.setStatus('current')
if mibBuilder.loadTexts: cwrHistMin.setDescription('This object represents the minimum value of the data sample seen for this histogram.')
cwrHistMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrHistMax.setStatus('current')
if mibBuilder.loadTexts: cwrHistMax.setDescription('This object represents the maximum value of the data sample seen for this histogram.')
cwrHistMean = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrHistMean.setStatus('current')
if mibBuilder.loadTexts: cwrHistMean.setDescription('This object represents the arithemetic mean of the data sample values for this histogram.')
cwrHistDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 3), )
if mibBuilder.loadTexts: cwrHistDataTable.setStatus('current')
if mibBuilder.loadTexts: cwrHistDataTable.setDescription('This table contains histogram values collected based on the specifications in the cwrHistCtrlTable.')
cwrHistDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrHistIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrHistBinIndex"))
if mibBuilder.loadTexts: cwrHistDataEntry.setStatus('current')
if mibBuilder.loadTexts: cwrHistDataEntry.setDescription('This represents one entry in the cwrHistDataTable. It is indexed by the ifIndex and cwrHistIndex and cwrHistBinIndex.')
cwrHistBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 508)))
if mibBuilder.loadTexts: cwrHistBinIndex.setStatus('current')
if mibBuilder.loadTexts: cwrHistBinIndex.setDescription('This object represents the histogram bin number for the value in cwrValue.')
cwrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrValue.setStatus('current')
if mibBuilder.loadTexts: cwrValue.setDescription('This object represents the value in the histogram bin cwrHistBinIndex.')
cwrThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1), )
if mibBuilder.loadTexts: cwrThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cwrThresholdTable.setDescription('This table provides facilities to establish thresholds for the radio signals analyzed on the radio interface. A threshold identified in this table may be used to trigger a timeline capture in the cwrTlTable.')
cwrThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrThreshIndex"))
if mibBuilder.loadTexts: cwrThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cwrThresholdEntry.setDescription('This represents one entry in the cwrThresholdTable.')
cwrThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwrThreshIndex.setStatus('current')
if mibBuilder.loadTexts: cwrThreshIndex.setDescription('This object, along with ifIndex, identifies this entry.')
cwrThreshAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 2), CwrRadioSignalAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshAttribute.setStatus('current')
if mibBuilder.loadTexts: cwrThreshAttribute.setDescription('This represents the attribute of a radio link which needs to be thresholded. For each of these attributes, the cwrThreshType identifies the type of change to monitor. When that threshold is exceeded a Trap with appropriate parameters will be generated.')
cwrThreshType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 3), CwrThreshLimitType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshType.setStatus('current')
if mibBuilder.loadTexts: cwrThreshType.setDescription('This object represents the kind of change that needs to be monitored for the cwrThreshAttribute. An event is generated when the following condition is met.')
cwrThreshAntId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 4), CwrRFZeroIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshAntId.setStatus('current')
if mibBuilder.loadTexts: cwrThreshAntId.setDescription('This object identifies the RF resource for which this threshold should be defined.')
cwrThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshValue.setStatus('current')
if mibBuilder.loadTexts: cwrThreshValue.setDescription('This object represents the value to be compared against. The cwrThreshType determines the way in which it is used. It is used as follows: if cwrThreshType is .. highThresh : Notify if data sample exceeds the cwrThreshValue. lowThresh : Notify if data sample recedes below the cwrThreshValue. upChange : Notify if data sample increases by more than cwrThreshValue. downChange : Notify if data sample decreases by more than cwrThreshValue. upLimit : Notify if data sample crosses cwrThreshValue while increasing in value. lowLimit : Notify if data sample crosses cwrThreshValue while decreasing in value.')
cwrThreshHysteresisTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 6), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshHysteresisTime.setStatus('current')
if mibBuilder.loadTexts: cwrThreshHysteresisTime.setDescription('When radio signals oscillate around threshold values, they potentially flood the system with notifications. This object specifies the amount of time to wait before sending an identical notification if the oscillations continue. Notifications are not generated due to any threshold value which is reached/exceeded/crossed/etc. during this wait time')
cwrThreshLimitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 7), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshLimitTime.setStatus('current')
if mibBuilder.loadTexts: cwrThreshLimitTime.setDescription('This object specifies the amount of time for which the radio signal should stabilize before a trap is sent to indicate that the radio signal has stabilized.')
cwrThreshDspNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshDspNum.setStatus('current')
if mibBuilder.loadTexts: cwrThreshDspNum.setDescription('This object indicates the DSP used to monitor this threshold.')
cwrThreshRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrThreshRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwrThreshRowStatus.setDescription('This object represents the status of this threshold entry. It may be used to create a new threshold specification. For every cwrThreshAttrClass one threshold of cwrThreshType on one DSP may be created.')
cwrTlCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2), )
if mibBuilder.loadTexts: cwrTlCtrlTable.setStatus('current')
if mibBuilder.loadTexts: cwrTlCtrlTable.setDescription('This table contains information about timelines configured in hardware. The number of data values captured for each timeline is configured by setting the variable cwrTlNumDataValues. The captured data values can be retreived by reading the cwrTlDataTable.')
cwrTlCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrTlIndex"))
if mibBuilder.loadTexts: cwrTlCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: cwrTlCtrlEntry.setDescription('This represents one entry in the cwrTlCtrlTable. It is indexed by the ifIndex, cwrTlClass, cwrRfResourceId, cwrTlDspNum.')
cwrTlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwrTlIndex.setStatus('current')
if mibBuilder.loadTexts: cwrTlIndex.setDescription('This object, along with ifIndex, is the index into this table and represents one entry in the table. The entry in this table for which cwrTlIndex = x is associated with the entry in cwrTlSummaryTable and the entry in cwrTlDataTable for which the index variable in those tables has the same value, x.')
cwrTlClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 2), CwrRadioSignalAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlClass.setStatus('current')
if mibBuilder.loadTexts: cwrTlClass.setDescription('This object represents the attribute for which a timline capture is requested. When a timeline is requested, cwrTlNumDataValues worth of data will be captured.')
cwrTlRfResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 3), CwrRFZeroIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlRfResourceId.setStatus('current')
if mibBuilder.loadTexts: cwrTlRfResourceId.setDescription('This object identifies the RF resource for which this timeline specification applies. If this is 0 then the agent will automatically the most logical value for the specified cwrHistClass. If 0 has been specified then on reading this object the agent will return the RF resource id for which the timeline is being captured.')
cwrTlDspNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlDspNum.setStatus('current')
if mibBuilder.loadTexts: cwrTlDspNum.setDescription('This object identifies the DSP on which this timeline needs to be captures. If 0 is specified then the agent will automatically use the most logical DSP for the specified cwrTlClass parameter. If 0 has been specified on create then on reading this object the agent will return the DSP number that is being used to capture this timeline.')
cwrTlNumDataValues = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('number of data values').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlNumDataValues.setStatus('current')
if mibBuilder.loadTexts: cwrTlNumDataValues.setDescription('This object indicates the number of data values to be captured for this timeline. The captured data can be viewed by reading the cwrTlDataTable.')
cwrTlDecimationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlDecimationFactor.setStatus('current')
if mibBuilder.loadTexts: cwrTlDecimationFactor.setDescription('This object represents the number of successive data samples to be added and returned. This enables larger data sets to be captured even with limited cwrTlNumDataValues.')
cwrTlPreSumShift = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlPreSumShift.setStatus('current')
if mibBuilder.loadTexts: cwrTlPreSumShift.setDescription('This object represents the number of bits by which the raw data data should be right shifted before applying cwrTlDecimationFactor. This provides a mechanims of controlling overflow due to summation.')
cwrTlToneSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cwrCirculate", 1), ("cwrAverage", 2), ("cwrSpecific", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlToneSelection.setStatus('current')
if mibBuilder.loadTexts: cwrTlToneSelection.setDescription('This object identifies which tone in a burst should be used to sample data for the timeline. cwrCirculate(1): The successive tone will be used for every successive burst. cwrAverage(2): The value of every tone in a burst will be averaged. cwrspecific(3): The identified tone is used. DEFVAL { cwrAverage }')
cwrTlToneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlToneValue.setStatus('current')
if mibBuilder.loadTexts: cwrTlToneValue.setDescription('If cwrTlToneSelection is cwrSpecificTone then this object identifies the tone that should be used for sampling.')
cwrTlThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlThreshIndex.setStatus('current')
if mibBuilder.loadTexts: cwrTlThreshIndex.setDescription('This object specifies the index of the threshold that when triggered will start the data capture for this timeline. For a timeline data capture to be triggered by a threshold, the threshold must be defined on the same DSP as the timeline. If cwrTlThreshIndex is 0 then there is no threshold associated with this timeline and the data samples are captured and returned immediately. If cwrTlThresIndex is not 0, then the data samples are captured when the threshold fires.')
cwrTlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 11), CwrCollectionAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlAction.setStatus('current')
if mibBuilder.loadTexts: cwrTlAction.setDescription('This object represents the action to be carried out on this timeline specification. If a timeline has been successfully captured then it must be cleared before an other capture may be initiated.')
cwrTlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 12), CwrCollectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTlStatus.setStatus('current')
if mibBuilder.loadTexts: cwrTlStatus.setDescription("This object represents the current state of this timeline collection. Once the timeline collection is complete the status changes statusCaptured and the data is available for use. None of the parameters of a timeline specification may be modified when the specification is in statusInProgress. A statusCaptured or statusStopped histogram must be actionClear'ed before another timeline specification may be started.")
cwrTlPostTrigBufMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preTrigger", 1), ("postTrigger", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlPostTrigBufMgmt.setStatus('current')
if mibBuilder.loadTexts: cwrTlPostTrigBufMgmt.setDescription('Once a trigger fires, this object determines which portion of the collected data to capture for use. If it is: preTrigger(1) : Then most of the data collected prior to trigger is captured. postTrigger(2): Then most of the data collected after the trigger is captured.')
cwrTlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrTlRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwrTlRowStatus.setDescription('This object may be used to create or delete a timeline control specification. Once created data sampling starts based on the value of cwrTlAction. The data capture depends on the value of cwrTlThreshIndex. The actual data is collected based on the cwrTlThreshIndex, if cwrTlThreshIndex is 0 then there is no stop trigger associated with this timeline and the data samples are captured and returned immediately. If cwrTlThresIndex is not 0, then the data samples are captured when the threshold fires.')
cwrTlSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 3), )
if mibBuilder.loadTexts: cwrTlSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cwrTlSummaryTable.setDescription('This table contains Timeline Summary collected based on the specifications in the cwrTlCtrlTable.')
cwrTlSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrTlIndex"))
if mibBuilder.loadTexts: cwrTlSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cwrTlSummaryEntry.setDescription('This represents one entry in the cwrTlSummaryTable. It is indexed by the ifIndex and cwrTlIndex.')
cwrTlUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTlUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cwrTlUpdateTime.setDescription('This object represents the time in seconds since power up when this timeline capture was completed.')
cwrTlNumValues = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTlNumValues.setStatus('current')
if mibBuilder.loadTexts: cwrTlNumValues.setDescription('This object represents the number of values available in the timeline.')
cwrTlTriggerLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTlTriggerLoc.setStatus('current')
if mibBuilder.loadTexts: cwrTlTriggerLoc.setDescription('This object contains the value of cwrTlValueIndex which represents the entry in the cwrTlDataTable that caused the stop trigger to fire, thereby resulting in this timeline to be collected.')
cwrTlDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 4), )
if mibBuilder.loadTexts: cwrTlDataTable.setStatus('current')
if mibBuilder.loadTexts: cwrTlDataTable.setDescription('This table contains data values collected for the timelines specified in the cwrTlCtrlTable. The number of data values displayed for each timeline is determined by the value specified for cwrTlNumDataValues in cwrTlCtrlTable.')
cwrTlDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrTlIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrTlValueIndex"))
if mibBuilder.loadTexts: cwrTlDataEntry.setStatus('current')
if mibBuilder.loadTexts: cwrTlDataEntry.setDescription('This represents one entry in the cwrTlDataTable. It is indexed by ifIndex, cwrTlIndex, and cwrTlValueIndex.')
cwrTlValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwrTlValueIndex.setStatus('current')
if mibBuilder.loadTexts: cwrTlValueIndex.setDescription('This object, along with ifIndex and cwrTlIndex, is the index into the timeline data table.')
cwrTlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTlValue.setStatus('current')
if mibBuilder.loadTexts: cwrTlValue.setDescription('This object represents the radio signal data sampled.')
cwrSnapshotCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1), )
if mibBuilder.loadTexts: cwrSnapshotCtrlTable.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotCtrlTable.setDescription('This table contains information about the snapshots configured in hardware. When data is collected it will be stored in cwrSnapDataTable.')
cwrSnapshotCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrSnapshotDspNum"))
if mibBuilder.loadTexts: cwrSnapshotCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotCtrlEntry.setDescription('This represents one entry in the cwrSnapshotCtrlTable It is indexed by the ifIndex and cwrSnapshotDspNum.')
cwrSnapshotDspNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cwrSnapshotDspNum.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotDspNum.setDescription('This object represents the DSP at which the snapshot needs to be collected.')
cwrSnapshotType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrSnapshotType.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotType.setDescription("This object represents the attribute that is being snapshoted by the hardware. When a snapshot request is issued up to 4 simultaneous radio signal attribute may be captured at once. The 4 attributes are specified by bit OR'ing the snapshot types identified below. When a snapshot specification is started all the specified attributes are captured simultaneously. The TX and RX types cannot be mixed. RX, Sync types can be mixed. When a snapshot request is issued up to four radio signal attributes may be requested at once, one from each set: =============================================== Type Set1 Set2 =============================================== RX y1n(x1) y2n(x2) H2k(x80) H1k(x40) - - Sync - FreqCorr(x8000) - FLL_FFT_Sp(x20000) TX CodecIn(x200) IFFTIn(x400) =============================================== =============================================== Type Set3 Set4 =============================================== RX Y2k(x8) Y1k(x4) h1n(x10) h2n(x20) zhat(x100) - Sync FreqOffCF(x2000)(*) BrstTimeCF(x1000)(*) - TT_FCorr(x10000) TX - RoundOut(x800) =============================================== (*) BrstTimeCF cannot be mixed with Set2 (*) FreqOffCF cannot be mixed with Set1 Note that only the Tx* attributes may be captured on DSP's 1, 2. The attributes are: RxRawBurstAnt1Y1n(0x01): This represents a snapshot of the received signal for RF resource 1. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxRawBurstAnt2Y2n(0x02): This represents a snapshot of the received signal for RF resource 2. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxSpectrumAnt1Y1k(0x04): This represents a snapshot of the spectrum of the received signal for RF resource 1. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxSpectrumAnt2Y2k(0x08): This represents a snapshot of the spectrum of the received signal for RF resource 2. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxTimeDomainChannelAnt1H1n(0x10): This represents a snapshot of the time domain channel for RF resource 1. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxTimeDomainChannelAnt2H2n(0x20): This represents a snapshot of the time domain channel for RF resource 2. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxFreqDomainChannelAnt1H1k(0x40): This represents a snapshot of the frequency domain channel for RF resource 1. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxFreqDomainChannelAnt2H2k(0x80), This represents a snapshot of the frequency domain channel for RF resource 2. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. RxConstellationZHatk(0x100): This represents a snapshot of the soft decisions. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. TxCodecInput(0x200): This represents a snapshot of input values to the Tx Code. Units: Real values. Value: 32 bit quantities. TxIFFTInput(0x400): This represents a snapshot of the IFFT signal for the Transmitted data. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. TxRoundOutput(0x800): This represents a snapshot of the Rounded Constellation signal for the Transmitted data. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. SyncBurstTimeCostFunc(0x1000): This represents the timing cost function for Sync bursts. Units: Real values. Value: 32 bit quantities. SynFreqOffsetCostFunc(0x2000): This represents a snapshot of the frequeny offsets. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. SyncFllFreqCorrelation(0x8000): This represents a snapshot of Frequency correlation. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. SyncFllTrainToneCorrelation(0x10000): This represents a snapshot of Frequency locked loop's Training tone correlation. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities. SyncFllFFTSpectrum(0x20000): This represents a snapshot of Frequency locked loop, FFT Spectrum. For every sample the real and imaginary components are captured. Units: (I, q) Value: 32 bit quantities.")
cwrSnapshotAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1, 1, 3), CwrCollectionAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrSnapshotAction.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotAction.setDescription('This object represents the action to be carried out on this snapshot specification. If a snapshot has been successfully captured then it must be cleared before an other capture may be initiated.')
cwrSnapshotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1, 1, 4), CwrCollectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapshotStatus.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotStatus.setDescription('This object represents the current status of this snapshot specification. When the status in statusInProgress none of the snapshot parameters can be configured. When the status is statusCaptured then data is available for use.')
cwrSnapshotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrSnapshotRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwrSnapshotRowStatus.setDescription('This object may be used to create or delete this snapshot specification.')
cwrSnapSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2), )
if mibBuilder.loadTexts: cwrSnapSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cwrSnapSummaryTable.setDescription('This table contains summary information for captured snapshots defined in cwrSnapshotCtrlTable.')
cwrSnapSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrSnapshotDspNum"))
if mibBuilder.loadTexts: cwrSnapSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cwrSnapSummaryEntry.setDescription('This represents one entry in the cwrSnapSummaryTable. It is indexed by the ifIndex and cwrSnapDspNum.')
cwrSnapAttr1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr1Id.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr1Id.setDescription('This object represents the first snapshot attribute value.')
cwrSnapAttr1Size = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr1Size.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr1Size.setDescription('This object represents the number of values captured for the snapshot cwrSnapAttr1Id.')
cwrSnapAttr2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr2Id.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr2Id.setDescription('This object represents the second snapshot attribute value.')
cwrSnapAttr2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr2Size.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr2Size.setDescription('This object represents the number of values captured for the snapshot cwrSnapAttr2Id.')
cwrSnapAttr3Id = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr3Id.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr3Id.setDescription('This object represents the third snapshot attribute value.')
cwrSnapAttr3Size = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr3Size.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr3Size.setDescription('This object represents the number of values captured for the snapshot cwrSnapAttr3Id.')
cwrSnapAttr4Id = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr4Id.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr4Id.setDescription('This object represents the third snapshot attribute value.')
cwrSnapAttr4Size = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrSnapAttr4Size.setStatus('current')
if mibBuilder.loadTexts: cwrSnapAttr4Size.setDescription('This object represents the number of values captured for the snapshot cwrSnapAttr4Id.')
cwrSnapDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 3), )
if mibBuilder.loadTexts: cwrSnapDataTable.setStatus('current')
if mibBuilder.loadTexts: cwrSnapDataTable.setDescription('This table contains snapshot values collected based on the specifications in the cwrSnapshotCtrlTable.')
cwrSnapDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-IF-MIB", "cwrSnapshotDspNum"), (0, "CISCO-WIRELESS-IF-MIB", "cwrSnapValueIndex"))
if mibBuilder.loadTexts: cwrSnapDataEntry.setStatus('current')
if mibBuilder.loadTexts: cwrSnapDataEntry.setDescription('This represents one entry in the cwrSnapDataTable. It is indexed by the ifIndex and cwrSnapValueIndex. The values in this table represent real numbers or complex numbers. If they are real numbers then cwrRealPart contains the data and cwrImaginaryPart is zero.')
cwrSnapValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cwrSnapValueIndex.setStatus('current')
if mibBuilder.loadTexts: cwrSnapValueIndex.setDescription('This object represents the snapshot entry index number.')
cwrRealPart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrRealPart.setStatus('current')
if mibBuilder.loadTexts: cwrRealPart.setDescription('The data sample value. Real part.')
cwrImaginaryPart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrImaginaryPart.setStatus('current')
if mibBuilder.loadTexts: cwrImaginaryPart.setDescription('The data sample value. Imaginary part if the attribute is represented by a complex number.')
cwrAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1), )
if mibBuilder.loadTexts: cwrAntennaTable.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaTable.setDescription('This table contains information about the antenns available for use.')
cwrAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1), ).setIndexNames((0, "CISCO-WIRELESS-IF-MIB", "cwrAntennaIndex"))
if mibBuilder.loadTexts: cwrAntennaEntry.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaEntry.setDescription('This represents one entry in the cwrAntennaTable. This table provides details on the antennas available for use on the local system. It is indexed by cwrAntennaIndex.')
cwrAntennaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cwrAntennaIndex.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaIndex.setDescription('This object represents the index of this entry in the cwrAntennaTable.')
cwrAntennaXDim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('Inches').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntennaXDim.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaXDim.setDescription('This object represents the dimension of the antenna in the X direction.')
cwrAntennaYDim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('Inches').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntennaYDim.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaYDim.setDescription('This object represents the dimension of the antenna in the Y direction.')
cwrAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntennaType.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaType.setDescription("This object represents antenna type for example 'dish-antenna'.")
cwrAntennaDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntennaDescr.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaDescr.setDescription('This object describes the antenna.')
cwrAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('dBi : decibel Isotropic').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntennaGain.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaGain.setDescription('This object represents the gain of this antenna.')
cwrAntennaPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vertical", 1), ("horizontal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrAntennaPolarization.setStatus('current')
if mibBuilder.loadTexts: cwrAntennaPolarization.setDescription('This object represents the electrirc polarization of the antanna.')
cwrTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1))
cwrLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cwrLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: cwrLoopbackTable.setDescription('This table provides facilities to establish loopback points in the radio hardware to exercise various sections of the hardware.')
cwrLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: cwrLoopbackEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157).')
cwrLocalLoopbackPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("codec", 1), ("framer", 2), ("fir", 3), ("if", 4), ("rf", 5), ("rfDiversity", 6), ("ifMain", 7), ("ifDiversity", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrLocalLoopbackPoint.setStatus('current')
if mibBuilder.loadTexts: cwrLocalLoopbackPoint.setDescription("This object represents the point in the system where the data signal is looped back. none(0) - no loopback codec(1) - loopback at the Encoder/Decoder module. This exercises the framer, and codec modules framer(2) - loopback at the 'framer' module. fir(3) - loopback at the 'Finite Impulse Response' module. This exercises the framer, codec, and FIR modules. if(4) - loopback at the 'Internal Frequency' module using both the main and the diversity receive paths. This exercises the framer, codec, FIR, and IF modules. rf(5) - loopback at the main RF unit via the main receive path in the IF module. This exercises the framer, codec, FIR, IF, and RF modules. rfDiversity(6) - loopback at the main RF unit but route it through the diversity receive path in the IF module. This exercises the framer, codec, FIR, IF, and RF modules. ifMain(7) - loopack at the IF module using only the Main receive path. This exercises the framer, codec, FIR, and IF modules. ifDiversity(8) - loopack at the IF module using only the diversity receive path. This exercises the framer, codec, FIR, and IF modules.")
cwrScopePortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cwrScopePortTable.setStatus('current')
if mibBuilder.loadTexts: cwrScopePortTable.setDescription('This table provides facilities to redirect a portion of the signal being processed by a DSP to a scope port on the radio. An oscilloscope may be connected to the scope port to analyze the signal.')
cwrScopePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrScopePortEntry.setStatus('current')
if mibBuilder.loadTexts: cwrScopePortEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of propWirelessP2P(157).')
cwrScopePortOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrScopePortOn.setStatus('current')
if mibBuilder.loadTexts: cwrScopePortOn.setDescription('If set to true(1), then the DSP identified by cwrScopePortDsp, will redirect a portion of the output signal for the attribute identified by cwrScopeAttribute to the scope port.')
cwrScopePortDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrScopePortDsp.setStatus('current')
if mibBuilder.loadTexts: cwrScopePortDsp.setDescription('This identifies the DSP that should redirect a portion of the signal data to the scope port.')
cwrScopePortAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrScopePortAttribute.setStatus('current')
if mibBuilder.loadTexts: cwrScopePortAttribute.setDescription('This represents the attribute to be redirected to the scope port. The attributes that may be redirected to scope port is the same as that identified in cwrSnapshotType.')
cwrRadioTrapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 1, 1), )
if mibBuilder.loadTexts: cwrRadioTrapTable.setStatus('current')
if mibBuilder.loadTexts: cwrRadioTrapTable.setDescription('This table provides information about the last trap that was generated on this interface.')
cwrRadioTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrRadioTrapEntry.setStatus('current')
if mibBuilder.loadTexts: cwrRadioTrapEntry.setDescription('This represents one entry in this table.')
cwrTrapReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrTrapReason.setStatus('current')
if mibBuilder.loadTexts: cwrTrapReason.setDescription('The explanation string for the event trap cwrEventId.')
cwrTrapConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 1)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapReason"))
if mibBuilder.loadTexts: cwrTrapConfigMismatch.setStatus('current')
if mibBuilder.loadTexts: cwrTrapConfigMismatch.setDescription('The radio subsystem has detected that the combination of the configuration parameters that has been requested is inconsistent and cannot be supported. The cwrTrapReason is the textual description of what parameter causes the mismatch.')
cwrTrapInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 2)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapReason"))
if mibBuilder.loadTexts: cwrTrapInitFailure.setStatus('current')
if mibBuilder.loadTexts: cwrTrapInitFailure.setDescription('The radio subsystem has failed to initialize the hardware successfully. This implies that there is a critical error condition in the associated hardware. The cwrTrapReason specifies the reason the init failed.')
cwrTrapLinkQuality = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 3)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapReason"))
if mibBuilder.loadTexts: cwrTrapLinkQuality.setStatus('current')
if mibBuilder.loadTexts: cwrTrapLinkQuality.setDescription('The radio subsystem has detected a significant change in the radio link quality. The cwrTrapReason will describe the quality.')
cwrTrapLinkSyncLost = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrTrapLinkSyncLost.setStatus('current')
if mibBuilder.loadTexts: cwrTrapLinkSyncLost.setDescription('The radio link has lost synchronization with the remote end.')
cwrTrapLinkSyncAcquired = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrTrapLinkSyncAcquired.setStatus('current')
if mibBuilder.loadTexts: cwrTrapLinkSyncAcquired.setDescription('The radio link has acquired synchronization with the remote end.')
cwrTrapIfRxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 6)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrIfRxOscState"))
if mibBuilder.loadTexts: cwrTrapIfRxOsc.setStatus('current')
if mibBuilder.loadTexts: cwrTrapIfRxOsc.setDescription('The IF receive frequency oscillator has changed state.')
cwrTrapIfTxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 7)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrIfTxOscState"))
if mibBuilder.loadTexts: cwrTrapIfTxOsc.setStatus('current')
if mibBuilder.loadTexts: cwrTrapIfTxOsc.setDescription('The IF transmit frequency oscillator has changed state.')
cwrTrapIfRefOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 8)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrIfRefOscState"))
if mibBuilder.loadTexts: cwrTrapIfRefOsc.setStatus('current')
if mibBuilder.loadTexts: cwrTrapIfRefOsc.setDescription('The IF Reference Frequency oscillator has changed state.')
cwrTrapRfSupplyVoltage = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 9)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRfSupplyVoltageState"))
if mibBuilder.loadTexts: cwrTrapRfSupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: cwrTrapRfSupplyVoltage.setDescription('The supply voltage to the RF resource has changed. The cwrRfSupplyVoltageState specifies whether the supply voltage is in spec or not.')
cwrTrapRfRxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 10)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRfRxOscState"))
if mibBuilder.loadTexts: cwrTrapRfRxOsc.setStatus('current')
if mibBuilder.loadTexts: cwrTrapRfRxOsc.setDescription('The RF receive frequency oscillator has changed state. The cwrRfIndex identifies the RF resource that is the cause of this trap. The cwrRfRxOscState specifies the state of the oscilator.')
cwrTrapRfTxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 11)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRfTxOscState"))
if mibBuilder.loadTexts: cwrTrapRfTxOsc.setStatus('current')
if mibBuilder.loadTexts: cwrTrapRfTxOsc.setDescription('The RF transmit frequency oscillator has changed state. The cwrRfIndex identifies the RF resource that is the cause of this trap. The cwrRfRxOscState specifies the state of the oscilator.')
cwrTrapRfTemp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 12)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRfTemperature"))
if mibBuilder.loadTexts: cwrTrapRfTemp.setStatus('current')
if mibBuilder.loadTexts: cwrTrapRfTemp.setDescription('The temperature of the RF module identified by cwrRfIndex has exceeded a defined reference.')
cwrTrapRfStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 13)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRfStatus"))
if mibBuilder.loadTexts: cwrTrapRfStatusChange.setStatus('current')
if mibBuilder.loadTexts: cwrTrapRfStatusChange.setDescription('This trap indicates that the RF resource either came online(1) or went offline(2). The cwrRfIndex will identify which resource changed state and cwrRfStatus will identify what state it is in.')
cwrTrapLink1HrThresh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 14)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapReason"))
if mibBuilder.loadTexts: cwrTrapLink1HrThresh.setStatus('current')
if mibBuilder.loadTexts: cwrTrapLink1HrThresh.setDescription('One of cwrLink1HrESAlarmThresh, cwrLink1HrSESAlarmThresh, cwrLink1HrCSESAlarmThresh, cwrLink1HrDCMAlarmThresh was was exceeded. The cwrTrapReason will identify which threshold was exceeded.')
cwrTrapLink24HrThresh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 2, 15)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapReason"))
if mibBuilder.loadTexts: cwrTrapLink24HrThresh.setStatus('current')
if mibBuilder.loadTexts: cwrTrapLink24HrThresh.setDescription('One of cwrLink24HrESAlarmThresh, cwrLink24HrSESAlarmThresh, cwrLink24HrCSESAlarmThresh, cwrLink24HrDCMAlarmThresh was was exceeded. The cwrTrapReason will identify which threshold was exceeded.')
cwrTrapThresh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 136, 2, 3, 1)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrThreshValue"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshHysteresisTime"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshLimitTime"))
if mibBuilder.loadTexts: cwrTrapThresh.setStatus('current')
if mibBuilder.loadTexts: cwrTrapThresh.setDescription('The radio subsystem generates this trap when a threshold crosses its specified limit. The parameters identify the following cwrThreshValue - The value that was crossed. cwrThreshHysteresisTime - The Hysteresis time that was specified. cwrThreshLimitTime - The Limit time that was specified.')
cwrRadioIfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 3))
cwrRadioIfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 1))
cwrRadioIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2))
cwrRadioBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 1, 1)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioPhyQualityGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioRfGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceReqLinkMetrics"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioTestGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceHistoryGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioTlGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioSnapshotGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioAntennaGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceRadioPhyByteErrGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrComplianceNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrRadioBasicCompliance = cwrRadioBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: cwrRadioBasicCompliance.setDescription('The compliance statement for devices that Point to Point wireless interface compliant to Cisco Systems Inc. specification.')
cwrComplianceRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 1)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrRadioNextIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrAcquisitionMode"), ("CISCO-WIRELESS-IF-MIB", "cwrSelfTest"), ("CISCO-WIRELESS-IF-MIB", "cwrBasePrivacySupport"), ("CISCO-WIRELESS-IF-MIB", "cwrTxRfIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRx1RfIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRx2RfIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrClockRefExt"), ("CISCO-WIRELESS-IF-MIB", "cwrAntAlignment"), ("CISCO-WIRELESS-IF-MIB", "cwrNumRxAntenna"), ("CISCO-WIRELESS-IF-MIB", "cwrBandwidth"), ("CISCO-WIRELESS-IF-MIB", "cwrThroughput"), ("CISCO-WIRELESS-IF-MIB", "cwrOperatingBand"), ("CISCO-WIRELESS-IF-MIB", "cwrTxFrequency"), ("CISCO-WIRELESS-IF-MIB", "cwrRxFrequency"), ("CISCO-WIRELESS-IF-MIB", "cwrTxPower"), ("CISCO-WIRELESS-IF-MIB", "cwrCableLoss"), ("CISCO-WIRELESS-IF-MIB", "cwrOpStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrCableLossDiversity"), ("CISCO-WIRELESS-IF-MIB", "cwrBurstSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioGroup = cwrComplianceRadioGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioGroup.setDescription('Group of objects implemented to configure a point to point wireless radio. This includes the cwrBurstSize object.')
cwrComplianceRadioPhyQualityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 2)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrArqPctBw"), ("CISCO-WIRELESS-IF-MIB", "cwrArqVoiceLatency"), ("CISCO-WIRELESS-IF-MIB", "cwrArqDataLatency"), ("CISCO-WIRELESS-IF-MIB", "cwrArqBurstSize"), ("CISCO-WIRELESS-IF-MIB", "cwrArqTypicalBitRate"), ("CISCO-WIRELESS-IF-MIB", "cwrArqMinBitRate"), ("CISCO-WIRELESS-IF-MIB", "cwrArqMaxLatencyJitter"), ("CISCO-WIRELESS-IF-MIB", "cwrArqReset"), ("CISCO-WIRELESS-IF-MIB", "cwrArqOn"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioPhyQualityGroup = cwrComplianceRadioPhyQualityGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioPhyQualityGroup.setDescription('Group of objects implemented to tune phy quality in the point to point wireless systems.')
cwrComplianceRadioRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 3)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrRfResIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRFOpMode"), ("CISCO-WIRELESS-IF-MIB", "cwrTxFreqRangeMin"), ("CISCO-WIRELESS-IF-MIB", "cwrTxFreqRangeMax"), ("CISCO-WIRELESS-IF-MIB", "cwrRxFreqRangeMin"), ("CISCO-WIRELESS-IF-MIB", "cwrRxFreqRangeMax"), ("CISCO-WIRELESS-IF-MIB", "cwrMinTxPower"), ("CISCO-WIRELESS-IF-MIB", "cwrMaxTxPower"), ("CISCO-WIRELESS-IF-MIB", "cwrRfTxOscState"), ("CISCO-WIRELESS-IF-MIB", "cwrRfAntIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrRfRxOscState"), ("CISCO-WIRELESS-IF-MIB", "cwrRfTemperature"), ("CISCO-WIRELESS-IF-MIB", "cwrRfSupplyVoltageState"), ("CISCO-WIRELESS-IF-MIB", "cwrRfStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrRfControlChannelStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrBurstSizeGroup"), ("CISCO-WIRELESS-IF-MIB", "cwrIfTxOscState"), ("CISCO-WIRELESS-IF-MIB", "cwrIfRxOscState"), ("CISCO-WIRELESS-IF-MIB", "cwrIfRefOscState"), ("CISCO-WIRELESS-IF-MIB", "cwrIfResIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrIfInpFreq"), ("CISCO-WIRELESS-IF-MIB", "cwrIfOutFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioRfGroup = cwrComplianceRadioRfGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioRfGroup.setDescription('Group of objects implemented to tune phy quality in the point to point wireless systems. This group includes cwrBurstSizeGroup.')
cwrComplianceReqLinkMetrics = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 4)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrLinkCwESThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLinkLowCwDSThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLinkHighCwDSThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLinkCSESThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink1HrESAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink1HrSESAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink1HrCSESAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink1HrDCMAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink24HrESAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink24HrSESAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink24HrCSESAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrLink24HrDCMAlarmThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrAvailableSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrUnAvailableSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrSyncLossSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrPctErrorFreeSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrPctErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrPctSeverelyErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrPctAvailSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwrPctCwDegradedMinutes"), ("CISCO-WIRELESS-IF-MIB", "cwrSyncSuccessCount"), ("CISCO-WIRELESS-IF-MIB", "cwrSyncFailureCount"), ("CISCO-WIRELESS-IF-MIB", "cwrManagedSyncLoss"), ("CISCO-WIRELESS-IF-MIB", "cwrAutomaticSyncLoss"), ("CISCO-WIRELESS-IF-MIB", "cwrLastSyncSuccessTime"), ("CISCO-WIRELESS-IF-MIB", "cwrLastSyncFailTime"), ("CISCO-WIRELESS-IF-MIB", "cwrEffectivePhyDataRate"), ("CISCO-WIRELESS-IF-MIB", "cwrPctEffectivePhyDataRate"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrUpdateTime"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrErrorFreeSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrSevErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrConsecSvErrSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrDegradedMinutes"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrTotalErroredCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr24HrTotalCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrUpdateTime"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrErrorFreeSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrSevErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrConsecSvErrSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrDegradedMinutes"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrErroredCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr1HrTotalCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinUpdateTime"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinErrorFreeSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinSevErroredSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinConsecSvCwErrSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinDegradedSeconds"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinErroredCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr1MinCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecUpdateTime"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecRxCodewords"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecRSCodewordErrors"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecArqCodewordErrors"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecRxRrCount"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecRxRrEventCount"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecTxArqCount"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecTxArqEventCount"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecCorrectedSyncByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecConsecutiveCwErrs"), ("CISCO-WIRELESS-IF-MIB", "cwr1SecPostARQGoodCodewords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceReqLinkMetrics = cwrComplianceReqLinkMetrics.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceReqLinkMetrics.setDescription('Required Radio link metrics objects for the point to point wireless systems.')
cwrComplianceRadioTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 5)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrLocalLoopbackPoint"), ("CISCO-WIRELESS-IF-MIB", "cwrScopePortOn"), ("CISCO-WIRELESS-IF-MIB", "cwrScopePortDsp"), ("CISCO-WIRELESS-IF-MIB", "cwrScopePortAttribute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioTestGroup = cwrComplianceRadioTestGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioTestGroup.setDescription('Group of objects implemented in the point to point wireless system for Testing the link.')
cwrComplianceHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 6)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrHistClass"), ("CISCO-WIRELESS-IF-MIB", "cwrRfResourceId"), ("CISCO-WIRELESS-IF-MIB", "cwrDspNumber"), ("CISCO-WIRELESS-IF-MIB", "cwrStartBinValue"), ("CISCO-WIRELESS-IF-MIB", "cwrBinDelta"), ("CISCO-WIRELESS-IF-MIB", "cwrNumHistBins"), ("CISCO-WIRELESS-IF-MIB", "cwrUpdateRate"), ("CISCO-WIRELESS-IF-MIB", "cwrCollDuration"), ("CISCO-WIRELESS-IF-MIB", "cwrOwnerId"), ("CISCO-WIRELESS-IF-MIB", "cwrHistStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrHistBitShift"), ("CISCO-WIRELESS-IF-MIB", "cwrHistToneSelection"), ("CISCO-WIRELESS-IF-MIB", "cwrHistToneValue"), ("CISCO-WIRELESS-IF-MIB", "cwrHistAction"), ("CISCO-WIRELESS-IF-MIB", "cwrHistRowStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrHistPeriodicSum"), ("CISCO-WIRELESS-IF-MIB", "cwrHistUpdateTime"), ("CISCO-WIRELESS-IF-MIB", "cwrHistMin"), ("CISCO-WIRELESS-IF-MIB", "cwrHistMax"), ("CISCO-WIRELESS-IF-MIB", "cwrHistMean"), ("CISCO-WIRELESS-IF-MIB", "cwrValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceHistoryGroup = cwrComplianceHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceHistoryGroup.setDescription('Group of objects implemented in the point to point wireless system for capturing histograms of radio signal parameters on the radio interface.')
cwrComplianceRadioTlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 7)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrThreshAttribute"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshType"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshAntId"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshValue"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshHysteresisTime"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshLimitTime"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshRowStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrThreshDspNum"), ("CISCO-WIRELESS-IF-MIB", "cwrTlClass"), ("CISCO-WIRELESS-IF-MIB", "cwrTlRfResourceId"), ("CISCO-WIRELESS-IF-MIB", "cwrTlDspNum"), ("CISCO-WIRELESS-IF-MIB", "cwrTlNumDataValues"), ("CISCO-WIRELESS-IF-MIB", "cwrTlDecimationFactor"), ("CISCO-WIRELESS-IF-MIB", "cwrTlPreSumShift"), ("CISCO-WIRELESS-IF-MIB", "cwrTlToneSelection"), ("CISCO-WIRELESS-IF-MIB", "cwrTlToneValue"), ("CISCO-WIRELESS-IF-MIB", "cwrTlThreshIndex"), ("CISCO-WIRELESS-IF-MIB", "cwrTlAction"), ("CISCO-WIRELESS-IF-MIB", "cwrTlStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrTlPostTrigBufMgmt"), ("CISCO-WIRELESS-IF-MIB", "cwrTlRowStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrTlUpdateTime"), ("CISCO-WIRELESS-IF-MIB", "cwrTlNumValues"), ("CISCO-WIRELESS-IF-MIB", "cwrTlTriggerLoc"), ("CISCO-WIRELESS-IF-MIB", "cwrTlValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioTlGroup = cwrComplianceRadioTlGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioTlGroup.setDescription('Group of objects implemented in the point to point wireless system for establishing thresholds and capturing timeline data.')
cwrComplianceRadioSnapshotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 8)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrSnapshotType"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapshotAction"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapshotStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapshotRowStatus"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr1Id"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr1Size"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr2Id"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr2Size"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr3Id"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr3Size"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr4Id"), ("CISCO-WIRELESS-IF-MIB", "cwrSnapAttr4Size"), ("CISCO-WIRELESS-IF-MIB", "cwrRealPart"), ("CISCO-WIRELESS-IF-MIB", "cwrImaginaryPart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioSnapshotGroup = cwrComplianceRadioSnapshotGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioSnapshotGroup.setDescription('Group of objects implemented in the point to point wireless system for capturing snapshots of various parameters on the radio interface.')
cwrComplianceRadioAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 9)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrAntennaXDim"), ("CISCO-WIRELESS-IF-MIB", "cwrAntennaYDim"), ("CISCO-WIRELESS-IF-MIB", "cwrAntennaType"), ("CISCO-WIRELESS-IF-MIB", "cwrAntennaDescr"), ("CISCO-WIRELESS-IF-MIB", "cwrAntennaGain"), ("CISCO-WIRELESS-IF-MIB", "cwrAntennaPolarization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioAntennaGroup = cwrComplianceRadioAntennaGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioAntennaGroup.setDescription('Group of objects implemented in the point to point wireless system for managing the antennas available in the system.')
cwrComplianceRadioPhyByteErrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 10)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrArq1ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq2ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq3ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq4ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq5ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq6ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq7ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq8ByteErrs"), ("CISCO-WIRELESS-IF-MIB", "cwrArq9ByteErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceRadioPhyByteErrGroup = cwrComplianceRadioPhyByteErrGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceRadioPhyByteErrGroup.setDescription('Group of objects implemented in the point to point wireless system for tracking the number of errored bytes that were automatically corrected.')
cwrComplianceNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 136, 3, 2, 11)).setObjects(("CISCO-WIRELESS-IF-MIB", "cwrTrapConfigMismatch"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapInitFailure"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapLinkQuality"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapLinkSyncLost"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapLinkSyncAcquired"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapIfRxOsc"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapIfTxOsc"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapIfRefOsc"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapRfSupplyVoltage"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapRfRxOsc"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapRfTxOsc"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapRfTemp"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapRfStatusChange"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapLink1HrThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapLink24HrThresh"), ("CISCO-WIRELESS-IF-MIB", "cwrTrapThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrComplianceNotifGroup = cwrComplianceNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cwrComplianceNotifGroup.setDescription('A group of notifications. Note that none of these notifications were originally defined with an OID having 0 as its next-to-last sub-identifier. Therefore, none of these notifications are reverse-mappable between SNMPv1 and SNMPv2/SNMPv3.')
mibBuilder.exportSymbols("CISCO-WIRELESS-IF-MIB", cwrSyncSuccessCount=cwrSyncSuccessCount, cwrTlDataTable=cwrTlDataTable, cwrArq6ByteErrs=cwrArq6ByteErrs, cwrLastSyncSuccessTime=cwrLastSyncSuccessTime, cwrHistBitShift=cwrHistBitShift, cwr1SecRSCodewordErrors=cwr1SecRSCodewordErrors, cwrIfRxOscState=cwrIfRxOscState, cwrHistMean=cwrHistMean, cwrArqTypicalBitRate=cwrArqTypicalBitRate, cwrAntennaEntry=cwrAntennaEntry, cwrRfControlChannelStatus=cwrRfControlChannelStatus, cwrRadioAntennaGroup=cwrRadioAntennaGroup, cwrLinkCwESThresh=cwrLinkCwESThresh, cwrSyncLossSeconds=cwrSyncLossSeconds, cwrRx1RfIndex=cwrRx1RfIndex, cwrTlRowStatus=cwrTlRowStatus, cwrRadioNextIndex=cwrRadioNextIndex, cwrAntennaTable=cwrAntennaTable, cwrComplianceHistoryGroup=cwrComplianceHistoryGroup, cwrTlDspNum=cwrTlDspNum, cwr1SecConsecutiveCwErrs=cwr1SecConsecutiveCwErrs, cwrAntennaType=cwrAntennaType, cwrSyncFailureCount=cwrSyncFailureCount, cwrHistClass=cwrHistClass, cwr24HrErroredSeconds=cwr24HrErroredSeconds, cwrAntennaDescr=cwrAntennaDescr, cwrStartBinValue=cwrStartBinValue, cwrRadioBaseTable=cwrRadioBaseTable, cwrEffectivePhyDataRate=cwrEffectivePhyDataRate, cwrTlValue=cwrTlValue, cwrOwnerId=cwrOwnerId, cwrComplianceRadioGroup=cwrComplianceRadioGroup, cwrHistMin=cwrHistMin, cwrRfIndex=cwrRfIndex, cwrSnapshotCtrlEntry=cwrSnapshotCtrlEntry, cwrThreshType=cwrThreshType, cwrRadioIfGroups=cwrRadioIfGroups, cwrRfTable=cwrRfTable, cwrOperatingBand=cwrOperatingBand, cwrRadioLatestTrap=cwrRadioLatestTrap, cwrScopePortTable=cwrScopePortTable, cwrHistToneValue=cwrHistToneValue, cwrComplianceRadioTestGroup=cwrComplianceRadioTestGroup, cwrArqMaxLatencyJitter=cwrArqMaxLatencyJitter, cwr1HrErroredSeconds=cwr1HrErroredSeconds, cwrRealPart=cwrRealPart, cwrSnapDataEntry=cwrSnapDataEntry, cwrPctSeverelyErroredSeconds=cwrPctSeverelyErroredSeconds, cwrTrapRfTxOsc=cwrTrapRfTxOsc, cwrSnapAttr2Size=cwrSnapAttr2Size, cwr1HrTotalCodewords=cwr1HrTotalCodewords, cwrTlDataEntry=cwrTlDataEntry, cwrTxFrequency=cwrTxFrequency, cwrSnapshotStatus=cwrSnapshotStatus, PYSNMP_MODULE_ID=ciscoWirelessIfMIB, cwr1SecCorrectedSyncByteErrs=cwr1SecCorrectedSyncByteErrs, cwr1MinErroredSeconds=cwr1MinErroredSeconds, cwr24HrDegradedMinutes=cwr24HrDegradedMinutes, cwrLink24HrESAlarmThresh=cwrLink24HrESAlarmThresh, cwrRfResIndex=cwrRfResIndex, cwrPctAvailSeconds=cwrPctAvailSeconds, cwrIfTxOscState=cwrIfTxOscState, cwrPctEffectivePhyDataRate=cwrPctEffectivePhyDataRate, cwrArq4ByteErrs=cwrArq4ByteErrs, cwrUpdateRate=cwrUpdateRate, cwrSnapAttr3Size=cwrSnapAttr3Size, cwrSnapAttr1Id=cwrSnapAttr1Id, cwr24HrUpdateTime=cwr24HrUpdateTime, cwrBinDelta=cwrBinDelta, cwr1MinErroredCodewords=cwr1MinErroredCodewords, cwrLink1HrCSESAlarmThresh=cwrLink1HrCSESAlarmThresh, cwrHistBinIndex=cwrHistBinIndex, cwrTlNumDataValues=cwrTlNumDataValues, cwrSnapshotRowStatus=cwrSnapshotRowStatus, cwrRadioHistoryGroup=cwrRadioHistoryGroup, cwrHistSummaryEntry=cwrHistSummaryEntry, cwrTrapLinkSyncLost=cwrTrapLinkSyncLost, cwrLoopbackTable=cwrLoopbackTable, cwrTrapRfTemp=cwrTrapRfTemp, cwrTlDecimationFactor=cwrTlDecimationFactor, cwrSnapAttr4Size=cwrSnapAttr4Size, cwrTrapLinkQuality=cwrTrapLinkQuality, cwrRadioMetricsGroup=cwrRadioMetricsGroup, cwrTlUpdateTime=cwrTlUpdateTime, cwrTrapLinkSyncAcquired=cwrTrapLinkSyncAcquired, cwrTlCtrlTable=cwrTlCtrlTable, cwrComplianceRadioPhyByteErrGroup=cwrComplianceRadioPhyByteErrGroup, cwrLink24HrCSESAlarmThresh=cwrLink24HrCSESAlarmThresh, cwrArq1ByteErrs=cwrArq1ByteErrs, cwrSnapAttr4Id=cwrSnapAttr4Id, cwrRadioBaseGroup=cwrRadioBaseGroup, cwrPhyQualityTable=cwrPhyQualityTable, cwrArqMinBitRate=cwrArqMinBitRate, cwrAntennaYDim=cwrAntennaYDim, cwr1SecArqCodewordErrors=cwr1SecArqCodewordErrors, cwrClockRefExt=cwrClockRefExt, ciscoWirelessIfMIB=ciscoWirelessIfMIB, cwrSnapDataTable=cwrSnapDataTable, cwrRfTxOscState=cwrRfTxOscState, cwrSnapSummaryTable=cwrSnapSummaryTable, cwrTrapRfStatusChange=cwrTrapRfStatusChange, cwr1MinCodewords=cwr1MinCodewords, cwr1SecRxRrCount=cwr1SecRxRrCount, cwrHistIndex=cwrHistIndex, cwrRfRxOscState=cwrRfRxOscState, cwrCableLoss=cwrCableLoss, cwrPctErrorFreeSeconds=cwrPctErrorFreeSeconds, cwrHistDataEntry=cwrHistDataEntry, cwrRfStatus=cwrRfStatus, cwrSelfTest=cwrSelfTest, cwrArq3ByteErrs=cwrArq3ByteErrs, cwrLink1HrESAlarmThresh=cwrLink1HrESAlarmThresh, cwrTlAction=cwrTlAction, cwrThresholdEntry=cwrThresholdEntry, cwrBurstSize=cwrBurstSize, cwrAntAlignment=cwrAntAlignment, cwr1MinMetricsTable=cwr1MinMetricsTable, cwr24HrConsecSvErrSeconds=cwr24HrConsecSvErrSeconds, cwrTrapIfRxOsc=cwrTrapIfRxOsc, cwrTlNumValues=cwrTlNumValues, cwrRfAntIndex=cwrRfAntIndex, cwrAntennaXDim=cwrAntennaXDim, cwrSnapshotAction=cwrSnapshotAction, cwrCollDuration=cwrCollDuration, cwrTlClass=cwrTlClass, cwrLinkHighCwDSThresh=cwrLinkHighCwDSThresh, cwrRfResourceId=cwrRfResourceId, cwrIfInpFreq=cwrIfInpFreq, cwrHistUpdateTime=cwrHistUpdateTime, cwrRadioThreshTraps=cwrRadioThreshTraps, cwrThreshAntId=cwrThreshAntId, cwrNumRxAntenna=cwrNumRxAntenna, cwrRadioPhyQualityGroup=cwrRadioPhyQualityGroup, cwrTxPower=cwrTxPower, cwrTlPostTrigBufMgmt=cwrTlPostTrigBufMgmt, cwrOpStatus=cwrOpStatus, cwrRadioFreqResGroup=cwrRadioFreqResGroup, cwrRadioTrapTable=cwrRadioTrapTable, cwrThreshDspNum=cwrThreshDspNum, cwrArqPctBw=cwrArqPctBw, cwrTestGroup=cwrTestGroup, cwrTlStatus=cwrTlStatus, cwr24HrMetricsEntry=cwr24HrMetricsEntry, cwrTlToneValue=cwrTlToneValue, cwrComplianceRadioRfGroup=cwrComplianceRadioRfGroup, cwrLastSyncFailTime=cwrLastSyncFailTime, cwrComplianceRadioTlGroup=cwrComplianceRadioTlGroup, cwr1MinSevErroredSeconds=cwr1MinSevErroredSeconds, cwrSnapAttr3Id=cwrSnapAttr3Id, cwr1SecTxArqEventCount=cwr1SecTxArqEventCount, cwrRadioBasicCompliance=cwrRadioBasicCompliance, cwrRfEntry=cwrRfEntry, cwrTrapRfRxOsc=cwrTrapRfRxOsc, cwrArqOn=cwrArqOn, cwrThreshLimitTime=cwrThreshLimitTime, cwrPctCwDegradedMinutes=cwrPctCwDegradedMinutes, cwrRadioMibObjects=cwrRadioMibObjects, cwrTlRfResourceId=cwrTlRfResourceId, cwrArqReset=cwrArqReset, cwrTxFreqRangeMin=cwrTxFreqRangeMin, cwr1SecPostARQGoodCodewords=cwr1SecPostARQGoodCodewords, cwrScopePortEntry=cwrScopePortEntry, cwrTrapConfigMismatch=cwrTrapConfigMismatch, cwr24HrMetricsTable=cwr24HrMetricsTable, cwrTrapIfRefOsc=cwrTrapIfRefOsc, cwrRadioBaseEntry=cwrRadioBaseEntry, cwrThreshIndex=cwrThreshIndex, cwrIfOutFreq=cwrIfOutFreq, cwrTlThreshIndex=cwrTlThreshIndex, cwrUnAvailableSeconds=cwrUnAvailableSeconds, cwrHistCtrlTable=cwrHistCtrlTable, cwrTrapReason=cwrTrapReason, cwrBurstSizeGroup=cwrBurstSizeGroup, cwrSnapAttr1Size=cwrSnapAttr1Size, cwrSnapshotType=cwrSnapshotType, cwrRxFreqRangeMax=cwrRxFreqRangeMax, cwrComplianceNotifGroup=cwrComplianceNotifGroup, cwrBandwidth=cwrBandwidth, cwrRadioTimelineGroup=cwrRadioTimelineGroup, cwrHistStatus=cwrHistStatus, cwr1HrConsecSvErrSeconds=cwr1HrConsecSvErrSeconds, cwrSnapshotDspNum=cwrSnapshotDspNum, cwrLink1HrDCMAlarmThresh=cwrLink1HrDCMAlarmThresh, cwrAntennaIndex=cwrAntennaIndex, cwrIntFreqEntry=cwrIntFreqEntry, cwrRfTemperature=cwrRfTemperature, cwrRadioNotification=cwrRadioNotification, cwr1HrUpdateTime=cwr1HrUpdateTime, cwrAvailableSeconds=cwrAvailableSeconds, cwrTrapIfTxOsc=cwrTrapIfTxOsc, cwrIfResIndex=cwrIfResIndex, cwrTlToneSelection=cwrTlToneSelection, cwrRFOpMode=cwrRFOpMode, cwrSnapValueIndex=cwrSnapValueIndex, cwrCableLossDiversity=cwrCableLossDiversity, cwrRxFrequency=cwrRxFrequency, cwrAcquisitionMode=cwrAcquisitionMode, cwrLinkLowCwDSThresh=cwrLinkLowCwDSThresh, cwr1HrMetricsTable=cwr1HrMetricsTable, cwrImaginaryPart=cwrImaginaryPart, cwrScopePortDsp=cwrScopePortDsp, cwrRadioDevTraps=cwrRadioDevTraps, cwr24HrTotalErroredCodewords=cwr24HrTotalErroredCodewords, cwrTrapThresh=cwrTrapThresh, cwr24HrSevErroredSeconds=cwr24HrSevErroredSeconds, cwr1HrMetricsEntry=cwr1HrMetricsEntry, cwrLink1HrSESAlarmThresh=cwrLink1HrSESAlarmThresh, cwr1HrErroredCodewords=cwr1HrErroredCodewords, cwr24HrErrorFreeSeconds=cwr24HrErrorFreeSeconds, cwr1SecRxRrEventCount=cwr1SecRxRrEventCount, cwr1MinErrorFreeSeconds=cwr1MinErrorFreeSeconds, cwrHistSummaryTable=cwrHistSummaryTable, cwrArq8ByteErrs=cwrArq8ByteErrs, cwrTlPreSumShift=cwrTlPreSumShift, cwrRadioPhyEntry=cwrRadioPhyEntry, cwrLink24HrDCMAlarmThresh=cwrLink24HrDCMAlarmThresh, cwrArqDataLatency=cwrArqDataLatency, cwr1MinDegradedSeconds=cwr1MinDegradedSeconds, cwrArq7ByteErrs=cwrArq7ByteErrs, cwrTlCtrlEntry=cwrTlCtrlEntry, cwrPhyCorrectedBytesTable=cwrPhyCorrectedBytesTable, cwrSnapshotCtrlTable=cwrSnapshotCtrlTable, cwrMinTxPower=cwrMinTxPower, cwrPctErroredSeconds=cwrPctErroredSeconds, cwrLinkCSESThresh=cwrLinkCSESThresh, cwrSnapAttr2Id=cwrSnapAttr2Id, cwrRfSupplyVoltageState=cwrRfSupplyVoltageState, cwrArq2ByteErrs=cwrArq2ByteErrs, cwr24HrMetricsIndex=cwr24HrMetricsIndex, cwr1SecMetricsTable=cwr1SecMetricsTable, cwrThroughput=cwrThroughput, cwrMaxTxPower=cwrMaxTxPower, cwrAntennaGain=cwrAntennaGain, cwrBasePrivacySupport=cwrBasePrivacySupport, cwr1MinMetricsEntry=cwr1MinMetricsEntry, cwr1SecIndex=cwr1SecIndex, cwrAntennaPolarization=cwrAntennaPolarization, cwrThreshAttribute=cwrThreshAttribute, cwrComplianceRadioAntennaGroup=cwrComplianceRadioAntennaGroup, cwrArqVoiceLatency=cwrArqVoiceLatency, cwrHistAction=cwrHistAction, cwrCumulativeMetricsEntry=cwrCumulativeMetricsEntry, cwrArq9ByteErrs=cwrArq9ByteErrs, cwrTlTriggerLoc=cwrTlTriggerLoc, cwrPhyQualityEntry=cwrPhyQualityEntry, cwrThreshHysteresisTime=cwrThreshHysteresisTime, cwrRadioTrapEntry=cwrRadioTrapEntry, cwrRadioSnapshotGroup=cwrRadioSnapshotGroup, cwrLink24HrSESAlarmThresh=cwrLink24HrSESAlarmThresh, cwrThreshRowStatus=cwrThreshRowStatus, cwrThresholdTable=cwrThresholdTable, cwrLinkMetricsThreshEntry=cwrLinkMetricsThreshEntry, cwrAutomaticSyncLoss=cwrAutomaticSyncLoss, cwr1SecRxCodewords=cwr1SecRxCodewords)
mibBuilder.exportSymbols("CISCO-WIRELESS-IF-MIB", cwrComplianceReqLinkMetrics=cwrComplianceReqLinkMetrics, cwrComplianceRadioPhyQualityGroup=cwrComplianceRadioPhyQualityGroup, cwrLinkMetricsThresholdTable=cwrLinkMetricsThresholdTable, cwrTrapLink24HrThresh=cwrTrapLink24HrThresh, cwrHistMax=cwrHistMax, cwrHistToneSelection=cwrHistToneSelection, cwrSnapSummaryEntry=cwrSnapSummaryEntry, cwrThreshValue=cwrThreshValue, cwrLocalLoopbackPoint=cwrLocalLoopbackPoint, cwrRadioIfConformance=cwrRadioIfConformance, cwrHistRowStatus=cwrHistRowStatus, cwrHistDataTable=cwrHistDataTable, cwr1MinMetricsIndex=cwr1MinMetricsIndex, cwr24HrTotalCodewords=cwr24HrTotalCodewords, cwr1HrErrorFreeSeconds=cwr1HrErrorFreeSeconds, cwrCumulativeMetricsTable=cwrCumulativeMetricsTable, cwrLoopbackEntry=cwrLoopbackEntry, cwrTxFreqRangeMax=cwrTxFreqRangeMax, cwrArq5ByteErrs=cwrArq5ByteErrs, cwrArqBurstSize=cwrArqBurstSize, cwrScopePortAttribute=cwrScopePortAttribute, cwrRadioIfCompliances=cwrRadioIfCompliances, cwrTlIndex=cwrTlIndex, cwr1HrSevErroredSeconds=cwr1HrSevErroredSeconds, cwrTlSummaryEntry=cwrTlSummaryEntry, cwrRx2RfIndex=cwrRx2RfIndex, cwrRadioPhyTable=cwrRadioPhyTable, cwr1SecTxArqCount=cwr1SecTxArqCount, cwrScopePortOn=cwrScopePortOn, cwr1MinConsecSvCwErrSeconds=cwr1MinConsecSvCwErrSeconds, cwrTrapRfSupplyVoltage=cwrTrapRfSupplyVoltage, cwrTlValueIndex=cwrTlValueIndex, cwrHistPeriodicSum=cwrHistPeriodicSum, cwrTrapInitFailure=cwrTrapInitFailure, cwrManagedSyncLoss=cwrManagedSyncLoss, cwrIntFreqTable=cwrIntFreqTable, cwrRadioInternal=cwrRadioInternal, cwr1HrMetricsIndex=cwr1HrMetricsIndex, cwrTxRfIndex=cwrTxRfIndex, cwrRadioCommon=cwrRadioCommon, cwrPhyCorrectedBytesEntry=cwrPhyCorrectedBytesEntry, cwrNumHistBins=cwrNumHistBins, cwrTlSummaryTable=cwrTlSummaryTable, cwrValue=cwrValue, cwr1HrDegradedMinutes=cwr1HrDegradedMinutes, cwrHistCtrlEntry=cwrHistCtrlEntry, cwrIfRefOscState=cwrIfRefOscState, cwr1SecUpdateTime=cwr1SecUpdateTime, cwrComplianceRadioSnapshotGroup=cwrComplianceRadioSnapshotGroup, cwrTrapLink1HrThresh=cwrTrapLink1HrThresh, cwr1MinUpdateTime=cwr1MinUpdateTime, cwrRxFreqRangeMin=cwrRxFreqRangeMin, cwrDspNumber=cwrDspNumber, cwr1SecMetricsEntry=cwr1SecMetricsEntry)
