#
# PySNMP MIB module HPN-ICF-VOICE-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-VOICE-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, Counter32, NotificationType, Counter64, Integer32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, MibIdentifier, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter32", "NotificationType", "Counter64", "Integer32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "IpAddress")
TextualConvention, MacAddress, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "RowStatus", "TruthValue")
hpnicfVoiceVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9))
hpnicfVoiceVlan.setRevisions(('2009-05-15 00:00', '2002-07-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfVoiceVlan.setRevisionsDescriptions(('To fix bugs in the MIB file.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfVoiceVlan.setLastUpdated('200905150000Z')
if mibBuilder.loadTexts: hpnicfVoiceVlan.setOrganization('')
if mibBuilder.loadTexts: hpnicfVoiceVlan.setContactInfo('')
if mibBuilder.loadTexts: hpnicfVoiceVlan.setDescription('This MIB contains objects to manage the voice vlan operations, which is used on lanswitch products. ')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

hpnicfvoiceVlanOuiTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 1), )
if mibBuilder.loadTexts: hpnicfvoiceVlanOuiTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfvoiceVlanOuiTable.setDescription(' A table containing the mac address which can be identified by voice vlan ')
hpnicfvoiceVlanOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 1, 1), ).setIndexNames((0, "HPN-ICF-VOICE-VLAN-MIB", "hpnicfVoiceVlanOuiAddress"))
if mibBuilder.loadTexts: hpnicfvoiceVlanOuiEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfvoiceVlanOuiEntry.setDescription(' A table containing the mac address which can be identified by voice vlan ')
hpnicfVoiceVlanOuiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiAddress.setDescription(' Mac address can be identified by voice vlan ')
hpnicfVoiceVlanOuiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiMask.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiMask.setDescription(' The mask of mac address ')
hpnicfVoiceVlanOuiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiDescription.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiDescription.setDescription(' The description of oui ')
hpnicfVoiceVlanOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanOuiRowStatus.setDescription(' Current operation status of the row ')
hpnicfVoiceVlanEnabledId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanEnabledId.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanEnabledId.setDescription(' Voice vlan enable status: enabled (2..4095), disabled (0xffffffff) ')
hpnicfVoiceVlanPortEnableList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanPortEnableList.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanPortEnableList.setDescription(' Portlist of voice vlan enabled ports ')
hpnicfVoiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 43200)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanAgingTime.setDescription(' Voice vlan aging time, the unit of which is minute')
hpnicfVoiceVlanConfigState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanConfigState.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanConfigState.setDescription(' Voice vlan configuration mode status ')
hpnicfVoiceVlanSecurityState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("security", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanSecurityState.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanSecurityState.setDescription(' Voice vlan security mode status ')
hpnicfvoiceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 7), )
if mibBuilder.loadTexts: hpnicfvoiceVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfvoiceVlanPortTable.setDescription(' A list of voice vlan mode entries.')
hpnicfvoiceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 7, 1), ).setIndexNames((0, "HPN-ICF-VOICE-VLAN-MIB", "hpnicfVoiceVlanPortifIndex"))
if mibBuilder.loadTexts: hpnicfvoiceVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfvoiceVlanPortEntry.setDescription(' An entry containing voice vlan mode information, which is applicable to a voice vlan enabled interface.')
hpnicfVoiceVlanPortifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfVoiceVlanPortifIndex.setReference('ifIndex in RFC1213')
if mibBuilder.loadTexts: hpnicfVoiceVlanPortifIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanPortifIndex.setDescription(' The index of interface on which voice vlan function is enabled.')
hpnicfVoiceVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanPortMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanPortMode.setDescription(' Voice vlan configuration mode status, which is applicable to a voice vlan enabled interface.')
hpnicfVoiceVlanPortLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanPortLegacy.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanPortLegacy.setDescription(' Voice vlan configuration legacy status, which is applicable to a voice vlan enabled interface.')
hpnicfVoiceVlanPortQosTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 9, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVoiceVlanPortQosTrust.setStatus('current')
if mibBuilder.loadTexts: hpnicfVoiceVlanPortQosTrust.setDescription(' Voice vlan configuration qos trust status, which is applicable to a voice vlan enabled interface.')
mibBuilder.exportSymbols("HPN-ICF-VOICE-VLAN-MIB", hpnicfVoiceVlanPortMode=hpnicfVoiceVlanPortMode, hpnicfvoiceVlanOuiTable=hpnicfvoiceVlanOuiTable, hpnicfvoiceVlanPortEntry=hpnicfvoiceVlanPortEntry, hpnicfVoiceVlan=hpnicfVoiceVlan, hpnicfVoiceVlanOuiRowStatus=hpnicfVoiceVlanOuiRowStatus, hpnicfVoiceVlanPortLegacy=hpnicfVoiceVlanPortLegacy, hpnicfvoiceVlanPortTable=hpnicfvoiceVlanPortTable, hpnicfVoiceVlanAgingTime=hpnicfVoiceVlanAgingTime, hpnicfVoiceVlanOuiMask=hpnicfVoiceVlanOuiMask, hpnicfVoiceVlanPortifIndex=hpnicfVoiceVlanPortifIndex, hpnicfVoiceVlanOuiAddress=hpnicfVoiceVlanOuiAddress, hpnicfVoiceVlanEnabledId=hpnicfVoiceVlanEnabledId, hpnicfVoiceVlanConfigState=hpnicfVoiceVlanConfigState, hpnicfvoiceVlanOuiEntry=hpnicfvoiceVlanOuiEntry, PYSNMP_MODULE_ID=hpnicfVoiceVlan, hpnicfVoiceVlanPortEnableList=hpnicfVoiceVlanPortEnableList, hpnicfVoiceVlanSecurityState=hpnicfVoiceVlanSecurityState, hpnicfVoiceVlanPortQosTrust=hpnicfVoiceVlanPortQosTrust, hpnicfVoiceVlanOuiDescription=hpnicfVoiceVlanOuiDescription, PortList=PortList)
