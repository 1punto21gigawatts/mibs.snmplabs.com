#
# PySNMP MIB module WWP-L2-CF-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-L2-CF-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, MibIdentifier, iso, NotificationType, ModuleIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, Integer32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibIdentifier", "iso", "NotificationType", "ModuleIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "Integer32", "Counter64", "ObjectIdentity")
DisplayString, RowStatus, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TruthValue", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpL2CFTunnelMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 53))
wwpL2CFTunnelMIB.setRevisions(('2005-03-08 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpL2CFTunnelMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpL2CFTunnelMIB.setLastUpdated('200502251700Z')
if mibBuilder.loadTexts: wwpL2CFTunnelMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpL2CFTunnelMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpL2CFTunnelMIB.setDescription('This MIB module is for the Layer 2 Control Frame Tunneling in WWP Portal Products')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpL2CFTunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1))
wwpL2CFTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1))
wwpL2CFTunnelMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 2))
wwpL2CFTunnelMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 2, 0))
wwpL2CFTunnelMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 3))
wwpL2CFTunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 3, 1))
wwpL2CFTunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 3, 2))
wwpL2CFTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1), )
if mibBuilder.loadTexts: wwpL2CFTunnelTable.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelTable.setDescription('VLAN table')
wwpL2CFTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1, 1), ).setIndexNames((0, "WWP-L2-CF-TUNNEL-MIB", "wwpL2CFTunnelVlanId"))
if mibBuilder.loadTexts: wwpL2CFTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelEntry.setDescription('table of vlans')
wwpL2CFTunnelVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTunnelVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelVlanId.setDescription('802.1Q VLAN ID (1-4094)')
wwpL2CFTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("operActive", 0), ("operVlanNotExist", 1), ("operInvalidVlanPortTag", 2), ("operInvalidVlanNumPorts", 3), ("operInvalidCfg", 4), ("operDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelOperStatus.setDescription('The current operational state of tunnel.')
wwpL2CFTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpL2CFTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelAdminStatus.setDescription('The administratively desired status of Layer 2 control frame handling.')
wwpL2CFTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7))).clone('p6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpL2CFTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelPriority.setDescription('The 802.1p packet priority to be assigned to packets associated with this port that do not have an 802.1Q VLAN header.')
wwpL2CFTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpL2CFTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTunnelRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. The default state for wwpL2CFTunnelAdminStatus will be 'disabled'.")
wwpL2CFTProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 2), )
if mibBuilder.loadTexts: wwpL2CFTProtocolTable.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTProtocolTable.setDescription('The (conceptual) table listing the l2 control frame protocol status tunnels.')
wwpL2CFTProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 2, 1), ).setIndexNames((0, "WWP-L2-CF-TUNNEL-MIB", "wwpL2CFTVlanId"), (0, "WWP-L2-CF-TUNNEL-MIB", "wwpL2CFTProtocolNum"))
if mibBuilder.loadTexts: wwpL2CFTProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTProtocolEntry.setDescription('The layer 2 control frame protocol tunnel entry.')
wwpL2CFTVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTVlanId.setDescription('802.1Q VLAN ID (1-4094)')
wwpL2CFTProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("bridge-grp-addr", 2), ("cdp", 3), ("dtp", 4), ("gvrp", 5), ("lacp", 6), ("marker-protocol", 7), ("oam", 8), ("pagp", 9), ("pvst", 10), ("stp-uplink-fast", 11), ("udld", 12), ("vlanbridge", 13), ("vtp", 14), ("lldp", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTProtocolNum.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTProtocolNum.setDescription('This object represent the list of protocols the device can support.')
wwpL2CFTDispositionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discard", 0), ("peer", 1), ("tunnel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpL2CFTDispositionType.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTDispositionType.setDescription("Setting this object to 'discard' will cause wwpL2CFTProtocolNum frames arriving at the specified port to be discarded. NOTE: Setting this to 'peer' will cause the wwpL2CFTProtocolNum frame to be processed in the same manor as 'discard'. Setting this to 'tunnel' will cause the wwpL2CFTProtocolNum frame to be tunneled. The default disposition state of each protocol is controlled by portal application.")
wwpL2CFTStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3), )
if mibBuilder.loadTexts: wwpL2CFTStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsTable.setDescription('A table that contains the frame counters for Layer 2 control frame handling.')
wwpL2CFTStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1), ).setIndexNames((0, "WWP-L2-CF-TUNNEL-MIB", "wwpL2CFTStatsVlanId"), (0, "WWP-L2-CF-TUNNEL-MIB", "wwpL2CFTStatsProtocolNum"))
if mibBuilder.loadTexts: wwpL2CFTStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsEntry.setDescription('A list of Link Aggregation Control Protocol statistics for each port on this device.')
wwpL2CFTStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsVlanId.setDescription('802.1Q VLAN ID (1-4094)')
wwpL2CFTStatsProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("l28021x", 1), ("bridge-grp-addr", 2), ("cdp", 3), ("dtp", 4), ("gvrp", 5), ("lacp", 6), ("marker-protocol", 7), ("oam", 8), ("pagp", 9), ("pvst", 10), ("stp-uplink-fast", 11), ("udld", 12), ("vlanbridge", 13), ("vtp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsProtocolNum.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsProtocolNum.setDescription('This object represent the list of protocols the device can support.')
wwpL2CFTStatsPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsPacketsRx.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsPacketsRx.setDescription('The number of number of pkts ingressed matching protocol. This value is read-only.')
wwpL2CFTStatsTunneledFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsTunneledFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsTunneledFrames.setDescription('The number of number of pts that made tunneled. This value is read-only.')
wwpL2CFTStatsDecodedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsDecodedFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsDecodedFrames.setDescription('The number of came in tunneled, then restored. This value is read-only.')
wwpL2CFTStatsDecodedFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsDecodedFailed.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsDecodedFailed.setDescription('The number of failed to untunnel. This value is read-only.')
wwpL2CFTStatsPeeredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsPeeredFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsPeeredFrames.setDescription('The number of number of peered packets. This value is read-only.')
wwpL2CFTStatsDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsDiscardFrames.setDescription('The number of number of discarded packets. This value is read-only.')
wwpL2CFTStatsTunFrameSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTStatsTunFrameSubPort.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTStatsTunFrameSubPort.setDescription('The number of number of tunneled frames received on subscriber port. This value is read-only.')
wwpL2CFTGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4))
wwpL2CFTGlobalStatsPacketsRx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsPacketsRx.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsPacketsRx.setDescription('The total number of number of frames ingressed matching protocol. This value is read-only.')
wwpL2CFTGlobalStatsTunneledFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsTunneledFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsTunneledFrames.setDescription('The total number of number of frames that made tunneled. This total value is read-only.')
wwpL2CFTGlobalStatsDecodedFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsDecodedFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsDecodedFrames.setDescription('The total number of frames that came in tunneled, then restored. This value is read-only.')
wwpL2CFTGlobalStatsDecodedFailed = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsDecodedFailed.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsDecodedFailed.setDescription("Specifies the total number of frames that failed to 'untunnel' on the vlan. This value is read-only.")
wwpL2CFTGlobalStatsPeeredFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsPeeredFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsPeeredFrames.setDescription('The total number of number of peered frames. This value is read-only.')
wwpL2CFTGlobalStatsDiscardFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsDiscardFrames.setDescription('The total number of number of discarded frames. This value is read-only.')
wwpL2CFTGlobalStatsTunFrameSubPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsTunFrameSubPort.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTGlobalStatsTunFrameSubPort.setDescription('The total number of number of tunneled frames received on subscriber port. This value is read-only.')
wwpL2CFTResetStatCounters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 53, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpL2CFTResetStatCounters.setStatus('current')
if mibBuilder.loadTexts: wwpL2CFTResetStatCounters.setDescription("To reset L2 control frame statistic counters , this object should be set to 'reset'. A read on this object should return none(0).")
mibBuilder.exportSymbols("WWP-L2-CF-TUNNEL-MIB", wwpL2CFTDispositionType=wwpL2CFTDispositionType, wwpL2CFTGlobalStatsDiscardFrames=wwpL2CFTGlobalStatsDiscardFrames, wwpL2CFTStatsEntry=wwpL2CFTStatsEntry, wwpL2CFTunnelOperStatus=wwpL2CFTunnelOperStatus, wwpL2CFTStatsDecodedFailed=wwpL2CFTStatsDecodedFailed, wwpL2CFTStatsVlanId=wwpL2CFTStatsVlanId, wwpL2CFTunnelPriority=wwpL2CFTunnelPriority, wwpL2CFTStatsProtocolNum=wwpL2CFTStatsProtocolNum, wwpL2CFTunnelMIBCompliances=wwpL2CFTunnelMIBCompliances, wwpL2CFTProtocolTable=wwpL2CFTProtocolTable, wwpL2CFTProtocolEntry=wwpL2CFTProtocolEntry, wwpL2CFTResetStatCounters=wwpL2CFTResetStatCounters, wwpL2CFTunnelMIB=wwpL2CFTunnelMIB, PYSNMP_MODULE_ID=wwpL2CFTunnelMIB, wwpL2CFTunnelMIBGroups=wwpL2CFTunnelMIBGroups, wwpL2CFTunnelEntry=wwpL2CFTunnelEntry, wwpL2CFTGlobalStatsTunneledFrames=wwpL2CFTGlobalStatsTunneledFrames, wwpL2CFTunnelRowStatus=wwpL2CFTunnelRowStatus, wwpL2CFTunnelMIBConformance=wwpL2CFTunnelMIBConformance, wwpL2CFTGlobalStatsDecodedFailed=wwpL2CFTGlobalStatsDecodedFailed, wwpL2CFTunnelMIBNotificationPrefix=wwpL2CFTunnelMIBNotificationPrefix, wwpL2CFTStatsTable=wwpL2CFTStatsTable, wwpL2CFTStatsTunneledFrames=wwpL2CFTStatsTunneledFrames, wwpL2CFTProtocolNum=wwpL2CFTProtocolNum, wwpL2CFTStatsPeeredFrames=wwpL2CFTStatsPeeredFrames, wwpL2CFTGlobalStatsTunFrameSubPort=wwpL2CFTGlobalStatsTunFrameSubPort, wwpL2CFTunnelVlanId=wwpL2CFTunnelVlanId, wwpL2CFTGlobalStatsPacketsRx=wwpL2CFTGlobalStatsPacketsRx, wwpL2CFTStatsTunFrameSubPort=wwpL2CFTStatsTunFrameSubPort, wwpL2CFTGlobalStatsPeeredFrames=wwpL2CFTGlobalStatsPeeredFrames, wwpL2CFTunnelAdminStatus=wwpL2CFTunnelAdminStatus, wwpL2CFTStatsPacketsRx=wwpL2CFTStatsPacketsRx, wwpL2CFTGlobalStats=wwpL2CFTGlobalStats, wwpL2CFTunnel=wwpL2CFTunnel, wwpL2CFTGlobalStatsDecodedFrames=wwpL2CFTGlobalStatsDecodedFrames, wwpL2CFTStatsDecodedFrames=wwpL2CFTStatsDecodedFrames, wwpL2CFTunnelMIBObjects=wwpL2CFTunnelMIBObjects, wwpL2CFTVlanId=wwpL2CFTVlanId, wwpL2CFTunnelMIBNotifications=wwpL2CFTunnelMIBNotifications, wwpL2CFTStatsDiscardFrames=wwpL2CFTStatsDiscardFrames, VlanId=VlanId, wwpL2CFTunnelTable=wwpL2CFTunnelTable)
