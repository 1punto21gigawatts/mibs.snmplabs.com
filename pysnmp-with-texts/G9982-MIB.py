#
# PySNMP MIB module G9982-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G9982-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
HCPerfTimeElapsed, HCPerfValidIntervals, HCPerfInvalidIntervals, HCPerfCurrentCount = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfTimeElapsed", "HCPerfValidIntervals", "HCPerfInvalidIntervals", "HCPerfCurrentCount")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, iso, ObjectIdentity, IpAddress, Counter32, mib_2, NotificationType, Bits, Integer32, TimeTicks, Gauge32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "iso", "ObjectIdentity", "IpAddress", "Counter32", "mib-2", "NotificationType", "Bits", "Integer32", "TimeTicks", "Gauge32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "PhysAddress", "DisplayString", "TextualConvention")
g9982MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 264))
g9982MIB.setRevisions(('2013-02-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: g9982MIB.setRevisionsDescriptions(('Initial version, published as RFC 6767.',))
if mibBuilder.loadTexts: g9982MIB.setLastUpdated('201302200000Z')
if mibBuilder.loadTexts: g9982MIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: g9982MIB.setContactInfo('WG charter: http://datatracker.ietf.org/wg/adslmib/charter/ Mailing Lists: General Discussion: adslmib@ietf.org To Subscribe: adslmib-request@ietf.org In Body: subscribe your_email_address Chair: Menachem Dodge Postal: ECI Telecom, Ltd. 30 Hasivim St. Petach-Tikva 4951169 Israel Phone: +972-3-926-8421 EMail: menachemdodge1@gmail.com Editor: Edward Beili Postal: Actelis Networks, Inc. 25 Bazel St., P.O.B. 10173 Petach-Tikva 49103 Israel Phone: +972-3-924-3491 EMail: edward.beili@actelis.com Editor: Moti Morgenstern Postal: ECI Telecom 30 Hasivim St. Petach-Tikva 4951169 Israel Phone: +972-3-926-6258 EMail: moti.morgenstern@ecitele.com')
if mibBuilder.loadTexts: g9982MIB.setDescription("The objects in this MIB module are used to manage the Ethernet-based multi-pair bonded xDSL interfaces, as defined in ITU-T Recommendation G.998.2 (G.Bond/Ethernet). This MIB module MUST be used in conjunction with the GBOND-MIB module, common to all G.Bond technologies. The following references are used throughout this MIB module: [G.998.2] refers to: ITU-T Recommendation G.998.2: 'Ethernet-based multi-pair bonding', January 2005. [G.998.2-Amd2] refers to: ITU-T Recommendation G.998.2 Amendment 2, December 2007. [802.3] refers to: IEEE Std 802.3-2005: 'IEEE Standard for Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific requirements - Part 3: Carrier Sense Multiple Access with Collision Detection (CSMA/CD) Access Method and Physical Layer Specifications', December 2005. [TR-159] refers to: Broadband Forum Technical Report: 'Management Framework for xDSL Bonding', December 2008. Naming Conventions: BACP - Bonding Aggregation Control Protocol BCE - Bonding Channel Entity BTU - Bonding Terminating Unit BTU-C - Bonding Terminating Unit, CO side BTU-R - Bonding Terminating Unit, Remote Terminal (CPE) side CO - Central Office CPE - Customer Premises Equipment GBS - Generic Bonding Sub-layer HDLC - High-level Data Link Control PTM-TC - Packet Transfer Mode Transmission Convergence (sub-layer) SNR - Signal to Noise Ratio TC - Transmission Convergence (sub-layer) UAS - Unavailable Seconds Copyright (c) 2013 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
g9982Objects = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 1))
g9982Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 2))
g9982Port = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 1, 1))
g9982Bce = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 1, 2))
class G9982PtmTcType(TextualConvention, Integer32):
    description = 'This textual convention represents possible PTM-TC types in G.Bond/Eth ports. The following values are defined: tc6465 - 64/65-octet encapsulation, as defined in [802.3] Clause 61.3.3. tcHDLC - HDLC encapsulation, as defined in [G.998.2] Annex B.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tc6465", 1), ("tcHDLC", 2))

class G9982CpType(TextualConvention, Integer32):
    description = 'This textual convention represents possible control protocol types in G.Bond/Eth ports. The following values are defined: unknown - the control protocol cannot be determined. cpHS - G.hs-based discovery and aggregation, as specified in [G.998.2]. cpBACP - Bonding Aggregation Control Protocol (BACP) -- a frame-based discovery, aggregation, and link management protocol, as specified in [G.998.2-Amd2] Annex C.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("cpHS", 1), ("cpBACP", 2))

g9982PortConfTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 1, 1), )
if mibBuilder.loadTexts: g9982PortConfTable.setStatus('current')
if mibBuilder.loadTexts: g9982PortConfTable.setDescription('Table for configuration of G.Bond/Eth GBS ports. Entries in this table MUST be maintained in a persistent manner.')
g9982PortConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9982PortConfEntry.setStatus('current')
if mibBuilder.loadTexts: g9982PortConfEntry.setDescription('An entry in the G.Bond/Eth Port Configuration table. Each entry represents a G.Bond Ethernet port indexed by the ifIndex. Note that a G.Bond/Eth GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
g9982PortConfTcAdminType = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 1, 1, 1), G9982PtmTcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9982PortConfTcAdminType.setReference('[TR-159], Section 5.5.3.4; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: g9982PortConfTcAdminType.setStatus('current')
if mibBuilder.loadTexts: g9982PortConfTcAdminType.setDescription("Administrative (desired) PTM-TC encapsulation type of a G.Bond/Eth port (GBS). Possible values are: tc6465(1) - 64/65-octet encapsulation tcHDLC(2) - HDLC encapsulation Attempts to set a port to a non-supported PTM-TC encapsulation type (see g9982PortCapTcTypesSupported) SHALL be rejected (with the error inconsistentValue). Changing g9982PortConfTcAdminType is a traffic-disruptive operation and as such SHALL be done when the link (GBS) is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object SHALL be rejected (with the error inconsistentValue) if the link is 'up' or initializing. This object maps to the TR-159 attribute aEthTcAdminType.")
g9982PortConfAdminCp = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 1, 1, 2), G9982CpType().clone('cpHS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9982PortConfAdminCp.setReference('[TR-159], Section 5.5.3.2; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: g9982PortConfAdminCp.setStatus('current')
if mibBuilder.loadTexts: g9982PortConfAdminCp.setDescription("Administrative (desired) bonding control protocol of a G.Bond/Eth port (GBS). Possible values are: cpHS(1) - use G.hs-based protocol (default) cpBACP(2) - use frame-based BACP Note that G.hs-based protocol support is mandatory, according to [G.998.2]. Attempts to set a port to a non-supported bonding control protocol (e.g., BACP if the value of g9982PortCapBacpSupported is false) SHALL be rejected (with the error inconsistentValue). Changing g9982PortConfAdminCp is a traffic-disruptive operation and as such SHALL be done when the link (GBS) is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object SHALL be rejected (with the error inconsistentValue) if the link is 'up' or initializing. This object maps to the TR-159 attribute aEthAdminCP.")
g9982PortCapTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 1, 2), )
if mibBuilder.loadTexts: g9982PortCapTable.setStatus('current')
if mibBuilder.loadTexts: g9982PortCapTable.setDescription('Table for capabilities of G.Bond/Eth ports. Entries in this table MUST be maintained in a persistent manner.')
g9982PortCapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9982PortCapEntry.setStatus('current')
if mibBuilder.loadTexts: g9982PortCapEntry.setDescription('An entry in the G.Bond/Eth Port Capability table. Each entry represents a G.Bond port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
g9982PortCapTcTypesSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("tc6465", 0), ("tcHDLC", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortCapTcTypesSupported.setReference('[TR-159], Section 5.5.3.6')
if mibBuilder.loadTexts: g9982PortCapTcTypesSupported.setStatus('current')
if mibBuilder.loadTexts: g9982PortCapTcTypesSupported.setDescription('PTM-TC encapsulation types supported by the G.Bond/Eth port. This is a bitmap of possible encapsulation types. The various bit positions are: tc6465 - GBS is capable of 64/65-octet encapsulation tcHDLC - GBS is capable of HDLC encapsulation A desired encapsulation is determined by g9982PortConfTcAdminType, while g9982PortStatTcOperType reflects the current operating mode. This object maps to the TR-159 attribute aEthTcTypesSupported.')
g9982PortCapBacpSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortCapBacpSupported.setReference('[TR-159], Section 5.5.3.1; [G.998.2-Amd2], Annex C')
if mibBuilder.loadTexts: g9982PortCapBacpSupported.setStatus('current')
if mibBuilder.loadTexts: g9982PortCapBacpSupported.setDescription('Indicates whether the Bonding Aggregation Control Protocol (BACP) -- the frame-based discovery, aggregation, and link management protocol specified in [G.998.2-Amd2]) is supported by the G.Bond/Ethernet port. A value of true(1) indicates that BACP is supported. A value of false(2) indicates that BACP is unsupported. The BACP functionality, if supported, can be enabled or disabled via g9982AdminCP, while g9982OperCP reflects the current BACP operating mode. This object maps to the TR-159 attribute aEthBACPSupported.')
g9982PortStatTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 1, 3), )
if mibBuilder.loadTexts: g9982PortStatTable.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatTable.setDescription('This table provides overall status information of G.Bond ports, complementing the generic status information from the ifTable of the IF-MIB. Additional status information about connected BCEs is available from the relevant line MIBs. This table contains live data from the equipment. As such, it is NOT persistent.')
g9982PortStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9982PortStatEntry.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatEntry.setDescription('An entry in the G.Bond/Eth Port Status table. Each entry represents a G.Bond/Eth port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
g9982PortStatTcOperType = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 1), G9982PtmTcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatTcOperType.setReference('[TR-159], Section 5.5.3.5')
if mibBuilder.loadTexts: g9982PortStatTcOperType.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatTcOperType.setDescription('Current operational encapsulation type of the G.Bond/Eth port. Possible values are: tc6465(1) - GBS uses 64/65-octet encapsulation tcHDLC(2) - GBS uses HDLC encapsulation The operational PTM-TC encapsulation type can be configured via g9982PortConfTcAdminType. This object maps to the TR-159 attribute aEthTcOperType.')
g9982PortStatOperCp = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 2), G9982CpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatOperCp.setReference('[TR-159], Section 5.5.3.3')
if mibBuilder.loadTexts: g9982PortStatOperCp.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatOperCp.setDescription("Current operational bonding discovery and aggregation control protocol of the G.Bond/Eth port. Possible values are: unknown(0) - the protocol cannot be determined, e.g., when the GBS is 'down' cpHS(1) - GBS uses G.hs-based protocol cpBACP(2) - GBS uses frame-based BACP The operational discovery and aggregation control protocol can be configured via the g9982PortConfAdminCp variable. This object maps to the TR-159 attribute aEthOperCP.")
g9982PortStatRxErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 3), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxErrors.setReference('[TR-159], Section 5.5.3.7')
if mibBuilder.loadTexts: g9982PortStatRxErrors.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxErrors.setDescription('A number of Ethernet frame fragments that have been received by the bonding function and discarded due to various errors. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxErrors.')
g9982PortStatRxSmallFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 4), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxSmallFragments.setReference('[TR-159], Section 5.5.3.8')
if mibBuilder.loadTexts: g9982PortStatRxSmallFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxSmallFragments.setDescription('A number of fragments smaller than minFragmentSize (64 bytes) that have been received by the bonding function and discarded. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxSmallFragments.')
g9982PortStatRxLargeFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 5), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxLargeFragments.setReference('[TR-159], Section 5.5.3.9')
if mibBuilder.loadTexts: g9982PortStatRxLargeFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxLargeFragments.setDescription('A number of fragments larger than maxFragmentSize (512 bytes) that have been received by the bonding function and discarded. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxLargeFragments.')
g9982PortStatRxBadFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 6), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxBadFragments.setReference('[TR-159], Section 5.5.3.10')
if mibBuilder.loadTexts: g9982PortStatRxBadFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxBadFragments.setDescription('A number of fragments that do not fit into the sequence expected by the frame assembly function and that have been received and discarded by the bonding function (the frame buffer is flushed to the next valid frame start). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxBadFragments.')
g9982PortStatRxLostFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 7), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxLostFragments.setReference('[TR-159], Section 5.5.3.11')
if mibBuilder.loadTexts: g9982PortStatRxLostFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxLostFragments.setDescription('A number of gaps in the sequence of fragments that have been received by the bonding function (the frame buffer is flushed to the next valid frame start, when a fragment or fragments expected by the frame assembly function are not received). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxLostFragments.')
g9982PortStatRxLostStarts = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxLostStarts.setReference('[TR-159], Section 5.5.3.12')
if mibBuilder.loadTexts: g9982PortStatRxLostStarts.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxLostStarts.setDescription('A number of missing StartOfPacket indicators expected by the frame assembly function. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxLostStarts.')
g9982PortStatRxLostEnds = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxLostEnds.setReference('[TR-159], Section 5.5.3.13')
if mibBuilder.loadTexts: g9982PortStatRxLostEnds.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxLostEnds.setDescription('A number of missing EndOfPacket indicators expected by the frame assembly function. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxLostEnds.')
g9982PortStatRxOverflows = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 3, 1, 10), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortStatRxOverflows.setReference('[TR-159], Section 5.5.3.14')
if mibBuilder.loadTexts: g9982PortStatRxOverflows.setStatus('current')
if mibBuilder.loadTexts: g9982PortStatRxOverflows.setDescription('A number of fragments, received and discarded by the bonding function, that would have caused the frame assembly buffer to overflow. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aEthRxOverflows.')
g9982PM = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 1, 1, 4))
g9982PortPmCurTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1), )
if mibBuilder.loadTexts: g9982PortPmCurTable.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCurTable.setDescription('This table contains current Performance Monitoring information for a G.Bond/Eth port. This table contains live data from the equipment and as such is NOT persistent.')
g9982PortPmCurEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9982PortPmCurEntry.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCurEntry.setDescription('An entry in the G.Bond/Eth Port PM table. Each entry represents a G.Bond/Eth port indexed by the ifIndex.')
g9982PortPm15MinValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 1), HCPerfValidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinValidIntervals.setReference('[TR-159], Section 5.5.1.32')
if mibBuilder.loadTexts: g9982PortPm15MinValidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinValidIntervals.setDescription('A read-only number of 15-minute intervals for which the performance data was collected. The value of this object will be 96 or the maximum number of 15-minute history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 15-minute intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available. This object partially maps to the TR-159 attribute aGroupPerf15MinValidIntervals.')
g9982PortPm15MinInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 2), HCPerfInvalidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinInvalidIntervals.setReference('[TR-159], Section 5.5.1.33')
if mibBuilder.loadTexts: g9982PortPm15MinInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinInvalidIntervals.setDescription('A read-only number of 15-minute intervals for which the performance data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available. This object partially maps to the TR-159 attribute aGroupPerf15MinInvalidIntervals.')
g9982PortPmCur15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 3), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinTimeElapsed.setReference('[TR-159], Section 5.5.1.34')
if mibBuilder.loadTexts: g9982PortPmCur15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinTimeElapsed.setDescription('A read-only count of seconds that have elapsed since the beginning of the current 15-minute performance interval. This object partially maps to the TR-159 attribute aGroupPerfCurr15MinTimeElapsed.')
g9982PortPmCur15MinRxErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 4), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxErrors.setReference('[TR-159], Section 5.5.3.7')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxErrors.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxErrors.setDescription('A read-only count of errored fragments received and discarded by a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of errored fragments is indicated by the g9982PortStatRxErrors object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxSmallFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 5), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxSmallFragments.setReference('[TR-159], Section 5.5.3.8')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxSmallFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxSmallFragments.setDescription('A read-only count of fragments smaller than minFragmentSize (64 bytes) that have been received and discarded by a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of small fragments is indicated by the g9982PortStatRxSmallFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxLargeFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 6), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLargeFragments.setReference('[TR-159], Section 5.5.3.9')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLargeFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLargeFragments.setDescription('A read-only count of fragments larger than maxFragmentSize (512 bytes) that have been received and discarded by a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of large fragments is indicated by the g9982PortStatRxLargeFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxBadFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 7), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxBadFragments.setReference('[TR-159], Section 5.5.3.10')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxBadFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxBadFragments.setDescription('A read-only count of fragments that do not fit into the sequence expected by the frame assembly function and that have been received and discarded by a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of bad fragments is indicated by the g9982PortStatRxBadFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxLostFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 8), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostFragments.setReference('[TR-159], Section 5.5.3.11')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostFragments.setDescription('A read-only count of gaps in the sequence of fragments expected by the frame assembly function of a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of these lost fragments is indicated by the g9982PortStatRxLostFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxLostStarts = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 9), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostStarts.setReference('[TR-159], Section 5.5.3.12')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostStarts.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostStarts.setDescription('A read-only count of missing StartOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of missing StartOfPacket indicators is indicated by the g9982PortStatRxLostStarts object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxLostEnds = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 10), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostEnds.setReference('[TR-159], Section 5.5.3.13')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostEnds.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxLostEnds.setDescription('A read-only count of missing EndOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the current 15-minute performance interval. Note that the total number of missing EndOfPacket indicators is indicated by the g9982PortStatRxLostEnds object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur15MinRxOverflows = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 11), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur15MinRxOverflows.setReference('[TR-159], Section 5.5.3.14')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxOverflows.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur15MinRxOverflows.setDescription('A read-only count of fragments that have been received and discarded by a G.Bond/Eth port, which would have caused the frame assembly buffer to overflow, during the current 15-minute performance interval. Note that the total number of fragments that would have caused the frame assembly buffer to overflow is indicated by the g9982PortStatRxOverflows object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayValidIntervals.setReference('[TR-159], Section 5.5.1.45')
if mibBuilder.loadTexts: g9982PortPm1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayValidIntervals.setDescription('A read-only number of 1-day intervals for which data was collected. The value of this object will be 7 or the maximum number of 1-day history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 1-day intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available.')
g9982PortPm1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayInvalidIntervals.setReference('[TR-159], Section 5.5.1.46')
if mibBuilder.loadTexts: g9982PortPm1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayInvalidIntervals.setDescription('A read-only number of 1-day intervals for which data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available.')
g9982PortPmCur1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 14), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayTimeElapsed.setReference('[TR-159], Section 5.5.1.47')
if mibBuilder.loadTexts: g9982PortPmCur1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayTimeElapsed.setDescription('A read-only count of seconds that have elapsed since the beginning of the current 1-day performance interval.')
g9982PortPmCur1DayRxErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 15), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxErrors.setReference('[TR-159], Section 5.5.3.7')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxErrors.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxErrors.setDescription('A read-only count of errored fragments received and discarded by a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of errored fragments is indicated by the g9982PortStatRxErrors object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxSmallFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 16), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxSmallFragments.setReference('[TR-159], Section 5.5.3.8')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxSmallFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxSmallFragments.setDescription('A read-only count of fragments smaller than minFragmentSize (64 bytes) that have been received and discarded by a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of small fragments is indicated by the g9982PortStatRxSmallFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxLargeFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 17), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLargeFragments.setReference('[TR-159], Section 5.5.3.9')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLargeFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLargeFragments.setDescription('A read-only count of fragments larger than maxFragmentSize (512 bytes) that have been received and discarded by a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of large fragments is indicated by the g9982PortStatRxLargeFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxBadFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 18), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxBadFragments.setReference('[TR-159], Section 5.5.3.10')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxBadFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxBadFragments.setDescription('A read-only count of fragments that do not fit into the sequence expected by the frame assembly function and that have been received and discarded by a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of bad fragments is indicated by the g9982PortStatRxBadFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxLostFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 19), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostFragments.setReference('[TR-159], Section 5.5.3.11')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostFragments.setDescription('A read-only count of gaps in the sequence of fragments expected by the frame assembly function of a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of these lost fragments is indicated by the g9982PortStatRxLostFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxLostStarts = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostStarts.setReference('[TR-159], Section 5.5.3.12')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostStarts.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostStarts.setDescription('A read-only count of missing StartOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of missing StartOfPacket indicators is indicated by the g9982PortStatRxLostStarts object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxLostEnds = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 21), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostEnds.setReference('[TR-159], Section 5.5.3.13')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostEnds.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxLostEnds.setDescription('A read-only count of missing EndOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the current 1-day performance interval. Note that the total number of missing EndOfPacket indicators is indicated by the g9982PortStatRxLostEnds object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPmCur1DayRxOverflows = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 1, 1, 22), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPmCur1DayRxOverflows.setReference('[TR-159], Section 5.5.3.14')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxOverflows.setStatus('current')
if mibBuilder.loadTexts: g9982PortPmCur1DayRxOverflows.setDescription('A read-only count of fragments that have been received and discarded by a G.Bond/Eth port, which would have caused the frame assembly buffer to overflow, during the current 1-day performance interval. Note that the total number of fragments that would have caused the frame assembly buffer to overflow is indicated by the g9982PortStatRxOverflows object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2), )
if mibBuilder.loadTexts: g9982PortPm15MinTable.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinTable.setDescription('This table contains historical 15-minute buckets of Performance Monitoring information for a G.Bond/Eth port (a row for each 15-minute interval, up to 96 intervals). Entries in this table MUST be maintained in a persistent manner.')
g9982PortPm15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9982-MIB", "g9982PortPm15MinIntervalIndex"))
if mibBuilder.loadTexts: g9982PortPm15MinEntry.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinEntry.setDescription('An entry in the G.Bond/Eth Port historical 15-minute PM table. Each entry represents Performance Monitoring data for a G.Bond/Eth port, indexed by the ifIndex, collected during a particular 15-minute interval, indexed by the g9982PortPm15MinIntervalIndex.')
g9982PortPm15MinIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: g9982PortPm15MinIntervalIndex.setReference('[TR-159], Section 5.5.1.57')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalIndex.setDescription('Performance Data Interval number. 1 is the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are OPTIONAL. This object partially maps to the TR-159 attribute aGroupPerf15MinIntervalNumber.')
g9982PortPm15MinIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalMoniTime.setDescription('A read-only count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (900 seconds), except in a situation where performance data could not be collected for any reason.')
g9982PortPm15MinIntervalRxErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 3), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxErrors.setReference('[TR-159], Section 5.5.3.7')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxErrors.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxErrors.setDescription('A read-only count of errored fragments received and discarded by a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of errored fragments is indicated by the g9982PortStatRxErrors object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxSmallFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 4), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxSmallFragments.setReference('[TR-159], Section 5.5.3.8')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxSmallFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxSmallFragments.setDescription('A read-only count of fragments smaller than minFragmentSize (64 bytes) that have been received and discarded by a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of small fragments is indicated by the g9982PortStatRxSmallFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxLargeFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 5), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLargeFragments.setReference('[TR-159], Section 5.5.3.9')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLargeFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLargeFragments.setDescription('A read-only count of fragments larger than maxFragmentSize (512 bytes) that have been received and discarded by a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of large fragments is indicated by the g9982PortStatRxLargeFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxBadFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 6), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxBadFragments.setReference('[TR-159], Section 5.5.3.10')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxBadFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxBadFragments.setDescription('A read-only count of fragments that do not fit into the sequence expected by the frame assembly function and that have been received and discarded by a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of bad fragments is indicated by the g9982PortStatRxBadFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxLostFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 7), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostFragments.setReference('[TR-159], Section 5.5.3.11')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostFragments.setDescription('A read-only count of gaps in the sequence of fragments expected by the frame assembly function of a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of these lost fragments is indicated by the g9982PortStatRxLostFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxLostStarts = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 8), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostStarts.setReference('[TR-159], Section 5.5.3.12')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostStarts.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostStarts.setDescription('A read-only count of missing StartOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of missing StartOfPacket indicators is indicated by the g9982PortStatRxLostStarts object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxLostEnds = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 9), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostEnds.setReference('[TR-159], Section 5.5.3.13')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostEnds.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxLostEnds.setDescription('A read-only count of missing EndOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the 15-minute performance history interval. Note that the total number of missing EndOfPacket indicators is indicated by the g9982PortStatRxLostEnds object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalRxOverflows = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 10), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxOverflows.setReference('[TR-159], Section 5.5.3.14')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxOverflows.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalRxOverflows.setDescription('A read-only count of fragments that have been received and discarded by a G.Bond/Eth port, which would have caused the frame assembly buffer to overflow, during the 15-minute performance history interval. Note that the total number of fragments that would have caused the frame assembly buffer to overflow is indicated by the g9982PortStatRxOverflows object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm15MinIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm15MinIntervalValid.setReference('[TR-159], Section 5.5.1.58')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalValid.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm15MinIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object partially maps to the TR-159 attribute aGroupPerf15MinIntervalValid.')
g9982PortPm1DayTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3), )
if mibBuilder.loadTexts: g9982PortPm1DayTable.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayTable.setDescription('This table contains historical 1-day buckets of Performance Monitoring information for a G.Bond/Eth port (a row for each 1-day interval, up to 7 intervals). Entries in this table MUST be maintained in a persistent manner.')
g9982PortPm1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9982-MIB", "g9982PortPm1DayIntervalIndex"))
if mibBuilder.loadTexts: g9982PortPm1DayEntry.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayEntry.setDescription('An entry in the G.Bond/Eth port historical 1-day PM table. Each entry represents Performance Monitoring data for such a port, indexed by the ifIndex, collected during a particular 1-day interval, indexed by the g9982PortPm1DayIntervalIndex.')
g9982PortPm1DayIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: g9982PortPm1DayIntervalIndex.setReference('[TR-159], Section 5.5.1.62')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalIndex.setDescription('Performance Data Interval number. 1 is the most recent previous interval; interval 7 is 7 days ago. Intervals 2..7 are OPTIONAL. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalNumber.')
g9982PortPm1DayIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalMoniTime.setReference('[TR-159], Section 5.5.1.64')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalMoniTime.setDescription('A read-only count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (86400 seconds), except in a situation where performance data could not be collected for any reason. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalMoniSecs.')
g9982PortPm1DayIntervalRxErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 3), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxErrors.setReference('[TR-159], Section 5.5.3.7')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxErrors.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxErrors.setDescription('A read-only count of errored fragments received and discarded by a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of errored fragments is indicated by the g9982PortStatRxErrors object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxSmallFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 4), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxSmallFragments.setReference('[TR-159], Section 5.5.3.8')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxSmallFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxSmallFragments.setDescription('A read-only count of fragments smaller than minFragmentSize (64 bytes) that have been received and discarded by a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of small fragments is indicated by the g9982PortStatRxSmallFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxLargeFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 5), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLargeFragments.setReference('[TR-159], Section 5.5.3.9')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLargeFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLargeFragments.setDescription('A read-only count of fragments larger than maxFragmentSize (512 bytes) that have been received and discarded by a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of large fragments is indicated by the g9982PortStatRxLargeFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxBadFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 6), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxBadFragments.setReference('[TR-159], Section 5.5.3.10')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxBadFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxBadFragments.setDescription('A read-only count of fragments that do not fit into the sequence expected by the frame assembly function and that have been received and discarded by a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of bad fragments is indicated by the g9982PortStatRxBadFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxLostFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 7), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostFragments.setReference('[TR-159], Section 5.5.3.11')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostFragments.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostFragments.setDescription('A read-only count of gaps in the sequence of fragments expected by the frame assembly function of a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of these lost fragments is indicated by the g9982PortStatRxLostFragments object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxLostStarts = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 8), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostStarts.setReference('[TR-159], Section 5.5.3.12')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostStarts.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostStarts.setDescription('A read-only count of missing StartOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of missing StartOfPacket indicators is indicated by the g9982PortStatRxLostStarts object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxLostEnds = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 9), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostEnds.setReference('[TR-159], Section 5.5.3.13')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostEnds.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxLostEnds.setDescription('A read-only count of missing EndOfPacket indicators expected by the frame assembly function of a G.Bond/Eth port during the 1-day performance history interval. Note that the total number of missing EndOfPacket indicators is indicated by the g9982PortStatRxLostEnds object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalRxOverflows = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 10), HCPerfCurrentCount()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxOverflows.setReference('[TR-159], Section 5.5.3.14')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxOverflows.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalRxOverflows.setDescription('A read-only count of fragments that have been received and discarded by a G.Bond/Eth port, which would have caused the frame assembly buffer to overflow, during the 1-day performance history interval. Note that the total number of fragments that would have caused the frame assembly buffer to overflow is indicated by the g9982PortStatRxOverflows object. This object is inhibited during Unavailable Seconds (UAS).')
g9982PortPm1DayIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 1, 4, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982PortPm1DayIntervalValid.setReference('[TR-159], Section 5.5.1.63')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalValid.setStatus('current')
if mibBuilder.loadTexts: g9982PortPm1DayIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalValid.')
g9982BceConfTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 2, 1), )
if mibBuilder.loadTexts: g9982BceConfTable.setStatus('current')
if mibBuilder.loadTexts: g9982BceConfTable.setDescription('Table for configuration of G.Bond/Eth-specific aspects for the Bonding Channel Entity (BCE) ports (modems/channels). Entries in this table MUST be maintained in a persistent manner.')
g9982BceConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9982BceConfEntry.setStatus('current')
if mibBuilder.loadTexts: g9982BceConfEntry.setDescription('An entry in the G.Bond/Eth BCE Configuration table. Each entry represents G.998.2-specific aspects of a BCE port indexed by the ifIndex. Note that a G.Bond/Eth BCE port can be stacked below a single GBS port, also indexed by the ifIndex.')
g9982BceConfEligibleGroupID = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 2, 1, 1, 1), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9982BceConfEligibleGroupID.setReference('[TR-159], Section 5.5.7.3')
if mibBuilder.loadTexts: g9982BceConfEligibleGroupID.setStatus('current')
if mibBuilder.loadTexts: g9982BceConfEligibleGroupID.setDescription('BACP Eligible Group ID of a G.Bond/ETH BCE port. A universally unique 6-octet-long identifier, used by the OPTIONAL BACP, to determine bonding eligibility. When two BCEs have the same g9982BceConfEligibleGroupID on a system, they are eligible to be aggregated on that system. Typically, all BCEs on a BTU-R device would be assigned the same g9982BceConfEligibleGroupID, to assert that all of the BCEs should be in the same bonded group. BCEs with different g9982BceConfEligibleGroupID values MUST NOT be connected to the same GBS. BCEs with the same g9982BceConfEligibleGroupID MAY be connected to different GBS ports. This object MUST be instantiated during BACP initialization, when every BCE belongs to its own GBS. Attempts to change this object MUST be rejected (with the error inconsistentValue), if the BCE is aggregated with other BCEs, i.e., more than one BCE is connected to the same GBS, or if the BCE in question is not eligible to be bonded with other BCEs having the same value (e.g., the bonding is limited to a single line card and BCEs are located on different line cards, or BCEs are the channels of the same line). Note that bonding eligibility is reflected in the ifCapStackTable and its inverse, the ifInvCapStackTable; as such, any modification of g9982BceConfEligibleGroupID MUST be reflected in these tables. A zero-length octet string SHALL be returned on an attempt to read this object on systems not supporting BACP (the value of g9982PortCapBacpSupported for the connected GBS is false). This object maps to the TR-159 attribute aChannelEligibleGroupID.')
g9982BceConfPeerEligibleGroupID = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 2, 1, 1, 2), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982BceConfPeerEligibleGroupID.setReference('[G.998.2-Amd2], Appendix C.3.1.6')
if mibBuilder.loadTexts: g9982BceConfPeerEligibleGroupID.setStatus('current')
if mibBuilder.loadTexts: g9982BceConfPeerEligibleGroupID.setDescription('BACP Eligible Group ID of a peer G.Bond/ETH BCE port, most recently received by the local BCE via a Local info TLV BACPDU message from the peer BCE. A universally unique 6-octet-long identifier, used by the OPTIONAL BACP, to determine bonding eligibility. BCEs with different g9982BceConfPeerEligibleGroupID values MUST NOT be connected to the same GBS. BCEs with the same g9982BceConfPeerEligibleGroupID MAY be connected to different GBS ports. A zero-length octet string SHALL be returned on an attempt to read this object on systems not supporting BACP (the value of g9982PortCapBacpSupported for the connected GBS is false) or when no BACPDUs have been received from the peer BCE. This object maps to the G.998.2-Amd2 attribute Remote Group ID.')
g9982BceStatTable = MibTable((1, 3, 6, 1, 2, 1, 264, 1, 2, 2), )
if mibBuilder.loadTexts: g9982BceStatTable.setStatus('current')
if mibBuilder.loadTexts: g9982BceStatTable.setDescription('This table provides common status information of G.Bond/Eth BCE ports. This table contains live data from the equipment. As such, it is NOT persistent.')
g9982BceStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 264, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9982BceStatEntry.setStatus('current')
if mibBuilder.loadTexts: g9982BceStatEntry.setDescription('An entry in the G.Bond/Eth BCE Status table. Each entry represents common aspects of a G.Bond/Eth BCE port indexed by the ifIndex. Note that a BCE port can be stacked below a single GBS port, also indexed by the ifIndex, possibly together with other BCE ports.')
g9982BceStatTcInCodingErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982BceStatTcInCodingErrors.setReference('[TR-159], Section 5.5.7.8')
if mibBuilder.loadTexts: g9982BceStatTcInCodingErrors.setStatus('current')
if mibBuilder.loadTexts: g9982BceStatTcInCodingErrors.setDescription('A number of PTM-TC encapsulation errors. This counter is incremented for each encapsulation error detected by the PTM-TC receive function. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aChannelPtmTcRxCodingViolations.')
g9982BceStatTcInCrcErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 264, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9982BceStatTcInCrcErrors.setReference('[TR-159], Section 5.5.7.9')
if mibBuilder.loadTexts: g9982BceStatTcInCrcErrors.setStatus('current')
if mibBuilder.loadTexts: g9982BceStatTcInCrcErrors.setDescription('A number of PTM-TC CRC errors. This counter is incremented for each CRC error detected by the PTM-TC receive function. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, as defined in the IF-MIB. This object maps to the TR-159 attribute aChannelPtmTcRxCrcErrors.')
g9982Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 2, 1))
g9982Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 264, 2, 2))
g9982BasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 264, 2, 1, 1)).setObjects(("G9982-MIB", "g9982PortCapTcTypesSupported"), ("G9982-MIB", "g9982PortCapBacpSupported"), ("G9982-MIB", "g9982PortConfTcAdminType"), ("G9982-MIB", "g9982PortStatTcOperType"), ("G9982-MIB", "g9982PortStatRxErrors"), ("G9982-MIB", "g9982PortStatRxSmallFragments"), ("G9982-MIB", "g9982PortStatRxLargeFragments"), ("G9982-MIB", "g9982PortStatRxBadFragments"), ("G9982-MIB", "g9982PortStatRxLostFragments"), ("G9982-MIB", "g9982PortStatRxLostStarts"), ("G9982-MIB", "g9982PortStatRxLostEnds"), ("G9982-MIB", "g9982PortStatRxOverflows"), ("G9982-MIB", "g9982BceStatTcInCodingErrors"), ("G9982-MIB", "g9982BceStatTcInCrcErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982BasicGroup = g9982BasicGroup.setStatus('current')
if mibBuilder.loadTexts: g9982BasicGroup.setDescription('A collection of objects representing management information for G.Bond/Eth GBS ports.')
g9982BacpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 264, 2, 1, 2)).setObjects(("G9982-MIB", "g9982PortConfAdminCp"), ("G9982-MIB", "g9982PortStatOperCp"), ("G9982-MIB", "g9982BceConfEligibleGroupID"), ("G9982-MIB", "g9982BceConfPeerEligibleGroupID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982BacpGroup = g9982BacpGroup.setStatus('current')
if mibBuilder.loadTexts: g9982BacpGroup.setDescription('A collection of objects representing management information for the OPTIONAL frame-based Bonding Aggregation Control Protocol (BACP) used by G.Bond/Eth GBS ports instead of the mandatory G.hs-based discovery and aggregation protocol.')
g9982BceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 264, 2, 1, 3)).setObjects(("G9982-MIB", "g9982BceStatTcInCodingErrors"), ("G9982-MIB", "g9982BceStatTcInCrcErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982BceGroup = g9982BceGroup.setStatus('current')
if mibBuilder.loadTexts: g9982BceGroup.setDescription('A collection of objects representing OPTIONAL management information for G.Bond/Eth BCE ports.')
g9982PerfCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 264, 2, 1, 4)).setObjects(("G9982-MIB", "g9982PortPm15MinValidIntervals"), ("G9982-MIB", "g9982PortPm15MinInvalidIntervals"), ("G9982-MIB", "g9982PortPmCur15MinTimeElapsed"), ("G9982-MIB", "g9982PortPmCur15MinRxErrors"), ("G9982-MIB", "g9982PortPmCur15MinRxSmallFragments"), ("G9982-MIB", "g9982PortPmCur15MinRxLargeFragments"), ("G9982-MIB", "g9982PortPmCur15MinRxBadFragments"), ("G9982-MIB", "g9982PortPmCur15MinRxLostFragments"), ("G9982-MIB", "g9982PortPmCur15MinRxLostStarts"), ("G9982-MIB", "g9982PortPmCur15MinRxLostEnds"), ("G9982-MIB", "g9982PortPmCur15MinRxOverflows"), ("G9982-MIB", "g9982PortPm1DayValidIntervals"), ("G9982-MIB", "g9982PortPm1DayInvalidIntervals"), ("G9982-MIB", "g9982PortPmCur1DayTimeElapsed"), ("G9982-MIB", "g9982PortPmCur1DayRxErrors"), ("G9982-MIB", "g9982PortPmCur1DayRxSmallFragments"), ("G9982-MIB", "g9982PortPmCur1DayRxLargeFragments"), ("G9982-MIB", "g9982PortPmCur1DayRxBadFragments"), ("G9982-MIB", "g9982PortPmCur1DayRxLostFragments"), ("G9982-MIB", "g9982PortPmCur1DayRxLostStarts"), ("G9982-MIB", "g9982PortPmCur1DayRxLostEnds"), ("G9982-MIB", "g9982PortPmCur1DayRxOverflows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982PerfCurrGroup = g9982PerfCurrGroup.setStatus('current')
if mibBuilder.loadTexts: g9982PerfCurrGroup.setDescription('A collection of objects supporting OPTIONAL current Performance Monitoring information for G.Bond/Eth ports.')
g9982Perf15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 264, 2, 1, 5)).setObjects(("G9982-MIB", "g9982PortPm15MinIntervalMoniTime"), ("G9982-MIB", "g9982PortPm15MinIntervalRxErrors"), ("G9982-MIB", "g9982PortPm15MinIntervalRxSmallFragments"), ("G9982-MIB", "g9982PortPm15MinIntervalRxLargeFragments"), ("G9982-MIB", "g9982PortPm15MinIntervalRxBadFragments"), ("G9982-MIB", "g9982PortPm15MinIntervalRxLostFragments"), ("G9982-MIB", "g9982PortPm15MinIntervalRxLostStarts"), ("G9982-MIB", "g9982PortPm15MinIntervalRxLostEnds"), ("G9982-MIB", "g9982PortPm15MinIntervalRxOverflows"), ("G9982-MIB", "g9982PortPm15MinIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982Perf15MinGroup = g9982Perf15MinGroup.setStatus('current')
if mibBuilder.loadTexts: g9982Perf15MinGroup.setDescription('A collection of objects supporting OPTIONAL historical Performance Monitoring information for G.Bond/Eth ports, during previous 15-minute intervals.')
g9982Perf1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 264, 2, 1, 6)).setObjects(("G9982-MIB", "g9982PortPm1DayIntervalMoniTime"), ("G9982-MIB", "g9982PortPm1DayIntervalRxErrors"), ("G9982-MIB", "g9982PortPm1DayIntervalRxSmallFragments"), ("G9982-MIB", "g9982PortPm1DayIntervalRxLargeFragments"), ("G9982-MIB", "g9982PortPm1DayIntervalRxBadFragments"), ("G9982-MIB", "g9982PortPm1DayIntervalRxLostFragments"), ("G9982-MIB", "g9982PortPm1DayIntervalRxLostStarts"), ("G9982-MIB", "g9982PortPm1DayIntervalRxLostEnds"), ("G9982-MIB", "g9982PortPm1DayIntervalRxOverflows"), ("G9982-MIB", "g9982PortPm1DayIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982Perf1DayGroup = g9982Perf1DayGroup.setStatus('current')
if mibBuilder.loadTexts: g9982Perf1DayGroup.setDescription('A collection of objects supporting OPTIONAL historical Performance Monitoring information for G.Bond/Eth ports, during previous 1-day intervals.')
g9982Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 264, 2, 2, 1)).setObjects(("G9982-MIB", "g9982BasicGroup"), ("G9982-MIB", "g9982BceGroup"), ("G9982-MIB", "g9982BacpGroup"), ("G9982-MIB", "g9982PerfCurrGroup"), ("G9982-MIB", "g9982Perf15MinGroup"), ("G9982-MIB", "g9982Perf1DayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9982Compliance = g9982Compliance.setStatus('current')
if mibBuilder.loadTexts: g9982Compliance.setDescription('The compliance statement for G.Bond Ethernet interfaces. Compliance with the following external compliance statements is REQUIRED: MIB Module Compliance Statement ---------- -------------------- IF-MIB ifCompliance3 GBOND-MIB gBondCompliance')
mibBuilder.exportSymbols("G9982-MIB", g9982PortPm1DayIntervalRxLostStarts=g9982PortPm1DayIntervalRxLostStarts, g9982PortPmCur1DayRxOverflows=g9982PortPmCur1DayRxOverflows, PYSNMP_MODULE_ID=g9982MIB, g9982Conformance=g9982Conformance, g9982Port=g9982Port, g9982BceStatTcInCrcErrors=g9982BceStatTcInCrcErrors, g9982Objects=g9982Objects, g9982PortConfTcAdminType=g9982PortConfTcAdminType, g9982BceStatTcInCodingErrors=g9982BceStatTcInCodingErrors, g9982PortPm1DayIntervalRxLargeFragments=g9982PortPm1DayIntervalRxLargeFragments, g9982PortPm15MinIntervalRxBadFragments=g9982PortPm15MinIntervalRxBadFragments, g9982PortPmCur15MinTimeElapsed=g9982PortPmCur15MinTimeElapsed, g9982PortPm1DayIntervalRxErrors=g9982PortPm1DayIntervalRxErrors, g9982Perf1DayGroup=g9982Perf1DayGroup, g9982PortStatTcOperType=g9982PortStatTcOperType, g9982PortConfTable=g9982PortConfTable, g9982PortStatEntry=g9982PortStatEntry, g9982PortStatRxLostStarts=g9982PortStatRxLostStarts, g9982PortPm15MinIntervalIndex=g9982PortPm15MinIntervalIndex, g9982PortPmCur1DayRxErrors=g9982PortPmCur1DayRxErrors, g9982PortPm15MinEntry=g9982PortPm15MinEntry, g9982PortPmCur15MinRxLargeFragments=g9982PortPmCur15MinRxLargeFragments, g9982PortPmCurTable=g9982PortPmCurTable, g9982PortPmCur15MinRxOverflows=g9982PortPmCur15MinRxOverflows, g9982PortPm15MinIntervalMoniTime=g9982PortPm15MinIntervalMoniTime, g9982BacpGroup=g9982BacpGroup, g9982BceStatEntry=g9982BceStatEntry, g9982PortPmCurEntry=g9982PortPmCurEntry, g9982BceStatTable=g9982BceStatTable, g9982PortStatRxLargeFragments=g9982PortStatRxLargeFragments, g9982PortPm1DayIntervalRxLostEnds=g9982PortPm1DayIntervalRxLostEnds, g9982BceConfEligibleGroupID=g9982BceConfEligibleGroupID, g9982PortPm1DayIntervalIndex=g9982PortPm1DayIntervalIndex, g9982Perf15MinGroup=g9982Perf15MinGroup, g9982PortPmCur15MinRxLostStarts=g9982PortPmCur15MinRxLostStarts, g9982PortPm15MinValidIntervals=g9982PortPm15MinValidIntervals, g9982PerfCurrGroup=g9982PerfCurrGroup, g9982PortPm1DayIntervalMoniTime=g9982PortPm1DayIntervalMoniTime, g9982Compliance=g9982Compliance, g9982PortCapTcTypesSupported=g9982PortCapTcTypesSupported, g9982PortCapBacpSupported=g9982PortCapBacpSupported, g9982PortPmCur15MinRxSmallFragments=g9982PortPmCur15MinRxSmallFragments, g9982PortCapEntry=g9982PortCapEntry, g9982PM=g9982PM, g9982PortPmCur15MinRxLostFragments=g9982PortPmCur15MinRxLostFragments, g9982PortPm1DayIntervalValid=g9982PortPm1DayIntervalValid, g9982BceConfPeerEligibleGroupID=g9982BceConfPeerEligibleGroupID, g9982PortPm15MinIntervalRxOverflows=g9982PortPm15MinIntervalRxOverflows, g9982PortPmCur1DayRxLostStarts=g9982PortPmCur1DayRxLostStarts, g9982PortPm15MinIntervalRxSmallFragments=g9982PortPm15MinIntervalRxSmallFragments, g9982PortConfAdminCp=g9982PortConfAdminCp, g9982BceConfEntry=g9982BceConfEntry, g9982PortPm15MinIntervalValid=g9982PortPm15MinIntervalValid, G9982PtmTcType=G9982PtmTcType, g9982PortPm1DayIntervalRxSmallFragments=g9982PortPm1DayIntervalRxSmallFragments, g9982PortPm15MinIntervalRxLostStarts=g9982PortPm15MinIntervalRxLostStarts, g9982Bce=g9982Bce, g9982PortPmCur15MinRxErrors=g9982PortPmCur15MinRxErrors, g9982PortPm1DayValidIntervals=g9982PortPm1DayValidIntervals, G9982CpType=G9982CpType, g9982Compliances=g9982Compliances, g9982PortPmCur1DayRxBadFragments=g9982PortPmCur1DayRxBadFragments, g9982PortPmCur1DayTimeElapsed=g9982PortPmCur1DayTimeElapsed, g9982PortPm15MinInvalidIntervals=g9982PortPm15MinInvalidIntervals, g9982PortPm1DayEntry=g9982PortPm1DayEntry, g9982MIB=g9982MIB, g9982PortPmCur1DayRxLostFragments=g9982PortPmCur1DayRxLostFragments, g9982PortPm1DayTable=g9982PortPm1DayTable, g9982PortStatTable=g9982PortStatTable, g9982PortStatRxErrors=g9982PortStatRxErrors, g9982Groups=g9982Groups, g9982PortPmCur1DayRxSmallFragments=g9982PortPmCur1DayRxSmallFragments, g9982PortCapTable=g9982PortCapTable, g9982PortPm1DayInvalidIntervals=g9982PortPm1DayInvalidIntervals, g9982BasicGroup=g9982BasicGroup, g9982PortStatRxLostFragments=g9982PortStatRxLostFragments, g9982PortPm15MinIntervalRxLostEnds=g9982PortPm15MinIntervalRxLostEnds, g9982PortStatOperCp=g9982PortStatOperCp, g9982PortConfEntry=g9982PortConfEntry, g9982PortStatRxLostEnds=g9982PortStatRxLostEnds, g9982PortPmCur15MinRxLostEnds=g9982PortPmCur15MinRxLostEnds, g9982PortPm15MinIntervalRxErrors=g9982PortPm15MinIntervalRxErrors, g9982PortStatRxSmallFragments=g9982PortStatRxSmallFragments, g9982BceConfTable=g9982BceConfTable, g9982PortPmCur15MinRxBadFragments=g9982PortPmCur15MinRxBadFragments, g9982PortPm1DayIntervalRxBadFragments=g9982PortPm1DayIntervalRxBadFragments, g9982PortPmCur1DayRxLargeFragments=g9982PortPmCur1DayRxLargeFragments, g9982PortPm1DayIntervalRxOverflows=g9982PortPm1DayIntervalRxOverflows, g9982PortPm15MinIntervalRxLargeFragments=g9982PortPm15MinIntervalRxLargeFragments, g9982PortStatRxOverflows=g9982PortStatRxOverflows, g9982PortPm1DayIntervalRxLostFragments=g9982PortPm1DayIntervalRxLostFragments, g9982BceGroup=g9982BceGroup, g9982PortPm15MinTable=g9982PortPm15MinTable, g9982PortPmCur1DayRxLostEnds=g9982PortPmCur1DayRxLostEnds, g9982PortPm15MinIntervalRxLostFragments=g9982PortPm15MinIntervalRxLostFragments, g9982PortStatRxBadFragments=g9982PortStatRxBadFragments)
