#
# PySNMP MIB module FOUNDRY-SN-WIRELESS-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-WIRELESS-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:15:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
MacAddress, = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "MacAddress")
snSwitch, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, Unsigned32, Counter32, ModuleIdentity, IpAddress, Bits, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Unsigned32", "Counter32", "ModuleIdentity", "IpAddress", "Bits", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snWireless = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23))
snWireless.setRevisions(('2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snWireless.setRevisionsDescriptions(('Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'convert from SMIv1 to SMIv2',))
if mibBuilder.loadTexts: snWireless.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snWireless.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snWireless.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snWireless.setDescription("Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class IfIndexList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight interfaces by their ifIndex values, with the first octet specifying interfaces 1 through 8, the second octet specifying interfaces 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered interface, and the least significant bit represents the highest numbered interface. Thus, each interface of the device is represented by a single bit within the value of this object. If that bit has a value of '1' then that interface is included in the set of interfaces; the interface is not included if its bit has a value of '0'."
    status = 'current'

wgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 1))
wgMobilityId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgMobilityId.setStatus('current')
if mibBuilder.loadTexts: wgMobilityId.setDescription('Unique Identifier used to specify the mobility doamin. Valid range is <1 - 65535>. Use <0> to remove the domain.')
wgVpnPTDeletePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgVpnPTDeletePolicy.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTDeletePolicy.setDescription('Write a valid VPN pass through policy ID to remove the policy. Return zero when reading this object.')
wgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2), )
if mibBuilder.loadTexts: wgIfTable.setStatus('current')
if mibBuilder.loadTexts: wgIfTable.setDescription('WiFi Interface Table.')
wgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgIfIndex"))
if mibBuilder.loadTexts: wgIfEntry.setStatus('current')
if mibBuilder.loadTexts: wgIfEntry.setDescription('An entry of the WiFi Interface Table.')
wgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIfIndex.setStatus('current')
if mibBuilder.loadTexts: wgIfIndex.setDescription('ifIndex value of the switch interface.')
wgIfWirelessEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgIfWirelessEnable.setStatus('current')
if mibBuilder.loadTexts: wgIfWirelessEnable.setDescription('Control wireless function of the switch interface.')
wgIfPnPLearnNewAP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgIfPnPLearnNewAP.setStatus('current')
if mibBuilder.loadTexts: wgIfPnPLearnNewAP.setDescription('Control the interface to learn new AP.')
wgIfAutoPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgIfAutoPortDisable.setStatus('current')
if mibBuilder.loadTexts: wgIfAutoPortDisable.setDescription('Disable the interface if the interface link status change.')
wgIfVpnPTPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgIfVpnPTPolicyId.setStatus('current')
if mibBuilder.loadTexts: wgIfVpnPTPolicyId.setDescription('To bind an interface to a VPN pass through policy, write a valid policy number which is larger than zero. To unbind an interface to a VPN pass through policy, write a zero.')
wgIfFullCompRoamingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgIfFullCompRoamingEnable.setStatus('current')
if mibBuilder.loadTexts: wgIfFullCompRoamingEnable.setDescription('Control full compatibility roaming of an interface.')
wgRoamingPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 3), )
if mibBuilder.loadTexts: wgRoamingPeerTable.setStatus('current')
if mibBuilder.loadTexts: wgRoamingPeerTable.setDescription('Roaming Peer table contains information of peers.')
wgRoamingPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgRoamingPeerIpAddress"))
if mibBuilder.loadTexts: wgRoamingPeerEntry.setStatus('current')
if mibBuilder.loadTexts: wgRoamingPeerEntry.setDescription('An entry of the roaming peer table.')
wgRoamingPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgRoamingPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: wgRoamingPeerIpAddress.setDescription('IP Address of the ISRP peer.')
wgRoamingPeerConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("configured", 2), ("established", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgRoamingPeerConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: wgRoamingPeerConnectionStatus.setDescription('Shows the state of the ISRP Connection.')
wgRoamingPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgRoamingPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: wgRoamingPeerRowStatus.setDescription('Shows the state of the row in the PeerRow Table.')
wgPnPTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4), )
if mibBuilder.loadTexts: wgPnPTable.setStatus('current')
if mibBuilder.loadTexts: wgPnPTable.setDescription('AP Plug and Play Table.')
wgPnPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgPnPIfIndex"), (0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgPnPMacAddress"))
if mibBuilder.loadTexts: wgPnPEntry.setStatus('current')
if mibBuilder.loadTexts: wgPnPEntry.setDescription('An entry of the AP Plug and Play Table.')
wgPnPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPnPIfIndex.setStatus('current')
if mibBuilder.loadTexts: wgPnPIfIndex.setDescription('ifIndex value of the switch interface.')
wgPnPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPnPMacAddress.setStatus('current')
if mibBuilder.loadTexts: wgPnPMacAddress.setDescription('MAC address of the attached AP.')
wgPnPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgPnPIpAddress.setStatus('current')
if mibBuilder.loadTexts: wgPnPIpAddress.setDescription('IP address of the attached AP.')
wgPnPIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgPnPIpMask.setStatus('current')
if mibBuilder.loadTexts: wgPnPIpMask.setDescription('Subnet mask of the attached AP.')
wgPnPIpDefaultGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgPnPIpDefaultGw.setStatus('current')
if mibBuilder.loadTexts: wgPnPIpDefaultGw.setDescription('Default gateway of the attached AP.')
wgPnPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("discovered", 2), ("configured", 3), ("operational", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPnPStatus.setStatus('current')
if mibBuilder.loadTexts: wgPnPStatus.setDescription("AP device status. If the switch diecovered a new AP which had not been configured, the 'discovered' state will return. If the AP's IP address, subnet mask and default gateway were configured to the switch port but the AP with the matching MAC address had not attached to the switch port, 'configured' state will return. If the AP's IP address, subnet mask and default gateway were configured to the switch port and the AP with the matching MAC address had attached to the switch port and was operating, 'operational' state will return.")
wgPnPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgPnPRowStatus.setStatus('current')
if mibBuilder.loadTexts: wgPnPRowStatus.setDescription('Create, delete or modify a row of AP Plug and Play Table.')
wgVpnPTServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 5), )
if mibBuilder.loadTexts: wgVpnPTServerTable.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTServerTable.setDescription('VPN pass through server table')
wgVpnPTServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgVpnPTServerPolicyId"), (0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgVpnPTServerIpAddress"))
if mibBuilder.loadTexts: wgVpnPTServerEntry.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTServerEntry.setDescription('An entry of the VPN pass through server table.')
wgVpnPTServerPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTServerPolicyId.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTServerPolicyId.setDescription('VPN pass through policy identifier. It must be greater than zero.')
wgVpnPTServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTServerIpAddress.setDescription('VPN server IP address.')
wgVpnPTServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgVpnPTServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTServerRowStatus.setDescription('Create or delete a row of VPN pass through server table.')
wgVpnPTFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 6), )
if mibBuilder.loadTexts: wgVpnPTFilterTable.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTFilterTable.setDescription('VPN pass through filter table')
wgVpnPTFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgVpnPTFilterPolicyId"), (0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgVpnPTFilterProtocol"), (0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgVpnPTFilterPort"))
if mibBuilder.loadTexts: wgVpnPTFilterEntry.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTFilterEntry.setDescription('An entry of the VPN pass through filter table.')
wgVpnPTFilterPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTFilterPolicyId.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTFilterPolicyId.setDescription('VPN pass through policy identifier. It must be greater than zero.')
wgVpnPTFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("udp", 2), ("tcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTFilterProtocol.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTFilterProtocol.setDescription('Allow this type of protocol to pass through.')
wgVpnPTFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTFilterPort.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTFilterPort.setDescription('Allow this protocol port to pass through.')
wgVpnPTFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wgVpnPTFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTFilterRowStatus.setDescription('Create or delete a row of VPN pass through filter table.')
wgVpnPTPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 7), )
if mibBuilder.loadTexts: wgVpnPTPolicyTable.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTPolicyTable.setDescription('VPN pass through policy table')
wgVpnPTPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgVpnPTPolicyId"))
if mibBuilder.loadTexts: wgVpnPTPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTPolicyEntry.setDescription('An entry of the VPN pass through policy table.')
wgVpnPTPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTPolicyId.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTPolicyId.setDescription('VPN pass through policy identifier. It must be greater than zero.')
wgVpnPTPolicyPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23, 7, 1, 2), IfIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgVpnPTPolicyPortList.setStatus('current')
if mibBuilder.loadTexts: wgVpnPTPolicyPortList.setDescription('A list of ports bound to this VPN pass through policy.')
mibBuilder.exportSymbols("FOUNDRY-SN-WIRELESS-GROUP-MIB", wgIfTable=wgIfTable, wgVpnPTFilterTable=wgVpnPTFilterTable, wgVpnPTServerPolicyId=wgVpnPTServerPolicyId, wgPnPMacAddress=wgPnPMacAddress, snWireless=snWireless, wgIfVpnPTPolicyId=wgIfVpnPTPolicyId, wgRoamingPeerConnectionStatus=wgRoamingPeerConnectionStatus, wgVpnPTServerRowStatus=wgVpnPTServerRowStatus, wgVpnPTFilterProtocol=wgVpnPTFilterProtocol, wgGroup=wgGroup, wgPnPIpDefaultGw=wgPnPIpDefaultGw, wgIfFullCompRoamingEnable=wgIfFullCompRoamingEnable, wgPnPRowStatus=wgPnPRowStatus, wgMobilityId=wgMobilityId, wgVpnPTServerTable=wgVpnPTServerTable, wgRoamingPeerEntry=wgRoamingPeerEntry, wgVpnPTPolicyEntry=wgVpnPTPolicyEntry, wgVpnPTFilterEntry=wgVpnPTFilterEntry, wgVpnPTPolicyPortList=wgVpnPTPolicyPortList, wgIfEntry=wgIfEntry, IfIndexList=IfIndexList, wgIfPnPLearnNewAP=wgIfPnPLearnNewAP, wgIfAutoPortDisable=wgIfAutoPortDisable, wgRoamingPeerRowStatus=wgRoamingPeerRowStatus, wgPnPIpAddress=wgPnPIpAddress, wgPnPTable=wgPnPTable, wgPnPIpMask=wgPnPIpMask, wgVpnPTPolicyId=wgVpnPTPolicyId, PYSNMP_MODULE_ID=snWireless, wgVpnPTServerEntry=wgVpnPTServerEntry, wgVpnPTPolicyTable=wgVpnPTPolicyTable, wgPnPIfIndex=wgPnPIfIndex, wgPnPStatus=wgPnPStatus, wgVpnPTDeletePolicy=wgVpnPTDeletePolicy, wgPnPEntry=wgPnPEntry, wgVpnPTServerIpAddress=wgVpnPTServerIpAddress, wgVpnPTFilterRowStatus=wgVpnPTFilterRowStatus, wgRoamingPeerIpAddress=wgRoamingPeerIpAddress, wgVpnPTFilterPolicyId=wgVpnPTFilterPolicyId, wgRoamingPeerTable=wgRoamingPeerTable, wgIfIndex=wgIfIndex, wgIfWirelessEnable=wgIfWirelessEnable, wgVpnPTFilterPort=wgVpnPTFilterPort)
