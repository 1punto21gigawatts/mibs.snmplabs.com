#
# PySNMP MIB module ENTERASYS-LICENSE-KEY-OIDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-LICENSE-KEY-OIDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
etsysOidOtherLicenseKeyId, = mibBuilder.importSymbols("ENTERASYS-OIDS-MIB", "etsysOidOtherLicenseKeyId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, Integer32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, IpAddress, Counter64, TimeTicks, Gauge32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Integer32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "IpAddress", "Counter64", "TimeTicks", "Gauge32", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
etsysLicenseKeyOidsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 56))
etsysLicenseKeyOidsMIB.setRevisions(('2009-08-05 20:14', '2008-02-26 13:51', '2008-01-18 15:56', '2007-06-11 14:24', '2006-11-13 15:29', '2006-09-05 17:37', '2006-08-15 19:56', '2005-12-13 21:12', '2004-11-03 17:01', '2004-08-24 13:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysLicenseKeyOidsMIB.setRevisionsDescriptions(('Added OIDs for the S Series licensable features.', 'Added an OID for the G Series Routing feature.', 'Added an OID for the D Series Policy feature.', 'Added an OID for the hardware based N-EOS-L3-DIAMOND license key.', 'Added an OID for the N-EOS-GPOLICY license key.', 'Added an OID for the C Series IPV6 Routing feature.', 'Added OIDs for the B Series Routing feature and the C Series Advanced Routing feature.', 'Added an OID for the B Series Policy feature.', 'Added an OID for the N-EOS-PPC license key.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysLicenseKeyOidsMIB.setLastUpdated('200908052014Z')
if mibBuilder.loadTexts: etsysLicenseKeyOidsMIB.setOrganization('Enterasys Networks')
if mibBuilder.loadTexts: etsysLicenseKeyOidsMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysLicenseKeyOidsMIB.setDescription("This MIB module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to OIDs for licensable features on Enterasys Networks' devices. The OIDs contained in this module are intended to be returned by the etsysLicenseKeyIdentifier of the ENTERASYS-LICENSE-KEY-MIB.")
etsysLicKeyIdNSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1))
etsysLicKeyIdNL3AdvancedFeature = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1, 1))
if mibBuilder.loadTexts: etsysLicKeyIdNL3AdvancedFeature.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdNL3AdvancedFeature.setDescription('N-Series Layer 3 Advanced Features license. This is the N-EOS-L3 license key.')
etsysLicKeyIdNGoldRedundancy = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1, 2))
if mibBuilder.loadTexts: etsysLicKeyIdNGoldRedundancy.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdNGoldRedundancy.setDescription('N-Series DFE-Gold Master Redundancy license. This is the N-EOS-RED license key.')
etsysLicKeyIdNPlatinumHighCapacity = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1, 3))
if mibBuilder.loadTexts: etsysLicKeyIdNPlatinumHighCapacity.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdNPlatinumHighCapacity.setDescription('N-Series DFE-Platinum User Capacity license. This is the N-EOS-PUC license key.')
etsysLicKeyIdNPlatinumPortCapacity = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1, 4))
if mibBuilder.loadTexts: etsysLicKeyIdNPlatinumPortCapacity.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdNPlatinumPortCapacity.setDescription('N-Series DFE-Platinum Port Capacity license. This is the N-EOS-PPC license key.')
etsysLicKeyIdNGoldPolicy = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1, 5))
if mibBuilder.loadTexts: etsysLicKeyIdNGoldPolicy.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdNGoldPolicy.setDescription('N-Series DFE-Gold Policy license. This is the N-EOS-GPOLICY license key.')
etsysLicKeyIdNL3DiamondFeature = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 1, 6))
if mibBuilder.loadTexts: etsysLicKeyIdNL3DiamondFeature.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdNL3DiamondFeature.setDescription('N-Series Layer 3 hardware based Advanced Features license. This is the N-EOS-L3-HW license key.')
etsysLicKeyIdCSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 2))
etsysLicKeyIdCAdvancedRouting = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 2, 1))
if mibBuilder.loadTexts: etsysLicKeyIdCAdvancedRouting.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdCAdvancedRouting.setDescription('C-Series Advanced Routing License.')
etsysLicKeyIdC3IpV6Routing = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 2, 2))
if mibBuilder.loadTexts: etsysLicKeyIdC3IpV6Routing.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdC3IpV6Routing.setDescription('C3 IP Version 6 Routing License.')
etsysLicKeyIdBSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 3))
etsysLicKeyIdBPolicy = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 3, 1))
if mibBuilder.loadTexts: etsysLicKeyIdBPolicy.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdBPolicy.setDescription('B-Series Policy License.')
etsysLicKeyIdBRouting = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 3, 2))
if mibBuilder.loadTexts: etsysLicKeyIdBRouting.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdBRouting.setDescription('B-Series Routing License.')
etsysLicKeyIdDSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 4))
etsysLicKeyIdDPolicy = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 4, 1))
if mibBuilder.loadTexts: etsysLicKeyIdDPolicy.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdDPolicy.setDescription('D-Series Policy License.')
etsysLicKeyIdGSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 5))
etsysLicKeyIdGRouting = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 5, 1))
if mibBuilder.loadTexts: etsysLicKeyIdGRouting.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdGRouting.setDescription('G-Series Routing License.')
etsysLicKeyIdSSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 6))
etsysLicKeyIdSxEOSxPPC = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 6, 1))
if mibBuilder.loadTexts: etsysLicKeyIdSxEOSxPPC.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdSxEOSxPPC.setDescription('S-Series Per Port User Capacity License Upgrade for use on S-Series Access Modules.')
etsysLicKeyIdSxEOSxL3xACCESS = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 6, 2))
if mibBuilder.loadTexts: etsysLicKeyIdSxEOSxL3xACCESS.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdSxEOSxL3xACCESS.setDescription('S-Series Advanced Routing License for use on S-Series Access Modules.')
etsysLicKeyIdSxEOSxL3xCORE = ObjectIdentity((1, 3, 6, 1, 4, 1, 5624, 2, 3, 2, 6, 3))
if mibBuilder.loadTexts: etsysLicKeyIdSxEOSxL3xCORE.setStatus('current')
if mibBuilder.loadTexts: etsysLicKeyIdSxEOSxL3xCORE.setDescription('S-Series Advanced Routing License for use on S-Series Distribution/Core Modules.')
mibBuilder.exportSymbols("ENTERASYS-LICENSE-KEY-OIDS-MIB", etsysLicKeyIdDPolicy=etsysLicKeyIdDPolicy, etsysLicKeyIdCAdvancedRouting=etsysLicKeyIdCAdvancedRouting, etsysLicKeyIdNPlatinumPortCapacity=etsysLicKeyIdNPlatinumPortCapacity, etsysLicKeyIdBSeries=etsysLicKeyIdBSeries, etsysLicKeyIdGSeries=etsysLicKeyIdGSeries, etsysLicKeyIdSxEOSxPPC=etsysLicKeyIdSxEOSxPPC, etsysLicKeyIdCSeries=etsysLicKeyIdCSeries, etsysLicKeyIdC3IpV6Routing=etsysLicKeyIdC3IpV6Routing, etsysLicKeyIdNL3AdvancedFeature=etsysLicKeyIdNL3AdvancedFeature, etsysLicKeyIdSxEOSxL3xACCESS=etsysLicKeyIdSxEOSxL3xACCESS, etsysLicKeyIdDSeries=etsysLicKeyIdDSeries, etsysLicKeyIdNGoldRedundancy=etsysLicKeyIdNGoldRedundancy, etsysLicKeyIdSSeries=etsysLicKeyIdSSeries, etsysLicKeyIdNGoldPolicy=etsysLicKeyIdNGoldPolicy, etsysLicKeyIdBPolicy=etsysLicKeyIdBPolicy, etsysLicKeyIdGRouting=etsysLicKeyIdGRouting, etsysLicenseKeyOidsMIB=etsysLicenseKeyOidsMIB, etsysLicKeyIdNSeries=etsysLicKeyIdNSeries, etsysLicKeyIdSxEOSxL3xCORE=etsysLicKeyIdSxEOSxL3xCORE, PYSNMP_MODULE_ID=etsysLicenseKeyOidsMIB, etsysLicKeyIdNPlatinumHighCapacity=etsysLicKeyIdNPlatinumHighCapacity, etsysLicKeyIdNL3DiamondFeature=etsysLicKeyIdNL3DiamondFeature, etsysLicKeyIdBRouting=etsysLicKeyIdBRouting)
