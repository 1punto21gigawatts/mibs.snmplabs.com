#
# PySNMP MIB module CISCO-WAN-SVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-SVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NetPrefix, AtmAddress = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "NetPrefix", "AtmAddress")
CiscoWanNsapAtmAddress, = mibBuilder.importSymbols("CISCO-WAN-ATM-CONN-MIB", "CiscoWanNsapAtmAddress")
stratacom, = mibBuilder.importSymbols("CISCOWAN-SMI", "stratacom")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
PnniNodeId, PnniPortId = mibBuilder.importSymbols("PNNI-MIB", "PnniNodeId", "PnniPortId")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, TimeTicks, Integer32, ObjectIdentity, ModuleIdentity, Counter32, Unsigned32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "TimeTicks", "Integer32", "ObjectIdentity", "ModuleIdentity", "Counter32", "Unsigned32", "Bits", "iso")
DisplayString, RowStatus, TimeStamp, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TimeStamp", "TruthValue", "TextualConvention")
ciscoWANSvcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 140))
ciscoWANSvcMIB.setRevisions(('2003-03-10 00:00', '2002-09-16 00:00', '2002-03-01 00:00', '2001-07-19 00:00', '2001-07-06 00:00', '2001-06-06 00:00', '2001-05-10 00:00', '2000-10-20 00:00', '2000-09-01 00:00', '2000-08-03 00:00', '2000-06-15 00:00', '2000-04-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWANSvcMIB.setRevisionsDescriptions(('a) Modified to have characters/line to be less than 72 and add range for Integer32. b) Modified to use cwspConfigGrp3 in ciscoWANSvcMIBCompliance3. ', "a) Added 'cwspSpvcAddress' to cwspConfigTable.", "a) Added 'cwspRoutingPriority' object in cwspConfigTable. b) The DEFVAL clause for 'cwspUniVersion' and 'cwspNniVersion' is changed to 'unsupported(7)' from 'uni31'. The DESCRIPTION is modified for these objects.", 'The change is to back out previous revision. The requirement was changed.', "The change is to use 'unsupoerted(7)' as default for both 'cwspUniVersion' and 'cwspNniVersion'. DESCRIPTION modified for both variables as well.", "The change is to add 'self(9)' enumeration to 'cwspUniVersion'. This value is used to indicate a voice port.", "The changes are as follows: (1) Add one mib variable 'cwspConnTraceLastNode'. (2) Add 'unsupported(7)'to 'cwspNniVersion' variable. (3) Add additional comments in DESCRIPTION of 'cwspNniVersion' and 'cwspUniVersion' variables. (4) Corrected spelling error.", "The changes are as follows: (1) Description for 'ENNI' is added. (2) cwspNniVersion -- enumeration enni(4) and aini(5) are added. (3) cwspOperNniSigVersion -- enumeration aini(5) is added.", 'The changes are as follows: (1) The default value of cwspMinSvccVci is changed to 35. (2) The lower range of cwspMaxSvccVci changed to 35.', 'Importing symbol stratacom from CISCOWAN-SMI instead from BASIS-MIB.', 'The changes are as follows. (1) The lower bound and upper bound of the following MIB objects has been changed from 0 to 1 and from 100 to 200 respectively. (i) cwspUtilFactorCbr (ii) cwspUtilFactorRtVbr (iii) cwspUtilFactorNrtVbr (iv) cwspUtilFactorAbr (v) cwspUtilFactorUbr (2) The lower bound of cwspMinSvccVci object has been changed from 32 to 0.', 'This is the initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWANSvcMIB.setLastUpdated('200303100000Z')
if mibBuilder.loadTexts: ciscoWANSvcMIB.setOrganization('Cisco System, Inc')
if mibBuilder.loadTexts: ciscoWANSvcMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95143 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWANSvcMIB.setDescription("The MIB modules describe an ATM network service on a BPX-SES or a MGX ATM switch. This MIB module provides configuring, provisioning, as well as status gathering for ATM services. Abbreviation used: ABR -- Available Bit Rate AINI -- ATM Inter-Network Interface ATM -- Asynchronous Transfer Mode BGN -- Begin BW -- Bandwidth CBR -- Constant Bit Rate ENNI -- Enhanced Network to Network Interface Note: The 'ENNI' term used here indicating 'enhanced' or 'friendly' NNI for linking two networks of CISCO AutoRoute or PNNI switches. The XPVCs and XPVPs are provisioned across them. Functionality includes changing segment OAM cell handling so that these cells flow over 'end-to-end OAM segment' loops for the provisioned length of the XPVC or XPVP, i.e. the 'segment' comprises the two or three segments between the user ports. Also implemented at ENNIs is an LMI functionality that enables auto-discovery of the ENNIs. ER -- Error Recovery GAT -- Generic Application Transport IE -- Information Element IISP -- Interim Inter-Switch Signaling Protocol ILMI -- Interim Local Management Interface MD -- Management Data PNNI -- Private Network-Network Interface RS -- Resynchronization REJ -- Rejection SD -- Sequence Data SDP -- Sequence Data with Poll SPVC -- Soft Permanent Virtual Circuit SSCOP -- Service Specific Connection Oriented Protocol SVC -- Switched Virtual Circuit UBR -- Unspecified Bit Rate UD -- Unit Data UNI -- User-Network Interface USTAT -- Unsolicited STAT VBR -- Variable Bit Rate")
ciscoWANSvcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1))
ciscoWANSvcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 1))
ciscoWANSvcPort = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2))
ciscoWANPnniRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 3))
ciscoWANSpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 4))
cwspConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1))
cwspCacConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2))
cwspSigConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3))
cwspSscopConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4))
cwspCallStats = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5))
cwspSigStats = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6))
cwspSscopStats = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7))
cwspCall = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8))
cwspAbrCall = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9))
cwspPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 10))
cwspAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11))
cwspRegAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 12))
cwspLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13))
cwspConnTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14))
cwspOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15))
class CwspSpvcState(TextualConvention, Integer32):
    description = 'Defines possible failures at an endpoint. The following are implemented: genSpvcErr(1) -- General SPVC error, sRecvSetupConfmMismatch(12) -- Connection ATM Conformance type -- mismatch with master at slave endpoint. sRecvSetupServMismatch(13) -- Connection Service type mismatch with -- master at slave endpoint. sRecvSetupTrafParmMismatch(14), -- Traffic parameters mismatch with master -- at slave endpoint. masterSpvcAutoDelete(15) -- Controller auto deleting provisioned -- master SPVC. and slaveSpvcAutoDelete(16) -- Controller auto deleting provisioned -- slave SPVC.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("genSpvcErr", 1), ("mPvcDelFail", 2), ("sPvcDelFail", 3), ("mRelPendHalfTmout", 4), ("mInstlPvcFail", 5), ("sInstlPvcFail", 6), ("mRecmtPvcFail", 7), ("sRecmtPvcFail", 8), ("mCmtHalfFail", 9), ("sCmtHalfFail", 10), ("mInstlXconnFail", 11), ("sRecvSetupConfmMismatch", 12), ("sRecvSetupServMismatch", 13), ("sRecvSetupTrafParmMismatch", 14), ("masterSpvcAutoDelete", 15), ("slaveSpvcAutoDelete", 16))

class CwspControllerState(TextualConvention, Integer32):
    description = 'Defines possible state for the pnni controller.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ready", 1), ("unavilable", 2))

cwsSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSwRevision.setStatus('current')
if mibBuilder.loadTexts: cwsSwRevision.setDescription('PNNI network controller software revision number.')
cwsControllerStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 1, 6), CwspControllerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsControllerStatus.setStatus('current')
if mibBuilder.loadTexts: cwsControllerStatus.setDescription('The administrative status for the pnni active controller.')
cwspPnniStndbyControllerStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 1, 7), CwspControllerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspPnniStndbyControllerStatus.setStatus('current')
if mibBuilder.loadTexts: cwspPnniStndbyControllerStatus.setDescription('The administrative status for the standby controller.')
cwspPnniControllerStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("stndby", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspPnniControllerStatus.setStatus('current')
if mibBuilder.loadTexts: cwspPnniControllerStatus.setDescription('The administrative status of the pnni controller. Note: this object is only used in the trap varbind, snmp get operation is meaningless.')
cwspPnniControllerPhySlot = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspPnniControllerPhySlot.setStatus('current')
if mibBuilder.loadTexts: cwspPnniControllerPhySlot.setDescription('The pnni controller physical location for MGX or BPX-SES. Note: this object is only used in the trap varbind, snmp get operation is meaningless.')
cwspSscopTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1), )
if mibBuilder.loadTexts: cwspSscopTable.setStatus('current')
if mibBuilder.loadTexts: cwspSscopTable.setDescription('This table specifies SSCOP (Layer 2) configuration parameters.')
cwspSscopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspSscopEntry.setStatus('current')
if mibBuilder.loadTexts: cwspSscopEntry.setDescription('An entry in the SSCOP configuration table. Each entry indexed by the ifIndex of a port.')
cwspSscopTmrCC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopTmrCC.setStatus('current')
if mibBuilder.loadTexts: cwspSscopTmrCC.setDescription('This object contains the value for Connection control timer.')
cwspSscopTmrKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopTmrKeepAlive.setStatus('current')
if mibBuilder.loadTexts: cwspSscopTmrKeepAlive.setDescription('This object contains the value for keep alive timer ')
cwspSscopTmrNoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopTmrNoResp.setStatus('current')
if mibBuilder.loadTexts: cwspSscopTmrNoResp.setDescription('This object contains the value for no response timer.')
cwspSscopTmrPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopTmrPoll.setStatus('current')
if mibBuilder.loadTexts: cwspSscopTmrPoll.setDescription('This object contains the value for poll timer.')
cwspSscopTmtIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopTmtIdle.setStatus('current')
if mibBuilder.loadTexts: cwspSscopTmtIdle.setDescription('This object contains the value for idle timer.')
cwspSscopMaxCC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopMaxCC.setStatus('current')
if mibBuilder.loadTexts: cwspSscopMaxCC.setDescription('This object contains the upper limit for the number of transmissions of a BGN, END, ER or RS PDU.')
cwspSscopMaxPD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopMaxPD.setStatus('current')
if mibBuilder.loadTexts: cwspSscopMaxPD.setDescription('This object contains an upper limit for a counter which counts the number of SD PDUs transmitted between transmissions of POLL PDUs or the number of SD PDUs transmitted before the transmission of the first POLL PDU after POLL timer became active.')
cwspSscopMaxSTAT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(67)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopMaxSTAT.setStatus('current')
if mibBuilder.loadTexts: cwspSscopMaxSTAT.setDescription('This object contains an upper limit for the number of list elements placed in a STAT PDU.')
cwspSscopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1), )
if mibBuilder.loadTexts: cwspSscopStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwspSscopStatsTable.setDescription('This table contains SSCOP (Layer 2) statistics counters.')
cwspSscopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspSscopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwspSscopStatsEntry.setDescription('An entry contains SSCOP (Layer 2) statistics.')
cwspSscopCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSscopCounterReset.setStatus('current')
if mibBuilder.loadTexts: cwspSscopCounterReset.setDescription('This object specifies whether the SSCOP statistics collected for this interface needs to be reset.')
cwspSscopIgnoredPduRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopIgnoredPduRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopIgnoredPduRcv.setDescription('This object stores the number of SSCOP PDUs that are received but ignored due to incorrect size, invalid PDU, unknown PDU type.')
cwspSscopBgnRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopBgnRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopBgnRcv.setDescription('This object stores the number of SSCOP BGN PDUs received at this interface.')
cwspSscopBgakRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopBgakRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopBgakRcv.setDescription('This object stores the number of SSCOP BGN ACK PDUs received at this interface.')
cwspSscopEndRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopEndRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopEndRcv.setDescription('This object stores the number of SSCOP END PDUs received at this interface.')
cwspSscopEndakRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopEndakRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopEndakRcv.setDescription('This object stores the number of SSCOP END ACK PDUs received at this interface.')
cwspSscopRsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopRsRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopRsRcv.setDescription('This object stores the number of SSCOP RS(Resync) PDUs received at this interface.')
cwspSscopRsakRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopRsakRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopRsakRcv.setDescription('This object stores the number of SSCOP RS(Resync) ACK PDUs received at this interface.')
cwspSscopBgrejRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopBgrejRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopBgrejRcv.setDescription('This object stores the number of SSCOP BGN REJ PDUs received at this interface.')
cwspSscopSdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopSdRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopSdRcv.setDescription('This object stores the number of SSCOP SD (Sequenced Data) PDUs received at this interface.')
cwspSscopSdpRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopSdpRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopSdpRcv.setDescription('This object stores the number of SSCOP SDP (Sequenced Data with Poll) PDUs received at this interface.')
cwspSscopPollRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopPollRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopPollRcv.setDescription('This object stores the number of SSCOP POLL PDUs received at this interface.')
cwspSscopStatRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopStatRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopStatRcv.setDescription('This object stores the number of SSCOP STAT PDUs received at this interface.')
cwspSscopUstatRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopUstatRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopUstatRcv.setDescription('This object stores the number of SSCOP USTAT (Unsolicited STAT) PDUs received at this interface.')
cwspSscopUdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopUdRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopUdRcv.setDescription('This object stores the number of SSCOP UD (Unit data) PDUs received at this interface.')
cwspSscopMdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopMdRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopMdRcv.setDescription('This object stores the number of SSCOP MD (Management data) PDUs received at this interface.')
cwspSscopErakRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopErakRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSscopErakRcv.setDescription('This object stores the number of SSCOP ER ACK (error recovery ack) PDUs received at this interface.')
cwspSscopBgnXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopBgnXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopBgnXmt.setDescription('This object stores the number of SSCOP BGN PDUs transmitted over this interface.')
cwspSscopBgakXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopBgakXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopBgakXmt.setDescription('This object stores the number of SSCOP BGN ACK PDUs transmitted on this interface.')
cwspSscopEndXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopEndXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopEndXmt.setDescription('This object stores the number of SSCOP END PDUs transmitted on this interface.')
cwspSscopEndakXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopEndakXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopEndakXmt.setDescription('This object stores the number of SSCOP END ACK PDUs transmitted on this interface.')
cwspSscopRsXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopRsXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopRsXmt.setDescription('This object stores the number of SSCOP RS (Resync) PDUs transmitted over this interface.')
cwspSscopRsakXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopRsakXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopRsakXmt.setDescription('This object stores the number of SSCOP RS (Resync) ACK PDUs transmitted over this interface.')
cwspSscopBgrejXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopBgrejXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopBgrejXmt.setDescription('This object stores the number of SSCOP BGN REJ PDUs transmitted over this interface.')
cwspSscopSdXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopSdXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopSdXmt.setDescription('This object stores the number of SSCOP SD transmitted over this interface.')
cwspSscopSdpXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopSdpXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopSdpXmt.setDescription('This object stores the number of SSCOP SDP PDUs transmitted over this interface.')
cwspSscopPollXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopPollXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopPollXmt.setDescription('This object stores the number of SSCOP POLL PDUs transmitted over this interface.')
cwspSscopStatXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopStatXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopStatXmt.setDescription('This object stores the number of SSCOP STAT PDUs transmitted over this interface.')
cwspSscopUstatXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopUstatXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopUstatXmt.setDescription('This object stores the number of SSCOP USTAT PDUs transmitted over this interface.')
cwspSscopUdXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopUdXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopUdXmt.setDescription('This object stores the number of SSCOP UD PDUs transmitted over this interface.')
cwspSscopMdXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopMdXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopMdXmt.setDescription('This object stores the number of SSCOP MD PDUs transmitted over this interface.')
cwspSscopErakXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 7, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopErakXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSscopErakXmt.setDescription('This object stores the number of SSCOP ER(error recovery) ACK PDUs transmitted over this interface.')
cwspSigConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1), )
if mibBuilder.loadTexts: cwspSigConfigTable.setStatus('current')
if mibBuilder.loadTexts: cwspSigConfigTable.setDescription('This table specifies signaling configuration parameters.')
cwspSigConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspSigConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cwspSigConfigEntry.setDescription('An entry in the signaling configuration table. Each entry indexed by the ifIndex of a port.')
cwspSigCfgT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 240)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT301.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT301.setDescription('Timer started when ALERT message received at Call Received State. Normally, timer is stopped when CONNECT message is received. Clear call at first expiry.')
cwspSigCfgT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(4)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT303.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT303.setDescription('Timer started when SETUP message sent at Call Present State. Normally, timer is stopped when ALERT, CONNECT, RELEASE COMPLETE or CALL PROCEEDING message is received. Resend SETUP message and restart the timer at first expiry; Clear network connection and enter NULL state at second expiry.')
cwspSigCfgT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 45)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT308.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT308.setDescription('Timer started when RELEASE message sent at Release Indication State. Normally, timer is stopped when RELEASE COMPLETE or RELEASE message is received. Resend RELEASE and restart the timer at first expiry; Release call reference and enter NULL state at second expiry.')
cwspSigCfgT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT310.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT310.setDescription('Timer started when CALL PROCEEDING message received at Incoming Call Proceeding State. Normally, timer is stopped when ALERT, CONNECT or RELEASE message is received. Clear call at first expiry. Range from 10 to 20 seconds for UNI 3.0/3.1 with default of 10; 30 to 120 seconds for UNI 4.0 with default of 30, default number can be 10 or 30, 10 is used.')
cwspSigCfgT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 300)).clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT316.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT316.setDescription('Timer started when RESTART message sent Restart Request State. Normally, timer is stopped when RESTART ACK message is received. RESTART may be sent multiple times in both first or second expiry.')
cwspSigCfgT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT317.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT317.setDescription('Timer started when RESTART message received at Restart State. Normally, timer is stopped when Internal clearing of call references happen. Maintenance notification at first expiry. The value of this timer should be less than T316.')
cwspSigCfgT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(4)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT322.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT322.setDescription('Timer started when STATUS ENQUIRY message sent at any call state. Normally, timer is stopped when STATUS RELEASE or RELEASE COMPLETE message is received. STATUS ENQUIREY message may be resent several times in both first or second expiry.')
cwspSigCfgT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 240)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT397.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT397.setDescription('Timer started when ALERTING or PARTY ALERTING message received in point-to-multipoint call. Normally timer is stopped when ADD PARTY ACK message is received. Clear party at first expiry.')
cwspSigCfgT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(4)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT398.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT398.setDescription('Timer is started when DROP PARTY message sent at Drop Party Initiated State. Normally, timer is stopped when DROP PARTY ACK or RELEASE message is received. Send DROP PARTY ACK or RELEASE at first expiry.')
cwspSigCfgT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(14, 124)).clone(14)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCfgT399.setStatus('current')
if mibBuilder.loadTexts: cwspSigCfgT399.setDescription('Timer is started when ADD PARTY message sent at Add Party Initiated State. Normally, timer is stopped when ADD PARTY ACK, ADD PARTY REJ or RELEASE message is received. Clear the party and enter NULL Party State at first expiry. Range from 14 to 28 seconds for UNI 3.0/3.1 with default of 14; 34 to 124 seconds for UNI 4.0 with default of 34, default can be 14 or 34, 14 is used.')
cwspSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1), )
if mibBuilder.loadTexts: cwspSigStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwspSigStatsTable.setDescription('This table contains signaling statistics counters')
cwspSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspSigStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwspSigStatsEntry.setDescription('An entry contains signaling statistics.')
cwspSigCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSigCounterReset.setStatus('current')
if mibBuilder.loadTexts: cwspSigCounterReset.setDescription('Writing a 2 to this object resets the all Sig counters.')
cwspCallProcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallProcRcv.setStatus('current')
if mibBuilder.loadTexts: cwspCallProcRcv.setDescription('Number of CALL PROCEEDING messages received on this interface.')
cwspConnectRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnectRcv.setStatus('current')
if mibBuilder.loadTexts: cwspConnectRcv.setDescription('Number of CONNECT messages received on this interface.')
cwspConnectAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnectAckRcv.setStatus('current')
if mibBuilder.loadTexts: cwspConnectAckRcv.setDescription('Number of CONNECT ACK messages received on this interface.')
cwspSetupRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSetupRcv.setStatus('current')
if mibBuilder.loadTexts: cwspSetupRcv.setDescription('Number of SETUP messages received on this interface.')
cwspReleaseRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspReleaseRcv.setStatus('current')
if mibBuilder.loadTexts: cwspReleaseRcv.setDescription('Number of RELEASE messages received on this interface.')
cwspReleaseComplRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspReleaseComplRcv.setStatus('current')
if mibBuilder.loadTexts: cwspReleaseComplRcv.setDescription('Number of RELEASE COMPLETE messages received on this interface.')
cwspRestartRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspRestartRcv.setStatus('current')
if mibBuilder.loadTexts: cwspRestartRcv.setDescription('Number of RESTART messages received on this interface.')
cwspRestartAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspRestartAckRcv.setStatus('current')
if mibBuilder.loadTexts: cwspRestartAckRcv.setDescription('Number of RESTART ACK messages received on this interface.')
cwspStatusRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspStatusRcv.setStatus('current')
if mibBuilder.loadTexts: cwspStatusRcv.setDescription('Number of STATUS messages received on this interface.')
cwspStatusEnqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspStatusEnqRcv.setStatus('current')
if mibBuilder.loadTexts: cwspStatusEnqRcv.setDescription('Number of STATUS ENQUIRY messages received on this interface.')
cwspNotifyRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspNotifyRcv.setStatus('current')
if mibBuilder.loadTexts: cwspNotifyRcv.setDescription('Number of NOTIFY messages received on this interface.')
cwspAlertRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAlertRcv.setStatus('current')
if mibBuilder.loadTexts: cwspAlertRcv.setDescription('Number of ALERT messages received on this interface.')
cwspProgressRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspProgressRcv.setStatus('current')
if mibBuilder.loadTexts: cwspProgressRcv.setDescription('Number of PROGRESS messages received on this interface.')
cwspAddPtyRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAddPtyRcv.setStatus('current')
if mibBuilder.loadTexts: cwspAddPtyRcv.setDescription('Number of ADD PARTY messages received on this interface.')
cwspAddPtyAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAddPtyAckRcv.setStatus('current')
if mibBuilder.loadTexts: cwspAddPtyAckRcv.setDescription('Number of ADD PARTY ACK messages received on this interface.')
cwspAddPtyRejRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAddPtyRejRcv.setStatus('current')
if mibBuilder.loadTexts: cwspAddPtyRejRcv.setDescription('Number of ADD PARTY REJECT messages received on this interface.')
cwspDropPtyRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspDropPtyRcv.setStatus('current')
if mibBuilder.loadTexts: cwspDropPtyRcv.setDescription('Number of DROP PARTY messages received on this interface.')
cwspIncorrectMsgRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspIncorrectMsgRcv.setStatus('current')
if mibBuilder.loadTexts: cwspIncorrectMsgRcv.setDescription('Number of Incorrect messages received on this interface.')
cwspTimerExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspTimerExpiries.setStatus('current')
if mibBuilder.loadTexts: cwspTimerExpiries.setDescription('Number of timeouts occurred on this interface.')
cwspLastCause = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLastCause.setStatus('current')
if mibBuilder.loadTexts: cwspLastCause.setDescription('to indicate the last cause of release or cranckback.')
cwspLastDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 214743647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLastDiagnostic.setStatus('current')
if mibBuilder.loadTexts: cwspLastDiagnostic.setDescription('to indicate the last diagnostic of release or cranckback.')
cwspCallProcXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallProcXmt.setStatus('current')
if mibBuilder.loadTexts: cwspCallProcXmt.setDescription('Number of CALL PROCEEDING messages transmitted from this interface.')
cwspConnectXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnectXmt.setStatus('current')
if mibBuilder.loadTexts: cwspConnectXmt.setDescription('Number of CONNECT messages transmitted from this interface.')
cwspConnectAckXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnectAckXmt.setStatus('current')
if mibBuilder.loadTexts: cwspConnectAckXmt.setDescription('Number of CONNECT ACK messages transmitted from this interface.')
cwspSetupXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSetupXmt.setStatus('current')
if mibBuilder.loadTexts: cwspSetupXmt.setDescription('Number of SETUP messages transmitted from this interface.')
cwspReleaseXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspReleaseXmt.setStatus('current')
if mibBuilder.loadTexts: cwspReleaseXmt.setDescription('Number of RELEASE messages transmitted from this interface.')
cwspReleaseComplXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspReleaseComplXmt.setStatus('current')
if mibBuilder.loadTexts: cwspReleaseComplXmt.setDescription('Number of RELEASE COMPLETE messages transmitted from this interface.')
cwspRestartXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspRestartXmt.setStatus('current')
if mibBuilder.loadTexts: cwspRestartXmt.setDescription('Number of RESTART messages transmitted from this interface.')
cwspRestartAckXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspRestartAckXmt.setStatus('current')
if mibBuilder.loadTexts: cwspRestartAckXmt.setDescription('Number of RESTART ACK messages transmitted from this interface.')
cwspStatusXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspStatusXmt.setStatus('current')
if mibBuilder.loadTexts: cwspStatusXmt.setDescription('Number of STATUS messages transmitted from this interface.')
cwspStatusEnqXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspStatusEnqXmt.setStatus('current')
if mibBuilder.loadTexts: cwspStatusEnqXmt.setDescription('Number of STATUS ENQUIRY messages transmitted from this interface.')
cwspNotifyXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspNotifyXmt.setStatus('current')
if mibBuilder.loadTexts: cwspNotifyXmt.setDescription('Number of NOTIFY messages transmitted from this interface.')
cwspAlertXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAlertXmt.setStatus('current')
if mibBuilder.loadTexts: cwspAlertXmt.setDescription('Number of ALERT messages transmitted from this interface.')
cwspProgressXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspProgressXmt.setStatus('current')
if mibBuilder.loadTexts: cwspProgressXmt.setDescription('Number of PROGRESS messages transmitted from this interface.')
cwspAddPtyXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAddPtyXmt.setStatus('current')
if mibBuilder.loadTexts: cwspAddPtyXmt.setDescription('Number of ADD PARTY messages transmitted from this interface.')
cwspAddPtyAckXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAddPtyAckXmt.setStatus('current')
if mibBuilder.loadTexts: cwspAddPtyAckXmt.setDescription('Number of ADD PARTY ACK messages transmitted from this interface.')
cwspAddPtyRejXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAddPtyRejXmt.setStatus('current')
if mibBuilder.loadTexts: cwspAddPtyRejXmt.setDescription('Number of ADD PARTY REJECT messages transmitted from this interface.')
cwspDropPtyXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspDropPtyXmt.setStatus('current')
if mibBuilder.loadTexts: cwspDropPtyXmt.setDescription('Number of DROP PARTY messages transmitted from this interface.')
cwspSscopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 6, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSscopStatus.setStatus('current')
if mibBuilder.loadTexts: cwspSscopStatus.setDescription('Sscop link status on an NNI interface, object is meaningful along with ciscoWANSscopLinkChange trap.')
cwspConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cwspConfigTable.setStatus('current')
if mibBuilder.loadTexts: cwspConfigTable.setDescription('The Interface configuration table collects attributes that affect the operation of the controller interface. There is a single row for each interface that the managed system is expected to be added or managed.')
cwspConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cwspConfigEntry.setDescription(' An entry in the interface configuration table containing information about an interface')
cwspAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outService", 2))).clone('outService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cwspAdminStatus.setDescription('The administrative status of the interface. inService (1) means that the interface is operational while outService (2) indicates that the interface is put out of service by the administrator.')
cwspOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperStatus.setStatus('current')
if mibBuilder.loadTexts: cwspOperStatus.setDescription('The operational state of the interface. This status is derived from the physical state of the interface. failed (2) indicates that the interface has failed. ok (1) indicates that the interface is in operational status, while other (3) denotes that the interface is in an unknown state.')
cwspSvcBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspSvcBlocked.setStatus('current')
if mibBuilder.loadTexts: cwspSvcBlocked.setDescription('Indicates whether Switches virtual connections are allowed through this interface.')
cwspSpvcBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspSpvcBlocked.setStatus('current')
if mibBuilder.loadTexts: cwspSpvcBlocked.setDescription('Indicates whether soft permanent virtual connections are allowed through this interface.')
cwspIlmiAddrRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiAddrRegEnable.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiAddrRegEnable.setDescription('Indicates whether ILMI address registration is enabled or disabled.')
cwspIlmiAutoConfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiAutoConfEnable.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiAutoConfEnable.setDescription('Indicates whether auto-configuration of the interface is turned on or off. If auto-configuration is enabled, then the interface comes up using the ILMI auto-configuration.')
cwspIlmiServRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiServRegEnable.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiServRegEnable.setDescription('Indicates whether service registry is enabled or disabled on the interface.')
cwspPhyIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspPhyIdentifier.setStatus('current')
if mibBuilder.loadTexts: cwspPhyIdentifier.setDescription('Indicates the physical identification of the interface. Mandatory when the port is provisioned for the first time through SNMP.')
cwspSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspSignallingVpi.setStatus('current')
if mibBuilder.loadTexts: cwspSignallingVpi.setDescription('Denotes the Signaling VPI used on the interface.')
cwspSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspSignallingVci.setStatus('current')
if mibBuilder.loadTexts: cwspSignallingVci.setDescription('Indicates the signaling VCI used on the interface, acceptable value is 32-65535, and 5 being the default.')
cwspRoutingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspRoutingVpi.setStatus('current')
if mibBuilder.loadTexts: cwspRoutingVpi.setDescription('Indicates the VPI used for PNNI lowest level RCC.')
cwspRoutingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(18)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspRoutingVci.setStatus('current')
if mibBuilder.loadTexts: cwspRoutingVci.setDescription('Indicates the VCI used for the PNNI lowest level RCC, acceptable value is 32-65535, and 18 being the default.')
cwspMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspMaxVpiBits.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVpiBits.setDescription('The maximum number of active VPI bits on this ATM Interface. For virtual interfaces (i.e. Virtual Path Connections used by PNNI), this value has no meaning and is set to zero.')
cwspMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspMaxVciBits.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVciBits.setDescription('The maximum number of active VCI bits on this ATM Interface.')
cwspUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("uni20", 1), ("uni30", 2), ("uni31", 3), ("uni40", 4), ("ituDss2", 5), ("frf4", 6), ("unsupported", 7), ("ip", 8), ("self", 9))).clone('unsupported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspUniVersion.setStatus('current')
if mibBuilder.loadTexts: cwspUniVersion.setDescription("An indication of the latest version of the ATM Forum UNI Signaling Specification that is supported on this ATM Interface. If this value is not present, a version of the UNI earlier than 3.1 is supported. The value of 'self(9)' indicates this entry is a voice port. If the peer IME's value of this object is the same as, or later than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise, compatibility of the two IMEs cannot be assumed.")
cwspNniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("iisp30", 1), ("iisp31", 2), ("pnni10", 3), ("enni", 4), ("aini", 5), ("unsupported", 7))).clone('unsupported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspNniVersion.setStatus('current')
if mibBuilder.loadTexts: cwspNniVersion.setDescription("An indication of the latest version of the ATM Forum PNNI Signaling Specification that is supported on this ATM Interface. Note that the PNNI routing version is not determined through ILMI. If the peer IME's value of this object is the same as, or later than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise, compatibility of the two IMEs cannot be assumed.")
cwspUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2))).clone('private')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspUniType.setStatus('current')
if mibBuilder.loadTexts: cwspUniType.setDescription('The type of the ATM device, either public or private.')
cwspSide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspSide.setStatus('current')
if mibBuilder.loadTexts: cwspSide.setDescription('This object determines the type of the ATM device. This object is used in automatic ATM Interface-Type determination procedure such that a correct operational ATM Interface-type can be determined. An ATM End System shall take the value of user(1), and an ATM network node shall take the value of node(2).')
cwspMaxP2pCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMaxP2pCalls.setStatus('current')
if mibBuilder.loadTexts: cwspMaxP2pCalls.setDescription('Indicates the maximum number of point to point calls (including VCs and VPs allowed on the interface.')
cwspMaxP2mpRoots = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMaxP2mpRoots.setStatus('current')
if mibBuilder.loadTexts: cwspMaxP2mpRoots.setDescription('Indicates the maximum number of root VCs (for point-to-multipoint) allowed on the interface.')
cwspMaxP2mpLeafs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMaxP2mpLeafs.setStatus('current')
if mibBuilder.loadTexts: cwspMaxP2mpLeafs.setDescription('Indicates the maximum number of leaf VCs (for point-to-multipoint) allowed on the interface.')
cwspMinSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMinSvccVpi.setStatus('current')
if mibBuilder.loadTexts: cwspMinSvccVpi.setDescription('Indicates the minimum SVCC VPI configured on the interface.')
cwspMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMaxSvccVpi.setStatus('current')
if mibBuilder.loadTexts: cwspMaxSvccVpi.setDescription('Indicates the maximum SVCC VPI configured on the interface.')
cwspMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMinSvccVci.setStatus('current')
if mibBuilder.loadTexts: cwspMinSvccVci.setDescription('Indicates the minimum SVCC VCI configured on the interface.')
cwspMaxSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMaxSvccVci.setStatus('current')
if mibBuilder.loadTexts: cwspMaxSvccVci.setDescription('Indicates the maximum SVCC VCI configured on the interface.')
cwspMinSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMinSvpcVpi.setStatus('current')
if mibBuilder.loadTexts: cwspMinSvpcVpi.setDescription('Indicates the minimum SVPC VPI configured on the interface.')
cwspMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspMaxSvpcVpi.setStatus('current')
if mibBuilder.loadTexts: cwspMaxSvpcVpi.setDescription('Indicates the maximum SVPC VPI configured on the interface.')
cwspEnhancedIisp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspEnhancedIisp.setStatus('current')
if mibBuilder.loadTexts: cwspEnhancedIisp.setDescription('Indicates whether the enhanced features for IISP are enabled or disabled.')
cwspConfigTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 29), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConfigTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwspConfigTableRowStatus.setDescription('Used to create and delete the Interface. However, only createAndGo, destroy, active and notInService are supported. NMS should only use createAndGo to create a row and destroy to delete a row. The managed device will either return active or notInService for a row status.')
cwspAddrPlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("aesa", 2), ("e164", 3))).clone('aesa')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddrPlanSupported.setStatus('current')
if mibBuilder.loadTexts: cwspAddrPlanSupported.setDescription('The ATM address plan supported on an interface. This can only be modified if interface is public UNI. For all other interfaces, the value is aesa.')
cwspIlmiSecureLink = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 31), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiSecureLink.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiSecureLink.setDescription('Indicates whether ILMI Secure Link Protocol is enabled or disabled. When secure link protocol is enabled, loss in ILMI connectivity is treated as loss of attachment point which results in all SVCs/SVPs being released on the interface.')
cwspIlmiAttachmentPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 32), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiAttachmentPoint.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiAttachmentPoint.setDescription('Indicates whether detection of loss of attachment procedures are enabled on this interface. When set to true, then standard ILMI procedures are employed to detect loss of attachment point. If set to false, then ILMI protocol on the interface does not detect the loss of attachment.')
cwspIlmiLocalAttrStd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 33), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiLocalAttrStd.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiLocalAttrStd.setDescription('Indicates whether on modification of local attributes, procedures as recommended by ILMI 4.0 specification are followed or cisco proprietery procedures are followed. When set to true, the standard ILMI procedures are followed.')
cwspIlmiUCSMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 34), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspIlmiUCSMEnable.setStatus('current')
if mibBuilder.loadTexts: cwspIlmiUCSMEnable.setDescription('Indicates whether ILMI user connection status monitoring is enabled or disabled.')
cwspRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspRoutingPriority.setStatus('current')
if mibBuilder.loadTexts: cwspRoutingPriority.setDescription('This object is the routing priority to be assigned to connections which enter the network from this ingress interface, but does not carry the routing priority signaling in the SETUP message. SETUP message. A default routing priority of 8 is used if this object is not configured. A routing priority 1 is the highest priority for a user connection. A connection tagged with a routing priority of 1 is derouted ahead of connections tagged with other priority values.')
cwspSpvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 1, 1, 1, 36), CiscoWanNsapAtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspSpvcAddress.setStatus('current')
if mibBuilder.loadTexts: cwspSpvcAddress.setDescription("This object identifies the internal NSAP assigned to a port by the switch. a) The format is that of 13-byte node prefix and 7-byte port number. b) When the switch's node prefix is modified, the node prefix part of this variable is also changed accordingly. Note: the switch's node prefix cannot be changed if there are connections on the switch. c) The port number can be physical port identifier or the ifIndex of this port.")
cwspCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1), )
if mibBuilder.loadTexts: cwspCallStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwspCallStatsTable.setDescription('This Table contains objects showing the Statistics for SVC/SPVC calls on a given interface.')
cwspCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspCallStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwspCallStatsEntry.setDescription('An entry contains SVC/SPVC call statistics')
cwspCountReset = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspCountReset.setStatus('current')
if mibBuilder.loadTexts: cwspCountReset.setDescription('Writing a 2 to this object resets all counters.')
cwspInCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInCallAttempts.setStatus('current')
if mibBuilder.loadTexts: cwspInCallAttempts.setDescription('This object shows the number of incoming Signaling messages (Setup and Add Party) received by the switching node on this interface for Call establishment.')
cwspInCallEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInCallEstabs.setStatus('current')
if mibBuilder.loadTexts: cwspInCallEstabs.setDescription('This object shows the number of incoming Signaling Messages (Connect and Add Party Ack) received by the switching node on this interface which marks that a call has been successfully established.')
cwspInCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInCallFailures.setStatus('current')
if mibBuilder.loadTexts: cwspInCallFailures.setDescription('This object shows the total number of incoming Point-to-Point (p2p) and Point-to-MultiPoint(p2mp) SVC/SPVC call attempts failed on this interface.')
cwspInFilterFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInFilterFailures.setStatus('current')
if mibBuilder.loadTexts: cwspInFilterFailures.setDescription('This object shows the number of incoming Point-to-Point(p2p) and Point-to-MultiPoint(p2mp) SVC/SPVC call attempts which failed due to address filtering on this interface.')
cwspInRouteFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInRouteFailures.setStatus('current')
if mibBuilder.loadTexts: cwspInRouteFailures.setDescription('This object shows the number of incoming Point-to-Point(p2p) and Point-to-MulitPoint(p2mp) SVC/SPVC call attempts on this interface which failed because there was no route to the destination available.')
cwspInResrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInResrcFailures.setStatus('current')
if mibBuilder.loadTexts: cwspInResrcFailures.setDescription('This object shows the number of incoming Point-to-Point(p2p) and Point-to-MulitPoint(p2mp) SVC/SPVC call attempts on this interface which failed because there were not enough resources as requested in the parameters of the call.')
cwspInTimerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInTimerFailures.setStatus('current')
if mibBuilder.loadTexts: cwspInTimerFailures.setDescription('This object shows the number of signaling timers timed out for incoming Point-to-Point(p2p) and Point-to-MultiPoint(p2mp) SVC/SPVC calls on this interface.')
cwspInCrankbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspInCrankbacks.setStatus('current')
if mibBuilder.loadTexts: cwspInCrankbacks.setDescription('This object shows the number of Crankback IEs received on this interface for incoming Point-to-Point(p2p) and Point-to-MultiPoint (p2mp) SVC/SPVC call attempts.')
cwspOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutCallAttempts.setStatus('current')
if mibBuilder.loadTexts: cwspOutCallAttempts.setDescription('This object shows the number of outgoing Signaling messages (Setup and Add Party) on this interface for Call establishment.')
cwspOutCallEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutCallEstabs.setStatus('current')
if mibBuilder.loadTexts: cwspOutCallEstabs.setDescription('This object shows the number of outgoing Signaling messages (Connect and Add Party Ack) which mark the call being established on this interface')
cwspOutCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutCallFailures.setStatus('current')
if mibBuilder.loadTexts: cwspOutCallFailures.setDescription('This object shows the total number of outgoing Signaling messages for Point-to-Point and Point-to-MultiPoint call establishment on this interface which failed.')
cwspOutFilterFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutFilterFailures.setStatus('current')
if mibBuilder.loadTexts: cwspOutFilterFailures.setDescription('This object shows the number of outgoing Signaling messages for call establishment on this interface which failed the address filtering.')
cwspOutRouteFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutRouteFailures.setStatus('current')
if mibBuilder.loadTexts: cwspOutRouteFailures.setDescription('This object shows the number of outgoing Signaling messages for call establishment on this interface which failed because the route was not available.')
cwspOutResrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutResrcFailures.setStatus('current')
if mibBuilder.loadTexts: cwspOutResrcFailures.setDescription('This object shows the number of outgoing Signaling messages for call establishment on this interface which failed because the resource requested was not available.')
cwspOutTimerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutTimerFailures.setStatus('current')
if mibBuilder.loadTexts: cwspOutTimerFailures.setDescription('This object shows the number of Signaling timers timed-out on this interface for outgoing signaling messages.')
cwspOutCrankbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOutCrankbacks.setStatus('current')
if mibBuilder.loadTexts: cwspOutCrankbacks.setDescription('This object shows the number of Crankback IEs being sent on this interface for outgoing signaling Release messages. This is generated on the node which generates the Crankback IEs.')
cwspPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 10, 1), )
if mibBuilder.loadTexts: cwspPrefixTable.setStatus('current')
if mibBuilder.loadTexts: cwspPrefixTable.setDescription('A table specifying the network prefix(es) used for ILMI address registration.')
cwspPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-SVC-MIB", "cwspNetPrefix"))
if mibBuilder.loadTexts: cwspPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: cwspPrefixEntry.setDescription('Information about a single network prefix contained in the prefix table.')
cwspNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 10, 1, 1, 1), NetPrefix())
if mibBuilder.loadTexts: cwspNetPrefix.setStatus('current')
if mibBuilder.loadTexts: cwspNetPrefix.setDescription('The network prefix specified for use in ILMI address registration.')
cwspPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwspPrefixRowStatus.setDescription('Used to create, delete, activate and de-activate network prefixes used in ILMI address registration.')
cwspAddressTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1), )
if mibBuilder.loadTexts: cwspAddressTable.setStatus('current')
if mibBuilder.loadTexts: cwspAddressTable.setDescription('The Interface ATM Address Table. This table contains all the attributes necessary to determine what the PNNI entity believes is reachable in terms of ATM End System Addresses and to determine which nodes are advertising this reachability. This table is also used to configure static routes to reachable addresses. Entries in this table can be created/deleted by setting the intfAddressRowStatus object to appropriate values. Existing entries in this table cannot be modified. Entries in this table can also be created/deleted through the command provided by the CLI.')
cwspAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-SVC-MIB", "cwspAtmAddress"), (0, "CISCO-WAN-SVC-MIB", "cwspAddrLen"))
if mibBuilder.loadTexts: cwspAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cwspAddressEntry.setDescription('An entry in the table, containing information about a reachable address.')
cwspAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 1), AtmAddress())
if mibBuilder.loadTexts: cwspAtmAddress.setStatus('current')
if mibBuilder.loadTexts: cwspAtmAddress.setDescription('The value of the ATM End System Address.')
cwspAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160)))
if mibBuilder.loadTexts: cwspAddrLen.setStatus('current')
if mibBuilder.loadTexts: cwspAddrLen.setDescription('The address length in bits to be applied to the ATM End System Address.')
cwspAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("exterior", 2))).clone('exterior')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddrType.setReference('ATM Forum PNNI 1.0 Section 5.8.1.3')
if mibBuilder.loadTexts: cwspAddrType.setStatus('current')
if mibBuilder.loadTexts: cwspAddrType.setDescription("The type of reachability from the advertising node to the address. This variable indicates either this ATM address ('internal') is a reachable ATM destination that is directly attached to the logical node advertising this address or an ATM address('exterior') that can be reached through a PNNI routing domain but which is not located in that routing domain.")
cwspAddrProto = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("static", 2))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddrProto.setStatus('current')
if mibBuilder.loadTexts: cwspAddrProto.setDescription("The routing mechanism via which the connectivity from the advertising node to the reachable address was learned. A 'local' address indicates this address is automatically advertised. A 'static' address is not automatically advertised. By setting 'cwspAddrRedistribute' variable (see below) to 'true' will force a 'static' address to be advertised.")
cwspAddrPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e164", 1), ("nsap", 2))).clone('nsap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddrPlan.setStatus('current')
if mibBuilder.loadTexts: cwspAddrPlan.setDescription('The address plan. For NSAP address, the first byte of the address automatically implies one of the three NSAP address plans: NSAP E.164, NSAP DCC or NSAP ICD.')
cwspAddrScope = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 104))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddrScope.setStatus('current')
if mibBuilder.loadTexts: cwspAddrScope.setDescription('The PNNI scope of advertisement (i.e. level of PNNI hierarchy) of the reachability from the advertising node to the address.')
cwspAddrRedistribute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddrRedistribute.setStatus('current')
if mibBuilder.loadTexts: cwspAddrRedistribute.setDescription('Whether or not the reachable address specified by this entry is to be advertised by the local node into its PNNI routing domain. This object is only meaningful if the routing mechanism (cwspAddrProto) is static.')
cwspAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 11, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwspAddressRowStatus.setDescription('To create or delete a reachable address. Note that NMS should use CreateAndGo to create a row and Destroy to delete a row. The managed device will return active or notInService as row status.')
cwspRegAddressTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 12, 1), )
if mibBuilder.loadTexts: cwspRegAddressTable.setStatus('current')
if mibBuilder.loadTexts: cwspRegAddressTable.setDescription('This table contains a list of ATM addresses that can be used for calls to and from a given interface by a switch or service. The ATM addresses are registered by the endsystem via ILMI. ILMI registered addresses cannot be deleted using this table. This table only applies to switches and network services.')
cwspRegAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-SVC-MIB", "cwspRegAtmAddress"))
if mibBuilder.loadTexts: cwspRegAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cwspRegAddressEntry.setDescription('An entry in the ATM Interface Registered Address table.')
cwspRegAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 12, 1, 1, 1), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspRegAtmAddress.setStatus('current')
if mibBuilder.loadTexts: cwspRegAtmAddress.setDescription('An address registered for a given switch or service interface.')
cwspRegAddressOrgSscope = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 15))).clone(namedValues=NamedValues(("localNetwork", 1), ("global", 15))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspRegAddressOrgSscope.setStatus('current')
if mibBuilder.loadTexts: cwspRegAddressOrgSscope.setDescription('This object indicates the organizational scope for the referenced address. The information of the referenced address shall not be distributed outside the indicated scope. The default values for organizational scope are localNetwork(1) for ATM group addresses, and global(15) for individual addresses.')
cwspCacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1), )
if mibBuilder.loadTexts: cwspCacConfigTable.setStatus('current')
if mibBuilder.loadTexts: cwspCacConfigTable.setDescription('A table specifying the CAC(Connection Admission Control) information for each interface.')
cwspCacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspCacConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cwspCacConfigEntry.setDescription('An entry contains CAC information.')
cwspUtilFactorCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspUtilFactorCbr.setStatus('current')
if mibBuilder.loadTexts: cwspUtilFactorCbr.setDescription('This is the booking factor for CBR service.')
cwspUtilFactorRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspUtilFactorRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspUtilFactorRtVbr.setDescription('This is the booking factor for real time VBR service')
cwspUtilFactorNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspUtilFactorNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspUtilFactorNrtVbr.setDescription('This is the booking factor for non-real time VBR service ')
cwspUtilFactorAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspUtilFactorAbr.setStatus('current')
if mibBuilder.loadTexts: cwspUtilFactorAbr.setDescription('This is the booking factor for ABR service')
cwspUtilFactorUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspUtilFactorUbr.setStatus('current')
if mibBuilder.loadTexts: cwspUtilFactorUbr.setDescription('This is the booking factor for UBR service.')
cwspMaxBwCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxBwCbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxBwCbr.setDescription('This is the maximum bandwidth for CBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxBwRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxBwRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxBwRtVbr.setDescription('This is the maximum bandwidth for real time VBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxBwNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxBwNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxBwNrtVbr.setDescription('This is the maximum bandwidth for non-real time VBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxBwAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxBwAbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxBwAbr.setDescription('This is the maximum bandwidth for ABR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxBwUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxBwUbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxBwUbr.setDescription('This is the maximum bandwidth for UBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinBwCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinBwCbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinBwCbr.setDescription('This is the minimum bandwidth for CBR service in percentage. The total values of cwspMinBwCbr, cwspMinBwRtVbr, cwspMinBwNrtVbr, cwspMinBwAbr and cwspMinBwUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinBwRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinBwRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinBwRtVbr.setDescription('This is the minimum bandwidth for real time VBR service in percentage. The total values of cwspMinBwCbr, cwspMinBwRtVbr, cwspMinBwNrtVbr, cwspMinBwAbr and cwspMinBwUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinBwNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinBwNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinBwNrtVbr.setDescription('This is the minimum bandwidth for non-real time VBR service in percentage. The total values of cwspMinBwCbr, cwspMinBwRtVbr, cwspMinBwNrtVbr, cwspMinBwAbr and cwspMinBwUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinBwAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinBwAbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinBwAbr.setDescription('This is the minimum bandwidth for ABR service in percentage. The total values of cwspMinBwCbr, cwspMinBwRtVbr, cwspMinBwNrtVbr, cwspMinBwAbr and cwspMinBwUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinBwUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspMinBwUbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinBwUbr.setDescription('This is the minimum bandwidth for UBR service in percentage. The value for this variable is always 0.')
cwspMaxVcCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcCbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcCbr.setDescription('This is the maximum number of VCs for CBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%. ')
cwspMaxVcRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcRtVbr.setDescription('This is the maximum number of VCs for real time VBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxVcNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcNrtVbr.setDescription('This is the maximum number of VCs for non-real time VBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxVcAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcAbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcAbr.setDescription('This is the maximum number of VCs for ABR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%. ')
cwspMaxVcUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcUbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcUbr.setDescription('This is the maximum number of VCs for UBR service in percentage. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinVcCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinVcCbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinVcCbr.setDescription('This is the minimum number of VCs for CBR service in percentage. The values of cwspMinVcCbr, cwspMinVcRtVbr, cwspMinVcNrtVbr, cwspMinVcAbr and cwspMinVcUbr can not exceed 1000000, i.e. 100%. This variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinVcRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinVcRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinVcRtVbr.setDescription('This is the minimum number of VCs for real time VBR service in percentage. The values of cwspMinVcCbr, cwspMinVcRtVbr, cwspMinVcNrtVbr, cwspMinVcAbr and cwspMinVcUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinVcNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinVcNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinVcNrtVbr.setDescription('This is the minimum number of VCs for non-real time VBR service in percentage. The values of cwspMinVcCbr, cwspMinVcRtVbr, cwspMinVcNrtVbr,cwspMinVcAbr and cwspMinVcUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinVcAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinVcAbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinVcAbr.setDescription('This is the minimum number of VCs for ABR service in percentage. The values of cwspMinVcCbr, cwspMinVcRtVbr, cwspMinVcNrtVbr, cwspMinVcAbr and cwspMinVcUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMinVcUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMinVcUbr.setStatus('current')
if mibBuilder.loadTexts: cwspMinVcUbr.setDescription('This is the minimum number of VCs for UBR service in percentage. The values of cwspMinVcCbr, cwspMinVcRtVbr, cwspMinVcNrtVbr, cwspMinVcAbr and cwspMinVcUbr can not exceed 1000000, i.e. 100%. The value of this variable is interpreted in the format of xxx.xxxx. For example a value of 750000 is interpreted as 75.0000%.')
cwspMaxVcBwCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcBwCbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcBwCbr.setDescription('This is the maximum bandwidth allowed for a VC for real time CBR service. The value is in the unit of cells per second.')
cwspMaxVcBwRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcBwRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcBwRtVbr.setDescription('This is the maximum bandwidth allowed for a VC for real time VBR service. The value is in the unit of cells per second.')
cwspMaxVcBwNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcBwNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcBwNrtVbr.setDescription('This is the maximum bandwidth allowed for a VC for non-real time VBR service. The value is in the unit of cells per second.')
cwspMaxVcBwAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcBwAbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcBwAbr.setDescription('This is the maximum bandwidth allowed for a VC for ABR service. The value is in the unit of cells per second. ')
cwspMaxVcBwUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspMaxVcBwUbr.setStatus('current')
if mibBuilder.loadTexts: cwspMaxVcBwUbr.setDescription('This is the maximum bandwidth allowed for UBR service. The value is in the unit of cells per second.')
cwspDefaultCdvtCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultCdvtCbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultCdvtCbr.setDescription('This is the default CDVT for CBR service.')
cwspDefaultCdvtRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultCdvtRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultCdvtRtVbr.setDescription('This is the default CDVT real time VBR service.')
cwspDefaultCdvtNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultCdvtNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultCdvtNrtVbr.setDescription('This is the default CDVT non-real time VBR service.')
cwspDefaultCdvtAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultCdvtAbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultCdvtAbr.setDescription('This is the default CDVT for ABR service.')
cwspDefaultCdvtUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultCdvtUbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultCdvtUbr.setDescription('This is the default CDVT for UBR service.')
cwspDefaultMbsRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultMbsRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultMbsRtVbr.setDescription('This is the default MBS real time VBR service.')
cwspDefaultMbsNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspDefaultMbsNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspDefaultMbsNrtVbr.setDescription('This is the default MBS non-real time VBR service.')
cwspLoadTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1), )
if mibBuilder.loadTexts: cwspLoadTable.setStatus('current')
if mibBuilder.loadTexts: cwspLoadTable.setDescription('A table specifying the load information for each interface.')
cwspLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspLoadEntry.setStatus('current')
if mibBuilder.loadTexts: cwspLoadEntry.setDescription('An entry contains the load information.')
cwspLoadBwTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadBwTotal.setStatus('current')
if mibBuilder.loadTexts: cwspLoadBwTotal.setDescription('The total bandwidth of the interface.')
cwspLoadMaxBwCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMaxBwCbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMaxBwCbr.setDescription('The Maximum bandwith for CBR service.')
cwspLoadMaxBwRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMaxBwRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMaxBwRtVbr.setDescription('The maximum bandwith for real time VBR service.')
cwspLoadMaxBwNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMaxBwNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMaxBwNrtVbr.setDescription('The maximum bandwith for non-real time VBR service.')
cwspLoadMaxBwAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMaxBwAbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMaxBwAbr.setDescription('The maximum bandwith for ABR service.')
cwspLoadMaxBwUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMaxBwUbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMaxBwUbr.setDescription(' The maximum bandwith for UBR service.')
cwspLoadBwAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadBwAvail.setStatus('current')
if mibBuilder.loadTexts: cwspLoadBwAvail.setDescription('The total available bandwidth of the interface.')
cwspLoadAvlBwCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlBwCbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlBwCbr.setDescription('The available bandwith for CBR service.')
cwspLoadAvlBwRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlBwRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlBwRtVbr.setDescription('The available bandwith for real time VBR service.')
cwspLoadAvlBwNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlBwNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlBwNrtVbr.setDescription('The available bandwith for non-real time VBR service.')
cwspLoadAvlBwAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlBwAbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlBwAbr.setDescription('The available bandwith for ABR service.')
cwspLoadAvlBwUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlBwUbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlBwUbr.setDescription(' The available bandwith for UBR service.')
cwspLoadVcAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadVcAvail.setStatus('current')
if mibBuilder.loadTexts: cwspLoadVcAvail.setDescription('The total number of available VCs of the interface.')
cwspLoadAvlVcCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlVcCbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlVcCbr.setDescription(' The number of VCs used by CBR service.')
cwspLoadAvlVcRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlVcRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlVcRtVbr.setDescription('The number of VCs used by real time VBR service.')
cwspLoadAvlVcNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlVcNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlVcNrtVbr.setDescription('The number of VCs used by non-real time VBR service.')
cwspLoadAvlVcAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlVcAbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlVcAbr.setDescription('The number of VCs used by ABR service.')
cwspLoadAvlVcUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadAvlVcUbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadAvlVcUbr.setDescription(' The number of VCs used by UBR service.')
cwspLoadCtdCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCtdCbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCtdCbr.setDescription(' The cell transfer delay of CBR service.')
cwspLoadCtdRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCtdRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCtdRtVbr.setDescription('The cell transfer delay of real time VBR service.')
cwspLoadCtdNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCtdNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCtdNrtVbr.setDescription('The cell transfer delay of non-real time VBR service.')
cwspLoadCtdAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCtdAbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCtdAbr.setDescription('The cell transfer delay of ABR service.')
cwspLoadCtdUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCtdUbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCtdUbr.setDescription(' The cell transfer delay of UBR service.')
cwspLoadCdvCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCdvCbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCdvCbr.setDescription(' The cell delay variation of CBR service.')
cwspLoadCdvRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCdvRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCdvRtVbr.setDescription('The cell delay variation of real time VBR service.')
cwspLoadCdvNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCdvNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCdvNrtVbr.setDescription('The cell delay variation of non-real time VBR service.')
cwspLoadCdvAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCdvAbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCdvAbr.setDescription('The cell delay variation of ABR service.')
cwspLoadCdvUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadCdvUbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadCdvUbr.setDescription(' The cell delay variation of UBR service.')
cwspLoadClr0Cbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr0Cbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr0Cbr.setDescription(' The cell loss ratio-0 of CBR service, -1 implies N/A.')
cwspLoadClr0RtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr0RtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr0RtVbr.setDescription('The cell loss ratio-0 of real time VBR service, -1 implies N/A.')
cwspLoadClr0NrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr0NrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr0NrtVbr.setDescription('The cell loss ratio-0 of non-real time VBR service, -1 implies N/A.')
cwspLoadClr0Abr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr0Abr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr0Abr.setDescription('The cell loss ratio-0 of ABR service, -1 implies N/A.')
cwspLoadClr0Ubr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr0Ubr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr0Ubr.setDescription(' The cell loss ratio-0 of UBR service, -1 implies N/A.')
cwspLoadClr01Cbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr01Cbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr01Cbr.setDescription(' The cell loss ratio-1 of CBR service, -1 implies N/A.')
cwspLoadClr01RtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr01RtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr01RtVbr.setDescription('The cell loss ratio-1 of real time VBR service, -1 implies N/A.')
cwspLoadClr01NrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr01NrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr01NrtVbr.setDescription('The cell loss ratio-1 of non-real time VBR service, -1 implies N/A.')
cwspLoadClr01Abr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr01Abr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr01Abr.setDescription('The cell loss ratio-1 of ABR service, -1 implies N/A.')
cwspLoadClr01Ubr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadClr01Ubr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadClr01Ubr.setDescription(' The cell loss ratio-1 of UBR service, -1 implies N/A.')
cwspLoadMinGurCrCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMinGurCrCbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMinGurCrCbr.setDescription(' The minimum guaranteed cell rate capacity of CBR service.')
cwspLoadMinGurCrRtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMinGurCrRtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMinGurCrRtVbr.setDescription('The minimum guaranteed cell rate capacity of real time VBR service.')
cwspLoadMinGurCrNrtVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMinGurCrNrtVbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMinGurCrNrtVbr.setDescription('The minimum guaranteed cell rate capacity of non-real time VBR service.')
cwspLoadMinGurCrAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMinGurCrAbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMinGurCrAbr.setDescription('The minimum guaranteed cell rate capacity of ABR service.')
cwspLoadMinGurCrUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 13, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspLoadMinGurCrUbr.setStatus('current')
if mibBuilder.loadTexts: cwspLoadMinGurCrUbr.setDescription('The minimum guaranteed cell rate capacity of UBR service.')
cwspCallTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1), )
if mibBuilder.loadTexts: cwspCallTable.setStatus('current')
if mibBuilder.loadTexts: cwspCallTable.setDescription('This Table contains the objects which show parameters associated with a Point-to-Point(p2p) or Point-to-MultiPoint (p2mp) SVC/SPVC call.')
cwspCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-SVC-MIB", "cwspCallVpi"), (0, "CISCO-WAN-SVC-MIB", "cwspCallVci"), (0, "CISCO-WAN-SVC-MIB", "cwspCallLeafReference"))
if mibBuilder.loadTexts: cwspCallEntry.setStatus('current')
if mibBuilder.loadTexts: cwspCallEntry.setDescription('This object shows the multiple key index to get the Call record information. The key comprise of Interface Index, VPI/VCI value and Call Reference Value for the call.')
cwspCallVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: cwspCallVpi.setStatus('current')
if mibBuilder.loadTexts: cwspCallVpi.setDescription('This object shows the VPI value of the call on this interface.')
cwspCallVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cwspCallVci.setStatus('current')
if mibBuilder.loadTexts: cwspCallVci.setDescription('This object shows The VCI value of the call on this interface. The value should be in the range of 32-65535 (0=SPVP).')
cwspCallLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cwspCallLeafReference.setStatus('current')
if mibBuilder.loadTexts: cwspCallLeafReference.setDescription('This object shows the value of the Leaf Reference (EndPointReference) of the Call on this interface.')
cwspCallCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspCallCallRef.setDescription('This object shows the Call Reference value of the call on this interface.')
cwspCallCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 5), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallCallingAddress.setStatus('current')
if mibBuilder.loadTexts: cwspCallCallingAddress.setDescription('This object shows the Calling Party Address of the call.')
cwspCallCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 6), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallCalledAddress.setStatus('current')
if mibBuilder.loadTexts: cwspCallCalledAddress.setDescription('This object shows the Called Party Address of the call.')
cwspCallCallingSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 7), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallCallingSubAddr.setStatus('current')
if mibBuilder.loadTexts: cwspCallCallingSubAddr.setDescription('This object shows the Calling Party Subaddress of the call.')
cwspCallCalledSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 8), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallCalledSubAddr.setStatus('current')
if mibBuilder.loadTexts: cwspCallCalledSubAddr.setDescription('This object shows the Called Party Subaddress of the call.')
cwspCallOtherIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallOtherIntfIndex.setStatus('current')
if mibBuilder.loadTexts: cwspCallOtherIntfIndex.setDescription('This object shows the Other Interface of the call. Generally, this would be the outgoing/egress interface for the call.')
cwspCallOtherIntfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallOtherIntfVpi.setStatus('current')
if mibBuilder.loadTexts: cwspCallOtherIntfVpi.setDescription('This object shows the VPI of the call on the partner interface.')
cwspCallOtherIntfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallOtherIntfVci.setStatus('current')
if mibBuilder.loadTexts: cwspCallOtherIntfVci.setDescription('This object shows The VCI of the call on the partner o interface. The value should be in the range of 32-65535 (0=SPVP).')
cwspCallOtherIntfCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallOtherIntfCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspCallOtherIntfCallRef.setDescription('This object shows the Call Reference of the call on the partner interface.')
cwspCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("svc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallType.setStatus('current')
if mibBuilder.loadTexts: cwspCallType.setDescription('This object shows the Call Type for the call on this interface. The call type could be SVC or SPVC.')
cwspCallStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallStartTime.setStatus('current')
if mibBuilder.loadTexts: cwspCallStartTime.setDescription('This object shows the start time of the call. This is the timestamp when the Setup Message (or Add Party Message) was first received on this interface.')
cwspCallBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bcobA", 1), ("bcobC", 2), ("bcobX", 3), ("vp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBearerClass.setStatus('current')
if mibBuilder.loadTexts: cwspCallBearerClass.setDescription('This object shows the Bearer Class of the Call. It could be BcobA, BcobC, BcobX or VP Service')
cwspCallServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("rtVbr", 2), ("nrtVbr", 3), ("abr", 4), ("ubr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallServiceCategory.setStatus('current')
if mibBuilder.loadTexts: cwspCallServiceCategory.setDescription('This object shows the service category of the call, which can be CBR, rtVBR, nrtVBR, ABR or UBR')
cwspCallCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2), ("mp2p", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallCastType.setStatus('current')
if mibBuilder.loadTexts: cwspCallCastType.setDescription('This object shows the Cast Type of the call, which can be a Point-to-Point (p2p), Point-to-MultiPoint (p2mp) or MultiPoint-to-Point (mp2p) call.')
cwspCallClipSusceptibility = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallClipSusceptibility.setStatus('current')
if mibBuilder.loadTexts: cwspCallClipSusceptibility.setDescription('This object shows Susceptibility to Clipping. It can be susceptible or not susceptible.')
cwspCallFwdConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("cbr1", 1), ("cbr2", 2), ("cbr3", 3), ("vbr1", 4), ("vbr2", 5), ("vbr3", 6), ("abr", 7), ("ubr1", 8), ("ubr2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallFwdConformance.setStatus('current')
if mibBuilder.loadTexts: cwspCallFwdConformance.setDescription('This object shows the conformance of the call to the traffic sets in the forward direction. It can be CBR.1, CBR.2, CBR.3, VBR.1 VBR.2, VBR.3, ABR, UBR.1 or UBR.2. This is as defined in ATMF Traffic Management 4.0 specification.')
cwspCallFwdPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallFwdPcr.setStatus('current')
if mibBuilder.loadTexts: cwspCallFwdPcr.setDescription('This object shows the Peak Cell Rate(pcr) in the forward direction of the call.')
cwspCallFwdScr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallFwdScr.setStatus('current')
if mibBuilder.loadTexts: cwspCallFwdScr.setDescription('This object shows the Sustainable Cell Rate(scr) in the forward direction of the call.')
cwspCallFwdMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallFwdMbs.setStatus('current')
if mibBuilder.loadTexts: cwspCallFwdMbs.setDescription('This object shows the Maximum Burst Size(mbs) of the call in the forward direction.')
cwspCallFwdCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallFwdCdvt.setStatus('current')
if mibBuilder.loadTexts: cwspCallFwdCdvt.setDescription('This object shows the Cell Delay Variation Tolerance(cdvt) in the forward direction for the call, for PCR and SCR.')
cwspCallFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallFwdFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: cwspCallFwdFrameDiscard.setDescription('This object shows if the Frame Discard is enabled or disabled in the forward direction for the call')
cwspCallBwdConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("cbr1", 1), ("cbr2", 2), ("cbr3", 3), ("vbr1", 4), ("vbr2", 5), ("vbr3", 6), ("abr", 7), ("ubr1", 8), ("ubr2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBwdConformance.setStatus('current')
if mibBuilder.loadTexts: cwspCallBwdConformance.setDescription('This object shows the conformance of the call to the traffic sets in the backward direction. It can be CBR.1, CBR.2, CBR.3, VBR.1 VBR.2, VBR.3, ABR, UBR.1 or UBR.2. This is as defined in ATMF Traffic Management 4.0 specification.')
cwspCallBwdPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBwdPcr.setStatus('current')
if mibBuilder.loadTexts: cwspCallBwdPcr.setDescription('This object shows the Peak Cell Rate in the backward direction of the call.')
cwspCallBwdScr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBwdScr.setStatus('current')
if mibBuilder.loadTexts: cwspCallBwdScr.setDescription('This object shows the Sustainable Cell Rate in the backward direction of the call.')
cwspCallBwdMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBwdMbs.setStatus('current')
if mibBuilder.loadTexts: cwspCallBwdMbs.setDescription('This object shows the Maximum Burst Size of the call in the backward direction.')
cwspCallBwdCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBwdCdvt.setStatus('current')
if mibBuilder.loadTexts: cwspCallBwdCdvt.setDescription('This object shows the Cell Delay Variation Tolerance in the backward direction for the call, for PCR and SCR.')
cwspCallBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallBwdFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: cwspCallBwdFrameDiscard.setDescription('This object shows if the Frame Discard is enabled or disabled in the backward direction for the call.')
cwspCallMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallMaxCtd.setStatus('current')
if mibBuilder.loadTexts: cwspCallMaxCtd.setDescription('This object shows the Maximum Cell Transfer Delay for the call on this interface.')
cwspCallMaxFwdCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallMaxFwdCdv.setStatus('current')
if mibBuilder.loadTexts: cwspCallMaxFwdCdv.setDescription('This object shows the Maximum Cell Delay Variation in the forward direction for this call on this interface.')
cwspCallMaxFwdClr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallMaxFwdClr.setStatus('current')
if mibBuilder.loadTexts: cwspCallMaxFwdClr.setDescription('This object shows the Maximum Cell Loss Ratio in the forward direction for this call on this interface.')
cwspCallMaxBwdCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallMaxBwdCdv.setStatus('current')
if mibBuilder.loadTexts: cwspCallMaxBwdCdv.setDescription('This object shows the Maximum Cell Delay Variation in the backward direction for this call on this interface.')
cwspCallMaxBwdClr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 8, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspCallMaxBwdClr.setStatus('current')
if mibBuilder.loadTexts: cwspCallMaxBwdClr.setDescription('This object shows the Maximum Cell Loss Ratio in the backward direction for this call on this interface.')
cwspAbrCallTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1), )
if mibBuilder.loadTexts: cwspAbrCallTable.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallTable.setDescription('This table contains information for ABR calls on an interface.')
cwspAbrCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-SVC-MIB", "cwspAbrCallVpi"), (0, "CISCO-WAN-SVC-MIB", "cwspAbrCallVci"))
if mibBuilder.loadTexts: cwspAbrCallEntry.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallEntry.setDescription('An entry in the table, containing information about an ABR call.')
cwspAbrCallVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: cwspAbrCallVpi.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallVpi.setDescription('The VPI value of the ABR call on this interface.')
cwspAbrCallVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cwspAbrCallVci.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallVci.setDescription('The VCI value of the ABR call on this interface. The value should be in the range of 32-65535 (0=SPVP).')
cwspAbrCallCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallCallRef.setDescription('The Call Reference value of the ABR call on this interface.')
cwspAbrCallClgAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 4), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallClgAddress.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallClgAddress.setDescription('The Calling Party Address of the ABR call.')
cwspAbrCallCldAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 5), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallCldAddress.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallCldAddress.setDescription('The Called Party Address of the ABR call.')
cwspAbrCallClgSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 6), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallClgSubAddr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallClgSubAddr.setDescription('The Calling Party Subaddress of the ABR call.')
cwspAbrCallCldSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 7), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallCldSubAddr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallCldSubAddr.setDescription('The Called Party Subaddress of the ABR call.')
cwspAbrCallOtherIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallOtherIntfIndex.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallOtherIntfIndex.setDescription('The Other Interface ID of the ABR call. Generally this would be the outgoing/egress interface for the call.')
cwspAbrCallOtherIntfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallOtherIntfVpi.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallOtherIntfVpi.setDescription('The VPI value of the ABR call on the partner interface.')
cwspAbrCallOtherIntfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallOtherIntfVci.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallOtherIntfVci.setDescription('The VCI value of the ABR call on the partner interface. The value should be in the range of 32-65535 (0=SPVP).')
cwspAbrCallOtherIntfCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallOtherIntfCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallOtherIntfCallRef.setDescription('The Call Reference of the ABR call on the partner interface.')
cwspAbrCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("svc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallType.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallType.setDescription('The Call Type for the ABR call on this interface. The call type could be SVC or SPVC.')
cwspAbrCallStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallStartTime.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallStartTime.setDescription('The start time of the ABR call. This is the timestamp when the Setup Message (or Add Party Message) was first received on this interface.')
cwspAbrCallBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bcobA", 1), ("bcobC", 2), ("bcobX", 3), ("vp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBearerClass.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBearerClass.setDescription('The Bearer Class of the ABR call. It could be BCOB-A, BCOB-C, BCOB-X or VP Service.')
cwspAbrCallServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("abr", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallServiceCategory.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallServiceCategory.setDescription('The Service Category of the ABR call, which is ABR.')
cwspAbrCallCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("p2p", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallCastType.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallCastType.setDescription('The Cast Type of the ABR call, which can only be Point-to-Point(p2p) call.')
cwspAbrCallClipSusceptibility = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallClipSusceptibility.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallClipSusceptibility.setDescription('Susceptibility to Clipping. It can be susceptible or not susceptible.')
cwspAbrCallFwdConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("abr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdConformance.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdConformance.setDescription('The Conformance of the ABR call to the traffic sets in the forward direction. It can only be ABR as defined in ATMF Traffic Management 4.0 specification.')
cwspAbrCallFwdPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdPcr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdPcr.setDescription('The Peak Cell Rate for the ABR call in the forward direction.')
cwspAbrCallFwdMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdMcr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdMcr.setDescription('The Minimum Cell Rate for the ABR call in the forward direction.')
cwspAbrCallFwdIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdIcr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdIcr.setDescription('The Initial Cell Rate for the ABR call in the forward direction. This is the rate at which the source starts, both initially and after an idle period. The value must not be larger than PCR, and is usually lower.')
cwspAbrCallFwdRif = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rifOneOver32768", 1), ("rifOneOver16384", 2), ("rifOneOver8192", 3), ("rifOneOver4096", 4), ("rifOneOver2048", 5), ("rifOneOver1024", 6), ("rifOneOver512", 7), ("rifOneOver256", 8), ("rifOneOver128", 9), ("rifOneOver64", 10), ("rifOneOver32", 11), ("rifOneOver16", 12), ("rifOneOver8", 13), ("rifOneOver4", 14), ("rifOneOver2", 15), ("rifOne", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdRif.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdRif.setDescription('The Rate Increase Factor for the ABR call in the forward direction. This controls the rate at which the rate increases, when a backward RM-cell is received with CI=0 and NI=0. Larger values lead to faster rate increase. The default value is rifOneOver16(12).')
cwspAbrCallFwdRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rdfOneOver32768", 1), ("rdfOneOver16384", 2), ("rdfOneOver8192", 3), ("rdfOneOver4096", 4), ("rdfOneOver2048", 5), ("rdfOneOver1024", 6), ("rdfOneOver512", 7), ("rdfOneOver256", 8), ("rdfOneOver128", 9), ("rdfOneOver64", 10), ("rdfOneOver32", 11), ("rdfOneOver16", 12), ("rdfOneOver8", 13), ("rdfOneOver4", 14), ("rdfOneOver2", 15), ("rdfOne", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdRdf.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdRdf.setDescription('The Rate Decrease Factor for the ABR call in the forward direction. This controls the rate decrease which occurs when backward RM-cells with CI=1, are received. Larger values lead to faster rate decrease. The default value is rdfOneOver16(12).')
cwspAbrCallFwdTbe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdTbe.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdTbe.setDescription('The Transient Buffer Exposure for the ABR call in the forward direction. This is the negotiated number of cells that the network would like to limit the source to sending during setup periods, before the first RM-cell returns.')
cwspAbrCallFwdNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nrm2", 1), ("nrm4", 2), ("nrm8", 3), ("nrm16", 4), ("nrm32", 5), ("nrm64", 6), ("nrm128", 7), ("nrm256", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdNrm.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdNrm.setDescription('The Maximum Number of Cells a source may send for each forward RM-cell in the forward direction for the ABR call. The default value is nrm32(5).')
cwspAbrCallFwdTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("trm0point78125", 1), ("trm1point5625", 2), ("trm3point125", 3), ("trm6point25", 4), ("trm12point5", 5), ("trm25", 6), ("trm50", 7), ("trm100", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdTrm.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdTrm.setDescription('The Upper Bound on the time between forward RM-cells in the forward direction for the ABR call.')
cwspAbrCallFwdAdtf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdAdtf.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdAdtf.setDescription('The Allowed Cell Rate (ACR) Decrease Time Factor for the ABR call in the forward direction. This is the time permitted between sending RM-cells before the rate is decreased to ICR. Range is 10 ms to 10.23 seconds. The unit is 10 msecs. For example, the default value of 50 corresponds to a time factor of 500 ms. Larger values allow a source to retain its current rate longer, during periods of relative inactivity. The default is 50 (0.5 seconds).')
cwspAbrCallFwdCdf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cdf0", 1), ("cdfOneOver64", 2), ("cdfOneOver32", 3), ("cdfOneOver16", 4), ("cdfOneOver8", 5), ("cdfOneOver4", 6), ("cdfOneOver2", 7), ("cdfOne", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdCdf.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdCdf.setDescription('The Cutoff Decrease Factor for the ABR call in the forward direction. This controls the decrease in Allowed Cell Rate (ACR) associated with missing RM-cell count (CRM). Larger values result in faster rate decrease. The default value is cdfOneOver16(4).')
cwspAbrCallFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFwdFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFwdFrameDiscard.setDescription('Whether Frame Discard is enabled or disabled in the forward direction for the ABR call.')
cwspAbrCallBwdPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdPcr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdPcr.setDescription('The Peak Cell Rate for the ABR call in the backward direction.')
cwspAbrCallBwdMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdMcr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdMcr.setDescription('The Minimum Cell Rate for the ABR call in the backward direction.')
cwspAbrCallBwdIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdIcr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdIcr.setDescription('The Initial Cell Rate for the ABR call in the backward direction. This is the rate at which the source starts, both initially and after an idle period. The value must not be larger than PCR, and is usually lower.')
cwspAbrCallBwdRif = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rifOneOver32768", 1), ("rifOneOver16384", 2), ("rifOneOver8192", 3), ("rifOneOver4096", 4), ("rifOneOver2048", 5), ("rifOneOver1024", 6), ("rifOneOver512", 7), ("rifOneOver256", 8), ("rifOneOver128", 9), ("rifOneOver64", 10), ("rifOneOver32", 11), ("rifOneOver16", 12), ("rifOneOver8", 13), ("rifOneOver4", 14), ("rifOneOver2", 15), ("rifOne", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdRif.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdRif.setDescription('The Rate Increase Factor for the ABR call in the backward direction. This controls the rate at which the rate increases, when a forward RM-cell is received with CI=0 and NI=0. Larger values lead to faster rate increase. The default value is rifOneOver16(12).')
cwspAbrCallBwdRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rdfOneOver32768", 1), ("rdfOneOver16384", 2), ("rdfOneOver8192", 3), ("rdfOneOver4096", 4), ("rdfOneOver2048", 5), ("rdfOneOver1024", 6), ("rdfOneOver512", 7), ("rdfOneOver256", 8), ("rdfOneOver128", 9), ("rdfOneOver64", 10), ("rdfOneOver32", 11), ("rdfOneOver16", 12), ("rdfOneOver8", 13), ("rdfOneOver4", 14), ("rdfOneOver2", 15), ("rdfOne", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdRdf.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdRdf.setDescription('The Rate Decrease Factor for the ABR call in the backward direction. This controls the rate decrease which occurs when forward RM-cells with CI=1, are received. Larger values lead to faster rate decrease. The default value is rdfOneOver16(12).')
cwspAbrCallBwdTbe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdTbe.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdTbe.setDescription('The Transient Buffer Exposure for the ABR call in the backward direction. This is the negotiated number of cells that the network would like to limit the source to sending during setup periods, before the first RM-cell returns.')
cwspAbrCallBwdNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nrm2", 1), ("nrm4", 2), ("nrm8", 3), ("nrm16", 4), ("nrm32", 5), ("nrm64", 6), ("nrm128", 7), ("nrm256", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdNrm.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdNrm.setDescription('The Maximum Number of Cells a source may send for each forward RM-cell in the backward direction for the ABR call. The default value is nrm32(5).')
cwspAbrCallBwdTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("trm0point78125", 1), ("trm1point5625", 2), ("trm3point125", 3), ("trm6point25", 4), ("trm12point5", 5), ("trm25", 6), ("trm50", 7), ("trm100", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdTrm.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdTrm.setDescription('The Upper Bound on the time between forward RM-cells in the backward direction for the ABR call.')
cwspAbrCallBwdAdtf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdAdtf.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdAdtf.setDescription('The Allowed Cell Rate (ACR) Decrease Time Factor for the ABR call in the backward direction. This is the time permitted between sending RM-cells before the rate is decreased to ICR. Range is 10 ms to 10.23 seconds. The unit is 10 msecs. For example, the default value of 50 corresponds to a time factor of 500 ms. Larger values allow a source to retain its current rate longer, during periods of relative inactivity. The default is 50 (0.5 seconds).')
cwspAbrCallBwdCdf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cdf0", 1), ("cdfOneOver64", 2), ("cdfOneOver32", 3), ("cdfOneOver16", 4), ("cdfOneOver8", 5), ("cdfOneOver4", 6), ("cdfOneOver2", 7), ("cdfOne", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdCdf.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdCdf.setDescription('The Cutoff Decrease Factor for the ABR call in the backward direction. This controls the decrease in Allowed Cell Rate (ACR) associated with missing RM-cell count (CRM). Larger values result in faster rate decrease. The default value is cdfOneOver16(4).')
cwspAbrCallBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallBwdFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallBwdFrameDiscard.setDescription('Whether Frame Discard is enabled or disabled in the backward direction for the ABR call.')
cwspAbrCallFrtt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallFrtt.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallFrtt.setDescription('The Fixed Round-Trip Time for the ABR call. This is the sum of the fixed and propagation delays from the source to the furthest destination and back.')
cwspAbrCallMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallMaxCtd.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallMaxCtd.setDescription('The Maximum Cell Transfer Delay for the ABR call on this interface.')
cwspAbrCallMaxFwdCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallMaxFwdCdv.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallMaxFwdCdv.setDescription('The Maximum Cell Delay Variation in the forward direction for the ABR call on this interface.')
cwspAbrCallMaxFwdClr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallMaxFwdClr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallMaxFwdClr.setDescription('The Maximum Cell Loss Ratio in the forward direction for the ABR call on this interface.')
cwspAbrCallMaxBwdCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallMaxBwdCdv.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallMaxBwdCdv.setDescription('The Maximum Cell Delay Variation in the backward direction for the ABR call on this interface.')
cwspAbrCallMaxBwdClr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 9, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspAbrCallMaxBwdClr.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallMaxBwdClr.setDescription('The Maximum Cell Loss Ratio in the backward direction for the ABR call on this interface.')
cwspConnTraceAvail = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceAvail.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceAvail.setDescription('This object tells the number of calls can be traced concurrently. Depending on the system resource, this object may vary sometime to time. NMS should query this object to ensure there is system resource available before creating a row in the cwspConnTraceCntlTable.')
cwspConnTraceNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceNextIndex.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceNextIndex.setDescription('When creating a row in the cwspConnTraceCntlTable, NMS should query this object to obtain the index value to be used for row creation.')
cwspConnTraceCntlTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3), )
if mibBuilder.loadTexts: cwspConnTraceCntlTable.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceCntlTable.setDescription('This Table contains the objects which control the creation of connection trace for the existing SVC call. ')
cwspConnTraceCntlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1), ).setIndexNames((0, "CISCO-WAN-SVC-MIB", "cwspConnTraceIndex"))
if mibBuilder.loadTexts: cwspConnTraceCntlEntry.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceCntlEntry.setDescription('This object controls the connection trace creation. NMS needs to acquire the next index available to create a row. In addition, NMS needs to provide all read-create objects in the same pdu with RowStatus to be CreateAndGo.')
cwspConnTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwspConnTraceIndex.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceIndex.setDescription('Index to a row of connection trace.')
cwspConnTraceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConnTraceifIndex.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceifIndex.setDescription("The 'ifIndex' indicates the port to a trace connection.")
cwspConnTraceSrcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConnTraceSrcVpi.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceSrcVpi.setDescription('This object shows the VPI value of the starting point on this interface.')
cwspConnTraceSrcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConnTraceSrcVci.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceSrcVci.setDescription('This object shows The VCI value of the starting point on this interface. The value should be in the range of 32-65535 (0=SPVP).')
cwspConnTraceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConnTraceType.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceType.setDescription('Setting this object to either p2p or p2mp to specify tracing a p2p or p2mp connection.')
cwspConnTraceCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceCallRef.setDescription('This object shows the Call Reference value of the call on this interface.')
cwspConnTraceLeafRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConnTraceLeafRef.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceLeafRef.setDescription('This object shows the value of the Leaf Reference (EndPointReference) of the Call on this interface, this value is used to support p2mp call trace. For p2p call, this value should be set as 0 by NMS.')
cwspConnTraceDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceDestVpi.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceDestVpi.setDescription('This object shows the endpoint VPI value of the call on this interface.')
cwspConnTraceDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceDestVci.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceDestVci.setDescription('This object shows the endpoint VCI value of the call on this interface.')
cwspConnTraceDestCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceDestCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceDestCallRef.setDescription('This object shows the endpoint call reference on this interface.')
cwspConnTraceResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("traceInProgress", 1), ("traceCompleted", 2), ("traceIncompleted", 3), ("traceExceededLength", 4), ("traceContRefused", 5), ("traceLackResource", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceResultStatus.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceResultStatus.setDescription('This object shows the result of tracing the call. NMS should get positive result (i.e. traceCompleted) for this attribute before query the cwspConnTraceTable.')
cwspConnTraceQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwspConnTraceQueryStatus.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceQueryStatus.setDescription('This object used to manage rows in this table. However, only CreateAndGo, NotInService, Active, and Destroy are start up the trace. To remove a row, NMS set this value to Destroy. The managed device will either return Active or NotInService.')
cwspConnTraceTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4), )
if mibBuilder.loadTexts: cwspConnTraceTable.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceTable.setDescription('This table contains the objects which show the traversed node information in the existing SVC call. ')
cwspConnTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1), ).setIndexNames((0, "CISCO-WAN-SVC-MIB", "cwspConnTraceIndex"), (0, "CISCO-WAN-SVC-MIB", "cwspConnTraceDataIndex"))
if mibBuilder.loadTexts: cwspConnTraceEntry.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceEntry.setDescription('A conceptual row of the cwspConnTraceTable used to return information about all the nodes belongs to the connection which search criteria is corresponding to instance of the cwspConnTraceCntlTable. ')
cwspConnTraceDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cwspConnTraceDataIndex.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceDataIndex.setDescription('Along with cwspConnTraceIndex, this object specified an unique entry in the cwspConnTraceTable.')
cwspConnTraceNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceNodeId.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceNodeId.setDescription('This octet string represents 22 bytes nodeId in the traced connection.')
cwspConnTraceEgressPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceEgressPortId.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceEgressPortId.setDescription('This object represents 4 bytes logical port ID of the traversed node. When 0 is specified, the destination node for the trace is reached.')
cwspConnTraceEgressVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceEgressVpi.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceEgressVpi.setDescription("This object shows the Egress port's VPI value for the traced connection.")
cwspConnTraceEgressVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceEgressVci.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceEgressVci.setDescription("This object shows the Egress port's VCI value for the traced connection")
cwspConnTraceEgressCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceEgressCallRef.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceEgressCallRef.setDescription("This object shows the Egress port's call reference.")
cwspConnTraceEgressPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceEgressPhyPortId.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceEgressPhyPortId.setDescription("This object shows the Egress port's physical port Identifier for the traversed node; if this object is 0 meaning that the destination node for the traced connection has been reached. the meaning for the bytes are: first byte -- flag (used by CLI to decode the rest of bytes ) 2nd byte -- shelf 3rd & 4th bytes -- slot 5th byte -- subslot 6th & 7th bytes -- port 8th byte -- subport ")
cwspConnTraceLastNode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 14, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspConnTraceLastNode.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceLastNode.setDescription("This value indicates if this entry contains the information about the last node where this trace ends. If it is the last node, this value is 'true(1)' or it is 'false(2)'. ")
ciscoWANPnniLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("in2win", 1), ("out2win", 2), ("in2wout", 3), ("out2wout", 4), ("inCout", 5), ("outCout", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWANPnniLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoWANPnniLinkStatus.setDescription('Indicates the status of a link has changed: 1 - the link entered the 2-Way Inside state, 2 - the link exit the 2-Way Inside state, 3 - the link entered the 2-Way Outside state, 4 - the link exit the 2-Way Outside state. 5 - the link entered the Common Outside state, or 6 - the link exit the Common Outside state and entered the 1-Way Outside state.')
ciscoWANPnniPglStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("hung", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWANPnniPglStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoWANPnniPglStatus.setDescription('Indicates the status of PGL process has changed: 1 - the PGL exit the hung-election state, or 2 - the PGL entered the hung-election state.')
ciscoWANPnniReachability = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWANPnniReachability.setStatus('current')
if mibBuilder.loadTexts: ciscoWANPnniReachability.setDescription('This object is used in conjunction with ciscoWANPnniRemoteNodeId to indicate the reachability of the RemoteNode has changed: 1 - RemoteNode became reachable, or 2 - RemoteNode became unreachable.')
ciscoWANPnniRemoteNodeId = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 3, 4), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWANPnniRemoteNodeId.setStatus('current')
if mibBuilder.loadTexts: ciscoWANPnniRemoteNodeId.setDescription('Indicates the node identifier of a remote node. If the remote node ID is unknown, this attribute is set to all zeros.')
ciscoWANPnniPortId = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 3, 5), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWANPnniPortId.setStatus('current')
if mibBuilder.loadTexts: ciscoWANPnniPortId.setDescription('The port identifier of the port.')
cwspOperationTable = MibTable((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1), )
if mibBuilder.loadTexts: cwspOperationTable.setStatus('current')
if mibBuilder.loadTexts: cwspOperationTable.setDescription('The Interface operation table contains the runtime negotiated values between platform, PNNI controller and peer on an interface')
cwspOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwspOperationEntry.setStatus('current')
if mibBuilder.loadTexts: cwspOperationEntry.setDescription('An entry in the interface operation table containing negotiated values of an interface')
cwspOperIlmiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperIlmiEnable.setStatus('current')
if mibBuilder.loadTexts: cwspOperIlmiEnable.setDescription('The operational state of ILMI.')
cwspOperIfcType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("publicUni", 1), ("privateUni", 2), ("iisp", 3), ("pnni", 4), ("aini", 5), ("enni", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperIfcType.setStatus('current')
if mibBuilder.loadTexts: cwspOperIfcType.setDescription('The interface type of an interface publicUni -- Public User-Network Interface privateUni -- Private User-Network Interface iisp -- Interim Inter-Switch Signaling Protocol pnni -- Private Network-Network Interface aini -- ATM Inter-Network Interface enni -- Enhanced Network-Network Interface, a cisco proprietary interfac type.')
cwspOperIfcSide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userSide", 1), ("networkSide", 2), ("symmetric", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperIfcSide.setReference('ATM Forum ILMI 4.0 Section 8.3.4.1')
if mibBuilder.loadTexts: cwspOperIfcSide.setStatus('current')
if mibBuilder.loadTexts: cwspOperIfcSide.setDescription('The IME type of the ATM device which is concluded from automatic interface type determination procedure.')
cwspOperMaxVPCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxVPCs.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxVPCs.setDescription('The maximum number of switched and permanent VPCs supported on this ATM interface')
cwspOperMaxVCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxVCCs.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxVCCs.setDescription('The maximum number of switched and permanent VCCs supported on this ATM interface')
cwspOperMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxVpiBits.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxVpiBits.setDescription('The maximum number of active VPI bits on this ATM interface.')
cwspOperMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxVciBits.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxVciBits.setDescription('The maximum number of active VCI bits on this ATM interface.')
cwspOperUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperUniType.setStatus('current')
if mibBuilder.loadTexts: cwspOperUniType.setDescription('The type of the ATM device, either public or private.')
cwspOperUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("version2point0", 1), ("version3poing0", 2), ("version3poing1", 3), ("version4poing0", 4), ("unsupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperUniVersion.setStatus('current')
if mibBuilder.loadTexts: cwspOperUniVersion.setDescription("An indication of the latest version of the ATM Forum UNI Signaling Specification that is supported on this ATM Interface. If this value is not present, a version of the UNI earlier than 3.1 is supported. If the peer IME's value of this object is the same as, or later than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise, compatibility of the two IMEs cannot be assumed.")
cwspOperDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperDeviceType.setStatus('current')
if mibBuilder.loadTexts: cwspOperDeviceType.setDescription('This object determines the type of the ATM device. This object is used in automatic ATM Interface-Type determination procedure such that a correct operational ATM Interface-type can be determined. An ATM End System shall take the value of user(1), and an ATM network node shall take the value of node(2).')
cwspOperIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperIlmiVersion.setStatus('current')
if mibBuilder.loadTexts: cwspOperIlmiVersion.setDescription("An indication of the latest version of the ATM Forum ILMI Specification that is supported on this ATM Interface. If the peer IME's value of this object is the same as, or later than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise, compatibility of the two IMEs cannot be assumed. If this object is not present, a version of the ILMI earlier than 4.0 is supported.")
cwspOperNniSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unsupported", 1), ("iisp", 2), ("pnniVersion1point0", 3), ("enni", 4), ("aini", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperNniSigVersion.setStatus('current')
if mibBuilder.loadTexts: cwspOperNniSigVersion.setDescription("An indication of the latest version of the ATM Forum PNNI Signaling Specification that is supported on this ATM Interface. Note that the PNNI routing version is not determined through ILMI. If the peer IME's value of this object is the same as, or later than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise, compatibility of the two IMEs cannot be assumed. Note that 'enni' is not a signaling protocol.")
cwspOperMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxSvpcVpi.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxSvpcVpi.setDescription('The maximum switched VPC VPI.')
cwspOperMinSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMinSvpcVpi.setStatus('current')
if mibBuilder.loadTexts: cwspOperMinSvpcVpi.setDescription('The minimum switched VPC VPI.')
cwspOperMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxSvccVpi.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxSvccVpi.setDescription('The maximum switched VCC VPI.')
cwspOperMinSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMinSvccVpi.setStatus('current')
if mibBuilder.loadTexts: cwspOperMinSvccVpi.setDescription('The minimum switched VCC VPI.')
cwspOperMaxSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMaxSvccVci.setStatus('current')
if mibBuilder.loadTexts: cwspOperMaxSvccVci.setDescription('The maximum switched VCC VCI.')
cwspOperMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperMinSvccVci.setStatus('current')
if mibBuilder.loadTexts: cwspOperMinSvccVci.setDescription('The minimum switched VCC VCI.')
cwspOperAddrPlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("aesa", 2), ("e164", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperAddrPlanSupported.setStatus('current')
if mibBuilder.loadTexts: cwspOperAddrPlanSupported.setDescription('The ATM address plan supported on a public UNI. For all other interfaces, the value is aesa.')
cwspOperFailReason = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ilmiDown", 1), ("portDown", 2), ("vsiOperDown", 3), ("vccfailure", 4), ("neighIpChanged", 5), ("vsiRemove", 6), ("vsiAdminDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwspOperFailReason.setStatus('current')
if mibBuilder.loadTexts: cwspOperFailReason.setDescription('Defined SVC port failures. Note: this object is used as trap varbind only. The NMS applications should not issue SNMP get, get-next for this object.')
ciscoWANSpvcFailReason = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 4, 1), CwspSpvcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWANSpvcFailReason.setStatus('current')
if mibBuilder.loadTexts: ciscoWANSpvcFailReason.setDescription('Defines SPVC manager failures. Refer description in the textual convention. Note: this object is for Supporting Varbinds used only in trap definitions. The NMS applications should not depend on the implementation of this object. The SNMP Requests(GET,GET-NEXT) is not valid for this object.')
cwspSpvcNodePrefix = MibScalar((1, 3, 6, 1, 4, 1, 351, 140, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwspSpvcNodePrefix.setStatus('current')
if mibBuilder.loadTexts: cwspSpvcNodePrefix.setDescription('Spvc node prefix for the pnni controller. This node prefix identifies an SPVC node in the network.')
ciscoWANSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 3))
ciscoWANSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 3, 1))
ciscoWANSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 140, 3, 2))
ciscoWANSvcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 140, 3, 1, 1)).setObjects(("CISCO-WAN-SVC-MIB", "cwsInfoGrp"), ("CISCO-WAN-SVC-MIB", "cwspConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspCacConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspCallStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspSigStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspCallGrp"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallGrp"), ("CISCO-WAN-SVC-MIB", "cwspPrefixGrp"), ("CISCO-WAN-SVC-MIB", "cwspLoadGrp"), ("CISCO-WAN-SVC-MIB", "cwspAddressGrp"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceGrp"), ("CISCO-WAN-SVC-MIB", "cwspOperationGrp"), ("CISCO-WAN-SVC-MIB", "cwspSigConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspSscopConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspSscopStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspRegAddressGrp"), ("CISCO-WAN-SVC-MIB", "cwspRoutingGrp"), ("CISCO-WAN-SVC-MIB", "cwspSpvcGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWANSvcMIBCompliance = ciscoWANSvcMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWANSvcMIBCompliance.setDescription('The compliance statement for entities that support the Cisco SVC MIB. ')
ciscoWANSvcMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 140, 3, 1, 2)).setObjects(("CISCO-WAN-SVC-MIB", "cwsInfoGrp"), ("CISCO-WAN-SVC-MIB", "cwspConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspCacConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspCallStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspSigStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspCallGrp"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallGrp"), ("CISCO-WAN-SVC-MIB", "cwspPrefixGrp"), ("CISCO-WAN-SVC-MIB", "cwspLoadGrp"), ("CISCO-WAN-SVC-MIB", "cwspAddressGrp"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceGrp2"), ("CISCO-WAN-SVC-MIB", "cwspOperationGrp"), ("CISCO-WAN-SVC-MIB", "cwspSigConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspSscopConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspSscopStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspRegAddressGrp"), ("CISCO-WAN-SVC-MIB", "cwspRoutingGrp"), ("CISCO-WAN-SVC-MIB", "cwspSpvcGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWANSvcMIBCompliance2 = ciscoWANSvcMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWANSvcMIBCompliance2.setDescription('The compliance statement for entities that support the Cisco SVC MIB. ')
ciscoWANSvcMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 140, 3, 1, 3)).setObjects(("CISCO-WAN-SVC-MIB", "cwsInfoGrp"), ("CISCO-WAN-SVC-MIB", "cwspConfigGrp3"), ("CISCO-WAN-SVC-MIB", "cwspCacConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspCallStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspSigStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspCallGrp"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallGrp"), ("CISCO-WAN-SVC-MIB", "cwspPrefixGrp"), ("CISCO-WAN-SVC-MIB", "cwspLoadGrp"), ("CISCO-WAN-SVC-MIB", "cwspAddressGrp"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceGrp2"), ("CISCO-WAN-SVC-MIB", "cwspOperationGrp"), ("CISCO-WAN-SVC-MIB", "cwspSigConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspSscopConfigGrp"), ("CISCO-WAN-SVC-MIB", "cwspSscopStatsGrp"), ("CISCO-WAN-SVC-MIB", "cwspRegAddressGrp"), ("CISCO-WAN-SVC-MIB", "cwspRoutingGrp"), ("CISCO-WAN-SVC-MIB", "cwspSpvcGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWANSvcMIBCompliance3 = ciscoWANSvcMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoWANSvcMIBCompliance3.setDescription('The compliance statement for entities that support the Cisco SVC MIB. ')
cwsInfoGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 1)).setObjects(("CISCO-WAN-SVC-MIB", "cwsSwRevision"), ("CISCO-WAN-SVC-MIB", "cwsControllerStatus"), ("CISCO-WAN-SVC-MIB", "cwspPnniStndbyControllerStatus"), ("CISCO-WAN-SVC-MIB", "cwspPnniControllerStatus"), ("CISCO-WAN-SVC-MIB", "cwspPnniControllerPhySlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwsInfoGrp = cwsInfoGrp.setStatus('current')
if mibBuilder.loadTexts: cwsInfoGrp.setDescription('A collection of objects providing device level information.')
cwspConfigGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 2)).setObjects(("CISCO-WAN-SVC-MIB", "cwspAdminStatus"), ("CISCO-WAN-SVC-MIB", "cwspOperStatus"), ("CISCO-WAN-SVC-MIB", "cwspSvcBlocked"), ("CISCO-WAN-SVC-MIB", "cwspSpvcBlocked"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAddrRegEnable"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAutoConfEnable"), ("CISCO-WAN-SVC-MIB", "cwspIlmiServRegEnable"), ("CISCO-WAN-SVC-MIB", "cwspPhyIdentifier"), ("CISCO-WAN-SVC-MIB", "cwspSignallingVpi"), ("CISCO-WAN-SVC-MIB", "cwspSignallingVci"), ("CISCO-WAN-SVC-MIB", "cwspRoutingVpi"), ("CISCO-WAN-SVC-MIB", "cwspRoutingVci"), ("CISCO-WAN-SVC-MIB", "cwspMaxVpiBits"), ("CISCO-WAN-SVC-MIB", "cwspMaxVciBits"), ("CISCO-WAN-SVC-MIB", "cwspUniVersion"), ("CISCO-WAN-SVC-MIB", "cwspNniVersion"), ("CISCO-WAN-SVC-MIB", "cwspUniType"), ("CISCO-WAN-SVC-MIB", "cwspSide"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2pCalls"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2mpRoots"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2mpLeafs"), ("CISCO-WAN-SVC-MIB", "cwspMinSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspMinSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspMinSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspEnhancedIisp"), ("CISCO-WAN-SVC-MIB", "cwspConfigTableRowStatus"), ("CISCO-WAN-SVC-MIB", "cwspAddrPlanSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspConfigGrp = cwspConfigGrp.setStatus('deprecated')
if mibBuilder.loadTexts: cwspConfigGrp.setDescription('A collection of objects providing information about the controller interface operation and associated parameters.')
cwspCacConfigGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 3)).setObjects(("CISCO-WAN-SVC-MIB", "cwspUtilFactorCbr"), ("CISCO-WAN-SVC-MIB", "cwspUtilFactorRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspUtilFactorNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspUtilFactorAbr"), ("CISCO-WAN-SVC-MIB", "cwspUtilFactorUbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxBwCbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxBwRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxBwNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxBwAbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxBwUbr"), ("CISCO-WAN-SVC-MIB", "cwspMinBwCbr"), ("CISCO-WAN-SVC-MIB", "cwspMinBwRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMinBwNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMinBwAbr"), ("CISCO-WAN-SVC-MIB", "cwspMinBwUbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcCbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcAbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcUbr"), ("CISCO-WAN-SVC-MIB", "cwspMinVcCbr"), ("CISCO-WAN-SVC-MIB", "cwspMinVcRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMinVcNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMinVcAbr"), ("CISCO-WAN-SVC-MIB", "cwspMinVcUbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcBwCbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcBwRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcBwNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcBwAbr"), ("CISCO-WAN-SVC-MIB", "cwspMaxVcBwUbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultCdvtCbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultCdvtRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultCdvtNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultCdvtAbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultCdvtUbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultMbsRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspDefaultMbsNrtVbr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspCacConfigGrp = cwspCacConfigGrp.setStatus('current')
if mibBuilder.loadTexts: cwspCacConfigGrp.setDescription('A collection of objects providing information about CAC information of a interface.')
cwspCallStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 4)).setObjects(("CISCO-WAN-SVC-MIB", "cwspCountReset"), ("CISCO-WAN-SVC-MIB", "cwspInCallAttempts"), ("CISCO-WAN-SVC-MIB", "cwspInCallEstabs"), ("CISCO-WAN-SVC-MIB", "cwspInCallFailures"), ("CISCO-WAN-SVC-MIB", "cwspInFilterFailures"), ("CISCO-WAN-SVC-MIB", "cwspInRouteFailures"), ("CISCO-WAN-SVC-MIB", "cwspInResrcFailures"), ("CISCO-WAN-SVC-MIB", "cwspInTimerFailures"), ("CISCO-WAN-SVC-MIB", "cwspInCrankbacks"), ("CISCO-WAN-SVC-MIB", "cwspOutCallAttempts"), ("CISCO-WAN-SVC-MIB", "cwspOutCallEstabs"), ("CISCO-WAN-SVC-MIB", "cwspOutCallFailures"), ("CISCO-WAN-SVC-MIB", "cwspOutFilterFailures"), ("CISCO-WAN-SVC-MIB", "cwspOutRouteFailures"), ("CISCO-WAN-SVC-MIB", "cwspOutResrcFailures"), ("CISCO-WAN-SVC-MIB", "cwspOutTimerFailures"), ("CISCO-WAN-SVC-MIB", "cwspOutCrankbacks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspCallStatsGrp = cwspCallStatsGrp.setStatus('current')
if mibBuilder.loadTexts: cwspCallStatsGrp.setDescription('A collection of objects providing information about call statistics of a interface.')
cwspSigStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 5)).setObjects(("CISCO-WAN-SVC-MIB", "cwspSigCounterReset"), ("CISCO-WAN-SVC-MIB", "cwspCallProcRcv"), ("CISCO-WAN-SVC-MIB", "cwspConnectRcv"), ("CISCO-WAN-SVC-MIB", "cwspConnectAckRcv"), ("CISCO-WAN-SVC-MIB", "cwspSetupRcv"), ("CISCO-WAN-SVC-MIB", "cwspReleaseRcv"), ("CISCO-WAN-SVC-MIB", "cwspReleaseComplRcv"), ("CISCO-WAN-SVC-MIB", "cwspRestartRcv"), ("CISCO-WAN-SVC-MIB", "cwspRestartAckRcv"), ("CISCO-WAN-SVC-MIB", "cwspStatusRcv"), ("CISCO-WAN-SVC-MIB", "cwspStatusEnqRcv"), ("CISCO-WAN-SVC-MIB", "cwspNotifyRcv"), ("CISCO-WAN-SVC-MIB", "cwspAlertRcv"), ("CISCO-WAN-SVC-MIB", "cwspProgressRcv"), ("CISCO-WAN-SVC-MIB", "cwspAddPtyRcv"), ("CISCO-WAN-SVC-MIB", "cwspAddPtyAckRcv"), ("CISCO-WAN-SVC-MIB", "cwspAddPtyRejRcv"), ("CISCO-WAN-SVC-MIB", "cwspDropPtyRcv"), ("CISCO-WAN-SVC-MIB", "cwspIncorrectMsgRcv"), ("CISCO-WAN-SVC-MIB", "cwspTimerExpiries"), ("CISCO-WAN-SVC-MIB", "cwspLastCause"), ("CISCO-WAN-SVC-MIB", "cwspLastDiagnostic"), ("CISCO-WAN-SVC-MIB", "cwspCallProcXmt"), ("CISCO-WAN-SVC-MIB", "cwspConnectXmt"), ("CISCO-WAN-SVC-MIB", "cwspConnectAckXmt"), ("CISCO-WAN-SVC-MIB", "cwspSetupXmt"), ("CISCO-WAN-SVC-MIB", "cwspReleaseXmt"), ("CISCO-WAN-SVC-MIB", "cwspReleaseComplXmt"), ("CISCO-WAN-SVC-MIB", "cwspRestartXmt"), ("CISCO-WAN-SVC-MIB", "cwspRestartAckXmt"), ("CISCO-WAN-SVC-MIB", "cwspStatusXmt"), ("CISCO-WAN-SVC-MIB", "cwspStatusEnqXmt"), ("CISCO-WAN-SVC-MIB", "cwspNotifyXmt"), ("CISCO-WAN-SVC-MIB", "cwspAlertXmt"), ("CISCO-WAN-SVC-MIB", "cwspProgressXmt"), ("CISCO-WAN-SVC-MIB", "cwspAddPtyXmt"), ("CISCO-WAN-SVC-MIB", "cwspAddPtyAckXmt"), ("CISCO-WAN-SVC-MIB", "cwspAddPtyRejXmt"), ("CISCO-WAN-SVC-MIB", "cwspDropPtyXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspSigStatsGrp = cwspSigStatsGrp.setStatus('current')
if mibBuilder.loadTexts: cwspSigStatsGrp.setDescription('A collection of objects providing information about signaling statistics.')
cwspCallGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 6)).setObjects(("CISCO-WAN-SVC-MIB", "cwspCallCallRef"), ("CISCO-WAN-SVC-MIB", "cwspCallCallingAddress"), ("CISCO-WAN-SVC-MIB", "cwspCallCalledAddress"), ("CISCO-WAN-SVC-MIB", "cwspCallCallingSubAddr"), ("CISCO-WAN-SVC-MIB", "cwspCallCalledSubAddr"), ("CISCO-WAN-SVC-MIB", "cwspCallOtherIntfIndex"), ("CISCO-WAN-SVC-MIB", "cwspCallOtherIntfVpi"), ("CISCO-WAN-SVC-MIB", "cwspCallOtherIntfVci"), ("CISCO-WAN-SVC-MIB", "cwspCallOtherIntfCallRef"), ("CISCO-WAN-SVC-MIB", "cwspCallType"), ("CISCO-WAN-SVC-MIB", "cwspCallStartTime"), ("CISCO-WAN-SVC-MIB", "cwspCallBearerClass"), ("CISCO-WAN-SVC-MIB", "cwspCallServiceCategory"), ("CISCO-WAN-SVC-MIB", "cwspCallCastType"), ("CISCO-WAN-SVC-MIB", "cwspCallClipSusceptibility"), ("CISCO-WAN-SVC-MIB", "cwspCallFwdConformance"), ("CISCO-WAN-SVC-MIB", "cwspCallFwdPcr"), ("CISCO-WAN-SVC-MIB", "cwspCallFwdScr"), ("CISCO-WAN-SVC-MIB", "cwspCallFwdMbs"), ("CISCO-WAN-SVC-MIB", "cwspCallFwdCdvt"), ("CISCO-WAN-SVC-MIB", "cwspCallFwdFrameDiscard"), ("CISCO-WAN-SVC-MIB", "cwspCallBwdConformance"), ("CISCO-WAN-SVC-MIB", "cwspCallBwdPcr"), ("CISCO-WAN-SVC-MIB", "cwspCallBwdScr"), ("CISCO-WAN-SVC-MIB", "cwspCallBwdMbs"), ("CISCO-WAN-SVC-MIB", "cwspCallBwdCdvt"), ("CISCO-WAN-SVC-MIB", "cwspCallBwdFrameDiscard"), ("CISCO-WAN-SVC-MIB", "cwspCallMaxCtd"), ("CISCO-WAN-SVC-MIB", "cwspCallMaxFwdCdv"), ("CISCO-WAN-SVC-MIB", "cwspCallMaxFwdClr"), ("CISCO-WAN-SVC-MIB", "cwspCallMaxBwdCdv"), ("CISCO-WAN-SVC-MIB", "cwspCallMaxBwdClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspCallGrp = cwspCallGrp.setStatus('current')
if mibBuilder.loadTexts: cwspCallGrp.setDescription('A collection of objects providing information about the p2p or p2mp SVC/SPVC calls and associated parameters.')
cwspAbrCallGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 7)).setObjects(("CISCO-WAN-SVC-MIB", "cwspAbrCallCallRef"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallClgAddress"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallCldAddress"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallClgSubAddr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallCldSubAddr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallOtherIntfIndex"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallOtherIntfVpi"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallOtherIntfVci"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallOtherIntfCallRef"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallType"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallStartTime"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBearerClass"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallServiceCategory"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallCastType"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallClipSusceptibility"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdConformance"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdPcr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdMcr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdIcr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdRif"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdRdf"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdTbe"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdNrm"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdTrm"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdAdtf"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdCdf"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFwdFrameDiscard"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdPcr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdMcr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdIcr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdRif"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdRdf"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdTbe"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdNrm"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdTrm"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdAdtf"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdCdf"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallBwdFrameDiscard"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallFrtt"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallMaxCtd"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallMaxFwdCdv"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallMaxFwdClr"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallMaxBwdCdv"), ("CISCO-WAN-SVC-MIB", "cwspAbrCallMaxBwdClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspAbrCallGrp = cwspAbrCallGrp.setStatus('current')
if mibBuilder.loadTexts: cwspAbrCallGrp.setDescription('A collection of objects providing information about ABR calls and associated parameters of a interface.')
cwspPrefixGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 8)).setObjects(("CISCO-WAN-SVC-MIB", "cwspPrefixRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspPrefixGrp = cwspPrefixGrp.setStatus('current')
if mibBuilder.loadTexts: cwspPrefixGrp.setDescription('A table specifying the network prefix(es) used for ILMI address registration.')
cwspLoadGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 9)).setObjects(("CISCO-WAN-SVC-MIB", "cwspLoadBwTotal"), ("CISCO-WAN-SVC-MIB", "cwspLoadMaxBwCbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMaxBwRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMaxBwNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMaxBwAbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMaxBwUbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadBwAvail"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlBwCbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlBwRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlBwNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlBwAbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlBwUbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadVcAvail"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlVcCbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlVcRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlVcNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlVcAbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadAvlVcUbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCtdCbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCtdRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCtdNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCtdAbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCtdUbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCdvCbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCdvRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCdvNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCdvAbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadCdvUbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr0Cbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr0RtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr0NrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr0Abr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr0Ubr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr01Cbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr01RtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr01NrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr01Abr"), ("CISCO-WAN-SVC-MIB", "cwspLoadClr01Ubr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMinGurCrCbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMinGurCrRtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMinGurCrNrtVbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMinGurCrAbr"), ("CISCO-WAN-SVC-MIB", "cwspLoadMinGurCrUbr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspLoadGrp = cwspLoadGrp.setStatus('current')
if mibBuilder.loadTexts: cwspLoadGrp.setDescription('A collection of objects providing information about load information and associated parameters of a interface.')
cwspAddressGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 10)).setObjects(("CISCO-WAN-SVC-MIB", "cwspAddrType"), ("CISCO-WAN-SVC-MIB", "cwspAddrProto"), ("CISCO-WAN-SVC-MIB", "cwspAddrPlan"), ("CISCO-WAN-SVC-MIB", "cwspAddrScope"), ("CISCO-WAN-SVC-MIB", "cwspAddrRedistribute"), ("CISCO-WAN-SVC-MIB", "cwspAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspAddressGrp = cwspAddressGrp.setStatus('current')
if mibBuilder.loadTexts: cwspAddressGrp.setDescription('A collection of objects providing information about ATM End System Addresses.')
cwspSigConfigGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 11)).setObjects(("CISCO-WAN-SVC-MIB", "cwspSigCfgT301"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT303"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT308"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT310"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT316"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT317"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT322"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT397"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT398"), ("CISCO-WAN-SVC-MIB", "cwspSigCfgT399"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspSigConfigGrp = cwspSigConfigGrp.setStatus('current')
if mibBuilder.loadTexts: cwspSigConfigGrp.setDescription('A collection of objects providing information about signaling configuration and associated parameters.')
cwspSscopConfigGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 12)).setObjects(("CISCO-WAN-SVC-MIB", "cwspSscopTmrCC"), ("CISCO-WAN-SVC-MIB", "cwspSscopTmrKeepAlive"), ("CISCO-WAN-SVC-MIB", "cwspSscopTmrNoResp"), ("CISCO-WAN-SVC-MIB", "cwspSscopTmrPoll"), ("CISCO-WAN-SVC-MIB", "cwspSscopTmtIdle"), ("CISCO-WAN-SVC-MIB", "cwspSscopMaxCC"), ("CISCO-WAN-SVC-MIB", "cwspSscopMaxPD"), ("CISCO-WAN-SVC-MIB", "cwspSscopMaxSTAT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspSscopConfigGrp = cwspSscopConfigGrp.setStatus('current')
if mibBuilder.loadTexts: cwspSscopConfigGrp.setDescription('A collection of objects providing information about SSCOP configuration and associated parameters.')
cwspSscopStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 13)).setObjects(("CISCO-WAN-SVC-MIB", "cwspSscopCounterReset"), ("CISCO-WAN-SVC-MIB", "cwspSscopIgnoredPduRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopBgnRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopBgakRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopEndRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopEndakRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopRsRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopRsakRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopBgrejRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopSdRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopSdpRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopPollRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopStatRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopUstatRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopUdRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopMdRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopErakRcv"), ("CISCO-WAN-SVC-MIB", "cwspSscopBgnXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopBgakXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopEndXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopEndakXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopRsXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopRsakXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopBgrejXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopSdXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopSdpXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopPollXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopStatXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopUstatXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopUdXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopMdXmt"), ("CISCO-WAN-SVC-MIB", "cwspSscopErakXmt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspSscopStatsGrp = cwspSscopStatsGrp.setStatus('current')
if mibBuilder.loadTexts: cwspSscopStatsGrp.setDescription('A collection of objects providing information about SSCOP statistics.')
cwspRegAddressGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 14)).setObjects(("CISCO-WAN-SVC-MIB", "cwspRegAtmAddress"), ("CISCO-WAN-SVC-MIB", "cwspRegAddressOrgSscope"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspRegAddressGrp = cwspRegAddressGrp.setStatus('current')
if mibBuilder.loadTexts: cwspRegAddressGrp.setDescription('A collection of objects providing information about registed ATM address.')
cwspRoutingGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 15)).setObjects(("CISCO-WAN-SVC-MIB", "ciscoWANPnniLinkStatus"), ("CISCO-WAN-SVC-MIB", "ciscoWANPnniPglStatus"), ("CISCO-WAN-SVC-MIB", "ciscoWANPnniReachability"), ("CISCO-WAN-SVC-MIB", "ciscoWANPnniRemoteNodeId"), ("CISCO-WAN-SVC-MIB", "ciscoWANPnniPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspRoutingGrp = cwspRoutingGrp.setStatus('current')
if mibBuilder.loadTexts: cwspRoutingGrp.setDescription('A collection of objects providing information about PNNI topology.')
cwspConnTraceGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 16)).setObjects(("CISCO-WAN-SVC-MIB", "cwspConnTraceAvail"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceNextIndex"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceifIndex"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceSrcVpi"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceSrcVci"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceType"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceCallRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceLeafRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceDestVpi"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceDestVci"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceDestCallRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceResultStatus"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceQueryStatus"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceNodeId"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressPortId"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressVpi"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressVci"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressCallRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressPhyPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspConnTraceGrp = cwspConnTraceGrp.setStatus('deprecated')
if mibBuilder.loadTexts: cwspConnTraceGrp.setDescription('A collection of objects providing trace information about SVC/PNNI connnection.')
cwspOperationGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 17)).setObjects(("CISCO-WAN-SVC-MIB", "cwspOperIlmiEnable"), ("CISCO-WAN-SVC-MIB", "cwspOperIfcType"), ("CISCO-WAN-SVC-MIB", "cwspOperIfcSide"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxVPCs"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxVCCs"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxVpiBits"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxVciBits"), ("CISCO-WAN-SVC-MIB", "cwspOperUniType"), ("CISCO-WAN-SVC-MIB", "cwspOperUniVersion"), ("CISCO-WAN-SVC-MIB", "cwspOperDeviceType"), ("CISCO-WAN-SVC-MIB", "cwspOperIlmiVersion"), ("CISCO-WAN-SVC-MIB", "cwspOperNniSigVersion"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspOperMinSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspOperMinSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspOperMaxSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspOperMinSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspOperFailReason"), ("CISCO-WAN-SVC-MIB", "cwspOperAddrPlanSupported"), ("CISCO-WAN-SVC-MIB", "cwspIlmiSecureLink"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAttachmentPoint"), ("CISCO-WAN-SVC-MIB", "cwspIlmiLocalAttrStd"), ("CISCO-WAN-SVC-MIB", "cwspIlmiUCSMEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspOperationGrp = cwspOperationGrp.setStatus('current')
if mibBuilder.loadTexts: cwspOperationGrp.setDescription('A collection of objects providing information about runtime negotiated values between platform, PNNI controller and peer on an interface.')
cwspSpvcGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 18)).setObjects(("CISCO-WAN-SVC-MIB", "ciscoWANSpvcFailReason"), ("CISCO-WAN-SVC-MIB", "cwspSpvcNodePrefix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspSpvcGrp = cwspSpvcGrp.setStatus('current')
if mibBuilder.loadTexts: cwspSpvcGrp.setDescription('A collection of objects providing spvc related information in pnni controller.')
cwspConnTraceGrp2 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 19)).setObjects(("CISCO-WAN-SVC-MIB", "cwspConnTraceAvail"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceNextIndex"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceifIndex"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceSrcVpi"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceSrcVci"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceType"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceCallRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceLeafRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceDestVpi"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceDestVci"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceDestCallRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceResultStatus"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceQueryStatus"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceNodeId"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressPortId"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressVpi"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressVci"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressCallRef"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceEgressPhyPortId"), ("CISCO-WAN-SVC-MIB", "cwspConnTraceLastNode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspConnTraceGrp2 = cwspConnTraceGrp2.setStatus('current')
if mibBuilder.loadTexts: cwspConnTraceGrp2.setDescription('A collection of objects providing trace information about SVC/PNNI connnection.')
cwspConfigGrp2 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 20)).setObjects(("CISCO-WAN-SVC-MIB", "cwspAdminStatus"), ("CISCO-WAN-SVC-MIB", "cwspOperStatus"), ("CISCO-WAN-SVC-MIB", "cwspSvcBlocked"), ("CISCO-WAN-SVC-MIB", "cwspSpvcBlocked"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAddrRegEnable"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAutoConfEnable"), ("CISCO-WAN-SVC-MIB", "cwspIlmiServRegEnable"), ("CISCO-WAN-SVC-MIB", "cwspPhyIdentifier"), ("CISCO-WAN-SVC-MIB", "cwspSignallingVpi"), ("CISCO-WAN-SVC-MIB", "cwspSignallingVci"), ("CISCO-WAN-SVC-MIB", "cwspRoutingVpi"), ("CISCO-WAN-SVC-MIB", "cwspRoutingVci"), ("CISCO-WAN-SVC-MIB", "cwspMaxVpiBits"), ("CISCO-WAN-SVC-MIB", "cwspMaxVciBits"), ("CISCO-WAN-SVC-MIB", "cwspUniVersion"), ("CISCO-WAN-SVC-MIB", "cwspNniVersion"), ("CISCO-WAN-SVC-MIB", "cwspUniType"), ("CISCO-WAN-SVC-MIB", "cwspSide"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2pCalls"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2mpRoots"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2mpLeafs"), ("CISCO-WAN-SVC-MIB", "cwspMinSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspMinSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspMinSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspEnhancedIisp"), ("CISCO-WAN-SVC-MIB", "cwspConfigTableRowStatus"), ("CISCO-WAN-SVC-MIB", "cwspAddrPlanSupported"), ("CISCO-WAN-SVC-MIB", "cwspIlmiSecureLink"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAttachmentPoint"), ("CISCO-WAN-SVC-MIB", "cwspIlmiLocalAttrStd"), ("CISCO-WAN-SVC-MIB", "cwspIlmiUCSMEnable"), ("CISCO-WAN-SVC-MIB", "cwspRoutingPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspConfigGrp2 = cwspConfigGrp2.setStatus('deprecated')
if mibBuilder.loadTexts: cwspConfigGrp2.setDescription('A collection of objects providing information about the controller interface operation and associated parameters.')
cwspConfigGrp3 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 140, 3, 2, 21)).setObjects(("CISCO-WAN-SVC-MIB", "cwspAdminStatus"), ("CISCO-WAN-SVC-MIB", "cwspOperStatus"), ("CISCO-WAN-SVC-MIB", "cwspSvcBlocked"), ("CISCO-WAN-SVC-MIB", "cwspSpvcBlocked"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAddrRegEnable"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAutoConfEnable"), ("CISCO-WAN-SVC-MIB", "cwspIlmiServRegEnable"), ("CISCO-WAN-SVC-MIB", "cwspPhyIdentifier"), ("CISCO-WAN-SVC-MIB", "cwspSignallingVpi"), ("CISCO-WAN-SVC-MIB", "cwspSignallingVci"), ("CISCO-WAN-SVC-MIB", "cwspRoutingVpi"), ("CISCO-WAN-SVC-MIB", "cwspRoutingVci"), ("CISCO-WAN-SVC-MIB", "cwspMaxVpiBits"), ("CISCO-WAN-SVC-MIB", "cwspMaxVciBits"), ("CISCO-WAN-SVC-MIB", "cwspUniVersion"), ("CISCO-WAN-SVC-MIB", "cwspNniVersion"), ("CISCO-WAN-SVC-MIB", "cwspUniType"), ("CISCO-WAN-SVC-MIB", "cwspSide"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2pCalls"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2mpRoots"), ("CISCO-WAN-SVC-MIB", "cwspMaxP2mpLeafs"), ("CISCO-WAN-SVC-MIB", "cwspMinSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvccVpi"), ("CISCO-WAN-SVC-MIB", "cwspMinSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvccVci"), ("CISCO-WAN-SVC-MIB", "cwspMinSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspMaxSvpcVpi"), ("CISCO-WAN-SVC-MIB", "cwspEnhancedIisp"), ("CISCO-WAN-SVC-MIB", "cwspConfigTableRowStatus"), ("CISCO-WAN-SVC-MIB", "cwspAddrPlanSupported"), ("CISCO-WAN-SVC-MIB", "cwspIlmiSecureLink"), ("CISCO-WAN-SVC-MIB", "cwspIlmiAttachmentPoint"), ("CISCO-WAN-SVC-MIB", "cwspIlmiLocalAttrStd"), ("CISCO-WAN-SVC-MIB", "cwspIlmiUCSMEnable"), ("CISCO-WAN-SVC-MIB", "cwspRoutingPriority"), ("CISCO-WAN-SVC-MIB", "cwspSpvcAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwspConfigGrp3 = cwspConfigGrp3.setStatus('current')
if mibBuilder.loadTexts: cwspConfigGrp3.setDescription('A collection of objects providing information about the controller interface operation and associated parameters.')
mibBuilder.exportSymbols("CISCO-WAN-SVC-MIB", cwspSigCfgT310=cwspSigCfgT310, cwspCallBwdMbs=cwspCallBwdMbs, cwspSscopUstatRcv=cwspSscopUstatRcv, cwspAbrCall=cwspAbrCall, cwspSscopMdXmt=cwspSscopMdXmt, cwspMaxBwAbr=cwspMaxBwAbr, cwspAddressGrp=cwspAddressGrp, cwspPnniControllerPhySlot=cwspPnniControllerPhySlot, cwspLoadCdvCbr=cwspLoadCdvCbr, cwspLoadClr01RtVbr=cwspLoadClr01RtVbr, cwspCallMaxFwdClr=cwspCallMaxFwdClr, cwspLoadAvlVcCbr=cwspLoadAvlVcCbr, cwspLoadMinGurCrNrtVbr=cwspLoadMinGurCrNrtVbr, cwspCallStats=cwspCallStats, cwspDefaultMbsNrtVbr=cwspDefaultMbsNrtVbr, cwspConnTraceLastNode=cwspConnTraceLastNode, cwspMinSvccVci=cwspMinSvccVci, cwspOperIfcSide=cwspOperIfcSide, cwspSigCfgT301=cwspSigCfgT301, cwspCallCalledAddress=cwspCallCalledAddress, cwspLoadCtdRtVbr=cwspLoadCtdRtVbr, cwspCallGrp=cwspCallGrp, cwspAbrCallVci=cwspAbrCallVci, cwspAddrPlanSupported=cwspAddrPlanSupported, cwspSscopIgnoredPduRcv=cwspSscopIgnoredPduRcv, cwspAbrCallFwdRif=cwspAbrCallFwdRif, cwspMaxVcBwCbr=cwspMaxVcBwCbr, cwspOutFilterFailures=cwspOutFilterFailures, cwspOperUniType=cwspOperUniType, cwspSscopStatus=cwspSscopStatus, cwspConnTraceDestCallRef=cwspConnTraceDestCallRef, cwspCallOtherIntfVpi=cwspCallOtherIntfVpi, cwspInCallFailures=cwspInCallFailures, cwspAbrCallBwdTrm=cwspAbrCallBwdTrm, cwspNniVersion=cwspNniVersion, cwspConnTraceEgressVpi=cwspConnTraceEgressVpi, cwspSpvcAddress=cwspSpvcAddress, cwspSscopEndakXmt=cwspSscopEndakXmt, cwspConnTraceifIndex=cwspConnTraceifIndex, cwspRegAddressTable=cwspRegAddressTable, cwspCallLeafReference=cwspCallLeafReference, cwspAddPtyRejRcv=cwspAddPtyRejRcv, cwspSscopUstatXmt=cwspSscopUstatXmt, cwspConfig=cwspConfig, cwspSscopSdRcv=cwspSscopSdRcv, cwspMaxP2mpRoots=cwspMaxP2mpRoots, cwspOutCrankbacks=cwspOutCrankbacks, cwspMinVcAbr=cwspMinVcAbr, cwspMaxVcUbr=cwspMaxVcUbr, cwspCallOtherIntfIndex=cwspCallOtherIntfIndex, cwspMinVcRtVbr=cwspMinVcRtVbr, cwspLastDiagnostic=cwspLastDiagnostic, cwspMaxVcCbr=cwspMaxVcCbr, cwspCallBwdFrameDiscard=cwspCallBwdFrameDiscard, cwspSscopSdpXmt=cwspSscopSdpXmt, cwspCallCastType=cwspCallCastType, cwspAbrCallClgAddress=cwspAbrCallClgAddress, cwspCallBwdPcr=cwspCallBwdPcr, cwspLoadCdvUbr=cwspLoadCdvUbr, cwspOperIlmiEnable=cwspOperIlmiEnable, cwspAbrCallEntry=cwspAbrCallEntry, cwspIlmiAutoConfEnable=cwspIlmiAutoConfEnable, cwspAddressEntry=cwspAddressEntry, cwspLoadAvlBwAbr=cwspLoadAvlBwAbr, cwspUniVersion=cwspUniVersion, cwspCallFwdPcr=cwspCallFwdPcr, cwspSigCounterReset=cwspSigCounterReset, ciscoWANPnniRouting=ciscoWANPnniRouting, cwspUtilFactorUbr=cwspUtilFactorUbr, cwspCallTable=cwspCallTable, cwspSscopErakXmt=cwspSscopErakXmt, cwspCacConfigGrp=cwspCacConfigGrp, cwspConnTraceNodeId=cwspConnTraceNodeId, cwspLoadAvlBwUbr=cwspLoadAvlBwUbr, cwspConnTraceIndex=cwspConnTraceIndex, cwspAbrCallMaxBwdClr=cwspAbrCallMaxBwdClr, cwspLoadClr01Ubr=cwspLoadClr01Ubr, cwspCallCallingAddress=cwspCallCallingAddress, cwspAddressRowStatus=cwspAddressRowStatus, cwspReleaseRcv=cwspReleaseRcv, cwspPnniStndbyControllerStatus=cwspPnniStndbyControllerStatus, cwspUtilFactorNrtVbr=cwspUtilFactorNrtVbr, cwspDefaultCdvtNrtVbr=cwspDefaultCdvtNrtVbr, cwspLoadMinGurCrAbr=cwspLoadMinGurCrAbr, cwspConnTraceSrcVpi=cwspConnTraceSrcVpi, cwspOperMinSvpcVpi=cwspOperMinSvpcVpi, cwspAbrCallCastType=cwspAbrCallCastType, cwspStatusRcv=cwspStatusRcv, ciscoWANSvcPort=ciscoWANSvcPort, cwspInCrankbacks=cwspInCrankbacks, cwspConnTraceEgressPhyPortId=cwspConnTraceEgressPhyPortId, cwspLoadTable=cwspLoadTable, cwspConnectRcv=cwspConnectRcv, cwspDropPtyXmt=cwspDropPtyXmt, cwspSigCfgT316=cwspSigCfgT316, cwspPrefixRowStatus=cwspPrefixRowStatus, cwspLoadGrp=cwspLoadGrp, cwspLoadClr01Cbr=cwspLoadClr01Cbr, cwspMinSvccVpi=cwspMinSvccVpi, cwspSscopUdRcv=cwspSscopUdRcv, cwspSscopStatsTable=cwspSscopStatsTable, cwspEnhancedIisp=cwspEnhancedIisp, cwspAbrCallFwdNrm=cwspAbrCallFwdNrm, cwspAbrCallFwdIcr=cwspAbrCallFwdIcr, cwspConnTraceCntlEntry=cwspConnTraceCntlEntry, cwspDefaultCdvtCbr=cwspDefaultCdvtCbr, cwspConnectAckXmt=cwspConnectAckXmt, cwspCallOtherIntfCallRef=cwspCallOtherIntfCallRef, cwspConnTraceResultStatus=cwspConnTraceResultStatus, cwspSscopBgakXmt=cwspSscopBgakXmt, cwspLoadCtdCbr=cwspLoadCtdCbr, cwspRestartAckRcv=cwspRestartAckRcv, cwspCallBwdConformance=cwspCallBwdConformance, cwspLoadMaxBwCbr=cwspLoadMaxBwCbr, cwspPrefixGrp=cwspPrefixGrp, cwspLoadClr0Ubr=cwspLoadClr0Ubr, cwspSscopPollXmt=cwspSscopPollXmt, cwspMinVcCbr=cwspMinVcCbr, cwspLoadAvlBwCbr=cwspLoadAvlBwCbr, cwspCallFwdCdvt=cwspCallFwdCdvt, cwspAbrCallFwdFrameDiscard=cwspAbrCallFwdFrameDiscard, cwspConfigEntry=cwspConfigEntry, cwspPrefixTable=cwspPrefixTable, cwspLoadMinGurCrRtVbr=cwspLoadMinGurCrRtVbr, cwspAbrCallFrtt=cwspAbrCallFrtt, cwspSigStatsGrp=cwspSigStatsGrp, cwspLoad=cwspLoad, ciscoWANSvcMIBCompliance3=ciscoWANSvcMIBCompliance3, cwspSscopRsakRcv=cwspSscopRsakRcv, cwspLoadCtdAbr=cwspLoadCtdAbr, cwspIlmiServRegEnable=cwspIlmiServRegEnable, cwspOperationEntry=cwspOperationEntry, cwspCallCallingSubAddr=cwspCallCallingSubAddr, cwspCallOtherIntfVci=cwspCallOtherIntfVci, cwspLoadAvlBwRtVbr=cwspLoadAvlBwRtVbr, cwspAddrProto=cwspAddrProto, cwspUtilFactorRtVbr=cwspUtilFactorRtVbr, cwspSscopBgnRcv=cwspSscopBgnRcv, cwspAddressTable=cwspAddressTable, ciscoWANSvcMIB=ciscoWANSvcMIB, cwspConnTraceGrp2=cwspConnTraceGrp2, cwspCallVpi=cwspCallVpi, cwspCallVci=cwspCallVci, cwspSigCfgT398=cwspSigCfgT398, cwspIlmiAddrRegEnable=cwspIlmiAddrRegEnable, cwspAbrCallMaxBwdCdv=cwspAbrCallMaxBwdCdv, cwspSscopConfig=cwspSscopConfig, cwspLoadCdvNrtVbr=cwspLoadCdvNrtVbr, cwspOutCallFailures=cwspOutCallFailures, cwspOperMaxSvccVci=cwspOperMaxSvccVci, cwspAbrCallOtherIntfVpi=cwspAbrCallOtherIntfVpi, cwspSscopMaxCC=cwspSscopMaxCC, cwspSscopMaxPD=cwspSscopMaxPD, cwspSscopMaxSTAT=cwspSscopMaxSTAT, cwspLoadCtdNrtVbr=cwspLoadCtdNrtVbr, cwspLoadBwTotal=cwspLoadBwTotal, cwspAbrCallCallRef=cwspAbrCallCallRef, cwspSscopTable=cwspSscopTable, cwspMinBwRtVbr=cwspMinBwRtVbr, cwspRoutingGrp=cwspRoutingGrp, cwspSigConfigEntry=cwspSigConfigEntry, cwspNotifyRcv=cwspNotifyRcv, cwspSscopMdRcv=cwspSscopMdRcv, cwspAbrCallFwdTrm=cwspAbrCallFwdTrm, cwspSscopTmrKeepAlive=cwspSscopTmrKeepAlive, cwspUniType=cwspUniType, cwsInfoGrp=cwsInfoGrp, cwspMinVcUbr=cwspMinVcUbr, cwspAbrCallStartTime=cwspAbrCallStartTime, cwspInResrcFailures=cwspInResrcFailures, cwspCallFwdConformance=cwspCallFwdConformance, ciscoWANSpvc=ciscoWANSpvc, cwspSigConfig=cwspSigConfig, cwspCallCalledSubAddr=cwspCallCalledSubAddr, cwspConnTraceEgressCallRef=cwspConnTraceEgressCallRef, cwspCallBwdCdvt=cwspCallBwdCdvt, cwspAlertRcv=cwspAlertRcv, cwspSpvcGrp=cwspSpvcGrp, cwspAbrCallGrp=cwspAbrCallGrp, cwspMaxVcRtVbr=cwspMaxVcRtVbr, cwspIlmiAttachmentPoint=cwspIlmiAttachmentPoint, cwspOutResrcFailures=cwspOutResrcFailures, cwspLoadMaxBwNrtVbr=cwspLoadMaxBwNrtVbr, cwspSetupXmt=cwspSetupXmt, cwspMaxVcBwNrtVbr=cwspMaxVcBwNrtVbr, cwspCallServiceCategory=cwspCallServiceCategory, cwspConnTraceDataIndex=cwspConnTraceDataIndex, cwspMaxBwNrtVbr=cwspMaxBwNrtVbr, cwspAbrCallBwdFrameDiscard=cwspAbrCallBwdFrameDiscard, cwspAbrCallOtherIntfVci=cwspAbrCallOtherIntfVci, cwspSigCfgT303=cwspSigCfgT303, cwspAbrCallBwdRif=cwspAbrCallBwdRif, cwspCallMaxBwdCdv=cwspCallMaxBwdCdv, cwspConnTraceNextIndex=cwspConnTraceNextIndex, cwspCallMaxBwdClr=cwspCallMaxBwdClr, cwspMaxVcNrtVbr=cwspMaxVcNrtVbr, cwspCallType=cwspCallType, cwspLoadAvlVcUbr=cwspLoadAvlVcUbr, cwspAddrType=cwspAddrType, cwspOperMaxVpiBits=cwspOperMaxVpiBits, cwspAddPtyRcv=cwspAddPtyRcv, cwspProgressRcv=cwspProgressRcv, cwspSpvcBlocked=cwspSpvcBlocked, cwspSigStatsEntry=cwspSigStatsEntry, cwspConnectAckRcv=cwspConnectAckRcv, ciscoWANSvcMIBObjects=ciscoWANSvcMIBObjects, cwspSscopRsakXmt=cwspSscopRsakXmt, cwspSigConfigGrp=cwspSigConfigGrp, cwspIncorrectMsgRcv=cwspIncorrectMsgRcv, cwspCountReset=cwspCountReset, cwspLoadVcAvail=cwspLoadVcAvail, cwspLoadAvlVcAbr=cwspLoadAvlVcAbr, cwspSscopStatsEntry=cwspSscopStatsEntry, cwspCallStatsGrp=cwspCallStatsGrp, cwspRoutingVpi=cwspRoutingVpi, cwspMaxSvccVci=cwspMaxSvccVci, cwspOperIlmiVersion=cwspOperIlmiVersion, cwspLoadClr01NrtVbr=cwspLoadClr01NrtVbr, cwspSscopUdXmt=cwspSscopUdXmt, cwspInCallAttempts=cwspInCallAttempts, cwspSigCfgT308=cwspSigCfgT308, cwspOperDeviceType=cwspOperDeviceType, cwspCall=cwspCall, cwspRoutingVci=cwspRoutingVci, cwspSscopSdXmt=cwspSscopSdXmt, cwspSscopBgrejRcv=cwspSscopBgrejRcv, cwspLastCause=cwspLastCause, cwspOperMaxSvccVpi=cwspOperMaxSvccVpi, cwspLoadCdvRtVbr=cwspLoadCdvRtVbr, cwspAbrCallBwdPcr=cwspAbrCallBwdPcr, cwspAbrCallFwdPcr=cwspAbrCallFwdPcr, cwspMaxBwUbr=cwspMaxBwUbr, cwspAddress=cwspAddress, cwspAbrCallVpi=cwspAbrCallVpi, cwspAbrCallFwdCdf=cwspAbrCallFwdCdf, cwspAbrCallBwdMcr=cwspAbrCallBwdMcr, cwspConnTraceLeafRef=cwspConnTraceLeafRef, cwspSigConfigTable=cwspSigConfigTable, cwspCallEntry=cwspCallEntry, cwspConnTraceCntlTable=cwspConnTraceCntlTable, cwspInCallEstabs=cwspInCallEstabs, cwspMaxVcBwRtVbr=cwspMaxVcBwRtVbr, cwspCallCallRef=cwspCallCallRef, CwspSpvcState=CwspSpvcState, cwspLoadMaxBwRtVbr=cwspLoadMaxBwRtVbr, cwspSigCfgT397=cwspSigCfgT397, cwspOutTimerFailures=cwspOutTimerFailures, cwspSignallingVpi=cwspSignallingVpi, cwspOperMaxVCCs=cwspOperMaxVCCs, cwspNetPrefix=cwspNetPrefix, cwspOperMaxVPCs=cwspOperMaxVPCs, ciscoWANSvcMIBCompliance2=ciscoWANSvcMIBCompliance2, cwspAtmAddress=cwspAtmAddress, cwspCallStatsTable=cwspCallStatsTable)
mibBuilder.exportSymbols("CISCO-WAN-SVC-MIB", cwspLoadCdvAbr=cwspLoadCdvAbr, cwspMaxP2mpLeafs=cwspMaxP2mpLeafs, ciscoWANPnniReachability=ciscoWANPnniReachability, cwspOperation=cwspOperation, cwspOperFailReason=cwspOperFailReason, cwspProgressXmt=cwspProgressXmt, cwspConnTraceEgressPortId=cwspConnTraceEgressPortId, cwspConfigTableRowStatus=cwspConfigTableRowStatus, cwspAbrCallBearerClass=cwspAbrCallBearerClass, cwspAbrCallBwdCdf=cwspAbrCallBwdCdf, cwspRestartAckXmt=cwspRestartAckXmt, cwspOutCallAttempts=cwspOutCallAttempts, cwspOperNniSigVersion=cwspOperNniSigVersion, cwspLoadClr0Abr=cwspLoadClr0Abr, cwspInRouteFailures=cwspInRouteFailures, cwspConnTraceGrp=cwspConnTraceGrp, CwspControllerState=CwspControllerState, cwspRegAddressOrgSscope=cwspRegAddressOrgSscope, cwspSscopCounterReset=cwspSscopCounterReset, cwspLoadEntry=cwspLoadEntry, ciscoWANSvcMIBCompliance=ciscoWANSvcMIBCompliance, cwspAbrCallFwdTbe=cwspAbrCallFwdTbe, cwspRestartXmt=cwspRestartXmt, cwspOperUniVersion=cwspOperUniVersion, cwspAbrCallMaxFwdCdv=cwspAbrCallMaxFwdCdv, cwspSigCfgT322=cwspSigCfgT322, cwspCallStatsEntry=cwspCallStatsEntry, cwspReleaseXmt=cwspReleaseXmt, cwspRegAddressEntry=cwspRegAddressEntry, cwspConfigTable=cwspConfigTable, cwspDefaultCdvtAbr=cwspDefaultCdvtAbr, cwspAbrCallFwdMcr=cwspAbrCallFwdMcr, cwspAbrCallBwdNrm=cwspAbrCallBwdNrm, cwspCallFwdFrameDiscard=cwspCallFwdFrameDiscard, PYSNMP_MODULE_ID=ciscoWANSvcMIB, ciscoWANPnniLinkStatus=ciscoWANPnniLinkStatus, cwspSscopSdpRcv=cwspSscopSdpRcv, cwspConnTraceDestVpi=cwspConnTraceDestVpi, cwspSigCfgT399=cwspSigCfgT399, cwspSpvcNodePrefix=cwspSpvcNodePrefix, cwspSigCfgT317=cwspSigCfgT317, cwspAddPtyAckRcv=cwspAddPtyAckRcv, cwspLoadClr0Cbr=cwspLoadClr0Cbr, cwspConnectXmt=cwspConnectXmt, cwspAbrCallType=cwspAbrCallType, cwspAddrScope=cwspAddrScope, cwspAbrCallMaxFwdClr=cwspAbrCallMaxFwdClr, cwspAlertXmt=cwspAlertXmt, cwsControllerStatus=cwsControllerStatus, cwspSscopPollRcv=cwspSscopPollRcv, cwspOperMaxVciBits=cwspOperMaxVciBits, cwsSwRevision=cwsSwRevision, cwspSscopStatsGrp=cwspSscopStatsGrp, cwspSscopEndXmt=cwspSscopEndXmt, cwspSignallingVci=cwspSignallingVci, cwspSscopBgakRcv=cwspSscopBgakRcv, cwspAbrCallClipSusceptibility=cwspAbrCallClipSusceptibility, cwspMaxSvpcVpi=cwspMaxSvpcVpi, cwspSide=cwspSide, cwspIlmiLocalAttrStd=cwspIlmiLocalAttrStd, cwspSscopRsRcv=cwspSscopRsRcv, cwspLoadAvlVcRtVbr=cwspLoadAvlVcRtVbr, cwspMinBwNrtVbr=cwspMinBwNrtVbr, cwspOperationTable=cwspOperationTable, cwspStatusEnqRcv=cwspStatusEnqRcv, cwspAbrCallFwdAdtf=cwspAbrCallFwdAdtf, cwspCallProcRcv=cwspCallProcRcv, cwspInTimerFailures=cwspInTimerFailures, cwspMaxVcAbr=cwspMaxVcAbr, cwspAbrCallTable=cwspAbrCallTable, cwspPrefix=cwspPrefix, cwspLoadCtdUbr=cwspLoadCtdUbr, cwspUtilFactorAbr=cwspUtilFactorAbr, cwspIlmiSecureLink=cwspIlmiSecureLink, cwspAbrCallBwdTbe=cwspAbrCallBwdTbe, cwspAbrCallBwdIcr=cwspAbrCallBwdIcr, cwspAbrCallCldAddress=cwspAbrCallCldAddress, cwspRegAddressGrp=cwspRegAddressGrp, cwspOperationGrp=cwspOperationGrp, cwspRegAtmAddress=cwspRegAtmAddress, cwspLoadClr0NrtVbr=cwspLoadClr0NrtVbr, cwspSigStats=cwspSigStats, cwspLoadAvlVcNrtVbr=cwspLoadAvlVcNrtVbr, cwspSigStatsTable=cwspSigStatsTable, cwspSscopStatRcv=cwspSscopStatRcv, cwspMaxBwCbr=cwspMaxBwCbr, cwspConnTraceCallRef=cwspConnTraceCallRef, cwspCallMaxFwdCdv=cwspCallMaxFwdCdv, cwspRestartRcv=cwspRestartRcv, cwspAdminStatus=cwspAdminStatus, cwspConnTraceEntry=cwspConnTraceEntry, cwspMinVcNrtVbr=cwspMinVcNrtVbr, ciscoWANSvcMIBCompliances=ciscoWANSvcMIBCompliances, cwspRegAddress=cwspRegAddress, cwspLoadMaxBwAbr=cwspLoadMaxBwAbr, cwspOperMinSvccVpi=cwspOperMinSvccVpi, cwspConfigGrp=cwspConfigGrp, cwspCacConfig=cwspCacConfig, cwspCacConfigTable=cwspCacConfigTable, cwspOperIfcType=cwspOperIfcType, cwspAddrRedistribute=cwspAddrRedistribute, cwspMinBwAbr=cwspMinBwAbr, cwspOutRouteFailures=cwspOutRouteFailures, cwspSscopErakRcv=cwspSscopErakRcv, cwspAddPtyRejXmt=cwspAddPtyRejXmt, cwspAbrCallOtherIntfCallRef=cwspAbrCallOtherIntfCallRef, cwspAddrPlan=cwspAddrPlan, cwspOperMinSvccVci=cwspOperMinSvccVci, cwspCallProcXmt=cwspCallProcXmt, cwspRoutingPriority=cwspRoutingPriority, cwspCallClipSusceptibility=cwspCallClipSusceptibility, cwspSscopBgnXmt=cwspSscopBgnXmt, cwspConnTraceAvail=cwspConnTraceAvail, cwspMaxVcBwUbr=cwspMaxVcBwUbr, cwspSscopConfigGrp=cwspSscopConfigGrp, cwspAbrCallCldSubAddr=cwspAbrCallCldSubAddr, cwspSscopTmrCC=cwspSscopTmrCC, cwspConfigGrp2=cwspConfigGrp2, cwspMaxVciBits=cwspMaxVciBits, cwspNotifyXmt=cwspNotifyXmt, cwspPnniControllerStatus=cwspPnniControllerStatus, cwspLoadMinGurCrUbr=cwspLoadMinGurCrUbr, cwspStatusXmt=cwspStatusXmt, ciscoWANPnniPortId=ciscoWANPnniPortId, cwspSscopTmtIdle=cwspSscopTmtIdle, cwspAddPtyXmt=cwspAddPtyXmt, cwspUtilFactorCbr=cwspUtilFactorCbr, cwspAbrCallFwdConformance=cwspAbrCallFwdConformance, cwspMaxBwRtVbr=cwspMaxBwRtVbr, cwspMinBwCbr=cwspMinBwCbr, cwspOperMaxSvpcVpi=cwspOperMaxSvpcVpi, cwspConfigGrp3=cwspConfigGrp3, cwspMaxVpiBits=cwspMaxVpiBits, cwspCallStartTime=cwspCallStartTime, cwspSscopStatXmt=cwspSscopStatXmt, cwspMaxSvccVpi=cwspMaxSvccVpi, cwspSscopEndRcv=cwspSscopEndRcv, cwspLoadClr01Abr=cwspLoadClr01Abr, cwspCallBwdScr=cwspCallBwdScr, cwspInFilterFailures=cwspInFilterFailures, cwspReleaseComplRcv=cwspReleaseComplRcv, cwspStatusEnqXmt=cwspStatusEnqXmt, ciscoWANSvcInfo=ciscoWANSvcInfo, cwspLoadMaxBwUbr=cwspLoadMaxBwUbr, cwspCallBearerClass=cwspCallBearerClass, ciscoWANSvcMIBGroups=ciscoWANSvcMIBGroups, cwspOperStatus=cwspOperStatus, cwspMaxVcBwAbr=cwspMaxVcBwAbr, cwspAbrCallFwdRdf=cwspAbrCallFwdRdf, ciscoWANPnniPglStatus=ciscoWANPnniPglStatus, cwspAbrCallServiceCategory=cwspAbrCallServiceCategory, cwspMinBwUbr=cwspMinBwUbr, ciscoWANSvcMIBConformance=ciscoWANSvcMIBConformance, cwspAbrCallBwdAdtf=cwspAbrCallBwdAdtf, cwspSscopStats=cwspSscopStats, cwspTimerExpiries=cwspTimerExpiries, cwspSscopEndakRcv=cwspSscopEndakRcv, cwspLoadMinGurCrCbr=cwspLoadMinGurCrCbr, cwspDefaultCdvtUbr=cwspDefaultCdvtUbr, cwspAbrCallOtherIntfIndex=cwspAbrCallOtherIntfIndex, cwspAbrCallClgSubAddr=cwspAbrCallClgSubAddr, cwspDefaultMbsRtVbr=cwspDefaultMbsRtVbr, cwspConnTraceType=cwspConnTraceType, cwspMinSvpcVpi=cwspMinSvpcVpi, cwspConnTraceEgressVci=cwspConnTraceEgressVci, cwspPrefixEntry=cwspPrefixEntry, cwspConnTrace=cwspConnTrace, cwspPhyIdentifier=cwspPhyIdentifier, cwspOutCallEstabs=cwspOutCallEstabs, cwspSscopEntry=cwspSscopEntry, cwspSscopTmrNoResp=cwspSscopTmrNoResp, cwspCallFwdScr=cwspCallFwdScr, cwspSetupRcv=cwspSetupRcv, cwspCallFwdMbs=cwspCallFwdMbs, cwspReleaseComplXmt=cwspReleaseComplXmt, cwspAbrCallMaxCtd=cwspAbrCallMaxCtd, cwspDropPtyRcv=cwspDropPtyRcv, cwspAddrLen=cwspAddrLen, cwspSscopBgrejXmt=cwspSscopBgrejXmt, ciscoWANPnniRemoteNodeId=ciscoWANPnniRemoteNodeId, cwspLoadAvlBwNrtVbr=cwspLoadAvlBwNrtVbr, cwspConnTraceDestVci=cwspConnTraceDestVci, cwspAbrCallBwdRdf=cwspAbrCallBwdRdf, ciscoWANSpvcFailReason=ciscoWANSpvcFailReason, cwspMaxP2pCalls=cwspMaxP2pCalls, cwspLoadClr0RtVbr=cwspLoadClr0RtVbr, cwspCacConfigEntry=cwspCacConfigEntry, cwspCallMaxCtd=cwspCallMaxCtd, cwspDefaultCdvtRtVbr=cwspDefaultCdvtRtVbr, cwspSscopRsXmt=cwspSscopRsXmt, cwspConnTraceTable=cwspConnTraceTable, cwspIlmiUCSMEnable=cwspIlmiUCSMEnable, cwspLoadBwAvail=cwspLoadBwAvail, cwspConnTraceQueryStatus=cwspConnTraceQueryStatus, cwspAddPtyAckXmt=cwspAddPtyAckXmt, cwspSvcBlocked=cwspSvcBlocked, cwspSscopTmrPoll=cwspSscopTmrPoll, cwspOperAddrPlanSupported=cwspOperAddrPlanSupported, cwspConnTraceSrcVci=cwspConnTraceSrcVci)
