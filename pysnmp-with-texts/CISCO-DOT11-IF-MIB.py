#
# PySNMP MIB module CISCO-DOT11-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
dot11AuthenticationAlgorithmsIndex, dot11SupportedDataRatesRxIndex = mibBuilder.importSymbols("IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex", "dot11SupportedDataRatesRxIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Bits, TimeTicks, iso, Integer32, IpAddress, ObjectIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Bits", "TimeTicks", "iso", "Integer32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter64")
TruthValue, MacAddress, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "RowStatus", "DisplayString", "TextualConvention")
ciscoDot11IfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 272))
ciscoDot11IfMIB.setRevisions(('2006-12-20 00:00', '2005-03-10 00:00', '2004-06-06 00:00', '2004-05-06 00:00', '2004-04-17 00:00', '2004-02-27 00:00', '2003-11-17 00:00', '2003-07-13 00:00', '2002-12-29 00:00', '2002-08-01 00:00', '2002-07-04 00:00', '2002-05-10 00:00', '2002-04-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDot11IfMIB.setRevisionsDescriptions(('- Added following objects in cd11IfStationConfigTable cd11IfMobileStationListIgnore cd11IfMobileStationScanChannel. - Added cd11Ifdot11MobileStationScanGroup OBJECT-GROUP - Added ciscoDot11IfComplianceRev4 MODULE-COMPLIANCE.', 'Updated the cd11IfCurrentCarrierSet to define new carrier types.', 'Modified the cd11IfPhyNativePowerUseStandard to read-write and updated cd11IfNativeTxPowerSupportTable and cd11IfRfNativePowerTable to add the object cd11IfRadioModulationClass as indices.', 'Added cd11IfStationSwitchOverNotif and cd11IfRogueApDetectedNotif notifications', 'Added cd11IfVlanPsPacketForwardEnable and cd11IfPsPacketForwardEnable for PSPF support. Added cd11IfMultipleBssidEnable for MBSSID support. Modified Cd11IfVlanEncryptKeyEntry to add objects for WEP encryption support. Added cd11IfRogueApDetectedTable for rogue AP detection information. Added cd11IfFrequencyBandTable, cd11IfRfNativePowerTable, and cd11IfNativeTxPowerSupportTable to support per radio frequency band power configuration. Added cd11IfDataRatesSensitivityTable for receive sensitivity specifications of IEEE 802.11 radio.', 'Updated the cd11IfStationRole object description. Modified CDot11IfCipherType textual convention to match the latest design. Updated cd11IfClientTxPowerTable power levels to allow negative dBm power. Modified the MODULE-COMPLIANCE for this MIB.', 'Added cd11IfWorldModeCountry, cd11IfWorldMode, and cd11IfMobileStationScanParent to cd11IfStationConfigEntry. Added cd11IfPhyConcatenation to cd11IfPhyOperationEntry. Added cd11IfVlanEncryptKeyTransmit to Cd11IfVlanEncryptKeyEntry. Added cd11IfClientTxPowerTable, cd11IfOfdmTxPowerTable, cd11IfRadioMonitoringTable, and cd11IfVlanSecurityTable. Modified the MODULE-COMPLIANCE for this MIB.', 'Added cd11IfPhyBasicRateSet to identify if a rate in the dot11OperationalRateSet is a Basic Rate, added cd11IfPhyMacSpecification to identify the IEEE 802.11 Standard being applied to the radio, modified the cd11IfPhyDsssCurrentChannel and cd11IfChanSelectChannel ranges to support 802.11A radio, and added new device types to cd11IfStationRole. Added cd11IfAuxSsidAuthAlgEapMethod, cd11IfAuxSsidAuthAlgMacMethod, cd11IfAuthAlgEapMethod, and cd11IfAuthAlgMacAddrMethod to specify the authentication method list.', 'Added a new cd11IfVlanEncryptKeyTable to support per interface and VLAN encryption key and cd11IfDomainCapabilitySet to support the IEEE 802.11 dot11MultiDomainCapabilityTable.', 'Corrected the description of roleBridge(2) of the cd11IfStationRole object and changed the roleAP(1) to roleWgb(1).', 'Changed cd11IfAuxSsidBroadcastSsid from read-only to read-write.', "The maximum value for cd11IfAuxiliarySsidLength is changed to '4095'. The new cd11IfAuxSsidIndex replaces cd11IfAuxSsid as the cd11IfAuxSsidTable index. New enumerate values are added to cd11IfStationRole. New MAC address authentication cd11IfAuthAlgRequireMacAddr and cd11IfAuxSsidAuthAlgRequireMac objects are added to the authentication algorithm tables.", 'This is the initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDot11IfMIB.setLastUpdated('200612200000Z')
if mibBuilder.loadTexts: ciscoDot11IfMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoDot11IfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoDot11IfMIB.setDescription("This MIB module provides network management support for Cisco IEEE 802.11 Wireless LAN type device (Access Point) radio interfaces. ACRONYMS AES Advanced Encryption Standard AP Access point AID Association IDentifier for wireless stations. BSS IEEE 802.11 Basic Service Set. CCMP Code Mode/CBC Mac Protocol CEPT European Conference of Postal and Telecommunications Administrations. CRC Cyclic Redundancy Check. DSSS Direct-Sequence Spread Spectrum. EAP Extensible Authentication Protocol. ERP Extended Rate PHY FHSS Frequency-Hopping Spread Spectrum. IAPP Inter-Access-Point Protocol. ICV Integrity Check Value. ISM Industrial, Scientific, and Medical. MBSSID Multiple Broadcast SSID MIC Message Integrity Check. MMH Multi-Modal Hashing. OFDM Orthogonal Frequency Division Multiplexing. PHY Physical Layer (Layer 1 in network model). PLCP Physical Layer Convergence Procedure. PMD Physical Medium Dependent. PSPF Public Secure Packet Forwarding. RF Radio Frequency. SS Spread-spectrum. SSID Radio Service Set ID. STA IEEE 802.11 wireless station. U-NII Unlicensed National information Infrastructure VLAN Virtual LAN. WEP Wired Equivalent Privacy. WGB Work-group Bridge WPA WiFi Protected Access GLOSSARY Access point Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Association The service used to establish access point or station mapping and enable STA invocation of the distribution system services. (Wireless clients attempt to connect to access points.) Basic Rate A data rate that is mandatory for client devices to support in order for them to achieve successful association. Basic Service Set The IEEE 802.11 BSS of an AP comprises of the stations directly associating with the AP. Bridge Device that connects two or more segments and reduces traffic by analyzing the destination address, filtering the frame, and forwarding the frame to all connected segments. Bridge AP It is an AP that functions as a transparent bridge between 2 wired LAN segments. Broadcast SSID Clients can send out Broadcast SSID Probe Requests to a nearby AP, and the AP will broadcast its own SSID within its beacons to response to the clients. Clients can use this Broadcast SSID to associate and communicate with the AP. Cyclic Redundancy Check CRC is an error detect mechanism that applies to frame transmission. Direct-Sequence Spread Spectrum DSSS combines a data signal at the sending station with a higher data rate bit sequence, which many refer to as a chipping code (also known as processing gain). A high processing gain increases the signals resistance to interference. DSSS sends a specific string of bits for each data bit sent. ERP-CCK Modulation This signal modulation technique is supported in PHY implementing IEEE 802.11b/g Protocol. ERP-OFDM Modulation This signal modulation technique is supported in PHY implementing IEEE 802.11g Protocol. Extensible Authentication Protocol EAP acts as the interface between a wireless client and an authentication server, such as a RADIUS server, to which the access point communicates over the wired network. Extended Rate PHY This PHY implements the IEEE 802.11g Protocol. Frequency-Hopping Spread Spectrum In FHSS, a hopping code determines the frequencies the radio will transmit and in which order. To properly receive the signal, the receiver must be set to same hopping code and listen to the incoming signal at the right time and correct frequency. The code pattern maintains a single logical channel. IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. IEEE 802.11b High-rate wireless LAN standard for wireless data transfer at up to 11 Mbps. IEEE P802.11g Higher Speed Physical Layer (PHY) Extension to IEEE 802.11b, will boost wireless LAN speed to 54 Mbps by using OFDM (orthogonal frequency division multiplexing). The IEEE 802.11g specification is backward compatible with the widely deployed IEEE 802.11b standard. Inter-Access-Point Protocol The IEEE 802.11 standard does not define how access points track moving users or how to negotiate a handoff from one access point to the next, a process referred to as roaming. IAPP is a Cisco proprietary protocol to support roaming. However, IAPP does not address how the wireless system tracks users moving from one subnet to another. Independent network Network that provides peer-to-peer connectivity without relying on a complete network infrastructure. Integrity Check Value The WEP ICV shall be a 32-bit value containing the 32-bit cyclic redundancy code designed for verifying wireless data frame integrity. Message Integrity Check A MIC can, optionally, be added to WEP-encrypted 802.11 frames. MIC prevents attacks on encrypted packets. MIC, implemented on both the access point and all associated client devices, adds a few bytes to each packet to make the packets tamper-proof. Native VLAN ID A switch port and/or AP can be configured with a 'native VLAN ID'. Untagged or priority-tagged frames are implicitly associated with the native VLAN ID. The default native VLAN ID is '1' if VLAN tagging is enabled. The native VLAN ID is '0' or 'no VLAN ID' if VLAN tagging is not enabled. Node Device on a network; has its own unique network address and name. Non-Root Bridge This wireless bridge does not connect to the main wired LAN segment. It connects to a remote wired LAN segment and can associate with root bridges and other non-root bridges that accept client associations. It also can accept associations from other non-root bridges, repeater access points, and client devices. Physical Layer Convergence Procedure In IEEE 802.11 wireless LANs, PLCP defines a method of mapping the IEEE 802.11 MAC sublayer protocol data units into a framing format suitable for sending and receiving user data and management information between two or more wireless stations using the associated PMD system. Physical Medium Dependent In IEEE 802.11 wireless LANs, a PMD system, whose function defines the characteristics of, and method of transmitting and receiving data through, a wireless medium between two or more wireless stations each using the DSSS. Preamble The radio preamble are data at the head of a packet that contains information access points and client devices required by IEEE 802.11 when sending and receiving packets. Primary LAN In an AP, if the destinations of inbound unicast frames are unknown, the frames are sent toward the primary LAN defined on the device. Radio carrier Radio waves that deliver energy to a remote receiver; in other words, radio waves in a wireless LAN environment. Repeater Device that connects multiple segments, listening to each and regenerating the signal on one to every other connected one; so that the signal can travel further. Repeater or Non-root Access Point The repeater access point is not connected to the wired LAN. The Repeater is a wireless LAN transceiver that transfers data between a client and another access point, another repeater, or between two bridges. The repeater is placed within radio range of an access point connected to the wired LAN, another repeater, or an non-root bridge to extend the range of the infrastructure. Radio Frequency Radio wave and modulation process or operation. Root Access Point This access point connects clients to the main wired LAN. Root (Wireless) Bridge This wireless bridge connects to the main wired LAN. It can communicate with non-root wireless bridges, repeater access points, and client devices but not with another wireless root bridge. Only one wireless bridge in a wireless LAN can be set as the wireless root bridge. Spread-spectrum Wideband radio frequency technique that consumes more bandwidth than the narrow-band alternative but produces a signal that is louder and easier to detect. There are two types of spread-spectrum radio: frequency hopping and direct sequence. Radio Service Set ID SSID is a unique identifier that APs and clients use to identify with each other. SSID is a simple means of access control and is not for security. The SSID can be any alphanumeric entry up to 32 characters. Tag header A 'tag header' is as defined in the IEEE 802.1Q standard. An 802.1Q tag header contains a 3-bit priority field and a 12-bit VLAN ID field. A 'priority tag' has a VLAN ID of 0, to indicate 'no VLAN ID'. A 'VLAN tag' has a non-zero VLAN ID. Virtual LAN VLAN defined in the IEEE 802.1Q VLAN standard supports logically segmenting of LAN infrastructure into different subnets or workgroups so that packets are switched only between ports within the same VLAN. VLAN ID Each VLAN is identified by a 12-bit 'VLAN ID'. A VLAN ID of '0' is used to indicate 'no VLAN ID'. Valid VLAN IDs range from '1' to '4095'. VLAN of ID '4095' is the default VLAN for Cisco VoIP Phones. Wired Equivalent Privacy WEP is generally used to refer to 802.11 encryption. Work-group Bridge It is a client to APs or wireless root bridges. The radio port of a WGB serves as the uplink to the main network and the Ethernet port provides network access for devices like PC or IP phone. Upgrade of Frequencies As per the latest regulations proposed by the Japanese Government, the four channels 34 ( 5170 GHz ), 38 ( 5190 GHz), 42 ( 5210 ) and 44 ( 5230 ) in the 5150-5250 MHz band has been shifted by 10 MHz. Thus, the new channels in the 5150-5250 MHz band are 36 ( 5180 ), 40 ( 5200 ) and 44 ( 5220 ) and 48 ( 5240 ).")
ciscoDot11IfMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 0))
ciscoDot11IfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1))
cd11IfConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1))
cd11IfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2))
cd11IfManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1))
cd11IfPhyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2))
cd11IfMacStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1))
class CDot11IfVlanIdOrZero(TextualConvention, Unsigned32):
    reference = 'RFC-2674, Bridge MIB Extensions, August 1999, Q-BRIDGE-MIB, E. Bell.'
    description = "This is a 12-bit VLAN ID used in the VLAN Tag header. A value of '0' indicates NULL or no VLAN ID. and '4095' is the default VLAN for Cisco VoIP Phones. This textual convention differs from the VlanId textual convention, defined by the Q-BRIDGE-MIB in RFC-2674, because VlanId does not permit the value '0' and '4095'."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4095)

class WepKeyType128(TextualConvention, OctetString):
    reference = 'IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, Section 8.3.2.'
    description = 'WEP shared secret encryption key, 128-bits or 16 octets. Only the first 13 octets are accessible to users among the total 16 octets.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 13)

class CDot11IfMicAlgorithm(TextualConvention, Integer32):
    description = 'Auxiliary MIC calculated on WEP-encoded packets to validate that they have not been modified. This is in addition to the standard 802.11 ICV. The two options are: micNone(1) - do not apply MIC, micMXX(2) - apply MMH MIC, micMichael(3) - Michael MIC.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("micNone", 1), ("micMXX", 2), ("micMichael", 3))

class CDot11IfWepKeyPermuteAlgorithm(TextualConvention, Integer32):
    description = 'This defines the function through which the WEP encryption key is permuted between key renewal periods. wepPermuteNone(1) - no WEP key permutation, wepPermuteIV(2) - WEP key permutation with initialization vector.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("wepPermuteNone", 1), ("wepPermuteIV", 2))

class CDot11IfCipherType(TextualConvention, Bits):
    description = 'These are the frame encryption cipher types for frames on IEEE 802.11 radio interfaces. ckip Cisco Per packet key hashing, cmic Cisco MMH MIC, tkip WPA Temporal Key encryption, wep40 40-bit WEP key, wep128 128-bit WEP key, aesccm WPA AES CCMP encryption.'
    status = 'current'
    namedValues = NamedValues(("ckip", 0), ("cmic", 1), ("tkip", 2), ("wep40", 3), ("wep128", 4), ("aesccm", 5))

class CDot11RadioFrequencyBandType(TextualConvention, Bits):
    description = 'These are the radio frequency band names the IEEE 802.11 radio is operating on: ism24G(0) - ISM 2.4 GHz band, unii1(1) - U-NII-1 band (5.15-5.25 GHz), unii2(2) - U-NII-2 band (5.25-5.35 GHz), unii3(3) - U-NII-3 band (5.725-5.825 GHz), cept(4) - CEPT band B (5.47-5.725 GHz), japan49G(5) - Japan 4.9 band (4.9-5.0 GHz), japan50G(6) - Japan 5.0 band (5.03-5.091 GHz).'
    status = 'current'
    namedValues = NamedValues(("ism24G", 0), ("unii1", 1), ("unii2", 2), ("unii3", 3), ("cept", 4), ("japan49G", 5), ("japan50G", 6))

class CDot11RadioModulationClass(TextualConvention, Integer32):
    description = 'These are classifications of radio modulation techniques used by the various Physical Layers of IEEE 802.11 radios: dsss(1) - modulation schemes associated with DSSS type PHYs, ofdm(2) - modulation schemes associated with OFDM type PHYs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dsss", 1), ("ofdm", 2))

class Cd11IfDot11UpgradeStatus(TextualConvention, Integer32):
    description = 'These are the various status on the Radio Upgrade: unknown(1) - upgrade status unknown, upgradeNotApplicable(2) - Regulatory domain upgrade is not applicable for 11b/g radios and 11a radios not in Japan regulatory domain, upgradeNotDone(3) - 11a radio is in Japan domain but yet to be upgraded, upgradeNotNeeded(4) - 11a radio is already configured to operate in the W52 domain and that the upgrade is not needed, upgradeDone(5) - upgrade has been done from J52 to W52.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("upgradeNotApplicable", 2), ("upgradeNotDone", 3), ("upgradeNotNeeded", 4), ("upgradeDone", 5))

cd11IfStationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cd11IfStationConfigTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfStationConfigTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfStationConfigTable.setDescription('This table contains attributes to configure radio interfaces managed by this agent. The attributes are extensions to the configuration parameters in the dot11StationConfigTable defined in the IEEE802dot11-MIB. This table configures the station role of the interface, proprietary extensions, hierarchy, security option and parameters, and communication settings. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfStationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfStationConfigEntry.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfStationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfStationConfigEntry.setDescription('A collection of configuration attributes for an IEEE 802.11 radio interface. These attributes are supplements to attributes defined in the dot11StationConfigTable in IEEE802dot11-MIB.')
cd11IfStationRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("roleWgb", 1), ("roleBridge", 2), ("roleClient", 3), ("roleRoot", 4), ("roleRepeater", 5), ("roleApBridge", 6), ("roleApRepeater", 7), ("roleIBSS", 8), ("roleNrBridge", 9), ("roleApNrBridge", 10), ("roleScanner", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfStationRole.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 3.')
if mibBuilder.loadTexts: cd11IfStationRole.setStatus('current')
if mibBuilder.loadTexts: cd11IfStationRole.setDescription('This defines the role of this station itself within the 802.11 BSS of which it is a member. The roles are: roleWgb(1) - infrastructure type WGB client, roleBridge(2) - root bridge, roleClient(3) - independent BBS type WGB client, roleRoot(4) - root access point, roleRepeater(5) - repeater, roleApBridge(6) - AP and root bridge, roleApRepeater(7) - AP and repeater, roleIBSS(8) - independent BSS, roleNrBridge(9) - non-root bridge, roleApNrBridge(10) - AP and non-root bridge, roleScanner(11) - scanner for rogue APs and clients. The default role is roleRoot(4).')
cd11IfCiscoExtensionsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfCiscoExtensionsEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfCiscoExtensionsEnable.setDescription("Cisco Aironet extensions to the basic IEEE 802.11 protocols are enabled if the value is 'true'. The extension enables better BSS performance and faster roaming. If the value is 'false', only the basic IEEE 802.11 protocols are used. This ensures maximum compatibility with non-Cisco equipment. The default value is 'true'.")
cd11IfAllowBroadcastSsidAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAllowBroadcastSsidAssoc.setStatus('current')
if mibBuilder.loadTexts: cd11IfAllowBroadcastSsidAssoc.setDescription("If the value of cd11IfStationRole is either 'roleRoot' or 'roleRepeater', and if cd11IfAllowBroadcastSsidAssoc is 'true', the device radio driver will respond to Broadcast SSID Probe Requests and will broadcast its own SSID within its beacons. If cd11IfAllowBroadcastSsidAssoc is 'false', the radio will not respond to the Broadcast SSID and will not broadcast its SSID within beacons. The default value is 'true'.")
cd11IfPrivacyOptionMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfPrivacyOptionMaxRate.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.1.2.')
if mibBuilder.loadTexts: cd11IfPrivacyOptionMaxRate.setStatus('current')
if mibBuilder.loadTexts: cd11IfPrivacyOptionMaxRate.setDescription('This object specifies the maximum transmit bit rate supported by the radio when using, for example, WEP encryption. The rate is expressed in standard IEEE 802.11 increments of 500Kb/sec.')
cd11IfEthernetEncapsulDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encap802dot1H", 1), ("encapRfc1042", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfEthernetEncapsulDefault.setReference('IEEE Std 802.1H-1997, Media Access Control Bridging of Ethernet V2.0 in Local Area Networks. RFC-1042, February 1988, A Standard for the Transmission of IP Datagrams over IEEE 802 Networks, J. Postel and J. Reynolds.')
if mibBuilder.loadTexts: cd11IfEthernetEncapsulDefault.setStatus('current')
if mibBuilder.loadTexts: cd11IfEthernetEncapsulDefault.setDescription('This object specifies the Ethernet encapsulation transform type used within the BSS. The encapsulations allowed are either IEEE 802.1H type or RFC-1042 type. IEEE 802.1H designates the Subnetwork Access Protocol (SNAP) mechanism as the Ethernet encapsulation protocol. Subsequently, other (non-IP) uses of the RFC-1042 mechanism. RFC-1042 specifies a translation for Ethernet frames, such that they can be exchanged with end stations on LANs that do not provide an Ethernet service. encap802dot1H(1) - IEEE 802.1H SNAP encapsulation encapRfc1042(2) - RFC-1042 encapsulation. The default encapsulation type is encap802dot1H(1).')
cd11IfBridgeSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 38640))).setUnits('Kilometers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfBridgeSpacing.setStatus('current')
if mibBuilder.loadTexts: cd11IfBridgeSpacing.setDescription('If this device is a root wireless bridge, this value is the distance in kilometers reported between this device and its farthest non-root bridge client.')
cd11IfDesiredSsidMaxAssocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredSsidMaxAssocSta.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 5.7.')
if mibBuilder.loadTexts: cd11IfDesiredSsidMaxAssocSta.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredSsidMaxAssocSta.setDescription("This object defines the maximum number of IEEE 802.11 stations which may associate with this radio interface through IEEE802dot11-MIB dot11DesiredSSID. If this value is '0', the maximum number is limited only by the IEEE 802.11 standard and any hardware or radio firmware limitations of the access point. The default value is '0'.")
cd11IfAuxiliarySsidLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfAuxiliarySsidLength.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxiliarySsidLength.setDescription("This object specifies the maximum number of SSIDs allowed for a radio interface or the number of SSID entries per radio interface in the cd11IfAuxSsidTable. The default value is '25'.")
cd11IfVoipExtensionsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfVoipExtensionsEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfVoipExtensionsEnable.setDescription("This object enables the radio generate proprietary elements in its beacons and probe responses to support Voice-over-IP (VoIP) phones. The default value is 'true'.")
cd11IfDesiredSsidMicAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 10), CDot11IfMicAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredSsidMicAlgorithm.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.2.3.')
if mibBuilder.loadTexts: cd11IfDesiredSsidMicAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredSsidMicAlgorithm.setDescription('This object defines the auxiliary MIC calculated on WEP-encoded packets of stations associated with this radio interface through IEEE802dot11-MIB dot11DesiredSSID. The default value is micNone(1).')
cd11IfDesiredSsidWepPermuteAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 11), CDot11IfWepKeyPermuteAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredSsidWepPermuteAlg.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.2.3.')
if mibBuilder.loadTexts: cd11IfDesiredSsidWepPermuteAlg.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredSsidWepPermuteAlg.setDescription('This object defines the function through which the WEP encryption key is permuted between key renewal periods for stations associated with this radio interface through IEEE802dot11-MIB dot11DesiredSSID. The default value is wepPermuteNone(1).')
cd11IfWorldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("legacy", 2), ("dot11d", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWorldMode.setStatus('current')
if mibBuilder.loadTexts: cd11IfWorldMode.setDescription('This object sets the World-Mode function of the radio to allow it to function in countries other than it was manufactured for. none(1) - No world mode setting, legacy(2) - compatible with legacy hardware, dot11d(3) - use IEEE 802.11d mechanism.')
cd11IfWorldModeCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWorldModeCountry.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfWorldModeCountry.setStatus('current')
if mibBuilder.loadTexts: cd11IfWorldModeCountry.setDescription("This object sets the dot11CountryString in the IEEE802dot11-MIB identifying the country in which the radio is operating. When cd11IfWorldMode is either legacy(2) or dot11d(3), this object value will be sent in the radio management frame. The first two octets of this string is the two character country code as described in document ISO/IEC 3166-1. The third octet shall be one of the following: 1. an ASCII space character, if the regulations under which the station is operating encompass all environments in the country, 2. an ASCII 'O' character, if the regulations under which the station is operating are for an Outdoor environment only, or 3. an ASCII 'I' character, if the regulations under which the station is operating are for an Indoor environment only.")
cd11IfMobileStationScanParent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMobileStationScanParent.setStatus('current')
if mibBuilder.loadTexts: cd11IfMobileStationScanParent.setDescription('This object enables the radio to scan for a better parent when it is a mobile non-root device, for example, the value of cd11IfStationRole is roleWgb(1).')
cd11IfPsPacketForwardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPsPacketForwardEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfPsPacketForwardEnable.setDescription("If no VLAN is configured on the radio interface, this object configures the PSPF feature. Otherwise, cd11IfVlanPsPacketForwardEnable is used to configure the PSPF feature per VLAN. If it is 'true', PSPF is on the radio interface and direct traffic between wireless clients of the interface is not allowed. If it is 'false', PSPF is disabled on the VLAN and direct traffic between wireless clients of the interface is allowed.")
cd11IfMultipleBssidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMultipleBssidEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfMultipleBssidEnable.setDescription("If it is 'true', multiple broadcast SSID is enabled on the radio. To a wireless client, a MBSSID AP appears to be several distinct co-located APs, and it transmits a beacon for each broadcast SSID or SSID. This allows all of the SSIDs visible for passive scanning.")
cd11IfMobileStationListIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMobileStationListIgnore.setStatus('current')
if mibBuilder.loadTexts: cd11IfMobileStationListIgnore.setDescription("This object indicates whether the radio should process the AP adjacency and Enhanced Neighbor List reports specified in the CCX Specification. AP adjacency and Enhanced Neighbor List provide information about the infrastructure wireless devices found in the near vicinity of this radio. This object is applicable only when the radio's role as represented by the object cd11IfStationRole is one of roleWgb(1), roleRepeater(5) or roleNrbridge(9). Agent will populate a value of 'false', when the radio's role as represented by cd11IfStationRole is one of roleRoot(4) ,roleBridge(2) or roleApBridge(6), to indicate that the object is not applicable for the radio in these roles. Set requests will be rejected when the radio is configured to be in one of these roles. User can configure this object only when cd11IfMobileStationScanChannel is configured with a valid set of channels. When cd11IfMobileStationScanChannel is configured with a value of 0, the agent will automatically populate a value of 'false'. ")
cd11IfMobileStationScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMobileStationScanChannel.setStatus('current')
if mibBuilder.loadTexts: cd11IfMobileStationScanChannel.setDescription("This object specifies the channels to be used by the infractructure clients for scanning purposes. This object is applicable only when the radio's role as represented by the object cd11IfStationRole is one of roleWgb(1), roleRepeater(5) or roleNrbridge(9). Agent will reject the request to set this object when the cd11IfStationRole doesn't populate one of the values mentioned above. Each octet carries the channel number. To configure the radio to scan all the channels applicable to a particular regulatory domain, this object should be configured with only one octet of value 0. ")
cd11IfAuthAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cd11IfAuthAlgorithmTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 5.7.6 and IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuthAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgorithmTable.setDescription('This table contains attributes to configure authentication algorithm parameters for associations through the SSID defined by IEEE802dot11-MIB dot11DesiredSSID object. It defines attributes additional to those defined in the IEEE802dot11-MIB dot11AuthenticationAlgorithmsTable. An interface may support multiple authentication algorithms. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). This table uses the dot11AuthenticationAlgorithmsIndex of the dot11AuthenticationAlgorithmsTable defined in the IEEE802dot11-MIB as the expansion index. Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfAuthAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: cd11IfAuthAlgorithmEntry.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.2 and IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuthAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgorithmEntry.setDescription('Each entry specifies authentication algorithm configuration attributes of a VLAN for the dot11DesiredSSID on a radio interface.')
cd11IfAuthAlgRequireEap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgRequireEap.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.2 and IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuthAlgRequireEap.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgRequireEap.setDescription("If the value is 'true', stations authenticating with the corresponding IEEE802dot11-MIB dot11AuthenticationAlgorithm must complete network-level EAP authentication before their association attempts will be unblocked. If the value is 'false', stations authenticating with the corresponding dot11AuthenticationAlgorithm will be unblocked as soon as they complete the 802.11 authentication. The default value is 'true'.")
cd11IfAuthAlgRequireMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgRequireMacAddr.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.2 and IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuthAlgRequireMacAddr.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgRequireMacAddr.setDescription("If the value is 'true', stations authenticating with the corresponding IEEE802dot11-MIB dot11AuthenticationAlgorithm must complete additional MAC address authentication before their association attempts will be unblocked. If the value is 'false', stations authenticating with the corresponding dot11AuthenticationAlgorithm will be unblocked as soon as they complete the 802.11 authentication. The default value is 'true'.")
cd11IfAuthAlgDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 3), CDot11IfVlanIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgDefaultVlan.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 8.2 and IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuthAlgDefaultVlan.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgDefaultVlan.setDescription("This object defines the default VLAN identifier for stations associated with this radio interface with this authentication and through IEEE802dot11-MIB dot11DesiredSSID. If the value of this object is '0', it indicates that either the default VLAN are not defined for this authentication on this radio interface or the default VLAN is the native VLAN ID. The default value is '0'.")
cd11IfAuthAlgEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgEapMethod.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuthAlgEapMethod.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgEapMethod.setDescription("If the value of cd11IfAuthAlgRequireEap is 'true' or dot11AuthenticationAlgorithm is Network-EAP, this is the EAP method list to used for the EAP authentication.")
cd11IfAuthAlgMacAddrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgMacAddrMethod.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuthAlgMacAddrMethod.setDescription("If the value of cd11IfAuthAlgRequireMacAddr is 'true', this is the MAC address method list to used for the MAC authentication.")
cd11IfWepDefaultKeysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3), )
if mibBuilder.loadTexts: cd11IfWepDefaultKeysTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfWepDefaultKeysTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfWepDefaultKeysTable.setDescription('The dot11WEPDefaultKeysTable defined by the IEEE802dot11-MIB allows only WEP keys of length up to 40 bits. This table overrides the the dot11WEPDefaultKeysTable and supports keys of from 40 to 128 bits. A maximum of four keys can associate with any IEEE 802.11 radio interface. For devices implementing this table, they should not implement the dot11WEPDefaultKeysTable. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfWepDefaultKeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyIndex"))
if mibBuilder.loadTexts: cd11IfWepDefaultKeysEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfWepDefaultKeysEntry.setDescription('A collection of attributes defining a WEP key for a radio interface.')
cd11IfWepDefaultKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cd11IfWepDefaultKeyIndex.setStatus('current')
if mibBuilder.loadTexts: cd11IfWepDefaultKeyIndex.setDescription('This object identifies a WEP key instance for a radio interface.')
cd11IfWepDefaultKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWepDefaultKeyLen.setStatus('current')
if mibBuilder.loadTexts: cd11IfWepDefaultKeyLen.setDescription("This object specifies the length in octets of the WEP key cd11IfWepDefaultKeyValue. The default key length is '13'.")
cd11IfWepDefaultKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1, 3), WepKeyType128()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWepDefaultKeyValue.setStatus('current')
if mibBuilder.loadTexts: cd11IfWepDefaultKeyValue.setDescription('This is the WEP default secret key value. Any attempt to read this object by the NMS will result in return of a zero-length string. The default value is a NULL string.')
cd11IfDesiredBssTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5), )
if mibBuilder.loadTexts: cd11IfDesiredBssTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredBssTable.setDescription("When the radio is not functioning as an access point (i.e., cd11IfStationRole is not 'roleRoot'), and for example, this radio is a repeater or bridge, this table will contain a list of preferred access points with which the radio interface should associate with. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.")
cd11IfDesiredBssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfDesiredBssIndex"))
if mibBuilder.loadTexts: cd11IfDesiredBssEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredBssEntry.setDescription('Each entry provides the MAC address of a preferred access point. A maximum of 4 BSS addresses can be configured to an interface.')
cd11IfDesiredBssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cd11IfDesiredBssIndex.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredBssIndex.setDescription('This object defines the priority order in which preferred access points should be probed. Lower index values indicate higher priority.')
cd11IfDesiredBssAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredBssAddr.setStatus('current')
if mibBuilder.loadTexts: cd11IfDesiredBssAddr.setDescription("This object defines the BSS identifier (MAC address) of the access point with which the radio should try to associate with. The value of this object is '00:00:00:00:00:00' if the BSS identifier for this priority is not specified or configured. The default value is '000000000000'H.")
cd11IfAuxSsidTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6), )
if mibBuilder.loadTexts: cd11IfAuxSsidTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidTable.setDescription("When the radio is not functioning as a client station (i.e., cd11IfStationRole is not 'roleClient'), and for example, this is a access point or independent BSS, this table will contain a list of SSIDs which stations must be used to associate with this radio. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.")
cd11IfAuxSsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAuxSsidIndex"))
if mibBuilder.loadTexts: cd11IfAuxSsidEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidEntry.setDescription('A collection of attributes defining an auxiliary service set which client stations can associate on the specific interface. An interface can have multiple auxiliary service sets while IEEE 802.11 defines only one desired service set for each interface. Each radio interface currently supports up to 25 SSIDs, and the cd11IfAuxiliarySsidLength object specifies the configured maximum.')
cd11IfAuxSsidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: cd11IfAuxSsidIndex.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidIndex.setDescription('This object identifies a SSID defined on a radio.')
cd11IfAuxSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsid.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsid.setDescription('This object specifies a SSID recognized by this radio interface. The radio interface shall respond to probe requests using this SSID, but it does not advertise this SSID in its beacons.')
cd11IfAuxSsidBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidBroadcastSsid.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 7.3.2.1.')
if mibBuilder.loadTexts: cd11IfAuxSsidBroadcastSsid.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidBroadcastSsid.setDescription('This object indicates if an auxiliary SSID is the Broadcast SSID. There is only one Broadcast SSID per IEEE 802.11 radio interface.')
cd11IfAuxSsidMaxAssocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidMaxAssocSta.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 5.7.')
if mibBuilder.loadTexts: cd11IfAuxSsidMaxAssocSta.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidMaxAssocSta.setDescription("This object defines the maximum number of IEEE 802.11 stations which may associate with this radio interface through the cd11IfAuxSsid. If the value is '0', the maximum number is limited only by the IEEE 802.11 standard and any hardware or radio firmware limitations of the access point. The default value is '0'.")
cd11IfAuxSsidMicAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 5), CDot11IfMicAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidMicAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidMicAlgorithm.setDescription('This object defines the auxiliary MIC algorithm applied to WEP-encoded packets of stations associated with this radio interface through the cd11IfAuxSsid. The default value is micNone(1).')
cd11IfAuxSsidWepPermuteAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 6), CDot11IfWepKeyPermuteAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidWepPermuteAlg.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidWepPermuteAlg.setDescription('This object defines the function through which the WEP encryption key is permuted between key renewal periods for stations associated with this radio interface through the cd11IfAuxSsid. The default value is wepPermuteNone(1).')
cd11IfAuxSsidAuthAlgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7), )
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 5.7.6.')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgTable.setDescription('This table contains attributes to configure authentication algorithms for SSIDs listed in the cd11IfAuxSsidTable. This table extends the IEEE802dot11-MIB dot11AuthenticationAlgorithmsTable for multiple SSIDs support. Multiple SSIDs can associate with an interface and multiple authentication algorithms can apply to an auxiliary SSID. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfAuxSsidAuthAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAuxSsidIndex"), (0, "IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEntry.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEntry.setDescription('Each entry specifies authentication algorithm configuration attributes of a VLAN for an auxiliary SSID on a radio interface.')
cd11IfAuxSsidAuthAlgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEnable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEnable.setDescription("If the value is 'true', this device may authenticate an association using SSID (specified by cd11IfAuxiliarySSIDIndex) with the algorithm identified by IEEE802dot11-MIB dot11AuthenticationAlgorithmsIndex. The default value is 'true'.")
cd11IfAuxSsidAuthAlgRequireEap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireEap.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireEap.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireEap.setDescription("If both the values of this object and cd11IfAuxSsidAuthAlgEnable are 'true', the association authentication must complete additional network-level EAP authentication before client stations will be unblocked from their association attempts. If the value of this object is 'false' while cd11IfAuxSsidAuthAlgEnable is 'true', client stations will be unblocked as soon as they complete this enabled IEEE 802.11 authentication. The default value is 'true'.")
cd11IfAuxSsidAuthAlgRequireMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireMac.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireMac.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireMac.setDescription("If both the values of this object and cd11IfAuxSsidAuthAlgEnable are 'true', the association authentication must complete additional MAC address authentication before client stations will be unblocked from their association attempts. If the value of this object is 'false' while cd11IfAuxSsidAuthAlgEnable is 'true', client stations will be unblocked as soon as they complete this enabled IEEE 802.11 authentication. The default value is 'true'.")
cd11IfAuxSsidAuthAlgDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 4), CDot11IfVlanIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgDefaultVlan.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgDefaultVlan.setDescription("This object defines the default VLAN identifier for stations associated with this radio interface with the dot11AuthenticationAlgorithmsIndex authentication defined in IEEE802dot11-MIB and through the cd11IfAuxSsid. If the value of this object is '0', it indicates that either the default VLAN are not defined for that authentication on this radio interface or the default VLAN is the native VLAN ID. The default value is '0'.")
cd11IfAuxSsidAuthAlgEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEapMethod.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEapMethod.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEapMethod.setDescription("If the value of cd11IfAuxSsidAuthAlgRequireEap is 'true' or dot11AuthenticationAlgorithm is Network-EAP, this is the EAP method list to used for the EAP authentication.")
cd11IfAuxSsidAuthAlgMacMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgMacMethod.setStatus('current')
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgMacMethod.setDescription("If the value of cd11IfAuxSsidAuthAlgRequireMac is 'true', this is the MAC address method list to used for the MAC authentication.")
cd11IfAssignedAidTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8), )
if mibBuilder.loadTexts: cd11IfAssignedAidTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfAssignedAidTable.setDescription("When the radio is not functioning as a client station (i.e., cd11IfStationRole is not 'roleClient'), this is the list of AIDs which this agent will assign to the clients associating with it. An AID is assigned if the corresponding MAC address matches that of the client. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.")
cd11IfAssignedAidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAssignedAid"))
if mibBuilder.loadTexts: cd11IfAssignedAidEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfAssignedAidEntry.setDescription('Each entry associates an AID with a client MAC address. The relationship between AID and client MAC address is one to one.')
cd11IfAssignedAid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 2007)))
if mibBuilder.loadTexts: cd11IfAssignedAid.setStatus('current')
if mibBuilder.loadTexts: cd11IfAssignedAid.setDescription('This object specifies the AID for a client station to the radio interface.')
cd11IfAssignedSta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAssignedSta.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 5.7.2.')
if mibBuilder.loadTexts: cd11IfAssignedSta.setStatus('current')
if mibBuilder.loadTexts: cd11IfAssignedSta.setDescription("This object defines the client station MAC address. When a client associates with this radio interface, it shall always be assigned with the cd11IfAssignedAid as its IEEE 802.11 AID. The default value is '000000000000'H.")
cd11IfVlanEncryptKeyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9), )
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTable.setReference('CISCO-WLAN-VLAN-MIB, June 2002, Cisco Systems Wireless Virtual LAN MIB.')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTable.setDescription("This table contains shared WEP keys for all IEEE 802.11 packets transmitted and received frames over a VLAN identified by the cwvlWlanVlanId if both VLAN and encryption are enabled (i.e., the cwvlWlanEncryptionMode is wep(2) or aes(3)) on the radio interface. If WEP encryption is enabled for the transmitted IEEE 802.11 frames, then the Default Shared WEP key in the set is used to encrypt the transmitted broadcast and multicast frames associated with the cwvlWlanVlanId. Key '1' in the set is the default key. If an individual session key is not defined for the target station address, then the Default Shared WEP key will also be used to encrypt or decrypt unicast frames associated with the cwvlWlanVlanId.")
cd11IfVlanEncryptKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfVlanId"), (0, "CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyIndex"))
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyEntry.setDescription('Each entry contains the key index, key length, and key value. There is a maximum of 4 keys per VLAN or key set. Each key set exists only if the corresponding VLAN is enabled on the interface, and it is indexed by the VLAN ID.')
cd11IfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 1), CDot11IfVlanIdOrZero())
if mibBuilder.loadTexts: cd11IfVlanId.setReference('CISCO-WLAN-VLAN-MIB, June 2002, Cisco Systems Wireless Virtual LAN MIB.')
if mibBuilder.loadTexts: cd11IfVlanId.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanId.setDescription("This object identifies the VLAN (1 to 4095) on this radio interface. The object value should match the corresponding cwvlWlanVlanId in the cwvlWlanVlanTable or cd11IfVlanSecurityVlanId object in the cd11IfVlanSecurityTable. When the value is '0', the encryption keys are applied to the non-VLAN configuration.")
cd11IfVlanEncryptKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyIndex.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyIndex.setDescription("This object is a representative of the corresponding 802.11 WEP Key Index used when transmitting or receiving frames with this key. SNMP table indexing conventions require table index to be non-zero. Therefore, this object has to be one greater than the actual 802.11 WEP key index. A value of '1' for this object corresponds to a value of '0' for the 802.11 WEP key index.")
cd11IfVlanEncryptKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyLen.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyLen.setDescription("This object specifies the length in octets of cd11IfVlanEncryptKeyValue. Common values are 5 for 40-bit WEP key and 13 for 128-bit WEP key. A value of '0' means that the key is not set but the VLAN is enabled.")
cd11IfVlanEncryptKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 4), WepKeyType128()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyValue.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyValue.setDescription('This is the WEP secret key value. The agent always returns a zero-length string when this object is read for security reason.')
cd11IfVlanEncryptKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyStatus.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyStatus.setDescription("This object controls and reflects the status of rows in this table. When the row in 'active' state, the NMS can modify both key length and value. To delete a row, set this object value to 'destroy'.")
cd11IfVlanEncryptKeyTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTransmit.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTransmit.setDescription("Only one of the 4 keys of a VLAN can be the transmit key. Setting any one of the 4 keys to 'true', the agent will automatically change the value of cd11IfVlanEncryptKeyTransmit of the other 3 keys to 'false' if they exist.")
cd11IfVlanSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10), )
if mibBuilder.loadTexts: cd11IfVlanSecurityTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanSecurityTable.setDescription('This table contains encryption method and key rotation configurations for all VLANs on all IEEE 802.11 radio interfaces. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). VLANs are identified by the cd11IfVlanSecurityVlanId, and the actual VLAN does not have to exist or be enabled for the encryption configuration to exist.')
cd11IfVlanSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityVlanId"))
if mibBuilder.loadTexts: cd11IfVlanSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanSecurityEntry.setDescription('Each entry is a set of encryption configurations for traffic on a VLAN of a IEEE 802.11 radio interface.')
cd11IfVlanSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 1), CDot11IfVlanIdOrZero())
if mibBuilder.loadTexts: cd11IfVlanSecurityVlanId.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanSecurityVlanId.setDescription("This is the VLAN ID (1-4095) to which the parameters in each conceptual row shall be applied. If the value is '0', these parameters apply to the non-VLAN configuration.")
cd11IfVlanSecurityVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanSecurityVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanSecurityVlanEnabled.setDescription("If the value is 'true', this VLAN sub-interface is enabled on all trunk and hybrid ports. If the value is 'false', this VLAN is disabled on all ports. For platforms supporting NMS to create VLAN sub-interfaces, setting this object to 'true' will create the corresponding VLAN sub-interfaces on all ports and 'false' will remove the the corresponding VLAN.")
cd11IfVlanBcastKeyChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanBcastKeyChangeInterval.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanBcastKeyChangeInterval.setDescription("This is the broadcast key rotation period. If the value is '0', there is no key rotation.")
cd11IfVlanBcastKeyCapabilChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanBcastKeyCapabilChange.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanBcastKeyCapabilChange.setDescription("If it is 'true', a new key will be used every time when the common set of encryption capability among clients of this radio on this VLAN is changed.")
cd11IfVlanBcastKeyClientLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanBcastKeyClientLeave.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanBcastKeyClientLeave.setDescription("If it is 'true', a new key will be used every time when a client of the radio on this VLAN disassociates.")
cd11IfVlanSecurityCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 6), CDot11IfCipherType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanSecurityCiphers.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanSecurityCiphers.setDescription('If cd11IfVlanEncryptionMode is cipher(1), these are all the possible cipher type combinations currently supported for data frame encryption from different IEEE 802.11 radio interface implementations. Some platform may support only a subset of the combinations. Agent will not honor invalid combinations. If none of the bits are set, no encryption will be done. aesccm WPA AES CCMP encryption, ckip Cisco Per packet key hashing, cmic Cisco MMH MIC, ckip|cmic Cisco Per packet key hashing and MIC, tkip WPA Temporal Key encryption, wep128 128-bit WEP key, wep40 40-bit WEP key. tkip|wep128 WPA Temporal Key and 128-bit WEP, tkip|wep40 WPA Temporal Key and 40-bit WEP.')
cd11IfVlanSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanSecurityRowStatus.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanSecurityRowStatus.setDescription("This is used to create a new row, modify or delete an existing VLAN encryption configuration in this table. Creation of rows must be done via 'createAndGo' and cd11IfVlanSecurityVlanEnabled and cd11IfVlanSecurityCiphers columns are mandatory. This object will become 'active' if the NMS performs a multivarbind set including this object and successfully creates the encryption configuration. Modification and deletion of rows can be done via 'createAndGo' and 'delete' respectively when this object is 'active'. Any encryption configurations of a VLAN should only be deleted when it is not being used for any client association.")
cd11IfVlanEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cipher", 1), ("wep", 2))).clone('cipher')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptionMode.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanEncryptionMode.setDescription('Encryption mode this VLANs are: cipher(1) - WPA and Cisco encryptions, wep(2) - WEP Only encryption')
cd11IfVlanWepEncryptOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mandatory", 1), ("optional", 2))).clone('mandatory')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanWepEncryptOptions.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanWepEncryptOptions.setDescription('If cd11IfVlanEncryptionMode is wep(2), mandatory(1) - WEP encryption is mandatory, optional(2) - WEP encryption is option. for all data frames on this VLAN.')
cd11IfVlanWepEncryptMic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanWepEncryptMic.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanWepEncryptMic.setDescription("If cd11IfVlanEncryptionMode is wep(2) and this object is 'true', MIC will be performed on all data frames on this VLAN. Otherwise, no MIC will be done.")
cd11IfVlanWepEncryptKeyHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanWepEncryptKeyHashing.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanWepEncryptKeyHashing.setDescription("If cd11IfVlanEncryptionMode is wep(2) and this object is 'true', key hashing will be used for encryption. Otherwise, no key hashing will be done.")
cd11IfVlanPsPacketForwardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanPsPacketForwardEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanPsPacketForwardEnable.setDescription("If both cd11IfVlanSecurityVlanEnabled and this object are 'true', PSPF is enabled on VLAN cd11IfVlanSecurityVlanId of this radio interface and direct traffic between wireless clients of the VLAn is not allowed. Otherwise, PSPF is disabled on the VLAN and direct traffic between wireless clients of the VLAN is allowed.")
cd11IfRadioMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11), )
if mibBuilder.loadTexts: cd11IfRadioMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfRadioMonitoringTable.setDescription('This table is for monitoring of remote active IEEE 802.11 radio devices on the network. Each table entry shows an active radio being monitored by a hot standby radio on this monitoring unit. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71). Entries on this table can be added, deleted, and modified by the NMS.')
cd11IfRadioMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRemoteRadioMacAddr"))
if mibBuilder.loadTexts: cd11IfRadioMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfRadioMonitoringEntry.setDescription('Each entry specifies the MAC address of the remote radio and the monitoring configuration and status of the local radio. Most platforms supporting this table only support one entry per ifIndex.')
cd11IfRemoteRadioMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: cd11IfRemoteRadioMacAddr.setStatus('current')
if mibBuilder.loadTexts: cd11IfRemoteRadioMacAddr.setDescription('Mac address of the active IEEE 802.11 radio device to be monitored by this hot standby monitoring radio. The cd11IfPhyMacSpecification of the local and remote radios must be the same in order for the monitoring to happen.')
cd11IfRadioMonitorPollingFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfRadioMonitorPollingFreq.setStatus('current')
if mibBuilder.loadTexts: cd11IfRadioMonitorPollingFreq.setDescription('The frequency, in seconds, the remote active radio specified by cd11IfRemoteRadioMacAddr is polled for its health.')
cd11IfRadioMonitorPollingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfRadioMonitorPollingTimeOut.setStatus('current')
if mibBuilder.loadTexts: cd11IfRadioMonitorPollingTimeOut.setDescription("The total time, in seconds, this standby monitoring radio unit can tolerate the failure of polling of the active radio unit. After this duration, one more failure of the polling will trigger this hot standby monitoring radio to take over and become an active radio. It will then stop all monitoring activity and set the instance of cd11IfLocalRadioMonitorStatus indexed by the failed radio cd11IfRemoteRadioMacAddr to 'active'.")
cd11IfLocalRadioMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("monitor", 2), ("inactive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfLocalRadioMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: cd11IfLocalRadioMonitorStatus.setDescription("NMS can only set this object to monitor(2). In the monitor(2) state, this local radio will monitor the remote radio specified in the cd11IfRemoteRadioMacAddr. When the remote radio fails or goes down, this local radio will takeover the functions and became active. The agent will set the instance of cd11IfLocalRadioMonitorStatus indexed by the failed radio cd11IfRemoteRadioMacAddr to 'active'. This local radio will not monitor any other radios when it is active, therefore, all other instances of cd11IfLocalRadioMonitorStatus indexed by the same ifIndex but different cd11IfRemoteRadioMacAddr will be set to 'inactive'.")
cd11IfRadioMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfRadioMonitorRowStatus.setStatus('current')
if mibBuilder.loadTexts: cd11IfRadioMonitorRowStatus.setDescription("This object is used for creating, modifying, and deleting rows in this table. Creation of rows must be done via 'createAndGo'. This object will become 'active' if the NMS performs a multivarbind set including this object. Any object in a row can be modified any time when the row is in the 'active' state via 'createAndGo'. Removal of a row can be done via setting this object to 'destroy'.")
cd11IfDot11UpgradeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 12), )
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatusTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatusTable.setDescription('This table represents the status of upgrade of the radios to the newer frequencies of the 5150-5250 MHz band. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent. ')
cd11IfDot11UpgradeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatusEntry.setDescription('Each entry corresponds to one conceptual row in cd11IfDot11UpgradeStatusTable and represents the status of upgrade of a dot11 radio interface. ')
cd11IfDot11UpgradeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 12, 1, 1), Cd11IfDot11UpgradeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatus.setDescription('This object represents the status of upgrade of a dot11 radio interface. ')
cd11IfPhyOperationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cd11IfPhyOperationTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyOperationTable.setDescription('This table contains the IEEE 802.11 Physical Layer operation configuration parameters for each radio interface. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfPhyOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfPhyOperationEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyOperationEntry.setDescription('A collection of attributes defining the physical characteristics and behaviors of an IEEE 802.11 PHY.')
cd11IfCurrentCarrierSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("usa", 0), ("europe", 1), ("japan", 2), ("spain", 3), ("france", 4), ("belgium", 5), ("israel", 6), ("canada", 7), ("australia", 8), ("japanWide", 9), ("world", 10), ("usa5GHz", 11), ("europe5GHz", 12), ("japan5GHz", 13), ("singapore5GHz", 14), ("taiwan5GHz", 15), ("china", 16), ("northAmer5GHzUNI3", 17), ("chnIreAus5GHzUNI3", 18), ("hkNZ5GHzUNI3", 19), ("korea5GHzUNI3", 20), ("mexAusNZ5GHz", 21), ("china5GHz", 22), ("korea5GHzUNI123E", 23), ("japan5GHzUNI12", 24), ("taiwan5GHzUNI23E", 25), ("israel5GhzUNI12", 26), ("usaFCC49PS", 27), ("japan5GHzUNI1", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCurrentCarrierSet.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 14.6.10.')
if mibBuilder.loadTexts: cd11IfCurrentCarrierSet.setStatus('current')
if mibBuilder.loadTexts: cd11IfCurrentCarrierSet.setDescription('This object defines the carrier set of the radio. The carrier set implies a regulatory domain, but geographic-specific restrictions within a regulatory domain may necessitate several carrier sets within the regulatory domain. usa(0) - ISM 2.4 GHz America europe(1) - ISM 2.4 GHz Europe japan(2) - ISM 2.4 GHz Japan spain(3) - ISM 2.4 GHz Spain france(4) - ISM 2.4 GHz France belgium(5) - ISM 2.4 GHz Belgium israel(6) - ISM 2.4 GHz Israel canada(7) - ISM 2.4 GHz Canada australia(8) - ISM 2.4 GHz Australia japanWide(9) - ISM 2.4 GHz JapanWide world(10) - ISM 2.4 GHz World usa5GHz(11) - OFDM UNII 2 America europe5GHz(12) - OFDM UNII 2 Europe japan5GHz(13) - OFDM UNII 2 Japan singapore5GHz(14) - OFDM UNII 2 Singapore taiwan5GHz(15) - OFDM UNII 2 Taiwan china(16) - ISM 2.4 GHz China northAmer5GHzUNI3(17) - OFDM UNII 3 North America chnIreAus5GHzUNI3(18) - OFDM UNII 3 China, Ireland, Austrialia hkNZ5GHzUNI3(19) - OFDM UNII 3 Hong Kong, New Zealand korea5GHzUNI3(20) - OFDM UNII 3 Korea mexAusNZ5GHzUNI3(21) - OFDM UNII 3 Mexical, Australia, New Zealand (North America without ETSI Channels) china5GHzUNI2(22) - OFDM UNII 2 China korea5GHzUNI123E(23) - OFDM UNII 1,2,3,ETSI Korea japan5GHzUNI12(24) - OFDM UNII 1,2 Japan taiwan5GHzUNI23E(25) - OFDM UNII 2,3,ETSI Taiwan israel5GhzUNI12(26) - OFDM UNII 1,2 Israel usaFCC49PS(27) - OFDM FCC49 USA Public Safety japan5GHzUNI1(28) - OFDM UNII 1 Japan')
cd11IfModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("mok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfModulationType.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 14.6.10.')
if mibBuilder.loadTexts: cd11IfModulationType.setStatus('current')
if mibBuilder.loadTexts: cd11IfModulationType.setDescription('This object specifies the RF modulation type of the radio. standard(1) - Standard, this is the default setting currently defined in the IEEE 802.11 standard. mok(2) - MOK, this modulation was used before the IEEE finished the high-speed 802.11 standard. The default modulation type is standard(1).')
cd11IfPreambleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPreambleType.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 14.6.10.')
if mibBuilder.loadTexts: cd11IfPreambleType.setStatus('current')
if mibBuilder.loadTexts: cd11IfPreambleType.setDescription('This object specifies the current radio preamble type in use by the station. Possible values: long(1) - long preambles short(2) - short preambles. A long preamble ensures compatibility between access point and all early models of Cisco Aironet Wireless LAN adapters (client devices). A short preamble improves throughput performance. The default preamble type is short(2).')
cd11IfDomainCapabilitySet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDomainCapabilitySet.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfDomainCapabilitySet.setStatus('current')
if mibBuilder.loadTexts: cd11IfDomainCapabilitySet.setDescription('This object specifies the current multi-domain capability setting of this radio. This object takes one of the dot11MultiDomainCapabilityIndex values on the dot11MultiDomainCapabilityTable. The setting controls the first working radio channel number, the number of working channels, and the maximum transmit power level of the radio. The setting must match the corresponding value of the cd11IfCurrentCarrierSet set for this radio. This object is writable only if the IEEE 802.11 multi-domain capability option is implemented and enabled via dot11MultiDomainCapabilityImplemented and dot11MultiDomainCapabilityEnabled.')
cd11IfPhyBasicRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyBasicRateSet.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfPhyBasicRateSet.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyBasicRateSet.setDescription('This attribute specifies if a data rate in the dot11OperationalRateSet of the IEEE802dot11-MIB is a Basic Rate for this radio interface. If a data rate is a Basic Rate, the corresponding octet of this attribute will contain a value of 128 (or the most significant bit is set). Otherwise, the corresponding octet of this attribute will be 0.')
cd11IfPhyMacSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee802dot11a", 1), ("ieee802dot11b", 2), ("ieee802dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfPhyMacSpecification.setReference('IEEE P802.11g (expected June 2003), Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications: Higher Speed Physical Layer (PHY) Extension to IEEE 802.11b.')
if mibBuilder.loadTexts: cd11IfPhyMacSpecification.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyMacSpecification.setDescription('This object specifies which IEEE 802.11 Standard applies to this radio interface. ieee802dot11a(1) - IEEE 802.11a Standard, ieee802dot11b(2) - IEEE 802.11b Standard, ieee802dot11g(3) - IEEE 802.11g Standard.')
cd11IfPhyConcatenation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyConcatenation.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyConcatenation.setDescription("If the value of cd11IfStationRole is 'roleBridge' or 'roleNrBridge', this object sets the maximum packet concatenation size in bytes for all outbound packets. For our current 5 GHz product, the maximum value range is from 1600 to 4000.")
cd11IfPhyNativePowerUseStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyNativePowerUseStandard.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfPhyNativePowerUseStandard.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyNativePowerUseStandard.setDescription("This object indicates if queries for current transmit power and number of transmit power levels of the radio for the frequency band shall be via the Standard IEEE802dot11-MIB dot11PhyTxPowerTable dot11CurrentTxPowerLevel and dot11NumberSupportedPowerLevels objects or corresponding cd11IfNativeCurrentPowerLevel and cd11IfNativeNumberPowerLevels objects in the cd11IfRfNativePowerTable. If the value is 'true', the dot11CurrentTxPowerLevel is used to configure the current radio transmit power level. If the value is 'false', the cd11IfNativeCurrentPowerLevel object shall be used to configure the current radio transmit power level.")
cd11IfPhyFhssTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cd11IfPhyFhssTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 14.1.2.')
if mibBuilder.loadTexts: cd11IfPhyFhssTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyFhssTable.setDescription('This table contains the Physical Layer Frequency Hopping Spread Spectrum configuration parameters for each radio interface. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfPhyFhssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfPhyFhssEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyFhssEntry.setDescription('A collection of attributes defining the FHSS configuration parameters of a radio interface.')
cd11IfPhyFhssMaxCompatibleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyFhssMaxCompatibleRate.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfPhyFhssMaxCompatibleRate.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyFhssMaxCompatibleRate.setDescription("This object specifies the of maximum data rate at which the station may transmit data. The octet contains a value representing a rate. The rate should be within the range from '2' to '127', corresponding to data rates in increments of 500 kb/s from 1 Mb/s to 63.5 Mb/s. It should be one of the rates in the IEEE802dot11-MIB dot11OperationalRateSet. The default value is '127'.")
cd11IfPhyDsssTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cd11IfPhyDsssTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 15.1.')
if mibBuilder.loadTexts: cd11IfPhyDsssTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyDsssTable.setDescription('This table contains the Physical Layer Direct Sequence Spread Spectrum configuration parameters for each radio interface. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfPhyDsssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfPhyDsssEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyDsssEntry.setDescription('A collection of attributes defining the DSSS configuration parameters of a radio interface.')
cd11IfPhyDsssMaxCompatibleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyDsssMaxCompatibleRate.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfPhyDsssMaxCompatibleRate.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyDsssMaxCompatibleRate.setDescription("This object specifies the of maximum data rate at which the station may transmit data. The octet contains a value representing a rate. The rate should be within the range from '2' to '127', corresponding to data rates in increments of 500 kb/s from 1 Mb/s to 63.5 Mb/s. It should be one of the rates in the IEEE802dot11-MIB dot11OperationalRateSet. The default value is '127'.")
cd11IfPhyDsssChannelAutoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyDsssChannelAutoEnable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfPhyDsssChannelAutoEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyDsssChannelAutoEnable.setDescription("If the value is 'true' and the radio is function as an access point device (i.e., cd11IfStationRole is 'roleRoot', the radio will scan for other BSS activity on all channels available in the current cd11IfCurrentCarrierSet before establishing its own BSS. After the scan, this station will establish its own BSS on the channel with the least probability of radio signal congestion. If the value is 'false', this station always establishes its BSS on IEEE802dot11-MIB dot11CurrentChannel. The default value is 'true'.")
cd11IfPhyDsssCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(34, 34), ValueRangeConstraint(36, 36), ValueRangeConstraint(38, 38), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ValueRangeConstraint(46, 46), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(149, 149), ValueRangeConstraint(153, 153), ValueRangeConstraint(157, 157), ValueRangeConstraint(161, 161), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfPhyDsssCurrentChannel.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 15.4.6.2.')
if mibBuilder.loadTexts: cd11IfPhyDsssCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyDsssCurrentChannel.setDescription('The current operating frequency channel of the DSSS PHY, as selected either by selective scanning or via IEEE802dot11-MIB dot11CurrentChannel. Valid channel numbers are defined in the IEEE 802.11 Standard. For North America, 802.11b channels allowed are 1 to 11 and 802.11a channels allowed are 36,40,44,48,52,56, 60, and 64.')
cd11IfSuppDataRatesPrivacyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11), )
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyTable.setDescription('This table defines the transmit and receive bit rate of the radio on each IEEE 802.11 interface and the WEP encryption support at those rates. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfSuppDataRatesPrivacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyIndex"))
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyEntry.setDescription('Each entry specifies the encryption support for a particular data rate on a radio interface.')
cd11IfSuppDataRatesPrivacyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyIndex.setStatus('current')
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyIndex.setDescription('This object identifies a data rate supported on a radio. Each radio can support up to 8 different rates.')
cd11IfSuppDataRatesPrivacyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyValue.setStatus('current')
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyValue.setDescription('This object defines the receiving or transmission bit rates supported by the PLCP and PMD, represented by a count from 0x02-0x7f, corresponding to data rates in increments of 500Kb/s from 1 Mb/s to 63.5 Mb/s.')
cd11IfSuppDataRatesPrivacyEnabl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyEnabl.setStatus('current')
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyEnabl.setDescription('This object indicates whether WEP encryption is supported by the radio for both transmit and receive operations at the corresponding bit rate specified by the cd11IfSuppDataRatesPrivacyValue.')
cd11IfChanSelectTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12), )
if mibBuilder.loadTexts: cd11IfChanSelectTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 15.4.6.2.')
if mibBuilder.loadTexts: cd11IfChanSelectTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfChanSelectTable.setDescription('This table specifies for each 802.11 channel, whether the scanning process controlled by the cd11IfPhyDsssChannelAutoEnable can select a particular channel for use. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfChanSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfChanSelectChannel"))
if mibBuilder.loadTexts: cd11IfChanSelectEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfChanSelectEntry.setDescription('Each entry specifies if a particular radio channel is enabled on a radio interface.')
cd11IfChanSelectChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(34, 34), ValueRangeConstraint(36, 36), ValueRangeConstraint(38, 38), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ValueRangeConstraint(46, 46), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(149, 149), ValueRangeConstraint(153, 153), ValueRangeConstraint(157, 157), ValueRangeConstraint(161, 161), )))
if mibBuilder.loadTexts: cd11IfChanSelectChannel.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, section 15.4.6.2.')
if mibBuilder.loadTexts: cd11IfChanSelectChannel.setStatus('current')
if mibBuilder.loadTexts: cd11IfChanSelectChannel.setDescription('This object specifies an IEEE 802.11 channel number which is a candidate for low-occupancy scanning.')
cd11IfChanSelectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfChanSelectEnable.setStatus('current')
if mibBuilder.loadTexts: cd11IfChanSelectEnable.setDescription("If the value is 'true', cd11IfChanSelectChannel is available for the system to use as its cd11IfPhyDsssCurrentChannel after scanning for channel occupancy. If the value is 'false', cd11IfChanSelectChannel is not available. The default value is 'true'.")
cd11IfClientTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13), )
if mibBuilder.loadTexts: cd11IfClientTxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerTable.setDescription('This table shows the recommended client transmit power level for the radio and selects one of the levels as the desired transmit power level to be used by the client of the radio. By adjusting the transmit power, the radio can limit the interference caused by adjacent clients using the same or adjacent channels.')
cd11IfClientTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfClientTxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerEntry.setDescription('Each entry specifies the number of available transmit power levels, the values of all the levels, and the selected level for a radio interface.')
cd11IfClientNumberTxPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientNumberTxPowerLevels.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientNumberTxPowerLevels.setDescription('The number of power levels available for the clients. This attribute can have a value of 1 to 8.')
cd11IfClientTxPowerLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel1.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel1.setDescription('The client transmit output power for LEVEL1 in mW or dBm.')
cd11IfClientTxPowerLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel2.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel2.setDescription('The client transmit output power for LEVEL2 in mW or dBm.')
cd11IfClientTxPowerLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel3.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel3.setDescription('The client transmit output power for LEVEL3 in mW or dBm.')
cd11IfClientTxPowerLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel4.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel4.setDescription('The client transmit output power for LEVEL4 in mW or dBm.')
cd11IfClientTxPowerLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel5.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel5.setDescription('The client transmit output power for LEVEL5 in mW or dBm.')
cd11IfClientTxPowerLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel6.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel6.setDescription('The client transmit output power for LEVEL6 in mW or dBm.')
cd11IfClientTxPowerLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel7.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel7.setDescription('The client transmit output power for LEVEL7 in mW or dBm.')
cd11IfClientTxPowerLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel8.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel8.setDescription('The client transmit output power for LEVEL8 in mW or dBm.')
cd11IfClientCurrentTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfClientCurrentTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cd11IfClientCurrentTxPowerLevel.setDescription('The TxPowerLevel N currently selected for client to transmit data. It is up to the clients to honor this transmit power setting.')
cd11IfErpOfdmTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14), )
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerTable.setDescription('This table shows the available ERP-OFDM transmit power levels for radios implementing IEEE 802.11g Protocol and configures one of the levels as the transmit power level. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71) and the corresponding cd11IfPhyMacSpecification is ieee802dot11g(3). For all IEEE802.11g radios with an entry in this table, the IEEE802dot11-MIB dot11PhyTxPowerTable will be used to configure ERP-CCK transmit power levels.')
cd11IfErpOfdmTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerEntry.setDescription('Each entry specifies the number of available transmit power levels, the values of all the levels, and the configured transmit power level for an IEEE 802.11g radio interface.')
cd11IfErpOfdmNumberTxPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmNumberTxPowerLevels.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmNumberTxPowerLevels.setDescription('The number of power levels available for this radio. This attribute can have a value of 1 to 8.')
cd11IfErpOfdmTxPowerLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel1.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel1.setDescription('The ERP-OFDM transmit output power for LEVEL1.')
cd11IfErpOfdmTxPowerLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel2.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel2.setDescription('The ERP-OFDM transmit output power for LEVEL2.')
cd11IfErpOfdmTxPowerLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel3.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel3.setDescription('The ERP-OFDM transmit output power for LEVEL3.')
cd11IfErpOfdmTxPowerLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel4.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel4.setDescription('The ERP-OFDM transmit output power for LEVEL4.')
cd11IfErpOfdmTxPowerLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel5.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel5.setDescription('The ERP-OFDM transmit output power for LEVEL5.')
cd11IfErpOfdmTxPowerLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel6.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel6.setDescription('The ERP-OFDM transmit output power for LEVEL6.')
cd11IfErpOfdmTxPowerLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel7.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel7.setDescription('The ERP-OFDM transmit output power for LEVEL7.')
cd11IfErpOfdmTxPowerLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel8.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel8.setDescription('The ERP-OFDM transmit output power for LEVEL8.')
cd11IfErpOfdmCurrentTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfErpOfdmCurrentTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cd11IfErpOfdmCurrentTxPowerLevel.setDescription('The TxPowerLevel N currently configured to transmit data.')
cd11IfFrequencyBandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15), )
if mibBuilder.loadTexts: cd11IfFrequencyBandTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfFrequencyBandTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfFrequencyBandTable.setDescription('This table identifies the radio frequency (sub)bands supported on the IEEE 802.11 radio interfaces while operating per the regulations imposed by the cd11IfCurrentCarrierSet. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). This table uses the cd11IfRfFrequencyBand as the expansion index. All entries in this table are created or deleted only by the agent.')
cd11IfFrequencyBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBand"))
if mibBuilder.loadTexts: cd11IfFrequencyBandEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfFrequencyBandEntry.setDescription('Each entry defines a supported radio frequency band for an IEEE 802.11 radio interface.')
cd11IfRfFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cd11IfRfFrequencyBand.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfFrequencyBand.setDescription('This object identifies radio frequency bands supported on the radio.')
cd11IfRfFrequencyUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mHz", 1))).clone('mHz')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfFrequencyUnits.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfFrequencyUnits.setDescription("This base frequency units combines with the cd11IfRfStartChannelFrequency to define the actual frequency of the channel and combines with the cd11IfRfFrequencySpacing to define the minimum frequency spacing between two adjacent frequency channels. For example, frequency spacing of 5 MHz is 'mHz' in cd11IfRfFrequencyUnits and 5 in cd11IfRfFrequencySpacing.")
cd11IfRfStartChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfStartChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfStartChannelNumber.setDescription('Numeric identifier of the first channel supported in this radio frequency band. For example, currently at the 2.4 GHz ISM band, the first channel number is 1, while for the U-NII-1 band in the FCC regulatory domain, the first supported channel is number 36 at frequency 5180 MHz.')
cd11IfRfEndChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfEndChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfEndChannelNumber.setDescription('Numeric identifier of the last channel supported in this radio frequency band. For example, in the FCC regulatory domain, the last channel of the 2.4 GHz ISM band is number 11 and the last channel of the U-NII-1 band is number 48 at frequency 5240 MHz.')
cd11IfRfChannelSpacingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfChannelSpacingNumber.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfChannelSpacingNumber.setDescription('Numeric spacing between the identifiers of two adjacent supported channels in this band. For example, currently at the 2.4 GHz ISM band, the numeric channel spacing is 1, resulting in a channel identifier sequence of 1, 2, 3, etc. In the U-NII-1 band, the numeric channel spacing is 4, resulting in a channel identifier sequence of 36, 40, 44, etc.')
cd11IfRfStartChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfStartChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfStartChannelFrequency.setDescription("This is the base channel frequency of the cd11IfRfStartChannelNumber channel from which subsequent channels of this frequency band are defined. The actual frequency value is defined and calculated by multiplying this object with the cd11IfRfFrequencyUnits. The subsequent channels in the band are calculated by adding the cd11IfRfChannelSpacingNumber multiplied by the cd11IfRfFrequencySpacing to this object value. For example, the first channel of U-NII-1 band is channel 36, the cd11IfRfFrequencyUnits is 'mHz', the cd11IfRfStartChannelFrequency is '5180', and the cd11IfRfChannelSpacingNumber is 4. If the cd11IfRfFrequencySpacing is 5 MHz, the second supported channel of the U-NII-1 band will be channel 40 at frequency 5200 MHz.")
cd11IfRfFrequencySpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfFrequencySpacing.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfFrequencySpacing.setDescription("This is the frequency separation between two adjacent radio frequency channels. The actual frequency value is calculated by multiplying this object with the cd11IfRfFrequencyUnits. For example, for a frequency spacing of 5 MHz, the value of cd11IfRfFrequencyUnits is 'mHz' and the value of this object is 5.")
cd11IfRfFrequencyBandType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 8), CDot11RadioFrequencyBandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfFrequencyBandType.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfFrequencyBandType.setDescription('This is the enumerated radio frequency band name(s) which this (sub)band occupies. If the frequency band defined in a table row is not included in the current CDot11RadioFrequencyBandType definition, none of the bits are set for this object.')
cd11IfMaxChannelSwitchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfMaxChannelSwitchTime.setStatus('current')
if mibBuilder.loadTexts: cd11IfMaxChannelSwitchTime.setDescription('The maximum time required for the radio interface to switch its transceiver from one channel to any other supported channel in any supported band.')
cd11IfNativeTxPowerSupportTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16), )
if mibBuilder.loadTexts: cd11IfNativeTxPowerSupportTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeTxPowerSupportTable.setDescription('This table shows the transmit powers supported for all the radio frequency bands on the IEEE 802.11 radios. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). This table uses the cd11IfRfFrequencyBand of cd11IfFrequencyBandTable, cd11IfRadioModulationClass, and cd11IfNativeTxPowerLevel as the expansion indices. All entries in this table can only be created or deleted by the agent.')
cd11IfNativeTxPowerSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBand"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRadioModulationClass"), (0, "CISCO-DOT11-IF-MIB", "cd11IfNativeTxPowerLevel"))
if mibBuilder.loadTexts: cd11IfNativeTxPowerSupportEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeTxPowerSupportEntry.setDescription('Each entry specifies a supported transmit power level for a frequency band, with a specified modulation technique, on the IEEE 802.11 radio interface.')
cd11IfRadioModulationClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1, 1), CDot11RadioModulationClass())
if mibBuilder.loadTexts: cd11IfRadioModulationClass.setStatus('current')
if mibBuilder.loadTexts: cd11IfRadioModulationClass.setDescription('This identifies a radio modulation technique used by the 802.11 radio interface.')
cd11IfNativeTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cd11IfNativeTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeTxPowerLevel.setDescription('This is the unique index for a transmit power of a radio frequency band for the radio.')
cd11IfNativeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfNativeTxPower.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeTxPower.setDescription("This is a transmit power available at a radio frequency band for the radio, when using the modulation technique specified by the cd11IfRadioModulationClass. The value of the cd11IfNativeTxPowerUnits defines the units of this transmit power. The value can be negative if the units is 'dBm'.")
cd11IfRfNativePowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17), )
if mibBuilder.loadTexts: cd11IfRfNativePowerTable.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfRfNativePowerTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfNativePowerTable.setDescription('This table configures the radio power settings for frequency bands supported on the IEEE 802.11 radios. This table serves as an alternative for the IEEE802dot11-MIB dot11PhyTxPowerTable. This table allows different transmit powers to be used on different radio frequency bands. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). This table uses the cd11IfRfFrequencyBand and cd11IfRadioModulationClass as the expansion indices. All entries in this table are created or deleted only by the agent.')
cd11IfRfNativePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBand"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRadioModulationClass"))
if mibBuilder.loadTexts: cd11IfRfNativePowerEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfRfNativePowerEntry.setDescription('Each entry specifies the transmit power settings of a particular radio frequency band, with a specified modulation technique, for an IEEE 802.11 radio interface.')
cd11IfNativeNumberPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfNativeNumberPowerLevels.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeNumberPowerLevels.setDescription('The number of transmit power levels of a radio frequency band for the radio. The value of this object should be the same as the maximum cd11IfNativeTxPowerLevel of the same ifIndex, cd11IfRadioFrequencyBand, and cd11IfRadioModulationClass. If the value of this object is 0, the radio can only receive, not transmit, on this frequency band and modulation technique.')
cd11IfNativeCurrentPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfNativeCurrentPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeCurrentPowerLevel.setDescription("If cd11IfPhyNativePowerUseStandard is 'false', this object configures the current transmit power level of a radio frequency band for the radio. The value shall be one of the supported cd11IfNativeTxPowerLevel for the radio of the the same frequency band and modulation technique. For any radio does not transmit power in the specified radio frequency band and modulation technique, the value of this object is 0.")
cd11IfNativePowerUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mW", 1), ("dBm", 2))).clone('mW')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfNativePowerUnits.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfNativePowerUnits.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativePowerUnits.setDescription("The native transmit power units implemented on the radio. It is the units for the cd11IfNativeTxPower. For the IEEE802dot11-MIB dot11PhyTxPowerTable, 'mW' is the only supported units.")
cd11IfDataRatesSensitivityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18), )
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityTable.setDescription('This table specifies the receive sensitivity specifications of IEEE 802.11 radio interfaces. This table has an expansion dependent relationship on the ifTable. For each entry in this table, there exists at least an entry in the ifTable of ifType ieee80211(71). This table uses the cd11IfRadioModulationClass and IEEE802dot11-MIB dot11SupportedDataRatesRxIndex as the expansion indices. Entries in this table cannot be created or deleted by the network management system. All entries are created or deleted by the agent.')
cd11IfDataRatesSensitivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRadioModulationClass"), (0, "IEEE802dot11-MIB", "dot11SupportedDataRatesRxIndex"))
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityEntry.setDescription('Each entry specifies the receive sensitivity of an IEEE 802.11 radio interface, with a specified modulation technique, for each supported data rate identified by the dot11SupportedDataRatesRxIndex.')
cd11IfRatesSensRequiredSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18, 1, 1), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRatesSensRequiredSnr.setStatus('current')
if mibBuilder.loadTexts: cd11IfRatesSensRequiredSnr.setDescription('The minimum SNR requirement for each data rate supported by a radio interface, when using the modulation technique specified by cd11IfRadioModulationClass. This is the required carrier to noise difference.')
cd11IfRatesSensContention = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRatesSensContention.setStatus('current')
if mibBuilder.loadTexts: cd11IfRatesSensContention.setDescription('The average contention sensitivity level for each data rate supported by a radio interface, when using the modulation technique specified by cd11IfRadioModulationClass. This is the value where 50% of the packets are received successfully.')
cd11IfMacLayerCountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cd11IfMacLayerCountersTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfMacLayerCountersTable.setDescription('This table includes MAC layer statistics collected by the IEEE 802.11 radio interface. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71).')
cd11IfMacLayerCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfMacLayerCountersEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfMacLayerCountersEntry.setDescription('Each entry contains counters of frame transmissions for a radio interface.')
cd11IfTransDeferEnerDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfTransDeferEnerDetects.setStatus('current')
if mibBuilder.loadTexts: cd11IfTransDeferEnerDetects.setDescription('This counter shall increment when a frame transmission is deferred due to energy detection.')
cd11IfRecFrameMacCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRecFrameMacCrcErrors.setStatus('current')
if mibBuilder.loadTexts: cd11IfRecFrameMacCrcErrors.setDescription('This counter shall increment when a frame received has any MAC CRC error.')
cd11IfSsidMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfSsidMismatches.setReference('IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB.')
if mibBuilder.loadTexts: cd11IfSsidMismatches.setStatus('current')
if mibBuilder.loadTexts: cd11IfSsidMismatches.setDescription('This counter shall increment when a beacon or probe response frame received for which the SSIDs in the frame do not match the IEEE802dot11-MIB dot11DesiredSSID object.')
cd11IfRogueApDetectedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2), )
if mibBuilder.loadTexts: cd11IfRogueApDetectedTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfRogueApDetectedTable.setDescription('This table includes rogue AP detected information collected by the IEEE 802.11 radio interface and 802.11 system management. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71).')
cd11IfRogueApDetectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRogueApMacAddr"))
if mibBuilder.loadTexts: cd11IfRogueApDetectedEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfRogueApDetectedEntry.setDescription('Each entry contains information of a rogue AP detected by a radio interface.')
cd11IfRogueApMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: cd11IfRogueApMacAddr.setStatus('current')
if mibBuilder.loadTexts: cd11IfRogueApMacAddr.setDescription('This is the MAC address of a rogue access point detected by this radio.')
cd11IfRogueApName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRogueApName.setStatus('current')
if mibBuilder.loadTexts: cd11IfRogueApName.setDescription('This is the name of the rogue access point.')
cd11IfStationSwitchOverNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 272, 0, 1)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfLocalRadioMonitorStatus"))
if mibBuilder.loadTexts: cd11IfStationSwitchOverNotif.setStatus('current')
if mibBuilder.loadTexts: cd11IfStationSwitchOverNotif.setDescription("This notification will be sent when a radio interface changes the cd11IfLocalRadioMonitorStatus from 'monitor' to 'active'.")
cd11IfRogueApDetectedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 272, 0, 2)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRogueApName"))
if mibBuilder.loadTexts: cd11IfRogueApDetectedNotif.setStatus('current')
if mibBuilder.loadTexts: cd11IfRogueApDetectedNotif.setDescription('This notification will be sent when a radio interface detects a new rogue AP and causes a new row to be added to the cd11IfRogueApDetectedTable.')
ciscoDot11IfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 3))
ciscoDot11IfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1))
ciscoDot11IfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2))
ciscoDot11IfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 1)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfManagementGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDomainCapabilityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfCompliance = ciscoDot11IfCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11IfCompliance.setDescription('The compliance statement for the cd11IfManagement, cd11IfPhyConfig, cd11IfMacStatisticsGroup, and cd11IfDomainCapabilityGroup groups.')
ciscoDot11IfComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 2)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev1 = ciscoDot11IfComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11IfComplianceRev1.setDescription('The compliance statement of the ciscoDot11IfMIB module.')
ciscoDot11IfComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 3)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDataRatesSensitivityGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMonitorNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev2 = ciscoDot11IfComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11IfComplianceRev2.setDescription('The compliance statement of the ciscoDot11IfMIB module.')
ciscoDot11IfComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 4)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDataRatesSensitivityGroup"), ("CISCO-DOT11-IF-MIB", "cd11Ifdot11UpgradeStatusGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMonitorNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev3 = ciscoDot11IfComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11IfComplianceRev3.setDescription('The compliance statement of the ciscoDot11IfMIB module.')
ciscoDot11IfComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 5)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDataRatesSensitivityGroup"), ("CISCO-DOT11-IF-MIB", "cd11Ifdot11UpgradeStatusGroup"), ("CISCO-DOT11-IF-MIB", "cd11Ifdot11MobileStationScanGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMonitorNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev4 = ciscoDot11IfComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11IfComplianceRev4.setDescription('The compliance statement of the ciscoDot11IfMIB module.')
cd11IfManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 1)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationRole"), ("CISCO-DOT11-IF-MIB", "cd11IfCiscoExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAllowBroadcastSsidAssoc"), ("CISCO-DOT11-IF-MIB", "cd11IfPrivacyOptionMaxRate"), ("CISCO-DOT11-IF-MIB", "cd11IfEthernetEncapsulDefault"), ("CISCO-DOT11-IF-MIB", "cd11IfBridgeSpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxiliarySsidLength"), ("CISCO-DOT11-IF-MIB", "cd11IfVoipExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireMacAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredBssAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidBroadcastSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireMac"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfAssignedSta"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfManagementGroup = cd11IfManagementGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfManagementGroup.setDescription('Information to support management of IEEE 802.11 protocol interfaces.')
cd11IfPhyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 2)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfCurrentCarrierSet"), ("CISCO-DOT11-IF-MIB", "cd11IfModulationType"), ("CISCO-DOT11-IF-MIB", "cd11IfPreambleType"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyFhssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssChannelAutoEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssCurrentChannel"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyEnabl"), ("CISCO-DOT11-IF-MIB", "cd11IfChanSelectEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyConfigGroup = cd11IfPhyConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfPhyConfigGroup.setDescription('Information to support configuration of IEEE 802.11 protocol Physical layer.')
cd11IfMacStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 3)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfTransDeferEnerDetects"), ("CISCO-DOT11-IF-MIB", "cd11IfRecFrameMacCrcErrors"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidMismatches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfMacStatisticsGroup = cd11IfMacStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfMacStatisticsGroup.setDescription('Statistics information on IEEE 802.11 radio interface MAC layer.')
cd11IfVlanEncryptKeyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 4)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfVlanEncryptKeyConfigGroup = cd11IfVlanEncryptKeyConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyConfigGroup.setDescription('WEP key configuration for specific VLANs on IEEE 802.11 radio interface.')
cd11IfDomainCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 5)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfDomainCapabilitySet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfDomainCapabilityGroup = cd11IfDomainCapabilityGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfDomainCapabilityGroup.setDescription('This object class provides the objects necessary to manage the channels and transmit power usable by a radio within its regulatory domain.')
cd11IfPhyMacCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 6)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfPhyBasicRateSet"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyMacSpecification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyMacCapabilityGroup = cd11IfPhyMacCapabilityGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfPhyMacCapabilityGroup.setDescription('This object class provides the objects necessary to manage the Basic Rate capability applied to the defined operational data rate and and IEEE 802.11 Standard applied to the radio.')
cd11IfAuthAlgMethodListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 7)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgMacAddrMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgMacMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfAuthAlgMethodListGroup = cd11IfAuthAlgMethodListGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfAuthAlgMethodListGroup.setDescription('This object class provides the objects necessary to specify the authentication method applied to MAC address or EAP authentications.')
cd11IfRadioManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 8)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationRole"), ("CISCO-DOT11-IF-MIB", "cd11IfCiscoExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPrivacyOptionMaxRate"), ("CISCO-DOT11-IF-MIB", "cd11IfEthernetEncapsulDefault"), ("CISCO-DOT11-IF-MIB", "cd11IfBridgeSpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfVoipExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxiliarySsidLength"), ("CISCO-DOT11-IF-MIB", "cd11IfAllowBroadcastSsidAssoc"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredBssAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAssignedSta"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldMode"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldModeCountry"), ("CISCO-DOT11-IF-MIB", "cd11IfMobileStationScanParent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfRadioManageGroup = cd11IfRadioManageGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cd11IfRadioManageGroup.setDescription('Information to manage IEEE 802.11 protocol radio interface settings.')
cd11IfAssociationManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 9)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireMacAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgMacAddrMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfAssociationManageGroup = cd11IfAssociationManageGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfAssociationManageGroup.setDescription('Information to manage IEEE 802.11 protocol interface desired SSID association and default encryption key settings.')
cd11IfSsidAssociationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 10)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfAuxSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidBroadcastSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireMac"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgMacMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfSsidAssociationGroup = cd11IfSsidAssociationGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfSsidAssociationGroup.setDescription('Information to manage IEEE 802.11 protocol interface SSID association and authentication settings.')
cd11IfVlanManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 11)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyStatus"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyTransmit"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityVlanEnabled"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanBcastKeyChangeInterval"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanBcastKeyCapabilChange"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanBcastKeyClientLeave"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityCiphers"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfVlanManageGroup = cd11IfVlanManageGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanManageGroup.setDescription('Information to manage IEEE 802.11 protocol interface VLAN and encryption settings.')
cd11IfRemoteMonitoringGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 12)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRadioMonitorPollingFreq"), ("CISCO-DOT11-IF-MIB", "cd11IfRadioMonitorPollingTimeOut"), ("CISCO-DOT11-IF-MIB", "cd11IfLocalRadioMonitorStatus"), ("CISCO-DOT11-IF-MIB", "cd11IfRadioMonitorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfRemoteMonitoringGroup = cd11IfRemoteMonitoringGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfRemoteMonitoringGroup.setDescription('Information to manage IEEE 802.11 protocol interface remote radio monitoring settings.')
cd11IfPhyConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 13)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfCurrentCarrierSet"), ("CISCO-DOT11-IF-MIB", "cd11IfModulationType"), ("CISCO-DOT11-IF-MIB", "cd11IfPreambleType"), ("CISCO-DOT11-IF-MIB", "cd11IfDomainCapabilitySet"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyBasicRateSet"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyMacSpecification"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConcatenation"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssChannelAutoEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssCurrentChannel"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyFhssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyEnabl"), ("CISCO-DOT11-IF-MIB", "cd11IfChanSelectEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfClientNumberTxPowerLevels"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel1"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel2"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel3"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel4"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel5"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel6"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel7"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel8"), ("CISCO-DOT11-IF-MIB", "cd11IfClientCurrentTxPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyConfigGroupRev1 = cd11IfPhyConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyConfigGroupRev1.setDescription('Information to configure IEEE 802.11 protocol Physical layer settings.')
cd11IfPhyErpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 14)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmNumberTxPowerLevels"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel1"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel2"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel3"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel4"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel5"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel6"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel7"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel8"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmCurrentTxPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyErpConfigGroup = cd11IfPhyErpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfPhyErpConfigGroup.setDescription('Information to configure IEEE 802.11g protocol Physical layer settings.')
cd11IfVlanWepManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 15)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptionMode"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepEncryptOptions"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepEncryptMic"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepEncryptKeyHashing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfVlanWepManageGroup = cd11IfVlanWepManageGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfVlanWepManageGroup.setDescription('Information to manage IEEE 802.11 protocol interface VLAN WEP encryption settings.')
cd11IfRogueApDetectedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 16)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRogueApName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfRogueApDetectedGroup = cd11IfRogueApDetectedGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfRogueApDetectedGroup.setDescription('Rogue AP detection information.')
cd11IfStationManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 17)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationRole"), ("CISCO-DOT11-IF-MIB", "cd11IfCiscoExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPrivacyOptionMaxRate"), ("CISCO-DOT11-IF-MIB", "cd11IfEthernetEncapsulDefault"), ("CISCO-DOT11-IF-MIB", "cd11IfBridgeSpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfVoipExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxiliarySsidLength"), ("CISCO-DOT11-IF-MIB", "cd11IfAllowBroadcastSsidAssoc"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredBssAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAssignedSta"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldMode"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldModeCountry"), ("CISCO-DOT11-IF-MIB", "cd11IfMobileStationScanParent"), ("CISCO-DOT11-IF-MIB", "cd11IfPsPacketForwardEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfMultipleBssidEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanPsPacketForwardEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfStationManageGroup = cd11IfStationManageGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfStationManageGroup.setDescription('Information to manage IEEE 802.11 protocol radio interface settings.')
cd11IfNativeRadioManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 18)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfPhyNativePowerUseStandard"), ("CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyUnits"), ("CISCO-DOT11-IF-MIB", "cd11IfRfStartChannelNumber"), ("CISCO-DOT11-IF-MIB", "cd11IfRfEndChannelNumber"), ("CISCO-DOT11-IF-MIB", "cd11IfRfChannelSpacingNumber"), ("CISCO-DOT11-IF-MIB", "cd11IfRfStartChannelFrequency"), ("CISCO-DOT11-IF-MIB", "cd11IfRfFrequencySpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBandType"), ("CISCO-DOT11-IF-MIB", "cd11IfMaxChannelSwitchTime"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeNumberPowerLevels"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeCurrentPowerLevel"), ("CISCO-DOT11-IF-MIB", "cd11IfNativePowerUnits"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeTxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfNativeRadioManageGroup = cd11IfNativeRadioManageGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfNativeRadioManageGroup.setDescription('Native parameters to manage IEEE 802.11 radio power and frequency bands.')
cd11IfDataRatesSensitivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 19)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRatesSensRequiredSnr"), ("CISCO-DOT11-IF-MIB", "cd11IfRatesSensContention"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfDataRatesSensitivityGroup = cd11IfDataRatesSensitivityGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityGroup.setDescription('Receive sensitivity specification for IEEE 802.11 radios.')
cd11IfMonitorNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 20)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationSwitchOverNotif"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfMonitorNotificationGroup = cd11IfMonitorNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cd11IfMonitorNotificationGroup.setDescription('The notification group for this module.')
cd11Ifdot11UpgradeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 21)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfDot11UpgradeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11Ifdot11UpgradeStatusGroup = cd11Ifdot11UpgradeStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cd11Ifdot11UpgradeStatusGroup.setDescription('This collection of objects provide information about the status of upgrade of the dot11 radios to operate in the new frequency set. ')
cd11Ifdot11MobileStationScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 22)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfMobileStationListIgnore"), ("CISCO-DOT11-IF-MIB", "cd11IfMobileStationScanChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11Ifdot11MobileStationScanGroup = cd11Ifdot11MobileStationScanGroup.setStatus('current')
if mibBuilder.loadTexts: cd11Ifdot11MobileStationScanGroup.setDescription('This collection of objects provide information about the limited channel to scan and Ignore List. ')
mibBuilder.exportSymbols("CISCO-DOT11-IF-MIB", cd11IfAuxSsidAuthAlgTable=cd11IfAuxSsidAuthAlgTable, cd11IfClientTxPowerTable=cd11IfClientTxPowerTable, cd11IfAuxSsidAuthAlgEntry=cd11IfAuxSsidAuthAlgEntry, cd11IfPhyNativePowerUseStandard=cd11IfPhyNativePowerUseStandard, cd11IfRfFrequencyUnits=cd11IfRfFrequencyUnits, cd11IfRfEndChannelNumber=cd11IfRfEndChannelNumber, cd11IfRfNativePowerTable=cd11IfRfNativePowerTable, cd11IfClientTxPowerLevel5=cd11IfClientTxPowerLevel5, cd11IfPhyFhssEntry=cd11IfPhyFhssEntry, cd11IfDesiredBssAddr=cd11IfDesiredBssAddr, cd11IfAuxSsidWepPermuteAlg=cd11IfAuxSsidWepPermuteAlg, cd11IfErpOfdmTxPowerLevel2=cd11IfErpOfdmTxPowerLevel2, cd11IfAuthAlgRequireMacAddr=cd11IfAuthAlgRequireMacAddr, cd11IfChanSelectEntry=cd11IfChanSelectEntry, cd11IfChanSelectEnable=cd11IfChanSelectEnable, cd11IfNativeTxPowerSupportEntry=cd11IfNativeTxPowerSupportEntry, cd11IfStationRole=cd11IfStationRole, cd11IfAuthAlgDefaultVlan=cd11IfAuthAlgDefaultVlan, cd11IfPreambleType=cd11IfPreambleType, cd11IfDataRatesSensitivityEntry=cd11IfDataRatesSensitivityEntry, cd11IfVlanEncryptKeyTable=cd11IfVlanEncryptKeyTable, ciscoDot11IfMIBGroups=ciscoDot11IfMIBGroups, cd11IfMaxChannelSwitchTime=cd11IfMaxChannelSwitchTime, ciscoDot11IfMIBObjects=ciscoDot11IfMIBObjects, cd11IfStationManageGroup=cd11IfStationManageGroup, cd11IfStatistics=cd11IfStatistics, cd11IfPhyOperationEntry=cd11IfPhyOperationEntry, cd11IfClientTxPowerLevel1=cd11IfClientTxPowerLevel1, cd11IfVlanWepEncryptKeyHashing=cd11IfVlanWepEncryptKeyHashing, cd11IfPhyOperationTable=cd11IfPhyOperationTable, cd11IfRfNativePowerEntry=cd11IfRfNativePowerEntry, cd11IfPhyMacCapabilityGroup=cd11IfPhyMacCapabilityGroup, WepKeyType128=WepKeyType128, Cd11IfDot11UpgradeStatus=Cd11IfDot11UpgradeStatus, cd11IfPhyDsssMaxCompatibleRate=cd11IfPhyDsssMaxCompatibleRate, cd11IfVlanSecurityCiphers=cd11IfVlanSecurityCiphers, cd11IfPhyFhssMaxCompatibleRate=cd11IfPhyFhssMaxCompatibleRate, cd11IfCiscoExtensionsEnable=cd11IfCiscoExtensionsEnable, cd11IfPhyErpConfigGroup=cd11IfPhyErpConfigGroup, cd11IfAuxSsidAuthAlgRequireEap=cd11IfAuxSsidAuthAlgRequireEap, cd11IfVlanSecurityTable=cd11IfVlanSecurityTable, cd11IfVlanEncryptKeyLen=cd11IfVlanEncryptKeyLen, cd11IfWepDefaultKeysEntry=cd11IfWepDefaultKeysEntry, cd11IfMacStatistics=cd11IfMacStatistics, cd11IfMobileStationScanParent=cd11IfMobileStationScanParent, cd11IfMacStatisticsGroup=cd11IfMacStatisticsGroup, cd11IfTransDeferEnerDetects=cd11IfTransDeferEnerDetects, cd11IfAuxSsidAuthAlgMacMethod=cd11IfAuxSsidAuthAlgMacMethod, CDot11IfWepKeyPermuteAlgorithm=CDot11IfWepKeyPermuteAlgorithm, cd11IfAuxSsidEntry=cd11IfAuxSsidEntry, cd11IfRogueApDetectedTable=cd11IfRogueApDetectedTable, cd11IfRadioMonitoringTable=cd11IfRadioMonitoringTable, cd11IfRogueApName=cd11IfRogueApName, PYSNMP_MODULE_ID=ciscoDot11IfMIB, cd11IfRogueApMacAddr=cd11IfRogueApMacAddr, cd11IfRadioManageGroup=cd11IfRadioManageGroup, cd11IfClientCurrentTxPowerLevel=cd11IfClientCurrentTxPowerLevel, cd11IfDot11UpgradeStatusEntry=cd11IfDot11UpgradeStatusEntry, cd11Ifdot11MobileStationScanGroup=cd11Ifdot11MobileStationScanGroup, cd11IfRadioMonitoringEntry=cd11IfRadioMonitoringEntry, CDot11IfMicAlgorithm=CDot11IfMicAlgorithm, cd11IfAuxSsidAuthAlgRequireMac=cd11IfAuxSsidAuthAlgRequireMac, cd11IfPhyDsssEntry=cd11IfPhyDsssEntry, cd11IfClientTxPowerLevel4=cd11IfClientTxPowerLevel4, cd11IfClientNumberTxPowerLevels=cd11IfClientNumberTxPowerLevels, cd11IfAuxSsidAuthAlgDefaultVlan=cd11IfAuxSsidAuthAlgDefaultVlan, cd11IfRatesSensRequiredSnr=cd11IfRatesSensRequiredSnr, cd11IfAuxiliarySsidLength=cd11IfAuxiliarySsidLength, cd11IfRecFrameMacCrcErrors=cd11IfRecFrameMacCrcErrors, cd11IfRadioMonitorRowStatus=cd11IfRadioMonitorRowStatus, cd11IfRfChannelSpacingNumber=cd11IfRfChannelSpacingNumber, cd11IfFrequencyBandTable=cd11IfFrequencyBandTable, ciscoDot11IfMIBCompliances=ciscoDot11IfMIBCompliances, cd11IfAuxSsidTable=cd11IfAuxSsidTable, cd11IfVlanEncryptKeyIndex=cd11IfVlanEncryptKeyIndex, ciscoDot11IfComplianceRev1=ciscoDot11IfComplianceRev1, cd11IfMacLayerCountersTable=cd11IfMacLayerCountersTable, cd11IfLocalRadioMonitorStatus=cd11IfLocalRadioMonitorStatus, cd11IfErpOfdmCurrentTxPowerLevel=cd11IfErpOfdmCurrentTxPowerLevel, cd11IfAuthAlgorithmEntry=cd11IfAuthAlgorithmEntry, cd11IfDot11UpgradeStatus=cd11IfDot11UpgradeStatus, cd11IfVlanEncryptKeyEntry=cd11IfVlanEncryptKeyEntry, cd11Ifdot11UpgradeStatusGroup=cd11Ifdot11UpgradeStatusGroup, cd11IfDesiredBssEntry=cd11IfDesiredBssEntry, cd11IfSsidAssociationGroup=cd11IfSsidAssociationGroup, cd11IfDataRatesSensitivityGroup=cd11IfDataRatesSensitivityGroup, cd11IfSuppDataRatesPrivacyEntry=cd11IfSuppDataRatesPrivacyEntry, cd11IfRemoteMonitoringGroup=cd11IfRemoteMonitoringGroup, cd11IfMonitorNotificationGroup=cd11IfMonitorNotificationGroup, cd11IfWorldMode=cd11IfWorldMode, cd11IfAuthAlgMethodListGroup=cd11IfAuthAlgMethodListGroup, cd11IfSuppDataRatesPrivacyEnabl=cd11IfSuppDataRatesPrivacyEnabl, cd11IfWepDefaultKeyValue=cd11IfWepDefaultKeyValue, cd11IfWepDefaultKeyLen=cd11IfWepDefaultKeyLen, cd11IfVlanSecurityVlanId=cd11IfVlanSecurityVlanId, cd11IfEthernetEncapsulDefault=cd11IfEthernetEncapsulDefault, cd11IfAssignedAidTable=cd11IfAssignedAidTable, cd11IfAssignedAidEntry=cd11IfAssignedAidEntry, cd11IfRfStartChannelFrequency=cd11IfRfStartChannelFrequency, cd11IfStationSwitchOverNotif=cd11IfStationSwitchOverNotif, cd11IfDot11UpgradeStatusTable=cd11IfDot11UpgradeStatusTable, cd11IfErpOfdmTxPowerLevel7=cd11IfErpOfdmTxPowerLevel7, cd11IfDesiredSsidMaxAssocSta=cd11IfDesiredSsidMaxAssocSta, cd11IfSuppDataRatesPrivacyTable=cd11IfSuppDataRatesPrivacyTable, cd11IfNativeTxPowerLevel=cd11IfNativeTxPowerLevel, cd11IfPhyConfigGroupRev1=cd11IfPhyConfigGroupRev1, ciscoDot11IfMIBNotifications=ciscoDot11IfMIBNotifications, cd11IfVlanEncryptKeyTransmit=cd11IfVlanEncryptKeyTransmit, cd11IfPhyConcatenation=cd11IfPhyConcatenation, cd11IfSuppDataRatesPrivacyValue=cd11IfSuppDataRatesPrivacyValue, cd11IfAuxSsidMaxAssocSta=cd11IfAuxSsidMaxAssocSta, cd11IfPhyBasicRateSet=cd11IfPhyBasicRateSet, cd11IfManagementGroup=cd11IfManagementGroup, cd11IfVlanEncryptKeyStatus=cd11IfVlanEncryptKeyStatus, cd11IfVlanBcastKeyClientLeave=cd11IfVlanBcastKeyClientLeave, cd11IfBridgeSpacing=cd11IfBridgeSpacing, CDot11RadioModulationClass=CDot11RadioModulationClass, cd11IfAuthAlgRequireEap=cd11IfAuthAlgRequireEap, cd11IfVlanEncryptKeyConfigGroup=cd11IfVlanEncryptKeyConfigGroup, CDot11IfCipherType=CDot11IfCipherType, cd11IfAssignedAid=cd11IfAssignedAid, cd11IfErpOfdmTxPowerLevel8=cd11IfErpOfdmTxPowerLevel8, cd11IfAuxSsidMicAlgorithm=cd11IfAuxSsidMicAlgorithm, cd11IfVlanWepEncryptOptions=cd11IfVlanWepEncryptOptions, cd11IfClientTxPowerLevel6=cd11IfClientTxPowerLevel6, cd11IfRadioModulationClass=cd11IfRadioModulationClass, cd11IfVlanPsPacketForwardEnable=cd11IfVlanPsPacketForwardEnable, cd11IfRfFrequencyBandType=cd11IfRfFrequencyBandType, cd11IfDesiredSsidMicAlgorithm=cd11IfDesiredSsidMicAlgorithm, cd11IfErpOfdmTxPowerLevel3=cd11IfErpOfdmTxPowerLevel3, cd11IfErpOfdmTxPowerLevel5=cd11IfErpOfdmTxPowerLevel5, ciscoDot11IfComplianceRev4=ciscoDot11IfComplianceRev4, cd11IfFrequencyBandEntry=cd11IfFrequencyBandEntry, cd11IfMacLayerCountersEntry=cd11IfMacLayerCountersEntry, cd11IfNativeRadioManageGroup=cd11IfNativeRadioManageGroup, CDot11IfVlanIdOrZero=CDot11IfVlanIdOrZero, cd11IfRadioMonitorPollingTimeOut=cd11IfRadioMonitorPollingTimeOut, cd11IfVlanWepEncryptMic=cd11IfVlanWepEncryptMic, cd11IfChanSelectChannel=cd11IfChanSelectChannel, cd11IfNativePowerUnits=cd11IfNativePowerUnits, cd11IfPhyDsssChannelAutoEnable=cd11IfPhyDsssChannelAutoEnable, cd11IfAssociationManageGroup=cd11IfAssociationManageGroup, cd11IfPrivacyOptionMaxRate=cd11IfPrivacyOptionMaxRate, cd11IfCurrentCarrierSet=cd11IfCurrentCarrierSet, cd11IfClientTxPowerLevel7=cd11IfClientTxPowerLevel7, cd11IfErpOfdmTxPowerLevel6=cd11IfErpOfdmTxPowerLevel6, cd11IfSuppDataRatesPrivacyIndex=cd11IfSuppDataRatesPrivacyIndex, cd11IfRfStartChannelNumber=cd11IfRfStartChannelNumber, CDot11RadioFrequencyBandType=CDot11RadioFrequencyBandType, cd11IfVlanManageGroup=cd11IfVlanManageGroup, cd11IfMultipleBssidEnable=cd11IfMultipleBssidEnable, cd11IfErpOfdmTxPowerLevel1=cd11IfErpOfdmTxPowerLevel1, cd11IfRogueApDetectedEntry=cd11IfRogueApDetectedEntry, cd11IfRfFrequencySpacing=cd11IfRfFrequencySpacing, cd11IfClientTxPowerLevel3=cd11IfClientTxPowerLevel3, cd11IfMobileStationListIgnore=cd11IfMobileStationListIgnore, ciscoDot11IfCompliance=ciscoDot11IfCompliance, cd11IfAssignedSta=cd11IfAssignedSta, ciscoDot11IfMIB=ciscoDot11IfMIB, cd11IfAuxSsidIndex=cd11IfAuxSsidIndex, cd11IfPhyFhssTable=cd11IfPhyFhssTable, cd11IfDomainCapabilitySet=cd11IfDomainCapabilitySet, cd11IfVlanEncryptionMode=cd11IfVlanEncryptionMode, cd11IfPhyConfigGroup=cd11IfPhyConfigGroup, cd11IfDesiredBssIndex=cd11IfDesiredBssIndex, cd11IfVoipExtensionsEnable=cd11IfVoipExtensionsEnable, cd11IfDesiredBssTable=cd11IfDesiredBssTable, cd11IfAuxSsidAuthAlgEapMethod=cd11IfAuxSsidAuthAlgEapMethod, cd11IfNativeTxPowerSupportTable=cd11IfNativeTxPowerSupportTable, cd11IfAuxSsidBroadcastSsid=cd11IfAuxSsidBroadcastSsid, cd11IfErpOfdmTxPowerLevel4=cd11IfErpOfdmTxPowerLevel4, ciscoDot11IfComplianceRev3=ciscoDot11IfComplianceRev3, cd11IfDataRatesSensitivityTable=cd11IfDataRatesSensitivityTable, cd11IfMobileStationScanChannel=cd11IfMobileStationScanChannel, cd11IfAuxSsid=cd11IfAuxSsid, cd11IfVlanSecurityEntry=cd11IfVlanSecurityEntry, cd11IfErpOfdmNumberTxPowerLevels=cd11IfErpOfdmNumberTxPowerLevels, cd11IfManagement=cd11IfManagement, cd11IfPsPacketForwardEnable=cd11IfPsPacketForwardEnable, cd11IfAllowBroadcastSsidAssoc=cd11IfAllowBroadcastSsidAssoc, cd11IfSsidMismatches=cd11IfSsidMismatches, cd11IfErpOfdmTxPowerEntry=cd11IfErpOfdmTxPowerEntry, cd11IfModulationType=cd11IfModulationType, cd11IfVlanBcastKeyCapabilChange=cd11IfVlanBcastKeyCapabilChange, cd11IfPhyDsssCurrentChannel=cd11IfPhyDsssCurrentChannel, cd11IfNativeNumberPowerLevels=cd11IfNativeNumberPowerLevels, cd11IfChanSelectTable=cd11IfChanSelectTable, cd11IfRadioMonitorPollingFreq=cd11IfRadioMonitorPollingFreq, cd11IfVlanWepManageGroup=cd11IfVlanWepManageGroup, ciscoDot11IfComplianceRev2=ciscoDot11IfComplianceRev2, cd11IfVlanId=cd11IfVlanId, cd11IfNativeTxPower=cd11IfNativeTxPower, cd11IfRogueApDetectedNotif=cd11IfRogueApDetectedNotif, cd11IfWorldModeCountry=cd11IfWorldModeCountry, cd11IfRemoteRadioMacAddr=cd11IfRemoteRadioMacAddr, cd11IfVlanSecurityRowStatus=cd11IfVlanSecurityRowStatus, cd11IfPhyDsssTable=cd11IfPhyDsssTable, cd11IfRfFrequencyBand=cd11IfRfFrequencyBand, cd11IfVlanBcastKeyChangeInterval=cd11IfVlanBcastKeyChangeInterval, cd11IfAuthAlgorithmTable=cd11IfAuthAlgorithmTable, cd11IfVlanSecurityVlanEnabled=cd11IfVlanSecurityVlanEnabled, cd11IfClientTxPowerEntry=cd11IfClientTxPowerEntry, cd11IfDomainCapabilityGroup=cd11IfDomainCapabilityGroup, ciscoDot11IfMIBConformance=ciscoDot11IfMIBConformance, cd11IfDesiredSsidWepPermuteAlg=cd11IfDesiredSsidWepPermuteAlg, cd11IfStationConfigTable=cd11IfStationConfigTable, cd11IfPhyConfig=cd11IfPhyConfig, cd11IfPhyMacSpecification=cd11IfPhyMacSpecification, cd11IfClientTxPowerLevel8=cd11IfClientTxPowerLevel8, cd11IfAuthAlgMacAddrMethod=cd11IfAuthAlgMacAddrMethod, cd11IfVlanEncryptKeyValue=cd11IfVlanEncryptKeyValue, cd11IfNativeCurrentPowerLevel=cd11IfNativeCurrentPowerLevel, cd11IfClientTxPowerLevel2=cd11IfClientTxPowerLevel2, cd11IfWepDefaultKeysTable=cd11IfWepDefaultKeysTable, cd11IfWepDefaultKeyIndex=cd11IfWepDefaultKeyIndex, cd11IfAuthAlgEapMethod=cd11IfAuthAlgEapMethod, cd11IfAuxSsidAuthAlgEnable=cd11IfAuxSsidAuthAlgEnable, cd11IfStationConfigEntry=cd11IfStationConfigEntry, cd11IfRogueApDetectedGroup=cd11IfRogueApDetectedGroup, cd11IfRatesSensContention=cd11IfRatesSensContention, cd11IfConfigurations=cd11IfConfigurations, cd11IfErpOfdmTxPowerTable=cd11IfErpOfdmTxPowerTable)
