#
# PySNMP MIB module HUAWEI-LswQos-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-LswQos-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
lswCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "lswCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, ObjectIdentity, Counter64, Counter32, IpAddress, Gauge32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "ObjectIdentity", "Counter64", "Counter32", "IpAddress", "Gauge32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32")
RowStatus, MacAddress, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TruthValue", "TextualConvention")
hwLswQosAclMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16))
hwLswQosAclMib.setRevisions(('2002-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwLswQosAclMib.setRevisionsDescriptions(('Table of qos and acl.',))
if mibBuilder.loadTexts: hwLswQosAclMib.setLastUpdated('200211190000Z')
if mibBuilder.loadTexts: hwLswQosAclMib.setOrganization('HUAWEI LANSWITCH')
if mibBuilder.loadTexts: hwLswQosAclMib.setContactInfo('huawei beiyan')
if mibBuilder.loadTexts: hwLswQosAclMib.setDescription('Module node for qos and acl.')
class HwMirrorOrMonitorType(TextualConvention, Integer32):
    description = ' Specify the mirror source or destination type. port(1): the mirror source or destination is port. board(2): the mirror source or destination is board. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("port", 1), ("board", 2))

hwLswQosMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2))
hwPriorityTrustMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 0), ("dscp", 1), ("ipprecedence", 2), ("cos", 3), ("localprecedence", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPriorityTrustMode.setStatus('current')
if mibBuilder.loadTexts: hwPriorityTrustMode.setDescription('Priority type of inbound queue.')
hwPortMonitorBothIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortMonitorBothIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortMonitorBothIfIndex.setDescription('The ifIndex of in/out monitor port.')
hwQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3), )
if mibBuilder.loadTexts: hwQueueTable.setStatus('current')
if mibBuilder.loadTexts: hwQueueTable.setDescription('Queue table which contains queue entry.')
hwQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwQueueIfIndex"))
if mibBuilder.loadTexts: hwQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hwQueueEntry.setDescription('The configuration information of queue.')
hwQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQueueIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQueueIfIndex.setDescription('ifIndex of port.')
hwQueueScheduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sp", 1), ("wrr", 2), ("wrr-max-delay", 3), ("sc-0", 4), ("sc-1", 5), ("sc-2", 6), ("rr", 7), ("wfq", 8), ("hq-wrr", 9))).clone('sp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueScheduleMode.setStatus('current')
if mibBuilder.loadTexts: hwQueueScheduleMode.setDescription('The mode of the queue schedule.')
hwQueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight1.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight1.setDescription('If queue mode is wfq, then hwQueueWeight1 represent the bandwidth of queue 1. If queue mode is wrr, then hwQueueWeight1 represent the weight of queue 1.')
hwQueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight2.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight2.setDescription('If queue mode is wfq, then hwQueueWeight2 represent the bandwidth of queue 2. If queue mode is wrr, then hwQueueWeight2 represent the weight of queue 2.')
hwQueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight3.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight3.setDescription('If queue mode is wfq, then hwQueueWeight3 represent the bandwidth of queue 3. If queue mode is wrr, then hwQueueWeight3 represent the weight of queue 3.')
hwQueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight4.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight4.setDescription('If queue mode is wfq, then hwQueueWeight4 represent the bandwidth of queue 4. If queue mode is wrr, then hwQueueWeight4 represent the weight of queue 4.')
hwQueueMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueMaxDelay.setStatus('current')
if mibBuilder.loadTexts: hwQueueMaxDelay.setDescription(' ')
hwQueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight5.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight5.setDescription('If queue mode is wfq, then hwQueueWeight5 represent the bandwidth of queue 5. If queue mode is wrr, then hwQueueWeight5 represent the weight of queue 5.')
hwQueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight6.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight6.setDescription('If queue mode is wfq, then hwQueueWeight6 represent the bandwidth of queue 6. If queue mode is wrr, then hwQueueWeight6 represent the weight of queue 6.')
hwQueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight7.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight7.setDescription('If queue mode is wfq, then hwQueueWeight7 represent the bandwidth of queue 7. If queue mode is wrr, then hwQueueWeight7 represent the weight of queue 7.')
hwQueueWeight8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQueueWeight8.setStatus('current')
if mibBuilder.loadTexts: hwQueueWeight8.setDescription('If queue mode is wfq, then hwQueueWeight8 represent the bandwidth of queue 8. If queue mode is wrr, then hwQueueWeight8 represent the weight of queue 8.')
hwRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4), )
if mibBuilder.loadTexts: hwRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitTable.setDescription('Rate limit table which contains limit entry. ')
hwRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwRateLimitAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwRateLimitIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwRateLimitVlanID"), (0, "HUAWEI-LswQos-MIB", "hwRateLimitDirection"))
if mibBuilder.loadTexts: hwRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitEntry.setDescription('The configuration information of the rate-limited port.')
hwRateLimitAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitAclIndex.setDescription('Index of acl rule.')
hwRateLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitIfIndex.setDescription('ifIndex of the rate-limited port.')
hwRateLimitVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitVlanID.setDescription('Vlan ID.')
hwRateLimitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitDirection.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitDirection.setDescription('Direction of the rate-limited port.')
hwRateLimitUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitUserAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitUserAclNum.setDescription('The number of user acl.')
hwRateLimitUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitUserAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitUserAclRule.setDescription('The number of user acl-rule.')
hwRateLimitIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitIpAclNum.setDescription('The number of Ip acl.')
hwRateLimitIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitIpAclRule.setDescription('The number of Ip acl-rule.')
hwRateLimitLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitLinkAclNum.setDescription('The number of link acl.')
hwRateLimitLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitLinkAclRule.setDescription('The number of link acl-rule.')
hwRateLimitTargetRateMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitTargetRateMbps.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitTargetRateMbps.setDescription('Target rate: Mbps.')
hwRateLimitTargetRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitTargetRateKbps.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitTargetRateKbps.setDescription('Target rate: Kbps.')
hwRateLimitPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 8388608), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitPeakRate.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitPeakRate.setDescription('Peak rate of the rate-limited port.')
hwRateLimitCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitCIR.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitCIR.setDescription('CIR of the rate-limited port.')
hwRateLimitCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitCBS.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitCBS.setDescription('Burst traffic of the rate-limited port.')
hwRateLimitEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitEBS.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitEBS.setDescription('Excess burst traffic of the rate-limited port.')
hwRateLimitPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitPIR.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitPIR.setDescription('PIR of the rate-limited port.')
hwRateLimitConformLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 18), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitConformLocalPre.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitConformLocalPre.setDescription('Conform local pre.')
hwRateLimitConformActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("remark-cos", 1), ("remark-drop-priority", 2), ("remark-cos-drop-priority", 3), ("remark-policed-service", 4), ("remark-dscp", 5))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitConformActionType.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitConformActionType.setDescription('Conform action type.')
hwRateLimitExceedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("forward", 1), ("drop", 2), ("remarkdscp", 3), ("exceed-cos", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitExceedActionType.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitExceedActionType.setDescription('Exceed action type.')
hwRateLimitExceedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitExceedDscp.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitExceedDscp.setDescription('Exceed DSCP. <0-63> Value of DSCP af11 Specify Assured Forwarding 11 service(10) af12 Specify Assured Forwarding 12 service(12) af13 Specify Assured Forwarding 13 service(14) af21 Specify Assured Forwarding 21 service(18) af22 Specify Assured Forwarding 22 service(20) af23 Specify Assured Forwarding 23 service(22) af31 Specify Assured Forwarding 31 service(26) af32 Specify Assured Forwarding 32 service(28) af33 Specify Assured Forwarding 33 service(30) af41 Specify Assured Forwarding 41 service(34) af42 Specify Assured Forwarding 42 service(36) af43 Specify Assured Forwarding 43 service(38) be Specify Best Effort service(0) cs1 Specify Class Selector 1 service(8) cs2 Specify Class Selector 2 service(16) cs3 Specify Class Selector 3 service(24) cs4 Specify Class Selector 4 service(32) cs5 Specify Class Selector 5 service(40) cs6 Specify Class Selector 6 service(48) cs7 Specify Class Selector 7 service(56) ef Specify Expedited Forwarding service(46)')
hwRateLimitRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRateLimitRuntime.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitRuntime.setDescription('Runtime.')
hwRateLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwRateLimitExceedCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 24), Integer32().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitExceedCos.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitExceedCos.setDescription('Exceeding COS of rate-limited port.')
hwRateLimitConformCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitConformCos.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitConformCos.setDescription('If the user choose remark-cos value of the hwRateLimitConformActionType, This object can be used to set the conform COS value. There are a few enumerations as follows: background Specify background priority(1) best-effort Specify best-effort priority(0) controlled-load Specify controlled-load priority(4) excellent-effort Specify excellent-effort priority(3) network-management Specify network-management priority(7) spare Specify spare priority(2) video Specify video priority(5) voice Specify voice priority(6)')
hwRateLimitConformDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitConformDscp.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitConformDscp.setDescription('If the user choose remark-dscp value of the hwRateLimitConformActionType, This object can be used to set the conform dscp value. There are a few enumerations as follows: <0-63> Value of DSCP af11 Specify Assured Forwarding 11 service(10) af12 Specify Assured Forwarding 12 service(12) af13 Specify Assured Forwarding 13 service(14) af21 Specify Assured Forwarding 21 service(18) af22 Specify Assured Forwarding 22 service(20) af23 Specify Assured Forwarding 23 service(22) af31 Specify Assured Forwarding 31 service(26) af32 Specify Assured Forwarding 32 service(28) af33 Specify Assured Forwarding 33 service(30) af41 Specify Assured Forwarding 41 service(34) af42 Specify Assured Forwarding 42 service(36) af43 Specify Assured Forwarding 43 service(38) be Specify Best Effort service(0) cs1 Specify Class Selector 1 service(8) cs2 Specify Class Selector 2 service(16) cs3 Specify Class Selector 3 service(24) cs4 Specify Class Selector 4 service(32) cs5 Specify Class Selector 5 service(40) cs6 Specify Class Selector 6 service(48) cs7 Specify Class Selector 7 service(56) ef Specify Expedited Forwarding service(46)')
hwRateLimitMeterStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRateLimitMeterStatByteCount.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitMeterStatByteCount.setDescription('The counter of conform byte.')
hwRateLimitMeterStatByteXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRateLimitMeterStatByteXCount.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitMeterStatByteXCount.setDescription('The counter of exceed byte.')
hwRateLimitMeterStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("set", 1), ("unDo", 2), ("reset", 3), ("running", 4), ("notRunning", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRateLimitMeterStatState.setStatus('current')
if mibBuilder.loadTexts: hwRateLimitMeterStatState.setDescription('The status of meter statistic.')
hwPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5), )
if mibBuilder.loadTexts: hwPriorityTable.setStatus('current')
if mibBuilder.loadTexts: hwPriorityTable.setDescription('The priority table which contains priority entry.')
hwPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwPriorityAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwPriorityIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwPriorityVlanID"), (0, "HUAWEI-LswQos-MIB", "hwPriorityDirection"))
if mibBuilder.loadTexts: hwPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: hwPriorityEntry.setDescription('The configuration information of priority.')
hwPriorityAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwPriorityAclIndex.setDescription('Index of acl rule.')
hwPriorityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPriorityIfIndex.setDescription('ifIndex of the port.')
hwPriorityVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityVlanID.setStatus('current')
if mibBuilder.loadTexts: hwPriorityVlanID.setDescription('Vlan ID.')
hwPriorityDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityDirection.setStatus('current')
if mibBuilder.loadTexts: hwPriorityDirection.setDescription('Direction of data stream.')
hwPriorityUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityUserAclNum.setStatus('current')
if mibBuilder.loadTexts: hwPriorityUserAclNum.setDescription('The number of user acl.')
hwPriorityUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityUserAclRule.setStatus('current')
if mibBuilder.loadTexts: hwPriorityUserAclRule.setDescription('The subitem of the user acl.')
hwPriorityIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwPriorityIpAclNum.setDescription('The number of Ip acl.')
hwPriorityIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwPriorityIpAclRule.setDescription('The subitem of the IP acl.')
hwPriorityLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwPriorityLinkAclNum.setDescription('The number of Link acl.')
hwPriorityLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwPriorityLinkAclRule.setDescription('The subitem of the link acl.')
hwPriorityDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityDscp.setStatus('current')
if mibBuilder.loadTexts: hwPriorityDscp.setDescription('Set DSCP Value. <0-63> Value of DSCP af11 Specify Assured Forwarding 11 service(10) af12 Specify Assured Forwarding 12 service(12) af13 Specify Assured Forwarding 13 service(14) af21 Specify Assured Forwarding 21 service(18) af22 Specify Assured Forwarding 22 service(20) af23 Specify Assured Forwarding 23 service(22) af31 Specify Assured Forwarding 31 service(26) af32 Specify Assured Forwarding 32 service(28) af33 Specify Assured Forwarding 33 service(30) af41 Specify Assured Forwarding 41 service(34) af42 Specify Assured Forwarding 42 service(36) af43 Specify Assured Forwarding 43 service(38) be Specify Best Effort service(0) cs1 Specify Class Selector 1 service(8) cs2 Specify Class Selector 2 service(16) cs3 Specify Class Selector 3 service(24) cs4 Specify Class Selector 4 service(32) cs5 Specify Class Selector 5 service(40) cs6 Specify Class Selector 6 service(48) cs7 Specify Class Selector 7 service(56) ef Specify Expedited Forwarding service(46)')
hwPriorityIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityIpPre.setStatus('current')
if mibBuilder.loadTexts: hwPriorityIpPre.setDescription('Set Ip precedence.')
hwPriorityIpPreFromCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 13), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityIpPreFromCos.setStatus('current')
if mibBuilder.loadTexts: hwPriorityIpPreFromCos.setDescription('Set Ip precedence according to vlan priority.')
hwPriorityCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityCos.setStatus('current')
if mibBuilder.loadTexts: hwPriorityCos.setDescription('Set vlan priority.')
hwPriorityCosFromIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 15), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityCosFromIpPre.setStatus('current')
if mibBuilder.loadTexts: hwPriorityCosFromIpPre.setDescription('Set vlan priority according to IP precedence.')
hwPriorityLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityLocalPre.setStatus('current')
if mibBuilder.loadTexts: hwPriorityLocalPre.setDescription('Set local precedence.')
hwPriorityPolicedServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("auto", 1), ("trust-dscp", 2), ("new-dscp", 3), ("untrusted", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityPolicedServiceType.setStatus('current')
if mibBuilder.loadTexts: hwPriorityPolicedServiceType.setDescription('The service type of proliced Priority.')
hwPriorityPolicedServiceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityPolicedServiceDscp.setStatus('current')
if mibBuilder.loadTexts: hwPriorityPolicedServiceDscp.setDescription('The service Dscp of proliced Priority.')
hwPriorityPolicedServiceExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityPolicedServiceExp.setStatus('current')
if mibBuilder.loadTexts: hwPriorityPolicedServiceExp.setDescription('The service Exp of proliced Priority.')
hwPriorityPolicedServiceCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityPolicedServiceCos.setStatus('current')
if mibBuilder.loadTexts: hwPriorityPolicedServiceCos.setDescription('The service COS of proliced Priority.')
hwPriorityPolicedServiceLoaclPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityPolicedServiceLoaclPre.setStatus('current')
if mibBuilder.loadTexts: hwPriorityPolicedServiceLoaclPre.setDescription('The service local pre of proliced Priority.')
hwPriorityPolicedServiceDropPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityPolicedServiceDropPriority.setStatus('current')
if mibBuilder.loadTexts: hwPriorityPolicedServiceDropPriority.setDescription('The service drop priority of proliced Priority.')
hwPriorityRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPriorityRuntime.setStatus('current')
if mibBuilder.loadTexts: hwPriorityRuntime.setDescription('Is run or not.')
hwPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 5, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriorityRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPriorityRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6), )
if mibBuilder.loadTexts: hwRedirectTable.setStatus('current')
if mibBuilder.loadTexts: hwRedirectTable.setDescription('Redirect table which contains rediect entry.')
hwRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwRedirectAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwRedirectIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwRedirectVlanID"), (0, "HUAWEI-LswQos-MIB", "hwRedirectDirection"))
if mibBuilder.loadTexts: hwRedirectEntry.setStatus('current')
if mibBuilder.loadTexts: hwRedirectEntry.setDescription('Configuration information of redirection.')
hwRedirectAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwRedirectAclIndex.setDescription('Index of acl rule.')
hwRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRedirectIfIndex.setDescription('ifIndex of port.')
hwRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRedirectVlanID.setDescription('Vlan ID.')
hwRedirectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectDirection.setStatus('current')
if mibBuilder.loadTexts: hwRedirectDirection.setDescription('Direction of data stream.')
hwRedirectUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectUserAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRedirectUserAclNum.setDescription('The number of the user acl.')
hwRedirectUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectUserAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRedirectUserAclRule.setDescription('The subitem of the user acl.')
hwRedirectIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRedirectIpAclNum.setDescription('The num of the IP acl.')
hwRedirectIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRedirectIpAclRule.setDescription('The subitem of the IP acl.')
hwRedirectLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRedirectLinkAclNum.setDescription('The num of the link acl.')
hwRedirectLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRedirectLinkAclRule.setDescription('The subitem of the link acl.')
hwRedirectToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 11), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToCpu.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToCpu.setDescription('Redirect to cpu.')
hwRedirectToIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToIfIndex.setDescription('The ifIndex of port to be redirect to.')
hwRedirectToNextHop1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToNextHop1.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToNextHop1.setDescription(' ')
hwRedirectToNextHop2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToNextHop2.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToNextHop2.setDescription(' ')
hwRedirectRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedirectRuntime.setStatus('current')
if mibBuilder.loadTexts: hwRedirectRuntime.setDescription('Is run or not.')
hwRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRedirectRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwRedirectToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToSlotNo.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToSlotNo.setDescription('The slot number to process redirection. Default value is 15. When L3plus function is not supported, the default value would be set. For L3plus redirection function, it is necessary.')
hwRedirectRemarkedDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectRemarkedDSCP.setStatus('current')
if mibBuilder.loadTexts: hwRedirectRemarkedDSCP.setDescription('DSCP of Policy-Based Routing. When L3plus function is not supported, the default value would be set. For L3plus redirection function, it is optional.')
hwRedirectRemarkedPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectRemarkedPri.setStatus('current')
if mibBuilder.loadTexts: hwRedirectRemarkedPri.setDescription('The priority of the redirect packet. When L3plus function is not supported, the default value would be set. For L3plus redirection function, it is optional.')
hwRedirectRemarkedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectRemarkedTos.setStatus('current')
if mibBuilder.loadTexts: hwRedirectRemarkedTos.setDescription('The TOS of the redirect packet. When L3plus function is not supported, the default value would be set. For L3plus redirection function, it is optional.')
hwRedirectToNextHop3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToNextHop3.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToNextHop3.setDescription('The third IP address for PBR. Default value is 0xffffffff. When L3plus function is not supported, the default value would be set. The data stream can be redirected to three nexthops at most or one VLAN interface, one nexthop should be set at least if data packets are not redirected to VLAN interface for L3plus redirection function.')
hwRedirectTargetVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectTargetVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRedirectTargetVlanID.setDescription('The destination vlan ID for PBR. Default value is 0. When L3plus function is not supported, the default value would be set. For L3plus redirection function, it is necessary when no nexthop is set. ')
hwRedirectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict-priority", 1), ("load-balance", 2))).clone('strict-priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectMode.setStatus('current')
if mibBuilder.loadTexts: hwRedirectMode.setDescription('The node denotes the strategy adopted by the PBR. If strict-priority is configured, the most preferential IP address is use as redirected nexthop. If the mode is load-balance, any of the three IP addresses will be the nexthop and the traffic distributes in the three direction. Default value is strict-priority. When L3plus function is not supported, the default value would be set. It is optional. ')
hwRedirectToNestedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToNestedVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToNestedVlanID.setDescription('The nested vlan ID inserted before the original vlan tag. Default value is 0. When the function is not supported, the default value would be set. It is optional.')
hwRedirectToModifiedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 6, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectToModifiedVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRedirectToModifiedVlanID.setDescription('The new vlan ID replaced the old one. Default value is 0. When the function is not supported, the default value would be set. It is optional.')
hwStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7), )
if mibBuilder.loadTexts: hwStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwStatisticTable.setDescription('Statistic table which contains statistic entry.')
hwStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwStatisticAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwStatisticIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwStatisticVlanID"), (0, "HUAWEI-LswQos-MIB", "hwStatisticDirection"))
if mibBuilder.loadTexts: hwStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwStatisticEntry.setDescription('Configuration about statistic information.')
hwStatisticAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwStatisticAclIndex.setDescription('Index of acl rule.')
hwStatisticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwStatisticIfIndex.setDescription('ifIndex of port.')
hwStatisticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticVlanID.setStatus('current')
if mibBuilder.loadTexts: hwStatisticVlanID.setDescription('Vlan ID.')
hwStatisticDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticDirection.setStatus('current')
if mibBuilder.loadTexts: hwStatisticDirection.setDescription('Direction of data stream.')
hwStatisticUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticUserAclNum.setStatus('current')
if mibBuilder.loadTexts: hwStatisticUserAclNum.setDescription('The number of the user acl.')
hwStatisticUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticUserAclRule.setStatus('current')
if mibBuilder.loadTexts: hwStatisticUserAclRule.setDescription('The subitem of the user acl.')
hwStatisticIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwStatisticIpAclNum.setDescription('The number of the IP acl.')
hwStatisticIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwStatisticIpAclRule.setDescription('The subitem of the IP acl.')
hwStatisticLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwStatisticLinkAclNum.setDescription('The number of the link acl.')
hwStatisticLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwStatisticLinkAclRule.setDescription('The subitem of the link acl.')
hwStatisticRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatisticRuntime.setStatus('current')
if mibBuilder.loadTexts: hwStatisticRuntime.setDescription('Is run or not.')
hwStatisticPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatisticPacketCount.setStatus('current')
if mibBuilder.loadTexts: hwStatisticPacketCount.setDescription('The counter of the packets which is matched.')
hwStatisticByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatisticByteCount.setStatus('current')
if mibBuilder.loadTexts: hwStatisticByteCount.setDescription('The counter of the byte which is matched.')
hwStatisticCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStatisticCountClear.setStatus('current')
if mibBuilder.loadTexts: hwStatisticCountClear.setDescription('Clear the counter of the packets.')
hwStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStatisticRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwStatisticRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwStatisticPacketXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatisticPacketXCount.setStatus('current')
if mibBuilder.loadTexts: hwStatisticPacketXCount.setDescription('The counter of the outprofile packets.')
hwStatisticByteXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatisticByteXCount.setStatus('current')
if mibBuilder.loadTexts: hwStatisticByteXCount.setDescription('The counter of the outprofile bytes.')
hwMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8), )
if mibBuilder.loadTexts: hwMirrorTable.setStatus('current')
if mibBuilder.loadTexts: hwMirrorTable.setDescription('Mirror table which contains mirror entry.')
hwMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirrorAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwMirrorIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwMirrorVlanID"), (0, "HUAWEI-LswQos-MIB", "hwMirrorDirection"))
if mibBuilder.loadTexts: hwMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirrorEntry.setDescription('Configuration information to be mirrored.')
hwMirrorAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwMirrorAclIndex.setDescription('Index of acl rule.')
hwMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMirrorIfIndex.setDescription('ifIndex of port.')
hwMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorVlanID.setStatus('current')
if mibBuilder.loadTexts: hwMirrorVlanID.setDescription('Vlan ID.')
hwMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorDirection.setStatus('current')
if mibBuilder.loadTexts: hwMirrorDirection.setDescription('Direction of data stream.')
hwMirrorUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorUserAclNum.setStatus('current')
if mibBuilder.loadTexts: hwMirrorUserAclNum.setDescription('The number of the user acl.')
hwMirrorUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorUserAclRule.setStatus('current')
if mibBuilder.loadTexts: hwMirrorUserAclRule.setDescription('The subitem of the user acl.')
hwMirrorIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwMirrorIpAclNum.setDescription('The subitem of the user acl.')
hwMirrorIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwMirrorIpAclRule.setDescription('The subitem of the IP acl.')
hwMirrorLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwMirrorLinkAclNum.setDescription('The number of the link acl.')
hwMirrorLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwMirrorLinkAclRule.setDescription('The subitem of the link acl.')
hwMirrorToIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorToIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMirrorToIfIndex.setDescription('The ifIndex of port that to be mirrored to.')
hwMirrorToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorToCpu.setStatus('current')
if mibBuilder.loadTexts: hwMirrorToCpu.setDescription('Mirror to cpu.')
hwMirrorRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMirrorRuntime.setStatus('current')
if mibBuilder.loadTexts: hwMirrorRuntime.setDescription('Is run or not.')
hwMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirrorRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy. ')
hwMirrorToGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 8, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorToGroup.setStatus('current')
if mibBuilder.loadTexts: hwMirrorToGroup.setDescription('The destination of stream-based mirroring is the mirroring group.')
hwPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 9), )
if mibBuilder.loadTexts: hwPortMirrorTable.setStatus('current')
if mibBuilder.loadTexts: hwPortMirrorTable.setDescription('Port Mirror.')
hwPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 9, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwPortMirrorIfIndex"))
if mibBuilder.loadTexts: hwPortMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortMirrorEntry.setDescription('Configuration information of port mirroring.')
hwPortMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortMirrorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortMirrorIfIndex.setDescription('The ifIndex of mirror port.')
hwPortMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortMirrorDirection.setStatus('current')
if mibBuilder.loadTexts: hwPortMirrorDirection.setDescription('The direction of mirror port.')
hwPortMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortMirrorRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwLineRateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 10), )
if mibBuilder.loadTexts: hwLineRateTable.setStatus('current')
if mibBuilder.loadTexts: hwLineRateTable.setDescription('Line Rate.')
hwLineRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 10, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwLineRateIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwLineRateDirection"))
if mibBuilder.loadTexts: hwLineRateEntry.setStatus('current')
if mibBuilder.loadTexts: hwLineRateEntry.setDescription('Configuration information of line-rate port.')
hwLineRateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 10, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLineRateIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLineRateIfIndex.setDescription('The ifIndex of port of line rate.')
hwLineRateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLineRateDirection.setStatus('current')
if mibBuilder.loadTexts: hwLineRateDirection.setDescription('The direction of line rate.')
hwLineRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLineRateValue.setStatus('current')
if mibBuilder.loadTexts: hwLineRateValue.setDescription('The value of the line-rate.')
hwLineRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLineRateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLineRateRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11), )
if mibBuilder.loadTexts: hwBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthTable.setDescription('Bandwidth.')
hwBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwBandwidthAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwBandwidthIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwBandwidthVlanID"), (0, "HUAWEI-LswQos-MIB", "hwBandwidthDirection"))
if mibBuilder.loadTexts: hwBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthEntry.setDescription('Configuration information of bandwidth of port.')
hwBandwidthAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthAclIndex.setDescription('Index of acl rule.')
hwBandwidthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthIfIndex.setDescription('ifIndex of port.')
hwBandwidthVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthVlanID.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthVlanID.setDescription('Vlan ID.')
hwBandwidthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("invalid", 0), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthDirection.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthDirection.setDescription('Direction of data stream.')
hwBandwidthIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthIpAclNum.setDescription('The number of Ip acl.')
hwBandwidthIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthIpAclRule.setDescription('The subitem of ip acl.')
hwBandwidthLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthLinkAclNum.setDescription('The number of link acl.')
hwBandwidthLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBandwidthLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthLinkAclRule.setDescription('The subitem of link acl.')
hwBandwidthMinGuaranteedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBandwidthMinGuaranteedWidth.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthMinGuaranteedWidth.setDescription('The min width which is guaranteed.')
hwBandwidthMaxGuaranteedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBandwidthMaxGuaranteedWidth.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthMaxGuaranteedWidth.setDescription('The max width which is guaranteed.')
hwBandwidthWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBandwidthWeight.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthWeight.setDescription('Weight of bandwidth.')
hwBandwidthRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBandwidthRuntime.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthRuntime.setDescription('Is run or not.')
hwBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 11, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBandwidthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBandwidthRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwRedTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12), )
if mibBuilder.loadTexts: hwRedTable.setStatus('current')
if mibBuilder.loadTexts: hwRedTable.setDescription('Red table which contains RED entry.')
hwRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwRedAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwRedIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwRedVlanID"), (0, "HUAWEI-LswQos-MIB", "hwRedDirection"))
if mibBuilder.loadTexts: hwRedEntry.setStatus('current')
if mibBuilder.loadTexts: hwRedEntry.setDescription('Configuration information of RED.')
hwRedAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwRedAclIndex.setDescription('Index of acl rule.')
hwRedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRedIfIndex.setDescription('ifIndex of port.')
hwRedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRedVlanID.setDescription('Vlan ID.')
hwRedDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("invalid", 0), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedDirection.setStatus('current')
if mibBuilder.loadTexts: hwRedDirection.setDescription('Direction of data stream.')
hwRedIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRedIpAclNum.setDescription('The num of Ip acl.')
hwRedIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRedIpAclRule.setDescription('The subitem of Ip acl.')
hwRedLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRedLinkAclNum.setDescription('The number of link acl.')
hwRedLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRedLinkAclRule.setDescription('The subitem of link acl.')
hwRedStartQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRedStartQueueLen.setStatus('current')
if mibBuilder.loadTexts: hwRedStartQueueLen.setDescription('The length of Starting queue.')
hwRedStopQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRedStopQueueLen.setStatus('current')
if mibBuilder.loadTexts: hwRedStopQueueLen.setDescription('The length of stopping queue.')
hwRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRedProbability.setStatus('current')
if mibBuilder.loadTexts: hwRedProbability.setDescription('Probability.')
hwRedRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedRuntime.setStatus('current')
if mibBuilder.loadTexts: hwRedRuntime.setDescription('Is run or not.')
hwRedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 12, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRedRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRedRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwMirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13), )
if mibBuilder.loadTexts: hwMirrorGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupTable.setDescription('Mirror Group.')
hwMirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirrorGroupID"))
if mibBuilder.loadTexts: hwMirrorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupEntry.setDescription('Configuration information of mirroring group.')
hwMirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMirrorGroupID.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupID.setDescription('Group ID of mirroring group.')
hwMirrorGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMirrorGroupDirection.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupDirection.setDescription('Direction of data stream which would be mirrored.')
hwMirrorGroupMirrorIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMirrorGroupMirrorIfIndexList.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupMirrorIfIndexList.setDescription('ifIndex list of source port.')
hwMirrorGroupMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMirrorGroupMonitorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupMonitorIfIndex.setDescription('ifIndex of destination port.')
hwMirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 13, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMirrorGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirrorGroupRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwFlowtempTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14), )
if mibBuilder.loadTexts: hwFlowtempTable.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempTable.setDescription('Flow-template table which contains flow-template entry.')
hwFlowtempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwFlowtempIndex"))
if mibBuilder.loadTexts: hwFlowtempEntry.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEntry.setDescription('Configuration information of flow-template.')
hwFlowtempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowtempIndex.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempIndex.setDescription('Index of flow template.')
hwFlowtempIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempIpProtocol.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempIpProtocol.setDescription('protocol-type of IP packet.')
hwFlowtempTcpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempTcpFlag.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempTcpFlag.setDescription('The flag of Tcp paceket. ')
hwFlowtempSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempSPort.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempSPort.setDescription('The port of source.')
hwFlowtempDPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempDPort.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempDPort.setDescription('The port of destination.')
hwFlowtempIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempIcmpType.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempIcmpType.setDescription('The type of Icmp.')
hwFlowtempIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempIcmpCode.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempIcmpCode.setDescription('The code of Icmp.')
hwFlowtempFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempFragment.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempFragment.setDescription('The flag of Fragment. ')
hwFlowtempDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempDscp.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempDscp.setDescription('Dscp of IP packet.')
hwFlowtempIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempIpPre.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempIpPre.setDescription('The Precedence of Ip packet. ')
hwFlowtempTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempTos.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempTos.setDescription('Tos of IP packet.')
hwFlowtempSIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempSIp.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempSIp.setDescription('The Ip of source.')
hwFlowtempSIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempSIpMask.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempSIpMask.setDescription('The mask of source-Ip.')
hwFlowtempDIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempDIp.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempDIp.setDescription('The Ip of destination.')
hwFlowtempDIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempDIpMask.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempDIpMask.setDescription('The mask of destination-Ip.')
hwFlowtempEthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempEthProtocol.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEthProtocol.setDescription('Protocol type of Ethernet.')
hwFlowtempSMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempSMac.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempSMac.setDescription('The Mac of source.')
hwFlowtempSMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempSMacMask.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempSMacMask.setDescription('The mask of source-Mac.')
hwFlowtempDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempDMac.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempDMac.setDescription('The mac of destination.')
hwFlowtempDMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 20), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempDMacMask.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempDMacMask.setDescription('The mask of destination-Mac.')
hwFlowtempVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempVpn.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempVpn.setDescription('Vpn')
hwFlowtempRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwFlowtempVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempVlanId.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempVlanId.setDescription('Source VLAN ID.')
hwFlowtempCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 14, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempCos.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempCos.setDescription('802.1P priority.')
hwFlowtempEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 15), )
if mibBuilder.loadTexts: hwFlowtempEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEnableTable.setDescription('The table of flow-template.')
hwFlowtempEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 15, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwFlowtempEnableIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwFlowtempEnableVlanID"))
if mibBuilder.loadTexts: hwFlowtempEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEnableEntry.setDescription('Enable entry of flow-template.')
hwFlowtempEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 15, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempEnableIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEnableIfIndex.setDescription('ifIndex of port.')
hwFlowtempEnableVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFlowtempEnableVlanID.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEnableVlanID.setDescription('Vlan ID.')
hwFlowtempEnableFlowtempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFlowtempEnableFlowtempIndex.setStatus('current')
if mibBuilder.loadTexts: hwFlowtempEnableFlowtempIndex.setDescription('The index of Flowtemp table.')
hwTrafficShapeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16), )
if mibBuilder.loadTexts: hwTrafficShapeTable.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeTable.setDescription('The traffic-shape table which contains traffic-shape entry.')
hwTrafficShapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwTrafficShapeIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwTrafficShapeQueueId"))
if mibBuilder.loadTexts: hwTrafficShapeEntry.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeEntry.setDescription('Configuration information of traffic-shape.')
hwTrafficShapeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrafficShapeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeIfIndex.setDescription('IfIdex of port.')
hwTrafficShapeQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrafficShapeQueueId.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeQueueId.setDescription('ID of queue which would be shaped.')
hwTrafficShapeMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrafficShapeMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeMaxRate.setDescription('The max rate.')
hwTrafficShapeBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrafficShapeBurstSize.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeBurstSize.setDescription('The size of burst.')
hwTrafficShapeBufferLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 8000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrafficShapeBufferLimit.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeBufferLimit.setDescription('The limit of buffer.')
hwTrafficShapeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrafficShapeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTrafficShapeRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 17), )
if mibBuilder.loadTexts: hwPortQueueTable.setStatus('current')
if mibBuilder.loadTexts: hwPortQueueTable.setDescription('The port-queue table which contains port-queue entry.')
hwPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 17, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwPortQueueIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwPortQueueQueueID"))
if mibBuilder.loadTexts: hwPortQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortQueueEntry.setDescription('Configuration information of port-queue.')
hwPortQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortQueueIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortQueueIfIndex.setDescription('ifIndex of port.')
hwPortQueueQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortQueueQueueID.setStatus('current')
if mibBuilder.loadTexts: hwPortQueueQueueID.setDescription('ID of port-queue.')
hwPortQueueWrrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sp", 1), ("wrr-high-priority", 2), ("wrr-low-priority", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortQueueWrrPriority.setStatus('current')
if mibBuilder.loadTexts: hwPortQueueWrrPriority.setDescription('The priority of Wrr.')
hwPortQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortQueueWeight.setStatus('current')
if mibBuilder.loadTexts: hwPortQueueWeight.setDescription('The weight of this queue.')
hwDropModeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 18), )
if mibBuilder.loadTexts: hwDropModeTable.setStatus('current')
if mibBuilder.loadTexts: hwDropModeTable.setDescription('The drop-mode table which contains drop-mode entry.')
hwDropModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 18, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwDropModeIfIndex"))
if mibBuilder.loadTexts: hwDropModeEntry.setStatus('current')
if mibBuilder.loadTexts: hwDropModeEntry.setDescription('Configuration information of the drop-mode.')
hwDropModeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDropModeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDropModeIfIndex.setDescription('ifIndex of port.')
hwDropModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("random-detect", 1), ("tail-drop", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDropModeMode.setStatus('current')
if mibBuilder.loadTexts: hwDropModeMode.setDescription('Mode.')
hwDropModeWredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDropModeWredIndex.setStatus('current')
if mibBuilder.loadTexts: hwDropModeWredIndex.setDescription('The index of Wred table.')
hwWredTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19), )
if mibBuilder.loadTexts: hwWredTable.setStatus('current')
if mibBuilder.loadTexts: hwWredTable.setDescription('The Wred table which contains wred Entry.')
hwWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwWredIndex"), (0, "HUAWEI-LswQos-MIB", "hwWredQueueId"))
if mibBuilder.loadTexts: hwWredEntry.setStatus('current')
if mibBuilder.loadTexts: hwWredEntry.setDescription('Configuration information of Wred.')
hwWredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWredIndex.setStatus('current')
if mibBuilder.loadTexts: hwWredIndex.setDescription('Index of wred.')
hwWredQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWredQueueId.setStatus('current')
if mibBuilder.loadTexts: hwWredQueueId.setDescription('Queue ID.')
hwWredGreenMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredGreenMinThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWredGreenMinThreshold.setDescription('The min threshold of Green.')
hwWredGreenMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredGreenMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWredGreenMaxThreshold.setDescription('The max threshold of Greem.')
hwWredGreenMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredGreenMaxProb.setStatus('current')
if mibBuilder.loadTexts: hwWredGreenMaxProb.setDescription('The max prob of Green.')
hwWredYellowMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredYellowMinThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWredYellowMinThreshold.setDescription('The min threshold of Yellow.')
hwWredYellowMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredYellowMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWredYellowMaxThreshold.setDescription('The max threshold of Yellow.')
hwWredYellowMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredYellowMaxProb.setStatus('current')
if mibBuilder.loadTexts: hwWredYellowMaxProb.setDescription('The Prob threshold of Yellow.')
hwWredRedMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredRedMinThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWredRedMinThreshold.setDescription('The min threshold of Red.')
hwWredRedMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredRedMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWredRedMaxThreshold.setDescription('The max threshold of Red.')
hwWredRedMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredRedMaxProb.setStatus('current')
if mibBuilder.loadTexts: hwWredRedMaxProb.setDescription('The max prob of Red.')
hwWredExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWredExponent.setStatus('current')
if mibBuilder.loadTexts: hwWredExponent.setDescription('Exponent.')
hwCosToLocalPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 20), )
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapTable.setStatus('current')
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapTable.setDescription('Table of map of the COS to local-precedence.')
hwCosToLocalPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 20, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwCosToLocalPrecedenceMapCosIndex"))
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapEntry.setDescription('Configuration information of map of the COS to local precedence.')
hwCosToLocalPrecedenceMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapCosIndex.setStatus('current')
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapCosIndex.setDescription('Index of the map.')
hwCosToLocalPrecedenceMapLocalPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapLocalPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: hwCosToLocalPrecedenceMapLocalPrecedenceValue.setDescription('Value of local precedence.')
hwCosToDropPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 21), )
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapTable.setStatus('current')
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapTable.setDescription('The table of map of COS to drop-precedence.')
hwCosToDropPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 21, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwCosToDropPrecedenceMapCosIndex"))
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapEntry.setDescription('Configuration information of the map of the COS to drop-precedence.')
hwCosToDropPrecedenceMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapCosIndex.setStatus('current')
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapCosIndex.setDescription('Index of the map.')
hwCosToDropPrecedenceMapDropPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapDropPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: hwCosToDropPrecedenceMapDropPrecedenceValue.setDescription('Value of drop-precedence.')
hwDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22), )
if mibBuilder.loadTexts: hwDscpMapTable.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapTable.setDescription('Table of dscp map.')
hwDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwDscpMapConformLevel"), (0, "HUAWEI-LswQos-MIB", "hwDscpMapDscpIndex"))
if mibBuilder.loadTexts: hwDscpMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapEntry.setDescription('Configuration information of Dscp map.')
hwDscpMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDscpMapConformLevel.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapConformLevel.setDescription('Conformable level of Dscp-map.')
hwDscpMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDscpMapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapDscpIndex.setDescription('Index of dscp.')
hwDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpMapDscpValue.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapDscpValue.setDescription('Value of Dscp.')
hwDscpMapExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpMapExpValue.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapExpValue.setDescription('Exp value.')
hwDscpMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpMapCosValue.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapCosValue.setDescription('COS value.')
hwDscpMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpMapLocalPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapLocalPrecedence.setDescription('The precedence of local.')
hwDscpMapDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpMapDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwDscpMapDropPrecedence.setDescription('The precedence of Drop.')
hwExpMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23), )
if mibBuilder.loadTexts: hwExpMapTable.setStatus('current')
if mibBuilder.loadTexts: hwExpMapTable.setDescription('The table of Exp-map')
hwExpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwExpMapConformLevel"), (0, "HUAWEI-LswQos-MIB", "hwExpMapExpIndex"))
if mibBuilder.loadTexts: hwExpMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwExpMapEntry.setDescription('Configuration information of Exp-map.')
hwExpMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExpMapConformLevel.setStatus('current')
if mibBuilder.loadTexts: hwExpMapConformLevel.setDescription('Conformable level of Exp-map.')
hwExpMapExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExpMapExpIndex.setStatus('current')
if mibBuilder.loadTexts: hwExpMapExpIndex.setDescription('Index of Exp.')
hwExpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwExpMapDscpValue.setStatus('current')
if mibBuilder.loadTexts: hwExpMapDscpValue.setDescription('Dscp value.')
hwExpMapExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwExpMapExpValue.setStatus('current')
if mibBuilder.loadTexts: hwExpMapExpValue.setDescription('Exp value.')
hwExpMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwExpMapCosValue.setStatus('current')
if mibBuilder.loadTexts: hwExpMapCosValue.setDescription('COS Value.')
hwExpMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwExpMapLocalPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwExpMapLocalPrecedence.setDescription('The precedence of local.')
hwExpMapDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwExpMapDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwExpMapDropPrecedence.setDescription('The precedence of Drop.')
hwLocalPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 24), )
if mibBuilder.loadTexts: hwLocalPrecedenceMapTable.setStatus('current')
if mibBuilder.loadTexts: hwLocalPrecedenceMapTable.setDescription('The table of local-precedence map.')
hwLocalPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 24, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwLocalPrecedenceMapConformLevel"), (0, "HUAWEI-LswQos-MIB", "hwLocalPrecedenceMapLocalPrecedenceIndex"))
if mibBuilder.loadTexts: hwLocalPrecedenceMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwLocalPrecedenceMapEntry.setDescription('Configuraion information of local-precedence map.')
hwLocalPrecedenceMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalPrecedenceMapConformLevel.setStatus('current')
if mibBuilder.loadTexts: hwLocalPrecedenceMapConformLevel.setDescription('Conformable level of local-precedence map.')
hwLocalPrecedenceMapLocalPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalPrecedenceMapLocalPrecedenceIndex.setStatus('current')
if mibBuilder.loadTexts: hwLocalPrecedenceMapLocalPrecedenceIndex.setDescription('Index of local-precedence.')
hwLocalPrecedenceMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalPrecedenceMapCosValue.setStatus('current')
if mibBuilder.loadTexts: hwLocalPrecedenceMapCosValue.setDescription('COS value.')
hwPortWredTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 25), )
if mibBuilder.loadTexts: hwPortWredTable.setStatus('current')
if mibBuilder.loadTexts: hwPortWredTable.setDescription('The table of PortWred.')
hwPortWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 25, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwPortWredIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwPortWredQueueID"))
if mibBuilder.loadTexts: hwPortWredEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortWredEntry.setDescription('Configuration information of port Wred.')
hwPortWredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortWredIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortWredIfIndex.setDescription('ifIndex of port.')
hwPortWredQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortWredQueueID.setStatus('current')
if mibBuilder.loadTexts: hwPortWredQueueID.setDescription('ID of port-Wred queue.')
hwPortWredQueueStartLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortWredQueueStartLength.setStatus('current')
if mibBuilder.loadTexts: hwPortWredQueueStartLength.setDescription('Queue length.')
hwPortWredQueueProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortWredQueueProbability.setStatus('current')
if mibBuilder.loadTexts: hwPortWredQueueProbability.setDescription('Probability.')
hwMirroringGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 26), )
if mibBuilder.loadTexts: hwMirroringGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupTable.setDescription('The table of MirrorGroup.')
hwMirroringGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 26, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"))
if mibBuilder.loadTexts: hwMirroringGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupEntry.setDescription('Configuration information of MirrorGroup.')
hwMirroringGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: hwMirroringGroupID.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupID.setDescription('GroupID.')
hwMirroringGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote-source", 2), ("remote-destination", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupType.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupType.setDescription('GroupType.')
hwMirroringGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMirroringGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupStatus.setDescription('MirroringGroup status.')
hwMirroringGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 26, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupRowStatus.setDescription('RowStatus, Now support three status: createAndGo, active, destroy.')
hwMirroringGroupMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27), )
if mibBuilder.loadTexts: hwMirroringGroupMirrorTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorTable.setDescription('MirroringGroup mirroring-port information.')
hwMirroringGroupMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"))
if mibBuilder.loadTexts: hwMirroringGroupMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorEntry.setDescription('MirroringGroup mirroring-port information.')
hwMirroringGroupMirrorInboundIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorInboundIfIndexList.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorInboundIfIndexList.setDescription("Inbound-Mirror ifIndex(for port) and slot number(for board) list. Example A describes the relation between values of hwMirroringGroupMirrorInboundIfIndexList and hwMirroringGroupMirrorInTypeList. Example A: hwMirroringGroupMirrorInboundIfIndexList: '00000002 0C000022 00000007' hwMirroringGroupMirrorInTypeList: '00000002 00000001 00000002' Every four octets represent an integer value. The first four octets of them should be same. Here the value '00000002' indicates there are two inbound mirror sources. The following every four octets of hwMirroringGroupMirrorInboundIfIndexList indicate an ifIndex or a slot number of mirror source. For '0C000022' and '00000007' in the value of hwMirroringGroupMirrorInboundIfIndexList above, the corresponding value of hwMirroringGroupMirrorInTypeList is '00000001' and '00000002'(00000001 means the mirror source is port, 00000002 means the mirror source is board, the meaning reference the object HwMirrorOrMonitorType), then '0C000022' indicates an ifIndex value 201326626(decimal), and '00000007' indicates a slot with number 7(decimal). Values with different types(port/board) should be set in separate set operations. If one value with port type and one value with board type are set with same hwMirroringGroupID separately, the result of get operation for that entry will be like the example A above. If hwMirroringGroupMirrorInTypeList is not supported, the first four octets of hwMirroringGroupMirrorInboundIfIndexList also indicates the number of mirror source, but the following octets are values for ifIndex(port type). hwMirroringGroupMirrorOutboundIfIndexList and hwMirroringGroupMirrorOutTypeList are a pair and have the same relations like hwMirroringGroupMirrorInboundIfIndexList and hwMirroringGroupMirrorInTypeList pair. ")
hwMirroringGroupMirrorOutboundIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorOutboundIfIndexList.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorOutboundIfIndexList.setDescription('Outbound-Mirror ifIndex and slot number list. Please refer to the description of hwMirroringGroupMirrorInboundIfIndexList.')
hwMirroringGroupMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwMirroringGroupMirrorInTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorInTypeList.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorInTypeList.setDescription('Inbound-Mirror type list. Please refer to the description of hwMirroringGroupMirrorInboundIfIndexList.')
hwMirroringGroupMirrorOutTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 27, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorOutTypeList.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorOutTypeList.setDescription('Outbound-Mirror type list. Please refer to the description of hwMirroringGroupMirrorInboundIfIndexList.')
hwMirroringGroupMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 28), )
if mibBuilder.loadTexts: hwMirroringGroupMonitorTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMonitorTable.setDescription('MirroringGroup monitor-port information.')
hwMirroringGroupMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 28, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"))
if mibBuilder.loadTexts: hwMirroringGroupMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMonitorEntry.setDescription('MirroringGroup monitor-port information.')
hwMirroringGroupMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 28, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMonitorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMonitorIfIndex.setDescription('If the monitor destination is port, the value means the ifIndex of this port. If the monitor destination is board, the value means the slot number of the board. Whether the value means ifIndex or slot number references the object hwMirroringGroupMonitorType.')
hwMirroringGroupMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 28, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMonitorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMonitorRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwMirroringGroupMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 28, 1, 3), HwMirrorOrMonitorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMonitorType.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMonitorType.setDescription('Specify whether the monitor destination is port or board. If this object is not supported, then the value of hwMirroringGroupMonitorIfIndex means ifIndex.')
hwMirroringGroupReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 29), )
if mibBuilder.loadTexts: hwMirroringGroupReflectorTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupReflectorTable.setDescription('MirroringGroup reflector-port information.')
hwMirroringGroupReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 29, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"))
if mibBuilder.loadTexts: hwMirroringGroupReflectorEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupReflectorEntry.setDescription('MirroringGroup reflector-port information.')
hwMirroringGroupReflectorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 29, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupReflectorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupReflectorIfIndex.setDescription('Only valid for remote-source MirroringGroup.')
hwMirroringGroupReflectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 29, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupReflectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupReflectorRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwMirroringGroupRprobeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 30), )
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanTable.setDescription('MirroringGroup rprobe-vlan information.')
hwMirroringGroupRprobeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 30, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"))
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanEntry.setDescription('MirroringGroup rprobe-vlan information.')
hwMirroringGroupRprobeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanID.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanID.setDescription('Remote-Probe vlanID. 0 is invalid value. Only valid for remote-source and remote-destination MirroringGroup.')
hwMirroringGroupRprobeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupRprobeVlanRowStatus.setDescription('RowStatus, now support three status: createAndGo, active, destroy.')
hwMirroringGroupMirrorMacTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 31), )
if mibBuilder.loadTexts: hwMirroringGroupMirrorMacTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorMacTable.setDescription('MirroringGroup MAC information.')
hwMirroringGroupMirrorMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 31, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"), (0, "HUAWEI-LswQos-MIB", "hwMirroringGroupMirrorMacSeq"))
if mibBuilder.loadTexts: hwMirroringGroupMirrorMacEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorMacEntry.setDescription('MirroringGroup MAC information.')
hwMirroringGroupMirrorMacSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMirroringGroupMirrorMacSeq.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorMacSeq.setDescription('The sequence MAC number of the same group.')
hwMirroringGroupMirrorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 31, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorMac.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorMac.setDescription('The MAC address of the MirroringGroup.')
hwMirrorMacVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirrorMacVlanID.setStatus('current')
if mibBuilder.loadTexts: hwMirrorMacVlanID.setDescription('The vlan ID of MAC address .')
hwMirroringGroupMirroMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 31, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirroMacStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirroMacStatus.setDescription('The status of this conceptual row.')
hwMirroringGroupMirrorVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 32), )
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanTable.setDescription('MirroringGroup Vlan Information.')
hwMirroringGroupMirrorVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 32, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwMirroringGroupID"), (0, "HUAWEI-LswQos-MIB", "hwMirroringGroupMirrorVlanSeq"))
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanEntry.setDescription('MirroringGroup Vlan Information.')
hwMirroringGroupMirrorVlanSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 32, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanSeq.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanSeq.setDescription('The sequence vlan number of the same group.')
hwMirroringGroupMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanID.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanID.setDescription('The vlan ID of MirroringGroup.')
hwMirroringGroupMirrorVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanDirection.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirrorVlanDirection.setDescription('The vlan direction of MirroringGroup.')
hwMirroringGroupMirroVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 32, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMirroringGroupMirroVlanStatus.setStatus('current')
if mibBuilder.loadTexts: hwMirroringGroupMirroVlanStatus.setDescription('The status of this conceptual row.')
hwPortTrustTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 33), )
if mibBuilder.loadTexts: hwPortTrustTable.setStatus('current')
if mibBuilder.loadTexts: hwPortTrustTable.setDescription('Port trust information.')
hwPortTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 33, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwPortTrustIfIndex"))
if mibBuilder.loadTexts: hwPortTrustEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortTrustEntry.setDescription('Port trust information.')
hwPortTrustIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 33, 1, 1), Integer32())
if mibBuilder.loadTexts: hwPortTrustIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortTrustIfIndex.setDescription('ifIndex of the port which port trust is configured.')
hwPortTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("cos", 2), ("dscp", 3))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortTrustTrustType.setStatus('current')
if mibBuilder.loadTexts: hwPortTrustTrustType.setDescription('Trust type of port trust.')
hwPortTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortTrustOvercastType.setStatus('current')
if mibBuilder.loadTexts: hwPortTrustOvercastType.setDescription('Overcast type of port trust.')
hwPortTrustReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortTrustReset.setStatus('current')
if mibBuilder.loadTexts: hwPortTrustReset.setDescription('This object is used to reset port trust to default value. Read operation is meaningless.')
hwRemarkVlanIDTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34), )
if mibBuilder.loadTexts: hwRemarkVlanIDTable.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDTable.setDescription('Remark vlan ID information.')
hwRemarkVlanIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwRemarkVlanIDAclIndex"), (0, "HUAWEI-LswQos-MIB", "hwRemarkVlanIDIfIndex"), (0, "HUAWEI-LswQos-MIB", "hwRemarkVlanIDVlanID"), (0, "HUAWEI-LswQos-MIB", "hwRemarkVlanIDDirection"))
if mibBuilder.loadTexts: hwRemarkVlanIDEntry.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDEntry.setDescription('Remark vlan ID information.')
hwRemarkVlanIDAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999)))
if mibBuilder.loadTexts: hwRemarkVlanIDAclIndex.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDAclIndex.setDescription('Action identifier, acl index.')
hwRemarkVlanIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 2), Integer32())
if mibBuilder.loadTexts: hwRemarkVlanIDIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDIfIndex.setDescription('Action identifier, ifIndex.')
hwRemarkVlanIDVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwRemarkVlanIDVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDVlanID.setDescription('Action identifier, vlan ID.')
hwRemarkVlanIDDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2))))
if mibBuilder.loadTexts: hwRemarkVlanIDDirection.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDDirection.setDescription('Action identifier, direction of data stream.')
hwRemarkVlanIDUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDUserAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDUserAclNum.setDescription('The number of the user acl.')
hwRemarkVlanIDUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDUserAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDUserAclRule.setDescription('The subitem of the user acl.')
hwRemarkVlanIDIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDIpAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDIpAclNum.setDescription('The num of the IP acl.')
hwRemarkVlanIDIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDIpAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDIpAclRule.setDescription('The subitem of the IP acl.')
hwRemarkVlanIDLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDLinkAclNum.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDLinkAclNum.setDescription('The num of the link acl.')
hwRemarkVlanIDLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDLinkAclRule.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDLinkAclRule.setDescription('The subitem of the link acl.')
hwRemarkVlanIDRemarkVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDRemarkVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDRemarkVlanID.setDescription('Remark vlan ID.')
hwRemarkVlanIDPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDPacketType.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDPacketType.setDescription('Packet type of the remarked vlan ID.')
hwRemarkVlanIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 34, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemarkVlanIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRemarkVlanIDRowStatus.setDescription('The status of this conceptual row. ')
hwCosToDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 35), )
if mibBuilder.loadTexts: hwCosToDscpMapTable.setStatus('current')
if mibBuilder.loadTexts: hwCosToDscpMapTable.setDescription('COS to DSCP map information.')
hwCosToDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 35, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwCosToDscpMapCosIndex"))
if mibBuilder.loadTexts: hwCosToDscpMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwCosToDscpMapEntry.setDescription('COS to DSCP map information.')
hwCosToDscpMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwCosToDscpMapCosIndex.setStatus('current')
if mibBuilder.loadTexts: hwCosToDscpMapCosIndex.setDescription('COS index of COS to DSCP map.')
hwCosToDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCosToDscpMapDscpValue.setStatus('current')
if mibBuilder.loadTexts: hwCosToDscpMapDscpValue.setDescription('DSCP value of COS to DSCP map.')
hwCosToDscpMapReSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCosToDscpMapReSet.setStatus('current')
if mibBuilder.loadTexts: hwCosToDscpMapReSet.setDescription('This object is used to reset COS to DSCP map to default value. Read operation is meaningless.')
hwDscpToLocalPreMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 36), )
if mibBuilder.loadTexts: hwDscpToLocalPreMapTable.setStatus('current')
if mibBuilder.loadTexts: hwDscpToLocalPreMapTable.setDescription('DSCP to Local-precedence map information.')
hwDscpToLocalPreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 36, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwDscpToLocalPreMapDscpIndex"))
if mibBuilder.loadTexts: hwDscpToLocalPreMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwDscpToLocalPreMapEntry.setDescription('DSCP to Local-precedence map information.')
hwDscpToLocalPreMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwDscpToLocalPreMapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDscpToLocalPreMapDscpIndex.setDescription('DSCP Index of DSCP to Local-precedence map.')
hwDscpToLocalPreMapLocalPreVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 36, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToLocalPreMapLocalPreVal.setStatus('current')
if mibBuilder.loadTexts: hwDscpToLocalPreMapLocalPreVal.setDescription('Local-precedence value of DSCP to Local-precedence map.')
hwDscpToLocalPreMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToLocalPreMapReset.setStatus('current')
if mibBuilder.loadTexts: hwDscpToLocalPreMapReset.setDescription('This object is used to reset DSCP to Local-precedence map to default value. Read operation is meaningless.')
hwDscpToDropPreMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 37), )
if mibBuilder.loadTexts: hwDscpToDropPreMapTable.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDropPreMapTable.setDescription('DSCP to Drop-precedence map information.')
hwDscpToDropPreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 37, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwDscpToDropPreMapDscpIndex"))
if mibBuilder.loadTexts: hwDscpToDropPreMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDropPreMapEntry.setDescription('DSCP to Drop-precedence map information.')
hwDscpToDropPreMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwDscpToDropPreMapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDropPreMapDscpIndex.setDescription('DSCP Index of DSCP to Drop-precedence map.')
hwDscpToDropPreMapDropPreVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToDropPreMapDropPreVal.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDropPreMapDropPreVal.setDescription('Drop-precedence value of DSCP to Drop-precedence map.')
hwDscpToDropPreMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToDropPreMapReset.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDropPreMapReset.setDescription('This object is used to reset DSCP to Drop-precedence map to default value. Read operation is meaningless.')
hwDscpToCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 38), )
if mibBuilder.loadTexts: hwDscpToCosMapTable.setStatus('current')
if mibBuilder.loadTexts: hwDscpToCosMapTable.setDescription('DSCP to COS map information.')
hwDscpToCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 38, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwDscpToCosMapDscpIndex"))
if mibBuilder.loadTexts: hwDscpToCosMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwDscpToCosMapEntry.setDescription('DSCP to COS map information.')
hwDscpToCosMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwDscpToCosMapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDscpToCosMapDscpIndex.setDescription('DSCP index of DSCP to COS map.')
hwDscpToCosMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToCosMapCosValue.setStatus('current')
if mibBuilder.loadTexts: hwDscpToCosMapCosValue.setDescription('COS value of DSCP to COS map.')
hwDscpToCosMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 38, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToCosMapReset.setStatus('current')
if mibBuilder.loadTexts: hwDscpToCosMapReset.setDescription('This object is used to reset DSCP to COS map to default value. Read operation is meaningless.')
hwDscpToDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 39), )
if mibBuilder.loadTexts: hwDscpToDscpMapTable.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDscpMapTable.setDescription('DSCP to DSCP map information.')
hwDscpToDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 39, 1), ).setIndexNames((0, "HUAWEI-LswQos-MIB", "hwDscpToDscpMapDscpIndex"))
if mibBuilder.loadTexts: hwDscpToDscpMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDscpMapEntry.setDescription('DSCP to DSCP map information.')
hwDscpToDscpMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwDscpToDscpMapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDscpMapDscpIndex.setDescription('DSCP index of DSCP to DSCP map.')
hwDscpToDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 39, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToDscpMapDscpValue.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDscpMapDscpValue.setDescription('DSCP value of DSCP to DSCP map.')
hwDscpToDscpMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 16, 2, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDscpToDscpMapReset.setStatus('current')
if mibBuilder.loadTexts: hwDscpToDscpMapReset.setDescription('This object is used to reset DSCP to DSCP map to default value. Read operation is meaningless.')
mibBuilder.exportSymbols("HUAWEI-LswQos-MIB", hwBandwidthIfIndex=hwBandwidthIfIndex, hwCosToDropPrecedenceMapCosIndex=hwCosToDropPrecedenceMapCosIndex, hwDropModeTable=hwDropModeTable, hwStatisticUserAclRule=hwStatisticUserAclRule, hwLineRateValue=hwLineRateValue, hwStatisticRuntime=hwStatisticRuntime, hwMirrorGroupRowStatus=hwMirrorGroupRowStatus, hwPriorityPolicedServiceDscp=hwPriorityPolicedServiceDscp, hwStatisticPacketCount=hwStatisticPacketCount, hwExpMapExpIndex=hwExpMapExpIndex, hwFlowtempIndex=hwFlowtempIndex, hwQueueWeight6=hwQueueWeight6, hwBandwidthWeight=hwBandwidthWeight, hwMirrorTable=hwMirrorTable, hwWredRedMaxThreshold=hwWredRedMaxThreshold, hwRemarkVlanIDUserAclRule=hwRemarkVlanIDUserAclRule, hwTrafficShapeTable=hwTrafficShapeTable, hwLocalPrecedenceMapCosValue=hwLocalPrecedenceMapCosValue, hwMirroringGroupRowStatus=hwMirroringGroupRowStatus, hwStatisticLinkAclRule=hwStatisticLinkAclRule, hwPriorityLocalPre=hwPriorityLocalPre, hwRemarkVlanIDIfIndex=hwRemarkVlanIDIfIndex, hwDscpToDscpMapEntry=hwDscpToDscpMapEntry, hwDscpMapCosValue=hwDscpMapCosValue, hwBandwidthLinkAclNum=hwBandwidthLinkAclNum, hwMirroringGroupMirrorMacEntry=hwMirroringGroupMirrorMacEntry, hwDscpMapEntry=hwDscpMapEntry, hwMirrorGroupEntry=hwMirrorGroupEntry, hwBandwidthMaxGuaranteedWidth=hwBandwidthMaxGuaranteedWidth, hwDscpMapLocalPrecedence=hwDscpMapLocalPrecedence, hwFlowtempVlanId=hwFlowtempVlanId, hwRedirectTable=hwRedirectTable, hwPriorityLinkAclRule=hwPriorityLinkAclRule, hwRateLimitConformLocalPre=hwRateLimitConformLocalPre, hwFlowtempDscp=hwFlowtempDscp, hwRateLimitUserAclNum=hwRateLimitUserAclNum, hwDscpMapDropPrecedence=hwDscpMapDropPrecedence, hwFlowtempDIp=hwFlowtempDIp, hwMirrorGroupDirection=hwMirrorGroupDirection, hwMirrorGroupMonitorIfIndex=hwMirrorGroupMonitorIfIndex, hwRedVlanID=hwRedVlanID, hwRateLimitMeterStatByteCount=hwRateLimitMeterStatByteCount, hwStatisticTable=hwStatisticTable, hwFlowtempDMacMask=hwFlowtempDMacMask, hwQueueWeight8=hwQueueWeight8, hwBandwidthRuntime=hwBandwidthRuntime, hwBandwidthMinGuaranteedWidth=hwBandwidthMinGuaranteedWidth, hwMirrorGroupID=hwMirrorGroupID, hwDscpToDropPreMapEntry=hwDscpToDropPreMapEntry, hwLocalPrecedenceMapTable=hwLocalPrecedenceMapTable, hwRateLimitIfIndex=hwRateLimitIfIndex, hwPortTrustTable=hwPortTrustTable, hwRemarkVlanIDDirection=hwRemarkVlanIDDirection, hwRemarkVlanIDRemarkVlanID=hwRemarkVlanIDRemarkVlanID, hwDscpToLocalPreMapLocalPreVal=hwDscpToLocalPreMapLocalPreVal, hwExpMapLocalPrecedence=hwExpMapLocalPrecedence, hwRedIpAclNum=hwRedIpAclNum, hwRedirectLinkAclNum=hwRedirectLinkAclNum, PYSNMP_MODULE_ID=hwLswQosAclMib, hwFlowtempRowStatus=hwFlowtempRowStatus, hwRateLimitRowStatus=hwRateLimitRowStatus, hwMirrorGroupTable=hwMirrorGroupTable, hwTrafficShapeBurstSize=hwTrafficShapeBurstSize, hwRemarkVlanIDUserAclNum=hwRemarkVlanIDUserAclNum, hwQueueWeight7=hwQueueWeight7, hwPortQueueWeight=hwPortQueueWeight, hwRedLinkAclNum=hwRedLinkAclNum, hwPriorityLinkAclNum=hwPriorityLinkAclNum, hwFlowtempDMac=hwFlowtempDMac, hwDscpToDscpMapDscpIndex=hwDscpToDscpMapDscpIndex, hwMirroringGroupMirroVlanStatus=hwMirroringGroupMirroVlanStatus, hwDscpToCosMapEntry=hwDscpToCosMapEntry, hwWredYellowMaxProb=hwWredYellowMaxProb, hwFlowtempEnableIfIndex=hwFlowtempEnableIfIndex, hwRateLimitExceedActionType=hwRateLimitExceedActionType, hwMirroringGroupMirrorMac=hwMirroringGroupMirrorMac, hwPriorityEntry=hwPriorityEntry, hwDscpToDropPreMapDropPreVal=hwDscpToDropPreMapDropPreVal, hwExpMapExpValue=hwExpMapExpValue, hwRedDirection=hwRedDirection, hwPortWredQueueID=hwPortWredQueueID, hwExpMapDscpValue=hwExpMapDscpValue, hwPortWredIfIndex=hwPortWredIfIndex, hwPortMirrorEntry=hwPortMirrorEntry, hwRateLimitTargetRateKbps=hwRateLimitTargetRateKbps, hwRateLimitCBS=hwRateLimitCBS, hwRedirectToNextHop2=hwRedirectToNextHop2, hwQueueWeight4=hwQueueWeight4, hwFlowtempSIp=hwFlowtempSIp, hwTrafficShapeIfIndex=hwTrafficShapeIfIndex, hwFlowtempEnableTable=hwFlowtempEnableTable, hwRedirectIfIndex=hwRedirectIfIndex, hwPriorityDscp=hwPriorityDscp, hwRedProbability=hwRedProbability, hwRedRowStatus=hwRedRowStatus, hwMirroringGroupMirrorVlanTable=hwMirroringGroupMirrorVlanTable, hwFlowtempIcmpType=hwFlowtempIcmpType, hwPriorityTrustMode=hwPriorityTrustMode, hwRateLimitVlanID=hwRateLimitVlanID, hwRedirectToModifiedVlanID=hwRedirectToModifiedVlanID, hwRateLimitExceedCos=hwRateLimitExceedCos, hwRateLimitTable=hwRateLimitTable, hwRedirectToCpu=hwRedirectToCpu, hwDscpToLocalPreMapTable=hwDscpToLocalPreMapTable, hwCosToDscpMapEntry=hwCosToDscpMapEntry, hwQueueTable=hwQueueTable, hwDscpToCosMapDscpIndex=hwDscpToCosMapDscpIndex, hwQueueWeight2=hwQueueWeight2, hwFlowtempDIpMask=hwFlowtempDIpMask, hwRedLinkAclRule=hwRedLinkAclRule, hwMirroringGroupReflectorTable=hwMirroringGroupReflectorTable, hwMirroringGroupMirroMacStatus=hwMirroringGroupMirroMacStatus, hwDscpMapTable=hwDscpMapTable, hwPortWredTable=hwPortWredTable, hwPortQueueTable=hwPortQueueTable, hwMirroringGroupReflectorRowStatus=hwMirroringGroupReflectorRowStatus, hwPortTrustIfIndex=hwPortTrustIfIndex, hwPriorityUserAclNum=hwPriorityUserAclNum, hwMirroringGroupReflectorEntry=hwMirroringGroupReflectorEntry, hwFlowtempCos=hwFlowtempCos, hwDscpToDropPreMapDscpIndex=hwDscpToDropPreMapDscpIndex, hwWredYellowMinThreshold=hwWredYellowMinThreshold, hwDscpToLocalPreMapDscpIndex=hwDscpToLocalPreMapDscpIndex, hwWredRedMaxProb=hwWredRedMaxProb, hwBandwidthAclIndex=hwBandwidthAclIndex, hwQueueWeight3=hwQueueWeight3, hwMirroringGroupMonitorIfIndex=hwMirroringGroupMonitorIfIndex, hwLineRateRowStatus=hwLineRateRowStatus, hwBandwidthDirection=hwBandwidthDirection, hwCosToDscpMapReSet=hwCosToDscpMapReSet, hwFlowtempVpn=hwFlowtempVpn, hwTrafficShapeMaxRate=hwTrafficShapeMaxRate, hwFlowtempTos=hwFlowtempTos, hwLocalPrecedenceMapLocalPrecedenceIndex=hwLocalPrecedenceMapLocalPrecedenceIndex, hwStatisticByteCount=hwStatisticByteCount, hwMirroringGroupMirrorVlanID=hwMirroringGroupMirrorVlanID, hwRedirectToNestedVlanID=hwRedirectToNestedVlanID, hwDscpToLocalPreMapEntry=hwDscpToLocalPreMapEntry, hwLswQosMibObject=hwLswQosMibObject, hwPriorityPolicedServiceExp=hwPriorityPolicedServiceExp, hwDscpMapExpValue=hwDscpMapExpValue, hwRateLimitConformCos=hwRateLimitConformCos, hwWredRedMinThreshold=hwWredRedMinThreshold, hwRateLimitLinkAclRule=hwRateLimitLinkAclRule, hwRateLimitCIR=hwRateLimitCIR, hwRedirectToIfIndex=hwRedirectToIfIndex, hwMirroringGroupMonitorTable=hwMirroringGroupMonitorTable, hwCosToLocalPrecedenceMapLocalPrecedenceValue=hwCosToLocalPrecedenceMapLocalPrecedenceValue, hwPriorityPolicedServiceType=hwPriorityPolicedServiceType, hwStatisticLinkAclNum=hwStatisticLinkAclNum, hwMirroringGroupType=hwMirroringGroupType, hwLineRateDirection=hwLineRateDirection, hwRedAclIndex=hwRedAclIndex, hwPriorityCos=hwPriorityCos, hwPriorityRuntime=hwPriorityRuntime, hwExpMapEntry=hwExpMapEntry, hwStatisticIpAclNum=hwStatisticIpAclNum, hwDscpToDscpMapDscpValue=hwDscpToDscpMapDscpValue, hwRateLimitDirection=hwRateLimitDirection, hwPriorityVlanID=hwPriorityVlanID, hwPortMirrorIfIndex=hwPortMirrorIfIndex, hwBandwidthTable=hwBandwidthTable, hwRateLimitEntry=hwRateLimitEntry, hwDscpToDropPreMapTable=hwDscpToDropPreMapTable, hwCosToLocalPrecedenceMapTable=hwCosToLocalPrecedenceMapTable, hwFlowtempIcmpCode=hwFlowtempIcmpCode, hwMirrorToCpu=hwMirrorToCpu, hwMirrorUserAclRule=hwMirrorUserAclRule, hwPortMonitorBothIfIndex=hwPortMonitorBothIfIndex, hwRedEntry=hwRedEntry, hwPortTrustTrustType=hwPortTrustTrustType, hwRateLimitLinkAclNum=hwRateLimitLinkAclNum, hwDscpToCosMapTable=hwDscpToCosMapTable, hwDropModeIfIndex=hwDropModeIfIndex, hwRedirectToNextHop1=hwRedirectToNextHop1, hwPriorityAclIndex=hwPriorityAclIndex, hwWredTable=hwWredTable, hwPriorityIpPreFromCos=hwPriorityIpPreFromCos, hwDscpToDscpMapReset=hwDscpToDscpMapReset, hwRedirectUserAclRule=hwRedirectUserAclRule, hwRedRuntime=hwRedRuntime, hwPriorityIpAclRule=hwPriorityIpAclRule, hwWredYellowMaxThreshold=hwWredYellowMaxThreshold, hwPortWredQueueStartLength=hwPortWredQueueStartLength, hwRateLimitMeterStatByteXCount=hwRateLimitMeterStatByteXCount, hwMirrorToGroup=hwMirrorToGroup, hwFlowtempEntry=hwFlowtempEntry, hwMirroringGroupMirrorInboundIfIndexList=hwMirroringGroupMirrorInboundIfIndexList, hwCosToDropPrecedenceMapEntry=hwCosToDropPrecedenceMapEntry, hwStatisticAclIndex=hwStatisticAclIndex, hwRedStartQueueLen=hwRedStartQueueLen, hwMirrorLinkAclNum=hwMirrorLinkAclNum, hwBandwidthIpAclNum=hwBandwidthIpAclNum, hwMirroringGroupID=hwMirroringGroupID, hwMirroringGroupMirrorMacSeq=hwMirroringGroupMirrorMacSeq, hwDscpMapDscpIndex=hwDscpMapDscpIndex, hwRedirectRuntime=hwRedirectRuntime, hwRateLimitUserAclRule=hwRateLimitUserAclRule, hwMirrorIpAclNum=hwMirrorIpAclNum, hwExpMapCosValue=hwExpMapCosValue, hwLocalPrecedenceMapEntry=hwLocalPrecedenceMapEntry, hwRedirectTargetVlanID=hwRedirectTargetVlanID, hwRedirectRemarkedDSCP=hwRedirectRemarkedDSCP, hwMirroringGroupEntry=hwMirroringGroupEntry, hwQueueIfIndex=hwQueueIfIndex, hwWredGreenMaxProb=hwWredGreenMaxProb, hwMirrorToIfIndex=hwMirrorToIfIndex, hwWredExponent=hwWredExponent, hwMirroringGroupMirrorTable=hwMirroringGroupMirrorTable, hwStatisticCountClear=hwStatisticCountClear, hwWredIndex=hwWredIndex, hwDscpMapDscpValue=hwDscpMapDscpValue, hwPriorityPolicedServiceDropPriority=hwPriorityPolicedServiceDropPriority, hwMirrorRowStatus=hwMirrorRowStatus, hwPortWredQueueProbability=hwPortWredQueueProbability, hwRedirectIpAclRule=hwRedirectIpAclRule, hwPriorityCosFromIpPre=hwPriorityCosFromIpPre, hwTrafficShapeRowStatus=hwTrafficShapeRowStatus, hwPriorityIpAclNum=hwPriorityIpAclNum, hwStatisticVlanID=hwStatisticVlanID, hwRateLimitIpAclNum=hwRateLimitIpAclNum, hwBandwidthLinkAclRule=hwBandwidthLinkAclRule, hwDropModeMode=hwDropModeMode, hwStatisticIfIndex=hwStatisticIfIndex, hwPriorityPolicedServiceCos=hwPriorityPolicedServiceCos, hwDropModeEntry=hwDropModeEntry, hwLswQosAclMib=hwLswQosAclMib, hwExpMapTable=hwExpMapTable, hwMirroringGroupMirrorVlanDirection=hwMirroringGroupMirrorVlanDirection, hwMirroringGroupMirrorEntry=hwMirroringGroupMirrorEntry, hwRedirectRemarkedPri=hwRedirectRemarkedPri, hwLineRateEntry=hwLineRateEntry, hwBandwidthRowStatus=hwBandwidthRowStatus, hwTrafficShapeQueueId=hwTrafficShapeQueueId, hwRateLimitEBS=hwRateLimitEBS, hwMirroringGroupMirrorInTypeList=hwMirroringGroupMirrorInTypeList, hwFlowtempSMac=hwFlowtempSMac, hwPriorityRowStatus=hwPriorityRowStatus, hwMirroringGroupMonitorRowStatus=hwMirroringGroupMonitorRowStatus, hwFlowtempSPort=hwFlowtempSPort, hwRemarkVlanIDLinkAclNum=hwRemarkVlanIDLinkAclNum, hwRateLimitRuntime=hwRateLimitRuntime, hwRedirectVlanID=hwRedirectVlanID, hwRemarkVlanIDLinkAclRule=hwRemarkVlanIDLinkAclRule, HwMirrorOrMonitorType=HwMirrorOrMonitorType, hwRedirectEntry=hwRedirectEntry, hwLineRateTable=hwLineRateTable, hwCosToDscpMapDscpValue=hwCosToDscpMapDscpValue, hwBandwidthIpAclRule=hwBandwidthIpAclRule, hwMirroringGroupMonitorEntry=hwMirroringGroupMonitorEntry, hwWredQueueId=hwWredQueueId, hwMirroringGroupMirrorRowStatus=hwMirroringGroupMirrorRowStatus, hwPriorityIpPre=hwPriorityIpPre, hwDscpToDropPreMapReset=hwDscpToDropPreMapReset)
mibBuilder.exportSymbols("HUAWEI-LswQos-MIB", hwRateLimitPeakRate=hwRateLimitPeakRate, hwCosToDropPrecedenceMapTable=hwCosToDropPrecedenceMapTable, hwMirroringGroupRprobeVlanTable=hwMirroringGroupRprobeVlanTable, hwCosToLocalPrecedenceMapCosIndex=hwCosToLocalPrecedenceMapCosIndex, hwPortQueueWrrPriority=hwPortQueueWrrPriority, hwRateLimitIpAclRule=hwRateLimitIpAclRule, hwPriorityUserAclRule=hwPriorityUserAclRule, hwDscpToLocalPreMapReset=hwDscpToLocalPreMapReset, hwBandwidthEntry=hwBandwidthEntry, hwMirroringGroupReflectorIfIndex=hwMirroringGroupReflectorIfIndex, hwPortTrustReset=hwPortTrustReset, hwRateLimitConformActionType=hwRateLimitConformActionType, hwRateLimitTargetRateMbps=hwRateLimitTargetRateMbps, hwStatisticUserAclNum=hwStatisticUserAclNum, hwWredGreenMaxThreshold=hwWredGreenMaxThreshold, hwMirrorUserAclNum=hwMirrorUserAclNum, hwRedirectUserAclNum=hwRedirectUserAclNum, hwRemarkVlanIDIpAclNum=hwRemarkVlanIDIpAclNum, hwExpMapDropPrecedence=hwExpMapDropPrecedence, hwDscpToCosMapReset=hwDscpToCosMapReset, hwLineRateIfIndex=hwLineRateIfIndex, hwDscpToCosMapCosValue=hwDscpToCosMapCosValue, hwMirroringGroupMonitorType=hwMirroringGroupMonitorType, hwMirrorGroupMirrorIfIndexList=hwMirrorGroupMirrorIfIndexList, hwPortMirrorRowStatus=hwPortMirrorRowStatus, hwPortWredEntry=hwPortWredEntry, hwFlowtempEthProtocol=hwFlowtempEthProtocol, hwRedirectAclIndex=hwRedirectAclIndex, hwFlowtempFragment=hwFlowtempFragment, hwRedirectLinkAclRule=hwRedirectLinkAclRule, hwMirrorIpAclRule=hwMirrorIpAclRule, hwRedirectRemarkedTos=hwRedirectRemarkedTos, hwRedirectDirection=hwRedirectDirection, hwStatisticPacketXCount=hwStatisticPacketXCount, hwRedTable=hwRedTable, hwRateLimitPIR=hwRateLimitPIR, hwRateLimitExceedDscp=hwRateLimitExceedDscp, hwPortTrustEntry=hwPortTrustEntry, hwFlowtempEnableEntry=hwFlowtempEnableEntry, hwPortQueueEntry=hwPortQueueEntry, hwWredEntry=hwWredEntry, hwCosToDscpMapCosIndex=hwCosToDscpMapCosIndex, hwMirroringGroupStatus=hwMirroringGroupStatus, hwMirroringGroupMirrorVlanEntry=hwMirroringGroupMirrorVlanEntry, hwQueueWeight5=hwQueueWeight5, hwRedStopQueueLen=hwRedStopQueueLen, hwPortQueueQueueID=hwPortQueueQueueID, hwRedirectToSlotNo=hwRedirectToSlotNo, hwMirrorLinkAclRule=hwMirrorLinkAclRule, hwFlowtempTcpFlag=hwFlowtempTcpFlag, hwMirrorVlanID=hwMirrorVlanID, hwMirroringGroupRprobeVlanEntry=hwMirroringGroupRprobeVlanEntry, hwFlowtempEnableVlanID=hwFlowtempEnableVlanID, hwPortMirrorDirection=hwPortMirrorDirection, hwFlowtempDPort=hwFlowtempDPort, hwRedIpAclRule=hwRedIpAclRule, hwPriorityDirection=hwPriorityDirection, hwExpMapConformLevel=hwExpMapConformLevel, hwFlowtempEnableFlowtempIndex=hwFlowtempEnableFlowtempIndex, hwTrafficShapeEntry=hwTrafficShapeEntry, hwMirrorMacVlanID=hwMirrorMacVlanID, hwDropModeWredIndex=hwDropModeWredIndex, hwFlowtempTable=hwFlowtempTable, hwMirroringGroupMirrorMacTable=hwMirroringGroupMirrorMacTable, hwRateLimitAclIndex=hwRateLimitAclIndex, hwStatisticDirection=hwStatisticDirection, hwFlowtempSIpMask=hwFlowtempSIpMask, hwFlowtempIpPre=hwFlowtempIpPre, hwMirroringGroupRprobeVlanID=hwMirroringGroupRprobeVlanID, hwCosToLocalPrecedenceMapEntry=hwCosToLocalPrecedenceMapEntry, hwStatisticIpAclRule=hwStatisticIpAclRule, hwMirrorAclIndex=hwMirrorAclIndex, hwRedirectRowStatus=hwRedirectRowStatus, hwRedirectIpAclNum=hwRedirectIpAclNum, hwDscpMapConformLevel=hwDscpMapConformLevel, hwMirroringGroupRprobeVlanRowStatus=hwMirroringGroupRprobeVlanRowStatus, hwMirroringGroupMirrorOutTypeList=hwMirroringGroupMirrorOutTypeList, hwPortMirrorTable=hwPortMirrorTable, hwRedirectMode=hwRedirectMode, hwRemarkVlanIDEntry=hwRemarkVlanIDEntry, hwRedirectToNextHop3=hwRedirectToNextHop3, hwDscpToDscpMapTable=hwDscpToDscpMapTable, hwTrafficShapeBufferLimit=hwTrafficShapeBufferLimit, hwRemarkVlanIDPacketType=hwRemarkVlanIDPacketType, hwQueueEntry=hwQueueEntry, hwRedIfIndex=hwRedIfIndex, hwQueueScheduleMode=hwQueueScheduleMode, hwStatisticRowStatus=hwStatisticRowStatus, hwCosToDropPrecedenceMapDropPrecedenceValue=hwCosToDropPrecedenceMapDropPrecedenceValue, hwMirrorRuntime=hwMirrorRuntime, hwQueueMaxDelay=hwQueueMaxDelay, hwRemarkVlanIDRowStatus=hwRemarkVlanIDRowStatus, hwStatisticEntry=hwStatisticEntry, hwMirroringGroupMirrorOutboundIfIndexList=hwMirroringGroupMirrorOutboundIfIndexList, hwRemarkVlanIDAclIndex=hwRemarkVlanIDAclIndex, hwStatisticByteXCount=hwStatisticByteXCount, hwPriorityTable=hwPriorityTable, hwMirrorIfIndex=hwMirrorIfIndex, hwPortTrustOvercastType=hwPortTrustOvercastType, hwWredGreenMinThreshold=hwWredGreenMinThreshold, hwMirrorDirection=hwMirrorDirection, hwMirrorEntry=hwMirrorEntry, hwMirroringGroupMirrorVlanSeq=hwMirroringGroupMirrorVlanSeq, hwPortQueueIfIndex=hwPortQueueIfIndex, hwFlowtempIpProtocol=hwFlowtempIpProtocol, hwRateLimitConformDscp=hwRateLimitConformDscp, hwRateLimitMeterStatState=hwRateLimitMeterStatState, hwQueueWeight1=hwQueueWeight1, hwCosToDscpMapTable=hwCosToDscpMapTable, hwLocalPrecedenceMapConformLevel=hwLocalPrecedenceMapConformLevel, hwPriorityIfIndex=hwPriorityIfIndex, hwMirroringGroupTable=hwMirroringGroupTable, hwRemarkVlanIDIpAclRule=hwRemarkVlanIDIpAclRule, hwFlowtempSMacMask=hwFlowtempSMacMask, hwRemarkVlanIDTable=hwRemarkVlanIDTable, hwRemarkVlanIDVlanID=hwRemarkVlanIDVlanID, hwPriorityPolicedServiceLoaclPre=hwPriorityPolicedServiceLoaclPre, hwBandwidthVlanID=hwBandwidthVlanID)
