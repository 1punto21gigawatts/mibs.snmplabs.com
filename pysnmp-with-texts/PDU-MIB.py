#
# PySNMP MIB module PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, IpAddress, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, enterprises, Integer32, TimeTicks, ObjectIdentity, Unsigned32, iso, Counter32, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "enterprises", "Integer32", "TimeTicks", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "Counter64", "MibIdentifier")
DateAndTime, DisplayString, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TruthValue", "TextualConvention")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2016-02-22 00:00', '2016-02-03 00:00', '2015-11-02 00:00', '2015-10-26 00:00', '2015-10-16 00:00', '2015-10-02 00:00', '2015-06-19 00:00', '2015-03-11 00:00', '2014-04-03 00:00', '2012-03-22 00:00', '2012-03-15 00:00', '2012-03-14 00:00', '2011-11-30 00:00', '2011-11-07 00:00', '2011-10-06 00:00', '2011-05-17 00:00', '2011-05-11 00:00', '2011-04-18 00:00', '2011-02-14 00:00', '2011-01-24 00:00', '2010-11-30 00:00', '2010-11-04 00:00', '2010-07-21 00:00', '2010-07-19 00:00', '2010-07-15 00:00', '2010-07-13 00:00', '2010-06-29 00:00', '2010-06-07 00:00', '2010-05-27 00:00', '2010-05-20 00:00', '2010-05-17 00:00', '2009-06-09 00:00', '2009-04-20 00:00', '2009-02-13 00:00', '2009-02-12 00:00', '2008-12-01 00:00', '2008-10-24 00:00', '2008-09-25 00:00', '2008-09-05 00:00', '2008-06-05 00:00', '2007-11-28 00:00', '2007-06-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raritan.setRevisionsDescriptions(('1) Added inletCurrentUnbalanceHysteresis to inletTable. ', '1) Added varbind sensorDescr to the following traps managingenvironmentalSensor, unmanagingenvironmentalSensor. ', '1) Added ipmiOverLAN to the info table. ', '1) Added Comment above primaryNTPServerAddressType ', '1) Modified DESCRIPTION clauses of the following traps. ipmiOverLANEnabled, ipmiOverLANDisabled 2) Added the following traps to the NOTIFICATION-GROUP trapsGroup ipmiOverLANEnabled, ipmiOverLANDisabled ', '1) Modified DESCRIPTION clause of thresholdAlarm trap ', '1) Modified DESCRIPTION clauses of dataLogAvgExternalSensorValue, dataLogMaxExternalSensorValue, dataLogAvgExternalSensorValue 2) Modified DESCRIPTION CLAUSE of reorderexternalSensorTableEntries ', '1) Added the following under info. thresholdValue, sensorValue 2) Added thresholdValue and sensorValue to the following traps thresholdAlarm ', '1) Modified the DESCRIPTION of the following. inletActiveEnergy inletPoleMaxCurrent inletPoleActivePower inletPoleApparentPower inletPolePowerFactor inletPoleActiveEnergy neutralCurrentUpperWarning neutralCurrentUppeCritical dataLogAvgInletPoleActivePower dataLogMaxInletPoleActivePower dataLogMinInletPoleActivePower dataLogAvgInletPoleApparentPower dataLogMaxInletPoleApparentPower dataLogMinInletPoleApparentPower dataLogAvgInletPoleActiveEnergy dataLogMaxInletPoleActiveEnergy dataLogMinInletPoleActiveEnergy currentUnbalance 2) Added the following traps managingenvironmentalSensor, unmanagingenvironmentalSensor ', '1) Added dataLogExternalSensorChanged to dataLogExternalSensorTable. ', '1) Added support for NTP servers. Added the following objects under info synchronizeWithNTPServer, useDHCPProvidedNTPServer, primaryNTPServerAddressType, primaryNTPServerAddress, secondaryNTPServerAddressType, secondaryNTPServerAddress, daylightSavingsTime ', '1) Added support for external sensors in the data log Added dataLogExternalSensorTable ', '1) Modified DESCRIPTION of configureAlerts to note that Policy Name is case-sensitive ', '1) Added configureAlerts under info Added SensorClassEnumeration, EventTypeEnumeration, EventDirectionEnumeration ', '1) Added fipsMode under info 2) Added EnabledDisabledEnumeration 3) Added fipsModeEnabled and fipsModeDisabled traps ', '1) Added altitude under info ', '1) Modified the DESCRIPTION clause of dataLoggingInterval and measurementsPerLogEntry 2) Added reorderExternaSensorTableEntries to specify the order of the entries in externalSensorTable 3) Added voltageMeasurementFailure trap ', '1) Added dataLogAvgActivePower,dataLogMaxActivePower,dataLogMinActivePower, dataLogAvgApparentPower,dataLogMaxApparentPower, dataLogMinApparentPower to DataLogEntryStruct 2) Added dataLogAvgOutletCurrent,dataLogMaxOutletCurrent,dataLogMinOutletCurrent, dataLogAvgOutletVoltage,dataLogMaxOutletVoltage,dataLogMinOutletVoltage, dataLogAvgOutletPowerFactor,dataLogMaxOutletPowerFactor,dataLogMinOutletPowerFactor, dataLogAvgOutletWattHours,dataLogMaxOutletWattHours,dataLogMinOutletWattHours to DataLogOutletEntryStruct 3) Added dataLogAvgCircuitBreakerCurrent,dataLogMaxCircuitBreakerCurrent,dataLogMinCircuitBreakerCurrent to DataLogCircuitBreakerEntryStruct 4) Added dataLogAvgInletCurrentUnbalance,dataLogMaxInletCurrentUnbalance,dataLogMinInletCurrentUnbalance, dataLogAvgInletActivePower,dataLogMaxInletActivePower,dataLogMinInletActivePower, dataLogAvgInletApparentPower,dataLogMaxInletApparentPower,dataLogMinInletApparentPower, dataLogAvgInletActiveEnergy,dataLogMaxInletActiveEnergy,dataLogMinInletActiveEnergy, to DataLogInletEntryStruct 5) Added dataLogAvgInletPoleCurrent,dataLogMaxInletPoleCurrent,dataLogMinInletPoleCurrent, dataLogAvgInletPoleVoltage,dataLogMaxInletPoleVoltage,dataLogMinInletPoleVoltage, dataLogAvgInletPoleActivePower,dataLogMaxInletPoleActivePower,dataLogMinInletPoleActivePower, dataLogAvgInletPoleApparentPower,dataLogMaxInletPoleApparentPower,dataLogMinInletPoleApparentPower, dataLogAvgInletPoleActiveEnergy,dataLogMaxInletPoleActiveEnergy,dataLogMinInletPoleActiveEnergy to DataLogInletPoleEntryStruct 6) Added measurementsPerLogEntry under info. 7) Deprecated dataLogActivePower,dataLogApparentPower,dataLogOutletCurrent, dataLogOutletVoltage,dataLogOutletPowerFactor, dataLogOutletOnTime, dataLogCircuitBreakerCurrent,dataLogOutletWattHours,dataLogInletPoleCurrent, dataLogInletPoleVoltage,dataLogInletCurrentUnbalance,dataLogInletActivePower, dataLogInletApparentPower,dataLogInletActiveEnergy 8) Deprecated dataLoggingInterval ', '1) Added PowerCIMStatusEnumeration and powerCIMStatus ', '1) Added lastUpgradeStatus,lastUpgradeTimestamp, lastUpgradeErrorDescription ', '1) Added externalSensorNumber,externalSensorType, externalSensorName, externalSensorChannelNumber, externalBinarySensorSubtype, externalSensorSerialNumber to environmentalSensorsConnectivityRestored trap 2) Added externalSensorNumber,externalSensorType, externalSensorName, externalSensorChannelNumber, externalBinarySensorSubtype, externalSensorSerialNumber to environmentalSensorsConnectivityLost trap 3) Added externalSensorSerialNumber to externalOnOffSensorStateChange 4) Added sensorIdentificationString to thresholdAlarm trap 5) Added none to TypeOfSensorEnumeration ', '1) Added environmentalSensorsConnectivityRestored trap 2) Changed MAX-ACCESS of inlineMeter to read-only ', '1) Renamed externalBinarySensorStateChange trap to externalOnOffSensorStateChange ', '1) Added externalBinarySensorStateChange trap 2) Added contact to TypeOfSensorEnumeration', '1) Added binary to TypeOfSensorEnumeration 2) Added externalBinarySensorSubtype to ExternalSensorEntryStruct', 'Added outletCurrentHysteresis circuitBreakerCurrentHysteresis unitOrLineVoltageHysteresis, unitOrLineCurrentHysteresis, unitTempHysteresis, currentUnbalanceHysteresis inletCurrentHysteresis, inletVoltageHysteresis, externalSensorHysteresis', 'Added externalSensorChannelNumber to externalSensorTable', 'Added Alarmed to StateOfSensorEnumeration', 'Moved the externalSensorTable from under board to under pdu', 'In the externalSensorTable, changed SYNTAX of externalSensorLowerCriticalThreshold, externalSensorLowerWarningThreshold,externalSensorUpperCriticalThreshold, externalSensorUpperWarningThreshold to Integer32', 'Added externalSensorTable for representing all types of external sensors Deprecated tempSensorTable and humiditySensorTable', 'Added support for multiple inlets/inline meters', 'For PX 1.3.5;Deprecated SensorStateEnumeration & SensorTypeEnumeration', 'For PX 1.3.5;Added support for environmental sensor coordinates: added tempXCoordinate,tempYCoordinate,tempZCoordinate to tempSensorTable added humidityXCoordinate,humidityYCoordinate,humidityZCoordinate to humiditySensorTable added externalSensorsZCoordinateUnits under info ', 'For PX 1.3.5;Added support for current unbalance: enabling/disabling, unbalance value and thresholds currentUnbalanceSupport,currentUnbalance,currentUnbalanceUpperWarning,currentUnbalanceUpper', 'For PX 1.3;Added outletEnergySupport to indicate whether outlet energy is supported', 'For PX 1.3;Added Watt-Hours for outlets, lower current warning & lower critical thresholds for outlets', 'Added trap for environmental sensors disconnected', 'Add support for data Log ( line, circuit breaker,outlet ) Retrieval', 'PX 1.2 MIB supports 3-phase PDUs.', 'Modfied MIB in effort to better support HP OpenView and other SNMP managers.', 'Updated version for remote access to pdu.',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201602220000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
if mibBuilder.loadTexts: raritan.setContactInfo(' Author: Raritan Americas, Inc. postal: Raritan Americas, Inc. 400 Cottontail Lane Somerset, NJ 08873 email: tech@raritan.com phone: +1 732 764 8886 ')
if mibBuilder.loadTexts: raritan.setDescription('This mib describes the SNMP functions of the Dominion PX Power Distribution Unit by Raritan Computer.')
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 2))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 3))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 9))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3))
lineCurrents = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4))
circuitBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5))
lineVoltages = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6))
dataLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7))
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20))
inletPole = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21))
dataLogOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10))
dataLogCircuitBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15))
dataLogInputLine = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14))
dataLogInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12))
dataLogInletPole = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13))
dataLogExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16))
unitReadings = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 1)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroup"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('deprecated')
if mibBuilder.loadTexts: compliance.setDescription('The requirements for conformance to the PDU-MIB. This is deprecated and the new compliance ComplianceRev1 has been added')
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 2)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "lineCurrentGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "lineVoltageGroup"), ("PDU-MIB", "dataLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: complianceRev1.setDescription('The requirements for conformance to the PDU-MIB. This is deprecated and the new compliance ComplianceRev2 has been added')
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 3)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev2 = complianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: complianceRev2.setDescription('The requirements for conformance to the PDU-MIB. This is deprecated and the new compliance ComplianceRev3 has been added')
complianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 4)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "inletsGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev2"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "inletPoleGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroupRev"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev3 = complianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: complianceRev3.setDescription('The requirements for conformance to the PDU-MIB.This is deprecated and the new compliance ComplianceRev4 has been added')
complianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 5)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "inletsGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev2"), ("PDU-MIB", "externalSensorsGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "inletPoleGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroupRev"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev4 = complianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: complianceRev4.setDescription('The requirements for conformance to the PDU-MIB. This is deprecated and the new compliance ComplianceRev5 has been added')
complianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 6)).setObjects(("PDU-MIB", "infoGroupRev2"), ("PDU-MIB", "inletsGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev2"), ("PDU-MIB", "externalSensorsGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "inletPoleGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev5 = complianceRev5.setStatus('current')
if mibBuilder.loadTexts: complianceRev5.setDescription('The requirements for conformance to the PDU-MIB.')
infoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 1)).setObjects(("PDU-MIB", "dataLoggingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroup = infoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: infoGroup.setDescription('A collection of objects providing basic information about the pdu.')
infoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 22)).setObjects(("PDU-MIB", "firmwareVersion"), ("PDU-MIB", "serialNumber"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "netmask"), ("PDU-MIB", "gateway"), ("PDU-MIB", "mac"), ("PDU-MIB", "hardwareRev"), ("PDU-MIB", "userName"), ("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "targetUser"), ("PDU-MIB", "groupName"), ("PDU-MIB", "imageVersion"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "thresholdDescr"), ("PDU-MIB", "thresholdSeverity"), ("PDU-MIB", "thresholdEventType"), ("PDU-MIB", "status"), ("PDU-MIB", "slaveIpAddress"), ("PDU-MIB", "inputCurrentRating"), ("PDU-MIB", "ratedVoltage"), ("PDU-MIB", "ratedPower"), ("PDU-MIB", "outletSwitching"), ("PDU-MIB", "dataLogging"), ("PDU-MIB", "dataCollectionInterval"), ("PDU-MIB", "outletEnergySupport"), ("PDU-MIB", "currentUnbalanceSupport"), ("PDU-MIB", "externalSensorsZCoordinateUnits"), ("PDU-MIB", "inlineMeter"), ("PDU-MIB", "oldSensorState"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "sensorIdentificationString"), ("PDU-MIB", "lastUpgradeStatus"), ("PDU-MIB", "lastUpgradeTimestamp"), ("PDU-MIB", "lastUpgradeErrorDescription"), ("PDU-MIB", "powerCIMStatus"), ("PDU-MIB", "measurementsPerLogEntry"), ("PDU-MIB", "psocNumber"), ("PDU-MIB", "altitude"), ("PDU-MIB", "configureAlerts"), ("PDU-MIB", "fipsMode"), ("PDU-MIB", "synchronizeWithNTPServer"), ("PDU-MIB", "useDHCPProvidedNTPServer"), ("PDU-MIB", "primaryNTPServerAddressType"), ("PDU-MIB", "primaryNTPServerAddress"), ("PDU-MIB", "secondaryNTPServerAddressType"), ("PDU-MIB", "secondaryNTPServerAddress"), ("PDU-MIB", "daylightSavingsTime"), ("PDU-MIB", "thresholdValue"), ("PDU-MIB", "sensorValue"), ("PDU-MIB", "ipmiOverLAN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroupRev2 = infoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: infoGroupRev2.setDescription('A collection of objects providing basic information about the pdu.')
outletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 2)).setObjects(("PDU-MIB", "outletCount"), ("PDU-MIB", "outletLabel"), ("PDU-MIB", "outletCurrentRating"), ("PDU-MIB", "outletOperationalState"), ("PDU-MIB", "outletCurrent"), ("PDU-MIB", "outletMaxCurrent"), ("PDU-MIB", "outletVoltage"), ("PDU-MIB", "outletActivePower"), ("PDU-MIB", "outletApparentPower"), ("PDU-MIB", "outletPowerFactor"), ("PDU-MIB", "outletCurrentUpperWarning"), ("PDU-MIB", "outletCurrentUpperCritical"), ("PDU-MIB", "outletCurrentLowerWarning"), ("PDU-MIB", "outletCurrentLowerCritical"), ("PDU-MIB", "outletCurrentHysteresis"), ("PDU-MIB", "outletWattHours"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    outletsGroup = outletsGroup.setStatus('current')
if mibBuilder.loadTexts: outletsGroup.setDescription('A collection of objects providing basic information about the outlets, including sensor readings.')
unitSensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 4)).setObjects(("PDU-MIB", "unitCurrent"), ("PDU-MIB", "unitVoltage"), ("PDU-MIB", "unitActivePower"), ("PDU-MIB", "unitApparentPower"), ("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitVoltageLowerWarning"), ("PDU-MIB", "unitVoltageUpperWarning"), ("PDU-MIB", "unitVoltageLowerCritical"), ("PDU-MIB", "unitVoltageUpperCritical"), ("PDU-MIB", "unitCurrentUpperWarning"), ("PDU-MIB", "unitCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroup = unitSensorsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: unitSensorsGroup.setDescription('A collection of objects providing unit level sensor readings.This group is deprecated in favor of unitSensorsGroupRev')
externalTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 6)).setObjects(("PDU-MIB", "tempSensorCount"), ("PDU-MIB", "tempSensorLabel"), ("PDU-MIB", "temperature"), ("PDU-MIB", "tempLowerWarning"), ("PDU-MIB", "tempUpperWarning"), ("PDU-MIB", "tempLowerCritical"), ("PDU-MIB", "tempUpperCritical"), ("PDU-MIB", "tempXCoordinate"), ("PDU-MIB", "tempYCoordinate"), ("PDU-MIB", "tempZCoordinate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalTemperatureGroup = externalTemperatureGroup.setStatus('deprecated')
if mibBuilder.loadTexts: externalTemperatureGroup.setDescription('A collection of objects providing external temperature sensor readings and threshold settings. This group is deprecated in favor of the externalSensorsGroup')
externalHumidityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 7)).setObjects(("PDU-MIB", "humiditySensorCount"), ("PDU-MIB", "humiditySensorLabel"), ("PDU-MIB", "humidity"), ("PDU-MIB", "humidityLowerWarning"), ("PDU-MIB", "humidityUpperWarning"), ("PDU-MIB", "humidityLowerCritical"), ("PDU-MIB", "humidityUpperCritical"), ("PDU-MIB", "humidityXCoordinate"), ("PDU-MIB", "humidityYCoordinate"), ("PDU-MIB", "humidityZCoordinate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalHumidityGroup = externalHumidityGroup.setStatus('deprecated')
if mibBuilder.loadTexts: externalHumidityGroup.setDescription('A collection of objects providing external humidity sensor readings and threshold settings. This group is deprecated in favor of the externalSensorsGroup')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 9)).setObjects(("PDU-MIB", "rebootStarted"), ("PDU-MIB", "rebootCompleted"), ("PDU-MIB", "userLogin"), ("PDU-MIB", "userLogout"), ("PDU-MIB", "userAuthenticationFailure"), ("PDU-MIB", "userSessionTimeout"), ("PDU-MIB", "userAdded"), ("PDU-MIB", "userModified"), ("PDU-MIB", "userDeleted"), ("PDU-MIB", "groupAdded"), ("PDU-MIB", "groupModified"), ("PDU-MIB", "groupDeleted"), ("PDU-MIB", "deviceUpdateStarted"), ("PDU-MIB", "userBlocked"), ("PDU-MIB", "powerControl"), ("PDU-MIB", "userPasswordChanged"), ("PDU-MIB", "passwordSettingsChanged"), ("PDU-MIB", "firmwareFileDiscarded"), ("PDU-MIB", "firmwareValidationFailed"), ("PDU-MIB", "securityViolation"), ("PDU-MIB", "logFileCleared"), ("PDU-MIB", "thresholdAlarm"), ("PDU-MIB", "outletGroupingConnectivityLost"), ("PDU-MIB", "circuitBreakerTripped"), ("PDU-MIB", "circuitBreakerRecovered"), ("PDU-MIB", "bulkConfigurationSaved"), ("PDU-MIB", "bulkConfigurationCopied"), ("PDU-MIB", "environmentalSensorsConnectivityLost"), ("PDU-MIB", "externalOnOffSensorStateChange"), ("PDU-MIB", "environmentalSensorsConnectivityRestored"), ("PDU-MIB", "voltageMeasurementError"), ("PDU-MIB", "fipsModeEnabled"), ("PDU-MIB", "fipsModeDisabled"), ("PDU-MIB", "managingenvironmentalSensor"), ("PDU-MIB", "unmanagingenvironmentalSensor"), ("PDU-MIB", "ipmiOverLANEnabled"), ("PDU-MIB", "ipmiOverLANDisabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
if mibBuilder.loadTexts: trapsGroup.setDescription('A collection of traps.')
lineCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 10)).setObjects(("PDU-MIB", "lineCurrentCount"), ("PDU-MIB", "lineCurrentLabel"), ("PDU-MIB", "lineCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lineCurrentGroup = lineCurrentGroup.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrentGroup.setDescription('A collection of objects describing the line inputs. This group is deprecated in favor of inletPoleGroup')
circuitBreakerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 11)).setObjects(("PDU-MIB", "circuitBreakerCount"), ("PDU-MIB", "circuitBreakerLabel"), ("PDU-MIB", "circuitBreakerCurrentRating"), ("PDU-MIB", "circuitBreakerState"), ("PDU-MIB", "circuitBreakerCurrent"), ("PDU-MIB", "circuitBreakerCurrentUpperWarning"), ("PDU-MIB", "circuitBreakerCurrentUpperCritical"), ("PDU-MIB", "circuitBreakerCurrentHysteresis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    circuitBreakerGroup = circuitBreakerGroup.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerGroup.setDescription('A collection of objects describing the circuit breakers.')
lineVoltageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 12)).setObjects(("PDU-MIB", "lineVoltageCount"), ("PDU-MIB", "lineVoltageLabel"), ("PDU-MIB", "lineVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lineVoltageGroup = lineVoltageGroup.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltageGroup.setDescription('A collection of objects describing the line voltages. This group is deprecated in favor of inletPoleGroup')
unitSensorsGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 13)).setObjects(("PDU-MIB", "unitActivePower"), ("PDU-MIB", "unitApparentPower"), ("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitOrLineVoltageLowerWarning"), ("PDU-MIB", "unitOrLineVoltageUpperWarning"), ("PDU-MIB", "unitOrLineVoltageLowerCritical"), ("PDU-MIB", "unitOrLineVoltageUpperCritical"), ("PDU-MIB", "unitOrLineCurrentUpperWarning"), ("PDU-MIB", "unitOrLineCurrentUpperCritical"), ("PDU-MIB", "neutralCurrentUpperWarning"), ("PDU-MIB", "neutralCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"), ("PDU-MIB", "currentUnbalance"), ("PDU-MIB", "currentUnbalanceUpperWarning"), ("PDU-MIB", "currentUnbalanceUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroupRev = unitSensorsGroupRev.setStatus('deprecated')
if mibBuilder.loadTexts: unitSensorsGroupRev.setDescription('A collection of objects providing unit level sensor readings.This group is deprecated in favor of unitSensorsGroupRev2')
unitSensorsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 18)).setObjects(("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitOrLineVoltageLowerWarning"), ("PDU-MIB", "unitOrLineVoltageUpperWarning"), ("PDU-MIB", "unitOrLineVoltageLowerCritical"), ("PDU-MIB", "unitOrLineVoltageUpperCritical"), ("PDU-MIB", "unitOrLineCurrentUpperWarning"), ("PDU-MIB", "unitOrLineCurrentUpperCritical"), ("PDU-MIB", "neutralCurrentUpperWarning"), ("PDU-MIB", "neutralCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"), ("PDU-MIB", "currentUnbalance"), ("PDU-MIB", "currentUnbalanceUpperWarning"), ("PDU-MIB", "currentUnbalanceUpperCritical"), ("PDU-MIB", "unitOrLineVoltageHysteresis"), ("PDU-MIB", "unitOrLineCurrentHysteresis"), ("PDU-MIB", "unitTempHysteresis"), ("PDU-MIB", "currentUnbalanceHysteresis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroupRev2 = unitSensorsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: unitSensorsGroupRev2.setDescription('A collection of objects providing unit level sensor readings.')
dataLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 14)).setObjects(("PDU-MIB", "dataLogCount"), ("PDU-MIB", "dataLogLatestIndex"), ("PDU-MIB", "dataLogTimeStamp"), ("PDU-MIB", "dataLogActivePower"), ("PDU-MIB", "dataLogApparentPower"), ("PDU-MIB", "dataLogOutletCurrent"), ("PDU-MIB", "dataLogOutletVoltage"), ("PDU-MIB", "dataLogOutletPowerFactor"), ("PDU-MIB", "dataLogOutletOnTime"), ("PDU-MIB", "dataLogCircuitBreakerCurrent"), ("PDU-MIB", "dataLogInputLineCurrent"), ("PDU-MIB", "dataLogInputLineVoltage"), ("PDU-MIB", "dataLogOutletWattHours"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dataLogGroup = dataLogGroup.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogGroup.setDescription('A collection of objects describing the pdu data. This group is being deprecated in favor of dataLogGroupRev ')
dataLogGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 17)).setObjects(("PDU-MIB", "dataLogCount"), ("PDU-MIB", "dataLogLatestIndex"), ("PDU-MIB", "dataLogTimeStamp"), ("PDU-MIB", "dataLogActivePower"), ("PDU-MIB", "dataLogApparentPower"), ("PDU-MIB", "dataLogOutletCurrent"), ("PDU-MIB", "dataLogOutletVoltage"), ("PDU-MIB", "dataLogOutletPowerFactor"), ("PDU-MIB", "dataLogOutletOnTime"), ("PDU-MIB", "dataLogCircuitBreakerCurrent"), ("PDU-MIB", "dataLogOutletWattHours"), ("PDU-MIB", "dataLogInletPoleCurrent"), ("PDU-MIB", "dataLogInletPoleVoltage"), ("PDU-MIB", "dataLogInletCurrentUnbalance"), ("PDU-MIB", "dataLogInletActivePower"), ("PDU-MIB", "dataLogInletApparentPower"), ("PDU-MIB", "dataLogInletActiveEnergy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dataLogGroupRev = dataLogGroupRev.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogGroupRev.setDescription('A collection of objects describing the pdu data. This group is being deprecated in favor of dataLogGroupRev2')
dataLogGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 21)).setObjects(("PDU-MIB", "dataLogCount"), ("PDU-MIB", "dataLogLatestIndex"), ("PDU-MIB", "dataLogTimeStamp"), ("PDU-MIB", "dataLogAvgActivePower"), ("PDU-MIB", "dataLogMaxActivePower"), ("PDU-MIB", "dataLogMinActivePower"), ("PDU-MIB", "dataLogAvgApparentPower"), ("PDU-MIB", "dataLogMaxApparentPower"), ("PDU-MIB", "dataLogMinApparentPower"), ("PDU-MIB", "dataLogAvgOutletCurrent"), ("PDU-MIB", "dataLogMaxOutletCurrent"), ("PDU-MIB", "dataLogMinOutletCurrent"), ("PDU-MIB", "dataLogAvgOutletVoltage"), ("PDU-MIB", "dataLogMaxOutletVoltage"), ("PDU-MIB", "dataLogMinOutletVoltage"), ("PDU-MIB", "dataLogAvgOutletPowerFactor"), ("PDU-MIB", "dataLogMaxOutletPowerFactor"), ("PDU-MIB", "dataLogMinOutletPowerFactor"), ("PDU-MIB", "dataLogAvgOutletWattHours"), ("PDU-MIB", "dataLogMaxOutletWattHours"), ("PDU-MIB", "dataLogMinOutletWattHours"), ("PDU-MIB", "dataLogAvgCircuitBreakerCurrent"), ("PDU-MIB", "dataLogMaxCircuitBreakerCurrent"), ("PDU-MIB", "dataLogMinCircuitBreakerCurrent"), ("PDU-MIB", "dataLogAvgInletCurrentUnbalance"), ("PDU-MIB", "dataLogMaxInletCurrentUnbalance"), ("PDU-MIB", "dataLogMinInletCurrentUnbalance"), ("PDU-MIB", "dataLogAvgInletActivePower"), ("PDU-MIB", "dataLogMaxInletActivePower"), ("PDU-MIB", "dataLogMinInletActivePower"), ("PDU-MIB", "dataLogAvgInletApparentPower"), ("PDU-MIB", "dataLogMaxInletApparentPower"), ("PDU-MIB", "dataLogMinInletApparentPower"), ("PDU-MIB", "dataLogAvgInletActiveEnergy"), ("PDU-MIB", "dataLogMaxInletActiveEnergy"), ("PDU-MIB", "dataLogMinInletActiveEnergy"), ("PDU-MIB", "dataLogAvgInletPoleCurrent"), ("PDU-MIB", "dataLogMaxInletPoleCurrent"), ("PDU-MIB", "dataLogMinInletPoleCurrent"), ("PDU-MIB", "dataLogAvgInletPoleVoltage"), ("PDU-MIB", "dataLogMaxInletPoleVoltage"), ("PDU-MIB", "dataLogMinInletPoleVoltage"), ("PDU-MIB", "dataLogAvgInletPoleActivePower"), ("PDU-MIB", "dataLogMaxInletPoleActivePower"), ("PDU-MIB", "dataLogMinInletPoleActivePower"), ("PDU-MIB", "dataLogAvgInletPoleApparentPower"), ("PDU-MIB", "dataLogMaxInletPoleApparentPower"), ("PDU-MIB", "dataLogMinInletPoleApparentPower"), ("PDU-MIB", "dataLogAvgInletPoleActiveEnergy"), ("PDU-MIB", "dataLogMaxInletPoleActiveEnergy"), ("PDU-MIB", "dataLogMinInletPoleActiveEnergy"), ("PDU-MIB", "dataLogExternalSensorChanged"), ("PDU-MIB", "dataLogExternalSensorState"), ("PDU-MIB", "dataLogAvgExternalSensorValue"), ("PDU-MIB", "dataLogMaxExternalSensorValue"), ("PDU-MIB", "dataLogMinExternalSensorValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dataLogGroupRev2 = dataLogGroupRev2.setStatus('current')
if mibBuilder.loadTexts: dataLogGroupRev2.setDescription('A collection of objects describing the pdu data.')
inletPoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 15)).setObjects(("PDU-MIB", "inletPoleCount"), ("PDU-MIB", "inletPoleLabel"), ("PDU-MIB", "inletPoleCurrent"), ("PDU-MIB", "inletPoleVoltage"), ("PDU-MIB", "inletPoleMaxCurrent"), ("PDU-MIB", "inletPoleActivePower"), ("PDU-MIB", "inletPoleApparentPower"), ("PDU-MIB", "inletPolePowerFactor"), ("PDU-MIB", "inletPoleActiveEnergy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inletPoleGroup = inletPoleGroup.setStatus('current')
if mibBuilder.loadTexts: inletPoleGroup.setDescription('A collection of objects describing the inlet poles.')
inletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 16)).setObjects(("PDU-MIB", "inletCount"), ("PDU-MIB", "inletCurrentRating"), ("PDU-MIB", "inletCurrentUnbalanceUpperCritical"), ("PDU-MIB", "inletCurrentUnbalanceUpperWarning"), ("PDU-MIB", "inletCurrentUnbalance"), ("PDU-MIB", "inletActivePower"), ("PDU-MIB", "inletApparentPower"), ("PDU-MIB", "inletPoleCount"), ("PDU-MIB", "inletCurrent"), ("PDU-MIB", "inletVoltage"), ("PDU-MIB", "inletPowerFactor"), ("PDU-MIB", "inletActiveEnergy"), ("PDU-MIB", "inletCurrentUpperWarning"), ("PDU-MIB", "inletCurrentUpperCritical"), ("PDU-MIB", "inletCurrentLowerWarning"), ("PDU-MIB", "inletCurrentLowerCritical"), ("PDU-MIB", "inletVoltageUpperWarning"), ("PDU-MIB", "inletVoltageUpperCritical"), ("PDU-MIB", "inletVoltageLowerWarning"), ("PDU-MIB", "inletVoltageLowerCritical"), ("PDU-MIB", "inletCurrentHysteresis"), ("PDU-MIB", "inletVoltageHysteresis"), ("PDU-MIB", "inletCurrentUnbalanceHysteresis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inletsGroup = inletsGroup.setStatus('current')
if mibBuilder.loadTexts: inletsGroup.setDescription('A collection of objects providing basic information about the inlets, including sensor readings.')
externalSensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 20)).setObjects(("PDU-MIB", "externalSensorCount"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorSerialNumber"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalSensorXCoordinate"), ("PDU-MIB", "externalSensorYCoordinate"), ("PDU-MIB", "externalSensorZCoordinate"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorUnits"), ("PDU-MIB", "externalSensorDecimalDigits"), ("PDU-MIB", "externalSensorLowerCriticalThreshold"), ("PDU-MIB", "externalSensorLowerWarningThreshold"), ("PDU-MIB", "externalSensorUpperCriticalThreshold"), ("PDU-MIB", "externalSensorUpperWarningThreshold"), ("PDU-MIB", "externalSensorState"), ("PDU-MIB", "externalSensorValue"), ("PDU-MIB", "externalSensorHysteresis"), ("PDU-MIB", "reorderexternalSensorTableEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalSensorsGroup = externalSensorsGroup.setStatus('current')
if mibBuilder.loadTexts: externalSensorsGroup.setDescription('A collection of objects providing external sensor readings and configuration settings.')
class MilliAmps(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with current sensors. If the underlying hardware sensor indicates 1 amp, then the SNMP agent will report a value of 1000 milliamps. The value is scaled in this manner as a way to deal with floating point types that SNMP does not currently support.'
    status = 'current'
    displayHint = 'd'

class MilliVolts(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with voltage sensors. If the underlying hardware sensor indicates 1 volts, then the SNMP agent will report a value of 1000 millivolts. The value is scaled in this manner as a way to deal with floating point types that SNMP does not currently support.'
    status = 'current'
    displayHint = 'd'

class Watts(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with active power sensors. If the underlying hardware sensor indicates 1 watt, then the SNMP agent will report a value of 1 watt. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd'

class VoltAmps(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with apparent power sensors. If the underlying hardware sensor indicates 1 volt-amp, then the SNMP agent will report a value of 1 volt-amp. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd'

class DegreesCelsius(TextualConvention, Unsigned32):
    description = 'Data type for reporting thresholds associated with temperature sensors. If the underlying hardware sensor indicates 1 degree Celsius, then the SNMP agent will report a value of 1 degree Celsius. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd'

class TenthDegreesCelsius(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings associated with temperature sensors. If the underlying hardware sensor indicates 1 degree Celsius, then the SNMP agent will report a value of 10 tenth degrees Celsius. The value is scaled in this manner as a way to deal with floating point types that SNMP does not currently support.'
    status = 'current'
    displayHint = 'd'

class Hertz(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with frequency sensors. If the underlying hardware sensor indicates 1 Hertz, then the SNMP agent will report a value of 1 Hertz. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd'

class RelativeHumidity(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with humidity sensors. Relative humidity is expressed as percentage and is defined as the ratio of the partial pressure of water vapor in a gaseous mixture of air and water vapor to the saturated vapor pressure of water at a given temperature.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class PowerFactorPercentage(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with power factor sensors. The power factor of an AC power system is defined as the ratio of the real or active power to the apparent power and is a number between 0 and 1. A PowerFactorPercentage value is calculated by taking this ratio and multiplying by 100. The power factor is used to indicate how efficiently a particular load is utilizing energy.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class Percentage(TextualConvention, Unsigned32):
    description = 'Data type for reporting values in percentage.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class SensorTypeEnumeration(TextualConvention, Integer32):
    description = 'The types a sensor can be. This enumeration is deprecated starting with PX 1.3.5'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 200, 201, 202, 203, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 500, 501, 502, 503, 504, 505, 506, 550, 551, 552, 600, 601, 602))
    namedValues = NamedValues(("outletCurrent", 0), ("outletMaxCurrent", 1), ("outletVoltage", 2), ("outletActivePower", 3), ("outletApparentPower", 4), ("outletMaxActivePower", 5), ("outletAverageActivePower", 6), ("outletPowerFactor", 7), ("powerBranchVoltage", 200), ("powerBranchFrequency", 201), ("powerBranchTemperature", 202), ("powerBranchCurrent", 203), ("environmentalTemp1", 300), ("environmentalTemp2", 301), ("environmentalTemp3", 302), ("environmentalTemp4", 303), ("environmentalTemp5", 304), ("environmentalTemp6", 305), ("environmentalTemp7", 306), ("environmentalTemp8", 307), ("environmentalHumidity1", 400), ("environmentalHumidity2", 401), ("environmentalHumidity3", 402), ("environmentalHumidity4", 403), ("environmentalHumidity5", 404), ("environmentalHumidity6", 405), ("environmentalHumidity7", 406), ("environmentalHumidity8", 407), ("unitRmsCurrent", 500), ("unitMaxRmsCurrent", 501), ("unitVoltage", 502), ("unitCpuTemp", 503), ("unitActivePower", 504), ("unitApparentPower", 505), ("unitFrequency", 506), ("unitCircuitBreak0State", 550), ("unitCircuitBreak1State", 551), ("unitCircuitBreak2State", 552), ("unitCircuitBreak0Current", 600), ("unitCircuitBreak1Current", 601), ("unitCircuitBreak2Current", 602))

class SensorStateEnumeration(TextualConvention, Integer32):
    description = 'The states a sensor can be in.This enumeration is deprecated starting with PX 1.3.5'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))
    namedValues = NamedValues(("unavailable", -1), ("ok", 0), ("belowLowerWarning", 1), ("aboveUpperWarning", 2), ("belowLowerCritical", 3), ("aboveUpperCritical", 4))

class StateOfSensorEnumeration(TextualConvention, Integer32):
    description = 'The states a sensor can be in.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11))

class TypeOfSensorEnumeration(TextualConvention, Integer32):
    description = 'The types a sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("other", 30), ("none", 31))

class WattHours(TextualConvention, Unsigned32):
    description = 'Data type for reporting the active energy'
    status = 'current'
    displayHint = 'd'

class SensorUnitsEnumeration(TextualConvention, Integer32):
    description = 'The types a sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18))

class PowerCIMStatusEnumeration(TextualConvention, Integer32):
    description = 'The status of a PowerCIM'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class EnabledDisabledEnumeration(TextualConvention, Integer32):
    description = 'The status of a PowerCIM'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class SensorClassEnumeration(TextualConvention, Integer32):
    description = 'The class of sensor in the event'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("externalTemperature", 0), ("externalHumidity", 1), ("externalAirFlow", 2), ("externalAirPressure", 3))

class EventTypeEnumeration(TextualConvention, Integer32):
    description = 'The event type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("aboveUpperCritical", 0), ("aboveUpperNonCritical", 1), ("belowLowerNonCritical", 2), ("belowLowerCritical", 3))

class EventDirectionEnumeration(TextualConvention, Integer32):
    description = 'The event direction'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("asserted", 0), ("deasserted", 1), ("both", 2))

firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The current firmware version in the following format: major.minor.dot.buildnumber. Example: 1.3.5.7416')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number.')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
if mibBuilder.loadTexts: ipAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option.')
netmask = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
if mibBuilder.loadTexts: netmask.setDescription('The current Netmask. A value of 0.0.0.0 indicates an error or an unset option.')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
if mibBuilder.loadTexts: gateway.setDescription('The current Gateway. A value of 0.0.0.0 indicates an error or an unset option.')
mac = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mac.setStatus('current')
if mibBuilder.loadTexts: mac.setDescription('The current MAC address.')
hardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRev.setStatus('current')
if mibBuilder.loadTexts: hardwareRev.setDescription('The hardware revision number.')
userName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The login of a user.')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectName.setStatus('current')
if mibBuilder.loadTexts: objectName.setDescription('The model type of the device')
objectInstance = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectInstance.setStatus('current')
if mibBuilder.loadTexts: objectInstance.setDescription('The device name.')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: targetUser.setStatus('current')
if mibBuilder.loadTexts: targetUser.setDescription('The user record being operated on')
groupName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: groupName.setStatus('current')
if mibBuilder.loadTexts: groupName.setDescription('The group record being operated on')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
if mibBuilder.loadTexts: imageVersion.setDescription('The version of the Upgrade image')
sensorDescr = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorDescr.setStatus('current')
if mibBuilder.loadTexts: sensorDescr.setDescription('Sensor description indicating which sensor experienced a threshold event. When applicable, the description will indicate the sensor number.')
thresholdDescr = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdDescr.setStatus('current')
if mibBuilder.loadTexts: thresholdDescr.setDescription('Threshold description indicating which configured threshold has been triggered (or cleared).')
thresholdSeverity = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdSeverity.setStatus('current')
if mibBuilder.loadTexts: thresholdSeverity.setDescription('String (Warning, Critical, etc...) indicating the severity of the threshold which has been triggered (or cleared).')
thresholdEventType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdEventType.setStatus('current')
if mibBuilder.loadTexts: thresholdEventType.setDescription('String (triggered, cleared) indicating if the threshold event indicates that a configured threshold has been triggered or cleared.')
status = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('The success status of an operation')
slaveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveIpAddress.setStatus('current')
if mibBuilder.loadTexts: slaveIpAddress.setDescription('In an outlet grouping configuration, this is the IP address of slave PDU. A value of 0.0.0.0 indicates an error or an unset option.')
inputCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 25), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentRating.setStatus('current')
if mibBuilder.loadTexts: inputCurrentRating.setDescription('The input current Rating')
ratedVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratedVoltage.setStatus('current')
if mibBuilder.loadTexts: ratedVoltage.setDescription('PDU Rated Voltage ')
ratedPower = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratedPower.setStatus('current')
if mibBuilder.loadTexts: ratedPower.setDescription('PDU Rated Power ')
outletSwitching = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSwitching.setStatus('current')
if mibBuilder.loadTexts: outletSwitching.setDescription('Outlet switching: enabled/disabled; for non-switched PDUs, this value can be read, but cannot be written ')
dataLogging = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
if mibBuilder.loadTexts: dataLogging.setDescription('Data Retrieval: enabled/disabled')
dataLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingInterval.setStatus('deprecated')
if mibBuilder.loadTexts: dataLoggingInterval.setDescription('Data Logging periodicity in seconds. This is the periodicity of the data in the buffer. This value must be a multiple of 3 between 3 and 600. For example, 60 is valid, but 64 is not valid This is being deprecated in favor of measurementsPerLogEntry. The mapping is as follows. dataLoggingInterval measurementsPerLogEntry 3n n Example: dataLoggingInterval is 60, so every 60 seconds (or 20th sample) data will be placed in the data log measurementsPerLogEntry is 20, so the data log sill store the minimum, average and maximum of every 20 samples ')
dataCollectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCollectionInterval.setStatus('current')
if mibBuilder.loadTexts: dataCollectionInterval.setDescription('Data Collection periodicity. This is the periodicity of the data collected by the PX. This value is fixed at 3 seconds.')
outletEnergySupport = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletEnergySupport.setStatus('current')
if mibBuilder.loadTexts: outletEnergySupport.setDescription('Outlet Energy Support: Yes/No If the value is No, then outletWattHours and dataLogOutletWattHours will be zero ')
currentUnbalanceSupport = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceSupport.setStatus('current')
if mibBuilder.loadTexts: currentUnbalanceSupport.setDescription('current Unbalance calculations Supported: Yes/No If the value is No, then currentUnbalance will be zero Default is No ')
externalSensorsZCoordinateUnits = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setDescription('External Sensor Z Coordinate units: Freeform or Rack Units (U) Default is U ')
inlineMeter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inlineMeter.setStatus('current')
if mibBuilder.loadTexts: inlineMeter.setDescription('Is this unit an inline meter? Yes/No If Yes, then the folowing pairings hold: Inlet 1 <-> Outlet 1 Inlet 2 <-> Outlet 2 Inlet 3 <-> Outlet 3 Inlet 4 <-> Outlet 4 Use the inletTable to obtain inlet data Use the inletPoleTable to obtain the line data for an inlet. ')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 36), StateOfSensorEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
if mibBuilder.loadTexts: oldSensorState.setDescription('The old sensor state used in Sensor State Transition traps.')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorNumber.setDescription('A unique value for each sensor. Its value ranges between 1 and the value of externalSensorCount.')
sensorIdentificationString = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 38), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorIdentificationString.setStatus('current')
if mibBuilder.loadTexts: sensorIdentificationString.setDescription('String that uniquely identifies the external sensor. Format is: SensorType,ChannelNumber,SensorSubtype,SerialNumber Example external temperature sensor: Temperature,,,AEI8160083 Example external smoke detection sensor: onOff,2,contact,AEJ8160085 Example outlet Current: rmsCurrent,,, ')
lastUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 39), Bits().clone(namedValues=NamedValues(("mainController", 0), ("psoc1", 1), ("psoc2", 2), ("psoc3", 3), ("psoc4", 4), ("psoc5", 5), ("psoc6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: lastUpgradeStatus.setDescription('A bit string which indicates which the status of the last upgrade. A value of 1 for a bit position indicates that the corresponding upgrade failed. If all bits are zero, then the upgrade succeeded; otherwise check lastUpgradeErrorDescription for further information. ')
lastUpgradeTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpgradeTimestamp.setStatus('current')
if mibBuilder.loadTexts: lastUpgradeTimestamp.setDescription('The time when the last upgrade completed')
lastUpgradeErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpgradeErrorDescription.setStatus('current')
if mibBuilder.loadTexts: lastUpgradeErrorDescription.setDescription('String that describes the upgrade errror. This is an empty string if the upgrade succeeded. Format is Failed PSOCs: 1[O:1,2,3-7];3[O:6-9,10-12] This indicates that upgrade of psocs 1 and 3 failed and psoc1 affects outlets 1,2, 3-7 and psoc2 affects outlets 6-9,10-12 ')
powerCIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 42), PowerCIMStatusEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerCIMStatus.setStatus('current')
if mibBuilder.loadTexts: powerCIMStatus.setDescription('The status of the Power CIM: on or off ')
measurementsPerLogEntry = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
if mibBuilder.loadTexts: measurementsPerLogEntry.setDescription('The number of measurements used for each entry in the log. 1<= Value <= 200 Default is 20 This is related to dataLoggingInterval as shown below dataLoggingInterval measurementsPerLogEntry 3n n Example: dataLoggingInterval is 60, so every 60 seconds (or 20th sample) data will be placed in the data log measurementsPerLogEntry is 20, so the data log sill store the minimum, average and maximum of every 20 samples')
psocNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 44), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: psocNumber.setStatus('current')
if mibBuilder.loadTexts: psocNumber.setDescription('The psoc (Outlet Controller) number')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
if mibBuilder.loadTexts: altitude.setDescription('The altitude (height above sea level) of the PDU in meters. 0 <= Value <= 3000; default value is 0 meters ')
configureAlerts = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configureAlerts.setStatus('current')
if mibBuilder.loadTexts: configureAlerts.setDescription('This is an operation. It has write-only semantics. GET operation will return the empty string. For SET operations, it configures alerts The format is a comma separated list of the following parameters. sensorClass, eventType, eventDirection, policyName For sensorclass: use the SensorClass eumeration For eventType: use the EventType enumeration For eventDirection: use the EventDirection enumeration For Policy Name: use the name of the policy; the Policy Name is case sensitive Note: setting this variable will overwrite the existing policy Example: if the External Temperature upper non-critical threshold is either asserted and deasserted, then execute the policy named multiple destinations the string would be 0,1,2,multiple destinations ')
fipsMode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 47), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fipsMode.setStatus('current')
if mibBuilder.loadTexts: fipsMode.setDescription('The fips mode: either enabled or disabled. The mode can be set (changed) only if both of the following conditions hold a) the user is admin b) snmpv3 is being used. Changing this mode will result in a reboot of the PX When the PX is in FIPS mode, the follwing conditions hold. a) FIPS approved algorithms must be used b) snmp v1 & v2c are not supported b) snmp v3 must be used with AES and SHA c) https must be used; http is not supported d) Radius authentication is not supported e) Ldaps must be used; ldap is not supported f) ipmi v2.0 must be used ')
synchronizeWithNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 48), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
if mibBuilder.loadTexts: synchronizeWithNTPServer.setDescription('Will time be obtained using NTP? Deafault is disabled, i.e. time will not be obtained from NTP servers.')
useDHCPProvidedNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 49), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('current')
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setDescription('Will the NTP server addresses be provided by DHCP/BOOTP? This is used only if synchronizeWithNTPServer is enabled Default is enabled, i.e. DHCP provided NTP servers will be used ')
primaryNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 50), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: primaryNTPServerAddressType.setDescription('Represents the type of the corresponding instance of primaryNTPServerAddress object. ')
primaryNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 51), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: primaryNTPServerAddress.setDescription('The address of the primary ntp server.')
secondaryNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 52), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: secondaryNTPServerAddressType.setDescription('Represents the type of the corresponding instance of secondaryNTPServerAddress object. Default is ipv4')
secondaryNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 53), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: secondaryNTPServerAddress.setDescription('The address of the secondary ntp server.')
daylightSavingsTime = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 55), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSavingsTime.setStatus('current')
if mibBuilder.loadTexts: daylightSavingsTime.setDescription('Is daylight savings time enabled? Default is disabled ')
thresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 56), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdValue.setStatus('current')
if mibBuilder.loadTexts: thresholdValue.setDescription('The value of the threshold that has been triggered (or cleared). It is used in the thresholdAlarm trap for external numeric sensors only.')
sensorValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 57), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorValue.setStatus('current')
if mibBuilder.loadTexts: sensorValue.setDescription('The sensor reading that triggered (or cleared) the threshold. It is used in the thresholdAlarm trap for external numeric sensors only.')
ipmiOverLAN = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 58), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmiOverLAN.setStatus('current')
if mibBuilder.loadTexts: ipmiOverLAN.setDescription('IPMI over LAN Mode: either enabled or disabled. It is strongly recommended that SNMPv3 be used to change the mode; SNMPv2c may also be used, but is not recommended. If SNMPv3 is used, then the change can be made only by users belonging to the Admin group. Changing the mode will result in a reboot of the PX. ')
inletCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCount.setStatus('current')
if mibBuilder.loadTexts: inletCount.setDescription('The number of inlets present on this pdu.')
inletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2), )
if mibBuilder.loadTexts: inletTable.setStatus('current')
if mibBuilder.loadTexts: inletTable.setDescription('A list of inlet entries. The number of entries is given by the value of inletCount.')
inletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1), ).setIndexNames((0, "PDU-MIB", "inletIndex"))
if mibBuilder.loadTexts: inletEntry.setStatus('current')
if mibBuilder.loadTexts: inletEntry.setDescription('An inlet entry containing objects for each inlet')
inletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletIndex.setStatus('current')
if mibBuilder.loadTexts: inletIndex.setDescription('A unique value for each inlet. Its value ranges between 1 and the value of inletCount.')
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCount.setStatus('current')
if mibBuilder.loadTexts: inletPoleCount.setDescription('The number of poles for an inlet (1 for single phase, 3 for 3 phase Delta-wired, 4 for 3 phase WYE wired).')
inletCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrentRating.setStatus('current')
if mibBuilder.loadTexts: inletCurrentRating.setDescription('The input current Rating')
inletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 7), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrent.setStatus('current')
if mibBuilder.loadTexts: inletCurrent.setDescription('A unique value for the current sensor attached to the inlet. This value is reported in milliamps (1/1000th of an amp). This OID does not apply to 3 phase systems; a value of 0 will be reported for same.')
inletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 8), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltage.setStatus('current')
if mibBuilder.loadTexts: inletVoltage.setDescription('A unique value for the voltage sensor attached to the intlet.This value is reported in millivolts (1/1000th of a volt). This OID does not apply to 3 phase systems; a value of 0 will be reported for same.')
inletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 9), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletActivePower.setStatus('current')
if mibBuilder.loadTexts: inletActivePower.setDescription('The active power for the inlet This value is reported in Watts.')
inletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 10), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletApparentPower.setStatus('current')
if mibBuilder.loadTexts: inletApparentPower.setDescription('The apparent power for the inlet. This value is reported in Volt-Amps')
inletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 11), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: inletPowerFactor.setDescription('A unique value for the power factor of the inlet. The reading represents a percentage in the range of 0% to 100%.')
inletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 12), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: inletActiveEnergy.setDescription("This object has an invalid value if outletEnergySupport = 'No'; In all other cases, it is the value of the cumulative active energy for this inlet. This value is reported in WattHours")
inletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrentUnbalance.setStatus('current')
if mibBuilder.loadTexts: inletCurrentUnbalance.setDescription('A string displaying the current unbalance in percent. It will have the value NA if the feature is disabled, the PX is not a 3-phase unit,or the average of the line currents is zero')
inletCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 20), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: inletCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) current threshold for the inlet. This value is reported in milliamps (1/1000th of an amp)')
inletCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 21), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: inletCurrentUpperCritical.setDescription('The value of the upper critical current threshold for the inlet. This value is reported in milliamps (1/1000th of an amp)')
inletCurrentLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 22), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentLowerWarning.setStatus('current')
if mibBuilder.loadTexts: inletCurrentLowerWarning.setDescription("The value of the lower warning (non-critical) current threshold for the inlet. This value is reported in milliamps (1/1000th of an amp). This OID is valid for inline meter PDU's. only")
inletCurrentLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 23), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentLowerCritical.setStatus('current')
if mibBuilder.loadTexts: inletCurrentLowerCritical.setDescription("The value of the lower critical current threshold for the inlet. This value is reported in milliamps (1/1000th of an amp). This OID is valid for inline meter PDU's only.")
inletVoltageUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 24), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageUpperWarning.setStatus('current')
if mibBuilder.loadTexts: inletVoltageUpperWarning.setDescription('The value of the upper warning (non-critical) current threshold for the inlet. This value is reported in millivolts (1/1000th of a volt)')
inletVoltageUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 25), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageUpperCritical.setStatus('current')
if mibBuilder.loadTexts: inletVoltageUpperCritical.setDescription('The value of the upper critical current threshold for the inlet. This value is reported in millivolts (1/1000th of a volt)')
inletVoltageLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 26), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageLowerWarning.setStatus('current')
if mibBuilder.loadTexts: inletVoltageLowerWarning.setDescription('The value of the lower warning (non-critical) current threshold for the inlet. This value is reported in millivolts (1/1000th of a volt)')
inletVoltageLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 27), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageLowerCritical.setStatus('current')
if mibBuilder.loadTexts: inletVoltageLowerCritical.setDescription('The value of the lower critical current threshold for the inlet. This value is reported in millivolts (1/1000th of a volt)')
inletCurrentUnbalanceUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 28), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUnbalanceUpperCritical.setStatus('current')
if mibBuilder.loadTexts: inletCurrentUnbalanceUpperCritical.setDescription('The value of the upper critical current Unbalance threshold.')
inletCurrentUnbalanceUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 29), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUnbalanceUpperWarning.setStatus('current')
if mibBuilder.loadTexts: inletCurrentUnbalanceUpperWarning.setDescription('The value of the upper warning current Unbalance threshold.')
inletCurrentHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: inletCurrentHysteresis.setDescription('The hysteresis used for deassertions. This value is reported in milliamps (1/1000th of an amp)')
inletVoltageHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageHysteresis.setStatus('current')
if mibBuilder.loadTexts: inletVoltageHysteresis.setDescription('The hysteresis used for deassertions. This value is reported in millivolts (1/1000th of a volt)')
inletCurrentUnbalanceHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUnbalanceHysteresis.setStatus('current')
if mibBuilder.loadTexts: inletCurrentUnbalanceHysteresis.setDescription('The hysteresis used for deassertions. This value is reported in percent')
inletPoleTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2), )
if mibBuilder.loadTexts: inletPoleTable.setStatus('current')
if mibBuilder.loadTexts: inletPoleTable.setDescription('A list of line input entries. The number of entries is given by the value of inletTable(inletIndex).inletPoleCount.')
inletPoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1), ).setIndexNames((0, "PDU-MIB", "inletIndex"), (0, "PDU-MIB", "inletPoleIndex"))
if mibBuilder.loadTexts: inletPoleEntry.setStatus('current')
if mibBuilder.loadTexts: inletPoleEntry.setDescription('An entry in the data log containing input line values for a particular input line.')
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletPoleIndex.setStatus('current')
if mibBuilder.loadTexts: inletPoleIndex.setDescription('A unique value for each line input. Its value ranges between 1 and of inletTable(inletIndex).inletPoleCount.')
inletPoleLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleLabel.setStatus('current')
if mibBuilder.loadTexts: inletPoleLabel.setDescription('A string identifying the Line For Single Phase: L1 For 3phase Delta wired outlets: L1, L2, L3 For 3phase WYE Wired Outlets: L1, L2, L3')
inletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 3), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCurrent.setStatus('current')
if mibBuilder.loadTexts: inletPoleCurrent.setDescription('The value of the line current reported in MilliAmps. inletPoleIndex = 1; For Single Phase, Input Line Current; For 3-phase, L1 Current inletPoleIndex = 2; For 3-phase, L2 Current inletPoleIndex = 3; For 3-phase, L3 Current')
inletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 4), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleVoltage.setStatus('current')
if mibBuilder.loadTexts: inletPoleVoltage.setDescription('The value of the line-line voltage reported in MilliVolts. inletPoleIndex = 1; Single Phase Input Line Voltage 3-phase, L1-L2 Voltage or L1-N voltage inletPoleIndex = 2; 3-phase L2-L3 Voltage or L2-N voltage inletPoleaIndex = 3; 3-phase L3-L1 Voltage or L3-N voltage')
inletPoleMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: inletPoleMaxCurrent.setDescription('This object has an invalid value for a single-phase PDU. If inletPoleCount = 1, then the value is invalid; In all other cases, it is the value of the max. current sensor attached to the inlet Pole. This value is reported in milliamps (1/1000th of an amp)')
inletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleActivePower.setStatus('current')
if mibBuilder.loadTexts: inletPoleActivePower.setDescription("This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the active power for the line/pole. The value is reported in Watts.")
inletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleApparentPower.setStatus('current')
if mibBuilder.loadTexts: inletPoleApparentPower.setDescription("This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the apparent power for the line/pole. The value is reported in Volt-Amps")
inletPolePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 9), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPolePowerFactor.setStatus('current')
if mibBuilder.loadTexts: inletPolePowerFactor.setDescription("This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the power factor for the line/pole The reading represents a percentage in the range of 0% to 100%.")
inletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 11), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: inletPoleActiveEnergy.setDescription("This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the cumulative active energy for the line/pole. The value is reported in WattHours")
outletCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
if mibBuilder.loadTexts: outletCount.setDescription('The number of outlets (regardless of their current state) present on this pdu.')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
if mibBuilder.loadTexts: outletTable.setDescription('A list of outlet entries. The number of entries is given by the value of outletCount.')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1), ).setIndexNames((0, "PDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
if mibBuilder.loadTexts: outletEntry.setDescription('An outlet entry containing objects at the for a particular outlet.')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletIndex.setStatus('current')
if mibBuilder.loadTexts: outletIndex.setDescription('A unique value for each outlet. Its value ranges between 1 and the value of outletCount.')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
if mibBuilder.loadTexts: outletLabel.setDescription('A textual string containing information about the outlet.')
outletOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("error", -1), ("off", 0), ("on", 1), ("cycling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOperationalState.setStatus('current')
if mibBuilder.loadTexts: outletOperationalState.setDescription('A value for each outlet which describes the operational state of the outlet. It is also used to set the operational state of the outlet')
outletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrent.setStatus('current')
if mibBuilder.loadTexts: outletCurrent.setDescription('A unique value for the current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: outletMaxCurrent.setDescription('A unique value for the max. current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 6), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
if mibBuilder.loadTexts: outletVoltage.setDescription('A unique value for the voltage sensor attached to the outlet.This value is reported in millivolts (1/1000th of a volt)')
outletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletActivePower.setStatus('current')
if mibBuilder.loadTexts: outletActivePower.setDescription('A unique value for the active power sensor attached to the outlet. This value is reported in Watts.')
outletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletApparentPower.setStatus('current')
if mibBuilder.loadTexts: outletApparentPower.setDescription('A unique value for the apparent power sensor attached to the outlet. This value is reported in Volt-Amps')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 9), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: outletPowerFactor.setDescription('A unique value for the power factor of the outlet. The reading represents a percentage in the range of 0% to 100%.')
outletCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 20), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: outletCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) current threshold for the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 21), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: outletCurrentUpperCritical.setDescription('The value of the upper critical current threshold for the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletCurrentLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 22), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentLowerWarning.setStatus('current')
if mibBuilder.loadTexts: outletCurrentLowerWarning.setDescription('The value of the lower warning (non-critical) current threshold for the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletCurrentLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 23), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentLowerCritical.setStatus('current')
if mibBuilder.loadTexts: outletCurrentLowerCritical.setDescription('The value of the lower critical current threshold for the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletCurrentHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: outletCurrentHysteresis.setDescription('The hysteresis used for deassertions. This value is reported in milliamps (1/1000th of an amp)')
outletCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 30), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrentRating.setStatus('current')
if mibBuilder.loadTexts: outletCurrentRating.setDescription('The current rating of the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 31), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletWattHours.setStatus('current')
if mibBuilder.loadTexts: outletWattHours.setDescription('The value of the cumulative active energy for this outlet. This value is reported in WattHours')
unitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 1), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: unitCurrent.setDescription("The value for the unit's current sensor in millamps.This object is deprecated in favour of lineCurrent corresponding to lineCurrentLabel = L1")
unitVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 2), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: unitVoltage.setDescription("The value for the unit's voltage sensor in millivolts.This object is deprecated in favour of lineVoltage corresponding to lineVoltageLabel = L1")
unitActivePower = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 3), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitActivePower.setStatus('deprecated')
if mibBuilder.loadTexts: unitActivePower.setDescription("The value for the unit's active power in watts.This object is deprecated in favour of inletTable.inletActivePower")
unitApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 4), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitApparentPower.setStatus('deprecated')
if mibBuilder.loadTexts: unitApparentPower.setDescription("The value for the unit's apparent power in volt-amps. This object is deprecated in favour of inletTable.inletApparentPower")
unitCpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 5), TenthDegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCpuTemp.setStatus('current')
if mibBuilder.loadTexts: unitCpuTemp.setDescription("The value for the unit's CPU temperature sensor in tenth degrees celsius.")
unitVoltageLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 60), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerWarning.setStatus('deprecated')
if mibBuilder.loadTexts: unitVoltageLowerWarning.setDescription('The value of the lower warning (non-critical) unit level voltage threshold.This object is deprecated in favour of unitOrLineVoltageLowerWarning')
unitVoltageLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 61), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerCritical.setStatus('deprecated')
if mibBuilder.loadTexts: unitVoltageLowerCritical.setDescription('The value of the lower critical unit level voltage threshold.This object is deprecated in favour of unitOrLineVoltageLowerCritical')
unitVoltageUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 62), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperWarning.setStatus('deprecated')
if mibBuilder.loadTexts: unitVoltageUpperWarning.setDescription('The value of the upper warning (non-critical) unit level voltage threshold.This object is deprecated in favour of unitOrLineVoltageUpperWarning')
unitVoltageUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 63), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperCritical.setStatus('deprecated')
if mibBuilder.loadTexts: unitVoltageUpperCritical.setDescription('The value of the upper critical unit level voltage threshold.This object is deprecated in favour of unitOrLineVoltageUpperCritical')
unitCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 70), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitCurrentUpperWarning.setStatus('deprecated')
if mibBuilder.loadTexts: unitCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) unit level current threshold.This object is deprecated in favour of unitOrLineCurrentUpperWarning')
unitCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 71), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrentUpperCritical.setStatus('deprecated')
if mibBuilder.loadTexts: unitCurrentUpperCritical.setDescription('The value of the upper critical unit level current threshold. NOTE: This particular threshold is NOT settable. This object is deprecated in favour of unitOrLineCurrentUpperCritica')
unitOrLineVoltageLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 90), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageLowerWarning.setStatus('current')
if mibBuilder.loadTexts: unitOrLineVoltageLowerWarning.setDescription('The value of the lower warning (non-critical) unit level voltage threshold.')
unitOrLineVoltageLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 91), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageLowerCritical.setStatus('current')
if mibBuilder.loadTexts: unitOrLineVoltageLowerCritical.setDescription('The value of the lower critical unit level voltage threshold.')
unitOrLineVoltageUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 92), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageUpperWarning.setStatus('current')
if mibBuilder.loadTexts: unitOrLineVoltageUpperWarning.setDescription('The value of the upper warning (non-critical) unit level voltage')
unitOrLineVoltageUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 93), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageUpperCritical.setStatus('current')
if mibBuilder.loadTexts: unitOrLineVoltageUpperCritical.setDescription('The value of the upper critical unit level voltage threshold.')
unitOrLineCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 94), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: unitOrLineCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) unit level current threshold')
unitOrLineCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 95), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: unitOrLineCurrentUpperCritical.setDescription('The value of the upper critical unit level current threshold. ')
neutralCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 96), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neutralCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: neutralCurrentUpperWarning.setDescription('This object has an invalid value if inletPoleCount is not equal to 4. If inletPoleCount = 4, then it is the value of the upper warning (non-critical) threshold for the neutral current')
neutralCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 97), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neutralCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: neutralCurrentUpperCritical.setDescription('This object has an invalid value if inletPoleCount is not equal to 4. If inletPoleCount = 4, then it is the value of the upper critical threshold for the neutral current.')
unitTempLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 80), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerWarning.setStatus('current')
if mibBuilder.loadTexts: unitTempLowerWarning.setDescription('The value of the lower warning (non-critical) unit level temperature threshold.')
unitTempLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 81), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerCritical.setStatus('current')
if mibBuilder.loadTexts: unitTempLowerCritical.setDescription('The value of the lower critical unit level temperature threshold.')
unitTempUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 82), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperWarning.setStatus('current')
if mibBuilder.loadTexts: unitTempUpperWarning.setDescription('The value of the upper warning (non-critical) unit level temperature threshold.')
unitTempUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 83), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperCritical.setStatus('current')
if mibBuilder.loadTexts: unitTempUpperCritical.setDescription('The value of the upper critical unit level temperature threshold.')
currentUnbalance = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUnbalance.setStatus('current')
if mibBuilder.loadTexts: currentUnbalance.setDescription("A string displaying the current unbalance in percent. It will have the value NA if the PX is not a 3-phase unit (inletPoleCount = 1),or the feature is disabled (currentUnbalanceSupport = 'No'), or the average of the line currents is zero (inletPoleCurrent = 0 for 1 <= inlePoleIndex <= 3)")
currentUnbalanceUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 85), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceUpperWarning.setStatus('current')
if mibBuilder.loadTexts: currentUnbalanceUpperWarning.setDescription('The value of the upper warning (non-critical) current unbalance threshold.')
currentUnbalanceUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 86), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceUpperCritical.setStatus('current')
if mibBuilder.loadTexts: currentUnbalanceUpperCritical.setDescription('The value of the upper critical current Unbalance threshold.')
unitOrLineCurrentHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 98), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: unitOrLineCurrentHysteresis.setDescription('The hysteresis used for deassertions. This value is reported in milliamps (1/1000th of an amp)')
unitOrLineVoltageHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 99), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageHysteresis.setStatus('current')
if mibBuilder.loadTexts: unitOrLineVoltageHysteresis.setDescription('The hysteresis used for deassertions. This value is reported in millivolts (1/1000th of a volt)')
unitTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 100), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempHysteresis.setStatus('current')
if mibBuilder.loadTexts: unitTempHysteresis.setDescription('The hysteresis used for deassertions ')
currentUnbalanceHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 101), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceHysteresis.setStatus('current')
if mibBuilder.loadTexts: currentUnbalanceHysteresis.setDescription('The hysteresis used for deassertions ')
tempSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorCount.setStatus('deprecated')
if mibBuilder.loadTexts: tempSensorCount.setDescription('The number of external temperature sensors (regardless of their current state) present on this pdu. This is deprecated in favor of externalSensors')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('deprecated')
if mibBuilder.loadTexts: tempSensorTable.setDescription('A list of temperature sensor entries. The number of entries is given by the value of tempSensorCount. This is deprecated in favor of externalSensors')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1), ).setIndexNames((0, "PDU-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('deprecated')
if mibBuilder.loadTexts: tempSensorEntry.setDescription('An entry containing sensor reading and threshold settings for a particular temperature sensor. This is deprecated in favor of externalSensors')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: tempSensorIndex.setStatus('deprecated')
if mibBuilder.loadTexts: tempSensorIndex.setDescription('A unique value for each temperature sensor. Its value ranges between 1 and tempSensorCount. This is deprecated in favor of externalSensors')
tempSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensorLabel.setStatus('deprecated')
if mibBuilder.loadTexts: tempSensorLabel.setDescription('A settable human-readable label for the external temperature sensor. One possible use for this label is to convey sensor location. This is deprecated in favor of externalSensors')
temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 3), TenthDegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('deprecated')
if mibBuilder.loadTexts: temperature.setDescription('The value of the external temperature sensor reported in tenth degrees celsius. This is deprecated in favor of externalSensors')
tempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 4), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerWarning.setStatus('deprecated')
if mibBuilder.loadTexts: tempLowerWarning.setDescription('The value of the lower warning (non-critical) threshold. This is deprecated in favor of externalSensors')
tempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 5), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperWarning.setStatus('deprecated')
if mibBuilder.loadTexts: tempUpperWarning.setDescription('The value of the upper warning (non-critical) threshold. This is deprecated in favor of externalSensors')
tempLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 6), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerCritical.setStatus('deprecated')
if mibBuilder.loadTexts: tempLowerCritical.setDescription('The value of the lower critical threshold. This is deprecated in favor of externalSensors')
tempUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 7), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperCritical.setStatus('deprecated')
if mibBuilder.loadTexts: tempUpperCritical.setDescription('The value of the upper critical threshold. This is deprecated in favor of externalSensors')
tempXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempXCoordinate.setStatus('deprecated')
if mibBuilder.loadTexts: tempXCoordinate.setDescription('The value of X coordinate in freeform with number of characters <= 24 This is deprecated in favor of externalSensors')
tempYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempYCoordinate.setStatus('deprecated')
if mibBuilder.loadTexts: tempYCoordinate.setDescription('The value of Y coordinate in freeform with number of characters <= 24 This is deprecated in favor of externalSensors')
tempZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempZCoordinate.setStatus('deprecated')
if mibBuilder.loadTexts: tempZCoordinate.setDescription('The value of Z coordinate in one of two formats: either freeform with number of characters <= 24 or in Z units so that 0 =< integer value <= 60 This is deprecated in favor of externalSensors')
humiditySensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorCount.setStatus('deprecated')
if mibBuilder.loadTexts: humiditySensorCount.setDescription('The number of external humidity sensors (regardless of their current state) present on this pdu. This is deprecated in favor of externalSensors')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('deprecated')
if mibBuilder.loadTexts: humiditySensorTable.setDescription('A list of humidity sensor entries. The number of entries is given by the value of humiditySensorCount. This is deprecated in favor of externalSensors')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1), ).setIndexNames((0, "PDU-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('deprecated')
if mibBuilder.loadTexts: humiditySensorEntry.setDescription('An entry containing sensor reading and threshold settings for a particular humidity sensor. This is deprecated in favor of externalSensors')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('deprecated')
if mibBuilder.loadTexts: humiditySensorIndex.setDescription('A unique value for each humidity sensor. Its value ranges between 1 and humiditySensorCount. This is deprecated in favor of externalSensors')
humiditySensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLabel.setStatus('deprecated')
if mibBuilder.loadTexts: humiditySensorLabel.setDescription('A settable human-readable label for the external humidity sensor. One possible use for this label is to convey sensor location. This is deprecated in favor of externalSensors')
humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 3), RelativeHumidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidity.setStatus('deprecated')
if mibBuilder.loadTexts: humidity.setDescription('The value of the external humidity sensor reported as relative humidity (a percentage). This is deprecated in favor of externalSensors')
humidityLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 4), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerWarning.setStatus('deprecated')
if mibBuilder.loadTexts: humidityLowerWarning.setDescription('The value of the lower warning (non-critical) threshold. This is deprecated in favor of externalSensors')
humidityUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 5), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperWarning.setStatus('deprecated')
if mibBuilder.loadTexts: humidityUpperWarning.setDescription('The value of the upper warning (non-critical) threshold. This is deprecated in favor of externalSensors')
humidityLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 6), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerCritical.setStatus('deprecated')
if mibBuilder.loadTexts: humidityLowerCritical.setDescription('The value of the lower critical threshold. This is deprecated in favor of externalSensors')
humidityUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 7), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperCritical.setStatus('deprecated')
if mibBuilder.loadTexts: humidityUpperCritical.setDescription('The value of the upper critical threshold. This is deprecated in favor of externalSensors')
humidityXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityXCoordinate.setStatus('deprecated')
if mibBuilder.loadTexts: humidityXCoordinate.setDescription('The value of X coordinate in freeform with number of characters <= 24 This is deprecated in favor of externalSensors')
humidityYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityYCoordinate.setStatus('deprecated')
if mibBuilder.loadTexts: humidityYCoordinate.setDescription('The value of Y coordinate in freeform with number of characters <= 24 This is deprecated in favor of externalSensors')
humidityZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityZCoordinate.setStatus('deprecated')
if mibBuilder.loadTexts: humidityZCoordinate.setDescription('The value of Z coordinate in one of two formats: either freeform with number of characters <= 24 or in Z units so that 0 =< integer value <= 60 This is deprecated in favor of externalSensors')
externalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
if mibBuilder.loadTexts: externalSensorCount.setDescription('The number of external sensors')
reorderexternalSensorTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reorderexternalSensorTableEntries.setStatus('current')
if mibBuilder.loadTexts: reorderexternalSensorTableEntries.setDescription('This is an operation. It has write-only semantics. GET operation will return the empty string. For SET operations, it specifies the new order of the externalSensorTable entries. a) The list must contain entries for each managed sensor, even if the sensor is not being moved. b) The list must not have more than 16 entries. c) 1 <= Valid sensorID <= 16 d) The length of the list is the value of the largest sensorID in the original (before the move) list of managed sensors. e) Each sensorID must appear only once in the list. f) If there are missing numbers in the original list of sensorIDs, then each missing number must be indicated by a comma. EXAMPLE 1: Managed sensors have IDs 1,2,3,4,5 Move 1 to 13; 2 to 8; 3 to 9; 4 is not moved; 5 moves to 2 Existing Position New Position 1 --> 13 2 --> 8 3 --> 9 4 --> 4 5 --> 2 Since the largest sensorID before the move is 5, the length of the list is 5 Comma separated list is 13,8,9,4,2 EXAMPLE 2: Managed sensors have IDs 2,5,6,7,11 Sensor IDs 1,3,4,8,9,10 do not appear in the list. These positions must be indicated by commas. Move 2 to 13; 5 to 8; 6 to 9; 7 to 16; 11 does not move Existing Position New Position 2 --> 13 5 --> 8 6 --> 9 7 --> 16 11 --> 11 Since the largest sensorID before the move is 11, the length of the list is 11 Comma separated list is ,13,,,8,9,16,,,,11 ')
externalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3), )
if mibBuilder.loadTexts: externalSensorTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorTable.setDescription('A list of externalSensor entries. The number of entries is given by the value of externalSensorCount for the pdu.')
externalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1), ).setIndexNames((0, "PDU-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorEntry.setDescription('An externalSensor entry containing objects at the for a particular PDU.')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
if mibBuilder.loadTexts: sensorID.setDescription('A unique value for each sesnor. Its value ranges between 1 and the value of externalSensorCount.')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 2), TypeOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
if mibBuilder.loadTexts: externalSensorType.setDescription('The type of sensor')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorSerialNumber.setDescription('The sensor serial number')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
if mibBuilder.loadTexts: externalSensorName.setDescription('The user given name')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorChannelNumber.setDescription('The channel number, applies only to contact sensors; -1 for other sensors')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorXCoordinate.setDescription('The X coordinate')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorYCoordinate.setDescription('The Y coordinate')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorZCoordinate.setDescription('The Z coordinate')
externalBinarySensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 9), TypeOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalBinarySensorSubtype.setStatus('current')
if mibBuilder.loadTexts: externalBinarySensorSubtype.setDescription('The subtype of the binary sensor This OID is valid for discrete sensors only.')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
if mibBuilder.loadTexts: externalSensorUnits.setDescription('The base units. Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: externalSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point. Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setDescription('The lower critical threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is .01 Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setDescription('The lower non-critical (warning) threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is .01 Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setDescription('The upper critical threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is .01 Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setDescription('The upper non-critical (warning) threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is .01 Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: externalSensorHysteresis.setDescription('The hysteresis used for deassertions The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 40), StateOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorState.setStatus('current')
if mibBuilder.loadTexts: externalSensorState.setDescription('The sensor state')
externalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorValue.setStatus('current')
if mibBuilder.loadTexts: externalSensorValue.setDescription('The sensor reading Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors')
lineCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrentCount.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrentCount.setDescription('The number of line currents (1 for single phase, 3 for 3 phase Delta-wired, 4 for 3 phase WYE wired).This object is deprecated in favour of inletPoleTable')
lineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2), )
if mibBuilder.loadTexts: lineCurrentTable.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrentTable.setDescription('A list of line input entries. The number of entries is given by the value of lineInputCount. This object is deprecated in favour of inletPoleTable')
lineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1), ).setIndexNames((0, "PDU-MIB", "lineCurrentIndex"))
if mibBuilder.loadTexts: lineCurrentEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrentEntry.setDescription('An entry containing values and threshold settings for a particular line input.This object is deprecated in favour of inletPoleTable')
lineCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: lineCurrentIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrentIndex.setDescription('A unique value for each line input. Its value ranges between 1 and lineInputCount. This object is deprecated in favour of inletPoleTable')
lineCurrentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrentLabel.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrentLabel.setDescription('A string identifying the Line For Single Phase: L1 For 3phase Delta wired outlets: L1, L2, L3 For 3phase WYE Wired Outlets: L1, L2, L3, N This object is deprecated in favour of inletPoleTable')
lineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1, 3), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: lineCurrent.setDescription('The value of the current reported in MilliAmps. This object is deprecated in favour of inletPoleTable')
circuitBreakerCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerCount.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerCount.setDescription('The number of circuit breakers.')
circuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2), )
if mibBuilder.loadTexts: circuitBreakerTable.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerTable.setDescription('A list of line input entries. The number of entries is given by the value of lineInputCount.')
circuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1), ).setIndexNames((0, "PDU-MIB", "circuitBreakerIndex"))
if mibBuilder.loadTexts: circuitBreakerEntry.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerEntry.setDescription('An entry containing values and threshold settings for a particular line input.')
circuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: circuitBreakerIndex.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerIndex.setDescription('A unique value for each circuit breaker. Its value ranges between 1 and circuitBreakerCount.')
circuitBreakerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerLabel.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerLabel.setDescription('A string identifying the circuit breaker ')
circuitBreakerState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerState.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerState.setDescription('The value for the circuit breaker state .')
circuitBreakerCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerCurrentRating.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerCurrentRating.setDescription('The value of the circuit breaker current rating in MilliAmps.')
circuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerCurrent.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerCurrent.setDescription('The value of the current reported in MilliAmps.')
circuitBreakerCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 7), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBreakerCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) threshold.')
circuitBreakerCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 9), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBreakerCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerCurrentUpperCritical.setDescription('The value of the upper critical threshold.')
circuitBreakerCurrentHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBreakerCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerCurrentHysteresis.setDescription('The hysteresis used for deassertions reported in milliamps (1/1000th of an amp)')
lineVoltageCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineVoltageCount.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltageCount.setDescription('The number of line voltages (1 for single phase, 3 for 3 phase. This object is deprecated in favour of inletPoleTable')
lineVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2), )
if mibBuilder.loadTexts: lineVoltageTable.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltageTable.setDescription('A list of line input entries. The number of entries is given by the value of lineInputCount. This object is deprecated in favour of linletPoleTable')
lineVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1), ).setIndexNames((0, "PDU-MIB", "lineVoltageIndex"))
if mibBuilder.loadTexts: lineVoltageEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltageEntry.setDescription('An entry containing values and threshold settings for a particular line input. This object is deprecated in favour of inletPoleTable')
lineVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: lineVoltageIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltageIndex.setDescription('A unique value for each line input. Its value ranges between 1 and lineInputCount. This object is deprecated in favour of inletPoleTable')
lineVoltageLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineVoltageLabel.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltageLabel.setDescription('A string identifying the Line For Single Phase: L1 For 3phase Delta-wired: L1-L2, L2-L3, L3-L1 For 3phase Wye-wired: L1-N, L2-N, L3-N This object is deprecated in favour of inletPoleTable')
lineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: lineVoltage.setDescription('The value of the voltage reported in MilliVolts. This object is deprecated in favour of inletPoleTable')
dataLogCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogCount.setStatus('current')
if mibBuilder.loadTexts: dataLogCount.setDescription('The number of entries in the dataLog table which is a circular buffer.')
dataLogLatestIndex = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogLatestIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogLatestIndex.setDescription('The index of the latest (most recent) entry in dataLogTable .')
dataLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3), )
if mibBuilder.loadTexts: dataLogTable.setStatus('current')
if mibBuilder.loadTexts: dataLogTable.setDescription('A list of data log entries. The number of entries is given by the value of dataLogCount.')
dataLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"))
if mibBuilder.loadTexts: dataLogEntry.setStatus('current')
if mibBuilder.loadTexts: dataLogEntry.setDescription('An entry in the dataLog buffer containing the unit data collected at the instant specified by dataLogTimeStamp')
dataLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogIndex.setDescription('A unique value for each data sample. Its value ranges between 1 and dataLogCount .')
dataLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dataLogTimeStamp.setDescription('The time when the data was collected. It is measured in seconds relative to January 1, 1970 (midnight UTC/GMT), i.e a value of 0 indicates January 1, 1970 (midnight UTC/GMT)')
dataLogActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 3), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogActivePower.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogActivePower.setDescription("The value for the pdu's active power sensor in watts. This has been deprecated in favor of dataLogAvgActivePower, dataLogMaxActivePower,dataLogMinActivePower ")
dataLogApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 4), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogApparentPower.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogApparentPower.setDescription("The value for the pdu's apparent power sensor in volt-amps. This has been deprecated in favor of dataLogAvgApparentPower, dataLogMaxApparentPower,dataLogMinApparentPower ")
dataLogAvgActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 5), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgActivePower.setDescription('The average active power for this measurement period')
dataLogMaxActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 6), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxActivePower.setDescription('The maximum active power for this measurement period')
dataLogMinActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogMinActivePower.setDescription('The minimum active power for this measurement period')
dataLogAvgApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgApparentPower.setDescription('The average apparent power for this measurement period')
dataLogMaxApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 9), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxApparentPower.setDescription('The maximum apparent power for this measurement period')
dataLogMinApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 10), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogMinApparentPower.setDescription('The minimum apparent power for this measurement period')
dataLogOutletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1), )
if mibBuilder.loadTexts: dataLogOutletTable.setStatus('current')
if mibBuilder.loadTexts: dataLogOutletTable.setDescription('A list of outlet entries. The number of entries is given by the value of outletCount.')
dataLogOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogOutletIndex"))
if mibBuilder.loadTexts: dataLogOutletEntry.setStatus('current')
if mibBuilder.loadTexts: dataLogOutletEntry.setDescription('An entry in the data log containing outlet level data for a particular outlet.')
dataLogOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogOutletIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogOutletIndex.setDescription('A unique value for each outlet. Its value ranges between 1 and the value of outletCount.')
dataLogOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogOutletCurrent.setDescription('A unique value for the current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp) This has been deprecated in favor of dataLogAvgOutletCurrent , dataLogMaxOutletCurrent ,dataLogMinOutletCurrent ')
dataLogOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogOutletVoltage.setDescription('A unique value for the voltage sensor attached to the outlet.This value is reported in millivolts (1/1000th of a volt) This has been deprecated in favor of dataLogAvgOutletVoltage , dataLogMaxOutletVoltage ,dataLogMinOutletVoltage ')
dataLogOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 4), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletPowerFactor.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogOutletPowerFactor.setDescription('A unique value for the power factor of the outlet. The reading represents a percentage in the range of 0% to 100%. This has been deprecated in favor of dataLogAvgOutletPowerFactor, dataLogMaxOutletPowerFactor,dataLogMinOutletPowerFactor ')
dataLogOutletOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletOnTime.setStatus('current')
if mibBuilder.loadTexts: dataLogOutletOnTime.setDescription('The amount of time since this outlet was last switched on. This value is reported in seconds. ')
dataLogOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 6), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletWattHours.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogOutletWattHours.setDescription('The cumulative Active Energy for this outlet. This value is reported in WattHours This has been deprecated in favor of dataLogAvgOutletWattHours , dataLogMaxOutletWattHours ,dataLogMinOutletWattHours')
dataLogAvgOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 7), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgOutletCurrent.setDescription('The Average value for the measurement period: A unique value for the current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
dataLogMaxOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 8), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxOutletCurrent.setDescription('The Maximum value for the measurement period: A unique value for the current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
dataLogMinOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 9), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogMinOutletCurrent.setDescription('The Minimum value for the measurement period: A unique value for the current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
dataLogAvgOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 10), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgOutletVoltage.setDescription('The Average value for the measurement period: A unique value for the voltage sensor attached to the outlet.This value is reported in millivolts (1/1000th of a volt)')
dataLogMaxOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 11), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxOutletVoltage.setDescription('The Maximum value for the measurement period: A unique value for the voltage sensor attached to the outlet.This value is reported in millivolts (1/1000th of a volt)')
dataLogMinOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 12), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: dataLogMinOutletVoltage.setDescription('The Minimum value for the measurement period: A unique value for the voltage sensor attached to the outlet.This value is reported in millivolts (1/1000th of a volt)')
dataLogAvgOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 13), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgOutletPowerFactor.setDescription('The Average value for the measurement period: A unique value for the power factor of the outlet. The reading represents a percentage in the range of 0% to 100%')
dataLogMaxOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 14), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxOutletPowerFactor.setDescription('The Maximum value for the measurement period: A unique value for the power factor of the outlet. The reading represents a percentage in the range of 0% to 100%')
dataLogMinOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 15), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: dataLogMinOutletPowerFactor.setDescription('The Minimum value for the measurement period: A unique value for the power factor of the outlet. The reading represents a percentage in the range of 0% to 100%')
dataLogAvgOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 16), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletWattHours.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgOutletWattHours.setDescription('The Average value for the measurement period: The cumulative Active Energy for this outlet. This value is reported in WattHours')
dataLogMaxOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 17), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletWattHours.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxOutletWattHours.setDescription('The Maximum value for the measurement period: The cumulative Active Energy for this outlet. This value is reported in WattHours')
dataLogMinOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 18), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletWattHours.setStatus('current')
if mibBuilder.loadTexts: dataLogMinOutletWattHours.setDescription('The Minimum value for the measurement period: The cumulative Active Energy for this outlet. This value is reported in WattHours')
dataLogCircuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1), )
if mibBuilder.loadTexts: dataLogCircuitBreakerTable.setStatus('current')
if mibBuilder.loadTexts: dataLogCircuitBreakerTable.setDescription('A list of circuit breaker entries. The number of entries is given by the value of circuitBreakerCount.')
dataLogCircuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogCircuitBreakerIndex"))
if mibBuilder.loadTexts: dataLogCircuitBreakerEntry.setStatus('current')
if mibBuilder.loadTexts: dataLogCircuitBreakerEntry.setDescription('An entry in the data log containing circuit breaker values')
dataLogCircuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogCircuitBreakerIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogCircuitBreakerIndex.setDescription('A unique value for each circuit breaker. Its value ranges between 1 and circuitBreakerCount.')
dataLogCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogCircuitBreakerCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogCircuitBreakerCurrent.setDescription('The value of the current reported in MilliAmps. This has been deprecated in favor of dataLogAvgCircuitBreakerCurrent, dataLogMaxOutletCircuitBreakerCurrent, dataLogMinCircuitBreakerCurrent ')
dataLogAvgCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 3), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgCircuitBreakerCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgCircuitBreakerCurrent.setDescription('The Average value for the measurement period: The value of the current reported in MilliAmps.')
dataLogMaxCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxCircuitBreakerCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxCircuitBreakerCurrent.setDescription('The Maximum value for the measurement period: The value of the current reported in MilliAmps.')
dataLogMinCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinCircuitBreakerCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogMinCircuitBreakerCurrent.setDescription('The Minimum value for the measurement period: The value of the current reported in MilliAmps.')
dataLogInputLineTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1), )
if mibBuilder.loadTexts: dataLogInputLineTable.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInputLineTable.setDescription('A list of line input entries. The number of entries is given by the value of lineCurrentCount. This object is deprecated in favour of dataLogInletLineTable')
dataLogInputLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogInputLineIndex"))
if mibBuilder.loadTexts: dataLogInputLineEntry.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInputLineEntry.setDescription('An entry in the data log containing input line values for a particular input line. This object is deprecated in favour of dataLogInletLineTable')
dataLogInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogInputLineIndex.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInputLineIndex.setDescription('A unique value for each line input. Its value ranges between 1 and inletTable(inletIndex).inletPoleCount. This object is deprecated in favour of dataLogInletLineTable')
dataLogInputLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInputLineCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInputLineCurrent.setDescription('The value of the current reported in MilliAmps. For Single Phase: Input Line Current For 3phase Delta-wired: Current for L1, L2, L3 For 3phase WYE-wired: Current for L1, L2, L3, N This object is deprecated in favour of dataLogInletLineTable')
dataLogInputLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInputLineVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInputLineVoltage.setDescription('The value of the voltage reported in MilliVolts. For Single Phase: Input Line Voltage For 3phase Delta-wired: Voltages for L1-L2, L2-L3, L3-L1 For 3phase WYE-wired: Voltages for L1-N, L2-N, L3-N This object is deprecated in favour of dataLogInletLineTable')
dataLogInletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2), )
if mibBuilder.loadTexts: dataLogInletTable.setStatus('current')
if mibBuilder.loadTexts: dataLogInletTable.setDescription('A list of inlet entries. The number of entries is given by the value of inletCount.')
dataLogInletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogInletIndex"))
if mibBuilder.loadTexts: dataLogInletEntry.setStatus('current')
if mibBuilder.loadTexts: dataLogInletEntry.setDescription('An inlet entry containing objects at the for a particular outlet.')
dataLogInletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogInletIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogInletIndex.setDescription('A unique value for each inlet. Its value ranges between 1 and the value of inletCount.')
dataLogInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletCurrentUnbalance.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInletCurrentUnbalance.setDescription('A string displaying the current unbalance in percent. It will have the value NA if the feature is disabled, the PX is not a 3-phase unit,or the average of the line currents is zero This has been deprecated in favor of dataLogAvgInletCurrentUnbalance, dataLogMaxInletCurrentUnbalance, dataLogMinInletCurrentUnbalance ')
dataLogInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 11), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletActivePower.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInletActivePower.setDescription('The active power for the inlet This value is reported in Watts. This has been deprecated in favor of dataLogAvgInletActivePower, dataLogMaxInletActivePower, dataLogMinInletActivePower')
dataLogInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 12), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletApparentPower.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInletApparentPower.setDescription('The apparent power for the inlet. This value is reported in Volt-Amps This has been deprecated in favor of dataLogAvgInletApparentPower, dataLogMaxInletApparentPower, dataLogMinInletApparentPower')
dataLogInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 13), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletActiveEnergy.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInletActiveEnergy.setDescription('The value of the cumulative active energy for this inlet. This value is reported in WattHours This has been deprecated in favor of dataLogAvgInletActiveEnergy, dataLogMaxInletActiveEnergy, dataLogMinInletActiveEnergy')
dataLogAvgInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletCurrentUnbalance.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletCurrentUnbalance.setDescription('The average value of the current unbalance for this measurement period A string displaying the current unbalance in percent. It will have the value NA if the feature is disabled, the PX is not a 3-phase unit,or the average of the line currents is zero')
dataLogMaxInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletCurrentUnbalance.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletCurrentUnbalance.setDescription('The Maximum value for the measurement period: A string displaying the current unbalance in percent. It will have the value NA if the feature is disabled, the PX is not a 3-phase unit,or the average of the line currents is zero')
dataLogMinInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletCurrentUnbalance.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletCurrentUnbalance.setDescription('The Minimum value for the measurement period: A string displaying the current unbalance in percent. It will have the value NA if the feature is disabled, the PX is not a 3-phase unit,or the average of the line currents is zero')
dataLogAvgInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 17), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletActivePower.setDescription('The Average value for the measurement period: The active power for the inlet This value is reported in Watts.')
dataLogMaxInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 18), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletActivePower.setDescription('The Maximum value for the measurement period: The active power for the inlet This value is reported in Watts.')
dataLogMinInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 19), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletActivePower.setDescription('The Minimum value for the measurement period: The active power for the inlet This value is reported in Watts.')
dataLogAvgInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 20), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletApparentPower.setDescription('The Average value for the measurement period: The apparent power for the inlet. This value is reported in Volt-Amps')
dataLogMaxInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 21), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletApparentPower.setDescription('The Maximum value for the measurement period: The apparent power for the inlet. This value is reported in Volt-Amps')
dataLogMinInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 22), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletApparentPower.setDescription('The Minimum value for the measurement period: The apparent power for the inlet. This value is reported in Volt-Amps')
dataLogAvgInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 23), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletActiveEnergy.setDescription(' The Average value for the measurement period: The value of the cumulative active energy for this inlet. This value is reported in WattHours')
dataLogMaxInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 24), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletActiveEnergy.setDescription('The Maximum value for the measurement period: The value of the cumulative active energy for this inlet. This value is reported in WattHours')
dataLogMinInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 25), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletActiveEnergy.setDescription('The Minimum value for the measurement period: The value of the cumulative active energy for this inlet. This value is reported in WattHours')
dataLogInletPoleTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1), )
if mibBuilder.loadTexts: dataLogInletPoleTable.setStatus('current')
if mibBuilder.loadTexts: dataLogInletPoleTable.setDescription('A list of line input entries. The number of entries is given by the value of dataLoginletTable(dataLogInletIndex).inletPoleCount.')
dataLogInletPoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogInletIndex"), (0, "PDU-MIB", "dataLogInletPoleIndex"))
if mibBuilder.loadTexts: dataLogInletPoleEntry.setStatus('current')
if mibBuilder.loadTexts: dataLogInletPoleEntry.setDescription('An entry in the data log containing input line values for a particular input line.')
dataLogInletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogInletPoleIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogInletPoleIndex.setDescription('A unique value for each line input. Its value ranges between 1 and lineCurrentCount.')
dataLogInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletPoleCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInletPoleCurrent.setDescription('The value of the current reported in MilliAmps. For Single Phase: Input Line Current For 3phase Delta-wired: Current for L1, L2, L3 For 3phase WYE-wired: Current for L1, L2, L3, N This has been deprecated in favor of dataLogAvgInletPoleCurrent, dataLogMaxInletPoleCurrent, dataLogMinInletPoleCurrent')
dataLogInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletPoleVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: dataLogInletPoleVoltage.setDescription('The value of the voltage reported in MilliVolts. For Single Phase: Input Line Voltage For 3phase Delta-wired: Voltages for L1-L2, L2-L3, L3-L1 For 3phase WYE-wired: Voltages for L1-N, L2-N, L3-N This has been deprecated in favor of dataLogAvgInletPoleVoltage, dataLogMaxInletPoleVoltage, dataLogMinInletPoleVoltage')
dataLogAvgInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletPoleCurrent.setDescription('The Average value for the measurement period: The value of the current reported in MilliAmps. For Single Phase: Input Line Current For 3phase Delta-wired: Current for L1, L2, L3 For 3phase WYE-wired: Current for L1, L2, L3, N')
dataLogMaxInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletPoleCurrent.setDescription('The Maximum value for the measurement period: The value of the current reported in MilliAmps. For Single Phase: Input Line Current For 3phase Delta-wired: Current for L1, L2, L3 For 3phase WYE-wired: Current for L1, L2, L3, N')
dataLogMinInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 6), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleCurrent.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletPoleCurrent.setDescription('The Minimum value for the measurement period: The value of the current reported in MilliAmps. For Single Phase: Input Line Current For 3phase Delta-wired: Current for L1, L2, L3 For 3phase WYE-wired: Current for L1, L2, L3, N')
dataLogAvgInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 7), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleVoltage.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletPoleVoltage.setDescription('The Average value for the measurement period: The value of the voltage reported in MilliVolts. For Single Phase: Input Line Voltage For 3phase Delta-wired: Voltages for L1-L2, L2-L3, L3-L1 For 3phase WYE-wired: Voltages for L1-N, L2-N, L3-N')
dataLogMaxInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 8), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleVoltage.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletPoleVoltage.setDescription('The Maximum value for the measurement period: The value of the voltage reported in MilliVolts. For Single Phase: Input Line Voltage For 3phase Delta-wired: Voltages for L1-L2, L2-L3, L3-L1 For 3phase WYE-wired: Voltages for L1-N, L2-N, L3-N')
dataLogMinInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 9), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleVoltage.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletPoleVoltage.setDescription('The Minimum value for the measurement period: The value of the voltage reported in MilliVolts. For Single Phase: Input Line Voltage For 3phase Delta-wired: Voltages for L1-L2, L2-L3, L3-L1 For 3phase WYE-wired: Voltages for L1-N, L2-N, L3-N')
dataLogAvgInletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 10), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletPoleActivePower.setDescription("This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Average value of the active power for the measurement period. The value is reported in Watts.")
dataLogMaxInletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 11), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletPoleActivePower.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Maximum value of the active power for the measurement period. The value is reported in Watts.")
dataLogMinInletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 12), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleActivePower.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletPoleActivePower.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Minimum value of the active power for the measurement period. The value is reported in Watts.")
dataLogAvgInletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 13), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletPoleApparentPower.setDescription("This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Average value of the apparent power for the measurement period. The value is reported in Volt-Amps")
dataLogMaxInletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 14), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletPoleApparentPower.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Maximum value of the apparent power for the measurement period. The value is reported in Volt-Amps")
dataLogMinInletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 15), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleApparentPower.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletPoleApparentPower.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Minimum value of the apparent power for the measurement period. The value is reported in Volt-Amps")
dataLogAvgInletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 16), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgInletPoleActiveEnergy.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Average value of the active energy for the measurement period. The value is reported in WattHours")
dataLogMaxInletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 17), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxInletPoleActiveEnergy.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Maximum value of the active energy for the measurement period. The value is reported in WattHours")
dataLogMinInletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 18), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: dataLogMinInletPoleActiveEnergy.setDescription(" This object has a valid value only for inline meters. If inlineMeter = 'No', then the value is invalid; In all other cases, it is the the Minimum value of the active energy for the measurement period. The value is reported in WattHours")
dataLogExternalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1), )
if mibBuilder.loadTexts: dataLogExternalSensorTable.setStatus('current')
if mibBuilder.loadTexts: dataLogExternalSensorTable.setDescription('A list of external sensor entries. The number of entries is given by the value of externalSensorCount.')
dataLogExternalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogExternalSensorIndex"))
if mibBuilder.loadTexts: dataLogExternalSensorEntry.setStatus('current')
if mibBuilder.loadTexts: dataLogExternalSensorEntry.setDescription('An entry in the data log containing external sensor values')
dataLogExternalSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogExternalSensorIndex.setStatus('current')
if mibBuilder.loadTexts: dataLogExternalSensorIndex.setDescription('A unique value for each external sensor. Its value ranges between 1 and externalSensorCount.')
dataLogExternalSensorChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogExternalSensorChanged.setStatus('current')
if mibBuilder.loadTexts: dataLogExternalSensorChanged.setDescription('Indicates whether there has been a change in the sensor type/subtype/channel number for this sensorID. This can occur if sensorIDs have been reassigned as a result of a GUI operation or a SET operation on reorderexternalSensorTableEntries. Format: SerialNumber=xxxxxxxx; SensorType=dd; SensorSubType=d; ChannelNumber=d SensorSubType and ChannelNumber are present only if NewSensorType=onOff If there was no change from the previous sample, then this string is empty. Examples: Sensor changed to Temperature: SerialNumber=AEI8160083; SensorType=10; Sensor changed to onOff/SmokeDetection: SerialNumber=AEI8160083; SensorType=14; SensorSubType= 18; ChannelNumber=1 Sensor Channel Number changed: SerialNumber=AEI8160083; SensorType=14; SensorSubType= 18; ChannelNumber=2 Sensor SubType changed: SerialNumber=AEI8160083; SensorType=14; SensorSubType= 19; ChannelNumber=2 ')
dataLogExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 3), StateOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogExternalSensorState.setStatus('current')
if mibBuilder.loadTexts: dataLogExternalSensorState.setDescription('The sensor state. ')
dataLogAvgExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgExternalSensorValue.setStatus('current')
if mibBuilder.loadTexts: dataLogAvgExternalSensorValue.setDescription('The Average of the sensor values Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors. This value is not valid if dataLogExternalSensorState is unavailable(-1). ')
dataLogMaxExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxExternalSensorValue.setStatus('current')
if mibBuilder.loadTexts: dataLogMaxExternalSensorValue.setDescription('The Maximum of the sensor values Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors This value is not valid if dataLogExternalSensorState is unavailable(-1). ')
dataLogMinExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinExternalSensorValue.setStatus('current')
if mibBuilder.loadTexts: dataLogMinExternalSensorValue.setDescription('The Minimum of the sensor values. Does not apply (gets will return 0) to onOff, trip, vibration, waterDetection, smokeDetection sensors This value is not valid if dataLogExternalSensorState is unavailable(-1). ')
rebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 1)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: rebootStarted.setStatus('current')
if mibBuilder.loadTexts: rebootStarted.setDescription('The reboot process has started')
rebootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 2)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"))
if mibBuilder.loadTexts: rebootCompleted.setStatus('current')
if mibBuilder.loadTexts: rebootCompleted.setDescription('The reboot process is complete')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 3)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
if mibBuilder.loadTexts: userLogin.setDescription('A user logged in')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 4)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
if mibBuilder.loadTexts: userLogout.setDescription('A user logged out')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 5)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailure.setDescription('A user authentication attempt failed')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 8)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userSessionTimeout.setDescription('A user timed out from the device')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 11)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
if mibBuilder.loadTexts: userAdded.setDescription('A user was added to the system')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 12)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userModified.setStatus('current')
if mibBuilder.loadTexts: userModified.setDescription('A user account was modified')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 13)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
if mibBuilder.loadTexts: userDeleted.setDescription('A user was deleted from the system')
groupAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 14)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupAdded.setStatus('current')
if mibBuilder.loadTexts: groupAdded.setDescription('A group was added to the system')
groupModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 15)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupModified.setStatus('current')
if mibBuilder.loadTexts: groupModified.setDescription('A group was modified')
groupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 16)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupDeleted.setStatus('current')
if mibBuilder.loadTexts: groupDeleted.setDescription('A group was deleted from the system')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 20)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "imageVersion"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateStarted.setDescription('The device update has started')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 22)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
if mibBuilder.loadTexts: userBlocked.setDescription('A blocked user tried to log in')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 23)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "outletLabel"), ("PDU-MIB", "outletOperationalState"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
if mibBuilder.loadTexts: powerControl.setDescription('An outlet has been switched')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 24)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: userPasswordChanged.setDescription('A user password was changed')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 28)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "status"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
if mibBuilder.loadTexts: passwordSettingsChanged.setDescription('Strong password settings changed ')
firmwareFileDiscarded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 36)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: firmwareFileDiscarded.setStatus('current')
if mibBuilder.loadTexts: firmwareFileDiscarded.setDescription('A firmware file discarded ')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 38)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareValidationFailed.setDescription('A firmware validation failed ')
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 39)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: securityViolation.setStatus('current')
if mibBuilder.loadTexts: securityViolation.setDescription('Security violation.')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 41)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
if mibBuilder.loadTexts: logFileCleared.setDescription('The log file has been cleared.')
thresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 45)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "thresholdDescr"), ("PDU-MIB", "thresholdSeverity"), ("PDU-MIB", "thresholdEventType"), ("PDU-MIB", "sensorIdentificationString"), ("PDU-MIB", "thresholdValue"), ("PDU-MIB", "sensorValue"))
if mibBuilder.loadTexts: thresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: thresholdAlarm.setDescription("Configured sensor theshold event. The 'thresholdEventType' variable will indicate whether or not the threshold triggered or cleared. thresholdValue and sensorValue have valid values only for external temperature and humidity sensors. ")
outletGroupingConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 50)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "slaveIpAddress"))
if mibBuilder.loadTexts: outletGroupingConnectivityLost.setStatus('current')
if mibBuilder.loadTexts: outletGroupingConnectivityLost.setDescription('Master PDU lost contact with the slave PDU in an outlet grouping configuration.')
circuitBreakerTripped = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 51)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "circuitBreakerLabel"))
if mibBuilder.loadTexts: circuitBreakerTripped.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerTripped.setDescription('Circuit Breaker Tripped.')
circuitBreakerRecovered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 52)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "circuitBreakerLabel"))
if mibBuilder.loadTexts: circuitBreakerRecovered.setStatus('current')
if mibBuilder.loadTexts: circuitBreakerRecovered.setDescription('Circuit Breaker Recovered.')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 53)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
if mibBuilder.loadTexts: bulkConfigurationSaved.setDescription('Bulk Configuration saved.')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 54)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
if mibBuilder.loadTexts: bulkConfigurationCopied.setDescription('Bulk Configuration saved.')
environmentalSensorsConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 55)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: environmentalSensorsConnectivityLost.setStatus('current')
if mibBuilder.loadTexts: environmentalSensorsConnectivityLost.setDescription('lost connectivity to environmental Sensors')
externalOnOffSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 56)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorState"), ("PDU-MIB", "oldSensorState"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: externalOnOffSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: externalOnOffSensorStateChange.setDescription('External OnOff Sensor State Change.')
environmentalSensorsConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 57)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: environmentalSensorsConnectivityRestored.setStatus('current')
if mibBuilder.loadTexts: environmentalSensorsConnectivityRestored.setDescription(' connectivity to environmental Sensor was restored')
voltageMeasurementError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 58)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "psocNumber"))
if mibBuilder.loadTexts: voltageMeasurementError.setStatus('current')
if mibBuilder.loadTexts: voltageMeasurementError.setDescription(' voltage measurement error, a Psoc (Outlet Controller) reported zero voltage and non-zero current. Voltage, power and energy measurements may be in error ')
fipsModeEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 59)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: fipsModeEnabled.setStatus('current')
if mibBuilder.loadTexts: fipsModeEnabled.setDescription('FIPS Mode Enabled ')
fipsModeDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 60)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: fipsModeDisabled.setStatus('current')
if mibBuilder.loadTexts: fipsModeDisabled.setDescription('FIPS Mode Disabled ')
managingenvironmentalSensor = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 61)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: managingenvironmentalSensor.setStatus('current')
if mibBuilder.loadTexts: managingenvironmentalSensor.setDescription(' begin managing environmental Sensor ')
unmanagingenvironmentalSensor = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 62)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: unmanagingenvironmentalSensor.setStatus('current')
if mibBuilder.loadTexts: unmanagingenvironmentalSensor.setDescription(' cease managing environmental Sensor')
ipmiOverLANEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 63)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: ipmiOverLANEnabled.setStatus('current')
if mibBuilder.loadTexts: ipmiOverLANEnabled.setDescription('IPMI Over LAN Mode has been Enabled ')
ipmiOverLANDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 64)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: ipmiOverLANDisabled.setStatus('current')
if mibBuilder.loadTexts: ipmiOverLANDisabled.setDescription('IPMI Over LAN Mode has been Disabled ')
mibBuilder.exportSymbols("PDU-MIB", dataLogAvgInletPoleVoltage=dataLogAvgInletPoleVoltage, inletEntry=inletEntry, conformance=conformance, externalSensorDecimalDigits=externalSensorDecimalDigits, dataLogMinInletPoleApparentPower=dataLogMinInletPoleApparentPower, dataLogMaxActivePower=dataLogMaxActivePower, info=info, dataLogAvgInletCurrentUnbalance=dataLogAvgInletCurrentUnbalance, externalSensorSerialNumber=externalSensorSerialNumber, dataLogIndex=dataLogIndex, ipmiOverLANDisabled=ipmiOverLANDisabled, compliances=compliances, SensorStateEnumeration=SensorStateEnumeration, dataLogTimeStamp=dataLogTimeStamp, lineCurrentEntry=lineCurrentEntry, pdu=pdu, SensorUnitsEnumeration=SensorUnitsEnumeration, tempSensorIndex=tempSensorIndex, EnabledDisabledEnumeration=EnabledDisabledEnumeration, outletCount=outletCount, outletsGroup=outletsGroup, TenthDegreesCelsius=TenthDegreesCelsius, circuitBreakerCurrentRating=circuitBreakerCurrentRating, trapsGroup=trapsGroup, PowerCIMStatusEnumeration=PowerCIMStatusEnumeration, SensorTypeEnumeration=SensorTypeEnumeration, sensorValue=sensorValue, unitOrLineVoltageUpperWarning=unitOrLineVoltageUpperWarning, dataLogAvgInletActivePower=dataLogAvgInletActivePower, status=status, dataLogLatestIndex=dataLogLatestIndex, complianceRev1=complianceRev1, unitTempLowerCritical=unitTempLowerCritical, thresholdDescr=thresholdDescr, dataLogExternalSensor=dataLogExternalSensor, dataLogMinOutletWattHours=dataLogMinOutletWattHours, MilliAmps=MilliAmps, circuitBreakerTripped=circuitBreakerTripped, dataLogMinApparentPower=dataLogMinApparentPower, externalSensorNumber=externalSensorNumber, VoltAmps=VoltAmps, outletCurrentLowerWarning=outletCurrentLowerWarning, currentUnbalanceSupport=currentUnbalanceSupport, dataLogAvgOutletWattHours=dataLogAvgOutletWattHours, dataCollectionInterval=dataCollectionInterval, dataLogInletApparentPower=dataLogInletApparentPower, dataLogApparentPower=dataLogApparentPower, outletVoltage=outletVoltage, tempSensorTable=tempSensorTable, unitOrLineCurrentUpperWarning=unitOrLineCurrentUpperWarning, inletCurrentUnbalanceUpperWarning=inletCurrentUnbalanceUpperWarning, powerCIMStatus=powerCIMStatus, humidity=humidity, unitVoltageLowerWarning=unitVoltageLowerWarning, dataLogOutletTable=dataLogOutletTable, currentUnbalanceUpperCritical=currentUnbalanceUpperCritical, inletPolePowerFactor=inletPolePowerFactor, circuitBreakerRecovered=circuitBreakerRecovered, complianceRev5=complianceRev5, tempUpperCritical=tempUpperCritical, outletWattHours=outletWattHours, passwordSettingsChanged=passwordSettingsChanged, humidityZCoordinate=humidityZCoordinate, logFileCleared=logFileCleared, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, outletPowerFactor=outletPowerFactor, lineCurrentGroup=lineCurrentGroup, externalSensorHysteresis=externalSensorHysteresis, lineCurrentLabel=lineCurrentLabel, netmask=netmask, inlineMeter=inlineMeter, dataLogInputLine=dataLogInputLine, inletCurrentLowerWarning=inletCurrentLowerWarning, tempXCoordinate=tempXCoordinate, dataLogMaxInletApparentPower=dataLogMaxInletApparentPower, hardwareRev=hardwareRev, inletPoleCount=inletPoleCount, WattHours=WattHours, lineVoltageIndex=lineVoltageIndex, fipsMode=fipsMode, TypeOfSensorEnumeration=TypeOfSensorEnumeration, PYSNMP_MODULE_ID=raritan, dataLogMaxOutletCurrent=dataLogMaxOutletCurrent, inletCurrentUnbalanceUpperCritical=inletCurrentUnbalanceUpperCritical, psocNumber=psocNumber, temperature=temperature, environmentalSensorsConnectivityRestored=environmentalSensorsConnectivityRestored, ipAddress=ipAddress, configureAlerts=configureAlerts, humidityLowerWarning=humidityLowerWarning, unitApparentPower=unitApparentPower, dataLogMaxExternalSensorValue=dataLogMaxExternalSensorValue, unitTempLowerWarning=unitTempLowerWarning, lineVoltageEntry=lineVoltageEntry, userPasswordChanged=userPasswordChanged, outletMaxCurrent=outletMaxCurrent, dataLogInletActivePower=dataLogInletActivePower, dataLog=dataLog, inletTable=inletTable, humiditySensorEntry=humiditySensorEntry, EventDirectionEnumeration=EventDirectionEnumeration, dataLogOutletCurrent=dataLogOutletCurrent, dataLogging=dataLogging, externalSensorChannelNumber=externalSensorChannelNumber, inletVoltageUpperCritical=inletVoltageUpperCritical, lineCurrentCount=lineCurrentCount, dataLogActivePower=dataLogActivePower, circuitBreakerCurrent=circuitBreakerCurrent, tempZCoordinate=tempZCoordinate, outletEntry=outletEntry, externalSensorZCoordinate=externalSensorZCoordinate, humidityYCoordinate=humidityYCoordinate, dataLogInletCurrentUnbalance=dataLogInletCurrentUnbalance, outletIndex=outletIndex, thresholdEventType=thresholdEventType, dataLogMaxOutletVoltage=dataLogMaxOutletVoltage, infoGroup=infoGroup, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, dataLogMaxInletCurrentUnbalance=dataLogMaxInletCurrentUnbalance, complianceRev2=complianceRev2, lineVoltageLabel=lineVoltageLabel, dataLogInletPoleTable=dataLogInletPoleTable, outletActivePower=outletActivePower, externalSensorName=externalSensorName, inletsGroup=inletsGroup, outletApparentPower=outletApparentPower, userBlocked=userBlocked, outletTable=outletTable, dataLogCircuitBreakerTable=dataLogCircuitBreakerTable, neutralCurrentUpperWarning=neutralCurrentUpperWarning, inletCurrentHysteresis=inletCurrentHysteresis, reorderexternalSensorTableEntries=reorderexternalSensorTableEntries, dataLogMaxInletPoleActivePower=dataLogMaxInletPoleActivePower, dataLogEntry=dataLogEntry, infoGroupRev2=infoGroupRev2, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, tempSensorCount=tempSensorCount, dataLogMinInletPoleActivePower=dataLogMinInletPoleActivePower, dataLogInputLineTable=dataLogInputLineTable, dataLogAvgInletPoleActivePower=dataLogAvgInletPoleActivePower, humidityUpperCritical=humidityUpperCritical, dataLogOutletPowerFactor=dataLogOutletPowerFactor, fipsModeDisabled=fipsModeDisabled, SensorClassEnumeration=SensorClassEnumeration, circuitBreakerGroup=circuitBreakerGroup, altitude=altitude, dataLogTable=dataLogTable, thresholdAlarm=thresholdAlarm, tempSensorLabel=tempSensorLabel, outlets=outlets, dataLogInputLineVoltage=dataLogInputLineVoltage, inletVoltageHysteresis=inletVoltageHysteresis, dataLogOutletIndex=dataLogOutletIndex, dataLogInletEntry=dataLogInletEntry, currentUnbalance=currentUnbalance, Percentage=Percentage, oldSensorState=oldSensorState, dataLogAvgExternalSensorValue=dataLogAvgExternalSensorValue, circuitBreaker=circuitBreaker, dataLogInletPoleCurrent=dataLogInletPoleCurrent, firmwareValidationFailed=firmwareValidationFailed, dataLogInletPole=dataLogInletPole, lineVoltage=lineVoltage, circuitBreakerEntry=circuitBreakerEntry, lastUpgradeTimestamp=lastUpgradeTimestamp, dataLogMaxApparentPower=dataLogMaxApparentPower, externalSensorState=externalSensorState, groupName=groupName, dataLogExternalSensorChanged=dataLogExternalSensorChanged, inletCurrentLowerCritical=inletCurrentLowerCritical, traps=traps, ipmiOverLAN=ipmiOverLAN, thresholdSeverity=thresholdSeverity, humidityXCoordinate=humidityXCoordinate, dataLogInletTable=dataLogInletTable, userAdded=userAdded, secondaryNTPServerAddressType=secondaryNTPServerAddressType, unitCurrent=unitCurrent, externalSensorType=externalSensorType, inletPowerFactor=inletPowerFactor, outletGroupingConnectivityLost=outletGroupingConnectivityLost, dataLogInletActiveEnergy=dataLogInletActiveEnergy, thresholdValue=thresholdValue, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, dataLogMaxInletPoleVoltage=dataLogMaxInletPoleVoltage, outletCurrentUpperWarning=outletCurrentUpperWarning, dataLogOutlet=dataLogOutlet, unitSensorsGroupRev=unitSensorsGroupRev, synchronizeWithNTPServer=synchronizeWithNTPServer, unitOrLineVoltageLowerWarning=unitOrLineVoltageLowerWarning, externalSensors=externalSensors, circuitBreakerCurrentHysteresis=circuitBreakerCurrentHysteresis, userName=userName, dataLogAvgApparentPower=dataLogAvgApparentPower, dataLogCircuitBreakerIndex=dataLogCircuitBreakerIndex, dataLogMaxOutletWattHours=dataLogMaxOutletWattHours, dataLogAvgOutletCurrent=dataLogAvgOutletCurrent, unitCurrentUpperWarning=unitCurrentUpperWarning, unitOrLineCurrentHysteresis=unitOrLineCurrentHysteresis, inletActivePower=inletActivePower, lineVoltageTable=lineVoltageTable, unitCpuTemp=unitCpuTemp, dataLogMaxCircuitBreakerCurrent=dataLogMaxCircuitBreakerCurrent, inletPoleApparentPower=inletPoleApparentPower, outletLabel=outletLabel, firmwareFileDiscarded=firmwareFileDiscarded, dataLogMinInletCurrentUnbalance=dataLogMinInletCurrentUnbalance, dataLogMinInletActiveEnergy=dataLogMinInletActiveEnergy, lineVoltages=lineVoltages, serialNumber=serialNumber, dataLoggingInterval=dataLoggingInterval, dataLogAvgOutletPowerFactor=dataLogAvgOutletPowerFactor, dataLogMaxInletPoleCurrent=dataLogMaxInletPoleCurrent, userSessionTimeout=userSessionTimeout, lastUpgradeStatus=lastUpgradeStatus, dataLogAvgInletApparentPower=dataLogAvgInletApparentPower, dataLogMinInletPoleVoltage=dataLogMinInletPoleVoltage, dataLogAvgCircuitBreakerCurrent=dataLogAvgCircuitBreakerCurrent, externalSensorsGroup=externalSensorsGroup, inletVoltage=inletVoltage, inletPoleVoltage=inletPoleVoltage, externalBinarySensorSubtype=externalBinarySensorSubtype, inletVoltageLowerWarning=inletVoltageLowerWarning, inletCurrentUnbalance=inletCurrentUnbalance, dataLogMinInletActivePower=dataLogMinInletActivePower, ratedVoltage=ratedVoltage, targetUser=targetUser, dataLogInputLineEntry=dataLogInputLineEntry, unitOrLineVoltageHysteresis=unitOrLineVoltageHysteresis, userModified=userModified, circuitBreakerIndex=circuitBreakerIndex, externalSensorXCoordinate=externalSensorXCoordinate, sensorID=sensorID, bulkConfigurationCopied=bulkConfigurationCopied, dataLogInletPoleVoltage=dataLogInletPoleVoltage, inletActiveEnergy=inletActiveEnergy, outletEnergySupport=outletEnergySupport, lineVoltageCount=lineVoltageCount, complianceRev3=complianceRev3, mac=mac, tempUpperWarning=tempUpperWarning, rebootStarted=rebootStarted, circuitBreakerCurrentUpperCritical=circuitBreakerCurrentUpperCritical, dataLogInletIndex=dataLogInletIndex, ratedPower=ratedPower, dataLogGroup=dataLogGroup, inletPoleLabel=inletPoleLabel, dataLogMaxInletPoleActiveEnergy=dataLogMaxInletPoleActiveEnergy, externalSensorYCoordinate=externalSensorYCoordinate, dataLogCount=dataLogCount, dataLogMaxInletActivePower=dataLogMaxInletActivePower, inletPoleCurrent=inletPoleCurrent, dataLogAvgOutletVoltage=dataLogAvgOutletVoltage, deviceUpdateStarted=deviceUpdateStarted)
mibBuilder.exportSymbols("PDU-MIB", unitOrLineCurrentUpperCritical=unitOrLineCurrentUpperCritical, dataLogCircuitBreakerCurrent=dataLogCircuitBreakerCurrent, rebootCompleted=rebootCompleted, lineCurrentIndex=lineCurrentIndex, compliance=compliance, externalOnOffSensorStateChange=externalOnOffSensorStateChange, fipsModeEnabled=fipsModeEnabled, dataLogExternalSensorTable=dataLogExternalSensorTable, imageVersion=imageVersion, inletPoleActivePower=inletPoleActivePower, dataLogMinOutletCurrent=dataLogMinOutletCurrent, unitActivePower=unitActivePower, primaryNTPServerAddress=primaryNTPServerAddress, currentUnbalanceUpperWarning=currentUnbalanceUpperWarning, sensorIdentificationString=sensorIdentificationString, dataLogMinExternalSensorValue=dataLogMinExternalSensorValue, inletPoleEntry=inletPoleEntry, bulkConfigurationSaved=bulkConfigurationSaved, dataLogAvgInletPoleApparentPower=dataLogAvgInletPoleApparentPower, objectName=objectName, inletCurrentRating=inletCurrentRating, dataLogAvgInletActiveEnergy=dataLogAvgInletActiveEnergy, lastUpgradeErrorDescription=lastUpgradeErrorDescription, inletPoleGroup=inletPoleGroup, inletCurrentUnbalanceHysteresis=inletCurrentUnbalanceHysteresis, groupDeleted=groupDeleted, unitSensorsGroupRev2=unitSensorsGroupRev2, unitCurrentUpperCritical=unitCurrentUpperCritical, dataLogCircuitBreaker=dataLogCircuitBreaker, dataLogExternalSensorState=dataLogExternalSensorState, firmwareVersion=firmwareVersion, inletVoltageUpperWarning=inletVoltageUpperWarning, circuitBreakerState=circuitBreakerState, dataLogInputLineIndex=dataLogInputLineIndex, externalSensorValue=externalSensorValue, PowerFactorPercentage=PowerFactorPercentage, voltageMeasurementError=voltageMeasurementError, dataLogMinOutletVoltage=dataLogMinOutletVoltage, unitReadings=unitReadings, dataLogInputLineCurrent=dataLogInputLineCurrent, unitTempUpperWarning=unitTempUpperWarning, inletApparentPower=inletApparentPower, unitTempHysteresis=unitTempHysteresis, dataLogMinOutletPowerFactor=dataLogMinOutletPowerFactor, groups=groups, primaryNTPServerAddressType=primaryNTPServerAddressType, groupAdded=groupAdded, lineVoltageGroup=lineVoltageGroup, sensorDescr=sensorDescr, dataLogMinInletPoleCurrent=dataLogMinInletPoleCurrent, inlets=inlets, dataLogAvgInletPoleActiveEnergy=dataLogAvgInletPoleActiveEnergy, inletCount=inletCount, dataLogCircuitBreakerEntry=dataLogCircuitBreakerEntry, board=board, MilliVolts=MilliVolts, externalSensorUnits=externalSensorUnits, circuitBreakerLabel=circuitBreakerLabel, outletCurrentHysteresis=outletCurrentHysteresis, dataLogMinInletPoleActiveEnergy=dataLogMinInletPoleActiveEnergy, tempLowerWarning=tempLowerWarning, lineCurrents=lineCurrents, userLogout=userLogout, inletCurrent=inletCurrent, humiditySensorTable=humiditySensorTable, Watts=Watts, inletPoleIndex=inletPoleIndex, inputCurrentRating=inputCurrentRating, unitVoltageLowerCritical=unitVoltageLowerCritical, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, tempSensorEntry=tempSensorEntry, unitVoltage=unitVoltage, inletIndex=inletIndex, dataLogGroupRev2=dataLogGroupRev2, humiditySensorCount=humiditySensorCount, inletPole=inletPole, unitVoltageUpperWarning=unitVoltageUpperWarning, groupModified=groupModified, outletOperationalState=outletOperationalState, dataLogInletPoleEntry=dataLogInletPoleEntry, dataLogInlet=dataLogInlet, EventTypeEnumeration=EventTypeEnumeration, dataLogMaxInletPoleApparentPower=dataLogMaxInletPoleApparentPower, userAuthenticationFailure=userAuthenticationFailure, Hertz=Hertz, humiditySensorIndex=humiditySensorIndex, secondaryNTPServerAddress=secondaryNTPServerAddress, measurementsPerLogEntry=measurementsPerLogEntry, dataLogMinInletApparentPower=dataLogMinInletApparentPower, managingenvironmentalSensor=managingenvironmentalSensor, powerControl=powerControl, userLogin=userLogin, unitOrLineVoltageUpperCritical=unitOrLineVoltageUpperCritical, dataLogOutletWattHours=dataLogOutletWattHours, unit=unit, unitOrLineVoltageLowerCritical=unitOrLineVoltageLowerCritical, dataLogMinActivePower=dataLogMinActivePower, unitVoltageUpperCritical=unitVoltageUpperCritical, lineCurrent=lineCurrent, objectInstance=objectInstance, inletPoleActiveEnergy=inletPoleActiveEnergy, dataLogOutletOnTime=dataLogOutletOnTime, dataLogAvgInletPoleCurrent=dataLogAvgInletPoleCurrent, inletVoltageLowerCritical=inletVoltageLowerCritical, outletCurrentUpperCritical=outletCurrentUpperCritical, inletCurrentUpperWarning=inletCurrentUpperWarning, humidityLowerCritical=humidityLowerCritical, externalHumidityGroup=externalHumidityGroup, externalSensorCount=externalSensorCount, DegreesCelsius=DegreesCelsius, dataLogExternalSensorEntry=dataLogExternalSensorEntry, circuitBreakerTable=circuitBreakerTable, inletPoleTable=inletPoleTable, complianceRev4=complianceRev4, gateway=gateway, dataLogOutletEntry=dataLogOutletEntry, humiditySensorLabel=humiditySensorLabel, dataLogInletPoleIndex=dataLogInletPoleIndex, unitSensorsGroup=unitSensorsGroup, externalSensorTable=externalSensorTable, RelativeHumidity=RelativeHumidity, environmental=environmental, neutralCurrentUpperCritical=neutralCurrentUpperCritical, externalSensorEntry=externalSensorEntry, userDeleted=userDeleted, dataLogExternalSensorIndex=dataLogExternalSensorIndex, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, dataLogMinCircuitBreakerCurrent=dataLogMinCircuitBreakerCurrent, outletSwitching=outletSwitching, externalTemperatureGroup=externalTemperatureGroup, unitTempUpperCritical=unitTempUpperCritical, slaveIpAddress=slaveIpAddress, ipmiOverLANEnabled=ipmiOverLANEnabled, inletPoleMaxCurrent=inletPoleMaxCurrent, dataLogOutletVoltage=dataLogOutletVoltage, dataLogAvgActivePower=dataLogAvgActivePower, outletCurrentLowerCritical=outletCurrentLowerCritical, outletCurrentRating=outletCurrentRating, circuitBreakerCount=circuitBreakerCount, humidityUpperWarning=humidityUpperWarning, lineCurrentTable=lineCurrentTable, tempYCoordinate=tempYCoordinate, unmanagingenvironmentalSensor=unmanagingenvironmentalSensor, circuitBreakerCurrentUpperWarning=circuitBreakerCurrentUpperWarning, tempLowerCritical=tempLowerCritical, environmentalSensorsConnectivityLost=environmentalSensorsConnectivityLost, daylightSavingsTime=daylightSavingsTime, currentUnbalanceHysteresis=currentUnbalanceHysteresis, outletCurrent=outletCurrent, dataLogGroupRev=dataLogGroupRev, dataLogMaxInletActiveEnergy=dataLogMaxInletActiveEnergy, securityViolation=securityViolation, raritan=raritan, dataLogMaxOutletPowerFactor=dataLogMaxOutletPowerFactor, StateOfSensorEnumeration=StateOfSensorEnumeration, inletCurrentUpperCritical=inletCurrentUpperCritical)
