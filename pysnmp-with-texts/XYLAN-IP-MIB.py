#
# PySNMP MIB module XYLAN-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, TimeTicks, Integer32, Counter64, Gauge32, ObjectIdentity, MibIdentifier, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "TimeTicks", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanIpArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanIpArch")
xylanIpFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 13, 1))
xylanIpMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 13, 2))
xylanIpRipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1), )
if mibBuilder.loadTexts: xylanIpRipFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterTable.setDescription('The IP Rip Filter Table contains information about all Rip filters that have been defined.')
xylanIpRipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1), ).setIndexNames((0, "XYLAN-IP-MIB", "xylanIpRipFilterNum"))
if mibBuilder.loadTexts: xylanIpRipFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterEntry.setDescription('Each entry corresponds to one filter.')
xylanIpRipFilterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpRipFilterNum.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterNum.setDescription('The unique number identifying this instance. This number can be used when specifying a filter to delete. This number is used by the implementation to specify the location of this particular filter within the linked-list of all filters; therefore, it will be modified as filters are added/deleted.')
xylanIpRipFilterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterAdminState.setDescription('The current status of this filter, active (1) means the filter is functioning, delete (2) tells SNMP to delete the filter ')
xylanIpRipFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip-output", 1), ("rip-input", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterType.setDescription('The type of filter. The possible types include rip-output (1) or rip-input (2).')
xylanIpRipFilterNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterNet.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterNet.setDescription('The IP Network Address to filter. An IP Address of 0.0.0.0 is used to denote All Networks.')
xylanIpRipFilterNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterNetMask.setDescription('The IP Network Mask to be used.')
xylanIpRipFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterMode.setDescription('The action defined by this filter. block (2) means packets matching this filter will be blocked, and allow (1) means that packets matching this filter will be allowed.')
xylanIpRipFilterGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterGroupId.setDescription('The GroupId can be used to apply this filter to a particular interface. A GroupId of 0 means that the filter is global.')
xylanIpRipFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterVlanId.setDescription('The VlanId for this filter.')
xylanIpRipFilterWanType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-used", 1), ("frame-relay", 2), ("ppp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterWanType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterWanType.setDescription('If the Vlan has Wan Routing enabled, this object can be used to specify whether this interface is a Frame Relay service or a PPP service. This will be used to determine whether the slot/port/vc or PeerId fields are applicable to this entry. A value of 1 implies that this field is not used. (The interface is not a WAN interface or the filter is not being applied to a specific VC or PeerId.) A value of 2 indicates that this is a Frame Relay service in which case the slot/port/vc fields can be used to apply the filter to a specific VC. A value of 3 indicates that this is a PPP service and the Peer ID field may be used.')
xylanIpRipFilterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterSlot.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterSlot.setDescription('If the WanType specifies a Frame Relay service, the slot/port/vc can be used to apply this filter to a particular Virtual Circuit (VC).')
xylanIpRipFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterPort.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterPort.setDescription('If the WanType specifies a Frame Relay service, the slot/port/vc can be used to apply this filter to a particular Virtual Circuit (VC).')
xylanIpRipFilterVc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterVc.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterVc.setDescription('If the WanType specifies a Frame Relay service, the slot/port/vc can be used to apply this filter to a particular Virtual Circuit (VC).')
xylanIpRipFilterPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanIpRipFilterPeerId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpRipFilterPeerId.setDescription('If the WanType specifies a PPP service, the PeerId can be used to apply this filter to a particular Peer.')
xylanIpAssocMacTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1), )
if mibBuilder.loadTexts: xylanIpAssocMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocMacTable.setDescription('A table of IP addresses and their associated MAC addresses learned.')
xylanIpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1), ).setIndexNames((0, "XYLAN-IP-MIB", "xylanIpAssocAddr"))
if mibBuilder.loadTexts: xylanIpAssocEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocEntry.setDescription("The information for one of this entity's IP addresses.")
xylanIpAssocAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocAddr.setDescription("The IP address learned from an ARP message's sender IP address.")
xylanIpAssocMac = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocMac.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocMac.setDescription("The MAC address learned from an ARP message's sender hardware address.")
xylanIpAssocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocSlot.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocSlot.setDescription('The slot number (1-based) where ARP message was received.')
xylanIpAssocIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocIntf.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocIntf.setDescription('The interface number (1-based) where ARP message was received.')
xylanIpAssocDupMac = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocDupMac.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocDupMac.setDescription('If a duplicate IP address is detected, the MAC address associated with this IP address. A value of 0 indicates no duplicate IP address detected.')
xylanIpAssocDupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocDupSlot.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocDupSlot.setDescription('If a duplicate IP address is detected, the slot number (1-based) where this duplicate IP address was learned.')
xylanIpAssocDupIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 13, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanIpAssocDupIntf.setStatus('mandatory')
if mibBuilder.loadTexts: xylanIpAssocDupIntf.setDescription('If a duplicate IP address is detected, the interface number (1-based) where this duplicate IP address was learned.')
mibBuilder.exportSymbols("XYLAN-IP-MIB", xylanIpAssocEntry=xylanIpAssocEntry, xylanIpMiscGroup=xylanIpMiscGroup, xylanIpRipFilterVc=xylanIpRipFilterVc, xylanIpAssocMacTable=xylanIpAssocMacTable, xylanIpFilterGroup=xylanIpFilterGroup, xylanIpAssocIntf=xylanIpAssocIntf, xylanIpRipFilterType=xylanIpRipFilterType, xylanIpRipFilterMode=xylanIpRipFilterMode, xylanIpRipFilterNum=xylanIpRipFilterNum, xylanIpRipFilterPeerId=xylanIpRipFilterPeerId, xylanIpRipFilterNetMask=xylanIpRipFilterNetMask, xylanIpAssocMac=xylanIpAssocMac, xylanIpRipFilterNet=xylanIpRipFilterNet, xylanIpRipFilterPort=xylanIpRipFilterPort, xylanIpAssocSlot=xylanIpAssocSlot, xylanIpRipFilterWanType=xylanIpRipFilterWanType, xylanIpRipFilterTable=xylanIpRipFilterTable, xylanIpRipFilterVlanId=xylanIpRipFilterVlanId, xylanIpAssocAddr=xylanIpAssocAddr, xylanIpAssocDupSlot=xylanIpAssocDupSlot, xylanIpRipFilterAdminState=xylanIpRipFilterAdminState, xylanIpAssocDupIntf=xylanIpAssocDupIntf, xylanIpRipFilterGroupId=xylanIpRipFilterGroupId, xylanIpRipFilterSlot=xylanIpRipFilterSlot, xylanIpRipFilterEntry=xylanIpRipFilterEntry, xylanIpAssocDupMac=xylanIpAssocDupMac)
