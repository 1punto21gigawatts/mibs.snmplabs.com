#
# PySNMP MIB module JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
jnxMobileGatewaySgw, = mibBuilder.importSymbols("JUNIPER-MBG-SMI", "jnxMobileGatewaySgw")
jnxMbgGwName, jnxMbgGwIndex = mibBuilder.importSymbols("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName", "jnxMbgGwIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, TimeTicks, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, IpAddress, Unsigned32, MibIdentifier, Integer32, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "TimeTicks", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "Integer32", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxMbgSgwSMMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4))
jnxMbgSgwSMMib.setRevisions(('2011-10-03 12:00', '2012-03-22 12:00', '2012-10-12 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxMbgSgwSMMib.setRevisionsDescriptions(('Initial version', 'Updated jnxMbgSgwSMStatsTable. Deprecated unsupported objects. Added objects to jnxMbgSgwSMStatsTable', 'Added new trap jnxMbgSgwGatewayMMStateChange . Added table jnxMbgSgwSMClRateStatsTable ',))
if mibBuilder.loadTexts: jnxMbgSgwSMMib.setLastUpdated('201110031200Z')
if mibBuilder.loadTexts: jnxMbgSgwSMMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxMbgSgwSMMib.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxMbgSgwSMMib.setDescription('This module defines objects pertaining to Serving Gateway Subscriber Management for Mobile Edge.')
jnxMbgSgwSMNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0))
jnxMbgSgwSMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1))
jnxMbgSgwSMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1), )
if mibBuilder.loadTexts: jnxMbgSgwSMStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMStatsTable.setDescription('The table lists gateway level statistics for Serving Gateway. Key is Gateway Id.')
jnxMbgSgwSMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgSgwSMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMStatsEntry.setDescription('An entry representing Serving Gateway Statistics.')
jnxMbgSgwSessnEstAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSessnEstAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSessnEstAttmpts.setDescription('Total Session establishment attempts.')
jnxMbgSgwSuccSessnEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccSessnEst.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccSessnEst.setDescription('Total Sessions established successfully.')
jnxMbgSgwPeerInitDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwPeerInitDeactv.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgSgwPeerInitDeactv.setDescription('Total MS/peer initiated session deactivation attempts. Deprecated : Reported as zero')
jnxMbgSgwPeerInitSuccDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwPeerInitSuccDeactv.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgSgwPeerInitSuccDeactv.setDescription('Total MS/peer initiated successful session deactivations. Deprecated : Reported as zero')
jnxMbgSgwGwInitDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGwInitDeactv.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgSgwGwInitDeactv.setDescription('Total Gateway initiated session deactivation attempts. Deprecated : Reported as zero')
jnxMbgSgwGwInitSuccDeactv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGwInitSuccDeactv.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgSgwGwInitSuccDeactv.setDescription('Total Gateway initiated successful session deactivations. Deprecated : Reported as zero')
jnxMbgSgwGtpStatsGnS5S8InpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8InpPkt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8InpPkt.setDescription('Total GTP statistics (Gn/S5/S8) Input packets.')
jnxMbgSgwGtpStatsGnS5S8InpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8InpByt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8InpByt.setDescription('Total GTP statistics (Gn/S5/S8) Input bytes.')
jnxMbgSgwGtpStatsGnS5S8OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8OutPkt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8OutPkt.setDescription('Total GTP statistics (Gn/S5/S8) Output packets.')
jnxMbgSgwGtpStatsGnS5S8OutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8OutByt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsGnS5S8OutByt.setDescription('Total GTP statistics (Gn/S5/S8) Output bytes.')
jnxMbgSgwGtpStatsS1uInpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uInpPkt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uInpPkt.setDescription('Total GTP statistics S1-U Input packets.')
jnxMbgSgwGtpStatsS1uInpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uInpByt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uInpByt.setDescription('Total GTP statistics S1-U Input bytes.')
jnxMbgSgwGtpStatsS1uOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uOutPkt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uOutPkt.setDescription('Total GTP statistics S1-U Output packets.')
jnxMbgSgwGtpStatsS1uOutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uOutByt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGtpStatsS1uOutByt.setDescription('Total GTP statistics S1-U Output bytes.')
jnxMbgSgwDedBrCrtAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwDedBrCrtAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwDedBrCrtAttmpts.setDescription('Total Dedicated bearer creation attempts.')
jnxMbgSgwSuccDedBrCrt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccDedBrCrt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccDedBrCrt.setDescription('Total Dedicated bearer creations successful.')
jnxMbgSgwSessnDeActvAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSessnDeActvAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSessnDeActvAttmpts.setDescription('Total Session deactivation attempts.')
jnxMbgSgwSuccSessnDeActv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccSessnDeActv.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccSessnDeActv.setDescription('Total Sessions deactivations successful.')
jnxMbgSgwDedBrDeActvAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwDedBrDeActvAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwDedBrDeActvAttmpts.setDescription('Total Dedicated bearer deactivation attempts.')
jnxMbgSgwSuccDedBrDeActv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccDedBrDeActv.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccDedBrDeActv.setDescription('Total Dedicated bearers deactivation successful.')
jnxMbgSgwIntrRatHoAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwIntrRatHoAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwIntrRatHoAttmpts.setDescription('Total Inter RAT Handover attempts.')
jnxMbgSgwSuccIntrRatHo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccIntrRatHo.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccIntrRatHo.setDescription('Total Inter RAT Handover successful.')
jnxMbgSgwX2HoAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwX2HoAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwX2HoAttmpts.setDescription('Total X2 based handover attempts.')
jnxMbgSgwSuccX2Ho = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccX2Ho.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccX2Ho.setDescription('Total X2 based handovers successful.')
jnxMbgSgwS1HoAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwS1HoAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwS1HoAttmpts.setDescription('Total S1 based handover attempts.')
jnxMbgSgwSuccS1Ho = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccS1Ho.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccS1Ho.setDescription('Total S1 based handovers successful.')
jnxMbgSgwIdlMdTauRauAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwIdlMdTauRauAttmpts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwIdlMdTauRauAttmpts.setDescription('Total Idle mode TAU/RAU attempts.')
jnxMbgSgwSuccIdlMdTauRau = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccIdlMdTauRau.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccIdlMdTauRau.setDescription('Total Idle mode TAU/RAU successful.')
jnxMbgSgwServReqAttmempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwServReqAttmempts.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwServReqAttmempts.setDescription('Total Service request attempts.')
jnxMbgSgwSuccServReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuccServReq.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuccServReq.setDescription('Total Service requests successful.')
jnxMbgSgwSMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2), )
if mibBuilder.loadTexts: jnxMbgSgwSMStatusTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMStatusTable.setDescription('The table listing gateway level status for Serving Gateway. Key is Gateway Name.')
jnxMbgSgwSMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgSgwSMStatusEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMStatusEntry.setDescription('An entry representing Serving Gateway Status.')
jnxMbgSgwActvSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwActvSubscribers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwActvSubscribers.setDescription('Total active subscribers.')
jnxMbgSgwActvSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwActvSessions.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwActvSessions.setDescription('Total active sessions.')
jnxMbgSgwActvBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwActvBearers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwActvBearers.setDescription('Total active bearers.')
jnxMbgSgwIdleSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwIdleSubscribers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwIdleSubscribers.setDescription('Total idle subscribers.')
jnxMbgSgwIdleSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwIdleSessions.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwIdleSessions.setDescription('Total idle sessions.')
jnxMbgSgwIdleBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwIdleBearers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwIdleBearers.setDescription('Total idle bearers.')
jnxMbgSgwSuspSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuspSubscribers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuspSubscribers.setDescription('Total suspended subscribers.')
jnxMbgSgwSuspSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuspSessions.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuspSessions.setDescription('Total suspended sessions.')
jnxMbgSgwSuspBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwSuspBearers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSuspBearers.setDescription('Total suspended bearers.')
jnxMbgSgwCPUUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwCPUUtil.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwCPUUtil.setDescription('Current CPU Utilization.')
jnxMbgSgwMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwMemoryUtil.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwMemoryUtil.setDescription('Current Memory Utilization.')
jnxMbgSgwSMClRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4), )
if mibBuilder.loadTexts: jnxMbgSgwSMClRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMClRateStatsTable.setDescription('The table lists the call rate statistics for the most recent configured interval for Serving Gateway. Gateway ID is used as a key.')
jnxMbgSgwSMClRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgSgwSMClRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMClRateStatsEntry.setDescription('An entry representing a Mobile PDN Gateway Call Rate Statistics.')
jnxMbgSgwClRateIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateIntervalMin.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateIntervalMin.setDescription('Aggregation interval for call rate statisitcs in minutes.')
jnxMbgSgwClRateSuccSessnEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateSuccSessnEst.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateSuccSessnEst.setDescription('Total sessions successfully established.')
jnxMbgSgwClRateSuccSessnDel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateSuccSessnDel.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateSuccSessnDel.setDescription('Total sessions successfully deleted.')
jnxMbgSgwClRateStatsGnInpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnInpPkt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnInpPkt.setDescription('Total GTP statistics Gn Input packets.')
jnxMbgSgwClRateStatsGnOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnOutPkt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnOutPkt.setDescription('Total GTP statistics Gn Output packets.')
jnxMbgSgwClRateStatsGnInpByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnInpByt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnInpByt.setDescription('Total GTP statistics Gn Input bytes.')
jnxMbgSgwClRateStatsGnOutByt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnOutByt.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwClRateStatsGnOutByt.setDescription('Total GTP statistics Gn Output bytes.')
jnxMbgSgwSMNotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3))
jnxMbgGwSpicName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgGwSpicName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgGwSpicName.setDescription('This identifies the session-pic')
jnxMbgSgwTrapGwIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgSgwTrapGwIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwTrapGwIndex.setDescription('Gateway Index.')
jnxMbgSgwTrapGwName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgSgwTrapGwName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwTrapGwName.setDescription('Gateway Name.')
jnxMbgSgwSMInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgSgwSMInterfaceName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwSMInterfaceName.setDescription('A string that uniquely identifies SGW interface')
jnxMbgSgwPrevMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("mmdefault", 0), ("mmnormalphase", 1), ("mminphase", 2), ("mmactivephase", 3), ("mmoutphase", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgSgwPrevMMState.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwPrevMMState.setDescription('A string that indicates the maintenance-mode previous state .')
jnxMbgSgwNewMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("mmdefault", 0), ("mmnormalphase", 1), ("mminphase", 2), ("mmactivephase", 3), ("mmoutphase", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgSgwNewMMState.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwNewMMState.setDescription('A string that indicates the maintenance-mode new state .')
jnxMbgSgwCpuThrStatusHi = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 1)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwCpuThrStatusHi.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwCpuThrStatusHi.setDescription('This notification signifies that the configured high threshold for CPU Utilization has been exceeded.')
jnxMbgSgwCpuThrStatusLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 2)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwCpuThrStatusLow.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwCpuThrStatusLow.setDescription('This notification signifies that the configured low threshold for CPU Utilization has been reached.')
jnxMbgSgwCpuThrStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 3)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwCpuThrStatusClear.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwCpuThrStatusClear.setDescription('This notification signifies that normal thresholds for CPU Utilization has been reached.')
jnxMbgSgwMemThrStatusHi = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 4)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwMemThrStatusHi.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwMemThrStatusHi.setDescription('This notification signifies that the configured high threshold for Memory Utilization has been exceeded.')
jnxMbgSgwMemThrStatusLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 5)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwMemThrStatusLow.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwMemThrStatusLow.setDescription('This notification signifies that the configured low threshold for Memory Utilization has been reached.')
jnxMbgSgwMemThrStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 6)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwMemThrStatusClear.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwMemThrStatusClear.setDescription('This notification signifies that the normal threshold for Memory Utilization has been reached.')
jnxMbgSgwPFEMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 7)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwPrevMMState"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwNewMMState"))
if mibBuilder.loadTexts: jnxMbgSgwPFEMMStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwPFEMMStateChange.setDescription('This notification indicates that the gateway name, PFE interfce name, interface previous state and new state information during the in the PFE interface maintenance mode.')
jnxMbgSgwMSMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 8)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwPrevMMState"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwNewMMState"))
if mibBuilder.loadTexts: jnxMbgSgwMSMMStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwMSMMStateChange.setDescription('This notification indicates that the gateway name, MS interfce name, interface previous state and new state information during the in the MS interface maintenance mode.')
jnxMbgSgwAPFEMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 9)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwPrevMMState"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwNewMMState"))
if mibBuilder.loadTexts: jnxMbgSgwAPFEMMStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwAPFEMMStateChange.setDescription('This notification indicates that the gateway name, APFE interfce name, interface previous state and new state information during the in the APFE interface maintenance mode.')
jnxMbgSgwAMSMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 10)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwSMInterfaceName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwPrevMMState"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwNewMMState"))
if mibBuilder.loadTexts: jnxMbgSgwAMSMMStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwAMSMMStateChange.setDescription('This notification indicates that the gateway name, AMS interfce name, interface previous state and new state information during the in the AMS interface maintenance mode.')
jnxMbgSgwQosBearerThrStatusHi = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 11)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwQosBearerThrStatusHi.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwQosBearerThrStatusHi.setDescription('This notification signifies that the configured high threshold for bearers at gateway level has been exceeded.')
jnxMbgSgwQosBearerThrStatusLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 12)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwQosBearerThrStatusLow.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwQosBearerThrStatusLow.setDescription('This notification signifies that the configured low threshold for bearers at gateway level has been reached.')
jnxMbgSgwQosBearerThrStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 13)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwIndex"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"))
if mibBuilder.loadTexts: jnxMbgSgwQosBearerThrStatusClear.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwQosBearerThrStatusClear.setDescription('This notification signifies that the normal threshold for bearers at gateway level has been reached.')
jnxMbgSgwGatewayMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 2, 4, 0, 14)).setObjects(("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwTrapGwName"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwPrevMMState"), ("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", "jnxMbgSgwNewMMState"))
if mibBuilder.loadTexts: jnxMbgSgwGatewayMMStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxMbgSgwGatewayMMStateChange.setDescription('This notification indicates that the Gateway identified by jnxMbgSgwGatewayName undergoes a change in the maintenance mode state.')
mibBuilder.exportSymbols("JUNIPER-MOBILE-GATEWAY-SGW-SM-MIB", jnxMbgSgwAPFEMMStateChange=jnxMbgSgwAPFEMMStateChange, jnxMbgSgwQosBearerThrStatusLow=jnxMbgSgwQosBearerThrStatusLow, jnxMbgSgwPrevMMState=jnxMbgSgwPrevMMState, jnxMbgSgwSMObjects=jnxMbgSgwSMObjects, jnxMbgSgwGtpStatsGnS5S8OutPkt=jnxMbgSgwGtpStatsGnS5S8OutPkt, jnxMbgSgwCpuThrStatusClear=jnxMbgSgwCpuThrStatusClear, jnxMbgSgwSMStatsTable=jnxMbgSgwSMStatsTable, jnxMbgSgwSuccServReq=jnxMbgSgwSuccServReq, jnxMbgSgwSMStatusEntry=jnxMbgSgwSMStatusEntry, jnxMbgSgwGwInitDeactv=jnxMbgSgwGwInitDeactv, jnxMbgSgwMemThrStatusClear=jnxMbgSgwMemThrStatusClear, jnxMbgSgwClRateStatsGnOutByt=jnxMbgSgwClRateStatsGnOutByt, jnxMbgSgwSuccDedBrCrt=jnxMbgSgwSuccDedBrCrt, jnxMbgSgwIdleSubscribers=jnxMbgSgwIdleSubscribers, jnxMbgSgwMemThrStatusHi=jnxMbgSgwMemThrStatusHi, jnxMbgSgwSMMib=jnxMbgSgwSMMib, jnxMbgSgwSuspSessions=jnxMbgSgwSuspSessions, jnxMbgSgwQosBearerThrStatusHi=jnxMbgSgwQosBearerThrStatusHi, jnxMbgSgwCpuThrStatusLow=jnxMbgSgwCpuThrStatusLow, jnxMbgSgwAMSMMStateChange=jnxMbgSgwAMSMMStateChange, jnxMbgSgwSuccIntrRatHo=jnxMbgSgwSuccIntrRatHo, jnxMbgSgwSuccSessnDeActv=jnxMbgSgwSuccSessnDeActv, jnxMbgSgwPeerInitDeactv=jnxMbgSgwPeerInitDeactv, jnxMbgSgwActvSessions=jnxMbgSgwActvSessions, jnxMbgSgwClRateStatsGnOutPkt=jnxMbgSgwClRateStatsGnOutPkt, PYSNMP_MODULE_ID=jnxMbgSgwSMMib, jnxMbgSgwGtpStatsS1uInpPkt=jnxMbgSgwGtpStatsS1uInpPkt, jnxMbgSgwPFEMMStateChange=jnxMbgSgwPFEMMStateChange, jnxMbgSgwDedBrDeActvAttmpts=jnxMbgSgwDedBrDeActvAttmpts, jnxMbgSgwGtpStatsGnS5S8InpPkt=jnxMbgSgwGtpStatsGnS5S8InpPkt, jnxMbgSgwGtpStatsS1uInpByt=jnxMbgSgwGtpStatsS1uInpByt, jnxMbgSgwSuccIdlMdTauRau=jnxMbgSgwSuccIdlMdTauRau, jnxMbgSgwClRateSuccSessnEst=jnxMbgSgwClRateSuccSessnEst, jnxMbgGwSpicName=jnxMbgGwSpicName, jnxMbgSgwX2HoAttmpts=jnxMbgSgwX2HoAttmpts, jnxMbgSgwMSMMStateChange=jnxMbgSgwMSMMStateChange, jnxMbgSgwClRateStatsGnInpByt=jnxMbgSgwClRateStatsGnInpByt, jnxMbgSgwSessnDeActvAttmpts=jnxMbgSgwSessnDeActvAttmpts, jnxMbgSgwSessnEstAttmpts=jnxMbgSgwSessnEstAttmpts, jnxMbgSgwSuccSessnEst=jnxMbgSgwSuccSessnEst, jnxMbgSgwClRateIntervalMin=jnxMbgSgwClRateIntervalMin, jnxMbgSgwActvBearers=jnxMbgSgwActvBearers, jnxMbgSgwSMClRateStatsTable=jnxMbgSgwSMClRateStatsTable, jnxMbgSgwMemoryUtil=jnxMbgSgwMemoryUtil, jnxMbgSgwTrapGwIndex=jnxMbgSgwTrapGwIndex, jnxMbgSgwCPUUtil=jnxMbgSgwCPUUtil, jnxMbgSgwSuccX2Ho=jnxMbgSgwSuccX2Ho, jnxMbgSgwClRateSuccSessnDel=jnxMbgSgwClRateSuccSessnDel, jnxMbgSgwSMStatusTable=jnxMbgSgwSMStatusTable, jnxMbgSgwActvSubscribers=jnxMbgSgwActvSubscribers, jnxMbgSgwCpuThrStatusHi=jnxMbgSgwCpuThrStatusHi, jnxMbgSgwNewMMState=jnxMbgSgwNewMMState, jnxMbgSgwPeerInitSuccDeactv=jnxMbgSgwPeerInitSuccDeactv, jnxMbgSgwSuspBearers=jnxMbgSgwSuspBearers, jnxMbgSgwIdlMdTauRauAttmpts=jnxMbgSgwIdlMdTauRauAttmpts, jnxMbgSgwMemThrStatusLow=jnxMbgSgwMemThrStatusLow, jnxMbgSgwSMNotificationVars=jnxMbgSgwSMNotificationVars, jnxMbgSgwS1HoAttmpts=jnxMbgSgwS1HoAttmpts, jnxMbgSgwServReqAttmempts=jnxMbgSgwServReqAttmempts, jnxMbgSgwGtpStatsS1uOutPkt=jnxMbgSgwGtpStatsS1uOutPkt, jnxMbgSgwDedBrCrtAttmpts=jnxMbgSgwDedBrCrtAttmpts, jnxMbgSgwSMInterfaceName=jnxMbgSgwSMInterfaceName, jnxMbgSgwIdleBearers=jnxMbgSgwIdleBearers, jnxMbgSgwQosBearerThrStatusClear=jnxMbgSgwQosBearerThrStatusClear, jnxMbgSgwGwInitSuccDeactv=jnxMbgSgwGwInitSuccDeactv, jnxMbgSgwSMStatsEntry=jnxMbgSgwSMStatsEntry, jnxMbgSgwGtpStatsS1uOutByt=jnxMbgSgwGtpStatsS1uOutByt, jnxMbgSgwClRateStatsGnInpPkt=jnxMbgSgwClRateStatsGnInpPkt, jnxMbgSgwSMNotifications=jnxMbgSgwSMNotifications, jnxMbgSgwSuccS1Ho=jnxMbgSgwSuccS1Ho, jnxMbgSgwSMClRateStatsEntry=jnxMbgSgwSMClRateStatsEntry, jnxMbgSgwTrapGwName=jnxMbgSgwTrapGwName, jnxMbgSgwIntrRatHoAttmpts=jnxMbgSgwIntrRatHoAttmpts, jnxMbgSgwIdleSessions=jnxMbgSgwIdleSessions, jnxMbgSgwGtpStatsGnS5S8OutByt=jnxMbgSgwGtpStatsGnS5S8OutByt, jnxMbgSgwSuspSubscribers=jnxMbgSgwSuspSubscribers, jnxMbgSgwGtpStatsGnS5S8InpByt=jnxMbgSgwGtpStatsGnS5S8InpByt, jnxMbgSgwSuccDedBrDeActv=jnxMbgSgwSuccDedBrDeActv, jnxMbgSgwGatewayMMStateChange=jnxMbgSgwGatewayMMStateChange)
