#
# PySNMP MIB module COLUBRIS-WDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COLUBRIS-WDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, ObjectIdentity, iso, Integer32, TimeTicks, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, MibIdentifier, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "iso", "Integer32", "TimeTicks", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "MibIdentifier", "NotificationType", "Unsigned32")
TextualConvention, MacAddress, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "TruthValue")
colubrisWdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 33))
if mibBuilder.loadTexts: colubrisWdsMIB.setLastUpdated('200801040000Z')
if mibBuilder.loadTexts: colubrisWdsMIB.setOrganization('Colubris Networks, Inc.')
if mibBuilder.loadTexts: colubrisWdsMIB.setContactInfo('Colubris Networks Postal: 200 West Street Ste 300 Waltham, Massachusetts 02451-1121 UNITED STATES Phone: +1 781 684 0001 Fax: +1 781 684 0009 E-mail: cn-snmp@colubris.com')
if mibBuilder.loadTexts: colubrisWdsMIB.setDescription('Colubris WDS MIB.')
colubrisWdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1))
coWDSInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 1))
coWDSRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 2))
coWDSGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3))
coWDSLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4))
coWDSNetworkScanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5))
coWDSNumberOfGroup = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSNumberOfGroup.setStatus('current')
if mibBuilder.loadTexts: coWDSNumberOfGroup.setDescription('Number of local mesh profiles supported by the AP.')
coWDSDynamicModeImplemented = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSDynamicModeImplemented.setStatus('current')
if mibBuilder.loadTexts: coWDSDynamicModeImplemented.setDescription('Indicates if dynamic local mesh mode is available in the AP.')
coWDSRadioTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 2, 1), )
if mibBuilder.loadTexts: coWDSRadioTable.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioTable.setDescription('Conceptual table for the ACK distance parameter.')
coWDSRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 2, 1, 1), ).setIndexNames((0, "COLUBRIS-WDS-MIB", "coWDSRadioIndex"))
if mibBuilder.loadTexts: coWDSRadioEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioEntry.setDescription('An entry (conceptual row) in the ACK distance table. coWDSRadioIndex - Number of the radio on which the ACK distance is applied.')
coWDSRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coWDSRadioIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioIndex.setDescription('Radio number.')
coWDSRadioAckDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 2, 1, 1, 2), Unsigned32()).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSRadioAckDistance.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioAckDistance.setDescription('Maximum distance between the AP and its remote peers.')
coWDSRadioQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("vlan", 2), ("veryHigh", 3), ("high", 4), ("normal", 5), ("low", 6), ("diffSrv", 7), ("tos", 8), ("ipQos", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSRadioQoS.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioQoS.setDescription('QoS priority mechanism used to map the traffic to one of the four WMM traffic queues.')
coWDSGroupTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1), )
if mibBuilder.loadTexts: coWDSGroupTable.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupTable.setDescription('Conceptual table for the local mesh profiles. This table contains configuration information for each profile.')
coWDSGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1), ).setIndexNames((0, "COLUBRIS-WDS-MIB", "coWDSGroupIndex"))
if mibBuilder.loadTexts: coWDSGroupEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupEntry.setDescription('An Entry (conceptual row) in the local mesh table. coWDSGroupIndex - Uniquely identify a WDS group inside the WDS group table.')
coWDSGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: coWDSGroupIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupIndex.setDescription('The auxiliary variable used to identify instances of local mesh profiles.')
coWDSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupName.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupName.setDescription('Friendly name of the local mesh profile.')
coWDSGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupState.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupState.setDescription('Indicates if the local mesh profile is active on the radios.')
coWDSGroupSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupSecurity.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupSecurity.setDescription('Indicates the encryption used by the WDS group.')
coWDSGroupAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupAddressing.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupAddressing.setDescription('Indicates if the local mesh profile is static or dynamic.')
coWDSGroupStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupStaticMacAddress.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupStaticMacAddress.setDescription('For static local mesh profiles, this object indicates the MAC address of the remote AP.')
coWDSGroupDynamicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupDynamicMode.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupDynamicMode.setDescription('Indicates the mode of the dynamic local mesh profile.')
coWDSGroupDynamicGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupDynamicGroupId.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupDynamicGroupId.setDescription('Indicates the profile indentifier for the dynamic local mesh profile.')
coWDSLinkTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1), )
if mibBuilder.loadTexts: coWDSLinkTable.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkTable.setDescription('Conceptual table for the local mesh profiles. This table contains status information for up to 54 local mesh links.')
coWDSLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1), ).setIndexNames((0, "COLUBRIS-WDS-MIB", "coWDSGroupIndex"), (0, "COLUBRIS-WDS-MIB", "coWDSLinkIndex"))
if mibBuilder.loadTexts: coWDSLinkEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkEntry.setDescription('An Entry (conceptual row) in the local mesh link table. coWDSGroupIndex - Uniquely identify a local mesh profile inside the local mesh profile table. coWDSLinkIndex - Uniquely identify a local mesh link inside a local mesh profile.')
coWDSLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: coWDSLinkIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkIndex.setDescription('The auxiliary variable used to identify instances of local mesh links.')
coWDSLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("acquiring", 2), ("inactive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkState.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkState.setDescription('Specifies the state of the local mesh link.')
coWDSLinkRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRadio.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkRadio.setDescription('Radio number where the local mesh peer was detected.')
coWDSLinkPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkPeerMacAddress.setDescription('MAC address of the local mesh peer.')
coWDSLinkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkMaster.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkMaster.setDescription('Indicates if this link is a link to a master node, which provides access to the root network for the mesh.')
coWDSLinkAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkAuthorized.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkAuthorized.setDescription('Encryption, if any, can proceed.')
coWDSLinkEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkEncryption.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkEncryption.setDescription('Indicates the encryption used by the local mesh link.')
coWDSLinkIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkIdleTime.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkIdleTime.setDescription('Inactivity time.')
coWDSLinkSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkSNR.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkSNR.setDescription('Signal noise ratio of the local mesh peer.')
coWDSLinkTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 10), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkTxRate.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkTxRate.setDescription('Current transmit rate of the local mesh peer.')
coWDSLinkRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 11), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRxRate.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkRxRate.setDescription('Current receive rate of the local mesh peer.')
coWDSLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkIfIndex.setDescription('ifIndex of the associated interface in the ifTable.')
coWDSLinkHT = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkHT.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkHT.setDescription('Indicates if the link is using high throughput data rates.')
coWDSLinkTxMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkTxMCS.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkTxMCS.setDescription('Current transmit MCS of the HT local mesh peer.')
coWDSLinkRxMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRxMCS.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkRxMCS.setDescription('Current receive MCS of the HT local mesh peer.')
coWDSLinkSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 16), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkSignal.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkSignal.setDescription('Strength of the wireless signal.')
coWDSLinkNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 4, 1, 1, 17), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkNoise.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkNoise.setDescription('Level of local background noise.')
coWDSNetworkScanTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1), )
if mibBuilder.loadTexts: coWDSNetworkScanTable.setStatus('current')
if mibBuilder.loadTexts: coWDSNetworkScanTable.setDescription('Conceptual table for local mesh network scans.')
coWDSNetworkScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1), ).setIndexNames((0, "COLUBRIS-WDS-MIB", "coWDSScanRadioIndex"), (0, "COLUBRIS-WDS-MIB", "coWDSScanPeerIndex"))
if mibBuilder.loadTexts: coWDSNetworkScanEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSNetworkScanEntry.setDescription('An Entry (conceptual row) in the WDS Network Scan Table. coWDSScanRadioIndex - Radio number where the local mesh peer was detected. coWDSScanPeerIndex - Uniquely identify a local mesh peer on a radio inside the local mesh network scan table.')
coWDSScanRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coWDSScanRadioIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSScanRadioIndex.setDescription('Radio number on which the local mesh peer was detected.')
coWDSScanPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: coWDSScanPeerIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSScanPeerIndex.setDescription('Uniquely identify a local mesh peer on a radio.')
coWDSScanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanGroupId.setStatus('current')
if mibBuilder.loadTexts: coWDSScanGroupId.setDescription('Mesh ID used by the local mesh peer.')
coWDSScanPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: coWDSScanPeerMacAddress.setDescription('MAC address of the local mesh peer.')
coWDSScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanChannel.setStatus('current')
if mibBuilder.loadTexts: coWDSScanChannel.setDescription('Channel on which the local mesh peer is transmitting.')
coWDSScanSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanSNR.setStatus('current')
if mibBuilder.loadTexts: coWDSScanSNR.setDescription('Signal noise ratio of the local mesh peer.')
coWDSScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanMode.setStatus('current')
if mibBuilder.loadTexts: coWDSScanMode.setDescription('Current mode of the local mesh peer.')
coWDSScanAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 33, 1, 5, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanAvailable.setStatus('current')
if mibBuilder.loadTexts: coWDSScanAvailable.setDescription('Peer is accepting connections.')
colubrisWdsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2))
colubrisWdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 1))
colubrisWdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 2))
colubrisWdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 1, 1)).setObjects(("COLUBRIS-WDS-MIB", "colubrisWDSInfoMIBGroup"), ("COLUBRIS-WDS-MIB", "colubrisWDSRadioMIBGroup"), ("COLUBRIS-WDS-MIB", "colubrisWDSGroupMIBGroup"), ("COLUBRIS-WDS-MIB", "colubrisWDSLinkMIBGroup"), ("COLUBRIS-WDS-MIB", "colubrisWDSScanMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisWdsMIBCompliance = colubrisWdsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: colubrisWdsMIBCompliance.setDescription('The compliance statement for the WDS MIB.')
colubrisWDSInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 2, 1)).setObjects(("COLUBRIS-WDS-MIB", "coWDSNumberOfGroup"), ("COLUBRIS-WDS-MIB", "coWDSDynamicModeImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisWDSInfoMIBGroup = colubrisWDSInfoMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisWDSInfoMIBGroup.setDescription('A collection of scalar objects for WDS.')
colubrisWDSRadioMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 2, 2)).setObjects(("COLUBRIS-WDS-MIB", "coWDSRadioAckDistance"), ("COLUBRIS-WDS-MIB", "coWDSRadioQoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisWDSRadioMIBGroup = colubrisWDSRadioMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisWDSRadioMIBGroup.setDescription('A collection of objects for the local mesh radios.')
colubrisWDSGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 2, 3)).setObjects(("COLUBRIS-WDS-MIB", "coWDSGroupName"), ("COLUBRIS-WDS-MIB", "coWDSGroupState"), ("COLUBRIS-WDS-MIB", "coWDSGroupSecurity"), ("COLUBRIS-WDS-MIB", "coWDSGroupAddressing"), ("COLUBRIS-WDS-MIB", "coWDSGroupStaticMacAddress"), ("COLUBRIS-WDS-MIB", "coWDSGroupDynamicMode"), ("COLUBRIS-WDS-MIB", "coWDSGroupDynamicGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisWDSGroupMIBGroup = colubrisWDSGroupMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisWDSGroupMIBGroup.setDescription('A collection of objects for the local mesh profiles.')
colubrisWDSLinkMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 2, 4)).setObjects(("COLUBRIS-WDS-MIB", "coWDSLinkState"), ("COLUBRIS-WDS-MIB", "coWDSLinkRadio"), ("COLUBRIS-WDS-MIB", "coWDSLinkPeerMacAddress"), ("COLUBRIS-WDS-MIB", "coWDSLinkMaster"), ("COLUBRIS-WDS-MIB", "coWDSLinkAuthorized"), ("COLUBRIS-WDS-MIB", "coWDSLinkEncryption"), ("COLUBRIS-WDS-MIB", "coWDSLinkIdleTime"), ("COLUBRIS-WDS-MIB", "coWDSLinkSNR"), ("COLUBRIS-WDS-MIB", "coWDSLinkTxRate"), ("COLUBRIS-WDS-MIB", "coWDSLinkRxRate"), ("COLUBRIS-WDS-MIB", "coWDSLinkIfIndex"), ("COLUBRIS-WDS-MIB", "coWDSLinkHT"), ("COLUBRIS-WDS-MIB", "coWDSLinkTxMCS"), ("COLUBRIS-WDS-MIB", "coWDSLinkRxMCS"), ("COLUBRIS-WDS-MIB", "coWDSLinkSignal"), ("COLUBRIS-WDS-MIB", "coWDSLinkNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisWDSLinkMIBGroup = colubrisWDSLinkMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisWDSLinkMIBGroup.setDescription('A collection of objects for the local mesh links.')
colubrisWDSScanMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 33, 2, 2, 5)).setObjects(("COLUBRIS-WDS-MIB", "coWDSScanGroupId"), ("COLUBRIS-WDS-MIB", "coWDSScanPeerMacAddress"), ("COLUBRIS-WDS-MIB", "coWDSScanChannel"), ("COLUBRIS-WDS-MIB", "coWDSScanSNR"), ("COLUBRIS-WDS-MIB", "coWDSScanMode"), ("COLUBRIS-WDS-MIB", "coWDSScanAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisWDSScanMIBGroup = colubrisWDSScanMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisWDSScanMIBGroup.setDescription('A collection of objects for the local mesh network scan.')
mibBuilder.exportSymbols("COLUBRIS-WDS-MIB", coWDSLinkEntry=coWDSLinkEntry, coWDSGroupAddressing=coWDSGroupAddressing, coWDSLinkNoise=coWDSLinkNoise, colubrisWDSScanMIBGroup=colubrisWDSScanMIBGroup, coWDSScanAvailable=coWDSScanAvailable, coWDSLinkTable=coWDSLinkTable, coWDSLinkRxRate=coWDSLinkRxRate, coWDSRadioAckDistance=coWDSRadioAckDistance, coWDSGroupGroup=coWDSGroupGroup, coWDSLinkIfIndex=coWDSLinkIfIndex, coWDSGroupTable=coWDSGroupTable, coWDSLinkGroup=coWDSLinkGroup, coWDSGroupState=coWDSGroupState, coWDSGroupEntry=coWDSGroupEntry, coWDSGroupStaticMacAddress=coWDSGroupStaticMacAddress, coWDSLinkEncryption=coWDSLinkEncryption, coWDSScanChannel=coWDSScanChannel, coWDSGroupName=coWDSGroupName, coWDSScanSNR=coWDSScanSNR, colubrisWdsMIBConformance=colubrisWdsMIBConformance, coWDSGroupSecurity=coWDSGroupSecurity, coWDSRadioGroup=coWDSRadioGroup, colubrisWdsMIBGroups=colubrisWdsMIBGroups, coWDSRadioIndex=coWDSRadioIndex, coWDSRadioTable=coWDSRadioTable, coWDSNetworkScanGroup=coWDSNetworkScanGroup, colubrisWdsMIBCompliances=colubrisWdsMIBCompliances, colubrisWdsMIBCompliance=colubrisWdsMIBCompliance, coWDSLinkHT=coWDSLinkHT, coWDSLinkIdleTime=coWDSLinkIdleTime, colubrisWDSInfoMIBGroup=colubrisWDSInfoMIBGroup, coWDSNumberOfGroup=coWDSNumberOfGroup, coWDSLinkRadio=coWDSLinkRadio, coWDSLinkPeerMacAddress=coWDSLinkPeerMacAddress, coWDSGroupDynamicMode=coWDSGroupDynamicMode, coWDSLinkMaster=coWDSLinkMaster, coWDSLinkTxMCS=coWDSLinkTxMCS, coWDSNetworkScanTable=coWDSNetworkScanTable, coWDSLinkState=coWDSLinkState, coWDSGroupDynamicGroupId=coWDSGroupDynamicGroupId, coWDSRadioQoS=coWDSRadioQoS, coWDSScanGroupId=coWDSScanGroupId, coWDSNetworkScanEntry=coWDSNetworkScanEntry, coWDSScanRadioIndex=coWDSScanRadioIndex, coWDSDynamicModeImplemented=coWDSDynamicModeImplemented, colubrisWdsMIBObjects=colubrisWdsMIBObjects, coWDSLinkIndex=coWDSLinkIndex, coWDSScanMode=coWDSScanMode, colubrisWDSGroupMIBGroup=colubrisWDSGroupMIBGroup, colubrisWDSRadioMIBGroup=colubrisWDSRadioMIBGroup, coWDSLinkRxMCS=coWDSLinkRxMCS, colubrisWDSLinkMIBGroup=colubrisWDSLinkMIBGroup, colubrisWdsMIB=colubrisWdsMIB, coWDSLinkSignal=coWDSLinkSignal, coWDSScanPeerMacAddress=coWDSScanPeerMacAddress, coWDSLinkSNR=coWDSLinkSNR, coWDSLinkTxRate=coWDSLinkTxRate, coWDSScanPeerIndex=coWDSScanPeerIndex, coWDSGroupIndex=coWDSGroupIndex, coWDSInfoGroup=coWDSInfoGroup, coWDSRadioEntry=coWDSRadioEntry, coWDSLinkAuthorized=coWDSLinkAuthorized, PYSNMP_MODULE_ID=colubrisWdsMIB)
