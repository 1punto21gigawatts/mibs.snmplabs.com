#
# PySNMP MIB module FD-ONU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FD-ONU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
OperSwitch, DeviceOperation, DeviceStatus, epon, DeviceType = mibBuilder.importSymbols("EPON-EOC-MIB", "OperSwitch", "DeviceOperation", "DeviceStatus", "epon", "DeviceType")
oltId, linkId = mibBuilder.importSymbols("FD-OLT-MIB", "oltId", "linkId")
ponCardSlotId, = mibBuilder.importSymbols("FD-SYSTEM-MIB", "ponCardSlotId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Gauge32, ObjectIdentity, Counter64, IpAddress, NotificationType, MibIdentifier, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType", "MibIdentifier", "ModuleIdentity", "Bits")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
fdOnu = ModuleIdentity((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4))
if mibBuilder.loadTexts: fdOnu.setLastUpdated('201005271056Z')
if mibBuilder.loadTexts: fdOnu.setOrganization('epon eoc factory.')
if mibBuilder.loadTexts: fdOnu.setContactInfo(' ')
if mibBuilder.loadTexts: fdOnu.setDescription('ONU mib module')
onuBaseManageTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1), )
if mibBuilder.loadTexts: onuBaseManageTable.setStatus('current')
if mibBuilder.loadTexts: onuBaseManageTable.setDescription(' ')
onuBaseManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuBaseManageEntry.setStatus('current')
if mibBuilder.loadTexts: onuBaseManageEntry.setDescription(' ')
onuId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: onuId.setStatus('current')
if mibBuilder.loadTexts: onuId.setDescription('Serial No allocated for each ONU which register on each PON port for identify them conveniencly. The ID allocated for each ONU will stay until the ONU is deleted.')
onuDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 2), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuDeviceType.setStatus('current')
if mibBuilder.loadTexts: onuDeviceType.setDescription(' ')
onuFactorySerial = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuFactorySerial.setStatus('current')
if mibBuilder.loadTexts: onuFactorySerial.setDescription('Description.')
onuUserInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuUserInfo.setStatus('current')
if mibBuilder.loadTexts: onuUserInfo.setDescription(' ')
onuHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuHwRev.setStatus('current')
if mibBuilder.loadTexts: onuHwRev.setDescription(' ')
onuFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuFwRev.setStatus('current')
if mibBuilder.loadTexts: onuFwRev.setDescription(' ')
onuBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuBaseMac.setStatus('current')
if mibBuilder.loadTexts: onuBaseMac.setDescription(' ')
maxAllowedLLIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxAllowedLLIDs.setStatus('current')
if mibBuilder.loadTexts: maxAllowedLLIDs.setDescription(' ')
registeredLLIDNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: registeredLLIDNum.setStatus('current')
if mibBuilder.loadTexts: registeredLLIDNum.setDescription(' ')
onuOnLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 11), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuOnLineStatus.setStatus('current')
if mibBuilder.loadTexts: onuOnLineStatus.setDescription(' ')
onuUserTrafficEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 12), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuUserTrafficEnable.setStatus('current')
if mibBuilder.loadTexts: onuUserTrafficEnable.setDescription(' ')
onuRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuRangeValue.setStatus('current')
if mibBuilder.loadTexts: onuRangeValue.setDescription(' ')
supportUniPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportUniPorts.setStatus('current')
if mibBuilder.loadTexts: supportUniPorts.setDescription('Description.')
onuOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 32), DeviceOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuOperation.setStatus('current')
if mibBuilder.loadTexts: onuOperation.setDescription("Only off line ONUs can be delete by seting the value of this object to 'delete'")
onuUpgradeStat = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8))).clone(namedValues=NamedValues(("booting", 1), ("normalRun", 2), ("upgrading", 6), ("upgradeOk", 7), ("upgradeErr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuUpgradeStat.setStatus('current')
if mibBuilder.loadTexts: onuUpgradeStat.setDescription('Description.')
onuLinkIdMap = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuLinkIdMap.setStatus('current')
if mibBuilder.loadTexts: onuLinkIdMap.setDescription('Description.')
onuMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tk", 1), ("ctc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuMgmtType.setStatus('current')
if mibBuilder.loadTexts: onuMgmtType.setDescription('Description.')
onuLaserRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuLaserRxPower.setStatus('current')
if mibBuilder.loadTexts: onuLaserRxPower.setDescription('Description.')
onuLaserTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuLaserTxPower.setStatus('current')
if mibBuilder.loadTexts: onuLaserTxPower.setDescription('Description.')
onuAdvancedManage = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2))
onuChipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1), )
if mibBuilder.loadTexts: onuChipInfoTable.setStatus('current')
if mibBuilder.loadTexts: onuChipInfoTable.setDescription(' ')
onuChipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuChipInfoEntry.setStatus('current')
if mibBuilder.loadTexts: onuChipInfoEntry.setDescription(' ')
onuChipProCode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipProCode.setStatus('current')
if mibBuilder.loadTexts: onuChipProCode.setDescription('Description.')
onuChipProVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipProVer.setStatus('current')
if mibBuilder.loadTexts: onuChipProVer.setDescription('Description.')
onuChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipId.setStatus('current')
if mibBuilder.loadTexts: onuChipId.setDescription('Description.')
onuChipVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipVer.setStatus('current')
if mibBuilder.loadTexts: onuChipVer.setDescription('Description.')
onuBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuBootVer.setStatus('current')
if mibBuilder.loadTexts: onuBootVer.setDescription('Description.')
onuPersVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuPersVer.setStatus('current')
if mibBuilder.loadTexts: onuPersVer.setDescription('Description.')
onuChipApp0Ver = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipApp0Ver.setStatus('current')
if mibBuilder.loadTexts: onuChipApp0Ver.setDescription('Description.')
onuChipApp1Ver = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipApp1Ver.setStatus('current')
if mibBuilder.loadTexts: onuChipApp1Ver.setDescription('Description.')
onuChipDiagVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuChipDiagVer.setStatus('current')
if mibBuilder.loadTexts: onuChipDiagVer.setDescription('Description.')
onuAdvancedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 2), )
if mibBuilder.loadTexts: onuAdvancedConfigTable.setStatus('current')
if mibBuilder.loadTexts: onuAdvancedConfigTable.setDescription('This table contain the information which is not normally used but may be usefull in some special circumstance')
onuAdvancedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuAdvancedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: onuAdvancedConfigEntry.setDescription('Each entry in this table contain the information for one ONU')
onuAddiVlanEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuAddiVlanEthType.setStatus('current')
if mibBuilder.loadTexts: onuAddiVlanEthType.setDescription('Description. Reserved. Additional Ethernet type to identify vlan frames. 0 1 2 3 --------------------------------------------- vlan EthType| tag upstream | tag downstream | --------------------------------------------- 2byte 1byte 1byte vlan EthType: default 0x8100 tag upstream: 1->use this type to tag upstream, 0->untag tag downstream: 1->use this type to tag downstream, 0->untag')
onuRstpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 2, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuRstpEnable.setStatus('current')
if mibBuilder.loadTexts: onuRstpEnable.setDescription('Description.')
onuLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 2, 1, 3), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuLocalSwitch.setStatus('current')
if mibBuilder.loadTexts: onuLocalSwitch.setDescription('Description.')
onuCatv = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 2, 2, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuCatv.setStatus('current')
if mibBuilder.loadTexts: onuCatv.setDescription('Description.')
onuUniPortTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3), )
if mibBuilder.loadTexts: onuUniPortTable.setStatus('current')
if mibBuilder.loadTexts: onuUniPortTable.setDescription(' ')
onuUniPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "uniPortId"))
if mibBuilder.loadTexts: onuUniPortEntry.setStatus('current')
if mibBuilder.loadTexts: onuUniPortEntry.setDescription(' ')
uniPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("uniPort1", 1), ("uniPort2", 2), ("uniPort3", 3), ("uniPort4", 4), ("uniPort5", 5), ("uniPort6", 6), ("uniPort7", 7), ("uniPort8", 8), ("uniPort9", 9), ("uniPort10", 10), ("uniPort11", 11), ("uniPort12", 12), ("uniPort13", 13), ("uniPort14", 14), ("uniPort15", 15), ("uniPort16", 16), ("uniPort17", 17), ("uniPort18", 18), ("uniPort19", 19), ("uniPort20", 20), ("uniPort21", 21), ("uniPort22", 22), ("uniPort23", 23), ("uniPort24", 24), ("uniPort25", 25), ("uniPort26", 26), ("uniPort27", 27), ("uniPort28", 28), ("uniPort29", 29), ("uniPort30", 30), ("uniPort31", 31), ("uniPort32", 32), ("uniPort33", 33), ("uniPort34", 34), ("uniPort35", 35), ("uniPort36", 36), ("uniPort37", 37), ("uniPort38", 38), ("uniPort39", 39), ("uniPort40", 40), ("uniPort41", 41), ("uniPort42", 42), ("uniPort43", 43), ("uniPort44", 44), ("uniPort45", 45), ("uniPort46", 46), ("uniPort47", 47), ("uniPort48", 48))))
if mibBuilder.loadTexts: uniPortId.setStatus('current')
if mibBuilder.loadTexts: uniPortId.setDescription(' ')
uniPortUserInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortUserInfo.setStatus('current')
if mibBuilder.loadTexts: uniPortUserInfo.setDescription(' ')
uniPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkup", 1), ("linkdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniPortLink.setStatus('current')
if mibBuilder.loadTexts: uniPortLink.setDescription(' ')
uniPortAutoNego = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortAutoNego.setStatus('current')
if mibBuilder.loadTexts: uniPortAutoNego.setDescription(' ')
uniPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortSpeed.setStatus('current')
if mibBuilder.loadTexts: uniPortSpeed.setDescription(' ')
uniPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortDuplex.setStatus('current')
if mibBuilder.loadTexts: uniPortDuplex.setDescription(' ')
uniPortFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 7), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: uniPortFlowCtrl.setDescription(' ')
uniPortMacEntryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortMacEntryLimit.setStatus('current')
if mibBuilder.loadTexts: uniPortMacEntryLimit.setDescription(' ')
uniPortMacAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 286))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortMacAgeTime.setStatus('current')
if mibBuilder.loadTexts: uniPortMacAgeTime.setDescription(' aging timeout, unit is 1s')
uniPortFowardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d8021mode", 1), ("dropUntilLearned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortFowardMode.setStatus('current')
if mibBuilder.loadTexts: uniPortFowardMode.setDescription(' ')
uniPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 11), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniPortEnable.setStatus('current')
if mibBuilder.loadTexts: uniPortEnable.setDescription(' ')
uniPortRstpState = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniPortRstpState.setStatus('current')
if mibBuilder.loadTexts: uniPortRstpState.setDescription('onu port rstp state:normal or blocking')
onuQueueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 4), )
if mibBuilder.loadTexts: onuQueueCfgTable.setStatus('current')
if mibBuilder.loadTexts: onuQueueCfgTable.setDescription(' ')
onuQueueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 4, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuQueueCfgEntry.setStatus('current')
if mibBuilder.loadTexts: onuQueueCfgEntry.setDescription(' ')
onuQueueCfgData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 4, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuQueueCfgData.setStatus('current')
if mibBuilder.loadTexts: onuQueueCfgData.setDescription(" contain all queue config information for one ONU. the value format is: Get/SET: -------------------------------------------------------------- | value length | number of links | link0 queues |queue0 size |... -------------------------------------------------------------- 1 1 1 1 |<-repeat queues-> |<---repeat link's numbers---> --------------------------------------------------------------------------------------------- ...| port numbers | port0 queues | queue0 size |...|flooding queues | flooding queue size | --------------------------------------------------------------------------------------------- 1 1 1 1 1 |<-repeat queues->| |<-----repeat port number times-->| para comment: value length: dont include itself's size port numbers: for FD104B, fixed value, 1 flooding queues: for now, fixed 1 flooding queue id: ")
onuAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 5), )
if mibBuilder.loadTexts: onuAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: onuAclRuleTable.setDescription(' ')
onuAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 5, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "onuIntPortId"))
if mibBuilder.loadTexts: onuAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: onuAclRuleEntry.setDescription(' ')
onuIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onuPonPort", 1), ("onuIntUniPort", 2))))
if mibBuilder.loadTexts: onuIntPortId.setStatus('current')
if mibBuilder.loadTexts: onuIntPortId.setDescription(' ')
onuAclRuleCfgData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuAclRuleCfgData.setStatus('current')
if mibBuilder.loadTexts: onuAclRuleCfgData.setDescription(" onu ACL rule data format. when read or write, the data format is: ------------------------------------------------------------------------------- | data length | global flags | rule numbers | rule flag | precedence | action | ------------------------------------------------------------------------------- 2 1 1 1 1 1 |<----repeat rule number times----- ---------------------------------------------------------------- | action para | clause number | field | match value | operator | ---------------------------------------------------------------- 2 1 1 8 1 |<---repeat clause number times-->| ----------------------------------------------------------------> para comment: data length: don't include the length area itself. ")
onuPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 6), )
if mibBuilder.loadTexts: onuPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: onuPortVlanTable.setDescription(' ')
onuPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 6, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "onuPortId"))
if mibBuilder.loadTexts: onuPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: onuPortVlanEntry.setDescription(' ')
onuPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("ponPort", 1), ("uniPort1", 2), ("uniPort2", 3), ("uniPort3", 4), ("uniPort4", 5), ("uniPort5", 6), ("uniPort6", 7), ("uniPort7", 8), ("uniPort8", 9), ("uniPort9", 10), ("uniPort10", 11), ("uniPort11", 12), ("uniPort12", 13), ("uniPort13", 14), ("uniPort14", 15), ("uniPort15", 16), ("uniPort16", 17), ("uniPort17", 18), ("uniPort18", 19), ("uniPort19", 20), ("uniPort20", 21), ("uniPort21", 22), ("uniPort22", 23), ("uniPort23", 24), ("uniPort24", 25), ("uniPort25", 26), ("uniPort26", 27), ("uniPort27", 28), ("uniPort28", 29), ("uniPort29", 30), ("uniPort30", 31), ("uniPort31", 32), ("uniPort32", 33), ("uniPort33", 34), ("uniPort34", 35), ("uniPort35", 36), ("uniPort36", 37), ("uniPort37", 38), ("uniPort38", 39), ("uniPort39", 40), ("uniPort40", 41), ("uniPort41", 42), ("uniPort42", 43), ("uniPort43", 44), ("uniPort44", 45), ("uniPort45", 46), ("uniPort46", 47), ("uniPort47", 48))))
if mibBuilder.loadTexts: onuPortId.setStatus('current')
if mibBuilder.loadTexts: onuPortId.setDescription('Description.')
onuPortVlanData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 6, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuPortVlanData.setStatus('current')
if mibBuilder.loadTexts: onuPortVlanData.setDescription(' Self defines data strucure for onu port vlan information. Data format: size(unit:byte)| 1 2 1 2 2 ... -------------------------------------------------------------------------- para | data length |option bit| forwarding policy | pvid | vlan number |... -------------------------------------------------------------------------- 2 1 1 2 1 1 --------------------------------------------- ---------------------------------------------- | vlan tag |egress tag modification| reserved|...|vlan tag | egress tag modification | reserved | --------------------------------------------- ---------------------------------------------- |<.................vlan 1...................>|...|<...............vlan n.......................>| So, the total data length should be: 8+4*(vlan nun). ')
onuPortQos = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7))
portEgressShappingTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 1), )
if mibBuilder.loadTexts: portEgressShappingTable.setStatus('current')
if mibBuilder.loadTexts: portEgressShappingTable.setDescription(' ')
portEgressShappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "uniPortId"))
if mibBuilder.loadTexts: portEgressShappingEntry.setStatus('current')
if mibBuilder.loadTexts: portEgressShappingEntry.setDescription(' ')
scheduleAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weightedFair", 1), ("strictPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleAlgorithm.setStatus('current')
if mibBuilder.loadTexts: scheduleAlgorithm.setDescription(' ')
maxTrafficOutputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTrafficOutputRate.setStatus('current')
if mibBuilder.loadTexts: maxTrafficOutputRate.setDescription(' ')
outputModule = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputModule.setStatus('current')
if mibBuilder.loadTexts: outputModule.setDescription('Description.')
portIngressPolicingTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 2), )
if mibBuilder.loadTexts: portIngressPolicingTable.setStatus('current')
if mibBuilder.loadTexts: portIngressPolicingTable.setDescription(' ')
portIngressPolicingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "uniPortId"))
if mibBuilder.loadTexts: portIngressPolicingEntry.setStatus('current')
if mibBuilder.loadTexts: portIngressPolicingEntry.setDescription(' ')
policingTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("broadCast", 1), ("multiCast", 2), ("broadcastMulticastAndFloodedUnicast", 3), ("allFrameTypes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policingTrafficType.setStatus('current')
if mibBuilder.loadTexts: policingTrafficType.setDescription(' ')
maxTrafficInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTrafficInputRate.setStatus('current')
if mibBuilder.loadTexts: maxTrafficInputRate.setDescription(' ')
inputModule = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputModule.setStatus('current')
if mibBuilder.loadTexts: inputModule.setDescription('Description.')
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8))
igmpSnoopParaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8, 1), )
if mibBuilder.loadTexts: igmpSnoopParaTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopParaTable.setDescription(' ')
igmpSnoopParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: igmpSnoopParaEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopParaEntry.setDescription(' ')
igmpSnoopParaData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopParaData.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopParaData.setDescription(' IGMP SNOOPING paras value. format: -------------------------------------------------------------- | robustness count | last member query count | port number |... --------------------------------------------------------------- 1 1 1 ------------------------------------------------------------------------ | groups num 1 | relative queue 1 |...|groups num n | relative queue n | ------------------------------------------------------------------------ 1 1 1 1 -------------------------------------- | qualifier bitmatp | option bit map | -------------------------------------- 2 1 para explain: para value range comment robust count: 0~12 last member count: 0~12 port number: for FD104B, port number is 4 groups number : 0~64 this two paras repeast port number times relative queue: qualifier bit: 0 reserved option bit map: 0 reserved ')
igmpSnoopGroupTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8, 2), )
if mibBuilder.loadTexts: igmpSnoopGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopGroupTable.setDescription(' ')
igmpSnoopGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "uniPortId"))
if mibBuilder.loadTexts: igmpSnoopGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopGroupEntry.setDescription(' ')
igmpSnoopGroupData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 8, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopGroupData.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopGroupData.setDescription(' igmp group data. this variable is used to add, delete or get igmp groups. the data contained in this variable is different for get and add/delete. when get, the data format is: ------------------------------------------------------------- | group numbers | group ip address | port bit map |.... repeat group number times ------------------------------------------------------------- 1 4 1 when add or delete, the data format is: ----------------------------------------------------------------- | operate code | group numbers | group pvid | port bit map | ------------------------------------------------------------------ 1 1 2 4 para comment: operate code: 1->add, 2->delete ')
onuLoopTestTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 9), )
if mibBuilder.loadTexts: onuLoopTestTable.setStatus('current')
if mibBuilder.loadTexts: onuLoopTestTable.setDescription(' ')
onuLoopTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 9, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuLoopTestEntry.setStatus('current')
if mibBuilder.loadTexts: onuLoopTestEntry.setDescription(' ')
onuLoopTestData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 9, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuLoopTestData.setStatus('current')
if mibBuilder.loadTexts: onuLoopTestData.setDescription(' test cmd data, format: --------------------------------------------------------------- | location | frame number | frame length | reserved | vlan tag | --------------------------------------------------------------- 1 2 2 1 2 para comment: value range comment location: 1,2 frame number: 1~10000 frame length: 46~1500 reserved: 0 this area is not used for now, must be 0 vlan tag: 0~4094 ')
onuLoopTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuLoopTestResult.setStatus('current')
if mibBuilder.loadTexts: onuLoopTestResult.setDescription(' loopback test results. Data Format: ----------------------------------------------------------------------------------------- |status|frames sent|frames received ok|corrupted frames|min delay|max delay|average delay| ----------------------------------------------------------------------------------------- 1 2 2 2 2 2 2 para comment: status: 1->finished ok 2->testing 3->time out 4->test command error ')
onuDynMac = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10))
onuDynMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 1), )
if mibBuilder.loadTexts: onuDynMacOperTable.setStatus('current')
if mibBuilder.loadTexts: onuDynMacOperTable.setDescription(' ')
onuDynMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "uniPortId"))
if mibBuilder.loadTexts: onuDynMacOperEntry.setStatus('current')
if mibBuilder.loadTexts: onuDynMacOperEntry.setDescription(' ')
onuDynMacOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("refresh", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuDynMacOperation.setStatus('current')
if mibBuilder.loadTexts: onuDynMacOperation.setDescription(' ')
onuDynMacTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 2), )
if mibBuilder.loadTexts: onuDynMacTable.setStatus('current')
if mibBuilder.loadTexts: onuDynMacTable.setDescription(' ')
onuDynMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "uniPortId"), (0, "FD-ONU-MIB", "onuDynMacIndex"))
if mibBuilder.loadTexts: onuDynMacEntry.setStatus('current')
if mibBuilder.loadTexts: onuDynMacEntry.setDescription(' ')
onuDynMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: onuDynMacIndex.setStatus('current')
if mibBuilder.loadTexts: onuDynMacIndex.setDescription('Administratorly assigned entry index object')
onuDynMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuDynMacAddr.setStatus('current')
if mibBuilder.loadTexts: onuDynMacAddr.setDescription(' ')
onuVoiceService = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11))
onuIADInfoTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1), )
if mibBuilder.loadTexts: onuIADInfoTable.setStatus('current')
if mibBuilder.loadTexts: onuIADInfoTable.setDescription(' IAD Info')
onuIADInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuIADInfoEntry.setStatus('current')
if mibBuilder.loadTexts: onuIADInfoEntry.setDescription(' IAD Info')
onuIADMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADMac.setStatus('current')
if mibBuilder.loadTexts: onuIADMac.setDescription('IAD MAC address')
onuIADProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("h248", 0), ("sip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADProtocol.setStatus('current')
if mibBuilder.loadTexts: onuIADProtocol.setDescription('ProtocolSupported 0x00: H.248 0x01: SIP')
onuIADSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADSwVersion.setStatus('current')
if mibBuilder.loadTexts: onuIADSwVersion.setDescription('Iad Software Version')
onuIADSwTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADSwTime.setStatus('current')
if mibBuilder.loadTexts: onuIADSwTime.setDescription('Iad software time Version time format uses: YYYYMMDDHHMMSS')
onuIADVoipNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADVoipNum.setStatus('current')
if mibBuilder.loadTexts: onuIADVoipNum.setDescription('VoipUserCount Indicate POTS number of IAD module')
onuIADParamCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2), )
if mibBuilder.loadTexts: onuIADParamCfgTable.setStatus('current')
if mibBuilder.loadTexts: onuIADParamCfgTable.setDescription('ONU IAD Global Parameter Co nfigure')
onuIADParamCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuIADParamCfgEntry.setStatus('current')
if mibBuilder.loadTexts: onuIADParamCfgEntry.setDescription('ONU IAD Global Parameter Co nfigure')
onuIADMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("pppoe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADMode.setStatus('current')
if mibBuilder.loadTexts: onuIADMode.setDescription('IP address configuration mode: 0x00: Static IP 0x01: DHCP 0x02: PPPoE/PPPOE+')
onuIADIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADIpAddr.setStatus('current')
if mibBuilder.loadTexts: onuIADIpAddr.setDescription('When Voice IP Mode= 0x00, indicate the device static configured IP address, otherwise, this field is invalid, and the value is 0x00.')
onuIADNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADNetMask.setStatus('current')
if mibBuilder.loadTexts: onuIADNetMask.setDescription('When Voice IP Mode = 0x00, indicate the device static configured IP address mask, otherwise, this field is invalid, and the value is 0x00.')
onuIADDefaultGw = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADDefaultGw.setStatus('current')
if mibBuilder.loadTexts: onuIADDefaultGw.setDescription('When Voice IP Mode = 0x00, indicate the device static configured IAD default GW, otherwise, the field is invalid, and the value is 0x00')
onuIADPppoeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("chap", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADPppoeMode.setStatus('current')
if mibBuilder.loadTexts: onuIADPppoeMode.setDescription('PPPOE mode: 0x00: AUTO (default) 0x01: Challenge Handshake Authentication Protocol (CHAP) 0x02: Password Authentication Protocol (PAP)')
onuIADPppoeUsrnm = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADPppoeUsrnm.setStatus('current')
if mibBuilder.loadTexts: onuIADPppoeUsrnm.setDescription('PPPOE username')
onuIADPppoePw = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADPppoePw.setStatus('current')
if mibBuilder.loadTexts: onuIADPppoePw.setDescription('PPPOE password')
onuIADTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("passThrough", 0), ("tag", 1), ("vlanStack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADTagMode.setStatus('current')
if mibBuilder.loadTexts: onuIADTagMode.setDescription('Tagged flag Indicate whether Voice data uses tag, and the default is 0x01: 0x00: Pass through 0x01: Tag 0x02: VLAN stacking')
onuIADVoiceCVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADVoiceCVlan.setStatus('current')
if mibBuilder.loadTexts: onuIADVoiceCVlan.setDescription('Voice CVlan')
onuIADVoiceSVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADVoiceSVlan.setStatus('current')
if mibBuilder.loadTexts: onuIADVoiceSVlan.setDescription('Voice SVLAN If it is single layer of VLAN, the value is 0x00.')
onuIADVoicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADVoicePriority.setStatus('current')
if mibBuilder.loadTexts: onuIADVoicePriority.setDescription('Voice Priority')
onuIADH248Param = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3))
h248ParamCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1), )
if mibBuilder.loadTexts: h248ParamCfgTable.setStatus('current')
if mibBuilder.loadTexts: h248ParamCfgTable.setDescription('Description.')
h248ParamCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: h248ParamCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h248ParamCfgEntry.setDescription('Description.')
h248MgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MgPort.setStatus('current')
if mibBuilder.loadTexts: h248MgPort.setDescription('MGPortNo The default is 2944.')
h248MgcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MgcIp.setStatus('current')
if mibBuilder.loadTexts: h248MgcIp.setDescription('MGCIP Active softswitch platform IP address. ')
h248MgcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MgcPort.setStatus('current')
if mibBuilder.loadTexts: h248MgcPort.setDescription('MgcComPortNo Active softswitch platform port number.')
h248BakMacIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248BakMacIp.setStatus('current')
if mibBuilder.loadTexts: h248BakMacIp.setDescription('Backup MgcIp Backup softswitch platform IP address. If it is 0x00000000, dual homing is not enabled.')
h248BakMgcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248BakMgcPort.setStatus('current')
if mibBuilder.loadTexts: h248BakMgcPort.setDescription('Backup MgcComPortNo If it is 0x0000, dual homing is not enabled.')
h248ActiveMgc = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("backup", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248ActiveMgc.setStatus('current')
if mibBuilder.loadTexts: h248ActiveMgc.setDescription('Active MGC 0x00: Backup softswitch platform 0x01: Active softswitch platform When SET, ONU ignores this field. When GET, ONU returns registered MGC.')
h248RegMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipAddress", 0), ("domainName", 1), ("deviceName", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248RegMode.setStatus('current')
if mibBuilder.loadTexts: h248RegMode.setDescription('RegMode 0x00: IP address 0x01: domain name 0x02: device name')
h248MID = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MID.setStatus('current')
if mibBuilder.loadTexts: h248MID.setDescription('MID If RegMode=0x00, the field is empty. If the registration mode is device name or domain name, the corresponding strings are padded.')
h248HbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("h248ctc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248HbMode.setStatus('current')
if mibBuilder.loadTexts: h248HbMode.setDescription('Heartbeat Mode 0x00: Close 0x01: H.248-CTC standard Notify command')
h248HbCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248HbCycle.setStatus('current')
if mibBuilder.loadTexts: h248HbCycle.setDescription('HeartbeatCycle The default is 60s.')
h248HbCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248HbCount.setStatus('current')
if mibBuilder.loadTexts: h248HbCount.setDescription('HeartbeatCount The default is 3.')
h248UserTIDTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 2), )
if mibBuilder.loadTexts: h248UserTIDTable.setStatus('current')
if mibBuilder.loadTexts: h248UserTIDTable.setDescription('Description.')
h248UserTIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "onuIADPotsId"))
if mibBuilder.loadTexts: h248UserTIDEntry.setStatus('current')
if mibBuilder.loadTexts: h248UserTIDEntry.setDescription('Description.')
onuVoipPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuVoipPortId.setStatus('current')
if mibBuilder.loadTexts: onuVoipPortId.setDescription('Description.')
h248UserTIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248UserTIDName.setStatus('current')
if mibBuilder.loadTexts: h248UserTIDName.setDescription('User TID Name')
h248RtpTIDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3), )
if mibBuilder.loadTexts: h248RtpTIDCfgTable.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDCfgTable.setDescription('Description.')
h248RtpTIDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: h248RtpTIDCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDCfgEntry.setDescription('Description.')
h248RtpTIDNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248RtpTIDNum.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDNum.setDescription('Number of RTP TID')
h248RtpTIDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248RtpTIDPrefix.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDPrefix.setDescription('RTP TID Prefix')
h248RtpTIDDigitBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248RtpTIDDigitBegin.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDDigitBegin.setDescription('RTP TID Digit Begin RTP TID digital portion start value')
h248RtpTIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("align", 0), ("nonAlign", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248RtpTIDMode.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDMode.setDescription('RTP TID Mode 0x00: alignment mode 0x01: non-alignment mode')
h248RtpTIDDigitLen = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248RtpTIDDigitLen.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDDigitLen.setDescription('RTP TID Digit Length')
h248RtpTIDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 4), )
if mibBuilder.loadTexts: h248RtpTIDInfoTable.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDInfoTable.setDescription(' H248 RTP TID Info')
h248RtpTIDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 4, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: h248RtpTIDInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDInfoEntry.setDescription(' H248 RTP TID Info')
h248RtpTIDCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h248RtpTIDCount.setStatus('current')
if mibBuilder.loadTexts: h248RtpTIDCount.setDescription('Number of RTP TID')
h248FstRtpTIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h248FstRtpTIDName.setStatus('current')
if mibBuilder.loadTexts: h248FstRtpTIDName.setDescription('First RTP TID Name')
onuIADSipParam = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4))
sipParamCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1), )
if mibBuilder.loadTexts: sipParamCfgTable.setStatus('current')
if mibBuilder.loadTexts: sipParamCfgTable.setDescription(' SIP Parameter Configure')
sipParamCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: sipParamCfgEntry.setStatus('current')
if mibBuilder.loadTexts: sipParamCfgEntry.setDescription(' SIP Parameter Configure')
sipMgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMgPort.setStatus('current')
if mibBuilder.loadTexts: sipMgPort.setDescription('MGPortNo The default is 5060.')
sipProxySvrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxySvrIp.setStatus('current')
if mibBuilder.loadTexts: sipProxySvrIp.setDescription('SipProxyServIp Active SIP agent server IP address')
sipProxySvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxySvrPort.setStatus('current')
if mibBuilder.loadTexts: sipProxySvrPort.setDescription('SipProxyServComPortNo Active SIP agent server port number')
sipBakProxySvrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipBakProxySvrIp.setStatus('current')
if mibBuilder.loadTexts: sipBakProxySvrIp.setDescription('BackupSipProxyServIp Backup SIP agent server IP address, if this field is 0x00000000, do not enable dual homing function.')
sipBakProxySvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipBakProxySvrPort.setStatus('current')
if mibBuilder.loadTexts: sipBakProxySvrPort.setDescription('BackupSipProxyServComPortNo Backup SIP agent server port number. If this field is 0x00000000, do not enable dual homing function.')
sipActiveProxySvr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipActiveProxySvr.setStatus('current')
if mibBuilder.loadTexts: sipActiveProxySvr.setDescription('ActiveSipProxyServer When SET, ONU ignores to process this field. When GET, ONU returns registered MGC.')
sipRegSvrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegSvrIp.setStatus('current')
if mibBuilder.loadTexts: sipRegSvrIp.setDescription('SipRegServIP Active SIP registration server IP address')
sipRegSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegSvrPort.setStatus('current')
if mibBuilder.loadTexts: sipRegSvrPort.setDescription('SipRegServComPortNo Active SIP registration server port number')
sipBakRegSvrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipBakRegSvrIp.setStatus('current')
if mibBuilder.loadTexts: sipBakRegSvrIp.setDescription('BackupSipRegServIp Backup SIP registration server IP address. If this field is 0x00000000, do not enable dual homing.')
sipBakRegSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipBakRegSvrPort.setStatus('current')
if mibBuilder.loadTexts: sipBakRegSvrPort.setDescription('BackupSipRegServComPortNo Active SIP registration server port number. If this field is 0x00000000, do not enable dual homing.')
sipOutBoundSvrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipOutBoundSvrIp.setStatus('current')
if mibBuilder.loadTexts: sipOutBoundSvrIp.setDescription('OutBoundServIP')
sipOutBoundSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipOutBoundSvrPort.setStatus('current')
if mibBuilder.loadTexts: sipOutBoundSvrPort.setDescription('OutBoundServPortNo')
sipRegInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegInterval.setStatus('current')
if mibBuilder.loadTexts: sipRegInterval.setDescription('SipRegIntervalSIP Registration refresh cycle, unit is second, and the default value is 3600s.')
sipHbSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipHbSwitch.setStatus('current')
if mibBuilder.loadTexts: sipHbSwitch.setDescription('HeartbeatSwitch 0x00: enable heartbeat switch 0x01: disable heartbeat switch')
sipHbCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipHbCycle.setStatus('current')
if mibBuilder.loadTexts: sipHbCycle.setDescription('HeartbeatCycle the default value is 60s')
sipHbCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipHbCount.setStatus('current')
if mibBuilder.loadTexts: sipHbCount.setDescription('HeartbeatCount the default value is 3')
sipUserCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 2), )
if mibBuilder.loadTexts: sipUserCfgTable.setStatus('current')
if mibBuilder.loadTexts: sipUserCfgTable.setDescription(' SIP User Parameter Configure')
sipUserCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "onuIADPotsId"))
if mibBuilder.loadTexts: sipUserCfgEntry.setStatus('current')
if mibBuilder.loadTexts: sipUserCfgEntry.setDescription(' SIP User Parameter Configure')
sipUserAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUserAccount.setStatus('current')
if mibBuilder.loadTexts: sipUserAccount.setDescription('User Account User phone number, and should user ASCII code')
sipUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUserName.setStatus('current')
if mibBuilder.loadTexts: sipUserName.setDescription('User name SIP port username, and should use ASCII code.')
sipUserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUserPasswd.setStatus('current')
if mibBuilder.loadTexts: sipUserPasswd.setDescription('User Password SIP port password, and should use ASCII code.')
sipDigitMapTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 3), )
if mibBuilder.loadTexts: sipDigitMapTable.setStatus('current')
if mibBuilder.loadTexts: sipDigitMapTable.setDescription('Description.')
sipDigitMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: sipDigitMapEntry.setStatus('current')
if mibBuilder.loadTexts: sipDigitMapEntry.setDescription('Description.')
sipDigitMapLen = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDigitMapLen.setStatus('current')
if mibBuilder.loadTexts: sipDigitMapLen.setDescription('Map length')
sipDigitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDigitMap.setStatus('current')
if mibBuilder.loadTexts: sipDigitMap.setDescription('SIP DigitalMap SIP protocol digital map, ASCII code type')
onuIADFaxCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 5), )
if mibBuilder.loadTexts: onuIADFaxCfgTable.setStatus('current')
if mibBuilder.loadTexts: onuIADFaxCfgTable.setDescription(' Fax/Modem Configure')
onuIADFaxCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 5, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuIADFaxCfgEntry.setStatus('current')
if mibBuilder.loadTexts: onuIADFaxCfgEntry.setDescription('Description.')
onuIADVoiceFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("passthrough", 0), ("t38", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADVoiceFaxMode.setStatus('current')
if mibBuilder.loadTexts: onuIADVoiceFaxMode.setDescription('VoiceT38Enable 0x00: voice passthrough mode (T30) 0x01: T38 mode')
onuIADVoiceFaxControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("negotiation", 0), ("autoVBD", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADVoiceFaxControl.setStatus('current')
if mibBuilder.loadTexts: onuIADVoiceFaxControl.setDescription('VoiceFax/ModemControl At default, use negotiation mode. 0x00: negotiation mode 0x01: Auto VBD')
onuIADOperTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 6), )
if mibBuilder.loadTexts: onuIADOperTable.setStatus('current')
if mibBuilder.loadTexts: onuIADOperTable.setDescription(' IAD Operation Status ')
onuIADOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 6, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"))
if mibBuilder.loadTexts: onuIADOperEntry.setStatus('current')
if mibBuilder.loadTexts: onuIADOperEntry.setDescription(' IAD Operation Status ')
onuIADOperStatusSet = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("reregister", 0), ("logout", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADOperStatusSet.setStatus('current')
if mibBuilder.loadTexts: onuIADOperStatusSet.setDescription('iadOperation 0x00000000: Reregister for softswitch platform 0x00000001: Logout from softswitch platform 0x00000002: Reset, only for voice module')
onuIADOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("registering", 0), ("regSuccess", 1), ("iadFault", 2), ("logout", 3), ("iadRestarting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADOperStatus.setStatus('current')
if mibBuilder.loadTexts: onuIADOperStatus.setDescription('iadOperStatus 0x00000000: Registering 0x00000001: Registration successful 0x00000002: IAD fault 0x00000003: logout 0x00000004: IAD is restarting')
onuIADPOTSStatusTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 7), )
if mibBuilder.loadTexts: onuIADPOTSStatusTable.setStatus('current')
if mibBuilder.loadTexts: onuIADPOTSStatusTable.setDescription('POTS Status')
onuIADPOTSStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 7, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "onuIADPotsId"))
if mibBuilder.loadTexts: onuIADPOTSStatusEntry.setStatus('current')
if mibBuilder.loadTexts: onuIADPOTSStatusEntry.setDescription('POTS Status')
onuIADPotsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("registering", 0), ("idle", 1), ("pickUp", 2), ("dialing", 3), ("ringing", 4), ("ringBack", 5), ("connecting", 6), ("connected", 7), ("releasing", 8), ("regFailure", 9), ("notActivated", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADPotsStatus.setStatus('current')
if mibBuilder.loadTexts: onuIADPotsStatus.setDescription('IADPortStauts 0x00000000: port is registering 0x00000001: port is idle 0x00000002: pick up 0x00000003: dialing 0x00000004: ringing 0x00000005: ring back 0x00000006: connecting 0x00000007: connected 0x00000008: releasing connection 0x00000009: port registration failure 0x0000000A: port is not activated')
onuIADPotsServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("endLocal", 0), ("endRemote", 1), ("endAuto", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADPotsServiceState.setStatus('current')
if mibBuilder.loadTexts: onuIADPotsServiceState.setDescription('iadPortServiceState 0x00000000: endLocal, local end terminates service, caused by user disable port 0x00000001: endRemote, remote end terminates service, caused by MGC sends down command 0x00000002: endAuto, automatically terminate service, caused by MGC fault. 0x00000003: normal service normal')
onuIADPotsCodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("g711a", 0), ("g729", 1), ("g711u", 2), ("g723", 3), ("g726", 4), ("t38", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIADPotsCodeMode.setStatus('current')
if mibBuilder.loadTexts: onuIADPotsCodeMode.setDescription('iadPortCodecMode 0x00000000: G.711 A 0x00000001: G.729 0x00000002: G.711U 0x00000003: G.723 0x00000004: G.726 0x00000005: T.38')
onuIADPotsId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("iadPots1", 1), ("iadPots2", 2), ("iadPots3", 3), ("iadPots4", 4), ("iadPots5", 5), ("iadPots6", 6), ("iadPots7", 7), ("iadPots8", 8))))
if mibBuilder.loadTexts: onuIADPotsId.setStatus('current')
if mibBuilder.loadTexts: onuIADPotsId.setDescription(' ')
onuIADPOTSEnableTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 8), )
if mibBuilder.loadTexts: onuIADPOTSEnableTable.setStatus('current')
if mibBuilder.loadTexts: onuIADPOTSEnableTable.setDescription('POTS Enable')
onuIADPOTSEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 8, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-ONU-MIB", "onuId"), (0, "FD-ONU-MIB", "onuIADPotsId"))
if mibBuilder.loadTexts: onuIADPOTSEnableEntry.setStatus('current')
if mibBuilder.loadTexts: onuIADPOTSEnableEntry.setDescription('POTS Enable')
potsId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("iadPots1", 1), ("iadPots2", 2), ("iadPots3", 3), ("iadPots4", 4), ("iadPots5", 5), ("iadPots6", 6), ("iadPots7", 7), ("iadPots8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsId.setStatus('current')
if mibBuilder.loadTexts: potsId.setDescription('Pots Id ')
onuIADPotsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIADPotsEnable.setStatus('current')
if mibBuilder.loadTexts: onuIADPotsEnable.setDescription('IADPortEnable 1: disable 2: enable ')
fdOnuConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15))
fdOnuGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1))
fdOnuBaseManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1, 1)).setObjects(("FD-ONU-MIB", "onuDeviceType"), ("FD-ONU-MIB", "onuFactorySerial"), ("FD-ONU-MIB", "onuUserInfo"), ("FD-ONU-MIB", "onuHwRev"), ("FD-ONU-MIB", "onuFwRev"), ("FD-ONU-MIB", "onuBaseMac"), ("FD-ONU-MIB", "maxAllowedLLIDs"), ("FD-ONU-MIB", "registeredLLIDNum"), ("FD-ONU-MIB", "onuOnLineStatus"), ("FD-ONU-MIB", "onuUserTrafficEnable"), ("FD-ONU-MIB", "onuRangeValue"), ("FD-ONU-MIB", "onuMgmtType"), ("FD-ONU-MIB", "onuLaserRxPower"), ("FD-ONU-MIB", "onuLaserTxPower"), ("FD-ONU-MIB", "onuOperation"), ("FD-ONU-MIB", "onuRstpEnable"), ("FD-ONU-MIB", "onuQueueCfgData"), ("FD-ONU-MIB", "onuAclRuleCfgData"), ("FD-ONU-MIB", "onuPortVlanData"), ("FD-ONU-MIB", "maxTrafficOutputRate"), ("FD-ONU-MIB", "outputModule"), ("FD-ONU-MIB", "scheduleAlgorithm"), ("FD-ONU-MIB", "policingTrafficType"), ("FD-ONU-MIB", "maxTrafficInputRate"), ("FD-ONU-MIB", "inputModule"), ("FD-ONU-MIB", "onuDynMacOperation"), ("FD-ONU-MIB", "supportUniPorts"), ("FD-ONU-MIB", "onuLinkIdMap"), ("FD-ONU-MIB", "onuDynMacAddr"), ("FD-ONU-MIB", "onuUpgradeStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOnuBaseManageGroup = fdOnuBaseManageGroup.setStatus('current')
if mibBuilder.loadTexts: fdOnuBaseManageGroup.setDescription('A collection of objects providing basic fd ONU management')
fdOnuAdvanceManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1, 2)).setObjects(("FD-ONU-MIB", "onuChipProCode"), ("FD-ONU-MIB", "onuChipProVer"), ("FD-ONU-MIB", "onuChipId"), ("FD-ONU-MIB", "onuChipVer"), ("FD-ONU-MIB", "onuBootVer"), ("FD-ONU-MIB", "onuPersVer"), ("FD-ONU-MIB", "onuChipApp0Ver"), ("FD-ONU-MIB", "onuChipApp1Ver"), ("FD-ONU-MIB", "onuChipDiagVer"), ("FD-ONU-MIB", "onuAddiVlanEthType"), ("FD-ONU-MIB", "onuRstpEnable"), ("FD-ONU-MIB", "onuLocalSwitch"), ("FD-ONU-MIB", "onuCatv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOnuAdvanceManageGroup = fdOnuAdvanceManageGroup.setStatus('current')
if mibBuilder.loadTexts: fdOnuAdvanceManageGroup.setDescription('A collection of objects providing advanced ONU feature management')
fdOnuPortParaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1, 3)).setObjects(("FD-ONU-MIB", "uniPortUserInfo"), ("FD-ONU-MIB", "uniPortLink"), ("FD-ONU-MIB", "uniPortAutoNego"), ("FD-ONU-MIB", "uniPortSpeed"), ("FD-ONU-MIB", "uniPortDuplex"), ("FD-ONU-MIB", "uniPortFlowCtrl"), ("FD-ONU-MIB", "uniPortMacEntryLimit"), ("FD-ONU-MIB", "uniPortMacAgeTime"), ("FD-ONU-MIB", "uniPortFowardMode"), ("FD-ONU-MIB", "uniPortEnable"), ("FD-ONU-MIB", "uniPortRstpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOnuPortParaGroup = fdOnuPortParaGroup.setStatus('current')
if mibBuilder.loadTexts: fdOnuPortParaGroup.setDescription('A collection of objects providing ONU port parameters management')
onuIgmpSnoopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1, 4)).setObjects(("FD-ONU-MIB", "igmpSnoopParaData"), ("FD-ONU-MIB", "igmpSnoopGroupData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    onuIgmpSnoopGroup = onuIgmpSnoopGroup.setStatus('current')
if mibBuilder.loadTexts: onuIgmpSnoopGroup.setDescription('A collection of objects providing igmp snooping feature management')
fdOnuLpTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1, 5)).setObjects(("FD-ONU-MIB", "onuLoopTestData"), ("FD-ONU-MIB", "onuLoopTestResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOnuLpTestGroup = fdOnuLpTestGroup.setStatus('current')
if mibBuilder.loadTexts: fdOnuLpTestGroup.setDescription('A collection of objects providing onu loopback test feature management')
fdOnuVoiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 1, 6)).setObjects(("FD-ONU-MIB", "onuIADMac"), ("FD-ONU-MIB", "onuIADProtocol"), ("FD-ONU-MIB", "onuIADSwVersion"), ("FD-ONU-MIB", "onuIADSwTime"), ("FD-ONU-MIB", "onuIADVoipNum"), ("FD-ONU-MIB", "onuIADMode"), ("FD-ONU-MIB", "onuIADIpAddr"), ("FD-ONU-MIB", "onuIADNetMask"), ("FD-ONU-MIB", "onuIADDefaultGw"), ("FD-ONU-MIB", "onuIADPppoeMode"), ("FD-ONU-MIB", "onuIADPppoeUsrnm"), ("FD-ONU-MIB", "onuIADPppoePw"), ("FD-ONU-MIB", "onuIADTagMode"), ("FD-ONU-MIB", "onuIADVoiceCVlan"), ("FD-ONU-MIB", "onuIADVoiceSVlan"), ("FD-ONU-MIB", "onuIADVoicePriority"), ("FD-ONU-MIB", "h248MgPort"), ("FD-ONU-MIB", "h248MgcIp"), ("FD-ONU-MIB", "h248MgcPort"), ("FD-ONU-MIB", "h248BakMacIp"), ("FD-ONU-MIB", "h248BakMgcPort"), ("FD-ONU-MIB", "h248ActiveMgc"), ("FD-ONU-MIB", "h248RegMode"), ("FD-ONU-MIB", "h248MID"), ("FD-ONU-MIB", "h248HbMode"), ("FD-ONU-MIB", "h248HbCycle"), ("FD-ONU-MIB", "h248HbCount"), ("FD-ONU-MIB", "onuVoipPortId"), ("FD-ONU-MIB", "h248UserTIDName"), ("FD-ONU-MIB", "h248RtpTIDNum"), ("FD-ONU-MIB", "h248RtpTIDPrefix"), ("FD-ONU-MIB", "h248RtpTIDDigitBegin"), ("FD-ONU-MIB", "h248RtpTIDMode"), ("FD-ONU-MIB", "h248RtpTIDDigitLen"), ("FD-ONU-MIB", "h248RtpTIDCount"), ("FD-ONU-MIB", "h248FstRtpTIDName"), ("FD-ONU-MIB", "sipMgPort"), ("FD-ONU-MIB", "sipProxySvrIp"), ("FD-ONU-MIB", "sipProxySvrPort"), ("FD-ONU-MIB", "sipBakProxySvrIp"), ("FD-ONU-MIB", "sipBakProxySvrPort"), ("FD-ONU-MIB", "sipActiveProxySvr"), ("FD-ONU-MIB", "sipRegSvrIp"), ("FD-ONU-MIB", "sipRegSvrPort"), ("FD-ONU-MIB", "sipBakRegSvrIp"), ("FD-ONU-MIB", "sipBakRegSvrPort"), ("FD-ONU-MIB", "sipOutBoundSvrIp"), ("FD-ONU-MIB", "sipOutBoundSvrPort"), ("FD-ONU-MIB", "sipRegInterval"), ("FD-ONU-MIB", "sipHbSwitch"), ("FD-ONU-MIB", "sipHbCycle"), ("FD-ONU-MIB", "sipHbCount"), ("FD-ONU-MIB", "sipUserAccount"), ("FD-ONU-MIB", "sipUserName"), ("FD-ONU-MIB", "sipUserPasswd"), ("FD-ONU-MIB", "sipDigitMapLen"), ("FD-ONU-MIB", "sipDigitMap"), ("FD-ONU-MIB", "onuIADVoiceFaxMode"), ("FD-ONU-MIB", "onuIADVoiceFaxControl"), ("FD-ONU-MIB", "onuIADOperStatusSet"), ("FD-ONU-MIB", "onuIADOperStatus"), ("FD-ONU-MIB", "onuIADPotsStatus"), ("FD-ONU-MIB", "onuIADPotsServiceState"), ("FD-ONU-MIB", "onuIADPotsCodeMode"), ("FD-ONU-MIB", "onuIADPotsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOnuVoiceGroup = fdOnuVoiceGroup.setStatus('current')
if mibBuilder.loadTexts: fdOnuVoiceGroup.setDescription('Description.')
fdOnuCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 2))
fdOnuCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 34592, 1, 3, 4, 15, 2, 1)).setObjects(("FD-ONU-MIB", "fdOnuBaseManageGroup"), ("FD-ONU-MIB", "fdOnuPortParaGroup"), ("FD-ONU-MIB", "onuIgmpSnoopGroup"), ("FD-ONU-MIB", "fdOnuLpTestGroup"), ("FD-ONU-MIB", "fdOnuVoiceGroup"), ("FD-ONU-MIB", "fdOnuAdvanceManageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOnuCompliance = fdOnuCompliance.setStatus('current')
if mibBuilder.loadTexts: fdOnuCompliance.setDescription('The compliance statement')
mibBuilder.exportSymbols("FD-ONU-MIB", h248RegMode=h248RegMode, sipHbCount=sipHbCount, onuAdvancedConfigTable=onuAdvancedConfigTable, onuVoipPortId=onuVoipPortId, onuQueueCfgTable=onuQueueCfgTable, h248RtpTIDMode=h248RtpTIDMode, uniPortEnable=uniPortEnable, onuBaseManageTable=onuBaseManageTable, onuIADVoiceFaxControl=onuIADVoiceFaxControl, onuIADParamCfgEntry=onuIADParamCfgEntry, sipRegSvrPort=sipRegSvrPort, fdOnuLpTestGroup=fdOnuLpTestGroup, h248ParamCfgEntry=h248ParamCfgEntry, sipOutBoundSvrPort=sipOutBoundSvrPort, onuLoopTestTable=onuLoopTestTable, onuDynMacOperEntry=onuDynMacOperEntry, onuIADProtocol=onuIADProtocol, portIngressPolicingEntry=portIngressPolicingEntry, onuUpgradeStat=onuUpgradeStat, onuChipApp0Ver=onuChipApp0Ver, onuDynMac=onuDynMac, h248RtpTIDCount=h248RtpTIDCount, h248MgcIp=h248MgcIp, onuIADParamCfgTable=onuIADParamCfgTable, onuIADFaxCfgTable=onuIADFaxCfgTable, h248UserTIDTable=h248UserTIDTable, sipUserCfgEntry=sipUserCfgEntry, onuChipProCode=onuChipProCode, onuIADPOTSStatusTable=onuIADPOTSStatusTable, h248BakMgcPort=h248BakMgcPort, onuIADPotsServiceState=onuIADPotsServiceState, sipBakRegSvrIp=sipBakRegSvrIp, registeredLLIDNum=registeredLLIDNum, sipDigitMapLen=sipDigitMapLen, onuDynMacOperation=onuDynMacOperation, h248ParamCfgTable=h248ParamCfgTable, onuDynMacAddr=onuDynMacAddr, supportUniPorts=supportUniPorts, onuLaserRxPower=onuLaserRxPower, uniPortAutoNego=uniPortAutoNego, onuFwRev=onuFwRev, onuIADPppoeMode=onuIADPppoeMode, sipBakRegSvrPort=sipBakRegSvrPort, onuIADSwTime=onuIADSwTime, portIngressPolicingTable=portIngressPolicingTable, fdOnuCompliance=fdOnuCompliance, h248HbCount=h248HbCount, onuDynMacIndex=onuDynMacIndex, sipActiveProxySvr=sipActiveProxySvr, onuIADVoipNum=onuIADVoipNum, onuUserInfo=onuUserInfo, onuIADOperStatusSet=onuIADOperStatusSet, onuIADPppoeUsrnm=onuIADPppoeUsrnm, onuChipApp1Ver=onuChipApp1Ver, onuLoopTestEntry=onuLoopTestEntry, h248UserTIDName=h248UserTIDName, onuIADPOTSStatusEntry=onuIADPOTSStatusEntry, sipHbCycle=sipHbCycle, onuQueueCfgEntry=onuQueueCfgEntry, uniPortRstpState=uniPortRstpState, sipParamCfgTable=sipParamCfgTable, h248MgPort=h248MgPort, potsId=potsId, onuAddiVlanEthType=onuAddiVlanEthType, sipBakProxySvrPort=sipBakProxySvrPort, fdOnu=fdOnu, onuIADTagMode=onuIADTagMode, maxTrafficOutputRate=maxTrafficOutputRate, onuIADFaxCfgEntry=onuIADFaxCfgEntry, onuIADSipParam=onuIADSipParam, h248HbCycle=h248HbCycle, fdOnuConformance=fdOnuConformance, onuChipDiagVer=onuChipDiagVer, onuIADPotsStatus=onuIADPotsStatus, h248ActiveMgc=h248ActiveMgc, onuDynMacTable=onuDynMacTable, onuIADPppoePw=onuIADPppoePw, onuIADH248Param=onuIADH248Param, h248RtpTIDInfoEntry=h248RtpTIDInfoEntry, onuRstpEnable=onuRstpEnable, onuBaseMac=onuBaseMac, onuIADSwVersion=onuIADSwVersion, onuOperation=onuOperation, maxTrafficInputRate=maxTrafficInputRate, onuPortId=onuPortId, inputModule=inputModule, onuIADPotsCodeMode=onuIADPotsCodeMode, igmpSnoopGroupData=igmpSnoopGroupData, onuAdvancedConfigEntry=onuAdvancedConfigEntry, onuChipVer=onuChipVer, policingTrafficType=policingTrafficType, maxAllowedLLIDs=maxAllowedLLIDs, sipHbSwitch=sipHbSwitch, h248MID=h248MID, onuIADInfoEntry=onuIADInfoEntry, onuDynMacEntry=onuDynMacEntry, sipOutBoundSvrIp=sipOutBoundSvrIp, uniPortDuplex=uniPortDuplex, igmpSnoopParaData=igmpSnoopParaData, onuChipProVer=onuChipProVer, h248RtpTIDDigitLen=h248RtpTIDDigitLen, onuChipId=onuChipId, sipParamCfgEntry=sipParamCfgEntry, onuIADPOTSEnableEntry=onuIADPOTSEnableEntry, sipProxySvrPort=sipProxySvrPort, onuIADPOTSEnableTable=onuIADPOTSEnableTable, onuCatv=onuCatv, onuChipInfoTable=onuChipInfoTable, sipUserCfgTable=sipUserCfgTable, h248FstRtpTIDName=h248FstRtpTIDName, uniPortSpeed=uniPortSpeed, fdOnuVoiceGroup=fdOnuVoiceGroup, onuIADVoiceSVlan=onuIADVoiceSVlan, sipUserPasswd=sipUserPasswd, onuIADInfoTable=onuIADInfoTable, onuLoopTestData=onuLoopTestData, igmpSnooping=igmpSnooping, onuDeviceType=onuDeviceType, onuAdvancedManage=onuAdvancedManage, onuPortVlanTable=onuPortVlanTable, h248RtpTIDInfoTable=h248RtpTIDInfoTable, sipUserAccount=sipUserAccount, igmpSnoopParaEntry=igmpSnoopParaEntry, onuIADOperTable=onuIADOperTable, onuVoiceService=onuVoiceService, onuIADMode=onuIADMode, onuQueueCfgData=onuQueueCfgData, sipProxySvrIp=sipProxySvrIp, sipMgPort=sipMgPort, onuUniPortTable=onuUniPortTable, onuFactorySerial=onuFactorySerial, sipRegSvrIp=sipRegSvrIp, uniPortId=uniPortId, onuPortQos=onuPortQos, onuIADPotsId=onuIADPotsId, onuUserTrafficEnable=onuUserTrafficEnable, uniPortMacEntryLimit=uniPortMacEntryLimit, portEgressShappingEntry=portEgressShappingEntry, onuDynMacOperTable=onuDynMacOperTable, sipRegInterval=sipRegInterval, h248HbMode=h248HbMode, igmpSnoopGroupTable=igmpSnoopGroupTable, h248RtpTIDDigitBegin=h248RtpTIDDigitBegin, fdOnuBaseManageGroup=fdOnuBaseManageGroup, fdOnuAdvanceManageGroup=fdOnuAdvanceManageGroup, onuLinkIdMap=onuLinkIdMap, igmpSnoopParaTable=igmpSnoopParaTable, onuIADMac=onuIADMac, onuIADVoicePriority=onuIADVoicePriority, onuAclRuleCfgData=onuAclRuleCfgData, sipUserName=sipUserName, onuIgmpSnoopGroup=onuIgmpSnoopGroup, uniPortUserInfo=uniPortUserInfo, onuIADPotsEnable=onuIADPotsEnable, onuIADNetMask=onuIADNetMask, sipDigitMap=sipDigitMap, PYSNMP_MODULE_ID=fdOnu, onuOnLineStatus=onuOnLineStatus, uniPortLink=uniPortLink, onuPortVlanData=onuPortVlanData, h248MgcPort=h248MgcPort, onuIADIpAddr=onuIADIpAddr, onuLaserTxPower=onuLaserTxPower, onuLoopTestResult=onuLoopTestResult, portEgressShappingTable=portEgressShappingTable, onuAclRuleTable=onuAclRuleTable, onuBootVer=onuBootVer, onuHwRev=onuHwRev, h248RtpTIDNum=h248RtpTIDNum, h248BakMacIp=h248BakMacIp, sipBakProxySvrIp=sipBakProxySvrIp, onuBaseManageEntry=onuBaseManageEntry, fdOnuCompliances=fdOnuCompliances, fdOnuPortParaGroup=fdOnuPortParaGroup, outputModule=outputModule, h248RtpTIDCfgTable=h248RtpTIDCfgTable, onuIADVoiceFaxMode=onuIADVoiceFaxMode, uniPortMacAgeTime=uniPortMacAgeTime, onuPortVlanEntry=onuPortVlanEntry, onuId=onuId, scheduleAlgorithm=scheduleAlgorithm, onuPersVer=onuPersVer, onuLocalSwitch=onuLocalSwitch, onuIADDefaultGw=onuIADDefaultGw, fdOnuGroups=fdOnuGroups, onuMgmtType=onuMgmtType, uniPortFowardMode=uniPortFowardMode, onuIADOperStatus=onuIADOperStatus, uniPortFlowCtrl=uniPortFlowCtrl, onuRangeValue=onuRangeValue, igmpSnoopGroupEntry=igmpSnoopGroupEntry, h248UserTIDEntry=h248UserTIDEntry, onuIADOperEntry=onuIADOperEntry, onuIADVoiceCVlan=onuIADVoiceCVlan, onuChipInfoEntry=onuChipInfoEntry, onuAclRuleEntry=onuAclRuleEntry, h248RtpTIDPrefix=h248RtpTIDPrefix, onuIntPortId=onuIntPortId, sipDigitMapEntry=sipDigitMapEntry, onuUniPortEntry=onuUniPortEntry, sipDigitMapTable=sipDigitMapTable, h248RtpTIDCfgEntry=h248RtpTIDCfgEntry)
