#
# PySNMP MIB module AIILINKTABLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIILINKTABLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity, Counter64, iso, Unsigned32, Gauge32, Integer32, enterprises, Bits, IpAddress, MibIdentifier, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity", "Counter64", "iso", "Unsigned32", "Gauge32", "Integer32", "enterprises", "Bits", "IpAddress", "MibIdentifier", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16))
aiLink = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 16, 2))
if mibBuilder.loadTexts: aiLink.setLastUpdated('9912101700Z')
if mibBuilder.loadTexts: aiLink.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiLink.setContactInfo('Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, Ohio 43017-3271 Tel: 614-798-2000 Fax: 614-798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiLink.setDescription('The MIB module for the link table.')
class AIIifType(TextualConvention, Integer32):
    description = 'This data type is used as the syntax of the ifType object in the definition of the AII Link Table. This is based on the IANAifType, as defined in rfc1573, with the exception of the tl1 type, which begins with us. It is defined as a very large number, in the hope that the IANA will not catch up with us. If they do, we must modify this textual convention.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 6, 18, 19, 22, 23, 28, 32, 37, 38, 40, 48, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033))
    namedValues = NamedValues(("other", 1), ("ethernet-csmacd", 6), ("ds1", 18), ("e1", 19), ("propPointToPointSerial", 22), ("ppp", 23), ("slip", 28), ("frameRelay", 32), ("atm", 37), ("miox25", 38), ("x25ple", 40), ("modem", 48), ("tl1", 1024), ("ttl1", 1025), ("e2a", 1026), ("tbos", 1027), ("tabs", 1028), ("asyncTl1", 1029), ("bridge", 1030), ("sm100BaseFX", 1031), ("gasp", 1032), ("pppAsynchronous", 1033))

aiLinkTable = MibTable((1, 3, 6, 1, 4, 1, 539, 16, 2, 1), )
if mibBuilder.loadTexts: aiLinkTable.setStatus('current')
if mibBuilder.loadTexts: aiLinkTable.setDescription(' Entries define links in the system. Each link consists of a physical interface associated with one or more network interfaces. That is, it is the intention of this table to define the protocol stacks in use on an AII SLC. ')
aiLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1), ).setIndexNames((0, "AIILINKTABLE-MIB", "aiLinkIndex"))
if mibBuilder.loadTexts: aiLinkEntry.setStatus('current')
if mibBuilder.loadTexts: aiLinkEntry.setDescription('Entries of aiLinkTable.')
aiLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkIndex.setStatus('current')
if mibBuilder.loadTexts: aiLinkIndex.setDescription(' A value that distinguishes this entry from another entry. Entries in this table are referenced from other objects which identify links. ')
aiLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 2), AIIifType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkType.setStatus('current')
if mibBuilder.loadTexts: aiLinkType.setDescription(' A value that distinguishes, in general, what kind of link this is. Examples include propPointToPointSerial(22), -- proprietary serial x25ple(40) and frameRelay(32), -- DTE only ')
aiLinkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkDescr.setStatus('current')
if mibBuilder.loadTexts: aiLinkDescr.setDescription(' A description of the type of link that this is. ')
aiLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 4), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: aiLinkIfIndex.setDescription(' The index into the interfaces group of MIB-II, which defines what type of interface this link is. This definition describes a protocol stack in only the most general way. The interface which appears here may have other interfaces stacked beneath it which are also in the interface table. ')
aiLinkIfIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 5), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkIfIndex1.setStatus('current')
if mibBuilder.loadTexts: aiLinkIfIndex1.setDescription(' The index into the interfaces group of MIB-II, which defines what type of interface is at the bottom of this link (stack). ')
aiLinkIfIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 6), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkIfIndex2.setStatus('current')
if mibBuilder.loadTexts: aiLinkIfIndex2.setDescription(' The index into the interfaces group of MIB-II, which defines what type of interface sits on top of and talks to the interface defined by aiLinkIfIndex1 ')
aiLinkIfIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 7), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkIfIndex3.setStatus('current')
if mibBuilder.loadTexts: aiLinkIfIndex3.setDescription(' The index into the interfaces group of MIB-II, which defines what type of interface sits on top of and talks to the interface defined by aiLinkIfIndex2 ')
aiLinkIfIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 8), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkIfIndex4.setStatus('current')
if mibBuilder.loadTexts: aiLinkIfIndex4.setDescription(' The index into the interfaces group of MIB-II, which defines what type of interface sits on top of and talks to the interface defined by aiLinkIfIndex3. ')
aiLinkPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rs232", 1), ("rs530", 2), ("v35", 3), ("ethernet-csmacd", 4), ("ds1", 5), ("e1", 6), ("fiber", 7), ("rs530m", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkPhysIf.setStatus('current')
if mibBuilder.loadTexts: aiLinkPhysIf.setDescription(' The physical interface to be used for this link. ')
aiLinkX25Table = MibTable((1, 3, 6, 1, 4, 1, 539, 16, 2, 2), )
if mibBuilder.loadTexts: aiLinkX25Table.setStatus('current')
if mibBuilder.loadTexts: aiLinkX25Table.setDescription(' Entries define additional X.25 parameters not covered in the standard MIB. These parameters are applied on a per link basis for the links in the system. This table contains two entries for each of the x25 links of the card. These correspond to the Administrative and Operating values of the MIB objects. The first half of the table, contains the Administrative values for each link; they will take effect the next time the corresponding link is initialized. The second group reports the parameters currently in effect for the links; these are read-only. ')
aiLinkX25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 16, 2, 2, 1), ).setIndexNames((0, "AIILINKTABLE-MIB", "aiLinkX25Index"))
if mibBuilder.loadTexts: aiLinkX25Entry.setStatus('current')
if mibBuilder.loadTexts: aiLinkX25Entry.setDescription('Entries of aiLinkX25Table.')
aiLinkX25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkX25Index.setStatus('current')
if mibBuilder.loadTexts: aiLinkX25Index.setDescription(' A value that distinguishes this entry from another entry. Entries in this table are referenced from other objects which identify links. ')
aiLinkX25Negotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkX25Negotiation.setStatus('current')
if mibBuilder.loadTexts: aiLinkX25Negotiation.setDescription(' This entry determines whether or not Facility Negotiation is enabled for circuits established on this X.25 link. When disabled, the circuits will still respond to X.25 facility negotiation requests, but they will not initiate a negotiation session. ')
aiLinkX25LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("passive", 2), ("extended", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkX25LinkMode.setStatus('current')
if mibBuilder.loadTexts: aiLinkX25LinkMode.setDescription(' This entry determines whether link behaves as a normal X.25 link or a BX.25-style passive link, or BX.25-style extended passive link. ')
aiLinkConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 2, 3))
aiLinkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 2, 3, 1))
aiLinkCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 2, 3, 2))
aiLinkCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 539, 16, 2, 3, 2, 1)).setObjects(("AIILINKTABLE-MIB", "aiLinkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aiLinkCompliance = aiLinkCompliance.setStatus('current')
if mibBuilder.loadTexts: aiLinkCompliance.setDescription('The compliance statement for SNMPv2 entities which have AII link tables.')
aiLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 539, 16, 2, 3, 1, 1)).setObjects(("AIILINKTABLE-MIB", "aiLinkIndex"), ("AIILINKTABLE-MIB", "aiLinkType"), ("AIILINKTABLE-MIB", "aiLinkDescr"), ("AIILINKTABLE-MIB", "aiLinkIfIndex"), ("AIILINKTABLE-MIB", "aiLinkIfIndex1"), ("AIILINKTABLE-MIB", "aiLinkIfIndex2"), ("AIILINKTABLE-MIB", "aiLinkIfIndex3"), ("AIILINKTABLE-MIB", "aiLinkIfIndex4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aiLinkGroup = aiLinkGroup.setStatus('current')
if mibBuilder.loadTexts: aiLinkGroup.setDescription('A collection of objects providing information applicable to all AII link tables.')
aiLinkT1Table = MibTable((1, 3, 6, 1, 4, 1, 539, 16, 2, 4), )
if mibBuilder.loadTexts: aiLinkT1Table.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1Table.setDescription('Entries define additional T1 parameters not covered in the standard MIB. These parameters are applied on a per link basis for the links in the system.')
aiLinkT1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 16, 2, 4, 1), ).setIndexNames((0, "AIILINKTABLE-MIB", "aiLinkT1Index"))
if mibBuilder.loadTexts: aiLinkT1Entry.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1Entry.setDescription('Entries of aiLinkT1Table.')
aiLinkT1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 4, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkT1Index.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1Index.setDescription('A value that distinguishes this entry from another entry. Entries in this table are referenced from other objects which identify links.')
aiLinkT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lbo0to133ft", 1), ("lbo133to266ft", 2), ("lbo266to399ft", 3), ("lbo399to533ft", 4), ("lbo533to655ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkT1LineBuildOut.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1LineBuildOut.setDescription('Line build out of this T1 link, measured in feet. The following values are accepted: lbo0to133ft(1) lbo133to266ft(2) lbo266to399ft(3) lbo399to533ft(4) lbo533to655ft(5)')
aiLinkT1TimeslotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tss56K", 1), ("tss64K", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkT1TimeslotSpeed.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1TimeslotSpeed.setDescription('This is the time slot speed, which determines the overall bandwidth of the T1 link. At 56K, the T1 link will have a maximum bandwidth of 1.344kbps. At 64K, the T1 link will have a maximum bandwidth of 1.536kbps. 56K is required if the line code is AMI.')
aiLinkT1TimeslotsString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkT1TimeslotsString.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1TimeslotsString.setDescription('The timeslots enabled on the T1 for passing data.')
aiLinkT1Timeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 4, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkT1Timeslots.setStatus('current')
if mibBuilder.loadTexts: aiLinkT1Timeslots.setDescription('Internal representation of the timeslots.')
aiLinkE1Table = MibTable((1, 3, 6, 1, 4, 1, 539, 16, 2, 5), )
if mibBuilder.loadTexts: aiLinkE1Table.setStatus('current')
if mibBuilder.loadTexts: aiLinkE1Table.setDescription('Entries define additional E1 parameters not covered in the standard MIB. These parameters are applied on a per link basis for the links in the system.')
aiLinkE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 16, 2, 5, 1), ).setIndexNames((0, "AIILINKTABLE-MIB", "aiLinkE1Index"))
if mibBuilder.loadTexts: aiLinkE1Entry.setStatus('current')
if mibBuilder.loadTexts: aiLinkE1Entry.setDescription('Entries of aiLinkE1Table.')
aiLinkE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 5, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkE1Index.setStatus('current')
if mibBuilder.loadTexts: aiLinkE1Index.setDescription('A value that distinguishes this entry from another entry. Entries in this table are referenced from other objects which identify links.')
aiLinkE1TimeslotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tss56K", 1), ("tss64K", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkE1TimeslotSpeed.setStatus('current')
if mibBuilder.loadTexts: aiLinkE1TimeslotSpeed.setDescription('This is the time slot speed, which determines the overall bandwidth of the E1 link. At 56K, the E1 link will have a maximum bandwidth of 1.736kbps. At 64K, the E1 link will have a maximum bandwidth of 1.984kbps. 56K is required if the line code is AMI.')
aiLinkE1TimeslotsString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLinkE1TimeslotsString.setStatus('current')
if mibBuilder.loadTexts: aiLinkE1TimeslotsString.setDescription('The timeslots enabled on the E1 for passing data.')
aiLinkE1Timeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 2, 5, 1, 4), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLinkE1Timeslots.setStatus('current')
if mibBuilder.loadTexts: aiLinkE1Timeslots.setDescription('Internal representation of the timeslots.')
mibBuilder.exportSymbols("AIILINKTABLE-MIB", aiLinkT1Entry=aiLinkT1Entry, aiLinkT1Timeslots=aiLinkT1Timeslots, PositiveInteger=PositiveInteger, aiLinkTable=aiLinkTable, aiLink=aiLink, aiLinkE1Table=aiLinkE1Table, aiLinkE1TimeslotSpeed=aiLinkE1TimeslotSpeed, aiLinkX25Entry=aiLinkX25Entry, aiLinkE1Timeslots=aiLinkE1Timeslots, aiLinkE1Index=aiLinkE1Index, aiSLC2=aiSLC2, aiLinkGroup=aiLinkGroup, aiLinkE1TimeslotsString=aiLinkE1TimeslotsString, aiLinkT1Index=aiLinkT1Index, aiLinkType=aiLinkType, AIIifType=AIIifType, aiLinkIfIndex1=aiLinkIfIndex1, aiLinkPhysIf=aiLinkPhysIf, aiLinkX25LinkMode=aiLinkX25LinkMode, aiLinkConformance=aiLinkConformance, aiLinkGroups=aiLinkGroups, aiLinkT1TimeslotSpeed=aiLinkT1TimeslotSpeed, aiLinkCompliances=aiLinkCompliances, aiLinkCompliance=aiLinkCompliance, aii=aii, aiLinkIndex=aiLinkIndex, aiLinkX25Index=aiLinkX25Index, IfIndexType=IfIndexType, aiLinkEntry=aiLinkEntry, aiLinkIfIndex3=aiLinkIfIndex3, aiLinkDescr=aiLinkDescr, aiLinkX25Negotiation=aiLinkX25Negotiation, aiLinkT1Table=aiLinkT1Table, aiLinkIfIndex4=aiLinkIfIndex4, aiLinkT1LineBuildOut=aiLinkT1LineBuildOut, aiLinkE1Entry=aiLinkE1Entry, aiLinkT1TimeslotsString=aiLinkT1TimeslotsString, aiLinkIfIndex=aiLinkIfIndex, aiLinkX25Table=aiLinkX25Table, aiLinkIfIndex2=aiLinkIfIndex2, PYSNMP_MODULE_ID=aiLink)
