#
# PySNMP MIB module Nortel-Magellan-Passport-VnetEuroIsdnMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-VnetEuroIsdnMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
StorageType, DisplayString, RowStatus, Counter32, Gauge32, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "StorageType", "DisplayString", "RowStatus", "Counter32", "Gauge32", "Unsigned32")
Link, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
sigChan, sigChanIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChan", "sigChanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, IpAddress, Counter64, ModuleIdentity, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, iso, Unsigned32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "IpAddress", "Counter64", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "iso", "Unsigned32", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vnetEuroIsdnMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138))
sigChanEIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14))
sigChanEIsdnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 1), )
if mibBuilder.loadTexts: sigChanEIsdnRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnRowStatusTable.setDescription('This entry controls the addition and deletion of sigChanEIsdn components.')
sigChanEIsdnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnRowStatusEntry.setDescription('A single entry in the table represents a single sigChanEIsdn component.')
sigChanEIsdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChanEIsdn components. These components can be added and deleted.')
sigChanEIsdnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanEIsdnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnStorageType.setDescription('This variable represents the storage type value for the sigChanEIsdn tables.')
sigChanEIsdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: sigChanEIsdnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnIndex.setDescription('This variable represents the index for the sigChanEIsdn tables.')
sigChanEIsdnL2Table = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11), )
if mibBuilder.loadTexts: sigChanEIsdnL2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnL2Table.setDescription('This group specifies the provisionable layer 2 attributes of the Euro ISDN (ETSI-T) protocol.')
sigChanEIsdnL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnL2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnL2Entry.setDescription('An entry in the sigChanEIsdnL2Table.')
sigChanEIsdnT23 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnT23.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnT23.setDescription('This attribute specifies duration of the layer 2 enable request timer.')
sigChanEIsdnT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnT200.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnT200.setDescription('This attribute specifies the maximum elapsed time between a layer 2 frame and its acknowledgment.')
sigChanEIsdnN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnN200.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnN200.setDescription('This attribute specifies the maximum number of re-transmissions of a layer 2 frame.')
sigChanEIsdnT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 40)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnT203.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnT203.setDescription('This attribute specifies the maximum time during which layer 2 frames may be absent. Expiry triggers a check on whether the far end is alive.')
sigChanEIsdnCircuitSwitchedK = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnCircuitSwitchedK.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnCircuitSwitchedK.setDescription('This attribute specifies the maximum number of sequentially numbered I frames (that is, window size (k)) that may be unacknowledged at any given time for a SAP supporting primary rate (64kbit/sec) signalling.')
sigChanEIsdnL3Table = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 12), )
if mibBuilder.loadTexts: sigChanEIsdnL3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnL3Table.setDescription('This group represents the provisionable Layer 3 timer attributes of a the Euro ISDN (ETSI-T) protocol.')
sigChanEIsdnL3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnL3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnL3Entry.setDescription('An entry in the sigChanEIsdnL3Table.')
sigChanEIsdnT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnT310.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnT310.setDescription('This attribute specifies duration of the call proceeding state timer.')
sigChanEIsdnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 13), )
if mibBuilder.loadTexts: sigChanEIsdnProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnProvTable.setDescription('This group defines the general options of the D-channel signalling link.')
sigChanEIsdnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnProvEntry.setDescription('An entry in the sigChanEIsdnProvTable.')
sigChanEIsdnSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnSide.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnSide.setDescription('This attribute specifies whether the interface is the network or user side of the connection. The parameter applies to both the layer 2 and layer 3 of the interface. In addition, if this attribute is set to network, then the interface is master during channel negotiation. If this attribute is set to user, then the interface is slave during channel negotiation.')
sigChanEIsdnMaxNonCallConcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnMaxNonCallConcurrent.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnMaxNonCallConcurrent.setDescription('This attribute specifies the maximum number of simultaneous active non call-associated sessions that are allowed. Reduction of the value does not impact NCAS sessions already in progress.')
sigChanEIsdnOverlapSending = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnOverlapSending.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOverlapSending.setDescription('This attribute specifies whether overlap sending to the PBX is enabled.')
sigChanEIsdnOverlapReceiving = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnOverlapReceiving.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOverlapReceiving.setDescription('This attribute specifies whether overlap receiving from the PBX is enabled.')
sigChanEIsdnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 14), )
if mibBuilder.loadTexts: sigChanEIsdnStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
sigChanEIsdnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnStateEntry.setDescription('An entry in the sigChanEIsdnStateTable.')
sigChanEIsdnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
sigChanEIsdnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
sigChanEIsdnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
sigChanEIsdnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 15), )
if mibBuilder.loadTexts: sigChanEIsdnStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnStatsTable.setDescription('This group provides the statistical attributes for the SigChan/x EuroIsdn component.')
sigChanEIsdnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnStatsEntry.setDescription('An entry in the sigChanEIsdnStatsTable.')
sigChanEIsdnTotalCallsToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnTotalCallsToIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnTotalCallsToIf.setDescription('This attribute counts the total number of calls that have been made to the interface. The value wraps to zero when it exceeds its maximum.')
sigChanEIsdnTotalCallsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnTotalCallsFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnTotalCallsFromIf.setDescription('This attribute counts the total number of calls that have been made from the interface. The value wraps to zero when it exceeds its maximum.')
sigChanEIsdnNonCallAssocSessionsToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnNonCallAssocSessionsToIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnNonCallAssocSessionsToIf.setDescription('This attribute counts the total number of non call-associated sessions that have been made to the interface. The value wraps to zero when it exceeds its maximum.')
sigChanEIsdnNonCallAssocSessionsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnNonCallAssocSessionsFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnNonCallAssocSessionsFromIf.setDescription('This attribute counts the total number of non call-associated sessions that have been made from the interface. The value wraps to zero when it exceeds its maximum.')
sigChanEIsdnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16), )
if mibBuilder.loadTexts: sigChanEIsdnOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOperTable.setDescription('This group provides the operational attributes for the SigChan/x EuroIsdn component.')
sigChanEIsdnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOperEntry.setDescription('An entry in the sigChanEIsdnOperTable.')
sigChanEIsdnActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnActiveChannels.setDescription('This attribute indicates the number of currently active channels. This includes channels used by both, data and voice calls.')
sigChanEIsdnActiveVoiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnActiveVoiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnActiveVoiceChannels.setDescription('This attribute indicates the number of channels that are currently used by voice calls. This includes modem calls.')
sigChanEIsdnActiveDataChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnActiveDataChannels.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnActiveDataChannels.setDescription('This attribute indicates the number of channels that are currently used by data calls. This does not include modem data.')
sigChanEIsdnPeakActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnPeakActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnPeakActiveChannels.setDescription('This attribute indicates the maximum value of the activeChannels attribute during the last polling period.')
sigChanEIsdnPeakActiveVoiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnPeakActiveVoiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnPeakActiveVoiceChannels.setDescription('This attribute indicates the maximum value of the activeVoiceChannels attribute during the last polling period.')
sigChanEIsdnPeakActiveDataChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnPeakActiveDataChannels.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnPeakActiveDataChannels.setDescription('This attribute indicates the maximum value of the activeDataChannels attribute during the last polling period.')
sigChanEIsdnDChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 0), ("establishing", 1), ("established", 2), ("enabling", 3), ("inService", 4), ("restarting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnDChanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnDChanStatus.setDescription('This attribute indicates the state of the D-channel. outOfService means that there is no layer 2 or layer 3 connectivity to the PBX. establishing means that the signalling channel is attempting to stage the layer 2. established means that the layer 2 is enabled. If the signalling channel stays in the established state, then it is waiting for a restart from the PBX. enabling means that the resources for processing calls are being initialized. If the signalling channel stays in the enabling state then it is waiting for a restart acknowledgment from the PBX. inService means that the resources for processing calls are available. restarting means that the resources for call processing are being initialized.')
sigChanEIsdnToolsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 17), )
if mibBuilder.loadTexts: sigChanEIsdnToolsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnToolsTable.setDescription('This contains a series of operational attributes which turn on and off several kinds of tracing.')
sigChanEIsdnToolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnToolsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnToolsEntry.setDescription('An entry in the sigChanEIsdnToolsTable.')
sigChanEIsdnTracing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 17, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnTracing.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnTracing.setDescription("This attribute defines which types of tracing are active on the signalling channel. The tracing messages are sent to the debug stream. To see the messages the agentQueueSize attribute of the Lp/x Eng Ds/debug component must be greater than 0 and the operator's NMIS session must have the debug stream included in its data stream list (for example: set Nmis Telnet Session/1 dataStreams deb). Several types of tracing can be enabled simultaneously. Note that tracing consumes additional CPU resources and slows down call processing on a heavily loaded card. If there is message block exhaustion tracing is suspended for a period of time and then automatically re-enabled. An alarm is generated on tracing suspension and resumption. This mechanism protects the function processor against excessive numbers of tracing messages. Types of tracing include: protocolErrors - get details of any protocol errors which are occurring. Protocol errors are also reported in summary form as alarms. q931Summary - summary of the Q.931 messages on the signalling link. q931Hex - Q.931 messages displayed in hex format. Useful to determine protocol compliance in case of errors reported on local or remote ends. q931Symbolic - Q.931 messages parsed to give maximum detail. Useful for understanding content of messages flowing on the link. portHex - Q.921 messages in hex format being sent and received on the link. Description of bits: protocolErrors(0) q931Summary(1) q931Hex(2) q931Symbolic(3) portHex(4)")
sigChanEIsdnOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 18), )
if mibBuilder.loadTexts: sigChanEIsdnOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOptTable.setDescription('This group specifies the provisionable attributes specific to the Euro ISDN (ETSI-T) protocol.')
sigChanEIsdnOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"))
if mibBuilder.loadTexts: sigChanEIsdnOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnOptEntry.setDescription('An entry in the sigChanEIsdnOptTable.')
sigChanEIsdnVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("etsiGeneric", 0), ("austria", 1), ("germany", 2))).clone('etsiGeneric')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnVariant.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnVariant.setDescription('This attribute specifies the specific variant of the Euro ISDN (ETSI- T) protocol. Supported variants are: etsiGeneric - provides generic ETSI-T protocol. Only proxy of the NETWORK side of the protocol is implemented, austria - provides ETSI-T protocol variant as per the Austrian national specification. Only the USER side of the protocol is implemented, germany - provides ETSI-T protocol variant as per the German national specification. Only the USER side of the protocol is implemented.')
sigChanEIsdnConnectServiceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 18, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnConnectServiceTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnConnectServiceTimer.setDescription("This attribute specifies duration of the 'await connection' supervisory timer which applies to non call-associated sessions providing bearer-independent connection-oriented transport for supplementary services. The timer is started at the ingress Passport when a REGISTER message is received from the source PBX and stopped when a virtual circuit with the egress Passport is established. If the timer expires, the non call-associated session is cleared. The 'await connection' timer (attribute connectServiceTimer) together with 'await response' timer (attribute responseServiceTimer) provide equivalent of the T-ACTIVATE timer described in the relevant supplementary service specifications. A change of the timer value does not apply to timers already running.")
sigChanEIsdnResponseServiceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 18, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnResponseServiceTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnResponseServiceTimer.setDescription("This attribute specifies duration of the 'await response' supervisory timer which applies to non call-associated sessions providing bearer-independent connection-oriented transport for supplementary services. The timer is started at the ingress Passport when creation of a virtual circuit with the egress Passport is confirmed and stopped when the first message from the destination PBX is received. If the timer expires, the non call-associated session is cleared. The 'await connection' timer (attribute connectServiceTimer) together with 'await response' timer (attribute responseServiceTimer) provide equivalent of the T-ACTIVATE timer described in the relevant supplementary service specifications. A change of the timer value does not apply to timers already running.")
sigChanEIsdnLifetimeServiceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnLifetimeServiceTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnLifetimeServiceTimer.setDescription('This attribute specifies duration of the service lifetime supervisory timer which applies to non call-associated sessions providing bearer-independent connection-oriented transport for supplementary services. The timer limits the duration of a virtual call. It is started at the ingress Passport at the moment the first response message from the destination PBX has been received and stopped when the non call-associated session is released. If the timer expires, the non call-associated session is cleared. This timer is equivalent to the T-CCBS6 timer described in the relevant supplementary service specifications. A change of the timer value does not apply to timers already running.')
sigChanEIsdnFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2))
sigChanEIsdnFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 1), )
if mibBuilder.loadTexts: sigChanEIsdnFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerRowStatusTable.setDescription('This entry controls the addition and deletion of sigChanEIsdnFramer components.')
sigChanEIsdnFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnFramerIndex"))
if mibBuilder.loadTexts: sigChanEIsdnFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerRowStatusEntry.setDescription('A single entry in the table represents a single sigChanEIsdnFramer component.')
sigChanEIsdnFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChanEIsdnFramer components. These components cannot be added nor deleted.')
sigChanEIsdnFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanEIsdnFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerStorageType.setDescription('This variable represents the storage type value for the sigChanEIsdnFramer tables.')
sigChanEIsdnFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: sigChanEIsdnFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerIndex.setDescription('This variable represents the index for the sigChanEIsdnFramer tables.')
sigChanEIsdnFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 10), )
if mibBuilder.loadTexts: sigChanEIsdnFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
sigChanEIsdnFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnFramerIndex"))
if mibBuilder.loadTexts: sigChanEIsdnFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerProvEntry.setDescription('An entry in the sigChanEIsdnFramerProvTable.')
sigChanEIsdnFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanEIsdnFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
sigChanEIsdnFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 12), )
if mibBuilder.loadTexts: sigChanEIsdnFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
sigChanEIsdnFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnFramerIndex"))
if mibBuilder.loadTexts: sigChanEIsdnFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerStateEntry.setDescription('An entry in the sigChanEIsdnFramerStateTable.')
sigChanEIsdnFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
sigChanEIsdnFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
sigChanEIsdnFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
sigChanEIsdnFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13), )
if mibBuilder.loadTexts: sigChanEIsdnFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
sigChanEIsdnFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnIndex"), (0, "Nortel-Magellan-Passport-VnetEuroIsdnMIB", "sigChanEIsdnFramerIndex"))
if mibBuilder.loadTexts: sigChanEIsdnFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerStatsEntry.setDescription('An entry in the sigChanEIsdnFramerStatsTable.')
sigChanEIsdnFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerFrmToIf.setDescription('This attribute counts the number of frames transmitted to the link interface by the Framer. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerFrmFromIf.setDescription('This attribute counts the number of frames received from the link interface by the Framer. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerOctetFromIf.setDescription('This attribute counts the number of bytes received from the link interface by the Framer. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerAborts.setDescription('This attribute counts the total number of aborts received. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerCrcErrors.setDescription('This attribute counts the total number of frames with CRC errors. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerLrcErrors.setDescription('This attribute counts the total number of frames with LRC errors. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerNonOctetErrors.setDescription('This attribute counts the total number of frames that were non octet aligned. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerOverruns.setDescription('This attribute counts the total number of frames received from the link for which overruns occurred. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerUnderruns.setDescription('This attribute counts the total number of frames transmitted to the link for which underruns occurred. This count wraps to zero after exceeding its maximum value.')
sigChanEIsdnFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 14, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanEIsdnFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanEIsdnFramerLargeFrmErrors.setDescription('This attribute counts the total number of frames received which were too large (longer than 500 bytes). This count wraps to zero after exceeding its maximum value.')
vnetEuroIsdnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 1))
vnetEuroIsdnGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 1, 5))
vnetEuroIsdnGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 1, 5, 2))
vnetEuroIsdnGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 1, 5, 2, 2))
vnetEuroIsdnCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 3))
vnetEuroIsdnCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 3, 5))
vnetEuroIsdnCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 3, 5, 2))
vnetEuroIsdnCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 138, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VnetEuroIsdnMIB", sigChanEIsdnOverlapSending=sigChanEIsdnOverlapSending, sigChanEIsdnMaxNonCallConcurrent=sigChanEIsdnMaxNonCallConcurrent, sigChanEIsdnRowStatus=sigChanEIsdnRowStatus, sigChanEIsdnComponentName=sigChanEIsdnComponentName, sigChanEIsdnFramerFrmToIf=sigChanEIsdnFramerFrmToIf, vnetEuroIsdnCapabilitiesBE=vnetEuroIsdnCapabilitiesBE, sigChanEIsdnRowStatusTable=sigChanEIsdnRowStatusTable, sigChanEIsdnPeakActiveChannels=sigChanEIsdnPeakActiveChannels, sigChanEIsdnOperationalState=sigChanEIsdnOperationalState, sigChanEIsdnProvEntry=sigChanEIsdnProvEntry, sigChanEIsdnSide=sigChanEIsdnSide, sigChanEIsdnVariant=sigChanEIsdnVariant, sigChanEIsdnFramerStatsTable=sigChanEIsdnFramerStatsTable, vnetEuroIsdnGroupBE01=vnetEuroIsdnGroupBE01, sigChanEIsdnL3Entry=sigChanEIsdnL3Entry, sigChanEIsdnFramerUsageState=sigChanEIsdnFramerUsageState, sigChanEIsdnFramerAborts=sigChanEIsdnFramerAborts, sigChanEIsdnFramerRowStatusTable=sigChanEIsdnFramerRowStatusTable, sigChanEIsdnToolsEntry=sigChanEIsdnToolsEntry, vnetEuroIsdnGroup=vnetEuroIsdnGroup, sigChanEIsdnFramerOverruns=sigChanEIsdnFramerOverruns, sigChanEIsdnL3Table=sigChanEIsdnL3Table, sigChanEIsdnStatsEntry=sigChanEIsdnStatsEntry, sigChanEIsdnL2Table=sigChanEIsdnL2Table, sigChanEIsdnFramerRowStatusEntry=sigChanEIsdnFramerRowStatusEntry, sigChanEIsdnFramerComponentName=sigChanEIsdnFramerComponentName, sigChanEIsdnPeakActiveVoiceChannels=sigChanEIsdnPeakActiveVoiceChannels, sigChanEIsdnFramerStateEntry=sigChanEIsdnFramerStateEntry, sigChanEIsdnResponseServiceTimer=sigChanEIsdnResponseServiceTimer, sigChanEIsdnFramerInterfaceName=sigChanEIsdnFramerInterfaceName, sigChanEIsdnFramerStateTable=sigChanEIsdnFramerStateTable, sigChanEIsdnTotalCallsToIf=sigChanEIsdnTotalCallsToIf, sigChanEIsdnFramerCrcErrors=sigChanEIsdnFramerCrcErrors, sigChanEIsdnActiveVoiceChannels=sigChanEIsdnActiveVoiceChannels, sigChanEIsdnNonCallAssocSessionsFromIf=sigChanEIsdnNonCallAssocSessionsFromIf, sigChanEIsdnFramerLargeFrmErrors=sigChanEIsdnFramerLargeFrmErrors, sigChanEIsdnFramerProvEntry=sigChanEIsdnFramerProvEntry, sigChanEIsdnT200=sigChanEIsdnT200, sigChanEIsdnFramerStorageType=sigChanEIsdnFramerStorageType, sigChanEIsdnFramerIndex=sigChanEIsdnFramerIndex, sigChanEIsdnFramerRowStatus=sigChanEIsdnFramerRowStatus, sigChanEIsdnOperTable=sigChanEIsdnOperTable, sigChanEIsdnStorageType=sigChanEIsdnStorageType, sigChanEIsdnNonCallAssocSessionsToIf=sigChanEIsdnNonCallAssocSessionsToIf, sigChanEIsdnPeakActiveDataChannels=sigChanEIsdnPeakActiveDataChannels, sigChanEIsdnToolsTable=sigChanEIsdnToolsTable, sigChanEIsdnActiveDataChannels=sigChanEIsdnActiveDataChannels, sigChanEIsdnFramerStatsEntry=sigChanEIsdnFramerStatsEntry, sigChanEIsdnLifetimeServiceTimer=sigChanEIsdnLifetimeServiceTimer, sigChanEIsdnOptTable=sigChanEIsdnOptTable, vnetEuroIsdnGroupBE=vnetEuroIsdnGroupBE, sigChanEIsdnDChanStatus=sigChanEIsdnDChanStatus, sigChanEIsdnOptEntry=sigChanEIsdnOptEntry, sigChanEIsdnConnectServiceTimer=sigChanEIsdnConnectServiceTimer, sigChanEIsdnOperEntry=sigChanEIsdnOperEntry, sigChanEIsdnT23=sigChanEIsdnT23, sigChanEIsdnL2Entry=sigChanEIsdnL2Entry, sigChanEIsdnFramerLrcErrors=sigChanEIsdnFramerLrcErrors, sigChanEIsdnT203=sigChanEIsdnT203, sigChanEIsdnFramerNonOctetErrors=sigChanEIsdnFramerNonOctetErrors, sigChanEIsdnT310=sigChanEIsdnT310, sigChanEIsdnStateTable=sigChanEIsdnStateTable, sigChanEIsdnCircuitSwitchedK=sigChanEIsdnCircuitSwitchedK, sigChanEIsdnFramerUnderruns=sigChanEIsdnFramerUnderruns, sigChanEIsdnStateEntry=sigChanEIsdnStateEntry, sigChanEIsdnAdminState=sigChanEIsdnAdminState, sigChanEIsdnStatsTable=sigChanEIsdnStatsTable, sigChanEIsdnIndex=sigChanEIsdnIndex, sigChanEIsdnTotalCallsFromIf=sigChanEIsdnTotalCallsFromIf, sigChanEIsdnUsageState=sigChanEIsdnUsageState, sigChanEIsdnFramerOctetFromIf=sigChanEIsdnFramerOctetFromIf, vnetEuroIsdnMIB=vnetEuroIsdnMIB, sigChanEIsdnTracing=sigChanEIsdnTracing, vnetEuroIsdnGroupBE01A=vnetEuroIsdnGroupBE01A, sigChanEIsdnActiveChannels=sigChanEIsdnActiveChannels, sigChanEIsdnFramerAdminState=sigChanEIsdnFramerAdminState, sigChanEIsdnOverlapReceiving=sigChanEIsdnOverlapReceiving, sigChanEIsdnFramerFrmFromIf=sigChanEIsdnFramerFrmFromIf, vnetEuroIsdnCapabilities=vnetEuroIsdnCapabilities, sigChanEIsdnProvTable=sigChanEIsdnProvTable, sigChanEIsdnN200=sigChanEIsdnN200, sigChanEIsdnRowStatusEntry=sigChanEIsdnRowStatusEntry, sigChanEIsdnFramerOperationalState=sigChanEIsdnFramerOperationalState, vnetEuroIsdnCapabilitiesBE01A=vnetEuroIsdnCapabilitiesBE01A, vnetEuroIsdnCapabilitiesBE01=vnetEuroIsdnCapabilitiesBE01, sigChanEIsdnFramer=sigChanEIsdnFramer, sigChanEIsdn=sigChanEIsdn, sigChanEIsdnFramerProvTable=sigChanEIsdnFramerProvTable)
