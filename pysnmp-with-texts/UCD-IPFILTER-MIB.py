#
# PySNMP MIB module UCD-IPFILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UCD-IPFILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, iso, Counter64, Gauge32, ObjectIdentity, Unsigned32, Counter32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "iso", "Counter64", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32", "Bits", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ucdExperimental, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdExperimental")
ucdIpFilter = ModuleIdentity((1, 3, 6, 1, 4, 1, 2021, 13, 2))
ucdIpFilter.setRevisions(('2000-01-26 00:00', '1999-12-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ucdIpFilter.setRevisionsDescriptions(('Renamed MIB root object', 'SMIv2 version converted from an older MIB definition.',))
if mibBuilder.loadTexts: ucdIpFilter.setLastUpdated('200001260000Z')
if mibBuilder.loadTexts: ucdIpFilter.setOrganization('University of California, Davis')
if mibBuilder.loadTexts: ucdIpFilter.setContactInfo('This mib is no longer being maintained by the University of California and is now in life-support-mode and being maintained by the net-snmp project. The best place to write for public questions about the net-snmp-coders mailing list at net-snmp-coders@lists.sourceforge.net. postal: Wes Hardaker P.O. Box 382 Davis CA 95617 email: net-snmp-coders@lists.sourceforge.net ')
if mibBuilder.loadTexts: ucdIpFilter.setDescription('This module defines MIB components for reading information from the IP Filter. This would let you only read its rules and counters. IP Filter by Darren Reed <darrenr@pobox.com> IP Filter web page URL http://coombs.anu.edu.au/~avalon/ ipf-mod.pl module by Yaroslav Terletsky <ts@polynet.lviv.ua> IP Filter UCD-SNMP module URL ftp://ftp.polynet.lviv.ua/pub/UNIX/security/ipf/ucd-snmp-ipf-mod.tgz Yaroslav Terletsky <ts@polynet.lviv.ua>')
ipfInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1), )
if mibBuilder.loadTexts: ipfInTable.setStatus('current')
if mibBuilder.loadTexts: ipfInTable.setDescription('A table with IP Filter incoming rules and statistics.')
ipfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfInIndex"))
if mibBuilder.loadTexts: ipfInEntry.setStatus('current')
if mibBuilder.loadTexts: ipfInEntry.setDescription('IP Filter incoming rules table entry.')
ipfInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInIndex.setStatus('current')
if mibBuilder.loadTexts: ipfInIndex.setDescription('Reference index for each incoming IP Filter rule.')
ipfInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInRule.setStatus('current')
if mibBuilder.loadTexts: ipfInRule.setDescription('Textual representation of the incoming IP Filter rule.')
ipfInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInHits.setStatus('current')
if mibBuilder.loadTexts: ipfInHits.setDescription('Hits of the incoming IP Filter rule.')
ipfOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2), )
if mibBuilder.loadTexts: ipfOutTable.setStatus('current')
if mibBuilder.loadTexts: ipfOutTable.setDescription('A table with IP Filter outgoing rules and statistic.')
ipfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfOutIndex"))
if mibBuilder.loadTexts: ipfOutEntry.setStatus('current')
if mibBuilder.loadTexts: ipfOutEntry.setDescription('IP Filter outgoing rules table entry.')
ipfOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutIndex.setStatus('current')
if mibBuilder.loadTexts: ipfOutIndex.setDescription('Reference index for each outgoing IP Filter rule.')
ipfOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutRule.setStatus('current')
if mibBuilder.loadTexts: ipfOutRule.setDescription('Textual representation of the outgoing IP Filter rule.')
ipfOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutHits.setStatus('current')
if mibBuilder.loadTexts: ipfOutHits.setDescription('Hits of the outgoing IP Filter rule.')
ipfAccInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3), )
if mibBuilder.loadTexts: ipfAccInTable.setStatus('current')
if mibBuilder.loadTexts: ipfAccInTable.setDescription('A table with IP Filter incoming accounting rules and statistics.')
ipfAccInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfAccInIndex"))
if mibBuilder.loadTexts: ipfAccInEntry.setStatus('current')
if mibBuilder.loadTexts: ipfAccInEntry.setDescription('IP FIlter incoming accounting rules table entry.')
ipfAccInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInIndex.setStatus('current')
if mibBuilder.loadTexts: ipfAccInIndex.setDescription('Reference index for each incoming accounting IP Filter rule.')
ipfAccInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInRule.setStatus('current')
if mibBuilder.loadTexts: ipfAccInRule.setDescription('Textual representation of the incoming accounting IP Filter rule.')
ipfAccInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInHits.setStatus('current')
if mibBuilder.loadTexts: ipfAccInHits.setDescription('Hits of the incoming accounting IP Filter rule.')
ipfAccInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInBytes.setStatus('current')
if mibBuilder.loadTexts: ipfAccInBytes.setDescription('Bytes passed thru the incoming accounting IP Filter rule.')
ipfAccOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4), )
if mibBuilder.loadTexts: ipfAccOutTable.setStatus('current')
if mibBuilder.loadTexts: ipfAccOutTable.setDescription('A table with IP Filter outgoing accounting rules and statistic.')
ipfAccOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfAccOutIndex"))
if mibBuilder.loadTexts: ipfAccOutEntry.setStatus('current')
if mibBuilder.loadTexts: ipfAccOutEntry.setDescription('IP Filter outgoing accounting rules table entry.')
ipfAccOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutIndex.setStatus('current')
if mibBuilder.loadTexts: ipfAccOutIndex.setDescription('Reference index for each outgoing accounting IP Filter rule.')
ipfAccOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutRule.setStatus('current')
if mibBuilder.loadTexts: ipfAccOutRule.setDescription('Textual representation of the outgoing accounting IP Filter rule.')
ipfAccOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutHits.setStatus('current')
if mibBuilder.loadTexts: ipfAccOutHits.setDescription('Hits of the outgoing accounting IP Filter rule.')
ipfAccOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutBytes.setStatus('current')
if mibBuilder.loadTexts: ipfAccOutBytes.setDescription('Bytes passed thru the outgoing accounting IP Filter rule.')
mibBuilder.exportSymbols("UCD-IPFILTER-MIB", ipfInEntry=ipfInEntry, ipfAccOutEntry=ipfAccOutEntry, ipfAccOutIndex=ipfAccOutIndex, ipfAccInEntry=ipfAccInEntry, ipfAccOutTable=ipfAccOutTable, ipfOutIndex=ipfOutIndex, ipfAccInBytes=ipfAccInBytes, ipfAccInTable=ipfAccInTable, ipfAccInIndex=ipfAccInIndex, ipfOutEntry=ipfOutEntry, ipfInHits=ipfInHits, PYSNMP_MODULE_ID=ucdIpFilter, ipfAccOutHits=ipfAccOutHits, ipfInIndex=ipfInIndex, ipfAccOutBytes=ipfAccOutBytes, ipfAccInRule=ipfAccInRule, ipfInTable=ipfInTable, ipfAccInHits=ipfAccInHits, ipfAccOutRule=ipfAccOutRule, ipfOutHits=ipfOutHits, ipfInRule=ipfInRule, ipfOutRule=ipfOutRule, ucdIpFilter=ucdIpFilter, ipfOutTable=ipfOutTable)
