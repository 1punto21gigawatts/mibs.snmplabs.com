#
# PySNMP MIB module HH3C-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
radiusAccServerAddress, radiusAccClientServerPortNumber, radiusAccServerIndex = mibBuilder.importSymbols("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress", "radiusAccClientServerPortNumber", "radiusAccServerIndex")
radiusAuthClientServerPortNumber, radiusAuthServerIndex, radiusAuthServerAddress = mibBuilder.importSymbols("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber", "radiusAuthServerIndex", "radiusAuthServerAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Counter64, Gauge32, iso, NotificationType, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Counter64", "Gauge32", "iso", "NotificationType", "ModuleIdentity", "Integer32")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
hh3cRadius = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 13))
hh3cRadius.setRevisions(('2014-06-07 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cRadius.setRevisionsDescriptions(('Modified description of hh3cRdSecondaryAuthRowStatus. Modified description of hh3cRdSecondaryAccRowStatus',))
if mibBuilder.loadTexts: hh3cRadius.setLastUpdated('201406071800Z')
if mibBuilder.loadTexts: hh3cRadius.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cRadius.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cRadius.setDescription('The HH3C-RADIUS-MIB contains objects to Manage configuration and Monitor running state for RADIUS feature.')
hh3cRdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1))
hh3cRdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1), )
if mibBuilder.loadTexts: hh3cRdInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRdInfoTable.setDescription('The (conceptual) table listing RADIUS authentication servers.')
hh3cRdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdGroupName"))
if mibBuilder.loadTexts: hh3cRdInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdInfoEntry.setDescription('An entry (conceptual row) representing a RADIUS authentication server.')
hh3cRdGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cRdGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdGroupName.setDescription('The name of the RADIUS authentication group referred to in this table entry.')
hh3cRdPrimAuthIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAuthIp.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cRdPrimAuthIp.setDescription('The IP address of primary RADIUS authentication server.')
hh3cRdPrimUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimUdpPort.setDescription('The UDP port the client is using to send requests to primary RADIUS authentication server. Default value is 1812.')
hh3cRdPrimState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimState.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimState.setDescription('The state of the primary RADIUS authentication server. 1 (active) The primary authentication server is in active state. 2 (block) The primary authentication server is in block state.')
hh3cRdSecAuthIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAuthIp.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cRdSecAuthIp.setDescription('The IP address of secondary RADIUS authentication server.')
hh3cRdSecUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecUdpPort.setDescription('The UDP port the client is using to send requests to secondary RADIUS authentication server. Default value is 1812.')
hh3cRdSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecState.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecState.setDescription('The state of the secondary RADIUS authentication server. 1 (active) The secondary authentication server is in active state. 2 (block) The secondary authentication server is in block state.')
hh3cRdKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRdKey.setDescription('The secret shared between the RADIUS client and RADIUS authentication server used in encoding and decoding sensitive data. When read, hh3cRdKey always returns an Octet String of length zero.')
hh3cRdRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdRetry.setDescription('The number of attempts the client will make when trying to send requests to a server before it will consider the attempt failed. Default value is 3.')
hh3cRdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cRdTimeout.setDescription('The timeout value the client will use when sending requests to a server. The unit is second. Default value is 3.')
hh3cRdPrimAuthIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 11), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAuthIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAuthIpAddrType.setDescription('The IP addresses type (IPv4 or IPv6) of primary RADIUS authentication server.')
hh3cRdPrimAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAuthIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAuthIpAddr.setDescription('The IP address of primary RADIUS authentication server.')
hh3cRdSecAuthIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 13), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAuthIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAuthIpAddrType.setDescription('The IP addresses type (IPv4 or IPv6) of secondary RADIUS authentication server.')
hh3cRdSecAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 14), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAuthIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAuthIpAddr.setDescription('The IP address of secondary RADIUS authentication server.')
hh3cRdServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("iphotel", 2), ("portal", 3), ("extended", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdServerType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdServerType.setDescription('Specify the type of RADIUS server. 1 (standard) - Server based on RFC protocol(s). 2 (iphotel) - Server for IP-Hotel or 201+ system. 3 (portal) - Server for iTellin Portal system. 4 (extended) - Server based on RADIUS extensions. Default type is standard.')
hh3cRdQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdQuietTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRdQuietTime.setDescription('The time for server returning active. The unit is minute. When the value is 0, the server state retains active. Default value is 5.')
hh3cRdUserNameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withoutdomain", 1), ("withdomain", 2), ("keeporignal", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdUserNameFormat.setStatus('current')
if mibBuilder.loadTexts: hh3cRdUserNameFormat.setDescription('Specify the user-name format that is sent to RADIUS server. 1 (withoutdomain) - send the user-name without domain. 2 (withdomain) - send the user-name with domain. 3 (keeporignal) - send the user-name as it is entered. Default format is withdomain.')
hh3cRdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRdRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, hh3cRdGroupName must be specified. To destroy an existent row, the hh3cRdGroupName MUST NOT be referred by hh3cDomainTable in hh3cDomainRadiusGroupName column.')
hh3cRdSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecKey.setDescription('The secret shared between the RADIUS client and the secondary RADIUS authentication server used in encoding and decoding sensitive data. When read, hh3cRdSecKey always returns an Octet String of length zero.')
hh3cRdPrimVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimVpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimVpnName.setDescription('The human-readable name of the VPN in which the primary RADIUS authentication server is placed.')
hh3cRdSecVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecVpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecVpnName.setDescription('The human-readable name of the VPN in which the secondary RADIUS authentication server is placed.')
hh3cRdAuthNasIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 22), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAuthNasIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAuthNasIpAddrType.setDescription('The type (IPv4 or IPv6) of the source IP used to communicate with RADIUS authentication server.')
hh3cRdAuthNasIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAuthNasIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAuthNasIpAddr.setDescription('The source IPv4 address used to communicate with the RADIUS authentication server.')
hh3cRdAuthNasIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 24), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAuthNasIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAuthNasIpv6Addr.setDescription('The source IPv6 address used to communicate with the RADIUS authentication server.')
hh3cRdAccInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2), )
if mibBuilder.loadTexts: hh3cRdAccInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccInfoTable.setDescription('The (conceptual) table listing RADIUS accounting servers.')
hh3cRdAccInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdAccGroupName"))
if mibBuilder.loadTexts: hh3cRdAccInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccInfoEntry.setDescription('An entry (conceptual row) representing a RADIUS accounting server.')
hh3cRdAccGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cRdAccGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccGroupName.setDescription('The name of the RADIUS group referred to in this table entry.')
hh3cRdPrimAccIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAccIpAddrType.setDescription('The IP addresses type (IPv4 or IPv6) of primary RADIUS accounting server.')
hh3cRdPrimAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAccIpAddr.setDescription('The IP address of primary RADIUS accounting server.')
hh3cRdPrimAccUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAccUdpPort.setDescription('The UDP port the client is using to send requests to primary RADIUS accounting server. Default value is 1813.')
hh3cRdPrimAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccState.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAccState.setDescription('The state of the primary RADIUS accounting server. 1 (active) The primary accounting server is in active state. 2 (block) The primary accounting server is in block state.')
hh3cRdSecAccIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAccIpAddrType.setDescription('The IP addresses type (IPv4 or IPv6) of secondary RADIUS accounting server.')
hh3cRdSecAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAccIpAddr.setDescription('The IP address of secondary RADIUS accounting server.')
hh3cRdSecAccUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAccUdpPort.setDescription('The UDP port the client is using to send requests to secondary RADIUS accounting server. Default value is 1813.')
hh3cRdSecAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccState.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAccState.setDescription('The state of the secondary RADIUS accounting server. 1 (active) The secondary accounting server is in active state. 2 (block) The secondary accounting server is in block state.')
hh3cRdAccKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccKey.setDescription('The secret shared between the RADIUS client and RADIUS accounting server used in encoding and decoding sensitive data. When read, hh3cRdAccKey always returns an Octet String of length zero.')
hh3cRdAccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccRetry.setDescription('The number of attempt the client will make when trying to send requests to a server before it will consider the attempt failed. Default value is 3.')
hh3cRdAccTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccTimeout.setDescription('The timeout value the client will use when sending requests to a server. The unit is second. Default value is 3.')
hh3cRdAccServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("iphotel", 2), ("portal", 3), ("extended", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccServerType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccServerType.setDescription('Specify the type of RADIUS server. 1 (standard) - Server based on RFC protocol(s). 2 (iphotel) - Server for IP-Hotel or 201+ system. 3 (portal) - Server for iTellin Portal system. 4 (extended) - Server based on RADIUS extensions. Default type is standard.')
hh3cRdAccQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccQuietTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccQuietTime.setDescription('The time for server returning active. The unit is minute. When the value is 0, the server state retains active. Default value is 5.')
hh3cRdAccFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("reject", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccFailureAction.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccFailureAction.setDescription('Defines the action that authentication should take if authentication succeeds but the associated accounting start fails. 1 (ignore) - treat as authentication success; ignore accounting start failure. 2 (reject) - treat as authentication failed if corresponding accounting start fails. Default value is 1(reject).')
hh3cRdAccRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRealTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccRealTime.setDescription("Interval of realtime-accounting packets. The unit is minute. When the value is 0, the device doesn't send realtime-accounting packets. Default value is 12.")
hh3cRdAccRealTimeRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRealTimeRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccRealTimeRetry.setDescription('The number of attempt the client will make when trying to send realtime-accounting packet to accounting server before it will consider the attempt failed. Default value is 5.')
hh3cRdAccSaveStopPktEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccSaveStopPktEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccSaveStopPktEnable.setDescription("The control of whether save stop-accounting packet in local buffer and resend later when the accounting server doesn't respond. When SaveStopPktEnable is set to false, the value of AccStopRetry will be ignored. Default value is true.")
hh3cRdAccStopRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccStopRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccStopRetry.setDescription('The number of attempt the client will make when trying to send stop-accounting packet to accounting server. Default value is 500.')
hh3cRdAccDataFlowUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("byte", 1), ("kiloByte", 2), ("megaByte", 3), ("gigaByte", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccDataFlowUnit.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccDataFlowUnit.setDescription("Specify data flow format that is sent to RADIUS server. The value SHOULD be set the same as the value of corresponding server. 1 (byte) - Specify 'byte' as the unit of data flow. 2 (kiloByte) - Specify 'kilo-byte' as the unit of data flow. 3 (megaByte) - Specify 'mega-byte' as the unit of data flow. 4 (gigaByte) - Specify 'giga-byte' as the unit of data flow. Default value is 1.")
hh3cRdAccPacketUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onePacket", 1), ("kiloPacket", 2), ("megaPacket", 3), ("gigaPacket", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccPacketUnit.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccPacketUnit.setDescription("Specify packet format that is sent to RADIUS server. The value SHOULD be set the same as the value of corresponding server. 1 (onePacket) - Specify 'one-packet' as the unit of packet. 2 (kiloPacket) - Specify 'kilo-packet' as the unit of packet. 3 (megaPacket) - Specify 'mega-packet' as the unit of packet. 4 (gigaPacket) - Specify 'giga-packet' as the unit of packet. Default value is 1.")
hh3cRdAccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, hh3cRdAccGroupName must be specified. To destroy an existent row, the hh3cRdAccGroupName MUST NOT be referred by hh3cDomainTable in hh3cDomainRadiusGroupName column.')
hh3cRdAcctOnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAcctOnEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAcctOnEnable.setDescription('The control of Accounting-On function. The Accounting-On function is used by the client to mark the start of accounting (for example, upon booting) by sending Accounting-On packets and to mark the end of accounting (for example, just before a scheduled reboot) by sending Accounting-Off packets. Default value is false.')
hh3cRdAcctOnSendTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 24), Integer32().clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAcctOnSendTimes.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAcctOnSendTimes.setDescription('The number of Accounting-On packets the client will send before it considers the accounting server failed. Default value is 50.')
hh3cRdAcctOnSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 25), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAcctOnSendInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAcctOnSendInterval.setDescription('Interval of Accounting-On packets. The unit is second. Default value is 3.')
hh3cRdSecAccKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAccKey.setDescription('The secret shared between the RADIUS client and the secondary RADIUS accounting server used in encoding and decoding sensitive data. When read, hh3cRdSecAccKey always returns an Octet String of length zero.')
hh3cRdPrimAccVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccVpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdPrimAccVpnName.setDescription('The human-readable name of the VPN in which the primary RADIUS accounting server is placed.')
hh3cRdSecAccVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccVpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecAccVpnName.setDescription('The human-readable name of the VPN in which the secondary RADIUS accounting server is placed.')
hh3cRdAccNasIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 29), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccNasIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccNasIpAddrType.setDescription('The type (IPv4 or IPv6) of the source IP used to communicate with RADIUS accounting server.')
hh3cRdAccNasIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 30), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccNasIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccNasIpAddr.setDescription('The source IPv4 address used to communicate with the RADIUS accounting server.')
hh3cRdAccNasIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 31), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccNasIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdAccNasIpv6Addr.setDescription('The source IPv6 address used to communicate with the RADIUS accounting server.')
hh3cRadiusGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 3))
hh3cRadiusAuthErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(30)).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRadiusAuthErrThreshold.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthErrThreshold.setDescription('The threshold of authentication failure trap. A trap will be sent when the percent of the unsuccessful authentication exceeds this threshold.')
hh3cRdSecondaryAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4), )
if mibBuilder.loadTexts: hh3cRdSecondaryAuthServerTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthServerTable.setDescription('The (conceptual) table listing RADIUS secondary authentication servers.')
hh3cRdSecondaryAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdGroupName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthIpAddrType"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthIpAddr"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthVpnName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthUdpPort"))
if mibBuilder.loadTexts: hh3cRdSecondaryAuthServerEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthServerEntry.setDescription('An entry (conceptual row) representing a RADIUS secondary authentication server.')
hh3cRdSecondaryAuthIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cRdSecondaryAuthIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthIpAddrType.setDescription('The IP addresses type (IPv4 or IPv6) of secondary RADIUS authentication server.')
hh3cRdSecondaryAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cRdSecondaryAuthIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthIpAddr.setDescription('The IP address of secondary RADIUS authentication server.')
hh3cRdSecondaryAuthVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hh3cRdSecondaryAuthVpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthVpnName.setDescription('The human-readable name of the VPN in which the secondary RADIUS authentication server is placed.')
hh3cRdSecondaryAuthUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cRdSecondaryAuthUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthUdpPort.setDescription('The UDP port the client is using to send requests to secondary RADIUS authentication server. Default value is 1812.')
hh3cRdSecondaryAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAuthState.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthState.setDescription('The state of the secondary RADIUS authentication server. 1 (active) The secondary authentication server is in active state. 2 (block) The secondary authentication server is in block state.')
hh3cRdSecondaryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAuthKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthKey.setDescription('The secret shared between the RADIUS client and the secondary RADIUS authentication server used in encoding and decoding sensitive data. When read, hh3cRdSecondaryAuthKey always returns an Octet String of length zero.')
hh3cRdSecondaryAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAuthRowStatus.setDescription("This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, hh3cRdGroupName must be specified. The number of rows with the same hh3cRdGroupName can't be more than 16.")
hh3cRdSecondaryAccServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5), )
if mibBuilder.loadTexts: hh3cRdSecondaryAccServerTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccServerTable.setDescription('The (conceptual) table listing RADIUS secondary accounting servers.')
hh3cRdSecondaryAccServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdAccGroupName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccIpAddrType"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccIpAddr"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccVpnName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccUdpPort"))
if mibBuilder.loadTexts: hh3cRdSecondaryAccServerEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccServerEntry.setDescription('An entry (conceptual row) representing a RADIUS secondary accounting server.')
hh3cRdSecondaryAccIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cRdSecondaryAccIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccIpAddrType.setDescription('The IP addresses type (IPv4 or IPv6) of secondary RADIUS accounting server.')
hh3cRdSecondaryAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cRdSecondaryAccIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccIpAddr.setDescription('The IP address of secondary RADIUS accounting server.')
hh3cRdSecondaryAccVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hh3cRdSecondaryAccVpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccVpnName.setDescription('The human-readable name of the VPN in which the secondary RADIUS accounting server is placed.')
hh3cRdSecondaryAccUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cRdSecondaryAccUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccUdpPort.setDescription('The UDP port the client is using to send requests to secondary RADIUS accounting server. Default value is 1813.')
hh3cRdSecondaryAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAccState.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccState.setDescription('The state of the secondary RADIUS accounting server. 1 (active) The secondary accounting server is in active state. 2 (block) The secondary accounting server is in block state.')
hh3cRdSecondaryAccKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAccKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccKey.setDescription('The secret shared between the RADIUS client and the secondary RADIUS accounting server used in encoding and decoding sensitive data. When read, hh3cRdSecondaryAccKey always returns an Octet String of length zero.')
hh3cRdSecondaryAccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAccRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRdSecondaryAccRowStatus.setDescription("This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, hh3cRdAccGroupName must be specified. The number of rows with the same hh3cRdAccGroupName can't be more than 16.")
hh3cRadiusAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2))
hh3cRadiusAccClient = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1))
hh3cRadiusAccServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cRadiusAccServerTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccServerTable.setDescription('The (conceptual) table listing the RADIUS accounting servers with which the client shares a secret.')
hh3cRadiusAccServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1), ).setIndexNames((0, "RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex"))
if mibBuilder.loadTexts: hh3cRadiusAccServerEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccServerEntry.setDescription('An entry (conceptual row) representing a RADIUS accounting server with which a client shares a secret.')
hh3cRadiusAccClientStartRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStartRequests.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccClientStartRequests.setDescription('The number of RADIUS accounting start request sent to this server.')
hh3cRadiusAccClientStartResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStartResponses.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccClientStartResponses.setDescription('The number of RADIUS accounting start response received from this server.')
hh3cRadiusAccClientInterimRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientInterimRequests.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccClientInterimRequests.setDescription('The number of RADIUS interim accounting request sent to this server.')
hh3cRadiusAccClientInterimResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientInterimResponses.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccClientInterimResponses.setDescription('The number of RADIUS interim accounting response received from this server.')
hh3cRadiusAccClientStopRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStopRequests.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccClientStopRequests.setDescription('The number of RADIUS stop accounting request sent to this RADIUS server.')
hh3cRadiusAccClientStopResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStopResponses.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccClientStopResponses.setDescription('The number of RADIUS stop accounting response received from this server.')
hh3cRadiusServerTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3))
hh3cRadiusAuthServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 1)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAuthServerDownTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthServerDownTrap.setDescription("This trap is generated when the authentication RADIUS server doesn't respond client's requests for specified times.")
hh3cRadiusAccServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 2)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAccServerDownTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccServerDownTrap.setDescription("This trap is generated when the accounting RADIUS server doesn't respond client's requests for specified times.")
hh3cRadiusServerTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0))
hh3cRadiusAuthServerUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0, 1)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAuthServerUpTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthServerUpTrap.setDescription('This trap is generated when the device finds that the state of RADIUS authentication server becomes reachable from unreachable.')
hh3cRadiusAccServerUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0, 2)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAccServerUpTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAccServerUpTrap.setDescription('This trap is generated when the device finds that the state of RADIUS accounting server becomes reachable from unreachable.')
hh3cRadiusAuthErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0, 3)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"))
if mibBuilder.loadTexts: hh3cRadiusAuthErrTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthErrTrap.setDescription('This trap is generated when the device finds that the percent of unsuccessful authentication exceeds a threshold, and the threshold is the value of node hh3cRadiusAuthErrThreshold.')
hh3cRadiusAuthenticating = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4))
hh3cRadiusAuthClient = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1))
hh3cRadiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1), )
if mibBuilder.loadTexts: hh3cRadiusAuthServerTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthServerTable.setDescription('The (conceptual) table listing the RADIUS authenticating servers with which the client shares a secret.')
hh3cRadiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1), ).setIndexNames((0, "RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex"))
if mibBuilder.loadTexts: hh3cRadiusAuthServerEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthServerEntry.setDescription('An entry (conceptual row) representing a RADIUS authenticating server with which a client shares a secret.')
hh3cRadiusAuthFailureTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAuthFailureTimes.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthFailureTimes.setDescription('The number of RADIUS authenticating failed to this server.')
hh3cRadiusAuthTimeoutTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAuthTimeoutTimes.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthTimeoutTimes.setDescription('The number of RADIUS authenticating timeout to this server.')
hh3cRadiusAuthRejectTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAuthRejectTimes.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusAuthRejectTimes.setDescription('The number of RADIUS authenticating rejected to this server.')
hh3cRadiusExtend = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5))
hh3cRadiusExtendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 1))
hh3cRadiusExtendTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2))
hh3cRadiusExtendTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 3))
hh3cRadiusSchAuthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1), )
if mibBuilder.loadTexts: hh3cRadiusSchAuthTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthTable.setDescription('The (conceptual) table listing RADIUS authentication servers.')
hh3cRadiusSchAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRadiusSchAuthGroupName"))
if mibBuilder.loadTexts: hh3cRadiusSchAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthEntry.setDescription('An entry (conceptual row) representing RADIUS authentication servers.')
hh3cRadiusSchAuthGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: hh3cRadiusSchAuthGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthGroupName.setDescription('The name of the RADIUS authentication server group referred to in this table entry.')
hh3cRadiusSchAuthPrimIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimIpAddr.setDescription('The IP address of primary RADIUS authenticaiton server.')
hh3cRadiusSchAuthPrimUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 3), Integer32().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimUdpPort.setDescription('The UDP port the client is using to send requests to primary RADIUS authentication server. Default value is 1812.')
hh3cRadiusSchAuthPrimKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimKey.setDescription('The secret shared between the RADIUS client and the primary RADIUS authentication server used in encoding and decoding sensitive data.')
hh3cRadiusSchAuthSecIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecIpAddr.setDescription('The IP address of secondary RADIUS authenticaiton server.')
hh3cRadiusSchAuthSecUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 6), Integer32().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecUdpPort.setDescription('The UDP port the client is using to send requests to secondary RADIUS authentication server. Default value is 1812.')
hh3cRadiusSchAuthSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecKey.setDescription('The secret shared between the RADIUS client and the secondary RADIUS authentication server used in encoding and decoding sensitive data.')
hh3cRadiusSchAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAuthRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, hh3cRadiusSchAuthGroupName must be specified, and this action will create a corresponding domain that hh3cDomainRadiusGroupName is the same as hh3cRadiusSchAuthGroupName. To destroy an existent row, the hh3cRadiusSchAuthGroupName MUST NOT be referred by hh3cDomainTable in hh3cDomainRadiusGroupName column.')
hh3cRadiusSchAccTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2), )
if mibBuilder.loadTexts: hh3cRadiusSchAccTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccTable.setDescription('The (conceptual) table listing RADIUS accounting servers.')
hh3cRadiusSchAccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRadiusSchAccGroupName"))
if mibBuilder.loadTexts: hh3cRadiusSchAccEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccEntry.setDescription('An entry (conceptual row) representing RADIUS accounting servers.')
hh3cRadiusSchAccGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: hh3cRadiusSchAccGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccGroupName.setDescription('The name of the RADIUS accounting server group referred to in this table entry.')
hh3cRadiusSchAccPrimIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimIpAddr.setDescription('The IP address of primary RADIUS accounting server.')
hh3cRadiusSchAccPrimUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 3), Integer32().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimUdpPort.setDescription('The UDP port the client is using to send requests to primary RADIUS accounting server. Default value is 1813.')
hh3cRadiusSchAccPrimKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimKey.setDescription('The secret shared between the RADIUS client and the primary RADIUS accounting server used in encoding and decoding sensitive data.')
hh3cRadiusSchAccSecIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccSecIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccSecIpAddr.setDescription('The IP address of secondary RADIUS accounting server.')
hh3cRadiusSchAccSecUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 6), Integer32().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccSecUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccSecUdpPort.setDescription('The UDP port the client is using to send requests to secondary RADIUS accounting server. Default value is 1813.')
hh3cRadiusSchAccSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccSecKey.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccSecKey.setDescription('The secret shared between the RADIUS client and the secondary RADIUS accounting server used in encoding and decoding sensitive data.')
hh3cRadiusSchAccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusSchAccRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, hh3cRadiusSchAccGroupName must be specified, and this action will create a corresponding domain that hh3cDomainRadiusGroupName is the same as hh3cRadiusSchAccGroupName. To destroy an existent row, the hh3cRadiusSchAccGroupName MUST NOT be referred by hh3cDomainTable in hh3cDomainRadiusGroupName column.')
hh3cRadiusStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6))
hh3cRadiusStatAccReq = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatAccReq.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusStatAccReq.setDescription('It shows the number of radius account request to the radius server.')
hh3cRadiusStatAccAck = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatAccAck.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusStatAccAck.setDescription('It shows the number of radius account response from the radius server.')
hh3cRadiusStatLogoutReq = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatLogoutReq.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusStatLogoutReq.setDescription('It shows the number of logout request to the radius server.')
hh3cRadiusStatLogoutAck = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatLogoutAck.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusStatLogoutAck.setDescription('It shows the number of logout response from the radius server.')
hh3cRadiusServerTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 7))
hh3cRadiusServerFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 7, 1), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRadiusServerFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRadiusServerFirstTrapTime.setDescription('Represents the first trap time.')
mibBuilder.exportSymbols("HH3C-RADIUS-MIB", hh3cRdSecondaryAccState=hh3cRdSecondaryAccState, hh3cRdSecAccUdpPort=hh3cRdSecAccUdpPort, hh3cRdSecondaryAccKey=hh3cRdSecondaryAccKey, hh3cRadiusSchAccSecUdpPort=hh3cRadiusSchAccSecUdpPort, hh3cRdSecondaryAuthIpAddr=hh3cRdSecondaryAuthIpAddr, hh3cRdSecondaryAuthVpnName=hh3cRdSecondaryAuthVpnName, hh3cRdAuthNasIpAddrType=hh3cRdAuthNasIpAddrType, hh3cRadiusExtendTraps=hh3cRadiusExtendTraps, hh3cRadiusSchAuthGroupName=hh3cRadiusSchAuthGroupName, hh3cRadiusGlobalConfig=hh3cRadiusGlobalConfig, hh3cRdSecondaryAuthKey=hh3cRdSecondaryAuthKey, hh3cRadiusAccClientInterimResponses=hh3cRadiusAccClientInterimResponses, hh3cRadiusStatAccAck=hh3cRadiusStatAccAck, hh3cRdKey=hh3cRdKey, hh3cRdSecAuthIpAddrType=hh3cRdSecAuthIpAddrType, hh3cRdAccRetry=hh3cRdAccRetry, hh3cRadiusSchAuthSecKey=hh3cRadiusSchAuthSecKey, hh3cRdUserNameFormat=hh3cRdUserNameFormat, hh3cRdAccServerType=hh3cRdAccServerType, hh3cRdAcctOnSendTimes=hh3cRdAcctOnSendTimes, hh3cRadiusSchAccGroupName=hh3cRadiusSchAccGroupName, hh3cRadiusServerFirstTrapTime=hh3cRadiusServerFirstTrapTime, hh3cRdAuthNasIpAddr=hh3cRdAuthNasIpAddr, hh3cRdRowStatus=hh3cRdRowStatus, hh3cRadiusAuthServerDownTrap=hh3cRadiusAuthServerDownTrap, hh3cRdAccNasIpv6Addr=hh3cRdAccNasIpv6Addr, hh3cRdRetry=hh3cRdRetry, hh3cRadiusAccounting=hh3cRadiusAccounting, hh3cRadiusServerTrap=hh3cRadiusServerTrap, hh3cRdAccQuietTime=hh3cRdAccQuietTime, hh3cRadiusAccServerEntry=hh3cRadiusAccServerEntry, hh3cRdAccInfoEntry=hh3cRdAccInfoEntry, hh3cRdAccPacketUnit=hh3cRdAccPacketUnit, hh3cRadiusAuthServerUpTrap=hh3cRadiusAuthServerUpTrap, hh3cRadiusSchAuthEntry=hh3cRadiusSchAuthEntry, hh3cRadiusServerTrapVarObjects=hh3cRadiusServerTrapVarObjects, hh3cRadiusStatLogoutAck=hh3cRadiusStatLogoutAck, hh3cRdPrimAuthIpAddr=hh3cRdPrimAuthIpAddr, hh3cRadiusAccServerDownTrap=hh3cRadiusAccServerDownTrap, hh3cRdPrimState=hh3cRdPrimState, hh3cRadiusExtendObjects=hh3cRadiusExtendObjects, hh3cRdGroupName=hh3cRdGroupName, hh3cRdPrimAccIpAddr=hh3cRdPrimAccIpAddr, hh3cRadiusSchAccEntry=hh3cRadiusSchAccEntry, hh3cRadiusSchAccSecKey=hh3cRadiusSchAccSecKey, hh3cRdAccStopRetry=hh3cRdAccStopRetry, hh3cRdServerType=hh3cRdServerType, hh3cRadiusSchAuthPrimUdpPort=hh3cRadiusSchAuthPrimUdpPort, hh3cRdInfoEntry=hh3cRdInfoEntry, PYSNMP_MODULE_ID=hh3cRadius, hh3cRadiusAuthServerEntry=hh3cRadiusAuthServerEntry, hh3cRadiusSchAuthSecUdpPort=hh3cRadiusSchAuthSecUdpPort, hh3cRdSecUdpPort=hh3cRdSecUdpPort, hh3cRdAccDataFlowUnit=hh3cRdAccDataFlowUnit, hh3cRdPrimAccVpnName=hh3cRdPrimAccVpnName, hh3cRdSecAccVpnName=hh3cRdSecAccVpnName, hh3cRdSecondaryAccVpnName=hh3cRdSecondaryAccVpnName, hh3cRadiusAuthTimeoutTimes=hh3cRadiusAuthTimeoutTimes, hh3cRdAccFailureAction=hh3cRdAccFailureAction, hh3cRdQuietTime=hh3cRdQuietTime, hh3cRdAccGroupName=hh3cRdAccGroupName, hh3cRadiusAccClient=hh3cRadiusAccClient, hh3cRadiusSchAccSecIpAddr=hh3cRadiusSchAccSecIpAddr, hh3cRdSecondaryAuthServerEntry=hh3cRdSecondaryAuthServerEntry, hh3cRdObjects=hh3cRdObjects, hh3cRdAccRowStatus=hh3cRdAccRowStatus, hh3cRdSecondaryAccUdpPort=hh3cRdSecondaryAccUdpPort, hh3cRdSecondaryAccRowStatus=hh3cRdSecondaryAccRowStatus, hh3cRdSecondaryAuthUdpPort=hh3cRdSecondaryAuthUdpPort, hh3cRdSecAuthIp=hh3cRdSecAuthIp, hh3cRadiusSchAccPrimIpAddr=hh3cRadiusSchAccPrimIpAddr, hh3cRadiusExtendTables=hh3cRadiusExtendTables, hh3cRadiusStatAccReq=hh3cRadiusStatAccReq, hh3cRdSecondaryAuthServerTable=hh3cRdSecondaryAuthServerTable, hh3cRadiusSchAuthPrimKey=hh3cRadiusSchAuthPrimKey, hh3cRadiusAccClientStartResponses=hh3cRadiusAccClientStartResponses, hh3cRdSecondaryAccServerEntry=hh3cRdSecondaryAccServerEntry, hh3cRadiusAccServerUpTrap=hh3cRadiusAccServerUpTrap, hh3cRadiusAccClientInterimRequests=hh3cRadiusAccClientInterimRequests, hh3cRdAccRealTimeRetry=hh3cRdAccRealTimeRetry, hh3cRdSecAccIpAddr=hh3cRdSecAccIpAddr, hh3cRdPrimAccState=hh3cRdPrimAccState, hh3cRdInfoTable=hh3cRdInfoTable, hh3cRdPrimAuthIpAddrType=hh3cRdPrimAuthIpAddrType, hh3cRdSecAccState=hh3cRdSecAccState, hh3cRadiusAuthFailureTimes=hh3cRadiusAuthFailureTimes, hh3cRdSecAccKey=hh3cRdSecAccKey, hh3cRadiusAuthErrTrap=hh3cRadiusAuthErrTrap, hh3cRdSecondaryAccIpAddrType=hh3cRdSecondaryAccIpAddrType, hh3cRadiusAccClientStartRequests=hh3cRadiusAccClientStartRequests, hh3cRadiusAuthErrThreshold=hh3cRadiusAuthErrThreshold, hh3cRdPrimAuthIp=hh3cRdPrimAuthIp, hh3cRadiusSchAuthSecIpAddr=hh3cRadiusSchAuthSecIpAddr, hh3cRadiusStatistic=hh3cRadiusStatistic, hh3cRadiusAuthRejectTimes=hh3cRadiusAuthRejectTimes, hh3cRadiusSchAccRowStatus=hh3cRadiusSchAccRowStatus, hh3cRdSecondaryAuthRowStatus=hh3cRdSecondaryAuthRowStatus, hh3cRadiusSchAccPrimKey=hh3cRadiusSchAccPrimKey, hh3cRdSecKey=hh3cRdSecKey, hh3cRdPrimAccIpAddrType=hh3cRdPrimAccIpAddrType, hh3cRdPrimVpnName=hh3cRdPrimVpnName, hh3cRdTimeout=hh3cRdTimeout, hh3cRdAcctOnSendInterval=hh3cRdAcctOnSendInterval, hh3cRdPrimAccUdpPort=hh3cRdPrimAccUdpPort, hh3cRadiusAuthServerTable=hh3cRadiusAuthServerTable, hh3cRadius=hh3cRadius, hh3cRadiusExtend=hh3cRadiusExtend, hh3cRdAccKey=hh3cRdAccKey, hh3cRdSecVpnName=hh3cRdSecVpnName, hh3cRadiusSchAuthRowStatus=hh3cRadiusSchAuthRowStatus, hh3cRadiusServerTrapPrefix=hh3cRadiusServerTrapPrefix, hh3cRadiusSchAuthPrimIpAddr=hh3cRadiusSchAuthPrimIpAddr, hh3cRadiusAccClientStopRequests=hh3cRadiusAccClientStopRequests, hh3cRdAccInfoTable=hh3cRdAccInfoTable, hh3cRdSecondaryAccIpAddr=hh3cRdSecondaryAccIpAddr, hh3cRadiusAuthenticating=hh3cRadiusAuthenticating, hh3cRadiusSchAuthTable=hh3cRadiusSchAuthTable, hh3cRdAccTimeout=hh3cRdAccTimeout, hh3cRadiusAccClientStopResponses=hh3cRadiusAccClientStopResponses, hh3cRdAuthNasIpv6Addr=hh3cRdAuthNasIpv6Addr, hh3cRdAccSaveStopPktEnable=hh3cRdAccSaveStopPktEnable, hh3cRadiusAuthClient=hh3cRadiusAuthClient, hh3cRdPrimUdpPort=hh3cRdPrimUdpPort, hh3cRdSecAccIpAddrType=hh3cRdSecAccIpAddrType, hh3cRdSecondaryAccServerTable=hh3cRdSecondaryAccServerTable, hh3cRadiusSchAccPrimUdpPort=hh3cRadiusSchAccPrimUdpPort, hh3cRdSecAuthIpAddr=hh3cRdSecAuthIpAddr, hh3cRdAccRealTime=hh3cRdAccRealTime, hh3cRadiusAccServerTable=hh3cRadiusAccServerTable, hh3cRdSecondaryAuthState=hh3cRdSecondaryAuthState, hh3cRadiusSchAccTable=hh3cRadiusSchAccTable, hh3cRdSecondaryAuthIpAddrType=hh3cRdSecondaryAuthIpAddrType, hh3cRdAcctOnEnable=hh3cRdAcctOnEnable, hh3cRadiusStatLogoutReq=hh3cRadiusStatLogoutReq, hh3cRdSecState=hh3cRdSecState, hh3cRdAccNasIpAddrType=hh3cRdAccNasIpAddrType, hh3cRdAccNasIpAddr=hh3cRdAccNasIpAddr)
