#
# PySNMP MIB module SONUS-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Counter64, Gauge32, TimeTicks, Integer32, ObjectIdentity, Counter32, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Counter64", "Gauge32", "TimeTicks", "Integer32", "ObjectIdentity", "Counter32", "MibIdentifier", "iso", "Bits")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
sonusPortIndex, sonusEventDescription, sonusShelfIndex, sonusEventLevel, sonusEventClass, sonusSlotIndex = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusPortIndex", "sonusEventDescription", "sonusShelfIndex", "sonusEventLevel", "sonusEventClass", "sonusSlotIndex")
sonusCircuitMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusCircuitMIBs")
SonusName, SonusShelfIndex, SonusServiceState, SonusAdminAction, SonusAdminState, SonusSlotIndex = mibBuilder.importSymbols("SONUS-TC", "SonusName", "SonusShelfIndex", "SonusServiceState", "SonusAdminAction", "SonusAdminState", "SonusSlotIndex")
sonusSonetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3))
if mibBuilder.loadTexts: sonusSonetMIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusSonetMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusSonetMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusSonetMIB.setDescription('The MIB Module for Sonus SONET/SDH extensions.')
sonusSonetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1))
sonusSonetPortAdmn = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1))
sonusSonetPortAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: sonusSonetPortAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnTable.setDescription('The Sonus SONET Port Admn Table.')
sonusSonetPortAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPortAdmnIfIndex"))
if mibBuilder.loadTexts: sonusSonetPortAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnEntry.setDescription('An entry in the Sonus SONET Port Admn table.')
sonusSonetPortAdmnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPortAdmnIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetPortAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 2), SonusShelfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnShelfIndex.setDescription('Shelf index for this table.')
sonusSonetPortAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 3), SonusSlotIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnSlotIndex.setDescription('Slot index for this table.')
sonusSonetPortAdmnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnPortIndex.setDescription('OC3 port index for this table.')
sonusSonetPortAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnRowStatus.setDescription('This object is used to create, delete, or modify a row in this table.')
sonusSonetPortAdmnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 6), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnName.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnName.setDescription('Name of this STS3')
sonusSonetPortAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 7), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnState.setDescription('State of STS3, Enabled/Disabled')
sonusSonetPortAdmnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 8), SonusServiceState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnMode.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnMode.setDescription('SONET port entries are created with a mode of outOfService. A SONET port which is outOfService has had all active calls terminated. A SOENT port must be outOfService in order to change its state to disabled.')
sonusSonetPortAdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 9), SonusAdminAction().clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnAction.setDescription('The type of action to perform when a SONET port is taken out of service. The SONET port can be dried up, or it can be forced out of service.')
sonusSonetPortAdmnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnTimeout.setDescription('The Dryup Timeout specifies the maximum amount of time to wait for all active calls to terminate on a SONET port before the port should be taken out-of-service.')
sonusSonetPortAdmnStatAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("init15MinuteNearEnd", 1), ("init15MinuteFarEnd", 2), ("init24HourNearEnd", 4), ("init24HourFarEnd", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnStatAction.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnStatAction.setDescription('Initialize Performance Monitoring Statistics. A PM initialization action initiates one request for the action. Requests to initialize more than one group of statistics can be accomplished by OR-ing the appropriate bits (e.g., to initialize all 15 minute PM statistics, set bits 1 and 2). Reading this variable always returns zero.')
sonusSonetPortAdmnLaserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnLaserState.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnLaserState.setDescription('Controls whether the fiber-optic laser is On or Off.')
sonusSonetPortAdmn24hTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPortAdmn24hTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmn24hTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the current 24 hour measurement period.')
sonusSonetPortAdmnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("enabledInService", 1), ("enabledOutOfService", 2), ("enabledDown", 3), ("dryingUp", 4), ("disabled", 5), ("up", 6), ("down", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPortAdmnOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnOperStatus.setDescription('The actual status of the Sonet interface. Interface is Up if it is administratively in service and there are no line failures or hardware failures. Interface is Down if it is administratively in service and there are line failures or hardware failures, or if it is administratively out of service. Interface is DryingUp if it is administratively out of service and is drying up (no new calls, still carrying in-progress calls). OTHER VALUES ARE NO LONGER SUPPORTED')
sonusSonetPortAdmnDs3ModeOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 15), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnDs3ModeOverride.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnDs3ModeOverride.setDescription('This flag controls whether the mode and state of the Paths carried in an OC3 are modified when the mode and state of the OC3 is modified. If this flag is set to Enabled, the Path state and mode are not changed when the OC3 mode and state are changed.')
sonusSonetPortAdmnStsXmtScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 16), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnStsXmtScramble.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnStsXmtScramble.setDescription('Controls whether the transmitted STS-N data stream is scrambled. If this flag is set to Enabled, the data is scrambled.')
sonusSonetPortAdmnStsRcvDescramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 17), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnStsRcvDescramble.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnStsRcvDescramble.setDescription('Controls whether the received STS-N data stream is descrambled. If this flag is set to Enabled, the data is descrambled.')
sonusSonetPortAdmnAtmXmtScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 18), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnAtmXmtScramble.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnAtmXmtScramble.setDescription('Controls whether the transmitted ATM payload data is scrambled. If this flag is set to Enabled, the data is scrambled. This object only pertains to interfaces carrying ATM.')
sonusSonetPortAdmnAtmRcvDescramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 1, 1, 1, 19), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPortAdmnAtmRcvDescramble.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdmnAtmRcvDescramble.setDescription('Controls whether the received ATM payload data is descrambled. If this flag is set to Enabled, the data is descrambled. This object only pertains to interfaces carrying ATM.')
sonusSonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2))
sonusSonetSectionThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: sonusSonetSectionThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThresholdTable.setDescription('The Sonus SONET Section Threshold Table. This table adds objects to set the Performance Monitoring thresholds for generating a Threshold Crossing Alert.')
sonusSonetSectionThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetSectionThresholdIfIndex"))
if mibBuilder.loadTexts: sonusSonetSectionThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThresholdEntry.setDescription('An entry in the Sonus SONET Section Threshold table.')
sonusSonetSectionThresholdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetSectionThresholdIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThresholdIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetSectionThreshold15mCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mCVs.setDescription('Threshold for 15 minute interval Section layer Coding Violations.')
sonusSonetSectionThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mESs.setDescription('Threshold for 15 minute interval Section layer Errored Seconds.')
sonusSonetSectionThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mSESs.setDescription('Threshold for 15 minute interval Section layer Severely Errored Seconds.')
sonusSonetSectionThreshold15mSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mSEFSs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold15mSEFSs.setDescription('Threshold for 15 minute interval Section layer Severely Errored Frame Seconds.')
sonusSonetSectionThreshold24hCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hCVs.setDescription('Threshold for 24 hour interval Section layer Coding Violations.')
sonusSonetSectionThreshold24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hESs.setDescription('Threshold for 24 hour interval Section layer Errored Seconds.')
sonusSonetSectionThreshold24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hSESs.setDescription('Threshold for 24 hour interval Section layer Severely Errored Seconds.')
sonusSonetSectionThreshold24hSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hSEFSs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionThreshold24hSEFSs.setDescription('Threshold for 24 hour interval Section layer Severely Errored Frame Seconds.')
sonusSonetSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2), )
if mibBuilder.loadTexts: sonusSonetSectionCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentTable.setDescription('The Sonus SONET Section Current table.')
sonusSonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetSectionCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetSectionCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentEntry.setDescription('An entry in the Sonus SONET Section Current table.')
sonusSonetSectionCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetSectionCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetSectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentStatus.setDescription('This variable indicates the status of the interface. It is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetSectionNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetSectionNoDefect 2 sonetSectionLOS 4 sonetSectionLOF')
sonusSonetSectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in the current 24 hour interval.')
sonusSonetSectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in the current 24 hour interval.')
sonusSonetSectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionCurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the current 24 hour interval.')
sonusSonetSectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 2, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in the current 24 hour interval.')
sonusSonetSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3), )
if mibBuilder.loadTexts: sonusSonetSectionIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalTable.setDescription('The Sonus SONET Section Interval table.')
sonusSonetSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetSectionIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetSectionIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetSectionIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalEntry.setDescription('An entry in the Sonus SONET Section Interval table.')
sonusSonetSectionIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetSectionIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetSectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: sonusSonetSectionIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalNumber.setDescription('The number 1 identifies the most recently completed 24 hour interval. In the future if more 24 hour intervals are supported, the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetSectionIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in the previous 24 hour interval.')
sonusSonetSectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in the previous 24 hour interval.')
sonusSonetSectionIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the previous 24 hour interval.')
sonusSonetSectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in the previous 24 hour interval.')
sonusSonetSectionIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 2, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetSectionIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: sonusSonetSectionIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
sonusSonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3))
sonusSonetLineThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1), )
if mibBuilder.loadTexts: sonusSonetLineThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThresholdTable.setDescription('The Sonus SONET Line Threshold Table. This table adds objects to set the Performance Monitoring thresholds for generating a Threshold Crossing Alert.')
sonusSonetLineThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetLineThresholdIfIndex"))
if mibBuilder.loadTexts: sonusSonetLineThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThresholdEntry.setDescription('An entry in the Sonus SONET Line Threshold table.')
sonusSonetLineThresholdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetLineThresholdIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThresholdIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetLineThreshold15mCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold15mCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold15mCVs.setDescription('Threshold for 15 minute interval Line layer Coding Violations.')
sonusSonetLineThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold15mESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold15mESs.setDescription('Threshold for 15 minute interval Line layer Errored Seconds.')
sonusSonetLineThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold15mSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold15mSESs.setDescription('Threshold for 15 minute interval Line layer Severely Errored Seconds.')
sonusSonetLineThreshold15mUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold15mUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold15mUASs.setDescription('Threshold for 15 minute interval Line layer Unavailable Seconds.')
sonusSonetLineThreshold24hCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold24hCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold24hCVs.setDescription('Threshold for 24 hour interval Line layer Coding Violations.')
sonusSonetLineThreshold24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold24hESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold24hESs.setDescription('Threshold for 24 hour interval Line layer Errored Seconds.')
sonusSonetLineThreshold24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold24hSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold24hSESs.setDescription('Threshold for 24 hour interval Line layer Severely Errored Seconds.')
sonusSonetLineThreshold24hUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetLineThreshold24hUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThreshold24hUASs.setDescription('Threshold for 24 hour interval Line layer Unavailable Seconds.')
sonusSonetLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2), )
if mibBuilder.loadTexts: sonusSonetLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentTable.setDescription('The Sonus SONET Line Current table.')
sonusSonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetLineCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentEntry.setDescription('An entry in the Sonus SONET Line Current table.')
sonusSonetLineCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetLineCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetLineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentStatus.setDescription('This variable indicates the status of the interface. It is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetSectionNoDefect 2 sonetLineAIS 4 sonetLineRDI')
sonusSonetLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 2, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineCurrentFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3), )
if mibBuilder.loadTexts: sonusSonetLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalTable.setDescription('The Sonus SONET Line Interval table.')
sonusSonetLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetLineIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetLineIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalEntry.setDescription('An entry in the Sonus SONET Line Interval table.')
sonusSonetLineIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetLineIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: sonusSonetLineIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalNumber.setDescription('The number 1 identifies the most recently completed 24 hour interval. In the future if more 24 hour intervals are supported, the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in the previous 24 hour interval.')
sonusSonetLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in the previous 24 hour interval.')
sonusSonetLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in the previous 24 hour interval.')
sonusSonetLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in the previous 24 hour interval.')
sonusSonetLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Line in the previous 24 hour interval.')
sonusSonetLineIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
sonusSonetFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4), )
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentTable.setDescription('The Sonus SONET Far End Line Current table.')
sonusSonetFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndLineCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentEntry.setDescription('An entry in the Sonus SONET Far End Line Current table.')
sonusSonetFarEndLineCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetFarEndLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 4, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineCurrentFCs.setDescription('The counter associated with the number of Far End Failures encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5), )
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalTable.setDescription('The Sonus SONET Far End Line Interval table.')
sonusSonetFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndLineIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetFarEndLineIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalEntry.setDescription('An entry in the Sonus SONET Far End Line Interval table.')
sonusSonetFarEndLineIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetFarEndLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalNumber.setDescription('The number 1 identifies the most recently completed 24 hour interval. In the future if more 24 hour intervals are supported, the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetFarEndLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalFCs.setDescription('The counter associated with the number of Far End Failures encountered by a SONET/SDH Line in the current 24 hour interval.')
sonusSonetFarEndLineIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
sonusSonetLineFailureCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 6), )
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentTable.setDescription('The Sonus SONET Line Failure Current table.')
sonusSonetLineFailureCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 6, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetLineFailureCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentEntry.setDescription('An entry in the Sonus SONET Line Failure Current table.')
sonusSonetLineFailureCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetLineFailureCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 6, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureCurrentFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Line in the current 15 minute interval.')
sonusSonetLineFailureIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 7), )
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalTable.setDescription('The Sonus SONET Line Failure Interval table.')
sonusSonetLineFailureIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 7, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetLineFailureIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetLineFailureIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalEntry.setDescription('An entry in the Sonus SONET Line Failure Interval table.')
sonusSonetLineFailureIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetLineFailureIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalNumber.setDescription('A number between 1 and 32, which identifies the interval for which the set of statistics is available. The number 1 identifies the most recently completed interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetLineFailureIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineFailureIntervalFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Line in the current 15 minute interval.')
sonusSonetFarEndLineFailureCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 8), )
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentTable.setDescription('The Sonus SONET Far End Line Failure Current table.')
sonusSonetFarEndLineFailureCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 8, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndLineFailureCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentEntry.setDescription('An entry in the Sonus SONET Far End Line Failure Current table.')
sonusSonetFarEndLineFailureCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetFarEndLineFailureCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 8, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureCurrentFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Line in the current 15 minute interval.')
sonusSonetFarEndLineFailureIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 9), )
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalTable.setDescription('The Sonus SONET Far End Line Failure Interval table.')
sonusSonetFarEndLineFailureIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 9, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndLineFailureIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetFarEndLineFailureIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalEntry.setDescription('An entry in the Sonus SONET Far End Line Failure Interval table.')
sonusSonetFarEndLineFailureIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalIfIndex.setDescription('The ifIndex assigned to this port when it was created. This will not change until the port is deleted.')
sonusSonetFarEndLineFailureIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 9, 1, 2), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalNumber.setDescription('A number between 1 and 32, which identifies the interval for which the set of statistics is available. The number 1 identifies the most recently completed interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetFarEndLineFailureIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 3, 9, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndLineFailureIntervalFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Line in the current 15 minute interval.')
sonusSonetLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4))
sonusSonetLayerTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: sonusSonetLayerTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerTable.setDescription('The SONET layer table. This table maps SONET Interface ifIndex to a shelf, slot, and port.')
sonusSonetLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetLayerShelfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetLayerSlotIndex"), (0, "SONUS-SONET-MIB", "sonusSonetLayerPortIndex"))
if mibBuilder.loadTexts: sonusSonetLayerEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerEntry.setDescription('An entry in the SONET layer table. This entry maps the ifIndex of the SONET Interface to a shelf, slot and port. A row is added to this table when a SONET port is created.')
sonusSonetLayerShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1, 1, 1), SonusShelfIndex())
if mibBuilder.loadTexts: sonusSonetLayerShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerShelfIndex.setDescription('Shelf index for this table.')
sonusSonetLayerSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1, 1, 2), SonusSlotIndex())
if mibBuilder.loadTexts: sonusSonetLayerSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerSlotIndex.setDescription('Slot index for this table.')
sonusSonetLayerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: sonusSonetLayerPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerPortIndex.setDescription('Port index for this table.')
sonusSonetLayerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetLayerIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerIfIndex.setDescription('The ifIndex assigned to this shelf, slot, and port when the SONET Interface was created.')
sonusSonetLayerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusSonetLayerRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLayerRowStatus.setDescription('This object is used to create, delete, or modify a row in this table.')
sonusSonetObjectsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2))
sonusSonetPathAdmn = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1))
sonusSonetPathAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1), )
if mibBuilder.loadTexts: sonusSonetPathAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnTable.setDescription('The Sonus SONET Path Admn Table.')
sonusSonetPathAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPathAdmnIfIndex"))
if mibBuilder.loadTexts: sonusSonetPathAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnEntry.setDescription('An entry in the Sonus SONET Path Admn table.')
sonusSonetPathAdmnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPathAdmnIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetPathAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 2), SonusShelfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnShelfIndex.setDescription('Shelf index for this table.')
sonusSonetPathAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 3), SonusSlotIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnSlotIndex.setDescription('Slot index for this table.')
sonusSonetPathAdmnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnPortIndex.setDescription('OC3 port index for this table.')
sonusSonetPathAdmnPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathAdmnPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnPathIndex.setDescription('STS1 path index for this table.')
sonusSonetPathAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnRowStatus.setDescription('This object is used to create, delete, or modify a row in this table.')
sonusSonetPathAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 7), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnState.setDescription('State of STS1, Enabled/Disabled')
sonusSonetPathAdmnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 8), SonusServiceState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnMode.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnMode.setDescription('STS1 in-service/out-of-service.')
sonusSonetPathAdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 9), SonusAdminAction().clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnAction.setDescription('The type of action to perform when a SONET path is taken out of service. The SONET path can be dried up, or it can be forced out of service.')
sonusSonetPathAdmnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnTimeout.setDescription('The Dryup Timeout specifies the maximum amount of time to wait for all active calls to terminate on a SONET path before the path should be taken out-of-service.')
sonusSonetPathAdmnStatAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("init15MinuteNearEnd", 1), ("init15MinuteFarEnd", 2), ("init24HourNearEnd", 4), ("init24HourFarEnd", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnStatAction.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnStatAction.setDescription('Initialize Performance Monitoring Statistics. A PM initialization action initiates one request for the action. Requests to initialize more than one group of statistics can be accomplished by OR-ing the appropriate bits (e.g., to initialize all 15 minute PM statistics, set bits 1 and 2). Reading this variable always returns zero.')
sonusSonetPathAdmnRDIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("enhanced", 2))).clone('enhanced')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnRDIMode.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnRDIMode.setDescription('The desired type of SONET port Path Remote Defect Indication to use. (1) normal - Use one-bit RDI-P signalling using bit 5 of G1. (2) enhanced - Use three-bit RDI-P (ERDI-P) using bits 5-7 of G1.')
sonusSonetPathAdmnTraceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 13), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceState.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceState.setDescription("The desired state of SONET Path Trace. (1) enabled - Enables the generation of SONET Path Trace Messages in the J1 bytes of the STS Path overhead, and enables the reception and checking of received Path Trace Messages with the Expected Path Trace Message. (2) disabled - Transmits all zero's in the J1 bytes of the STS Path overhead, and disables the reception and checking of received Path Trace Messages with the Expected Path Trace Message.")
sonusSonetPathAdmnTraceExpMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 61))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceExpMsg.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceExpMsg.setDescription('The expected path trace string to be received on the SONET port in the J1 bytes of the STS Path overhead.')
sonusSonetPathAdmnTraceXmtMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 61))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceXmtMsg.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceXmtMsg.setDescription('The path trace string to be transmitted on the SONET port in the J1 bytes of the STS Path overhead.')
sonusSonetPathAdmnTraceRcvMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 61))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceRcvMsg.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnTraceRcvMsg.setDescription('The path trace string received on the SONET port in the J1 bytes of the STS Path overhead.')
sonusSonetPathAdmnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("enabledInService", 1), ("enabledOutOfService", 2), ("enabledDown", 3), ("dryingUp", 4), ("disabled", 5), ("up", 6), ("down", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathAdmnOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnOperStatus.setDescription('The actual status of the Sonet path. Path is Up if it is administratively in service and there are no line failures or hardware failures. Path is Down if it is administratively in service and there are line failures or hardware failures, or if it is administratively out of service. Path is DryingUp if it is administratively out of service and is drying up (no new calls, still carrying in-progress calls) THE OTHER VALUES ARE NO LONGER SUPPORTED.')
sonusSonetPathAdmnDs3ModeOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 1, 1, 1, 18), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathAdmnDs3ModeOverride.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdmnDs3ModeOverride.setDescription('This flag controls whether the mode and state of the DS3 carried in the Path are modified when the mode and state of the Path is modified. If this flag is set to Enabled, the DS3 state and mode are not changed when the Path mode and state are changed.')
sonusSonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2))
sonusSonetPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1), )
if mibBuilder.loadTexts: sonusSonetPathThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThresholdTable.setDescription('The Sonus SONET Path Threshold Table. This table adds objects to set the Performance Monitoring thresholds for generating a Threshold Crossing Alert.')
sonusSonetPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPathThresholdIfIndex"))
if mibBuilder.loadTexts: sonusSonetPathThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThresholdEntry.setDescription('An entry in the Sonus SONET Path Threshold table.')
sonusSonetPathThresholdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPathThresholdIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThresholdIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetPathThresholdPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathThresholdPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThresholdPathIndex.setDescription('STS1 path index for this table.')
sonusSonetPathThreshold15mCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold15mCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold15mCVs.setDescription('Threshold for 15 minute interval Path layer Coding Violations.')
sonusSonetPathThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold15mESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold15mESs.setDescription('Threshold for 15 minute interval Path layer Errored Seconds.')
sonusSonetPathThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold15mSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold15mSESs.setDescription('Threshold for 15 minute interval Path layer Severely Errored Seconds.')
sonusSonetPathThreshold15mUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold15mUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold15mUASs.setDescription('Threshold for 15 minute interval Path layer Unavailable Seconds.')
sonusSonetPathThreshold24hCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold24hCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold24hCVs.setDescription('Threshold for 24 hour interval Path layer Coding Violations.')
sonusSonetPathThreshold24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold24hESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold24hESs.setDescription('Threshold for 24 hour interval Path layer Errored Seconds.')
sonusSonetPathThreshold24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold24hSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold24hSESs.setDescription('Threshold for 24 hour interval Path layer Severely Errored Seconds.')
sonusSonetPathThreshold24hUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSonetPathThreshold24hUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThreshold24hUASs.setDescription('Threshold for 24 hour interval Path layer Unavailable Seconds.')
sonusSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2), )
if mibBuilder.loadTexts: sonusSonetPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentTable.setDescription('The Sonus SONET Path Current table.')
sonusSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPathCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentEntry.setDescription('An entry in the Sonus SONET Path Current table.')
sonusSonetPathCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPathCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetPathCurrentPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentPathIndex.setDescription('STS1 path index for this table.')
sonusSonetPathCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sts1", 1), ("sts3cSTM1", 2), ("sts12cSTM4", 3), ("sts24c", 4), ("sts48cSTM16", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentWidth.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentWidth.setDescription('A value that indicates the type of the SONET/SDH Path. For SONET, the assigned types are the STS-Nc SPEs, where N = 1, 3, 12, 24, and 48. STS-1 is equal to 51.84 Mbps. For SDH, the assigned types are the STM-Nc VCs, where N = 1, 4, and 16.')
sonusSonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentStatus.setDescription('This variable indicates the status of the interface. It is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetPathNoDefect 2 sonetPathSTSLOP 4 sonetPathSTSAIS 8 sonetPathSTSRDI 16 sonetPathUnequiped 32 sonetPathSignalLabelMismatch')
sonusSonetPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetPathCurrentTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodefect", 1), ("tracemismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathCurrentTraceStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathCurrentTraceStatus.setDescription('The status of the Trace Mismatch Failure.')
sonusSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3), )
if mibBuilder.loadTexts: sonusSonetPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalTable.setDescription('The Sonus SONET Path Interval table.')
sonusSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPathIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetPathIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalEntry.setDescription('An entry in the Sonus SONET Path Interval table.')
sonusSonetPathIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPathIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetPathIntervalPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalPathIndex.setDescription('STS1 path index for this table.')
sonusSonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: sonusSonetPathIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalNumber.setDescription('The number 1 identifies the most recently completed 24 hour interval. In the future if more 24 hour intervals are supported, the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the previous 24 hour interval.')
sonusSonetPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the previous 24 hour interval.')
sonusSonetPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Path in the previous 24 hour interval.')
sonusSonetPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in the previous 24 hour interval.')
sonusSonetPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Path in the previous 24 hour interval.')
sonusSonetPathIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
sonusSonetFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4), )
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentTable.setDescription('The Sonus SONET Far End Path Current table.')
sonusSonetFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndPathCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentEntry.setDescription('An entry in the Sonus SONET Far End Path Current table.')
sonusSonetFarEndPathCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetFarEndPathCurrentPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentPathIndex.setDescription('STS1 path index for this table.')
sonusSonetFarEndPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 4, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathCurrentFCs.setDescription('The counter associated with the number of Far End Failures encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5), )
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalTable.setDescription('The Sonus SONET Far End Path Interval table.')
sonusSonetFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndPathIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetFarEndPathIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalEntry.setDescription('An entry in the Sonus SONET Far End Path Interval table.')
sonusSonetFarEndPathIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetFarEndPathIntervalPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalPathIndex.setDescription('STS1 path index for this table.')
sonusSonetFarEndPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalNumber.setDescription('The number 1 identifies the most recently completed 24 hour interval. In the future if more 24 hour intervals are supported, the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetFarEndPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalFCs.setDescription('The counter associated with the number of Far End Failures encountered by a SONET/SDH Path in the current 24 hour interval.')
sonusSonetFarEndPathIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
sonusSonetPathFailureCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 6), )
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentTable.setDescription('The Sonus SONET Path Failure Current table.')
sonusSonetPathFailureCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 6, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPathFailureCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentEntry.setDescription('An entry in the Sonus SONET Path Failure Current table.')
sonusSonetPathFailureCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetPathFailureCurrentPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentPathIndex.setDescription('STS1 path index for this table.')
sonusSonetPathFailureCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 6, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Path in the current 15 minute interval.')
sonusSonetPathFailureCurrentTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodefect", 1), ("tracemismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentTraceStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureCurrentTraceStatus.setDescription('The status of the Trace Mismatch Failure.')
sonusSonetPathFailureIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 7), )
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalTable.setDescription('The Sonus SONET Path Failure Interval table.')
sonusSonetPathFailureIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 7, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetPathFailureIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetPathFailureIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalEntry.setDescription('An entry in the Sonus SONET Path Failure Interval table.')
sonusSonetPathFailureIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetPathFailureIntervalPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalPathIndex.setDescription('STS1 path index for this table.')
sonusSonetPathFailureIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 7, 1, 3), Integer32())
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalNumber.setDescription('A number between 1 and 32, which identifies the interval for which the set of statistics is available. The number 1 identifies the most recently completed interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetPathFailureIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathFailureIntervalFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Path in the current 15 minute interval.')
sonusSonetFarEndPathFailureCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 8), )
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentTable.setDescription('The Sonus SONET Far End Path Failure Current table.')
sonusSonetFarEndPathFailureCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 8, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndPathFailureCurrentIfIndex"))
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentEntry.setDescription('An entry in the Sonus SONET Far End Path Failure Current table.')
sonusSonetFarEndPathFailureCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetFarEndPathFailureCurrentPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentPathIndex.setDescription('STS1 path index for this table.')
sonusSonetFarEndPathFailureCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 8, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureCurrentFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Path in the current 15 minute interval.')
sonusSonetFarEndPathFailureIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 9), )
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalTable.setDescription('The Sonus SONET Far End Path Failure Interval table.')
sonusSonetFarEndPathFailureIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 9, 1), ).setIndexNames((0, "SONUS-SONET-MIB", "sonusSonetFarEndPathFailureIntervalIfIndex"), (0, "SONUS-SONET-MIB", "sonusSonetFarEndPathFailureIntervalNumber"))
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalEntry.setDescription('An entry in the Sonus SONET Far End Path Failure Interval table.')
sonusSonetFarEndPathFailureIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalIfIndex.setDescription('The ifIndex assigned to this path when it was created. This will not change until the path is deleted.')
sonusSonetFarEndPathFailureIntervalPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalPathIndex.setDescription('STS1 path index for this table.')
sonusSonetFarEndPathFailureIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalNumber.setDescription('A number between 1 and 32, which identifies the interval for which the set of statistics is available. The number 1 identifies the most recently completed interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonusSonetFarEndPathFailureIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 2, 2, 9, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: sonusSonetFarEndPathFailureIntervalFCs.setDescription('The counter associated with the number of Failures encountered by a SONET/SDH Path in the current 15 minute interval.')
sonusSonetNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSonetNextIndex.setDescription('The next valid index to use when creating an entry in the sonusSonetTable.')
sonusSonetMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4))
sonusSonetMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0))
sonusSonetMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1))
sonusSonetAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabledInService", 1), ("enabledOutOfService", 2), ("disabled", 3), ("deleted", 4), ("dryingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetAdminStatus.setDescription('The administrative status of a Sonet port. EnabledInService means the port configuration is applied and the port is available to carry calls. EnabledOutOfService means the port configuration is applied and the port is not available to carry calls. Disabled means the port configuration is not applied and the port is not available to carry calls. DryingUp means the port is still carrying in-progress calls but is not available for new calls. Value deleted is NO LONGER SUPPORTED.')
sonusSonetOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("dryingUp", 3), ("inServiceDown", 4), ("outOfServiceDown", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: sonusSonetOperStatus.setDescription('Operational status of the Sonet port. Port is inService if the admin state is enabled and the admin mode is in service. Port is outOfService if admin state is enabled, admin mode is out of service, and port is no longer carrying calls (dried up). Port is dryingUp if admin state is enabled, admin mode is out of service, and port is drying up (no new calls, still carrying in-progress calls). Port is inServiceDown if admin state is enabled, admin mode is in service, but physical link is not available due to alarm condition. Port is outOfServiceDown if admin state is enabled, admin mode is out of service, but physical link is not available due to alarm condition. Port is disabled if admin state is disabled, admin mode is out of service, and port is no longer carrying calls (dried up).')
sonusSonetAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("los", 1), ("losClear", 2), ("lof", 3), ("lofClear", 4), ("lAIS", 5), ("lAISClear", 6), ("lRFI", 7), ("lRFIClear", 8), ("pAIS", 9), ("pAISClear", 10), ("pRFI", 11), ("pRFIClear", 12), ("pLOP", 13), ("pLOPClear", 14), ("pUNEQ", 15), ("pUNEQClear", 16), ("pPLM", 17), ("pPLMClear", 18), ("pTIM", 19), ("pTIMClear", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSonetAlarmStatus.setDescription('Alarm conditions.')
sonusSonetThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44))).clone(namedValues=NamedValues(("sectionNearendCodingViolation15min", 1), ("sectionNearendErroredSec15min", 2), ("sectionNearendSeverelyErroredSec15min", 3), ("sectionNearendSeverelyErroredFrameSec15min", 4), ("lineNearendCodingViolation15min", 5), ("lineNearendErroredSec15min", 6), ("lineNearendSeverelyErroredSec15min", 7), ("lineNearendUnavailableSec15min", 8), ("pathNearendCodingViolation15min", 9), ("pathNearendErroredSec15min", 10), ("pathNearendSeverelyErroredSec15min", 11), ("pathNearendUnavailableSec15min", 12), ("sectionNearendCodingViolation24hr", 13), ("sectionNearendErroredSec24hr", 14), ("sectionNearendSeverelyErroredSec24hr", 15), ("sectionNearendSeverelyErroredFrameSec24hr", 16), ("lineNearendCodingViolation24hr", 17), ("lineNearendErroredSec24hr", 18), ("lineNearendSeverelyErroredSec24hr", 19), ("lineNearendUnavailableSec24hr", 20), ("pathNearendCodingViolation24hr", 21), ("pathNearendErroredSec24hr", 22), ("pathNearendSeverelyErroredSec24hr", 23), ("pathNearendUnavailableSec24hr", 24), ("lineFarendCodingViolation15min", 25), ("lineFarendErroredSec15min", 26), ("lineFarendSeverelyErroredSec15min", 27), ("lineFarendUnavailableSec15min", 28), ("pathFarendCodingViolation15min", 29), ("pathFarendErroredSec15min", 30), ("pathFarendSeverelyErroredSec15min", 31), ("pathFarendUnavailableSec15min", 32), ("sectionFarendCodingViolation24hr", 33), ("sectionFarendErroredSec24hr", 34), ("sectionFarendSeverelyErroredSec24hr", 35), ("sectionFarendSeverelyErroredFrameSec24hr", 36), ("lineFarendCodingViolation24hr", 37), ("lineFarendErroredSec24hr", 38), ("lineFarendSeverelyErroredSec24hr", 39), ("lineFarendUnavailableSec24hr", 40), ("pathFarendCodingViolation24hr", 41), ("pathFarendErroredSec24hr", 42), ("pathFarendSeverelyErroredSec24hr", 43), ("pathFarendUnavailableSec24hr", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetThresholdType.setStatus('current')
if mibBuilder.loadTexts: sonusSonetThresholdType.setDescription('Threshold crossing types.')
sonusPathIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusPathIndex.setStatus('current')
if mibBuilder.loadTexts: sonusPathIndex.setDescription('STS1 path index.')
sonusSonetOutOfServiceReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("hwFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSonetOutOfServiceReason.setStatus('current')
if mibBuilder.loadTexts: sonusSonetOutOfServiceReason.setDescription('Reason the Sonet port/path went out of service.')
sonusSonetPortAdminStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusSonetAdminStatus"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPortAdminStatusNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortAdminStatusNotification.setDescription("This trap indicates the Sonet port's administrative status has changed due to an operator-initiated command. Possible admin status is EnabledInService, EnabledOutOfService, Disabled, and DryingUp.")
sonusSonetPortOperStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusSonetOperStatus"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPortOperStatusNotification.setStatus('obsolete')
if mibBuilder.loadTexts: sonusSonetPortOperStatusNotification.setDescription("NO LONGER SUPPORTED. This trap indicates the Sonet port's operational status has changed.")
sonusSonetLineAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusSonetAlarmStatus"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetLineAlarmNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineAlarmNotification.setDescription('This trap indicates the line Section/Line-layer alarm state of the Sonet port has changed.')
sonusSonetLineThresholdCrossNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusSonetThresholdType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetLineThresholdCrossNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetLineThresholdCrossNotification.setDescription('This trap indicates that a Section/Line-layer performance monitoring threshold has been crossed.')
sonusSonetPathAdminStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusPathIndex"), ("SONUS-SONET-MIB", "sonusSonetAdminStatus"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPathAdminStatusNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAdminStatusNotification.setDescription("This trap indicates the Sonet path's administrative status has changed due to an operator-initiated command. Possible admin status is EnabledInService, EnabledOutOfService, Disabled, and DryingUp.")
sonusSonetPathOperStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusPathIndex"), ("SONUS-SONET-MIB", "sonusSonetOperStatus"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPathOperStatusNotification.setStatus('obsolete')
if mibBuilder.loadTexts: sonusSonetPathOperStatusNotification.setDescription("NO LONGER SUPPORTED. This trap indicates the Sonet path's operational status has changed.")
sonusSonetPathAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusPathIndex"), ("SONUS-SONET-MIB", "sonusSonetAlarmStatus"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPathAlarmNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathAlarmNotification.setDescription('This trap indicates the line Path-layer alarm state of the Sonet path has changed.')
sonusSonetPathThresholdCrossNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusPathIndex"), ("SONUS-SONET-MIB", "sonusSonetThresholdType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPathThresholdCrossNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathThresholdCrossNotification.setDescription('This trap indicates that a Path-layer performance monitoring threshold has been crossed.')
sonusSonetPortOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusSonetOutOfServiceReason"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPortOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPortOutOfServiceNotification.setDescription('This trap indicates the Sonet port went out of service. Reason indicates why the port went out of service. Possible reasons include admin or hardware failure.')
sonusSonetPathOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 3, 4, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-SONET-MIB", "sonusPathIndex"), ("SONUS-SONET-MIB", "sonusSonetOutOfServiceReason"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSonetPathOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSonetPathOutOfServiceNotification.setDescription('This trap indicates the Sonet path went out of service. Reason indicates why the port went out of service. Possible reasons include admin or hardware failure.')
mibBuilder.exportSymbols("SONUS-SONET-MIB", sonusSonetPathThreshold15mSESs=sonusSonetPathThreshold15mSESs, sonusSonetPathCurrentStatus=sonusSonetPathCurrentStatus, sonusSonetFarEndPathIntervalSESs=sonusSonetFarEndPathIntervalSESs, sonusSonetFarEndPathIntervalCVs=sonusSonetFarEndPathIntervalCVs, sonusSonetFarEndLineFailureIntervalFCs=sonusSonetFarEndLineFailureIntervalFCs, sonusSonetLayer=sonusSonetLayer, sonusSonetFarEndPathFailureCurrentFCs=sonusSonetFarEndPathFailureCurrentFCs, sonusSonetLineCurrentFCs=sonusSonetLineCurrentFCs, sonusSonetPathIntervalUASs=sonusSonetPathIntervalUASs, sonusSonetFarEndPathIntervalESs=sonusSonetFarEndPathIntervalESs, sonusSonetFarEndPathFailureCurrentEntry=sonusSonetFarEndPathFailureCurrentEntry, sonusSonetLineThresholdEntry=sonusSonetLineThresholdEntry, sonusSonetPathOperStatusNotification=sonusSonetPathOperStatusNotification, sonusSonetPathAdmnTraceXmtMsg=sonusSonetPathAdmnTraceXmtMsg, sonusSonetPortAdmnLaserState=sonusSonetPortAdmnLaserState, sonusSonetSectionIntervalEntry=sonusSonetSectionIntervalEntry, sonusSonetFarEndLineFailureCurrentTable=sonusSonetFarEndLineFailureCurrentTable, sonusSonetFarEndPathIntervalTable=sonusSonetFarEndPathIntervalTable, sonusSonetFarEndPathIntervalNumber=sonusSonetFarEndPathIntervalNumber, sonusSonetLineFailureIntervalFCs=sonusSonetLineFailureIntervalFCs, sonusSonetPortAdmnStatAction=sonusSonetPortAdmnStatAction, sonusSonetPathIntervalFCs=sonusSonetPathIntervalFCs, sonusSonetSectionCurrentSESs=sonusSonetSectionCurrentSESs, sonusSonetLineIntervalFCs=sonusSonetLineIntervalFCs, sonusSonetPortAdmnName=sonusSonetPortAdmnName, sonusSonetSectionIntervalSEFSs=sonusSonetSectionIntervalSEFSs, sonusSonetPathFailureCurrentFCs=sonusSonetPathFailureCurrentFCs, sonusSonetPathThreshold24hESs=sonusSonetPathThreshold24hESs, sonusSonetPathIntervalNumber=sonusSonetPathIntervalNumber, sonusSonetMIBNotificationsObjects=sonusSonetMIBNotificationsObjects, sonusSonetSectionThreshold24hCVs=sonusSonetSectionThreshold24hCVs, sonusSonetSectionCurrentStatus=sonusSonetSectionCurrentStatus, sonusSonetFarEndLineIntervalNumber=sonusSonetFarEndLineIntervalNumber, sonusSonetPathFailureCurrentTraceStatus=sonusSonetPathFailureCurrentTraceStatus, sonusSonetPathAdmnTraceRcvMsg=sonusSonetPathAdmnTraceRcvMsg, sonusSonetMIBNotificationsPrefix=sonusSonetMIBNotificationsPrefix, sonusSonetLineFailureCurrentIfIndex=sonusSonetLineFailureCurrentIfIndex, sonusSonetPortAdmnState=sonusSonetPortAdmnState, sonusSonetPathCurrentTable=sonusSonetPathCurrentTable, sonusSonetPathFailureIntervalNumber=sonusSonetPathFailureIntervalNumber, sonusSonetLineCurrentCVs=sonusSonetLineCurrentCVs, sonusSonetSectionCurrentESs=sonusSonetSectionCurrentESs, sonusSonetLineThreshold15mSESs=sonusSonetLineThreshold15mSESs, sonusSonetFarEndPathIntervalIfIndex=sonusSonetFarEndPathIntervalIfIndex, sonusSonetSectionIntervalTable=sonusSonetSectionIntervalTable, sonusSonetPortAdmnStsXmtScramble=sonusSonetPortAdmnStsXmtScramble, sonusSonetLineThresholdIfIndex=sonusSonetLineThresholdIfIndex, PYSNMP_MODULE_ID=sonusSonetMIB, sonusSonetLineIntervalESs=sonusSonetLineIntervalESs, sonusSonetFarEndLineCurrentCVs=sonusSonetFarEndLineCurrentCVs, sonusSonetFarEndPathCurrentPathIndex=sonusSonetFarEndPathCurrentPathIndex, sonusSonetFarEndPathCurrentSESs=sonusSonetFarEndPathCurrentSESs, sonusSonetLineIntervalCVs=sonusSonetLineIntervalCVs, sonusSonetNextIndex=sonusSonetNextIndex, sonusSonetLayerSlotIndex=sonusSonetLayerSlotIndex, sonusSonetPathIntervalPathIndex=sonusSonetPathIntervalPathIndex, sonusSonetPathAdminStatusNotification=sonusSonetPathAdminStatusNotification, sonusSonetPathAdmnStatAction=sonusSonetPathAdmnStatAction, sonusSonetPortAdmnRowStatus=sonusSonetPortAdmnRowStatus, sonusSonetLineThreshold24hUASs=sonusSonetLineThreshold24hUASs, sonusSonetLineFailureIntervalTable=sonusSonetLineFailureIntervalTable, sonusSonetPathAdmnTraceExpMsg=sonusSonetPathAdmnTraceExpMsg, sonusSonetSectionThreshold15mSESs=sonusSonetSectionThreshold15mSESs, sonusSonetLineCurrentSESs=sonusSonetLineCurrentSESs, sonusSonetFarEndPathCurrentTable=sonusSonetFarEndPathCurrentTable, sonusSonetPathFailureCurrentPathIndex=sonusSonetPathFailureCurrentPathIndex, sonusSonetFarEndPathFailureIntervalIfIndex=sonusSonetFarEndPathFailureIntervalIfIndex, sonusSonetPathCurrentPathIndex=sonusSonetPathCurrentPathIndex, sonusSonetPortAdmnEntry=sonusSonetPortAdmnEntry, sonusSonetPathIntervalCVs=sonusSonetPathIntervalCVs, sonusSonetSection=sonusSonetSection, sonusSonetFarEndLineIntervalEntry=sonusSonetFarEndLineIntervalEntry, sonusSonetPathAdmnRowStatus=sonusSonetPathAdmnRowStatus, sonusSonetPortAdmnMode=sonusSonetPortAdmnMode, sonusSonetFarEndPathCurrentFCs=sonusSonetFarEndPathCurrentFCs, sonusSonetPathThresholdPathIndex=sonusSonetPathThresholdPathIndex, sonusSonetPathCurrentUASs=sonusSonetPathCurrentUASs, sonusSonetSectionIntervalValidData=sonusSonetSectionIntervalValidData, sonusSonetLineThreshold24hSESs=sonusSonetLineThreshold24hSESs, sonusSonetFarEndLineFailureCurrentFCs=sonusSonetFarEndLineFailureCurrentFCs, sonusSonetPathAdmn=sonusSonetPathAdmn, sonusSonetFarEndLineIntervalSESs=sonusSonetFarEndLineIntervalSESs, sonusSonetLineCurrentStatus=sonusSonetLineCurrentStatus, sonusSonetLayerShelfIndex=sonusSonetLayerShelfIndex, sonusSonetPathAdmnTable=sonusSonetPathAdmnTable, sonusSonetPathFailureIntervalEntry=sonusSonetPathFailureIntervalEntry, sonusSonetLineCurrentEntry=sonusSonetLineCurrentEntry, sonusSonetLineFailureCurrentFCs=sonusSonetLineFailureCurrentFCs, sonusSonetFarEndLineCurrentFCs=sonusSonetFarEndLineCurrentFCs, sonusSonetOutOfServiceReason=sonusSonetOutOfServiceReason, sonusSonetPathIntervalSESs=sonusSonetPathIntervalSESs, sonusSonetPathAdmnSlotIndex=sonusSonetPathAdmnSlotIndex, sonusSonetPathAdmnOperStatus=sonusSonetPathAdmnOperStatus, sonusSonetPathFailureIntervalTable=sonusSonetPathFailureIntervalTable, sonusSonetPathAdmnRDIMode=sonusSonetPathAdmnRDIMode, sonusSonetFarEndPathCurrentESs=sonusSonetFarEndPathCurrentESs, sonusSonetPathAdmnState=sonusSonetPathAdmnState, sonusSonetPath=sonusSonetPath, sonusSonetPathFailureCurrentIfIndex=sonusSonetPathFailureCurrentIfIndex, sonusSonetFarEndLineIntervalValidData=sonusSonetFarEndLineIntervalValidData, sonusSonetPathThresholdEntry=sonusSonetPathThresholdEntry, sonusSonetLineFailureCurrentEntry=sonusSonetLineFailureCurrentEntry, sonusSonetPathIntervalEntry=sonusSonetPathIntervalEntry, sonusSonetPathThresholdCrossNotification=sonusSonetPathThresholdCrossNotification, sonusSonetFarEndPathCurrentCVs=sonusSonetFarEndPathCurrentCVs, sonusSonetPortOutOfServiceNotification=sonusSonetPortOutOfServiceNotification, sonusSonetSectionThresholdTable=sonusSonetSectionThresholdTable, sonusSonetPortAdmnTable=sonusSonetPortAdmnTable, sonusSonetPathCurrentTraceStatus=sonusSonetPathCurrentTraceStatus, sonusSonetLineCurrentESs=sonusSonetLineCurrentESs, sonusSonetFarEndPathCurrentEntry=sonusSonetFarEndPathCurrentEntry, sonusSonetPathCurrentCVs=sonusSonetPathCurrentCVs, sonusSonetSectionIntervalIfIndex=sonusSonetSectionIntervalIfIndex, sonusSonetLineIntervalValidData=sonusSonetLineIntervalValidData, sonusSonetPortAdmn=sonusSonetPortAdmn, sonusSonetFarEndLineFailureIntervalIfIndex=sonusSonetFarEndLineFailureIntervalIfIndex, sonusSonetPathAdmnDs3ModeOverride=sonusSonetPathAdmnDs3ModeOverride, sonusSonetLineIntervalUASs=sonusSonetLineIntervalUASs, sonusSonetPortAdmnIfIndex=sonusSonetPortAdmnIfIndex, sonusSonetFarEndPathIntervalFCs=sonusSonetFarEndPathIntervalFCs, sonusSonetFarEndPathIntervalPathIndex=sonusSonetFarEndPathIntervalPathIndex, sonusSonetAlarmStatus=sonusSonetAlarmStatus, sonusSonetFarEndLineCurrentEntry=sonusSonetFarEndLineCurrentEntry, sonusSonetLayerRowStatus=sonusSonetLayerRowStatus, sonusSonetLine=sonusSonetLine, sonusSonetLayerIfIndex=sonusSonetLayerIfIndex, sonusSonetPathAdmnPortIndex=sonusSonetPathAdmnPortIndex, sonusSonetFarEndLineCurrentESs=sonusSonetFarEndLineCurrentESs, sonusSonetPortAdmnAtmXmtScramble=sonusSonetPortAdmnAtmXmtScramble, sonusSonetObjects=sonusSonetObjects, sonusSonetLineFailureIntervalIfIndex=sonusSonetLineFailureIntervalIfIndex, sonusSonetPathAdmnShelfIndex=sonusSonetPathAdmnShelfIndex, sonusSonetFarEndPathFailureIntervalNumber=sonusSonetFarEndPathFailureIntervalNumber, sonusSonetPathAlarmNotification=sonusSonetPathAlarmNotification, sonusSonetFarEndPathFailureIntervalPathIndex=sonusSonetFarEndPathFailureIntervalPathIndex, sonusSonetSectionThresholdEntry=sonusSonetSectionThresholdEntry, sonusSonetPathIntervalIfIndex=sonusSonetPathIntervalIfIndex, sonusSonetPortOperStatusNotification=sonusSonetPortOperStatusNotification, sonusSonetPortAdmnTimeout=sonusSonetPortAdmnTimeout, sonusSonetPortAdmnAtmRcvDescramble=sonusSonetPortAdmnAtmRcvDescramble, sonusSonetLayerEntry=sonusSonetLayerEntry, sonusSonetSectionCurrentIfIndex=sonusSonetSectionCurrentIfIndex, sonusSonetFarEndLineCurrentSESs=sonusSonetFarEndLineCurrentSESs, sonusSonetPathAdmnAction=sonusSonetPathAdmnAction, sonusSonetFarEndLineFailureCurrentEntry=sonusSonetFarEndLineFailureCurrentEntry, sonusSonetLineAlarmNotification=sonusSonetLineAlarmNotification, sonusSonetFarEndLineIntervalCVs=sonusSonetFarEndLineIntervalCVs, sonusSonetSectionIntervalESs=sonusSonetSectionIntervalESs, sonusSonetFarEndLineFailureCurrentIfIndex=sonusSonetFarEndLineFailureCurrentIfIndex, sonusSonetSectionThreshold24hSEFSs=sonusSonetSectionThreshold24hSEFSs, sonusSonetFarEndPathFailureIntervalTable=sonusSonetFarEndPathFailureIntervalTable, sonusSonetLineFailureIntervalNumber=sonusSonetLineFailureIntervalNumber, sonusSonetPathThreshold15mESs=sonusSonetPathThreshold15mESs, sonusSonetPathThreshold24hCVs=sonusSonetPathThreshold24hCVs, sonusSonetPathOutOfServiceNotification=sonusSonetPathOutOfServiceNotification, sonusSonetFarEndLineCurrentTable=sonusSonetFarEndLineCurrentTable, sonusSonetPathCurrentESs=sonusSonetPathCurrentESs, sonusSonetPathThreshold15mCVs=sonusSonetPathThreshold15mCVs, sonusSonetLayerTable=sonusSonetLayerTable, sonusSonetMIB=sonusSonetMIB, sonusSonetLineThreshold24hESs=sonusSonetLineThreshold24hESs, sonusSonetFarEndLineIntervalTable=sonusSonetFarEndLineIntervalTable, sonusSonetPathFailureCurrentTable=sonusSonetPathFailureCurrentTable, sonusSonetPathCurrentFCs=sonusSonetPathCurrentFCs, sonusSonetOperStatus=sonusSonetOperStatus, sonusSonetLineThreshold15mUASs=sonusSonetLineThreshold15mUASs, sonusSonetSectionThreshold15mCVs=sonusSonetSectionThreshold15mCVs, sonusSonetPortAdmnStsRcvDescramble=sonusSonetPortAdmnStsRcvDescramble, sonusSonetLineIntervalSESs=sonusSonetLineIntervalSESs, sonusSonetFarEndLineFailureIntervalEntry=sonusSonetFarEndLineFailureIntervalEntry, sonusSonetFarEndPathIntervalEntry=sonusSonetFarEndPathIntervalEntry, sonusSonetPortAdmnPortIndex=sonusSonetPortAdmnPortIndex, sonusSonetFarEndPathFailureIntervalEntry=sonusSonetFarEndPathFailureIntervalEntry, sonusSonetPathAdmnTraceState=sonusSonetPathAdmnTraceState, sonusSonetPathIntervalTable=sonusSonetPathIntervalTable, sonusSonetFarEndPathIntervalValidData=sonusSonetFarEndPathIntervalValidData, sonusSonetMIBNotifications=sonusSonetMIBNotifications, sonusSonetPathFailureIntervalFCs=sonusSonetPathFailureIntervalFCs, sonusSonetLineFailureIntervalEntry=sonusSonetLineFailureIntervalEntry, sonusSonetPathCurrentWidth=sonusSonetPathCurrentWidth, sonusSonetPathAdmnPathIndex=sonusSonetPathAdmnPathIndex, sonusSonetLineCurrentTable=sonusSonetLineCurrentTable, sonusSonetFarEndLineIntervalFCs=sonusSonetFarEndLineIntervalFCs, sonusSonetPortAdmn24hTimeElapsed=sonusSonetPortAdmn24hTimeElapsed, sonusSonetPortAdmnShelfIndex=sonusSonetPortAdmnShelfIndex, sonusSonetSectionCurrentEntry=sonusSonetSectionCurrentEntry, sonusSonetFarEndPathFailureCurrentIfIndex=sonusSonetFarEndPathFailureCurrentIfIndex, sonusSonetPathIntervalESs=sonusSonetPathIntervalESs, sonusSonetPortAdmnSlotIndex=sonusSonetPortAdmnSlotIndex, sonusSonetFarEndLineIntervalESs=sonusSonetFarEndLineIntervalESs, sonusSonetFarEndLineFailureIntervalTable=sonusSonetFarEndLineFailureIntervalTable, sonusSonetSectionCurrentTable=sonusSonetSectionCurrentTable, sonusSonetLineThreshold15mCVs=sonusSonetLineThreshold15mCVs, sonusSonetLineIntervalNumber=sonusSonetLineIntervalNumber, sonusSonetPortAdmnDs3ModeOverride=sonusSonetPortAdmnDs3ModeOverride, sonusPathIndex=sonusPathIndex, sonusSonetPortAdminStatusNotification=sonusSonetPortAdminStatusNotification, sonusSonetSectionThresholdIfIndex=sonusSonetSectionThresholdIfIndex, sonusSonetObjectsPath=sonusSonetObjectsPath, sonusSonetSectionIntervalCVs=sonusSonetSectionIntervalCVs, sonusSonetPathThreshold15mUASs=sonusSonetPathThreshold15mUASs, sonusSonetPathIntervalValidData=sonusSonetPathIntervalValidData, sonusSonetPathCurrentSESs=sonusSonetPathCurrentSESs, sonusSonetPathCurrentEntry=sonusSonetPathCurrentEntry, sonusSonetSectionThreshold24hESs=sonusSonetSectionThreshold24hESs, sonusSonetPathFailureIntervalPathIndex=sonusSonetPathFailureIntervalPathIndex, sonusSonetAdminStatus=sonusSonetAdminStatus, sonusSonetSectionThreshold15mSEFSs=sonusSonetSectionThreshold15mSEFSs, sonusSonetSectionIntervalSESs=sonusSonetSectionIntervalSESs, sonusSonetSectionThreshold24hSESs=sonusSonetSectionThreshold24hSESs, sonusSonetLineIntervalTable=sonusSonetLineIntervalTable, sonusSonetPathFailureIntervalIfIndex=sonusSonetPathFailureIntervalIfIndex, sonusSonetFarEndPathCurrentIfIndex=sonusSonetFarEndPathCurrentIfIndex, sonusSonetPathThreshold24hSESs=sonusSonetPathThreshold24hSESs, sonusSonetSectionCurrentSEFSs=sonusSonetSectionCurrentSEFSs, sonusSonetPathAdmnEntry=sonusSonetPathAdmnEntry, sonusSonetSectionCurrentCVs=sonusSonetSectionCurrentCVs, sonusSonetLineIntervalEntry=sonusSonetLineIntervalEntry, sonusSonetPortAdmnOperStatus=sonusSonetPortAdmnOperStatus, sonusSonetPathThresholdIfIndex=sonusSonetPathThresholdIfIndex, sonusSonetPortAdmnAction=sonusSonetPortAdmnAction, sonusSonetSectionThreshold15mESs=sonusSonetSectionThreshold15mESs, sonusSonetPathAdmnMode=sonusSonetPathAdmnMode, sonusSonetPathThresholdTable=sonusSonetPathThresholdTable, sonusSonetLineCurrentIfIndex=sonusSonetLineCurrentIfIndex, sonusSonetLineFailureCurrentTable=sonusSonetLineFailureCurrentTable, sonusSonetLayerPortIndex=sonusSonetLayerPortIndex, sonusSonetSectionIntervalNumber=sonusSonetSectionIntervalNumber, sonusSonetLineIntervalIfIndex=sonusSonetLineIntervalIfIndex, sonusSonetFarEndLineCurrentIfIndex=sonusSonetFarEndLineCurrentIfIndex, sonusSonetLineThresholdTable=sonusSonetLineThresholdTable, sonusSonetFarEndLineIntervalIfIndex=sonusSonetFarEndLineIntervalIfIndex, sonusSonetFarEndPathIntervalUASs=sonusSonetFarEndPathIntervalUASs, sonusSonetFarEndPathFailureIntervalFCs=sonusSonetFarEndPathFailureIntervalFCs, sonusSonetLineThreshold24hCVs=sonusSonetLineThreshold24hCVs, sonusSonetPathCurrentIfIndex=sonusSonetPathCurrentIfIndex, sonusSonetPathThreshold24hUASs=sonusSonetPathThreshold24hUASs, sonusSonetFarEndPathFailureCurrentPathIndex=sonusSonetFarEndPathFailureCurrentPathIndex, sonusSonetFarEndLineCurrentUASs=sonusSonetFarEndLineCurrentUASs, sonusSonetFarEndLineFailureIntervalNumber=sonusSonetFarEndLineFailureIntervalNumber, sonusSonetFarEndPathCurrentUASs=sonusSonetFarEndPathCurrentUASs, sonusSonetFarEndLineIntervalUASs=sonusSonetFarEndLineIntervalUASs, sonusSonetLineThresholdCrossNotification=sonusSonetLineThresholdCrossNotification, sonusSonetLineThreshold15mESs=sonusSonetLineThreshold15mESs, sonusSonetPathAdmnIfIndex=sonusSonetPathAdmnIfIndex, sonusSonetLineCurrentUASs=sonusSonetLineCurrentUASs, sonusSonetPathAdmnTimeout=sonusSonetPathAdmnTimeout, sonusSonetFarEndPathFailureCurrentTable=sonusSonetFarEndPathFailureCurrentTable, sonusSonetPathFailureCurrentEntry=sonusSonetPathFailureCurrentEntry, sonusSonetThresholdType=sonusSonetThresholdType)
