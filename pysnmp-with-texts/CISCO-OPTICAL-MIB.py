#
# PySNMP MIB module CISCO-OPTICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OPTICAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Counter32, MibIdentifier, IpAddress, Gauge32, ModuleIdentity, iso, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Counter32", "MibIdentifier", "IpAddress", "Gauge32", "ModuleIdentity", "iso", "NotificationType", "Integer32")
TimeStamp, DisplayString, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "MacAddress", "TruthValue", "TextualConvention")
ciscoOpticalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 828))
ciscoOpticalMIB.setRevisions(('2016-05-24 00:00', '2015-12-01 00:00', '2015-10-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoOpticalMIB.setRevisionsDescriptions(('Added 1. Extend CoiIntervalType to include thirtySecond. 2. Extend coiOpticalControllerEntry to include coiOpticalControllerTotalRXPower, coiOpticalControllerTotalTXPower. 3. Add coiOpticalPowerGroup. 4. Deprecated the ciscoOpticalMIBCompliance compliance, added ciscoOpticalMIBComplianceRev1.', 'Added 1. NOTIFICATION-TYPE coiOpticalEquipmentAlarm 2. Textual Convention CoiOptAlarmType, CoiOptAlarmStatus, CoiOptAlarmSeverity, CoiOptAlarmServiceAffecting. 3. coiOpticalEquipmentAlarmGroup OBJECT INDENTIFIER, with coiOpticalAlarmLocation, coiOpticalAlarmType, coiOpticalAlarmTimeStamp, coiOpticalAlarmName, coiOpticalAlarmAdditionalInfo, coiOpticalAlarmSeverity, coiOpticalAlarmStatus, coiOpticalAlarmServiceAffecting as OBJECT-TYPE. 4. ppmFail bit for coiOpticalControllerStatus.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoOpticalMIB.setLastUpdated('201605240000Z')
if mibBuilder.loadTexts: ciscoOpticalMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoOpticalMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-<list>@cisco.com')
if mibBuilder.loadTexts: ciscoOpticalMIB.setDescription('This MIB module defines the managed objects for physical layer characteristics of optical interfaces and performance statistics objects for protocol specific counters in optical devices. Performance monitoring (PM) parameters are used by service providers to gather, store, set thresholds for and report performance data for early detection of problems. Thresholds are used to set error levels for each PM parameter. During the accumulation cycle, if the current value of a performance monitoring parameter reaches or exceeds its corresponding threshold value, a threshold crossing alarm (TCA) is generated. The TCAs provide early detection of performance degradation. Glossary: LBC : Laser Bias Current TX : Transmit RX : Receive PMD : Polarization Mode Dispersion OSNR : Optical Signal to Noise Ratio DGD : Differential Group Delay CD : Chromatic Dispersion rad/s : radian per second dB : decibel dBm : decibel-milliwatt ps : picosecond nm : nanometer.')
class CoiOpticalPower(TextualConvention, Integer32):
    description = 'This value indicates the optical receive or transmit power.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-4000, 3000)

class CoiOpticalWavelength(TextualConvention, Unsigned32):
    reference = 'ITU - T Recommendation G.694.1 - Spectral grids for WDM applications: DWDM frequency grid, May 2002'
    description = 'This value represents the wavelength of optical signals, in an optical interface. It is represented in units of nanometers. A value of zero either indicates that the wavelength is unknown, or that it does not fall under the frequency grid defined in ITU-T G.694.1'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1528770, 1604030), )
class CoiIntervalType(TextualConvention, Integer32):
    description = 'This value indicates the time period over which performance monitoring data has been collected. Valid values are - fifteenMin(1) - values for the 15 min interval. oneDay(2) - values for the 1 Day interval. thirtySecond(3)- values for the 30 Sec interval.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fifteenMin", 1), ("oneDay", 2), ("thirtySecond", 3))

class CoiPortType(TextualConvention, Integer32):
    description = 'This value indicates the port type of the optical interface. Valid values are - clientPort(1) - denotes client port. trunkPort(2) - denotes trunk port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("clientPort", 1), ("trunkPort", 2))

class CoiOptAlarmType(TextualConvention, Integer32):
    description = 'This value indicates the alarm type. alarmUnknown(1) - denotes unknown alarm type. equipmentFailure(2) - denotes equipment fail alarm type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("alarmUnknown", 1), ("equipmentFailure", 2))

class CoiOptAlarmSeverity(TextualConvention, Integer32):
    description = 'This will indicate the severity of the notification being sent out. Valid values are - notReported(1) - alarm not reported. notAlarmed(2) - alarm not raised. minor(3) - minor alarm. major(4) - major alarm. critical(5) - critical alarm.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notReported", 1), ("notAlarmed", 2), ("minor", 3), ("major", 4), ("critical", 5))

class CoiOptAlarmStatus(TextualConvention, Integer32):
    description = 'This will indicate the status of the alarm. Valid values are - raised(1) - alarm in raised state. cleared(2) - alarm in cleared state. transient(3)- alarm in transient state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("raised", 1), ("cleared", 2), ("transient", 3))

class CoiOptAlarmServiceAffecting(TextualConvention, Integer32):
    description = 'This will indicate the sevice-affecting state of the alarm. Valid values are - Service affecting(1) - alarm affects service. Non-Service affecting(2)- alarm does not affect service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("serviceAffecting", 1), ("nonServiceAffecting", 2))

ciscoOpticalMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 0))
ciscoOpticalMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1))
coiOpticsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 828, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPortType"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"))
if mibBuilder.loadTexts: coiOpticsStatusChange.setStatus('current')
if mibBuilder.loadTexts: coiOpticsStatusChange.setDescription("This notification is generated whenever the defect status of Optics on an interface changes. Varbind 'ifIndex' indicates the interface whose defect status of the Optics layer has just changed. Varbind 'ifName' indicates the interface Name whose defect status of the Optics layer has just changed. Varbind 'coiOpticalControllerPortType' indicates the port type of the interface whose defect status of the Optics layer has just changed. Varbind 'coiOpticalControllerStatus' indicates the current defect status of the Optics layer on the interface.")
coiOpticalEquipmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 828, 0, 2)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalAlarmLocation"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmType"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmTimeStamp"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmName"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmAdditionalInfo"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmSeverity"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmServiceAffecting"))
if mibBuilder.loadTexts: coiOpticalEquipmentAlarm.setStatus('current')
if mibBuilder.loadTexts: coiOpticalEquipmentAlarm.setDescription("This notification is generated whenever the optical equipment alarm is generated. Varbind 'coiOpticalAlarmLocation' indicates the location on which equipment failed alarm has generated. Varbind 'coiOpticalAlarmType' indicates the type of alarm. Varbind 'coiOpticalAlarmTimeStamp' indicates the timestamp when alarm is generated. Varbind 'coiOpticalAlarmName' indicates the alarm object. Varbind 'coiOpticalAlarmAdditionalInfo' indicates additional info related to the alarm. Varbind 'coiOpticalAlarmSeverity' indicates the severity of the alarm. Varbind 'coiOpticalAlarmStatus' indicates status of the alarm. Varbind 'coiOpticalAlarmServiceAffecting' indicates the service affected state when alarm is generated.")
coiOpticalController = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1))
coiOpticalPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2))
coiOpticalNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: coiOpticalNotifEnabled.setDescription("This object controls the generation of coiOpticsStatusChange notification. If the value of this object is 'true', then the generation of coiOpticsStatusChange notification is enabled. If the value of this object is 'false', then the generation of coiOpticsStatusChange notification is disabled.")
coiOpticalControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2), )
if mibBuilder.loadTexts: coiOpticalControllerTable.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerTable.setDescription('This table provides management information for optical layer related attributes of interfaces with an ifType of opticalChannel(195).')
coiOpticalControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coiOpticalControllerEntry.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerEntry.setDescription('An entry containing management information on optical layer related attributes of interfaces with an ifType opticalChannel(195). Entries are created by the feature when a new interface is added to the ifTable.')
coiOpticalControllerWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 1), CoiOpticalWavelength().clone(1529553)).setUnits('1/100 nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerWavelength.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerWavelength.setDescription('This object is used to configure the wavelength on optical channel interfaces in 1/100 nm.')
coiOpticalControllerLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerLaserStatus.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerLaserStatus.setDescription("This object gives the current operational state of the Laser. Valid values are - 'up' - The laser is operational. 'down' - The laser is not operational.")
coiOpticalControllerFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 3), Unsigned32()).setUnits('100 MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerFrequency.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerFrequency.setDescription('This object is used to configure the frequency on optical channel interfaces in 100 MHz.')
coiOpticalControllerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerChannelNumber.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerChannelNumber.setDescription('This object is used to configure the channel number on optical channel interfaces. Channel Number is set to 0 if not 50GHz grid.')
coiOpticalControllerTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 5), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTransmitPower.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerTransmitPower.setDescription('This object is used to configure the Transmit Power in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerOpticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerOpticsType.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerOpticsType.setDescription('This object gives the description of optics present on optical channel interfaces.')
coiOpticalControllerRXLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 7), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerRXLowThreshold.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerRXLowThreshold.setDescription('This object is used to configure the Receive Low Threshold in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerTXLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 8), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTXLowThreshold.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerTXLowThreshold.setDescription('This object is used to configure the Transmit Low Threshold in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerRXHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 9), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerRXHighThreshold.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerRXHighThreshold.setDescription('This object is used to configure the Receive High Threshold in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerTXHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 10), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTXHighThreshold.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerTXHighThreshold.setDescription('This object is used to configure the Transmit High Threshold in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerLBCHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerLBCHighThreshold.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerLBCHighThreshold.setDescription('This object is used to configure the Laser Bias Current High Threshold in 1/10% on optical channel interfaces.')
coiOpticalControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 12), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("improprmvl", 1), ("mea", 2), ("provMismatch", 3), ("highRXPwr", 4), ("highTXPwr", 5), ("lowRXPwr", 6), ("lowTXPwr", 7), ("highLBC", 8), ("highDGD", 9), ("outOfRangeCD", 10), ("lowOSNR", 11), ("wvlOutOfLock", 12), ("highLaserTemp", 13), ("lowLaserTemp", 14), ("ppmFail", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerStatus.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerStatus.setDescription('This object indicates the current defect status of the Optics layer. noDefect(0): No Defect. This bit is set high when no defect is detected on the optics. improprmvl(1): Improper Removal. This will be set when a physical pluggable is absent on a service (hw-module) provisioned port. mea(2): This bit will be set when Port Pluggable Module Mismatches With Pre-Provisoned PPM. provMismatch(3): Provision Mismatch. This bit is set when Provisioned wavelength is Not supported By Pluggable. highRXPwr(4): High Receive Power. This bit is set when the measured optical power of the received signal exceeds the threshold high value, which is user-provisionable. highTXPwr(5): High Transmit Power. This bit is set when Pluggable measured optical power of the transmitted signal falls over the threshold. lowRXPwr(6): Low Receive Power. This bit is set when the measured optical power of the received signal falls below the low threshold value, which is user-provisionable. lowTXPwr(7): Low Transmit Power. This bit is set when Pluggable measured optical power of the transmitted signal falls below the low threshold. highLBC(8): High Laser Bias. This bit is set when the Physical Pluggable Port laser reads laser bias value beyond configured high threshold. highDGD(9): High DGD. This bit is set when the pluggable port Module reads the Differential Group delay value that exceeds the configured high threshold. outOfRangeCD(10): Out of Range Chromatic Dispersion. This bit is set when the Chromatic dispersion value read by the associated HW is out of range with the configured threshold. lowOSNR(11): Low Optical Signal to Noise Ratio. This bit is set when the HW read Optical Signal to Noise ratio falls below the configured low threshold. wvlOutOfLock(12): Wavelength Out of Lock. This bit is set when Trunk Port optics detects that optical input frequency is out of range. highLaserTemp(13): High LaserTemp.This bit is set when the internally measured transceiver temperature exceeds the card setting by 35.6 degrees F or 2 degrees C. A laser temperature change affects the transmitted wavelength. lowLaserTemp(14): Low LaserTemp. This bit is set when the internally measured transceiver temperature falls below the card setting by 35.6 degrees F or 2 degrees C. A laser temperature change affects the transmitted wavelength. (This temperature is equivalent to about 200 picometers of wavelength. ppmFail(15): Pluggable Equipment Fail. This bit is set when Pluggable Equipment is not operational or manageable. This object is sent out as a notification to the agent.')
coiOpticalControllerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 13), CoiPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPortType.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPortType.setDescription('This object gives the port type of the optical interface.')
coiOpticalControllerTotalRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 14), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTotalRXPower.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerTotalRXPower.setDescription('This object is used to configure the total receive power in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerTotalTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 15), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTotalTXPower.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerTotalTXPower.setDescription('This object is used to configure the total transmit power in 1/100 dBm on optical channel interfaces.')
coiOpticalControllerPerLaneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3), )
if mibBuilder.loadTexts: coiOpticalControllerPerLaneTable.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneTable.setDescription('This table provides the management information for optical layer related attributes of interfaces with an ifType of opticalChannel(195) and lane number as coiOpticalControllerLane.')
coiOpticalControllerPerLaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOpticalControllerLane"))
if mibBuilder.loadTexts: coiOpticalControllerPerLaneEntry.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneEntry.setDescription('An entry containing management information on optical layer related attributes of interfaces with an ifType opticalChannel(195) and lane number as coiOpticalControllerLane. Entries are created by the feature when a new interface is added to the ifTable.')
coiOpticalControllerLane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coiOpticalControllerLane.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerLane.setDescription('This object specifies the lane number for the optical controller. Each optical controller is divided into data lanes, with each lane operating at some data rate, giving an aggregated bandwidth of the controller, as a whole. Lane is applicable for breakout mode of operation.')
coiOpticalControllerPerLaneRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 2), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneRXPower.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneRXPower.setDescription('This object specifies the Receive power in 1/100 dBm.')
coiOpticalControllerPerLaneTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 3), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneTXPower.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneTXPower.setDescription('This object specifies the Transmit power in 1/100 dBm.')
coiOpticalControllerPerLaneLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneLBC.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneLBC.setDescription('This object specifies the Laser Bias Current in 1/10%.')
coiOpticalControllerPerLaneOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 5), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneOSNR.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneOSNR.setDescription('This object specifies the Optical Signal to Noise Ratio in 1/100 dB.')
coiOpticalControllerPerLaneChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 6), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneChromaticDispersion.setDescription('This object specifies the measure of spread of light pulse in ps/nm.')
coiOpticalControllerPerLaneDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 7), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneDifferentialGroupDelay.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneDifferentialGroupDelay.setDescription('This object specifies the propagation time difference between eigenmodes X and Y in 1/100 ps.')
coiOpticalControllerPerLaneSecondOrderPMD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 8), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneSecondOrderPMD.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneSecondOrderPMD.setDescription('This object specifies the threshold Second Order Polarization Mode Dispersion in 1/100 ps^2.')
coiOpticalControllerPerLanePolarizationDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 9), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLanePolarizationDependentLoss.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLanePolarizationDependentLoss.setDescription('This object specifies the threshold Polarization Dependent Loss in 1/100 dB.')
coiOpticalControllerPerLanePolarizationChangeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 10), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLanePolarizationChangeRate.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLanePolarizationChangeRate.setDescription('This object specifies the Polarization Change Rate in 1/100 rad/s.')
coiOpticalControllerPerLanePhaseNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 11), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLanePhaseNoise.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLanePhaseNoise.setDescription('This object specifies the Fluctuations in the Phase of a Waveform in 1/1000 dB.')
coiOpticalClientInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 3), )
if mibBuilder.loadTexts: coiOpticalClientInfoTable.setStatus('current')
if mibBuilder.loadTexts: coiOpticalClientInfoTable.setDescription("This table provides management information for optical's client layer related attributes of interfaces with an ifType of ethernetCsmacd(6).This parameter is applicable only for client interfaces.")
coiOpticalClientInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coiOpticalClientInfoEntry.setStatus('current')
if mibBuilder.loadTexts: coiOpticalClientInfoEntry.setDescription("An entry containing information for optical's client layer related attributes of interfaces with an ifType of ethernetCsmacd(6). Entries are created by the feature when the interface discovers the neighbour's ethernet MAC Address.")
coiOpticalClientEthernetNeighbourMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalClientEthernetNeighbourMAC.setStatus('current')
if mibBuilder.loadTexts: coiOpticalClientEthernetNeighbourMAC.setDescription('This object gives the neighbour MAC Address to which the interface is connected.')
coiOpticalThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1), )
if mibBuilder.loadTexts: coiOpticalThresholdTable.setStatus('current')
if mibBuilder.loadTexts: coiOpticalThresholdTable.setDescription('This table provides threshold information for optical layer related attributes of interfaces with an ifType of opticalChannel(195) and Interval type as coiOptThreshIntervalType.')
coiOpticalThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOptThreshIntervalType"))
if mibBuilder.loadTexts: coiOpticalThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: coiOpticalThresholdEntry.setDescription('An entry containing threshold information on optical layer related attributes of interfaces with an ifType opticalChannel(195). Entries are created by the feature when a new interface is added to the ifTable.')
coiOptThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOptThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshIntervalType.setDescription('This object gives the interval type during which the performance statistics are accumulated for the interface.')
coiOptThreshTXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 2), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshTXPowerMin.setDescription('This object is used to configure the threshold of minimum Transmit power for the interface in 1/100 dBm.')
coiOptThreshRXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 3), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshRXPowerMin.setDescription('This object is used to configure the threshold of minimum Receive power for the interface in 1/100 dBm.')
coiOptThreshOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 4), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNRMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshOSNRMin.setDescription('This object is used to configure the threshold of minimum Optical Signal to Noise Ratio for the interface in 1/100 dB.')
coiOptThreshChromaticDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 5), Integer32()).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionMin.setDescription('This object is used to configure the threshold of minimum measure of spread of light pulse for the interface in ps/nm.')
coiOptThreshDifferentialGroupDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 6), Integer32()).setUnits('1/100 ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayMin.setDescription('This object is used to configure the threshold of minimum propagation time difference between eigenmodes X and Y for the interface in 1/100 ps.')
coiOptThreshSecondOrderPMDMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 7), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDMin.setDescription('This object is used to configure the threshold of minimum Second Order Polarization Mode Dispersion for the interface in 1/100 ps^2.')
coiOptThreshPolarizationDependentLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 8), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossMin.setDescription('This object is used to configure the threshold of minimum Polarization Dependent Loss for the interface in 1/100 dB.')
coiOptThreshPolarizationChangeRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 9), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateMin.setDescription('This object is used to configure the threshold of minimum Polarization Change Rate for the interface in 1/100 rad/s.')
coiOptThreshPhaseNoiseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 10), Integer32()).setUnits('1/1000 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseMin.setDescription('This object is used to configure the threshold of minimum Fluctuations in the Phase of a Waveform for the interface in 1/1000 dB.')
coiOptThreshLBCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshLBCMin.setDescription('This object is used to configure the threshold of minumum Laser Bias Current in 1/10%.')
coiOptThreshTXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 12), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshTXPowerMax.setDescription('This object is used to configure the threshold of maximum Transmit power for the interface in 1/100 dBm.')
coiOptThreshRXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 13), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshRXPowerMax.setDescription('This object is used to configure the threshold of maximum Receive power for the interface in 1/100 dBm.')
coiOptThreshOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 14), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNRMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshOSNRMax.setDescription('This object is used to configure the threshold of maximum Optical Signal to Noise Ratio for the interface in 1/100 dB.')
coiOptThreshChromaticDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 15), Integer32()).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionMax.setDescription('This object is used to configure the threshold of maximum measure of spread of light pulse for the interface in ps/nm.')
coiOptThreshDifferentialGroupDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 16), Integer32()).setUnits('1/100 ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayMax.setDescription('This object is used to configure the threshold of maximum propagation time difference between eigenmodes X and Y for the interface in 1/100 ps.')
coiOptThreshSecondOrderPMDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 17), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDMax.setDescription('This object is used to configure the threshold of maximum Second Order Polarization Mode Dispersion for the interface in 1/100 ps^2.')
coiOptThreshPolarizationDependentLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 18), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossMax.setDescription('This object is used to configure the threshold of maximum Polarization Dependent Loss for the interface in 1/100 dB.')
coiOptThreshPolarizationChangeRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 19), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateMax.setDescription('This object is used to configure the threshold of maximum Polarization Change Rate in 1/100 rad/s for the interface.')
coiOptThreshPhaseNoiseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 20), Integer32()).setUnits('1/1000 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseMax.setDescription('This object is used to configure the threshold of maximum Fluctuations in the Phase of a Waveform in 1/1000 dB for the interface.')
coiOptThreshLBCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshLBCMax.setDescription('This object is used to configure the threshold of maximum Laser Bias Current in 1/10 % for the interface.')
coiOptThreshTXPowerEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshTXPowerEnableMin.setDescription('This object is used to configure the enablement of threshold min Transmit power for the interface.')
coiOptThreshRXPowerEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshRXPowerEnableMin.setDescription('This object is used to configure the enablement of the threshold min Receive power for the interface.')
coiOptThreshOSNREnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNREnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshOSNREnableMin.setDescription('This object is used to configure the enablement of the threshold min Optical Signal to Noise Ratio for the interface.')
coiOptThreshChromaticDispersionEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionEnableMin.setDescription('This object is used to configure the enablement of the threshold min measure of spread of light pulse for the interface.')
coiOptThreshDifferentialGroupDelayEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayEnableMin.setDescription('This object is used to configure the enablement of the threshold min propagation time difference between eigenmodes X and Y for the interface.')
coiOptThreshSecondOrderPMDEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDEnableMin.setDescription('This object is used to configure the enablement of the threshold min Second Order Polarization Mode Dispersion for the interface.')
coiOptThreshPolarizationDependentLossEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossEnableMin.setDescription('This object is used to configure the enablement of the threshold min Polarization Dependent Loss for the interface.')
coiOptThreshPolarizationChangeRateEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateEnableMin.setDescription('This object is used to configure the enablement of the threshold min Polarization Change Rate for the interface.')
coiOptThreshPhaseNoiseEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseEnableMin.setDescription('This object is used to configure the enablement of the threshold min Fluctuations in the Phase of a Waveform for the interface.')
coiOptThreshLBCEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCEnableMin.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshLBCEnableMin.setDescription('This object is used to configure the enablement of the threshold min Laser Bias Current for the interface.')
coiOptThreshTXPowerEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshTXPowerEnableMax.setDescription('This object is used to configure the enablement of the threshold max Transmit power for the interface.')
coiOptThreshRXPowerEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshRXPowerEnableMax.setDescription('This object is used to configure the enablement of the threshold max Receive power for the interface.')
coiOptThreshOSNREnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNREnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshOSNREnableMax.setDescription('This object is used to configure the enablement of the threshold max Optical Signal to Noise Ratio for the interface.')
coiOptThreshChromaticDispersionEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionEnableMax.setDescription('This object is used to configure the enablement of the threshold max measure of spread of light pulse for the interface.')
coiOptThreshDifferentialGroupDelayEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayEnableMax.setDescription('This object is used to configure the enablement of the threshold max propagation time difference between eigenmodes X and Y for the interface.')
coiOptThreshSecondOrderPMDEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDEnableMax.setDescription('This object is used to configure the enablement of the threshold max Second Order Polarization Mode Dispersion for the interface.')
coiOptThreshPolarizationDependentLossEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossEnableMax.setDescription('This object is used to configure the enablement of the threshold max Polarization Dependent Loss for the interface.')
coiOptThreshPolarizationChangeRateEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateEnableMax.setDescription('This object is used to configure the enablement of the threshold max Polarization Change Rate for the interface.')
coiOptThreshPhaseNoiseEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseEnableMax.setDescription('This object is used to configure the enablement of the threshold max Fluctuations in the Phase of a Waveform for the interface.')
coiOptThreshLBCEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCEnableMax.setStatus('current')
if mibBuilder.loadTexts: coiOptThreshLBCEnableMax.setDescription('This object is used to configure the enablement of the threshold max Laser Bias Current for the interface.')
coiOpticalCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2), )
if mibBuilder.loadTexts: coiOpticalCurrentTable.setStatus('current')
if mibBuilder.loadTexts: coiOpticalCurrentTable.setDescription('This table provides current information for optical layer related attributes of interfaces with an ifType of opticalChannel(195), Lane as coiOptCurrentLane and Interval as coiOptCurrentIntervalType.')
coiOpticalCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOptCurrentLane"), (0, "CISCO-OPTICAL-MIB", "coiOptCurrentIntervalType"))
if mibBuilder.loadTexts: coiOpticalCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: coiOpticalCurrentEntry.setDescription('An entry containing current information on optical layer related attributes of interfaces with an ifType opticalChannel(195). Entries are created by the feature when a new interface is added to the ifTable.')
coiOptCurrentLane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coiOptCurrentLane.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentLane.setDescription('This object specifies the lane number for the optical interface. Each optical controller is divided into data lanes with each lane operating at some data rate, giving an aggregated bandwidth of the controller as a whole. Lane is applicable for breakout mode of operation.')
coiOptCurrentIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 2), CoiIntervalType())
if mibBuilder.loadTexts: coiOptCurrentIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentIntervalType.setDescription('This object gives the interval type during which the current performance statistics are accumulated.')
coiOptCurrentTXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 3), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTXPowerMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentTXPowerMax.setDescription('This object specifies the current max Transmit power for the interface in 1/100 dBm.')
coiOptCurrentRXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 4), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentRXPowerMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentRXPowerMax.setDescription('This object specifies the current max Receive power for the interface in 1/100 dBm.')
coiOptCurrentOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 5), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentOSNRMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentOSNRMax.setDescription('This object specifies the current max Optical Signal to Noise Ratio for the interface in 1/100 dB.')
coiOptCurrentChromaticDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 6), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionMax.setDescription('This object specifies the current max measure of spread of light pulse for the interface in ps/nm.')
coiOptCurrentDifferentialGroupDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 7), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayMax.setDescription('This object specifies the current max propagation time difference between eigenmodes X and Y for the interface in 1/100 ps.')
coiOptCurrentSecondOrderPMDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 8), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDMax.setDescription('This object specifies the current max Second Order Polarization Mode Dispersion for the interface in 1/100 ps^2.')
coiOptCurrentPolarizationDependentLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 9), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossMax.setDescription('This object specifies the current max Polarization Dependent Loss for the interface in 1/100 dB.')
coiOptCurrentPolarizationChangeRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 10), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateMax.setDescription('This object specifies the current max Polarization Change Rate for the interface in 1/100 rad/s.')
coiOptCurrentPhaseNoiseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 11), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseMax.setDescription('This object specifies the current max Fluctuations in the Phase of a Waveform for the interface in 1/1000 dB.')
coiOptCurrentLBCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentLBCMax.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentLBCMax.setDescription('This object specifies the current max Laser Bias Current in 1/10% for the interface.')
coiOptCurrentTXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 13), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTXPowerMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentTXPowerMin.setDescription('This object specifies the current min Transmit power for the interface in 1/100 dBm.')
coiOptCurrentRXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 14), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentRXPowerMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentRXPowerMin.setDescription('This object specifies the current min Receive power for the interface in 1/100 dBm.')
coiOptCurrentOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 15), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentOSNRMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentOSNRMin.setDescription('This object specifies the current min Optical Signal to Noise Ratio for the interface in 1/100 dB.')
coiOptCurrentChromaticDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 16), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionMin.setDescription('This object specifies the current min measure of spread of light pulse for the interface in ps/nm.')
coiOptCurrentDifferentialGroupDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 17), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayMin.setDescription('This object specifies the current min propagation time difference between eigenmodes X and Y for the interface in 1/100 ps.')
coiOptCurrentSecondOrderPMDMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 18), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDMin.setDescription('This object specifies the current min Second Order Polarization Mode Dispersion for the interface in 1/100 ps^2.')
coiOptCurrentPolarizationDependentLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 19), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossMin.setDescription('This object specifies the current min Polarization Dependent Loss for the interface in 1/100 dB.')
coiOptCurrentPolarizationChangeRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 20), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateMin.setDescription('This object specifies the current min Polarization Change Rate for the interface in 1/100 rad/s.')
coiOptCurrentPhaseNoiseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 21), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseMin.setDescription('This object specifies the current min Fluctuations in the Phase of a Waveform in 1/1000 dB for the interface.')
coiOptCurrentLBCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentLBCMin.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentLBCMin.setDescription('This object specifies the current min Laser Bias Current in 1/10% for the interface.')
coiOptCurrentTXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 23), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTXPowerAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentTXPowerAvg.setDescription('This object specifies the current average Transmit power for the interface in 1/100 dBm.')
coiOptCurrentRXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 24), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentRXPowerAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentRXPowerAvg.setDescription('This object specifies the current average Receive power for the interface in 1/100 dBm.')
coiOptCurrentOSNRAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 25), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentOSNRAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentOSNRAvg.setDescription('This object specifies the current average Optical Signal to Noise Ratio for the interface in 1/100 dB.')
coiOptCurrentChromaticDispersionAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 26), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionAvg.setDescription('This object specifies the current average measure of spread of light pulse for the interface in ps/nm.')
coiOptCurrentDifferentialGroupDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 27), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayAvg.setDescription('This object specifies the current average propagation time difference between eigenmodes X and Y for the interface in 1/100 ps.')
coiOptCurrentSecondOrderPMDAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 28), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDAvg.setDescription('This object specifies the current average Second Order Polarization Mode Dispersion for the interface in 1/100 ps^2.')
coiOptCurrentPolarizationDependentLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 29), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossAvg.setDescription('This object specifies the current average Polarization Dependent Loss for the interface in 1/100 dB.')
coiOptCurrentPolarizationChangeRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 30), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateAvg.setDescription('This object specifies the current average Polarization Change Rate for the interface in 1/100 rad/s.')
coiOptCurrentPhaseNoiseAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 31), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseAvg.setDescription('This object specifies the current average Fluctuations in the Phase of a Waveform in 1/1000 dB for the interface.')
coiOptCurrentLBCAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentLBCAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentLBCAvg.setDescription('This object specifies the current average Laser Bias Current in 1/10% for the interface.')
coiOptCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTimestamp.setStatus('current')
if mibBuilder.loadTexts: coiOptCurrentTimestamp.setDescription('This object specifies the timestamp for the current bucket for the interface.')
coiOpticalIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3), )
if mibBuilder.loadTexts: coiOpticalIntervalTable.setStatus('current')
if mibBuilder.loadTexts: coiOpticalIntervalTable.setDescription('This table provides interval information for optical layer related attributes of interfaces with an ifType of opticalChannel(195), lane as coiOptIntervalLane, Interval as coiOptIntervalIntervalType and history bucket as coiOptIntervalIntervalType.')
coiOpticalIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOptIntervalLane"), (0, "CISCO-OPTICAL-MIB", "coiOptIntervalIntervalType"), (0, "CISCO-OPTICAL-MIB", "coiOptIntervalNum"))
if mibBuilder.loadTexts: coiOpticalIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: coiOpticalIntervalEntry.setDescription('An entry containing interval information on optical layer related attributes of interfaces with an ifType opticalChannel(195). Entries are created by the feature when a new interface is added to the ifTable.')
coiOptIntervalLane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coiOptIntervalLane.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalLane.setDescription('This object specifies the lane number for the optical interface. Each optical controller is divided into data lanes with each lane operating at some data rate, giving an aggregated bandwidth of the controller as a whole.Lane is applicable for breakout mode of operation.')
coiOptIntervalIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 2), CoiIntervalType())
if mibBuilder.loadTexts: coiOptIntervalIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalIntervalType.setDescription('This object gives the interval type during which the performance statistics are accumulated.')
coiOptIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: coiOptIntervalNum.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalNum.setDescription('This object identifies the interval for which the set of interval performance values is available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
coiOptIntervalTXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 4), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTXPowerMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalTXPowerMax.setDescription('This object specifies the interval maximum Transmit power in 1/100 dBm for the interface.')
coiOptIntervalRXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 5), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalRXPowerMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalRXPowerMax.setDescription('This object specifies the interval maximum Receive power in 1/100 dBm for the interface.')
coiOptIntervalOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 6), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalOSNRMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalOSNRMax.setDescription('This object specifies the interval maximum Optical Signal to Noise Ratio in 1/100 dB for the interface.')
coiOptIntervalChromaticDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 7), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionMax.setDescription('This object specifies the interval maximum measure of spread of light pulse for the interface in ps/nm.')
coiOptIntervalDifferentialGroupDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 8), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayMax.setDescription('This object specifies the interval maximum propagation time difference between eigenmodes X and Y for the interface in 1/100 ps.')
coiOptIntervalSecondOrderPMDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 9), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDMax.setDescription('This object specifies the interval maximum Second Order Polarization Mode Dispersion in 1/100 ps^2 for the interface.')
coiOptIntervalPolarizationDependentLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 10), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossMax.setDescription('This object specifies the interval maximum Polarization Dependent Loss in 1/100 dB for the interface.')
coiOptIntervalPolarizationChangeRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 11), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateMax.setDescription('This object specifies the interval maximum Polarization Change Rate in 1/100 rad/s for the interface.')
coiOptIntervalPhaseNoiseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 12), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseMax.setDescription('This object specifies the interval maximum Fluctuations in the Phase of a Waveform in 1/1000 dB for the interface.')
coiOptIntervalLBCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 13), Integer32()).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalLBCMax.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalLBCMax.setDescription('This object specifies the interval maximum Laser Bias Current in 1/10% for the interface.')
coiOptIntervalTXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 14), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTXPowerMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalTXPowerMin.setDescription('This object specifies the interval minimum Transmit power in 1/100 dBm for the interface.')
coiOptIntervalRXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 15), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalRXPowerMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalRXPowerMin.setDescription('This object specifies the interval minimum Receive power in 1/100 dBm for the interface.')
coiOptIntervalOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 16), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalOSNRMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalOSNRMin.setDescription('This object specifies the interval minimum Optical Signal to Noise Ratio in 1/100 dB for the interface.')
coiOptIntervalChromaticDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 17), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionMin.setDescription('This object specifies the interval minimum measure of spread of light pulse in ps/nm for the interface.')
coiOptIntervalDifferentialGroupDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 18), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayMin.setDescription('This object specifies the interval minimum propagation time difference between eigenmodes X and Y in 1/100 ps for the interface.')
coiOptIntervalSecondOrderPMDMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 19), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDMin.setDescription('This object specifies the interval minimum Second Order Polarization Mode Dispersion in 1/100 ps^2 for the interface.')
coiOptIntervalPolarizationDependentLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 20), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossMin.setDescription('This object specifies the interval minimum Polarization Dependent Loss in 1/100 dB for the interface.')
coiOptIntervalPolarizationChangeRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 21), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateMin.setDescription('This object specifies the interval minimum Polarization Change Rate in 1/100 rad/s for the interface.')
coiOptIntervalPhaseNoiseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 22), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseMin.setDescription('This object specifies the interval minimum Fluctuations in the Phase of a Waveform in 1/1000 dB for the interface.')
coiOptIntervalLBCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 23), Integer32()).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalLBCMin.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalLBCMin.setDescription('This object specifies the interval minimum Laser Bias Current in 1/10% for the interface.')
coiOptIntervalTXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 24), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTXPowerAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalTXPowerAvg.setDescription('This object specifies the interval average Transmit power in 1/100 dBm for the interface.')
coiOptIntervalRXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 25), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalRXPowerAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalRXPowerAvg.setDescription('This object specifies the interval average Receive power in 1/100 dBm for the interface.')
coiOptIntervalOSNRAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 26), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalOSNRAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalOSNRAvg.setDescription('This object specifies the interval average Optical Signal to Noise Ratio in 1/100 dB for the interface.')
coiOptIntervalChromaticDispersionAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 27), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionAvg.setDescription('This object specifies the interval average measure of spread of light pulse in ps/nm for the interface.')
coiOptIntervalDifferentialGroupDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 28), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayAvg.setDescription('This object specifies the interval average propagation time difference between eigenmodes X and Y in 1/100 ps for the interface.')
coiOptIntervalSecondOrderPMDAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 29), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDAvg.setDescription('This object specifies the interval average Second Order Polarization Mode Dispersion in 1/100 ps^2 for the interface.')
coiOptIntervalPolarizationDependentLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 30), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossAvg.setDescription('This object specifies the interval average Polarization Dependent Loss in 1/100 dB for the interface.')
coiOptIntervalPolarizationChangeRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 31), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateAvg.setDescription('This object specifies the interval average Polarization Change Rate in 1/100 rad/s for the interface.')
coiOptIntervalPhaseNoiseAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 32), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseAvg.setDescription('This object specifies the interval average Fluctuations in the Phase of a Waveform in 1/1000 dB for the interface.')
coiOptIntervalLBCAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 33), Integer32()).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalLBCAvg.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalLBCAvg.setDescription('This object specifies the interval average Laser Bias Current in 1/10 % for the interface.')
coiOptIntervalTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTimestamp.setStatus('current')
if mibBuilder.loadTexts: coiOptIntervalTimestamp.setDescription("This object specifies the timestamp, for the bucket specified by 'coiOptIntervalNum', for the interface.")
coiOpticalEquipmentAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4))
coiOpticalAlarmLocation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmLocation.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmLocation.setDescription('This object indicates the location of the component that raised alarm, within the device.')
coiOpticalAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 2), CoiOptAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmType.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmType.setDescription('This object indicates the type of alarm that is raised.')
coiOpticalAlarmTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 3), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmTimeStamp.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmTimeStamp.setDescription('This object gives the time when an event occurred. This is accurate only upto a second.')
coiOpticalAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmName.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmName.setDescription('This variable gives the user-visible name, which uniquely identifies the alarm in the system.')
coiOpticalAlarmAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmAdditionalInfo.setDescription('This variable provides additional info about the alarm. This object would be a null string if no additional information is specified.')
coiOpticalAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 6), CoiOptAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmSeverity.setDescription('This variable specifies alarm severity.')
coiOpticalAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 7), CoiOptAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmStatus.setDescription('This variable specifies alarm status.')
coiOpticalAlarmServiceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 8), CoiOptAlarmServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: coiOpticalAlarmServiceAffecting.setDescription('This variable specifies the service affecting state of the alarm.')
ciscoOpticalMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 2))
ciscoOpticalMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 1))
ciscoOpticalMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2))
ciscoOpticalMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 1, 1)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalClientInfoGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalThresholdGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalCurrentGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalIntervalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifEnableGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifStatusObjectGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalEquipmentAlarmInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOpticalMIBCompliance = ciscoOpticalMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOpticalMIBCompliance.setDescription('The compliance statement for platforms that monitor the parameters for the optical interfaces.')
ciscoOpticalMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 1, 2)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalClientInfoGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalThresholdGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalCurrentGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalIntervalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifEnableGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifStatusObjectGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalEquipmentAlarmInfoGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalPowerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOpticalMIBComplianceRev1 = ciscoOpticalMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoOpticalMIBComplianceRev1.setDescription('The compliance statement for platforms that monitor the parameters for the optical interfaces.')
coiOpticalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 1)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerLaserStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTransmitPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerOpticsType"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerLBCHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneRXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneTXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneLBC"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalGroup = coiOpticalGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalGroup.setDescription('The collection of objects to give information related to the optical layer characteristics for interfaces of ifType opticalChannel(195).')
coiOpticalControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 2)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerWavelength"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerLaserStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerFrequency"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerChannelNumber"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTransmitPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerOpticsType"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerLBCHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalControllerGroup = coiOpticalControllerGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerGroup.setDescription('The collection of objects to allow configurations and give information related to the optical layer characteristics for interfaces of ifType opticalChannel(195).')
coiOpticalControllerPerLaneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 3)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneRXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneTXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneLBC"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneOSNR"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneChromaticDispersion"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneDifferentialGroupDelay"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneSecondOrderPMD"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLanePolarizationDependentLoss"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLanePolarizationChangeRate"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLanePhaseNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalControllerPerLaneGroup = coiOpticalControllerPerLaneGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalControllerPerLaneGroup.setDescription('The collection of objects to give information related to the optical layer characteristics for interfaces of ifType opticalChannel(195) and lane number as coiOpticalControllerLane.')
coiOpticalClientInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 4)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalClientEthernetNeighbourMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalClientInfoGroup = coiOpticalClientInfoGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalClientInfoGroup.setDescription("The collection of objects to give information related to optical's client layer related attributes of interfaces with an ifType of ethernetCsmacd(6).")
coiOpticalThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 5)).setObjects(("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNRMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNRMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNREnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNREnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCEnableMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalThresholdGroup = coiOpticalThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalThresholdGroup.setDescription('The collection of objects used for monitoring the threshold information for optical layer related attributes of interfaces with an ifType of opticalChannel(195).')
coiOpticalCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 6)).setObjects(("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentOSNRMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentChromaticDispersionMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentDifferentialGroupDelayMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentSecondOrderPMDMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationDependentLossMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationChangeRateMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPhaseNoiseMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentOSNRMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentChromaticDispersionMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentDifferentialGroupDelayMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentSecondOrderPMDMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationDependentLossMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationChangeRateMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPhaseNoiseMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentOSNRAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentChromaticDispersionAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentDifferentialGroupDelayAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentSecondOrderPMDAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationDependentLossAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationChangeRateAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPhaseNoiseAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalCurrentGroup = coiOpticalCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalCurrentGroup.setDescription('The collection of objects used for monitoring the current information for optical layer related attributes of interfaces with an ifType of opticalChannel(195) in a current interval.')
coiOpticalIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 7)).setObjects(("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalOSNRMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalChromaticDispersionMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalDifferentialGroupDelayMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalSecondOrderPMDMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationDependentLossMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationChangeRateMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPhaseNoiseMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalOSNRMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalChromaticDispersionMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalDifferentialGroupDelayMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalSecondOrderPMDMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationDependentLossMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationChangeRateMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPhaseNoiseMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalOSNRAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalChromaticDispersionAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalDifferentialGroupDelayAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalSecondOrderPMDAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationDependentLossAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationChangeRateAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPhaseNoiseAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalIntervalGroup = coiOpticalIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalIntervalGroup.setDescription('The collection of objects used for monitoring the interval information for optical layer related attributes of interfaces with an ifType of opticalChannel(195) in a given interval.')
coiOpticalNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 8)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalNotifEnableGroup = coiOpticalNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalNotifEnableGroup.setDescription("The collection of objects to enable the notification generations upon an interface's defect status change on optics layer.")
coiOpticalNotifStatusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 9)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalNotifStatusObjectGroup = coiOpticalNotifStatusObjectGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalNotifStatusObjectGroup.setDescription("The object to be included in an Optical interface's defect status change notification.")
coiOpticalNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 10)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticsStatusChange"), ("CISCO-OPTICAL-MIB", "coiOpticalEquipmentAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalNotifGroup = coiOpticalNotifGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalNotifGroup.setDescription('The optical status change notifications whenever the defect status of optical layer on an interface changes.')
coiOpticalEquipmentAlarmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 11)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalAlarmLocation"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmType"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmTimeStamp"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmName"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmAdditionalInfo"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmSeverity"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmServiceAffecting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalEquipmentAlarmInfoGroup = coiOpticalEquipmentAlarmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalEquipmentAlarmInfoGroup.setDescription('The optical equipment notifications whenever the alarm is generated.')
coiOpticalPowerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 12)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerTotalRXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTotalTXPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalPowerGroup = coiOpticalPowerGroup.setStatus('current')
if mibBuilder.loadTexts: coiOpticalPowerGroup.setDescription('The collection of objects used for monitoring the total power information for optical layer related attributes of interfaces with an ifType of opticalChannel(195).')
mibBuilder.exportSymbols("CISCO-OPTICAL-MIB", coiOptCurrentDifferentialGroupDelayAvg=coiOptCurrentDifferentialGroupDelayAvg, ciscoOpticalMIBConformance=ciscoOpticalMIBConformance, coiOpticalControllerTXLowThreshold=coiOpticalControllerTXLowThreshold, coiOptThreshPhaseNoiseMax=coiOptThreshPhaseNoiseMax, coiOptIntervalNum=coiOptIntervalNum, coiOptThreshChromaticDispersionMin=coiOptThreshChromaticDispersionMin, coiOptCurrentDifferentialGroupDelayMax=coiOptCurrentDifferentialGroupDelayMax, coiOpticalNotifEnabled=coiOpticalNotifEnabled, coiOptCurrentPhaseNoiseMax=coiOptCurrentPhaseNoiseMax, PYSNMP_MODULE_ID=ciscoOpticalMIB, coiOpticalThresholdGroup=coiOpticalThresholdGroup, coiOptThreshChromaticDispersionEnableMax=coiOptThreshChromaticDispersionEnableMax, coiOptIntervalTimestamp=coiOptIntervalTimestamp, coiOptThreshRXPowerMax=coiOptThreshRXPowerMax, coiOptIntervalPolarizationChangeRateMax=coiOptIntervalPolarizationChangeRateMax, coiOpticalControllerLaserStatus=coiOpticalControllerLaserStatus, coiOptThreshTXPowerEnableMin=coiOptThreshTXPowerEnableMin, coiOptCurrentLBCAvg=coiOptCurrentLBCAvg, coiOptThreshPolarizationDependentLossEnableMin=coiOptThreshPolarizationDependentLossEnableMin, coiOpticalCurrentTable=coiOpticalCurrentTable, coiOptIntervalTXPowerAvg=coiOptIntervalTXPowerAvg, ciscoOpticalMIBCompliance=ciscoOpticalMIBCompliance, coiOptIntervalPhaseNoiseMax=coiOptIntervalPhaseNoiseMax, coiOptThreshChromaticDispersionEnableMin=coiOptThreshChromaticDispersionEnableMin, coiOpticalControllerPerLaneTable=coiOpticalControllerPerLaneTable, coiOptCurrentLBCMax=coiOptCurrentLBCMax, coiOpticalAlarmTimeStamp=coiOpticalAlarmTimeStamp, coiOpticalControllerPerLaneOSNR=coiOpticalControllerPerLaneOSNR, coiOpticalControllerStatus=coiOpticalControllerStatus, coiOptThreshSecondOrderPMDMin=coiOptThreshSecondOrderPMDMin, coiOpticalGroup=coiOpticalGroup, coiOptIntervalChromaticDispersionMax=coiOptIntervalChromaticDispersionMax, coiOpticalControllerRXLowThreshold=coiOpticalControllerRXLowThreshold, coiOptIntervalDifferentialGroupDelayAvg=coiOptIntervalDifferentialGroupDelayAvg, coiOptCurrentSecondOrderPMDAvg=coiOptCurrentSecondOrderPMDAvg, coiOptCurrentLBCMin=coiOptCurrentLBCMin, coiOptIntervalOSNRMin=coiOptIntervalOSNRMin, coiOpticalThresholdTable=coiOpticalThresholdTable, coiOptCurrentOSNRMax=coiOptCurrentOSNRMax, coiOpticalClientInfoGroup=coiOpticalClientInfoGroup, coiOpticalControllerGroup=coiOpticalControllerGroup, coiOptThreshPolarizationDependentLossMin=coiOptThreshPolarizationDependentLossMin, CoiPortType=CoiPortType, coiOptIntervalChromaticDispersionAvg=coiOptIntervalChromaticDispersionAvg, coiOpticalControllerPerLaneLBC=coiOpticalControllerPerLaneLBC, CoiOptAlarmServiceAffecting=CoiOptAlarmServiceAffecting, coiOptIntervalPhaseNoiseAvg=coiOptIntervalPhaseNoiseAvg, coiOpticalControllerPerLaneTXPower=coiOpticalControllerPerLaneTXPower, coiOptThreshDifferentialGroupDelayMax=coiOptThreshDifferentialGroupDelayMax, coiOptIntervalLBCMin=coiOptIntervalLBCMin, coiOpticalIntervalGroup=coiOpticalIntervalGroup, coiOpticalControllerTXHighThreshold=coiOpticalControllerTXHighThreshold, coiOpticalControllerWavelength=coiOpticalControllerWavelength, coiOpticalController=coiOpticalController, coiOpticalControllerFrequency=coiOpticalControllerFrequency, coiOpticalAlarmName=coiOpticalAlarmName, coiOpticalControllerPerLaneEntry=coiOpticalControllerPerLaneEntry, coiOptIntervalRXPowerMin=coiOptIntervalRXPowerMin, coiOpticalClientInfoEntry=coiOpticalClientInfoEntry, coiOptThreshDifferentialGroupDelayEnableMax=coiOptThreshDifferentialGroupDelayEnableMax, coiOptIntervalSecondOrderPMDMin=coiOptIntervalSecondOrderPMDMin, coiOptCurrentLane=coiOptCurrentLane, coiOptCurrentTXPowerMax=coiOptCurrentTXPowerMax, coiOptIntervalSecondOrderPMDAvg=coiOptIntervalSecondOrderPMDAvg, ciscoOpticalMIB=ciscoOpticalMIB, coiOptIntervalRXPowerAvg=coiOptIntervalRXPowerAvg, coiOpticalNotifGroup=coiOpticalNotifGroup, coiOptCurrentChromaticDispersionMin=coiOptCurrentChromaticDispersionMin, coiOptIntervalPhaseNoiseMin=coiOptIntervalPhaseNoiseMin, coiOpticalControllerTotalRXPower=coiOpticalControllerTotalRXPower, coiOptThreshOSNRMin=coiOptThreshOSNRMin, coiOpticalControllerPerLaneGroup=coiOpticalControllerPerLaneGroup, coiOpticalControllerPortType=coiOpticalControllerPortType, coiOptIntervalChromaticDispersionMin=coiOptIntervalChromaticDispersionMin, coiOpticalControllerTable=coiOpticalControllerTable, coiOpticalControllerPerLaneRXPower=coiOpticalControllerPerLaneRXPower, coiOpticalAlarmServiceAffecting=coiOpticalAlarmServiceAffecting, ciscoOpticalMIBNotifs=ciscoOpticalMIBNotifs, coiOptCurrentPolarizationChangeRateMin=coiOptCurrentPolarizationChangeRateMin, coiOpticalThresholdEntry=coiOpticalThresholdEntry, coiOptIntervalPolarizationChangeRateAvg=coiOptIntervalPolarizationChangeRateAvg, coiOptCurrentRXPowerAvg=coiOptCurrentRXPowerAvg, coiOptThreshTXPowerMax=coiOptThreshTXPowerMax, coiOptCurrentChromaticDispersionAvg=coiOptCurrentChromaticDispersionAvg, coiOpticalControllerPerLanePolarizationChangeRate=coiOpticalControllerPerLanePolarizationChangeRate, coiOpticalEquipmentAlarmInfoGroup=coiOpticalEquipmentAlarmInfoGroup, coiOptCurrentSecondOrderPMDMax=coiOptCurrentSecondOrderPMDMax, coiOptCurrentPhaseNoiseMin=coiOptCurrentPhaseNoiseMin, coiOptThreshPhaseNoiseMin=coiOptThreshPhaseNoiseMin, coiOptIntervalSecondOrderPMDMax=coiOptIntervalSecondOrderPMDMax, coiOpticalAlarmSeverity=coiOpticalAlarmSeverity, coiOpticalPowerGroup=coiOpticalPowerGroup, coiOpticalClientInfoTable=coiOpticalClientInfoTable, coiOptThreshPolarizationDependentLossEnableMax=coiOptThreshPolarizationDependentLossEnableMax, coiOptThreshPhaseNoiseEnableMin=coiOptThreshPhaseNoiseEnableMin, coiOptCurrentIntervalType=coiOptCurrentIntervalType, coiOpticalControllerTotalTXPower=coiOpticalControllerTotalTXPower, coiOptThreshTXPowerEnableMax=coiOptThreshTXPowerEnableMax, coiOptIntervalDifferentialGroupDelayMin=coiOptIntervalDifferentialGroupDelayMin, coiOpticalControllerPerLanePolarizationDependentLoss=coiOpticalControllerPerLanePolarizationDependentLoss, coiOpticalEquipmentAlarmGroup=coiOpticalEquipmentAlarmGroup, coiOptThreshSecondOrderPMDMax=coiOptThreshSecondOrderPMDMax, coiOptThreshDifferentialGroupDelayEnableMin=coiOptThreshDifferentialGroupDelayEnableMin, coiOptCurrentTimestamp=coiOptCurrentTimestamp, coiOpticalAlarmLocation=coiOpticalAlarmLocation, coiOptCurrentDifferentialGroupDelayMin=coiOptCurrentDifferentialGroupDelayMin, coiOptThreshLBCEnableMin=coiOptThreshLBCEnableMin, CoiOpticalWavelength=CoiOpticalWavelength, coiOptThreshOSNREnableMin=coiOptThreshOSNREnableMin, coiOpticalControllerChannelNumber=coiOpticalControllerChannelNumber, coiOptIntervalTXPowerMax=coiOptIntervalTXPowerMax, coiOptCurrentRXPowerMin=coiOptCurrentRXPowerMin, coiOptCurrentTXPowerMin=coiOptCurrentTXPowerMin, coiOptThreshPolarizationChangeRateMax=coiOptThreshPolarizationChangeRateMax, coiOpticalControllerEntry=coiOpticalControllerEntry, coiOptCurrentPhaseNoiseAvg=coiOptCurrentPhaseNoiseAvg, ciscoOpticalMIBCompliances=ciscoOpticalMIBCompliances, coiOptThreshIntervalType=coiOptThreshIntervalType, ciscoOpticalMIBObjects=ciscoOpticalMIBObjects, coiOptIntervalLBCMax=coiOptIntervalLBCMax, coiOptIntervalRXPowerMax=coiOptIntervalRXPowerMax, coiOptCurrentChromaticDispersionMax=coiOptCurrentChromaticDispersionMax, CoiOptAlarmType=CoiOptAlarmType, coiOptThreshLBCEnableMax=coiOptThreshLBCEnableMax, coiOptIntervalDifferentialGroupDelayMax=coiOptIntervalDifferentialGroupDelayMax, ciscoOpticalMIBGroups=ciscoOpticalMIBGroups, coiOptIntervalLBCAvg=coiOptIntervalLBCAvg, coiOpticalAlarmStatus=coiOpticalAlarmStatus, coiOpticalControllerPerLaneChromaticDispersion=coiOpticalControllerPerLaneChromaticDispersion, coiOptThreshPolarizationChangeRateMin=coiOptThreshPolarizationChangeRateMin, coiOptCurrentSecondOrderPMDMin=coiOptCurrentSecondOrderPMDMin, coiOpticalControllerPerLaneDifferentialGroupDelay=coiOpticalControllerPerLaneDifferentialGroupDelay, coiOptIntervalLane=coiOptIntervalLane, coiOptCurrentPolarizationChangeRateAvg=coiOptCurrentPolarizationChangeRateAvg, coiOptIntervalIntervalType=coiOptIntervalIntervalType, coiOptThreshLBCMax=coiOptThreshLBCMax, coiOpticalIntervalEntry=coiOpticalIntervalEntry, coiOpticalControllerOpticsType=coiOpticalControllerOpticsType, coiOptThreshChromaticDispersionMax=coiOptThreshChromaticDispersionMax, coiOpticalAlarmType=coiOpticalAlarmType, coiOpticalNotifEnableGroup=coiOpticalNotifEnableGroup, coiOpticalClientEthernetNeighbourMAC=coiOpticalClientEthernetNeighbourMAC, coiOptThreshRXPowerEnableMin=coiOptThreshRXPowerEnableMin, coiOptThreshRXPowerMin=coiOptThreshRXPowerMin, CoiOptAlarmStatus=CoiOptAlarmStatus, coiOpticalControllerPerLaneSecondOrderPMD=coiOpticalControllerPerLaneSecondOrderPMD, coiOptCurrentTXPowerAvg=coiOptCurrentTXPowerAvg, coiOptThreshPolarizationDependentLossMax=coiOptThreshPolarizationDependentLossMax, coiOptIntervalPolarizationDependentLossAvg=coiOptIntervalPolarizationDependentLossAvg, coiOpticalCurrentGroup=coiOpticalCurrentGroup, CoiOptAlarmSeverity=CoiOptAlarmSeverity, coiOptThreshLBCMin=coiOptThreshLBCMin, coiOptThreshTXPowerMin=coiOptThreshTXPowerMin, coiOptThreshPolarizationChangeRateEnableMin=coiOptThreshPolarizationChangeRateEnableMin, coiOptThreshSecondOrderPMDEnableMax=coiOptThreshSecondOrderPMDEnableMax, coiOptIntervalOSNRAvg=coiOptIntervalOSNRAvg, coiOptCurrentPolarizationDependentLossMax=coiOptCurrentPolarizationDependentLossMax, coiOpticalCurrentEntry=coiOpticalCurrentEntry, coiOpticalControllerPerLanePhaseNoise=coiOpticalControllerPerLanePhaseNoise, coiOpticalControllerLane=coiOpticalControllerLane, coiOptIntervalOSNRMax=coiOptIntervalOSNRMax, coiOptCurrentPolarizationDependentLossAvg=coiOptCurrentPolarizationDependentLossAvg, coiOptIntervalPolarizationChangeRateMin=coiOptIntervalPolarizationChangeRateMin, coiOptCurrentPolarizationDependentLossMin=coiOptCurrentPolarizationDependentLossMin, coiOpticalNotifStatusObjectGroup=coiOpticalNotifStatusObjectGroup, coiOpticalControllerRXHighThreshold=coiOpticalControllerRXHighThreshold, coiOptCurrentOSNRMin=coiOptCurrentOSNRMin, coiOpticalIntervalTable=coiOpticalIntervalTable, coiOptThreshOSNREnableMax=coiOptThreshOSNREnableMax, coiOpticalAlarmAdditionalInfo=coiOpticalAlarmAdditionalInfo, coiOpticalControllerTransmitPower=coiOpticalControllerTransmitPower, coiOptThreshDifferentialGroupDelayMin=coiOptThreshDifferentialGroupDelayMin, coiOptIntervalTXPowerMin=coiOptIntervalTXPowerMin, coiOpticsStatusChange=coiOpticsStatusChange, coiOpticalPerformanceMonitoring=coiOpticalPerformanceMonitoring, coiOptThreshOSNRMax=coiOptThreshOSNRMax, coiOptThreshPhaseNoiseEnableMax=coiOptThreshPhaseNoiseEnableMax, coiOptCurrentRXPowerMax=coiOptCurrentRXPowerMax, coiOptThreshRXPowerEnableMax=coiOptThreshRXPowerEnableMax, coiOptThreshSecondOrderPMDEnableMin=coiOptThreshSecondOrderPMDEnableMin, CoiOpticalPower=CoiOpticalPower, coiOptThreshPolarizationChangeRateEnableMax=coiOptThreshPolarizationChangeRateEnableMax, ciscoOpticalMIBComplianceRev1=ciscoOpticalMIBComplianceRev1, coiOptCurrentPolarizationChangeRateMax=coiOptCurrentPolarizationChangeRateMax, coiOptIntervalPolarizationDependentLossMin=coiOptIntervalPolarizationDependentLossMin, coiOptCurrentOSNRAvg=coiOptCurrentOSNRAvg, CoiIntervalType=CoiIntervalType, coiOpticalControllerLBCHighThreshold=coiOpticalControllerLBCHighThreshold, coiOpticalEquipmentAlarm=coiOpticalEquipmentAlarm, coiOptIntervalPolarizationDependentLossMax=coiOptIntervalPolarizationDependentLossMax)
