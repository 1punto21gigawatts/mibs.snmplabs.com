#
# PySNMP MIB module CXT1E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXT1E1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
cxT1E1, = mibBuilder.importSymbols("CXProduct-SMI", "cxT1E1")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, MibIdentifier, TimeTicks, Counter32, IpAddress, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "MibIdentifier", "TimeTicks", "Counter32", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
t1e1CfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10), )
if mibBuilder.loadTexts: t1e1CfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgTable.setDescription('The T1/E1 configuration table.')
t1e1CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1), ).setIndexNames((0, "CXT1E1-MIB", "t1e1CfgLinkIndex"))
if mibBuilder.loadTexts: t1e1CfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgEntry.setDescription('An entry in the T1/E1 configuration table.')
t1e1CfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgLinkIndex.setDescription('Identifies the physical port with the T1/E1 (t1e1) interface. Range of Values: 1 - 2 Default Value: None Configuration Changed: administrative')
t1e1CfgDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgDebounce.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgDebounce.setDescription('Specifies the number of loops needed for debouncing. Warning: This is a Private Mode activity that should only be performed by or under the direct supervision of qualified personnel. Range of Values: 1 - 255 Default Value: 2 Configuration Changed: administrative')
t1e1CfgJitterAttenuator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1e1NoJitterAttenuator", 1), ("t1e1RxAttenuator32Bits", 2), ("t1e1RxAttenuator128Bits", 3), ("t1e1TxAttenuator32Bits", 4), ("t1e1TxAttenuator128Bits", 5))).clone('t1e1NoJitterAttenuator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgJitterAttenuator.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgJitterAttenuator.setDescription('Defines the position and buffer depth of the Jitter Attenuator when the Attenuator is enabled. Warning: This is a Private Mode activity that should only be performed by or under the direct supervision of qualified personnel. Options: t1e1NoJitterAttenuator (1) t1e1RxAttenuator32Bits (2) t1e1RxAttenuator128Bits (3) t1e1TxAttenuator32Bits (4) t1e1TxAttenuator128Bits (5) Default Value: t1e1NoJitterAttenuator (1) Configuration Changed: administrative')
t1e1CfgSyncCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgSyncCriteria.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgSyncCriteria.setDescription('Determines the criteria used for Synchronisation. Options: In D4 framing mode, 1 = search for Ft pattern, the search for Fs pattern and 2=cross couple Ft and Fs pattern. In ESF framing mode, 1 = search for FPS pattern only. In ESF framing mode, 2 = search for FPS and verify with CRC6. Warning: This is a Private Mode activity that should only be performed by or under the direct supervision of qualified personnel. Default Value: 1 Configuration Changed: administrative')
t1e1CfgT1RxEqualizerGainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1e1EGLLow", 1), ("t1e1EGLHigh", 2))).clone('t1e1EGLLow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgT1RxEqualizerGainLimit.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgT1RxEqualizerGainLimit.setDescription("Program the receiver sensitivity. Warning: This is a Private Mode activity that should only be performed by or under the direct supervision of qualified personnel. Options: t1e1EGLLow (1): Program a low sensitivity of -30 dB. This is recommended for most applications. t1e1EGLHigh (2): Program a high sensitivity of -36 dB. This setting could be required for particular applications, however, with this level of sensitivity the receiver will be more susceptible to crosstalk and the receiver's jitter tolerance will suffer. Default Value: t1e1EGLLow (1) Configuration Changed: administrative")
t1e1CfgT1RxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgT1RxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgT1RxLevel.setDescription('Indicates in real-time a range of received signal levels. Options: 1: +2.0 to -7.5 dB 2: -7.5 to -15.0 dB 3: -15.0 to -22.5 dB 4: less than -22.5 dB ')
t1e1CfgT1FrameAlignmentChange = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgT1FrameAlignmentChange.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgT1FrameAlignmentChange.setDescription('Indicates the most recent time at which a resynchronization resulted in a change of frame or multiframe alignment. If no such event has occurred since system startup, then the value will be zero.')
t1e1CfgT1JitterAttenuatorTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 52), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgT1JitterAttenuatorTrip.setStatus('mandatory')
if mibBuilder.loadTexts: t1e1CfgT1JitterAttenuatorTrip.setDescription("Indicates the most recent time that the jitter attenuator FIFO reached within 4-bits of it's limit on this line interface. If no such event has occurred since system startup, then the value will be zero.")
mibBuilder.exportSymbols("CXT1E1-MIB", t1e1CfgTable=t1e1CfgTable, t1e1CfgDebounce=t1e1CfgDebounce, t1e1CfgSyncCriteria=t1e1CfgSyncCriteria, t1e1CfgT1JitterAttenuatorTrip=t1e1CfgT1JitterAttenuatorTrip, t1e1CfgEntry=t1e1CfgEntry, t1e1CfgT1RxLevel=t1e1CfgT1RxLevel, t1e1CfgLinkIndex=t1e1CfgLinkIndex, t1e1CfgT1FrameAlignmentChange=t1e1CfgT1FrameAlignmentChange, t1e1CfgJitterAttenuator=t1e1CfgJitterAttenuator, t1e1CfgT1RxEqualizerGainLimit=t1e1CfgT1RxEqualizerGainLimit)
