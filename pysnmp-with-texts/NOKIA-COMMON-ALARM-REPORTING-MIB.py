#
# PySNMP MIB module NOKIA-COMMON-ALARM-REPORTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIA-COMMON-ALARM-REPORTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, Integer32, Bits, Counter32, MibIdentifier, iso, ModuleIdentity, TimeTicks, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Integer32", "Bits", "Counter32", "MibIdentifier", "iso", "ModuleIdentity", "TimeTicks", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nokia = MibIdentifier((1, 3, 6, 1, 4, 1, 94))
nokiaProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1))
ntcCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16))
ntcCommonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1))
ca = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1))
caVars = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1))
cal = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2))
calVars = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 1))
calTables = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2))
al = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3))
alVars = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1))
alTables = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2))
class AlarmSeverity(Integer32):
    pass

class EnabledDisabled(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class RowPointer(ObjectIdentifier):
    pass

caReportNokiaAlarmTraps = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 1), EnabledDisabled()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caReportNokiaAlarmTraps.setStatus('mandatory')
if mibBuilder.loadTexts: caReportNokiaAlarmTraps.setDescription('This NE wide variable is used to control if the NE reports alarms using Nokia Common Alarm syntax. When the value equals to enabled, the NE shall report alarms using Nokia Common Alarm Traps, and when disabled, Nokia Common Alarm Traps shall not be emitted. The default value for this variable is enabled.')
caReportLinkUpLinkDownTraps = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 2), EnabledDisabled()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caReportLinkUpLinkDownTraps.setStatus('mandatory')
if mibBuilder.loadTexts: caReportLinkUpLinkDownTraps.setDescription('This NE wide variable is used to control if the NE reports standard linkUp and linkDown traps. When the value equals to enabled, the NE shall report these standard traps, and when disabled, these standard traps shall not be emitted. The default value for this variable is disabled.')
caAlarmText = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: caAlarmText.setDescription('Alarm text of the last Nokia enterprise specific alarm trap emitted by the NE. This is textual description shown e.g. on user interface of NMS. The contents of this text shall not be processed in any way by NMS. In case of not supporting this variable, empty string shall be used. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caTrapId = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: caTrapId.setDescription('caTrapId of the last Nokia enterprise specific alarm trap emitted by the NE. caTrapId shall be incremented by one in each trap sent by NE to a NMS. When caTrapId achieves the maximum value, the variable shall wrap back to value 1 when sending the next trap. If NE has several trap destinations the same caTrapId shall be used when a trap is sent to them all. caTrapId is used by NMS to detect if traps are lost in DCN. In case of not supporting this variable (though this is not recommended), value 0 shall be used. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caCorrelatedAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caCorrelatedAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: caCorrelatedAlarmId.setDescription('This variable shall be supported by an NE product if support for real-time current alarm list in NMS is expected. When supported, the value of this variable in alarm clearing trap shall equal to the value of this variable in the corresponding alarm trap. In alarm traps, the value of this variable shall equal to the value of the caAlarmIndex of the corresponding alarm entry in the caCurrentAlarmListTable (both in case of alarm and alarm clearing traps). When this variable has value 0, it means that no alarm correlation is present and that the NMS should not assume alarm correlation support from NE concerning the corresponding alarm. This means that either alarm clearing trap will not be sent by NE or if alarm clearing trap will be sent by NE, it does not support correlation to the corresponding alarm trap. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caColumnInTbl = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caColumnInTbl.setStatus('mandatory')
if mibBuilder.loadTexts: caColumnInTbl.setDescription('The value of caColumnInTbl field of the last Nokia enterprise specific alarm trap emitted by the NE. The value is the name of the instance of the first accessible columnar object in the conceptual row, which represents the failed resource. In case of not supporting this variable, value {0 0} shall be used. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caRowIdx = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRowIdx.setStatus('mandatory')
if mibBuilder.loadTexts: caRowIdx.setDescription('This variable contains value {0 0} for the time being. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caSeverity = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 8), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: caSeverity.setDescription('Severity of the last Nokia enterprise specific alarm trap emitted by the NE. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caNESpecificAlarmManualPageNbr = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caNESpecificAlarmManualPageNbr.setStatus('mandatory')
if mibBuilder.loadTexts: caNESpecificAlarmManualPageNbr.setDescription('caNESpecificAlarmManualPageNbr of the last Nokia enterprise specific alarm trap emitted by the NE. The value is the alarm manual page number (usually NE type specific alarm code) containing more information for the operator how to recover from the problem. The value of this variable uniquely idenfies an alarm manual page of the given type of NE. In case of not supporting this variable, value 0 shall be used. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
caSupplementaryInfo = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caSupplementaryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: caSupplementaryInfo.setDescription('Supplementary information fields of the last Nokia enterprise specific alarm trap emitted by the NE. Alarm manual page contains the explanation of supplementary information fields. With these fields operator may get e.g. more detailed instructions to recover from the problem. When no information is carried in this variable, the contents is an empty string (i.e. length of the OCTET STRING shall be 0. When this object is accessed using GET operation, this object shall contain the value of the corresponding variable in the last regularly sent alarm trap i.e. in cases of re-sending an alarm trap as a result of NMS operation (ie. via alResendTrapId object), this object shall not be updated.')
calActiveAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calActiveAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: calActiveAlarmCount.setDescription('This variable contains the number of currently active alarms in the NE. When the Current Alarm List is empty, the value of this variable is 0.')
calContentsChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calContentsChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: calContentsChangeTime.setDescription('This variable contains the value of sysUpTime (i.e. time stamp in time ticks) when the contents of CAL was changed last time. In the startup of the NE the initial value of this variable shall be 0.')
calCurrentAlarmListTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1), )
if mibBuilder.loadTexts: calCurrentAlarmListTable.setStatus('mandatory')
if mibBuilder.loadTexts: calCurrentAlarmListTable.setDescription('This table contains information on the all currently active alarms in the agent. There shall be one entry in this table for each active alarm.')
calCurrentAlarmListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1), ).setIndexNames((0, "NOKIA-COMMON-ALARM-REPORTING-MIB", "calAlarmIndex"))
if mibBuilder.loadTexts: calCurrentAlarmListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: calCurrentAlarmListEntry.setDescription('This contains detailed information concerning each currently active alarm in the agent.')
calAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: calAlarmIndex.setDescription('Used as an index of the table. The value of this variable shall be incremented by 1 for each new entry of this table. When alarm correlation capability is supported by the NE, the value of this variable equals to the value of correlatedAlarmId in the corresponding alarm and alarm clearing traps.')
calSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: calSpecificTrap.setDescription('The value equals to the value of the specific-trap field in the corresponding Nokia enterprise specific alarm trap.')
calTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: calTimeStamp.setDescription('The value equals to the time stamp as reported in the corresponding Nokia enterprise specific trap. The value of this field shall equal to the value of time-stamp field in the alarm trap which reported this alarm.')
calAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: calAlarmText.setDescription('This variable contains alarm information in human readable format to be shown e.g. in NMS UI. No processing of the contents of this alarm text are assumed within NMS. The maximum length of the alarm text shall be 64 characters.')
calFirstColumnInTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calFirstColumnInTbl.setStatus('mandatory')
if mibBuilder.loadTexts: calFirstColumnInTbl.setDescription('This variable is used to reference to an conceptual row which represents the failed resource (see caColumnInTbl for further details). In case of not supporting this variable, value {0 0} shall be used.')
calRowIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calRowIdx.setStatus('mandatory')
if mibBuilder.loadTexts: calRowIdx.setDescription('This variable contains value {0 0} for the time being.')
calSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 7), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: calSeverity.setDescription('This variable contains the severity of the detected failure as reported by the NE.')
calNESpecificAMPNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calNESpecificAMPNbr.setStatus('mandatory')
if mibBuilder.loadTexts: calNESpecificAMPNbr.setDescription('This variable contains the NE type specific value unique within the context of the NE type, and used to identify which alarm manual page shall be shown to the user. Alarm manual page is additional information to be provided to the user to give guidance what are the possible reasons of the alarm, how the user can recover from the problem etc. This information is like one or more pages in the NE products reference manual describing the possible alarm reported by the NE and reasons of the alarms. Each NE product is responsible for keeping these values unique within the context of their product and provide the contents of user manual pages. When supporting this variable, only positive values are allowed. When this variable has value 0, it means that no alarm manual page is associated to the alarm or this field is not supported by the NE.')
calSupplementaryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 2, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calSupplementaryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: calSupplementaryInfo.setDescription('Supplementary information fields of the last Nokia enterprise specific alarm trap emitted by the NE. Alarm manual page contains the explanation of supplementary information fields. With these fields operator may get e.g. more detailed instructions to recover from the problem. When no information is carried in this variable, the contents is an empty string (i.e. length of the OCTET STRING shall be 0).')
alAlarmLogEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAlarmLogEntryCount.setStatus('mandatory')
if mibBuilder.loadTexts: alAlarmLogEntryCount.setDescription('This variable equals to the number of entries in the Alarm Log. When the log is empty, this variable is 0.')
alAlarmLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alAlarmLogMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: alAlarmLogMaxSize.setDescription('This variable contains the number of entries the alarm log shall contain. The current number of entries in the Alarm Log (alAlarmLogEntryCount) may be equal of less than the value of this variable. If Alarm Log is not supported, the value of this variable shall be 0.')
alLogFullAction = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLogFullAction.setStatus('mandatory')
if mibBuilder.loadTexts: alLogFullAction.setDescription('This variable control the behaviour of the log when the log shall become full. Possible values are wrap (1) and halt (2). The default value shall be wrap. Note that this variable does not affect to the behaviour of trap ids used in alarm traps. I.e. when log is in halt mode, trap ids are incremented by 1 in each trap emitted by the NE.')
alResendTrapDestinationAddr = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alResendTrapDestinationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alResendTrapDestinationAddr.setDescription('This variable contains the IP address of the destination to which the trap shall be sent, when the manager sets the value of alResendTrapId.')
alResendTrapDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alResendTrapDestinationPort.setStatus('mandatory')
if mibBuilder.loadTexts: alResendTrapDestinationPort.setDescription('This variable contains the port number of the destination to which the trap shall be sent, when the manager sets the value of alResendTrapId. Initially the value of this variable shall be the standard port allocated for SNMP traps i.e. 162.')
alResendTrapId = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alResendTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: alResendTrapId.setDescription('This variable contains value of the caTrapId of the last successfully resent alarm trap. Initially this variable has value 0. When NMS sets this variable, the NE shall resend the alarm trap whose caTrapId equals to the value provided by NMS, if the corresponding alarm trap is still available in the internal alarm log in NE (e.g. the corresponding log entry has not yet been lost in the alarm log because of wrapping). If this operation fails, the value of this variable is not changed to the value provided by NMS. Note that in addition to this variable, NMS has to set the values of alResendTrapDestinationAddr and alResendTrapDestinationPort to the correct value so that the traps shall be sent to the correct destination. It is preferred that the NMS sets these three variables in the single SNMP SET message in order this operation to be atomic. In these cases the NE must guarantee that the alResendTrapDestinationAddr and alResendTrapDestinationPort are logically set to given values before the value of alResendTrapId is set (This is because at the moment of setting the value of alResendTrapId to the value given by NMS the trap shall be issued to the destination address/port found in variables alResendTrapDestinationAddr and alResendTrapDestinationPort). The value of community string shall be known by NE based on the contents of trap destination MIB.')
alAlarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1), )
if mibBuilder.loadTexts: alAlarmLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: alAlarmLogTable.setDescription('This table contains information on the all logged alarm or alarm clearing traps in the agent. There shall be one entry in this table for each logged alarm or alarm clearing trap.')
alAlarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1), ).setIndexNames((0, "NOKIA-COMMON-ALARM-REPORTING-MIB", "alTrapIndex"))
if mibBuilder.loadTexts: alAlarmLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alAlarmLogEntry.setDescription('This contains detailed information concerning each logged alarm entry in the agent.')
alTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alTrapIndex.setDescription('Used as an index of the table. The value of this variable equals to variable caTrapId in the corresponding alarm trap.')
alSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: alSpecificTrap.setDescription('The value equals to the value of the specific-trap field in the corresponding Nokia enterprise specific alarm trap.')
alTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: alTimeStamp.setDescription('The value equals to the time stamp as reported in the corresponding Nokia enterprise specific trap. The value of this field shall equal to the value of time-stamp field in the alarm trap which reported this alarm.')
alAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: alAlarmText.setDescription('This variable contains alarm information in human readable format to be shown e.g. in NMS UI. No processing of the contents of this alarm text are assumed within NMS. The maximum length of the alarm text shall be 64 characters.')
alCorrelatedAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCorrelatedAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: alCorrelatedAlarmId.setDescription('The value of this variable equals to the value of corresponding field in alarm and alarm clearing trap (caCorrelatedAlarmId). When this variable has value 0, it means that no alarm correlation is present and that the NMS should not assume alarm correlation support from NE concerning the corresponding alarm. This means that either alarm clearing trap will not be sent by NE or if alarm clearing trap will be sent by NE, it does not support correlation to the corresponding alarm trap.')
alFirstColumnInTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFirstColumnInTbl.setStatus('mandatory')
if mibBuilder.loadTexts: alFirstColumnInTbl.setDescription('This variable is used to reference to an conceptual row which represents the failed resource (see caColumnInTbl for further details). In case of not supporting this variable, value {0 0} shall be used.')
alRowIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRowIdx.setStatus('mandatory')
if mibBuilder.loadTexts: alRowIdx.setDescription('This variable contains value {0 0} for the time being.')
alSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 8), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: alSeverity.setDescription('This variable contains the severity of the detected failure as reported by the NE.')
alNESpecificAMPNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alNESpecificAMPNbr.setStatus('mandatory')
if mibBuilder.loadTexts: alNESpecificAMPNbr.setDescription('This variable contains the NE type specific value unique within the context of the NE type, and used to identify which alarm manual page shall be shown to the user. Alarm manual page is additional information to be provided to the user to give guidance what are the possible reasons of the alarm, how the user can recover from the problem etc. This information is like one or more pages in the NE products reference manual describing the possible alarm reported by the NE and reasons of the alarms. Each NE product is responsible for keeping these values unique within the context of their product and provide the contents of user manual pages. When supporting this variable, only positive values are allowed. When this variable has value 0, it means that no alarm manual page is associated to the alarm or this field is not supported by the NE.')
alSupplementaryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 16, 1, 3, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSupplementaryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: alSupplementaryInfo.setDescription('Supplementary information fields of the last Nokia enterprise specific alarm trap emitted by the NE. Alarm manual page contains the explanation of supplementary information fields. With these fields operator may get e.g. more detailed instructions to recover from the problem. When no information is carried in this variable, the contents is an empty string (i.e. length of the OCTET STRING shall be 0).')
mibBuilder.exportSymbols("NOKIA-COMMON-ALARM-REPORTING-MIB", alTrapIndex=alTrapIndex, alVars=alVars, caCorrelatedAlarmId=caCorrelatedAlarmId, calAlarmText=calAlarmText, alTables=alTables, caReportNokiaAlarmTraps=caReportNokiaAlarmTraps, caSeverity=caSeverity, calRowIdx=calRowIdx, ntcCommon=ntcCommon, nokiaProducts=nokiaProducts, al=al, cal=cal, calContentsChangeTime=calContentsChangeTime, calNESpecificAMPNbr=calNESpecificAMPNbr, alAlarmLogEntry=alAlarmLogEntry, caColumnInTbl=caColumnInTbl, alAlarmLogMaxSize=alAlarmLogMaxSize, caReportLinkUpLinkDownTraps=caReportLinkUpLinkDownTraps, calCurrentAlarmListTable=calCurrentAlarmListTable, calAlarmIndex=calAlarmIndex, calSeverity=calSeverity, RowPointer=RowPointer, alResendTrapDestinationAddr=alResendTrapDestinationAddr, alResendTrapId=alResendTrapId, ca=ca, calSpecificTrap=calSpecificTrap, AlarmSeverity=AlarmSeverity, alFirstColumnInTbl=alFirstColumnInTbl, alResendTrapDestinationPort=alResendTrapDestinationPort, ntcCommonAlarm=ntcCommonAlarm, alLogFullAction=alLogFullAction, alRowIdx=alRowIdx, calSupplementaryInfo=calSupplementaryInfo, caVars=caVars, calTimeStamp=calTimeStamp, caAlarmText=caAlarmText, alAlarmText=alAlarmText, calActiveAlarmCount=calActiveAlarmCount, alTimeStamp=alTimeStamp, nokia=nokia, alCorrelatedAlarmId=alCorrelatedAlarmId, caSupplementaryInfo=caSupplementaryInfo, caNESpecificAlarmManualPageNbr=caNESpecificAlarmManualPageNbr, alAlarmLogEntryCount=alAlarmLogEntryCount, EnabledDisabled=EnabledDisabled, calVars=calVars, calTables=calTables, calFirstColumnInTbl=calFirstColumnInTbl, alNESpecificAMPNbr=alNESpecificAMPNbr, alSeverity=alSeverity, calCurrentAlarmListEntry=calCurrentAlarmListEntry, caRowIdx=caRowIdx, alAlarmLogTable=alAlarmLogTable, caTrapId=caTrapId, alSpecificTrap=alSpecificTrap, alSupplementaryInfo=alSupplementaryInfo)
