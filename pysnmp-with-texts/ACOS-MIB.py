#
# PySNMP MIB module ACOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, ObjectIdentity, MibIdentifier, NotificationType, Unsigned32, Counter32, ModuleIdentity, IpAddress, Bits, TimeTicks, enterprises, iso, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "NotificationType", "Unsigned32", "Counter32", "ModuleIdentity", "IpAddress", "Bits", "TimeTicks", "enterprises", "iso", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atlasComEngines = MibIdentifier((1, 3, 6, 1, 4, 1, 2221))
aceProductFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1))
aceAcos = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1))
acosSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1))
acosDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2))
acosStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 3))
acosDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4))
acosUSI = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5))
acosSDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6))
acosEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7))
acosWAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8))
acosRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9))
acosBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10))
acosTftpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11))
acosManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 12))
acosTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 13))
acosDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14))
acosNat = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15))
class AcosDeviceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 24, 65534, 65535))
    namedValues = NamedValues(("ethernet", 1), ("singleUSI", 2), ("atm25", 4), ("singleDS1-Bt8370", 7), ("dualDS1-Bt8370", 8), ("sdsl-CO", 9), ("sdsl-Remote", 10), ("mpeg2", 11), ("quadPotsD1", 12), ("quadPotsD2", 13), ("octalPOTS", 14), ("copperGold-CO", 17), ("copperGold-RT", 18), ("sdsl-Rev1", 24), ("noDevice", 65534), ("unknown", 65535))

acosSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("rebootSystem", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosSystemReboot.setStatus('mandatory')
if mibBuilder.loadTexts: acosSystemReboot.setDescription("The value 'noAction' is always reported in a GET. The value 'rebootSystem' in a SET will cause the box to reboot.")
acosHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: acosHardwareRevision.setDescription('The hardware revision of the motherboard.')
acosSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: acosSoftwareRevision.setDescription('The software revision of the motherboard.')
acosSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: acosSerialNumber.setDescription('The serial number of the motherboard.')
acosPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: acosPartNumber.setDescription('The part number of the motherboard.')
acosTotalSlots = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTotalSlots.setStatus('mandatory')
if mibBuilder.loadTexts: acosTotalSlots.setDescription('The total number of slots present in the box. This value represents the maximum index into tables that are indexed by slot number.')
acosMemoryCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7), )
if mibBuilder.loadTexts: acosMemoryCapacityTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosMemoryCapacityTable.setDescription('This is a table of objects that report the total memory capacity of each type of memory present in the box.')
acosMemoryCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7, 1), ).setIndexNames((0, "ACOS-MIB", "acosMemoryTypeIndex"))
if mibBuilder.loadTexts: acosMemoryCapacityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosMemoryCapacityEntry.setDescription('An entry in the memory capacity table.')
acosMemoryTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sdram", 1), ("bootFlashRom", 2), ("nandFlashRom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosMemoryTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosMemoryTypeIndex.setDescription('The type of memory.')
acosMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosMemoryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: acosMemoryCapacity.setDescription('The amount of memory expressed in megabytes. For example, 8 megabytes would be reported as 8.')
acosDSPCount = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDSPCount.setStatus('mandatory')
if mibBuilder.loadTexts: acosDSPCount.setDescription('The total number of DSP devices present in the box.')
acosDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1), )
if mibBuilder.loadTexts: acosDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceTable.setDescription("This is a table of devices that are present in the box. The table contains an entry for every slot in the box including empty slots. An empty slot will be reported as 'nimNoDevice' in object 'acosDeviceType'.")
acosDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosDeviceSlotIndex"))
if mibBuilder.loadTexts: acosDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceEntry.setDescription('An entry in the device table.')
acosDeviceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 2), AcosDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceType.setDescription('Identifies the unique device type of the card in this slot.')
acosDeviceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceTotal.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceTotal.setDescription('The total number of devices contained within the slot. This value represents the maximum index into tables that are indexed by a slot device number. Multiple devices can reside in a slot. For example, a slot might contain a dual DS1 NIM consisting of two DS1 interfaces. In MIB tables where both interfaces are accessible, the objects would be indexed through a combination of the slot number and the slot device number. If the slot is empty then 0 is reported for this object.')
acosDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceDescription.setDescription('A description of the device in the slot. If the slot is empty then a null length string is reported for this object.')
acosDeviceTypesAggregate = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceTypesAggregate.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceTypesAggregate.setDescription("This object contains an aggregate list of the devices present in the box. The list contains pairs of octets, each pair forming a 16 bit integer representing the device type for a slot. Every slot is reported including empty slots. The first octet pair represents slot 1 and the last octet pair represents the highest slot number. The highest slot number can be gotten from object 'acosTotalSlots'. Each octet pair is sent LSB first. The total octets sent will be 2 x acosTotalSlots. The value reported in each octet pair comes from 'AcosDeviceTypeEnum'.")
acosDeviceTotalsAggregate = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceTotalsAggregate.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceTotalsAggregate.setDescription("This object contains an aggregate list of the total number of devices present in each slot. An octet will be sent for each slot including empty slots. The first octet represents slot 1 and the last octet represents the highest slot number. The highest slot number can be gotten from object 'acosTotalSlots'. The total octets sent will be equal to 'acosTotalSlots'. A value of 0 will be reported for empty slots.")
acosCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosCpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: acosCpuUtilization.setDescription('The utilization of the CPU in percent.')
acosT1LineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1), )
if mibBuilder.loadTexts: acosT1LineConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosT1LineConfigTable.setDescription('This is a table of configurables for T1 lines.')
acosT1LineConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosT1LineSlotIndex"), (0, "ACOS-MIB", "acosT1LineSlotInterfaceIndex"))
if mibBuilder.loadTexts: acosT1LineConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosT1LineConfigEntry.setDescription('An entry in the T1 line config table.')
acosT1LineSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosT1LineSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosT1LineSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosT1LineSlotInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosT1LineSlotInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosT1LineSlotInterfaceIndex.setDescription("The interface number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lbo0db", 1), ("lbo133ft", 2), ("lbo266ft", 3), ("lbo399ft", 4), ("lbo533ft", 5), ("lbo75db", 6), ("lbo15db", 7), ("lbo225db", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosT1LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: acosT1LineBuildOut.setDescription('Transmit level attenuation of the T1 line.')
acosDS1ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2), )
if mibBuilder.loadTexts: acosDS1ChannelConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1ChannelConfigTable.setDescription('Channel configuration table for a DS1.')
acosDS1ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosDS1ChannelSlotIndex"), (0, "ACOS-MIB", "acosDS1ChannelSlotDeviceIndex"), (0, "ACOS-MIB", "acosDS1ChannelIndex"))
if mibBuilder.loadTexts: acosDS1ChannelConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1ChannelConfigEntry.setDescription('An entry in the DS1 channel config table.')
acosDS1ChannelSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1ChannelSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1ChannelSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosDS1ChannelSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1ChannelSlotDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1ChannelSlotDeviceIndex.setDescription("The device number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosDS1ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1ChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1ChannelIndex.setDescription('The channel number to configure. For T1 interfaces the valid values are 1..24, and for E1 interfaces the valid values are 1..31.')
acosDS1TxChannelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1TxChannelControl.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1TxChannelControl.setDescription('Enables or disables the transmit channel on the DS1 on this device in this slot.')
acosDS1RxChannelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1RxChannelControl.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1RxChannelControl.setDescription('Enables or disables the receive channel on the DS1 on this device in this slot.')
acosDS1AggChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3), )
if mibBuilder.loadTexts: acosDS1AggChanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1AggChanConfigTable.setDescription('Channel configuration table for a DS1. Channels can be configured in aggregate.')
acosDS1AggChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1), ).setIndexNames((0, "ACOS-MIB", "acosDS1AggChanSlotIndex"), (0, "ACOS-MIB", "acosDS1AggChanSlotDeviceIndex"))
if mibBuilder.loadTexts: acosDS1AggChanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1AggChanConfigEntry.setDescription('An entry in the aggregate channel config table.')
acosDS1AggChanSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1AggChanSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1AggChanSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosDS1AggChanSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1AggChanSlotDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1AggChanSlotDeviceIndex.setDescription("The device number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosDS1TxChannelsAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1TxChannelsAggregate.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1TxChannelsAggregate.setDescription('An aggregate of all transmit channel settings. An octet is sent for each channel on the DS1. For T1 interfaces the total number of octets will be 24, and for E1 interfaces the total number of octets will be 31. The octets are sent starting with the lowest channel and ending with the highest channel. Each octet contains a value representing the state of the channel as follows: 1 = Channel is enabled 2 = Channel is disabled')
acosDS1RxChannelsAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1RxChannelsAggregate.setStatus('mandatory')
if mibBuilder.loadTexts: acosDS1RxChannelsAggregate.setDescription('An aggregate of all receive channel settings. An octet is sent for each channel on the DS1. For T1 interfaces the total number of octets will be 24, and for E1 interfaces the total number of octets will be 31. The octets are sent starting with the lowest channel and ending with the highest channel. Each octet contains a value representing the state of the channel as follows: 1 = Channel is enabled 2 = Channel is disabled')
acosUSIConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1), )
if mibBuilder.loadTexts: acosUSIConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosUSIConfigTable.setDescription('This is a table of configurables for a universal serial interface (USI).')
acosUSIConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosUSISlotIndex"), (0, "ACOS-MIB", "acosUSISlotInterfaceIndex"))
if mibBuilder.loadTexts: acosUSIConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosUSIConfigEntry.setDescription('An entry in the USI config table.')
acosUSISlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosUSISlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosUSISlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosUSISlotInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosUSISlotInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosUSISlotInterfaceIndex.setDescription("The interface number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosUSIInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rs232", 2), ("v10", 4), ("v35", 5), ("x21", 6), ("rs530", 7), ("rs530a", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosUSIInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: acosUSIInterfaceType.setDescription('The interface type.')
acosSDSLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1), )
if mibBuilder.loadTexts: acosSDSLConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosSDSLConfigTable.setDescription('This is a table of configurables for a symmetric digital subscriber line (SDSL).')
acosSDSLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosSDSLSlotIndex"), (0, "ACOS-MIB", "acosSDSLSlotInterfaceIndex"))
if mibBuilder.loadTexts: acosSDSLConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosSDSLConfigEntry.setDescription('An entry in the SDSL config table.')
acosSDSLSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSDSLSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosSDSLSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosSDSLSlotInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSDSLSlotInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosSDSLSlotInterfaceIndex.setDescription("The interface number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosSDSLInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpe", 1), ("co", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosSDSLInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: acosSDSLInterfaceType.setDescription('The interface type, Customer Premise Equipment (CPE), or Telephone Company Central Office (CO).')
acosSDSLClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosSDSLClockType.setStatus('mandatory')
if mibBuilder.loadTexts: acosSDSLClockType.setDescription('The clocking type setting.')
acosEthernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1), )
if mibBuilder.loadTexts: acosEthernetConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosEthernetConfigTable.setDescription('This is a table of configurables for an ethernet interface.')
acosEthernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosEthernetSlotIndex"))
if mibBuilder.loadTexts: acosEthernetConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosEthernetConfigEntry.setDescription('An entry in the ethernet config table.')
acosEthernetSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosEthernetSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosEthernetSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosEthernetFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosEthernetFullDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: acosEthernetFullDuplex.setDescription('Enables or disable ethernet full duplex mode')
acosWANConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1), )
if mibBuilder.loadTexts: acosWANConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANConfigTable.setDescription('This is a table of common configurables for WAN interfaces.')
acosWANConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosWANSlotIndex"), (0, "ACOS-MIB", "acosWANSlotDeviceIndex"))
if mibBuilder.loadTexts: acosWANConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANConfigEntry.setDescription('An entry in the WAN config table.')
acosWANSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosWANSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSlotDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSlotDeviceIndex.setDescription("The device number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosWANDataLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("transparent", 1), ("raw-HDLC", 2), ("cisco-HDLC", 3), ("ip-Plus-HDLC", 4), ("ppp", 5), ("atm-RFC1483", 6), ("pppOverAtm-RFC2364", 7), ("frameRelay", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosWANDataLinkProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANDataLinkProtocol.setDescription('Sets the High Level Data Link Control protocol for this device in this slot.')
acosWANSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosWANSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSpeed.setDescription('Sets the data link speed for this device in this slot.')
acosWANSerialStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2), )
if mibBuilder.loadTexts: acosWANSerialStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSerialStatsTable.setDescription('This is a table of common serial statistics for WAN interfaces.')
acosWANSerialStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosWANSerialStatsSlotIndex"), (0, "ACOS-MIB", "acosWANSerialStatsSlotDeviceIndex"))
if mibBuilder.loadTexts: acosWANSerialStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSerialStatsEntry.setDescription('An entry in the WAN serial statistics table.')
acosWANSerialStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSerialStatsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSerialStatsSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosWANSerialStatsSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSerialStatsSlotDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANSerialStatsSlotDeviceIndex.setDescription("The device number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosWANTotalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTotalRxFrames.setDescription('The total number of frames received on this port.')
acosWANTotalRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTotalRxOctets.setDescription('The total number of octets received on this port.')
acosWANRxMissedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxMissedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxMissedFrames.setDescription('The total number of frames discarded on this port because the receive buffer descriptor ring was empty.')
acosWANRxErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxErrorFrames.setDescription('The total number of frames discarded on this port because of receive errors.')
acosWANRxGlitchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxGlitchErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxGlitchErrors.setDescription('The total number of frames discarded on this port because of receive clock glitch errors.')
acosWANRxPllErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxPllErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxPllErrors.setDescription('The total number of frames discarded on this port because of receive phase lock loop errors.')
acosWANRxLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxLongErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxLongErrors.setDescription('The total number of frames discarded on this port because the received frame was too long.')
acosWANRxNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxNonOctetErrors.setDescription('The total number of frames discarded on this port because the received frame was not an integral number of octets.')
acosWANRxAbortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxAbortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxAbortErrors.setDescription('The total number of frames discarded on this port because of abort sequences within the received frame.')
acosWANRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxCrcErrors.setDescription('The total number of frames discarded on this port because of received CRC errors.')
acosWANRxOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxOverrunErrors.setDescription('The total number of frames discarded on this port because of receiver overrun errors.')
acosWANRxCdLostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxCdLostErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANRxCdLostErrors.setDescription('The total number of frames discarded on this port because of lost Carrier Detect.')
acosWANTotalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTotalTxFrames.setDescription('The total number of frames transmitted on this port.')
acosWANTotalTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTotalTxOctets.setDescription('The total number of octets received on this port.')
acosWANTxMissedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxMissedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTxMissedFrames.setDescription('The total number of frames discarded on this port because the transmit buffer descriptor ring was empty.')
acosWANTxDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxDiscardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTxDiscardedFrames.setDescription('The total number of frames discarded on this port because the packet was bad, or the link was not ready.')
acosWANTxErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTxErrorFrames.setDescription('The total number of frames discarded on this port because of transmitter errors.')
acosWANTxGlitchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxGlitchErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTxGlitchErrors.setDescription('The total number of frames discarded on this port because of transmitter clock glitch errors.')
acosWANTxUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxUnderrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTxUnderrunErrors.setDescription('The total number of frames discarded on this port because of transmitter underrun errors.')
acosWANTxCtsLostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxCtsLostErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANTxCtsLostErrors.setDescription('The total number of frames discarded on this port because of transmitter CTS lost errors.')
acosWANAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3), )
if mibBuilder.loadTexts: acosWANAtmStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmStatsTable.setDescription('This is a table of common ATM statistics for WAN interfaces.')
acosWANAtmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1), ).setIndexNames((0, "ACOS-MIB", "acosWANAtmStatsSlotIndex"), (0, "ACOS-MIB", "acosWANAtmStatsSlotDeviceIndex"))
if mibBuilder.loadTexts: acosWANAtmStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmStatsEntry.setDescription('An entry in the WAN ATM statistics table.')
acosWANAtmStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmStatsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmStatsSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosWANAtmStatsSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmStatsSlotDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmStatsSlotDeviceIndex.setDescription("The device number of a specific device in the slot. The device numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosWANAtmTotalRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmTotalRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmTotalRxCells.setDescription('The total number of ATM cells received on this port.')
acosWANAtmClpiRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmClpiRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmClpiRxCells.setDescription('The number of ATM cells received on this port with Cell Loss Priority Indication set.')
acosWANAtmOamRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmOamRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmOamRxCells.setDescription('The number of operation and maintenance ATM cells received on this port.')
acosWANAtmEfciRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmEfciRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmEfciRxCells.setDescription('The number of ATM cells received on this port with Explicit Forward Congestion Indication set.')
acosWANAtmRmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRmRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmRmRxCells.setDescription('The number of resource management ATM cells received on this port.')
acosWANAtmRxCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRxCellsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmRxCellsDiscarded.setDescription('The number of ATM cells received and discarded on this port.')
acosWANAtmTotalTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmTotalTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmTotalTxCells.setDescription('The total number of ATM cells transmitted on this port.')
acosWANAtmOamTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmOamTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmOamTxCells.setDescription('The number of operation and maintenance ATM cells transmitted on this port.')
acosWANAtmClpiTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmClpiTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmClpiTxCells.setDescription('The number of ATM cells transmitted on this port with Cell Loss Priority Indication set.')
acosWANAtmEfciTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmEfciTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmEfciTxCells.setDescription('The number of ATM cells transmitted on this port with Explicit Forward Congestion Indication set.')
acosWANAtmRmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRmTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmRmTxCells.setDescription('The number of resource management ATM cells transmitted on this port.')
acosWANAtmRxHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRxHecErrors.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmRxHecErrors.setDescription('The number of ATM cells received on this port with Header Error Correction errors.')
acosWANAtmPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acosWANAtmPortStatus.setDescription('The ATM port status.')
acosDeviceIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1), )
if mibBuilder.loadTexts: acosDeviceIpAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpAddressTable.setDescription('This is a table of IP addresses associated with devices contained in the box.')
acosDeviceIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosDeviceIpSlotIndex"), (0, "ACOS-MIB", "acosDeviceIpInterfaceIndex"), (0, "ACOS-MIB", "acosDeviceIpPortIndex"), (0, "ACOS-MIB", "acosDeviceIpConnectionIndex"))
if mibBuilder.loadTexts: acosDeviceIpAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpAddressEntry.setDescription('An entry in the device level IP address table.')
acosDeviceIpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosDeviceIpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpInterfaceIndex.setDescription("The interface number of a specific device in the slot. The interface numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosDeviceIpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpPortIndex.setDescription("The port number of a specific device in the slot. The port numbers range from 1 to the maximum number of devices reported in 'acosDeviceTotal' for this slot.")
acosDeviceIpConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpConnectionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpConnectionIndex.setDescription('The connection number of a specific device in the slot. The connection numbers range from 1 to the maximum number of allowed connections.')
acosDeviceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpAddress.setDescription("The IP address assigned to this device in this slot. A value of '0.0.0.0' in a SET will delete the IP address assigned to this device. A value of '0.0.0.0' returned in a GET means the device does not have an IP address assigned to it.")
acosDeviceIpAddressSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceIpAddressSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpAddressSubnetMask.setDescription("The subnet mask for the IP address assigned to this device in this slot. A value of '0.0.0.0' will be returned in a GET when the device does not have an IP address assigned to it.")
acosDeviceIpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceIpPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceIpPeerAddress.setDescription("The IP address of the peer for this device in this slot. Note that this object is only accessible if the protocol is set to 'ppp' in object 'acosWANDataLinkProtocol'.")
acosRIPControl = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosRIPControl.setStatus('mandatory')
if mibBuilder.loadTexts: acosRIPControl.setDescription('This object enables or disables the Routing Information Protocol (RIP) for the box.')
acosDeviceRipParameterTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3), )
if mibBuilder.loadTexts: acosDeviceRipParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipParameterTable.setDescription('This is a table of RIP parameters associated with devices contained in the box.')
acosDeviceRipParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1), ).setIndexNames((0, "ACOS-MIB", "acosDeviceRipSlotIndex"), (0, "ACOS-MIB", "acosDeviceRipInterfaceIndex"), (0, "ACOS-MIB", "acosDeviceRipPortIndex"))
if mibBuilder.loadTexts: acosDeviceRipParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipParameterEntry.setDescription('An entry in the device level RIP parameter table.')
acosDeviceRipSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceRipSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosDeviceRipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceRipInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipInterfaceIndex.setDescription("The interface number of a specific interface in the slot. The interface numbers range from 1 to the maximum number of interfaces reported in 'acosDeviceTotal' for this slot.")
acosDeviceRipPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceRipPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipPortIndex.setDescription("The port number of a specific interface in the slot. The port numbers range from 1 to the maximum number of ports reported in 'acosDeviceTotal' for this slot.")
acosDeviceRipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("version1Broadcast", 2), ("version2Broadcast", 3), ("version2Multicast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceRipVersion.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipVersion.setDescription('The version of RIP configured for this interface.')
acosDeviceRipPoisonedReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceRipPoisonedReverse.setStatus('mandatory')
if mibBuilder.loadTexts: acosDeviceRipPoisonedReverse.setDescription('The poisoned reverse configuration for this interface.')
acosDNSServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDNSServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDNSServerAddress.setDescription('This object specifies the IP address of the Domain Name Server for the box. Zero to disable DNS client functionality')
acosDNSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDNSTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: acosDNSTimeout.setDescription('This object specifies the timeout for replys from the Domain Name Server.')
acosBridging = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("globallyEnabled", 1), ("globallyDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosBridging.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridging.setDescription("Enables or disables bridging for all devices. The value 'disabled' in a SET will cause bridging to be disabled on all devices. The value 'enabled' in a SET will cause bridging to be enabled on all devices.")
acosBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2), )
if mibBuilder.loadTexts: acosBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridgeTable.setDescription('This table controls bridging on an individual device level.')
acosBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosBridgeSlotIndex"), (0, "ACOS-MIB", "acosBridgeInterfaceIndex"), (0, "ACOS-MIB", "acosBridgePortIndex"))
if mibBuilder.loadTexts: acosBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridgeEntry.setDescription('An entry in the device level bridging control table.')
acosBridgeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosBridgeSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridgeSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosBridgeInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosBridgeInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridgeInterfaceIndex.setDescription("The interface number of a specific interface in the slot. The interface numbers range from 1 to the maximum number of interfaces reported in 'acosDeviceTotal' for this slot.")
acosBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridgePortIndex.setDescription("The port number of a specific port in the slot. The port numbers range from 1 to the maximum number of interfaces reported in 'acosDeviceTotal' for this slot.")
acosBridgeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosBridgeControl.setStatus('mandatory')
if mibBuilder.loadTexts: acosBridgeControl.setDescription('Enables or disables bridging for this device in this slot.')
acosTftpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpServerAddress.setDescription('The IP address of the TFTP server where upgrade files are stored.')
acosTftpAcosName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpAcosName.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpAcosName.setDescription('The filename of the ACOS image that will be read when the box is commanded to upgrade ACOS. If necessary, the name should include the full directory path where the file is stored on the TFTP server (server specific).')
acosTftpUpgradeACOS = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("upgradeACOS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpUpgradeACOS.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpUpgradeACOS.setDescription("The value 'noAction' is always reported in a GET. The value 'upgradeACOS' in a SET will cause the box to initiate a TFTP session with the IP address of the TFTP server identified in object 'acosTftpServerAddress'. The box will request from the server the file identified in object 'acosTftpAcosName'.")
acosTftpApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpApplicationName.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpApplicationName.setDescription('The filename of the application image that will be read when the box is commanded to upgrade the application. If necessary, the name should include the full directory path where the file is stored on the TFTP server (server specific).')
acosTftpUpgradeApplication = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("upgradeApp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpUpgradeApplication.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpUpgradeApplication.setDescription("The value 'noAction' is always reported in a GET. The value 'upgradeApp' in a SET will cause the box to initiate a TFTP session with the IP address of the TFTP server identified in object 'acosTftpServerAddress'. The box will request from the server the file identified in object 'acosTftpApplicationName'.")
acosTftpSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTftpSessionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpSessionStatus.setDescription("This object reports the status of the TFTP client. If a TFTP session has never been active since the box has booted, the value 'ready' is reported. If a session is currently active, the value 'inProgress' is reported. If a session is not currently active, the status of the last active session is reported as 'succeeded' or 'failed'. If the status is 'failed' the object 'acosTftpFailReason' will contain the reason for the failure. If the status is 'failed' or 'succeeded', the object 'acosTftpOctetsRead' will contain the number of octets read.")
acosTftpFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTftpFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpFailReason.setDescription('The reason for a TFTP failure between the client in the box and a server. If there have not been any failures since the box was last booted, a null length string will be returned. If the last TFTP session succeeded, a null length string will be returned.')
acosTftpOctetsRead = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTftpOctetsRead.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpOctetsRead.setDescription('The total number of octets read during a TFTP session. This object is updated periodically by the agent during an active session. This means that if a session is currently in progress, this object can be periodically read by the management station to track the progress of the session. If a session has never been active since the box was last booted, this object will return 0. If a session has failed or succeeded, this object will return the number of blocks read for the failure or success.')
acosManagerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosManagerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosManagerIpAddress.setDescription('The IP address of the management station to send traps.')
acosManagerWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosManagerWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: acosManagerWriteCommunity.setDescription('The write community string for the management station allowed to manage the box.')
acosTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: acosTftpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: acosTftpFileName.setDescription('Identifies the name of the file read by the TFTP client in the box. This object will be sent in traps that report TFTP client activity. This object is not accessible other than when sent in a trap.')
acosDhcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpEnable.setDescription('The enable/disable field for DHCP server.')
acosDhcpGateway = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpGateway.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpGateway.setDescription('The default gateway IP address to be returned to the DHCP client.')
acosDhcpDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpDnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpDnsServer.setDescription('The DNS server IP address to be returned to the DHCP client.')
acosDhcpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpSubnet.setDescription('The subnet mask to be returned to the DHCP client.')
acosDhcpLowAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpLowAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpLowAddress.setDescription('The low IP address of the DHCP assignable IP address pool.')
acosDhcpHighAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpHighAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpHighAddress.setDescription('The high IP address of the DHCP assignable IP address pool.')
acosDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpLeaseTime.setDescription('The lease time in seconds for DHCP assigned addresses. -1 means forever.')
acosDhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpDomainName.setDescription('The domain name returned to the DHCP client.')
acosDhcpInterface = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpInterface.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpInterface.setDescription('The logical interface number processed by the DHCP server.')
acosDhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10), )
if mibBuilder.loadTexts: acosDhcpClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientTable.setDescription('DHCP Server special handling client table.')
acosDhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1), ).setIndexNames((0, "ACOS-MIB", "acosDhcpClientIndex"))
if mibBuilder.loadTexts: acosDhcpClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientEntry.setDescription('An entry in the DHCP server special handling client table.')
acosDhcpClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDhcpClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientIndex.setDescription('The index number of the DHCP server special handling client table. The index numbers range from 1 to the maximum size of the client table.')
acosDhcpClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientIpAddress.setDescription('DHCP Server special handling client table IP address. Zero means use an IP address from the address pool.')
acosDhcpClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientMacAddress.setDescription('DHCP Server special handling client table MAC address.')
acosDhcpClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientName.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientName.setDescription('DHCP Server special handling client table name.')
acosDhcpClientLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientLeaseTime.setDescription('DHCP Server special handling client table lease time in seconds. Zero means use the DHCP default lease time. -1 means forever.')
acosDhcpClientSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientSubnetMask.setDescription('DHCP Server special handling client table subnet mask. Zero means use the default value.')
acosDhcpClientGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientGateway.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientGateway.setDescription('DHCP Server special handling client table default gateway. Zero means use the default value.')
acosDhcpClientDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientDnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: acosDhcpClientDnsServer.setDescription('DHCP Server special handling client table Domain Name Server. Zero means use the default value.')
acosNatServerTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1), )
if mibBuilder.loadTexts: acosNatServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerTable.setDescription('NAT Local Server Table.')
acosNatServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosNatServerIndex"))
if mibBuilder.loadTexts: acosNatServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerEntry.setDescription('An entry in the NAT local server table.')
acosNatServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerIndex.setDescription('The index number of the NAT local server table. The index numbers range from 1 to the maximum size of the local server table.')
acosNatServerTranslatedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerTranslatedIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerTranslatedIpAddress.setDescription('The actual IP address of this server on the local side of the NAT enabled router.')
acosNatServerTranslatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerTranslatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerTranslatedPort.setDescription('The actual port number of this server on the local side of the NAT enabled router.')
acosNatServerStandardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerStandardPort.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerStandardPort.setDescription('The port number by which this server is seen from the Internet.')
acosNatServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatServerProtocol.setDescription('NAT local server protocol (TCP or UDP).')
acosNatDeviceParameterTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2), )
if mibBuilder.loadTexts: acosNatDeviceParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatDeviceParameterTable.setDescription('This is a table of NAT parameters associated with devices contained in the box.')
acosNatDeviceParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosNatDeviceSlotIndex"), (0, "ACOS-MIB", "acosNatDeviceInterfaceIndex"), (0, "ACOS-MIB", "acosNatDevicePortIndex"))
if mibBuilder.loadTexts: acosNatDeviceParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatDeviceParameterEntry.setDescription('An entry in the device level NAT parameter table.')
acosNatDeviceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatDeviceSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatDeviceSlotIndex.setDescription("The slot number the device resides in. The slot numbers range from 1 to the maximum number of slots reported in object 'acosTotalSlots'.")
acosNatDeviceInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatDeviceInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatDeviceInterfaceIndex.setDescription("The interface number of a specific interface in the slot. The interface numbers range from 1 to the maximum number of interfaces reported in 'acosDeviceTotal' for this slot.")
acosNatDevicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatDevicePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatDevicePortIndex.setDescription("The port number of a specific interface in the slot. The port numbers range from 1 to the maximum number of ports reported in 'acosDeviceTotal' for this slot.")
acosNatDeviceTranslationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatDeviceTranslationEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatDeviceTranslationEnabled.setDescription('The NAT translation configuration for this port.')
acosNatTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatTcpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatTcpTimeout.setDescription('The NAT TCP connection timeout time in hundredths of seconds.')
acosNatUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatUdpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatUdpTimeout.setDescription('The NAT UDP connection timeout time in hundredths of seconds.')
acosNatPortLow = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatPortLow.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatPortLow.setDescription('The low end of the port number range used for NAT connections.')
acosNatPortHigh = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatPortHigh.setStatus('mandatory')
if mibBuilder.loadTexts: acosNatPortHigh.setDescription('The high end of the port number range used for NAT connections.')
acosCardInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,1)).setObjects(("ACOS-MIB", "acosDeviceSlotIndex"), ("ACOS-MIB", "acosDeviceType"))
if mibBuilder.loadTexts: acosCardInsertedTrap.setDescription("A card has been detected in a slot that was previously empty. The slot number is reported in 'acosDeviceSlotIndex'. The card type is reported in 'acosDeviceType'")
acosCardRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,2)).setObjects(("ACOS-MIB", "acosDeviceSlotIndex"), ("ACOS-MIB", "acosDeviceType"))
if mibBuilder.loadTexts: acosCardRemovedTrap.setDescription("A card has been removed from a slot. The slot number is reported in 'acosDeviceSlotIndex'. The type of card that was in the slot is reported in 'acosDeviceType'")
acosTftpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,3)).setObjects(("ACOS-MIB", "acosTftpFileName"), ("ACOS-MIB", "acosTftpServerAddress"))
if mibBuilder.loadTexts: acosTftpInitiatedTrap.setDescription("The box has been commanded to start a TFTP session. The name of the file being read is reported in 'acosTftpFileName'. The IP address of the server where the file is being read from is reported in 'acosTftpServerAddress'.")
acosTftpFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,4)).setObjects(("ACOS-MIB", "acosTftpFileName"), ("ACOS-MIB", "acosTftpServerAddress"), ("ACOS-MIB", "acosTftpFailReason"))
if mibBuilder.loadTexts: acosTftpFailedTrap.setDescription("The TFTP session failed. The name of the file that could not be read is reported in 'acosTftpFileName'. The IP address of the server where the file could not be read is reported in 'acosTftpServerAddress'. The reason for the failure is reported in 'acosTftpFailReason'.")
acosTftpSucceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,5)).setObjects(("ACOS-MIB", "acosTftpFileName"), ("ACOS-MIB", "acosTftpServerAddress"))
if mibBuilder.loadTexts: acosTftpSucceededTrap.setDescription("The TFTP session succeeded. The name of the file that was read is reported in 'acosTftpFileName'. The IP address of the server where the file was read is reported in 'acosTftpServerAddress'.")
mibBuilder.exportSymbols("ACOS-MIB", acosTotalSlots=acosTotalSlots, acosWANConfigTable=acosWANConfigTable, acosDhcpClientLeaseTime=acosDhcpClientLeaseTime, acosWANTxErrorFrames=acosWANTxErrorFrames, acosDhcpGateway=acosDhcpGateway, acosPartNumber=acosPartNumber, acosDeviceTable=acosDeviceTable, acosDeviceRipSlotIndex=acosDeviceRipSlotIndex, acosDhcpInterface=acosDhcpInterface, acosNatTcpTimeout=acosNatTcpTimeout, acosNatServerTranslatedPort=acosNatServerTranslatedPort, acosDNSTimeout=acosDNSTimeout, acosNatServerProtocol=acosNatServerProtocol, acosSDSLConfigTable=acosSDSLConfigTable, acosDeviceIpAddressSubnetMask=acosDeviceIpAddressSubnetMask, acosWANAtmClpiTxCells=acosWANAtmClpiTxCells, acosDeviceIpAddressEntry=acosDeviceIpAddressEntry, acosEthernetConfigTable=acosEthernetConfigTable, acosUSIConfigEntry=acosUSIConfigEntry, acosDNSServerAddress=acosDNSServerAddress, acosWANRxMissedFrames=acosWANRxMissedFrames, acosSerialNumber=acosSerialNumber, acosTftpUpgradeApplication=acosTftpUpgradeApplication, acosDhcpDnsServer=acosDhcpDnsServer, acosTftpSessionStatus=acosTftpSessionStatus, acosDeviceRipParameterTable=acosDeviceRipParameterTable, acosBridgeSlotIndex=acosBridgeSlotIndex, acosDhcpClientEntry=acosDhcpClientEntry, acosNatServerIndex=acosNatServerIndex, acosTftpFileName=acosTftpFileName, acosDeviceIpInterfaceIndex=acosDeviceIpInterfaceIndex, acosWANRxGlitchErrors=acosWANRxGlitchErrors, acosWANAtmStatsEntry=acosWANAtmStatsEntry, acosNatServerStandardPort=acosNatServerStandardPort, acosSystem=acosSystem, acosCardInsertedTrap=acosCardInsertedTrap, acosWANAtmStatsSlotIndex=acosWANAtmStatsSlotIndex, acosSystemReboot=acosSystemReboot, acosWANAtmPortStatus=acosWANAtmPortStatus, acosWANAtmStatsSlotDeviceIndex=acosWANAtmStatsSlotDeviceIndex, acosNatServerTable=acosNatServerTable, acosDeviceType=acosDeviceType, acosDeviceTotal=acosDeviceTotal, acosWANRxErrorFrames=acosWANRxErrorFrames, acosDeviceDescription=acosDeviceDescription, acosSDSLSlotInterfaceIndex=acosSDSLSlotInterfaceIndex, acosDeviceRipParameterEntry=acosDeviceRipParameterEntry, acosNatDeviceParameterTable=acosNatDeviceParameterTable, acosWANTxMissedFrames=acosWANTxMissedFrames, acosBridgePortIndex=acosBridgePortIndex, acosDeviceIpPeerAddress=acosDeviceIpPeerAddress, acosEthernetSlotIndex=acosEthernetSlotIndex, acosTftpSucceededTrap=acosTftpSucceededTrap, acosWANSpeed=acosWANSpeed, acosWANAtmStatsTable=acosWANAtmStatsTable, acosWANTxDiscardedFrames=acosWANTxDiscardedFrames, acosRouting=acosRouting, acosSDSLClockType=acosSDSLClockType, acosT1LineSlotInterfaceIndex=acosT1LineSlotInterfaceIndex, acosWANAtmClpiRxCells=acosWANAtmClpiRxCells, acosHardwareRevision=acosHardwareRevision, acosDS1ChannelConfigEntry=acosDS1ChannelConfigEntry, acosT1LineConfigEntry=acosT1LineConfigEntry, acosDS1TxChannelsAggregate=acosDS1TxChannelsAggregate, acosWANTxCtsLostErrors=acosWANTxCtsLostErrors, acosWANAtmEfciRxCells=acosWANAtmEfciRxCells, acosWANDataLinkProtocol=acosWANDataLinkProtocol, acosTftpFailReason=acosTftpFailReason, acosDeviceTotalsAggregate=acosDeviceTotalsAggregate, acosDS1ChannelConfigTable=acosDS1ChannelConfigTable, acosUSI=acosUSI, acosDS1ChannelSlotIndex=acosDS1ChannelSlotIndex, acosSDSLConfigEntry=acosSDSLConfigEntry, acosDS1TxChannelControl=acosDS1TxChannelControl, acosUSIConfigTable=acosUSIConfigTable, acosWANTxUnderrunErrors=acosWANTxUnderrunErrors, acosNatDeviceInterfaceIndex=acosNatDeviceInterfaceIndex, acosMemoryCapacityTable=acosMemoryCapacityTable, acosBridging=acosBridging, acosEthernetConfigEntry=acosEthernetConfigEntry, acosTftpAcosName=acosTftpAcosName, acosEthernetFullDuplex=acosEthernetFullDuplex, acosDS1RxChannelControl=acosDS1RxChannelControl, acosWANAtmRxHecErrors=acosWANAtmRxHecErrors, acosUSISlotInterfaceIndex=acosUSISlotInterfaceIndex, acosWANRxOverrunErrors=acosWANRxOverrunErrors, acosTrapObjects=acosTrapObjects, acosT1LineBuildOut=acosT1LineBuildOut, acosDS1AggChanSlotDeviceIndex=acosDS1AggChanSlotDeviceIndex, acosBridgeTable=acosBridgeTable, aceProductFamily=aceProductFamily, acosDeviceIpAddressTable=acosDeviceIpAddressTable, acosUSISlotIndex=acosUSISlotIndex, acosDeviceEntry=acosDeviceEntry, acosDeviceTypesAggregate=acosDeviceTypesAggregate, acosDhcpHighAddress=acosDhcpHighAddress, acosDhcpEnable=acosDhcpEnable, acosDeviceIpConnectionIndex=acosDeviceIpConnectionIndex, acosDeviceRipVersion=acosDeviceRipVersion, acosWANAtmRxCellsDiscarded=acosWANAtmRxCellsDiscarded, acosNatDevicePortIndex=acosNatDevicePortIndex, acosMemoryCapacity=acosMemoryCapacity, acosNatDeviceTranslationEnabled=acosNatDeviceTranslationEnabled, acosDeviceSlotIndex=acosDeviceSlotIndex, acosSDSLInterfaceType=acosSDSLInterfaceType, acosDhcpClientIndex=acosDhcpClientIndex, acosDS1AggChanConfigTable=acosDS1AggChanConfigTable, acosWANAtmRmTxCells=acosWANAtmRmTxCells, acosManagerWriteCommunity=acosManagerWriteCommunity, acosDhcpLeaseTime=acosDhcpLeaseTime, acosDS1ChannelSlotDeviceIndex=acosDS1ChannelSlotDeviceIndex, acosWANSerialStatsSlotDeviceIndex=acosWANSerialStatsSlotDeviceIndex, acosDhcpClientName=acosDhcpClientName, acosTftpApplicationName=acosTftpApplicationName, acosDS1ChannelIndex=acosDS1ChannelIndex, acosWANTotalTxFrames=acosWANTotalTxFrames, acosDhcpClientMacAddress=acosDhcpClientMacAddress, acosNatServerTranslatedIpAddress=acosNatServerTranslatedIpAddress, atlasComEngines=atlasComEngines, acosNatPortLow=acosNatPortLow, acosNatServerEntry=acosNatServerEntry, acosNatDeviceSlotIndex=acosNatDeviceSlotIndex, acosWANAtmEfciTxCells=acosWANAtmEfciTxCells, acosUSIInterfaceType=acosUSIInterfaceType, AcosDeviceTypeEnum=AcosDeviceTypeEnum, acosTftpOctetsRead=acosTftpOctetsRead, acosWANAtmOamRxCells=acosWANAtmOamRxCells, acosNat=acosNat, acosManagement=acosManagement, acosWANRxNonOctetErrors=acosWANRxNonOctetErrors, acosDeviceRipInterfaceIndex=acosDeviceRipInterfaceIndex, acosWANTotalRxFrames=acosWANTotalRxFrames, acosWANRxCrcErrors=acosWANRxCrcErrors, acosRIPControl=acosRIPControl, acosDhcpClientTable=acosDhcpClientTable, acosDhcpLowAddress=acosDhcpLowAddress, acosWANTotalRxOctets=acosWANTotalRxOctets, acosDS1AggChanSlotIndex=acosDS1AggChanSlotIndex, acosWANAtmTotalTxCells=acosWANAtmTotalTxCells, acosSoftwareRevision=acosSoftwareRevision, acosDhcp=acosDhcp, acosNatDeviceParameterEntry=acosNatDeviceParameterEntry, acosWANSerialStatsTable=acosWANSerialStatsTable, acosEthernet=acosEthernet, acosDS1RxChannelsAggregate=acosDS1RxChannelsAggregate, acosWANRxLongErrors=acosWANRxLongErrors, acosWANRxPllErrors=acosWANRxPllErrors, acosWANSerialStatsSlotIndex=acosWANSerialStatsSlotIndex, acosDhcpClientIpAddress=acosDhcpClientIpAddress, aceAcos=aceAcos, acosStatus=acosStatus, acosMemoryCapacityEntry=acosMemoryCapacityEntry, acosWANAtmTotalRxCells=acosWANAtmTotalRxCells, acosDhcpClientSubnetMask=acosDhcpClientSubnetMask, acosCpuUtilization=acosCpuUtilization, acosWANRxCdLostErrors=acosWANRxCdLostErrors, acosWANSlotIndex=acosWANSlotIndex, acosNatUdpTimeout=acosNatUdpTimeout, acosT1LineConfigTable=acosT1LineConfigTable, acosBridge=acosBridge, acosBridgeControl=acosBridgeControl, acosTftpUpgradeACOS=acosTftpUpgradeACOS, acosWANSerialStatsEntry=acosWANSerialStatsEntry, acosDhcpDomainName=acosDhcpDomainName, acosDSPCount=acosDSPCount, acosWANAtmRmRxCells=acosWANAtmRmRxCells, acosDeviceIpSlotIndex=acosDeviceIpSlotIndex, acosWANTotalTxOctets=acosWANTotalTxOctets, acosDeviceRipPortIndex=acosDeviceRipPortIndex, acosManagerIpAddress=acosManagerIpAddress, acosSDSL=acosSDSL, acosSDSLSlotIndex=acosSDSLSlotIndex, acosNatPortHigh=acosNatPortHigh, acosT1LineSlotIndex=acosT1LineSlotIndex, acosTftpClient=acosTftpClient, acosWANConfigEntry=acosWANConfigEntry, acosDeviceIpPortIndex=acosDeviceIpPortIndex, acosWANTxGlitchErrors=acosWANTxGlitchErrors, acosBridgeEntry=acosBridgeEntry, acosDeviceRipPoisonedReverse=acosDeviceRipPoisonedReverse, acosDS1AggChanConfigEntry=acosDS1AggChanConfigEntry, acosMemoryTypeIndex=acosMemoryTypeIndex, acosDevices=acosDevices, acosWANAtmOamTxCells=acosWANAtmOamTxCells, acosBridgeInterfaceIndex=acosBridgeInterfaceIndex, acosWAN=acosWAN, acosTftpFailedTrap=acosTftpFailedTrap, acosCardRemovedTrap=acosCardRemovedTrap, acosDeviceIpAddress=acosDeviceIpAddress, acosDhcpSubnet=acosDhcpSubnet, acosDhcpClientGateway=acosDhcpClientGateway, acosWANSlotDeviceIndex=acosWANSlotDeviceIndex, acosDhcpClientDnsServer=acosDhcpClientDnsServer, acosTftpInitiatedTrap=acosTftpInitiatedTrap, acosDS1=acosDS1, acosWANRxAbortErrors=acosWANRxAbortErrors, acosTftpServerAddress=acosTftpServerAddress)
