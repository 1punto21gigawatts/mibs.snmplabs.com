#
# PySNMP MIB module Wellfleet-OC12-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-OC12-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, TimeTicks, NotificationType, IpAddress, Unsigned32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ModuleIdentity, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Unsigned32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ModuleIdentity", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSonetGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSonetGroup")
wfOc12ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20), )
if mibBuilder.loadTexts: wfOc12ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigTable.setDescription('Statistics for the SONET medium table')
wfOc12ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1), ).setIndexNames((0, "Wellfleet-OC12-MIB", "wfOc12ConfigIndex"))
if mibBuilder.loadTexts: wfOc12ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigEntry.setDescription('An entry in the medium table')
wfOc12ConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc12ConfigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigDelete.setDescription('Create/Delete parameter')
wfOc12ConfigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc12ConfigDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigDisable.setDescription('Create/Delete parameter')
wfOc12ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc12ConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigIndex.setDescription('Index for this physical Sonet interface.')
wfOc12ConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc12ConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigIfIndex.setDescription('this is value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
wfOc12ConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("los", 3), ("lof", 4), ("ais", 5), ("rdi", 6), ("loopback", 7), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc12ConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigState.setDescription('State of the OC12 Port.')
wfOc12ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 128, 512))).clone(namedValues=NamedValues(("noalarm", 1), ("los", 2), ("lof", 4), ("ais", 8), ("rdi", 16), ("loopback", 128), ("otherfailure", 512))).clone('noalarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc12ConfigLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigLineStatus.setDescription('the status of the OC12')
wfOc12ConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc12ConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state.')
wfOc12ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc12ConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigType.setDescription('This variable identifies whether a SONET or a SDH signal is used across this interface.')
wfOc12ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc12ConfigLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigLineCoding.setDescription('This variable describes the line coding for this interface.')
wfOc12ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("shortsinglemode", 2), ("longsinglemode", 3), ("multimode", 4), ("coax", 5), ("utp", 6))).clone('shortsinglemode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc12ConfigLineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigLineType.setDescription('This variable describes the line type for this interface.')
wfOc12ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("payloadloop", 2), ("lineloop", 3))).clone('noloop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc12ConfigLoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigLoopbackConfig.setDescription('the loopback configuration of the OC12 interface')
wfOc12ConfigManagerMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frac", 1), ("clear", 2))).clone('frac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc12ConfigManagerMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc12ConfigManagerMethod.setDescription('This attribute has no affect on the Hardware configuration. This attribute is purely for any Network Management Tool to determine whether it configured the OC12 as Fractional or Clear.')
mibBuilder.exportSymbols("Wellfleet-OC12-MIB", wfOc12ConfigIndex=wfOc12ConfigIndex, wfOc12ConfigLineCoding=wfOc12ConfigLineCoding, wfOc12ConfigIfIndex=wfOc12ConfigIfIndex, wfOc12ConfigLineStatus=wfOc12ConfigLineStatus, wfOc12ConfigLineType=wfOc12ConfigLineType, wfOc12ConfigDelete=wfOc12ConfigDelete, wfOc12ConfigManagerMethod=wfOc12ConfigManagerMethod, wfOc12ConfigType=wfOc12ConfigType, wfOc12ConfigLoopbackConfig=wfOc12ConfigLoopbackConfig, wfOc12ConfigLastChange=wfOc12ConfigLastChange, wfOc12ConfigState=wfOc12ConfigState, wfOc12ConfigDisable=wfOc12ConfigDisable, wfOc12ConfigTable=wfOc12ConfigTable, wfOc12ConfigEntry=wfOc12ConfigEntry)
