#
# PySNMP MIB module CISCO-GSLB-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GSLB-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
CiscoGslbNodeServices, CiscoGslbPeerStatus = mibBuilder.importSymbols("CISCO-GSLB-TC-MIB", "CiscoGslbNodeServices", "CiscoGslbPeerStatus")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressDNS, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressDNS", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Bits, Counter64, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, Gauge32, Integer32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Gauge32", "Integer32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32")
DisplayString, TruthValue, RowStatus, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention", "StorageType")
ciscoGslbSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 589))
ciscoGslbSystemMIB.setRevisions(('2011-06-06 00:00', '2006-12-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGslbSystemMIB.setRevisionsDescriptions(('-Deprecated cgsRegionTable and replaced it with cgsRegionIdTable -Deprecated ciscoGslbSystemMIBCompliance and replaced it with ciscoGslbSystemMIBComplianceRev1 -Deprecated ciscoGslbSystemResourceGroup and replaced it with ciscoGslbSystemResourceLocationGroup and ciscoGslbSystemResourceRegionGroup', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGslbSystemMIB.setLastUpdated('201106060000Z')
if mibBuilder.loadTexts: ciscoGslbSystemMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGslbSystemMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-slb@cisco.com')
if mibBuilder.loadTexts: ciscoGslbSystemMIB.setDescription("This MIB module defines objects for network and system information of Global Server Load Balancer(GSLB) as a network device. A GSLB device is used to allocate the least-loaded and proximate resource to the requester. The MIB objects define information about GLSB status, GSLB's peers (other GSLB devices available on its network with which it interacts) information & status, GSLB's proximity information related statistics, etc. Further it defines related notifications. Acronyms and their description: DNS : Domain Name Service (RFC1035). D-proxy : Local DNS name server of the client. Proximity : Refers to the distance or delay, in terms of network topology and not geographic distance, between the requesting client's D-proxy and the resources corresponding to that request. Proximity : To respond to DNS requests with the most probing proximate answers, the GSLB device communicates with a probing device located in each proximity zone to gather round-trip time (RTT) metric information measured between the requesting client's D-proxy and the zone. The GSLB device then directs client requests to an available resource with the lowest RTT value. Probed : This is the device to which the GSLB device device sends a proximity probe. This is done to learn the proximity of the device. DRP : Director Response Protocol (DRP) is a simple User Datagram Protocol (UDP) based application developed by Cisco Systems, Inc. DRP enables Cisco Distributed-Director product to perform global load distribution and content routing in a sophisticated manner that accounts for server availability, relative client-to-server topological proximities, and client-to-server link latency to determine the best server. Using routing table intelligence in the network infrastructure, Distributed-Director transparently redirects end-user service requests to the closest server, as determined by client-to-server topological proximity or client-to-server link latency, resulting in increased access performance seen by the end user. Region : Higher-level geographical groupings that may contain one or more locations. Each location should be assigned to a region. Location : Grouping for devices with common geographical attributes. A location is assigned to a region. A location is also assigned to a zone, which is used for proximity probing. Zone : A network can be logically partioned into zones based on the arrangement of devices and network partion characteristics. A zone can be geographically related to data centers in a continent, a country, or a major city. All devices, such as web servers in a data center, that are located in the same zone have the same proximity value when communicating with other areas of the Internet. Within each zone, there is an active probing device that is configured to accept probing instructions from any GSLB device. Probing here refers to the process of measuring RTT from one probing device to a requesting D-proxy.")
ciscoGslbSystemMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 0))
ciscoGslbSystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1))
ciscoGslbSystemMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 2))
cgsNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 1))
cgsNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 2))
cgsGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3))
cgsPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4))
cgsProxZoneStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5))
cgsResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6))
cgsNodeService = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3, 1), CiscoGslbNodeServices()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgsNodeService.setStatus('current')
if mibBuilder.loadTexts: cgsNodeService.setDescription('This object specifies the type of role of the GSLB device amongst its peers.')
cgsNodeCommIfName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgsNodeCommIfName.setStatus('current')
if mibBuilder.loadTexts: cgsNodeCommIfName.setDescription('This object specifies the textual name of the interface used by the GSLB device to communicate with peer GSLB devices. The value of this object must be same as the ifName reported by IF-MIB for the interface instance.')
cgsNodeCommIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsNodeCommIfIndex.setStatus('current')
if mibBuilder.loadTexts: cgsNodeCommIfIndex.setDescription('This object is used as an identifier for the interface used by the GSLB device to communicate with peer GSLB devices. The value of this object must be same as the ifIndex reported by IF-MIB for the interface identified by cgsNodeCommIfName.')
cgsNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3, 4), CiscoGslbPeerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsNodeStatus.setStatus('current')
if mibBuilder.loadTexts: cgsNodeStatus.setDescription('This object specifies the status of the GSLB device as known on the GSLB network of peers.')
cgsNodeLocation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgsNodeLocation.setStatus('current')
if mibBuilder.loadTexts: cgsNodeLocation.setDescription('This object specifies the administratively assigned location for the GSLB device.')
cgsNodeRegion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsNodeRegion.setStatus('current')
if mibBuilder.loadTexts: cgsNodeRegion.setDescription('This object specifies the administratively assigned region for the GSLB device. This value corresponds to an instance of cgsLocationRegion from cgsLocationTable.')
cgsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1), )
if mibBuilder.loadTexts: cgsPeerTable.setStatus('current')
if mibBuilder.loadTexts: cgsPeerTable.setDescription('This table lists the information on peers in the GSLB network of devices.')
cgsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-GSLB-SYSTEM-MIB", "cgsPeerAddressType"), (0, "CISCO-GSLB-SYSTEM-MIB", "cgsPeerAddress"))
if mibBuilder.loadTexts: cgsPeerEntry.setStatus('current')
if mibBuilder.loadTexts: cgsPeerEntry.setDescription('An entry in cgsPeerEntryTable. Each entry contains information on the GSLB peers. Entries are added/deleted when a GSLB peer device is added/deleted in GSLB network of peers.')
cgsPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cgsPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: cgsPeerAddressType.setDescription('This object specifies the IP address type of the GSLB peer.')
cgsPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: cgsPeerAddress.setStatus('current')
if mibBuilder.loadTexts: cgsPeerAddress.setDescription('This object specifies the GSLB peer IP address. The type of IP address is identified by cgsPeerAddressType.')
cgsPeerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgsPeerLocation.setStatus('current')
if mibBuilder.loadTexts: cgsPeerLocation.setDescription('This object specifies the administratively assigned location of the GSLB peer. Its value must be same as the value configured in cgsLocationTable.')
cgsPeerDnsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 4), InetAddressDNS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsPeerDnsName.setStatus('current')
if mibBuilder.loadTexts: cgsPeerDnsName.setDescription('This object specifies the host name assigned uniquely to a GSLB peer. Its value is same as the value of sysName of the GSLB peer.')
cgsPeerService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 5), CiscoGslbNodeServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsPeerService.setStatus('current')
if mibBuilder.loadTexts: cgsPeerService.setDescription('This object specifies the type of role the GSLB peer has in a GSLB network of peers. Its value is same as value of cgsNodeService of the GSLB peer.')
cgsPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 6), CiscoGslbPeerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsPeerStatus.setStatus('current')
if mibBuilder.loadTexts: cgsPeerStatus.setDescription('This object specifies the status of GSLB peer as known to the reporting GSLB device.')
cgsPeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 4, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsPeerVersion.setStatus('current')
if mibBuilder.loadTexts: cgsPeerVersion.setDescription('This object specifies the software version installed on the GSLB peer.')
cgsProxZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1), )
if mibBuilder.loadTexts: cgsProxZoneTable.setStatus('current')
if mibBuilder.loadTexts: cgsProxZoneTable.setDescription('This table is used for configuring proximity zones. It consists a list of proximity probing statistics for each configured proximity zone.')
cgsProxZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-GSLB-SYSTEM-MIB", "cgsProxZoneName"))
if mibBuilder.loadTexts: cgsProxZoneEntry.setStatus('current')
if mibBuilder.loadTexts: cgsProxZoneEntry.setDescription('An entry in cgsProxZoneTable. Each entry contains information on proximity zones and probing statistics. Entries can be added/deleted/modified by administrator action.')
cgsProxZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgsProxZoneName.setStatus('current')
if mibBuilder.loadTexts: cgsProxZoneName.setDescription('This object specifies a name given uniquely for a proximity zone.')
cgsProxPrimaryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsProxPrimaryAddressType.setStatus('current')
if mibBuilder.loadTexts: cgsProxPrimaryAddressType.setDescription('This object specifies the IP address type of the primary device being probed in the proximity zone.')
cgsProxPrimaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsProxPrimaryAddress.setStatus('current')
if mibBuilder.loadTexts: cgsProxPrimaryAddress.setDescription('This object specifies the IP address of the primary device being probed in the proximity zone. The type of IP address is identified by cgsProxPrimaryAddressType. This object is mandatory for row creation.')
cgsProxSecondaryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsProxSecondaryAddressType.setStatus('current')
if mibBuilder.loadTexts: cgsProxSecondaryAddressType.setDescription('This object specifies the IP address type of the secondary device that may be probed in the proximity zone.')
cgsProxSecondaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsProxSecondaryAddress.setStatus('current')
if mibBuilder.loadTexts: cgsProxSecondaryAddress.setDescription('This object specifies the IP address of the secondary device that may be probed for proximity in the proximity zone. The type of IP address is identified by cgsProxSecondaryAddressType.')
cgsProxEchoSentReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 6), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxEchoSentReqs.setStatus('current')
if mibBuilder.loadTexts: cgsProxEchoSentReqs.setDescription('This object indicates the number of DRP echo requests sent by GSLB to all probed devices.')
cgsProxEchoRcvdResps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 7), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxEchoRcvdResps.setStatus('current')
if mibBuilder.loadTexts: cgsProxEchoRcvdResps.setDescription('This object indicates the number of DRP echo responses received by GLSB from all probed devices.')
cgsProxSentMeasureReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 8), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxSentMeasureReqs.setStatus('current')
if mibBuilder.loadTexts: cgsProxSentMeasureReqs.setDescription('This object indicates the number of DRP measured requests sent by GSLB to all probed devices.')
cgsProxRcvdMeasureResps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 9), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxRcvdMeasureResps.setStatus('current')
if mibBuilder.loadTexts: cgsProxRcvdMeasureResps.setDescription('This object indicates the number of DRP measured responses received by GSLB from all probed devices.')
cgsProxTotalSentReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 10), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxTotalSentReqs.setStatus('current')
if mibBuilder.loadTexts: cgsProxTotalSentReqs.setDescription('This object indicates the total of DRP requests sent by GSLB to probed device in the proximity zone.')
cgsProxTotalRcvdResps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 11), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxTotalRcvdResps.setStatus('current')
if mibBuilder.loadTexts: cgsProxTotalRcvdResps.setDescription('This object indicates the total of DRP responses received by GSLB from all probed devices in the proximity zone.')
cgsProxSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 12), Unsigned32()).setUnits('rate per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxSendRate.setStatus('current')
if mibBuilder.loadTexts: cgsProxSendRate.setDescription('This object indicates the current transmitted DRP request rate per second.')
cgsProxRcvdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 13), Unsigned32()).setUnits('rate per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxRcvdRate.setStatus('current')
if mibBuilder.loadTexts: cgsProxRcvdRate.setDescription('This object indicates the current received DRP response rate per second.')
cgsProxPeakSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 14), Unsigned32()).setUnits('rate per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxPeakSendRate.setStatus('current')
if mibBuilder.loadTexts: cgsProxPeakSendRate.setDescription('This object indicates the peak transmitted DRP request rate per second.')
cgsProxPeakRcvdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 15), Unsigned32()).setUnits('rate per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsProxPeakRcvdRate.setStatus('current')
if mibBuilder.loadTexts: cgsProxPeakRcvdRate.setDescription('This object indicates the peak received DRP response rate per second.')
cgsProxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 16), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsProxStorageType.setStatus('current')
if mibBuilder.loadTexts: cgsProxStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgsProxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 5, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsProxRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgsProxRowStatus.setDescription('This object is used to create/delete an entry in the cgsProxZoneTable.')
cgsRegionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 1), )
if mibBuilder.loadTexts: cgsRegionTable.setStatus('deprecated')
if mibBuilder.loadTexts: cgsRegionTable.setDescription('This table is used to configure regions on the device. It consists a list of regions configured on the GSLB device.')
cgsRegionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-GSLB-SYSTEM-MIB", "cgsRegionName"))
if mibBuilder.loadTexts: cgsRegionEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cgsRegionEntry.setDescription('An entry in cgsRegionTable. Each entry contains the information about a region. Entries can be added/deleted/modified by administrator action.')
cgsRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgsRegionName.setStatus('deprecated')
if mibBuilder.loadTexts: cgsRegionName.setDescription('This object specifies the name given uniquely for a region.')
cgsRegionComments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionComments.setStatus('deprecated')
if mibBuilder.loadTexts: cgsRegionComments.setDescription('This object specifies the comments associated with the region.')
cgsRegionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionStorageType.setStatus('deprecated')
if mibBuilder.loadTexts: cgsRegionStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgsRegionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cgsRegionRowStatus.setDescription('This object is used to create/delete an entry in the cgsRegionTable')
cgsLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2), )
if mibBuilder.loadTexts: cgsLocationTable.setStatus('current')
if mibBuilder.loadTexts: cgsLocationTable.setDescription('This table is used to configure locations on the device. It consists a list of locations configured on the GSLB device.')
cgsLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-GSLB-SYSTEM-MIB", "cgsLocationName"))
if mibBuilder.loadTexts: cgsLocationEntry.setStatus('current')
if mibBuilder.loadTexts: cgsLocationEntry.setDescription('An entry in cgsLocationTable. Each entry contains the information about a location. Entries can be added/deleted/modified by administrator action.')
cgsLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgsLocationName.setStatus('current')
if mibBuilder.loadTexts: cgsLocationName.setDescription('This object specifies the name given uniquely for a location.')
cgsLocationRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsLocationRegion.setStatus('current')
if mibBuilder.loadTexts: cgsLocationRegion.setDescription('This object specifies a region to which this location instance is associated. This object is mandatory for a row creation.')
cgsLocationZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsLocationZone.setStatus('current')
if mibBuilder.loadTexts: cgsLocationZone.setDescription('This object specifies a zone to which this location instance is associated.')
cgsLocationComments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsLocationComments.setStatus('current')
if mibBuilder.loadTexts: cgsLocationComments.setDescription('This object specifies the comments associated with the location.')
cgsLocationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsLocationStorageType.setStatus('current')
if mibBuilder.loadTexts: cgsLocationStorageType.setDescription('This object specifies the storage type for this conceptual row')
cgsLocationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsLocationRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgsLocationRowStatus.setDescription('This object is used to create/delete an entry in the cgsLocationTable')
cgsRegionIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3), )
if mibBuilder.loadTexts: cgsRegionIdTable.setStatus('current')
if mibBuilder.loadTexts: cgsRegionIdTable.setDescription('This table is used to configure regions on the device. It consists a list of regions configured on the GSLB device.')
cgsRegionIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-GSLB-SYSTEM-MIB", "cgsRegionId"))
if mibBuilder.loadTexts: cgsRegionIdEntry.setStatus('current')
if mibBuilder.loadTexts: cgsRegionIdEntry.setDescription('An entry in cgsRegionIdTable.Each entry contains the information about a region. Entries can be added/deleted/modified by administrator action.')
cgsRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgsRegionId.setStatus('current')
if mibBuilder.loadTexts: cgsRegionId.setDescription('This object uniquely identifies a region.')
cgsRegionIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionIdName.setStatus('current')
if mibBuilder.loadTexts: cgsRegionIdName.setDescription('This object specifies the name given uniquely for a region.')
cgsRegionIdComments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionIdComments.setStatus('current')
if mibBuilder.loadTexts: cgsRegionIdComments.setDescription('This object specifies the comments associated with the region.')
cgsReqCountPerRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 4), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsReqCountPerRegionId.setStatus('current')
if mibBuilder.loadTexts: cgsReqCountPerRegionId.setDescription('This object indicates the total number of DNS requests received from this region since the GSLB device was last started.')
cgsReqCountRatePerRegionId1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 5), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId1Min.setStatus('current')
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId1Min.setDescription('This object indicates the average per second DNS requests received from this region, calculated during the last one minute interval.')
cgsReqCountRatePerRegionId5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 6), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId5Min.setStatus('current')
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId5Min.setDescription('This object indicates the average per second DNS requests received from this region , calculated during the last 5 minute interval.')
cgsReqCountRatePerRegionId30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 7), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId30Min.setStatus('current')
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId30Min.setDescription('This object indicates the average per second DNS requests received from this region , calculated during the last 30 minute interval.')
cgsReqCountRatePerRegionId4Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 8), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId4Hr.setStatus('current')
if mibBuilder.loadTexts: cgsReqCountRatePerRegionId4Hr.setDescription('This object indicates the average per second DNS requests received from this region , calculated during the last 4 hour interval.')
cgsAnswerCountPerRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 9), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsAnswerCountPerRegionId.setStatus('current')
if mibBuilder.loadTexts: cgsAnswerCountPerRegionId.setDescription('This object indicates the total number of times answers in this region are used in replying for DNS queries, since the GSLB device was last started.')
cgsAnswerCountRatePerRegionId1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 10), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId1Min.setStatus('current')
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId1Min.setDescription('This object indicates the average per second hit count for answers in this region, calculated during the last 1 minute interval.')
cgsAnswerCountRatePerRegionId5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 11), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId5Min.setStatus('current')
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId5Min.setDescription('This object indicates the average per second hit count for answers in this region, calculated during the last 5 minute interval.')
cgsAnswerCountRatePerRegionId30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 12), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId30Min.setStatus('current')
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId30Min.setDescription('This object indicates the average per second hit count for answers in this region, calculated during the last 30 minute interval.')
cgsAnswerCountRatePerRegionId4Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 13), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId4Hr.setStatus('current')
if mibBuilder.loadTexts: cgsAnswerCountRatePerRegionId4Hr.setDescription('This object indicates the average per second hit count for answers in this region, calculated during the last 4 hour interval.')
cgsUnAnswerCountPerRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 14), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsUnAnswerCountPerRegionId.setStatus('current')
if mibBuilder.loadTexts: cgsUnAnswerCountPerRegionId.setDescription('This object indicates the total number of times DNS requests from this region have not been answered, since the GSLB device was last started.')
cgsUnAnswerCountRatePerRegionId1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 15), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId1Min.setStatus('current')
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId1Min.setDescription('This object indicates the average per second unanswered DNS requests from this region, calculated during the last one minute.')
cgsUnAnswerCountRatePerRegionId5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 16), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId5Min.setStatus('current')
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId5Min.setDescription('This object indicates the average per second unanswered DNS requests from this region, calculated during the last 5 minute interval.')
cgsUnAnswerCountRatePerRegionId30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 17), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId30Min.setStatus('current')
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId30Min.setDescription('This object indicates the average per second unanswered DNS requests from this region, calculated during the last 30 minute interval.')
cgsUnAnswerCountRatePerRegionId4Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 18), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId4Hr.setStatus('current')
if mibBuilder.loadTexts: cgsUnAnswerCountRatePerRegionId4Hr.setDescription('This object indicates the average per second unanswered DNS requests from this region, calculated during the last 4 hour interval.')
cgsRegionIdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 19), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionIdStorageType.setStatus('current')
if mibBuilder.loadTexts: cgsRegionIdStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgsRegionIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 6, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsRegionIdRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgsRegionIdRowStatus.setDescription("This object is used to create/delete an entry in the cgsRegionIdTable. Users can modify all writable objects in this row when this object value is 'active'. The cgsRegionIdName object need to be set to valid value by the users before user can activate the row.")
cgsPeerEventNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgsPeerEventNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cgsPeerEventNotifEnable.setDescription('This object defines the administrative state of sending notifications to signal a GSLB peer status change.')
cgsPeerPrevStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 589, 1, 2, 1), CiscoGslbPeerStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgsPeerPrevStatus.setStatus('current')
if mibBuilder.loadTexts: cgsPeerPrevStatus.setDescription('This object is used for sending the value of cgsPeerStatus before transitioning to new state.')
ciscoGslbSystemPeerEventStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 589, 0, 1)).setObjects(("SNMPv2-MIB", "sysName"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerDnsName"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerService"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerPrevStatus"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerStatus"))
if mibBuilder.loadTexts: ciscoGslbSystemPeerEventStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemPeerEventStatus.setDescription("This notification is sent when the value of cgsPeerStatus changes from one state to another. This notification is reported only by a GSLB device with cgsNodeService value of 'primary'.")
ciscoGslbSystemMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 1))
ciscoGslbSystemMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2))
ciscoGslbSystemMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 1, 1)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemGeneralGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemPeerGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemProxZoneGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemResourceGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemNotifControlGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemNotifObjectsGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemMIBCompliance = ciscoGslbSystemMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGslbSystemMIBCompliance.setDescription('Compliance statement for entities which implement the Cisco GSLB System MIB')
ciscoGslbSystemMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 1, 2)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemGeneralGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemPeerGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemProxZoneGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemNotifControlGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemNotifObjectsGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemNotifGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemResourceLocationGroup"), ("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemResourceRegionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemMIBComplianceRev1 = ciscoGslbSystemMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemMIBComplianceRev1.setDescription('Compliance statement for entities which implement the Cisco GSLB System MIB')
ciscoGslbSystemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 1)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsNodeService"), ("CISCO-GSLB-SYSTEM-MIB", "cgsNodeCommIfName"), ("CISCO-GSLB-SYSTEM-MIB", "cgsNodeCommIfIndex"), ("CISCO-GSLB-SYSTEM-MIB", "cgsNodeStatus"), ("CISCO-GSLB-SYSTEM-MIB", "cgsNodeLocation"), ("CISCO-GSLB-SYSTEM-MIB", "cgsNodeRegion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemGeneralGroup = ciscoGslbSystemGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemGeneralGroup.setDescription('A collection of objects providing general GSLB status.')
ciscoGslbSystemPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 2)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsPeerLocation"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerDnsName"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerService"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerStatus"), ("CISCO-GSLB-SYSTEM-MIB", "cgsPeerVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemPeerGroup = ciscoGslbSystemPeerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemPeerGroup.setDescription('A collection of objects providing GSLB peer status.')
ciscoGslbSystemProxZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 3)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsProxPrimaryAddressType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxPrimaryAddress"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxSecondaryAddressType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxSecondaryAddress"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxEchoSentReqs"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxEchoRcvdResps"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxSentMeasureReqs"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxRcvdMeasureResps"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxTotalSentReqs"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxTotalRcvdResps"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxSendRate"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxRcvdRate"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxPeakSendRate"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxPeakRcvdRate"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxStorageType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsProxRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemProxZoneGroup = ciscoGslbSystemProxZoneGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemProxZoneGroup.setDescription('A collection of objects providing GSLB proximity zone statistics.')
ciscoGslbSystemResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 4)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsRegionComments"), ("CISCO-GSLB-SYSTEM-MIB", "cgsRegionStorageType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsRegionRowStatus"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationRegion"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationZone"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationComments"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationStorageType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemResourceGroup = ciscoGslbSystemResourceGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGslbSystemResourceGroup.setDescription('A collection of objects providing GSLB resource configurations.')
ciscoGslbSystemNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 5)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsPeerEventNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemNotifControlGroup = ciscoGslbSystemNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemNotifControlGroup.setDescription('This group of objects controls the sending of notifications defined in this MIB module.')
ciscoGslbSystemNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 6)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsPeerPrevStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemNotifObjectsGroup = ciscoGslbSystemNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemNotifObjectsGroup.setDescription('A collection of objects that convey information for notifications defined in this MIB module.')
ciscoGslbSystemNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 7)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "ciscoGslbSystemPeerEventStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemNotifGroup = ciscoGslbSystemNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemNotifGroup.setDescription('A collection of objects providing GSLB System events.')
ciscoGslbSystemResourceLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 8)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsLocationRegion"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationZone"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationComments"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationStorageType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsLocationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemResourceLocationGroup = ciscoGslbSystemResourceLocationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemResourceLocationGroup.setDescription('A collection of objects providing GSLB location resource configurations.')
ciscoGslbSystemResourceRegionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 589, 2, 2, 9)).setObjects(("CISCO-GSLB-SYSTEM-MIB", "cgsRegionIdName"), ("CISCO-GSLB-SYSTEM-MIB", "cgsRegionIdComments"), ("CISCO-GSLB-SYSTEM-MIB", "cgsReqCountPerRegionId"), ("CISCO-GSLB-SYSTEM-MIB", "cgsReqCountRatePerRegionId1Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsReqCountRatePerRegionId5Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsReqCountRatePerRegionId30Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsReqCountRatePerRegionId4Hr"), ("CISCO-GSLB-SYSTEM-MIB", "cgsAnswerCountPerRegionId"), ("CISCO-GSLB-SYSTEM-MIB", "cgsAnswerCountRatePerRegionId1Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsAnswerCountRatePerRegionId5Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsAnswerCountRatePerRegionId30Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsAnswerCountRatePerRegionId4Hr"), ("CISCO-GSLB-SYSTEM-MIB", "cgsUnAnswerCountPerRegionId"), ("CISCO-GSLB-SYSTEM-MIB", "cgsUnAnswerCountRatePerRegionId1Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsUnAnswerCountRatePerRegionId5Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsUnAnswerCountRatePerRegionId30Min"), ("CISCO-GSLB-SYSTEM-MIB", "cgsUnAnswerCountRatePerRegionId4Hr"), ("CISCO-GSLB-SYSTEM-MIB", "cgsRegionIdStorageType"), ("CISCO-GSLB-SYSTEM-MIB", "cgsRegionIdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbSystemResourceRegionGroup = ciscoGslbSystemResourceRegionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbSystemResourceRegionGroup.setDescription('A collection of objects providing GSLB region resource configurations.')
mibBuilder.exportSymbols("CISCO-GSLB-SYSTEM-MIB", cgsNodeLocation=cgsNodeLocation, cgsPeerAddress=cgsPeerAddress, cgsProxZoneStats=cgsProxZoneStats, ciscoGslbSystemMIBComplianceRev1=ciscoGslbSystemMIBComplianceRev1, cgsNotifObjects=cgsNotifObjects, cgsProxZoneName=cgsProxZoneName, cgsLocationStorageType=cgsLocationStorageType, cgsProxTotalRcvdResps=cgsProxTotalRcvdResps, cgsRegionRowStatus=cgsRegionRowStatus, cgsAnswerCountRatePerRegionId4Hr=cgsAnswerCountRatePerRegionId4Hr, cgsNodeRegion=cgsNodeRegion, ciscoGslbSystemMIBGroups=ciscoGslbSystemMIBGroups, ciscoGslbSystemMIBCompliances=ciscoGslbSystemMIBCompliances, cgsProxSentMeasureReqs=cgsProxSentMeasureReqs, ciscoGslbSystemMIBCompliance=ciscoGslbSystemMIBCompliance, cgsNodeStatus=cgsNodeStatus, ciscoGslbSystemProxZoneGroup=ciscoGslbSystemProxZoneGroup, ciscoGslbSystemGeneralGroup=ciscoGslbSystemGeneralGroup, cgsReqCountRatePerRegionId5Min=cgsReqCountRatePerRegionId5Min, cgsNodeCommIfIndex=cgsNodeCommIfIndex, ciscoGslbSystemMIB=ciscoGslbSystemMIB, cgsLocationName=cgsLocationName, cgsAnswerCountPerRegionId=cgsAnswerCountPerRegionId, cgsProxZoneTable=cgsProxZoneTable, cgsReqCountRatePerRegionId4Hr=cgsReqCountRatePerRegionId4Hr, cgsNotifControl=cgsNotifControl, cgsAnswerCountRatePerRegionId5Min=cgsAnswerCountRatePerRegionId5Min, cgsNodeCommIfName=cgsNodeCommIfName, cgsPeerLocation=cgsPeerLocation, ciscoGslbSystemMIBObjects=ciscoGslbSystemMIBObjects, cgsReqCountRatePerRegionId30Min=cgsReqCountRatePerRegionId30Min, ciscoGslbSystemResourceRegionGroup=ciscoGslbSystemResourceRegionGroup, cgsLocationComments=cgsLocationComments, cgsResources=cgsResources, cgsUnAnswerCountRatePerRegionId30Min=cgsUnAnswerCountRatePerRegionId30Min, cgsReqCountRatePerRegionId1Min=cgsReqCountRatePerRegionId1Min, cgsRegionStorageType=cgsRegionStorageType, ciscoGslbSystemNotifObjectsGroup=ciscoGslbSystemNotifObjectsGroup, ciscoGslbSystemMIBNotifs=ciscoGslbSystemMIBNotifs, ciscoGslbSystemMIBConform=ciscoGslbSystemMIBConform, cgsPeerDnsName=cgsPeerDnsName, cgsLocationZone=cgsLocationZone, cgsUnAnswerCountRatePerRegionId4Hr=cgsUnAnswerCountRatePerRegionId4Hr, cgsProxZoneEntry=cgsProxZoneEntry, cgsPeer=cgsPeer, cgsLocationRowStatus=cgsLocationRowStatus, cgsPeerAddressType=cgsPeerAddressType, cgsPeerService=cgsPeerService, cgsGeneral=cgsGeneral, cgsProxPeakRcvdRate=cgsProxPeakRcvdRate, cgsLocationEntry=cgsLocationEntry, cgsUnAnswerCountRatePerRegionId5Min=cgsUnAnswerCountRatePerRegionId5Min, cgsLocationTable=cgsLocationTable, cgsRegionIdStorageType=cgsRegionIdStorageType, cgsUnAnswerCountRatePerRegionId1Min=cgsUnAnswerCountRatePerRegionId1Min, cgsProxSecondaryAddressType=cgsProxSecondaryAddressType, ciscoGslbSystemPeerGroup=ciscoGslbSystemPeerGroup, cgsProxEchoRcvdResps=cgsProxEchoRcvdResps, cgsRegionName=cgsRegionName, cgsProxPeakSendRate=cgsProxPeakSendRate, cgsProxRcvdRate=cgsProxRcvdRate, ciscoGslbSystemNotifGroup=ciscoGslbSystemNotifGroup, cgsPeerPrevStatus=cgsPeerPrevStatus, cgsPeerEventNotifEnable=cgsPeerEventNotifEnable, cgsProxStorageType=cgsProxStorageType, cgsRegionTable=cgsRegionTable, cgsProxEchoSentReqs=cgsProxEchoSentReqs, cgsPeerStatus=cgsPeerStatus, cgsPeerVersion=cgsPeerVersion, cgsRegionEntry=cgsRegionEntry, cgsRegionIdTable=cgsRegionIdTable, cgsReqCountPerRegionId=cgsReqCountPerRegionId, cgsRegionIdEntry=cgsRegionIdEntry, cgsLocationRegion=cgsLocationRegion, cgsPeerEntry=cgsPeerEntry, cgsProxRowStatus=cgsProxRowStatus, cgsRegionIdRowStatus=cgsRegionIdRowStatus, ciscoGslbSystemPeerEventStatus=ciscoGslbSystemPeerEventStatus, cgsUnAnswerCountPerRegionId=cgsUnAnswerCountPerRegionId, ciscoGslbSystemResourceLocationGroup=ciscoGslbSystemResourceLocationGroup, cgsAnswerCountRatePerRegionId1Min=cgsAnswerCountRatePerRegionId1Min, cgsProxTotalSentReqs=cgsProxTotalSentReqs, cgsProxPrimaryAddressType=cgsProxPrimaryAddressType, cgsProxSendRate=cgsProxSendRate, ciscoGslbSystemResourceGroup=ciscoGslbSystemResourceGroup, ciscoGslbSystemNotifControlGroup=ciscoGslbSystemNotifControlGroup, cgsProxRcvdMeasureResps=cgsProxRcvdMeasureResps, cgsRegionIdName=cgsRegionIdName, cgsRegionComments=cgsRegionComments, cgsRegionIdComments=cgsRegionIdComments, PYSNMP_MODULE_ID=ciscoGslbSystemMIB, cgsProxPrimaryAddress=cgsProxPrimaryAddress, cgsProxSecondaryAddress=cgsProxSecondaryAddress, cgsRegionId=cgsRegionId, cgsPeerTable=cgsPeerTable, cgsNodeService=cgsNodeService, cgsAnswerCountRatePerRegionId30Min=cgsAnswerCountRatePerRegionId30Min)
