#
# PySNMP MIB module CISCO-REMOTE-ACCESS-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-REMOTE-ACCESS-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, Unsigned32, Counter64, ModuleIdentity, MibIdentifier, zeroDotZero, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, IpAddress, TimeTicks, iso, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Counter64", "ModuleIdentity", "MibIdentifier", "zeroDotZero", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "IpAddress", "TimeTicks", "iso", "NotificationType", "ObjectIdentity")
TimeStamp, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue")
ciscoRemoteAccessMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 392))
ciscoRemoteAccessMonitorMIB.setRevisions(('2008-08-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setRevisionsDescriptions(('Added crasEmailNumSessions crasEmailCumulateSessions crasEmailPeakConcurrentSessions crasIPSecNumSessions crasIPSecCumulateSessions crasIPSecPeakConcurrentSessions crasL2LNumSessions crasL2LCumulateSessions crasL2LPeakConcurrentSessions crasLBNumSessions crasLBCumulateSessions crasLBPeakConcurrentSessions crasSVCNumSessions crasSVCCumulateSessions crasSVCPeakConcurrentSessions crasWebvpnNumSessions crasWebvpnCumulateSessions crasWebvpnPeakConcurrentSessions objects ',))
if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setLastUpdated('200402030000Z')
if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setDescription(' Acronyms and Definitions The following acronyms and terms are used in this document: IPSec: Secure IP Protocol VPN: Virtual Private Network RAS: Remote Access Service ISP: Internet Service Provider. LAN: Local Area Network Group: A collection of remote access users grouped and managed together as a single entity for administrative convenience. Session: A Remote Access Session. SVC: SSL VPN Client Webvpn: VPN connection established using web browser. Overview of the MIB This is a MIB Module for monitoring the structures in Virtual Private Networks based remote access networks. The MIB seeks to create a common model of Remote Access across implementations of the service on layer 2 (PPTP, L2TP, L2F), layer 3 (IPsec) and layer 4 (SSL) virtual private networks. The MIB defines counters and objects of interest to performance/fault monitoring in a way which is independent of the technology of the remote access implementation. MIB contains eight major groups of objects which are used to manage Remote Access connections: a) Remote Access capacity group This section defines metrics to gauge the limits of resources on this device which are critical to RAS service. b) Remote Access resource usage group This section defines metrics to gauge the usage of resources on this device which are critical to RAS service service. c) Current activity and performance of RAS service This section defines metrics to gauge the current remote access activity. d) Remote Access Service failures This section defines metrics to monitor session failures and failures of the service itself, measured at aggregate level, session level and group level. e) Security violations in the Remote Access service This section defines metrics which reflect the state of remote access service of interest to Security Operations staff in an enterprise. f) Threshold group (allows definition of high water marks) This section allows the management entity to define thresholds to set high water marks on critical metrics. g) Notifications This section defines notifications to signal significant events pertaining to the Remote Access Service. ')
class RasProtocol(TextualConvention, Integer32):
    description = "The protocol immediately underlying the remote access session. The value 'other' has been listed to allow for the MIB to be supported on proprietary protocols not listed here. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("ipsec", 2), ("l2tp", 3), ("l2tpoveripsec", 4), ("pptp", 5), ("l2f", 6), ("ssl", 7))

class UserAuthenMethod(TextualConvention, Integer32):
    description = "The mechanism used to authenticate the user. The value 'other' has been listed to allow for the MIB to support proprietary authentication methods not listed here. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("other", 2), ("radius", 3), ("tacacsplus", 4), ("kerberos", 5), ("local", 6), ("ldap", 7), ("ntlm", 8), ("sdi", 9))

class UserAuthorMethod(TextualConvention, Integer32):
    description = "The mechanism used to authorize the user. The value 'other' has been listed to allow for the MIB to support proprietary authorization mechanisms not listed here. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 1), ("other", 2), ("radius", 3), ("tacacsplus", 4), ("kerberos", 5), ("local", 6), ("ldap", 7))

class SessionEncrAlgo(TextualConvention, Integer32):
    description = 'The encryption algorithm used to secure the remote access session. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("des", 2), ("des3", 3), ("rc4", 4), ("rc5", 5), ("idea", 6), ("cast", 7), ("blowfish", 8), ("aes", 9))

class SessionAuthAlgo(TextualConvention, Integer32):
    description = "The authentication algorithm used by to perform packet authentication in the remote access session. The value 'other' has been listed to allow for the MIB to support packet validation algorithms not listed here. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("other", 2), ("hmacMd5", 3), ("hmacSha", 4))

class SessionCompressionAlgo(TextualConvention, Integer32):
    description = "The compression algorithm used in the remote access session. The value 'other' has been listed to allow for the MIB to support compression not listed here. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("other", 2), ("lzs", 3))

class SessionStatus(TextualConvention, Integer32):
    description = "The status of a remote access session. initializing: the session is in the process of being established established : the session is established and is ready to carry application traffic. Sessions in this state may also be referred to as 'active' sessions. terminating : the session is in the process of termination. Objects of this type may be used to terminate an established session by setting value of the object to terminating(3). Management entity may not write values initializing(1) or established(2) onto objects of this type. Doing so would cause the managed entity to return an error condition. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("initializing", 1), ("established", 2), ("terminating", 3))

class SessionIndex(TextualConvention, Integer32):
    description = 'The type used to index a remote access session.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class FailureRecordIndex(TextualConvention, Unsigned32):
    description = 'The type used to index failure records in the failure archive.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

ciscoRasMonitorMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 0))
ciscoRasMonitorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1))
ciscoRasMonitorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 2))
crasCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1))
crasResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 2))
crasActivity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3))
crasFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4))
crasSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 5))
crasThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6))
crasNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7))
crasMaxSessionsSupportable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasMaxSessionsSupportable.setStatus('current')
if mibBuilder.loadTexts: crasMaxSessionsSupportable.setDescription('The maximum number of remote access sessions that may be supported on this device. If the device imposes no arbitrary limit on the maximum number of sessions, it should return a value of 0.')
crasMaxUsersSupportable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasMaxUsersSupportable.setStatus('current')
if mibBuilder.loadTexts: crasMaxUsersSupportable.setDescription('The maximum number of remote access users for whom Remote Access sessions may be supported on this device. If the device imposes no arbitrary limit on the maximum number of users, it should return a value of 0.')
crasMaxGroupsSupportable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Groups').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasMaxGroupsSupportable.setStatus('current')
if mibBuilder.loadTexts: crasMaxGroupsSupportable.setDescription("The maximum number of remote access groups that may be defined on this device. 'Group' refers to a collection of users grouped together for administrative convenience. If the device imposes no arbitrary limit on the maximum number of groups, it should return a value of 0.")
crasNumCryptoAccelerators = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumCryptoAccelerators.setStatus('current')
if mibBuilder.loadTexts: crasNumCryptoAccelerators.setDescription("The maximum number of hardware crypto accelerators which can be installed on this device to support remote access sessions. 'cryptoaccelerator' denotes a hardware/software entity which the managed entity uses to offload some or all computations pertaining to cryptographic operations. If the device imposes no arbitrary limit on the number of crypto accelerators to support Remote Access function, it should return a value of 0.")
crasGlobalBwUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 2, 1), Gauge32()).setUnits('MBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalBwUsage.setStatus('current')
if mibBuilder.loadTexts: crasGlobalBwUsage.setDescription('The average bandwidth used by all the active remote access sessions.')
crasNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 1), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasNumSessions.setDescription("The number of currently active sessions. A session is a connection terminating on the managed entity which has been established to provide remote access connectivity to a user. A session is said to be 'active' if it is ready to carry application traffic between the user and the managed entity. A session which is not active is defined to be 'dormant'. ")
crasNumPrevSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 2), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumPrevSessions.setStatus('current')
if mibBuilder.loadTexts: crasNumPrevSessions.setDescription('The number of remote access sessions which were previously active but which where since terminated. Measured since the last reboot of the device.')
crasNumUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 3), Gauge32()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumUsers.setStatus('current')
if mibBuilder.loadTexts: crasNumUsers.setDescription('The number of users who have active sessions. ')
crasNumGroups = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 4), Gauge32()).setUnits('Groups').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumGroups.setStatus('current')
if mibBuilder.loadTexts: crasNumGroups.setDescription('The number of user groups whose members have active sessions.')
crasGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: crasGlobalInPkts.setDescription('The total number of packets received by all currently and previously active remote access sessions.')
crasGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: crasGlobalOutPkts.setDescription('The total number of packets transmitted by all currently and previously active remote access sessions.')
crasGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: crasGlobalInOctets.setDescription('The total number of octets received by all currently and previously active remote access sessions. This value is accumulated BEFORE determining whether or not the packet should be decompressed. ')
crasGlobalInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: crasGlobalInDecompOctets.setDescription('The total number of decompressed octets received by all current and previous remote access sessions. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of crasGlobalInOctets. ')
crasGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: crasGlobalOutOctets.setDescription('The total number of octets transmitted by all currently and previously active remote access sessions. This value is accumulated AFTER determining whether or not the packet should be compressed. ')
crasGlobalOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: crasGlobalOutUncompOctets.setDescription('The total number of uncompressed octets sent by all current and previous remote access sessions. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of crasGlobalOutOctets. ')
crasGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInDropPkts.setStatus('current')
if mibBuilder.loadTexts: crasGlobalInDropPkts.setDescription('The total number of packets which were dropped during receive processing by all currently and previously active remote access sessions.')
crasGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: crasGlobalOutDropPkts.setDescription('The total number of packets which were dropped during receive processing by all currently and previously active remote access sessions.')
crasSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21), )
if mibBuilder.loadTexts: crasSessionTable.setStatus('current')
if mibBuilder.loadTexts: crasSessionTable.setDescription('This table lists all the currently active sessions. For each session, it lists the attributes (user, group, protocol, security), statistics (packet and octets) and status.')
crasSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasUsername"), (0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionIndex"))
if mibBuilder.loadTexts: crasSessionEntry.setStatus('current')
if mibBuilder.loadTexts: crasSessionEntry.setDescription('Each entry contains the attributes, statistics and status of an active session.')
crasUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: crasUsername.setStatus('current')
if mibBuilder.loadTexts: crasUsername.setDescription('The name of the user associated with this remote access session.')
crasGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGroup.setStatus('current')
if mibBuilder.loadTexts: crasGroup.setDescription('The name of the user group to which this remote access session belongs.')
crasSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 3), SessionIndex())
if mibBuilder.loadTexts: crasSessionIndex.setStatus('current')
if mibBuilder.loadTexts: crasSessionIndex.setDescription('Unique index to distinguish between multiple Remote Access Sessions associated with the same user. The value of crasSessionIndex must increase monotonically till it wraps. An implementation may choose to wrap this index before the value of 2147483647. ')
crasAuthenMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 4), UserAuthenMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasAuthenMethod.setStatus('current')
if mibBuilder.loadTexts: crasAuthenMethod.setDescription('The method used to authenticate the user prior to establishing the session.')
crasAuthorMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 5), UserAuthorMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasAuthorMethod.setStatus('current')
if mibBuilder.loadTexts: crasAuthorMethod.setDescription('The method used to authorize the user prior to establishing the session.')
crasSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionDuration.setStatus('current')
if mibBuilder.loadTexts: crasSessionDuration.setDescription('The number of seconds elapsed since this session was established.')
crasLocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: crasLocalAddressType.setDescription("The type of the address returned in 'crasLocalAddress'. ")
crasLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLocalAddress.setStatus('current')
if mibBuilder.loadTexts: crasLocalAddress.setDescription('The IP address assigned to the client of this session in the private network assigned by the managed entity.')
crasISPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasISPAddressType.setStatus('current')
if mibBuilder.loadTexts: crasISPAddressType.setDescription("The type of the address returned in 'crasISPAddress'. ")
crasISPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasISPAddress.setStatus('current')
if mibBuilder.loadTexts: crasISPAddress.setDescription('The IP address of the peer (client) assigned by the ISP. This is the address of the client device in the public network.')
crasSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 11), RasProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: crasSessionProtocol.setDescription('The protocol underlying this remote access session.')
crasProtocolElement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 12), ObjectIdentifier().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasProtocolElement.setStatus('current')
if mibBuilder.loadTexts: crasProtocolElement.setDescription('A reference to MIB definitions specific to the protocol underlying corresponding to the session or tunnel used to realized the remote access session corresponding to this conceptual row. For instance, if this remote access session is based on IPsec, then this object must contain the complete instance identifier of the IPsec tunnel corresponding to this remote access session. If no MIB definitions specific to the underlying protocol are available, the value should be set to the OBJECT IDENTIFIER { 0 0 }. ')
crasSessionEncryptionAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 13), SessionEncrAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionEncryptionAlgo.setStatus('current')
if mibBuilder.loadTexts: crasSessionEncryptionAlgo.setDescription('The algorithm used by this remote access session to encrypt its payload.')
crasSessionPktAuthenAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 14), SessionAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionPktAuthenAlgo.setStatus('current')
if mibBuilder.loadTexts: crasSessionPktAuthenAlgo.setDescription('The algorithm used by this remote access session to to validate packets.')
crasSessionCompressionAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 15), SessionCompressionAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionCompressionAlgo.setStatus('current')
if mibBuilder.loadTexts: crasSessionCompressionAlgo.setDescription('The algorithm used by this remote access session to compress packets.')
crasHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: crasHeartbeatInterval.setDescription('The interval in seconds between two successive heartbeats employed by this session. Value of 0 denotes that no heartbeat is used.')
crasClientVendorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientVendorString.setStatus('current')
if mibBuilder.loadTexts: crasClientVendorString.setDescription('The string identifying the vendor of the client application initiating this Remote Access session.')
crasClientVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientVersionString.setStatus('current')
if mibBuilder.loadTexts: crasClientVersionString.setDescription('The string identifying the version of the of the client application initiating the Remote Access session. This can be used by the administrator to identify which users are running unsupported client versions.')
crasClientOSVendorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientOSVendorString.setStatus('current')
if mibBuilder.loadTexts: crasClientOSVendorString.setDescription('The string identifying the vendor of the operating system on which the client application initiating the Remote Access Session is running.')
crasClientOSVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientOSVersionString.setStatus('current')
if mibBuilder.loadTexts: crasClientOSVersionString.setDescription('The string identifying the version of the operating system of the entity which initiated this Remote Access session.')
crasPrimWINSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 21), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimWINSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: crasPrimWINSServerAddrType.setDescription("The type of the address returned in 'crasPrimWINSServer'. ")
crasPrimWINSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 22), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimWINSServer.setStatus('current')
if mibBuilder.loadTexts: crasPrimWINSServer.setDescription('The IP address of the primary WINS server assigned managed entity to this client session.')
crasSecWINSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 23), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecWINSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: crasSecWINSServerAddrType.setDescription("The type of the address returned in 'crasSecWINSServer'. ")
crasSecWINSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecWINSServer.setStatus('current')
if mibBuilder.loadTexts: crasSecWINSServer.setDescription('The IP address of the secondary WINS server assigned by the managed entity to this client session.')
crasPrimDNSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 25), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimDNSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: crasPrimDNSServerAddrType.setDescription("The type of the address returned in 'crasPrimDNSServer'. ")
crasPrimDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 26), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimDNSServer.setStatus('current')
if mibBuilder.loadTexts: crasPrimDNSServer.setDescription('The IP address of the primary DNS server assigned by the managed entity to this client session.')
crasSecDNSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 27), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecDNSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: crasSecDNSServerAddrType.setDescription("The type of the address returned in 'crasSecDNSServer'. ")
crasSecDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 28), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecDNSServer.setStatus('current')
if mibBuilder.loadTexts: crasSecDNSServer.setDescription('The IP address of the secondary DNS server assigned by the managed entity to this client session.')
crasDHCPServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 29), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasDHCPServerAddrType.setStatus('current')
if mibBuilder.loadTexts: crasDHCPServerAddrType.setDescription("The type of the address returned in 'crasDHCPServer'. ")
crasDHCPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 30), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasDHCPServer.setStatus('current')
if mibBuilder.loadTexts: crasDHCPServer.setDescription('The IP address of the DHCP server assigned by the managed entity to this client session.')
crasSessionInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 31), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionInPkts.setStatus('current')
if mibBuilder.loadTexts: crasSessionInPkts.setDescription('The total number of packets received by this Remote Access session.')
crasSessionOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 32), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionOutPkts.setStatus('current')
if mibBuilder.loadTexts: crasSessionOutPkts.setDescription('The total number of packets transmitted by this Remote Access Session.')
crasSessionInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 33), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionInDropPkts.setStatus('current')
if mibBuilder.loadTexts: crasSessionInDropPkts.setDescription('The total number of packets received for processing on this session which were dropped by the managed entity.')
crasSessionOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 34), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: crasSessionOutDropPkts.setDescription('The total number of outgoing packets on this session which were dropped during transmit processing by the managed entity.')
crasSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 35), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionInOctets.setStatus('current')
if mibBuilder.loadTexts: crasSessionInOctets.setDescription('The total number of octets received by this Remote Access Session. This value is accumulated BEFORE determining whether or not the packet should be decompressed. ')
crasSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 36), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionOutOctets.setStatus('current')
if mibBuilder.loadTexts: crasSessionOutOctets.setDescription('The total number of octets transmitted by this Remote Access Session. This value is accumulated AFTER determining whether or not the packet should be compressed. ')
crasSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 37), SessionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasSessionState.setStatus('current')
if mibBuilder.loadTexts: crasSessionState.setDescription("The state of the remote access session corresponding to this conceptual row. The management entity may use this object to terminate an established session by setting value of the object to 'terminating'. ")
crasActGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22), )
if mibBuilder.loadTexts: crasActGroupTable.setStatus('current')
if mibBuilder.loadTexts: crasActGroupTable.setDescription('This table lists all the currently active remote access user groups. For each group, it lists the attributes (group, aggregate activity, aggregate traffic), and status.')
crasActGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpName"))
if mibBuilder.loadTexts: crasActGroupEntry.setStatus('current')
if mibBuilder.loadTexts: crasActGroupEntry.setDescription('Each entry contains the attributes, statistics and status of an active session.')
crasActGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: crasActGrpName.setStatus('current')
if mibBuilder.loadTexts: crasActGrpName.setDescription('The name of the active user group corresponding to this entry.')
crasActGrNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrNumUsers.setStatus('current')
if mibBuilder.loadTexts: crasActGrNumUsers.setDescription('The number of users in this group currently connected to the managed device.')
crasActGrpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpInPkts.setStatus('current')
if mibBuilder.loadTexts: crasActGrpInPkts.setDescription('The total number of packets received by this session.')
crasActGrpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpOutPkts.setStatus('current')
if mibBuilder.loadTexts: crasActGrpOutPkts.setDescription('The total number of packets transmitted by this session.')
crasActGrpInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpInDropPkts.setStatus('current')
if mibBuilder.loadTexts: crasActGrpInDropPkts.setDescription('The total number of packets dropped by this session which were received for processing.')
crasActGrpOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: crasActGrpOutDropPkts.setDescription('The total number of outgoing packets which were dropped during transmit processing by this session.')
crasActGrpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpInOctets.setStatus('current')
if mibBuilder.loadTexts: crasActGrpInOctets.setDescription('The total number of octets received by this session.')
crasActGrpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpOutOctets.setStatus('current')
if mibBuilder.loadTexts: crasActGrpOutOctets.setDescription('The total number of octets transmitted by this session.')
crasEmailNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 23), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasEmailNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasEmailNumSessions.setDescription('The number of currently active Email proxy sessions.')
crasEmailCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 24), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasEmailCumulateSessions.setStatus('current')
if mibBuilder.loadTexts: crasEmailCumulateSessions.setDescription('The number of cumulative Email proxy sessions since system up.')
crasEmailPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 25), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasEmailPeakConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: crasEmailPeakConcurrentSessions.setDescription('The number of peak concurrent Email proxy sessions since system up.')
crasIPSecNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 26), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasIPSecNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasIPSecNumSessions.setDescription('The number of currently active IPSec sessions.')
crasIPSecCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 27), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasIPSecCumulateSessions.setStatus('current')
if mibBuilder.loadTexts: crasIPSecCumulateSessions.setDescription('The number of cumulative IPSec sessions since system up.')
crasIPSecPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 28), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasIPSecPeakConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: crasIPSecPeakConcurrentSessions.setDescription('The number of peak concurrent Email proxy sessions since system up.')
crasL2LNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 29), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasL2LNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasL2LNumSessions.setDescription('The number of currently active LAN to LAN sessions.')
crasL2LCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 30), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasL2LCumulateSessions.setStatus('current')
if mibBuilder.loadTexts: crasL2LCumulateSessions.setDescription('The number of cumulative LAN to LAN sessions since system up.')
crasL2LPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 31), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasL2LPeakConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: crasL2LPeakConcurrentSessions.setDescription('The number of peak concurrent LAN to LAN sessions since system up.')
crasLBNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 32), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLBNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasLBNumSessions.setDescription('The number of currently active Load Balancing sessions.')
crasLBCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 33), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLBCumulateSessions.setStatus('current')
if mibBuilder.loadTexts: crasLBCumulateSessions.setDescription('The number of cumulative Load Balancing sessions since system up.')
crasLBPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 34), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLBPeakConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: crasLBPeakConcurrentSessions.setDescription('The number of peak concurrent Load Balancing sessions since system up.')
crasSVCNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 35), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSVCNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasSVCNumSessions.setDescription('The number of currently active SVC sessions.')
crasSVCCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 36), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSVCCumulateSessions.setStatus('current')
if mibBuilder.loadTexts: crasSVCCumulateSessions.setDescription('The number of cumulative SVC sessions since system up.')
crasSVCPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 37), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSVCPeakConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: crasSVCPeakConcurrentSessions.setDescription('The number of peak concurrent SVC sessions since system up.')
crasWebvpnNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 38), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasWebvpnNumSessions.setStatus('current')
if mibBuilder.loadTexts: crasWebvpnNumSessions.setDescription('The number of currently active Webvpn sessions.')
crasWebvpnCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 39), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasWebvpnCumulateSessions.setStatus('current')
if mibBuilder.loadTexts: crasWebvpnCumulateSessions.setDescription('The number of cumulative Webvpn sessions since system up.')
crasWebvpnPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 40), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasWebvpnPeakConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: crasWebvpnPeakConcurrentSessions.setDescription('The number of peak concurrent Webvpn sessions since system up.')
crasFailuresGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1))
crasNumTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumTotalFailures.setStatus('current')
if mibBuilder.loadTexts: crasNumTotalFailures.setDescription('The number of attempts to establish sessions which failed, since the last reboot of the managed device.')
crasNumDeclinedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumDeclinedSessions.setStatus('current')
if mibBuilder.loadTexts: crasNumDeclinedSessions.setDescription("The number of session setup attempts, counted since the last time the notification 'ciscoRasTooManyFailedAuths' was issued, which were declined due to authentication or authorization failure. ")
crasNumSetupFailInsufResources = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 3), Counter64()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumSetupFailInsufResources.setStatus('current')
if mibBuilder.loadTexts: crasNumSetupFailInsufResources.setDescription('The number of session setup attempts that failed due to insufficient resources.')
crasNumAbortedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 4), Counter64()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumAbortedSessions.setStatus('current')
if mibBuilder.loadTexts: crasNumAbortedSessions.setDescription('The number of sessions which were successfully setup but were since terminated abnormally.')
crasFailGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 2))
crasFailTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasFailTableSize.setStatus('current')
if mibBuilder.loadTexts: crasFailTableSize.setDescription('The window size of the Remote Access Failure tables. The failure tables for session and group failures maintain only the last crasFailTableSize number of failure records. A value of 0 for this MIB variable indicates that archiving of the failures is disabled. An implementation may choose suitable minimum and maximum values for this element based on the local policy and available resources. If an SNMP SET request specifies a value outside this window for this element, a BAD VALUE may be returned.')
crasSessFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3))
crasSessFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1), )
if mibBuilder.loadTexts: crasSessFailTable.setStatus('current')
if mibBuilder.loadTexts: crasSessFailTable.setDescription(" This table records the last 'N' session failures, where 'N' is the value of the MIB element 'crasFailTableSize' defined earlier. A failure could be a failure to establish a session ('setup' failure) or a failure of a session after it was established ('operational' failure). ")
crasSessFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailIndex"))
if mibBuilder.loadTexts: crasSessFailEntry.setStatus('current')
if mibBuilder.loadTexts: crasSessFailEntry.setDescription('Each entry contains the attributes associated with a remote access session failure.')
crasSessFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 1), FailureRecordIndex())
if mibBuilder.loadTexts: crasSessFailIndex.setStatus('current')
if mibBuilder.loadTexts: crasSessFailIndex.setDescription('The index of the session failure table. The value of the index is a number which begins at one and is incremented with each session failure. The value of this object will wrap at 4,294,967,295.')
crasSessFailUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailUsername.setStatus('current')
if mibBuilder.loadTexts: crasSessFailUsername.setDescription('The name of the user associated with this failed remote access session.')
crasSessFailGroupname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailGroupname.setStatus('current')
if mibBuilder.loadTexts: crasSessFailGroupname.setDescription('The name of the user group to which this failed remote access session belongs.')
crasSessFailType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setupFailure", 1), ("operationalFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailType.setStatus('current')
if mibBuilder.loadTexts: crasSessFailType.setDescription('The type of the failure: 1 = failure occurred during session setup 2 = failed occurred after the session was setup successfully. ')
crasSessFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("internalError", 2), ("authenticationFailure", 3), ("authorizationFailure", 4), ("sysCapExceeded", 5), ("peerAbortRequest", 6), ("peerLost", 7), ("operRequest", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailReason.setStatus('current')
if mibBuilder.loadTexts: crasSessFailReason.setDescription("The reason for the failure. Possible reasons include: 1 = other (error which cannot be classified in any of the types listed below). 2 = internal error occurred 3 = failed to authenticate the peer/user 4 = failed to authorize the peer/user 5 = system capacity exceeded (memory, cpu, max users etc) 6 = peer requested to abort the session or the setup 7 = lost peer's heartbeat 8 = local management request.")
crasSessFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailTime.setStatus('current')
if mibBuilder.loadTexts: crasSessFailTime.setDescription("The value of the MIB element 'sysUpTime' at the time of the failure.")
crasSessFailSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 7), SessionIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailSessionIndex.setStatus('current')
if mibBuilder.loadTexts: crasSessFailSessionIndex.setDescription("The index of the session which failed (in case this was an operational failure). In case of setup failures (where the value of 'crasSessFailType' of this conceptual row is 'operationalFailure'), the value of this object is undefined and should not be processed.")
crasSessFailISPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailISPAddrType.setStatus('current')
if mibBuilder.loadTexts: crasSessFailISPAddrType.setDescription("The type of the address returned in 'crasSessFailISPAddr'. ")
crasSessFailISPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailISPAddr.setStatus('current')
if mibBuilder.loadTexts: crasSessFailISPAddr.setDescription('The public address of the peer.')
crasSessFailLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: crasSessFailLocalAddrType.setDescription("The type of the address returned in 'crasSessFailLocalAddr'. ")
crasSessFailLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailLocalAddr.setStatus('current')
if mibBuilder.loadTexts: crasSessFailLocalAddr.setDescription('The address assigned to the peer by the local address management mechanism. In case no address was assigned to the peer when the failure occurred, this MIB variable would contain the IPv4 address value 0.0.0.0')
crasFailLastFailIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 2), FailureRecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasFailLastFailIndex.setStatus('current')
if mibBuilder.loadTexts: crasFailLastFailIndex.setDescription("The value of column 'crasSessFailIndex' corresponding to the last row added to the crasSessFailTable. The value of this object is undefined and should not be processed by the management entity if the value of the object 'crasFailTableSize' is 0. ")
crasGroupFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4))
crasGrpFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1), )
if mibBuilder.loadTexts: crasGrpFailTable.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailTable.setDescription("This table records the last 'N' occurrences of failures (setup or operational) per user group, where 'N' is the value of the MIB element 'crasFailTableSize' defined earlier. When 'N' entries have been created, the failure information about a new user group must be created by deleting the oldest entry in this table. ")
crasGrpFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailGroupname"))
if mibBuilder.loadTexts: crasGrpFailEntry.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailEntry.setDescription('Each entry contains the summary of failures for a specific user group.')
crasGrpFailGroupname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: crasGrpFailGroupname.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailGroupname.setDescription('The name of the user group to which this failure record corresponds. This is the index of the group failure table.')
crasGrpFailNumFailAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumFailAuths.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailNumFailAuths.setDescription('The number of sessions belonging to this group which failed authentication; counted since last reboot.')
crasGrpFailNumResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumResourceFailures.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailNumResourceFailures.setDescription('The number of session setup attempts which failed due to insufficient resources.')
crasGrpFailNumDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumDeclined.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailNumDeclined.setDescription('The number of session setup attempts which were declined by the managed entity due to local policy. These would include sessions which were denied due to rate control settings.')
crasGrpFailNumTerminatedMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumTerminatedMgmt.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailNumTerminatedMgmt.setDescription('The number of established sessions which were terminated by explicit management action. The termination may have been triggered locally or based on a request from the peer.')
crasGrpFailNumTerminatedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumTerminatedOther.setStatus('current')
if mibBuilder.loadTexts: crasGrpFailNumTerminatedOther.setDescription('The number of established sessions which were terminated due to insufficient reasons, internal error or other reasons not caused by management action.')
crasSecurityGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 5, 1))
crasNumDisabledAccounts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 5, 1, 1), Counter64()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumDisabledAccounts.setStatus('current')
if mibBuilder.loadTexts: crasNumDisabledAccounts.setDescription('The total number of user accounts which were disabled due to repeated login failures.')
crasThrMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasThrMaxSessions.setStatus('current')
if mibBuilder.loadTexts: crasThrMaxSessions.setDescription("The maximum number of sessions which are successfully setup after which the managed entity should alert the network management entity using the notification 'ciscoRasTooManySessions', if the notification has been enabled. A value of 0 indicates that the threshold has not been set.")
crasThrMaxFailedAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294967295)).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasThrMaxFailedAuths.setStatus('current')
if mibBuilder.loadTexts: crasThrMaxFailedAuths.setDescription("The value of object 'crasNumDeclinedSessions' at which the managed entity should alert the network management entity using the notification 'ciscoRasTooManyFailedAuths', if the notification has been enabled. A value of 0 indicates that the threshold has not been set.")
crasThrMaxThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Octets Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasThrMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: crasThrMaxThroughput.setDescription("The highest throughput of the Remote Access Service at which the managed entity should alert the network management entity using the notification 'ciscoRasTooHighThroughput', if the notification has been enabled. The notification is disabled till the value of the aggregate throughput of the managed entity drops below the value of this object. A value of 0 indicates that the threshold has not been set.")
crasCntlTooManySessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasCntlTooManySessions.setStatus('current')
if mibBuilder.loadTexts: crasCntlTooManySessions.setDescription('This object defines the administrative state of sending the trap to signal the violation of the Max session threshold.')
crasCntlTooManyFailedAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasCntlTooManyFailedAuths.setStatus('current')
if mibBuilder.loadTexts: crasCntlTooManyFailedAuths.setDescription('This object defines the administrative state of sending the trap to signal the violation of the Max authentication failure count threshold.')
crasCntlTooHighThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasCntlTooHighThroughput.setStatus('current')
if mibBuilder.loadTexts: crasCntlTooHighThroughput.setDescription('This object defines the administrative state of sending the trap to signal the violation of the Max throughput threshold.')
ciscoRasTooManySessions = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 392, 0, 1)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumUsers"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxSessionsSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxUsersSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxSessions"))
if mibBuilder.loadTexts: ciscoRasTooManySessions.setStatus('current')
if mibBuilder.loadTexts: ciscoRasTooManySessions.setDescription('This notification is generated when the managed entity detects that the number of sessions established exceeds the set threshold crasThrMaxSessions. Once the notification has been issued, further notifications are suppressed till the value returns below the specified threshold.')
ciscoRasTooManyFailedAuths = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 392, 0, 2)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumDeclinedSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxFailedAuths"))
if mibBuilder.loadTexts: ciscoRasTooManyFailedAuths.setStatus('current')
if mibBuilder.loadTexts: ciscoRasTooManyFailedAuths.setDescription('This notification is generated when the managed entity detects that the number of login attempts (over all users) exceeds the set threshold for throughput (crasThrMaxFailedAuths). Once the notification has been issued, further notifications are suppressed till the value returns below the specified threshold.')
ciscoRasTooHighThroughput = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 392, 0, 3)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxThroughput"))
if mibBuilder.loadTexts: ciscoRasTooHighThroughput.setStatus('current')
if mibBuilder.loadTexts: ciscoRasTooHighThroughput.setDescription('This notification is generated when the managed entity detects that the current throughput of the device exceeds the set threshold for throughput (crasThrMaxThroughput). Once the notification has been issued, further notiifcations are suppressed till the value returns below the specified threshold.')
ciscoRasMonitorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 1))
ciscoRasMonitorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2))
ciscoRasMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 1, 1)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasCapacityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasResourceUsageGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasMandatoryFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasGrpActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasOptionalFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasSecurityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasThresholdsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasMonitorMIBCompliance = ciscoRasMonitorMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoRasMonitorMIBCompliance.setDescription('The compliance statement for SNMP entities the Cisco Remote Access Monitoring MIB.')
ciscoRasMonitorMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 1, 2)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasCapacityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasResourceUsageGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasActivityGroupRev1"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasMandatoryFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasGrpActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasOptionalFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasSecurityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasThresholdsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasMonitorMIBComplianceRev1 = ciscoRasMonitorMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoRasMonitorMIBComplianceRev1.setDescription('The compliance statement for SNMP entities the Cisco Remote Access Monitoring MIB.')
ciscoRasCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 1)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxSessionsSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxUsersSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxGroupsSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumCryptoAccelerators"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasCapacityGroup = ciscoRasCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasCapacityGroup.setDescription('This group consists of the MIB objects pertaining to Remote Access Service capacity parameters defined in the Cisco Remote Access MIB.')
ciscoRasResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 2)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalBwUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasResourceUsageGroup = ciscoRasResourceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasResourceUsageGroup.setDescription('This group consists of the MIB objects pertaining to Remote Access Service resource usage parameters defined in the Cisco Remote Access MIB.')
ciscoRasActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 3)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumPrevSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumUsers"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInDecompOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutUncompOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasAuthenMethod"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasAuthorMethod"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionDuration"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLocalAddressType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLocalAddress"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasISPAddressType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasISPAddress"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionProtocol"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasProtocolElement"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionEncryptionAlgo"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionPktAuthenAlgo"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionCompressionAlgo"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasHeartbeatInterval"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientVendorString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientVersionString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientOSVendorString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientOSVersionString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimWINSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimWINSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecWINSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecWINSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimDNSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimDNSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecDNSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecDNSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasDHCPServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasDHCPServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionInPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionOutPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionInDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionOutDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionOutOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasActivityGroup = ciscoRasActivityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasActivityGroup.setDescription("This group consists of the MIB objects pertaining to the Cisco Remote Access MIB Activity group. Following are definitions of some terms used in this compliance group: User: A remote access user. Group: A collection of remote access users grouped and managed together as a single entity for administrative convenience. ISP: Internet Service Provider. Crypto Accelerator 'Crypto Accelerator' denotes a device which the managed entity uses to offload some or all computations pertaining to cryptographic operations. Session A connection terminating on the managed device which has been established to provide remote access connectivity to a user. ")
ciscoRasGrpActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 4)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumGroups"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrNumUsers"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpInPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpOutPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpInDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpOutDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasGrpActivityGroup = ciscoRasGrpActivityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasGrpActivityGroup.setDescription('This group consists of the MIB objects pertaining to activity of user groups. ')
ciscoRasMandatoryFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 5)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumTotalFailures"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumDeclinedSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumAbortedSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasFailTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasMandatoryFailureGroup = ciscoRasMandatoryFailureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasMandatoryFailureGroup.setDescription('This group categorizes objects pertaining to failures in the Remote Access Service which are essential for successful monitoring of the service. ')
ciscoRasOptionalFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 6)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumSetupFailInsufResources"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailUsername"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailGroupname"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailReason"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailTime"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailSessionIndex"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailISPAddr"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailLocalAddr"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailISPAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailLocalAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasFailLastFailIndex"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumFailAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumResourceFailures"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumDeclined"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumTerminatedMgmt"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumTerminatedOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasOptionalFailureGroup = ciscoRasOptionalFailureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasOptionalFailureGroup.setDescription('This group categorizes optional objects pertaining to failures in the Remote Access Service.')
ciscoRasSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 7)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumDisabledAccounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasSecurityGroup = ciscoRasSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasSecurityGroup.setDescription('This group categorizes objects pertaining to the monitoring state of security in the Remote Access Service.')
ciscoRasThresholdsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 8)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxFailedAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxThroughput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasThresholdsGroup = ciscoRasThresholdsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasThresholdsGroup.setDescription('This group categorizes objects which are used to establish baseline values of metrics instrumenting the Remote Access Service.')
ciscoRasNotificationCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 9)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasCntlTooManySessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasCntlTooManyFailedAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasCntlTooHighThroughput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasNotificationCntlGroup = ciscoRasNotificationCntlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasNotificationCntlGroup.setDescription('This group of objects controls the sending of notifications defined in this MIB module.')
ciscoRasNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 10)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasTooHighThroughput"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasTooManyFailedAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasTooManySessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasNotificationsGroup = ciscoRasNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRasNotificationsGroup.setDescription('This group contains the notifications for the Remote Access MIB.')
ciscoRasActivityGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 11)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasEmailNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasEmailCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasEmailPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasIPSecNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasIPSecCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasIPSecPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasL2LNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasL2LCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasL2LPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLBNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLBCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLBPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSVCNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSVCCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSVCPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasWebvpnNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasWebvpnCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasWebvpnPeakConcurrentSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasActivityGroupRev1 = ciscoRasActivityGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoRasActivityGroupRev1.setDescription('This group contains activity information related to sessions.')
mibBuilder.exportSymbols("CISCO-REMOTE-ACCESS-MONITOR-MIB", crasNumPrevSessions=crasNumPrevSessions, crasFailTableSize=crasFailTableSize, crasSessFailUsername=crasSessFailUsername, ciscoRasNotificationCntlGroup=ciscoRasNotificationCntlGroup, crasIPSecPeakConcurrentSessions=crasIPSecPeakConcurrentSessions, crasSessFailType=crasSessFailType, crasGlobalInDropPkts=crasGlobalInDropPkts, ciscoRasOptionalFailureGroup=ciscoRasOptionalFailureGroup, crasEmailCumulateSessions=crasEmailCumulateSessions, crasSessionInPkts=crasSessionInPkts, crasFailures=crasFailures, crasSVCPeakConcurrentSessions=crasSVCPeakConcurrentSessions, ciscoRasTooManySessions=ciscoRasTooManySessions, crasSessionProtocol=crasSessionProtocol, crasSessionCompressionAlgo=crasSessionCompressionAlgo, crasThrMaxSessions=crasThrMaxSessions, ciscoRasGrpActivityGroup=ciscoRasGrpActivityGroup, crasSessionOutOctets=crasSessionOutOctets, crasSessionPktAuthenAlgo=crasSessionPktAuthenAlgo, crasActGrpOutDropPkts=crasActGrpOutDropPkts, ciscoRasCapacityGroup=ciscoRasCapacityGroup, crasFailGlobalCntl=crasFailGlobalCntl, crasActivity=crasActivity, crasMaxSessionsSupportable=crasMaxSessionsSupportable, crasActGroupEntry=crasActGroupEntry, crasUsername=crasUsername, crasSessFailISPAddr=crasSessFailISPAddr, crasSessFailSessionIndex=crasSessFailSessionIndex, ciscoRasTooManyFailedAuths=ciscoRasTooManyFailedAuths, crasSessFailIndex=crasSessFailIndex, ciscoRasMonitorMIBCompliance=ciscoRasMonitorMIBCompliance, crasSessionState=crasSessionState, ciscoRasActivityGroupRev1=ciscoRasActivityGroupRev1, crasGlobalInOctets=crasGlobalInOctets, crasCapacity=crasCapacity, ciscoRasTooHighThroughput=ciscoRasTooHighThroughput, crasThrMaxFailedAuths=crasThrMaxFailedAuths, ciscoRasMonitorMIBNotifs=ciscoRasMonitorMIBNotifs, crasNumDeclinedSessions=crasNumDeclinedSessions, crasDHCPServerAddrType=crasDHCPServerAddrType, crasThrMaxThroughput=crasThrMaxThroughput, crasCntlTooHighThroughput=crasCntlTooHighThroughput, PYSNMP_MODULE_ID=ciscoRemoteAccessMonitorMIB, crasGrpFailNumDeclined=crasGrpFailNumDeclined, crasProtocolElement=crasProtocolElement, crasGrpFailGroupname=crasGrpFailGroupname, crasSessionTable=crasSessionTable, crasLocalAddressType=crasLocalAddressType, crasSessFailISPAddrType=crasSessFailISPAddrType, crasL2LCumulateSessions=crasL2LCumulateSessions, crasAuthorMethod=crasAuthorMethod, crasSessFailTime=crasSessFailTime, crasPrimWINSServer=crasPrimWINSServer, ciscoRasMonitorMIBComplianceRev1=ciscoRasMonitorMIBComplianceRev1, SessionCompressionAlgo=SessionCompressionAlgo, crasSessionOutPkts=crasSessionOutPkts, crasNumAbortedSessions=crasNumAbortedSessions, crasActGroupTable=crasActGroupTable, crasGroupFailures=crasGroupFailures, crasNotifCntl=crasNotifCntl, crasSVCNumSessions=crasSVCNumSessions, crasMaxGroupsSupportable=crasMaxGroupsSupportable, crasFailLastFailIndex=crasFailLastFailIndex, ciscoRasMandatoryFailureGroup=ciscoRasMandatoryFailureGroup, crasGroup=crasGroup, crasGrpFailNumFailAuths=crasGrpFailNumFailAuths, crasResourceUsage=crasResourceUsage, crasGlobalOutPkts=crasGlobalOutPkts, crasLBCumulateSessions=crasLBCumulateSessions, crasSessFailLocalAddr=crasSessFailLocalAddr, crasDHCPServer=crasDHCPServer, crasActGrpName=crasActGrpName, crasSecDNSServerAddrType=crasSecDNSServerAddrType, ciscoRasThresholdsGroup=ciscoRasThresholdsGroup, crasSecWINSServer=crasSecWINSServer, crasSessionOutDropPkts=crasSessionOutDropPkts, UserAuthorMethod=UserAuthorMethod, crasSecWINSServerAddrType=crasSecWINSServerAddrType, crasGlobalBwUsage=crasGlobalBwUsage, ciscoRemoteAccessMonitorMIB=ciscoRemoteAccessMonitorMIB, crasGlobalOutDropPkts=crasGlobalOutDropPkts, UserAuthenMethod=UserAuthenMethod, crasSessionInDropPkts=crasSessionInDropPkts, crasLBPeakConcurrentSessions=crasLBPeakConcurrentSessions, crasSessionDuration=crasSessionDuration, crasGrpFailNumResourceFailures=crasGrpFailNumResourceFailures, crasGrpFailNumTerminatedOther=crasGrpFailNumTerminatedOther, ciscoRasMonitorMIBObjects=ciscoRasMonitorMIBObjects, crasEmailPeakConcurrentSessions=crasEmailPeakConcurrentSessions, crasGlobalInPkts=crasGlobalInPkts, crasGrpFailEntry=crasGrpFailEntry, crasFailuresGlobals=crasFailuresGlobals, crasGrpFailNumTerminatedMgmt=crasGrpFailNumTerminatedMgmt, crasSessFailGroupname=crasSessFailGroupname, ciscoRasSecurityGroup=ciscoRasSecurityGroup, crasSecurity=crasSecurity, crasClientOSVendorString=crasClientOSVendorString, ciscoRasMonitorMIBConform=ciscoRasMonitorMIBConform, crasSessionIndex=crasSessionIndex, crasActGrpInOctets=crasActGrpInOctets, crasSessFailures=crasSessFailures, crasThresholds=crasThresholds, crasGlobalOutOctets=crasGlobalOutOctets, FailureRecordIndex=FailureRecordIndex, crasSessionInOctets=crasSessionInOctets, crasSecurityGlobals=crasSecurityGlobals, crasIPSecNumSessions=crasIPSecNumSessions, crasNumTotalFailures=crasNumTotalFailures, crasGlobalOutUncompOctets=crasGlobalOutUncompOctets, crasActGrpOutOctets=crasActGrpOutOctets, SessionEncrAlgo=SessionEncrAlgo, crasActGrpOutPkts=crasActGrpOutPkts, ciscoRasMonitorMIBCompliances=ciscoRasMonitorMIBCompliances, SessionStatus=SessionStatus, SessionAuthAlgo=SessionAuthAlgo, crasWebvpnCumulateSessions=crasWebvpnCumulateSessions, crasHeartbeatInterval=crasHeartbeatInterval, crasL2LPeakConcurrentSessions=crasL2LPeakConcurrentSessions, crasISPAddressType=crasISPAddressType, crasWebvpnPeakConcurrentSessions=crasWebvpnPeakConcurrentSessions, ciscoRasMonitorMIBGroups=ciscoRasMonitorMIBGroups, crasLocalAddress=crasLocalAddress, crasSessionEncryptionAlgo=crasSessionEncryptionAlgo, crasSessionEntry=crasSessionEntry, crasSecDNSServer=crasSecDNSServer, crasSessFailTable=crasSessFailTable, crasClientVendorString=crasClientVendorString, RasProtocol=RasProtocol, crasNumCryptoAccelerators=crasNumCryptoAccelerators, crasNumSessions=crasNumSessions, crasNumUsers=crasNumUsers, crasPrimWINSServerAddrType=crasPrimWINSServerAddrType, crasActGrpInDropPkts=crasActGrpInDropPkts, crasNumDisabledAccounts=crasNumDisabledAccounts, crasSessFailLocalAddrType=crasSessFailLocalAddrType, crasL2LNumSessions=crasL2LNumSessions, crasNumSetupFailInsufResources=crasNumSetupFailInsufResources, crasActGrpInPkts=crasActGrpInPkts, crasAuthenMethod=crasAuthenMethod, crasGrpFailTable=crasGrpFailTable, SessionIndex=SessionIndex, crasPrimDNSServer=crasPrimDNSServer, crasSessFailEntry=crasSessFailEntry, ciscoRasResourceUsageGroup=ciscoRasResourceUsageGroup, crasISPAddress=crasISPAddress, crasNumGroups=crasNumGroups, crasGlobalInDecompOctets=crasGlobalInDecompOctets, ciscoRasActivityGroup=ciscoRasActivityGroup, crasPrimDNSServerAddrType=crasPrimDNSServerAddrType, crasCntlTooManyFailedAuths=crasCntlTooManyFailedAuths, ciscoRasNotificationsGroup=ciscoRasNotificationsGroup, crasMaxUsersSupportable=crasMaxUsersSupportable, crasSVCCumulateSessions=crasSVCCumulateSessions, crasSessFailReason=crasSessFailReason, crasClientVersionString=crasClientVersionString, crasEmailNumSessions=crasEmailNumSessions, crasClientOSVersionString=crasClientOSVersionString, crasWebvpnNumSessions=crasWebvpnNumSessions, crasIPSecCumulateSessions=crasIPSecCumulateSessions, crasLBNumSessions=crasLBNumSessions, crasCntlTooManySessions=crasCntlTooManySessions, crasActGrNumUsers=crasActGrNumUsers)
