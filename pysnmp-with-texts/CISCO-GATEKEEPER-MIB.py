#
# PySNMP MIB module CISCO-GATEKEEPER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GATEKEEPER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
CgkTAddressTag, CgkGatekeeperID, CgkNAddress, CgkNAddressTag = mibBuilder.importSymbols("CISCO-H323-TC-MIB", "CgkTAddressTag", "CgkGatekeeperID", "CgkNAddress", "CgkNAddressTag")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Integer32, Counter32, Counter64, ModuleIdentity, iso, Bits, TimeTicks, IpAddress, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Integer32", "Counter32", "Counter64", "ModuleIdentity", "iso", "Bits", "TimeTicks", "IpAddress", "ObjectIdentity", "NotificationType")
RowStatus, TextualConvention, TruthValue, TAddress, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "TAddress", "DisplayString", "TimeStamp")
ciscoGatekeeperMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 40))
ciscoGatekeeperMIB.setRevisions(('2007-08-29 00:00', '2007-08-28 00:00', '2003-03-13 00:00', '2002-03-12 00:00', '2001-09-20 00:00', '2001-04-09 00:00', '2000-06-26 00:00', '2000-03-10 00:00', '1998-10-09 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGatekeeperMIB.setRevisionsDescriptions(('Corrected the DESCRIPTION for cgkRZoneAllocTotalBandwidth, added few information specific to its value.', 'Added object identifier cgkRemoteZone to cgkZone, and included the following objects which contains information specific to remote zone. These objects manage remote zone bandwidth. cgkRZoneTotalBandwidth, cgkRZoneAllocTotalBandwidth cgkGatekeeperComplianceRev3 is deprecated and superseded by cgkGatekeeperComplianceRev4. Added cgkRemoteZoneGroup to define the objects that the remote gatekeeper must support for its supported zone.', 'Corrected the DESCRIPTION for cgkZoneLRQs, which described the meaning of a boolean value incorrectly. Modified Unsigned32 import to SNMPv2-SMI.', 'Added the support for Gatekeeper & Zone level management statistics. The Gatkeeper level statistics support is followed from RAS statistics table namely rasStatsTable, from ANNEX 1.2 in h341, ITU-T specification. We are also proposing to implement per zone level statistics support. The following objects are added for Gatekeeper level stats: cgkStatsAdmissionRequests, cgkStatsOriginAdmissionRequests, cgkStatsAdmissionConfirms, cgkStatsOriginAdmissionConfirms, cgkStatsAdmissionRejects, cgkStatsOriginAdmissionRejects, cgkStatsTotalConcurrentCalls, cgkStatsOriginTotalConcurrentCalls, cgkStatsRcvdLocationRequests, cgkStatsSentLocationRequests, cgkStatsRcvdLocationConfirms, cgkStatsSentLocationConfirms, cgkStatsRcvdLocationRejects, cgkStatsSentLocationRejects, cgkStatsRegisteredEndpoints, cgkStatsRcvdDisengageRequests, cgkStatsSentDisengageRequests, cgkStatsRcvdDisengageConfirms, cgkStatsSentDisengageConfirms, cgkStatsRcvdDisengageRejects, cgkStatsSentDisengageRejects. The following new tables and objects are added for Zone level stats: cgkLocalZoneStatsAdmissionTable-> cgkLZoneStatsAdmissionRequests, cgkLZoneStatsOriginAdmissionRequests, cgkLZoneStatsOriginAdmissionConfirms, cgkLZoneStatsOriginAdmissionRejects, cgkLZoneStatsOriginTotalConcurrentCalls cgkLocalZoneStatsLocationTable-> cgkLZoneStatsSentLocationRequests, cgkLZoneStatsRcvdLocationConfirms, cgkLZoneStatsSentLocationConfirms, cgkLZoneStatsRcvdLocationRejects, cgkLZoneStatsSentLocationRejects cgkLocalZoneStatsRegistrationTable-> cgkLZoneStatsFullRegistrationRequests, cgkLZoneStatsLightRegistrationRequests, cgkLZoneStatsRegistrationConfirms, cgkLZoneStatsRegistrationRejects, cgkLZoneStatsRegisteredEndpoints cgkLocalZoneStatsUnRegistrationTable-> cgkLZoneStatsRcvdUnregistrationRequests, cgkLZoneStatsSentUnregistrationRequests, cgkLZoneStatsTimeoutSentUnregistrationRequests, cgkLZoneStatsRcvdUnregistrationConfirms, cgkLZoneStatsSentUnregistrationConfirms, cgkLZoneStatsRcvdUnregistrationRejects, cgkLZoneStatsSentUnregistrationRejects cgkLocalZoneStatsDisengageTable-> cgkLZoneStatsRcvdDisengageRequests, cgkLZoneStatsSentDisengageRequests, cgkLZoneStatsRcvdDisengageConfirms, cgkLZoneStatsSentDisengageConfirms, cgkLZoneStatsRcvdDisengageRejects, cgkLZoneStatsSentDisengageRejects.', 'Add a new object cgkLZoneTotalConcurrentCalls to report the total concurrent calls on a zone basis.', 'Add a new object cgkLZoneProxiedCallBits to replace the existing object cgkLZoneProxiedCall. cgkLZoneProxiedCall is defined as INTEGER(0..15), and is being used as a bit mask. The range 0..15 only allows for 4 bits to be defined. In order to add two new bits for MCU devices (inboundToMcu and outboundFromMcu) the new object cgkLZoneProxiedCallBits will be used to contain all of the old bit definitions plus the new ones. The existing object, cgkLZoneProxiedCall is deprecated.', "Changed IntrazoneBandwidth to TotalBandwidth in all tables, to clarify meaning of table entries. Correct the range and default values for total bandwidth, interzone bandwidth and session bandwidth in the LocalZoneTable. Change syntax for allocated total and interzone bandwidth gauges in LocalZoneTable. Updated cgkZoneEntry and cgkZoneRowStatus to indicate that items in the table may not be modified when the row is 'active'. Moved cgkZoneProxiedCall entry to LocalZone Table. In conformance section added entry to specify MIN-ACCESS for cgkZoneIrrFrequency to be read-only, as the agent code currently does not allow this item to be set. Changed the maximum range value for cgkHistoryMaxEventEntries to 1000. Added definitions for cgkMIBDefaultTotalBandwidth cgkMIBDefaultInterzoneBandwidth cgkMIBDefaultSessionBandwidth.", 'Add support for interzone bandwidth, session bandwidth, and LRQ counters to zone table. Add support for notification of events. Add registration, unregistration and overload events.', 'The initial version of the mib.',))
if mibBuilder.loadTexts: ciscoGatekeeperMIB.setLastUpdated('200708290000Z')
if mibBuilder.loadTexts: ciscoGatekeeperMIB.setOrganization('Cisco Systems, Inc')
if mibBuilder.loadTexts: ciscoGatekeeperMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-h323@cisco.com')
if mibBuilder.loadTexts: ciscoGatekeeperMIB.setDescription('The MIB Module supports the functions of a gatekeeper. The gatekeeper is a function of the H.323 Packet Based Multimedia Communications Systems, a standard of TU. The gatekeeper provides address translation and controls access to the network for H.323 terminals.')
ciscoGatekeeperMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1))
cgkZone = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1))
cgkHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2))
cgkGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 3))
cgkGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4))
cgkZoneStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4))
cgkRemoteZone = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 5))
cgkZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1), )
if mibBuilder.loadTexts: cgkZoneTable.setStatus('current')
if mibBuilder.loadTexts: cgkZoneTable.setDescription('The table contains the local zones supported by the Gatekeeper and the remote zones which the Gatekeeper may or has interacted with.')
cgkZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkZoneEntry.setStatus('current')
if mibBuilder.loadTexts: cgkZoneEntry.setDescription("An entry (conceptual row) in the cgkZoneTable. An entry may be created administratively or by the gatekeeper during normal gatekeeper operations. No writable objects may be changed while cgkZoneRowStatus is 'active'. When removing an entry from the table, corresponding entries in the cgkZoneSubnetTable and cgkLocalZoneTable may be removed.")
cgkZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgkZoneIndex.setStatus('current')
if mibBuilder.loadTexts: cgkZoneIndex.setDescription('An unsigned integer value whose only significance is to uniquely identify the conceptual row. The value has no significance.')
cgkZoneZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 2), CgkGatekeeperID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneZoneName.setStatus('current')
if mibBuilder.loadTexts: cgkZoneZoneName.setDescription('The name of the zone . e.g. zone1.company.com This object is required for zone creation.')
cgkZoneDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneDomain.setStatus('current')
if mibBuilder.loadTexts: cgkZoneDomain.setDescription('The domain name. e.g. company.com This object is required for zone creation.')
cgkZoneRasAddressTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 4), CgkTAddressTag().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneRasAddressTag.setStatus('current')
if mibBuilder.loadTexts: cgkZoneRasAddressTag.setDescription('The tag identifying the underlying type of cgkZoneRasAddress.')
cgkZoneRasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 5), TAddress().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneRasAddress.setStatus('current')
if mibBuilder.loadTexts: cgkZoneRasAddress.setDescription('The RAS Signal transport address of the gatekeeper supporting the zone.')
cgkZoneIrrFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(240)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneIrrFrequency.setStatus('current')
if mibBuilder.loadTexts: cgkZoneIrrFrequency.setDescription('The IRR time a gatekeeper returns in an ACF.')
cgkZoneLocalZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneLocalZone.setStatus('current')
if mibBuilder.loadTexts: cgkZoneLocalZone.setDescription("If this gatekeeper manages the zone, then this value is 'true' otherwise it is false.")
cgkZoneDefaultSubnetFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneDefaultSubnetFlags.setStatus('current')
if mibBuilder.loadTexts: cgkZoneDefaultSubnetFlags.setDescription("If there is no entry in the cgkZoneSubnetTable matching the subnet of the GRQ originator, then the gatekeeper uses the value of this object for determining the response. The description of the value is: enable Gatekeeper response to a GRQ/LRQ is GCF/LCF if the GRQ/LRQ has a matching or NULL gatekeeperIdentifier. disable Gatekeeper does not respond if the gatekeeper identifier in the GRQ/LRQ doesn't match.")
cgkZoneAddressLookupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkZoneAddressLookupFailures.setStatus('current')
if mibBuilder.loadTexts: cgkZoneAddressLookupFailures.setDescription('The number of times the gatekeeper is unable to resolve an address.')
cgkZoneEndpointTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkZoneEndpointTimeouts.setStatus('current')
if mibBuilder.loadTexts: cgkZoneEndpointTimeouts.setDescription('The number of times the cgkEpTimeToLive has expired for an endpoint in this zone.')
cgkZoneOtherFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkZoneOtherFailures.setStatus('current')
if mibBuilder.loadTexts: cgkZoneOtherFailures.setDescription('The number of call attempts which have failed for reasons other than cgkZoneEndpointTimeouts or cgkZoneAddressLookupFailures.')
cgkZoneLRQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkZoneLRQs.setStatus('current')
if mibBuilder.loadTexts: cgkZoneLRQs.setDescription("The number of LRQs received by the gatekeeper for a particular local zone. If cgkZoneLocalZone is 'false' then the value of this object has no meaning.")
cgkZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgkZoneRowStatus.setDescription("The row status of the entry. This object is required to create or delete rows administratively. The transition from 'active' to 'notInService' may not be supported. No objects in the row may be modified when the row is 'active'.")
cgkZoneSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2), )
if mibBuilder.loadTexts: cgkZoneSubnetTable.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetTable.setDescription("The table identifies communication characteristics between a gatekeeper and endpoints whose RAS address is on specified IP subnets. This table is appropriate for a zone whose znRasAddressTag is 'ipv4' or 'ipv6'.")
cgkZoneSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"), (0, "CISCO-GATEKEEPER-MIB", "cgkZoneSubnetTag"), (1, "CISCO-GATEKEEPER-MIB", "cgkZoneSubnetAddress"))
if mibBuilder.loadTexts: cgkZoneSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetEntry.setDescription("An entry in the cgkZoneSubnetTable is a configured item giving gatekeeper protocol behavior with endpoints whose RAS address is in the specified subnet. An entry may be created only administratively. Writable objects may be changed while a conceptual row is 'active'.")
cgkZoneSubnetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2, 1, 1), CgkNAddressTag())
if mibBuilder.loadTexts: cgkZoneSubnetTag.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetTag.setDescription('The tag identifying the underlying type of cgkZoneSubnetAddress and cgkZoneSubnetMask.')
cgkZoneSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2, 1, 2), CgkNAddress())
if mibBuilder.loadTexts: cgkZoneSubnetAddress.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetAddress.setDescription('The subnet address of the zone.')
cgkZoneSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2, 1, 3), CgkNAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetMask.setDescription("The subnet mask and cgkZoneSubnetAddress must have the relationship (cgkZoneSubnetAddress & cgkZoneSubnetMask) == cgkZoneSubnetAddress that is the bitwise AND of cgkZoneSubnetAddress with cgkZoneSubnetAddress must equal cgkZoneSubnetAddress otherwise the set request shall fail with a 'inconsistentValue' error. This object is required for row creation.")
cgkZoneSubnetFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneSubnetFlags.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetFlags.setDescription("If there is an entry in the cgkZoneSubnetTable matching the subnet of the GRQ/LRQ originator, then the gatekeeper uses the value of this attribute to determine the response. The description of the value follows: enable Gatekeeper response to a GRQ/LRQ is GCF/LCF if the GRQ/LRQ has a matching or NULL gatekeeperIdentifier. disable Gatekeeper does not respond if the gatekeeper identifier in the GRQ/LRQ doesn't match.")
cgkZoneSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgkZoneSubnetRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetRowStatus.setDescription("The row status of the entry. New rows are created using 'createAndGo' and deleted using 'destroy'. Once 'active' this object may be set to only 'destroy' and only cgkZoneSubnetFlags may be modified.")
cgkLocalZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3), )
if mibBuilder.loadTexts: cgkLocalZoneTable.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneTable.setDescription('The table contains information specific to the local zones supported by the Gatekeeper.')
cgkLocalZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkLocalZoneEntry.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneEntry.setDescription('A single gatekeeper locally managed zone. An entry is created in this table when an entry in the cgkZoneTable is created with cgkZoneLocalZone set to a value of true. The entry is removed when its associated entry in the cgkZoneTable is deleted or when cgkZoneLocalZone is set false.')
cgkLZoneACFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneACFs.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneACFs.setDescription('The number of ACFs sent by the gatekeeper for the local zone.')
cgkLZoneARJs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneARJs.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneARJs.setDescription('The number of ARJs sent by the gatekeeper for the local zone.')
cgkLZoneTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkLZoneTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneTotalBandwidth.setDescription('The maximum bidirectional bandwidth which a gatekeeper can allocate to all calls in the zone. Value must be greater than or equal to the value specified in cgkLZoneInterZoneBandwith. A value of -1 indicates no bandwidth limitation has been set, and the value defined by cgkMIBDefaultTotalBandwidth is used.')
cgkLZoneAllocTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('100 bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneAllocTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneAllocTotalBandwidth.setDescription('The total bidirectional bandwidth allocated by the gatekeeper to the active calls. This value will not exceed the value of cgkLZoneTotalBandwidth.')
cgkLZoneInterzoneBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkLZoneInterzoneBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneInterzoneBandwidth.setDescription('The maximum bidirectional bandwidth which a gatekeeper can allocate to all calls between this zone and all other zones. Value must be less than or equal to the value specified in cgkLZoneTotalBandwith. A value of -1 indicates no bandwidth limitation has been set, and the value defined by cgkMIBDefaultInterzoneBandwidth is used.')
cgkLZoneAllocInterzoneBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('100 bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneAllocInterzoneBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneAllocInterzoneBandwidth.setDescription('The total bidirectional bandwidth allocated by the gatekeeper to the active calls between this zone and all other zones. This value will not exceed the value of cgkLZoneInterzoneBandwidth.')
cgkLZoneSessionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkLZoneSessionBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneSessionBandwidth.setDescription('The maximum bidirectional bandwidth which a gatekeeper can allocate to a call in this zone. A value of -1 indicates no bandwidth limitation has been set, and the value defined by cgkMIBDefaultSessionBandwidth is used.')
cgkLZoneProxiedCall = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkLZoneProxiedCall.setStatus('deprecated')
if mibBuilder.loadTexts: cgkLZoneProxiedCall.setDescription('This is a bit mask value that specifies what type of calls into or out of the zone are handled by the proxy. It consists of the following bits ORed together none (0), inboundToTerminal (1), inboundToGateway (2), outboundFromTerminal (4), outboundFromGateway (8) When a cisco gatekeeper receives an LRQ and the call type matches that specified by a bit set in this bit mask, then the gatekeeper returns the call signal address of the proxy end point otherwise it returns the call signal address of the destination endpoint.')
cgkLZoneProxiedCallBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("inboundToTerminal", 0), ("inboundToGateway", 1), ("outboundFromTerminal", 2), ("outboundFromGateway", 3), ("inboundToMcu", 4), ("outboundFromMcu", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkLZoneProxiedCallBits.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneProxiedCallBits.setDescription('These bits specify what type of calls into or out of the zone are handled by the proxy. When a cisco gatekeeper receives an LRQ and the call type matches that specified by a bit set in this bit mask, then the gatekeeper returns the call signal address of the proxy end point otherwise it returns the call signal address of the destination endpoint.')
cgkLZoneTotalConcurrentCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneTotalConcurrentCalls.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneTotalConcurrentCalls.setDescription('The number of concurrent calls on a zone basis.')
cgkLocalZoneStatsAdmissionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cgkLocalZoneStatsAdmissionTable.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsAdmissionTable.setDescription("This table contains the information about Admission statistics data for a local zone managed by this Gatekeeper. If cgkZoneLocalZone is 'false' for a particular zone, there will be no entry in this table for that cgkZoneIndex.")
cgkLocalZoneStatsAdmissionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkLocalZoneStatsAdmissionTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsAdmissionTableEntry.setDescription('An entry in the cgkLocalZoneStatsAdmissionTable.')
cgkLZoneStatsAdmissionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsAdmissionRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsAdmissionRequests.setDescription("The number of Admission Requests received for the local zone. Represents the sum of ARQ's received from both the originating and terminating endpoints for the local zone.")
cgkLZoneStatsOriginAdmissionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsOriginAdmissionRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsOriginAdmissionRequests.setDescription('The number of Admission Requests received from the Originating endpoint for the local zone.')
cgkLZoneStatsOriginAdmissionConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsOriginAdmissionConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsOriginAdmissionConfirms.setDescription('The number of Admission Confirms sent to the Originating endpoint for the local zone.')
cgkLZoneStatsOriginAdmissionRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsOriginAdmissionRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsOriginAdmissionRejects.setDescription('The number of Admission Rejects sent to the Originating endpoint for the local zone.')
cgkLZoneStatsOriginTotalConcurrentCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsOriginTotalConcurrentCalls.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsOriginTotalConcurrentCalls.setDescription('The number of concurrent originating calls on a zone basis. When this Gatekeeper is under cluster then this parameter represents the total originating calls in the cluster.')
cgkLocalZoneStatsLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cgkLocalZoneStatsLocationTable.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsLocationTable.setDescription("This table contains the information about Location statistics data for a local zone managed by this Gatekeeper. If cgkZoneLocalZone is 'false' for a particular zone, there will be no entry in this table for that cgkZoneIndex.")
cgkLocalZoneStatsLocationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkLocalZoneStatsLocationTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsLocationTableEntry.setDescription('An entry in the cgkLocalZoneStatsLocationTable.')
cgkLZoneStatsSentLocationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentLocationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentLocationRequests.setDescription('The number of Location Requests sent for the local zone.')
cgkLZoneStatsRcvdLocationConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdLocationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdLocationConfirms.setDescription('The number of Location Confirms received for the local zone.')
cgkLZoneStatsSentLocationConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentLocationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentLocationConfirms.setDescription('The number of Location Confirms sent for the local zone.')
cgkLZoneStatsRcvdLocationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdLocationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdLocationRejects.setDescription('The number of Location Rejects received for the local zone.')
cgkLZoneStatsSentLocationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentLocationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentLocationRejects.setDescription('The number of Location Rejects sent for the local zone.')
cgkLocalZoneStatsRegistrationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cgkLocalZoneStatsRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsRegistrationTable.setDescription("This table contains the information about Registration statistics data for a local zone managed by this Gatekeeper. If cgkZoneLocalZone is 'false' for a particular zone, there will be no entry in this table for that cgkZoneIndex.")
cgkLocalZoneStatsRegistrationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkLocalZoneStatsRegistrationTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsRegistrationTableEntry.setDescription('An entry in the cgkLocalZoneStatsRegistrationTable.')
cgkLZoneStatsFullRegistrationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsFullRegistrationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsFullRegistrationRequests.setDescription('The number of Full Registration Requests received for the local zone.')
cgkLZoneStatsLightRegistrationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsLightRegistrationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsLightRegistrationRequests.setDescription('The number of Lightweight Registration Requests received for the local zone.')
cgkLZoneStatsRegistrationConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRegistrationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRegistrationConfirms.setDescription('The number of Registration Confirms sent for the local zone.')
cgkLZoneStatsRegistrationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRegistrationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRegistrationRejects.setDescription('The number of Registration Rejects sent for the local zone.')
cgkLZoneStatsRegisteredEndpoints = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRegisteredEndpoints.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRegisteredEndpoints.setDescription('The number of currently active real registered endpoints for the local zone.')
cgkLocalZoneStatsUnRegistrationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4), )
if mibBuilder.loadTexts: cgkLocalZoneStatsUnRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsUnRegistrationTable.setDescription("This table contains the information about UnRegistration statistics data for a local zone managed by this Gatekeeper. If cgkZoneLocalZone is 'false' for a particular zone, there will be no entry in this table for that cgkZoneIndex.")
cgkLocalZoneStatsUnRegistrationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkLocalZoneStatsUnRegistrationTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsUnRegistrationTableEntry.setDescription('An entry in the cgkLocalZoneStatsUnRegistrationTable.')
cgkLZoneStatsRcvdUnregistrationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdUnregistrationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdUnregistrationRequests.setDescription('The number of Unregistration Requests received for the local zone.')
cgkLZoneStatsSentUnregistrationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentUnregistrationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentUnregistrationRequests.setDescription('The number of Unregistration Requests sent for the local zone.')
cgkLZoneStatsTimeoutSentUnregistrationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsTimeoutSentUnregistrationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsTimeoutSentUnregistrationRequests.setDescription('The number of forced Unregistration Requests sent for the local zone due to Timeout.')
cgkLZoneStatsRcvdUnregistrationConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdUnregistrationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdUnregistrationConfirms.setDescription('The number of Unregistration Confirms received for the local zone.')
cgkLZoneStatsSentUnregistrationConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentUnregistrationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentUnregistrationConfirms.setDescription('The number of Unregistration Confirms sent for the local zone.')
cgkLZoneStatsRcvdUnregistrationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdUnregistrationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdUnregistrationRejects.setDescription('The number of Unregistration Rejects received for the local zone.')
cgkLZoneStatsSentUnregistrationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentUnregistrationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentUnregistrationRejects.setDescription('The number of Unregistration Rejects sent for the local zone.')
cgkLocalZoneStatsDisengageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5), )
if mibBuilder.loadTexts: cgkLocalZoneStatsDisengageTable.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsDisengageTable.setDescription("This table contains the information about Disengage statistics data for a local zone managed by this Gatekeeper. If cgkZoneLocalZone is 'false' for a particular zone, there will be no entry in this table for that cgkZoneIndex.")
cgkLocalZoneStatsDisengageTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkZoneIndex"))
if mibBuilder.loadTexts: cgkLocalZoneStatsDisengageTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneStatsDisengageTableEntry.setDescription('An entry in the cgkLocalZoneStatsDisengageTable.')
cgkLZoneStatsRcvdDisengageRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdDisengageRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdDisengageRequests.setDescription('The number of Disengage Requests received for the local zone.')
cgkLZoneStatsSentDisengageRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentDisengageRequests.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentDisengageRequests.setDescription('The number of Disengage Requests sent for the local zone.')
cgkLZoneStatsRcvdDisengageConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdDisengageConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdDisengageConfirms.setDescription('The number of Disengage Confirms received for the local zone.')
cgkLZoneStatsSentDisengageConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentDisengageConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentDisengageConfirms.setDescription('The number of Disengage Confirms sent for the local zone.')
cgkLZoneStatsRcvdDisengageRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsRcvdDisengageRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsRcvdDisengageRejects.setDescription('The number of Disengage Rejects received for the local zone.')
cgkLZoneStatsSentDisengageRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkLZoneStatsSentDisengageRejects.setStatus('current')
if mibBuilder.loadTexts: cgkLZoneStatsSentDisengageRejects.setDescription('The number of Disengage Rejects sent for the local zone.')
cgkRZoneTotalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkRZoneTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkRZoneTotalBandwidth.setDescription('The maximum bidirectional bandwidth which a remote gatekeeper can allocate to all calls to the zone, supported by it. A value of -1 indicates no bandwidth limitation has been set, and the value defined by cgkMIBDefaultTotalBandwidth is used.')
cgkRZoneAllocTotalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 1, 5, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('100 bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkRZoneAllocTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkRZoneAllocTotalBandwidth.setDescription('The total bidirectional bandwidth allocated by the gatekeeper to the active calls. If cgkRZoneTotalBandwidth is configured and not equal to -1, then this value will not exceed the value of cgkRZoneTotalBandwidth. The value 0 indicates that currently there are no remote zone bandwidth allocated.')
cgkHistoryMaxEventEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkHistoryMaxEventEntries.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryMaxEventEntries.setDescription('The maximum number of entries that can be held in cgkHistoryEventTable. The default value for this object is 20.')
cgkHistoryEventTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2), )
if mibBuilder.loadTexts: cgkHistoryEventTable.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventTable.setDescription('The table contains a history of notification events which occurred during Gatekeeper operation.')
cgkHistoryEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-GATEKEEPER-MIB", "cgkHistoryEventIndex"))
if mibBuilder.loadTexts: cgkHistoryEventEntry.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventEntry.setDescription('Information about a notification event on this Gatekeeper.')
cgkHistoryEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cgkHistoryEventIndex.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing events. When it reaches the maximum value, an extremely unlikely event, the agent wraps the value back to 1 and may flush existing entries.')
cgkHistoryEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("register", 2), ("unregister", 3), ("unregisterForced", 4), ("overload", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventType.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventType.setDescription('The object indicates the event that occurred. other - An event other than the ones listed below. register - A full RRQ was received by the gatekeeper to register a previously unregistered endpoint. unregister - An endpoint was unregistered because it sent a URQ to the gatekeeper. unregisterForced - The gatekeeper sent a URQ to the endpoint. overload - The gatekeeper has detected sustained overload. A sustained overload condition will cause the gatekeeper to reject calls.')
cgkHistoryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventTime.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventTime.setDescription('The value of sysUpTime when the running configuration when the event occurred.')
cgkHistoryEventText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventText.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventText.setDescription('The object indicates the event reason for the current or last event. It should be used only for direct, human-readable display and only if a management station is unable to decode the value of cgkHistoryEventType.')
cgkHistoryEventEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("gatekeeper", 3), ("gateway", 4), ("mcu", 5), ("terminal", 6), ("proxy", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventEndpointType.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventEndpointType.setDescription('The type of the endpoint that triggered the register or unregister event. none - No endpoint is associated with this event. other - An endpoint type other than the ones listed below. gatekeeper - The endpoint is a Gatekeeper. gateway - The endpoint is a Gateway (and not a proxy). mcu - The endpoint is a Multipoint Control Unit. terminal - The endpoint is an H.323 terminal. proxy - The endpoint is a Proxy.')
cgkHistoryEventEndpointAddrTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 6), CgkNAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventEndpointAddrTag.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventEndpointAddrTag.setDescription('The type of network address associated with the endpoint that triggered the register or unregister event. This field is not valid for other event types.')
cgkHistoryEventEndpointAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 7), CgkNAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventEndpointAddress.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventEndpointAddress.setDescription('The network address associated with the endpoint that triggered the register or unregister event. This field is not valid for other event types.')
cgkHistoryEventEndpointH323id = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 2, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkHistoryEventEndpointH323id.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventEndpointH323id.setDescription('The H323 ID of the endpoint associated with the register or unregister event. This field is not valid for other event types.')
cgkMIBEnableEventNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkMIBEnableEventNotification.setStatus('current')
if mibBuilder.loadTexts: cgkMIBEnableEventNotification.setDescription('Indicates whether or not an Event Alarm Notification will be generated by the Gatekeeper. A false value will prevent the Gatekeeper from generating the notification.')
cgkMIBDefaultTotalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkMIBDefaultTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkMIBDefaultTotalBandwidth.setDescription('The value of this object represents the maximum bi-directional bandwidth which can be allocated by a gatekeeper for call connections in a zone. When no value has been assigned to a particular cgkLZoneTotalBandwidth entry i.e. its value is -1, the value of this object is used for the maximum bi-directional bandwidth of the call connections in that zone. Value must be greater than or equal to the value specified in cgkMIBDefaultInterZoneBandwith. A value of -1 indicates no bandwidth limitation has been set.')
cgkMIBDefaultInterzoneBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkMIBDefaultInterzoneBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkMIBDefaultInterzoneBandwidth.setDescription('The value of this object represents the maximum bi-directional bandwidth which can be allocated by a gatekeeper for call connections from one zone to other zones. When no value has been assigned to a particular cgkLZoneInterzoneBandwidth entry i.e. its value is -1, the value of this object is used for the maximum bi-directional bandwidth of the call connections between that zone and other zones. Value must be less than or equal to the value specified in cgkMIBDefaultTotalBandwith. A value of -1 indicates no bandwidth limitation has been set.')
cgkMIBDefaultSessionBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000)).clone(-1)).setUnits('100 bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgkMIBDefaultSessionBandwidth.setStatus('current')
if mibBuilder.loadTexts: cgkMIBDefaultSessionBandwidth.setDescription('When no value has been assigned to a particular cgkLZoneSessionBandwidth entry i.e. its value is -1, then this value defines the maximum bidirectional bandwidth which a gatekeeper can allocate to a call in that zone. This value represents the total bidirectional data flow in units of hundreds bits per second (bps). A value of 10 is 1000bps. A value of -1 indicates no bandwidth limitation has been set.')
cgkStatsAdmissionRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsAdmissionRequests.setStatus('current')
if mibBuilder.loadTexts: cgkStatsAdmissionRequests.setDescription("The total number of Admission Requests received by the Gatekeeper. Represents the sum of ARQ's received from both the originating and terminating endpoint.")
cgkStatsOriginAdmissionRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsOriginAdmissionRequests.setStatus('current')
if mibBuilder.loadTexts: cgkStatsOriginAdmissionRequests.setDescription('The number of Admission Requests received from the Originating endpoint for the Gatekeeper.')
cgkStatsAdmissionConfirms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsAdmissionConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkStatsAdmissionConfirms.setDescription('The number of Admission Confirms sent by the Gatekeeper.')
cgkStatsOriginAdmissionConfirms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsOriginAdmissionConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkStatsOriginAdmissionConfirms.setDescription('The number of Admission Confirms sent to the Originating endpoint by the Gatekeeper.')
cgkStatsAdmissionRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsAdmissionRejects.setStatus('current')
if mibBuilder.loadTexts: cgkStatsAdmissionRejects.setDescription('The number of Admission Rejects sent by the Gatekeeper.')
cgkStatsOriginAdmissionRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsOriginAdmissionRejects.setStatus('current')
if mibBuilder.loadTexts: cgkStatsOriginAdmissionRejects.setDescription('The number of Admission Rejects sent to the Originating endpoint by the Gatekeeper.')
cgkStatsTotalConcurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsTotalConcurrentCalls.setStatus('current')
if mibBuilder.loadTexts: cgkStatsTotalConcurrentCalls.setDescription('The number of concurrent calls on the Gatekeeper. This counter is incremented when ACF is sent for a particular Admission Request and decremented when DRQ is sent or received by the Gatekeeper.')
cgkStatsOriginTotalConcurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsOriginTotalConcurrentCalls.setStatus('current')
if mibBuilder.loadTexts: cgkStatsOriginTotalConcurrentCalls.setDescription('The number of concurrent originating calls on the Gatekeeper.')
cgkStatsRcvdLocationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRcvdLocationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRcvdLocationRequests.setDescription('The number of Location Requests received by the Gatekeeper.')
cgkStatsSentLocationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsSentLocationRequests.setStatus('current')
if mibBuilder.loadTexts: cgkStatsSentLocationRequests.setDescription('The number of Location Requests sent by the Gatekeeper.')
cgkStatsRcvdLocationConfirms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRcvdLocationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRcvdLocationConfirms.setDescription('The number of Location Confirms received by the Gatekeeper.')
cgkStatsSentLocationConfirms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsSentLocationConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkStatsSentLocationConfirms.setDescription('The number of Location Confirms sent by the Gatekeeper.')
cgkStatsRcvdLocationRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRcvdLocationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRcvdLocationRejects.setDescription('The number of Location Rejects received by the Gatekeeper.')
cgkStatsSentLocationRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsSentLocationRejects.setStatus('current')
if mibBuilder.loadTexts: cgkStatsSentLocationRejects.setDescription('The number of Location Rejects sent by the Gatekeeper.')
cgkStatsRegisteredEndpoints = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRegisteredEndpoints.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRegisteredEndpoints.setDescription('The per Gatekeeper level Registered endpoints.')
cgkStatsRcvdDisengageRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRcvdDisengageRequests.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRcvdDisengageRequests.setDescription('The number of Disengage Requests received by the Gatekeeper.')
cgkStatsSentDisengageRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsSentDisengageRequests.setStatus('current')
if mibBuilder.loadTexts: cgkStatsSentDisengageRequests.setDescription('The number of Disengage Requests sent by the Gatekeeper.')
cgkStatsRcvdDisengageConfirms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRcvdDisengageConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRcvdDisengageConfirms.setDescription('The number of Disengage Confirms received by the Gatekeeper.')
cgkStatsSentDisengageConfirms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsSentDisengageConfirms.setStatus('current')
if mibBuilder.loadTexts: cgkStatsSentDisengageConfirms.setDescription('The number of Disengage Confirms sent by the Gatekeeper.')
cgkStatsRcvdDisengageRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsRcvdDisengageRejects.setStatus('current')
if mibBuilder.loadTexts: cgkStatsRcvdDisengageRejects.setDescription('The number of Disengage Rejects received by the Gatekeeper.')
cgkStatsSentDisengageRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 40, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgkStatsSentDisengageRejects.setStatus('current')
if mibBuilder.loadTexts: cgkStatsSentDisengageRejects.setDescription('The number of Disengage Rejects sent by the Gatekeeper.')
ciscoGatekeeperMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 2))
ciscoGatekeeperMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 2, 0))
ciscoGatekeeperEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 40, 2, 0, 1)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkHistoryEventType"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointType"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointAddrTag"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointAddress"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointH323id"))
if mibBuilder.loadTexts: ciscoGatekeeperEvent.setStatus('current')
if mibBuilder.loadTexts: ciscoGatekeeperEvent.setDescription('A ciscoGatekeeperEvent is sent whenever a new event is added to the cgkHistoryEventTable.')
ciscoGatekeeperMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 3))
ciscoGatekeeperMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 1))
ciscoGatekeeperMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2))
cgkGatekeeperCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 1, 1)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetGroup"), ("CISCO-GATEKEEPER-MIB", "cgkLocalZoneGroup"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralGroup"), ("CISCO-GATEKEEPER-MIB", "cgkNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGatekeeperCompliance = cgkGatekeeperCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cgkGatekeeperCompliance.setDescription('The set of objects required for compliance.')
cgkGatekeeperComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 1, 2)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetGroup"), ("CISCO-GATEKEEPER-MIB", "cgkLocalZoneGroupRev1"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralGroup"), ("CISCO-GATEKEEPER-MIB", "cgkNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGatekeeperComplianceRev1 = cgkGatekeeperComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cgkGatekeeperComplianceRev1.setDescription('The set of objects required for compliance.')
cgkGatekeeperComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 1, 3)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetGroup"), ("CISCO-GATEKEEPER-MIB", "cgkLocalZoneGroupRev2"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralGroup"), ("CISCO-GATEKEEPER-MIB", "cgkNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGatekeeperComplianceRev2 = cgkGatekeeperComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cgkGatekeeperComplianceRev2.setDescription('The set of objects required for compliance.')
cgkGatekeeperComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 1, 4)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetGroup"), ("CISCO-GATEKEEPER-MIB", "cgkLocalZoneGroupRev2"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneMgmtStatsGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralMgmtStatsGroup"), ("CISCO-GATEKEEPER-MIB", "cgkNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGatekeeperComplianceRev3 = cgkGatekeeperComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cgkGatekeeperComplianceRev3.setDescription('The set of objects required for compliance.')
cgkGatekeeperComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 1, 5)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetGroup"), ("CISCO-GATEKEEPER-MIB", "cgkLocalZoneGroupRev2"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralGroup"), ("CISCO-GATEKEEPER-MIB", "cgkZoneMgmtStatsGroup"), ("CISCO-GATEKEEPER-MIB", "cgkGeneralMgmtStatsGroup"), ("CISCO-GATEKEEPER-MIB", "cgkNotificationsGroup"), ("CISCO-GATEKEEPER-MIB", "cgkRemoteZoneGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGatekeeperComplianceRev4 = cgkGatekeeperComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: cgkGatekeeperComplianceRev4.setDescription('The set of objects required for compliance.')
cgkZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 1)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneZoneName"), ("CISCO-GATEKEEPER-MIB", "cgkZoneDomain"), ("CISCO-GATEKEEPER-MIB", "cgkZoneRasAddressTag"), ("CISCO-GATEKEEPER-MIB", "cgkZoneRasAddress"), ("CISCO-GATEKEEPER-MIB", "cgkZoneIrrFrequency"), ("CISCO-GATEKEEPER-MIB", "cgkZoneLocalZone"), ("CISCO-GATEKEEPER-MIB", "cgkZoneDefaultSubnetFlags"), ("CISCO-GATEKEEPER-MIB", "cgkZoneAddressLookupFailures"), ("CISCO-GATEKEEPER-MIB", "cgkZoneEndpointTimeouts"), ("CISCO-GATEKEEPER-MIB", "cgkZoneOtherFailures"), ("CISCO-GATEKEEPER-MIB", "cgkZoneLRQs"), ("CISCO-GATEKEEPER-MIB", "cgkZoneRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkZoneGroup = cgkZoneGroup.setStatus('current')
if mibBuilder.loadTexts: cgkZoneGroup.setDescription('The set of objects a gatekeeper must support for local and remote zones.')
cgkZoneSubnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 2)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetMask"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetFlags"), ("CISCO-GATEKEEPER-MIB", "cgkZoneSubnetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkZoneSubnetGroup = cgkZoneSubnetGroup.setStatus('current')
if mibBuilder.loadTexts: cgkZoneSubnetGroup.setDescription('The set of objects a gatekeeper supports for identifying access between zones based on IP subnet.')
cgkLocalZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 3)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkLZoneACFs"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneARJs"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneAllocTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneAllocInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneSessionBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneProxiedCall"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkLocalZoneGroup = cgkLocalZoneGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgkLocalZoneGroup.setDescription('The set of objects a gatekeeper must support for a local zone.')
cgkHistoryEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 4)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkHistoryMaxEventEntries"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventType"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventTime"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventText"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointType"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointAddress"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointAddrTag"), ("CISCO-GATEKEEPER-MIB", "cgkHistoryEventEndpointH323id"), ("CISCO-GATEKEEPER-MIB", "cgkMIBEnableEventNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkHistoryEventGroup = cgkHistoryEventGroup.setStatus('current')
if mibBuilder.loadTexts: cgkHistoryEventGroup.setDescription('The set of objects a gatekeeper supports to record notification events.')
cgkGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 5)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkMIBDefaultTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkMIBDefaultInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkMIBDefaultSessionBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGeneralGroup = cgkGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cgkGeneralGroup.setDescription('The set of objects a gatekeeper must support for general configuration.')
cgkNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 6)).setObjects(("CISCO-GATEKEEPER-MIB", "ciscoGatekeeperEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkNotificationsGroup = cgkNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cgkNotificationsGroup.setDescription('The set of notification events a gatekeeper supports.')
cgkLocalZoneGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 7)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkLZoneACFs"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneARJs"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneAllocTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneAllocInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneSessionBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneProxiedCall"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneProxiedCallBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkLocalZoneGroupRev1 = cgkLocalZoneGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cgkLocalZoneGroupRev1.setDescription('The set of objects a gatekeeper must support for a local zone.')
cgkLocalZoneGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 8)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkLZoneACFs"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneARJs"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneAllocTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneAllocInterzoneBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneSessionBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneProxiedCallBits"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneTotalConcurrentCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkLocalZoneGroupRev2 = cgkLocalZoneGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cgkLocalZoneGroupRev2.setDescription('The set of objects a gatekeeper must support for a local zone.')
cgkZoneMgmtStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 9)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsAdmissionRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsOriginAdmissionRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsOriginAdmissionConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsOriginAdmissionRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsOriginTotalConcurrentCalls"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentLocationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdLocationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentLocationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdLocationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentLocationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsFullRegistrationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsLightRegistrationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRegistrationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRegistrationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRegisteredEndpoints"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdUnregistrationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentUnregistrationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsTimeoutSentUnregistrationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdUnregistrationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentUnregistrationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdUnregistrationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentUnregistrationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdDisengageRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentDisengageRequests"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdDisengageConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentDisengageConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsRcvdDisengageRejects"), ("CISCO-GATEKEEPER-MIB", "cgkLZoneStatsSentDisengageRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkZoneMgmtStatsGroup = cgkZoneMgmtStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cgkZoneMgmtStatsGroup.setDescription('The set of objects a gatekeeper must support for zone management statistics.')
cgkGeneralMgmtStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 10)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkStatsAdmissionRequests"), ("CISCO-GATEKEEPER-MIB", "cgkStatsOriginAdmissionRequests"), ("CISCO-GATEKEEPER-MIB", "cgkStatsAdmissionConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkStatsOriginAdmissionConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkStatsAdmissionRejects"), ("CISCO-GATEKEEPER-MIB", "cgkStatsOriginAdmissionRejects"), ("CISCO-GATEKEEPER-MIB", "cgkStatsTotalConcurrentCalls"), ("CISCO-GATEKEEPER-MIB", "cgkStatsOriginTotalConcurrentCalls"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRcvdLocationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkStatsSentLocationRequests"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRcvdLocationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkStatsSentLocationConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRcvdLocationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkStatsSentLocationRejects"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRegisteredEndpoints"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRcvdDisengageRequests"), ("CISCO-GATEKEEPER-MIB", "cgkStatsSentDisengageRequests"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRcvdDisengageConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkStatsSentDisengageConfirms"), ("CISCO-GATEKEEPER-MIB", "cgkStatsRcvdDisengageRejects"), ("CISCO-GATEKEEPER-MIB", "cgkStatsSentDisengageRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkGeneralMgmtStatsGroup = cgkGeneralMgmtStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cgkGeneralMgmtStatsGroup.setDescription('The set of objects a gatekeeper must support for GK level management statistics.')
cgkRemoteZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 40, 3, 2, 11)).setObjects(("CISCO-GATEKEEPER-MIB", "cgkRZoneTotalBandwidth"), ("CISCO-GATEKEEPER-MIB", "cgkRZoneAllocTotalBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgkRemoteZoneGroup = cgkRemoteZoneGroup.setStatus('current')
if mibBuilder.loadTexts: cgkRemoteZoneGroup.setDescription('The set of objects a gatekeeper must support for a remote zone.')
mibBuilder.exportSymbols("CISCO-GATEKEEPER-MIB", cgkLZoneStatsTimeoutSentUnregistrationRequests=cgkLZoneStatsTimeoutSentUnregistrationRequests, cgkZoneMgmtStatsGroup=cgkZoneMgmtStatsGroup, cgkStatsTotalConcurrentCalls=cgkStatsTotalConcurrentCalls, cgkLZoneStatsRcvdLocationRejects=cgkLZoneStatsRcvdLocationRejects, cgkHistoryEventEntry=cgkHistoryEventEntry, cgkLZoneStatsOriginAdmissionRejects=cgkLZoneStatsOriginAdmissionRejects, cgkLocalZoneStatsDisengageTable=cgkLocalZoneStatsDisengageTable, cgkLZoneStatsRegisteredEndpoints=cgkLZoneStatsRegisteredEndpoints, cgkZoneOtherFailures=cgkZoneOtherFailures, cgkLocalZoneStatsAdmissionTable=cgkLocalZoneStatsAdmissionTable, cgkZoneIndex=cgkZoneIndex, cgkStatsRcvdDisengageRejects=cgkStatsRcvdDisengageRejects, cgkZoneSubnetTag=cgkZoneSubnetTag, cgkLocalZoneEntry=cgkLocalZoneEntry, cgkLZoneStatsRcvdLocationConfirms=cgkLZoneStatsRcvdLocationConfirms, cgkMIBEnableEventNotification=cgkMIBEnableEventNotification, cgkZoneAddressLookupFailures=cgkZoneAddressLookupFailures, cgkZoneLocalZone=cgkZoneLocalZone, cgkStatsSentLocationConfirms=cgkStatsSentLocationConfirms, ciscoGatekeeperMIBNotifications=ciscoGatekeeperMIBNotifications, cgkZone=cgkZone, cgkStatsSentDisengageConfirms=cgkStatsSentDisengageConfirms, PYSNMP_MODULE_ID=ciscoGatekeeperMIB, cgkHistoryEventGroup=cgkHistoryEventGroup, cgkHistoryEventTable=cgkHistoryEventTable, cgkZoneSubnetEntry=cgkZoneSubnetEntry, cgkLZoneStatsRcvdUnregistrationRequests=cgkLZoneStatsRcvdUnregistrationRequests, cgkLocalZoneStatsUnRegistrationTableEntry=cgkLocalZoneStatsUnRegistrationTableEntry, cgkStatsAdmissionRequests=cgkStatsAdmissionRequests, cgkGatekeeperComplianceRev2=cgkGatekeeperComplianceRev2, cgkStatsOriginAdmissionRequests=cgkStatsOriginAdmissionRequests, cgkLZoneACFs=cgkLZoneACFs, cgkLocalZoneStatsUnRegistrationTable=cgkLocalZoneStatsUnRegistrationTable, cgkZoneZoneName=cgkZoneZoneName, cgkStatsRegisteredEndpoints=cgkStatsRegisteredEndpoints, cgkLZoneStatsFullRegistrationRequests=cgkLZoneStatsFullRegistrationRequests, cgkGeneralGroup=cgkGeneralGroup, cgkHistoryEventEndpointAddress=cgkHistoryEventEndpointAddress, cgkHistoryEventEndpointAddrTag=cgkHistoryEventEndpointAddrTag, ciscoGatekeeperMIBConformance=ciscoGatekeeperMIBConformance, cgkGeneralMgmtStatsGroup=cgkGeneralMgmtStatsGroup, cgkZoneEntry=cgkZoneEntry, cgkLZoneStatsSentUnregistrationRequests=cgkLZoneStatsSentUnregistrationRequests, cgkHistoryEventEndpointType=cgkHistoryEventEndpointType, cgkHistoryMaxEventEntries=cgkHistoryMaxEventEntries, cgkGatekeeperCompliance=cgkGatekeeperCompliance, cgkLZoneProxiedCall=cgkLZoneProxiedCall, cgkRemoteZone=cgkRemoteZone, cgkStatsAdmissionConfirms=cgkStatsAdmissionConfirms, cgkHistory=cgkHistory, cgkGatekeeperComplianceRev3=cgkGatekeeperComplianceRev3, cgkLZoneStatsLightRegistrationRequests=cgkLZoneStatsLightRegistrationRequests, cgkLocalZoneStatsDisengageTableEntry=cgkLocalZoneStatsDisengageTableEntry, cgkStatsSentDisengageRejects=cgkStatsSentDisengageRejects, cgkZoneRowStatus=cgkZoneRowStatus, cgkStatsOriginAdmissionRejects=cgkStatsOriginAdmissionRejects, cgkLZoneARJs=cgkLZoneARJs, cgkStatsOriginTotalConcurrentCalls=cgkStatsOriginTotalConcurrentCalls, ciscoGatekeeperMIBNotificationPrefix=ciscoGatekeeperMIBNotificationPrefix, cgkStatsOriginAdmissionConfirms=cgkStatsOriginAdmissionConfirms, cgkLZoneStatsSentLocationConfirms=cgkLZoneStatsSentLocationConfirms, cgkLZoneStatsSentUnregistrationConfirms=cgkLZoneStatsSentUnregistrationConfirms, cgkHistoryEventText=cgkHistoryEventText, cgkLZoneStatsRcvdUnregistrationConfirms=cgkLZoneStatsRcvdUnregistrationConfirms, cgkStatsRcvdLocationRejects=cgkStatsRcvdLocationRejects, cgkLZoneProxiedCallBits=cgkLZoneProxiedCallBits, cgkLZoneStatsRcvdUnregistrationRejects=cgkLZoneStatsRcvdUnregistrationRejects, cgkStatsSentDisengageRequests=cgkStatsSentDisengageRequests, cgkZoneTable=cgkZoneTable, cgkZoneSubnetAddress=cgkZoneSubnetAddress, cgkLZoneStatsRegistrationConfirms=cgkLZoneStatsRegistrationConfirms, cgkGatekeeperComplianceRev4=cgkGatekeeperComplianceRev4, cgkZoneGroup=cgkZoneGroup, cgkMIBDefaultInterzoneBandwidth=cgkMIBDefaultInterzoneBandwidth, cgkStatsRcvdDisengageRequests=cgkStatsRcvdDisengageRequests, cgkLocalZoneStatsRegistrationTable=cgkLocalZoneStatsRegistrationTable, cgkLocalZoneTable=cgkLocalZoneTable, cgkZoneEndpointTimeouts=cgkZoneEndpointTimeouts, cgkStatsRcvdLocationRequests=cgkStatsRcvdLocationRequests, ciscoGatekeeperMIBObjects=ciscoGatekeeperMIBObjects, cgkLocalZoneStatsAdmissionTableEntry=cgkLocalZoneStatsAdmissionTableEntry, cgkLocalZoneStatsLocationTable=cgkLocalZoneStatsLocationTable, cgkLocalZoneStatsLocationTableEntry=cgkLocalZoneStatsLocationTableEntry, cgkLZoneStatsSentDisengageConfirms=cgkLZoneStatsSentDisengageConfirms, cgkRZoneAllocTotalBandwidth=cgkRZoneAllocTotalBandwidth, cgkLZoneStatsAdmissionRequests=cgkLZoneStatsAdmissionRequests, cgkZoneRasAddress=cgkZoneRasAddress, cgkLZoneStatsSentDisengageRejects=cgkLZoneStatsSentDisengageRejects, cgkNotificationsGroup=cgkNotificationsGroup, ciscoGatekeeperMIBGroups=ciscoGatekeeperMIBGroups, cgkZoneDomain=cgkZoneDomain, cgkGeneralConfig=cgkGeneralConfig, cgkLZoneStatsOriginAdmissionRequests=cgkLZoneStatsOriginAdmissionRequests, cgkGatekeeperComplianceRev1=cgkGatekeeperComplianceRev1, cgkStatsRcvdDisengageConfirms=cgkStatsRcvdDisengageConfirms, cgkLZoneStatsOriginAdmissionConfirms=cgkLZoneStatsOriginAdmissionConfirms, cgkLocalZoneStatsRegistrationTableEntry=cgkLocalZoneStatsRegistrationTableEntry, cgkRZoneTotalBandwidth=cgkRZoneTotalBandwidth, cgkLZoneStatsRcvdDisengageRejects=cgkLZoneStatsRcvdDisengageRejects, cgkMIBDefaultSessionBandwidth=cgkMIBDefaultSessionBandwidth, cgkLZoneStatsSentUnregistrationRejects=cgkLZoneStatsSentUnregistrationRejects, cgkStatsSentLocationRejects=cgkStatsSentLocationRejects, cgkLZoneSessionBandwidth=cgkLZoneSessionBandwidth, cgkZoneSubnetMask=cgkZoneSubnetMask, cgkStatsRcvdLocationConfirms=cgkStatsRcvdLocationConfirms, cgkLZoneStatsSentLocationRejects=cgkLZoneStatsSentLocationRejects, cgkGeneralStats=cgkGeneralStats, cgkLocalZoneGroupRev2=cgkLocalZoneGroupRev2, ciscoGatekeeperMIBCompliance=ciscoGatekeeperMIBCompliance, cgkLZoneStatsOriginTotalConcurrentCalls=cgkLZoneStatsOriginTotalConcurrentCalls, cgkHistoryEventType=cgkHistoryEventType, cgkZoneRasAddressTag=cgkZoneRasAddressTag, cgkLZoneAllocInterzoneBandwidth=cgkLZoneAllocInterzoneBandwidth, cgkRemoteZoneGroup=cgkRemoteZoneGroup, cgkLZoneStatsSentLocationRequests=cgkLZoneStatsSentLocationRequests, cgkMIBDefaultTotalBandwidth=cgkMIBDefaultTotalBandwidth, cgkLZoneStatsSentDisengageRequests=cgkLZoneStatsSentDisengageRequests, cgkLZoneTotalConcurrentCalls=cgkLZoneTotalConcurrentCalls, cgkZoneSubnetRowStatus=cgkZoneSubnetRowStatus, cgkStatsSentLocationRequests=cgkStatsSentLocationRequests, cgkZoneStats=cgkZoneStats, cgkLZoneInterzoneBandwidth=cgkLZoneInterzoneBandwidth, cgkLZoneStatsRcvdDisengageRequests=cgkLZoneStatsRcvdDisengageRequests, cgkZoneSubnetFlags=cgkZoneSubnetFlags, cgkZoneSubnetTable=cgkZoneSubnetTable, cgkZoneIrrFrequency=cgkZoneIrrFrequency, cgkZoneSubnetGroup=cgkZoneSubnetGroup, cgkZoneDefaultSubnetFlags=cgkZoneDefaultSubnetFlags, cgkLZoneAllocTotalBandwidth=cgkLZoneAllocTotalBandwidth, cgkHistoryEventIndex=cgkHistoryEventIndex, cgkStatsAdmissionRejects=cgkStatsAdmissionRejects, ciscoGatekeeperMIB=ciscoGatekeeperMIB, cgkLocalZoneGroupRev1=cgkLocalZoneGroupRev1, cgkLZoneStatsRcvdDisengageConfirms=cgkLZoneStatsRcvdDisengageConfirms, cgkZoneLRQs=cgkZoneLRQs, cgkLZoneStatsRegistrationRejects=cgkLZoneStatsRegistrationRejects, cgkHistoryEventTime=cgkHistoryEventTime, ciscoGatekeeperEvent=ciscoGatekeeperEvent, cgkLZoneTotalBandwidth=cgkLZoneTotalBandwidth, cgkHistoryEventEndpointH323id=cgkHistoryEventEndpointH323id, cgkLocalZoneGroup=cgkLocalZoneGroup)
