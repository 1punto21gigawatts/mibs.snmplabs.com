#
# PySNMP MIB module LHX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LHX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
sysLocation, sysContact, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysContact", "sysName")
TimeTicks, Integer32, MibIdentifier, Gauge32, iso, NotificationType, Bits, ObjectIdentity, ModuleIdentity, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "MibIdentifier", "Gauge32", "iso", "NotificationType", "Bits", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "enterprises")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2015-01-05 00:00', '2013-07-24 00:00', '2012-08-13 00:00', '2011-05-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raritan.setRevisionsDescriptions(('1) Added agentInetPortNumber under trapInformation 2) Added agentInetPortNumber as a varbind to all traps ', 'SHX 30 support: - add lhxVoltageLow, lhxBaseElectronicsFailure and lhxCondenserPumpFailure traps - add model and fwVersion to lhxConfigurationTable - add sensorName to sensorConfigurationTable - support valvePosition sensor type - add sysContact, sysName, sysLocation to all traps', 'Extend LHX MIB: - add maximumCoolingState - add alertState - add defaultFanSpeed - make defaultFanSpeed read-writable', 'The first version of the MIB.',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201501050000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
if mibBuilder.loadTexts: raritan.setContactInfo(' Author: Raritan Americas, Inc. postal: Raritan Americas, Inc. 400 Cottontail Lane Somerset, NJ 08873 email: tech@raritan.com phone: +1 732 764 8886 ')
if mibBuilder.loadTexts: raritan.setDescription('This MIB describes the SNMP functions of the Schroff Varistar LHX heat exchanger supported by Raritan devices.')
lhxgw = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 0))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 1))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 2))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 3))
lhx = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3))
gwSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 3, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 3, 2))
class OperationalStateEnumeration(TextualConvention, Integer32):
    description = 'The operational states of an lhx controller.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disconnected", 0), ("offline", 1), ("online", 2))

class GwSensorTypeEnumeration(TextualConvention, Integer32):
    description = 'The types an lhx sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("airTemperature", 0), ("waterTemperature", 1), ("fanSpeed", 2), ("doorContact", 3), ("valvePosition", 4))

class SensorUnitsEnumeration(TextualConvention, Integer32):
    description = 'The units an lhx sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19))

class SensorStateEnumeration(TextualConvention, Integer32):
    description = 'The states a sensor can be in.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11))

lhxSensorFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 1)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"), ("LHX-MIB", "probeId"))
if mibBuilder.loadTexts: lhxSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lhxSensorFailure.setDescription('A sensor failure (broken or short circuit) occurred.')
lhxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 2)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"), ("LHX-MIB", "fanId"))
if mibBuilder.loadTexts: lhxFanFailure.setStatus('current')
if mibBuilder.loadTexts: lhxFanFailure.setDescription('A fan motor failure occurred.')
lhxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 3)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"), ("LHX-MIB", "powerSupplyId"))
if mibBuilder.loadTexts: lhxPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: lhxPowerSupplyFailure.setDescription('A power supply failure occurred.')
lhxThresholdAirOutlet = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 4)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxThresholdAirOutlet.setStatus('current')
if mibBuilder.loadTexts: lhxThresholdAirOutlet.setDescription('The air outlet temperature threshold was crossed.')
lhxThresholdAirInlet = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 5)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxThresholdAirInlet.setStatus('current')
if mibBuilder.loadTexts: lhxThresholdAirInlet.setDescription('The air inlet temperature threshold was crossed.')
lhxThresholdWaterInlet = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 6)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxThresholdWaterInlet.setStatus('current')
if mibBuilder.loadTexts: lhxThresholdWaterInlet.setDescription('The water inlet temperature threshold was crossed.')
lhxDoorOpened = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 7)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxDoorOpened.setStatus('current')
if mibBuilder.loadTexts: lhxDoorOpened.setDescription('The door was opened.')
lhxMaximumCoolingRequest = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 8)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxMaximumCoolingRequest.setStatus('current')
if mibBuilder.loadTexts: lhxMaximumCoolingRequest.setDescription('Maximum cooling was requested.')
lhxEmergencyCooling = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 9)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxEmergencyCooling.setStatus('current')
if mibBuilder.loadTexts: lhxEmergencyCooling.setDescription('Emergency cooling was activated.')
lhxWaterLeak = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 10)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxWaterLeak.setStatus('current')
if mibBuilder.loadTexts: lhxWaterLeak.setDescription('Water leakage was detected.')
lhxThresholdHumidity = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 11)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxThresholdHumidity.setStatus('current')
if mibBuilder.loadTexts: lhxThresholdHumidity.setDescription('The humidity threshold was crossed.')
lhxExternalWaterCoolingFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 12)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxExternalWaterCoolingFailure.setStatus('current')
if mibBuilder.loadTexts: lhxExternalWaterCoolingFailure.setDescription('An external water cooling failure occurred.')
lhxThresholdWaterOutlet = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 13)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxThresholdWaterOutlet.setStatus('current')
if mibBuilder.loadTexts: lhxThresholdWaterOutlet.setDescription('The water outlet temperature threshold was crossed.')
lhxParameterDataLoss = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 14)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxParameterDataLoss.setStatus('current')
if mibBuilder.loadTexts: lhxParameterDataLoss.setDescription('Data loss in parameter memory was detected.')
lhxStBusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 15)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxStBusError.setStatus('current')
if mibBuilder.loadTexts: lhxStBusError.setDescription('An ST-Bus communication error was detected.')
lhxCollectiveFault = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 16)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxCollectiveFault.setStatus('current')
if mibBuilder.loadTexts: lhxCollectiveFault.setDescription('An error was detected.')
gwSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 17)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "portId"), ("LHX-MIB", "sensorTypeId"), ("LHX-MIB", "sensorId"), ("LHX-MIB", "probeId"), ("LHX-MIB", "measurementsSensorTimeStamp"), ("LHX-MIB", "measurementsSensorValue"), ("LHX-MIB", "measurementsSensorState"), ("LHX-MIB", "oldSensorState"))
if mibBuilder.loadTexts: gwSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: gwSensorStateChange.setDescription('Sensor State Change.')
gwLhxOperationalStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 18)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "portId"), ("LHX-MIB", "operationalState"), ("LHX-MIB", "oldOperationalState"))
if mibBuilder.loadTexts: gwLhxOperationalStateChange.setStatus('current')
if mibBuilder.loadTexts: gwLhxOperationalStateChange.setDescription('Operational State Change.')
lhxVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 19)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxVoltageLow.setStatus('current')
if mibBuilder.loadTexts: lhxVoltageLow.setDescription('The supply voltage of an LHX became low.')
lhxBaseElectronicsFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 20)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxBaseElectronicsFailure.setStatus('current')
if mibBuilder.loadTexts: lhxBaseElectronicsFailure.setDescription('The base electronics of an LHX controller failed.')
lhxCondenserPumpFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 9, 0, 21)).setObjects(("LHX-MIB", "deviceName"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "agentInetPortNumber"), ("LHX-MIB", "portId"))
if mibBuilder.loadTexts: lhxCondenserPumpFailure.setStatus('current')
if mibBuilder.loadTexts: lhxCondenserPumpFailure.setDescription('An LHX condenser pump failed.')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('The user-defined name for the Device.')
deviceInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceInetAddressType.setStatus('current')
if mibBuilder.loadTexts: deviceInetAddressType.setDescription('The type of address format')
deviceInetIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceInetIPAddress.setStatus('current')
if mibBuilder.loadTexts: deviceInetIPAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option.')
lhxErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lhxErrorCode.setStatus('current')
if mibBuilder.loadTexts: lhxErrorCode.setDescription('The LHX error code (F1 - F25, EP).')
portId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portId.setStatus('current')
if mibBuilder.loadTexts: portId.setDescription('A unique value for the physical port, the LHX controlller is connected to. Its value ranges between 1 and the value of portCount.')
probeId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: probeId.setStatus('current')
if mibBuilder.loadTexts: probeId.setDescription('The physical Sensor ID (F1 - F7).')
fanId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fanId.setStatus('current')
if mibBuilder.loadTexts: fanId.setDescription('The Fan ID (M1 - M6).')
powerSupplyId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: powerSupplyId.setStatus('current')
if mibBuilder.loadTexts: powerSupplyId.setDescription('The Power Supply ID (1, 2).')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 9), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
if mibBuilder.loadTexts: oldSensorState.setDescription('The old sensor state used in Sensor State Transition traps.')
sensorTypeId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 10), GwSensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorTypeId.setStatus('current')
if mibBuilder.loadTexts: sensorTypeId.setDescription('A unique value for the type of sensor.')
sensorId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorId.setStatus('current')
if mibBuilder.loadTexts: sensorId.setDescription('A unique value for each sensor. Its value ranges between 1 and the value of sensorCount.')
oldOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 12), OperationalStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldOperationalState.setStatus('current')
if mibBuilder.loadTexts: oldOperationalState.setDescription('The old operational state used in Operational State Transition traps.')
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 0, 0, 13), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentInetPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentInetPortNumber.setDescription('The UDP port number used for accessing the SNMP agent on the device. Examples: If the associated device MIB (PX2-MIB, EMD-MIB) has deviceCascadeType set to portForwarding, then master: 50500 slave 1:50501 slave 2: 50502 ...... If cascading mode is not portForwarding and default (Standard) ports are being used, then port: 161 ')
portCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCount.setStatus('current')
if mibBuilder.loadTexts: portCount.setDescription('The number of lhx units supported.')
sensorCountTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 9, 1, 2), )
if mibBuilder.loadTexts: sensorCountTable.setStatus('current')
if mibBuilder.loadTexts: sensorCountTable.setDescription('A list of lhx sensor count extries.')
sensorCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 9, 1, 2, 1), ).setIndexNames((0, "LHX-MIB", "portIdx"), (0, "LHX-MIB", "sensorTypeIdx"))
if mibBuilder.loadTexts: sensorCountEntry.setStatus('current')
if mibBuilder.loadTexts: sensorCountEntry.setDescription('An entry containing the number of lhx sensors of a certain type.')
sensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCount.setStatus('current')
if mibBuilder.loadTexts: sensorCount.setDescription('The number of sensors.')
lhxConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1), )
if mibBuilder.loadTexts: lhxConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: lhxConfigurationTable.setDescription('A list of lhx controller configuration extries. The number of entries is given by the value of portCount.')
lhxConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1), ).setIndexNames((0, "LHX-MIB", "portIdx"))
if mibBuilder.loadTexts: lhxConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: lhxConfigurationEntry.setDescription('An entry containing parameters for an lhx.')
operationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 1), OperationalStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operationalState.setStatus('current')
if mibBuilder.loadTexts: operationalState.setDescription('The operational state of the lhx controller. To switch LHX power state while controller is connected, set operationalState to 1 (off) or 2 (on). Switching power state while LHX is disconnected or to 0 (disconnected) is undefined.')
setpointVentilators = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpointVentilators.setStatus('current')
if mibBuilder.loadTexts: setpointVentilators.setDescription('The setpoint of the ventilators.')
setpointWaterValve = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpointWaterValve.setStatus('current')
if mibBuilder.loadTexts: setpointWaterValve.setDescription('The setpoint of the water valve.')
defaultFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultFanSpeed.setStatus('current')
if mibBuilder.loadTexts: defaultFanSpeed.setDescription("The 'default' fan speed during normal operation in per mill. Default is 80% (= 800).")
maximumCoolingState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 5), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maximumCoolingState.setStatus('current')
if mibBuilder.loadTexts: maximumCoolingState.setDescription('Indicates whether maximum cooling was requested or not. To request maximum cooling, set maximumCoolingState to 1 (true). Setting maximumCoolingState to 2 (false) is undefined, set alertState to 2 (false) instead.')
alertState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 6), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertState.setStatus('current')
if mibBuilder.loadTexts: alertState.setDescription('Indicates whether LHX controler is in alert state or not. To acknowledge alert status, set alertState to 2 (false). Setting alertState to 1 (true) is undefined.')
model = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: model.setStatus('current')
if mibBuilder.loadTexts: model.setDescription('The model indentifier of an LHX controller.')
fwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVersion.setStatus('current')
if mibBuilder.loadTexts: fwVersion.setDescription('The firmware version of an LHX controller.')
sensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1), )
if mibBuilder.loadTexts: sensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: sensorConfigurationTable.setDescription('A list of lhx sensor configuration extries. The number of entries is given by the value of portCount.')
sensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1), ).setIndexNames((0, "LHX-MIB", "portIdx"), (0, "LHX-MIB", "sensorTypeIdx"), (0, "LHX-MIB", "sensorIdx"))
if mibBuilder.loadTexts: sensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: sensorConfigurationEntry.setDescription('An entry containing parameters for an lhx.')
portIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: portIdx.setStatus('current')
if mibBuilder.loadTexts: portIdx.setDescription('A unique value for each port. Its value ranges between 1 and the value of portCount.')
sensorTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: sensorTypeIdx.setStatus('current')
if mibBuilder.loadTexts: sensorTypeIdx.setDescription('A unique value for the type of sensor.')
sensorIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorIdx.setStatus('current')
if mibBuilder.loadTexts: sensorIdx.setDescription('A unique value for each sensor. Its value ranges between 1 and the value of sensorCount.')
sensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorLabel.setStatus('current')
if mibBuilder.loadTexts: sensorLabel.setDescription('The short ID of the sensor (e.g. F1, M2).')
sensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 5), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorUnit.setStatus('current')
if mibBuilder.loadTexts: sensorUnit.setDescription('The base units. This parameter does not apply to state sensors.')
sensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: sensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point. This parameter does not apply to state sensors.')
sensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMaximum.setStatus('current')
if mibBuilder.loadTexts: sensorMaximum.setDescription('The largest possible value. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMinimum.setStatus('current')
if mibBuilder.loadTexts: sensorMinimum.setDescription('The smallest possible value. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: sensorHysteresis.setDescription('The hysteresis used for deassertions. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: sensorLowerCriticalThreshold.setDescription('The lower critical threshold. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: sensorLowerWarningThreshold.setDescription('The lower non-critical (warning) threshold. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: sensorUpperCriticalThreshold.setDescription('The upper critical threshold. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: sensorUpperWarningThreshold.setDescription('The upper non-critical (warning) threshold. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 14), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: sensorEnabledThresholds.setDescription('A bit string which indicates which thresholds are enabled. This parameter does not apply to state sensors.')
sensorThresholdMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThresholdMaximum.setStatus('current')
if mibBuilder.loadTexts: sensorThresholdMaximum.setDescription('The largest possible threshold value. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorThresholdMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThresholdMinimum.setStatus('current')
if mibBuilder.loadTexts: sensorThresholdMinimum.setDescription('The smallest possible threshold value. The value of this OID variable should be scaled by sensorDecimalDigits. For example, if the value is 1 and sensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to state sensors.')
sensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 1, 4, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorName.setStatus('current')
if mibBuilder.loadTexts: sensorName.setDescription('The descriptive ID of the sensor (e.g. Fan Speed 1).')
sensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1), )
if mibBuilder.loadTexts: sensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: sensorMeasurementsTable.setDescription('A list of external sensor entries. The number of entries is given by the value of sensorCount for the LHX.')
sensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1, 1), ).setIndexNames((0, "LHX-MIB", "portIdx"), (0, "LHX-MIB", "sensorTypeIdx"), (0, "LHX-MIB", "sensorIdx"))
if mibBuilder.loadTexts: sensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: sensorMeasurementsEntry.setDescription('An entry containing measurement objects for an external sensor.')
measurementsSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsSensorIsAvailable.setDescription('Is the sensor available?')
measurementsSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1, 1, 2), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsSensorState.setDescription('The sensor state.')
measurementsSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsSensorValue.setDescription('The sensor reading. This parameter does not apply to state sensors.')
measurementsSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsSensorTimeStamp.setDescription('The sensor reading timestamp.')
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 9, 3, 1, 1)).setObjects(("LHX-MIB", "configurationGroup"), ("LHX-MIB", "measurementsGroup"), ("LHX-MIB", "trapInformationGroup"), ("LHX-MIB", "trapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('current')
if mibBuilder.loadTexts: complianceRev1.setDescription('The requirements for conformance to the LHX-MIB.')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 9, 3, 2, 1)).setObjects(("LHX-MIB", "portCount"), ("LHX-MIB", "portId"), ("LHX-MIB", "operationalState"), ("LHX-MIB", "sensorCount"), ("LHX-MIB", "sensorLabel"), ("LHX-MIB", "sensorUnit"), ("LHX-MIB", "sensorDecimalDigits"), ("LHX-MIB", "sensorMaximum"), ("LHX-MIB", "sensorMinimum"), ("LHX-MIB", "sensorHysteresis"), ("LHX-MIB", "sensorLowerCriticalThreshold"), ("LHX-MIB", "sensorLowerWarningThreshold"), ("LHX-MIB", "sensorUpperCriticalThreshold"), ("LHX-MIB", "sensorUpperWarningThreshold"), ("LHX-MIB", "sensorEnabledThresholds"), ("LHX-MIB", "setpointVentilators"), ("LHX-MIB", "setpointWaterValve"), ("LHX-MIB", "defaultFanSpeed"), ("LHX-MIB", "maximumCoolingState"), ("LHX-MIB", "alertState"), ("LHX-MIB", "sensorThresholdMaximum"), ("LHX-MIB", "sensorThresholdMinimum"), ("LHX-MIB", "model"), ("LHX-MIB", "fwVersion"), ("LHX-MIB", "sensorName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
if mibBuilder.loadTexts: configurationGroup.setDescription('A collection of objects representing configuration data.')
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 9, 3, 2, 2)).setObjects(("LHX-MIB", "measurementsSensorIsAvailable"), ("LHX-MIB", "measurementsSensorState"), ("LHX-MIB", "measurementsSensorValue"), ("LHX-MIB", "measurementsSensorTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementsGroup = measurementsGroup.setStatus('current')
if mibBuilder.loadTexts: measurementsGroup.setDescription('A collection of objects providing the measurement capability of LHX.')
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 9, 3, 2, 3)).setObjects(("LHX-MIB", "deviceName"), ("LHX-MIB", "deviceInetAddressType"), ("LHX-MIB", "deviceInetIPAddress"), ("LHX-MIB", "lhxErrorCode"), ("LHX-MIB", "portId"), ("LHX-MIB", "probeId"), ("LHX-MIB", "fanId"), ("LHX-MIB", "powerSupplyId"), ("LHX-MIB", "oldSensorState"), ("LHX-MIB", "sensorTypeId"), ("LHX-MIB", "sensorId"), ("LHX-MIB", "oldOperationalState"), ("LHX-MIB", "agentInetPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapInformationGroup = trapInformationGroup.setStatus('current')
if mibBuilder.loadTexts: trapInformationGroup.setDescription('A collection of objects providing information in the traps.')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 9, 3, 2, 4)).setObjects(("LHX-MIB", "lhxSensorFailure"), ("LHX-MIB", "lhxFanFailure"), ("LHX-MIB", "lhxPowerSupplyFailure"), ("LHX-MIB", "lhxThresholdAirOutlet"), ("LHX-MIB", "lhxThresholdAirInlet"), ("LHX-MIB", "lhxThresholdWaterInlet"), ("LHX-MIB", "lhxDoorOpened"), ("LHX-MIB", "lhxMaximumCoolingRequest"), ("LHX-MIB", "lhxEmergencyCooling"), ("LHX-MIB", "lhxWaterLeak"), ("LHX-MIB", "lhxThresholdHumidity"), ("LHX-MIB", "lhxExternalWaterCoolingFailure"), ("LHX-MIB", "lhxThresholdWaterOutlet"), ("LHX-MIB", "lhxParameterDataLoss"), ("LHX-MIB", "lhxStBusError"), ("LHX-MIB", "lhxCondenserPumpFailure"), ("LHX-MIB", "gwSensorStateChange"), ("LHX-MIB", "gwLhxOperationalStateChange"), ("LHX-MIB", "lhxCollectiveFault"), ("LHX-MIB", "lhxVoltageLow"), ("LHX-MIB", "lhxBaseElectronicsFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
if mibBuilder.loadTexts: trapsGroup.setDescription('A collection of traps.')
mibBuilder.exportSymbols("LHX-MIB", measurementsSensorState=measurementsSensorState, sensorConfigurationEntry=sensorConfigurationEntry, sensorUpperWarningThreshold=sensorUpperWarningThreshold, lhxThresholdWaterInlet=lhxThresholdWaterInlet, sensorTypeId=sensorTypeId, powerSupplyId=powerSupplyId, lhxEmergencyCooling=lhxEmergencyCooling, lhxgw=lhxgw, trapInformationGroup=trapInformationGroup, model=model, groups=groups, configuration=configuration, sensorMeasurementsEntry=sensorMeasurementsEntry, sensorEnabledThresholds=sensorEnabledThresholds, sensorLowerCriticalThreshold=sensorLowerCriticalThreshold, agentInetPortNumber=agentInetPortNumber, measurementsSensorTimeStamp=measurementsSensorTimeStamp, gwLhxOperationalStateChange=gwLhxOperationalStateChange, probeId=probeId, sensorCountEntry=sensorCountEntry, measurementsSensorIsAvailable=measurementsSensorIsAvailable, lhxVoltageLow=lhxVoltageLow, gwSensorStateChange=gwSensorStateChange, lhxExternalWaterCoolingFailure=lhxExternalWaterCoolingFailure, setpointVentilators=setpointVentilators, sensorHysteresis=sensorHysteresis, fanId=fanId, lhxFanFailure=lhxFanFailure, fwVersion=fwVersion, lhxErrorCode=lhxErrorCode, trapInformation=trapInformation, sensorDecimalDigits=sensorDecimalDigits, SensorUnitsEnumeration=SensorUnitsEnumeration, lhx=lhx, complianceRev1=complianceRev1, lhxSensorFailure=lhxSensorFailure, portIdx=portIdx, sensorUpperCriticalThreshold=sensorUpperCriticalThreshold, lhxCondenserPumpFailure=lhxCondenserPumpFailure, operationalState=operationalState, lhxMaximumCoolingRequest=lhxMaximumCoolingRequest, raritan=raritan, sensorLabel=sensorLabel, sensorMaximum=sensorMaximum, sensorLowerWarningThreshold=sensorLowerWarningThreshold, sensorThresholdMaximum=sensorThresholdMaximum, portCount=portCount, sensorName=sensorName, lhxThresholdAirOutlet=lhxThresholdAirOutlet, oldOperationalState=oldOperationalState, sensorUnit=sensorUnit, SensorStateEnumeration=SensorStateEnumeration, oldSensorState=oldSensorState, sensorCount=sensorCount, deviceName=deviceName, sensorTypeIdx=sensorTypeIdx, lhxPowerSupplyFailure=lhxPowerSupplyFailure, alertState=alertState, lhxConfigurationTable=lhxConfigurationTable, lhxConfigurationEntry=lhxConfigurationEntry, conformance=conformance, sensorMeasurementsTable=sensorMeasurementsTable, sensorConfigurationTable=sensorConfigurationTable, sensorId=sensorId, gwSensors=gwSensors, sensorThresholdMinimum=sensorThresholdMinimum, GwSensorTypeEnumeration=GwSensorTypeEnumeration, lhxThresholdHumidity=lhxThresholdHumidity, deviceInetIPAddress=deviceInetIPAddress, lhxThresholdWaterOutlet=lhxThresholdWaterOutlet, lhxStBusError=lhxStBusError, compliances=compliances, lhxCollectiveFault=lhxCollectiveFault, lhxDoorOpened=lhxDoorOpened, lhxWaterLeak=lhxWaterLeak, lhxParameterDataLoss=lhxParameterDataLoss, maximumCoolingState=maximumCoolingState, OperationalStateEnumeration=OperationalStateEnumeration, sensorMinimum=sensorMinimum, PYSNMP_MODULE_ID=raritan, trapsGroup=trapsGroup, setpointWaterValve=setpointWaterValve, traps=traps, measurementsGroup=measurementsGroup, sensorCountTable=sensorCountTable, portId=portId, deviceInetAddressType=deviceInetAddressType, configurationGroup=configurationGroup, measurements=measurements, measurementsSensorValue=measurementsSensorValue, lhxBaseElectronicsFailure=lhxBaseElectronicsFailure, sensorIdx=sensorIdx, lhxThresholdAirInlet=lhxThresholdAirInlet, defaultFanSpeed=defaultFanSpeed)
