#
# PySNMP MIB module XEDIA-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:43:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
radiusAccServerEntry, = mibBuilder.importSymbols("RADIUS-ACC-CLIENT-MIB", "radiusAccServerEntry")
radiusAuthServerEntry, = mibBuilder.importSymbols("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Counter64, Counter32, Unsigned32, Gauge32, ObjectIdentity, Bits, ModuleIdentity, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Counter64", "Counter32", "Unsigned32", "Gauge32", "ObjectIdentity", "Bits", "ModuleIdentity", "Integer32", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaRadiusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 16))
if mibBuilder.loadTexts: xediaRadiusMIB.setLastUpdated('9804142200Z')
if mibBuilder.loadTexts: xediaRadiusMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaRadiusMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaRadiusMIB.setDescription('This module defines additional objects for management of Radius in Xedia devices, above and beyond what is defined in the proposed drafts.')
xRadiusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1))
xRadiusConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 2))
xRadiuscObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1))
xRadiuscGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1))
xRadiuscAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2))
xRadiuscAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3))
xRadiuscGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1))
xRadiuscGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2))
xradiuscAdminAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscAdminAuthStatus.setStatus('current')
if mibBuilder.loadTexts: xradiuscAdminAuthStatus.setDescription('The administrative status of Radius Authentication in the router. Changing this parameter may require a node boot to take affect.')
xradiuscAdminActgStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscAdminActgStatus.setStatus('current')
if mibBuilder.loadTexts: xradiuscAdminActgStatus.setDescription('The administrative status of Radius Accounting in the router. Changing this parameter may require a node boot to take affect.')
xradiuscDebugCmd = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 3), DisplayString().clone('rx-pkt-dump:off; tx-pkt-dump:off; error-print:off; trace-print:off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscDebugCmd.setStatus('current')
if mibBuilder.loadTexts: xradiuscDebugCmd.setDescription('The control for dumping in/out radius packets, and error/trace messages to the console. Although the summary of commands is displayed when read, command modifications must be done one at a time.')
xradiuscNasId = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscNasId.setStatus('current')
if mibBuilder.loadTexts: xradiuscNasId.setDescription('The NAS ID assigned to this node.')
xradiuscNasIP = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscNasIP.setStatus('current')
if mibBuilder.loadTexts: xradiuscNasIP.setDescription('The NAS IP Address assigned to this node.')
xradiuscBackgroundTimer = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 86400)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscBackgroundTimer.setStatus('current')
if mibBuilder.loadTexts: xradiuscBackgroundTimer.setDescription('The number of seconds inwhich the background task will perform cleanup.')
xradiuscMaxOutstanding = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscMaxOutstanding.setStatus('current')
if mibBuilder.loadTexts: xradiuscMaxOutstanding.setDescription('The maximum number of outstanding resquests.')
xradiuscOperAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthStatus.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperAuthStatus.setDescription('The ccurrent operational state of Radius Authentication on the router.')
xradiuscOperActgStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgStatus.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperActgStatus.setDescription('The ccurrent operational state of Radius Accounting on the router.')
xradiuscOperNasId = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperNasId.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperNasId.setDescription('The NAS ID assigned to this node.')
xradiuscOperNasIP = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperNasIP.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperNasIP.setDescription('The NAS IP Address currently being used.')
xradiuscOperGenErrors = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperGenErrors.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperGenErrors.setDescription('The number of general errors encounted by the Radius Client Task.')
xradiuscOperAuthQCurr = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthQCurr.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperAuthQCurr.setDescription('The current number of elements in the Authentication queue.')
xradiuscOperAuthQMax = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthQMax.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperAuthQMax.setDescription('The maximum number of elements in the Authentication queue at one time.')
xradiuscOperAuthExpected = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthExpected.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperAuthExpected.setDescription('The expected number of elements in the Authentication queue by monitoring the enqueue/dequeue operations.')
xradiuscOperAuthEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthEnqueued.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperAuthEnqueued.setDescription('The number of requested posted to the Authentication queue.')
xradiuscOperAuthDequeued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthDequeued.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperAuthDequeued.setDescription('The number of requested removed from the Authentication queue.')
xradiuscOperActgQCurr = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgQCurr.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperActgQCurr.setDescription('The current number of elements in the Accounting queue.')
xradiuscOperActgQMax = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgQMax.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperActgQMax.setDescription('The maximum number of elements in the Accounting queue at one time.')
xradiuscOperActgExpected = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgExpected.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperActgExpected.setDescription('The expected number of elements in the Accounting queue by monitoring the enqueue/dequeue operations.')
xradiuscOperActgEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgEnqueued.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperActgEnqueued.setDescription('The number of requested posted to the Accounting queue.')
xradiuscOperActgDequeued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgDequeued.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperActgDequeued.setDescription('The number of requested removed from the Accounting queue.')
xradiuscOperPendingListCurr = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingListCurr.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperPendingListCurr.setDescription('The current number of Authentication and Accounting requests Pending.')
xradiuscOperPendingListMax = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingListMax.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperPendingListMax.setDescription('The maximum number of Authentication and Accounting requests Pending at one time.')
xradiuscOperPendingExpected = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingExpected.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperPendingExpected.setDescription('The expected number of elements in the Pending list by monitoring the enqueue/dequeue operations.')
xradiuscOperPendingEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingEnqueued.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperPendingEnqueued.setDescription('The number of requested posted to the Pending list.')
xradiuscOperPendingDequeued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingDequeued.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperPendingDequeued.setDescription('The number of requested removed from the Pending list.')
xradiuscOperLastPktID = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperLastPktID.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperLastPktID.setDescription('The last Packet ID that was used.')
xradiuscOperNextPktID = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperNextPktID.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperNextPktID.setDescription('The next Packet ID that will most likely be used.')
xradiuscOperLastAuthIndex = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperLastAuthIndex.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperLastAuthIndex.setDescription('The index of the last authentication server used.')
xradiuscOperLastActgIndex = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperLastActgIndex.setStatus('current')
if mibBuilder.loadTexts: xradiuscOperLastActgIndex.setDescription('The index of the last accounting server used.')
xRadiuscAuthSvrTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1), )
if mibBuilder.loadTexts: xRadiuscAuthSvrTable.setStatus('current')
if mibBuilder.loadTexts: xRadiuscAuthSvrTable.setDescription('A list of Radius Client Authentication Server entries.')
xRadiuscAuthSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1), )
radiusAuthServerEntry.registerAugmentions(("XEDIA-RADIUS-MIB", "xRadiuscAuthSvrEntry"))
xRadiuscAuthSvrEntry.setIndexNames(*radiusAuthServerEntry.getIndexNames())
if mibBuilder.loadTexts: xRadiuscAuthSvrEntry.setStatus('current')
if mibBuilder.loadTexts: xRadiuscAuthSvrEntry.setDescription('An entry containing additional management information applicable to a particular Radius Client Authentication Server.')
xradiuscAuthSvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrIpAddress.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrIpAddress.setDescription('The IP Address of the specified Authentication Server. If this address is configured, it is used exclusively to communicate with this server.')
xradiuscAuthSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrName.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrName.setDescription('The name identifying the specified Authentication Server. If no IP Address is configured, then this name MAY be used during a DNS lookup.')
xradiuscAuthSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrPort.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrPort.setDescription('The udp port number that the specified Authentication Server is listening for requests.')
xradiuscAuthSvrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrTimeout.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrTimeout.setDescription('The number of seconds to wait for a response to a resquests.')
xradiuscAuthSvrRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrRetries.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrRetries.setDescription('The number of times to resend the server a requests when no response has been received.')
xradiuscAuthSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrPriority.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrPriority.setDescription('The priority assigned to this server. Lowest priority servers are used first. In the case of multiple servers having the same priority, they will be used in a round- robin fashion when their priority is the highest of the available servers.')
xradiuscAuthSvrSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrSecretKey.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrSecretKey.setDescription("The shared secret key associated with the specified server. It is used to 'hide' user passwords and authenticate requests and responses. When this object is read from a non-superuser, '--------' is returned in order to maintain security.")
xradiuscAuthSvrVendorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrVendorOffset.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrVendorOffset.setDescription("The offset used to assign Vendor Specific attribute IDs to the standard attribute number space. Setting this value to 0, forces the encoding of Vendor Specific attributes within the Vendor's number space, using the standard 'Vendor-Specific' attribute. Setting this to a non-zero value uses standard attribute encoding, with the Vendor Specific Base for the attributes beginning with this offset.")
xradiuscAuthSvrOperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperIpAddress.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrOperIpAddress.setDescription('The IP Address currently being used to communicate the specified Authentication server.')
xradiuscAuthSvrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("responding", 2), ("notResponding", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperState.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrOperState.setDescription("The operational state of the specified Authentication server. The 'unknown' state will be set periodically to allow 'notResponding' servers to be retried after a period of time.")
xradiuscAuthSvrOperStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperStateChange.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrOperStateChange.setDescription('The value of sysUpTime when the Authentication server last changed state.')
xradiuscAuthSvrOperBadPktIds = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperBadPktIds.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrOperBadPktIds.setDescription('The count of unexpected Packet IDs received on this port.')
xradiuscAuthSvrOperRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperRxErrors.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrOperRxErrors.setDescription('The count of general Receive errors encountered by this server')
xradiuscAuthSvrOperTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperTxErrors.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrOperTxErrors.setDescription('The count of general Transmit errors encountered by this server')
xradiuscAuthSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: xradiuscAuthSvrRowStatus.setDescription("This variable displays the status of the entry. Setting it to 'destroy' marks the entry as removed. Eventually, when no other applications depend on that particular resource, it will be completely removed from the table. Setting it to either 'create', or 'active' will add a row to the table.")
xRadiuscActgSvrTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1), )
if mibBuilder.loadTexts: xRadiuscActgSvrTable.setStatus('current')
if mibBuilder.loadTexts: xRadiuscActgSvrTable.setDescription('A list of Radius Client Accounting Server entries.')
xRadiuscActgSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1), )
radiusAccServerEntry.registerAugmentions(("XEDIA-RADIUS-MIB", "xRadiuscActgSvrEntry"))
xRadiuscActgSvrEntry.setIndexNames(*radiusAccServerEntry.getIndexNames())
if mibBuilder.loadTexts: xRadiuscActgSvrEntry.setStatus('current')
if mibBuilder.loadTexts: xRadiuscActgSvrEntry.setDescription('An entry containing additional management information applicable to a particular Radius Client Accounting Server.')
xradiuscActgSvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrIpAddress.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrIpAddress.setDescription('The IP Address of the specified Accounting Server. If this address is configured, it is used exclusively to communicate with this server.')
xradiuscActgSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrName.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrName.setDescription('The name identifying the specified Accounting Server. If no IP Address is configured, then this name MAY be used during a DNS lookup.')
xradiuscActgSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrPort.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrPort.setDescription('The udp port number that the specified Accounting Server is listening for requests.')
xradiuscActgSvrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrTimeout.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrTimeout.setDescription('The number of seconds to wait for a response to a resquests.')
xradiuscActgSvrRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrRetries.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrRetries.setDescription('The number of times to resend the server a requests when no response has been received.')
xradiuscActgSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrPriority.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrPriority.setDescription('The priority assigned to this server. Lowest priority servers are used first. In the case of multiple servers having the same priority, they will be used in a round- robin fashion when their priority is the highest of the available servers.')
xradiuscActgSvrSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrSecretKey.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrSecretKey.setDescription("The shared secret key associated with the specified server. It is used to authenticate requests and responses. When this object is read from a non-superuser, '--------' is returned in order to maintain security.")
xradiuscActgSvrVendorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrVendorOffset.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrVendorOffset.setDescription("The offset used to assign Vendor Specific attribute IDs to the standard attribute number space. Setting this value to 0, forces the encoding of Vendor Specific attributes within the Vendor's number space, using the standard 'Vendor-Specific' attribute. Setting this to a non-zero value uses standard attribute encoding, with the Vendor Specific Base for the attributes beginning with this offset.")
xradiuscActgSvrOperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperIpAddress.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrOperIpAddress.setDescription('The IP Address currently being used to communicate the specified Accounting server.')
xradiuscActgSvrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("responding", 2), ("notResponding", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperState.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrOperState.setDescription("The operational state of the specified Accounting server. The 'unknown' state will be set periodically to allow 'notResponding' servers to be retried after a period of time.")
xradiuscActgSvrOperStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperStateChange.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrOperStateChange.setDescription('The value of sysUpTime when the Accounting server last changed state.')
xradiuscActgSvrOperBadPktIds = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperBadPktIds.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrOperBadPktIds.setDescription('The count of unexpected Packet IDs received on this port.')
xradiuscActgSvrOperRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperRxErrors.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrOperRxErrors.setDescription('The count of general Receive errors encountered by this server')
xradiuscActgSvrOperTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperTxErrors.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrOperTxErrors.setDescription('The count of general Transmit errors encountered by this server')
xradiuscActgSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: xradiuscActgSvrRowStatus.setDescription("This variable displays the status of the entry. Setting it to 'destroy' marks the entry as removed. Eventually, when no other applications depend on that particular resource, it will be completely removed from the table. Setting it to either 'create', or 'active' will add a row to the table.")
xradiusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 1))
xradiusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 2))
xradiusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 1, 1)).setObjects(("XEDIA-RADIUS-MIB", "xradiusAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xradiusCompliance = xradiusCompliance.setStatus('current')
if mibBuilder.loadTexts: xradiusCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xradiusAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 2, 1)).setObjects(("XEDIA-RADIUS-MIB", "xradiuscAdminAuthStatus"), ("XEDIA-RADIUS-MIB", "xradiuscAdminActgStatus"), ("XEDIA-RADIUS-MIB", "xradiuscDebugCmd"), ("XEDIA-RADIUS-MIB", "xradiuscNasId"), ("XEDIA-RADIUS-MIB", "xradiuscNasIP"), ("XEDIA-RADIUS-MIB", "xradiuscBackgroundTimer"), ("XEDIA-RADIUS-MIB", "xradiuscMaxOutstanding"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthStatus"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgStatus"), ("XEDIA-RADIUS-MIB", "xradiuscOperNasId"), ("XEDIA-RADIUS-MIB", "xradiuscOperNasIP"), ("XEDIA-RADIUS-MIB", "xradiuscOperGenErrors"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthQCurr"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthQMax"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthExpected"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthEnqueued"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthDequeued"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgQCurr"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgQMax"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgExpected"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgEnqueued"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgDequeued"), ("XEDIA-RADIUS-MIB", "xradiuscOperLastPktID"), ("XEDIA-RADIUS-MIB", "xradiuscOperNextPktID"), ("XEDIA-RADIUS-MIB", "xradiuscOperLastAuthIndex"), ("XEDIA-RADIUS-MIB", "xradiuscOperLastActgIndex"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingListCurr"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingListMax"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingExpected"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingEnqueued"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingDequeued"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrName"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrPort"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrTimeout"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrRetries"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrPriority"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrSecretKey"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrVendorOffset"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrRowStatus"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperState"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperStateChange"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperBadPktIds"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperRxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperTxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrName"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrPort"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrTimeout"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrRetries"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrPriority"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrSecretKey"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrVendorOffset"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperState"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperStateChange"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperBadPktIds"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperRxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperTxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xradiusAllGroup = xradiusAllGroup.setStatus('current')
if mibBuilder.loadTexts: xradiusAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-RADIUS-MIB", xradiuscMaxOutstanding=xradiuscMaxOutstanding, xradiuscActgSvrSecretKey=xradiuscActgSvrSecretKey, xradiuscOperPendingListCurr=xradiuscOperPendingListCurr, xradiuscOperPendingDequeued=xradiuscOperPendingDequeued, xradiuscAuthSvrOperStateChange=xradiuscAuthSvrOperStateChange, xradiuscActgSvrOperIpAddress=xradiuscActgSvrOperIpAddress, xradiuscAuthSvrIpAddress=xradiuscAuthSvrIpAddress, xradiuscActgSvrTimeout=xradiuscActgSvrTimeout, xradiuscAuthSvrOperBadPktIds=xradiuscAuthSvrOperBadPktIds, xradiuscAuthSvrPort=xradiuscAuthSvrPort, xradiuscAuthSvrTimeout=xradiuscAuthSvrTimeout, xradiuscOperAuthEnqueued=xradiuscOperAuthEnqueued, xradiuscOperAuthQCurr=xradiuscOperAuthQCurr, xradiuscAuthSvrOperIpAddress=xradiuscAuthSvrOperIpAddress, xradiuscOperLastActgIndex=xradiuscOperLastActgIndex, xradiuscActgSvrOperBadPktIds=xradiuscActgSvrOperBadPktIds, xradiuscAuthSvrOperTxErrors=xradiuscAuthSvrOperTxErrors, xRadiuscAuthSvrEntry=xRadiuscAuthSvrEntry, xradiuscOperLastPktID=xradiuscOperLastPktID, xradiusGroups=xradiusGroups, xradiuscOperPendingExpected=xradiuscOperPendingExpected, xradiuscOperPendingListMax=xradiuscOperPendingListMax, xradiuscOperActgEnqueued=xradiuscOperActgEnqueued, xradiuscOperLastAuthIndex=xradiuscOperLastAuthIndex, xradiuscOperActgDequeued=xradiuscOperActgDequeued, xRadiuscGlobalStat=xRadiuscGlobalStat, xradiuscActgSvrRetries=xradiuscActgSvrRetries, xradiuscOperAuthStatus=xradiuscOperAuthStatus, PYSNMP_MODULE_ID=xediaRadiusMIB, xradiusCompliance=xradiusCompliance, xradiuscNasIP=xradiuscNasIP, xradiuscAuthSvrOperRxErrors=xradiuscAuthSvrOperRxErrors, xradiuscOperActgStatus=xradiuscOperActgStatus, xradiuscOperAuthExpected=xradiuscOperAuthExpected, xradiuscAuthSvrSecretKey=xradiuscAuthSvrSecretKey, xradiuscAuthSvrOperState=xradiuscAuthSvrOperState, xradiuscOperAuthQMax=xradiuscOperAuthQMax, xradiuscOperNasIP=xradiuscOperNasIP, xradiuscAdminActgStatus=xradiuscAdminActgStatus, xRadiuscActgSvrTable=xRadiuscActgSvrTable, xradiusCompliances=xradiusCompliances, xradiuscAuthSvrRowStatus=xradiuscAuthSvrRowStatus, xradiuscBackgroundTimer=xradiuscBackgroundTimer, xRadiuscObjects=xRadiuscObjects, xradiuscOperActgQMax=xradiuscOperActgQMax, xradiuscOperPendingEnqueued=xradiuscOperPendingEnqueued, xRadiusConformance=xRadiusConformance, xRadiuscActgSvrEntry=xRadiuscActgSvrEntry, xRadiuscGlobal=xRadiuscGlobal, xRadiuscAuthSvrTable=xRadiuscAuthSvrTable, xradiuscActgSvrVendorOffset=xradiuscActgSvrVendorOffset, xRadiusObjects=xRadiusObjects, xradiuscActgSvrName=xradiuscActgSvrName, xradiusAllGroup=xradiusAllGroup, xradiuscActgSvrIpAddress=xradiuscActgSvrIpAddress, xradiuscNasId=xradiuscNasId, xradiuscOperActgQCurr=xradiuscOperActgQCurr, xradiuscOperActgExpected=xradiuscOperActgExpected, xradiuscActgSvrPort=xradiuscActgSvrPort, xradiuscActgSvrRowStatus=xradiuscActgSvrRowStatus, xediaRadiusMIB=xediaRadiusMIB, xradiuscAuthSvrRetries=xradiuscAuthSvrRetries, xradiuscOperNasId=xradiuscOperNasId, xradiuscDebugCmd=xradiuscDebugCmd, xradiuscActgSvrOperStateChange=xradiuscActgSvrOperStateChange, xradiuscActgSvrOperState=xradiuscActgSvrOperState, xradiuscAuthSvrVendorOffset=xradiuscAuthSvrVendorOffset, xradiuscOperNextPktID=xradiuscOperNextPktID, xradiuscAuthSvrName=xradiuscAuthSvrName, xRadiuscAuthentication=xRadiuscAuthentication, xradiuscAdminAuthStatus=xradiuscAdminAuthStatus, xradiuscOperGenErrors=xradiuscOperGenErrors, xradiuscOperAuthDequeued=xradiuscOperAuthDequeued, xradiuscActgSvrOperTxErrors=xradiuscActgSvrOperTxErrors, xradiuscActgSvrPriority=xradiuscActgSvrPriority, xradiuscAuthSvrPriority=xradiuscAuthSvrPriority, xRadiuscAccounting=xRadiuscAccounting, xRadiuscGlobalCfg=xRadiuscGlobalCfg, xradiuscActgSvrOperRxErrors=xradiuscActgSvrOperRxErrors)
