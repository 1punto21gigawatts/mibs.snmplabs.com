#
# PySNMP MIB module JUNIPER-COS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-COS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxMibs, jnxCosNotifications = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxCosNotifications")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Integer32, Counter64, Counter32, ModuleIdentity, NotificationType, Gauge32, ObjectIdentity, IpAddress, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Integer32", "Counter64", "Counter32", "ModuleIdentity", "NotificationType", "Gauge32", "ObjectIdentity", "IpAddress", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxCos = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 15))
jnxCos.setRevisions(('2014-11-07 00:00', '2013-05-20 00:00', '1970-01-01 00:00', '2009-10-29 00:00', '2007-12-31 00:00', '2006-10-31 00:00', '2003-06-13 00:00', '2002-09-09 00:00', '2002-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxCos.setRevisionsDescriptions(('Added Queue Depth stats', 'Modified the max range for JnxCosFcIdentifier from 7 to 15.', 'Added Rate Limit stats', 'Added new trap jnxCosOutOfDedicatedQueues Added new trap jnxCosAlmostOutOfDedicatedQueues', 'Added jnxCosIngressQstatTable', 'Added jnxCosInvQstatTable', 'Deprecated jnxCosIfqStatsTable. Added new table jnxCosQstatTable. Added new object jnxCosFcQueueNr.', "Added 'jnxCosFcIdTable' table.", 'Initial Version',))
if mibBuilder.loadTexts: jnxCos.setLastUpdated('201305200000Z')
if mibBuilder.loadTexts: jnxCos.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxCos.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxCos.setDescription('The Juniper enterprise MIB for COS (Class Of Service) infrastructure. For detailed information on COS, Junos Documentation is recommended as the reference. Abbreviations: COS - Class Of Service RED - Random Early Detection PLP - Packet Loss Priority DSCP - Differential Service Code Point. ')
class JnxCosAdminString(TextualConvention, OctetString):
    description = "A string of up to 127 characters. This is syntactically similar to 'DisplayString' except that the length is limited to 127 octets. An object with such a syntax may have max-access of read-write."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class JnxCosFcIdentifier(TextualConvention, Integer32):
    description = 'A number identifying the forwarding class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 15)

jnxCosIfqStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1), )
if mibBuilder.loadTexts: jnxCosIfqStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqStatsTable.setDescription('This table exposes the per interface and per forwarding class output queue stats. Only those physical interfaces that support output queue stats appear in this table. This table is deprecated. `jnxCosQstatTable` should be used for per queue stats.')
jnxCosIfqStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIfqIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosIfqFc"))
if mibBuilder.loadTexts: jnxCosIfqStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqStatsEntry.setDescription('This entry contains interface-output-queue stats for a given forwarding class on the output queue of the specified interface.')
jnxCosIfqIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxCosIfqIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqIfIndex.setDescription('The ifIndex of the interface.')
jnxCosIfqFc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 2), JnxCosAdminString())
if mibBuilder.loadTexts: jnxCosIfqFc.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqFc.setDescription('The name of the forwarding class.')
jnxCosIfqQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqQedPkts.setDescription('The total number of packets of specified forwarding class queued at the output on the given interface.')
jnxCosIfqQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqQedPktRate.setDescription('The rate (expressed in packets per second) at which packets belonging to the the specified forwarding class were queued at the output on the given interface.')
jnxCosIfqQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqQedBytes.setDescription('Number of bytes of specified forwarding class queued at the output on the given interface.')
jnxCosIfqQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqQedByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqQedByteRate.setDescription('The rate (expressed in bytes per second) at which bytes belonging to the specified forwarding class were queued at the output on the given interface.')
jnxCosIfqTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTxedPkts.setDescription('Number of packets of specified forwarding class transmitted on the given interface.')
jnxCosIfqTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTxedPktRate.setDescription('The rate (expressed in packets per second) at which packets of specified forwarding class are transmitted on the given interface.')
jnxCosIfqTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTxedBytes.setDescription('Total number of bytes belonging to specified forwarding class, transmitted on the given interface.')
jnxCosIfqTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTxedByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTxedByteRate.setDescription('The current output byte rate (expressed in bytes per second) for the specified forwarding class on the given interface.')
jnxCosIfqTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTailDropPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTailDropPkts.setDescription('The total number of packets of specified forwarding class dropped due to tail dropping at the output on the given interface.')
jnxCosIfqTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTailDropPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTailDropPktRate.setDescription('The rate (expressed in packets per second) at which packets belonging to the specified forwarding class were taildropped at the output on the given interface.')
jnxCosIfqTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropPkts.setDescription('Total number of packets belonging to the specified forwarding class dropped due to RED (Random Early Detection) at the output on the given interface.')
jnxCosIfqTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropPktRate.setDescription('The most recent estimate of per-second RED-dropped packets for the specified forwarding class at the output on the given interface')
jnxCosIfqLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropPkts.setDescription('The total number of low PLP (Packet Loss Priority) non TCP packets belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqLpNonTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP (Packet Loss Priority) non TCP packets belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropPkts.setDescription('The total number of low PLP (Packet Loss Priority) TCP packets belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP (Packet Loss Priority) TCP packets belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropPkts.setDescription('The total number of high PLP (Packet Loss Priority) non TCP packets belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqHpNonTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP (Packet Loss Priority) non TCP packets belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropPkts.setDescription('The total number of high PLP (Packet Loss Priority) TCP packets belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropPktRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP (Packet Loss Priority) TCP packets belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropBytes.setDescription('The total number of bytes belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqTotalRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes belonging to the specified forwarding class were RED-dropped at the output on the given interface.')
jnxCosIfqLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropBytes.setDescription('The total number of low PLP (Packet Loss Priority) non TCP bytes belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqLpNonTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpNonTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP (Packet Loss Priority) non TCP bytes belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropBytes.setDescription('The total number of low PLP (Packet Loss Priority) TCP bytes belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqLpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP (Packet Loss Priority) TCP bytes belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropBytes.setDescription('The total number of high PLP (Packet Loss Priority) non TCP bytes belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqHpNonTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpNonTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP (Packet Loss Priority) non TCP bytes belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosIfqHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropBytes.setDescription('The total number of high PLP (Packet Loss Priority) TCP bytes belonging to the specified forwarding class RED-dropped at the output on the given interface.')
jnxCosIfqHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 1, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropByteRate.setStatus('deprecated')
if mibBuilder.loadTexts: jnxCosIfqHpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP (Packet Loss Priority) TCP bytes belonging to the specified forwarding class, were RED-dropped at the output on the given interface.')
jnxCosFcTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2), )
if mibBuilder.loadTexts: jnxCosFcTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcTable.setDescription('This table exposes the mapping between forwarding class and output queue number.')
jnxCosFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosFcName"))
if mibBuilder.loadTexts: jnxCosFcEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcEntry.setDescription('This entry presents the output queue number for a specified forwarding class.')
jnxCosFcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1, 1), JnxCosAdminString())
if mibBuilder.loadTexts: jnxCosFcName.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcName.setDescription('Name of the forwarding class.')
jnxCosFcQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFcQueueNr.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcQueueNr.setDescription('The output queue number.')
jnxCosRestrictedQNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosRestrictedQNr.setStatus('current')
if mibBuilder.loadTexts: jnxCosRestrictedQNr.setDescription('The configured restricted output queue number for the specified forwarding class.')
jnxCosFcIdTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3), )
if mibBuilder.loadTexts: jnxCosFcIdTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcIdTable.setDescription('This table presents information on forwarding-classes configured on the system. Each entry is indexed using a unique forwarding-class-identifier (FcId).')
jnxCosFcIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosFcId"))
if mibBuilder.loadTexts: jnxCosFcIdEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcIdEntry.setDescription('Each entry represents information on a forwarding-class. The entries are indexed using FcId.')
jnxCosFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1, 1), JnxCosFcIdentifier())
if mibBuilder.loadTexts: jnxCosFcId.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcId.setDescription('An Id that identifies a forwarding class.')
jnxCosFcIdToFcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1, 2), JnxCosAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFcIdToFcName.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcIdToFcName.setDescription('The name of the forwarding class for a given FcId.')
jnxCosFcFabricPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFcFabricPriority.setStatus('current')
if mibBuilder.loadTexts: jnxCosFcFabricPriority.setDescription('The fabric priority for packets belonging to the specified forwarding-class.')
jnxCosQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4), )
if mibBuilder.loadTexts: jnxCosQstatTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTable.setDescription('This table presents the per queue stats. Only those physical interfaces that support output queue stats appear in this table.')
jnxCosQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosQstatIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosQstatQueueNr"))
if mibBuilder.loadTexts: jnxCosQstatEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatEntry.setDescription('This entry contains interface output queue stats for a given output queue on the specified interface.')
jnxCosQstatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxCosQstatIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatIfIndex.setDescription('The ifIndex of the interface.')
jnxCosQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxCosQstatQueueNr.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatQueueNr.setDescription('The output queue number.')
jnxCosQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatQedPkts.setDescription('The total number of packets queued at the output queue.')
jnxCosQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatQedPktRate.setDescription('The rate (expressed in packets per second) at which packets were queued at the output queue.')
jnxCosQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatQedBytes.setDescription('Number of bytes queued at the output queue.')
jnxCosQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatQedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatQedByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were queued at the output queue.')
jnxCosQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTxedPkts.setDescription('Number of packets transmitted on the queue.')
jnxCosQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTxedPktRate.setDescription("The output queue's packet transmit rate, expressed in packets per second.")
jnxCosQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTxedBytes.setDescription('Number of bytes transmitted on the queue.')
jnxCosQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTxedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second.")
jnxCosQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTailDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTailDropPkts.setDescription('The number of packets tail dropped at the output queue.')
jnxCosQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTailDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTailDropPktRate.setDescription('The tail drop packet rate (expressed in packets per second) for the queue.')
jnxCosQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropPkts.setDescription('Total number of packets dropped due to RED (Random Early Detection) at the output on the given interface.')
jnxCosQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropPktRate.setDescription('The most recent estimate of per-second RED-dropped packets at the output queue on the given interface')
jnxCosQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRedDropPkts.setDescription('The total number of low PLP non TCP packets RED-dropped.')
jnxCosQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP non TCP packets were RED-dropped.')
jnxCosQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropPkts.setDescription('The total number of low PLP TCP packets RED-dropped at the output on the given interface.')
jnxCosQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP TCP packets were RED-dropped at the output on the given interface.')
jnxCosQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRedDropPkts.setDescription('The total number of high PLP non TCP packets RED-dropped at the output on the given interface.')
jnxCosQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP non TCP packets were RED-dropped at the output on the given interface.')
jnxCosQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropPkts.setDescription('The total number of high PLP TCP packets RED-dropped at the output on the given interface.')
jnxCosQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP TCP packets were RED-dropped at the output.')
jnxCosQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropBytes.setDescription('The total number of bytes RED-dropped at the output on the given interface.')
jnxCosQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were RED-dropped at the output on the given interface.')
jnxCosQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRedDropBytes.setDescription('The total number of low PLP non TCP bytes RED-dropped at the output on the given interface.')
jnxCosQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP non TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the output on the given interface.')
jnxCosQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRedDropBytes.setDescription('The total number of high PLP non TCP bytes RED-dropped at the output on the given interface.')
jnxCosQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP non TCP bytes were RED-dropped at the output queue on the given interface.')
jnxCosQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpRedDropPkts.setDescription('The total number of low PLP packets RED-droppped at the output on the given interface.')
jnxCosQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP packets were RED-dropped at the output.')
jnxCosQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropPkts.setDescription('The total number of medium-low PLP packets RED-droppped at the output on the given interface.')
jnxCosQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-low PLP packets were RED-dropped at the output.')
jnxCosQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropPkts.setDescription('The total number of medium-high PLP packets RED-droppped at the output on the given interface.')
jnxCosQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-high PLP packets were RED-dropped at the output.')
jnxCosQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpRedDropPkts.setDescription('The total number of high PLP packets RED-droppped at the output on the given interface.')
jnxCosQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP packets were RED-dropped at the output.')
jnxCosQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropBytes.setDescription('The total number of medium-low PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-low PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropBytes.setDescription('The total number of medium-high PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatMHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-high PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosQstatRateLimitDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropPkts.setDescription('The total number of rate-limit dropped packets at the output on the given interface.')
jnxCosQstatRateLimitDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 50), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropPktRate.setDescription('The rate (expressed in bytes per second) at which packets are rate-limit dropped at the output on the given interface.')
jnxCosQstatRateLimitDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropBytes.setDescription('The total number of rate-limit dropped bytes at the output on the given interface.')
jnxCosQstatRateLimitDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 52), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatRateLimitDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes are rate-limit dropped at the output on the given interface.')
jnxCosQstatTotalDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalDropPkts.setDescription('Total Number of packets dropped on the queue.')
jnxCosQstatTotalDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 54), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalDropPktRate.setDescription("The output queue's packet total drop rate, expressed in packets per second.")
jnxCosQstatTotalDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalDropBytes.setDescription('Total Number of bytes dropped on the queue.')
jnxCosQstatTotalDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 56), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatTotalDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatTotalDropByteRate.setDescription("The queue's current total drop rate in bytes per second.")
jnxCosQstatDepthAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 57), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatDepthAverage.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatDepthAverage.setDescription("Returns Average depth for a given interface and queue. For unsupported platform, returns '0'")
jnxCosQstatDepthCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 58), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatDepthCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatDepthCurrent.setDescription("Returns current depth for a given interface and queue. For unsupported platform, returns '0'")
jnxCosQstatDepthPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 59), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatDepthPeak.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatDepthPeak.setDescription("Returns peak depth for a given interface and queue. For unsupported platform, returns '0'")
jnxCosQstatDepthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 4, 1, 60), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQstatDepthMax.setStatus('current')
if mibBuilder.loadTexts: jnxCosQstatDepthMax.setDescription("Returns Max depth for a given interface and queue. For unsupported platform, returns '0'")
class JnxCosIfstatFlags(TextualConvention, Bits):
    description = 'Flags related to per interface drop profile stats'
    status = 'current'
    namedValues = NamedValues(("perRedDropProfileValid", 0), ("triColorConfiguredAndCapable", 1), ("triColorConfiguredAndNotCapable", 2))

jnxCosIfstatFlagTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5), )
if mibBuilder.loadTexts: jnxCosIfstatFlagTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfstatFlagTable.setDescription('This table presents the per interface cos stats flags.')
jnxCosIfstatFlagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIfIndex"))
if mibBuilder.loadTexts: jnxCosIfstatFlagEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfstatFlagEntry.setDescription('This entry contains interface cos stats flags.')
jnxCosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxCosIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfIndex.setDescription('The ifIndex of the interface.')
jnxCosIfstatFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 5, 1, 2), JnxCosIfstatFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfstatFlags.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfstatFlags.setDescription('The cos stats flags for the interface.')
jnxCosInvQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6), )
if mibBuilder.loadTexts: jnxCosInvQstatTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTable.setDescription('This table presents the same information as the jnxCosQstatTable, but with an inverted INDEX. Rather than being ordered by ifIndex and Queue Number, this table is ordered by Queue Number and ifIndex.')
jnxCosInvQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosInvQstatQueueNr"), (0, "JUNIPER-COS-MIB", "jnxCosInvQstatIfIndex"))
if mibBuilder.loadTexts: jnxCosInvQstatEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatEntry.setDescription('See jnxCosQstatEntry.')
jnxCosInvQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxCosInvQstatQueueNr.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatQueueNr.setDescription('The output queue number.')
jnxCosInvQstatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: jnxCosInvQstatIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatIfIndex.setDescription('The ifIndex of the interface.')
jnxCosInvQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatQedPkts.setDescription('The total number of packets queued at the output queue. See jnxCosQstatQedPkts.')
jnxCosInvQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatQedPktRate.setDescription('The rate (expressed in packets per second) at which packets were queued at the output queue. See jnxCosQstatQedPktRate')
jnxCosInvQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatQedBytes.setDescription('Number of bytes queued at the output queue. See jnxCosQstatQedBytes.')
jnxCosInvQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatQedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatQedByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were queued at the output queue. See jnxCosQstatQedByteRate.')
jnxCosInvQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTxedPkts.setDescription('Number of packets transmitted on the queue. See jnxCosQstatTxedPkts.')
jnxCosInvQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTxedPktRate.setDescription("The output queue's packet transmit rate, expressed in packets per second. See jnxCosQstatTxedPktRate.")
jnxCosInvQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTxedBytes.setDescription('Number of bytes transmitted on the queue. See jnxCosQstatTxedBytes.')
jnxCosInvQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTxedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second. See jnxCosQstatTxedByteRate.")
jnxCosInvQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTailDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTailDropPkts.setDescription('The number of packets tail dropped at the output queue. See jnxCosQstatTailDropPkts.')
jnxCosInvQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTailDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTailDropPktRate.setDescription('The tail drop packet rate (expressed in packets per second) for the queue. See jnxCosQstatTailDropPktRate.')
jnxCosInvQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropPkts.setDescription('Total number of packets dropped due to RED (Random Early Detection) at the output on the given interface. See jnxCosQstatTotalRedDropPkts.')
jnxCosInvQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropPktRate.setDescription('The most recent estimate of per-second RED-dropped packets at the output queue on the given interface. See jnxCosInvQstatTotalRedDropPktRate.')
jnxCosInvQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRedDropPkts.setDescription('The total number of low PLP non TCP packets RED-dropped. See jnxCosQstatLpNonTcpRedDropPkts.')
jnxCosInvQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP non TCP packets were RED-dropped. See jnxCosQstatLpNonTcpRDropPktRate.')
jnxCosInvQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropPkts.setDescription('The total number of low PLP TCP packets RED-dropped at the output on the given interface. See jnxCosQstatLpTcpRedDropPkts.')
jnxCosInvQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP TCP packets were RED-dropped at the output on the given interface. See jnxCosQstatLpTcpRedDropPktRate.')
jnxCosInvQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRedDropPkts.setDescription('The total number of high PLP non TCP packets RED-dropped at the output on the given interface. See jnxCosQstatHpNonTcpRedDropPkts.')
jnxCosInvQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP non TCP packets were RED-dropped at the output on the given interface. See jnxCosQstatHpNonTcpRDropPktRate.')
jnxCosInvQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropPkts.setDescription('The total number of high PLP TCP packets RED-dropped at the output on the given interface. See jnxCosQstatHpTcpRedDropPkts.')
jnxCosInvQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP TCP packets were RED-dropped at the output. See jnxCosQstatHpTcpRedDropPktRate.')
jnxCosInvQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropBytes.setDescription('The total number of bytes RED-dropped at the output on the given interface. See jnxCosQstatTotalRedDropBytes.')
jnxCosInvQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatTotalRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were RED-dropped at the output on the given interface. See jnxCosQstatTotalRedDropByteRate.')
jnxCosInvQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRedDropBytes.setDescription('The total number of low PLP non TCP bytes RED-dropped at the output on the given interface. See jnxCosQstatLpNonTcpRedDropBytes.')
jnxCosInvQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP non TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatLpNonTcpRDropByteRate.')
jnxCosInvQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the output on the given interface. See jnxCosQstatLpTcpRedDropBytes.')
jnxCosInvQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatLpTcpRedDropByteRate.')
jnxCosInvQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRedDropBytes.setDescription('The total number of high PLP non TCP bytes RED-dropped at the output on the given interface. See jnxCosQstatHpNonTcpRedDropBytes.')
jnxCosInvQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP non TCP bytes were RED-dropped at the output queue on the given interface. See jnxCosQstatHpNonTcpRDropByteRate.')
jnxCosInvQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the output queue on the given interface. See jnxCosQstatHpTcpRedDropBytes.')
jnxCosInvQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatHpTcpRedDropByteRate.')
jnxCosInvQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropPkts.setDescription('The total number of low PLP packets RED-droppped at the output on the given interface. See jnxCosQstatLpRedDropPkts.')
jnxCosInvQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP packets were RED-dropped at the output. See jnxCosQstatLpRedDropPktRate.')
jnxCosInvQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropPkts.setDescription('The total number of medium-low PLP packets RED-droppped at the output on the given interface. See jnxCosQstatMLpRedDropPkts.')
jnxCosInvQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-low PLP packets were RED-dropped at the output. See jnxCosQstatMLpRedDropPktRate.')
jnxCosInvQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropPkts.setDescription('The total number of medium-high PLP packets RED-droppped at the output on the given interface. See jnxCosQstatMHpRedDropPkts.')
jnxCosInvQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-high PLP packets were RED-dropped at the output. See jnxCosQstatMHpRedDropPktRate.')
jnxCosInvQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropPkts.setDescription('The total number of high PLP packets RED-droppped at the output on the given interface. See jnxCosQstatHpRedDropPkts.')
jnxCosInvQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP packets were RED-dropped at the output. See jnxCosQstatHpRedDropPktRate.')
jnxCosInvQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the output queue on the given interface. See jnxCosQstatLpRedDropBytes.')
jnxCosInvQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatLpRedDropByteRate.')
jnxCosInvQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropBytes.setDescription('The total number of medium-low PLP TCP bytes RED-dropped at the output queue on the given interface. See jnxCosQstatMLpRedDropBytes.')
jnxCosInvQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-low PLP TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatMLpRedDropByteRate.')
jnxCosInvQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropBytes.setDescription('The total number of medium-high PLP TCP bytes RED-dropped at the output queue on the given interface. See jnxCosQstatMHpRedDropBytes.')
jnxCosInvQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatMHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-high PLP TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatMHpRedDropByteRate.')
jnxCosInvQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the output queue on the given interface. See jnxCosQstatHpRedDropBytes.')
jnxCosInvQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 6, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosInvQstatHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the output on the given interface. See jnxCosQstatHpRedDropByteRate.')
jnxCosIngressQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7), )
if mibBuilder.loadTexts: jnxCosIngressQstatTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTable.setDescription('This table presents the per queue stats. Only those physical interfaces that support ingress queue stats appear in this table.')
jnxCosIngressQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIngressQstatIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosIngressQstatQueueNr"))
if mibBuilder.loadTexts: jnxCosIngressQstatEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatEntry.setDescription('This entry contains interface ingress queue stats for a given ingress queue on the specified interface.')
jnxCosIngressQstatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxCosIngressQstatIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatIfIndex.setDescription('The ifIndex of the interface.')
jnxCosIngressQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxCosIngressQstatQueueNr.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatQueueNr.setDescription('The ingress queue number.')
jnxCosIngressQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatQedPkts.setDescription('The total number of packets queued at the ingress queue.')
jnxCosIngressQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatQedPktRate.setDescription('The rate (expressed in packets per second) at which packets were queued at the ingress queue.')
jnxCosIngressQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatQedBytes.setDescription('Number of bytes queued at the ingress queue.')
jnxCosIngressQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatQedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatQedByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were queued at the ingress queue.')
jnxCosIngressQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTxedPkts.setDescription('Number of packets transmitted on the queue.')
jnxCosIngressQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTxedPktRate.setDescription("The input queue's packet transmit rate, expressed in packets per second.")
jnxCosIngressQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTxedBytes.setDescription('Number of bytes transmitted on the queue.')
jnxCosIngressQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTxedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second.")
jnxCosIngressQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTailDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTailDropPkts.setDescription('The number of packets tail dropped at the ingress queue.')
jnxCosIngressQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTailDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTailDropPktRate.setDescription('The tail drop packet rate (expressed in packets per second) for the queue.')
jnxCosIngressQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropPkts.setDescription('Total number of packets dropped due to RED (Random Early Detection) at the on the given interface.')
jnxCosIngressQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropPktRate.setDescription('The most recent estimate of per-second RED-dropped packets at the ingress queue on the given interface')
jnxCosIngressQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRedDropPkts.setDescription('The total number of low PLP non TCP packets RED-dropped.')
jnxCosIngressQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP non TCP packets were RED-dropped.')
jnxCosIngressQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropPkts.setDescription('The total number of low PLP TCP packets RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP TCP packets were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRedDropPkts.setDescription('The total number of high PLP non TCP packets RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP non TCP packets were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropPkts.setDescription('The total number of high PLP TCP packets RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP TCP packets were RED-dropped at the ingress.')
jnxCosIngressQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropBytes.setDescription('The total number of bytes RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatTotalRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRedDropBytes.setDescription('The total number of low PLP non TCP bytes RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP non TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRedDropBytes.setDescription('The total number of high PLP non TCP bytes RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP non TCP bytes were RED-dropped at the ingress queue on the given interface.')
jnxCosIngressQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the ingress queue on the given interface.')
jnxCosIngressQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropPkts.setDescription('The total number of low PLP packets RED-droppped at the ingress on the given interface.')
jnxCosIngressQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP packets were RED-dropped at the ingress .')
jnxCosIngressQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropPkts.setDescription('The total number of medium-low PLP packets RED-droppped at the ingress on the given interface.')
jnxCosIngressQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-low PLP packets were RED-dropped at the ingress .')
jnxCosIngressQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropPkts.setDescription('The total number of medium-high PLP packets RED-droppped at the ingress on the given interface.')
jnxCosIngressQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-high PLP packets were RED-dropped at the ingress.')
jnxCosIngressQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropPkts.setDescription('The total number of high PLP packets RED-droppped at the ingress on the given interface.')
jnxCosIngressQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP packets were RED-dropped at the ingress.')
jnxCosIngressQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the ingress queue on the given interface.')
jnxCosIngressQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropBytes.setDescription('The total number of medium-low PLP TCP bytes RED-dropped at the ingress queue on the given interface.')
jnxCosIngressQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-low PLP TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropBytes.setDescription('The total number of medium-high PLP TCP bytes RED-dropped at the ingress queue on the given interface.')
jnxCosIngressQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatMHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-high PLP TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the ingress queue on the given interface.')
jnxCosIngressQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the ingress on the given interface.')
jnxCosIngressQstatDepthAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 49), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatDepthAverage.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatDepthAverage.setDescription("Returns Average depth at the ingress for a given interface and queue. For unsupported platform, returns '0'")
jnxCosIngressQstatDepthCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 50), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatDepthCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatDepthCurrent.setDescription("Returns current depth at ingress for a given interface and queue. For unsupported platform, returns '0'")
jnxCosIngressQstatDepthPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 51), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatDepthPeak.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatDepthPeak.setDescription("Returns peak depth at ingress for a given interface and queue. For unsupported platform, returns '0'")
jnxCosIngressQstatDepthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 7, 1, 52), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIngressQstatDepthMax.setStatus('current')
if mibBuilder.loadTexts: jnxCosIngressQstatDepthMax.setDescription("Returns Max depth at ingress for a given interface and queue. For unsupported platform, returns '0'")
jnxCosNotifyVars = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8))
if mibBuilder.loadTexts: jnxCosNotifyVars.setStatus('current')
if mibBuilder.loadTexts: jnxCosNotifyVars.setDescription('Cos notification object definitions.')
jnxCosInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxCosInterfaceName.setStatus('current')
if mibBuilder.loadTexts: jnxCosInterfaceName.setDescription('The textual name of the Cos interface.')
jnxCosFpcIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosFpcIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosFpcIndex.setDescription('Index of FPC which has seen queue overflow')
jnxCosPfeIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosPfeIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosPfeIndex.setDescription('Index of pfe which has seen queue overflow')
jnxCosQueueIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 15, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosQueueIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosQueueIndex.setDescription('Queue index which has seen overflow')
jnxCosNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0))
if mibBuilder.loadTexts: jnxCosNotificationsPrefix.setStatus('current')
if mibBuilder.loadTexts: jnxCosNotificationsPrefix.setDescription('All Cosd notifications are registered under this branch.')
jnxCosOutOfDedicatedQueues = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 1)).setObjects(("JUNIPER-COS-MIB", "jnxCosInterfaceName"))
if mibBuilder.loadTexts: jnxCosOutOfDedicatedQueues.setStatus('current')
if mibBuilder.loadTexts: jnxCosOutOfDedicatedQueues.setDescription('No more dedicated CoS queues available')
jnxCosAlmostOutOfDedicatedQueues = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 2)).setObjects(("JUNIPER-COS-MIB", "jnxCosInterfaceName"))
if mibBuilder.loadTexts: jnxCosAlmostOutOfDedicatedQueues.setStatus('current')
if mibBuilder.loadTexts: jnxCosAlmostOutOfDedicatedQueues.setDescription('Only 10% of dedicated CoS queues are available')
jnxCosFabricQueueOverflow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 3)).setObjects(("JUNIPER-COS-MIB", "jnxCosFpcIndex"), ("JUNIPER-COS-MIB", "jnxCosPfeIndex"), ("JUNIPER-COS-MIB", "jnxCosQueueIndex"))
if mibBuilder.loadTexts: jnxCosFabricQueueOverflow.setStatus('current')
if mibBuilder.loadTexts: jnxCosFabricQueueOverflow.setDescription('Fabric Queue occupancy exceeded threshold')
jnxCosWanQueueOverflow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 4)).setObjects(("JUNIPER-COS-MIB", "jnxCosFpcIndex"), ("JUNIPER-COS-MIB", "jnxCosInterfaceName"), ("JUNIPER-COS-MIB", "jnxCosQueueIndex"))
if mibBuilder.loadTexts: jnxCosWanQueueOverflow.setStatus('current')
if mibBuilder.loadTexts: jnxCosWanQueueOverflow.setDescription('Wan Queue occupancy exceeded threshold')
jnxCosFabricQueueOverflowCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 5)).setObjects(("JUNIPER-COS-MIB", "jnxCosFpcIndex"), ("JUNIPER-COS-MIB", "jnxCosPfeIndex"), ("JUNIPER-COS-MIB", "jnxCosQueueIndex"))
if mibBuilder.loadTexts: jnxCosFabricQueueOverflowCleared.setStatus('current')
if mibBuilder.loadTexts: jnxCosFabricQueueOverflowCleared.setDescription('Fabric Queue overflow condition cleared')
jnxCosWanQueueOverflowCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 17, 0, 6)).setObjects(("JUNIPER-COS-MIB", "jnxCosFpcIndex"), ("JUNIPER-COS-MIB", "jnxCosInterfaceName"), ("JUNIPER-COS-MIB", "jnxCosQueueIndex"))
if mibBuilder.loadTexts: jnxCosWanQueueOverflowCleared.setStatus('current')
if mibBuilder.loadTexts: jnxCosWanQueueOverflowCleared.setDescription('Wan Queue overflow condition cleared')
jnxCosIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 9), )
if mibBuilder.loadTexts: jnxCosIfTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfTable.setDescription('A list of interface entries.')
jnxCosIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 9, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIfIdx"))
if mibBuilder.loadTexts: jnxCosIfEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfEntry.setDescription('An entry containing information applicable to a an interface.')
jnxCosIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfIdx.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfIdx.setDescription('A unique value, greater than zero, for each interface.')
jnxCosIfsetDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetDescr.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetDescr.setDescription('A textual string containing name of the interface.')
jnxCosIfsetQstatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10), )
if mibBuilder.loadTexts: jnxCosIfsetQstatTable.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTable.setDescription('This table presents the per queue stats. Only those physical interfaces that support output queue stats appear in this table.')
jnxCosIfsetQstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1), ).setIndexNames((0, "JUNIPER-COS-MIB", "jnxCosIfsetQstatChildIfIndex"), (0, "JUNIPER-COS-MIB", "jnxCosIfsetQstatQueueNr"))
if mibBuilder.loadTexts: jnxCosIfsetQstatEntry.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatEntry.setDescription('This entry contains interface output queue stats for a given output queue on the specified interface.')
jnxCosIfsetQstatChildIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxCosIfsetQstatChildIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatChildIfIndex.setDescription('The ifIndex of the interface.')
jnxCosIfsetQstatQueueNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxCosIfsetQstatQueueNr.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatQueueNr.setDescription('The output queue number.')
jnxCosIfsetQstatQedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatQedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatQedPkts.setDescription('The total number of packets queued at the output queue.')
jnxCosIfsetQstatQedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatQedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatQedPktRate.setDescription('The rate (expressed in packets per second) at which packets were queued at the output queue.')
jnxCosIfsetQstatQedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatQedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatQedBytes.setDescription('Number of bytes queued at the output queue.')
jnxCosIfsetQstatQedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatQedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatQedByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were queued at the output queue.')
jnxCosIfsetQstatTxedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedPkts.setDescription('Number of packets transmitted on the queue.')
jnxCosIfsetQstatTxedPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedPktRate.setDescription("The output queue's packet transmit rate, expressed in packets per second.")
jnxCosIfsetQstatTxedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedBytes.setDescription('Number of bytes transmitted on the queue.')
jnxCosIfsetQstatTxedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTxedByteRate.setDescription("The queue's current transmit rate in bytes per second.")
jnxCosIfsetQstatTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTailDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTailDropPkts.setDescription('The number of packets tail dropped at the output queue.')
jnxCosIfsetQstatTailDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTailDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTailDropPktRate.setDescription('The tail drop packet rate (expressed in packets per second) for the queue.')
jnxCosIfsetQstatTotalRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropPkts.setDescription('Total number of packets dropped due to RED (Random Early Detection) at the output on the given interface.')
jnxCosIfsetQstatTotalRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropPktRate.setDescription('The most recent estimate of per-second RED-dropped packets at the output queue on the given interface')
jnxCosIfsetQstatLpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRedDropPkts.setDescription('The total number of low PLP non TCP packets RED-dropped.')
jnxCosIfsetQstatLpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP non TCP packets were RED-dropped.')
jnxCosIfsetQstatLpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropPkts.setDescription('The total number of low PLP TCP packets RED-dropped at the output on the given interface.')
jnxCosIfsetQstatLpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP TCP packets were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpNonTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRedDropPkts.setDescription('The total number of high PLP non TCP packets RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpNonTcpRDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP non TCP packets were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpTcpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropPkts.setDescription('The total number of high PLP TCP packets RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpTcpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP TCP packets were RED-dropped at the output.')
jnxCosIfsetQstatTotalRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropBytes.setDescription('The total number of bytes RED-dropped at the output on the given interface.')
jnxCosIfsetQstatTotalRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatTotalRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatLpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRedDropBytes.setDescription('The total number of low PLP non TCP bytes RED-dropped at the output on the given interface.')
jnxCosIfsetQstatLpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP non TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatLpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the output on the given interface.')
jnxCosIfsetQstatLpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpNonTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRedDropBytes.setDescription('The total number of high PLP non TCP bytes RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpNonTcpRDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpNonTcpRDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP non TCP bytes were RED-dropped at the output queue on the given interface.')
jnxCosIfsetQstatHpTcpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosIfsetQstatHpTcpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 32), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpTcpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropPkts.setDescription('The total number of low PLP packets RED-droppped at the output on the given interface.')
jnxCosIfsetQstatLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which low PLP packets were RED-dropped at the output.')
jnxCosIfsetQstatMLpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropPkts.setDescription('The total number of medium-low PLP packets RED-droppped at the output on the given interface.')
jnxCosIfsetQstatMLpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 36), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-low PLP packets were RED-dropped at the output.')
jnxCosIfsetQstatMHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropPkts.setDescription('The total number of medium-high PLP packets RED-droppped at the output on the given interface.')
jnxCosIfsetQstatMHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 38), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which medium-high PLP packets were RED-dropped at the output.')
jnxCosIfsetQstatHpRedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropPkts.setDescription('The total number of high PLP packets RED-droppped at the output on the given interface.')
jnxCosIfsetQstatHpRedDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 40), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropPktRate.setDescription('The rate (expressed in packets per second) at which high PLP packets were RED-dropped at the output.')
jnxCosIfsetQstatLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropBytes.setDescription('The total number of low PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosIfsetQstatLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 42), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which low PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatMLpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropBytes.setDescription('The total number of medium-low PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosIfsetQstatMLpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 44), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMLpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-low PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatMHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropBytes.setDescription('The total number of medium-high PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosIfsetQstatMHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 46), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatMHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which medium-high PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatHpRedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropBytes.setDescription('The total number of high PLP TCP bytes RED-dropped at the output queue on the given interface.')
jnxCosIfsetQstatHpRedDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 48), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatHpRedDropByteRate.setDescription('The rate (expressed in bytes per second) at which high PLP TCP bytes were RED-dropped at the output on the given interface.')
jnxCosIfsetQstatRateLimitDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropPkts.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropPkts.setDescription('The total number of rate-limit dropped packets at the output on the given interface.')
jnxCosIfsetQstatRateLimitDropPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 50), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropPktRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropPktRate.setDescription('The rate (expressed in bytes per second) at which packets are rate-limit dropped at the output on the given interface.')
jnxCosIfsetQstatRateLimitDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropBytes.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropBytes.setDescription('The total number of rate-limit dropped bytes at the output on the given interface.')
jnxCosIfsetQstatRateLimitDropByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 15, 10, 1, 52), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropByteRate.setStatus('current')
if mibBuilder.loadTexts: jnxCosIfsetQstatRateLimitDropByteRate.setDescription('The rate (expressed in bytes per second) at which bytes are rate-limit dropped at the output on the given interface.')
mibBuilder.exportSymbols("JUNIPER-COS-MIB", jnxCosIfqHpTcpRedDropBytes=jnxCosIfqHpTcpRedDropBytes, jnxCosInvQstatEntry=jnxCosInvQstatEntry, jnxCosQstatHpRedDropPktRate=jnxCosQstatHpRedDropPktRate, jnxCosFcIdEntry=jnxCosFcIdEntry, jnxCosInvQstatHpRedDropBytes=jnxCosInvQstatHpRedDropBytes, jnxCosIfTable=jnxCosIfTable, jnxCosFcIdToFcName=jnxCosFcIdToFcName, jnxCosIngressQstatQedPktRate=jnxCosIngressQstatQedPktRate, jnxCosInvQstatIfIndex=jnxCosInvQstatIfIndex, jnxCosIngressQstatLpRedDropPktRate=jnxCosIngressQstatLpRedDropPktRate, jnxCosIngressQstatHpRedDropBytes=jnxCosIngressQstatHpRedDropBytes, jnxCosIfsetQstatLpNonTcpRedDropPkts=jnxCosIfsetQstatLpNonTcpRedDropPkts, jnxCosIfqTxedByteRate=jnxCosIfqTxedByteRate, jnxCosIfsetQstatQedPktRate=jnxCosIfsetQstatQedPktRate, jnxCosQstatEntry=jnxCosQstatEntry, jnxCosIngressQstatTotalRedDropByteRate=jnxCosIngressQstatTotalRedDropByteRate, jnxCosIngressQstatHpNonTcpRDropPktRate=jnxCosIngressQstatHpNonTcpRDropPktRate, jnxCosNotificationsPrefix=jnxCosNotificationsPrefix, jnxCosIfsetQstatTotalRedDropBytes=jnxCosIfsetQstatTotalRedDropBytes, jnxCosIfqQedPktRate=jnxCosIfqQedPktRate, jnxCosIngressQstatLpNonTcpRDropByteRate=jnxCosIngressQstatLpNonTcpRDropByteRate, jnxCosIfsetDescr=jnxCosIfsetDescr, jnxCosInvQstatTailDropPktRate=jnxCosInvQstatTailDropPktRate, jnxCosQstatLpNonTcpRDropByteRate=jnxCosQstatLpNonTcpRDropByteRate, jnxCosNotifyVars=jnxCosNotifyVars, jnxCosQstatQedPktRate=jnxCosQstatQedPktRate, jnxCosInvQstatTotalRedDropBytes=jnxCosInvQstatTotalRedDropBytes, jnxCosIngressQstatIfIndex=jnxCosIngressQstatIfIndex, jnxCosIngressQstatQueueNr=jnxCosIngressQstatQueueNr, jnxCosQstatIfIndex=jnxCosQstatIfIndex, jnxCosIfsetQstatMLpRedDropBytes=jnxCosIfsetQstatMLpRedDropBytes, jnxCosRestrictedQNr=jnxCosRestrictedQNr, jnxCosIfIndex=jnxCosIfIndex, jnxCosInvQstatTotalRedDropPkts=jnxCosInvQstatTotalRedDropPkts, jnxCosIngressQstatHpRedDropPktRate=jnxCosIngressQstatHpRedDropPktRate, PYSNMP_MODULE_ID=jnxCos, jnxCosIfsetQstatRateLimitDropPktRate=jnxCosIfsetQstatRateLimitDropPktRate, jnxCosIngressQstatMHpRedDropPktRate=jnxCosIngressQstatMHpRedDropPktRate, jnxCosIfsetQstatTotalRedDropByteRate=jnxCosIfsetQstatTotalRedDropByteRate, jnxCosIngressQstatDepthPeak=jnxCosIngressQstatDepthPeak, jnxCosIfsetQstatLpTcpRedDropPktRate=jnxCosIfsetQstatLpTcpRedDropPktRate, jnxCosQstatRateLimitDropBytes=jnxCosQstatRateLimitDropBytes, jnxCosIngressQstatTotalRedDropPkts=jnxCosIngressQstatTotalRedDropPkts, jnxCosIfsetQstatMHpRedDropPkts=jnxCosIfsetQstatMHpRedDropPkts, jnxCosInvQstatQedPktRate=jnxCosInvQstatQedPktRate, jnxCosQstatQedPkts=jnxCosQstatQedPkts, jnxCosQstatDepthCurrent=jnxCosQstatDepthCurrent, jnxCosQstatTotalRedDropBytes=jnxCosQstatTotalRedDropBytes, jnxCosQstatHpRedDropPkts=jnxCosQstatHpRedDropPkts, jnxCosInvQstatMHpRedDropByteRate=jnxCosInvQstatMHpRedDropByteRate, jnxCosIngressQstatLpRedDropPkts=jnxCosIngressQstatLpRedDropPkts, jnxCosQstatTxedByteRate=jnxCosQstatTxedByteRate, jnxCosQstatMHpRedDropBytes=jnxCosQstatMHpRedDropBytes, jnxCosQstatHpRedDropByteRate=jnxCosQstatHpRedDropByteRate, jnxCosIngressQstatTxedPkts=jnxCosIngressQstatTxedPkts, jnxCosQstatTxedPkts=jnxCosQstatTxedPkts, jnxCosQstatTable=jnxCosQstatTable, jnxCosIngressQstatLpTcpRedDropPkts=jnxCosIngressQstatLpTcpRedDropPkts, jnxCosQstatTotalRedDropByteRate=jnxCosQstatTotalRedDropByteRate, jnxCosQstatHpRedDropBytes=jnxCosQstatHpRedDropBytes, jnxCosIfsetQstatRateLimitDropBytes=jnxCosIfsetQstatRateLimitDropBytes, jnxCosIfsetQstatQedByteRate=jnxCosIfsetQstatQedByteRate, jnxCosIfqLpTcpRedDropByteRate=jnxCosIfqLpTcpRedDropByteRate, jnxCosInvQstatQedPkts=jnxCosInvQstatQedPkts, jnxCosIfsetQstatHpTcpRedDropByteRate=jnxCosIfsetQstatHpTcpRedDropByteRate, jnxCosIfqLpNonTcpRedDropBytes=jnxCosIfqLpNonTcpRedDropBytes, JnxCosFcIdentifier=JnxCosFcIdentifier, jnxCosQstatTotalDropPktRate=jnxCosQstatTotalDropPktRate, jnxCosIfqTotalRedDropBytes=jnxCosIfqTotalRedDropBytes, jnxCosInvQstatLpNonTcpRedDropBytes=jnxCosInvQstatLpNonTcpRedDropBytes, jnxCosIfsetQstatHpNonTcpRDropByteRate=jnxCosIfsetQstatHpNonTcpRDropByteRate, jnxCosQstatMHpRedDropPktRate=jnxCosQstatMHpRedDropPktRate, jnxCosIngressQstatHpRedDropPkts=jnxCosIngressQstatHpRedDropPkts, jnxCosFabricQueueOverflow=jnxCosFabricQueueOverflow, jnxCosIfqFc=jnxCosIfqFc, jnxCosIngressQstatLpTcpRedDropByteRate=jnxCosIngressQstatLpTcpRedDropByteRate, jnxCosIngressQstatLpRedDropByteRate=jnxCosIngressQstatLpRedDropByteRate, jnxCosQstatLpNonTcpRedDropPkts=jnxCosQstatLpNonTcpRedDropPkts, jnxCosInvQstatTailDropPkts=jnxCosInvQstatTailDropPkts, jnxCosIfsetQstatLpRedDropPkts=jnxCosIfsetQstatLpRedDropPkts, jnxCosQstatHpTcpRedDropBytes=jnxCosQstatHpTcpRedDropBytes, jnxCosIfsetQstatMHpRedDropByteRate=jnxCosIfsetQstatMHpRedDropByteRate, jnxCosIfsetQstatMHpRedDropPktRate=jnxCosIfsetQstatMHpRedDropPktRate, jnxCosInvQstatTotalRedDropPktRate=jnxCosInvQstatTotalRedDropPktRate, jnxCosIngressQstatTailDropPkts=jnxCosIngressQstatTailDropPkts, jnxCosQstatRateLimitDropPkts=jnxCosQstatRateLimitDropPkts, jnxCosIfsetQstatTxedPkts=jnxCosIfsetQstatTxedPkts, jnxCosIfqTailDropPktRate=jnxCosIfqTailDropPktRate, jnxCosInvQstatMLpRedDropBytes=jnxCosInvQstatMLpRedDropBytes, jnxCosFabricQueueOverflowCleared=jnxCosFabricQueueOverflowCleared, jnxCosQstatDepthAverage=jnxCosQstatDepthAverage, jnxCosQstatTotalDropByteRate=jnxCosQstatTotalDropByteRate, jnxCosPfeIndex=jnxCosPfeIndex, jnxCosQstatTailDropPktRate=jnxCosQstatTailDropPktRate, jnxCosInvQstatHpRedDropPktRate=jnxCosInvQstatHpRedDropPktRate, jnxCosIfsetQstatLpRedDropByteRate=jnxCosIfsetQstatLpRedDropByteRate, jnxCosIfqLpTcpRedDropPkts=jnxCosIfqLpTcpRedDropPkts, jnxCosQstatLpRedDropPkts=jnxCosQstatLpRedDropPkts, jnxCosIfsetQstatTxedBytes=jnxCosIfsetQstatTxedBytes, jnxCosIfsetQstatQedPkts=jnxCosIfsetQstatQedPkts, jnxCosIngressQstatMHpRedDropPkts=jnxCosIngressQstatMHpRedDropPkts, jnxCosIfsetQstatHpRedDropPkts=jnxCosIfsetQstatHpRedDropPkts, JnxCosAdminString=JnxCosAdminString, jnxCosInvQstatHpTcpRedDropPktRate=jnxCosInvQstatHpTcpRedDropPktRate, jnxCosQstatLpNonTcpRedDropBytes=jnxCosQstatLpNonTcpRedDropBytes, jnxCosIfsetQstatMLpRedDropByteRate=jnxCosIfsetQstatMLpRedDropByteRate, jnxCosQstatLpNonTcpRDropPktRate=jnxCosQstatLpNonTcpRDropPktRate, jnxCosIngressQstatLpRedDropBytes=jnxCosIngressQstatLpRedDropBytes, jnxCosQstatQueueNr=jnxCosQstatQueueNr, jnxCosIngressQstatHpNonTcpRDropByteRate=jnxCosIngressQstatHpNonTcpRDropByteRate, jnxCosIfsetQstatTotalRedDropPktRate=jnxCosIfsetQstatTotalRedDropPktRate, jnxCosIngressQstatHpRedDropByteRate=jnxCosIngressQstatHpRedDropByteRate, jnxCosIfqTotalRedDropByteRate=jnxCosIfqTotalRedDropByteRate, jnxCosIfqHpTcpRedDropPkts=jnxCosIfqHpTcpRedDropPkts, jnxCosIngressQstatTotalRedDropPktRate=jnxCosIngressQstatTotalRedDropPktRate, jnxCosIngressQstatHpTcpRedDropPkts=jnxCosIngressQstatHpTcpRedDropPkts, jnxCosQstatTotalDropPkts=jnxCosQstatTotalDropPkts, jnxCosIngressQstatLpNonTcpRDropPktRate=jnxCosIngressQstatLpNonTcpRDropPktRate, jnxCosIfsetQstatMLpRedDropPkts=jnxCosIfsetQstatMLpRedDropPkts, jnxCosIfqTxedPkts=jnxCosIfqTxedPkts, jnxCosIfsetQstatMLpRedDropPktRate=jnxCosIfsetQstatMLpRedDropPktRate, jnxCosInvQstatQedBytes=jnxCosInvQstatQedBytes, jnxCosIngressQstatTxedByteRate=jnxCosIngressQstatTxedByteRate, jnxCosQstatRateLimitDropPktRate=jnxCosQstatRateLimitDropPktRate, jnxCosQstatHpNonTcpRDropByteRate=jnxCosQstatHpNonTcpRDropByteRate, jnxCosIngressQstatHpNonTcpRedDropPkts=jnxCosIngressQstatHpNonTcpRedDropPkts, jnxCosAlmostOutOfDedicatedQueues=jnxCosAlmostOutOfDedicatedQueues, jnxCosIngressQstatQedByteRate=jnxCosIngressQstatQedByteRate, jnxCosIngressQstatTotalRedDropBytes=jnxCosIngressQstatTotalRedDropBytes, jnxCosIngressQstatMLpRedDropPkts=jnxCosIngressQstatMLpRedDropPkts, jnxCosIfsetQstatHpRedDropPktRate=jnxCosIfsetQstatHpRedDropPktRate, jnxCosIfqHpNonTcpRedDropPkts=jnxCosIfqHpNonTcpRedDropPkts, jnxCosInvQstatMHpRedDropPkts=jnxCosInvQstatMHpRedDropPkts, jnxCosInvQstatLpRedDropBytes=jnxCosInvQstatLpRedDropBytes, jnxCosIngressQstatMLpRedDropBytes=jnxCosIngressQstatMLpRedDropBytes, jnxCosQstatLpTcpRedDropByteRate=jnxCosQstatLpTcpRedDropByteRate, jnxCosIfqLpNonTcpRedDropByteRate=jnxCosIfqLpNonTcpRedDropByteRate, jnxCosQstatMLpRedDropBytes=jnxCosQstatMLpRedDropBytes, jnxCosQstatLpTcpRedDropPkts=jnxCosQstatLpTcpRedDropPkts, jnxCosInvQstatTotalRedDropByteRate=jnxCosInvQstatTotalRedDropByteRate, jnxCosQstatTotalDropBytes=jnxCosQstatTotalDropBytes, jnxCosInvQstatLpNonTcpRDropByteRate=jnxCosInvQstatLpNonTcpRDropByteRate, jnxCosQstatLpTcpRedDropBytes=jnxCosQstatLpTcpRedDropBytes, jnxCosIfqQedByteRate=jnxCosIfqQedByteRate, jnxCosIfqHpTcpRedDropPktRate=jnxCosIfqHpTcpRedDropPktRate, jnxCosInvQstatLpTcpRedDropPktRate=jnxCosInvQstatLpTcpRedDropPktRate, jnxCosIngressQstatTxedBytes=jnxCosIngressQstatTxedBytes, jnxCosQstatQedByteRate=jnxCosQstatQedByteRate, jnxCosIngressQstatLpNonTcpRedDropPkts=jnxCosIngressQstatLpNonTcpRedDropPkts, jnxCosQstatTotalRedDropPktRate=jnxCosQstatTotalRedDropPktRate, jnxCosInvQstatQueueNr=jnxCosInvQstatQueueNr, jnxCosIfqTxedBytes=jnxCosIfqTxedBytes, jnxCosFcId=jnxCosFcId, jnxCosIngressQstatLpTcpRedDropPktRate=jnxCosIngressQstatLpTcpRedDropPktRate, jnxCosIngressQstatHpTcpRedDropPktRate=jnxCosIngressQstatHpTcpRedDropPktRate, jnxCosQstatRateLimitDropByteRate=jnxCosQstatRateLimitDropByteRate, jnxCosInvQstatLpTcpRedDropByteRate=jnxCosInvQstatLpTcpRedDropByteRate, jnxCosIfsetQstatHpRedDropByteRate=jnxCosIfsetQstatHpRedDropByteRate, jnxCosIfsetQstatLpTcpRedDropPkts=jnxCosIfsetQstatLpTcpRedDropPkts, jnxCosQstatMLpRedDropPktRate=jnxCosQstatMLpRedDropPktRate, jnxCosInvQstatHpTcpRedDropBytes=jnxCosInvQstatHpTcpRedDropBytes, jnxCosQstatMLpRedDropPkts=jnxCosQstatMLpRedDropPkts, jnxCosInvQstatHpNonTcpRDropPktRate=jnxCosInvQstatHpNonTcpRDropPktRate, jnxCosInvQstatHpNonTcpRedDropPkts=jnxCosInvQstatHpNonTcpRedDropPkts, jnxCosIfqHpNonTcpRedDropByteRate=jnxCosIfqHpNonTcpRedDropByteRate, jnxCosQstatTotalRedDropPkts=jnxCosQstatTotalRedDropPkts, jnxCosIngressQstatHpTcpRedDropByteRate=jnxCosIngressQstatHpTcpRedDropByteRate, jnxCosWanQueueOverflowCleared=jnxCosWanQueueOverflowCleared, jnxCosInvQstatLpRedDropPktRate=jnxCosInvQstatLpRedDropPktRate, jnxCosIngressQstatLpTcpRedDropBytes=jnxCosIngressQstatLpTcpRedDropBytes, jnxCosIfsetQstatTxedByteRate=jnxCosIfsetQstatTxedByteRate, jnxCosIfqTotalRedDropPktRate=jnxCosIfqTotalRedDropPktRate, jnxCosInvQstatHpRedDropPkts=jnxCosInvQstatHpRedDropPkts, jnxCosQstatDepthPeak=jnxCosQstatDepthPeak, jnxCosIfsetQstatRateLimitDropByteRate=jnxCosIfsetQstatRateLimitDropByteRate, jnxCosOutOfDedicatedQueues=jnxCosOutOfDedicatedQueues, jnxCosIfstatFlagTable=jnxCosIfstatFlagTable, jnxCosIfsetQstatQueueNr=jnxCosIfsetQstatQueueNr, jnxCosFcName=jnxCosFcName, jnxCosInvQstatTxedPkts=jnxCosInvQstatTxedPkts, jnxCosIngressQstatQedBytes=jnxCosIngressQstatQedBytes, jnxCosIfqTotalRedDropPkts=jnxCosIfqTotalRedDropPkts, jnxCosIfqQedPkts=jnxCosIfqQedPkts, jnxCosInvQstatTxedBytes=jnxCosInvQstatTxedBytes, jnxCosIfsetQstatHpNonTcpRedDropBytes=jnxCosIfsetQstatHpNonTcpRedDropBytes, jnxCosIngressQstatMHpRedDropBytes=jnxCosIngressQstatMHpRedDropBytes, jnxCosIfsetQstatTailDropPkts=jnxCosIfsetQstatTailDropPkts, jnxCosQstatLpTcpRedDropPktRate=jnxCosQstatLpTcpRedDropPktRate, jnxCosInvQstatLpTcpRedDropPkts=jnxCosInvQstatLpTcpRedDropPkts, jnxCosIngressQstatHpTcpRedDropBytes=jnxCosIngressQstatHpTcpRedDropBytes, jnxCosInterfaceName=jnxCosInterfaceName, jnxCosIfqStatsTable=jnxCosIfqStatsTable, jnxCosIfqQedBytes=jnxCosIfqQedBytes, jnxCosFcTable=jnxCosFcTable, jnxCosIfsetQstatMHpRedDropBytes=jnxCosIfsetQstatMHpRedDropBytes, jnxCosIfqIfIndex=jnxCosIfqIfIndex, jnxCosIngressQstatTable=jnxCosIngressQstatTable, jnxCosFcEntry=jnxCosFcEntry, jnxCosIngressQstatLpNonTcpRedDropBytes=jnxCosIngressQstatLpNonTcpRedDropBytes, jnxCosIfsetQstatHpTcpRedDropPktRate=jnxCosIfsetQstatHpTcpRedDropPktRate, jnxCosInvQstatLpRedDropPkts=jnxCosInvQstatLpRedDropPkts, jnxCosQstatDepthMax=jnxCosQstatDepthMax, jnxCosQstatQedBytes=jnxCosQstatQedBytes, jnxCosInvQstatHpTcpRedDropPkts=jnxCosInvQstatHpTcpRedDropPkts, jnxCosIngressQstatMLpRedDropPktRate=jnxCosIngressQstatMLpRedDropPktRate, jnxCosInvQstatLpNonTcpRedDropPkts=jnxCosInvQstatLpNonTcpRedDropPkts, jnxCosIngressQstatEntry=jnxCosIngressQstatEntry, jnxCosIngressQstatTxedPktRate=jnxCosIngressQstatTxedPktRate, jnxCosInvQstatTxedPktRate=jnxCosInvQstatTxedPktRate, jnxCosQstatTxedPktRate=jnxCosQstatTxedPktRate, jnxCosIfqLpNonTcpRedDropPktRate=jnxCosIfqLpNonTcpRedDropPktRate, jnxCosIfsetQstatHpNonTcpRDropPktRate=jnxCosIfsetQstatHpNonTcpRDropPktRate, jnxCosIfIdx=jnxCosIfIdx, jnxCosIfqHpNonTcpRedDropPktRate=jnxCosIfqHpNonTcpRedDropPktRate, jnxCosIfsetQstatLpNonTcpRDropByteRate=jnxCosIfsetQstatLpNonTcpRDropByteRate, jnxCosInvQstatTxedByteRate=jnxCosInvQstatTxedByteRate, jnxCosQstatHpNonTcpRDropPktRate=jnxCosQstatHpNonTcpRDropPktRate, jnxCosQstatHpTcpRedDropByteRate=jnxCosQstatHpTcpRedDropByteRate, jnxCosQstatLpRedDropBytes=jnxCosQstatLpRedDropBytes, jnxCosIngressQstatMHpRedDropByteRate=jnxCosIngressQstatMHpRedDropByteRate, jnxCosIngressQstatDepthMax=jnxCosIngressQstatDepthMax, jnxCosIngressQstatDepthCurrent=jnxCosIngressQstatDepthCurrent, jnxCosFpcIndex=jnxCosFpcIndex, jnxCosInvQstatMHpRedDropPktRate=jnxCosInvQstatMHpRedDropPktRate, jnxCosIfsetQstatTable=jnxCosIfsetQstatTable, jnxCosQstatTailDropPkts=jnxCosQstatTailDropPkts, jnxCosInvQstatMLpRedDropByteRate=jnxCosInvQstatMLpRedDropByteRate, jnxCosIfqLpNonTcpRedDropPkts=jnxCosIfqLpNonTcpRedDropPkts, jnxCosWanQueueOverflow=jnxCosWanQueueOverflow, jnxCosInvQstatHpRedDropByteRate=jnxCosInvQstatHpRedDropByteRate, jnxCosIfsetQstatTotalRedDropPkts=jnxCosIfsetQstatTotalRedDropPkts, jnxCosFcQueueNr=jnxCosFcQueueNr, jnxCosInvQstatHpTcpRedDropByteRate=jnxCosInvQstatHpTcpRedDropByteRate, jnxCosIngressQstatTailDropPktRate=jnxCosIngressQstatTailDropPktRate, jnxCosIfsetQstatLpTcpRedDropByteRate=jnxCosIfsetQstatLpTcpRedDropByteRate, jnxCosIfsetQstatChildIfIndex=jnxCosIfsetQstatChildIfIndex, jnxCosIfqHpTcpRedDropByteRate=jnxCosIfqHpTcpRedDropByteRate, jnxCosIfsetQstatHpNonTcpRedDropPkts=jnxCosIfsetQstatHpNonTcpRedDropPkts, jnxCosIfsetQstatRateLimitDropPkts=jnxCosIfsetQstatRateLimitDropPkts, jnxCosInvQstatHpNonTcpRedDropBytes=jnxCosInvQstatHpNonTcpRedDropBytes, jnxCosInvQstatLpRedDropByteRate=jnxCosInvQstatLpRedDropByteRate, jnxCosIngressQstatDepthAverage=jnxCosIngressQstatDepthAverage, jnxCosIfsetQstatHpRedDropBytes=jnxCosIfsetQstatHpRedDropBytes, jnxCosIfsetQstatLpNonTcpRDropPktRate=jnxCosIfsetQstatLpNonTcpRDropPktRate, jnxCosInvQstatTable=jnxCosInvQstatTable, JnxCosIfstatFlags=JnxCosIfstatFlags, jnxCosIngressQstatHpNonTcpRedDropBytes=jnxCosIngressQstatHpNonTcpRedDropBytes, jnxCosIfsetQstatHpTcpRedDropBytes=jnxCosIfsetQstatHpTcpRedDropBytes, jnxCosIfsetQstatEntry=jnxCosIfsetQstatEntry, jnxCosInvQstatQedByteRate=jnxCosInvQstatQedByteRate, jnxCosInvQstatLpTcpRedDropBytes=jnxCosInvQstatLpTcpRedDropBytes, jnxCosQstatMHpRedDropPkts=jnxCosQstatMHpRedDropPkts, jnxCosQstatHpTcpRedDropPkts=jnxCosQstatHpTcpRedDropPkts, jnxCosIngressQstatQedPkts=jnxCosIngressQstatQedPkts)
mibBuilder.exportSymbols("JUNIPER-COS-MIB", jnxCosIfsetQstatLpRedDropBytes=jnxCosIfsetQstatLpRedDropBytes, jnxCosIfqStatsEntry=jnxCosIfqStatsEntry, jnxCosIfqLpTcpRedDropBytes=jnxCosIfqLpTcpRedDropBytes, jnxCosIfstatFlagEntry=jnxCosIfstatFlagEntry, jnxCosInvQstatMHpRedDropBytes=jnxCosInvQstatMHpRedDropBytes, jnxCosIfEntry=jnxCosIfEntry, jnxCosIfsetQstatTailDropPktRate=jnxCosIfsetQstatTailDropPktRate, jnxCosIfsetQstatTxedPktRate=jnxCosIfsetQstatTxedPktRate, jnxCosQstatHpNonTcpRedDropPkts=jnxCosQstatHpNonTcpRedDropPkts, jnxCosQstatLpRedDropPktRate=jnxCosQstatLpRedDropPktRate, jnxCosInvQstatLpNonTcpRDropPktRate=jnxCosInvQstatLpNonTcpRDropPktRate, jnxCosFcFabricPriority=jnxCosFcFabricPriority, jnxCosInvQstatMLpRedDropPkts=jnxCosInvQstatMLpRedDropPkts, jnxCosIfqTailDropPkts=jnxCosIfqTailDropPkts, jnxCosQstatHpTcpRedDropPktRate=jnxCosQstatHpTcpRedDropPktRate, jnxCosIfsetQstatLpNonTcpRedDropBytes=jnxCosIfsetQstatLpNonTcpRedDropBytes, jnxCosIfqHpNonTcpRedDropBytes=jnxCosIfqHpNonTcpRedDropBytes, jnxCosInvQstatMLpRedDropPktRate=jnxCosInvQstatMLpRedDropPktRate, jnxCosQstatHpNonTcpRedDropBytes=jnxCosQstatHpNonTcpRedDropBytes, jnxCosQstatMHpRedDropByteRate=jnxCosQstatMHpRedDropByteRate, jnxCosInvQstatHpNonTcpRDropByteRate=jnxCosInvQstatHpNonTcpRDropByteRate, jnxCosQstatMLpRedDropByteRate=jnxCosQstatMLpRedDropByteRate, jnxCosQueueIndex=jnxCosQueueIndex, jnxCosIfsetQstatLpRedDropPktRate=jnxCosIfsetQstatLpRedDropPktRate, jnxCosIfqLpTcpRedDropPktRate=jnxCosIfqLpTcpRedDropPktRate, jnxCosQstatLpRedDropByteRate=jnxCosQstatLpRedDropByteRate, jnxCos=jnxCos, jnxCosQstatTxedBytes=jnxCosQstatTxedBytes, jnxCosIfstatFlags=jnxCosIfstatFlags, jnxCosIfsetQstatLpTcpRedDropBytes=jnxCosIfsetQstatLpTcpRedDropBytes, jnxCosFcIdTable=jnxCosFcIdTable, jnxCosIngressQstatMLpRedDropByteRate=jnxCosIngressQstatMLpRedDropByteRate, jnxCosIfsetQstatQedBytes=jnxCosIfsetQstatQedBytes, jnxCosIfsetQstatHpTcpRedDropPkts=jnxCosIfsetQstatHpTcpRedDropPkts, jnxCosIfqTxedPktRate=jnxCosIfqTxedPktRate)
