#
# PySNMP MIB module PAIRGAIN-SDSLCELL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAIRGAIN-SDSLCELL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainSDSLCell, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainSDSLCell")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, iso, IpAddress, TimeTicks, NotificationType, ModuleIdentity, ObjectIdentity, Counter64, MibIdentifier, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "iso", "IpAddress", "TimeTicks", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Counter64", "MibIdentifier", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, RowStatus, TextualConvention, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "TimeStamp")
class PgSdslcellLineProfileType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PgSdslcellAlarmProfileType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

pgsdslCellMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 14, 1))
if mibBuilder.loadTexts: pgsdslCellMIB.setLastUpdated('0003170000Z')
if mibBuilder.loadTexts: pgsdslCellMIB.setOrganization('PairGain Technologies Inc.')
if mibBuilder.loadTexts: pgsdslCellMIB.setContactInfo(' 14402 Franklin Avenue Tustin, CA 92780 ')
if mibBuilder.loadTexts: pgsdslCellMIB.setDescription('The module defines the SDSL CELL MIB ')
pgsdslCellMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1))
pgSdslCellLineTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 1), )
if mibBuilder.loadTexts: pgSdslCellLineTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineTable.setDescription('This table contains the information pointers used to configure each physical line/port of the SDSL Cell card. Each line/port is assigned the index of a Line Profile which characterizes the speed and other characteristics of the line/port. Each line/port is also assigned the index of an Alarm Profile which characterizes the alarm settings of the line/port. ')
pgSdslCellLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslCellLineEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineEntry.setDescription('This entry contains the indexes of the Line and Alarm Profiles that are assigned to the physical interface indexed by the ifIndex. ')
pgSdslCellLineProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 1, 1, 1), PgSdslcellLineProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineProfile.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfile.setDescription("The value of this object identifies the row in the Cell SDSL Line Configuration Profile Table, (pgSdslCellLineProfileTable), which applies for this Cell SDSL line. In the case which the configuration profile has not been set, the value will be set to '0'. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
pgSdslCellAlarmProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 1, 1, 2), PgSdslcellAlarmProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellAlarmProfile.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfile.setDescription("The value of this object identifies the row in the Cell SDSL Line Alarm Configuration Profile Table, (pgSdslCellLineAlarmProfileTable), which applies to this Cell SDSL line. In the case which the configuration profile has not been set, the value will be set to '0'. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
pgSdslCellPhysTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2), )
if mibBuilder.loadTexts: pgSdslCellPhysTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPhysTable.setDescription('This table provides one row for each port. Each row contains the Physical Layer Parameters table for that port.')
pgSdslCellPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslCellPhysEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPhysEntry.setDescription('An entry in the pgSdslCellPhysTable.')
pgSdslCellInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellInvSerialNumber.setDescription('Vendor specific string that identifies the vendor equipment.')
pgSdslCellInvVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellInvVendorID.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellInvVendorID.setDescription('The vendor ID assigned by T1E1.413 according to its Annex D.')
pgSdslCellInvVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellInvVersionNumber.setDescription('Vendor specific Version number ')
pgSdslCellCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCurrSnrMgn.setDescription('Noise Margin as seen by this ATU with respect to its received signal in tenth dB.')
pgSdslCellCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 630))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCurrAtn.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCurrAtn.setDescription('Measured difference in the total power transmitted by the peer and the total power received by this end. This is measured in in tenth dB.')
pgSdslCellCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("hand", 3), ("test", 4), ("fail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCurrStatus.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCurrStatus.setDescription('Status indicates the state of the Port. This value is intended to give more detail than is currently available through the ifOperStatus. UP (1) - SDSL line is in data mode, it is synchronized. DOWN (2) - SDSL is down and no CPE has been recognized HAND (3) - SDSL is down but a CPE has been recognized and SDSL training is in progress (handshake phase) TEST (4) - SDSL line is in a test mode FAIL (5) - SDSL line is down and had some unrecoverable hardware failure or transceiver is missing This is intended to supplement ifOperStatus.')
pgSdslCellLineProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellLineProfileIndexNext.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfileIndexNext.setDescription(" This object contains an appropriate value to be used for pgSdslCellLineProfileIndex when creating entries in the pgSdslCellLineProfileTable. The value '0' indicates that no unassigned entries are available. To obtain the pgSdslCellLineProfileIndexNext value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
pgSdslCellLineProfileTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4), )
if mibBuilder.loadTexts: pgSdslCellLineProfileTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfileTable.setDescription('This table contains information on the Cell-SDSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the Cell-SDSL line.')
pgSdslCellLineProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1), ).setIndexNames((0, "PAIRGAIN-SDSLCELL-MIB", "pgSdslCellLineProfileIndex"))
if mibBuilder.loadTexts: pgSdslCellLineProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of an SDSL Cell. A profile is created in one step with all necessary parameter values and pgSdslCellLineProfileRowStatus set to createAndGo. This RowStatus object is also used to delete destroy profiles.')
pgSdslCellLineProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 1), PgSdslcellLineProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineProfileIndex.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfileIndex.setDescription('This object is used by the line configuration table in order to identify a row of this table')
pgSdslCellLineProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated ports. If the implementator of this MIB has chosen not to implement `dynamic assignment' of profiles, this object's MIN-ACCESS is read-only and its value is always to be `active'.")
pgSdslCellLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("twoB1Q", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineCode.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineCode.setDescription('Specifies the SDSL coding type used on this line. Other types may be added in the future.')
pgSdslCellLineRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("autoBaud", 2), ("autoConex", 3), ("fixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineRateMode.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineRateMode.setDescription('Defines what form of transmit rate adaptation is configured on this port. See chipset description for more information.')
pgSdslCellLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2320))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineRate.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineRate.setDescription('Defines the rate of this port , if RateMode is set to fixed')
pgSdslCellLineTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("co", 1), ("rt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellLineTermType.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineTermType.setDescription('Defines the mode of the transceiver ,intend for testing only')
pgSdslCellLineProfileInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notused", 1), ("inuse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellLineProfileInUse.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellLineProfileInUse.setDescription('Defines whether this profile is in use. The agent must insure that this object is up to date whenever the line table is updated. If the implementator of this MIB has choosen not to implement this feature, this object should return noSuchName upon SNMP request.')
pgSdslCellAlarmProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellAlarmProfileIndexNext.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfileIndexNext.setDescription(" This object contains an appropriate value to be used for pgSdslCellAlarmProfileIndex when creating entries in the pgSdslCellAlarmProfileTable. The value '0' indicates that no unassigned entries are available. To obtain the pgSdslCellAlarmProfileIndexNext value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
pgSdslCellAlarmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6), )
if mibBuilder.loadTexts: pgSdslCellAlarmProfileTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfileTable.setDescription('This table contains information on the Cell-SDSL Alarm configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the Cell-SDSL line Alarms.')
pgSdslCellAlarmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1), ).setIndexNames((0, "PAIRGAIN-SDSLCELL-MIB", "pgSdslCellAlarmProfileIndex"))
if mibBuilder.loadTexts: pgSdslCellAlarmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfileEntry.setDescription('Each entry consists of a list of parameters that represents the Alarm configuration of an Cell SDSL port. A profile is created in one step with all necessary parameter values and pgSdslCellAlarmProfileRowStatus set to createAndGo. This RowStatus object is also used to delete destroy profiles.')
pgSdslCellAlarmProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 1), PgSdslcellAlarmProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellAlarmProfileIndex.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfileIndex.setDescription('This object is used by the line alarm configuration table in order to identify a row of this table')
pgSdslCellAlarmProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellAlarmProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated ports. If the implementator of this MIB has chosen not to implement `dynamic assignment' of profiles, this object's MIN-ACCESS is read-only and its value is always to be `active'.")
pgSdslCellThresh15MinLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellThresh15MinLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThresh15MinLOSS.setDescription("The number of Loss of Signal Seconds, encountered by an Cell SDSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an pgSdslCellLOSSThreshTrap. Limit of one trap will be sent for any one interval. A value of '0' will disable the trap.")
pgSdslCellThresh15MinLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellThresh15MinLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThresh15MinLOCD.setDescription("The number of Loss of Cell Delineation, encountered by an Cell SDSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an pgSdslCellLOCDThreshTrap. Limit of one trap will be sent for any one interval. A value of '0' will disable the trap.")
pgSdslCellThresh15MinSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellThresh15MinSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThresh15MinSLOCD.setDescription("The number of Severe Loss of Cell Delineation, encountered by an Cell SDSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an pgSdslCellSLOCDThreshTrap. Limit of one trap will be sent for any one interval. A value of '0' will disable the trap.")
pgSdslCellThreshSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellThreshSNR.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThreshSNR.setDescription("The SNR value below which causes the SNMP agent to send a pgSdslCellSNRThreshTrap. Limit of one trap will be sent for any TBD interval. A value of '0' will disable the trap.")
pgSdslCellAlarmProfileInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notused", 1), ("inuse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellAlarmProfileInUse.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmProfileInUse.setDescription('Defines whether this profile is in use. The agent must insure that this object is up to date whenever the line table is updated. If the implementator of this MIB has choosen not to implement this feature, this object should return noSuchName upon SNMP request.')
pgSdslCellPerfCurrTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7), )
if mibBuilder.loadTexts: pgSdslCellPerfCurrTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurrTable.setDescription('This table contains running counters on the Cell-SDSL Line performance data. These counters will rollover after overflow. These counters are used internally for testing and production purposes and need not be displayed to the end-user since all of the information is available in other history tables. These counters are only cleared by explicitly calling the pgSdslCellClearStats function. ')
pgSdslCellPerfCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslCellPerfCurrEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurrEntry.setDescription('An Entry in pgSdslCellPerfCurrTable ')
pgSdslCellPerfCurrLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurrLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurrLOSS.setDescription('The number of Loss of Signal seconds, encountered by an Cell SDSL interface since powered up or since last cleared with a clear command')
pgSdslCellPerfCurrLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurrLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurrLOCD.setDescription('The number of Loss of Cell Delineation, encountered by an Cell SDSL interface since powered up or since last cleared with a clear command')
pgSdslCellPerfCurrSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurrSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurrSLOCD.setDescription('The number of Severe Loss of Cell Delineation, encountered by an Cell SDSL interface since powered up or since last cleared with a clear command')
pgSdslCellClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellClearStats.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellClearStats.setDescription("Clear running statistics counters to zero on this particular port. Writing a '1' to this MIB object only clears the counters present in pgSdslCellPerfCurrTable with the matching ifIndex.")
pgSdslCellStatsLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 7, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellStatsLastCleared.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellStatsLastCleared.setDescription("The value of MIB II's sysUpTime object at the last time these statistics were cleared. At power on, this value should contain 0. ")
pgSdslCellPerfCurr15MinTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8), )
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinTable.setDescription('This table contains information on the Cell-SDSL Line performance data for the current 15 minute period')
pgSdslCellPerfCurr15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinEntry.setDescription('An Entry in pgSdslCellPerfCurr15MinTable ')
pgSdslCellPerfCurr15MinLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinLOSS.setDescription('The number of Loss of Signal seconds, encountered by an Cell SDSL interface within current 15 minutes performance data collection interval')
pgSdslCellPerfCurr15MinLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinLOCD.setDescription('The number of Loss of Cell Delineation, encountered by an Cell SDSL interface within current 15 minutes performance data collection interval')
pgSdslCellPerfCurr15MinSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr15MinSLOCD.setDescription('The number of Severe Loss of Cell Delineation, encountered by an Cell SDSL interface within current 15 minutes performance data collection interval')
pgSdslCellClearHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSdslCellClearHistory.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellClearHistory.setDescription("Writing a '1' to this object clears all of the statistics and history counters related to this port (ifIndex) except for the running counters stored in pgSdslCellPerfCurrTable. The following table entries indexed by ifIndex will be cleared by setting this object: pgSdslCellPerfCurr15MinTable, pgSdslCellPerf15MinIntervalTable, pgSdslCellPerfCurr24hTable, pgSdslCellPerf24hIntervalTable. ")
pgSdslCellHistoryLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellHistoryLastCleared.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellHistoryLastCleared.setDescription("The value of MIB II's sysUpTime object at the last time the history was cleared. At power on, this value should contain 0. ")
pgSdslCellPerf15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 9), )
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalTable.setDescription('This table contains information on the Cell-SDSL Line performance data for the previous (0-96) 15 minute Interval')
pgSdslCellPerf15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PAIRGAIN-SDSLCELL-MIB", "pgSdslCellPerf15MinIntervalIndex"))
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalEntry.setDescription('An Entry in pgSdslCellPerf15MinIntervalTable ')
pgSdslCellPerf15MinIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalIndex.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
pgSdslCellPerf15MinIntervalLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalLOSS.setDescription('The number of Loss of Signal seconds , encountered by an Cell SDSL interface within this 15 minutes performance data collection interval')
pgSdslCellPerf15MinIntervalLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalLOCD.setDescription('The number of Loss of Cell Delineation , encountered by an Cell SDSL interface within this 15 minutes performance data collection interval')
pgSdslCellPerf15MinIntervalSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf15MinIntervalSLOCD.setDescription('The number of severe Loss of Cell Delineation , encountered by an Cell SDSL interface within this 15 minutes performance data collection interval')
pgSdslCellPerfCurr24hTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 10), )
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hTable.setDescription('This table contains information on the Cell-SDSL Line performance data for the current 24 hour period')
pgSdslCellPerfCurr24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hEntry.setDescription('An Entry in pgSdslCellPerfCurr24hTable ')
pgSdslCellPerfCurr24hLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hLOSS.setDescription('The number of Loss of Signal seconds, encountered by an Cell SDSL interface within current 24 hour performance data collection interval')
pgSdslCellPerfCurr24hLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hLOCD.setDescription('The number of Loss of Cell Delineation, encountered by an Cell SDSL interface within current 24 hour performance data collection interval')
pgSdslCellPerfCurr24hSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerfCurr24hSLOCD.setDescription('The number of Severe Loss of Cell Delineation, encountered by an Cell SDSL interface within current 24 hour performance data collection interval')
pgSdslCellPerf24hIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 11), )
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalTable.setDescription('This table contains information on the Cell-SDSL Line performance data for the previous 7 24 hour Interval')
pgSdslCellPerf24hIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PAIRGAIN-SDSLCELL-MIB", "pgSdslCellPerf24hIntervalIndex"))
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalEntry.setDescription('An Entry in pgSdslCellPerf24hIntervalTable ')
pgSdslCellPerf24hIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalIndex.setDescription('A number between 1 and 7, where 1 is the most recently completed 24 hour interval')
pgSdslCellPerf24hIntervalLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalLOSS.setDescription('The number of Loss of Signal seconds , encountered by an Cell SDSL interface within this 24 hour performance data collection interval')
pgSdslCellPerf24hIntervalLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalLOCD.setDescription('The number of Loss of Cell Delineation , encountered by an Cell SDSL interface within this 24 hour performance data collection interval')
pgSdslCellPerf24hIntervalSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellPerf24hIntervalSLOCD.setDescription('The number of severe Loss of Cell Delineation , encountered by an Cell SDSL interface within this 24 hour performance data collection interval')
pgSdslCellAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12), )
if mibBuilder.loadTexts: pgSdslCellAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmTable.setDescription('This table provides the SDSL Cell alarm indications.')
pgSdslCellAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslCellAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmEntry.setDescription('Entries of the SDSL Cell alarm table ')
pgSdslCellCrossThreshLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCrossThreshLOSS.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCrossThreshLOSS.setDescription('When active the LOSS Threshold was crossed during the previous 15 minute interval and the condition has not yet been cleared.')
pgSdslCellCrossThreshLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCrossThreshLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCrossThreshLOCD.setDescription('When active the LOCD Threshold was crossed during the previous 15 minute interval and the condition has not yet been cleared.')
pgSdslCellCrossThreshSLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCrossThreshSLOCD.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCrossThreshSLOCD.setDescription('When active the SLOCD Threshold was crossed during the previous 15 minute interval and the condition has not yet been cleared.')
pgSdslCellCrossThreshSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellCrossThreshSNR.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellCrossThreshSNR.setDescription('When active the current SNR is below the SNR Threshold.')
pgSdslCellHardwareCause = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("xcvrfail", 2), ("otherfail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellHardwareCause.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellHardwareCause.setDescription('This MIB object is used to communicate a port based hardware failure. 1 = no failure detected 2 = transceiver failure detected. e.g. failure to communicate with the transceiver. 3 = other port based hardware failure ')
pgSdslCellAlarmLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 1, 12, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslCellAlarmLastChanged.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellAlarmLastChanged.setDescription("The value of MIB II's sysUpTime object at the last time the alarm status changed. At power on, this value should contain 0. ")
pgSdslCellTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2))
pgSdslCellTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2, 0))
pgSdslCellThreshLOSSTrap = NotificationType((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellCrossThreshLOSS"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellAlarmLastChanged"))
if mibBuilder.loadTexts: pgSdslCellThreshLOSSTrap.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThreshLOSSTrap.setDescription('Loss of Signal 15-minute interval threshold exceeded')
pgSdslCellThreshLOCDTrap = NotificationType((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellCrossThreshLOCD"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellAlarmLastChanged"))
if mibBuilder.loadTexts: pgSdslCellThreshLOCDTrap.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThreshLOCDTrap.setDescription('Loss of Cell Delineation 15-minute interval threshold exceeded')
pgSdslCellThreshSLOCDTrap = NotificationType((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellCrossThreshSLOCD"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellAlarmLastChanged"))
if mibBuilder.loadTexts: pgSdslCellThreshSLOCDTrap.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThreshSLOCDTrap.setDescription('Severe Loss of Cell Delination 15-minute interval threshold exceeded')
pgSdslCellThreshSNRTrap = NotificationType((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellCrossThreshSNR"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellAlarmLastChanged"))
if mibBuilder.loadTexts: pgSdslCellThreshSNRTrap.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellThreshSNRTrap.setDescription('SNR 15-minute interval threshold exceeded')
pgSdslCellHardwareFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 927, 1, 14, 1, 2, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellHardwareCause"), ("PAIRGAIN-SDSLCELL-MIB", "pgSdslCellAlarmLastChanged"))
if mibBuilder.loadTexts: pgSdslCellHardwareFaultTrap.setStatus('current')
if mibBuilder.loadTexts: pgSdslCellHardwareFaultTrap.setDescription('A hardware fault on this ifIndex has occurred. The pgSdslCellHardware Cause provides a description of the type of the failure.')
mibBuilder.exportSymbols("PAIRGAIN-SDSLCELL-MIB", pgSdslCellPerf24hIntervalEntry=pgSdslCellPerf24hIntervalEntry, pgSdslCellLineRateMode=pgSdslCellLineRateMode, pgSdslCellLineProfileEntry=pgSdslCellLineProfileEntry, pgSdslCellInvVersionNumber=pgSdslCellInvVersionNumber, pgSdslCellPerfCurrLOSS=pgSdslCellPerfCurrLOSS, pgSdslCellTraps=pgSdslCellTraps, pgSdslCellPerf15MinIntervalSLOCD=pgSdslCellPerf15MinIntervalSLOCD, pgsdslCellMibObjects=pgsdslCellMibObjects, pgSdslCellHardwareCause=pgSdslCellHardwareCause, pgSdslCellPerfCurr24hTable=pgSdslCellPerfCurr24hTable, pgSdslCellStatsLastCleared=pgSdslCellStatsLastCleared, pgSdslCellPerf15MinIntervalLOCD=pgSdslCellPerf15MinIntervalLOCD, pgSdslCellClearHistory=pgSdslCellClearHistory, pgSdslCellPerf15MinIntervalTable=pgSdslCellPerf15MinIntervalTable, pgSdslCellPerf24hIntervalTable=pgSdslCellPerf24hIntervalTable, pgSdslCellPerf15MinIntervalLOSS=pgSdslCellPerf15MinIntervalLOSS, pgSdslCellPerfCurr24hLOSS=pgSdslCellPerfCurr24hLOSS, pgSdslCellPerfCurr24hSLOCD=pgSdslCellPerfCurr24hSLOCD, pgSdslCellPerfCurr15MinTable=pgSdslCellPerfCurr15MinTable, pgSdslCellPerfCurr15MinLOSS=pgSdslCellPerfCurr15MinLOSS, pgSdslCellCurrSnrMgn=pgSdslCellCurrSnrMgn, pgSdslCellLineTable=pgSdslCellLineTable, pgSdslCellCrossThreshLOCD=pgSdslCellCrossThreshLOCD, pgSdslCellClearStats=pgSdslCellClearStats, pgSdslCellPerfCurrSLOCD=pgSdslCellPerfCurrSLOCD, pgSdslCellCurrStatus=pgSdslCellCurrStatus, pgSdslCellHardwareFaultTrap=pgSdslCellHardwareFaultTrap, pgSdslCellAlarmProfileIndexNext=pgSdslCellAlarmProfileIndexNext, pgSdslCellThresh15MinLOCD=pgSdslCellThresh15MinLOCD, pgSdslCellPerfCurr15MinLOCD=pgSdslCellPerfCurr15MinLOCD, pgSdslCellPerf24hIntervalLOCD=pgSdslCellPerf24hIntervalLOCD, pgSdslCellPerf24hIntervalSLOCD=pgSdslCellPerf24hIntervalSLOCD, pgSdslCellHistoryLastCleared=pgSdslCellHistoryLastCleared, pgSdslCellLineEntry=pgSdslCellLineEntry, PgSdslcellAlarmProfileType=PgSdslcellAlarmProfileType, pgSdslCellThreshSNRTrap=pgSdslCellThreshSNRTrap, pgSdslCellAlarmTable=pgSdslCellAlarmTable, PgSdslcellLineProfileType=PgSdslcellLineProfileType, pgSdslCellPerfCurr24hLOCD=pgSdslCellPerfCurr24hLOCD, pgSdslCellThreshSNR=pgSdslCellThreshSNR, pgSdslCellLineProfileInUse=pgSdslCellLineProfileInUse, pgSdslCellCrossThreshSNR=pgSdslCellCrossThreshSNR, pgSdslCellPerf24hIntervalIndex=pgSdslCellPerf24hIntervalIndex, pgSdslCellPerf15MinIntervalEntry=pgSdslCellPerf15MinIntervalEntry, pgsdslCellMIB=pgsdslCellMIB, pgSdslCellTrap=pgSdslCellTrap, pgSdslCellLineTermType=pgSdslCellLineTermType, pgSdslCellPerfCurr24hEntry=pgSdslCellPerfCurr24hEntry, pgSdslCellLineRate=pgSdslCellLineRate, PYSNMP_MODULE_ID=pgsdslCellMIB, pgSdslCellCrossThreshLOSS=pgSdslCellCrossThreshLOSS, pgSdslCellAlarmProfileRowStatus=pgSdslCellAlarmProfileRowStatus, pgSdslCellAlarmProfile=pgSdslCellAlarmProfile, pgSdslCellLineProfileIndex=pgSdslCellLineProfileIndex, pgSdslCellPerfCurrTable=pgSdslCellPerfCurrTable, pgSdslCellPhysEntry=pgSdslCellPhysEntry, pgSdslCellAlarmProfileIndex=pgSdslCellAlarmProfileIndex, pgSdslCellAlarmProfileTable=pgSdslCellAlarmProfileTable, pgSdslCellAlarmEntry=pgSdslCellAlarmEntry, pgSdslCellPerfCurrEntry=pgSdslCellPerfCurrEntry, pgSdslCellLineProfileIndexNext=pgSdslCellLineProfileIndexNext, pgSdslCellPerf24hIntervalLOSS=pgSdslCellPerf24hIntervalLOSS, pgSdslCellLineProfile=pgSdslCellLineProfile, pgSdslCellCurrAtn=pgSdslCellCurrAtn, pgSdslCellLineProfileTable=pgSdslCellLineProfileTable, pgSdslCellLineProfileRowStatus=pgSdslCellLineProfileRowStatus, pgSdslCellPerfCurr15MinEntry=pgSdslCellPerfCurr15MinEntry, pgSdslCellCrossThreshSLOCD=pgSdslCellCrossThreshSLOCD, pgSdslCellPerfCurr15MinSLOCD=pgSdslCellPerfCurr15MinSLOCD, pgSdslCellPerf15MinIntervalIndex=pgSdslCellPerf15MinIntervalIndex, pgSdslCellThresh15MinSLOCD=pgSdslCellThresh15MinSLOCD, pgSdslCellThreshLOCDTrap=pgSdslCellThreshLOCDTrap, pgSdslCellAlarmProfileEntry=pgSdslCellAlarmProfileEntry, pgSdslCellLineCode=pgSdslCellLineCode, pgSdslCellThreshLOSSTrap=pgSdslCellThreshLOSSTrap, pgSdslCellPerfCurrLOCD=pgSdslCellPerfCurrLOCD, pgSdslCellAlarmLastChanged=pgSdslCellAlarmLastChanged, pgSdslCellInvSerialNumber=pgSdslCellInvSerialNumber, pgSdslCellThresh15MinLOSS=pgSdslCellThresh15MinLOSS, pgSdslCellInvVendorID=pgSdslCellInvVendorID, pgSdslCellThreshSLOCDTrap=pgSdslCellThreshSLOCDTrap, pgSdslCellPhysTable=pgSdslCellPhysTable, pgSdslCellAlarmProfileInUse=pgSdslCellAlarmProfileInUse)
