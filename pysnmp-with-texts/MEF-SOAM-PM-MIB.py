#
# PySNMP MIB module MEF-SOAM-PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MEF-SOAM-PM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dot1agCfmMaIndex, dot1agCfmMepIdentifier, dot1agCfmMepEntry, Dot1agCfmMepIdOrZero, dot1agCfmMdIndex, Dot1afCfmIndexIntegerNextFree = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMaIndex", "dot1agCfmMepIdentifier", "dot1agCfmMepEntry", "Dot1agCfmMepIdOrZero", "dot1agCfmMdIndex", "Dot1afCfmIndexIntegerNextFree")
IEEE8021PriorityValue, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PriorityValue")
MefSoamTcStatusType, MefSoamTcDelayMeasurementBinType, MefSoamTcAvailabilityType, MefSoamTcTestPatternType, MefSoamTcDataPatternType, MefSoamTcSessionType, MefSoamTcMeasurementPeriodType, MefSoamTcOperationTimeType = mibBuilder.importSymbols("MEF-SOAM-TC-MIB", "MefSoamTcStatusType", "MefSoamTcDelayMeasurementBinType", "MefSoamTcAvailabilityType", "MefSoamTcTestPatternType", "MefSoamTcDataPatternType", "MefSoamTcSessionType", "MefSoamTcMeasurementPeriodType", "MefSoamTcOperationTimeType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, Unsigned32, ModuleIdentity, NotificationType, Counter64, MibIdentifier, Bits, TimeTicks, iso, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "Unsigned32", "ModuleIdentity", "NotificationType", "Counter64", "MibIdentifier", "Bits", "TimeTicks", "iso", "Counter32", "ObjectIdentity")
TimeInterval, TextualConvention, DateAndTime, RowStatus, TruthValue, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TextualConvention", "DateAndTime", "RowStatus", "TruthValue", "MacAddress", "DisplayString")
mefSoamPmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 15007, 1, 3))
mefSoamPmMib.setRevisions(('2012-01-13 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mefSoamPmMib.setRevisionsDescriptions(('Initial Version.',))
if mibBuilder.loadTexts: mefSoamPmMib.setLastUpdated('201201131200Z')
if mibBuilder.loadTexts: mefSoamPmMib.setOrganization('Metro Ethernet Forum')
if mibBuilder.loadTexts: mefSoamPmMib.setContactInfo('Web URL: http://metroethernetforum.org/ E-mail: mibs@metroethernetforum.org Postal: Metro Ethernet Forum 6033 W. Century Boulevard, Suite 830 Los Angeles, CA 90045 U.S.A. Phone: +1 310-642-2800 Fax: +1 310-642-2808')
if mibBuilder.loadTexts: mefSoamPmMib.setDescription("This MIB module contains the management objects for the management of Ethernet Services Operations, Administration and Maintenance for Performance Monitoring. Copyright 2010, 2011, 2012 Metro Ethernet Forum All rights reserved. **************************************************************************** Reference Overview A number of base documents have been used to create the Textual Conventions MIB, the SOAM-PM MIB and SOAM-FM extension MIB. The following are the abbreviations for the baseline documents: [CFM] refers to 'Connectivity Fault Management', IEEE 802.1ag-2007, December 2007 [MEF7.1] refers to MEF 7.1 'Phase 2 EMS-NMS Information Model', October 2009 [MEF17] refers to MEF 17 'Service OAM Requirements & Framework - Phase 1', April 2007 [MEF10.2.1] refers to MEF 10.2.1 'Ethernet Services Attributes Phase 2', January 2011 [MEF SOAM-PM] refers to MEF 35 'Service OAM Performance Monitoring Implementation Agreement', January 2012 [MEF SOAM-FM] refers to MEF 30 'Service OAM Fault Management Implementation Agreement', January 2011 [Q.840.1] refers to 'ITU-T Requirements and analysis for NMS-EMS management interface of Ethernet over Transport and Metro Ethernet Network (EoT/MEN)', March 2007 [Y.1731] refers to ITU-T Y.1731 'OAM functions and mechanisms for Ethernet based networks', February 2011 **************************************************************************** Abbreviations Used Term Definition Availability Performance A measure of the percentage of time within a specified time interval during which the frame loss is small Backward OAM information sent from the Responder MEP to the Controller MEP. For LM it indicates the frame counts/loss from the Responder MEP to the Controller MEP. For DM is indicates the delay and delay variation from the Responder MEP to the Controller MEP. BSS Business Support System CCM Continuity Check Message CFM Connectivity Fault Management CHLI Consecutive High Loss Interval, a sequence of small time intervals contained in T, each with high frame loss ratio Controller MEP The Controller MEP initiates SOAM PDUs, and receives responses from the Responder MEP. CoS Class of Service DM Delay Measurement Dual-Ended A type of process where a MEP sends measurement information to a peer MEP that will perform the calculations. EMS Element Management System ETH-DM Ethernet Delay Measurement function ETH-LM Ethernet Loss Measurement function ETH-SLM Ethernet Synthetic Frame Loss Measurement function EVC Ethernet Virtual Connection FD Frame Delay FDR Frame Delay Range FLR Frame Loss Ratio FM Fault Management Forward OAM information sent from the Controller MEP to the Responder MEP. For LM it indicates the frame counts/loss from the Controller MEP to the Responder MEP. For DM is indicates the delay and delay variation from the Controller MEP to the Responder MEP. HLI High Loss Interval, a small time interval contained in T with a high frame loss ratio IEEE Institute of Electrical and Electronics Engineers IETF Internet Engineering Task Force IFDV Inter-Frame Delay Variation ITU-T International Telecommunication Union - Telecommunication Standardization Bureau LAN Local Area Network LM Loss Measurement MAC Media Access Control MA Maintenance Association (equivalent to a MEG) MD Maintenance Domain (equivalent to a OAM Domain in MEF 17) MD Level Maintenance Domain Level (equivalent to a MEG level) ME Maintenance Entity Measurement Bin A Measurement Bin is a counter that stores the number of performance measurements falling within a specified range, during a Measurement Interval Measurement Interval A period of time during which measurements are taken. Measurements initiated during one Measurement Interval are kept separate from measurements taken during other Measurement Intervals. It is important to note that this is different from T. MEF Metro Ethernet Forum MEG Maintenance Entity Group (equivalent to a MA) MEG Level Maintenance Entity Group Level (equivalent to MD Level) MEN Metro Ethernet Network MEP Maintenance Association End Point or MEG End Point MFD Mean Frame Delay MIB Management Information Base MIP Maintenance Domain Intermediate Point or MEG Intermediate Point MP Maintenance Point. One of either a MEP or a MIP NE Network Element NMS Network Management System OAM Operations, Administration, and Maintenance On-Demand OAM actions that are initiated via manual intervention for a limited time to carry out diagnostics. On-Demand OAM can result in singular or periodic OAM actions during the diagnostic time interval One-way A measurement performed in the forward or backward direction. For example from MEP A to MEP B or from MEP B to MEP A. OSS Operations Support System PDU Protocol Data Unit PM Performance Monitoring PM Function A MEP capability specified for performance monitoring purposes (e.g., Single-Ended Delay, Single-Ended Synthetic Loss) PM Session A PM Session is the application of a given PM Function between a given pair of MEPs and using a given CoS Frame Set over some (possibly indefinite) period of time. PM Solution A PM Solution is a set of related requirements that when implemented allow a given set of performance metrics to be measured using a given set of PM functions. PM Tool A generic term used to discuss the application of a PM Function. Proactive OAM actions that are carried on continuously to permit timely reporting of fault and/or performance status. Resiliency Performance The number of High Loss Intervals and Consecutive High Loss Intervals in T Responder MEP In a single-ended session, the Responder MEP receives SOAM PDUs, from the Controller MEP, and transmits a response to the Controller MEP. SOAM-PM RFC Request for Comment Service Frame An Ethernet frame transmitted across the UNI toward the Service Provider or an Ethernet frame transmitted across the UNI toward the Subscriber Single-Ended A type of process where a MEP sends a measurement request and the peer MEP replies with the requested information so the originating MEP can calculate the measurement. Sink MEP In a dual-ended session, the Sink MEP receives SOAM PDUs, from the Controller MEP and performs the performance calculations. SLM Synthetic Loss Measurement SNMP Simple Network Management Protocol SNMP Agent An SNMP entity containing one or more command responder and/or notification originator applications (along with their associated SNMP engine). Typically implemented in an NE. SNMP Manager An SNMP entity containing one or more command generator and/or notification receiver applications (along with their associated SNMP engine). Typically implemented in an EMS or NMS. SOAM Service OAM SOAM PDU Service OAM frame, or Protocol Data Unit. Specifically, those PDUs defined in [IEEE 802.1ag], [ITU-T Y.1731], or MEF specifications Synthetic Traffic SOAM traffic that emulates service traffic in order to measure the performance experience. Delay measurements must use synthetic traffic, because user traffic does not contain standardized timestamp fields. Other measurements, such as Frame Loss, may also use synthetic frames for certain advantages (e.g., ability to measure loss in multipoint services). T Time Interval for SLS Metrics. The time over which a Performance Metric is defined. T is at least as large as the Measurement Interval, and generally consists of multiple Measurement Intervals. TC Textual Conventions TLV Type Length Value, a method of encoding Objects Two-way A measurement of the performance of frames that flow from the Controller MEP to Responder MEP and back again. UML Unified Modeling Language UTC Coordinated Universal Time UNI User-to-Network Interface VLAN Virtual LAN ")
mefSoamPmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 0))
mefSoamPmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1))
mefSoamPmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2))
mefSoamPmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1))
mefSoamPmLmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2))
mefSoamPmDmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3))
mefSoamPmNotificationCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 4))
mefSoamPmNotificationObj = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5))
mefSoamPmMepTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: mefSoamPmMepTable.setReference('[Y.1731], [MEF SOAM-PM]')
if mibBuilder.loadTexts: mefSoamPmMepTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepTable.setDescription('This table is an extension of the dot1agCfmMepTable and rows are automatically added or deleted from this table based upon row creation and destruction of the dot1agCfmMepTable. This table represents the local MEP PM configuration table. The primary purpose of this table is provide local parameters for the SOAM PM function found in [Y.1731] and [MEF SOAM-PM] and instantiated at a MEP. ')
mefSoamPmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("MEF-SOAM-PM-MIB", "mefSoamPmMepEntry"))
mefSoamPmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: mefSoamPmMepEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepEntry.setDescription('The conceptual row of mefSoamPmMepTable.')
mefSoamPmMepOperNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1, 1, 1, 1), Dot1afCfmIndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamPmMepOperNextIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepOperNextIndex.setDescription('This object contains an unused value for a PM session number on a MEP that can be used for either LM or DM sessions, or a zero to indicate that none exist. This value needs to be read in order to find an available index for row-creation of a PM session on a MEP and then used when a row is created. This value is automatically updated by the SNMP Agent after the row is created. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never to be reused for other PM sessions on the same MEP while this session is active, or until it wraps to zero. The index value keeps increasing up to that time. This is to facilitate access control based on a fixed index for an EMS, since the index is not reused. This object is an extension of the dot1agCfmMepTable and the object is automatically added or deleted based upon row creation and destruction of the dot1agCfmMepTable. ')
mefSoamPmMepLmSingleEndedResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mefSoamPmMepLmSingleEndedResponder.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepLmSingleEndedResponder.setDescription("This object specifies whether the Loss Measurement (LMM) single-ended Responder is enabled. The value 'true' indicates the single-ended Loss Measurement Responder is enabled and if a LMM message is received a LMR will be sent in reply. The value 'false' indicates the single-ended Loss Measurement Responder is disabled. If a LMM message is received no response will be sent and the message will be discarded. This object needs to be persistent upon reboot or restart of a device. A MEP can be both a single-ended Responder and Controller simultaneously. ")
mefSoamPmMepSlmSingleEndedResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mefSoamPmMepSlmSingleEndedResponder.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepSlmSingleEndedResponder.setDescription("This object specifies whether the Synthetic Loss Measurement (SLM) single-ended Responder is enabled. The value 'true' indicates the single-ended SLM Responder is enabled and if a SLM message is received a SLR will be sent in reply. The value 'false' indicates the single-ended SLM Responder is disabled. If a SLM message is received no response will be sent and the message will be discarded. This object needs to be persistent upon reboot or restart of a device. A MEP can be both a single-ended Responder and Controller simultaneously. ")
mefSoamPmMepDmSingleEndedResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mefSoamPmMepDmSingleEndedResponder.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepDmSingleEndedResponder.setDescription("This object specifies whether the Delay Measurement (DMM) single ended Responder is enabled. The value 'true' indicates the single-ended Delay Measurement Responder is enabled and if a DMM message is received a DMR will be sent in reply. The value 'false' indicates the single-ended Delay Measurement Responder is disabled. If a DMM message is received no response will be sent and the message will be discarded. This object needs to be persistent upon reboot or restart of a device. A MEP can be both a single-ended Responder and Controller simultaneously. ")
mefSoamLmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: mefSoamLmCfgTable.setReference('[MEF SOAM-PM] R68; [Y.1731]')
if mibBuilder.loadTexts: mefSoamLmCfgTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgTable.setDescription('This table includes configuration objects and operations for the Frame Loss Measurement function defined in [Y.1731] and [MEF SOAM-PM]. Each row in the table represents a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. A Loss Measurement session is created on an existing MEP by first accessing the mefSoamPmMepOperNextIndex object and using this value as the mefSoamLmCfgIndex in the row creation. Some writable objects in this table are only applicable in certain cases (as described under each object), and attempts to write values for them in other cases will be ignored. The writable objects in this table need to be persistent upon reboot or restart of a device. ')
mefSoamLmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"))
if mibBuilder.loadTexts: mefSoamLmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgEntry.setDescription('The conceptual row of mefSoamLmCfgTable.')
mefSoamLmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mefSoamLmCfgIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgIndex.setDescription('An index to the Loss Measurement Configuration table which indicates the specific measurement session for the MEP. mefSoamPmMepOperNextIndex needs to be inspected to find an available index for row-creation. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused for other PM sessions on the same MEP while this session is active. The index value keeps increasing until it wraps to 0. This is to facilitate access control based on a fixed index for an EMS, since the index is not reused. ')
mefSoamLmCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lmLmm", 1), ("lmSlm", 2), ("lmCcm", 3))).clone('lmSlm')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgType.setReference('[Y.1731] [MEF SOAM-PM] R51, R68, O7, R102')
if mibBuilder.loadTexts: mefSoamLmCfgType.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgType.setDescription('This object specifies what type of Loss Measurement will be performed. lmLmm(1) LMM SOAM PDU generated and received LMR responses tracked lmSlm(2) SLM SOAM PDU generated and received SLR responses tracked lmCcm(3) CCM SOAM PDU generated and received CCM PDUs tracked The lmSlm value is required. The lmLmm and lmCcm values are optional. The lmCcm loss measurement values are only valid for a point-to-point MEG. Multipoint MEGs may give unreliable loss measurements. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgVersion.setReference('[Y.1731]')
if mibBuilder.loadTexts: mefSoamLmCfgVersion.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgVersion.setDescription('This object indicates the version of the PDUs used to perform Loss Measurement. The value is placed in the Version field of the PDU and indicates that the PDU format used is the format defined in Y.1731 with that version. The exact PDUs to use are specified by this object in combination with mefSoamLmCfgType. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgEnabled.setReference('[MEF SOAM-PM] R4, R5, R6, O1, R12, R14')
if mibBuilder.loadTexts: mefSoamLmCfgEnabled.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgEnabled.setDescription("This object specifies whether the Loss Measurement session is enabled. The value 'true' indicates the Loss Measurement session is enabled and SOAM PDUs are sent and/or measurements are collected when the session is running according to the scheduling objects (start time, stop time, etc.). The value 'false' indicates the Loss Measurement session is disabled and SOAM PDUs are not sent and/or measurements collected. For a Loss Measurement session to be removed the row is deleted in order to release internal resources. This object can written/modified after row creation time. If the LM session is enabled it resumes after shutdown/restart. If the LM session is disabled the current Measurement Interval is stopped, if it in process at the time, and all the in process calculations for the partially completed Measurement Interval are finalized. This object does not affect whether the single-ended Responder is enabled or not, which is enabled or disabled by the mefSoamPmMepLmSingleEndedResponder and mefSoamPmMepSlmSingleEndedResponder objects. ")
mefSoamLmCfgMeasurementEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("bForwardTransmitedFrames", 0), ("bForwardReceivedFrames", 1), ("bForwardMinFlr", 2), ("bForwardMaxFlr", 3), ("bForwardAvgFlr", 4), ("bBackwardTransmitedFrames", 5), ("bBackwardReceivedFrames", 6), ("bBackwardMinFlr", 7), ("bBackwardMaxFlr", 8), ("bBackwardAvgFlr", 9), ("bSoamPdusSent", 10), ("bSoamPdusReceived", 11), ("bAvailForwardHighLoss", 12), ("bAvailForwardConsecutiveHighLoss", 13), ("bAvailForwardAvailable", 14), ("bAvailForwardUnavailable", 15), ("bAvailForwardMinFlr", 16), ("bAvailForwardMaxFlr", 17), ("bAvailForwardAvgFlr", 18), ("bAvailBackwardHighLoss", 19), ("bAvailBackwardConsecutiveHighLoss", 20), ("bAvailBackwardAvailable", 21), ("bAvailBackwardUnavailable", 22), ("bAvailBackwardMinFlr", 23), ("bAvailBackwardMaxFlr", 24), ("bAvailBackwardAvgFlr", 25), ("bMeasuredStatsForwardMeasuredFlr", 26), ("bMeasuredStatsBackwardMeasuredFlr", 27), ("bMeasuredStatsAvailForwardStatus", 28), ("bMeasuredStatsAvailBackwardStatus", 29)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgMeasurementEnable.setReference('[Y.1731]')
if mibBuilder.loadTexts: mefSoamLmCfgMeasurementEnable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgMeasurementEnable.setDescription("A vector of bits that indicates the type of SOAM LM counters found in the mefSoamLmMeasuredStatsTable, mefSoamLmCurrentStatsTable, mefSoamLmHistoryStatsTable, mefSoamLmCurrentAvailStatsTable and mefSoamLmHistoryAvailStatsTable that are enabled. A bit set to '1' enables the specific SOAM LM counter. A bit set to '0' disables the SOAM LM counter. If a particular SOAM LM counter is not supported the BIT value is set to '0'. Not all SOAM LM counters are supported for all SOAM LM types. This object can only be written at row creation time and cannot be modified once it has been created. bForwardTransmitedFrames (0) Enables/disables the mefSoamLmCurrentStatsForwardTransmittedFrames and mefSoamLmHistoryStatsForwardTransmittedFrames counters. bForwardReceivedFrames(1) Enables/disables the mefSoamLmCurrentStatsForwardReceivedFrames and mefSoamLmHistoryStatsForwardReceivedFrames counters. bForwardMinFlr(2) Enables/disables the mefSoamLmCurrentStatsForwardMinFlr and mefSoamLmHistoryStatsForwardMinFlr counters. bForwardMaxFlr(3) Enables/disables the mefSoamLmCurrentStatsForwardMaxFlr and mefSoamLmHistoryStatsForwardMaxFlr counters. bForwardAvgFlr(4) Enables/disables the mefSoamLmCurrentStatsForwardAvgFlr and mefSoamLmHistoryStatsForwardAvgFlr counters. bBackwardTransmitedFrames(5) Enables/disables the mefSoamLmCurrentStatsBackwardTransmittedFrames and mefSoamLmHistoryStatsBackwardTransmittedFrames counters. bBackwardReceivedFrames(6) Enables/disables the mefSoamLmCurrentStatsBackwardReceivedFrames and mefSoamLmHistoryStatsBackwardReceivedFrames counters. bBackwardMinFlr(7) Enables/disables the mefSoamLmCurrentStatsBackwardMinFlr and mefSoamLmHistoryStatsBackwardMinFlr counters. bBackwardMaxFlr(8) Enables/disables the mefSoamLmCurrentStatsBackwardMaxFlr and mefSoamLmHistoryStatsBackwardMaxFlr counters. bBackwardAvgFlr(9) Enables/disables the mefSoamLmCurrentStatsBackwardAvgFlr and mefSoamLmHistoryStatsBackwardAvgFlr counters. bSoamPdusSent (10) Enables/disables the mefSoamLmCurrentStatsSoamPdusSent and mefSoamLmHistoryStatsSoamPdusSent counters. bSoamPdusReceivedbReceivedMeasurements (11) Enables/disables the mefSoamLmCurrentStatsSoamPdusReceived and mefSoamLmHistoryStatsSoamPdusReceived counters. bAvailForwardHighLoss(12) Enables/disables the mefSoamLmCurrentAvailStatsForwardHighLoss and mefSoamLmHistoryAvailStatsForwardHighLoss counters. bAvailForwardConsecutiveHighLoss(13) Enables/disables the mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss and mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss counters. bAvailForwardAvailable(14) Enables/disables the mefSoamLmCurrentAvailStatsForwardAvailable and mefSoamLmHistoryAvailStatsForwardAvailable counters. bAvailForwardUnavailable(15) Enables/disables the mefSoamLmCurrentAvailStatsForwardUnavailable and mefSoamLmHistoryAvailStatsForwardUnavailable counters. bAvailForwardMinFlr(16) Enables/disables the mefSoamLmCurrentAvailStatsForwardMinFlr and mefSoamLmHistoryAvailStatsForwardMinFlr counters. bAvailForwardMaxFlr(17) Enables/disables the mefSoamLmCurrentAvailStatsForwardMaxFlr and mefSoamLmHistoryAvailStatsForwardMaxFlr counters. bAvailForwardAvgFlr(18) Enables/disables the mefSoamLmCurrentAvailStatsForwardAvgFlr and mefSoamLmHistoryAvailStatsForwardAvgFlr counters. bAvailBackwardHighLoss(19) Enables/disables the mefSoamLmCurrentAvailStatsBackwardHighLoss and mefSoamLmHistoryAvailStatsBackwardHighLoss counters. bAvailBackwardConsecutiveHighLoss(20) Enables/disables the mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss and mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss counters. bAvailBackwardAvailable(21) Enables/disables the mefSoamLmCurrentAvailStatsBackwardAvailable and mefSoamLmHistoryAvailStatsBackwardAvailable counters. bAvailBackwardUnavailable(22) Enables/disables the mefSoamLmCurrentAvailStatsBackwardUnavailable and mefSoamLmHistoryAvailStatsBackwardUnavailable counters. bAvailBackwardMinFlr(23) Enables/disables the mefSoamLmCurrentAvailStatsBackwardMinFlr and mefSoamLmHistoryAvailStatsBackwardMinFlr counters. bAvailBackwardMaxFlr(24) Enables/disables the mefSoamLmCurrentAvailStatsBackwardMaxFlr and mefSoamLmHistoryAvailStatsBackwardMaxFlr counters. bAvailBackwardAvgFlr(25) Enables/disables the mefSoamLmCurrentAvailStatsBackwardAvgFlr and mefSoamLmHistoryAvailStatsBackwardAvgFlr counters. bMeasuredStatsForwardMeasuredFlr(26) Enables/disables the mefSoamLmMeasuredStatsForwardFlr counter. bMeasuredStatsBackwardMeasuredFlr(27) Enables/disables the mefSoamLmMeasuredStatsBackwardFlr counter. bMeasuredStatsAvailForwardStatus(28) Enables/disables the mefSoamLmMeasuredStatsAvailForwardStatus counter. bMeasuredStatsAvailBackwardStatus(29) Enables/disables the mefSoamLmMeasuredStatsAvailBackwardStatus counter. ")
mefSoamLmCfgMessagePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 6), MefSoamTcMeasurementPeriodType().clone(1000)).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgMessagePeriod.setReference('[MEF SOAM-PM] R76, R77, D29, D30')
if mibBuilder.loadTexts: mefSoamLmCfgMessagePeriod.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgMessagePeriod.setDescription('This object specifies the interval between Loss Measurement OAM message transmission. For Loss Measurement monitoring applications the default value is 1 sec. This object is not applicable if mefSoamLmCfgType is set to lmCcm and is ignored for that Loss Measurement Type. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 7), IEEE8021PriorityValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgPriority.setReference('[MEF SOAM-PM] R1, R2, R71, D28, R72, R73, R105-R109, D45; [MEF 10.2.1] Section 6.8')
if mibBuilder.loadTexts: mefSoamLmCfgPriority.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgPriority.setDescription('This object specifies the Loss Measurement OAM message priority as well as the priority of the service/OAM traffic to be monitored. Only frames of the same Class of Service are counted. The default value is to be the value which yields the lowest frame loss. This object is not applicable if mefSoamLmCfgType is set to lmCcm. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600)).clone(64)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgFrameSize.setReference('[MEF SOAM-PM] R78, R79, D31, D32 [Y.1731]')
if mibBuilder.loadTexts: mefSoamLmCfgFrameSize.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgFrameSize.setDescription("This object specifies the Loss Measurement frame size between 64 bytes and the maximum transmission unit of the EVC. The range of frame sizes from 64 through 2000 octets need to be supported, and the range of frame sizes from 2001 through 9600 octets is suggested be supported. The adjustment to the frame size of the standard frame size is accomplished by the addition of a Data or Test TLV. A Data or Test TLV is only added to the frame if the frame size is greater than 64 bytes. This object is only valid for the entity transmitting the Loss Measurement frames, type 'lmSlm', and is ignored by the entity receiving frames. It is not applicable for the 'lmCcm' or 'lmLmm' types. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgDataPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 9), MefSoamTcDataPatternType().clone('zeroPattern')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgDataPattern.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgDataPattern.setDescription("This object specifies the LM data pattern included in a Data TLV when the size of the LM frame is determined by the mefSoamLmFrameSize object and mefSoamLmTestTlvIncluded is 'false'. If the frame size object does not define the LM frame size or mefSoamLmTestTlvIncluded is 'true' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgTestTlvIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgTestTlvIncluded.setReference('[Y.1731] 9.3')
if mibBuilder.loadTexts: mefSoamLmCfgTestTlvIncluded.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgTestTlvIncluded.setDescription("Indicates whether a Test TLV or Data TLV is included when the size of the LM frame is determined by the mefSoamLmFrameSize object. A value of 'true' indicates that the Test TLV is to be included. A value of 'false' indicates that the Data TLV is to be included. If the frame size object does not define the LM frame size the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgTestTlvPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 11), MefSoamTcTestPatternType().clone('null')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgTestTlvPattern.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgTestTlvPattern.setDescription("This object specifies the type of test pattern to be sent in the LM frame Test TLV when the size of LM PDU is determined by the mefSoamLmFrameSize object and mefSoamLmTestTlvIncluded is 'true'. If the frame size object does not define the LM frame size or mefSoamLmTestTlvIncluded is 'false' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 525600)).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgMeasurementInterval.setReference('[MEF SOAM-PM] R16, R17, R110, R111, D46')
if mibBuilder.loadTexts: mefSoamLmCfgMeasurementInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgMeasurementInterval.setDescription('This object specifies the Measurement Interval for FLR statistics, in minutes. A Measurement Interval of 15 minutes needs to be supported, other intervals may be supported. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgNumIntervalsStored = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 1000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgNumIntervalsStored.setReference('[MEF SOAM-PM] R21, D8, D9')
if mibBuilder.loadTexts: mefSoamLmCfgNumIntervalsStored.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgNumIntervalsStored.setDescription('This object specifies the number of completed Measurement Intervals to store in the history statistic table (mefSoamLmHistoryStatsTable) and the history availability statistic table (mefSoamLmHistoryAvailStatsTable). At least 32 completed Measurement Intervals need to be stored. 96 Measurement Intervals are recommended to be stored. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgDestMacAddress.setReference('[MEF SOAM-PM] R70, R104')
if mibBuilder.loadTexts: mefSoamLmCfgDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgDestMacAddress.setDescription("The Target or Destination MAC Address Field to be transmitted. If mefSoamLmCfgType is 'lmCcm', the destination MAC address is always a multicast address indicating the level of the MEG: 01-80-c2-00-00-3y, where y is the level of the MEG. An error is returned if this object is set to any other value. If mefSoamLmCfgType is 'lmLmm' or 'lmSlm', the destination address is the unicast address of the destination MEP. An error is returned if this object is set to a multicast address. This address will be used if the value of the object mefSoamLmDestIsMepId is 'false'. This object is only valid for the entity transmitting the SOAM LM frames and is ignored by the entity receiving SOAM LM frames. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 15), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgDestMepId.setReference('[MEF SOAM-PM] R70, R104')
if mibBuilder.loadTexts: mefSoamLmCfgDestMepId.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgDestMepId.setDescription("The Maintenance Association End Point Identifier of another MEP in the same Maintenance Association to which the SOAM LM frame is to be sent. This address will be used if the value of the column mefSoamLmDestIsMepId is 'true'. A value of zero means that the destination MEP ID has not been configured. This object is only valid for the entity transmitting the Loss Measurement frames, types 'lmLmm' and 'lmSlm'. It is not applicable for the 'lmCcm' type. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgDestIsMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 16), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgDestIsMepId.setReference('[MEF SOAM-PM] R70, R104')
if mibBuilder.loadTexts: mefSoamLmCfgDestIsMepId.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgDestIsMepId.setDescription("A value of 'true' indicates that MEPID of the target MEP is used for SOAM LM frame transmission. A value of 'false' indicates that the MAC address of the target MEP is used for SOAM LM frame transmission. This object is only valid for the entity transmitting the Loss Measurement frames, types 'lmLmm' and 'lmSlm'. It is not applicable for the 'lmCcm' type. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgStartTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 17), MefSoamTcOperationTimeType().clone('immediate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgStartTimeType.setReference('[MEF SOAM-PM] R3, R7, R8, D1')
if mibBuilder.loadTexts: mefSoamLmCfgStartTimeType.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgStartTimeType.setDescription("This object specifies the type of start time of the SOAM LM session. The start time can be disabled (none), immediate, relative, or fixed. The value of 'none' is illegal and a write error will be returned if this value is used. The value of 'immediate' starts the SOAM LM session when the mefSoamLmCfgEnabled is true. The value of 'fixed' starts the SOAM LM session when the mefSoamLmFixedStartDateAndTime is less than or equal to the current system date and time and mefSoamLmCfgEnabled is true. This value is used to implement an On-Demand fixed time PM session. The value of 'relative' starts the SOAM LM session when the current system date and time minus the mefSoamLmRelativeStartTime is greater than or equal to the system date and time when the mefSoamLmStartTimeType object was written and mefSoamLmCfgEnabled is true. This value is used to implement an On-Demand relative time PM session. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgFixedStartDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 18), DateAndTime().clone(hexValue="0000010100000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgFixedStartDateAndTime.setReference('[MEF SOAM-PM] R9')
if mibBuilder.loadTexts: mefSoamLmCfgFixedStartDateAndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgFixedStartDateAndTime.setDescription("This object specifies the fixed start date/time for the SOAM Loss Measurement session. This object is used only used if mefSoamLmStartTimeType is 'fixed' and is ignored otherwise. The default value is year 0000, month 01, day 01, time 00:00:00.00. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgRelativeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 19), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgRelativeStartTime.setReference('[MEF SOAM-PM] R9')
if mibBuilder.loadTexts: mefSoamLmCfgRelativeStartTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgRelativeStartTime.setDescription("This object specifies the relative start time, from the current system time, for the SOAM LM session. This object is used only if mefSoamLmStartTimeType is 'relative' and is ignored otherwise. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgStopTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 20), MefSoamTcOperationTimeType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgStopTimeType.setReference('[MEF SOAM-PM] R3, R10, D2')
if mibBuilder.loadTexts: mefSoamLmCfgStopTimeType.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgStopTimeType.setDescription("This object specifies the type of stop time to terminate the SOAM LM session. The stop time can be forever (none), relative, or fixed. The value of 'none' indicates that the SOAM LM session never ends once it has started unless it the session is disabled. The value of 'immediate' is illegal and a write error will be returned if this value is used. The value of 'fixed' stops the SOAM LM session when the mefSoamLmFixedStopDateAndTime is less than or equal to the current system date and time. This value is used to implement an On-Demand fixed time PM session. The value of 'relative' stops the SOAM LM session when the time indicated by mefSoamLmRelativeStopTime has passed since the session start time as determined by the mefSoamLmCfgStartTimeType, mefSoamLmCfgFixedStartDateAndTime and mefSoamLmCfgRelativeStartTime objects. This value is used to implement an On-Demand relative time PM session. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgFixedStopDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 21), DateAndTime().clone(hexValue="0000010100000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgFixedStopDateAndTime.setReference('[MEF SOAM-PM] R10, R13')
if mibBuilder.loadTexts: mefSoamLmCfgFixedStopDateAndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgFixedStopDateAndTime.setDescription("This object specifies the fixed stop date/time for the SOAM Loss Measurement session. This object is used only used if mefSoamLmStopTimeType is 'fixed' and is ignored otherwise. The default value is year 0000, month 01, day 01, time 00:00:00.00. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgRelativeStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 22), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgRelativeStopTime.setReference('[MEF SOAM-PM] R11')
if mibBuilder.loadTexts: mefSoamLmCfgRelativeStopTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgRelativeStopTime.setDescription("This object specifies the relative stop time, from the session start time, to stop the SOAM LM session. This object is used only if mefSoamLmStopTimeType is 'relative' and is ignored otherwise. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgRepetitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31536000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgRepetitionTime.setReference('[MEF SOAM-PM] R18, D3, R19, R20')
if mibBuilder.loadTexts: mefSoamLmCfgRepetitionTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgRepetitionTime.setDescription('This object specifies a configurable repetition time between Measurement Intervals in a Loss Measurement session, in seconds. If the value is 0 (none), there is no time gap between the end of one Measurement Interval and the start of a new Measurement Interval. This is the normal usage case. If the value is greater than 0 but less than or equal to the measurement interval, an error is returned. If the value is greater than one Measurement Interval there is time gap between the end of one Measurement Interval and the start of the next Measurement Interval. The repetition time specifies the time between the start of consecutive Measurement Intervals; hence the gap between the end of one Measurement Interval and the start of the next is equal to the difference between the repetition time and the measurement interval. During this gap, no SOAM PDUs are sent for this session and no measurements are made. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgAlignMeasurementIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 24), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAlignMeasurementIntervals.setReference('[MEF SOAM-PM] D4, D5, D6')
if mibBuilder.loadTexts: mefSoamLmCfgAlignMeasurementIntervals.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAlignMeasurementIntervals.setDescription("This object specifies whether the Measurement Intervals for the Loss Measurement session are aligned with a zero offset to real time. The value 'true' indicates that each Measurement Interval starts at a time which is aligned to NE time source hour, if the repetition time (or the Measurement Interval, if the repetition time is 0) is a factor of an hour, i.e. 60min/15min = 4. For instance, a Measurement Interval/repetition time of 15 minutes would stop/start the Measurement Interval at 0, 15, 30, and 45 minutes of an hour. A Measurement Interval/Repetition Time of 7 minutes would not align to the hour since 7 minutes is NOT a factor of an hour, i.e. 60min/7min = 8.6. In this case the behavior is the same as if the object is set to 'false'. The value 'false' indicates that the first Measurement Interval starts at an arbitrary time and each subsequent Measurement Interval starts at a time which is determined by mefSoamLmCfgRepetitionTime. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgAlignMeasurementOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 525600))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAlignMeasurementOffset.setReference('[MEF SOAM-PM] D7')
if mibBuilder.loadTexts: mefSoamLmCfgAlignMeasurementOffset.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAlignMeasurementOffset.setDescription("This object specifies the offset in minutes from the time of day value if mefSoamLmCfgAlignMeasurementIntervals is 'true' and the repetition time is a factor of 60 minutes. If not, the value of this object is ignored. If the Measurement Interval is 15 minutes and mefSoamLmCfgAlignMeasurementIntervals is true and if this object was set to 5 minutes, the Measurement Intervals would start at 5, 20, 35, 50 minutes past each hour. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgAvailabilityMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 525600)).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityMeasurementInterval.setReference('[MEF SOAM-PM] R16, R17')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityMeasurementInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityMeasurementInterval.setDescription('This object specifies the availability Measurement Interval in minutes. A Measurement Interval of 15 minutes is to be supported, other intervals can be supported. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus.setReference('[MEF 10.2.1] Section 7.9.8; [MEF SOAM-PM] R80, D33, R81')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus.setDescription("This object specifies a configurable number of consecutive loss measurement PDUs to be used in evaluating the availability/unavailability status of each availability indicator per MEF 10.2.1. Loss Measurement PDUs (LMMs, CCMs or SLMs) are sent regularly with a period defined by mefSoamLmCfgMessagePeriod. Therefore, this object, when multiplied by mefSoamLmCfgMessagePeriod, is equivalent to the Availability parameter of 'delta_t' as specified by MEF 10.2.1. If the mefSoamLmCfgType is lmLMM or lmCCM, this object defines the number of LMM or CCM PDUs transmitted during each 'delta_t' period. The Availability flr for a given 'delta_t' can be calculated based on the counters in the last LMM/R or CCM during this 'delta_t' and the last LMM/R or CCM in the previous 'delta_t'. If the mefSoamLmCfgType is lmSLM, this object defines the number of SLM PDUs transmitted during each 'delta_t' period. The Availability flr for a given 'delta_t' is calculated based on the number of those SLM PDUs that are lost. If the mefSoamLmCfgType is lmLMM or lmCCM, the number range of 1 through 10 must be supported. The number range of 10 through 1000000 may be supported, but is not mandatory. If the mefSoamLmCfgType is lmSLM, the number range of 10 through 100 must be supported. The number range of 100 through 1000000 may be supported, but is not mandatory. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgAvailabilityFlrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(50000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityFlrThreshold.setReference('[MEF 10.2.1] Section 7.9.8; [MEF SOAM-PM] R81, R82, D34')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityFlrThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityFlrThreshold.setDescription("This object specifies a configurable availability threshold to be used in evaluating the availability/unavailability status of an availability indicator per MEF 10.2.1. The availability threshold range of 0.00 (0) through 1.00 (100000) is supported. This parameter is equivalent to the Availability parameter of 'C' as specified by MEF 10.2.1. Units are in milli-percent, where 1 indicates 0.001 percent. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgAvailabilityNumConsecutiveIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveIntervals.setReference('[MEF 10.2.1] Section 7.9.8; [MEF SOAM-PM] R80, D33')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveIntervals.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveIntervals.setDescription("This object specifies a configurable number of consecutive availability indicators to be used to determine a change in the availability status as indicated by MEF 10.2.1. This parameter is equivalent to the Availability parameter of 'n' as specified by MEF 10.2.1. The number range of 1 through 10 must be supported. The number range of 1 through 1000 may be supported, but is not mandatory. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgAvailabilityNumConsecutiveHighFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveHighFlr.setReference('[MEF 10.2.1] Section 7.9.8; [MEF SOAM-PM] R86, D35, D36')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveHighFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgAvailabilityNumConsecutiveHighFlr.setDescription("This object specifies a configurable number of consecutive availability indicators to be used for assessing CHLI. This parameter is equivalent to the Resilency parameter of 'p' as specified by MEF 10.2.1. mefSoamLmCfgAvailabilityNumConsecutiveHighFlr must be strictly less than mefSoamLmCfgAvailabilityNumConsecutiveIntervals. If not, the count of high loss intervals over time, mefSoamLmAvailabilityHighLoss, and the count of consecutive high loss levels, mefSoamLmAvailabilityConsecutiveHighLoss, is disabled. The number range of 1 through 10 must be supported. The number range of 1 through 1000 may be supported, but is not mandatory. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 31), MefSoamTcSessionType().clone('proactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgSessionType.setReference('[MEF SOAM-PM] R3')
if mibBuilder.loadTexts: mefSoamLmCfgSessionType.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgSessionType.setDescription("This object indicates whether the current session is defined to be 'Proactive' or 'On-Demand'. A value of 'proactive' indicates the current session is 'Proactive'. A value of 'onDemand' indicates the current session is 'On-Demand'. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamLmCfgSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 32), MefSoamTcStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCfgSessionStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgSessionStatus.setDescription("This object indicates the current status of the LM session. A value of 'active' indicates the current LM session is active, i.e. the current time lies between the start time and the stop time, and mefSoamLmCfgEnabled is true. A value of 'notActive' indicates the current LM session is not active, i.e. it has not started yet, has stopped upon reaching the stop time, or is disabled. ")
mefSoamLmCfgHistoryClear = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgHistoryClear.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgHistoryClear.setDescription("This object when written clears the Loss Measurement history Table (mefSoamLmHistoryStatsTable) - all rows are deleted. When read the value always returns 'false'. Writing this value does not change the current stat table, nor any of the items in the configuration table. Writing this value during row creation has no effect. ")
mefSoamLmCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active, except for mefSoamLmCfgHistoryClear and mefSoamLmCfgEnabled objects. All columns must have a valid value before a row can be activated. ')
mefSoamLmMeasuredStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2), )
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsTable.setReference('[MEF SOAM-PM] R7, R15, 8D18')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsTable.setDescription('This object contains the last measured results for a SOAM Loss Measurement session. Each row in the table represents a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. Instances of this managed object are created automatically by the SNMP Agent when the Loss Measurement session is running. Each object in this table applies only if the corresponding bit is set in mefSoamLmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
mefSoamLmMeasuredStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"))
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsEntry.setDescription('The conceptual row of mefSoamLmMeasuredStatsTable')
mefSoamLmMeasuredStatsForwardFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsForwardFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsForwardFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsForwardFlr.setDescription('This object contains the last frame loss ratio in the forward direction calculated by this MEP. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmMeasuredStatsBackwardFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsBackwardFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsBackwardFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsBackwardFlr.setDescription('This object contains the last frame loss ratio in the backward direction calculated by this MEP. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmMeasuredStatsAvailForwardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1, 3), MefSoamTcAvailabilityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailForwardStatus.setReference('[MEF SOAM-PM] R83')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailForwardStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailForwardStatus.setDescription('This object indicates the availability status (the outcome of the last known availability indicator) in the forward direction. Note that the status of an availability indicator is not known until the loss for a number of subsequent availability indicators has been calculated (as determined by mefSoamLmCfgAvailabilityNumConsecutiveIntervals) ')
mefSoamLmMeasuredStatsAvailBackwardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1, 4), MefSoamTcAvailabilityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailBackwardStatus.setReference('[MEF SOAM-PM] R83')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailBackwardStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailBackwardStatus.setDescription('This object indicates the availability status (the outcome of the last availability indicator) in the backward direction. Note that the status of an availability indicator is not known until the loss for a number of subsequent availability indicators has been calculated (as determined by mefSoamLmCfgAvailabilityNumConsecutiveIntervals) ')
mefSoamLmMeasuredStatsAvailForwardLastTransitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailForwardLastTransitionTime.setReference('[MEF SOAM-PM] R83')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailForwardLastTransitionTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailForwardLastTransitionTime.setDescription('This object indicates the time of the last transition between available and unavailable in the forward direction. If there have been no transitions since the Loss Measurement Session was started, this is set to 0. ')
mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime.setReference('[MEF SOAM-PM] R83')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime.setDescription('This object indicates the time of the last transition between available and unavailable in the backward direction. If there have been no transitions since the Loss Measurement Session was started, this is set to 0. ')
mefSoamLmCurrentAvailStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3), )
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsTable.setReference('[MEF SOAM-PM] D9, D18')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsTable.setDescription('This object contains the current results for a SOAM Loss Measurement session for availability statistics gathered during the interval indicated by mefSoamLmCfgAvailabilityMeasurementInterval. Each row in the table represents a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. Instances of this managed object are created automatically by the SNMP Agent when the Loss Measurement session is running. The objects in this table apply regardless of the value of mefSoamLmCfgType unless otherwise specified in the object description. Except for mefSoamLmCurrentAvailStatsIndex, mefSoamLmCurrentAvailStatsStartTime, mefSoamLmCurrentAvailStatsElapsedTime and mefSoamLmCurrentAvailStatsSuspect, each object in this table applies only if the corresponding bit is set in mefSoamLmCfgMeasurementEnable. The objects in this table may be persistent upon reboot or restart of a device. ')
mefSoamLmCurrentAvailStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"))
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsEntry.setDescription('The conceptual row of mefSoamLmCurrentAvailStatsTable')
mefSoamLmCurrentAvailStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsIndex.setDescription('The index for the current availability Measurement Interval for this PM session. This value will become the value for mefSoamLmHistoryAvailStatsIndex once the Measurement Interval is completed. The duration of the Measurement Interval is specified by mefSoamLmCfgAvailabilityMeasurementInterval. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. ')
mefSoamLmCurrentAvailStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsStartTime.setReference('[MEF SOAM-PM] R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsStartTime.setDescription('The time that the current Measurement Interval started. ')
mefSoamLmCurrentAvailStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsElapsedTime.setDescription('The time that the current Measurement Interval has been running, in 0.01 seconds. ')
mefSoamLmCurrentAvailStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to false at the start of a measurement interval. It is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
mefSoamLmCurrentAvailStatsForwardHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardHighLoss.setDescription("This object is the number of high loss intervals (HLI) over time in the forward direction. The value starts at 0 and increments for every HLI that occurs. This parameter is equivalent to 'L Sub T' found in MEF 10.2.1. ")
mefSoamLmCurrentAvailStatsBackwardHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardHighLoss.setDescription("This object is the number of high loss intervals (HLI) over time in the backwards direction. The value starts at 0 and increments for every HLI that occurs. This parameter is equivalent to 'L Sub T' found in MEF 10.2.1. ")
mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss.setDescription("This object is the number of consecutive high loss intervals (CHLI) over time in the forward direction. The value starts at 0 and increments for every HLI that occurs that is determined to fall within a CHLI. This parameter is equivalent to 'B Sub T' found in MEF 10.2.1. ")
mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss.setDescription("This object is the number of consecutive high loss intervals (CHLI) over time in the backward direction. The value starts at 0 and increments for every HLI that occurs that is determined to fall within a CHLI. This parameter is equivalent to 'B Sub T' found in MEF 10.2.1. ")
mefSoamLmCurrentAvailStatsForwardAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardAvailable.setReference('[MEF SOAM-PM] R87; [MEF 10.2.1]')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardAvailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardAvailable.setDescription('This object contains the number of availability indicators evaluated as available in the forward direction by this MEP during this Measurement Interval. ')
mefSoamLmCurrentAvailStatsBackwardAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardAvailable.setReference('[MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardAvailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardAvailable.setDescription('This object contains the number of availability indicators evaluated as available in the backward direction by this MEP during this Measurement Interval. ')
mefSoamLmCurrentAvailStatsForwardUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardUnavailable.setReference('[MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardUnavailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardUnavailable.setDescription('This object contains the number of availability indicators evaluated as unavailable in the forward direction by this MEP during this Measurement Interval. ')
mefSoamLmCurrentAvailStatsBackwardUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardUnavailable.setReference('[MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardUnavailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardUnavailable.setDescription('This object contains the number of availability indicators evaluated as unavailable in the backward direction by this MEP during this Measurement Interval. ')
mefSoamLmCurrentAvailStatsForwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardMinFlr.setDescription("This object contains the minimum one-way availability flr in the forward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmCurrentAvailStatsForwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardMaxFlr.setDescription("This object contains the maximum one-way availability flr in the forward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmCurrentAvailStatsForwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsForwardAvgFlr.setDescription("This object contains the average one-way availability flr in the forward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmCurrentAvailStatsBackwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardMinFlr.setDescription("This object contains the minimum one-way availability flr in the backward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmCurrentAvailStatsBackwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardMaxFlr.setDescription("This object contains the maximum one-way availability flr in the backward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmCurrentAvailStatsBackwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsBackwardAvgFlr.setDescription("This object contains the average one-way availability flr in the backward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4), )
if mibBuilder.loadTexts: mefSoamLmCurrentStatsTable.setReference('[MEF SOAM-PM] R7, R15, D9, D18')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsTable.setDescription('This table contains the results for the current Measurement Interval in a SOAM Loss Measurement session gathered during the interval indicated by mefSoamLmCfgMeasurementInterval. A row in this table is created automatically by the SNMP Agent when the Loss Measurement session is configured. Each row in the table represents the current statistics for a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. There may be more than one LM session per MEP. The main use case for this is to allow multiple CoS instances to be operating simultaneously for a MEP. The objects in this table apply regardless of the value of mefSoamLmCfgType unless otherwise specified in the object description. Except for mefSoamLmCurrentStatsIndex, mefSoamLmCurrentStatsStartTime, mefSoamLmCurrentStatsElapsedTime and mefSoamLmCurrentStatsSuspect, each object in this table applies only if the corresponding bit is set in mefSoamLmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
mefSoamLmCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"))
if mibBuilder.loadTexts: mefSoamLmCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsEntry.setDescription('The conceptual row of mefSoamLmCurrentStatsTable')
mefSoamLmCurrentStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsIndex.setDescription('The index for the current Measurement Interval for this PM session. This value will become the value for mefSoamLmHistoryStatsIndex once the Measurement Interval is completed. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. ')
mefSoamLmCurrentStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsStartTime.setReference('[MEF SOAM-PM] R22, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsStartTime.setDescription('The time that the current Measurement Interval started. ')
mefSoamLmCurrentStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsElapsedTime.setDescription('The time that the current Measurement Interval has been running, in 0.01 seconds. ')
mefSoamLmCurrentStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to false at the start of a measurement interval. It is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
mefSoamLmCurrentStatsForwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardTransmittedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of SOAM ETH-SLM frames only. ')
mefSoamLmCurrentStatsForwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardReceivedFrames.setDescription('This object contains the number of frames received in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of types lmSlm this includes the count of SOAM ETH-SLM frames only. ')
mefSoamLmCurrentStatsForwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmCurrentStatsForwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmCurrentStatsForwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsForwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmCurrentStatsBackwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardTransmittedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the backward direction by this MEP. For a PM Session of type lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of SOAM ETH-SLM frames only. ')
mefSoamLmCurrentStatsBackwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardReceivedFrames.setDescription('This object contains the number of frames received in the backward direction by this MEP. For a PM Session of type lmLmm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of SOAM ETH-SLM frames only. ')
mefSoamLmCurrentStatsBackwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmCurrentStatsBackwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmCurrentStatsBackwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsBackwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmCurrentStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSoamPdusSent.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when mefSoamLmCfgType is lmLmm, lmSlm, or lmCcm. It indicates the number of LMM, CCM, or SLM SOAM frames transmitted. ')
mefSoamLmCurrentStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs PDUs received in this Measurement Interval. This object applies when mefSoamLmCfgType is lmLmm, lmSlm, or lmCcm. This object indicates the number of LMR, CCM, or SLR SOAM frames received. ')
mefSoamLmHistoryAvailStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5), )
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsTable.setReference('[MEF SOAM-PM] R7, R15, R21, D8, R25')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsTable.setDescription('This table contains the results for availability history Measurement Intervals in a SOAM Loss Measurement session. Rows of this table object are created automatically by the SNMP Agent when the Loss Measurement session is running and a Measurement Interval is completed. Each row in the table represents the history statistics for a Loss Measurement session availability Measurement Interval for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. The fifth index index the specific Measurement Interval. At least 32 completed Measurement Intervals are to be supported. 96 completed Measurement Intervals are recommended to be supported. If there are at least 32 rows in the table and a new Measurement Interval completes and a new row is to be added to the table, the oldest completed Measurement Interval can be deleted (row deletion). If the availability Measurement Interval is other than 15 minutes then a minimum of 8 hours of completed Measurement Intervals are to be supported and 24 hours are recommended to be supported. Except for mefSoamLmHistoryAvailStatsIndex, mefSoamLmHistoryAvailStatsEndTime, mefSoamLmHistoryAvailStatsElapsedTime and mefSoamLmHistoryAvailStatsSuspect, each object in this table applies only if the corresponding bit is set in mefSoamLmCfgMeasurementEnable. The rows and objects in this table are to be persistent upon reboot or restart of a device. ')
mefSoamLmHistoryAvailStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsIndex"))
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsEntry.setDescription('The conceptual row of mefSoamLmHistoryAvailStatsTable')
mefSoamLmHistoryAvailStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsIndex.setDescription('The index for the availability Measurement Interval within this PM session. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. Measurement Intervals for availability (stored in this table) are based on mefSoamLmCfgAvailabilityMeasurementInterval and are indexed independently of Measurement Intervals for FLR (stored in mefSoamLmHistoryStatsTable). Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused while this session is active until it wraps to zero. The index value keeps increasing up to that time. ')
mefSoamLmHistoryAvailStatsEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsEndTime.setReference('[MEF SOAM-PM] R23, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsEndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsEndTime.setDescription('The time that the Measurement Interval ended. ')
mefSoamLmHistoryAvailStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsElapsedTime.setDescription('The length of time that the Measurement Interval ran for, in 0.01 seconds. ')
mefSoamLmHistoryAvailStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41, R42')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
mefSoamLmHistoryAvailStatsForwardHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardHighLoss.setDescription("This object is the number of high loss intervals (HLI) over time in the forward direction. The value starts at 0 and increments for every HLI that occurs. This parameter is equivalent to 'L Sub T' found in MEF 10.2.1. ")
mefSoamLmHistoryAvailStatsBackwardHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardHighLoss.setDescription("This object is the number of high loss intervals (HLI) over time in the backward direction. The value starts at 0 and increments for every HLI that occurs. This parameter is equivalent to 'L Sub T' found in MEF 10.2.1. ")
mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss.setDescription("This object is the number of consecutive high loss intervals (CHLI) over time in the forward direction. The value starts at 0 and increments for every HLI that occurs that is determined to fall within a CHLI. This parameter is equivalent to 'B Sub T' found in MEF 10.2.1. ")
mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss.setReference('[MEF 10.2.1] 6.9.9; [MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss.setDescription("This object is the number of consecutive high loss intervals (CHLI) over time in the forward direction. The value starts at 0 and increments for every HLI that occurs that is determined to fall within a CHLI. This parameter is equivalent to 'B Sub T' found in MEF 10.2.1. ")
mefSoamLmHistoryAvailStatsForwardAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardAvailable.setReference('[MEF SOAM-PM] R87; [MEF 10.2.1]')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardAvailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardAvailable.setDescription('This object contains the number of availability indicators evaluated as available in the forward direction by this MEP during this Measurement Interval. ')
mefSoamLmHistoryAvailStatsBackwardAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardAvailable.setReference('[MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardAvailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardAvailable.setDescription('This object contains the number of availability indicators evaluated as available in the backward direction by this MEP during this Measurement Interval. ')
mefSoamLmHistoryAvailStatsForwardUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardUnavailable.setReference('[MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardUnavailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardUnavailable.setDescription('This object contains the number of availability indicators evaluated as unavailable in the forward direction by this MEP during this Measurement Interval. ')
mefSoamLmHistoryAvailStatsBackwardUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardUnavailable.setReference('[MEF SOAM-PM] R87')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardUnavailable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardUnavailable.setDescription('This object contains the number of availability indicators evaluated as unavailable in the backward direction by this MEP during this Measurement Interval. ')
mefSoamLmHistoryAvailStatsForwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardMinFlr.setDescription("This object contains the minimum one-way availability flr in the forward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmHistoryAvailStatsForwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardMaxFlr.setDescription("This object contains the maximum one-way availability flr in the forward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmHistoryAvailStatsForwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsForwardAvgFlr.setDescription("This object contains the average one-way availability flr in the forward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmHistoryAvailStatsBackwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardMinFlr.setDescription("This object contains the minimum one-way availability flr in the backward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmHistoryAvailStatsBackwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardMaxFlr.setDescription("This object contains the maximum one-way availability flr in the backward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmHistoryAvailStatsBackwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsBackwardAvgFlr.setDescription("This object contains the average one-way availability flr in the backward direction, from among the set of availability flr values calculated by the MEP in this Measurement Interval. There is one availability flr value for each 'delta_t' time period within the Measurement Interval, as specified in MEF 10.2.1. The flr value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ")
mefSoamLmHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6), )
if mibBuilder.loadTexts: mefSoamLmHistoryStatsTable.setReference('[MEF SOAM-PM] R7, R15, R21, D8, R25')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsTable.setDescription('This table contains the results for history Measurement Intervals in a SOAM Loss Measurement session. Rows of this table object are created automatically by the SNMP Agent when the Loss Measurement session is running and a Measurement Interval is completed. Each row in the table represents the history statistics for a Loss Measurement session Measurement Interval for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. The fifth index index the specific Measurement Interval. At least 32 completed Measurement Intervals are to be supported. 96 completed Measurement Intervals are recommended to be supported. If there are at least 32 rows in the table and a new Measurement Interval completes and a new row is to be added to the table, the oldest completed Measurement Interval may be deleted (row deletion). If the measurement interval is other than 15 minutes then a minimum of 8 hours of completed Measurement Intervals are to be supported and 24 hours are recommended to be supported. Except for mefSoamLmHistoryStatsIndex, mefSoamLmHistoryStatsEndTime, mefSoamLmHistoryStatsElapsedTime and mefSoamLmHistoryStatsSuspect, each object in this table applies only if the corresponding bit is set in mefSoamLmCfgMeasurementEnable. The rows and objects in this table are to be persistent upon reboot or restart of a device. ')
mefSoamLmHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsIndex"))
if mibBuilder.loadTexts: mefSoamLmHistoryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsEntry.setDescription('The conceptual row of mefSoamLmHistoryStatsTable')
mefSoamLmHistoryStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mefSoamLmHistoryStatsIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsIndex.setDescription('The index for the Measurement Interval within this PM session. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. Measurement Intervals for FLR (stored in this table) are based on mefSoamLmCfgMeasurementInterval and are indexed independently of Measurement Intervals for availability (stored in mefSoamLmHistoryAvailStatsTable). Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused while this session is active until it wraps to zero. The index value keeps increasing up to that time. ')
mefSoamLmHistoryStatsEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsEndTime.setReference('[MEF SOAM-PM] R23, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsEndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsEndTime.setDescription('The time that the Measurement Interval ended. ')
mefSoamLmHistoryStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsElapsedTime.setDescription('The length of time that the Measurement Interval ran for, in 0.01 seconds. ')
mefSoamLmHistoryStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41, R42')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
mefSoamLmHistoryStatsForwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardTransmittedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of OAM ETH-SLM frames only. ')
mefSoamLmHistoryStatsForwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardReceivedFrames.setDescription('This object contains the number of frames received in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of OAM ETH-SLM frames only. ')
mefSoamLmHistoryStatsForwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmHistoryStatsForwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmHistoryStatsForwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsForwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmHistoryStatsBackwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardTransmittedFrames.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the backward direction by this MEP. For a PM Session of type lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of types lmSlm this includes the count of SOAM ETH-SLM frames only. ')
mefSoamLmHistoryStatsBackwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardReceivedFrames.setDescription('This object contains the number of frames received in the backward direction by this MEP. For a PM Session of type lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of types lmSlm this includes the count of SOAM ETH-SLM frames only. ')
mefSoamLmHistoryStatsBackwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardMinFlr.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmHistoryStatsBackwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmHistoryStatsBackwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsBackwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmHistoryStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSoamPdusSent.setReference('[MEF SOAM-PM] R69, R87')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when mefSoamLmCfgType is lmLmm, lmSlm, or lmCcm. It indicates the number of LMM, CCM, or SLM SOAM frames transmitted. ')
mefSoamLmHistoryStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 6, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R69, R87')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs received in this Measurement Interval. This object applies when mefSoamLmCfgType is lmLmm, lmSlm, or lmCcm. This object indicates the number of LMR, CCM, or SLR SOAM frames received. ')
mefSoamDmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: mefSoamDmCfgTable.setReference('[MEF SOAM-PM] R50; [Y.1731]')
if mibBuilder.loadTexts: mefSoamDmCfgTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgTable.setDescription('This table includes configuration objects and operations for the Delay Measurement function. Each row in the table represents a Delay Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. A Delay Measurement session is created on an existing MEP by first accessing the mefSoamDmOperNextIndex object and using this value as the mefSoamDmCfgIndex in the row creation. Some writable objects in this table are only applicable in certain cases (as described under each object), and attempts to write values for them in other cases will be ignored. The writable objects in this table need to be persistent upon reboot or restart of a device. ')
mefSoamDmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"))
if mibBuilder.loadTexts: mefSoamDmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgEntry.setDescription('The conceptual row of mefSoamDmCfgTable.')
mefSoamDmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mefSoamDmCfgIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgIndex.setDescription('An index to the Delay Measurement Configuration table which indicates the specific measurement session for the MEP. mefSoamPmMepOperNextIndex needs to be inspected to find an available index for row-creation. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused for other PM sessions on the same MEP while this session is active. The index value keeps increasing until it wraps to zero. This is to facilitate access control based on a fixed index for an EMS, since the index is not reused. ')
mefSoamDmCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dmDmm", 1), ("dm1DmTx", 2), ("dm1DmRx", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgType.setReference('[MEF SOAM-PM] R52, R53, R54, O5, R88')
if mibBuilder.loadTexts: mefSoamDmCfgType.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgType.setDescription('This object indicates what type of Delay Measurement is to be performed. dmDmm(1) DMM SOAM PDU generated, DMR responses received (one-way or two-way measurements) dm1DmTx(2) 1DM SOAM PDU generated (one-way measurements are made by the receiver) dm1DmRx(3) 1DM SOAM PDU received and tracked (one-way measurements) The exact PDUs to use are specified by this object in combination with mefSoamDmCfgVersion. The value dmDMM is required. The values dm1DmTx and dm1DmRx are optional. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgVersion.setReference('[Y.1731]')
if mibBuilder.loadTexts: mefSoamDmCfgVersion.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgVersion.setDescription('This object indicates the version of the PDUs used to perform Delay Measurement. Version 0 indicates the PDU formats defined in Y.1731-2008. Version 1 indicates the PDU formats defined in Y.1731-2011. The exact PDUs to use are specified by this object in combination with mefSoamDmCfgType. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgEnabled.setReference('[MEF SOAM-PM] R4, R5, R6, O1, R12, R14')
if mibBuilder.loadTexts: mefSoamDmCfgEnabled.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgEnabled.setDescription("This object specifies whether the Delay Measurement session is enabled. The value 'true' indicates the Delay Measurement session is enabled AND SOAM PDUs are sent and/or measurements are collected when the session is running according to the scheduling objects (start time, stop time, etc.). The value 'false' indicates the Delay Measurement session is disabled AND SOAM PDUs are not sent and/or measurements collected. For a Delay Measurement session to be removed the row is deleted in order to release internal resources. This object can written/modified after row creation time. If the DM session is enabled it resumes after shutdown/restart. If the DM session is disabled the current Measurement Interval is stopped, if it in process at the time, and all the in process calculations for the partially completed Measurement Interval are finalized. This object does not affect whether the single-ended Responder is enabled or not, which is enabled or disabled by the mefSoamPmMepDmSingleEndedResponder object. ")
mefSoamDmCfgMeasurementEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 5), Bits().clone(namedValues=NamedValues(("bSoamPdusSent", 0), ("bSoamPdusReceived", 1), ("bFrameDelayTwoWayBins", 2), ("bFrameDelayTwoWayMin", 3), ("bFrameDelayTwoWayMax", 4), ("bFrameDelayTwoWayAvg", 5), ("bFrameDelayForwardBins", 6), ("bFrameDelayForwardMin", 7), ("bFrameDelayForwardMax", 8), ("bFrameDelayForwardAvg", 9), ("bFrameDelayBackwardBins", 10), ("bFrameDelayBackwardMin", 11), ("bFrameDelayBackwardMax", 12), ("bFrameDelayBackwardAvg", 13), ("bIfdvForwardBins", 14), ("bIfdvForwardMin", 15), ("bIfdvForwardMax", 16), ("bIfdvForwardAvg", 17), ("bIfdvBackwardBins", 18), ("bIfdvBackwardMin", 19), ("bIfdvBackwardMax", 20), ("bIfdvBackwardAvg", 21), ("bIfdvTwoWayBins", 22), ("bIfdvTwoWayMin", 23), ("bIfdvTwoWayMax", 24), ("bIfdvTwoWayAvg", 25), ("bFrameDelayRangeForwardBins", 26), ("bFrameDelayRangeForwardMax", 27), ("bFrameDelayRangeForwardAvg", 28), ("bFrameDelayRangeBackwardBins", 29), ("bFrameDelayRangeBackwardMax", 30), ("bFrameDelayRangeBackwardAvg", 31), ("bFrameDelayRangeTwoWayBins", 32), ("bFrameDelayRangeTwoWayMax", 33), ("bFrameDelayRangeTwoWayAvg", 34), ("bMeasuredStatsFrameDelayTwoWay", 35), ("bMeasuredStatsFrameDelayForward", 36), ("bMeasuredStatsFrameDelayBackward", 37), ("bMeasuredStatsIfdvTwoWay", 38), ("bMeasuredStatsIfdvForward", 39), ("bMeasuredStatsIfdvBackward", 40)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgMeasurementEnable.setReference('[MEF SOAM-PM]')
if mibBuilder.loadTexts: mefSoamDmCfgMeasurementEnable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasurementEnable.setDescription("A vector of bits that indicates the type of SOAM DM counters that are enabled. A bit set to '1' enables the specific SOAM DM counter. A bit set to '0' disables the SOAM DM counter. If a particular SOAM DM counter is not supported the BIT value is set to '0'. Not all SOAM DM counters are supported for all SOAM DM types. This object can only be written at row creation time and cannot be modified once it has been created. bSoamPdusSent(0) Enables/disables the mefSoamDmCurrentStatsSoamPdusSent and mefSoamDmHistoryStatsSoamPdusSent counters. bSoamPdusReceived(1) Enables/disables the mefSoamDmCurrentStatsSoamPdusReceived and mefSoamDmHistoryStatsSoamPdusReceived counters. bFrameDelayTwoWayBins(2) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'twoWayFrameDelay'. bFrameDelayTwoWayMin(3) Enables/disables the mefSoamDmCurrentStatsFrameDelayTwoWayMin and mefSoamDmHistoryStatsFrameDelayTwoWayMin counters. bFrameDelayTwoWayMax(4) Enables/disables the mefSoamDmCurrentStatsFrameDelayTwoWayMax and mefSoamDmHistoryStatsFrameDelayTwoWayMax counters. bFrameDelayTwoWayAvg(5) Enables/disables the mefSoamDmCurrentStatsFrameDelayTwoWayAvg and mefSoamDmHistoryStatsFrameDelayTwoWayAvg counters. bFrameDelayForwardBins(6) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'forwardFrameDelay'. bFrameDelayForwardMin(7) Enables/disables the mefSoamDmCurrentStatsFrameDelayForwardMin and mefSoamDmHistoryStatsFrameDelayForwardMin counters. bFrameDelayForwardMax(8) Enables/disables the mefSoamDmCurrentStatsFrameDelayForwardMax and mefSoamDmHistoryStatsFrameDelayForwardMax counters. bFrameDelayForwardAvg(9) Enables/disables the mefSoamDmCurrentStatsFrameDelayForwardAvg and mefSoamDmHistoryStatsFrameDelayForwardAvg counters. bFrameDelayBackwardBins(10) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'backwardFrameDelay'. bFrameDelayBackwardMin(11) Enables/disables the mefSoamDmCurrentStatsFrameDelayBackwardMin and mefSoamDmHistoryStatsFrameDelayBackwardMin counters. bFrameDelayBackwardMax(12) Enables/disables the mefSoamDmCurrentStatsFrameDelayBackwardMax and mefSoamDmHistoryStatsFrameDelayBackwardMax counters. bFrameDelayBackwardAvg(13) Enables/disables the mefSoamDmCurrentStatsFrameDelayBackwardAvg and mefSoamDmHistoryStatsFrameDelayBackwardAvg counters. bIfdvForwardBins(14) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'forwardIfdv'. bIfdvForwardMin(15) Enables/disables the mefSoamDmCurrentStatsIfdvForwardMin and mefSoamDmHistoryStatsIfdvForwardMin counters. bIfdvForwardMax(16) Enables/disables the mefSoamDmCurrentStatsIfdvForwardMax and mefSoamDmHistoryStatsIfdvForwardMax counters. bIfdvForwardAvg(17) Enables/disables the mefSoamDmCurrentStatsIfdvForwardAvg and mefSoamDmHistoryStatsIfdvForwardAvg counters. bIfdvBackwardBins(18) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'backwardIfdv'. bIfdvBackwardMin(19) Enables/disables the mefSoamDmCurrentStatsIfdvBackwardMin and mefSoamDmHistoryStatsIfdvBackwardMin counters. bIfdvBackwardMax(20) Enables/disables the mefSoamDmCurrentStatsIfdvBackwardMax and mefSoamDmHistoryStatsIfdvBackwardMax counters. bIfdvBackwardAvg(21) Enables/disables the mefSoamDmCurrentStatsIfdvBackwardAvg and mefSoamDmHistoryStatsIfdvBackwardAvg counters. bIfdvTwoWayBins(22) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'twoWayIfdv'. bIfdvTwoWayMin(23) Enables/disables the mefSoamDmCurrentStatsIfdvTwoWayMin and mefSoamDmHistoryStatsIfdvTwoWayMin counters. bIfdvTwoWayMax(24) Enables/disables the mefSoamDmCurrentStatsIfdvTwoWayMax and mefSoamDmHistoryStatsIfdvTwoWayMax counters. bIfdvTwoWayAvg(25) Enables/disables the mefSoamDmCurrentStatsIfdvTwoWayAvg and mefSoamDmHistoryStatsIfdvTwoWayAvg counters. bFrameDelayRangeForwardBins(26) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'forwardFrameDelayRange'. bFrameDelayRangeForwardMax(27) Enables/disables the mefSoamDmCurrentStatsFrameDelayRangeForwardMax and mefSoamDmHistoryStatsFrameDelayRangeForwardMax counters. bFrameDelayRangeForwardAvg(28) Enables/disables the mefSoamDmCurrentStatsFrameDelayRangeForwardAvg and mefSoamDmHistoryStatsFrameDelayRangeForwardAvg counters. bFrameDelayRangeBackwardBins(29) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'backwardFrameDelayRange'. bFrameDelayRangeBackwardMax(30) Enables/disables the mefSoamDmCurrentStatsFrameDelayRangeBackwardMax and mefSoamDmHistoryStatsFrameDelayRangeBackwardMax counters. bFrameDelayRangeBackwardAvg(31) Enables/disables the mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg and mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg counters. bFrameDelayRangeTwoWayBins(32) Enables/disables the mefSoamDmCurrentStatsBinsEntry counter and the mefSoamDmHistoryStatsBinsEntry counter when the mefSoamDmCfgMeasBinType is 'twoWayFrameDelayRange'. bFrameDelayRangeTwoWayMax(33) Enables/disables the mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax and mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax counters. bFrameDelayRangeTwoWayAvg(34) Enables/disables the mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg and mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg counters. bMeasuredStatsFrameDelayTwoWay(35) Enables/disables the mefSoamDmMeasuredStatsFrameDelayTwoWay counter. bMeasuredStatsFrameDelayForward(36) Enables/disables the mefSoamDmMeasuredStatsFrameDelayForward counter. bMeasuredStatsFrameDelayBackward(37) Enables/disables the mefSoamDmMeasuredStatsFrameDelayBackward counter. bMeasuredStatsIfdvTwoWay(38) Enables/disables the mefSoamDmMeasuredStatsIfdvTwoWay counter. bMeasuredStatsIfdvForward(39) Enables/disables the mefSoamDmMeasuredStatsIfdvForward counter. bMeasuredStatsIfdvBackward(40) Enables/disables the mefSoamDmMeasuredStatsIfdvBackward counter. ")
mefSoamDmCfgMessagePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 6), MefSoamTcMeasurementPeriodType().clone(100)).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgMessagePeriod.setReference('[MEF SOAM-PM] R61, R62, D22, R95, R96, D39')
if mibBuilder.loadTexts: mefSoamDmCfgMessagePeriod.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMessagePeriod.setDescription('This object specifies the interval between Delay Measurement OAM message transmission. For Delay Measurement monitoring applications, the default value is 100ms. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 7), IEEE8021PriorityValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgPriority.setReference('[MEF SOAM-PM] R1, R2, R56, D21, R57, R58, R90-R94, D28; [MEF 10.2.1] Section 6.8')
if mibBuilder.loadTexts: mefSoamDmCfgPriority.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgPriority.setDescription('This object specifies the priority of frames with Delay Measurement OAM message information. The default value is to be the value which yields the lowest frame loss. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 8), Unsigned32().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgFrameSize.setReference('[MEF SOAM-PM] R63, R64, D23, D24, R97, R98, D40, D41')
if mibBuilder.loadTexts: mefSoamDmCfgFrameSize.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgFrameSize.setDescription('This object specifies the Delay Measurement frame size between 64 bytes and the maximum transmission unit of the EVC. The range of frame sizes from 64 through 2000 octets need to be supported, and the range of frame sizes from 2001 through 9600 octets is suggested to be supported. The adjustment to the frame size of the standard frame size is accomplished by the addition of a Data or Test TLV. A Data or Test TLV is only added to the frame if the frame size is greater than 64 bytes. This object is only valid for the entity transmitting the Delay Measurement frames (dmDmm, dm1DmTx) and is ignored by the entity receiving frames. In addition, this object is not valid when mefSoamDmCfgVersion is 0. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgDataPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 9), MefSoamTcDataPatternType().clone('zeroPattern')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgDataPattern.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgDataPattern.setDescription("This object specifies the DM data pattern included in a Data TLV when the size of the DM frame is determined by the mefSoamDmFrameSize object and mefSoamDmTestTlvIncluded is 'false'. If the frame size object does not define the DM frame size or mefSoamDmTestTlvIncluded is 'true' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgTestTlvIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgTestTlvIncluded.setReference('[Y.1731] 9.3')
if mibBuilder.loadTexts: mefSoamDmCfgTestTlvIncluded.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgTestTlvIncluded.setDescription("Indicates whether a Test TLV or Data TLV is included when the size of the DM frame is determined by the mefSoamDmFrameSize object. A value of 'true' indicates that the Test TLV is to be included. A value of 'false' indicates that the Data TLV is to be included. If the frame size object does not define the DM frame size the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgTestTlvPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 11), MefSoamTcTestPatternType().clone('null')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgTestTlvPattern.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgTestTlvPattern.setDescription("This object specifies the type of test pattern to be sent in the DM frame Test TLV when the size of DM PDU is determined by the mefSoamDmFrameSize object and mefSoamDmTestTlvIncluded is 'true'. If the frame size object does not define the DM frame size or mefSoamDmTestTlvIncluded is 'false' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgMeasurementInterval.setReference('[MEF SOAM-PM] R16, R17')
if mibBuilder.loadTexts: mefSoamDmCfgMeasurementInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasurementInterval.setDescription('This object specifies a Measurement Interval in minutes. A Measurement Interval 15 minutes needs to be supported, other intervals may be supported. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgNumIntervalsStored = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 1000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgNumIntervalsStored.setReference('[MEF SOAM-PM] R21, D8, D9')
if mibBuilder.loadTexts: mefSoamDmCfgNumIntervalsStored.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgNumIntervalsStored.setDescription('This object specifies the number of completed Measurement Intervals to store in the history statistic table. At least 32 completed Measurement Intervals are to be stored. 96 Measurement Intervals are recommended to be stored. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgDestMacAddress.setReference('[MEF SOAM-PM] R55, R89')
if mibBuilder.loadTexts: mefSoamDmCfgDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgDestMacAddress.setDescription("The Target or Destination MAC Address Field to be transmitted. If mefSoamDmCfgType is 'dmDmm', the destination address is to be the unicast address of the destination MEP. An error is returned if this object is set to a multicast address. If mefSoamDmCfgType is 'dm1DmTx', the destination address is normally the unicast address of the destination MEP, but can be a multicast address indicating the level of the MEG: 01-80-c2-00-00-3y, where y is the level of the MEG. An error is returned if this object is set to any other multicast address. If mefSoamDmCfgType is 'dm1DmRx', this object is ignored. This address will be used if the value of the object mefSoamDmDestIsMepId is 'false'. This object is only valid for the entity transmitting the SOAM DM frames and is ignored by the entity receiving SOAM DM frames. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 15), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgDestMepId.setReference('[MEF SOAM-PM] R55, R89')
if mibBuilder.loadTexts: mefSoamDmCfgDestMepId.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgDestMepId.setDescription("The Maintenance Association End Point Identifier of another MEP in the same Maintenance Association to which the SOAM DM frame is to be sent. This address will be used if the value of the column mefSoamDmDestIsMepId is 'true'. A value of zero means that the destination MEP ID has not been configured. This object is only valid for the entity transmitting the Delay Measurement frames, types 'dmDmm' and 'dm1DmTx'. It is not applicable for the 'dm1DmRx' type. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgDestIsMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 16), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgDestIsMepId.setReference('[MEF SOAM-PM] R55, R89')
if mibBuilder.loadTexts: mefSoamDmCfgDestIsMepId.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgDestIsMepId.setDescription("A value of 'true' indicates that MEPID of the target MEP is used for SOAM DM frame transmission. A value of 'false' indicates that the destination MAC address of the target MEP is used for SOAM DM frame transmission. This object is only valid for the entity transmitting the Delay Measurement frames, types 'dmDmm' and 'dm1DmTx'. It is not applicable for the 'dm1DmRx type. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 17), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgSourceMacAddress.setReference('[MEF SOAM-PM] R55, R89')
if mibBuilder.loadTexts: mefSoamDmCfgSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgSourceMacAddress.setDescription('The Source MAC Address Field of the received SOAM DM session PDUs. If mefSoamDmCfgType is dm1DmRx this object indicates the source address of the dm1DmTx DM session. This object is only valid for mefSoamDmCfgType set to dm1DmRx. It is ignored for mefSoamDmCfgType set to dmDmm or dm1DmTx. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgStartTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 18), MefSoamTcOperationTimeType().clone('immediate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgStartTimeType.setReference('[MEF SOAM-PM] R3, R7, R8, D1')
if mibBuilder.loadTexts: mefSoamDmCfgStartTimeType.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgStartTimeType.setDescription("This object specifies the type of start time of the SOAM DM session. The start time can be disabled (none), immediate, relative, or fixed. The value of 'none' is illegal and a write error will be returned if this value is used. The value of 'immediate' starts the SOAM DM session when the mefSoamDmCfgEnabled is true. The value of 'fixed' starts the SOAM DM session when the mefSoamDmFixedStartDateAndTime is less than or equal to the current system date and time and mefSoamDmCfgEnabled is true. This value is used to implement an On-Demand fixed time PM session. The value of 'relative' starts the SOAM DM session when the current system date and time minus the mefSoamDmRelativeStartTime is greater than or equal to the system date and time when the mefSoamDmStartTimeType object was written and mefSoamDmCfgEnabled is true. This value is used to implement an On-Demand relative time PM session. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgFixedStartDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 19), DateAndTime().clone(hexValue="0000010100000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgFixedStartDateAndTime.setReference('[MEF SOAM-PM] R9')
if mibBuilder.loadTexts: mefSoamDmCfgFixedStartDateAndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgFixedStartDateAndTime.setDescription("This object specifies the fixed start date/time for the SOAM Delay Measurement session. This object is used only used if mefSoamDmStartTimeType is 'fixed' and is ignored otherwise. The default value is year 0000, month 01, day 01, time 00:00:00.00. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgRelativeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 20), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgRelativeStartTime.setReference('[MEF SOAM-PM] R9')
if mibBuilder.loadTexts: mefSoamDmCfgRelativeStartTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgRelativeStartTime.setDescription("This object specifies the relative start time, from the current system time, for the SOAM DM session. This object is used only if mefSoamDmStartTimeType is 'relative' and is ignored otherwise. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgStopTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 21), MefSoamTcOperationTimeType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgStopTimeType.setReference('[MEF SOAM-PM] R3, R10, D2')
if mibBuilder.loadTexts: mefSoamDmCfgStopTimeType.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgStopTimeType.setDescription("This object specifies the type of stop time to terminate the SOAM DM session. The stop time can be forever (none), relative, or fixed. The value of 'none' indicates that the SOAM DM session never ends once it has started unless the session is disabled. The value of 'immediate' is illegal and a write error will be returned if this value is used. The value of 'fixed' stops the SOAM DM session when the mefSoamDmFixedStopDateAndTime is less than or equal to the current system date. This value is used to implement an On-Demand fixed time PM session. The value of 'relative' stops the SOAM DM session when the time indicated by mefSoamDmRelativeStopTime has passed since the session start time as determined by the mefSoamDmCfgStartTimeType, mefSoamDmCfgFixedStartDateAndTime and mefSoamDmCfgRelativeStartTime objects. This value is used to implement an On-Demand relative time PM session. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgFixedStopDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 22), DateAndTime().clone(hexValue="0000010100000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgFixedStopDateAndTime.setReference('[MEF SOAM-PM] R10, R13')
if mibBuilder.loadTexts: mefSoamDmCfgFixedStopDateAndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgFixedStopDateAndTime.setDescription("This object specifies the fixed stop date/time for the SOAM Delay Measurement session. This object is used only used if mefSoamDmStopTimeType is 'fixed' and is ignored otherwise. The default value is year 0000, month 01, day 01, time 00:00:00.00. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgRelativeStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 23), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgRelativeStopTime.setReference('[MEF SOAM-PM] R11')
if mibBuilder.loadTexts: mefSoamDmCfgRelativeStopTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgRelativeStopTime.setDescription("This object specifies the relative stop time, from the session start time, to stop the SOAM DM session. This object is used only if mefSoamDmStopTimeType is 'relative' and is ignored otherwise. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgRepetitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31536000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgRepetitionTime.setReference('[MEF SOAM-PM] R18, D3, R19, R20')
if mibBuilder.loadTexts: mefSoamDmCfgRepetitionTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgRepetitionTime.setDescription('This object specifies a configurable repetition time between Measurement Intervals in a Delay Measurement session in seconds. If the value is 0 (none), there is no time gap between the end of one Measurement Interval and the start of a new Measurement Interval. This is the normal usage case. If the value is greater than one Measurement Interval there is time gap between the end of one Measurement Interval and the start of the next Measurement Interval. The repetition time specifies the time between the start of consecutive Measurement Intervals; hence the gap between the end of one Measurement Interval and the start of the next is equal to the difference between the repetition time and the measurement interval. During this gap, no SOAM PDUs are sent for this session and no measurements are made. If the value is greater 0 but less than or equal to the measurement interval, an error is returned. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgAlignMeasurementIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 25), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgAlignMeasurementIntervals.setReference('[MEF SOAM-PM] D4, D5, D6')
if mibBuilder.loadTexts: mefSoamDmCfgAlignMeasurementIntervals.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgAlignMeasurementIntervals.setDescription("This object specifies whether the Measurement Intervals for the Delay Measurement session are aligned with a zero offset to real time. The value 'true' indicates that each Measurement Interval starts at a time which is aligned to NE time source hour, if the repetition time (or the Measurement Interval, if the repetition time is 0) is a factor of an hour, i.e. 60min/15min = 4. For instance, a Measurement Interval/Repetition Time of 15 minutes would stop/start the Measurement Interval at 0, 15, 30, and 45 minutes of an hour. A Measurement Interval/Repetition Time of 7 minutes would not align to the hour since 7 minutes is NOT a factor of an hour, i.e. 60min/7min = 8.6. In this case the behavior is the same as if the object is set to 'false'. The value 'false' indicates that the first Measurement Interval starts at an arbitrary time and each subsequent Measurement Interval starts at a time which is determined by mefSoamLmCfgRepetitionTime. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgAlignMeasurementOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 525600))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgAlignMeasurementOffset.setReference('[MEF SOAM-PM] D7')
if mibBuilder.loadTexts: mefSoamDmCfgAlignMeasurementOffset.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgAlignMeasurementOffset.setDescription("This object specifies the offset in minutes from the time of day value if mefSoamDmCfgAlignMeasurementIntervals is 'true' and the repetition time is a factor of 60 minutes. If not, the value of this object is ignored. If the Measurement Interval is 15 minutes and mefSoamDmCfgAlignMeasurementIntervals is true and if this object was set to 5 minutes, the Measurement Intervals would start at 5, 20, 35, 50 minutes past each hour. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgNumMeasBinsPerFrameDelayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerFrameDelayInterval.setReference('[MEF SOAM-PM] R27, D11, R28, D12')
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerFrameDelayInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerFrameDelayInterval.setDescription('This object specifies the number of measurement bins per Measurement Interval for Frame Delay measurements. At least 3 bins are to be supported; at least 10 bins are recommended to be supported. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval.setReference('[MEF SOAM-PM] R29, D13, R30, D14')
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval.setDescription('This object specifies the number of measurement bins per Measurement Interval for Inter-Frame Delay Variation measurements. The minimum number of measurement bins to be supported is 2. The desired number of measurements bins to be supported is 10. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgInterFrameDelayVariationSelectionOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgInterFrameDelayVariationSelectionOffset.setReference('[MEF SOAM-PM] O4, D25, O6, D42')
if mibBuilder.loadTexts: mefSoamDmCfgInterFrameDelayVariationSelectionOffset.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgInterFrameDelayVariationSelectionOffset.setDescription('This object specifies the selection offset for Inter-Frame Delay Variation measurements. If this value is set to n, then the IFDV is calculated by taking the difference in frame delay between frame F and frame (F+n). This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval.setReference('[MEF SOAM-PM] R31, D15, R32, D16')
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval.setDescription('This object specifies the number of measurement bins per Measurement Interval for Frame Delay Range measurements. At least 2 bins are to be supported; at least 10 bins are recommended to be supported. This object can only be written at row creation time and cannot be modified once it has been created. ')
mefSoamDmCfgSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 31), MefSoamTcSessionType().clone('proactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgSessionType.setReference('[MEF SOAM-PM] R3')
if mibBuilder.loadTexts: mefSoamDmCfgSessionType.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgSessionType.setDescription("This object indicates whether the current session is defined to be 'Proactive' or 'On-Demand'. A value of 'proactive' indicates the current session is 'Proactive'. A value of 'onDemand' indicates the current session is 'On-Demand'. This object can only be written at row creation time and cannot be modified once it has been created. ")
mefSoamDmCfgSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 32), MefSoamTcStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCfgSessionStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgSessionStatus.setDescription("This object indicates the current status of the DM session. A value of 'active' indicates the current DM session is active, i.e. the current time lies between the start time and the stop time, and mefSoamDmCfgEnabled is true. A value of 'notActive' indicates the current DM session is not active, i.e. it has not started yet, has stopped upon reaching the stop time, or is disabled. ")
mefSoamDmCfgHistoryClear = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgHistoryClear.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgHistoryClear.setDescription("This object when written clears the Delay Measurement history tables (mefSoamDmHistoryStatsTable and mefSoamDmHistoryStatsBinsTable) - all rows are deleted. When read the value always returns 'false'. Writing this value does not change the current stat table, nor any of the items in the configuration table. Writing this object at row creation has no effect. ")
mefSoamDmCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active, except for mefSoamDmCfgEnabled and mefSoamDmCfgHistoryClear objects. All columns are to have a valid value before a row can be activated. ')
mefSoamDmCfgMeasBinTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 2), )
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinTable.setReference('[MEF SOAM-PM] R34, R36, R37, D17, R38, R65, D26, D27, R99, D43, D44')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinTable.setDescription('This table includes configuration objects for the Delay Measurement bins to collect stats. Each row in the table is automatically created when the Delay Measurement session is defined for the selected MEP. The number of rows created is based upon three items: the DM type, the number of bins defined for each type, and whether bins are enabled for each type. The first four indices are the same as used to create the DM session: Maintenance Domain, MaNet, MEP identification, and mefSoamDmCfgIndex. The fifth index is the type of bin, and the sixth index is the bin number. For a dmDmm session all nine types of bins can be created. For a dm1DmmTx session no bins are created. For a dm1DmmRx session only types forwardFrameDelay, forwardIfdv, and forwardFrameDelayRange can be created. The number of bins created for a bin type is based upon: the mefSoamDmCfgNumMeasBinsPerFrameDelayInterval object, the mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval object, the mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval object, and the mefSoamDmCfgMeasurementEnable object. For instance, if a dmDmm session with Bins per Frame Delay Interval set to 5, Bins per Frame Delay Variation Interval set to 3, and Frame Delay Range set to 2 (default), all of the appropriate bits set in mefSoamDmMeasurementCfgEnable, the following number of rows would be created: For bin types TwoWayFrameDelay(1), forwardFrameDelay(2), and backwardFrameDelay(3) = 5 bins * 3 types = 15 rows For bin types TwoWayIfdv(4), forwardIfdv(5), backwardIfdv(6) = 3 bins * 3 types = 9 rows. For bins types twoWayFrameDelayRange(7), forwardFrameDelayRange(8), backwardFrameDelayRange(9) = 2 bins * 3 types = 6 rows. This gives a total of 30 rows created for the DMM session example. Each value in the bin defaults to 5000us greater than the previous bin, with the first bin default value set to 0. For the delay example above (5 bins), the following default values would be written to the bins: bin 1: 0 (range is 0us <= measurement < 5,000us) bin 2: 5000 (range is 5,000us <= measurement < 10,000us) bin 3: 10000 (range is 10,000us <= measurement < 15,000us) bin 4: 15000 (range is 15,000us <= measurement < 20,000us) bin 5: 20000 (range is 20,000us <= measurement < infinity) For the delay variation example above (3 bins), the following default values would be written to the bins: bin 1: 0 (range is 0us <= measurement < 5,000us) bin 2: 5000 (range is 5,000us <= measurement < 10,000us) bin 3: 10000 (range is 10,000us <= measurement < infinity) For the frame delay range example above (2 bins), the following default values would be written to the bins: bin 1: 0 (range is 0us <= measurement < 5,000us) bin 2: 5000 (range is 5,000us <= measurement < infinity) The writable objects in this table need to be persistent upon reboot or restart of a device. Rows are only created if the corresponding measurement type has been enabled via the mefSoamDmCfgMeasurementEnable object. ')
mefSoamDmCfgMeasBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinType"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinNumber"))
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinEntry.setDescription('The conceptual row of mefSoamDmCfgMeasBinTable.')
mefSoamDmCfgMeasBinType = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 2, 1, 1), MefSoamTcDelayMeasurementBinType())
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinType.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinType.setDescription('This object specifies whether the bin number is for Frame Delay or Inter-Frame Delay Variation. ')
mefSoamDmCfgMeasBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinNumber.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinNumber.setDescription('This object specifies the bin number for the configured boundary. The first bin has bin number 1. ')
mefSoamDmCfgMeasBinLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 2, 1, 3), Unsigned32()).setUnits('microseconds (us)').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinLowerBound.setReference('[MEF SOAM-PM] R33, R35, D17')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinLowerBound.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinLowerBound.setDescription('This object specifies the lower boundary for a measurement bin. The upper boundary is defined by the next bin value or infinite for the last bin defined. The measurement boundary for each measurement bin is to be larger than the measurement boundary of the preceding measurement bin. By default, the next bin is set to 5000us larger than the lower bin boundary. The values in a bin boundary object represents the time range used to segregate delay data into the appropriate statistical data bin. For five bins with default values, each bin has the following time range: bin 1 = 0, range is 0us <= measurement < 5,000us bin 2 = 5000, range is 5,000us <= measurement < 10,000us bin 3 = 10000, range is 10,000us <= measurement < 15,000us bin 4 = 15000, range is 15,000us <= measurement < 20,000us bin 5 = 20000, range is 20,000us <= measurement < infinity The first bin boundary (mefSoamDmCfgBinNumber set to 1) always contains the value of 0. Attempting to write a non-zero value to this bin will result in an error. ')
mefSoamDmMeasuredStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3), )
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsTable.setReference('[MEF SOAM-PM] R7, R15, D18')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsTable.setDescription('This object contains the last measured results for a SOAM Delay Measurement session. Each row in the table represents a Delay Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. Instances of this managed object are created automatically by the SNMP Agent when the Delay Measurement session is running. Each object in this table applies only if the corresponding bit is set in mefSoamDmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
mefSoamDmMeasuredStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"))
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsEntry.setDescription('The conceptual row of mefSoamDmMeasuredStatsTable')
mefSoamDmMeasuredStatsFrameDelayTwoWay = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1, 1), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayTwoWay.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayTwoWay.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayTwoWay.setDescription('This object contains the two-way frame delay calculated by this MEP from the last received SOAM PDU. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmMeasuredStatsFrameDelayForward = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1, 2), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayForward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayForward.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayForward.setDescription('This object contains the frame delay in the forward direction calculated by this MEP from the last received SOAM PDU. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmMeasuredStatsFrameDelayBackward = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1, 3), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayBackward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayBackward.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsFrameDelayBackward.setDescription('This object contains the frame delay in the backward direction calculated by this MEP from the last received SOAM PDU. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmMeasuredStatsIfdvTwoWay = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvTwoWay.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvTwoWay.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvTwoWay.setDescription('This object contains the last two-way inter-frame delay interval calculated by this MEP. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmMeasuredStatsIfdvForward = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvForward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvForward.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvForward.setDescription('This object contains the last one-way inter-frame delay interval in the forward direction calculated by this MEP. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmMeasuredStatsIfdvBackward = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 3, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvBackward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvBackward.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsIfdvBackward.setDescription('This object contains the last one-way inter-frame delay interval in the backward direction calculated by this MEP. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4), )
if mibBuilder.loadTexts: mefSoamDmCurrentStatsTable.setReference('[MEF SOAM-PM] R7, R15, D9, D18')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsTable.setDescription('This table contains the results for the current Measurement Interval in a SOAM Delay Measurement session gathered during the interval indicated by mefSoamLmCfgMeasurementInterval. A row in this table is created automatically by the SNMP Agent when the Delay Measurement session is configured. Each row in the table represents the current statistics for a Delay Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. There can be more than one DM session per MEP. The objects in this table apply regardless of the value of mefSoamDmCfgType unless otherwise specified in the object description. Backward and two-way statistic objects are undefined if mefSoamDmCfgType is dm1DmRx. Except for mefSoamDmCurrentStatsIndex, mefSoamDmCurrentStatsStartTime mefSoamDmCurrentStatsElapsedTime and mefSoamDmCurrentStatsSuspect, each object in this table applies only if the corresponding bit is set in mefSoamDmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
mefSoamDmCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"))
if mibBuilder.loadTexts: mefSoamDmCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsEntry.setDescription('The conceptual row of mefSoamDmCurrentStatsTable')
mefSoamDmCurrentStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIndex.setDescription('The index for the current Measurement Interval for this PM session. This value will become the value for mefSoamDmHistoryStatsIndex once the Measurement Interval is completed. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. ')
mefSoamDmCurrentStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsStartTime.setReference('[MEF SOAM-PM] R22, R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsStartTime.setDescription('The time that the current Measurement Interval started. ')
mefSoamDmCurrentStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsElapsedTime.setDescription('The time that the current Measurement Interval has been running, in 0.01 seconds. ')
mefSoamDmCurrentStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is to be set to false at the start of a measurement interval. It is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
mefSoamDmCurrentStatsFrameDelayTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayMin.setDescription('This object contains the minimum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayMax.setDescription('This object contains the maximum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayTwoWayAvg.setDescription('This object contains the average two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 8), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardMin.setReference('[MEF SOAM-PM] R67, R101')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardMin.setDescription('This object contains the minimum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsFrameDelayForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardMax.setReference('[MEF SOAM-PM] R67, R101')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardMax.setDescription('This object contains the maximum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsFrameDelayForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardAvg.setReference('[MEF SOAM-PM] R67, R101')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayForwardAvg.setDescription('This object contains the average one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsFrameDelayBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardMin.setReference('[MEF SOAM-PM] R67')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardMin.setDescription('This object contains the minimum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardMax.setReference('[MEF SOAM-PM] R67')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardMax.setDescription('This object contains the maximum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardAvg.setReference('[MEF SOAM-PM] R67')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayBackwardAvg.setDescription('This object contains the average one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsIfdvForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardMin.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsIfdvForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsIfdvForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvForwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsIfdvBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsIfdvBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsIfdvBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvBackwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsIfdvTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 20), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvTwoWayMin.setDescription('This object contains the minimum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsIfdvTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 21), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvTwoWayMax.setDescription('This object contains the maximum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsIfdvTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsIfdvTwoWayAvg.setDescription('This object contains the average two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayRangeForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 23), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeForwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeForwardMax.setDescription('This object contains the maximum one-way frame delay range in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsFrameDelayRangeForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 24), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeForwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeForwardAvg.setDescription('This object contains the average one-way frame delay range in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsFrameDelayRangeBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 25), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeBackwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeBackwardMax.setDescription('This object contains the maximum one-way frame delay range in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 26), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg.setDescription('This object contains the average one-way frame delay range in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 27), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax.setDescription('This object contains the maximum two-way frame delay range calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 28), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg.setDescription('This object contains the average two-way frame delay range calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmCurrentStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSoamPdusSent.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when mefSoamDmCfgType is dmDmm or dm1DmTx and is undefined if mefSoamDmCfgType is dm1DmRx. It indicates the number of DMM or 1DM SOAM frames transmitted. ')
mefSoamDmCurrentStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 4, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs received in this Measurement Interval. This object indicates the number of DMR and 1DM SOAM frames received. This object applies when mefSoamDmCfgType is dmDmm or dm1DmRx and is undefined if mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmCurrentStatsBinsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 5), )
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsTable.setReference('[MEF SOAM-PM] R7, R15, D9')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsTable.setDescription('This table contains the result bins for the current Measurement Interval in a SOAM Delay Measurement session. Each row in the table represents the current bin statistics for a Delay Measurement session for the defined MEP. This table uses six indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. The fifth index indicates bin type and the sixth indicates the specific bin number. A row in this table is created automatically by the SNMP Agent when the Delay Measurement session is configured and the bin counter value is set to 0. The objects in this table are ignored if mefSoamDmCfgType is 1DmTx. This table applies only if the corresponding bit is set in mefSoamDmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
mefSoamDmCurrentStatsBinsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 5, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinType"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinNumber"))
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsEntry.setDescription('The conceptual row of mefSoamDmCurrentStatsBinsTable')
mefSoamDmCurrentStatsBinsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsCounter.setReference('[MEF SOAM-PM] R66, R67, R100, R101')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsCounter.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsCounter.setDescription('This object contains the count of the number of completed measurements initiated in this Measurement Interval whose value falls within the range specified for this bin (that is, greater than or equal to the measurement boundary for the bin, and (unless the bin is the last bin) less than the measurement boundary for the following bin. ')
mefSoamDmHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6), )
if mibBuilder.loadTexts: mefSoamDmHistoryStatsTable.setReference('[MEF SOAM-PM] R7, R15, R21, D8, R25')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsTable.setDescription('This table contains the results for history Measurement Intervals in a SOAM Delay Measurement session. Rows of this table are created automatically by the SNMP Agent when the Delay Measurement session is running and a Measurement Interval is completed. Each row in the table represents the Measurement Interval history statistics for a Delay Measurement session for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. The fifth index is the Measurement Interval. At least 32 completed Measurement Intervals are to be supported. 96 completed Measurement Intervals are recommended to be supported. If there are at least 32 rows in the table and a new Measurement Interval completes and a new row is to be added to the table, the oldest completed Measurement Interval can be deleted (row deletion). If the measurement interval is other than 15 minutes then a minimum of 8 hours of completed Measurement Intervals are to be supported and 24 hours are recommended to be supported. The objects in this table apply regardless of the value of mefSoamDmCfgType unless otherwise specified in the object description. Backward and two-way statistic objects are undefined if mefSoamDmCfgType is dm1DmRx. Except for mefSoamDmHistoryStatsIndex, mefSoamDmHistoryStatsEndTime, mefSoamDmHistoryStatsElapsedTime and mefSoamDmHistoryStatsSuspect, each object in this table applies only if the corresponding bit is set in mefSoamDmCfgMeasurementEnable. The rows and objects in this table are to be persistent upon reboot or restart of a device. ')
mefSoamDmHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIndex"))
if mibBuilder.loadTexts: mefSoamDmHistoryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsEntry.setDescription('The conceptual row of mefSoamDmHistoryStatsTable')
mefSoamDmHistoryStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIndex.setDescription('The index for the Measurement Interval within this PM session. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused while this session is active until it wraps to zero. The index value keeps increasing up to that time. ')
mefSoamDmHistoryStatsEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsEndTime.setReference('[MEF SOAM-PM] R23, R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsEndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsEndTime.setDescription('The time that the Measurement Interval ended. ')
mefSoamDmHistoryStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsElapsedTime.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsElapsedTime.setDescription('The length of time that the Measurement Interval ran for, in 0.01 seconds. ')
mefSoamDmHistoryStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41, R42')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
mefSoamDmHistoryStatsFrameDelayTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayMin.setDescription('This object contains the minimum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayMax.setDescription('This object contains the maximum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayTwoWayAvg.setDescription('This object contains the average two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 8), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardMin.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardMin.setDescription('This object contains the minimum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsFrameDelayForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardMax.setDescription('This object contains the maximum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsFrameDelayForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayForwardAvg.setDescription('This object contains the average one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsFrameDelayBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardMin.setDescription('This object contains the minimum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardMax.setDescription('This object contains the maximum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayBackwardAvg.setDescription('This object contains the average one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsIfdvForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardMin.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsIfdvForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsIfdvForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvForwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsIfdvBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsIfdvBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsIfdvBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvBackwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsIfdvTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 20), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvTwoWayMin.setDescription('This object contains the minimum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsIfdvTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 21), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvTwoWayMax.setDescription('This object contains the maximum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsIfdvTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsIfdvTwoWayAvg.setDescription('This object contains the average two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayRangeForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 23), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeForwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeForwardMax.setDescription('This object contains the maximum one-way Frame Delay Range in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsFrameDelayRangeForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 24), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeForwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeForwardAvg.setDescription('This object contains the average one-way Frame Delay Range in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsFrameDelayRangeBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 25), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeBackwardMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeBackwardMax.setDescription('This object contains the maximum one-way Frame Delay Range in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 26), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg.setDescription('This object contains the average one-way Frame Delay Range in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 27), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax.setDescription('This object contains the maximum two-way Frame Delay Range calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 28), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg.setDescription('This object contains the average two-way Frame Delay Range calculated by this MEP for this Measurement Interval. The value of this object is undefined when mefSoamDmCfgType is dm1DmTx or dm1DmRx. ')
mefSoamDmHistoryStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSoamPdusSent.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when mefSoamDmCfgType is dmDmm or dm1DmTx and is undefined if mefSoamDmCfgType is dm1DmRx. It indicates the number of DMM or 1DM SOAM frames transmitted. ')
mefSoamDmHistoryStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 6, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs received in this Measurement Interval. This object indicates the number of DMR and 1DM SOAM frames received. This object applies when mefSoamDmCfgType is dmDmm or dm1DmRx and is undefined if mefSoamDmCfgType is dm1DmTx. ')
mefSoamDmHistoryStatsBinsTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 7), )
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsTable.setReference('[MEF SOAM-PM] R7, R15, R21, D8, R66, R67')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsTable.setDescription('This table contains the result bins for the history Measurement Intervals in a SOAM Delay Measurement session. Rows of this table are created automatically by the SNMP Agent when the Delay Measurement session is running and a Measurement Interval is completed. Each row in the table represents the Measurement Interval history statistics for a specific bin in a Delay Measurement session for the defined MEP. This table uses seven indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. The fifth index is the Measurement Interval. The sixth index is the specific bin type. The seventh index is the specific bin number. Rows in this table pertaining to a given Measurement Interval are deleted when (and only when) the corresponding row in the mefSoamDmHistoryStatsTable is deleted. The objects in this table are ignored if mefSoamDmCfgType is 1DmTx. This table applies only if the corresponding bit is set in mefSoamDmCfgMeasurementEnable. The objects in this table need to be persistent upon reboot or restart of a device. ')
mefSoamDmHistoryStatsBinsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 7, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinType"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinNumber"))
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsEntry.setDescription('The conceptual row of mefSoamDmHistoryStatsBinsTable')
mefSoamDmHistoryStatsBinsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsCounter.setReference('[MEF SOAM-PM] R66, R67, R100, R101')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsCounter.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsCounter.setDescription('This object contains the count of the number of completed measurements initiated in this Measurement Interval whose value falls within the range specified for this bin (that is, greater than or equal to the measurement boundary for the bin, and (unless the bin is the last bin) less than the measurement boundary for the following bin. ')
mefSoamLmThresholdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7), )
if mibBuilder.loadTexts: mefSoamLmThresholdCfgTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgTable.setDescription("This table contains the list of Loss Measurement configuration threshold values for LM Performance Monitoring. The main purpose of the threshold configuration table is to configure threshold alarm notifications indicating that a specific performance metric is not being met. Each row in the table represents a Loss Measurement session threshold set for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. The fifth index is the specific threshold set number. Rows in this table are not created automatically. A row is created in this table to set up a threshold set on a configured MEP that has a configured LM session. If two managers try to 'create' the same row at the same time, the first creation would succeed, the second creation attempt would result in an error. The second creation attempt would then need to select a new index value to successfully create a new row. An NE needs to support at least one threshold set for NE SOAM PM compliance. A second threshold set on the NE is desirable. More than two threshold sets can be configured on the NE if supported on the NE. All the objects in the row have a default value that disables the particular threshold measurement. In order to enable a threshold measurement the particular bit in the mefSoamLmThresholdCfgEnable object is to be set to '1' and the selected threshold measurement is to have a threshold value configured. Non-configured threshold measurements are disabled by default. The writable objects in this table need to be persistent upon reboot or restart of a device. ")
mefSoamLmThresholdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgIndex"))
if mibBuilder.loadTexts: mefSoamLmThresholdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgEntry.setDescription('The conceptual row of mefSoamLmThresholdCfgTable.')
mefSoamLmThresholdCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mefSoamLmThresholdCfgIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgIndex.setDescription("The index of the threshold number for the specific LM threshold entry. An index value of '1' needs to be supported. Other index values can also be supported. ")
mefSoamLmThresholdCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 2), Bits().clone(namedValues=NamedValues(("bMefSoamLmMeasuredFlrForwardThreshold", 0), ("bMefSoamLmMaxFlrForwardThreshold", 1), ("bMefSoamLmAvgFlrForwardThreshold", 2), ("bMefSoamLmMeasuredFlrBackwardThreshold", 3), ("bMefSoamLmMaxFlrBackwardThreshold", 4), ("bMefSoamLmAvgFlrBackwardThreshold", 5), ("bMefSoamLmForwardHighLossThreshold", 6), ("bMefSoamLmForwardConsecutiveHighLossThreshold", 7), ("bMefSoamLmBackwardHighLossThreshold", 8), ("bMefSoamLmBackwardConsecutiveHighLossThreshold", 9), ("bMefSoamLmUnavailForwardThreshold", 10), ("bMefSoamLmAvailRatioForwardThreshold", 11), ("bMefSoamLmUnavailBackwardThreshold", 12), ("bMefSoamLmAvailRatioBackwardThreshold", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgEnable.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgEnable.setDescription("A vector of bits that indicates the type of SOAM LM thresholds notifications that are enabled. A bit set to '1' enables the specific SOAM LM threshold notification and when the specific counter is enabled and the threshold is crossed a notification is generated. A bit set to '0' disables the specific SOAM LM threshold notification. If a particular SOAM LM threshold is not supported the BIT value is set to '0'. bMefSoamLmMeasuredFlrForwardThreshold(0) Enables/disables measured frame loss forward ratio threshold notification. The notification is sent immediately when the mefSoamLmMeasuredStatsForwardFlr value is greater than or equal to the threshold value. bMefSoamLmMaxFlrForwardThreshold(1) Enables/disables maximum frame loss forward ratio threshold notification. The notification is sent immediately when the mefSoamLmCurrentStatsForwardMaxFlr value is greater than or equal to threshold value in a Measurement Interval. bMefSoamLmAvgFlrForwardThreshold(2) Enables/disables average frame loss forward ratio threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamLmCurrentStatsForwardAvgFlr value is greater than or equal to the threshold value. bMefSoamLmMeasuredFlrBackwardThreshold(3) Enables/disables measured frame loss backward ratio threshold notification. The notification is sent immediately when the mefSoamLmMeasuredStatsBackwardFlr value is greater than or equal to the threshold value. bMefSoamLmMaxFlrBackwardThreshold(4) Enables/disables maximum frame loss backward ratio threshold notification. The notification is sent immediately when the mefSoamLmCurrentStatsBackwardMaxFlr value is greater than or equal to threshold value in a Measurement Interval. bMefSoamLmAvgFlrBackwardThreshold(5) Enables/disables average frame loss backward ratio threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamLmCurrentStatsBackwardAvgFlr value is greater than or equal to the threshold value. bMefSoamLmForwardHighLossThreshold(6) Enables/disables forward high loss threshold notification. The notification is sent immediately when the mefSoamLmCurrentAvailStatsForwardHighLoss value is greater than or equal to the threshold value in a measurement interval. bMefSoamLmForwardConsecutiveHighLossThreshold(7) Enables/disables forward consecutive high loss threshold notification. The notification is sent immediately when the mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss value is greater than or equal to the threshold value in a measurement interval. bMefSoamLmBackwardHighLossThreshold(8) Enables/disables backward high loss threshold notification. The notification is sent immediately when the mefSoamLmCurrentAvailStatsBackwardHighLoss value is greater than or equal to the threshold value in a measurement interval. bMefSoamLmBackwardConsecutiveHighLossThreshold(9) Enables/disables backward consecutive high loss threshold notification. The notification is sent immediately when the mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss value is greater than or equal to the threshold value in a measurement interval. bMefSoamLmUnavailForwardThreshold(10) Enables/disables unavailable forward threshold notification. The notification is sent immediately when the mefSoamLmCurrentAvailStatsForwardUnavailable value is greater than or equal to threshold value in a Measurement Interval. bMefSoamLmAvailRatioForwardThreshold(11) Enables/disables availability ratio forward threshold notification. The notification is sent immediately when the availability ratio is greater than or equal to threshold value in a Measurement Interval. The availability ratio can be calculated from the values of mefSoamLmCurrentAvailStatsForwardAvailable and mefSoamLmCurrentAvailStatsForwardUnavailable. bMefSoamLmUnavailBackwardThreshold(12) Enables/disables unavailable backward threshold notification. The notification is sent immediately when the mefSoamLmCurrentAvailStatsBackwardUnavailable value is greater than or equal to threshold value in a Measurement Interval. bMefSoamLmAvailRatioBackwardThreshold(13) Enables/disables availability ratio backward threshold notification. The notification is sent immediately when the availability ratio is greater than or equal to threshold value in a Measurement Interval. The availability ratio can be calculated from the values of mefSoamLmCurrentAvailStatsBackwardAvailable and mefSoamLmCurrentAvailStatsBackwardUnavailable. ")
mefSoamLmThresholdCfgMeasuredFlrForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMeasuredFlrForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMeasuredFlrForwardThreshold.setDescription('This object is used to set the measured forward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgMaxFlrForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMaxFlrForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMaxFlrForwardThreshold.setDescription('This object is used to set the maximum forward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgAvgFlrForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgAvgFlrForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgAvgFlrForwardThreshold.setDescription('This object is used to set the average forward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgMeasuredFlrBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMeasuredFlrBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMeasuredFlrBackwardThreshold.setDescription('This object is used to set the measured backward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgMaxFlrBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMaxFlrBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgMaxFlrBackwardThreshold.setDescription('This object is used to set the maximum backward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgAvgFlrBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgAvgFlrBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgAvgFlrBackwardThreshold.setDescription('This object is used to set the average backward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgForwardHighLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 9), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardHighLossThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardHighLossThreshold.setDescription('This object is used to set the forward high loss threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgForwardConsecutiveHighLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 10), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardConsecutiveHighLossThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardConsecutiveHighLossThreshold.setDescription('This object is used to set the consecutive forward high loss threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgBackwardHighLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 11), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardHighLossThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardHighLossThreshold.setDescription('This object is used to set the backward high loss threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgBackwardConsecutiveHighLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 12), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardConsecutiveHighLossThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardConsecutiveHighLossThreshold.setDescription('This object is used to set the consecutive backward high loss threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgForwardUnavailCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 13), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardUnavailCountThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardUnavailCountThreshold.setDescription('This object is used to set the forward unavailability threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgForwardAvailRatioThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardAvailRatioThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgForwardAvailRatioThreshold.setDescription('This object is used to set the forward availability/total time ratio threshold value that will be used to determine if a threshold notification is generated if the ratio drops below the configured value. The ratio value is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00) Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmThresholdCfgBackwardUnavailCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 15), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardUnavailCountThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardUnavailCountThreshold.setDescription('This object is used to set the backward unavailability threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamLmThresholdCfgBackwardAvailRatioThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardAvailRatioThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgBackwardAvailRatioThreshold.setDescription('This object is used to set the backward availability/total time ratio threshold value that will be used to determine if a threshold notification is generated if the ratio drops below the configured value. The ratio value is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00) Units are in milli-percent, where 1 indicates 0.001 percent. ')
mefSoamLmThresholdCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamLmThresholdCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active. All columns are to have a valid value before a row can be activated. ')
mefSoamDmThresholdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8), )
if mibBuilder.loadTexts: mefSoamDmThresholdCfgTable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgTable.setDescription("This table contains the list of Delay Measurement threshold configuration values for DM Performance Monitoring. The main purpose of the threshold configuration table is to configure threshold alarm notifications indicating that a specific performance metric is not being met. Each row in the table represents a Delay Measurement session threshold set for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. The fifth index is the specific threshold set number. Rows in this table are not created automatically. A row is created in this table to set up a threshold set on a configured MEP that has a configured DM session. An NE needs to support at least one threshold set for NE SOAM PM compliance. A second threshold set on the NE is desirable. More than two threshold sets on the NE can be configured if supported on the NE. All the objects in the row have a default value that disables the particular threshold measurement. In order to enable a threshold measurement the particular bit in the mefSoamDmThresholdCfgEnable object is to be set to '1' and the selected threshold measurement is to have a threshold value configured. Non-configured threshold measurements are disabled by default. The writable objects in this table need to be persistent upon reboot or restart of a device. ")
mefSoamDmThresholdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmCfgIndex"), (0, "MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgIndex"))
if mibBuilder.loadTexts: mefSoamDmThresholdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgEntry.setDescription('The conceptual row of mefSoamDmThresholdCfgTable.')
mefSoamDmThresholdCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mefSoamDmThresholdCfgIndex.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgIndex.setDescription("The index of the threshold number for the specific DM threshold entry. An index value of '1' is to be supported. Other index values can be supported. ")
mefSoamDmThresholdCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 2), Bits().clone(namedValues=NamedValues(("bMefSoamDmMeasuredFrameDelayTwoWayThreshold", 0), ("bMefSoamDmMaxFrameDelayTwoWayThreshold", 1), ("bMefSoamDmAvgFrameDelayTwoWayThreshold", 2), ("bMefSoamDmMeasuredIfdvTwoWayThreshold", 3), ("bMefSoamDmMaxIfdvTwoWayThreshold", 4), ("bMefSoamDmAvgIfdvTwoWayThreshold", 5), ("bMefSoamDmMaxFrameDelayRangeTwoWayThreshold", 6), ("bMefSoamDmAvgFrameDelayRangeTwoWayThreshold", 7), ("bMefSoamDmMeasuredFrameDelayForwardThreshold", 8), ("bMefSoamDmMaxFrameDelayForwardThreshold", 9), ("bMefSoamDmAvgFrameDelayForwardThreshold", 10), ("bMefSoamDmMeasuredIfdvForwardThreshold", 11), ("bMefSoamDmMaxIfdvForwardThreshold", 12), ("bMefSoamDmAvgIfdvForwardThreshold", 13), ("bMefSoamDmMaxFrameDelayRangeForwardThreshold", 14), ("bMefSoamDmAvgFrameDelayRangeForwardThreshold", 15), ("bMefSoamDmMeasuredFrameDelayBackwardThreshold", 16), ("bMefSoamDmMaxFrameDelayBackwardThreshold", 17), ("bMefSoamDmAvgFrameDelayBackwardThreshold", 18), ("bMefSoamDmMeasuredIfdvBackwardThreshold", 19), ("bMefSoamDmMaxIfdvBackwardThreshold", 20), ("bMefSoamDmAvgIfdvBackwardThreshold", 21), ("bMefSoamDmMaxFrameDelayRangeBackwardThreshold", 22), ("bMefSoamDmAvgFrameDelayRangeBackwardThreshold", 23)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgEnable.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgEnable.setDescription("A vector of bits that indicates the type of SOAM DM threshold notifications that are enabled. A bit set to '1' enables the specific SOAM DM threshold notification and when the specific counter is enabled and the threshold is crossed a notification is generated. A bit set to '0' disables the specific SOAM DM threshold notification. If a particular SOAM DM threshold is not supported the BIT value is set to '0'. bMefSoamDmMeasuredFrameDelayTwoWayThreshold(0) Enables/disables measured frame two-way delay threshold notification. The notification is sent immediately when the mefSoamDmMeasuredStatsFrameDelayTwoWay value is greater than or equal to threshold value. bMefSoamDmMaxFrameDelayTwoWayThreshold(1) Enables/disables maximum frame two-way delay threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsFrameDelayTwoWayMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgFrameDelayTwoWayThreshold(2) Enables/disables average frame two-way delay threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsFrameDelayTwoWayAvg value is greater than or equal to the threshold value. bMefSoamDmMeasuredIfdvTwoWayThreshold(3) Enables/disables measured frame IFDV two-way threshold notification. The notification is sent immediately when the mefSoamDmMeasuredStatsIfdvTwoWay value is greater than or equal to threshold value. bMefSoamDmMaxIfdvTwoWayThreshold(4) Enables/disables maximum frame IFDV two-way threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsIfdvTwoWayMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgIfdvTwoWayThreshold(5) Enables/disables average frame IFDV two-way threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsIfdvTwoWayAvg value is greater than or equal to the threshold value. bMefSoamDmMaxFrameDelayRangeTwoWayThreshold(6) Enables/disables maximum Frame Delay Range two-way threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgFrameDelayRangeTwoWayThreshold(7) Enables/disables average Frame Delay Range two-way threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg value is greater than or equal to the threshold value. bMefSoamDmMeasuredFrameDelayForwardThreshold(8) Enables/disables measured forward frame delay threshold notification. The notification is sent immediately when the mefSoamDmMeasuredStatsFrameDelayForward value is greater than or equal to threshold value. bMefSoamDmMaxFrameDelayForwardThreshold(9) Enables/disables maximum forward frame delay threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsFrameDelayForwardMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgFrameDelayForwardThreshold(10) Enables/disables average forward frame delay threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsFrameDelayForwardAvg value is greater than or equal to the threshold value. bMefSoamDmMeasuredIfdvForwardThreshold(11) Enables/disables measured frame IFDV forward threshold notification. The notification is sent immediately when the mefSoamDmMeasuredStatsIfdvForward value is greater than or equal to threshold value. bMefSoamDmMaxIfdvForwardThreshold(12) Enables/disables maximum frame IFDV forward threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsIfdvForwardMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgIfdvForwardThreshold(13) Enables/disables average frame IFDV forward threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsIfdvForwardAvg value is greater than or equal to the threshold value. bMefSoamDmMaxFrameDelayRangeForwardThreshold(14) Enables/disables maximum Frame Delay Range forward threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsFrameDelayRangeForwardMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgFrameDelayRangeForwardThreshold(15) Enables/disables average Frame Delay Range forward threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsFrameDelayRangeForwardAvg value is greater than or equal to the threshold value. bMefSoamDmMeasuredFrameDelayBackwardThreshold(16) Enables/disables measured backward frame delay threshold notification. The notification is sent immediately when the mefSoamDmMeasuredStatsFrameDelayBackward value is greater than or equal to threshold value. bMefSoamDmMaxFrameDelayBackwardThreshold(17) Enables/disables maximum backward frame delay threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsFrameDelayBackwardMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgFrameDelayBackwardThreshold(18) Enables/disables average backward frame delay threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsFrameDelayBackwardAvg value is greater than or equal to the threshold value. bMefSoamDmMeasuredIfdvBackwardThreshold(19) Enables/disables measured frame IFDV backward threshold notification. The notification is sent immediately when the mefSoamDmMeasuredStatsIfdvBackward value is greater than or equal to threshold value. bMefSoamDmMaxIfdvBackwardThreshold(20) Enables/disables maximum frame IFDV backward threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsIfdvBackwardMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgIfdvBackwardThreshold(21) Enables/disables average frame IFDV backward threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsIfdvBackwardAvg value is greater than or equal to the threshold value. bMefSoamDmMaxFrameDelayRangeBackwardThreshold(22) Enables/disables maximum Frame Delay Range backward threshold notification. The notification is sent immediately when the mefSoamDmCurrentStatsFrameDelayRangeBackwardMax value is greater than or equal to threshold value in a Measurement Interval. bMefSoamDmAvgFrameDelayRangeBackwardThreshold(23) Enables/disables average Frame Delay Range backward threshold notification. The notification is sent when at the end of a Measurement Interval if the mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg value is greater than or equal to the threshold value. ")
mefSoamDmThresholdCfgMeasuredFrameDelayTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 3), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredFrameDelayTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredFrameDelayTwoWayThreshold.setDescription('This object is used to set the measurement two-way delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxFrameDelayTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 4), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayTwoWayThreshold.setDescription('This object is used to set the maximum two-way delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 5), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold.setDescription('This object is used to set the average two-way delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMeasuredIfdvTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 6), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredIfdvTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredIfdvTwoWayThreshold.setDescription('This object is used to set the measurement two-way IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxIfdvTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 7), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxIfdvTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxIfdvTwoWayThreshold.setDescription('This object is used to set the maximum two-way IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgIfdvTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 8), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgIfdvTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgIfdvTwoWayThreshold.setDescription('This object is used to set the average two-way IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxFrameDelayRangeTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 9), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayRangeTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayRangeTwoWayThreshold.setDescription('This object is used to set the maximum two-way Frame Delay Range threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgFrameDelayRangeTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 10), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayRangeTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayRangeTwoWayThreshold.setDescription('This object is used to set the average two-way Frame Delay Range threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMeasuredFrameDelayForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 11), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredFrameDelayForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredFrameDelayForwardThreshold.setDescription('This object is used to set the measurement forward delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxFrameDelayForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 12), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayForwardThreshold.setDescription('This object is used to set the maximum forward delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgFrameDelayForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 13), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayForwardThreshold.setDescription('This object is used to set the average forward delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMeasuredIfdvForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 14), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredIfdvForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredIfdvForwardThreshold.setDescription('This object is used to set the measurement IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxIfdvForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 15), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxIfdvForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxIfdvForwardThreshold.setDescription('This object is used to set the maximum IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgIfdvForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 16), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgIfdvForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgIfdvForwardThreshold.setDescription('This object is used to set the average IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxFrameDelayRangeForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 17), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayRangeForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayRangeForwardThreshold.setDescription('This object is used to set the maximum Frame Delay Range threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgFrameDelayRangeForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 18), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayRangeForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayRangeForwardThreshold.setDescription('This object is used to set the average Frame Delay Range threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMeasuredFrameDelayBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 19), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredFrameDelayBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredFrameDelayBackwardThreshold.setDescription('This object is used to set the measurement backward delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxFrameDelayBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 20), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayBackwardThreshold.setDescription('This object is used to set the maximum backward delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgFrameDelayBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 21), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayBackwardThreshold.setDescription('This object is used to set the average backward delay threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMeasuredIfdvBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 22), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredIfdvBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMeasuredIfdvBackwardThreshold.setDescription('This object is used to set the measurement backward IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxIfdvBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 23), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxIfdvBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxIfdvBackwardThreshold.setDescription('This object is used to set the maximum backward IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgIfdvBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 24), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgIfdvBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgIfdvBackwardThreshold.setDescription('This object is used to set the average backward IFDV threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgMaxFrameDelayRangeBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 25), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayRangeBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgMaxFrameDelayRangeBackwardThreshold.setDescription('This object is used to set the maximum backward Frame Delay Range threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgAvgFrameDelayRangeBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 26), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayRangeBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgAvgFrameDelayRangeBackwardThreshold.setDescription('This object is used to set the average backward Frame Delay Range threshold value that will be used to determine if a threshold notification is generated. ')
mefSoamDmThresholdCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 3, 8, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mefSoamDmThresholdCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active. All columns are to have a valid value before a row can be activated. ')
mefSoamPmNotificationCfgAlarmInterval = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(5)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mefSoamPmNotificationCfgAlarmInterval.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationCfgAlarmInterval.setDescription('A value indicating the shortest time interval in seconds between the generation of the same notification type per PM session to the list of notification destinations. An agent generates the first notification of given type for a given PM session immediately. An agent is not to generate a second specific notification of the same type for the same MEP for the same session until the time interval has expired. A value of zero indicates that all notifications are sent immediately upon detection of the condition. ')
mefSoamPmNotificationCfgAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 4, 2), Bits().clone(namedValues=NamedValues(("bAvailabilityChangeAlarm", 0), ("bLmSessionStartStopAlarm", 1), ("bDmSessionStartStopAlarm", 2), ("bPmThresholdAboveAlarm", 3), ("bPmThresholdSetClearAlarm", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mefSoamPmNotificationCfgAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationCfgAlarmEnable.setDescription("A vector of bits that indicates whether a specific notification is enabled. A bit set to '1' enables the specific notification generation. A bit set to '0' disables the specific notification. If a particular alarm is not supported the BIT value of the enable/disable is set to '0'. bAvailabilityChangeAlarm(0) enables/disables mefSoamAvailabilityChangeAlarm bLmSessionStartStopAlarm(1) enables/disables mefSoamLmSessionStartStopAlarm bDmSessionStartStopAlarm(2) enables/disables mefSoamDmSessionStartStopAlarm bPmThresholdAboveAlarm(3) enables/disables mefSoamPmThresholdAboveAlarm bPmThresholdSetClearAlarm(4) enables/disables mefSoamPmThresholdSetClearAlarm ")
mefSoamPmNotificationObjDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjDateAndTime.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjDateAndTime.setDescription('This object contains the time and date at the time that the notification event is detected, not the time of the notification generation. This object is used only for notifications. The mechanism to set and keep current the date and time is not specified. ')
mefSoamPmNotificationObjThresholdId = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjThresholdId.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjThresholdId.setDescription('The Object Identifier of the object that caused the generation of the notification from the mefSoamLmThresholdEntry or mefSoamDmThresholdEntry. This object is only used for the notification. ')
mefSoamPmNotificationObjThresholdConfig = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjThresholdConfig.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjThresholdConfig.setDescription('The configured threshold value of the object that caused the generation of the notification. This object is only used for the notification. ')
mefSoamPmNotificationObjThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjThresholdValue.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjThresholdValue.setDescription('The measured value of the object at the time of the generation of the Notification, from the mefSoamLmMeasuredStatsTable, mefSoamLmCurrentStatsTable, mefSoamLmCurrentAvailStatsTable, mefSoamDmMeasuredStatsTable or mefSoamDmCurrentStatsTable. This object is only used for the notification. ')
mefSoamPmNotificationObjSuspect = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 5), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjSuspect.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjSuspect.setDescription('The suspect flag for the current Measurement Interval in which the notification was generated from the mefSoamLmCurrentStatsTable, mefSoamLmCurrentAvailStatsTable, or mefSoamDmCurrentStatsTable. This object is only used for the notification. ')
mefSoamPmNotificationObjCrossingType = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aboveAlarm", 1), ("setAlarm", 2), ("clearAlarm", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjCrossingType.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjCrossingType.setDescription('The Notification Crossing Type of the object that caused the generation of the notification from the mefSoamLmThresholdEntry or mefSoamDmThresholdEntry. aboveAlarm(1) indicates that the crossing type alarm was an above threshold setAlarm(2) indicates that the crossing type alarm was a set threshold clearAlarm(3) indicates that the crossing type alarm was a clear threshold This object is only used for the notification. ')
mefSoamPmNotificationObjDestinationMep = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjDestinationMep.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjDestinationMep.setDescription('The MAC address of the Destination MEP associated the notification found in either the mefSoamDmCfgTable or mefSoamLmCfgTable. This object is only used for the notification. ')
mefSoamPmNotificationObjPriority = MibScalar((1, 3, 6, 1, 4, 1, 15007, 1, 3, 1, 5, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mefSoamPmNotificationObjPriority.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjPriority.setDescription('The CoS priority of the associated notification found in either the mefSoamDmCfgTable or mefSoamLmCfgTable. This object is only used for the notification. ')
mefSoamAvailabilityChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 15007, 1, 3, 0, 1)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailForwardStatus"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailBackwardStatus"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailForwardLastTransitionTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardAvailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardUnavailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardAvailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardUnavailable"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDestinationMep"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjPriority"))
if mibBuilder.loadTexts: mefSoamAvailabilityChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: mefSoamAvailabilityChangeAlarm.setDescription("An mefSoamAvailabilityChangeAlarm notification is sent when the state of mefSoamLmMeasuredStatsAvailForwardStatus or mefSoamLmMeasuredStatsAvailBackwardStatus changes. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the PM session reporting the change by the indices in the OID mefSoamLmMeasuredStatsAvailForwardLastTransitionTime, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and mefSoamLmCfgIndex. An agent is not to generate more than one mefSoamAvailabilityChangeAlarm 'notification-event' in a given time interval per PM session as specified by the mefSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional availability state changes occur within the mefSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any availability state changes occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
if mibBuilder.loadTexts: mefSoamAvailabilityChangeAlarm.setReference('[MEF SOAM-PM] R83, R84')
mefSoamLmSessionStartStopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 15007, 1, 3, 0, 2)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCfgSessionStatus"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDestinationMep"))
if mibBuilder.loadTexts: mefSoamLmSessionStartStopAlarm.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmSessionStartStopAlarm.setDescription("An mefSoamLmSessionStartStopAlarm notification is sent when the state of mefSoamLmCfgSessionStatus changes. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the individual PM session reporting the start/stop by the indices in the OID mefSoamLmCfgSessionStatus, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and mefSoamLmCfgIndex. An agent is not to generate more than one mefSoamLmSessionStartStopAlarm 'notification-event' in a given time interval per LM session as specified by the mefSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional operational state changes occur within the mefSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are be suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any operational state changes occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
mefSoamDmSessionStartStopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 15007, 1, 3, 0, 3)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCfgSessionStatus"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDestinationMep"))
if mibBuilder.loadTexts: mefSoamDmSessionStartStopAlarm.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmSessionStartStopAlarm.setDescription("An mefSoamDmSessionStartStopAlarm notification is sent when the state of mefSoamDmCfgSessionStatus changes. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the individual PM session reporting the start/stop by the indices in the OID mefSoamDmCfgSessionStatus, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and mefSoamDmCfgIndex. An agent is not to generate more than one mefSoamDmSessionStartStopAlarm 'notification-event' in a given time interval per DM session as specified by mefSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional operational state changes occur within the mefSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any operational state changes occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
mefSoamPmThresholdCrossingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 15007, 1, 3, 0, 4)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjCrossingType"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjThresholdId"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjThresholdConfig"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjThresholdValue"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDestinationMep"))
if mibBuilder.loadTexts: mefSoamPmThresholdCrossingAlarm.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmThresholdCrossingAlarm.setDescription("An mefSoamPmThresholdCrossingAlarm notification is sent if the following conditions are met for a particular type. For an aboveAlarm five conditions need to be met: a) measurement of the parameter is enabled via mefSoamLmCfgMeasurementEnable for a LM crossing or mefSoamDmCfgMeasurementEnable for a DM crossing; and b) the parameter threshold is configured in the mefSoamLmThresholdCfgTable or mefSoamDmThresholdCfgTable; and c) the threshold crossing type of bPmThresholdAboveAlarm is enabled; and d) the measured value of the parameter exceeds the value configured in the mefSoamLmThresholdCfgTable for a LM crossing entry or mefSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdAboveAlarm; and e) no previous mefSoamPmThresholdCrossingAlarm notifications with type aboveAlarm have been sent relating to the same threshold in the mefSoamLmThresholdCfgTable or mefSoamDmThresholdCfgTable and the same parameter, during this Measurement Interval. For a setAlarm five conditions need to be met: a) measurement of the parameter is enabled via mefSoamLmCfgMeasurementEnable for a LM crossing or mefSoamDmCfgMeasurementEnable for a DM crossing; and b) the parameter threshold is configured in the mefSoamLmThresholdCfgTable or mefSoamDmThresholdCfgTable; and c) the threshold crossing type of bPmThresholdSetClearAlarm is enabled; and d) the measured value of the parameter exceeds the value configured in the mefSoamLmThresholdCfgTable for a LM crossing entry or mefSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm for the Measurement Interval; and e) the previous measured value did not exceed the value configured in the mefSoamLmThresholdCfgTable for a LM crossing entry or mefSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm. For a clearAlarm five conditions need to be met: a) measurement of the parameter is enabled via mefSoamLmCfgMeasurementEnable for a LM crossing or mefSoamDmCfgMeasurementEnable for a DM crossing; and b) the parameter threshold is configured in the mefSoamLmThresholdCfgTable or mefSoamDmThresholdCfgTable; and c) the threshold crossing type of bPmThresholdSetClearAlarm is enabled; and d) the measured value of the parameter did not exceed the value configured in the mefSoamLmThresholdCfgTable for a LM crossing entry or mefSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm for the Measurement Interval; and e) the previous measured value did exceed the value configured in the mefSoamLmThresholdCfgTable for a LM crossing entry or mefSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm. In the case of thresholds applied to a maximum or average measurement counter, the previous measured value is the value of the counter at the end of the preceding Measurement Interval. In the case of thresholds applied to the last measured value, it is the previous measured value. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the LM or DM session reporting the threshold crossing by the indices in the mefSoamPmNotificationCfgThresholdId object, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and the mefSoamLmCfgIndex or mefSoamDmCfgIndex. An agent is not to generate more than one mefSoamLmThresholdCrossingAlarm 'notification-event' of a given type per LM or DM session as specified by mefSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional threshold crossing events occur within the mefSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any threshold crossing events occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
mefSoamPmMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 1))
mefSoamPmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2))
mefSoamPmMepMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 1)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmMepOperNextIndex"), ("MEF-SOAM-PM-MIB", "mefSoamPmMepSlmSingleEndedResponder"), ("MEF-SOAM-PM-MIB", "mefSoamPmMepDmSingleEndedResponder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmMepMandatoryGroup = mefSoamPmMepMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepMandatoryGroup.setDescription('Mandatory objects for the Service OAM PM MEP group.')
mefSoamPmMepOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 2)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmMepLmSingleEndedResponder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmMepOptionalGroup = mefSoamPmMepOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMepOptionalGroup.setDescription('Optional objects for the Service OAM PM MEP group.')
mefSoamLmCfgMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 3)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCfgType"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgEnabled"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgMeasurementEnable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgMessagePeriod"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgPriority"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgFrameSize"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgDataPattern"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgMeasurementInterval"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgNumIntervalsStored"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgDestMacAddress"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgDestMepId"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgDestIsMepId"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgStartTimeType"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgFixedStartDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgRelativeStartTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgStopTimeType"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgFixedStopDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgRelativeStopTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgRepetitionTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAvailabilityMeasurementInterval"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAvailabilityFlrThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAvailabilityNumConsecutiveIntervals"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgSessionType"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgSessionStatus"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgHistoryClear"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmCfgMandatoryGroup = mefSoamLmCfgMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgMandatoryGroup.setDescription('Mandatory objects for the Service OAM LM Configuration group.')
mefSoamLmCfgOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 4)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCfgVersion"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgTestTlvIncluded"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgTestTlvPattern"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAlignMeasurementIntervals"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAvailabilityNumConsecutiveHighFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgAlignMeasurementOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmCfgOptionalGroup = mefSoamLmCfgOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCfgOptionalGroup.setDescription('Optional objects for the Service OAM LM Configuration group.')
mefSoamLmMeasuredStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 5)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailForwardLastTransitionTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmMeasuredStatsMandatoryGroup = mefSoamLmMeasuredStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM LM Measured Stats group.')
mefSoamLmMeasuredStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 6)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsForwardFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsBackwardFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailForwardStatus"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsAvailBackwardStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmMeasuredStatsOptionalGroup = mefSoamLmMeasuredStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmMeasuredStatsOptionalGroup.setDescription('Optional objects for the Service OAM LM Measured Stats group.')
mefSoamLmCurrentAvailStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 7)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsIndex"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsStartTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsElapsedTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardAvailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardAvailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardUnavailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardUnavailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmCurrentAvailStatsMandatoryGroup = mefSoamLmCurrentAvailStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM LM Current Availability group.')
mefSoamLmCurrentAvailStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 8)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsForwardAvgFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsBackwardAvgFlr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmCurrentAvailStatsOptionalGroup = mefSoamLmCurrentAvailStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentAvailStatsOptionalGroup.setDescription('Optional objects for the Service OAM LM Current Availabilty Stats group.')
mefSoamLmCurrentStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 9)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsIndex"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsStartTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsElapsedTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsSoamPdusSent"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsSoamPdusReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmCurrentStatsMandatoryGroup = mefSoamLmCurrentStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM LM current statistics group.')
mefSoamLmCurrentStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 10)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsForwardTransmittedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsForwardReceivedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsBackwardTransmittedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsBackwardReceivedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsForwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsForwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsForwardAvgFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsBackwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsBackwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsBackwardAvgFlr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmCurrentStatsOptionalGroup = mefSoamLmCurrentStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmCurrentStatsOptionalGroup.setDescription('Optional objects for the Service OAM LM Current Stats group.')
mefSoamLmHistoryAvailStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 11)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsEndTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsElapsedTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardAvailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardAvailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardUnavailable"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardUnavailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmHistoryAvailStatsMandatoryGroup = mefSoamLmHistoryAvailStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM Availability LM history statistics group. ')
mefSoamLmHistoryAvailStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 12)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsForwardAvgFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsBackwardAvgFlr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmHistoryAvailStatsOptionalGroup = mefSoamLmHistoryAvailStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryAvailStatsOptionalGroup.setDescription('Optional objects for the Service OAM Availability LM history statistics group. ')
mefSoamLmHistoryStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 13)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsEndTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsElapsedTime"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsSoamPdusSent"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsSoamPdusReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmHistoryStatsMandatoryGroup = mefSoamLmHistoryStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM LM history statistics group.')
mefSoamLmHistoryStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 14)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsForwardTransmittedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsForwardReceivedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsBackwardTransmittedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsBackwardReceivedFrames"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsForwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsForwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsForwardAvgFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsBackwardMinFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsBackwardMaxFlr"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsBackwardAvgFlr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmHistoryStatsOptionalGroup = mefSoamLmHistoryStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmHistoryStatsOptionalGroup.setDescription('Optional objects for the Service OAM LM History Stats group.')
mefSoamDmCfgMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 15)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCfgType"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgEnabled"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasurementEnable"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgMessagePeriod"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgPriority"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgFrameSize"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgDataPattern"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasurementInterval"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgNumIntervalsStored"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgDestMacAddress"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgDestMepId"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgDestIsMepId"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgStartTimeType"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgFixedStartDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgRelativeStartTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgStopTimeType"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgFixedStopDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgRelativeStopTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgRepetitionTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgAlignMeasurementIntervals"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgNumMeasBinsPerFrameDelayInterval"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgSessionType"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgSessionStatus"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgHistoryClear"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmCfgMandatoryGroup = mefSoamDmCfgMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM configuration group.')
mefSoamDmCfgOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 16)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCfgVersion"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgTestTlvIncluded"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgTestTlvPattern"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgSourceMacAddress"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgAlignMeasurementOffset"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgInterFrameDelayVariationSelectionOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmCfgOptionalGroup = mefSoamDmCfgOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgOptionalGroup.setDescription('Optional objects for the Service OAM DM Configuration group.')
mefSoamDmCfgMeasBinMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 17)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinLowerBound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmCfgMeasBinMandatoryGroup = mefSoamDmCfgMeasBinMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCfgMeasBinMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM measurement bin configuration group.')
mefSoamDmMeasuredStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 18)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsFrameDelayTwoWay"), ("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsFrameDelayForward"), ("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsFrameDelayBackward"), ("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsIfdvTwoWay"), ("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsIfdvForward"), ("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsIfdvBackward"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmMeasuredStatsOptionalGroup = mefSoamDmMeasuredStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmMeasuredStatsOptionalGroup.setDescription('Optional objects for the Service OAM DM Measured Stats group.')
mefSoamDmCurrentStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 19)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIndex"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsStartTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsElapsedTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayTwoWayMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayTwoWayMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayTwoWayAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayForwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayForwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayForwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayBackwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayBackwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayBackwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvForwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvForwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvForwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvBackwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvBackwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvBackwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayRangeForwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayRangeForwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayRangeBackwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsSoamPdusSent"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsSoamPdusReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmCurrentStatsMandatoryGroup = mefSoamDmCurrentStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM current statistics group.')
mefSoamDmCurrentStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 20)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvTwoWayMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvTwoWayMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsIfdvTwoWayAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmCurrentStatsOptionalGroup = mefSoamDmCurrentStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsOptionalGroup.setDescription('Optional objects for the Service OAM DM current statistics group.')
mefSoamDmCurrentStatsBinsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 21)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsBinsCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmCurrentStatsBinsMandatoryGroup = mefSoamDmCurrentStatsBinsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmCurrentStatsBinsMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM current statistics bin group.')
mefSoamDmHistoryStatsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 22)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsEndTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsElapsedTime"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayTwoWayMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayTwoWayMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayTwoWayAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayForwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayForwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayForwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayBackwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayBackwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayBackwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvForwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvForwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvForwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvBackwardMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvBackwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvBackwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayRangeForwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayRangeForwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayRangeBackwardMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsSoamPdusSent"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsSoamPdusReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmHistoryStatsMandatoryGroup = mefSoamDmHistoryStatsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM history statistics group.')
mefSoamDmHistoryStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 23)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvTwoWayMin"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvTwoWayMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsIfdvTwoWayAvg"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmHistoryStatsOptionalGroup = mefSoamDmHistoryStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsOptionalGroup.setDescription('Optional objects for the Service OAM DM history statistics group.')
mefSoamDmHistoryStatsBinsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 24)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsBinsCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmHistoryStatsBinsMandatoryGroup = mefSoamDmHistoryStatsBinsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmHistoryStatsBinsMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM history statistics bin group.')
mefSoamLmThresholdMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 25)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgEnable"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgMaxFlrForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgAvgFlrForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgMaxFlrBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgAvgFlrBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgForwardUnavailCountThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgForwardAvailRatioThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgBackwardUnavailCountThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgBackwardAvailRatioThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmThresholdMandatoryGroup = mefSoamLmThresholdMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdMandatoryGroup.setDescription('Mandatory objects for the Service OAM LM threshold group.')
mefSoamLmThresholdOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 26)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgForwardHighLossThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgForwardConsecutiveHighLossThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgBackwardHighLossThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgBackwardConsecutiveHighLossThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgMeasuredFlrForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdCfgMeasuredFlrBackwardThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamLmThresholdOptionalGroup = mefSoamLmThresholdOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamLmThresholdOptionalGroup.setDescription('Optional objects for the Service OAM LM Threshold group.')
mefSoamDmThresholdMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 27)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgEnable"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxFrameDelayTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxFrameDelayForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgFrameDelayForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxIfdvForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgIfdvForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxFrameDelayRangeForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgFrameDelayRangeForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxFrameDelayBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgFrameDelayBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxIfdvBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgIfdvBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxFrameDelayRangeBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgFrameDelayRangeBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmThresholdMandatoryGroup = mefSoamDmThresholdMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdMandatoryGroup.setDescription('Mandatory objects for the Service OAM DM threshold group.')
mefSoamDmThresholdOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 28)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMeasuredIfdvTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMeasuredFrameDelayTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMeasuredFrameDelayForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMeasuredIfdvForwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMeasuredFrameDelayBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMeasuredIfdvBackwardThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxIfdvTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgIfdvTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgMaxFrameDelayRangeTwoWayThreshold"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdCfgAvgFrameDelayRangeTwoWayThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamDmThresholdOptionalGroup = mefSoamDmThresholdOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamDmThresholdOptionalGroup.setDescription('Optional objects for the Service OAM DM threshold group.')
mefSoamPmNotificationsMandatoryGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 29)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamAvailabilityChangeAlarm"), ("MEF-SOAM-PM-MIB", "mefSoamLmSessionStartStopAlarm"), ("MEF-SOAM-PM-MIB", "mefSoamDmSessionStartStopAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmNotificationsMandatoryGroup = mefSoamPmNotificationsMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationsMandatoryGroup.setDescription('Mandatory notifications for the SOAM PM Notifications group.')
mefSoamPmNotificationsOptionalGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 30)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmThresholdCrossingAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmNotificationsOptionalGroup = mefSoamPmNotificationsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationsOptionalGroup.setDescription('Optional objects for the Service OAM PM Notifications group.')
mefSoamPmNotificationCfgMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 31)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmNotificationCfgAlarmInterval"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationCfgAlarmEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmNotificationCfgMandatoryGroup = mefSoamPmNotificationCfgMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationCfgMandatoryGroup.setDescription('Mandatory objects for the SOAM PM Notification Configuration group.')
mefSoamPmNotificationObjMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 32)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDateAndTime"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjSuspect"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjDestinationMep"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmNotificationObjMandatoryGroup = mefSoamPmNotificationObjMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjMandatoryGroup.setDescription('Mandatory objects for the SOAM PM Notification Object group.')
mefSoamPmNotificationObjOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 2, 33)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjThresholdConfig"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjThresholdId"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjThresholdValue"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjCrossingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmNotificationObjOptionalGroup = mefSoamPmNotificationObjOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmNotificationObjOptionalGroup.setDescription('Optional objects for the Service OAM PM Notifications group.')
mefSoamPmMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 15007, 1, 3, 2, 1, 1)).setObjects(("MEF-SOAM-PM-MIB", "mefSoamPmMepMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgMeasBinMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsBinsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsBinsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationsMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationCfgMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjMandatoryGroup"), ("MEF-SOAM-PM-MIB", "mefSoamPmMepOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmCfgOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmMeasuredStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentAvailStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmCurrentStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryAvailStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmHistoryStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmCfgOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmMeasuredStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmCurrentStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmHistoryStatsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamLmThresholdOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamDmThresholdOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationsOptionalGroup"), ("MEF-SOAM-PM-MIB", "mefSoamPmNotificationObjOptionalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mefSoamPmMibCompliance = mefSoamPmMibCompliance.setStatus('current')
if mibBuilder.loadTexts: mefSoamPmMibCompliance.setDescription('The compliance statement for the Ethernet Service OAM PM MIB.')
mibBuilder.exportSymbols("MEF-SOAM-PM-MIB", mefSoamDmCurrentStatsMandatoryGroup=mefSoamDmCurrentStatsMandatoryGroup, mefSoamDmThresholdCfgMaxFrameDelayRangeBackwardThreshold=mefSoamDmThresholdCfgMaxFrameDelayRangeBackwardThreshold, mefSoamDmCfgOptionalGroup=mefSoamDmCfgOptionalGroup, mefSoamLmCfgAlignMeasurementOffset=mefSoamLmCfgAlignMeasurementOffset, mefSoamLmHistoryAvailStatsSuspect=mefSoamLmHistoryAvailStatsSuspect, mefSoamDmCurrentStatsOptionalGroup=mefSoamDmCurrentStatsOptionalGroup, mefSoamLmMeasuredStatsMandatoryGroup=mefSoamLmMeasuredStatsMandatoryGroup, mefSoamPmNotificationObjOptionalGroup=mefSoamPmNotificationObjOptionalGroup, mefSoamDmThresholdCfgMaxIfdvForwardThreshold=mefSoamDmThresholdCfgMaxIfdvForwardThreshold, mefSoamDmCurrentStatsIfdvTwoWayAvg=mefSoamDmCurrentStatsIfdvTwoWayAvg, mefSoamLmHistoryStatsEntry=mefSoamLmHistoryStatsEntry, mefSoamLmCurrentAvailStatsElapsedTime=mefSoamLmCurrentAvailStatsElapsedTime, mefSoamDmThresholdCfgEnable=mefSoamDmThresholdCfgEnable, mefSoamLmCfgRepetitionTime=mefSoamLmCfgRepetitionTime, mefSoamLmHistoryStatsElapsedTime=mefSoamLmHistoryStatsElapsedTime, mefSoamLmCfgRowStatus=mefSoamLmCfgRowStatus, mefSoamDmThresholdCfgMaxFrameDelayRangeForwardThreshold=mefSoamDmThresholdCfgMaxFrameDelayRangeForwardThreshold, mefSoamLmCfgFrameSize=mefSoamLmCfgFrameSize, mefSoamLmCurrentStatsIndex=mefSoamLmCurrentStatsIndex, mefSoamLmHistoryAvailStatsIndex=mefSoamLmHistoryAvailStatsIndex, mefSoamLmCfgDataPattern=mefSoamLmCfgDataPattern, mefSoamLmCurrentAvailStatsIndex=mefSoamLmCurrentAvailStatsIndex, mefSoamLmCfgType=mefSoamLmCfgType, mefSoamLmCurrentAvailStatsBackwardHighLoss=mefSoamLmCurrentAvailStatsBackwardHighLoss, mefSoamLmHistoryStatsBackwardMinFlr=mefSoamLmHistoryStatsBackwardMinFlr, mefSoamDmCfgSessionType=mefSoamDmCfgSessionType, mefSoamDmHistoryStatsFrameDelayForwardMax=mefSoamDmHistoryStatsFrameDelayForwardMax, mefSoamLmCfgIndex=mefSoamLmCfgIndex, mefSoamDmHistoryStatsIfdvTwoWayMin=mefSoamDmHistoryStatsIfdvTwoWayMin, mefSoamLmHistoryAvailStatsEntry=mefSoamLmHistoryAvailStatsEntry, mefSoamDmHistoryStatsFrameDelayRangeForwardMax=mefSoamDmHistoryStatsFrameDelayRangeForwardMax, mefSoamDmCfgRelativeStopTime=mefSoamDmCfgRelativeStopTime, mefSoamDmMeasuredStatsFrameDelayTwoWay=mefSoamDmMeasuredStatsFrameDelayTwoWay, mefSoamLmCfgRelativeStartTime=mefSoamLmCfgRelativeStartTime, mefSoamDmMeasuredStatsTable=mefSoamDmMeasuredStatsTable, mefSoamLmHistoryAvailStatsBackwardMaxFlr=mefSoamLmHistoryAvailStatsBackwardMaxFlr, mefSoamDmHistoryStatsFrameDelayRangeBackwardMax=mefSoamDmHistoryStatsFrameDelayRangeBackwardMax, mefSoamDmThresholdCfgMaxFrameDelayBackwardThreshold=mefSoamDmThresholdCfgMaxFrameDelayBackwardThreshold, mefSoamLmHistoryAvailStatsForwardMaxFlr=mefSoamLmHistoryAvailStatsForwardMaxFlr, mefSoamPmMep=mefSoamPmMep, mefSoamLmCurrentAvailStatsMandatoryGroup=mefSoamLmCurrentAvailStatsMandatoryGroup, mefSoamDmCfgFixedStartDateAndTime=mefSoamDmCfgFixedStartDateAndTime, mefSoamLmCurrentStatsForwardTransmittedFrames=mefSoamLmCurrentStatsForwardTransmittedFrames, mefSoamLmCfgMeasurementEnable=mefSoamLmCfgMeasurementEnable, mefSoamLmHistoryStatsForwardReceivedFrames=mefSoamLmHistoryStatsForwardReceivedFrames, mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval=mefSoamDmCfgNumMeasBinsPerFrameDelayRangeInterval, mefSoamLmCfgAvailabilityNumConsecutiveHighFlr=mefSoamLmCfgAvailabilityNumConsecutiveHighFlr, mefSoamDmCfgDestMacAddress=mefSoamDmCfgDestMacAddress, mefSoamDmCurrentStatsFrameDelayTwoWayAvg=mefSoamDmCurrentStatsFrameDelayTwoWayAvg, mefSoamDmCurrentStatsIfdvBackwardMax=mefSoamDmCurrentStatsIfdvBackwardMax, mefSoamDmHistoryStatsFrameDelayTwoWayAvg=mefSoamDmHistoryStatsFrameDelayTwoWayAvg, mefSoamDmCfgMandatoryGroup=mefSoamDmCfgMandatoryGroup, mefSoamLmThresholdOptionalGroup=mefSoamLmThresholdOptionalGroup, mefSoamDmCurrentStatsFrameDelayBackwardMin=mefSoamDmCurrentStatsFrameDelayBackwardMin, mefSoamDmMeasuredStatsIfdvBackward=mefSoamDmMeasuredStatsIfdvBackward, mefSoamDmThresholdMandatoryGroup=mefSoamDmThresholdMandatoryGroup, mefSoamDmCfgDataPattern=mefSoamDmCfgDataPattern, mefSoamLmHistoryStatsBackwardTransmittedFrames=mefSoamLmHistoryStatsBackwardTransmittedFrames, mefSoamLmCfgAvailabilityMeasurementInterval=mefSoamLmCfgAvailabilityMeasurementInterval, mefSoamPmNotificationObjMandatoryGroup=mefSoamPmNotificationObjMandatoryGroup, mefSoamDmCfgFixedStopDateAndTime=mefSoamDmCfgFixedStopDateAndTime, mefSoamDmThresholdCfgAvgFrameDelayForwardThreshold=mefSoamDmThresholdCfgAvgFrameDelayForwardThreshold, mefSoamPmNotificationObjSuspect=mefSoamPmNotificationObjSuspect, mefSoamLmCfgAvailabilityNumConsecutiveIntervals=mefSoamLmCfgAvailabilityNumConsecutiveIntervals, mefSoamLmThresholdCfgBackwardAvailRatioThreshold=mefSoamLmThresholdCfgBackwardAvailRatioThreshold, mefSoamLmCurrentStatsForwardMinFlr=mefSoamLmCurrentStatsForwardMinFlr, mefSoamLmCurrentAvailStatsForwardMinFlr=mefSoamLmCurrentAvailStatsForwardMinFlr, mefSoamDmCurrentStatsFrameDelayRangeForwardMax=mefSoamDmCurrentStatsFrameDelayRangeForwardMax, mefSoamDmThresholdCfgIndex=mefSoamDmThresholdCfgIndex, mefSoamDmThresholdCfgMeasuredIfdvTwoWayThreshold=mefSoamDmThresholdCfgMeasuredIfdvTwoWayThreshold, mefSoamDmHistoryStatsTable=mefSoamDmHistoryStatsTable, mefSoamLmHistoryStatsTable=mefSoamLmHistoryStatsTable, mefSoamDmCurrentStatsFrameDelayForwardAvg=mefSoamDmCurrentStatsFrameDelayForwardAvg, mefSoamPmMepMandatoryGroup=mefSoamPmMepMandatoryGroup, mefSoamDmCfgIndex=mefSoamDmCfgIndex, mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg=mefSoamDmHistoryStatsFrameDelayRangeTwoWayAvg, mefSoamLmThresholdCfgEnable=mefSoamLmThresholdCfgEnable, mefSoamPmLmObjects=mefSoamPmLmObjects, mefSoamDmThresholdCfgAvgFrameDelayRangeBackwardThreshold=mefSoamDmThresholdCfgAvgFrameDelayRangeBackwardThreshold, mefSoamDmHistoryStatsIfdvBackwardMin=mefSoamDmHistoryStatsIfdvBackwardMin, mefSoamDmHistoryStatsEndTime=mefSoamDmHistoryStatsEndTime, mefSoamLmCfgAvailabilityFlrThreshold=mefSoamLmCfgAvailabilityFlrThreshold, mefSoamDmCfgInterFrameDelayVariationSelectionOffset=mefSoamDmCfgInterFrameDelayVariationSelectionOffset, mefSoamDmHistoryStatsSuspect=mefSoamDmHistoryStatsSuspect, mefSoamLmCfgRelativeStopTime=mefSoamLmCfgRelativeStopTime, mefSoamPmMepTable=mefSoamPmMepTable, mefSoamDmHistoryStatsSoamPdusReceived=mefSoamDmHistoryStatsSoamPdusReceived, mefSoamLmCfgDestIsMepId=mefSoamLmCfgDestIsMepId, mefSoamDmHistoryStatsFrameDelayBackwardMin=mefSoamDmHistoryStatsFrameDelayBackwardMin, mefSoamPmNotificationObjThresholdId=mefSoamPmNotificationObjThresholdId, mefSoamLmThresholdMandatoryGroup=mefSoamLmThresholdMandatoryGroup, mefSoamLmCurrentAvailStatsBackwardAvgFlr=mefSoamLmCurrentAvailStatsBackwardAvgFlr, mefSoamLmMeasuredStatsAvailForwardStatus=mefSoamLmMeasuredStatsAvailForwardStatus, mefSoamDmCurrentStatsFrameDelayForwardMin=mefSoamDmCurrentStatsFrameDelayForwardMin, mefSoamLmThresholdCfgEntry=mefSoamLmThresholdCfgEntry, mefSoamLmCurrentAvailStatsSuspect=mefSoamLmCurrentAvailStatsSuspect, mefSoamLmCurrentStatsBackwardMinFlr=mefSoamLmCurrentStatsBackwardMinFlr, mefSoamLmHistoryAvailStatsForwardMinFlr=mefSoamLmHistoryAvailStatsForwardMinFlr, mefSoamLmMeasuredStatsAvailForwardLastTransitionTime=mefSoamLmMeasuredStatsAvailForwardLastTransitionTime, mefSoamLmThresholdCfgMaxFlrBackwardThreshold=mefSoamLmThresholdCfgMaxFlrBackwardThreshold, mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss=mefSoamLmCurrentAvailStatsForwardConsecutiveHighLoss, mefSoamLmHistoryAvailStatsOptionalGroup=mefSoamLmHistoryAvailStatsOptionalGroup, mefSoamLmCurrentAvailStatsBackwardMaxFlr=mefSoamLmCurrentAvailStatsBackwardMaxFlr, mefSoamLmCfgMandatoryGroup=mefSoamLmCfgMandatoryGroup, mefSoamDmMeasuredStatsOptionalGroup=mefSoamDmMeasuredStatsOptionalGroup, mefSoamLmHistoryAvailStatsBackwardAvailable=mefSoamLmHistoryAvailStatsBackwardAvailable, mefSoamPmMepLmSingleEndedResponder=mefSoamPmMepLmSingleEndedResponder, mefSoamDmCfgDestIsMepId=mefSoamDmCfgDestIsMepId, mefSoamLmCfgVersion=mefSoamLmCfgVersion, mefSoamLmCurrentStatsOptionalGroup=mefSoamLmCurrentStatsOptionalGroup, mefSoamDmCfgTestTlvIncluded=mefSoamDmCfgTestTlvIncluded, mefSoamDmThresholdCfgMeasuredIfdvBackwardThreshold=mefSoamDmThresholdCfgMeasuredIfdvBackwardThreshold, mefSoamLmHistoryAvailStatsTable=mefSoamLmHistoryAvailStatsTable, mefSoamLmThresholdCfgAvgFlrForwardThreshold=mefSoamLmThresholdCfgAvgFlrForwardThreshold, mefSoamPmMibCompliance=mefSoamPmMibCompliance, mefSoamDmCurrentStatsStartTime=mefSoamDmCurrentStatsStartTime, mefSoamLmCfgEntry=mefSoamLmCfgEntry, mefSoamPmNotificationsOptionalGroup=mefSoamPmNotificationsOptionalGroup, mefSoamPmMepDmSingleEndedResponder=mefSoamPmMepDmSingleEndedResponder, mefSoamLmHistoryStatsEndTime=mefSoamLmHistoryStatsEndTime, mefSoamDmCfgHistoryClear=mefSoamDmCfgHistoryClear, mefSoamDmHistoryStatsMandatoryGroup=mefSoamDmHistoryStatsMandatoryGroup, mefSoamDmCfgType=mefSoamDmCfgType, mefSoamLmCfgFixedStartDateAndTime=mefSoamLmCfgFixedStartDateAndTime, mefSoamDmCfgNumMeasBinsPerFrameDelayInterval=mefSoamDmCfgNumMeasBinsPerFrameDelayInterval, mefSoamDmCfgFrameSize=mefSoamDmCfgFrameSize, mefSoamLmCfgNumIntervalsStored=mefSoamLmCfgNumIntervalsStored, mefSoamDmCurrentStatsFrameDelayBackwardMax=mefSoamDmCurrentStatsFrameDelayBackwardMax, mefSoamLmCurrentAvailStatsBackwardUnavailable=mefSoamLmCurrentAvailStatsBackwardUnavailable, mefSoamDmHistoryStatsElapsedTime=mefSoamDmHistoryStatsElapsedTime, mefSoamLmHistoryStatsSoamPdusSent=mefSoamLmHistoryStatsSoamPdusSent, mefSoamDmCfgSourceMacAddress=mefSoamDmCfgSourceMacAddress, mefSoamPmNotificationObjCrossingType=mefSoamPmNotificationObjCrossingType, mefSoamPmMibGroups=mefSoamPmMibGroups, mefSoamLmThresholdCfgForwardUnavailCountThreshold=mefSoamLmThresholdCfgForwardUnavailCountThreshold, mefSoamLmHistoryStatsMandatoryGroup=mefSoamLmHistoryStatsMandatoryGroup, mefSoamDmThresholdCfgMaxIfdvTwoWayThreshold=mefSoamDmThresholdCfgMaxIfdvTwoWayThreshold, mefSoamLmCfgFixedStopDateAndTime=mefSoamLmCfgFixedStopDateAndTime, mefSoamLmCfgTable=mefSoamLmCfgTable, mefSoamDmCurrentStatsTable=mefSoamDmCurrentStatsTable, mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg=mefSoamDmCurrentStatsFrameDelayRangeTwoWayAvg, mefSoamDmThresholdCfgMaxIfdvBackwardThreshold=mefSoamDmThresholdCfgMaxIfdvBackwardThreshold, mefSoamDmCurrentStatsFrameDelayForwardMax=mefSoamDmCurrentStatsFrameDelayForwardMax, mefSoamDmCfgMeasBinNumber=mefSoamDmCfgMeasBinNumber, mefSoamDmCurrentStatsIfdvForwardMax=mefSoamDmCurrentStatsIfdvForwardMax, mefSoamDmCfgMeasBinLowerBound=mefSoamDmCfgMeasBinLowerBound, mefSoamLmCurrentAvailStatsOptionalGroup=mefSoamLmCurrentAvailStatsOptionalGroup, mefSoamLmMeasuredStatsOptionalGroup=mefSoamLmMeasuredStatsOptionalGroup, mefSoamLmSessionStartStopAlarm=mefSoamLmSessionStartStopAlarm, mefSoamDmHistoryStatsFrameDelayBackwardMax=mefSoamDmHistoryStatsFrameDelayBackwardMax, mefSoamDmHistoryStatsFrameDelayBackwardAvg=mefSoamDmHistoryStatsFrameDelayBackwardAvg, mefSoamDmThresholdCfgMaxFrameDelayForwardThreshold=mefSoamDmThresholdCfgMaxFrameDelayForwardThreshold, mefSoamDmCfgVersion=mefSoamDmCfgVersion, mefSoamLmMeasuredStatsEntry=mefSoamLmMeasuredStatsEntry, mefSoamDmHistoryStatsFrameDelayRangeForwardAvg=mefSoamDmHistoryStatsFrameDelayRangeForwardAvg, mefSoamDmCfgRowStatus=mefSoamDmCfgRowStatus, mefSoamDmThresholdCfgMeasuredFrameDelayTwoWayThreshold=mefSoamDmThresholdCfgMeasuredFrameDelayTwoWayThreshold, mefSoamLmCurrentAvailStatsBackwardMinFlr=mefSoamLmCurrentAvailStatsBackwardMinFlr, mefSoamDmCurrentStatsFrameDelayTwoWayMin=mefSoamDmCurrentStatsFrameDelayTwoWayMin, mefSoamDmCfgRelativeStartTime=mefSoamDmCfgRelativeStartTime, mefSoamDmThresholdCfgMeasuredIfdvForwardThreshold=mefSoamDmThresholdCfgMeasuredIfdvForwardThreshold, mefSoamDmCfgStopTimeType=mefSoamDmCfgStopTimeType, mefSoamDmCfgPriority=mefSoamDmCfgPriority, mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax=mefSoamDmHistoryStatsFrameDelayRangeTwoWayMax, mefSoamLmCfgDestMacAddress=mefSoamLmCfgDestMacAddress, mefSoamLmThresholdCfgBackwardUnavailCountThreshold=mefSoamLmThresholdCfgBackwardUnavailCountThreshold, mefSoamDmCurrentStatsIfdvTwoWayMin=mefSoamDmCurrentStatsIfdvTwoWayMin, mefSoamDmCurrentStatsFrameDelayBackwardAvg=mefSoamDmCurrentStatsFrameDelayBackwardAvg, mefSoamLmHistoryStatsForwardTransmittedFrames=mefSoamLmHistoryStatsForwardTransmittedFrames, mefSoamLmHistoryStatsIndex=mefSoamLmHistoryStatsIndex, mefSoamLmCurrentStatsEntry=mefSoamLmCurrentStatsEntry, mefSoamLmThresholdCfgForwardConsecutiveHighLossThreshold=mefSoamLmThresholdCfgForwardConsecutiveHighLossThreshold, mefSoamDmCfgAlignMeasurementOffset=mefSoamDmCfgAlignMeasurementOffset, mefSoamDmCurrentStatsBinsMandatoryGroup=mefSoamDmCurrentStatsBinsMandatoryGroup, mefSoamDmCurrentStatsSoamPdusReceived=mefSoamDmCurrentStatsSoamPdusReceived, mefSoamDmHistoryStatsIfdvBackwardMax=mefSoamDmHistoryStatsIfdvBackwardMax, mefSoamDmHistoryStatsIfdvTwoWayAvg=mefSoamDmHistoryStatsIfdvTwoWayAvg, mefSoamPmNotificationObjThresholdConfig=mefSoamPmNotificationObjThresholdConfig, mefSoamDmCfgAlignMeasurementIntervals=mefSoamDmCfgAlignMeasurementIntervals, mefSoamLmMeasuredStatsForwardFlr=mefSoamLmMeasuredStatsForwardFlr, mefSoamLmHistoryAvailStatsBackwardMinFlr=mefSoamLmHistoryAvailStatsBackwardMinFlr, mefSoamDmCurrentStatsBinsCounter=mefSoamDmCurrentStatsBinsCounter, mefSoamDmCurrentStatsEntry=mefSoamDmCurrentStatsEntry, mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus=mefSoamLmCfgAvailabilityNumConsecutiveMeasPdus, mefSoamLmCfgSessionType=mefSoamLmCfgSessionType, mefSoamLmCurrentStatsBackwardMaxFlr=mefSoamLmCurrentStatsBackwardMaxFlr, mefSoamLmCurrentStatsSuspect=mefSoamLmCurrentStatsSuspect, mefSoamDmCfgMessagePeriod=mefSoamDmCfgMessagePeriod, mefSoamDmHistoryStatsIfdvBackwardAvg=mefSoamDmHistoryStatsIfdvBackwardAvg, mefSoamDmHistoryStatsIfdvTwoWayMax=mefSoamDmHistoryStatsIfdvTwoWayMax, mefSoamDmCurrentStatsElapsedTime=mefSoamDmCurrentStatsElapsedTime, mefSoamDmCurrentStatsIfdvBackwardAvg=mefSoamDmCurrentStatsIfdvBackwardAvg, mefSoamDmHistoryStatsOptionalGroup=mefSoamDmHistoryStatsOptionalGroup, mefSoamDmThresholdCfgMeasuredFrameDelayBackwardThreshold=mefSoamDmThresholdCfgMeasuredFrameDelayBackwardThreshold, mefSoamDmCurrentStatsFrameDelayRangeForwardAvg=mefSoamDmCurrentStatsFrameDelayRangeForwardAvg, mefSoamPmMepOptionalGroup=mefSoamPmMepOptionalGroup, mefSoamDmThresholdOptionalGroup=mefSoamDmThresholdOptionalGroup, mefSoamLmThresholdCfgRowStatus=mefSoamLmThresholdCfgRowStatus, mefSoamDmHistoryStatsFrameDelayTwoWayMin=mefSoamDmHistoryStatsFrameDelayTwoWayMin, mefSoamDmThresholdCfgAvgFrameDelayRangeTwoWayThreshold=mefSoamDmThresholdCfgAvgFrameDelayRangeTwoWayThreshold, mefSoamDmThresholdCfgRowStatus=mefSoamDmThresholdCfgRowStatus, mefSoamPmMibCompliances=mefSoamPmMibCompliances, mefSoamDmCfgRepetitionTime=mefSoamDmCfgRepetitionTime, mefSoamLmHistoryAvailStatsBackwardAvgFlr=mefSoamLmHistoryAvailStatsBackwardAvgFlr, mefSoamPmNotificationCfgMandatoryGroup=mefSoamPmNotificationCfgMandatoryGroup, mefSoamDmCurrentStatsFrameDelayRangeBackwardMax=mefSoamDmCurrentStatsFrameDelayRangeBackwardMax, mefSoamLmCurrentAvailStatsBackwardAvailable=mefSoamLmCurrentAvailStatsBackwardAvailable, mefSoamLmThresholdCfgForwardAvailRatioThreshold=mefSoamLmThresholdCfgForwardAvailRatioThreshold, mefSoamDmThresholdCfgAvgFrameDelayRangeForwardThreshold=mefSoamDmThresholdCfgAvgFrameDelayRangeForwardThreshold, mefSoamLmCfgSessionStatus=mefSoamLmCfgSessionStatus, mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss=mefSoamLmCurrentAvailStatsBackwardConsecutiveHighLoss, mefSoamPmMib=mefSoamPmMib, mefSoamDmSessionStartStopAlarm=mefSoamDmSessionStartStopAlarm, mefSoamDmHistoryStatsBinsCounter=mefSoamDmHistoryStatsBinsCounter, mefSoamPmMibObjects=mefSoamPmMibObjects, mefSoamLmHistoryStatsOptionalGroup=mefSoamLmHistoryStatsOptionalGroup, mefSoamLmThresholdCfgTable=mefSoamLmThresholdCfgTable, mefSoamLmHistoryAvailStatsBackwardUnavailable=mefSoamLmHistoryAvailStatsBackwardUnavailable, mefSoamDmCurrentStatsBinsEntry=mefSoamDmCurrentStatsBinsEntry, mefSoamPmNotificationObjThresholdValue=mefSoamPmNotificationObjThresholdValue, mefSoamDmCfgStartTimeType=mefSoamDmCfgStartTimeType, mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg=mefSoamDmCurrentStatsFrameDelayRangeBackwardAvg, mefSoamDmCurrentStatsIndex=mefSoamDmCurrentStatsIndex, mefSoamDmMeasuredStatsIfdvTwoWay=mefSoamDmMeasuredStatsIfdvTwoWay, mefSoamDmHistoryStatsIfdvForwardMax=mefSoamDmHistoryStatsIfdvForwardMax, mefSoamDmHistoryStatsBinsTable=mefSoamDmHistoryStatsBinsTable, mefSoamLmThresholdCfgAvgFlrBackwardThreshold=mefSoamLmThresholdCfgAvgFlrBackwardThreshold, mefSoamLmCfgMessagePeriod=mefSoamLmCfgMessagePeriod, mefSoamLmHistoryStatsBackwardAvgFlr=mefSoamLmHistoryStatsBackwardAvgFlr, mefSoamDmCfgMeasBinMandatoryGroup=mefSoamDmCfgMeasBinMandatoryGroup, mefSoamLmCfgDestMepId=mefSoamLmCfgDestMepId, mefSoamDmCfgNumIntervalsStored=mefSoamDmCfgNumIntervalsStored, mefSoamDmMeasuredStatsEntry=mefSoamDmMeasuredStatsEntry, mefSoamPmDmObjects=mefSoamPmDmObjects, mefSoamLmCurrentStatsStartTime=mefSoamLmCurrentStatsStartTime, mefSoamLmHistoryStatsBackwardReceivedFrames=mefSoamLmHistoryStatsBackwardReceivedFrames, mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax=mefSoamDmCurrentStatsFrameDelayRangeTwoWayMax, mefSoamDmHistoryStatsFrameDelayForwardMin=mefSoamDmHistoryStatsFrameDelayForwardMin, mefSoamPmNotificationObjDestinationMep=mefSoamPmNotificationObjDestinationMep, mefSoamDmThresholdCfgMaxFrameDelayTwoWayThreshold=mefSoamDmThresholdCfgMaxFrameDelayTwoWayThreshold, mefSoamDmCurrentStatsBinsTable=mefSoamDmCurrentStatsBinsTable, mefSoamLmCurrentStatsElapsedTime=mefSoamLmCurrentStatsElapsedTime, mefSoamLmCfgTestTlvPattern=mefSoamLmCfgTestTlvPattern, mefSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold=mefSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold, mefSoamDmCfgMeasurementEnable=mefSoamDmCfgMeasurementEnable, mefSoamLmHistoryAvailStatsForwardAvailable=mefSoamLmHistoryAvailStatsForwardAvailable, mefSoamPmMibConformance=mefSoamPmMibConformance, mefSoamLmCfgStartTimeType=mefSoamLmCfgStartTimeType, mefSoamLmHistoryStatsSoamPdusReceived=mefSoamLmHistoryStatsSoamPdusReceived, mefSoamDmCfgMeasBinType=mefSoamDmCfgMeasBinType, mefSoamPmNotificationCfgAlarmInterval=mefSoamPmNotificationCfgAlarmInterval, mefSoamLmHistoryStatsForwardAvgFlr=mefSoamLmHistoryStatsForwardAvgFlr, mefSoamDmCfgMeasBinEntry=mefSoamDmCfgMeasBinEntry, mefSoamPmNotifications=mefSoamPmNotifications)
mibBuilder.exportSymbols("MEF-SOAM-PM-MIB", mefSoamDmMeasuredStatsFrameDelayForward=mefSoamDmMeasuredStatsFrameDelayForward, mefSoamLmCfgHistoryClear=mefSoamLmCfgHistoryClear, mefSoamDmHistoryStatsIfdvForwardMin=mefSoamDmHistoryStatsIfdvForwardMin, mefSoamDmThresholdCfgAvgIfdvBackwardThreshold=mefSoamDmThresholdCfgAvgIfdvBackwardThreshold, mefSoamDmThresholdCfgTable=mefSoamDmThresholdCfgTable, mefSoamDmHistoryStatsEntry=mefSoamDmHistoryStatsEntry, mefSoamDmHistoryStatsIfdvForwardAvg=mefSoamDmHistoryStatsIfdvForwardAvg, mefSoamLmCurrentStatsSoamPdusSent=mefSoamLmCurrentStatsSoamPdusSent, mefSoamDmCfgEntry=mefSoamDmCfgEntry, mefSoamLmCurrentStatsForwardAvgFlr=mefSoamLmCurrentStatsForwardAvgFlr, mefSoamDmCurrentStatsSuspect=mefSoamDmCurrentStatsSuspect, mefSoamDmThresholdCfgAvgIfdvTwoWayThreshold=mefSoamDmThresholdCfgAvgIfdvTwoWayThreshold, mefSoamLmHistoryAvailStatsElapsedTime=mefSoamLmHistoryAvailStatsElapsedTime, mefSoamPmNotificationCfg=mefSoamPmNotificationCfg, mefSoamLmCurrentAvailStatsForwardHighLoss=mefSoamLmCurrentAvailStatsForwardHighLoss, mefSoamLmCfgAlignMeasurementIntervals=mefSoamLmCfgAlignMeasurementIntervals, mefSoamDmThresholdCfgMaxFrameDelayRangeTwoWayThreshold=mefSoamDmThresholdCfgMaxFrameDelayRangeTwoWayThreshold, mefSoamDmThresholdCfgMeasuredFrameDelayForwardThreshold=mefSoamDmThresholdCfgMeasuredFrameDelayForwardThreshold, mefSoamLmCurrentAvailStatsEntry=mefSoamLmCurrentAvailStatsEntry, mefSoamLmCurrentAvailStatsStartTime=mefSoamLmCurrentAvailStatsStartTime, mefSoamDmThresholdCfgAvgIfdvForwardThreshold=mefSoamDmThresholdCfgAvgIfdvForwardThreshold, mefSoamDmCurrentStatsIfdvTwoWayMax=mefSoamDmCurrentStatsIfdvTwoWayMax, mefSoamLmCurrentStatsBackwardAvgFlr=mefSoamLmCurrentStatsBackwardAvgFlr, mefSoamLmCurrentStatsTable=mefSoamLmCurrentStatsTable, mefSoamDmCfgSessionStatus=mefSoamDmCfgSessionStatus, mefSoamLmCfgPriority=mefSoamLmCfgPriority, mefSoamDmMeasuredStatsFrameDelayBackward=mefSoamDmMeasuredStatsFrameDelayBackward, mefSoamDmCurrentStatsIfdvBackwardMin=mefSoamDmCurrentStatsIfdvBackwardMin, mefSoamDmThresholdCfgAvgFrameDelayBackwardThreshold=mefSoamDmThresholdCfgAvgFrameDelayBackwardThreshold, mefSoamPmThresholdCrossingAlarm=mefSoamPmThresholdCrossingAlarm, mefSoamLmHistoryAvailStatsEndTime=mefSoamLmHistoryAvailStatsEndTime, mefSoamLmCfgStopTimeType=mefSoamLmCfgStopTimeType, mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss=mefSoamLmHistoryAvailStatsBackwardConsecutiveHighLoss, mefSoamLmHistoryAvailStatsMandatoryGroup=mefSoamLmHistoryAvailStatsMandatoryGroup, mefSoamLmThresholdCfgForwardHighLossThreshold=mefSoamLmThresholdCfgForwardHighLossThreshold, mefSoamLmThresholdCfgBackwardHighLossThreshold=mefSoamLmThresholdCfgBackwardHighLossThreshold, mefSoamLmCfgMeasurementInterval=mefSoamLmCfgMeasurementInterval, mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval=mefSoamDmCfgNumMeasBinsPerInterFrameDelayVariationInterval, mefSoamDmHistoryStatsBinsEntry=mefSoamDmHistoryStatsBinsEntry, mefSoamLmCurrentStatsMandatoryGroup=mefSoamLmCurrentStatsMandatoryGroup, mefSoamLmCurrentAvailStatsForwardUnavailable=mefSoamLmCurrentAvailStatsForwardUnavailable, mefSoamLmHistoryAvailStatsForwardHighLoss=mefSoamLmHistoryAvailStatsForwardHighLoss, mefSoamLmCfgTestTlvIncluded=mefSoamLmCfgTestTlvIncluded, mefSoamPmNotificationsMandatoryGroup=mefSoamPmNotificationsMandatoryGroup, mefSoamLmCurrentAvailStatsForwardMaxFlr=mefSoamLmCurrentAvailStatsForwardMaxFlr, mefSoamLmCurrentAvailStatsForwardAvgFlr=mefSoamLmCurrentAvailStatsForwardAvgFlr, mefSoamLmThresholdCfgBackwardConsecutiveHighLossThreshold=mefSoamLmThresholdCfgBackwardConsecutiveHighLossThreshold, mefSoamLmCfgOptionalGroup=mefSoamLmCfgOptionalGroup, mefSoamLmCurrentStatsBackwardReceivedFrames=mefSoamLmCurrentStatsBackwardReceivedFrames, mefSoamLmHistoryStatsForwardMinFlr=mefSoamLmHistoryStatsForwardMinFlr, mefSoamLmHistoryStatsSuspect=mefSoamLmHistoryStatsSuspect, mefSoamDmCfgTestTlvPattern=mefSoamDmCfgTestTlvPattern, mefSoamDmMeasuredStatsIfdvForward=mefSoamDmMeasuredStatsIfdvForward, mefSoamLmMeasuredStatsAvailBackwardStatus=mefSoamLmMeasuredStatsAvailBackwardStatus, mefSoamLmCurrentStatsSoamPdusReceived=mefSoamLmCurrentStatsSoamPdusReceived, mefSoamLmCurrentStatsBackwardTransmittedFrames=mefSoamLmCurrentStatsBackwardTransmittedFrames, mefSoamLmCfgEnabled=mefSoamLmCfgEnabled, mefSoamLmCurrentStatsForwardMaxFlr=mefSoamLmCurrentStatsForwardMaxFlr, mefSoamDmCfgMeasurementInterval=mefSoamDmCfgMeasurementInterval, mefSoamDmCfgMeasBinTable=mefSoamDmCfgMeasBinTable, mefSoamLmCurrentAvailStatsForwardAvailable=mefSoamLmCurrentAvailStatsForwardAvailable, mefSoamLmHistoryStatsForwardMaxFlr=mefSoamLmHistoryStatsForwardMaxFlr, mefSoamLmHistoryAvailStatsBackwardHighLoss=mefSoamLmHistoryAvailStatsBackwardHighLoss, mefSoamLmMeasuredStatsTable=mefSoamLmMeasuredStatsTable, mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg=mefSoamDmHistoryStatsFrameDelayRangeBackwardAvg, mefSoamDmCurrentStatsIfdvForwardAvg=mefSoamDmCurrentStatsIfdvForwardAvg, mefSoamPmMepEntry=mefSoamPmMepEntry, mefSoamLmThresholdCfgIndex=mefSoamLmThresholdCfgIndex, mefSoamDmCfgEnabled=mefSoamDmCfgEnabled, mefSoamDmCurrentStatsFrameDelayTwoWayMax=mefSoamDmCurrentStatsFrameDelayTwoWayMax, mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss=mefSoamLmHistoryAvailStatsForwardConsecutiveHighLoss, mefSoamDmCfgDestMepId=mefSoamDmCfgDestMepId, mefSoamLmThresholdCfgMaxFlrForwardThreshold=mefSoamLmThresholdCfgMaxFlrForwardThreshold, mefSoamDmThresholdCfgEntry=mefSoamDmThresholdCfgEntry, mefSoamPmMepSlmSingleEndedResponder=mefSoamPmMepSlmSingleEndedResponder, mefSoamLmHistoryAvailStatsForwardAvgFlr=mefSoamLmHistoryAvailStatsForwardAvgFlr, mefSoamDmCurrentStatsSoamPdusSent=mefSoamDmCurrentStatsSoamPdusSent, mefSoamPmNotificationObjPriority=mefSoamPmNotificationObjPriority, mefSoamPmNotificationObj=mefSoamPmNotificationObj, mefSoamLmThresholdCfgMeasuredFlrForwardThreshold=mefSoamLmThresholdCfgMeasuredFlrForwardThreshold, mefSoamDmHistoryStatsBinsMandatoryGroup=mefSoamDmHistoryStatsBinsMandatoryGroup, PYSNMP_MODULE_ID=mefSoamPmMib, mefSoamDmHistoryStatsIndex=mefSoamDmHistoryStatsIndex, mefSoamDmCurrentStatsIfdvForwardMin=mefSoamDmCurrentStatsIfdvForwardMin, mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime=mefSoamLmMeasuredStatsAvailBackwardLastTransitionTime, mefSoamLmHistoryAvailStatsForwardUnavailable=mefSoamLmHistoryAvailStatsForwardUnavailable, mefSoamAvailabilityChangeAlarm=mefSoamAvailabilityChangeAlarm, mefSoamLmMeasuredStatsBackwardFlr=mefSoamLmMeasuredStatsBackwardFlr, mefSoamPmNotificationCfgAlarmEnable=mefSoamPmNotificationCfgAlarmEnable, mefSoamLmCurrentAvailStatsTable=mefSoamLmCurrentAvailStatsTable, mefSoamLmThresholdCfgMeasuredFlrBackwardThreshold=mefSoamLmThresholdCfgMeasuredFlrBackwardThreshold, mefSoamLmCurrentStatsForwardReceivedFrames=mefSoamLmCurrentStatsForwardReceivedFrames, mefSoamPmNotificationObjDateAndTime=mefSoamPmNotificationObjDateAndTime, mefSoamLmHistoryStatsBackwardMaxFlr=mefSoamLmHistoryStatsBackwardMaxFlr, mefSoamDmHistoryStatsFrameDelayTwoWayMax=mefSoamDmHistoryStatsFrameDelayTwoWayMax, mefSoamDmHistoryStatsSoamPdusSent=mefSoamDmHistoryStatsSoamPdusSent, mefSoamDmCfgTable=mefSoamDmCfgTable, mefSoamPmMepOperNextIndex=mefSoamPmMepOperNextIndex, mefSoamDmHistoryStatsFrameDelayForwardAvg=mefSoamDmHistoryStatsFrameDelayForwardAvg)
