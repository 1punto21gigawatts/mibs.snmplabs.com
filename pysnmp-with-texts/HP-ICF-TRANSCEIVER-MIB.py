#
# PySNMP MIB module HP-ICF-TRANSCEIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-TRANSCEIVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Integer32, Counter32, Counter64, IpAddress, NotificationType, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Integer32", "Counter32", "Counter64", "IpAddress", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Bits")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
hpicfTransceiverMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82))
hpicfTransceiverMIB.setRevisions(('2016-02-23 00:00', '2016-02-01 00:00', '2015-02-17 00:00', '2012-02-22 00:00', '2011-07-25 00:00', '2011-06-08 00:00', '2011-03-14 00:00', '2011-03-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfTransceiverMIB.setRevisionsDescriptions(('Add object for transceiver nagware suppress.', 'Add object for transceiver lock feature.', 'Add objects for reporting transceiver channel information.', 'Deprecated hpicfXcvrInfoGroup1 and hpicfXcvrCompliance1, Added hpicfXcvrManufacDate, hpicfXcvrInfoGroup2 and hpicfXcvrInfoCompliance2.', 'Deprecated hpicfXcvrDiagnosticsTimeStamp, add hpicfXcvrDiagnosticsTimeTicks.', 'Add objects for reporting phy and cable diagnostics information.', 'Change hpicfXcvrInfoEntry INDEX to ifIndex and hpicfXcvrPortIndex to Integer32 and read-only.', 'Management Infromation Base module for transceiver information and statistics.',))
if mibBuilder.loadTexts: hpicfTransceiverMIB.setLastUpdated('201602230000Z')
if mibBuilder.loadTexts: hpicfTransceiverMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfTransceiverMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfTransceiverMIB.setDescription('This MIB module describes HP transceiver information.')
hpicfXcvrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1))
hpicfXcvrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1))
hpicfXcvrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfXcvrInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrInfoTable.setDescription('A table of objects that display transceiver characteristics.')
hpicfXcvrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfXcvrInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrInfoEntry.setDescription('A set of objects that displays information of a transceiver.')
hpicfXcvrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPortIndex.setDescription('The interface number for this entry.')
hpicfXcvrPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPortDesc.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPortDesc.setDescription('A textual description of the interface.')
hpicfXcvrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrModel.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrModel.setDescription('A textual description of the transceiver model number.')
hpicfXcvrSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrSerial.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrSerial.setDescription('A textual description of the transceiver serial number.')
hpicfXcvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrType.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrType.setDescription('A textual description of the transceiver type.')
hpicfXcvrConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrConnectorType.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrConnectorType.setDescription('A textual description of the transceiver connector type.')
hpicfXcvrWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrWavelength.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrWavelength.setDescription('A textual description of the central optical wavelength. n/a will be reported for copper transceivers.')
hpicfXcvrTxDist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTxDist.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTxDist.setDescription('A textual description of the link length supported by the transceiver.')
hpicfXcvrDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dom", 1), ("vct", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrDiagnostics.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrDiagnostics.setDescription('This object indicates transceiver diagnostic support. May be one of Virtual Cable Test (VCT), Diagnostic Optical Monitoring (DOM), other or none.')
hpicfXcvrDiagnosticsUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsUpdate.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsUpdate.setDescription('This object will cause specific actions depending on the diagnostic support of the transceiver. Transceiver Diagnostic support: None : No action taken. DOM : Will update diagnostic information for the transceiver. VCT : Will update diagnostic information for the transceiver. Other : Vendor specific. The value of the object will be reset after the completion of the update. Please note: VCT and other (cable-diagnostics) may cause a loss of link and take a few second to run for each interface.')
hpicfXcvrTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 11), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTemp.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTemp.setDescription('This is transceiver internal temperature in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVoltage.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrVoltage.setDescription('This is transceiver supply voltage in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Will be zero if the transceiver does not report this object. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrBias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBias.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrBias.setDescription('This is Tx bias current in microamps. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 14), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTxPower.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTxPower.setDescription('This is transmit output power in thousandths of dBm. As an example: -5840 is -5.840dBm. -in dBm (0 microwatts) will be reported as -99999999. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 15), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRxPower.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrRxPower.setDescription('This is received optical power in thousandths of dBm. As an example: -5840 is -5.840dBm. -in dBm (0 microwatts) will be reported as -99999999. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 16), Bits().clone(namedValues=NamedValues(("rxPowerLowWarning", 0), ("rxPowerHighWarning", 1), ("txPowerLowWarning", 2), ("txPowerHighWarning", 3), ("txBiasLowWarning", 4), ("txBiasHighWarning", 5), ("vccLowWarning", 6), ("vccHighWarning", 7), ("tempLowWarning", 8), ("tempHighWarning", 9), ("rxPowerLowAlarm", 10), ("rxPowerHighAlarm", 11), ("txPowerLowAlarm", 12), ("txPowerHighAlarm", 13), ("txBiasLowAlarm", 14), ("txBiasHighAlarm", 15), ("vccLowAlarm", 16), ("vccHighAlarm", 17), ("tempLowAlarm", 18), ("tempHighAlarm", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrAlarms.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrAlarms.setDescription('Bitmask indicating transceiver alarms, Rx power low warning(0) Rx power high warning(1) Tx power low warning(2) Tx power high warning(3) Tx bias low warning(4) Tx bias high warning(5) Vcc low warning(6) Vcc high warning(7) Temp low warning(8) Temp high warning(9) Rx power low alarm(10) Rx power high alarm(11) Tx power low alarm(12) Tx power high alarm(13) Tx bias low alarm(14) Tx bias high alarm(15) Vcc low alarm(16) Vcc high alarm(17) Temp low alarm(18) Temp high alarm(19) Unused(20-31) The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 17), Bits().clone(namedValues=NamedValues(("xcvrIOError", 0), ("xcvrChecksum", 1), ("xcvrTypeAndPortConfigMismatch", 2), ("xcvrTypeNotSupported", 3), ("wisLocalFault", 4), ("rcvOpticalPowerFault", 5), ("pmapmdReceiverLocalFault", 6), ("pcsReceiveLocalFault", 7), ("phyXSReceiveLocalFault", 8), ("laserBiasCurrentFault", 9), ("laserTemperatureFault", 10), ("laserOutputPowerFault", 11), ("txFault", 12), ("pmapmdTransmitterLocalFault", 13), ("pcsTransmitLocalFault", 14), ("phyXSTransmitLocalFault", 15), ("rxLossOfSignal", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrErrors.setDescription('Bitmask indicating transceiver errors. Transceiver information I/O error(0) Transceiver information checksum error(1) Transceiver type and port configuration mismatch(2) Transceiver type not supported by port hardware(3) WIS local fault(4) Receive optical power fault(5) PMA/PMD receiver local fault(6) PCS receive local fault(7) PHY XS receive local fault(8) Laser bias current fault(9) Laser temperature fault(10) Laser output power fault(11) TX fault(12) PMA/PMD transmitter local fault(13) PCS transmit local fault(14) PHY XS Transmit Local Fault(15) RX loss of signal(16) Unused(17-31) The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 18), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTempHiAlarm.setDescription('Transceiver temperature high alarm threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrTempLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 19), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTempLoAlarm.setDescription('Transceiver temperature low alarm threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrTempHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 20), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTempHiWarn.setDescription('Transceiver temperature high warning threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrTempLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 21), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrTempLoWarn.setDescription('Transceiver temperature low warning threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrVccHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrVccHiAlarm.setDescription('Transceiver VCC high alarm threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrVccLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrVccLoAlarm.setDescription('Transceiver VCC low alarm threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrVccHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrVccHiWarn.setDescription('Transceiver VCC high warning threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrVccLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrVccLoWarn.setDescription('Transceiver VCC low warning threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrBiasHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrBiasHiAlarm.setDescription('Transceiver bias high alarm threshold limit in microamps. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrBiasLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrBiasLoAlarm.setDescription('Transceiver bias low alarm threshold limit in microamps. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrBiasHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrBiasHiWarn.setDescription('Transceiver bias high warning threshold limit in microamps. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrBiasLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrBiasLoWarn.setDescription('Transceiver bias low warning threshold limit in microamps. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrPwrOutHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPwrOutHiAlarm.setDescription('Transceiver transmit power high alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrPwrOutLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPwrOutLoAlarm.setDescription('Transceiver transmit power low alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrPwrOutHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPwrOutHiWarn.setDescription('Transceiver transmit power high warning threshold limit in tenths of microwatts As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrPwrOutLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPwrOutLoWarn.setDescription('Transceiver transmit power low warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrRcvPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrRcvPwrHiAlarm.setDescription('Transceiver receive power high alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrRcvPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrRcvPwrLoAlarm.setDescription('Transceiver receive power low alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrRcvPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrRcvPwrHiWarn.setDescription('Transceiver receive power high warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrRcvPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrRcvPwrLoWarn.setDescription('Transceiver receive power low warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrDiagnosticsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 38), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsTimeStamp.setDescription('********* THIS OBJECT IS DEPRECATED ********* A textual description of the diagnostics information updated for the last time in the transceiver. This object has been deprecated. Its functionality has been replaced by hpicfXcvrDiagnosticsTimeticks.')
hpicfXcvrPhyLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPhyLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPhyLinkStatus.setDescription('This object indicates the link status as reported by the physical entity. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrPhySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('megabits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPhySpeed.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPhySpeed.setDescription('This object indicates the speed in Mbps as reported by the physical entity. Will be zero if speed and duplex are unresolved. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrPhyDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPhyDuplex.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrPhyDuplex.setDescription('This object indicates the duplex as reported by the physical entity. Will be unspecified if speed and duplex are unresolved. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairACableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairACableStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairACableStatus.setDescription('This object indicates the diagnostics test status on the cable pair. Normal = No cable fault detected. Open = Lack of continuity between ends. Short = Short detected. Impedance mismatch = - Cable pair is not connected properly or - Cable pair is damaged or - Connector is faulty. Failed = TDR test failed on cable pair. Unspecified : This object is unavailable or not reported. As reported through cable diagnostics. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairACableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairACableLength.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairACableLength.setDescription('This object indicates the cable pair length in meters as reported by cable diagnostics. A gigabit link must be present for this object to be non zero. Will be zero if not available or the transceiver does not report this object. Accuracy is +/- 10 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairADistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairADistanceToFault.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairADistanceToFault.setDescription('This object indicates the distance in meters to a fault in the cable pair as reported through cable diagnostics. Will be zero if no fault or the transceiver does not report this object. Accuracy is +/- 2 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairAPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairAPolaritySwap.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairAPolaritySwap.setDescription('This object indicates if the cable pair connected to the phy is inverted as reported through cable diagnostics. Will be unspecified if the this object is unavailable or not reported. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairASkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairASkew.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairASkew.setDescription('This object indicates the delay skew in nanoseconds of this cable pair and the fastest cable pair as reported through cable diagnostics. Will be zero if the lowest of the pairs or if the transceiver does not report this object. Accuracy is +/- 8 ns. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairBCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBCableStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairBCableStatus.setDescription('This object indicates the cable diagnostics test status on the cable pair. Normal = No cable fault detected. Open = Lack of continuity between ends. Short = Short detected. Impedance mismatch = - Cable pair is not connected properly or - Cable pair is damaged or - Connector is faulty. Failed = TDR test failed on cable pair. Unspecified : This object is unavailable or not reported. As reported through cable diagnostics. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairBCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBCableLength.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairBCableLength.setDescription('This object indicates the cable pair length in meters as reported by cable diagnostics. A gigabit link must be present for this object to be non zero. Will be zero if not available or the transceiver does not report this object. Accuracy is +/- 10 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairBDistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBDistanceToFault.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairBDistanceToFault.setDescription('This object indicates the distance in meters to a fault in the cable pair as reported through cable diagnostics. Will be zero if no fault or the transceiver does not report this object. Accuracy is +/- 2 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairBPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBPolaritySwap.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairBPolaritySwap.setDescription('This object indicates if the cable pair connected to the phy were inverted as reported through cable diagnostics. Will be unspecified if the this object is unavailable or not reported. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairBSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBSkew.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairBSkew.setDescription('This object indicates the delay skew in nanoseconds of this cable pair and the fastest cable pair as reported through cable diagnostics. Will be zero if the lowest of the pairs or if the transceiver does not report this object. Accuracy is +/- 8 ns. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairCCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCCableStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairCCableStatus.setDescription('This object indicates the cable diagnostics test status on the cable pair. Normal = No cable fault detected. Open = Lack of continuity between ends. Short = Short detected. Impedance Mismatch = - Cable pair is not connected properly or - Cable pair is damaged or - Connector is faulty. Failed = TDR test failed on cable pair. Unspecified : This object is unavailable or not reported. As reported through cable diagnostics. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairCCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCCableLength.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairCCableLength.setDescription('This object indicates the cable length in meters of the cable pair as reported through cable diagnostics. A gigabit link must be present for this object to be non zero. Will be zero if not available or the transceiver does not report this object. Accuracy is +/- 10 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairCDistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCDistanceToFault.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairCDistanceToFault.setDescription('This object indicates the distance in meters to a fault in the cable pair as reported through cable diagnostics. Will be zero if there is no fault or the transceiver does not report this object. Accuracy is +/- 2 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairCPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCPolaritySwap.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairCPolaritySwap.setDescription('This object indicates if the cable pair connected to the phy were inverted as reported through cable diagnostics. Will be unspecified if the this object is unavailable or not reported. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairCSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCSkew.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairCSkew.setDescription('This object indicates the delay skew in nanoseconds of this cable pair and the fastest cable pair as reported through cable diagnostics. Will be zero if the lowest of the pairs or if the transceiver does not report this object. Accuracy is +/- 8 ns. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairDCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDCableStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairDCableStatus.setDescription('This object indicates the cable diagnostics test status on the cable pair. Normal = No cable fault detected. Open = Lack of continuity between ends. Short = Short detected. Impedance Mismatch = - Cable pair is not connected properly or - Cable pair is damaged or - Connector is faulty. Failed = TDR test failed on cable pair. Unspecified : This object is unavailable or not reported. As reported through cable diagnostics. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairDCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDCableLength.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairDCableLength.setDescription('This object indicates the cable length in meters of the cable pair as reported through cable diagnostics. A gigabit link must be present for this object to be non zero. Will be zero if not available or the transceiver does not report this object. Accuracy is +/- 10 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairDDistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDDistanceToFault.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairDDistanceToFault.setDescription('This object indicates the distance in meters to a fault in the cable pair as reported through cable diagnostics. Will be zero if no fault or the transceiver does not report this object. Accuracy is +/- 2 meters. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairDPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDPolaritySwap.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairDPolaritySwap.setDescription('This object indicates if the cable pair connected to the phy were inverted as reported through cable diagnostics. Will be unspecified if the this object is unavailable or not reported. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairDSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDSkew.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairDSkew.setDescription('This object indicates the delay skew in nanoseconds of this cable pair and the fastest cable pair as reported through cable diagnostics. Will be zero if the lowest of the pairs or if the transceiver does not report this object. Accuracy is +/- 8 ns. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairABSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairABSwap.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairABSwap.setDescription('This object indicates the if the channels are swapped for channels A and B as reported through cable diagnostics. MDI : Channel A received on MDI[1], Channel B on MDI[0] MDIX : Channel A received on MDI[0], Channel B on MDI[1] Unspecified : This object is unavailable or not reported. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrMdiPairCDSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCDSwap.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrMdiPairCDSwap.setDescription('This object indicates if the channels are swapped for channels C and D as reported through cable diagnostics. MDI : Channel C received on MDI[3], Channel D on MDI[2] MDIX : Channel C received on MDI[2], Channel D on MDI[3]. Unspecified : This object is unavailable or not reported. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is VCT or other.')
hpicfXcvrDiagnosticsTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 64), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsTimeTicks.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsTimeTicks.setDescription('The value of sysUpTime of when this diagnostic information was last updated. If this diagnostic information was never updated, then this object will contain a zero value.')
hpicfXcvrManufacDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 65), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrManufacDate.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrManufacDate.setDescription('A textual description of the transceiver Manufacturing date.')
hpicfXcvrChannelInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfXcvrChannelInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelInfoTable.setDescription('A table of objects that displays the transceiver channel characteristics.')
hpicfXcvrChannelInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannel"))
if mibBuilder.loadTexts: hpicfXcvrChannelInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelInfoEntry.setDescription('A set of objects that displays the information of a transceiver channel.')
hpicfXcvrChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfXcvrChannel.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannel.setDescription('The channel number for this entry.')
hpicfXcvrChannelTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelTxBias.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelTxBias.setDescription('Tx bias current in microamps. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrChannelTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 3), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelTxPower.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelTxPower.setDescription('This is transmit output power in thousandths of dBm. As an example: -5840 is -5.840dBm. Negative infinity dBm (0 microwatts) is reported as -99999999. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrChannelRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 4), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelRxPower.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelRxPower.setDescription('Received optical power in thousandths of dBm. As an example: -5840 is -5.840dBm. Negative infinity dBm (0 microwatts) is reported as -99999999. The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrChannelAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("rxPowerLowWarning", 0), ("rxPowerHighWarning", 1), ("txPowerLowWarning", 2), ("txPowerHighWarning", 3), ("txBiasLowWarning", 4), ("txBiasHighWarning", 5), ("rxPowerLowAlarm", 6), ("rxPowerHighAlarm", 7), ("txPowerLowAlarm", 8), ("txPowerHighAlarm", 9), ("txBiasLowAlarm", 10), ("txBiasHighAlarm", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelAlarms.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelAlarms.setDescription('Bitmask indicating transceiver channel alarms, Rx power low warning(0) Rx power high warning(1) Tx power low warning(2) Tx power high warning(3) Tx bias low warning(4) Tx bias high warning(5) Rx power low alarm(6) Rx power high alarm(7) Tx power low alarm(8) Tx power high alarm(9) Tx bias low alarm(10) Tx bias high alarm(11) Unused(12-31) The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrChannelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("txFault", 0), ("txLossOfSignal", 1), ("rxLossOfSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelErrors.setDescription('TX fault(0) TX loss of signal(1) RX loss of signal(2) Unused(3-31) The value of this object is valid when the value of the hpicfXcvrDiagnostics object is DOM.')
hpicfXcvrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2))
hpicfXcvrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1))
hpicfXcvrInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 1)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortIndex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortDesc"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrModel"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrSerial"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrConnectorType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrWavelength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxDist"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnostics"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsUpdate"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTemp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVoltage"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrErrors"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsTimeStamp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyLinkStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhySpeed"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyDuplex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairADistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairAPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairASkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairABSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDSwap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrInfoGroup = hpicfXcvrInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXcvrInfoGroup.setDescription('********* THIS GROUP IS DEPRECATED ********* A collection of objects representing transceiver information. This object has been deprecated and replaced with hpicfXcvrInfoGroup1.')
hpicfXcvrInfoGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 2)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortIndex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortDesc"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrModel"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrSerial"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrConnectorType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrWavelength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxDist"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnostics"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsUpdate"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTemp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVoltage"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrErrors"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyLinkStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhySpeed"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyDuplex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairADistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairAPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairASkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairABSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsTimeTicks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrInfoGroup1 = hpicfXcvrInfoGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXcvrInfoGroup1.setDescription('A collection of objects representing transceiver information.')
hpicfXcvrInfoGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 3)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortIndex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortDesc"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrModel"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrSerial"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrConnectorType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrWavelength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxDist"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnostics"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsUpdate"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTemp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVoltage"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrErrors"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyLinkStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhySpeed"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyDuplex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairADistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairAPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairASkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairABSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsTimeTicks"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrManufacDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrInfoGroup2 = hpicfXcvrInfoGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrInfoGroup2.setDescription('A collection of objects representing transceiver information.')
hpicfXcvrChannelInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 4)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelTxBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrChannelInfoGroup = hpicfXcvrChannelInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelInfoGroup.setDescription('A collection of objects that provides transceiver channel information.')
hpicfXcvrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2))
hpicfXcvrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 1)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrCompliance = hpicfXcvrCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXcvrCompliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* Describes the requirements for conformance to the transceiver MIB. This compliance section has been deprecated and replaced with hpicfXcvrCompliance1.')
hpicfXcvrCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 2)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrInfoGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrCompliance1 = hpicfXcvrCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXcvrCompliance1.setDescription('Describes the requirements for conformance to the transceiver MIB.')
hpicfXcvrCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 3)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrInfoGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrCompliance2 = hpicfXcvrCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrCompliance2.setDescription('Describes the requirements for conformance to the transceiver MIB.')
hpicfXcvrChannelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 4)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrChannelCompliance = hpicfXcvrChannelCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfXcvrChannelCompliance.setDescription('Describes the requirements for conformance to the transceiver MIB.')
mibBuilder.exportSymbols("HP-ICF-TRANSCEIVER-MIB", hpicfXcvrChannelErrors=hpicfXcvrChannelErrors, hpicfXcvrTemp=hpicfXcvrTemp, hpicfXcvrMdiPairACableStatus=hpicfXcvrMdiPairACableStatus, hpicfXcvrObjects=hpicfXcvrObjects, hpicfXcvrConnectorType=hpicfXcvrConnectorType, hpicfXcvrConformance=hpicfXcvrConformance, hpicfXcvrPhyDuplex=hpicfXcvrPhyDuplex, hpicfXcvrPortIndex=hpicfXcvrPortIndex, hpicfXcvrChannelInfoTable=hpicfXcvrChannelInfoTable, hpicfXcvrInfoGroup2=hpicfXcvrInfoGroup2, hpicfXcvrBiasHiWarn=hpicfXcvrBiasHiWarn, hpicfXcvrMdiPairCCableStatus=hpicfXcvrMdiPairCCableStatus, hpicfXcvrPhyLinkStatus=hpicfXcvrPhyLinkStatus, hpicfXcvrWavelength=hpicfXcvrWavelength, hpicfXcvrMdiPairBSkew=hpicfXcvrMdiPairBSkew, hpicfXcvrTempLoWarn=hpicfXcvrTempLoWarn, hpicfXcvrMdiPairACableLength=hpicfXcvrMdiPairACableLength, hpicfXcvrMdiPairDPolaritySwap=hpicfXcvrMdiPairDPolaritySwap, hpicfXcvrManufacDate=hpicfXcvrManufacDate, hpicfXcvrInfo=hpicfXcvrInfo, hpicfXcvrPortDesc=hpicfXcvrPortDesc, hpicfXcvrMdiPairBDistanceToFault=hpicfXcvrMdiPairBDistanceToFault, hpicfXcvrCompliance1=hpicfXcvrCompliance1, hpicfXcvrMdiPairCDSwap=hpicfXcvrMdiPairCDSwap, hpicfXcvrCompliances=hpicfXcvrCompliances, hpicfXcvrBiasLoWarn=hpicfXcvrBiasLoWarn, hpicfXcvrAlarms=hpicfXcvrAlarms, hpicfXcvrTempHiAlarm=hpicfXcvrTempHiAlarm, hpicfXcvrInfoGroup=hpicfXcvrInfoGroup, hpicfXcvrMdiPairABSwap=hpicfXcvrMdiPairABSwap, hpicfXcvrChannelTxPower=hpicfXcvrChannelTxPower, hpicfXcvrChannelTxBias=hpicfXcvrChannelTxBias, hpicfXcvrBiasHiAlarm=hpicfXcvrBiasHiAlarm, hpicfXcvrRcvPwrHiAlarm=hpicfXcvrRcvPwrHiAlarm, hpicfXcvrCompliance=hpicfXcvrCompliance, hpicfXcvrPwrOutHiWarn=hpicfXcvrPwrOutHiWarn, hpicfXcvrChannelRxPower=hpicfXcvrChannelRxPower, hpicfXcvrTempHiWarn=hpicfXcvrTempHiWarn, hpicfXcvrInfoGroup1=hpicfXcvrInfoGroup1, hpicfXcvrRxPower=hpicfXcvrRxPower, hpicfXcvrCompliance2=hpicfXcvrCompliance2, hpicfXcvrDiagnostics=hpicfXcvrDiagnostics, hpicfXcvrMdiPairADistanceToFault=hpicfXcvrMdiPairADistanceToFault, hpicfXcvrInfoTable=hpicfXcvrInfoTable, hpicfXcvrMdiPairASkew=hpicfXcvrMdiPairASkew, hpicfXcvrMdiPairAPolaritySwap=hpicfXcvrMdiPairAPolaritySwap, hpicfXcvrPwrOutLoWarn=hpicfXcvrPwrOutLoWarn, hpicfXcvrRcvPwrLoAlarm=hpicfXcvrRcvPwrLoAlarm, hpicfXcvrMdiPairDSkew=hpicfXcvrMdiPairDSkew, hpicfXcvrChannelInfoGroup=hpicfXcvrChannelInfoGroup, hpicfXcvrDiagnosticsTimeTicks=hpicfXcvrDiagnosticsTimeTicks, hpicfXcvrBiasLoAlarm=hpicfXcvrBiasLoAlarm, hpicfXcvrChannelAlarms=hpicfXcvrChannelAlarms, hpicfXcvrPhySpeed=hpicfXcvrPhySpeed, hpicfXcvrChannel=hpicfXcvrChannel, hpicfXcvrTempLoAlarm=hpicfXcvrTempLoAlarm, hpicfXcvrMdiPairDDistanceToFault=hpicfXcvrMdiPairDDistanceToFault, hpicfXcvrPwrOutHiAlarm=hpicfXcvrPwrOutHiAlarm, hpicfXcvrMdiPairCPolaritySwap=hpicfXcvrMdiPairCPolaritySwap, hpicfXcvrTxDist=hpicfXcvrTxDist, hpicfXcvrDiagnosticsTimeStamp=hpicfXcvrDiagnosticsTimeStamp, hpicfXcvrVccHiWarn=hpicfXcvrVccHiWarn, hpicfXcvrMdiPairCDistanceToFault=hpicfXcvrMdiPairCDistanceToFault, hpicfXcvrMdiPairDCableStatus=hpicfXcvrMdiPairDCableStatus, hpicfXcvrRcvPwrHiWarn=hpicfXcvrRcvPwrHiWarn, hpicfXcvrModel=hpicfXcvrModel, hpicfXcvrMdiPairBCableLength=hpicfXcvrMdiPairBCableLength, PYSNMP_MODULE_ID=hpicfTransceiverMIB, hpicfXcvrDiagnosticsUpdate=hpicfXcvrDiagnosticsUpdate, hpicfXcvrMdiPairBPolaritySwap=hpicfXcvrMdiPairBPolaritySwap, hpicfXcvrSerial=hpicfXcvrSerial, hpicfXcvrPwrOutLoAlarm=hpicfXcvrPwrOutLoAlarm, hpicfXcvrVoltage=hpicfXcvrVoltage, hpicfXcvrMdiPairCSkew=hpicfXcvrMdiPairCSkew, hpicfXcvrMdiPairBCableStatus=hpicfXcvrMdiPairBCableStatus, hpicfXcvrChannelInfoEntry=hpicfXcvrChannelInfoEntry, hpicfXcvrGroups=hpicfXcvrGroups, hpicfXcvrBias=hpicfXcvrBias, hpicfXcvrVccHiAlarm=hpicfXcvrVccHiAlarm, hpicfXcvrInfoEntry=hpicfXcvrInfoEntry, hpicfXcvrChannelCompliance=hpicfXcvrChannelCompliance, hpicfXcvrMdiPairDCableLength=hpicfXcvrMdiPairDCableLength, hpicfTransceiverMIB=hpicfTransceiverMIB, hpicfXcvrTxPower=hpicfXcvrTxPower, hpicfXcvrVccLoWarn=hpicfXcvrVccLoWarn, hpicfXcvrVccLoAlarm=hpicfXcvrVccLoAlarm, hpicfXcvrErrors=hpicfXcvrErrors, hpicfXcvrType=hpicfXcvrType, hpicfXcvrRcvPwrLoWarn=hpicfXcvrRcvPwrLoWarn, hpicfXcvrMdiPairCCableLength=hpicfXcvrMdiPairCCableLength)
