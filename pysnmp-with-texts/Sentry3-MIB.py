#
# PySNMP MIB module Sentry3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Sentry3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, ObjectIdentity, TimeTicks, Counter32, Gauge32, Bits, MibIdentifier, enterprises, Counter64, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "ObjectIdentity", "TimeTicks", "Counter32", "Gauge32", "Bits", "MibIdentifier", "enterprises", "Counter64", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sentry3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1718, 3))
sentry3.setRevisions(('2016-01-25 16:30', '2014-06-25 12:00', '2014-01-16 18:00', '2013-11-25 09:00', '2013-09-16 10:00', '2013-02-14 09:30', '2012-11-07 14:00', '2012-04-18 14:00', '2012-01-04 11:00', '2011-07-11 16:40', '2011-06-15 13:00', '2011-05-05 11:00', '2010-07-07 12:15', '2009-03-10 16:00', '2008-05-07 15:20', '2007-07-09 14:45', '2007-01-09 14:10', '2006-07-20 12:00', '2006-06-12 09:30', '2005-07-27 11:05', '2005-02-18 11:45', '2005-01-07 12:20', '2004-12-09 13:20', '2004-11-11 12:00', '2003-11-20 13:00', '2003-10-23 19:00', '2003-10-02 11:00', '2003-08-27 16:00', '2003-03-28 17:00', '2003-03-27 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sentry3.setRevisionsDescriptions(('Adjusted the upper limit of infeedLoadValue to 60000. Adjusted the upper limit of infeedLoadHighThresh to 600. Adjusted the upper limit of infeedCapacity to 600.', 'Adjusted the upper limit of tempHumidSensorTempRecDelta to 54.', 'Added an eventInformationGroup with two new objects: eventStatusText and eventStatusCondition. Added these objects to all traps and updated the trap annotations to use the eventStatusText string value instead of the integer value of the status object in the trap.', 'Added a new object: tempHumidSensorHumidRecDelta.', 'Adjusted the upper limit of infeedLoadValue to 30000. Adjusted the upper limit of infeedLoadHighThresh to 300. Adjusted the upper limit of infeedCapacity to 300. Adjusted the upper limit of branchLoadValue to 4000.', "Added a branch table with new objects for branch status and current measurements. Added 'branchOnSense' and 'branchLoadSense' bits to infeedCapabilities. Added 'reading', 'offFuse', and 'onFuse' bits to infeedStatus. Added branchStatusEvent and branchLoadEvent notifications. Added 'outOfBalance' to the list of error conditions enumerated by the towerStatus object.", 'Adjusted the upper limit of systemVersion to 80. Adjusted the upper limit of infeedOutletCount and outletIndex to 64.', 'Adjusted the upper limit of outletIndex to 32.', "Added 'nvmFail' to the list of error conditions enumerated by the towerStatus object.", "Added 'outletControlInhibit' to the list of key-activated features enumerated by the systemFeatures object. Changed the upper limit of tempHumidSensorTempRecDelta to 18 to accommodate the maximum Fahrenheit value.", 'Added a new object: tempHumidSensorTempRecDelta.', "Added several new objects: systemOutletSeqInterval, systemOutletRebootDelay, systemConfigModifiedCount, outletWakeupState, and outletPostOnDelay. Removed the 'snmpPOPS' feature-key activation requirement from descriptions of POPS objects.", 'Added support for Per-Inlet Power Sensing (PIPS) hardware. Added several new objects: towerVACapacity, towerVACapacityUsed, towerActivePower, towerApparentPower, towerPowerFactor, towerEnergy, towerLineFrequency, infeedReactance, infeedPhaseCurrent, infeedPhaseVoltage, infeedCapacityUsed, infeedLineID, infeedLineToLineID, infeedPhaseID, infeedVACapacity, and infeedVACapacityUsed. Changed the UNITS of infeedEnergy. Adjusted the limits of INTEGER data types for various objects. Updated the descriptions of various infeedTable objects to distinguish between line and phase measurements with three-phase PIPS hardware.', "Added support for Per-Outlet Power Sensing (POPS) hardware. Added several new objects: systemFeatures, systemFeatureKey, infeedApparentPower, infeedPowerFactor, infeedCrestFactor, infeedEnergy, outletCapacity, outletVoltage, outletPower, outletApparentPower, outletPowerFactor, outletCrestFactor, and outletEnergy. Added 'voltageSense' and 'powerSense' bit definitions to the input feed and outlet capabilities objects. Increased the size of systemVersion to 50.", 'Added systemAreaUnit and systemPowerFactor objects. Renamed the systemWattsPerUnitArea object to systemWattsPerAreaUnit. Changed systemArea from read-only to read-write.', "Added support for products with fan rotation sensing and internal temperature sensing. Added 'fanSense' and 'tempSense' bit definitions to the tower capabilities object. Added 'fanFail' and 'overTemp' states to the towerStatus object. Modified the description of the towerStatusEvent trap to reflect these additions.", 'Added several new objects: systemArea, systemTotalPower, systemWattsPerUnitArea, towerProductSN, towerModelNumber, towerCapabilities, infeedCapacity, infeedVoltage, and infeedPower. Added six states to the outletControlState object.', 'Changed the upper limit of systemTowerCount from 2 to 4.', "Added a tempHumidSensorTempScale object to select either Celsius or Fahrenheit as the scale for temperature values. To accommodate the maximum Fahrenheit value, the upper limit of tempHumidSensorTempValue was changed to 2540, and the upper limit of tempHumidSensorTempHighThresh was changed to 254. Removed 'Celsius' from the UNITS clause and description of temperature objects. Added the tempHumidSensorTempScale object to the tempHumidSensorTempEvent trap. Changed the upper limit of towerIndex from 2 to 4, to accommodate new products with additional link capabilities.", 'Changed the upper limit of tempHumidSensorTempLowThresh to 123. Changed the upper limit of tempHumidSensorTempValue to 1235.', 'Added CDU products to the MIB description. Corrected syntax of outletID to specify SIZE(2..4).', "Added a 'fusedBranch' bit definition to the outlet capabilities object. Added 'offFuse' and 'onFuse' states to the outlet status object. Modified the descriptions of objects and traps to reflect support for these additions.", 'Corrected spelling errors. Removed product acronyms from the trap annotations.', 'Changed the upper limit of tempHumidSensorTempHighThresh to 123. Renamed systemSerialNumber to systemNICSerialNumber.', 'Changed the MIB description to reflect that there are multiple products in the Sentry product family supported by this MIB.', "Added annotations to the trap definitions. Added a 'reading' state to the outletStatus object. Renamed 'notificationGroup' to 'sentry3Traps'. Corrected the the description of the tempHumidSensorStatusEvent trap.", "Added a 'failSafe' bit definition to the infeed capabilities object, and corrected the definition of the 'defaultOff' infeed capabilities bit.", 'Added new bit definitions to the infeed and outlet capabilities objects.', 'Added environmental monitor objects and traps.', 'Initial release.',))
if mibBuilder.loadTexts: sentry3.setLastUpdated('201601251630Z')
if mibBuilder.loadTexts: sentry3.setOrganization('Server Technology, Inc.')
if mibBuilder.loadTexts: sentry3.setContactInfo('Server Technology, Inc. 1040 Sandhill Road Reno, NV 89521 Tel: (775) 284-2000 Fax: (775) 284-2065 Email: mibmaster@servertech.com')
if mibBuilder.loadTexts: sentry3.setDescription('This is the MIB module for the third generation of the Sentry product family. This includes the Sentry Remote Power Manager (RPM), Sentry Power Distribution Unit (PDU), Sentry Environmental Monitor (EM), Sentry Smart and Switched Cabinet Distribution Unit (CDU), and Sentry Switched -48 VDC.')
serverTech = MibIdentifier((1, 3, 6, 1, 4, 1, 1718))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 1))
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVersion.setStatus('current')
if mibBuilder.loadTexts: systemVersion.setDescription('The firmware version of the system.')
systemNICSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNICSerialNumber.setStatus('current')
if mibBuilder.loadTexts: systemNICSerialNumber.setDescription('The serial number of the network interface card in the system.')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
if mibBuilder.loadTexts: systemLocation.setDescription('The location of the system.')
systemTowerCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTowerCount.setStatus('current')
if mibBuilder.loadTexts: systemTowerCount.setDescription('The number of towers in the system.')
systemEnvMonCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonCount.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonCount.setDescription('The number of environmental monitors in the system.')
systemTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 150000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTotalPower.setStatus('current')
if mibBuilder.loadTexts: systemTotalPower.setDescription('The total power consumption of all of the input feeds in the system. A non-negative value indicates the total power consumption in Watts. A negative value indicates that the total power consumption was not available.')
systemArea = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('tenth area units').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemArea.setStatus('current')
if mibBuilder.loadTexts: systemArea.setDescription('The area that the footprint of the system occupies. A non-zero non-negative value indicates the area in tenths of area units as selected by the systemAreaUnit object. A zero or negative value indicates that the area was not available.')
systemWattsPerAreaUnit = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500000))).setUnits('Watts per area unit').setMaxAccess("readonly")
if mibBuilder.loadTexts: systemWattsPerAreaUnit.setStatus('current')
if mibBuilder.loadTexts: systemWattsPerAreaUnit.setDescription('The system Watts per area unit. A non-negative value indicates the power consumption per area unit as selected by the systemAreaUnit object. A negative value indicates that the power consumption per area unit was not available.')
systemAreaUnit = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("squareMeter", 0), ("squareFoot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAreaUnit.setStatus('current')
if mibBuilder.loadTexts: systemAreaUnit.setDescription('The unit of area for the systemArea and systemWattsPerAreaUnit objects. If the agent does not support this object, then the unit of area is a square foot.')
systemPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPowerFactor.setStatus('current')
if mibBuilder.loadTexts: systemPowerFactor.setDescription('The power factor used in power calculations performed by the system.')
systemFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 11), Bits().clone(namedValues=NamedValues(("smartLoadShedding", 0), ("snmpPOPS", 1), ("outletControlInhibit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFeatures.setStatus('current')
if mibBuilder.loadTexts: systemFeatures.setDescription('The key-activated features enabled in the system.')
systemFeatureKey = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFeatureKey.setStatus('current')
if mibBuilder.loadTexts: systemFeatureKey.setDescription('A valid feature key written to this object will enable a feature in the system. A valid feature key is in the form xxxx-xxxx-xxxx-xxxx. A read of this object returns an empty string.')
systemOutletSeqInterval = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOutletSeqInterval.setStatus('current')
if mibBuilder.loadTexts: systemOutletSeqInterval.setDescription('The power-on sequencing interval for all outlets.')
systemOutletRebootDelay = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOutletRebootDelay.setStatus('current')
if mibBuilder.loadTexts: systemOutletRebootDelay.setDescription('The reboot delay for all outlets.')
systemConfigModifiedCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigModifiedCount.setStatus('current')
if mibBuilder.loadTexts: systemConfigModifiedCount.setDescription('The total number of times the system configuration has changed.')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 2))
towerTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1), )
if mibBuilder.loadTexts: towerTable.setStatus('current')
if mibBuilder.loadTexts: towerTable.setDescription('A table of towers.')
towerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"))
if mibBuilder.loadTexts: towerEntry.setStatus('current')
if mibBuilder.loadTexts: towerEntry.setDescription('Row definition for the tower table.')
towerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: towerIndex.setStatus('current')
if mibBuilder.loadTexts: towerIndex.setDescription('Index for the tower table.')
towerID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerID.setStatus('current')
if mibBuilder.loadTexts: towerID.setDescription('The ID of the tower.')
towerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: towerName.setStatus('current')
if mibBuilder.loadTexts: towerName.setDescription('The name of the tower.')
towerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("noComm", 1), ("fanFail", 2), ("overTemp", 3), ("nvmFail", 4), ("outOfBalance", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerStatus.setStatus('current')
if mibBuilder.loadTexts: towerStatus.setDescription('The operational status of the tower.')
towerInfeedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerInfeedCount.setStatus('current')
if mibBuilder.loadTexts: towerInfeedCount.setDescription('The number of input feeds on the tower.')
towerProductSN = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerProductSN.setStatus('current')
if mibBuilder.loadTexts: towerProductSN.setDescription('The product serial number of the tower.')
towerModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerModelNumber.setStatus('current')
if mibBuilder.loadTexts: towerModelNumber.setDescription('The model number of the tower.')
towerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 8), Bits().clone(namedValues=NamedValues(("failSafe", 0), ("fuseSense", 1), ("directCurrent", 2), ("threePhase", 3), ("fanSense", 4), ("tempSense", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerCapabilities.setStatus('current')
if mibBuilder.loadTexts: towerCapabilities.setDescription('The capabilities of the tower.')
towerVACapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerVACapacity.setStatus('current')
if mibBuilder.loadTexts: towerVACapacity.setDescription('The total apparent power capacity of the tower circuit. A non-negative value indicates the maximum total apparent power in Volt-Amps. A negative value indicates that the total apparent power capacity was not available.')
towerVACapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500))).setUnits('tenth percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerVACapacityUsed.setStatus('current')
if mibBuilder.loadTexts: towerVACapacityUsed.setDescription('The used percentage of the tower circuit total apparent power capacity (towerApparentPower / towerVACapacity x 100). A non-negative value indicates the percentage of capacity used in tenths. A negative value indicates that the percentage of capacity used was not available.')
towerActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerActivePower.setStatus('current')
if mibBuilder.loadTexts: towerActivePower.setDescription('The total active power consumption of the tower circuit. A non-negative value indicates the total active power consumption in Watts. A negative value indicates that the total active power consumption was not available.')
towerApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerApparentPower.setStatus('current')
if mibBuilder.loadTexts: towerApparentPower.setDescription('The total apparent power consumption of the tower circuit. A non-negative value indicates the total apparent power consumption in Volt-Amps. A negative value indicates that the total apparent power consumption was not available.')
towerPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerPowerFactor.setStatus('current')
if mibBuilder.loadTexts: towerPowerFactor.setDescription('The overall power factor of the tower circuit. A non- negative value indicates the overall power factor in hundredths. A negative value indicates that the overall power factor was not able to be measured.')
towerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('Kilowatt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerEnergy.setStatus('current')
if mibBuilder.loadTexts: towerEnergy.setDescription('The total energy consumption of the tower circuit. A non- negative value indicates the total energy consumption in Kilowatt-Hours. A negative value indicates that the total energy consumption was not available.')
towerLineFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60))).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerLineFrequency.setStatus('current')
if mibBuilder.loadTexts: towerLineFrequency.setDescription('The frequency of the input feed line voltage. A non- negative value indicates the frequency in Hertz. A negative value indicates that the frequency was not available.')
infeedTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2), )
if mibBuilder.loadTexts: infeedTable.setStatus('current')
if mibBuilder.loadTexts: infeedTable.setDescription('A table of input feeds.')
infeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"), (0, "Sentry3-MIB", "infeedIndex"))
if mibBuilder.loadTexts: infeedEntry.setStatus('current')
if mibBuilder.loadTexts: infeedEntry.setDescription('Row definition for the input feed table.')
infeedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: infeedIndex.setStatus('current')
if mibBuilder.loadTexts: infeedIndex.setDescription('Index for the input feed table.')
infeedID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedID.setStatus('current')
if mibBuilder.loadTexts: infeedID.setDescription('The ID of the input feed.')
infeedName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: infeedName.setStatus('current')
if mibBuilder.loadTexts: infeedName.setDescription('The name of the input feed.')
infeedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1), ("powerControl", 2), ("failSafe", 3), ("defaultOff", 4), ("voltageSense", 5), ("powerSense", 6), ("branchOnSense", 7), ("branchLoadSense", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCapabilities.setStatus('current')
if mibBuilder.loadTexts: infeedCapabilities.setDescription('The capabilities of the input feed.')
infeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7), ("offFuse", 8), ("onFuse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedStatus.setStatus('current')
if mibBuilder.loadTexts: infeedStatus.setDescription("The status of the input feed line. If the infeedCapabilities 'onSense' bit is TRUE, then all of the states are supported and indicate the sensed state of the input feed. If the infeedCapabilities 'onSense' bit is FALSE, then only the 'on' and 'noComm' states are supported, and 'on' indicates a derived state, not a sensed state.")
infeedLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLoadStatus.setStatus('current')
if mibBuilder.loadTexts: infeedLoadStatus.setDescription("The status of the load measured on the input feed line. If the infeedCapabilities 'loadSense' bit is TRUE, then all of the states are supported. If the infeedCapabilities 'loadSense' bit is FALSE, then only the 'normal' and 'noComm' states are supported.")
infeedLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60000))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLoadValue.setStatus('current')
if mibBuilder.loadTexts: infeedLoadValue.setDescription('The load measured on the input feed line. A non-negative value indicates the measured load in hundredths of Amps. A negative value indicates that a load value was not able to be measured.')
infeedLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: infeedLoadHighThresh.setStatus('current')
if mibBuilder.loadTexts: infeedLoadHighThresh.setDescription('The load high threshold value of the input feed line in Amps.')
infeedOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedOutletCount.setStatus('current')
if mibBuilder.loadTexts: infeedOutletCount.setDescription('The number of controlled and/or monitored outlets on the input feed.')
infeedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCapacity.setStatus('current')
if mibBuilder.loadTexts: infeedCapacity.setDescription('The load capacity of the input feed line. A non-negative value indicates the maximum load in Amps. A negative value indicates that the capacity was not available.')
infeedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4800))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedVoltage.setStatus('current')
if mibBuilder.loadTexts: infeedVoltage.setDescription('The line-to-line voltage of the input feed. A non-negative value indicates the voltage in tenths of Volts. A negative value indicates that the voltage was not available.')
infeedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPower.setStatus('current')
if mibBuilder.loadTexts: infeedPower.setDescription('The active power consumption of the input feed phase. A non- negative value indicates the active power consumption in Watts. A negative value indicates that the active power consumption was not available.')
infeedApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedApparentPower.setStatus('current')
if mibBuilder.loadTexts: infeedApparentPower.setDescription('The apparent power consumption of the input feed phase. A non-negative value indicates the apparent power consumption in Volt-Amps. A negative value indicates that the apparent power consumption was not available.')
infeedPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPowerFactor.setStatus('current')
if mibBuilder.loadTexts: infeedPowerFactor.setDescription('The power factor of the input feed phase. A non-negative value indicates the power factor in hundredths. A negative value indicates that the power factor was not able to be measured.')
infeedCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCrestFactor.setStatus('current')
if mibBuilder.loadTexts: infeedCrestFactor.setDescription('The crest factor for the load of the input feed phase. A non-negative value indicates the crest factor in tenths. A negative value indicates that the crest factor was not able to be measured.')
infeedEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('tenth Kilowatt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedEnergy.setStatus('current')
if mibBuilder.loadTexts: infeedEnergy.setDescription('The energy consumption of the input feed phase. A non- negative value indicates the energy consumption in tenths of Kilowatt-Hours. A negative value indicates that the energy consumption was not available.')
infeedReactance = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("capacitive", 1), ("inductive", 2), ("resistive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedReactance.setStatus('current')
if mibBuilder.loadTexts: infeedReactance.setDescription('The characterization of the phase relation between the voltage and current of the input feed phase.')
infeedPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2640))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: infeedPhaseVoltage.setDescription('The voltage measured for the input feed phase. A non- negative value indicates the voltage in tenths of Volts. A negative value indicates that the voltage was not available.')
infeedPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPhaseCurrent.setStatus('current')
if mibBuilder.loadTexts: infeedPhaseCurrent.setDescription('The current measured for the input feed phase. A non- negative value indicates the measured load in hundredths of Amps. A negative value indicates that a load value was not able to be measured.')
infeedCapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500))).setUnits('tenth percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCapacityUsed.setStatus('current')
if mibBuilder.loadTexts: infeedCapacityUsed.setDescription('The used percentage of the input feed line load capacity (infeedLoadValue / infeedCapacity x 100). A non-negative value indicates the percentage of capacity used in tenths. A negative value indicates that the percentage of capacity used was not available.')
infeedLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLineID.setStatus('current')
if mibBuilder.loadTexts: infeedLineID.setDescription('The ID of the input feed line.')
infeedLineToLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLineToLineID.setStatus('current')
if mibBuilder.loadTexts: infeedLineToLineID.setDescription('The line-to-line ID of the input feed.')
infeedPhaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPhaseID.setStatus('current')
if mibBuilder.loadTexts: infeedPhaseID.setDescription('The ID of the input feed phase.')
infeedVACapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedVACapacity.setStatus('current')
if mibBuilder.loadTexts: infeedVACapacity.setDescription('The apparent power capacity of the input feed circuit. A non-negative value indicates the maximum apparent power in Volt-Amps. A negative value indicates that the apparent power capacity was not available.')
infeedVACapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500))).setUnits('tenth percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedVACapacityUsed.setStatus('current')
if mibBuilder.loadTexts: infeedVACapacityUsed.setDescription('The used percentage of the input feed circuit apparent power capacity (infeedApparentPower / infeedVACapacity x 100). A non-negative value indicates the percentage of capacity used in tenths. A negative value indicates that the percentage of capacity used was not available.')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
if mibBuilder.loadTexts: outletTable.setDescription('A table of outlets.')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"), (0, "Sentry3-MIB", "infeedIndex"), (0, "Sentry3-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
if mibBuilder.loadTexts: outletEntry.setDescription('Row definition for the outlet table.')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: outletIndex.setStatus('current')
if mibBuilder.loadTexts: outletIndex.setDescription('Index for the outlet table.')
outletID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletID.setStatus('current')
if mibBuilder.loadTexts: outletID.setDescription('The ID of the outlet.')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
if mibBuilder.loadTexts: outletName.setDescription('The name of the outlet.')
outletCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1), ("powerControl", 2), ("shutdown", 3), ("defaultOn", 4), ("ownInfeed", 5), ("fusedBranch", 6), ("voltageSense", 7), ("powerSense", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCapabilities.setStatus('current')
if mibBuilder.loadTexts: outletCapabilities.setDescription('The capabilities of the outlet.')
outletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7), ("offFuse", 8), ("onFuse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatus.setStatus('current')
if mibBuilder.loadTexts: outletStatus.setDescription("The status of the outlet. If the outletCapabilities 'onSense' bit is TRUE, then the state indicates the sensed state of the outlet, not a derived state, and 'offError' and 'onError' are supported to indicate a mismatch between the control and sensed state. If the outletCapabilities 'fusedBranch' bit is TRUE, then the outlet is on a fused branch circuit that can detect the fuse state, and 'offFuse' and 'onFuse' are supported to indicate a fuse error.")
outletLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLoadStatus.setStatus('current')
if mibBuilder.loadTexts: outletLoadStatus.setDescription("The status of the load measured on the outlet. If the outletCapabilities 'loadSense' bit is TRUE, then all of the states are supported. If the outletCapabilities 'loadSense' bit is FALSE, then only the 'normal' and 'noComm' states are supported.")
outletLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLoadValue.setStatus('current')
if mibBuilder.loadTexts: outletLoadValue.setDescription('The load measured on the outlet. A non-negative value indicates the measured load in hundredths of Amps. A negative value indicates that a load value was not able to be measured.')
outletLoadLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLoadLowThresh.setStatus('current')
if mibBuilder.loadTexts: outletLoadLowThresh.setDescription('The load low threshold value of the outlet in Amps.')
outletLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLoadHighThresh.setStatus('current')
if mibBuilder.loadTexts: outletLoadHighThresh.setDescription('The load high threshold value of the outlet in Amps.')
outletControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("idleOff", 0), ("idleOn", 1), ("wakeOff", 2), ("wakeOn", 3), ("off", 4), ("on", 5), ("lockedOff", 6), ("lockedOn", 7), ("reboot", 8), ("shutdown", 9), ("pendOn", 10), ("pendOff", 11), ("minimumOff", 12), ("minimumOn", 13), ("eventOff", 14), ("eventOn", 15), ("eventReboot", 16), ("eventShutdown", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControlState.setStatus('current')
if mibBuilder.loadTexts: outletControlState.setDescription("The control state of the outlet. The supported states are dependent upon the outletCapabilities 'powerControl' and 'shutdown' bits, as well as the supported features of the firmware version.")
outletControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("on", 1), ("off", 2), ("reboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlAction.setStatus('current')
if mibBuilder.loadTexts: outletControlAction.setDescription("An action to change the control state of the outlet. If the outletCapabilities 'powerControl' bit is TRUE, then the 'on', 'off', and 'reboot' actions can be used to change the control state of the outlet. If the outletCapabilities 'powerControl' bit is FALSE, then the actions have no effect.")
outletCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCapacity.setStatus('current')
if mibBuilder.loadTexts: outletCapacity.setDescription('The load capacity of the outlet. A non-negative value indicates the maximum load in Amps. A negative value indicates that the capacity was not available.')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2640))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
if mibBuilder.loadTexts: outletVoltage.setDescription('The voltage of the outlet. A non-negative value indicates the voltage in tenths of Volts. A negative value indicates that the voltage was not available.')
outletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPower.setStatus('current')
if mibBuilder.loadTexts: outletPower.setDescription('The active power consumption of the device plugged into the outlet. A non-negative value indicates the active power consumption in Watts. A negative value indicates that the active power consumption was not available.')
outletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletApparentPower.setStatus('current')
if mibBuilder.loadTexts: outletApparentPower.setDescription('The apparent power consumption of the device plugged into the outlet. A non-negative value indicates the apparent power consumption in Volt-Amps. A negative value indicates that the apparent power consumption was not available.')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: outletPowerFactor.setDescription('The power factor of the device plugged into the outlet. A non-negative value indicates the power factor in hundredths. A negative value indicates that the power factor was not able to be measured.')
outletCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCrestFactor.setStatus('current')
if mibBuilder.loadTexts: outletCrestFactor.setDescription('The crest factor for the load of the device plugged into the outlet. A non-negative value indicates the crest factor in tenths. A negative value indicates that the crest factor was not able to be measured.')
outletEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('Watt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletEnergy.setStatus('current')
if mibBuilder.loadTexts: outletEnergy.setDescription('The energy consumption of the device plugged into the outlet. A non-negative value indicates the energy consumption in Watt-Hours. A negative value indicates that the energy consumption was not available.')
outletWakeupState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("last", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletWakeupState.setStatus('current')
if mibBuilder.loadTexts: outletWakeupState.setDescription('The wakeup state of the outlet.')
outletPostOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPostOnDelay.setStatus('current')
if mibBuilder.loadTexts: outletPostOnDelay.setDescription('The post-on delay of the outlet.')
envMonTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4), )
if mibBuilder.loadTexts: envMonTable.setStatus('current')
if mibBuilder.loadTexts: envMonTable.setDescription('A table of environmental monitors.')
envMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1), ).setIndexNames((0, "Sentry3-MIB", "envMonIndex"))
if mibBuilder.loadTexts: envMonEntry.setStatus('current')
if mibBuilder.loadTexts: envMonEntry.setDescription('Row definition for the environmental monitor table.')
envMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: envMonIndex.setStatus('current')
if mibBuilder.loadTexts: envMonIndex.setDescription('Index for the environmental monitor table.')
envMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonID.setStatus('current')
if mibBuilder.loadTexts: envMonID.setDescription('The ID of the environmental monitor.')
envMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonName.setStatus('current')
if mibBuilder.loadTexts: envMonName.setDescription('The name of the environmental monitor.')
envMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("noComm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonStatus.setStatus('current')
if mibBuilder.loadTexts: envMonStatus.setDescription('The operational status of the environmental monitor.')
envMonWaterSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonWaterSensorName.setStatus('current')
if mibBuilder.loadTexts: envMonWaterSensorName.setDescription('The name of the water sensor.')
envMonWaterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonWaterSensorStatus.setStatus('current')
if mibBuilder.loadTexts: envMonWaterSensorStatus.setDescription('The status of the water sensor.')
envMonADCName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonADCName.setStatus('current')
if mibBuilder.loadTexts: envMonADCName.setDescription('The name of the analog-to-digital converter.')
envMonADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("reading", 1), ("countLow", 2), ("countHigh", 3), ("readError", 4), ("noComm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonADCStatus.setStatus('current')
if mibBuilder.loadTexts: envMonADCStatus.setDescription('The status of the analog-to-digital converter.')
envMonADCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonADCCount.setStatus('current')
if mibBuilder.loadTexts: envMonADCCount.setDescription('The 8-bit count value from the analog-to-digital converter. A non-negative value indicates the digital value retrieved from the ADC. A negative value indicates that a digital value was not able to be retrieved.')
envMonADCLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonADCLowThresh.setStatus('current')
if mibBuilder.loadTexts: envMonADCLowThresh.setDescription('The 8-bit count low threshold value of the analog-to-digital converter.')
envMonADCHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonADCHighThresh.setStatus('current')
if mibBuilder.loadTexts: envMonADCHighThresh.setDescription('The 8-bit count high threshold value of the analog-to-digital converter.')
envMonTempHumidSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonTempHumidSensorCount.setStatus('current')
if mibBuilder.loadTexts: envMonTempHumidSensorCount.setDescription('The number of temperature/humidity sensors on the environmental monitor.')
envMonContactClosureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonContactClosureCount.setStatus('current')
if mibBuilder.loadTexts: envMonContactClosureCount.setDescription('The number of contact closures on the environmental monitor.')
tempHumidSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5), )
if mibBuilder.loadTexts: tempHumidSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTable.setDescription('A table of temperature/humidity sensors.')
tempHumidSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1), ).setIndexNames((0, "Sentry3-MIB", "envMonIndex"), (0, "Sentry3-MIB", "tempHumidSensorIndex"))
if mibBuilder.loadTexts: tempHumidSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorEntry.setDescription('Row definition for the temperature/humidity sensor table.')
tempHumidSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: tempHumidSensorIndex.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorIndex.setDescription('Index for the temperature/humidity sensor table.')
tempHumidSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorID.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorID.setDescription('The ID of the temperature/humidity sensor.')
tempHumidSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorName.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorName.setDescription('The name of the temperature/humidity sensor.')
tempHumidSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("found", 0), ("notFound", 1), ("lost", 2), ("noComm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorStatus.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorStatus.setDescription('The operational status of the temperature/humidity sensor.')
tempHumidSensorTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notFound", 1), ("reading", 2), ("tempLow", 3), ("tempHigh", 4), ("readError", 5), ("lost", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorTempStatus.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempStatus.setDescription('The status of the temperature sensor.')
tempHumidSensorTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2540))).setUnits('tenth degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorTempValue.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempValue.setDescription('The temperature measured by the sensor. A non-negative value indicates the measured temperature in tenths of degrees, using the scale selected by tempHumidSensorTempScale. If the agent does not support the tempHumidSensorTempScale object, then the temperature scale used is Celsius. A negative value indicates that a temperature value was not able to be measured.')
tempHumidSensorTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempLowThresh.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempLowThresh.setDescription('The temperature low threshold value of the sensor in degrees, using the scale selected by tempHumidSensorTempScale. If the agent does not support the tempHumidSensorTempScale object, then the temperature scale used is Celsius.')
tempHumidSensorTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempHighThresh.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempHighThresh.setDescription('The temperature high threshold value of the sensor in degrees, using the scale selected by tempHumidSensorTempScale. If the agent does not support the tempHumidSensorTempScale object, then the temperature scale used is Celsius.')
tempHumidSensorHumidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notFound", 1), ("reading", 2), ("humidLow", 3), ("humidHigh", 4), ("readError", 5), ("lost", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorHumidStatus.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorHumidStatus.setDescription('The status of the humidity sensor.')
tempHumidSensorHumidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage relative humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorHumidValue.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorHumidValue.setDescription('The humidity measured by the sensor. A non-negative value indicates the measured humidity in percentage relative humidity. A negative value indicates that a humidity value was not able to be measured.')
tempHumidSensorHumidLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorHumidLowThresh.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorHumidLowThresh.setDescription('The humidity low threshold value of the sensor in percentage relative humidity.')
tempHumidSensorHumidHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorHumidHighThresh.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorHumidHighThresh.setDescription('The humidity low threshold value of the sensor in percentage relative humidity.')
tempHumidSensorTempScale = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celsius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempScale.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempScale.setDescription('The scale used for temperature values. This is a global setting for all temperature values in the system. If the agent does not support this object, then the temperature scale used is Celsius.')
tempHumidSensorTempRecDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempRecDelta.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempRecDelta.setDescription('The temperature recovery delta (hysteresis) value of the sensor in degrees, using the scale selected by tempHumidSensorTempScale.')
tempHumidSensorHumidRecDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorHumidRecDelta.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorHumidRecDelta.setDescription('The humidity recovery delta (hysteresis) value of the sensor in percentage relative humidity.')
contactClosureTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6), )
if mibBuilder.loadTexts: contactClosureTable.setStatus('current')
if mibBuilder.loadTexts: contactClosureTable.setDescription('A table of contact closures.')
contactClosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1), ).setIndexNames((0, "Sentry3-MIB", "envMonIndex"), (0, "Sentry3-MIB", "contactClosureIndex"))
if mibBuilder.loadTexts: contactClosureEntry.setStatus('current')
if mibBuilder.loadTexts: contactClosureEntry.setDescription('Row definition for the contact closure table.')
contactClosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: contactClosureIndex.setStatus('current')
if mibBuilder.loadTexts: contactClosureIndex.setDescription('Index for the contact closure table.')
contactClosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosureID.setStatus('current')
if mibBuilder.loadTexts: contactClosureID.setDescription('The ID of the contact closure.')
contactClosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosureName.setStatus('current')
if mibBuilder.loadTexts: contactClosureName.setDescription('The name of the contact closure.')
contactClosureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosureStatus.setStatus('current')
if mibBuilder.loadTexts: contactClosureStatus.setDescription('The status of the contact closure.')
branchTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7), )
if mibBuilder.loadTexts: branchTable.setStatus('current')
if mibBuilder.loadTexts: branchTable.setDescription('A table of branches.')
branchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"), (0, "Sentry3-MIB", "infeedIndex"), (0, "Sentry3-MIB", "branchIndex"))
if mibBuilder.loadTexts: branchEntry.setStatus('current')
if mibBuilder.loadTexts: branchEntry.setDescription('Row definition for the branch table.')
branchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: branchIndex.setStatus('current')
if mibBuilder.loadTexts: branchIndex.setDescription('Index for the branch table.')
branchID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchID.setStatus('current')
if mibBuilder.loadTexts: branchID.setDescription('The ID of the branch.')
branchName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: branchName.setStatus('current')
if mibBuilder.loadTexts: branchName.setDescription('The name of the branch.')
branchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchCapabilities.setStatus('current')
if mibBuilder.loadTexts: branchCapabilities.setDescription('The capabilities of the branch.')
branchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7), ("offFuse", 8), ("onFuse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchStatus.setStatus('current')
if mibBuilder.loadTexts: branchStatus.setDescription('The status of the branch.')
branchLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchLoadStatus.setStatus('current')
if mibBuilder.loadTexts: branchLoadStatus.setDescription('The status of the load measured on the branch.')
branchLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4000))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: branchLoadValue.setStatus('current')
if mibBuilder.loadTexts: branchLoadValue.setDescription('The load measured on the branch. A non-negative value indicates the measured load in hundredths of Amps. A negative value indicates that a load value was not able to be measured.')
branchLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: branchLoadHighThresh.setStatus('current')
if mibBuilder.loadTexts: branchLoadHighThresh.setDescription('The load high threshold value of the branch in Amps.')
branchCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 40))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: branchCapacity.setStatus('current')
if mibBuilder.loadTexts: branchCapacity.setDescription('The load capacity of the branch. A non-negative value indicates the maximum load in Amps. A negative value indicates that the capacity was not available.')
eventInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 99))
eventStatusText = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 99, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventStatusText.setStatus('current')
if mibBuilder.loadTexts: eventStatusText.setDescription('The text representation of the enumerated integer value of the status object included in a trap. The value of this object is set only when sent with a trap. A get of this object will return a NULL string.')
eventStatusCondition = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 99, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonError", 0), ("error", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventStatusCondition.setStatus('current')
if mibBuilder.loadTexts: eventStatusCondition.setDescription('The condition of the enumerated integer value of the status object included in a trap. The value of this object is set only when sent with a trap. A get of this object will return zero.')
sentry3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 100))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0))
towerStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 1)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "towerID"), ("Sentry3-MIB", "towerName"), ("Sentry3-MIB", "towerStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: towerStatusEvent.setStatus('current')
if mibBuilder.loadTexts: towerStatusEvent.setDescription("Tower status event. If enabled, this trap is sent when the towerStatus indicates an error state ('noComm', 'fanFail', 'overTemp', 'nvmFail', or 'outOfBalance'). This trap is repeated periodically while the towerStatus remains in an error state. If the towerStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error towerStatus, and then stops being repeated. While the towerStatus indicates a 'noComm' error state, all status and load traps are suppressed for input feeds and outlets on the tower.")
infeedStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 2)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "infeedID"), ("Sentry3-MIB", "infeedName"), ("Sentry3-MIB", "infeedStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: infeedStatusEvent.setStatus('current')
if mibBuilder.loadTexts: infeedStatusEvent.setDescription("Input feed status event. If enabled, this trap is sent when the infeedStatus indicates an error state ('offError', 'onError', 'noComm', 'offFuse', or 'onFuse'). This trap is repeated periodically while the infeedStatus remains in an error state. If the infeedStatus returns to a non-error state ('off' or 'on'), this trap is sent once more with the non-error infeedStatus, and then stops being repeated. While the infeedStatus indicates an error state, load traps are suppressed for the input feed, and, if the infeedCapabilities 'failSafe' bit is FALSE, all status and load traps are suppressed for outlets on the input feed.")
infeedLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 3)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "infeedID"), ("Sentry3-MIB", "infeedName"), ("Sentry3-MIB", "infeedLoadStatus"), ("Sentry3-MIB", "infeedLoadValue"), ("Sentry3-MIB", "infeedLoadHighThresh"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: infeedLoadEvent.setStatus('current')
if mibBuilder.loadTexts: infeedLoadEvent.setDescription("Input feed load event. If enabled, this trap is sent when the infeedLoadStatus indicates an error state ('loadLow', 'loadHigh', 'overLoad', 'readError', or 'noComm'). This trap is repeated periodically while the infeedLoadStatus remains in an error state. If the infeedLoadStatus returns to a non-error state ('normal' or 'notOn'), this trap is sent once more with the non-error infeedLoadStatus, and then stops being repeated.")
outletStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 4)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "outletID"), ("Sentry3-MIB", "outletName"), ("Sentry3-MIB", "outletStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: outletStatusEvent.setStatus('current')
if mibBuilder.loadTexts: outletStatusEvent.setDescription("Outlet status event. If enabled, this trap is sent when the outletStatus indicates an error state ('offError', 'onError', 'noComm', 'offFuse', or 'onFuse'). This trap is repeated periodically while the outletStatus remains in an error state. If the outletStatus returns to a non-error state ('off' or 'on'), this trap is sent once more with the non-error outletStatus, and then stops being repeated. While the outletStatus indicates an error state, load traps are suppressed for the outlet.")
outletLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 5)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "outletID"), ("Sentry3-MIB", "outletName"), ("Sentry3-MIB", "outletLoadStatus"), ("Sentry3-MIB", "outletLoadValue"), ("Sentry3-MIB", "outletLoadLowThresh"), ("Sentry3-MIB", "outletLoadHighThresh"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: outletLoadEvent.setStatus('current')
if mibBuilder.loadTexts: outletLoadEvent.setDescription("Outlet load event. If enabled, this trap is sent when the outletLoadStatus indicates an error state ('loadLow', 'loadHigh', 'overLoad', 'readError', or 'noComm'). This trap is repeated periodically while the outletLoadStatus remains in an error state. If the outletLoadStatus returns to a non-error state ('normal' or 'notOn'), this trap is sent once more with the non-error outletLoadStatus, and then stops being repeated.")
outletChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 6)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "outletID"), ("Sentry3-MIB", "outletName"), ("Sentry3-MIB", "outletStatus"), ("Sentry3-MIB", "outletControlState"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: outletChangeEvent.setStatus('current')
if mibBuilder.loadTexts: outletChangeEvent.setDescription("Outlet on/off change event. If enabled, this trap is sent when the outletStatus changes from any 'on' state ('on', 'onWait', 'onError', or 'onFuse') to any 'off' state ('off', 'offWait', 'offError', or 'offFuse'), and vice-versa.")
envMonStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 7)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "envMonID"), ("Sentry3-MIB", "envMonName"), ("Sentry3-MIB", "envMonStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: envMonStatusEvent.setStatus('current')
if mibBuilder.loadTexts: envMonStatusEvent.setDescription("Environmental monitor status event. If enabled, this trap is sent when the envMonStatus indicates an error state ('noComm'). This trap is repeated periodically while the envMonStatus remains in an error state. If the envMonStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error envMonStatus, and then stops being repeated. While the envMonStatus indicates an error state, all status traps are suppressed for the water sensor, ADC, temperature/ humidity sensors, and contact closures on the environmental monitor.")
envMonWaterSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 8)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "envMonID"), ("Sentry3-MIB", "envMonWaterSensorName"), ("Sentry3-MIB", "envMonWaterSensorStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: envMonWaterSensorEvent.setStatus('current')
if mibBuilder.loadTexts: envMonWaterSensorEvent.setDescription("Environmental monitor water sensor event. If enabled, this trap is sent when the envMonWaterSensorStatus indicates an error state ('alarm'). This trap is repeated periodically while the envMonWaterSensorStatus remains in an error state. If the envMonWaterSensorStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error envMonWaterSensorStatus, and then stops being repeated.")
envMonADCEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 9)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "envMonID"), ("Sentry3-MIB", "envMonADCName"), ("Sentry3-MIB", "envMonADCStatus"), ("Sentry3-MIB", "envMonADCCount"), ("Sentry3-MIB", "envMonADCLowThresh"), ("Sentry3-MIB", "envMonADCHighThresh"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: envMonADCEvent.setStatus('current')
if mibBuilder.loadTexts: envMonADCEvent.setDescription("Environmental monitor analog-to-digital converter event. If enabled, this trap is sent when the envMonADCStatus indicates an error state ('countLow' or 'countHigh'). This trap is repeated periodically while the envMonADCStatus remains in an error state. If the envMonADCStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error envMonADCStatus, and then stops being repeated.")
tempHumidSensorStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 10)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "tempHumidSensorID"), ("Sentry3-MIB", "tempHumidSensorName"), ("Sentry3-MIB", "tempHumidSensorStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: tempHumidSensorStatusEvent.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorStatusEvent.setDescription("Temperature/humidity sensor status event. If enabled, this trap is sent when the tempHumidSensorStatus indicates an error state ('lost'). This trap is repeated periodically while the tempHumidSensorStatus remains in an error state. If the tempHumidSensorStatus returns to a non-error state ('found'), this trap is sent once more with the non-error tempHumidSensorStatus, and then stops being repeated. While the tempHumidSensorStatus indicates an error state, all temperature and humidity status traps are suppressed for the temperature/humidity sensor.")
tempHumidSensorTempEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 11)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "tempHumidSensorID"), ("Sentry3-MIB", "tempHumidSensorName"), ("Sentry3-MIB", "tempHumidSensorTempStatus"), ("Sentry3-MIB", "tempHumidSensorTempValue"), ("Sentry3-MIB", "tempHumidSensorTempLowThresh"), ("Sentry3-MIB", "tempHumidSensorTempHighThresh"), ("Sentry3-MIB", "tempHumidSensorTempScale"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: tempHumidSensorTempEvent.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorTempEvent.setDescription("Temperature/humidity sensor temperature event. If enabled, this trap is sent when the tempHumidSensorTempStatus indicates an error state ('tempLow' or 'tempHigh'). This trap is repeated periodically while the tempHumidSensorTempStatus remains in an error state. If the tempHumidSensorTempStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error tempHumidSensorTempStatus, and then stops being repeated.")
tempHumidSensorHumidEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 12)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "tempHumidSensorID"), ("Sentry3-MIB", "tempHumidSensorName"), ("Sentry3-MIB", "tempHumidSensorHumidStatus"), ("Sentry3-MIB", "tempHumidSensorHumidValue"), ("Sentry3-MIB", "tempHumidSensorHumidLowThresh"), ("Sentry3-MIB", "tempHumidSensorHumidHighThresh"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: tempHumidSensorHumidEvent.setStatus('current')
if mibBuilder.loadTexts: tempHumidSensorHumidEvent.setDescription("Temperature/humidity sensor humidity event. If enabled, this trap is sent when the tempHumidSensorHumidStatus indicates an error state ('humidLow' or 'humidHigh'). This trap is repeated periodically while the tempHumidSensorHumidStatus remains in an error state. If the tempHumidSensorHumidStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error tempHumidSensorHumidStatus, and then stops being repeated.")
contactClosureEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 13)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "contactClosureID"), ("Sentry3-MIB", "contactClosureName"), ("Sentry3-MIB", "contactClosureStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: contactClosureEvent.setStatus('current')
if mibBuilder.loadTexts: contactClosureEvent.setDescription("Contact closure event. If enabled, this trap is sent when the contactClosureStatus indicates an error state ('alarm'). This trap is repeated periodically while the contactClosureStatus remains in an error state. If the contactClosureStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error contactClosureStatus, and then stops being repeated.")
branchStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 14)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "branchID"), ("Sentry3-MIB", "branchName"), ("Sentry3-MIB", "branchStatus"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: branchStatusEvent.setStatus('current')
if mibBuilder.loadTexts: branchStatusEvent.setDescription("Branch status event. If enabled, this trap is sent when the branchStatus indicates an error state ('offError', 'onError', 'noComm', 'offFuse', or 'onFuse'). This trap is repeated periodically while the branchStatus remains in an error state. If the branchStatus returns to a non-error state ('off' or 'on'), this trap is sent once more with the non-error branchStatus, and then stops being repeated. While the branchStatus indicates an error state, load traps are suppressed for the branch.")
branchLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 15)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "branchID"), ("Sentry3-MIB", "branchName"), ("Sentry3-MIB", "branchLoadStatus"), ("Sentry3-MIB", "branchLoadValue"), ("Sentry3-MIB", "branchLoadHighThresh"), ("Sentry3-MIB", "eventStatusText"), ("Sentry3-MIB", "eventStatusCondition"))
if mibBuilder.loadTexts: branchLoadEvent.setStatus('current')
if mibBuilder.loadTexts: branchLoadEvent.setDescription("Branch load event. If enabled, this trap is sent when the branchLoadStatus indicates an error state ('loadLow', 'loadHigh', 'overLoad', 'readError', or 'noComm'). This trap is repeated periodically while the branchLoadStatus remains in an error state. If the branchLoadStatus returns to a non-error state ('normal' or 'notOn'), this trap is sent once more with the non-error branchLoadStatus, and then stops being repeated.")
mibBuilder.exportSymbols("Sentry3-MIB", towerModelNumber=towerModelNumber, tempHumidSensorTempValue=tempHumidSensorTempValue, systemArea=systemArea, outletCapacity=outletCapacity, systemOutletSeqInterval=systemOutletSeqInterval, branchCapabilities=branchCapabilities, branchLoadStatus=branchLoadStatus, systemNICSerialNumber=systemNICSerialNumber, envMonADCHighThresh=envMonADCHighThresh, sentry3=sentry3, infeedLoadValue=infeedLoadValue, infeedLoadHighThresh=infeedLoadHighThresh, infeedVoltage=infeedVoltage, infeedCapacity=infeedCapacity, PYSNMP_MODULE_ID=sentry3, outletPowerFactor=outletPowerFactor, towerStatus=towerStatus, envMonWaterSensorName=envMonWaterSensorName, outletChangeEvent=outletChangeEvent, branchLoadHighThresh=branchLoadHighThresh, towerVACapacityUsed=towerVACapacityUsed, infeedStatus=infeedStatus, outletTable=outletTable, infeedVACapacityUsed=infeedVACapacityUsed, outletStatusEvent=outletStatusEvent, contactClosureEntry=contactClosureEntry, towerActivePower=towerActivePower, branchName=branchName, envMonStatus=envMonStatus, infeedPhaseVoltage=infeedPhaseVoltage, branchEntry=branchEntry, branchTable=branchTable, outletStatus=outletStatus, infeedLoadStatus=infeedLoadStatus, tempHumidSensorName=tempHumidSensorName, tempHumidSensorTempStatus=tempHumidSensorTempStatus, tempHumidSensorID=tempHumidSensorID, towerPowerFactor=towerPowerFactor, outletPostOnDelay=outletPostOnDelay, envMonWaterSensorEvent=envMonWaterSensorEvent, branchStatusEvent=branchStatusEvent, outletWakeupState=outletWakeupState, infeedIndex=infeedIndex, outletLoadHighThresh=outletLoadHighThresh, towerApparentPower=towerApparentPower, outletControlState=outletControlState, systemWattsPerAreaUnit=systemWattsPerAreaUnit, branchLoadValue=branchLoadValue, outletCrestFactor=outletCrestFactor, outletLoadEvent=outletLoadEvent, tempHumidSensorHumidValue=tempHumidSensorHumidValue, envMonEntry=envMonEntry, outletIndex=outletIndex, outletApparentPower=outletApparentPower, outletPower=outletPower, contactClosureStatus=contactClosureStatus, towerLineFrequency=towerLineFrequency, envMonContactClosureCount=envMonContactClosureCount, systemOutletRebootDelay=systemOutletRebootDelay, towerEnergy=towerEnergy, envMonTable=envMonTable, towerStatusEvent=towerStatusEvent, contactClosureName=contactClosureName, systemAreaUnit=systemAreaUnit, tempHumidSensorTempScale=tempHumidSensorTempScale, tempHumidSensorTempLowThresh=tempHumidSensorTempLowThresh, outletLoadStatus=outletLoadStatus, towerIndex=towerIndex, infeedOutletCount=infeedOutletCount, systemPowerFactor=systemPowerFactor, systemFeatureKey=systemFeatureKey, infeedReactance=infeedReactance, systemTowerCount=systemTowerCount, outletEnergy=outletEnergy, infeedID=infeedID, outletID=outletID, envMonADCLowThresh=envMonADCLowThresh, infeedCapabilities=infeedCapabilities, infeedEnergy=infeedEnergy, tempHumidSensorHumidStatus=tempHumidSensorHumidStatus, towerProductSN=towerProductSN, systemVersion=systemVersion, towerTable=towerTable, envMonWaterSensorStatus=envMonWaterSensorStatus, tempHumidSensorStatusEvent=tempHumidSensorStatusEvent, envMonADCCount=envMonADCCount, tempHumidSensorStatus=tempHumidSensorStatus, tempHumidSensorTempRecDelta=tempHumidSensorTempRecDelta, envMonADCEvent=envMonADCEvent, towerName=towerName, branchCapacity=branchCapacity, outletEntry=outletEntry, envMonTempHumidSensorCount=envMonTempHumidSensorCount, systemConfigModifiedCount=systemConfigModifiedCount, envMonName=envMonName, tempHumidSensorIndex=tempHumidSensorIndex, towerInfeedCount=towerInfeedCount, envMonID=envMonID, systemEnvMonCount=systemEnvMonCount, envMonADCName=envMonADCName, towerEntry=towerEntry, contactClosureIndex=contactClosureIndex, tempHumidSensorTempEvent=tempHumidSensorTempEvent, infeedEntry=infeedEntry, outletVoltage=outletVoltage, outletLoadValue=outletLoadValue, tempHumidSensorHumidLowThresh=tempHumidSensorHumidLowThresh, infeedLineID=infeedLineID, branchIndex=branchIndex, outletLoadLowThresh=outletLoadLowThresh, contactClosureID=contactClosureID, branchStatus=branchStatus, tempHumidSensorHumidHighThresh=tempHumidSensorHumidHighThresh, eventStatusText=eventStatusText, infeedPhaseID=infeedPhaseID, contactClosureTable=contactClosureTable, systemFeatures=systemFeatures, infeedPower=infeedPower, infeedApparentPower=infeedApparentPower, tempHumidSensorHumidEvent=tempHumidSensorHumidEvent, tempHumidSensorEntry=tempHumidSensorEntry, systemGroup=systemGroup, towerVACapacity=towerVACapacity, outletName=outletName, envMonIndex=envMonIndex, events=events, infeedLineToLineID=infeedLineToLineID, infeedCapacityUsed=infeedCapacityUsed, eventInformationGroup=eventInformationGroup, infeedName=infeedName, serverTech=serverTech, tempHumidSensorHumidRecDelta=tempHumidSensorHumidRecDelta, outletCapabilities=outletCapabilities, envMonADCStatus=envMonADCStatus, infeedLoadEvent=infeedLoadEvent, branchLoadEvent=branchLoadEvent, branchID=branchID, tempHumidSensorTable=tempHumidSensorTable, tempHumidSensorTempHighThresh=tempHumidSensorTempHighThresh, sentry3Traps=sentry3Traps, infeedStatusEvent=infeedStatusEvent, infeedPowerFactor=infeedPowerFactor, contactClosureEvent=contactClosureEvent, systemTotalPower=systemTotalPower, infeedCrestFactor=infeedCrestFactor, towerCapabilities=towerCapabilities, envMonStatusEvent=envMonStatusEvent, systemLocation=systemLocation, infeedPhaseCurrent=infeedPhaseCurrent, infeedVACapacity=infeedVACapacity, eventStatusCondition=eventStatusCondition, outletControlAction=outletControlAction, towerID=towerID, infeedTable=infeedTable, systemTables=systemTables)
