#
# PySNMP MIB module HM2-DIAGNOSTIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-DIAGNOSTIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hm2IfacePhysIndex, = mibBuilder.importSymbols("HM2-DEVMGMT-MIB", "hm2IfacePhysIndex")
hm2PSID, = mibBuilder.importSymbols("HM2-PWRMGMT-MIB", "hm2PSID")
HmEnabledStatus, HmTimeSeconds1970, hm2ConfigurationMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "HmTimeSeconds1970", "hm2ConfigurationMibs")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Counter32, IpAddress, ModuleIdentity, TimeTicks, MibIdentifier, ObjectIdentity, Integer32, Unsigned32, iso, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Counter32", "IpAddress", "ModuleIdentity", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Integer32", "Unsigned32", "iso", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hm2DiagnosticMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22))
hm2DiagnosticMib.setRevisions(('2012-08-28 00:00', '2011-03-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2DiagnosticMib.setRevisionsDescriptions((' Type of LEDs available updated. ', 'Initial version.',))
if mibBuilder.loadTexts: hm2DiagnosticMib.setLastUpdated('201208280000Z')
if mibBuilder.loadTexts: hm2DiagnosticMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2DiagnosticMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2DiagnosticMib.setDescription('Hirschmann Diagnostic MIB. Copyright (C) 2012. All Rights Reserved.')
class Hm2LedType(TextualConvention, Integer32):
    description = 'Types of LEDs available'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("power", 1), ("status", 2), ("rm", 3), ("envm", 4), ("i1", 5), ("i2", 6))

class Hm2LedStatus(TextualConvention, Integer32):
    description = 'Status of LEDs available'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("off", 1), ("greenSolid", 2), ("greenBlink1", 3), ("greenBlink3", 4), ("greenBlink4", 5), ("greenBlink5", 6), ("greenBlink5i", 7), ("yellowSolid", 8), ("yellowBlink1", 9), ("yellowBlink3", 10), ("yellowBlink4", 11), ("yellowBlink5", 12), ("redSolid", 13), ("redBlink1", 14), ("redBlink3", 15), ("redBlink4", 16), ("redBlink5", 17))

hm2DiagnosticMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 0))
hm2DiagnosticMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1))
hm2DiagnosticSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 3))
hm2DiagSelftestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1))
hm2DiagBootGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2))
hm2DiagDeviceMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3))
hm2DiagLedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4))
hm2DiagIfaceUtilizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5))
hm2DiagCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6))
hm2PortMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7))
hm2DiagResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8))
hm2DiagSelftestRAM = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagSelftestRAM.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestRAM.setDescription('Controls RAM self-test on cold start of the device. When disabled the device booting time is reduced.')
hm2DiagSelftestBootTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagSelftestBootTime.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestBootTime.setDescription('Internal boot time in Milliseconds until activating ports.')
hm2DiagSelftestActionTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10), )
if mibBuilder.loadTexts: hm2DiagSelftestActionTable.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestActionTable.setDescription('Diag self test action group.')
hm2DiagSelftestActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DiagSelftestActionCause"))
if mibBuilder.loadTexts: hm2DiagSelftestActionEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestActionEntry.setDescription('Diag self test action entry.')
hm2DiagSelftestActionCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("task", 1), ("resource", 2), ("software", 3), ("hardware", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagSelftestActionCause.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestActionCause.setDescription('The area of the cause for the action the self-test wants to take.')
hm2DiagSelftestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("logOnly", 1), ("sendTrap", 2), ("reboot", 3))).clone('reboot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagSelftestAction.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestAction.setDescription('The action that the self-test component should take. The cause is always logged to the system log, additionally a trap can be sent to the management station or a reboot can be performed.')
hm2BootSystemMonitor = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2BootSystemMonitor.setStatus('current')
if mibBuilder.loadTexts: hm2BootSystemMonitor.setDescription('Enable or disable the System Monitor access during the boot phase. Please note: If the System Monitor is disabled, it is possible to lose access to the device permanently in case of loosing administrator password or misconfiguration.')
hm2BootDefaultConfigOnError = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2BootDefaultConfigOnError.setStatus('current')
if mibBuilder.loadTexts: hm2BootDefaultConfigOnError.setDescription('Enable or disable loading of the default configuration in case there is any error loading the configuration during the boot phase. If disabled the system will be halted.')
hm2BootConfigPushButton = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2BootConfigPushButton.setStatus('current')
if mibBuilder.loadTexts: hm2BootConfigPushButton.setDescription('Enable or disable the push button functionality on the device.')
hm2SignalContactGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1))
hm2SigConCommonTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1), )
if mibBuilder.loadTexts: hm2SigConCommonTable.setStatus('current')
if mibBuilder.loadTexts: hm2SigConCommonTable.setDescription('This table contains all variables to configure the behavior of the signalling contacts.')
hm2SigConCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"))
if mibBuilder.loadTexts: hm2SigConCommonEntry.setStatus('current')
if mibBuilder.loadTexts: hm2SigConCommonEntry.setDescription('The entry of the hm2SigConConfigTable.')
hm2SigConID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConID.setStatus('current')
if mibBuilder.loadTexts: hm2SigConID.setDescription('This index is used to identify the associated signalling contact.')
hm2SigConTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2SigConTrapEnable.setDescription('Determines whether a trap shall be sent or not, when the signal contact operating state changes.')
hm2SigConTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConTrapCause.setStatus('current')
if mibBuilder.loadTexts: hm2SigConTrapCause.setDescription('This object identifies the cause for a trap. The index of the entity which produces the trap is specified by hm2SigConTrapCauseIndex.')
hm2SigConTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConTrapCauseIndex.setStatus('current')
if mibBuilder.loadTexts: hm2SigConTrapCauseIndex.setDescription('This attribute specifies the entity which produces the trap. power-supply: index of power-supply table link-failure: index of interface table temperature: 0 ext-nvm-removal: (1) sd, (2) usb, (3) serial (not supported yet) ext-nvm-not-in-sync: (1) sd, (2) usb, (3) serial (not supported yet) ring-redundancy: (1) MRP, (2) PRP, (3) HSR, (4) DLR ext-nvm-update-enabled: (1) sd, (2) usb, (3) serial (not supported yet) no-link: index of interface table 0: other errors')
hm2SigConMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("manual", 1), ("monitor", 2), ("deviceState", 3), ("deviceSecurity", 4), ("deviceStateAndSecurity", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConMode.setStatus('current')
if mibBuilder.loadTexts: hm2SigConMode.setDescription('This attribute specifies the behavior of the relay contact. The factory settings for signal contact 1 is monitoring the correct operation of entries specified to be survived. When the device has also a second signal contact, the factory setting for it is the manual mode.')
hm2SigConOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConOperState.setStatus('current')
if mibBuilder.loadTexts: hm2SigConOperState.setDescription('This attribute shows the current operating state of the signal contact.')
hm2SigConOperTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 7), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConOperTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hm2SigConOperTimeStamp.setDescription('This attribute shows local system time (hm2SystemLocalTime) of the last hm2SigConOperState change.')
hm2SigConManualActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConManualActivate.setStatus('current')
if mibBuilder.loadTexts: hm2SigConManualActivate.setDescription('When operating in manual mode, the signal contact state can be set by this attribute.')
hm2SigConSenseLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseLinkFailure.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseLinkFailure.setDescription('Sets the monitoring of the network connection(s).')
hm2SigConSenseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 10), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseTemperature.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseTemperature.setDescription('Sets the monitoring of the device temperature.')
hm2SigConSenseFan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseFan.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseFan.setDescription('Sets the monitoring of the device fan. (currently not supported)')
hm2SigConSenseModuleRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseModuleRemoval.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseModuleRemoval.setDescription('Sets the monitoring of module removal (platform dependant).')
hm2SigConSenseExtNvmRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseExtNvmRemoval.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseExtNvmRemoval.setDescription('Sets the monitoring of the external non-volatile memory removal.')
hm2SigConSenseExtNvmNotInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseExtNvmNotInSync.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseExtNvmNotInSync.setDescription('Sets the monitoring whether the external non-volatile memory is in sync with the configuration in NVRAM.')
hm2SigConSenseRingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 15), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseRingRedundancy.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseRingRedundancy.setDescription('Sets the monitoring of the ring redundancy.')
hm2SigConPSTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 2), )
if mibBuilder.loadTexts: hm2SigConPSTable.setStatus('current')
if mibBuilder.loadTexts: hm2SigConPSTable.setDescription('This table contains the configuration of all power supply states.')
hm2SigConPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 2, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "HM2-PWRMGMT-MIB", "hm2PSID"))
if mibBuilder.loadTexts: hm2SigConPSEntry.setStatus('current')
if mibBuilder.loadTexts: hm2SigConPSEntry.setDescription('The entry of the hm2SigConPSTable.')
hm2SigConSensePSState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 2, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSensePSState.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSensePSState.setDescription('Sets the monitoring of the power supply state.')
hm2SigConInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 3), )
if mibBuilder.loadTexts: hm2SigConInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hm2SigConInterfaceTable.setDescription('This table contains all variables to mask an alarm for the signalling relay, produced by a link. The index for a link corresponds with ifIndex. The table is also used for the device monitoring configuration.')
hm2SigConInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 3, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2SigConInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2SigConInterfaceEntry.setDescription('The entry of the hm2SigConLinkTable.')
hm2SigConSenseIfLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseIfLinkAlarm.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseIfLinkAlarm.setDescription('Indicates whether an alarm for the signalling relay of the associated link will be produced or not, so you can mask the value of ifMauMediaAvailable.')
hm2SigConModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4), )
if mibBuilder.loadTexts: hm2SigConModuleTable.setStatus('current')
if mibBuilder.loadTexts: hm2SigConModuleTable.setDescription('This table contains all variables to mask a module for the signaling relay. The index for a module corresponds with the slot number.')
hm2SigConModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2SigConModID"))
if mibBuilder.loadTexts: hm2SigConModuleEntry.setStatus('current')
if mibBuilder.loadTexts: hm2SigConModuleEntry.setDescription('The entry of the hm2SigConModuleTable.')
hm2SigConModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConModID.setStatus('current')
if mibBuilder.loadTexts: hm2SigConModID.setDescription('This index is used to identify the associated module.')
hm2SigConSenseModule = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseModule.setStatus('current')
if mibBuilder.loadTexts: hm2SigConSenseModule.setDescription('Indicates whether an alarm for the signalling relay of the associated module will be produced or not.')
hm2SigConStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10), )
if mibBuilder.loadTexts: hm2SigConStatusTable.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStatusTable.setDescription('This table shows the current monitored entities for which there is a trap cause (hm2SigConTrapCause) active.')
hm2SigConStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2SigConStatusIndex"))
if mibBuilder.loadTexts: hm2SigConStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStatusEntry.setDescription('The entry of the hm2SigConStatusTable.')
hm2SigConStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2SigConStatusIndex.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStatusIndex.setDescription('This index is used to identify the occured event.')
hm2SigConStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 2), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConStatusTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStatusTimeStamp.setDescription('This attribute shows the local system time (hm2SystemLocalTime) of occuration the event.')
hm2SigConStatusTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("iec61850-mms-enabled", 22), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConStatusTrapCause.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStatusTrapCause.setDescription('This object identifies the cause for a trap. The index of the entity which produces the trap is specified by hm2SigConTrapCauseIndex.')
hm2SigConStatusTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConStatusTrapCauseIndex.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStatusTrapCauseIndex.setDescription('This attribute specifies the entity which produces the trap. power-supply: index of power-supply table link-failure: index of interface table temperature: 0 ext-nvm-removal: (1) sd, (2) usb, (3) serial (not supported yet) ext-nvm-not-in-sync: (1) sd, (2) usb, (3) serial (not supported yet) ring-redundancy: (1) MRP, (2) PRP, (3) HSR, (4) DLR ext-nvm-update-enabled: (1) sd, (2) usb, (3) serial (not supported yet) no-link: index of interface table 0: other errors')
hm2DeviceMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2))
hm2DevMonCommonTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1), )
if mibBuilder.loadTexts: hm2DevMonCommonTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonCommonTable.setDescription('This table contains all variables to configure the behavior of the signalling contacts.')
hm2DevMonCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"))
if mibBuilder.loadTexts: hm2DevMonCommonEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonCommonEntry.setDescription('The entry of the hm2DevMonConfigTable.')
hm2DevMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonID.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonID.setDescription('This index is used to identify the associated device monitoring group. Currently only one group is supported')
hm2DevMonTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonTrapEnable.setDescription('Determines whether a trap shall be sent or not when the signal contact operating state changes.')
hm2DevMonTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonTrapCause.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonTrapCause.setDescription('This object identifies the cause for a trap. The index of the entity which produces the trap is specified by hm2DevMonTrapCauseIndex.')
hm2DevMonTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonTrapCauseIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonTrapCauseIndex.setDescription('This attribute specifies the entity which produces the trap. power-supply: index of power supply table link-failure: index of interface table temperature: 0 ext-nvm-removal: (1) sd, (2) usb, (3) Serial (not supported yet) ext-nvm-not-in-sync: (1) sd, (2) usb, (3) Serial (not supported yet) ring-redundancy: (1) MRP, (2) PRP, (3), HSR, (4) DLR 0: other errors')
hm2DevMonOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noerror", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonOperState.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonOperState.setDescription('This attribute shows the current operating state of the signal contact.')
hm2DevMonOperTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 6), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonOperTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonOperTimeStamp.setDescription('This attribute shows the local system time (hm2SystemLocalTime) of the last hm2DevMonOperState change.')
hm2DevMonSenseLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseLinkFailure.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseLinkFailure.setDescription('Sets the monitoring of the network connection(s).')
hm2DevMonSenseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 8), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseTemperature.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseTemperature.setDescription('Sets the monitoring of the device temperature.')
hm2DevMonSenseFan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseFan.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseFan.setDescription('Sets the monitoring of the device fan. (currently not supported)')
hm2DevMonSenseModuleRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseModuleRemoval.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseModuleRemoval.setDescription('Sets the monitoring of module removal (platform dependent).')
hm2DevMonSenseExtNvmRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseExtNvmRemoval.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseExtNvmRemoval.setDescription('Sets the monitoring of the external non-volatile memory removal.')
hm2DevMonSenseExtNvmNotInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseExtNvmNotInSync.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseExtNvmNotInSync.setDescription('Sets the monitoring whether the external non-volatile memory is in sync with the configuration in NVRAM.')
hm2DevMonSenseRingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseRingRedundancy.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseRingRedundancy.setDescription('Sets the monitoring of the ring redundancy.')
hm2DevMonPSTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 2), )
if mibBuilder.loadTexts: hm2DevMonPSTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonPSTable.setDescription('This table contains the configuration of all power supply states.')
hm2DevMonPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 2, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "HM2-PWRMGMT-MIB", "hm2PSID"))
if mibBuilder.loadTexts: hm2DevMonPSEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonPSEntry.setDescription('The entry of the hm2DevMonPSTable.')
hm2DevMonSensePSState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 2, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSensePSState.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSensePSState.setDescription('Sets the monitoring of the power supply state.')
hm2DevMonInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 3), )
if mibBuilder.loadTexts: hm2DevMonInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonInterfaceTable.setDescription('This table contains all variables to mask an alarm for the signalling relay, produced by a link. The index for a link corresponds with ifIndex. The table is also used for the device monitoring configuration.')
hm2DevMonInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 3, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2DevMonInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonInterfaceEntry.setDescription('The entry of the hm2DevMonLinkTable.')
hm2DevMonSenseIfLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseIfLinkAlarm.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseIfLinkAlarm.setDescription('Indicates whether an alarm for the signalling relay of the associated link will be produced or not, so you can mask the value of ifMauMediaAvailable.')
hm2DevMonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4), )
if mibBuilder.loadTexts: hm2DevMonModuleTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonModuleTable.setDescription('This table contains all variables to mask a module for the device status. The index for a module corresponds with the slot number.')
hm2DevMonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonModID"))
if mibBuilder.loadTexts: hm2DevMonModuleEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonModuleEntry.setDescription('The entry of the hm2DevMonModuleTable.')
hm2DevMonModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonModID.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonModID.setDescription('This index is used to identify the associated module.')
hm2DevMonSenseModule = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseModule.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonSenseModule.setDescription('Indicates whether an alarm for the device status of the associated module will be produced or not.')
hm2DevMonStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10), )
if mibBuilder.loadTexts: hm2DevMonStatusTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStatusTable.setDescription('This table shows the current monitored entities in the hm2DeviceMonitorGroup for which there is a trap cause (hm2DevMonStatusTrapCause) active.')
hm2DevMonStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonStatusIndex"))
if mibBuilder.loadTexts: hm2DevMonStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStatusEntry.setDescription('The entry of the hm2DevMonStatusTable.')
hm2DevMonStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2DevMonStatusIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStatusIndex.setDescription('This index is used to identify the occured event.')
hm2DevMonStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 2), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonStatusTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStatusTimeStamp.setDescription('This attribute shows the local system time (hm2SystemLocalTime) of occuration the event.')
hm2DevMonStatusTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonStatusTrapCause.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStatusTrapCause.setDescription('This object identifies the cause for a trap. The index of the entity which produces the trap is specified by hm2DevMonTrapCauseIndex.')
hm2DevMonStatusTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonStatusTrapCauseIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStatusTrapCauseIndex.setDescription('This attribute specifies the entity which produces the trap. power-supply: index of power supply table link-failure: index of interface table temperature: 0 ext-nvm-removal: (1) sd, (2) usb, (3) Serial (not supported yet) ext-nvm-not-in-sync: (1) sd, (2) usb, (3) Serial (not supported yet) ring-redundancy: (1) MRP, (2) PRP, (3) HSR, (4) DLR 0: other errors')
hm2DeviceSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3))
hm2DevSecConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1))
hm2DevSecTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecTrapEnable.setDescription('Determines whether a trap shall be sent or not, when the device security operating state changes.')
hm2DevSecTrapCause = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("iec61850-mms-enabled", 22), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecTrapCause.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecTrapCause.setDescription('This object identifies the cause for a trap. The index of the entity which produces the trap is specified by hm2DevMonTrapCauseIndex.')
hm2DevSecTrapCauseIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecTrapCauseIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecTrapCauseIndex.setDescription('This attribute specifies the entity which produces the trap. ext-nvm-update-enabled: (1) sd, (2) usb, (3) serial (not supported yet) no-link: index of interface table 0: other errors.')
hm2DevSecOperState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noerror", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecOperState.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecOperState.setDescription('This attribute shows the current operating state of the signal contact.')
hm2DevSecOperTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 5), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecOperTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecOperTimeStamp.setDescription('This attribute shows the local system time (hm2SystemLocalTime) of the last hm2DevSecOperState change.')
hm2DevSecSensePasswordChange = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 6), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSensePasswordChange.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSensePasswordChange.setDescription("Enable or disable to check if default passwords for 'user' and 'admin' are not changed.")
hm2DevSecSensePasswordMinLength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 7), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSensePasswordMinLength.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSensePasswordMinLength.setDescription('Enable or disable to check if configured minimum password length is < 8 characters.')
hm2DevSecSensePasswordStrengthNotConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 8), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSensePasswordStrengthNotConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSensePasswordStrengthNotConfigured.setDescription('Enable or disable minimum password strength to check if (1 uppercase, 1 lowercase, 1 number, 1 non-alphanumeric) is not configured.')
hm2DevSecSenseBypassPasswordStrength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseBypassPasswordStrength.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseBypassPasswordStrength.setDescription('Enable or disable to check if at least one user is configured to bypass strength check.')
hm2DevSecSenseTelnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 10), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseTelnetEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseTelnetEnabled.setDescription('Enable or disable to check if telnet is enabled on the switch.')
hm2DevSecSenseHttpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseHttpEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseHttpEnabled.setDescription('Enable or disable to check if HTTP is enabled on the switch.')
hm2DevSecSenseSnmpUnsecure = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseSnmpUnsecure.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseSnmpUnsecure.setDescription('Enable or disable to check if SNMP v1/v2 is enabled or v3 encryption is disabled.')
hm2DevSecSenseSysmonEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseSysmonEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseSysmonEnabled.setDescription('Enable or disable to check if sysmon1 access is not disabled.')
hm2DevSecSenseExtNvmUpdateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseExtNvmUpdateEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseExtNvmUpdateEnabled.setDescription('Enable or disable to check if external non-volatile memory update is not disabled.')
hm2DevSecSenseNoLinkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 15), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseNoLinkEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseNoLinkEnabled.setDescription('Enable or disable to check if at least one port has no link but admin state is up.')
hm2DevSecSenseHiDiscoveryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 16), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseHiDiscoveryEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseHiDiscoveryEnabled.setDescription("Enable or disable to check if HiDiscovery is enabled and the mode is 'read-write'.")
hm2DevSecSenseExtNvmConfigLoadUnsecure = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 17), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseExtNvmConfigLoadUnsecure.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseExtNvmConfigLoadUnsecure.setDescription("Enable or disable to check if the configuration load from external NVM is unsecure. (The configuration priority of the external NVM is set to 'first', 'second' or 'third' and the configuration encryption is not active.)")
hm2DevSecSenseIec61850MmsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 18), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseIec61850MmsEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseIec61850MmsEnabled.setDescription('Enable or disable to check if IEC 61850 MMS is enabled on the switch.')
hm2DevSecSenseHttpsCertificateWarning = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 19), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseHttpsCertificateWarning.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseHttpsCertificateWarning.setDescription('Enable or disable to check for the presence of the auto generated self-signed HTTPS certificate.')
hm2DevSecSenseModbusTcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 20), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseModbusTcpEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseModbusTcpEnabled.setDescription('Enable or disable to check if Modbus/TCP server is enabled on the switch.')
hm2DevSecSenseEtherNetIpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 21), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseEtherNetIpEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseEtherNetIpEnabled.setDescription('Enable or disable to check if EtherNet/IP protocol is enabled on the switch.')
hm2DevSecSenseProfinetIOEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 22), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseProfinetIOEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseProfinetIOEnabled.setDescription('Enable or disable to check if ProfinetIO protocol is enabled on the switch.')
hm2DevSecInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 2), )
if mibBuilder.loadTexts: hm2DevSecInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecInterfaceTable.setDescription('This table contains all variables to mask an alarm for the signalling relay, produced by a link. The index for a link corresponds with ifIndex. The table is also used for the device monitoring configuration.')
hm2DevSecInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2DevSecInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecInterfaceEntry.setDescription('The entry of the hm2DevSecLinkTable.')
hm2DevSecSenseIfNoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 2, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseIfNoLink.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecSenseIfNoLink.setDescription('Port has no link but admin state is up')
hm2DevSecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10), )
if mibBuilder.loadTexts: hm2DevSecStatusTable.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStatusTable.setDescription('This table shows the current monitored entities in the hm2DevSecConfigGroup for which there is a trap cause (hm2DevSecStatusTrapCause) active.')
hm2DevSecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevSecStatusIndex"))
if mibBuilder.loadTexts: hm2DevSecStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStatusEntry.setDescription('The entry of the hm2DevSecStatusTable.')
hm2DevSecStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2DevSecStatusIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStatusIndex.setDescription('This index is used to identify the occured event.')
hm2DevSecStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 2), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecStatusTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStatusTimeStamp.setDescription('This attribute shows the local system time (hm2SystemLocalTime) of occuration the event.')
hm2DevSecStatusTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("iec61850-mms-enabled", 22), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecStatusTrapCause.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStatusTrapCause.setDescription('This object identifies the cause for a trap. The index of the entity which produces the trap is specified by hm2DevSecTrapCauseIndex.')
hm2DevSecStatusTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecStatusTrapCauseIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStatusTrapCauseIndex.setDescription('This attribute specifies the entity which produces the trap. ext-nvm-update-enabled: (1) sd, (2) usb, (3) serial (not supported yet) no-link: index of interface table 0: other errors.')
hm2LedGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1), )
if mibBuilder.loadTexts: hm2LedGlobalTable.setStatus('current')
if mibBuilder.loadTexts: hm2LedGlobalTable.setDescription('.')
hm2LedGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2LedGlobalLedType"))
if mibBuilder.loadTexts: hm2LedGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LedGlobalEntry.setDescription('.')
hm2LedGlobalLedType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1, 1, 1), Hm2LedType())
if mibBuilder.loadTexts: hm2LedGlobalLedType.setStatus('current')
if mibBuilder.loadTexts: hm2LedGlobalLedType.setDescription('.')
hm2LedGlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1, 1, 2), Hm2LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LedGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LedGlobalStatus.setDescription('.')
hm2LedPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2), )
if mibBuilder.loadTexts: hm2LedPortTable.setStatus('current')
if mibBuilder.loadTexts: hm2LedPortTable.setDescription('.')
hm2LedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2IfacePhysIndex"))
if mibBuilder.loadTexts: hm2LedPortEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LedPortEntry.setDescription('.')
hm2LedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1, 1), Hm2LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LedPortStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LedPortStatus.setDescription('.')
hm2LedPortPoeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1, 2), Hm2LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LedPortPoeStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LedPortPoeStatus.setDescription('.')
hm2LedPortSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LedPortSignaling.setStatus('current')
if mibBuilder.loadTexts: hm2LedPortSignaling.setDescription('Enable for LED port signaling.')
hm2LedControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 3))
hm2LedPortMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("portpanel", 0), ("servicepanel", 1))).clone('servicepanel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LedPortMode.setStatus('current')
if mibBuilder.loadTexts: hm2LedPortMode.setDescription('Switch LED signalling between the port LEDs on front side (port panel) and the port LEDs on the back side (service panel) of the device.')
hm2DiagIfaceUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1), )
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationTable.setDescription('This table contains variables for each interface of the switch.')
hm2DiagIfaceUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationEntry.setDescription('The entry of the hm2DiagIfaceUtilizationTable.')
hm2DiagIfaceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagIfaceUtilization.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilization.setDescription('The best estimate of the mean physical layer network utilization on this interface during the last sampling interval, in hundredth of one percent. The first historyControlInterval (rfc1757) of this interface is used as sampling interval.')
hm2DiagIfaceUtilizationControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationControlInterval.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationControlInterval.setDescription('The interval in seconds over which the data is sampled for hmIfaceUtilization. This interval can be any number of seconds between 1 and 3600 (1 hour). The first historyControlInterval (rfc1757) of this interface is used as sampling interval.')
hm2DiagIfaceUtilizationAlarmLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmLowerThreshold.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmLowerThreshold.setDescription('Surveys the interface utilization hm2InfaceUtilization and generates an alarm for this interfaces, if the utilization value is below the given limit. A value of 0 disables the alarm generation.')
hm2DiagIfaceUtilizationAlarmUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmUpperThreshold.setDescription('Surveys the interface utilization hm2DiagIfaceUtilization and generates an alarm for this interfaces, if the given limit is exceeded. A value of 0 disables the alarm generation.')
hm2DiagIfaceUtilizationAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmCondition.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmCondition.setDescription('The alarm condition is given (true), if the given hm2DiagIfaceUtilizationAlarmUpperThreshold limit is exceeded by the interface utilization or if the utilization value falls below hm2DiagIfaceUtilizationAlarmLowerThreshold limit. The alarm condition will be removed, when the interface utilization value falls in between hm2DiagIfaceUtilizationAlarmLowerThreshold hm2DiagIfaceUtilizationAlarmUpperThreshold.')
hm2DiagCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagCableTesterStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterStatus.setDescription('Status of the Virtual Cable Tester active(1) - Cable testing is in progress. Set to this value to start the test. success(2) - A successful test was performed. Cannot be set. failure(3) - A failure was encountered during the test. Cannot be set. uninitialized(4) - No test has been performed yet. Cannot be set.')
hm2DiagCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagCableTesterIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterIfIndex.setDescription('Determines on which port to perform the cable test. Limited to copper based ports.')
hm2DiagCableTesterCableTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10), )
if mibBuilder.loadTexts: hm2DiagCableTesterCableTable.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCableTable.setDescription('This table contains variables for each pair of the cable.')
hm2DiagCableTesterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DiagCableTesterCablePair"))
if mibBuilder.loadTexts: hm2DiagCableTesterCableEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCableEntry.setDescription('The entry of the hm2DiagCableTesterCableTable.')
hm2DiagCableTesterCablePair = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2DiagCableTesterCablePair.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCablePair.setDescription('Index of the hm2DiagCableTesterCableTable. If a PHY does not support the measurement per pair, the first index is used to show the values.')
hm2DiagCableTesterCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCableStatus.setDescription('Indicates the results of the Cable Test. normal(1) - The cable is working correctly. open(2) - The cable is disconnected or there is a faulty connector. short(3) - There is an electrical short in the cable. unknown(4) - No test has been performed yet, or a test is currently in progress.')
hm2DiagCableTesterCableMinimumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableMinimumLength.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCableMinimumLength.setDescription('The estimated length of the cable in meters. This value indicates the shortest length estimated. This object will return 0 if hm2DiagCableTesterStatus is not success(2) or the cable length is unknown.')
hm2DiagCableTesterCableMaximumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableMaximumLength.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCableMaximumLength.setDescription('The estimated length of the cable in meters. This value indicates the longest length estimated. This object will return 0 if hm2DiagCableTesterStatus is not success(2) or the cable length is unknown.')
hm2DiagCableTesterCableFailureLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableFailureLocation.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCableTesterCableFailureLocation.setDescription('The estimated distance in meters from the end of the cable to the failure location. This object will return 0 if hm2DiagCableTesterStatus is not success(2).')
hm2PortMonitorAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorAdminMode.setDescription('Global switch to enable / disable the port state actions, which are performed if a condition becomes true')
hm2PortMonitorIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2), )
if mibBuilder.loadTexts: hm2PortMonitorIntfTable.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorIntfTable.setDescription('Port state mode interface table.')
hm2PortMonitorIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorIntfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorIntfEntry.setDescription('Port state mode interface entry.')
hm2PortMonitorIntfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorIntfReset.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorIntfReset.setDescription('Port monitor interface reset.')
hm2PortMonitorIntfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port-disable", 1), ("trap-only", 2), ("auto-disable", 3))).clone('auto-disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorIntfAction.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorIntfAction.setDescription('Interface link disable state.')
hm2PortMonitorConditionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3))
hm2KbpsUnitTrafficTypeInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 4))
if mibBuilder.loadTexts: hm2KbpsUnitTrafficTypeInvalid.setStatus('current')
if mibBuilder.loadTexts: hm2KbpsUnitTrafficTypeInvalid.setDescription("Interface {0}: 'Kbps' unit can only be used for traffic type 'all'.")
hm2PortMonitorConditionIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionIntfTable.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionIntfTable.setDescription('Port state condition interface table.')
hm2PortMonitorConditionIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionIntfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionIntfEntry.setDescription('Port state action interface entry.')
hm2PortMonitorConditionField = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("none", 0), ("link-flap", 1), ("crcFragments", 2), ("duplexMismatch", 3), ("overload-detection", 4), ("speed-duplex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionField.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionField.setDescription('Condition type field.')
hm2PortMonitorConditionLinkFlapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapMode.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapMode.setDescription('Interface link flap mode.')
hm2PortMonitorConditionCrcFragmentsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsMode.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsMode.setDescription('Interface CrcFragments mode.')
hm2PortMonitorConditionDuplexMismatchDetectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionDuplexMismatchDetectionMode.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionDuplexMismatchDetectionMode.setDescription('Interface duplex mismatch detection mode.')
hm2PortMonitorConditionOverloadDetectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOverloadDetectionMode.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOverloadDetectionMode.setDescription('Interface Overload Detection mode.')
hm2PortMonitorConditionSpeedDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexMode.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexMode.setDescription('Interface Speed and Duplex monitor mode.')
hm2PortMonitorConditionLinkFlapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2))
hm2PortMonitorConditionLinkFlapIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapIntfTable.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapIntfTable.setDescription('Port condition link flap interface table.')
hm2PortMonitorConditionLinkFlapIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapIntfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapIntfEntry.setDescription('Port condition link flap interface entry.')
hm2PortMonitorConditionLinkFlapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapInterval.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapInterval.setDescription('Measure interval in seconds (1-180s) for link flap detection.')
hm2PortMonitorConditionLinkFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCount.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCount.setDescription('Link flap counter (1-100).')
hm2PortMonitorConditionLinkFlapCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCountInterval.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCountInterval.setDescription('Link flap count that occured in last interval.')
hm2PortMonitorConditionLinkFlapCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCountTotal.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCountTotal.setDescription('Total link flap count.')
hm2PortMonitorConditionCrcFragmentsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3))
hm2PortMonitorConditionCrcFragmentsIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsIntfTable.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsIntfTable.setDescription('Port condition CrcFragments interface table.')
hm2PortMonitorConditionCrcFragmentsIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsIntfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsIntfEntry.setDescription('Port condition CrcFragments interface entry.')
hm2PortMonitorConditionCrcFragmentsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 180)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsInterval.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsInterval.setDescription('Measure interval in seconds (5-180s) for CrcFragments detection.')
hm2PortMonitorConditionCrcFragmentsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCount.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCount.setDescription('CrcFragments counter (1-1000000).')
hm2PortMonitorConditionCrcFragmentsCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCountInterval.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCountInterval.setDescription('CrcFragments count that occured in last interval.')
hm2PortMonitorConditionCrcFragmentsCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCountTotal.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCountTotal.setDescription('Total CrcFragments count.')
hm2PortMonitorConditionOverloadDetectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4))
hm2PortMonitorConditionOvldDetIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntfTable.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntfTable.setDescription('Port condition overload detection interface table.')
hm2PortMonitorConditionOvldDetIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntfEntry.setDescription('Port condition overload detection interface entry.')
hm2PortMonitorConditionOvldDetTrfcType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("bc", 2), ("bc-mc", 3))).clone('bc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetTrfcType.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetTrfcType.setDescription('Overload detection condition traffic type.')
hm2PortMonitorConditionOvldDetTholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("kbps", 2))).clone('pps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetTholdType.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetTholdType.setDescription('Overload detection conditon threshold type.')
hm2PortMonitorConditionOvldDetLwrTholdVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetLwrTholdVal.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetLwrTholdVal.setDescription('Overload detection condition lower threshold value.')
hm2PortMonitorConditionOvldDetUprTholdVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetUprTholdVal.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetUprTholdVal.setDescription('Overload detection condition upper threshold value.')
hm2PortMonitorConditionOvldDetIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntvl.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntvl.setDescription('Measure interval in seconds (1-20s) for overload detection.')
hm2PortMonitorConditionOvldDetPkgCntAll = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntAll.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntAll.setDescription('All package count from last interval.')
hm2PortMonitorConditionOvldDetPkgCntBC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntBC.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntBC.setDescription('Broadcast package count from last interval.')
hm2PortMonitorConditionOvldDetPkgCntMC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntMC.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntMC.setDescription('Overload detection condition lower threshold value.')
hm2PortMonitorConditionOvldDetPkgCntKbit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntKbit.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntKbit.setDescription('Overload detection condition lower threshold value.')
hm2PortMonitorConditionSpeedDuplexGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5))
hm2PortMonitorConditionSpeedDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexTable.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexTable.setDescription('Port condition speed-duplex interface table.')
hm2PortMonitorConditionSpeedDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexEntry.setDescription('Port condition speed-duplex interface entry.')
hm2PortMonitorConditionSpeedDuplexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5, 1, 1, 1), Bits().clone(namedValues=NamedValues(("hdx-10", 0), ("fdx-10", 1), ("hdx-100", 2), ("fdx-100", 3), ("hdx-1000", 4), ("fdx-1000", 5), ("fdx-2500", 6))).clone(namedValues=NamedValues(("hdx-10", 0), ("fdx-10", 1), ("hdx-100", 2), ("fdx-100", 3), ("hdx-1000", 4), ("fdx-1000", 5), ("fdx-2500", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexValue.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexValue.setDescription('Speed and duplex combination allowed by port-monitor.')
hm2DiagEnableMeasurement = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagEnableMeasurement.setStatus('current')
if mibBuilder.loadTexts: hm2DiagEnableMeasurement.setDescription('Enable or disable the resources measurement If disabled, the task - needed for measurement - is also deleted.')
hm2DiagCpuResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10))
hm2DiagCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCpuUtilization.setDescription('The current cpu utilization of the device in percent.')
hm2DiagCpuAverageUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuAverageUtilization.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCpuAverageUtilization.setDescription('The average cpu utilization of the device in percent, max. measured over the last 30 minutes.')
hm2DiagCpuRunningProcesses = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuRunningProcesses.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCpuRunningProcesses.setDescription('The current number of processes running.')
hm2DiagCpuMaxRunningProcesses = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuMaxRunningProcesses.setStatus('current')
if mibBuilder.loadTexts: hm2DiagCpuMaxRunningProcesses.setDescription('The maximum number of processes running, max. since the last 30 minutes.')
hm2DiagMemoryResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11))
hm2DiagMemoryRamAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamAllocated.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryRamAllocated.setDescription('The current allocated RAM of the device in kBytes.')
hm2DiagMemoryRamFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamFree.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryRamFree.setDescription('The current free RAM of the device in kBytes.')
hm2DiagMemoryRamAllocatedAverage = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamAllocatedAverage.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryRamAllocatedAverage.setDescription('The average allocated RAM of the device in kBytes, measured over the last 30 minutes.')
hm2DiagMemoryRamFreeAverage = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamFreeAverage.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryRamFreeAverage.setDescription('The average free RAM of the device in kBytes, measured over the last 30 minutes.')
hm2DiagMemoryRawFlashMainAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRawFlashMainAllocated.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryRawFlashMainAllocated.setDescription('The current allocated flash memory for the main software image in kBytes.')
hm2DiagMemoryRawFlashMainFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRawFlashMainFree.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryRawFlashMainFree.setDescription('The current free flash memory for the main software image in kBytes.')
hm2DiagMemoryFlashFileSystemAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryFlashFileSystemAllocated.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryFlashFileSystemAllocated.setDescription('The current allocated memory within the flash file system in kBytes.')
hm2DiagMemoryFlashFileSystemFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryFlashFileSystemFree.setStatus('current')
if mibBuilder.loadTexts: hm2DiagMemoryFlashFileSystemFree.setDescription('The current free memory within the flash file system in kBytes.')
hm2DiagNetworkResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 12))
hm2DiagNetworkCpuIfUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('precent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagNetworkCpuIfUtilization.setStatus('current')
if mibBuilder.loadTexts: hm2DiagNetworkCpuIfUtilization.setDescription('The current network utilization of the internal cpu interface in percent.')
hm2DiagNetworkCpuIfAverageUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('precent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagNetworkCpuIfAverageUtilization.setStatus('current')
if mibBuilder.loadTexts: hm2DiagNetworkCpuIfAverageUtilization.setDescription('The average network utilization of the internal cpu interface in percent, measured over the last 30 minutes.')
hm2SigConStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 1)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2SigConID"), ("HM2-DIAGNOSTIC-MIB", "hm2SigConOperState"), ("HM2-DIAGNOSTIC-MIB", "hm2SigConTrapCause"), ("HM2-DIAGNOSTIC-MIB", "hm2SigConTrapCauseIndex"))
if mibBuilder.loadTexts: hm2SigConStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2SigConStateChangeTrap.setDescription('This trap is sent if the value of hm2SigConState changes its value.')
hm2DevMonStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 2)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), ("HM2-DIAGNOSTIC-MIB", "hm2DevMonOperState"), ("HM2-DIAGNOSTIC-MIB", "hm2DevMonTrapCause"), ("HM2-DIAGNOSTIC-MIB", "hm2DevMonTrapCauseIndex"))
if mibBuilder.loadTexts: hm2DevMonStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2DevMonStateChangeTrap.setDescription('This trap is sent if the value of hm2DevMonState changes its value.')
hm2DevSecStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 3)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DevSecOperState"), ("HM2-DIAGNOSTIC-MIB", "hm2DevSecTrapCause"), ("HM2-DIAGNOSTIC-MIB", "hm2DevSecTrapCauseIndex"))
if mibBuilder.loadTexts: hm2DevSecStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2DevSecStateChangeTrap.setDescription('This trap is sent if the value of hm2DevSecState changes its value.')
hm2DiagSelftestActionTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 4)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DiagSelftestActionCause"))
if mibBuilder.loadTexts: hm2DiagSelftestActionTrap.setStatus('current')
if mibBuilder.loadTexts: hm2DiagSelftestActionTrap.setDescription('This trap is sent if a self-test action is performed and hm2DiagSelftestAction is configured to sendTrap(2).')
hm2DiagIfaceUtilizationTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 5)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DiagIfaceUtilization"), ("HM2-DIAGNOSTIC-MIB", "hm2DiagIfaceUtilizationAlarmCondition"))
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationTrap.setStatus('current')
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationTrap.setDescription('This trap is sent if the value of hmIfaceUtilization exceeds or falls back below the interface utilization thresholds hmIfaceUtilizationAlarmConditionThreshold and hmIfaceUtilizationAlarmRemovalThreshold.')
hm2PortMonitorPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("HM2-DIAGNOSTIC-MIB", "hm2PortMonitorConditionField"))
if mibBuilder.loadTexts: hm2PortMonitorPortTrap.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorPortTrap.setDescription('This trap is sent if the a port has been disabled by port disable action by port monitor.')
hm2PortMonitorSpeedDuplexErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22, 3, 1))
if mibBuilder.loadTexts: hm2PortMonitorSpeedDuplexErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorSpeedDuplexErrorReturn.setDescription('Indicates that the specified speed value is not supported by the port capabilities')
hm2PortMonitorCndOvldDetInconsistenTholdVal = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22, 3, 2))
if mibBuilder.loadTexts: hm2PortMonitorCndOvldDetInconsistenTholdVal.setStatus('current')
if mibBuilder.loadTexts: hm2PortMonitorCndOvldDetInconsistenTholdVal.setDescription('Indicates that the configured upper and lower threshold values are inconsistent')
mibBuilder.exportSymbols("HM2-DIAGNOSTIC-MIB", hm2DiagIfaceUtilizationEntry=hm2DiagIfaceUtilizationEntry, hm2DevSecSensePasswordMinLength=hm2DevSecSensePasswordMinLength, hm2DiagSelftestActionCause=hm2DiagSelftestActionCause, hm2DeviceSecurityGroup=hm2DeviceSecurityGroup, hm2PortMonitorConditionLinkFlapMode=hm2PortMonitorConditionLinkFlapMode, hm2DevMonStatusTable=hm2DevMonStatusTable, hm2DevMonInterfaceTable=hm2DevMonInterfaceTable, hm2DiagMemoryRawFlashMainAllocated=hm2DiagMemoryRawFlashMainAllocated, hm2SigConModID=hm2SigConModID, hm2SigConMode=hm2SigConMode, hm2DiagnosticMibNotifications=hm2DiagnosticMibNotifications, hm2DiagMemoryResourcesGroup=hm2DiagMemoryResourcesGroup, hm2DevSecSenseHttpsCertificateWarning=hm2DevSecSenseHttpsCertificateWarning, hm2SigConInterfaceTable=hm2SigConInterfaceTable, hm2DevSecTrapEnable=hm2DevSecTrapEnable, hm2PortMonitorConditionOvldDetIntfEntry=hm2PortMonitorConditionOvldDetIntfEntry, hm2DevMonSenseIfLinkAlarm=hm2DevMonSenseIfLinkAlarm, hm2DevSecSenseTelnetEnabled=hm2DevSecSenseTelnetEnabled, hm2PortMonitorConditionOverloadDetectionGroup=hm2PortMonitorConditionOverloadDetectionGroup, hm2SigConPSEntry=hm2SigConPSEntry, hm2LedPortPoeStatus=hm2LedPortPoeStatus, hm2LedPortStatus=hm2LedPortStatus, hm2DiagCableTesterGroup=hm2DiagCableTesterGroup, hm2SigConSenseLinkFailure=hm2SigConSenseLinkFailure, hm2DevSecSenseBypassPasswordStrength=hm2DevSecSenseBypassPasswordStrength, hm2DiagCableTesterCableMaximumLength=hm2DiagCableTesterCableMaximumLength, hm2PortMonitorConditionOvldDetLwrTholdVal=hm2PortMonitorConditionOvldDetLwrTholdVal, hm2DevMonStatusIndex=hm2DevMonStatusIndex, hm2PortMonitorConditionOvldDetPkgCntMC=hm2PortMonitorConditionOvldDetPkgCntMC, hm2DiagBootGroup=hm2DiagBootGroup, Hm2LedType=Hm2LedType, hm2SigConSenseRingRedundancy=hm2SigConSenseRingRedundancy, hm2PortMonitorConditionOvldDetUprTholdVal=hm2PortMonitorConditionOvldDetUprTholdVal, hm2SigConTrapCauseIndex=hm2SigConTrapCauseIndex, hm2DevMonOperState=hm2DevMonOperState, hm2DevSecSenseSysmonEnabled=hm2DevSecSenseSysmonEnabled, hm2PortMonitorIntfTable=hm2PortMonitorIntfTable, hm2DiagnosticMib=hm2DiagnosticMib, hm2PortMonitorGroup=hm2PortMonitorGroup, hm2DevSecSenseProfinetIOEnabled=hm2DevSecSenseProfinetIOEnabled, hm2PortMonitorConditionSpeedDuplexGroup=hm2PortMonitorConditionSpeedDuplexGroup, hm2DevMonStateChangeTrap=hm2DevMonStateChangeTrap, hm2DiagNetworkCpuIfAverageUtilization=hm2DiagNetworkCpuIfAverageUtilization, hm2SigConModuleTable=hm2SigConModuleTable, hm2DevSecStatusIndex=hm2DevSecStatusIndex, hm2DevSecSensePasswordChange=hm2DevSecSensePasswordChange, hm2PortMonitorConditionLinkFlapCount=hm2PortMonitorConditionLinkFlapCount, hm2LedControlGroup=hm2LedControlGroup, hm2PortMonitorConditionLinkFlapInterval=hm2PortMonitorConditionLinkFlapInterval, hm2DevSecStatusEntry=hm2DevSecStatusEntry, hm2DevMonSensePSState=hm2DevMonSensePSState, hm2DiagIfaceUtilizationAlarmUpperThreshold=hm2DiagIfaceUtilizationAlarmUpperThreshold, hm2DevMonSenseExtNvmNotInSync=hm2DevMonSenseExtNvmNotInSync, hm2LedPortTable=hm2LedPortTable, hm2PortMonitorConditionOvldDetPkgCntKbit=hm2PortMonitorConditionOvldDetPkgCntKbit, hm2DiagCableTesterCableEntry=hm2DiagCableTesterCableEntry, hm2PortMonitorConditionLinkFlapIntfEntry=hm2PortMonitorConditionLinkFlapIntfEntry, hm2DiagCpuMaxRunningProcesses=hm2DiagCpuMaxRunningProcesses, hm2DiagIfaceUtilizationTable=hm2DiagIfaceUtilizationTable, hm2PortMonitorIntfEntry=hm2PortMonitorIntfEntry, hm2PortMonitorConditionCrcFragmentsCountInterval=hm2PortMonitorConditionCrcFragmentsCountInterval, hm2DiagCpuRunningProcesses=hm2DiagCpuRunningProcesses, hm2SigConStatusTrapCauseIndex=hm2SigConStatusTrapCauseIndex, hm2SigConTrapCause=hm2SigConTrapCause, hm2DiagCpuResourcesGroup=hm2DiagCpuResourcesGroup, hm2PortMonitorConditionSpeedDuplexValue=hm2PortMonitorConditionSpeedDuplexValue, hm2PortMonitorCndOvldDetInconsistenTholdVal=hm2PortMonitorCndOvldDetInconsistenTholdVal, hm2DevMonTrapCause=hm2DevMonTrapCause, hm2DiagCableTesterCableMinimumLength=hm2DiagCableTesterCableMinimumLength, hm2DiagMemoryFlashFileSystemAllocated=hm2DiagMemoryFlashFileSystemAllocated, hm2DevSecStatusTrapCauseIndex=hm2DevSecStatusTrapCauseIndex, hm2DiagMemoryRamFreeAverage=hm2DiagMemoryRamFreeAverage, hm2PortMonitorConditionIntfTable=hm2PortMonitorConditionIntfTable, hm2DiagEnableMeasurement=hm2DiagEnableMeasurement, hm2SigConCommonTable=hm2SigConCommonTable, hm2DevSecTrapCause=hm2DevSecTrapCause, hm2PortMonitorAdminMode=hm2PortMonitorAdminMode, hm2PortMonitorIntfReset=hm2PortMonitorIntfReset, hm2DiagnosticMibObjects=hm2DiagnosticMibObjects, hm2DevMonStatusTrapCauseIndex=hm2DevMonStatusTrapCauseIndex, hm2DevSecSenseExtNvmUpdateEnabled=hm2DevSecSenseExtNvmUpdateEnabled, hm2DiagCpuUtilization=hm2DiagCpuUtilization, hm2SigConSenseExtNvmRemoval=hm2SigConSenseExtNvmRemoval, hm2SigConSenseFan=hm2SigConSenseFan, hm2DevMonStatusTimeStamp=hm2DevMonStatusTimeStamp, hm2PortMonitorConditionLinkFlapCountTotal=hm2PortMonitorConditionLinkFlapCountTotal, Hm2LedStatus=Hm2LedStatus, hm2PortMonitorConditionCrcFragmentsMode=hm2PortMonitorConditionCrcFragmentsMode, hm2DiagIfaceUtilization=hm2DiagIfaceUtilization, hm2PortMonitorConditionOvldDetIntfTable=hm2PortMonitorConditionOvldDetIntfTable, hm2DevSecSenseIfNoLink=hm2DevSecSenseIfNoLink, hm2DevSecSenseHiDiscoveryEnabled=hm2DevSecSenseHiDiscoveryEnabled, hm2PortMonitorConditionOvldDetPkgCntAll=hm2PortMonitorConditionOvldDetPkgCntAll, hm2DevSecOperTimeStamp=hm2DevSecOperTimeStamp, hm2DeviceMonitorGroup=hm2DeviceMonitorGroup, hm2DevSecInterfaceTable=hm2DevSecInterfaceTable, hm2DevSecStateChangeTrap=hm2DevSecStateChangeTrap, hm2DiagSelftestAction=hm2DiagSelftestAction, hm2DevSecStatusTable=hm2DevSecStatusTable, hm2DevMonModID=hm2DevMonModID, hm2DevSecSenseModbusTcpEnabled=hm2DevSecSenseModbusTcpEnabled, hm2DevMonSenseModule=hm2DevMonSenseModule, hm2SigConPSTable=hm2SigConPSTable, hm2DiagLedGroup=hm2DiagLedGroup, hm2SigConStatusTimeStamp=hm2SigConStatusTimeStamp, hm2DevMonSenseModuleRemoval=hm2DevMonSenseModuleRemoval, hm2DevMonSenseTemperature=hm2DevMonSenseTemperature, hm2DiagCableTesterCableStatus=hm2DiagCableTesterCableStatus, hm2DevSecConfigGroup=hm2DevSecConfigGroup, hm2PortMonitorConditionSpeedDuplexMode=hm2PortMonitorConditionSpeedDuplexMode, hm2DiagCableTesterIfIndex=hm2DiagCableTesterIfIndex, hm2PortMonitorConditionGroup=hm2PortMonitorConditionGroup, hm2SigConStatusTable=hm2SigConStatusTable, hm2DiagIfaceUtilizationAlarmCondition=hm2DiagIfaceUtilizationAlarmCondition, hm2PortMonitorPortTrap=hm2PortMonitorPortTrap, hm2DiagCableTesterCableTable=hm2DiagCableTesterCableTable, hm2LedGlobalEntry=hm2LedGlobalEntry, hm2DiagMemoryRamAllocated=hm2DiagMemoryRamAllocated, hm2DiagSelftestBootTime=hm2DiagSelftestBootTime, hm2PortMonitorSpeedDuplexErrorReturn=hm2PortMonitorSpeedDuplexErrorReturn, hm2DevMonCommonTable=hm2DevMonCommonTable, hm2DiagDeviceMonitorGroup=hm2DiagDeviceMonitorGroup, hm2PortMonitorConditionLinkFlapGroup=hm2PortMonitorConditionLinkFlapGroup, hm2DevSecInterfaceEntry=hm2DevSecInterfaceEntry, hm2DevSecStatusTrapCause=hm2DevSecStatusTrapCause, hm2BootSystemMonitor=hm2BootSystemMonitor, hm2PortMonitorConditionCrcFragmentsGroup=hm2PortMonitorConditionCrcFragmentsGroup, hm2DevMonSenseRingRedundancy=hm2DevMonSenseRingRedundancy, hm2DevSecOperState=hm2DevSecOperState, hm2DiagMemoryFlashFileSystemFree=hm2DiagMemoryFlashFileSystemFree, hm2DevSecStatusTimeStamp=hm2DevSecStatusTimeStamp, hm2PortMonitorConditionIntfEntry=hm2PortMonitorConditionIntfEntry, hm2DiagResourcesGroup=hm2DiagResourcesGroup, hm2DevSecTrapCauseIndex=hm2DevSecTrapCauseIndex, hm2PortMonitorIntfAction=hm2PortMonitorIntfAction, hm2DiagSelftestGroup=hm2DiagSelftestGroup, hm2BootDefaultConfigOnError=hm2BootDefaultConfigOnError, hm2DiagCableTesterStatus=hm2DiagCableTesterStatus, hm2DiagMemoryRamFree=hm2DiagMemoryRamFree, hm2SigConOperTimeStamp=hm2SigConOperTimeStamp, hm2LedPortEntry=hm2LedPortEntry, hm2SigConManualActivate=hm2SigConManualActivate, hm2LedPortMode=hm2LedPortMode, hm2DevMonSenseFan=hm2DevMonSenseFan, hm2PortMonitorConditionCrcFragmentsIntfTable=hm2PortMonitorConditionCrcFragmentsIntfTable, hm2SigConInterfaceEntry=hm2SigConInterfaceEntry, hm2DiagCableTesterCableFailureLocation=hm2DiagCableTesterCableFailureLocation, hm2DiagSelftestActionEntry=hm2DiagSelftestActionEntry, hm2SigConStateChangeTrap=hm2SigConStateChangeTrap, hm2DevMonOperTimeStamp=hm2DevMonOperTimeStamp, hm2SigConStatusTrapCause=hm2SigConStatusTrapCause, hm2DiagIfaceUtilizationGroup=hm2DiagIfaceUtilizationGroup, hm2LedGlobalStatus=hm2LedGlobalStatus, hm2DiagCableTesterCablePair=hm2DiagCableTesterCablePair, hm2DiagNetworkResourcesGroup=hm2DiagNetworkResourcesGroup, hm2DiagIfaceUtilizationTrap=hm2DiagIfaceUtilizationTrap, hm2DiagSelftestActionTable=hm2DiagSelftestActionTable, hm2DevMonID=hm2DevMonID, hm2DevMonInterfaceEntry=hm2DevMonInterfaceEntry, hm2SigConSenseModule=hm2SigConSenseModule, hm2DevSecSenseExtNvmConfigLoadUnsecure=hm2DevSecSenseExtNvmConfigLoadUnsecure, hm2SigConSenseTemperature=hm2SigConSenseTemperature, hm2PortMonitorConditionCrcFragmentsCountTotal=hm2PortMonitorConditionCrcFragmentsCountTotal, hm2DiagCpuAverageUtilization=hm2DiagCpuAverageUtilization, hm2PortMonitorConditionLinkFlapIntfTable=hm2PortMonitorConditionLinkFlapIntfTable, hm2SigConID=hm2SigConID, hm2DiagMemoryRamAllocatedAverage=hm2DiagMemoryRamAllocatedAverage, hm2SigConOperState=hm2SigConOperState, hm2SigConSenseExtNvmNotInSync=hm2SigConSenseExtNvmNotInSync, hm2DevSecSenseSnmpUnsecure=hm2DevSecSenseSnmpUnsecure, hm2DevMonStatusEntry=hm2DevMonStatusEntry, hm2DiagIfaceUtilizationAlarmLowerThreshold=hm2DiagIfaceUtilizationAlarmLowerThreshold, hm2SigConTrapEnable=hm2SigConTrapEnable, PYSNMP_MODULE_ID=hm2DiagnosticMib, hm2SigConSensePSState=hm2SigConSensePSState, hm2DevMonModuleTable=hm2DevMonModuleTable, hm2PortMonitorConditionCrcFragmentsInterval=hm2PortMonitorConditionCrcFragmentsInterval, hm2PortMonitorConditionCrcFragmentsIntfEntry=hm2PortMonitorConditionCrcFragmentsIntfEntry, hm2SigConModuleEntry=hm2SigConModuleEntry, hm2DevMonTrapEnable=hm2DevMonTrapEnable, hm2DevSecSenseHttpEnabled=hm2DevSecSenseHttpEnabled, hm2PortMonitorConditionField=hm2PortMonitorConditionField, hm2DiagSelftestRAM=hm2DiagSelftestRAM, hm2PortMonitorConditionCrcFragmentsCount=hm2PortMonitorConditionCrcFragmentsCount, hm2PortMonitorConditionDuplexMismatchDetectionMode=hm2PortMonitorConditionDuplexMismatchDetectionMode, hm2PortMonitorConditionLinkFlapCountInterval=hm2PortMonitorConditionLinkFlapCountInterval, hm2PortMonitorConditionOvldDetTholdType=hm2PortMonitorConditionOvldDetTholdType, hm2PortMonitorConditionOvldDetPkgCntBC=hm2PortMonitorConditionOvldDetPkgCntBC, hm2LedGlobalTable=hm2LedGlobalTable, hm2DevMonPSEntry=hm2DevMonPSEntry, hm2PortMonitorConditionOvldDetIntvl=hm2PortMonitorConditionOvldDetIntvl, hm2KbpsUnitTrafficTypeInvalid=hm2KbpsUnitTrafficTypeInvalid, hm2DevMonTrapCauseIndex=hm2DevMonTrapCauseIndex, hm2LedPortSignaling=hm2LedPortSignaling, hm2SignalContactGroup=hm2SignalContactGroup, hm2SigConSenseModuleRemoval=hm2SigConSenseModuleRemoval, hm2DevMonPSTable=hm2DevMonPSTable, hm2DevSecSenseEtherNetIpEnabled=hm2DevSecSenseEtherNetIpEnabled, hm2DiagnosticSNMPExtensionGroup=hm2DiagnosticSNMPExtensionGroup, hm2PortMonitorConditionOvldDetTrfcType=hm2PortMonitorConditionOvldDetTrfcType, hm2PortMonitorConditionSpeedDuplexTable=hm2PortMonitorConditionSpeedDuplexTable, hm2SigConStatusEntry=hm2SigConStatusEntry, hm2DevSecSenseNoLinkEnabled=hm2DevSecSenseNoLinkEnabled, hm2PortMonitorConditionOverloadDetectionMode=hm2PortMonitorConditionOverloadDetectionMode, hm2LedGlobalLedType=hm2LedGlobalLedType, hm2SigConSenseIfLinkAlarm=hm2SigConSenseIfLinkAlarm, hm2DevMonSenseLinkFailure=hm2DevMonSenseLinkFailure, hm2DevMonStatusTrapCause=hm2DevMonStatusTrapCause, hm2BootConfigPushButton=hm2BootConfigPushButton, hm2DiagIfaceUtilizationControlInterval=hm2DiagIfaceUtilizationControlInterval, hm2DiagSelftestActionTrap=hm2DiagSelftestActionTrap, hm2DiagNetworkCpuIfUtilization=hm2DiagNetworkCpuIfUtilization, hm2DiagMemoryRawFlashMainFree=hm2DiagMemoryRawFlashMainFree, hm2PortMonitorConditionSpeedDuplexEntry=hm2PortMonitorConditionSpeedDuplexEntry, hm2DevSecSenseIec61850MmsEnabled=hm2DevSecSenseIec61850MmsEnabled, hm2SigConStatusIndex=hm2SigConStatusIndex, hm2SigConCommonEntry=hm2SigConCommonEntry, hm2DevSecSensePasswordStrengthNotConfigured=hm2DevSecSensePasswordStrengthNotConfigured, hm2DevMonSenseExtNvmRemoval=hm2DevMonSenseExtNvmRemoval, hm2DevMonModuleEntry=hm2DevMonModuleEntry, hm2DevMonCommonEntry=hm2DevMonCommonEntry)
