#
# PySNMP MIB module H3C-SUBNET-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-SUBNET-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:23:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Gauge32, ObjectIdentity, Counter32, ModuleIdentity, iso, Counter64, TimeTicks, MibIdentifier, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Gauge32", "ObjectIdentity", "Counter32", "ModuleIdentity", "iso", "Counter64", "TimeTicks", "MibIdentifier", "Bits", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
h3cSubnetVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61))
h3cSubnetVlan.setRevisions(('2005-08-02 13:53',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cSubnetVlan.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cSubnetVlan.setLastUpdated('200508021353Z')
if mibBuilder.loadTexts: h3cSubnetVlan.setOrganization('Huawei 3Com Technology Co., Ltd.')
if mibBuilder.loadTexts: h3cSubnetVlan.setContactInfo('Platform Team Huawei 3Com Technology Co., Ltd Hai-Dian District Beijing P.R.China http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cSubnetVlan.setDescription('This MIB contains the objects for managing the subnet-based vlan configurations.')
h3cSubnetVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1))
h3cSubnetVlanScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 1))
h3cSubnetNumAllVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSubnetNumAllVlan.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetNumAllVlan.setDescription('The maximum number of subnet that can be configured on all vlans.')
h3cSubnetNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSubnetNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetNumPerVlan.setDescription('The maximum number of subnet that can be configured on each vlan.')
h3cSubnetNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSubnetNumAllPort.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetNumAllPort.setDescription('The maximum number of subnet that can be applied to all ports.')
h3cSubnetNumPerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSubnetNumPerPort.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetNumPerPort.setDescription('The maximum number of subnet that can be applied to each port.')
h3cSubnetVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2), )
if mibBuilder.loadTexts: h3cSubnetVlanTable.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanTable.setDescription('Subnet-based vlan configuration table.')
h3cSubnetVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1), ).setIndexNames((0, "H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanVlanId"), (0, "H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanSubnetIndex"))
if mibBuilder.loadTexts: h3cSubnetVlanEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanEntry.setDescription('Subnet-based vlan configuration entry.')
h3cSubnetVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cSubnetVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanVlanId.setDescription('Vlan id.')
h3cSubnetVlanSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cSubnetVlanSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanSubnetIndex.setDescription('The subnet index value of a row in this table is from zero to the value of h3cSubnetNumPerVlan subtracting one.')
h3cSubnetVlanVlanIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSubnetVlanVlanIpAddressType.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanVlanIpAddressType.setDescription('There are two kinds of ip address supported by vlan. One is ipv4, which is 32 bits. The other is ipv6, which is 128 bits.')
h3cSubnetVlanIpAddressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSubnetVlanIpAddressValue.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanIpAddressValue.setDescription('The ip address of the configured subnet on vlan, including ipv4 and ipv6.')
h3cSubnetVlanNetMaskValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSubnetVlanNetMaskValue.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanNetMaskValue.setDescription('The net mask of the configured subnet on vlan, including ipv4 and ipv6.')
h3cSubnetVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSubnetVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanRowStatus.setDescription('The row status of this table.')
h3cSubnetVlanPortCreateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 3), )
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateTable.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateTable.setDescription('Subnet-based vlan port table. Add all subnet on vlan whose vlan id is h3cSubnetVlanPortInfoVlanId into port at a draught. All of the subnet information in this port is from the h3cSubnetVlanTable above, with the value of h3cSubnetVlanPortInfoVlanId as an index, which is h3cSubnetVlanVlanId in h3cSubnetVlanTable.')
h3cSubnetVlanPortCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 3, 1), ).setIndexNames((0, "H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanPortCreateIndex"), (0, "H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanPortCreateVlanId"))
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateEntry.setDescription('Subnet-based vlan port create entry.')
h3cSubnetVlanPortCreateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateIndex.setDescription('The port index.')
h3cSubnetVlanPortCreateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateVlanId.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateVlanId.setDescription('The subnet-based vlan id. h3cSubnetVlanPortCreateVlanId refers to h3cSubnetVlanVlanId in h3cSubnetVlanTable. If h3cSubnetVlanPortCreateVlanId has no corresponding entry in h3cSubnetVlanTable, set operation will fail.')
h3cSubnetVlanPortInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSubnetVlanPortInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortInfoVlanId.setDescription('This vlaue is the same as the value of h3cSubnetVlanPortCreateVlanId index. All of the subnet information in this port, is described on vlan, whose vlan id is the value of h3cSubnetVlanPortInfoVlanId. The vlan id of vlan including subnet information can be gotten here. The subnet information can be gotten in the h3cSubnetVlanTable above.')
h3cSubnetVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSubnetVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortRowStatus.setDescription('The row status of this table.')
h3cSubnetVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2))
h3cSubnetVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2, 1))
h3cSubnetVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2, 1, 1)).setObjects(("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanScalarObjectGroup"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanSubnetGroup"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanPortCreateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cSubnetVlanCompliance = h3cSubnetVlanCompliance.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanCompliance.setDescription('The compliance statement for subnet vlan MIB.')
h3cSubnetVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2, 2))
h3cSubnetVlanScalarObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2, 2, 1)).setObjects(("H3C-SUBNET-VLAN-MIB", "h3cSubnetNumAllVlan"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetNumPerVlan"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetNumAllPort"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetNumPerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cSubnetVlanScalarObjectGroup = h3cSubnetVlanScalarObjectGroup.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanScalarObjectGroup.setDescription('A group of scalar objects describing the maximum number.')
h3cSubnetVlanSubnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2, 2, 2)).setObjects(("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanVlanIpAddressType"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanIpAddressValue"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanNetMaskValue"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cSubnetVlanSubnetGroup = h3cSubnetVlanSubnetGroup.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanSubnetGroup.setDescription('A group of subnet vlan subnet.')
h3cSubnetVlanPortCreateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 61, 2, 2, 3)).setObjects(("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanPortInfoVlanId"), ("H3C-SUBNET-VLAN-MIB", "h3cSubnetVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cSubnetVlanPortCreateGroup = h3cSubnetVlanPortCreateGroup.setStatus('current')
if mibBuilder.loadTexts: h3cSubnetVlanPortCreateGroup.setDescription('A group of subnet vlan port create table.')
mibBuilder.exportSymbols("H3C-SUBNET-VLAN-MIB", h3cSubnetVlanScalarObjectGroup=h3cSubnetVlanScalarObjectGroup, h3cSubnetVlan=h3cSubnetVlan, h3cSubnetVlanSubnetGroup=h3cSubnetVlanSubnetGroup, h3cSubnetVlanSubnetIndex=h3cSubnetVlanSubnetIndex, h3cSubnetNumPerVlan=h3cSubnetNumPerVlan, h3cSubnetVlanScalarObjects=h3cSubnetVlanScalarObjects, h3cSubnetVlanNetMaskValue=h3cSubnetVlanNetMaskValue, h3cSubnetVlanCompliances=h3cSubnetVlanCompliances, h3cSubnetVlanPortCreateEntry=h3cSubnetVlanPortCreateEntry, h3cSubnetVlanObjects=h3cSubnetVlanObjects, h3cSubnetNumAllVlan=h3cSubnetNumAllVlan, h3cSubnetVlanPortCreateTable=h3cSubnetVlanPortCreateTable, h3cSubnetVlanVlanIpAddressType=h3cSubnetVlanVlanIpAddressType, h3cSubnetNumAllPort=h3cSubnetNumAllPort, h3cSubnetVlanCompliance=h3cSubnetVlanCompliance, h3cSubnetVlanPortCreateVlanId=h3cSubnetVlanPortCreateVlanId, h3cSubnetNumPerPort=h3cSubnetNumPerPort, h3cSubnetVlanRowStatus=h3cSubnetVlanRowStatus, h3cSubnetVlanVlanId=h3cSubnetVlanVlanId, h3cSubnetVlanTable=h3cSubnetVlanTable, h3cSubnetVlanPortCreateGroup=h3cSubnetVlanPortCreateGroup, h3cSubnetVlanPortInfoVlanId=h3cSubnetVlanPortInfoVlanId, PYSNMP_MODULE_ID=h3cSubnetVlan, h3cSubnetVlanPortRowStatus=h3cSubnetVlanPortRowStatus, h3cSubnetVlanPortCreateIndex=h3cSubnetVlanPortCreateIndex, h3cSubnetVlanGroups=h3cSubnetVlanGroups, h3cSubnetVlanEntry=h3cSubnetVlanEntry, h3cSubnetVlanConformance=h3cSubnetVlanConformance, h3cSubnetVlanIpAddressValue=h3cSubnetVlanIpAddressValue)
