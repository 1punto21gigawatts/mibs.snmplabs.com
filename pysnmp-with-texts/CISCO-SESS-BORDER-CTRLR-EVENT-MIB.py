#
# PySNMP MIB module CISCO-SESS-BORDER-CTRLR-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SESS-BORDER-CTRLR-EVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
CiscoSbcPeriodicStatsInterval, = mibBuilder.importSymbols("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "CiscoSbcPeriodicStatsInterval")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoAlarmSeverity, = mibBuilder.importSymbols("CISCO-TC", "CiscoAlarmSeverity")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Counter64, Bits, TimeTicks, ObjectIdentity, IpAddress, MibIdentifier, Unsigned32, iso, ModuleIdentity, NotificationType, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Bits", "TimeTicks", "ObjectIdentity", "IpAddress", "MibIdentifier", "Unsigned32", "iso", "ModuleIdentity", "NotificationType", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoSessBorderCtrlrEventMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 658))
ciscoSessBorderCtrlrEventMIB.setRevisions(('2010-12-06 00:00', '2008-08-27 00:00', '2008-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSessBorderCtrlrEventMIB.setRevisionsDescriptions(('Added Notification csbQOSUnansweredCallRatioEvent, csbQOSUnansweredCallRatioClearEvent, csbQOSPercentPktLostEvent, csbQOSPercentPktLostClearEvent, csbQOSPercentPktDropEvent, csbQOSPercentPktDropClearEvent, csbQOSRoundTripDelayEvent, csbQOSRoundTripDelayClearEvent, csbQOSLocalJitterEvent, csbQOSLocalJitterClearEvent, csbQOSRemoteJitterEvent, csbQOSRemoteJitterClearEvent, csbQOSMoscqeEvent, csbQOSMoscqeClearEvent.', 'Changes to correct problem were csbSLACurrentUsage and csbSLAPolicyLimit was incorrectly defined as Integer32. Deprecated the following objects and notification. csbSLACurrentUsage csbSLAPolicyLimit csbSLAViolationNotifEnabled csbSLAViolation Created the following objects and notification csbSLACurrentUsageRev1 csbSLAPolicyLimitRev1 csbSLAViolationNotifEnabledRev1 csbSLAViolationRev1 Correct definition of csbAlarmTime object.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoSessBorderCtrlrEventMIB.setLastUpdated('201012060000Z')
if mibBuilder.loadTexts: ciscoSessBorderCtrlrEventMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSessBorderCtrlrEventMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: sbc-dev@cisco.com')
if mibBuilder.loadTexts: ciscoSessBorderCtrlrEventMIB.setDescription('The main purpose of this MIB is to define the SNMP notifications and alarms generated by Session Border Controller application and used to send these notifications to SNMP manager application. Each of these event/notification is explained in detail in the MIB file. The SBC service is implemented on a service card on CISCO routers. SBC application offer functionalities like firewall/NAT traversal, media bridging, policy-based call routing, signaling protocol inter-working, call billing and some degree of Call Admission Control. SBC looks to play an essential role in full-scale commercial deployment of VoIP and integration into the existing PSTN. The Session Border Controller (SBC) enables direct IP-to-IP interconnect between multiple administrative domains for session-based services providing protocol inter-working, security, and admission control and management. The SBC is a voice over IP (VoIP) device that sits on the border of a network and controls call admission to that network. The primary purpose of an SBC is to protect the interior of the network from excessive call load and malicious traffic. Additional functions provided by the SBC include media bridging and billing services. Various types of notifications required for SBC applications are as follows: 1. When SIP/H2.48 calls are established and SBC application receives traffic (RTP/RTCP packets) from a source whose IP address or port is ambiguous, a source alert event is generated for the unwanted data packets received by SBC application. 2. Blacklisting is the process of matching inbound packets based on some simple parameters (for example source IP address) and preventing packets that match those parameters from being processed. SBC detects an attempt to disrupt traffic flowing through it. When a source is blacklisted in SBC application, an event is generated to provide information of the blacklisted source like its IP address, port, VPN address etc. 3. When there is a change in the state of any SBC service configured like a new SBC service is configured or the SBC card goes to standby state, reboot or offline state, a service is removed from SBC card, an event is generated by SBC. 4. When a large number of SIP/H.248 calls are ongoing and system is congested i.e. high CPU usage or high use of memory utilization, congestion event is generated at this point and when congestion is cleared means CPU usage comes to normal another event for congestion clear is generated. 5. When a service is configured on SBC application, its call policies are defined during the configuration like maximum number of calls, maximum call rates etc. If any of these policies is violated, an event for violation of service level agreement is generated. 6. When a radius server is attached/detached with SBC, a notification is generated to provide information of radius server type, IP address, port etc. 7. When an adjacency is attached/detached with SBC, a notification is generated to provide its information like the adjacency type and state. 8. When a H.248 controller is attached/detached with SBC to establish H.248 calls with SBC, a notification is generated to provide the information regarding the attached/detached H.248 controller like controller index, IP address, port, state etc. GLOSSARY SBC: Session Border Controller CSB: CISCO Session Border Controller CAC: Call Admission Control - protects voice traffic from the negative effects of other voice traffic and to keep excess voice traffic off the network. It is used to prevent congestion in Voice traffic. It is used in the Call Setup phase. RTP: Real Time Transport Protocol - defines a standardized packet format for delivering audio and video over the Internet. RTCP: Real Time Control Protocol - It is a sister protocol of the Real-time Transport Protocol (RTP). RTCP provides out-of-band control information for an RTP flow. It partners RTP in the delivery and packaging of multimedia data, but does not transport any data itself. It is used periodically to transmit control packets to participants in a streaming multimedia session. VMG: Virtual Media Gateway - introduced to bridge between different transmission technologies and to add service to end-user connections. Its architecture separates control and connectivity functions into physically separate network layers. VPN: Virtual Private Network - It is a communications network tunneled through another network, and dedicated for a specific network. Gate Id - Context Identifiers assigned uniquely to a SIP/H.248 call flows. Flow Pair Id: Stream Identifiers assigned uniquely to a SIP/H.248 call flows. Adjacency: An adjacency contains the system information to be transmitted to next HOP. SLA: Service Level Agreement - Service level agreement includes some call admission control policies which are defined during the SBC configurations like maximum number of calls, maximum call rates etc. Diameter Server: A Diameter Server is one that handles authentication, authorization and accounting requests for a particular realm. REFERENCES 1. CISCO Session Border Controller Documents and FAQ http://zed.cisco.com/confluence/display/SBC/SBC')
class CsbQOSAlertScopeType(TextualConvention, Integer32):
    description = 'This textual convention describes the scope to which value of QOS parameter is applicable. There are two scopes supported. QOS parameters can be reported for these two scopes global scope and adjacency scope. The values are: global - This scope represents the global level and does not corresponds to individual adjacency level scope. adjacency - This scope represents the QOS notifications for one particular adjacency.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("global", 1), ("adjacency", 2))

class CsbDynamicBlackListedSrcSubFamily(TextualConvention, Integer32):
    description = 'This textual convention represents the type of the source being blacklisted. Here source is the entity that sends the SIP call packets to SBC during a SIP call. The semantics are as follows. blackVPN - Represents the VPN identifier of the blacklisted source. blackAddress - Represents the IP address of the blacklisted source. blackPort - Represents the port number of the blacklisted source.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("blackVPN", 1), ("blackAddress", 2), ("blackPort", 3))

class CsbDynamicBlackListedTransPortType(TextualConvention, Integer32):
    description = 'This textual convention describes the mode of the transport for the source that has been blacklisted. The semantics are as follows: None - None is used if mode of transport of the packets being sent to SBC is not defined. UDP - This type is used when mode of transport of the packets being sent to SBC is UDP. TCP - This type is used when mode of transport the packets being sent to SBC is TCP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("udp", 2), ("tcp", 3))

ciscoSessBorderCtrlrMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 658, 0))
ciscoSessBorderCtrlrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 658, 1))
ciscoSessBorderCtrlrMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 658, 2))
csbSourceAlertEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 1)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertVdbeId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertGateId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertFlowPairId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertLocalAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertLocalAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertLocalPort"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertRemoteAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertRemoteAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertRemotePort"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertVpnId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbSourceAlertEvent.setStatus('current')
if mibBuilder.loadTexts: csbSourceAlertEvent.setDescription('This notification is generated when after SIP/H.248 call establishment with one party, the media packets are received from some unexpected source/party (or some wrong/unexpected IP address). This is to alert that some unwanted data packets are received by the system from an undesirable IP/port.')
csbDynamicBlackListEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 2)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListSubFamily"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListVpnId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListTransportType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListPortNumber"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListSrcBlocked"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbDynamicBlackListEvent.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListEvent.setDescription("This notification is generated when a source is added to or removed from the blacklist table. Dynamic blacklists put in place automatically (subject to a set of configurable constraints) by the SBC when it detects an attempt to disrupt traffic flowing through it. Dynamic blacklisting does not require management interference. Blacklist table is restricted only to SBC service. This table is not made available to NM. For more Information on Dynamic Blacklisting refer to the following link: http://lbj.cisco.com/push_targets1/ucdit/cc/td/doc/product/ioxso ft/iox34/cgcr34/sbc_c34/sbc34dos.htm or Search cisco.com using keywords 'DoS Prevention and Dynamic Blacklisting'.")
csbAdjacencyStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 3)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyAccountName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbAdjacencyStatus.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyStatus.setDescription('This notification is generated when an Adjacency is attached to (or detached from) the SBC.')
csbServiceStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 4)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceSlot"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbServiceStateEvent.setStatus('current')
if mibBuilder.loadTexts: csbServiceStateEvent.setDescription('This notification is generated when there is a change in the state of a service card. The changes in the service state are: -Active -Standby')
csbSystemCongestionAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 5)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionAlarmType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionAlarmState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbSystemCongestionAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: csbSystemCongestionAlarmEvent.setDescription('This notification is generated when CPU/Memory congestion in SBC is raised or cleared.')
csbSLAViolation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 6)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyAccountName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyScope"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyLimit"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLACurrentUsage"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyRestriction"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbSLAViolation.setStatus('deprecated')
if mibBuilder.loadTexts: csbSLAViolation.setDescription('This notification is generated when there is a violation of Service Level Agreement as described in the policy tables. The typical service level agreements include maximum number of calls allowed, max call rate, max bandwidth etc. This notification has been replaced by the csbSLAViolationRev1 notification.')
csbRadiusConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 7)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerPriority"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbRadiusConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: csbRadiusConnectionStatus.setDescription('This notification is generated when the connection to the radius server changes (connected or disconnected).')
csbDiameterConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 8)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterGroupName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterServerName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbDiameterConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: csbDiameterConnectionStatus.setDescription('This notification is generated when the connection to the diameter server changes (connected or disconnected).')
csbH248ControllerStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 9)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csb248ControllerAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerPort"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbH248ControllerStatus.setStatus('current')
if mibBuilder.loadTexts: csbH248ControllerStatus.setDescription('This notification is generated when in distributed deployment model, a DBE is attached or detached from the SBC.')
csbSLAViolationRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 10)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyAccountName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyScope"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyLimitRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLACurrentUsageRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyRestriction"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if mibBuilder.loadTexts: csbSLAViolationRev1.setStatus('current')
if mibBuilder.loadTexts: csbSLAViolationRev1.setDescription('This notification is generated when there is a violation of Service Level Agreement as described in the policy tables. The typical service level agreements include maximum number of alls allowed, max call rate, max bandwidth etc. This notification replaces the csbSLAViolation notification.')
csbQOSUnansweredCallRatioEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 11)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSUnansweredCallRatioEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSUnansweredCallRatioEvent.setDescription('This notification is generated when QOS metric for Unanswered Call Ratio (UCR) crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSUnansweredCallRatioClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 12)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSUnansweredCallRatioClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSUnansweredCallRatioClearEvent.setDescription('This notification is generated when QOS metric for unanswered call ratio (UCR) reaches back to normal level from one of the major/minor/critical level.')
csbQOSPercentPktLostEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 13)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSPercentPktLostEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSPercentPktLostEvent.setDescription('This notification is generated when QOS metric for percentage of media packets lost crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSPercentPktLostClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 14)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSPercentPktLostClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSPercentPktLostClearEvent.setDescription('This notification is raised whenever QOS metric for percentage media packet lost reaches back to normal level from one of the major/minor/critical level.')
csbQOSPercentPktDropEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 15)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSPercentPktDropEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSPercentPktDropEvent.setDescription('This notification is generated when QOS metric for percentage of media packets dropped crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSPercentPktDropClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 16)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSPercentPktDropClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSPercentPktDropClearEvent.setDescription('This notification is raised whenever QOS metric for percentage media packet dropped reaches back to normal level from one of the major/minor/critical level.')
csbQOSRoundTripDelayEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 17)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSRoundTripDelayEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSRoundTripDelayEvent.setDescription('This notification is generated when QOS metric for round trip delay(RTD) crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSRoundTripDelayClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 18)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSRoundTripDelayClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSRoundTripDelayClearEvent.setDescription('This notification is generated when QOS metric for round trip delay(RTD) reaches back to normal level from one of the major/minor/critical level.')
csbQOSLocalJitterEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 19)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSLocalJitterEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSLocalJitterEvent.setDescription('This notification is generated when QOS metric for local media packet jitter crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSLocalJitterClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 20)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSLocalJitterClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSLocalJitterClearEvent.setDescription('This notification is generated when QOS metric for local media packet jitter reaches back to normal level from one of the major/minor/critical level.')
csbQOSRemoteJitterEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 21)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSRemoteJitterEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSRemoteJitterEvent.setDescription('This notification is generated when QOS metric for remote media packet jitter crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSRemoteJitterClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 22)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSRemoteJitterClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSRemoteJitterClearEvent.setDescription('This notification is generated when QOS metric for remote media packet jitter reaches back to normal level from one of the major/minor/critical level.')
csbQOSMoscqeEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 23)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSMoscqeEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSMoscqeEvent.setDescription('This notification is generated when QOS metric for moscqe - Mean Opinion Score(MOS) - value crosses a configured threshold and attains either of minor, major or critical level.')
csbQOSMoscqeClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 658, 0, 24)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"))
if mibBuilder.loadTexts: csbQOSMoscqeClearEvent.setStatus('current')
if mibBuilder.loadTexts: csbQOSMoscqeClearEvent.setDescription('This notification is generated when QOS metric for moscqe - Mean Opinion Score(MOS) - value reaches back to normal level from one of the major/minor/critical level.')
csbAlarmSubsystem = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("signaling", 1), ("media", 2), ("cac", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAlarmSubsystem.setStatus('current')
if mibBuilder.loadTexts: csbAlarmSubsystem.setDescription('This object identifies the subsystem or application module which generated the alarm. The subsystem which is involved in call establishment only is of type signaling. The subsystem which handles the traffic/data (RTP/RTCP packets) is of type media. The subsystem which is involved in call admission control is of type CAC.')
csbAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 2), CiscoAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: csbAlarmSeverity.setDescription('This object identifies the perceived alarm severity associated with a service or safety affecting condition and/or event. These are based on ITU severities except that info is added. cleared - Indicates a previous alarm condition has been cleared. It is not required (unless specifically stated elsewhere on a case by case basis) that an alarm condition that has been cleared will produce a notification or other event containing an alarm severity with this value. indeterminate - Indicates that the severity level cannot be determined. critical - Indicates that a service or safety affecting condition has occurred and an immediate corrective action is required. major - Indicates that a service affecting condition has occurred and an urgent corrective action is required. minor - Indicates the existence of a non-service affecting condition and that corrective action should be taken in order to prevent a more serious (for example, service or safety affecting) condition. warning - Indicates the detection of a potential or impending service or safety affecting condition, before any significant effects have been felt. info - Indicates an alarm condition that does not meet any other severity definition. This can include important, but non-urgent, notices or informational events.')
csbAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAlarmID.setStatus('current')
if mibBuilder.loadTexts: csbAlarmID.setDescription('This object identifies the alarm identification number. It is a unique number generated by agent in the incremented order like for the first alarm it is 1, for second alarm it is 2 and so on.')
csbAlarmTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAlarmTime.setStatus('current')
if mibBuilder.loadTexts: csbAlarmTime.setDescription('This object identifies the time when alarm was generated. It is in the form: dow mon dd hh:mm:ss zzz yyyy where: dow is the day of the week (Sun, Mon, Tue, Wed, Thu, Fri, Sat). mon is the month (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec). dd is the day of the month (01 through 31), as two decimal digits. hh is the hour of the day (00 through 23), as two decimal digits. mm is the minute within the hour (00 through 59), as two decimal digits. ss is the second within the minute (00 through 61), as two decimal digits. zzz is the time zone (and may reflect daylight savings time). Standard time zone abbreviations include those recognized by the method parse. If time zone information is not available, then zzz is empty - that is, it consists of no characters at all. yyyy is the year, as four decimal digits.')
csbSBCServiceName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 5), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSBCServiceName.setStatus('current')
if mibBuilder.loadTexts: csbSBCServiceName.setDescription('This MIB object represents the name of the SBC service configured on the service card.')
csbAlarmDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: csbAlarmDescription.setDescription('This MIB object represents the description of the conditions due to which the notification is raised.')
csbSrcAlertVdbeId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertVdbeId.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertVdbeId.setDescription('This MIB object represents the name of the virtual media gateway. The length of this object will be zero if the virtual media gateway is not defined.')
csbSrcAlertGateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertGateId.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertGateId.setDescription('This MIB object represents the context identifier for a particular SIP/H.248 call flow. The context identifier for each call is unique. The context identifier is also called as gate identifier for the SIP/H.248 call flow.')
csbSrcAlertFlowPairId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertFlowPairId.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertFlowPairId.setDescription('This MIB object represents the stream identifier given to a particular SIP/H.248 call flow. The stream identifier for each call is unique. The stream identifier is also called as flow pair identifier for the SIP/H.248 call flow.')
csbSrcAlertLocalAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 10), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertLocalAddressType.setDescription('This MIB object represents the address type of local source on which the media (RTP/RTCP) packets from an unexpected source was received during a SIP/H.248 call flow. The IP address could be IPv4 as well as IPv6.')
csbSrcAlertLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 11), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertLocalAddress.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertLocalAddress.setDescription('This MIB object represents the local address on which the media (RTP/RTCP) packets from an unexpected source was received during a SIP/H.248 call flow. The IP address could be of type csbSrcAlertLocalAddressType.')
csbSrcAlertLocalPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 12), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertLocalPort.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertLocalPort.setDescription('This MIB object represents the local RTP port number for the flow on which the unexpected source packet was received. Note the RTP port number is reported in the case where the unexpected packet was received on the RTCP port for the flow.')
csbSrcAlertRemoteAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 13), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertRemoteAddressType.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertRemoteAddressType.setDescription('This MIB object represents the type of address for the source address in media packets received from an unexpected source (not received from the source with which SIP/H.248 call is already established but are received from some other IP address).')
csbSrcAlertRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 14), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertRemoteAddress.setDescription('This MIB object represents the source address from which unexpected media packets are received during a SIP/H.248 call flow, i.e., media packets are not received from the source with which SIP/H.248 call is already established but are received from some other IP address. The IP address could be of type csbSrcAlertRemoteAddressType.')
csbSrcAlertRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 15), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertRemotePort.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertRemotePort.setDescription('This MIB object represents the source port from which unexpected media packets are received during a SIP/H.248 call flow (i.e. media packets are not received from the source with which SIP/H.248 call is already established but are received from some other IP address).')
csbSrcAlertVpnId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSrcAlertVpnId.setStatus('current')
if mibBuilder.loadTexts: csbSrcAlertVpnId.setDescription('This MIB object represents the VPN Identifier for the Virtual Private Network within which the source flow is allocated. As this is an OCTET STRING, the MIB object will populate a NULL string if the source flow is not part of a VPN and in this case its length will be 0.')
csbDynamicBlackListSubFamily = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 17), CsbDynamicBlackListedSrcSubFamily()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListSubFamily.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListSubFamily.setDescription('This MIB object represents the subfamily to which a blacklist source belongs.')
csbDynamicBlackListVpnId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListVpnId.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListVpnId.setDescription('This MIB object represents the VPN Identifier for the Virtual Private Network that the source flow is allocated in. The value of this MIB object will be 0 if the source flow is not part of a VPN.')
csbDynamicBlackListAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 19), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListAddressType.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListAddressType.setDescription("This MIB object represents the type of the address of the source. This MIB object is not applicable for subfamilies of type 'blackVpn' and hence a value of 'unknown' will be populated.")
csbDynamicBlackListAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 20), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListAddress.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListAddress.setDescription("This MIB object represents the address of the source. This object could be if type csbDynamicBlackListAddressType. This MIB object is not applicable for subfamilies of type 'blackVpn' and hence a value of 'unknown' will be populated.")
csbDynamicBlackListTransportType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 21), CsbDynamicBlackListedTransPortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListTransportType.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListTransportType.setDescription("This MIB object represents the transport type of the source port. This MIB object is not applicable for subfamilies of type 'blackVpn' and 'blackAddr', hence a value 'unknown' will be populated.")
csbDynamicBlackListPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 22), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListPortNumber.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListPortNumber.setDescription("This MIB object represents the source port number. This MIB object is not applicable for subfamilies of type 'blackVpn' and 'blackAddr' and hence a value of 'unknown' will be populated.")
csbDynamicBlackListSrcBlocked = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 23), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDynamicBlackListSrcBlocked.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListSrcBlocked.setDescription("This MIB object represents the access control imposed on the blacklisted source by the controller. A value of 'true' indicates access is blocked and A value of 'false' indicates that the access is unblocked.")
csbAdjacencyType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("h323", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAdjacencyType.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyType.setDescription('This MIB object represents the protocol type of the adjacency. The adjacency are of two types - SIP and H.323.')
csbAdjacencyState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attached", 1), ("detached", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAdjacencyState.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyState.setDescription('This MIB object represents the adjacency state. The adjacency state can either be attached or detached.')
csbAdjacencyName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 26), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAdjacencyName.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyName.setDescription('This MIB object represents the name of the adjacency. The length of this object will be zero if the adjacency name is not defined.')
csbAdjacencyAccountName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 27), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbAdjacencyAccountName.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyAccountName.setDescription('This MIB object represents the account name associated with the adjacency.')
csbSBCServiceState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("offline", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSBCServiceState.setStatus('current')
if mibBuilder.loadTexts: csbSBCServiceState.setDescription('This MIB object represents the current state of the service card. SBC service is in active state if it is configured on the primary card and the service card is in active state. The SBC service is in standby state if the service card on which the service is configured goes to standby mode. The SBC service is in offline mode if the service card on which the service is configured is in reset state or reboot state.')
csbSBCServiceSlot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 29), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSBCServiceSlot.setStatus('current')
if mibBuilder.loadTexts: csbSBCServiceSlot.setDescription('This MIB object represents the slot identifier of the service card.')
csbCongestionAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("cpu", 2), ("memory", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbCongestionAlarmType.setStatus('current')
if mibBuilder.loadTexts: csbCongestionAlarmType.setDescription("This MIB object represents the type of the CSB system congestion alarm. The alarm is raised either due to 'high CPU usage' or 'high memory usage'.")
csbCongestionAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("cleared", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbCongestionAlarmState.setStatus('current')
if mibBuilder.loadTexts: csbCongestionAlarmState.setDescription("This MIB object represents the CSB system congestion alarm state. The state is either 'raised' or 'cleared'.")
csbSLAPolicyAccountName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 32), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLAPolicyAccountName.setStatus('current')
if mibBuilder.loadTexts: csbSLAPolicyAccountName.setDescription('This MIB object represents the account name of the source which was involved in policy violation.')
csbSLAPolicyScope = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 33), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLAPolicyScope.setStatus('current')
if mibBuilder.loadTexts: csbSLAPolicyScope.setDescription('This MIB object represents the scope of the SLA policy which has been violated.')
csbSLAPolicyLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 34), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLAPolicyLimit.setStatus('deprecated')
if mibBuilder.loadTexts: csbSLAPolicyLimit.setDescription('This MIB object represents the currently defined policy limits.')
csbSLAViolationEvent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 35), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLAViolationEvent.setStatus('current')
if mibBuilder.loadTexts: csbSLAViolationEvent.setDescription('This MIB object represents the type of SLA policy violation event.')
csbSLAPolicyRestriction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 36), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLAPolicyRestriction.setStatus('current')
if mibBuilder.loadTexts: csbSLAPolicyRestriction.setDescription('This MIB object represents the SLA policy restriction description means the violation of the call policy has resulted into which type of restriction, like if maximum number of calls exceeds then it will restrict the number of concurrent calls.')
csbSLACurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 37), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLACurrentUsage.setStatus('deprecated')
if mibBuilder.loadTexts: csbSLACurrentUsage.setDescription('This MIB object represents the actual usage value for the event which leads to the SLA violation, like if maximum number of calls are more than SLA policy then actual value of this parameter/event.')
csbRadiusConnectionState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbRadiusConnectionState.setStatus('current')
if mibBuilder.loadTexts: csbRadiusConnectionState.setDescription('This MIB object represents the RADIUS server connection state. The connection state can either be up or down.')
csbRadiusType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accounting", 1), ("authentication", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbRadiusType.setStatus('current')
if mibBuilder.loadTexts: csbRadiusType.setDescription('This MIB object represents the type of RADIUS either for accounting or for authentication.')
csbRadiusServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 40), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbRadiusServerName.setStatus('current')
if mibBuilder.loadTexts: csbRadiusServerName.setDescription('This MIB object represents the name of the RADIUS server.')
csbRadiusServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 41), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbRadiusServerAddressType.setStatus('current')
if mibBuilder.loadTexts: csbRadiusServerAddressType.setDescription('This MIB object represents the address type of RADIUS server (IPv4 or IPv6).')
csbRadiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 42), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: csbRadiusServerAddress.setDescription('This MIB object represents address of the RADIUS server. This object could be of type csbRadiusServerAddressType.')
csbRadiusServerPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 43), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbRadiusServerPriority.setStatus('current')
if mibBuilder.loadTexts: csbRadiusServerPriority.setDescription('This MIB object represents the priority of the RADIUS server in case of the multiple servers. Higher the number, the higher is its priority.')
csbDiameterConnectionState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDiameterConnectionState.setStatus('current')
if mibBuilder.loadTexts: csbDiameterConnectionState.setDescription('This MIB object represents the diameter server connection state. The connection state can either be up or down.')
csbDiameterType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accounting", 1), ("authentication", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDiameterType.setStatus('current')
if mibBuilder.loadTexts: csbDiameterType.setDescription('This MIB object represents the type of diameter server used which can be either for accounting or for authentication here.')
csbDiameterGroupName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 46), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDiameterGroupName.setStatus('current')
if mibBuilder.loadTexts: csbDiameterGroupName.setDescription('This MIB object represents the diameter group name. The length of this object is zero if the diameter type is authentication.')
csbDiameterServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 47), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbDiameterServerName.setStatus('current')
if mibBuilder.loadTexts: csbDiameterServerName.setDescription('This MIB object represents the diameter server name.')
csbH248ControllerState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attached", 1), ("detached", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbH248ControllerState.setStatus('current')
if mibBuilder.loadTexts: csbH248ControllerState.setDescription('This MIB object represents the current state of H.248 controller with respect to SBC which is attached or detached state.')
csb248ControllerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 49), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csb248ControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: csb248ControllerAddressType.setDescription('This MIB object represents the address type of the H.248 controller.')
csbH248ControllerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 50), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbH248ControllerAddress.setStatus('current')
if mibBuilder.loadTexts: csbH248ControllerAddress.setDescription('This MIB object represents the address of the H.248 controller. This object is of the type csb248ControllerAddressType.')
csbH248ControllerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 51), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbH248ControllerPort.setStatus('current')
if mibBuilder.loadTexts: csbH248ControllerPort.setDescription('This MIB object represents the port of the H.248 controller.')
csbSourceAlertNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 52), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbSourceAlertNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbSourceAlertNotifEnabled.setDescription("The source alert linkset notification truth value. 'true' - Indicates that csbSourceAlertEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbSourceAlertEvent notification generation is disabled.")
csbBlackListNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 53), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbBlackListNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbBlackListNotifEnabled.setDescription("The dynamic blacklist linkset notification truth value. 'true' - Indicates that csbDynamicBlackListEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbDynamicBlackListEvent notification generation is disabled.")
csbAdjacencyStatusNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbAdjacencyStatusNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyStatusNotifEnabled.setDescription("The adjacency status linkset notification truth value. 'true' - Indicates that csbAdjacencyStatus notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbAdjacencyStatus notification generation is disabled.")
csbServiceStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbServiceStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbServiceStateNotifEnabled.setDescription("The service state linkset notification truth value. 'true' - Indicates that csbServiceStateEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbServiceStateEvent notification generation is disabled.")
csbCongestionAlarmNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbCongestionAlarmNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbCongestionAlarmNotifEnabled.setDescription("The system congestion alarm linkset notification truth value. 'true' - Indicates that csbSystemCongestionAlarmEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbSystemCongestionAlarmEvent notification generation is disabled.")
csbSLAViolationNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 57), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbSLAViolationNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: csbSLAViolationNotifEnabled.setDescription("The SLA violation linkset notification truth value. 'true' - Indicates that csbSLAViolation notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbSLAViolation notification generation is disabled.")
csbRadiusConnectionStatusNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbRadiusConnectionStatusNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbRadiusConnectionStatusNotifEnabled.setDescription("The radius connection status linkset notification truth value. 'true' - Indicates that csbRadiusConnectionStatus notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbRadiusConnectionStatus notification generation is disabled.")
csbDiameterConnectionStatusNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbDiameterConnectionStatusNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbDiameterConnectionStatusNotifEnabled.setDescription("The diameter connection status linkset notification truth value. 'true' - Indicates that csbDiameterConnectionStatus notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbDiameterConnectionStatus notification generation is disabled.")
csbH248ControllerStatusNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbH248ControllerStatusNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbH248ControllerStatusNotifEnabled.setDescription("The H248 controller status linkset notification truth value. 'true' - Indicates that csbH248ControllerStatus notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbH248ControllerStatus notification generation is disabled.")
csbSLAPolicyLimitRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 61), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLAPolicyLimitRev1.setStatus('current')
if mibBuilder.loadTexts: csbSLAPolicyLimitRev1.setDescription('This MIB object represents the currently defined policy limits. If the SLA is for max-num-calls, this value is the configured maximum number of calls. If the SLA is for max-call-rate, this value is the configured maximum number of calls per minute. If the SLA is for max-bandwidth, this value is the configured maximum bidirection bandwidth in bps. This object replaces the csbSLAPolicyLimit object.')
csbSLACurrentUsageRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 62), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbSLACurrentUsageRev1.setStatus('current')
if mibBuilder.loadTexts: csbSLACurrentUsageRev1.setDescription('This MIB object represents the actual usage value for the event which leads to the SLA violation, like if maximum number of calls are more than SLA policy then actual value of this parameter/event. If the SLA is for max-num-calls, this value is the current number of calls. If the SLA is for max-call-rate, this value is the current number of calls per minute. If the SLA is for max-bandwidth, this value is the current bidirection bandwidth in bps. This object replaces the csbSLACurrentUsage object.')
csbSLAViolationNotifEnabledRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 63), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbSLAViolationNotifEnabledRev1.setStatus('current')
if mibBuilder.loadTexts: csbSLAViolationNotifEnabledRev1.setDescription("The SLA violation linkset notification truth value. 'true' - Indicates that csbSLAViolationRev1 notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbSLAViolationReve1 notification generation is disabled.")
csbQOSAlertCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 64), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSAlertCurrentValue.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertCurrentValue.setDescription('This object indicates the current measured value of the QOS object.')
csbQOSAlertCurrentLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 65), CiscoAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSAlertCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertCurrentLevel.setDescription('The current Threshold Level of the measured object. The levels are Major, Minor, Critical.')
csbQOSAlertPreviousLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 66), CiscoAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSAlertPreviousLevel.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertPreviousLevel.setDescription('The previous threshold level of the measured object. The levels are Major, Minor, Critical.')
csbQOSNormalAlertCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 67), Counter32()).setUnits('occurrences').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSNormalAlertCount.setStatus('current')
if mibBuilder.loadTexts: csbQOSNormalAlertCount.setDescription('This object represents the number of times this QOS object, has entered normal level.')
csbQOSMinorAlertCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 68), Counter32()).setUnits('occurrences').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSMinorAlertCount.setStatus('current')
if mibBuilder.loadTexts: csbQOSMinorAlertCount.setDescription('This object represents number of times the QOS object, has entered minor level.')
csbQOSCriticalAlertCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 69), Counter32()).setUnits('occurrences').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSCriticalAlertCount.setStatus('current')
if mibBuilder.loadTexts: csbQOSCriticalAlertCount.setDescription('This object represents the number of times the QOS object, has entered critical level.')
csbQOSMajorAlertCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 70), Counter32()).setUnits('occurrences').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSMajorAlertCount.setStatus('current')
if mibBuilder.loadTexts: csbQOSMajorAlertCount.setDescription('This object represents number the of times the QOS object, has entered major level.')
csbQOSAlertType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 71), CsbQOSAlertScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSAlertType.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertType.setDescription('This object represents that the value of QOS parameter is applicable at which scope. QOS parameters can be calculated both at global as well as adjacency scope.')
csbQOSAlertSummaryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 72), CiscoSbcPeriodicStatsInterval()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csbQOSAlertSummaryPeriod.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertSummaryPeriod.setDescription('This object indicates the interval for which the periodic statistics information is to be displayed. The interval values can be 5 min, 15 mins, 1 hour or 1 day.')
csbQOSAlertUnansweredCallRatioNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 73), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertUnansweredCallRatioNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertUnansweredCallRatioNotifEnabled.setDescription("The Unanswered Call Ratio notification truth value. 'true' - Indicates that csbQOSUnansweredCallRatioEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSUnansweredCallRatioEvent notification generation is disabled.")
csbQOSAlertPercentPktDropNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertPercentPktDropNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertPercentPktDropNotifEnabled.setDescription("The percent media packet drop notification truth value. 'true' - Indicates that csbQOSPercentPktDropEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSPercentPktDropEvent notification generation is disabled.")
csbQOSAlertRoundTripDelayNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertRoundTripDelayNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertRoundTripDelayNotifEnabled.setDescription("The round trip delay notification truth value. 'true' - Indicates that csbQOSRoundTripDelayEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSRoundTripDelayEvent notification generation is disabled.")
csbQOSAlertMoscqeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 76), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertMoscqeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertMoscqeNotifEnabled.setDescription("The moscqe notification truth value. 'true' - Indicates that csbQOSMoscqeEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSMoscqeEvent notification generation is disabled.")
csbQOSAlertLocalJitterNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 77), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertLocalJitterNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertLocalJitterNotifEnabled.setDescription("The remote media packet jitter notification truth value. 'true' - Indicates that csbQOSLocalJitterEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSLocalJitterEvent notification generation is disabled.")
csbQOSAlertRemoteJitterNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 78), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertRemoteJitterNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertRemoteJitterNotifEnabled.setDescription("The remote media packet jitter notification truth value. 'true' - Indicates that csbQOSRemoteJitterEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSRemoteJitterEvent notification generation is disabled.")
csbQOSAlertPercentPktLostNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 658, 1, 79), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csbQOSAlertPercentPktLostNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertPercentPktLostNotifEnabled.setDescription("The percent media packet drop notification truth value. 'true' - Indicates that csbQOSPercentPktLostEvent notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' - Indicates that csbQOSPercentPktLostEvent notification generation is disabled.")
ciscoSessBorderCtrlrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 1))
ciscoSessBorderCtrlrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2))
csbCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 1, 1)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationManadatoryParams"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248StatusGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotifEnabledGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCompliance = csbCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: csbCompliance.setDescription('The compliance statement for the SNMP entities that implement this MIB module.')
csbComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 1, 2)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationManadatoryParams"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248StatusGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotifEnabledGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbComplianceRev1 = csbComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: csbComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement this MIB module.')
csbComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 1, 3)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationManadatoryParams"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248StatusGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotifEnabledGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertGroup"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotificationGroupSup1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbNotifEnabledGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbComplianceRev2 = csbComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: csbComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement this MIB module.')
csbNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 1)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyStatus"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbServiceStateEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSystemCongestionAlarmEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolation"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionStatus"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionStatus"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotificationGroup = csbNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: csbNotificationGroup.setDescription('This collection of objects represents the notifications generated by the agent.')
csbNotificationManadatoryParams = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 2)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSubsystem"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmSeverity"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmID"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmTime"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAlarmDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotificationManadatoryParams = csbNotificationManadatoryParams.setStatus('current')
if mibBuilder.loadTexts: csbNotificationManadatoryParams.setDescription('This collection of objects represents the information which must be included in every notification.')
csbSourceAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 3)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertVdbeId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertGateId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertFlowPairId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertLocalAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertLocalPort"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertRemoteAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertRemoteAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertRemotePort"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertVpnId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSrcAlertLocalAddressType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbSourceAlertGroup = csbSourceAlertGroup.setStatus('current')
if mibBuilder.loadTexts: csbSourceAlertGroup.setDescription('This collection of objects represents the information about flows and unknown sources from which media packets have arrived at the respective flows.')
csbDynamicBlackListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 4)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListSubFamily"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListVpnId"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListTransportType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListPortNumber"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListSrcBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbDynamicBlackListGroup = csbDynamicBlackListGroup.setStatus('current')
if mibBuilder.loadTexts: csbDynamicBlackListGroup.setDescription('This collection of objects represents the information about black-listed sources.')
csbAdjacencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 5)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyAccountName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbAdjacencyGroup = csbAdjacencyGroup.setStatus('current')
if mibBuilder.loadTexts: csbAdjacencyGroup.setDescription('This collection of objects represents the information about the adjacency notification.')
csbSBCServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 6)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceSlot"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSBCServiceState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbSBCServiceGroup = csbSBCServiceGroup.setStatus('current')
if mibBuilder.loadTexts: csbSBCServiceGroup.setDescription('This collection of objects represents the information related to the SBC service configured on a router.')
csbCongestionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 7)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionAlarmState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionAlarmType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCongestionGroup = csbCongestionGroup.setStatus('current')
if mibBuilder.loadTexts: csbCongestionGroup.setDescription('This collection of objects represents the information about the congestion state of the SBC system.')
csbSLAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 8)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyAccountName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyScope"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyLimit"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLACurrentUsage"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyRestriction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbSLAGroup = csbSLAGroup.setStatus('deprecated')
if mibBuilder.loadTexts: csbSLAGroup.setDescription('This collection of objects represents the information related to the Service Level Agreement (SLA) violation notification.')
csbRadiusConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 9)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusServerPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbRadiusConnectionGroup = csbRadiusConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: csbRadiusConnectionGroup.setDescription('This collection of objects represents the information about the radius server connection state.')
csbDiameterConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 10)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterGroupName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbDiameterConnectionGroup = csbDiameterConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: csbDiameterConnectionGroup.setDescription('This collection of objects represents the information about the diameter server connection state.')
csbH248StatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 11)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerState"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csb248ControllerAddressType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerAddress"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbH248StatusGroup = csbH248StatusGroup.setStatus('current')
if mibBuilder.loadTexts: csbH248StatusGroup.setDescription('This collection of objects represents the information about the H.248 associations in distributed deployment model.')
csbNotifEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 12)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbBlackListNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyStatusNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbServiceStateNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionAlarmNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionStatusNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionStatusNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerStatusNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotifEnabledGroup = csbNotifEnabledGroup.setStatus('deprecated')
if mibBuilder.loadTexts: csbNotifEnabledGroup.setDescription('This collection of objects represent the information about the standalone object which are used to tell the linkset notification truth value for each of the notification type.')
csbNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 13)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDynamicBlackListEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyStatus"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbServiceStateEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSystemCongestionAlarmEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionStatus"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionStatus"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotificationGroupRev1 = csbNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: csbNotificationGroupRev1.setDescription('This collection of objects represents the notifications generated by the agent.')
csbSLAGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 14)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyAccountName"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyScope"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyLimitRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLACurrentUsageRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAPolicyRestriction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbSLAGroupRev1 = csbSLAGroupRev1.setStatus('current')
if mibBuilder.loadTexts: csbSLAGroupRev1.setDescription('This collection of objects represents the information related to the Service Level Agreement (SLA) violation notification.')
csbNotifEnabledGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 15)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSourceAlertNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbBlackListNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbAdjacencyStatusNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbServiceStateNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbCongestionAlarmNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbSLAViolationNotifEnabledRev1"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbRadiusConnectionStatusNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbDiameterConnectionStatusNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbH248ControllerStatusNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotifEnabledGroupRev1 = csbNotifEnabledGroupRev1.setStatus('current')
if mibBuilder.loadTexts: csbNotifEnabledGroupRev1.setDescription('This collection of objects represent the information about the standalone object which are used to tell the linkset notification truth value for each of the notification type.')
csbQOSAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 16)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentValue"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertCurrentLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPreviousLevel"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSNormalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMinorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSCriticalAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMajorAlertCount"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertType"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertSummaryPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbQOSAlertGroup = csbQOSAlertGroup.setStatus('current')
if mibBuilder.loadTexts: csbQOSAlertGroup.setDescription('This collection of objects representing the information about QOS statistics Alert traps.')
csbNotificationGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 17)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSUnansweredCallRatioClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSPercentPktLostEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSPercentPktLostClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSPercentPktDropEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSPercentPktDropClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSRoundTripDelayEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSRoundTripDelayClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSLocalJitterEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSLocalJitterClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSRemoteJitterEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSRemoteJitterClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMoscqeEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSMoscqeClearEvent"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSUnansweredCallRatioEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotificationGroupSup1 = csbNotificationGroupSup1.setStatus('current')
if mibBuilder.loadTexts: csbNotificationGroupSup1.setDescription('This collection of objects represents the additional notifications generated by the agent.')
csbNotifEnabledGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 658, 2, 2, 18)).setObjects(("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertUnansweredCallRatioNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPercentPktDropNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertRoundTripDelayNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertLocalJitterNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertRemoteJitterNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertPercentPktLostNotifEnabled"), ("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", "csbQOSAlertMoscqeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbNotifEnabledGroupSup1 = csbNotifEnabledGroupSup1.setStatus('current')
if mibBuilder.loadTexts: csbNotifEnabledGroupSup1.setDescription('This collection of objects represent the information about the standalone object which are used to tell the linkset notification truth value for each of the notification type.')
mibBuilder.exportSymbols("CISCO-SESS-BORDER-CTRLR-EVENT-MIB", csbSLAViolation=csbSLAViolation, csbSLAViolationEvent=csbSLAViolationEvent, csbCongestionAlarmNotifEnabled=csbCongestionAlarmNotifEnabled, csbDynamicBlackListGroup=csbDynamicBlackListGroup, csbQOSMajorAlertCount=csbQOSMajorAlertCount, csbDiameterConnectionStatusNotifEnabled=csbDiameterConnectionStatusNotifEnabled, csbQOSNormalAlertCount=csbQOSNormalAlertCount, csbSLACurrentUsageRev1=csbSLACurrentUsageRev1, csbQOSPercentPktDropEvent=csbQOSPercentPktDropEvent, csbAdjacencyGroup=csbAdjacencyGroup, csbSrcAlertRemoteAddress=csbSrcAlertRemoteAddress, csbSBCServiceGroup=csbSBCServiceGroup, csbSLAPolicyScope=csbSLAPolicyScope, csbQOSUnansweredCallRatioEvent=csbQOSUnansweredCallRatioEvent, csbRadiusServerPriority=csbRadiusServerPriority, csbCongestionAlarmState=csbCongestionAlarmState, csbSLAGroup=csbSLAGroup, csbSLACurrentUsage=csbSLACurrentUsage, ciscoSessBorderCtrlrMIBNotifs=ciscoSessBorderCtrlrMIBNotifs, csbH248ControllerPort=csbH248ControllerPort, csbSrcAlertRemoteAddressType=csbSrcAlertRemoteAddressType, PYSNMP_MODULE_ID=ciscoSessBorderCtrlrEventMIB, csbQOSCriticalAlertCount=csbQOSCriticalAlertCount, csbQOSLocalJitterEvent=csbQOSLocalJitterEvent, csbSourceAlertGroup=csbSourceAlertGroup, csbRadiusConnectionStatus=csbRadiusConnectionStatus, csbNotificationGroupSup1=csbNotificationGroupSup1, csbSrcAlertGateId=csbSrcAlertGateId, CsbDynamicBlackListedTransPortType=CsbDynamicBlackListedTransPortType, csbH248ControllerState=csbH248ControllerState, csbAdjacencyStatus=csbAdjacencyStatus, csbQOSAlertCurrentLevel=csbQOSAlertCurrentLevel, csbQOSAlertRoundTripDelayNotifEnabled=csbQOSAlertRoundTripDelayNotifEnabled, ciscoSessBorderCtrlrMIBGroups=ciscoSessBorderCtrlrMIBGroups, csbSrcAlertFlowPairId=csbSrcAlertFlowPairId, csbSrcAlertVdbeId=csbSrcAlertVdbeId, csbQOSMoscqeClearEvent=csbQOSMoscqeClearEvent, csbDynamicBlackListSubFamily=csbDynamicBlackListSubFamily, csbDiameterGroupName=csbDiameterGroupName, csbComplianceRev1=csbComplianceRev1, csbRadiusServerAddress=csbRadiusServerAddress, csb248ControllerAddressType=csb248ControllerAddressType, csbQOSAlertPercentPktLostNotifEnabled=csbQOSAlertPercentPktLostNotifEnabled, csbCongestionGroup=csbCongestionGroup, csbQOSUnansweredCallRatioClearEvent=csbQOSUnansweredCallRatioClearEvent, csbAlarmID=csbAlarmID, csbQOSPercentPktLostEvent=csbQOSPercentPktLostEvent, csbQOSPercentPktLostClearEvent=csbQOSPercentPktLostClearEvent, csbAdjacencyState=csbAdjacencyState, csbNotifEnabledGroupRev1=csbNotifEnabledGroupRev1, csbNotificationManadatoryParams=csbNotificationManadatoryParams, csbComplianceRev2=csbComplianceRev2, csbQOSRemoteJitterEvent=csbQOSRemoteJitterEvent, csbAdjacencyType=csbAdjacencyType, csbRadiusConnectionState=csbRadiusConnectionState, csbH248ControllerAddress=csbH248ControllerAddress, csbDynamicBlackListAddressType=csbDynamicBlackListAddressType, csbSourceAlertNotifEnabled=csbSourceAlertNotifEnabled, csbQOSPercentPktDropClearEvent=csbQOSPercentPktDropClearEvent, csbDynamicBlackListAddress=csbDynamicBlackListAddress, csbDiameterConnectionStatus=csbDiameterConnectionStatus, csbSLAViolationRev1=csbSLAViolationRev1, csbAdjacencyName=csbAdjacencyName, csbQOSAlertMoscqeNotifEnabled=csbQOSAlertMoscqeNotifEnabled, csbDiameterConnectionGroup=csbDiameterConnectionGroup, csbDynamicBlackListVpnId=csbDynamicBlackListVpnId, csbAlarmTime=csbAlarmTime, csbDiameterType=csbDiameterType, csbSourceAlertEvent=csbSourceAlertEvent, csbQOSRoundTripDelayEvent=csbQOSRoundTripDelayEvent, csbQOSAlertCurrentValue=csbQOSAlertCurrentValue, csbSBCServiceSlot=csbSBCServiceSlot, ciscoSessBorderCtrlrEventMIB=ciscoSessBorderCtrlrEventMIB, CsbDynamicBlackListedSrcSubFamily=CsbDynamicBlackListedSrcSubFamily, csbNotifEnabledGroupSup1=csbNotifEnabledGroupSup1, csbQOSAlertPreviousLevel=csbQOSAlertPreviousLevel, csbH248ControllerStatus=csbH248ControllerStatus, csbSrcAlertVpnId=csbSrcAlertVpnId, csbRadiusType=csbRadiusType, csbQOSAlertGroup=csbQOSAlertGroup, csbServiceStateEvent=csbServiceStateEvent, csbQOSMinorAlertCount=csbQOSMinorAlertCount, csbSBCServiceName=csbSBCServiceName, csbDynamicBlackListSrcBlocked=csbDynamicBlackListSrcBlocked, CsbQOSAlertScopeType=CsbQOSAlertScopeType, ciscoSessBorderCtrlrMIBConform=ciscoSessBorderCtrlrMIBConform, csbSystemCongestionAlarmEvent=csbSystemCongestionAlarmEvent, csbServiceStateNotifEnabled=csbServiceStateNotifEnabled, csbRadiusServerAddressType=csbRadiusServerAddressType, csbRadiusServerName=csbRadiusServerName, ciscoSessBorderCtrlrMIBCompliances=ciscoSessBorderCtrlrMIBCompliances, csbDynamicBlackListTransportType=csbDynamicBlackListTransportType, csbSrcAlertLocalAddressType=csbSrcAlertLocalAddressType, csbSLAPolicyLimitRev1=csbSLAPolicyLimitRev1, csbSrcAlertLocalAddress=csbSrcAlertLocalAddress, csbQOSAlertLocalJitterNotifEnabled=csbQOSAlertLocalJitterNotifEnabled, csbH248ControllerStatusNotifEnabled=csbH248ControllerStatusNotifEnabled, csbSLAPolicyLimit=csbSLAPolicyLimit, csbSLAViolationNotifEnabled=csbSLAViolationNotifEnabled, csbQOSAlertRemoteJitterNotifEnabled=csbQOSAlertRemoteJitterNotifEnabled, csbAlarmSubsystem=csbAlarmSubsystem, csbSrcAlertLocalPort=csbSrcAlertLocalPort, csbSrcAlertRemotePort=csbSrcAlertRemotePort, csbDynamicBlackListPortNumber=csbDynamicBlackListPortNumber, csbRadiusConnectionStatusNotifEnabled=csbRadiusConnectionStatusNotifEnabled, csbQOSRoundTripDelayClearEvent=csbQOSRoundTripDelayClearEvent, ciscoSessBorderCtrlrMIBObjects=ciscoSessBorderCtrlrMIBObjects, csbDiameterServerName=csbDiameterServerName, csbAlarmDescription=csbAlarmDescription, csbAdjacencyAccountName=csbAdjacencyAccountName, csbQOSAlertSummaryPeriod=csbQOSAlertSummaryPeriod, csbSLAViolationNotifEnabledRev1=csbSLAViolationNotifEnabledRev1, csbQOSAlertPercentPktDropNotifEnabled=csbQOSAlertPercentPktDropNotifEnabled, csbNotificationGroupRev1=csbNotificationGroupRev1, csbNotificationGroup=csbNotificationGroup, csbSLAGroupRev1=csbSLAGroupRev1, csbQOSRemoteJitterClearEvent=csbQOSRemoteJitterClearEvent, csbAdjacencyStatusNotifEnabled=csbAdjacencyStatusNotifEnabled, csbQOSAlertType=csbQOSAlertType, csbSLAPolicyAccountName=csbSLAPolicyAccountName, csbDiameterConnectionState=csbDiameterConnectionState, csbAlarmSeverity=csbAlarmSeverity, csbQOSLocalJitterClearEvent=csbQOSLocalJitterClearEvent, csbRadiusConnectionGroup=csbRadiusConnectionGroup, csbSBCServiceState=csbSBCServiceState, csbH248StatusGroup=csbH248StatusGroup, csbCompliance=csbCompliance, csbDynamicBlackListEvent=csbDynamicBlackListEvent, csbCongestionAlarmType=csbCongestionAlarmType, csbNotifEnabledGroup=csbNotifEnabledGroup, csbSLAPolicyRestriction=csbSLAPolicyRestriction, csbBlackListNotifEnabled=csbBlackListNotifEnabled, csbQOSMoscqeEvent=csbQOSMoscqeEvent, csbQOSAlertUnansweredCallRatioNotifEnabled=csbQOSAlertUnansweredCallRatioNotifEnabled)
