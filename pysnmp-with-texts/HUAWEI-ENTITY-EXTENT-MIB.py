#
# PySNMP MIB module HUAWEI-ENTITY-EXTENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ENTITY-EXTENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
PhysicalIndex, PhysicalClass, entPhysicalIndex, entPhysicalVendorType = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "PhysicalClass", "entPhysicalIndex", "entPhysicalVendorType")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, Counter64, Bits, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, iso, TimeTicks, Gauge32, ModuleIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Counter64", "Bits", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "iso", "TimeTicks", "Gauge32", "ModuleIdentity", "Unsigned32", "NotificationType")
DisplayString, DateAndTime, AutonomousType, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "AutonomousType", "RowStatus", "TextualConvention")
hwEntityExtentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31))
if mibBuilder.loadTexts: hwEntityExtentMIB.setLastUpdated('201107151641Z')
if mibBuilder.loadTexts: hwEntityExtentMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwEntityExtentMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwEntityExtentMIB.setDescription('The private mib file includes the general extent information of the device.')
class HwAdminState(TextualConvention, Integer32):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = ' Represents the various possible administrative states. A value of locked means the resource is administratively prohibited from use. A value of shuttingDown means that usage is administratively limited to current instances of use. A value of unlocked means the resource is not administratively prohibited from use. A value of up means that the port is not administratively shut down and a value of down is the oppsite. A value of loopback here means the port is working in the loopback local mode. When a port is both shut down and looped back, we user the vale of down.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13))
    namedValues = NamedValues(("notSupported", 1), ("locked", 2), ("shuttingDown", 3), ("unlocked", 4), ("up", 11), ("down", 12), ("loopback", 13))

class HwOperState(TextualConvention, Integer32):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = " Represents the possible values of operational states. A value of disabled means the resource is totally inoperable. A value of enabled means the resource is partially or fully operable. The values up(11),down(12) and connect(13) is used only for NE5000E BTB or it's extended system. A value of protocolUp means the port is available in the protocol lay or has already prepared for transmitting or receiving data. A value of linkUp means the port is only available in the physical lay. A value of linkDown means the port is not available physically."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13, 15, 16, 17))
    namedValues = NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3), ("offline", 4), ("up", 11), ("down", 12), ("connect", 13), ("protocolUp", 15), ("linkUp", 16), ("linkDown", 17))

class HwStandbyStatus(TextualConvention, Integer32):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = ' Represents the possible values of standby status. A value of hotStandby means the resource is not providing service, but is will be immediately able to take over the role of the resource to be backed-up, without the need for initialization activity, and will contain the same information as the resource to be backed up. A value of coldStandy means that the resource is to back-up another resource, but will not be immediately able to take over the role of a resource to be backed up, and will require some initialization activity. A value of providingService means the resource is providing service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notSupported", 1), ("hotStandby", 2), ("coldStandby", 3), ("providingService", 4))

class HwAlarmStatus(TextualConvention, Bits):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = 'Represents the possible values of alarm status. When no bits of this attribute are set, then none of the status conditions described below are present. When the value of under repair is set, the resource is currently being repaired. When the value of critical is set, one or more critical alarms are active against the resource. When the value of major is set, one or more major alarms are active against the resource. When the value of minor is set, one or more minor alarms are active against the resource. When the value of warning is set, one or more warning alarms are active against the resource. When the value of indeterminate is set, one or more alarms of indeterminate severity are active against the resource. When the value of alarm outstanding is set, one or more alarms is active against the resource. The fault may or may not be disabling. '
    status = 'current'
    namedValues = NamedValues(("notSupported", 0), ("underRepair", 1), ("critical", 2), ("major", 3), ("minor", 4), ("alarmOutstanding", 5), ("warning", 6), ("indeterminate", 7))

class HWLevelState(TextualConvention, Integer32):
    description = 'The normal state of input line .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lowLevel", 1), ("highLevel", 2))

hwEntityExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1))
hwEntityState = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1))
hwEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1), )
if mibBuilder.loadTexts: hwEntityStateTable.setStatus('current')
if mibBuilder.loadTexts: hwEntityStateTable.setDescription("This table contains one row per physical entity, There is always at least one row for an 'overall' physical entity. The information in each row may be not include all the object in this table, because of the entity need not some of the information here. ")
hwEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwEntityStateEntry.setStatus('current')
if mibBuilder.loadTexts: hwEntityStateEntry.setDescription('Information about a particular physical entity. Each entry provides objects (entPhysicalDescr, entPhysicalVendorType, and entPhysicalClass) to help an NMS identify and characterize the entry, and objects (entPhysicalContainedIn and entPhysicalParentRelPos) to help an NMS relate the particular entry to other entries in this table.')
hwEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 1), HwAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwEntityAdminStatus.setDescription(' The administrative state for this object, and it is possible to set the state when needed. ')
hwEntityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 2), HwOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwEntityOperStatus.setDescription(' The operational state for this object. ')
hwEntityStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 3), HwStandbyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityStandbyStatus.setStatus('current')
if mibBuilder.loadTexts: hwEntityStandbyStatus.setDescription(' Some entity in a device can support standby mode, This object is used for monitoring standby status. ')
hwEntityAlarmLight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 4), HwAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityAlarmLight.setStatus('current')
if mibBuilder.loadTexts: hwEntityAlarmLight.setDescription(' The alarm status for this entity. It does not include the severity of alarms raised on child components. On the condition, there are a alarm light on the entity, the object should have the same status with it.')
hwEntityCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCpuUsage.setStatus('current')
if mibBuilder.loadTexts: hwEntityCpuUsage.setDescription(' The CPU usage for this entity. Generally, the CPU usage will calculate the overall CPU usage on the entity, and it is not sensible with the number of CPU on the entity. ')
hwEntityCpuUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityCpuUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityCpuUsageThreshold.setDescription(' The threshold for the CPU usage. When the CPU usage exceed the threshold, a notification will be sent. ')
hwEntityMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityMemUsage.setStatus('current')
if mibBuilder.loadTexts: hwEntityMemUsage.setDescription(' The memory usage for the entity. This object point out how many percent of memory has been used. ')
hwEntityMemUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityMemUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityMemUsageThreshold.setDescription(' The threshold for the Memory usage, When the memory usage exceed the threshold, a notification will be sent. ')
hwEntityMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 9), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityMemSize.setStatus('current')
if mibBuilder.loadTexts: hwEntityMemSize.setDescription(' The size of memory for the entity. ')
hwEntityUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 10), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityUpTime.setStatus('current')
if mibBuilder.loadTexts: hwEntityUpTime.setDescription(' The up time for the entity. The mean of up time is when the entity is up, and the value of the object will add one per seconds while the entity running. ')
hwEntityTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTemperature.setStatus('current')
if mibBuilder.loadTexts: hwEntityTemperature.setDescription(' The temperature for the entity. ')
hwEntityTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityTemperatureThreshold.setDescription(' The threshold for the temperature. When the temperature exceed the threshold, a notification will be sent. ')
hwEntityVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVoltage.setStatus('current')
if mibBuilder.loadTexts: hwEntityVoltage.setDescription(' The voltage for the entity. ')
hwEntityVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityVoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityVoltageLowThreshold.setDescription(' The low-threshold for the voltage. Generally, we have two threshold for the voltage, one is low-threshold, and the other is high-threshold. the normal status of voltage should be greater than the low-threshold, and lower than the high-threshold. When the voltage low than the low-threshold, a notification will be sent. ')
hwEntityVoltageHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityVoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityVoltageHighThreshold.setDescription(' The high-threshold for the voltage. Generally, we have two threshold for the voltage, one is low-threshold, and the other is high-threshold. the normal status of voltage should be greater than the low-threshold, and lower than the high-threshold. When the voltage greater than the high-threshold, a notification will be sent. ')
hwEntityTemperatureLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityTemperatureLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityTemperatureLowThreshold.setDescription('The low-threshold of temperature. If the device temperature is lower than the threshold, an alarm is raised. ')
hwEntityOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalPower.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalPower.setDescription('The optical power of the optical module. Unit: uW')
hwEntityCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 18), Integer32()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCurrent.setStatus('current')
if mibBuilder.loadTexts: hwEntityCurrent.setDescription(' The current for the entity. ')
hwEntityMemSizeMega = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 19), Integer32()).setUnits('M bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityMemSizeMega.setStatus('current')
if mibBuilder.loadTexts: hwEntityMemSizeMega.setDescription(' The size of SDRAM(Synchronous Dynamic Random Access Memory) memory for the entity. Unit: M bytes')
hwEntityPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("copper", 2), ("fiber100", 3), ("fiber1000", 4), ("fiber10000", 5), ("opticalnotExist", 6), ("optical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityPortType.setStatus('current')
if mibBuilder.loadTexts: hwEntityPortType.setDescription(' Indicates the type of the Ethernet interface: an optical interface or an electrical interface. ')
hwEntityDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("full", 2), ("half", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityDuplex.setStatus('current')
if mibBuilder.loadTexts: hwEntityDuplex.setDescription(' Indicates the duplex mode of the Ethernet interface. An electrical Ethernet interface can work in half-duplex mode or full-duplex mode. An optical Ethernet can work only in full-duplex mode. ')
hwEntityOpticalPowerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalPowerRx.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalPowerRx.setDescription('The optical power(Rx) of the optical module. Unit: uW')
hwEntityCpuUsageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityCpuUsageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityCpuUsageLowThreshold.setDescription(' The threshold for the CPU usage. When the CPU usage exceed the threshold, a notification will be sent. ')
hwEntityBoardPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityBoardPower.setStatus('current')
if mibBuilder.loadTexts: hwEntityBoardPower.setDescription('The board power for the entity. Unit: W')
hwEntityCpuFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 25), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCpuFrequency.setStatus('current')
if mibBuilder.loadTexts: hwEntityCpuFrequency.setDescription(' The frequency of the entity. Unit: Hz')
hwEntitySupportFlexCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("flexible", 2), ("unflexible", 3), ("dummy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntitySupportFlexCard.setStatus('current')
if mibBuilder.loadTexts: hwEntitySupportFlexCard.setDescription(" It describes whether the whole board supports flexible cards. When the board doesn't support flexible cards, the cards may be dummy ones whose ports will not be seen by the customer.")
hwEntityBoardClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notSupported", 1), ("mpu", 2), ("lpu", 3), ("sfu", 4), ("icu", 5), ("ecu", 6), ("fan", 7), ("power", 8), ("lcd", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityBoardClass.setStatus('current')
if mibBuilder.loadTexts: hwEntityBoardClass.setDescription(' It describes the board type of the whole board.')
hwNseOpmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNseOpmStatus.setStatus('current')
if mibBuilder.loadTexts: hwNseOpmStatus.setDescription('OPM status. 0: pass, 1: bypass, 2: invalid')
hwEntityCpuMaxUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCpuMaxUsage.setStatus('current')
if mibBuilder.loadTexts: hwEntityCpuMaxUsage.setDescription(' The Max CPU usage for this entity. Generally, the Max CPU usage will calculate the overall CPU usage on the entity, and it is not sensible with the number of CPU on the entity. ')
hwEntityCPUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 30), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCPUType.setStatus('current')
if mibBuilder.loadTexts: hwEntityCPUType.setDescription('CPU type.')
hwEntityMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 31), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityMemoryType.setStatus('current')
if mibBuilder.loadTexts: hwEntityMemoryType.setDescription('Memory type.')
hwEntityFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFlashSize.setStatus('current')
if mibBuilder.loadTexts: hwEntityFlashSize.setDescription('Flash size, in KB.')
hwEntityIfUpTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityIfUpTimes.setStatus('current')
if mibBuilder.loadTexts: hwEntityIfUpTimes.setDescription('Times that the interface goes Up.')
hwEntityIfDownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityIfDownTimes.setStatus('current')
if mibBuilder.loadTexts: hwEntityIfDownTimes.setDescription('Times that the interface goes Down.')
hwEntityCPUAvgUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCPUAvgUsage.setStatus('current')
if mibBuilder.loadTexts: hwEntityCPUAvgUsage.setDescription('Average CPU usage within a specified statistical interval.')
hwEntityMemoryAvgUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityMemoryAvgUsage.setStatus('current')
if mibBuilder.loadTexts: hwEntityMemoryAvgUsage.setDescription('Average memory usage within a specified statistical interval.')
hwRUModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2), )
if mibBuilder.loadTexts: hwRUModuleInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwRUModuleInfoTable.setDescription("This table contains one row per replaceable unit physical entity. The row with the field 'entPhysicalIsFRU' sets to 'true' in table 'entPhysicalTable' will be mapped to one row in this table.")
hwRUModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwRUModuleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwRUModuleInfoEntry.setDescription('Information about a replaceable unit physical entity. Each entry provides objects of a replaceable unit to help an NMS identify and characterize the entry in this table. ')
hwEntityBomId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityBomId.setStatus('current')
if mibBuilder.loadTexts: hwEntityBomId.setDescription("The identity of the Bill of Material about this replaceable unit which coded by vendor. This node is mapping to 'ITEM' in the information file. ")
hwEntityBomEnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityBomEnDesc.setStatus('current')
if mibBuilder.loadTexts: hwEntityBomEnDesc.setDescription('The English description of the Bill of Material about this replaceable unit. ')
hwEntityBomLocalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityBomLocalDesc.setStatus('obsolete')
if mibBuilder.loadTexts: hwEntityBomLocalDesc.setDescription('The local description of the Bill of Material about this replaceable unit. ')
hwEntityManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityManufacturedDate.setStatus('current')
if mibBuilder.loadTexts: hwEntityManufacturedDate.setDescription('The date when this physical entity is Manufactured. ')
hwEntityManufactureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityManufactureCode.setStatus('obsolete')
if mibBuilder.loadTexts: hwEntityManufactureCode.setDescription('The code of the place where this physical entity is Manufactured. ')
hwEntityCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityCLEICode.setStatus('current')
if mibBuilder.loadTexts: hwEntityCLEICode.setDescription('The string code of CLEI which was granted by America. ')
hwEntityUpdateLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityUpdateLog.setStatus('obsolete')
if mibBuilder.loadTexts: hwEntityUpdateLog.setDescription('The maintenance log of this replaceable unit. ')
hwEntityArchivesInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityArchivesInfoVersion.setStatus('current')
if mibBuilder.loadTexts: hwEntityArchivesInfoVersion.setDescription('The Version of Archives Information. ')
hwEntityOpenBomId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpenBomId.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpenBomId.setDescription('The BomId for distribution. It is different from hwEntityBomId.')
hwEntityIssueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityIssueNum.setStatus('current')
if mibBuilder.loadTexts: hwEntityIssueNum.setDescription('The issue number for hardware change.')
hwEntityBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityBoardType.setStatus('current')
if mibBuilder.loadTexts: hwEntityBoardType.setDescription('The type code for entity.')
hwOpticalModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3), )
if mibBuilder.loadTexts: hwOpticalModuleInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwOpticalModuleInfoTable.setDescription('Table of optical module properties.')
hwOpticalModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwOpticalModuleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwOpticalModuleInfoEntry.setDescription('An entry in the table of optical module properties for each optical module.')
hwEntityOpticalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("singleMode", 2), ("multiMode5", 3), ("multiMode6", 4), ("noValue", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalMode.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalMode.setDescription('The mode of the optical module.')
hwEntityOpticalWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalWaveLength.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalWaveLength.setDescription('The wave length of the optical module. Unit: nm.')
hwEntityOpticalTransDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTransDistance.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTransDistance.setDescription('The max transmission distance of the optical module. Unit: m.')
hwEntityOpticalVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalVendorSn.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalVendorSn.setDescription('The vendor serial number (vendor SN) of the optical module. Length: 16 bytes.')
hwEntityOpticalTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTemperature.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTemperature.setDescription('The current temperature of the optical module. Unit: C')
hwEntityOpticalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalVoltage.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalVoltage.setDescription('The current voltage of the optical module. Unit: mV.')
hwEntityOpticalBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalBiasCurrent.setDescription('The bias current of the optical module. Unit: mA.')
hwEntityOpticalRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalRxPower.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalRxPower.setDescription('The receive power of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTxPower.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTxPower.setDescription('The transmit power of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("gbic", 2), ("sfp", 3), ("esfp", 4), ("copper", 5), ("xfp", 6), ("xenpak", 7), ("transponder", 8), ("cfp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalType.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalType.setDescription('The type of the optical module.')
hwEntityOpticalTransBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTransBW.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTransBW.setDescription('The Transceiver max BW of the optical module.Unit:M')
hwEntityOpticalFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20, 21))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("style-1-copper-connector", 2), ("style-2-copper-connector", 3), ("bnc-tnc", 4), ("coaxial-headers", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("optical-pigtail", 11), ("hssdcII", 20), ("copper-pigtail", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalFiberType.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalFiberType.setDescription('The Fiber type of the optical module.')
hwEntityOpticalRxLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalRxLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalRxLowThreshold.setDescription('The receive power low threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalRxHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalRxHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalRxHighThreshold.setDescription('The receive power high threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalTxLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTxLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTxLowThreshold.setDescription('The transmit power low threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalTxHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTxHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTxHighThreshold.setDescription('The transmit power high threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalPlug.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalPlug.setDescription('The optical module is plug-supported or not.')
hwEntityOpticalDirectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("twoFiberBidirection", 2), ("oneFiberBidirection", 3), ("twoFiberTwoPortBidirection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalDirectionType.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalDirectionType.setDescription('The direction type of the optical module.')
hwEntityOpticalUserEeprom = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalUserEeprom.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalUserEeprom.setDescription('The user writable EEPROM of the optical module.')
hwEntityOpticalRxLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalRxLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalRxLowWarnThreshold.setDescription('The receive power low warning threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalRxHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalRxHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalRxHighWarnThreshold.setDescription('The receive power high warning threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalTxLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTxLowWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTxLowWarnThreshold.setDescription('The transmit power low warning threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwEntityOpticalTxHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityOpticalTxHighWarnThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityOpticalTxHighWarnThreshold.setDescription('The transmit power high warning threshold of the optical module. Unit: dBm. the value is expanded 100 times,so the real value should be reduced 100 times ')
hwMonitorInputTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4), )
if mibBuilder.loadTexts: hwMonitorInputTable.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputTable.setDescription('This table contains one row per replaceable unit physical entity. This table is used to set the status of monitor port.')
hwMonitorInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputIndex"))
if mibBuilder.loadTexts: hwMonitorInputEntry.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputEntry.setDescription('This is a replaceable unit physical entity.')
hwMonitorInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hwMonitorInputIndex.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputIndex.setDescription('Monitor port index. This is a number of input line,ranging from 1 to 4. ')
hwMonitorInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorInputName.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputName.setDescription('Monitor line name. ')
hwMonitorInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4, 1, 3), HWLevelState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorInputState.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputState.setDescription('Monitor line status. The value is high or low. ')
hwMonitorInputStateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorInputStateEnable.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputStateEnable.setDescription('Enable monitor line. ')
hwMonitorInputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorInputRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputRowStatus.setDescription('Status of monitor input row. ')
hwMonitorOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5), )
if mibBuilder.loadTexts: hwMonitorOutputTable.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputTable.setDescription('This table contains one row per replaceable unit physical entity. This table is used to create a output view.')
hwMonitorOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorOutputIndex"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorOutputRuleIndex"))
if mibBuilder.loadTexts: hwMonitorOutputEntry.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputEntry.setDescription('This is a replaceable unit physical entity.')
hwMonitorOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: hwMonitorOutputIndex.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputIndex.setDescription('Monitor output view index. Through this index ,you can turn into the output view. ')
hwMonitorOutputRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwMonitorOutputRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputRuleIndex.setDescription('Monitor output rule index. This is used to set the rules about all of the input line. ')
hwMonitorOutputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorOutputMask.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputMask.setDescription('Monitor output mask . This is used to matching the level of monitor input line. ')
hwMonitorOutputKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorOutputKey.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputKey.setDescription('Normal level value of this output line. ')
hwMonitorOutputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMonitorOutputRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputRowStatus.setDescription('Status of monitor input row ')
hwEntPowerUsedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 6), )
if mibBuilder.loadTexts: hwEntPowerUsedInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoTable.setDescription('A table of information that displays the power use of entity .')
hwEntPowerUsedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwEntPowerUsedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoEntry.setDescription('Entry of the table of information that displays the power use of entity.')
hwEntPowerUsedInfoBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntPowerUsedInfoBoardName.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoBoardName.setDescription('Board name.')
hwEntPowerUsedInfoBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntPowerUsedInfoBoardType.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoBoardType.setDescription('Board type.')
hwEntPowerUsedInfoBoardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntPowerUsedInfoBoardSlot.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoBoardSlot.setDescription("Board's slot number.")
hwEntPowerUsedInfoPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntPowerUsedInfoPower.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoPower.setDescription('Used power of board.')
hwVirtualCableTestTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7), )
if mibBuilder.loadTexts: hwVirtualCableTestTable.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestTable.setDescription('This table contains one row per replaceable unit physical entity. This table is used to display VCT result.')
hwVirtualCableTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestIfIndex"))
if mibBuilder.loadTexts: hwVirtualCableTestEntry.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestEntry.setDescription('This is a replaceable unit physical entity.')
hwVirtualCableTestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwVirtualCableTestIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestIfIndex.setDescription('IfIndex of port that you want to test cable.')
hwVirtualCableTestPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("abnormalOpen", 2), ("abnormalShort", 3), ("abnormalOpenShort", 4), ("abnormalCrossTalk", 5), ("unknown", 6), ("notSupport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairStatus.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairStatus.setDescription('Pair status. This indicate the status of cable. ')
hwVirtualCableTestPairLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairLength.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairLength.setDescription('Pair Length. This indicate the length of cable. ')
hwVirtualCableTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("startTest", 1), ("resetTestValue", 2), ("readyStartTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVirtualCableTestOperation.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestOperation.setDescription('VirtualCableTestOperation. This Operation of VirtualCableTest.')
hwVirtualCableTestLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestLastTime.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestLastTime.setDescription('The last test time for the entity. The mean of last time is when the entity is tested, and the value of the object will add one per seconds until now.')
hwVirtualCableTestPairAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("abnormalOpen", 2), ("abnormalShort", 3), ("abnormalOpenShort", 4), ("abnormalCrossTalk", 5), ("unknown", 6), ("notSupport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairAStatus.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairAStatus.setDescription('Pair A status. This indicate the status of cable. ')
hwVirtualCableTestPairBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("abnormalOpen", 2), ("abnormalShort", 3), ("abnormalOpenShort", 4), ("abnormalCrossTalk", 5), ("unknown", 6), ("notSupport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairBStatus.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairBStatus.setDescription('Pair B status. This indicate the status of cable. ')
hwVirtualCableTestPairCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("abnormalOpen", 2), ("abnormalShort", 3), ("abnormalOpenShort", 4), ("abnormalCrossTalk", 5), ("unknown", 6), ("notSupport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairCStatus.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairCStatus.setDescription('Pair C status. This indicate the status of cable. ')
hwVirtualCableTestPairDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("abnormalOpen", 2), ("abnormalShort", 3), ("abnormalOpenShort", 4), ("abnormalCrossTalk", 5), ("unknown", 6), ("notSupport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairDStatus.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairDStatus.setDescription('Pair D status. This indicate the status of cable. ')
hwVirtualCableTestPairALength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairALength.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairALength.setDescription('Pair A Length. This indicate the length of cable. ')
hwVirtualCableTestPairBLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairBLength.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairBLength.setDescription('Pair B Length. This indicate the length of cable. ')
hwVirtualCableTestPairCLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairCLength.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairCLength.setDescription('Pair C Length. This indicate the length of cable. ')
hwVirtualCableTestPairDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualCableTestPairDLength.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestPairDLength.setDescription('Pair D Length. This indicate the length of cable. ')
hwTemperatureThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8), )
if mibBuilder.loadTexts: hwTemperatureThresholdTable.setStatus('current')
if mibBuilder.loadTexts: hwTemperatureThresholdTable.setDescription('This table lists the alarm thresholds of temperature sensors. You can read information about all the temperature sensors of the device. You can set the alarm threshold of a specified temperature sensor. ')
hwTemperatureThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempSlotId"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempI2CId"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempAddr"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempChannel"))
if mibBuilder.loadTexts: hwTemperatureThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: hwTemperatureThresholdEntry.setDescription('Defines an entry in the hwTemperatureThresholdTable.')
hwEntityTempSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTempSlotId.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempSlotId.setDescription('This object indicates the slot ID of a temperature sensor. ')
hwEntityTempI2CId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTempI2CId.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempI2CId.setDescription('This object indicates the I2CID of a temperature sensor. ')
hwEntityTempAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTempAddr.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempAddr.setDescription('This object indicates the address of a temperature sensor.')
hwEntityTempChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTempChannel.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempChannel.setDescription('This object indicates the channel of a temperature sensor. ')
hwEntityTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("minor", 2), ("major", 3), ("fatal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTempStatus.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempStatus.setDescription('This object indicates the current status of a temperature sensor. ')
hwEntityTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityTempValue.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempValue.setDescription('This object indicates the current value in Celsius of a temperature sensor.')
hwEntityTempMinorAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityTempMinorAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempMinorAlmThreshold.setDescription('This object indicates the threshold for a minor alarm. The value can be set and ranges from 80% to 120% of the default value. The value is in Celsius. ')
hwEntityTempMajorAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityTempMajorAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempMajorAlmThreshold.setDescription('This object indicates the threshold for a major alarm. The value can be set and ranges from 80% to 120% of the default value. The value is in Celsius. ')
hwEntityTempFatalAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityTempFatalAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEntityTempFatalAlmThreshold.setDescription('This object indicates the threshold for a fatal alarm. The value can be set and ranges from 80% to 120% of the default value. The value is in Celsius. ')
hwVoltageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9), )
if mibBuilder.loadTexts: hwVoltageInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwVoltageInfoTable.setDescription('This table lists information about voltage sensors. You can read information about all the voltage sensors of the device. You can set the alarm threshold of a specified voltage sensor. ')
hwVoltageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolSlot"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolI2CId"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolAddr"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolChannel"))
if mibBuilder.loadTexts: hwVoltageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwVoltageInfoEntry.setDescription('Defines an entry in the hwVoltageInfoTable.')
hwEntityVolSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolSlot.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolSlot.setDescription('This object indicates the slot ID of a voltage sensor.')
hwEntityVolI2CId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolI2CId.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolI2CId.setDescription('This object indicates the I2CID of a voltage sensor.')
hwEntityVolAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolAddr.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolAddr.setDescription('This object indicates the address of a voltage sensor. ')
hwEntityVolChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolChannel.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolChannel.setDescription('This object indicates the channel of a voltage sensor. ')
hwEntityVolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("major", 2), ("fatal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolStatus.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolStatus.setDescription('This object indicates the current status of a voltage sensor.')
hwEntityVolRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolRequired.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolRequired.setDescription('This object indicates the nominal value in millivolt of a voltage sensor.')
hwEntityVolCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolCurValue.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolCurValue.setDescription('This object indicates the current value in millivolt of a voltage sensor.')
hwEntityVolRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityVolRatio.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolRatio.setDescription('This object indicates the voltage ratio of a voltage sensor.')
hwEntityVolLowAlmMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityVolLowAlmMajor.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolLowAlmMajor.setDescription('This object indicates the threshold for a major alarm of low voltage. The value can be set and ranges from 80% to 120% of the default value. The value is in millivolt. ')
hwEntityVolLowAlmFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityVolLowAlmFatal.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolLowAlmFatal.setDescription('This object indicates the threshold for a fatal alarm of low voltage. The value can be set and ranges from 80% to 120% of the default value. The value is in millivolt. ')
hwEntityVolHighAlmMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityVolHighAlmMajor.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolHighAlmMajor.setDescription('This object indicates the threshold for a major alarm of high voltage. The value can be set and ranges from 80% to 120% of the default value. The value is in millivolt. ')
hwEntityVolHighAlmFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityVolHighAlmFatal.setStatus('current')
if mibBuilder.loadTexts: hwEntityVolHighAlmFatal.setDescription('This object indicates the threshold for a fatal alarm of high voltage. The value can be set and ranges from 80% to 120% of the default value. The value is in millivolt. ')
hwFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10), )
if mibBuilder.loadTexts: hwFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwFanStatusTable.setDescription('This table lists the status of fans. You can read the status of the fans on the device.')
hwFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanSlot"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanSn"))
if mibBuilder.loadTexts: hwFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwFanStatusEntry.setDescription('Defines an entry in the hwFanStatusTable.')
hwEntityFanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanSlot.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanSlot.setDescription('This object indicates the slot ID of a fan.')
hwEntityFanSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanSn.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanSn.setDescription('This object indicates the serial number of the fan in a certain slot.')
hwEntityFanReg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanReg.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanReg.setDescription('This object indicates whether the fan is registered.')
hwEntityFanSpdAdjMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanSpdAdjMode.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanSpdAdjMode.setDescription('This object indicates the speed adjustment mode of the fan.')
hwEntityFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanSpeed.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanSpeed.setDescription('This object indicates the rotation speed (in percentage of the full speed) of the fan. ')
hwEntityFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanPresent.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanPresent.setDescription('This object indicates the present information of the fan.')
hwEntityFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityFanState.setStatus('current')
if mibBuilder.loadTexts: hwEntityFanState.setDescription('This object indicates the state of the fan.')
hwEntityGlobalPara = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 11))
hwEntityServiceType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sslvpn", 1), ("firewall", 2), ("load-balance", 3), ("ipsec", 4), ("netstream", 5), ("wlan", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntityServiceType.setStatus('current')
if mibBuilder.loadTexts: hwEntityServiceType.setDescription(' It describes the service-type of spu board .')
hwPortBip8StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12), )
if mibBuilder.loadTexts: hwPortBip8StatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwPortBip8StatisticsTable.setDescription('Indicates the BIP8 statistics. This table lists the various BIP8 statistics.')
hwPortBip8StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwPortBip8StatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortBip8StatisticsEntry.setDescription('Indicates the BIP8 statistics. This table lists the various BIP8 statistics.')
hwPhysicalPortBip8StatisticsEB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsEB.setStatus('current')
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsEB.setDescription('BIP8 Statistics: EB(Errored Block).')
hwPhysicalPortBip8StatisticsES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsES.setStatus('current')
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsES.setDescription('BIP8 Statistics: ES(Errored Second).')
hwPhysicalPortBip8StatisticsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsSES.setStatus('current')
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsSES.setDescription('BIP8 Statistics: SES(Severely Errored Second).')
hwPhysicalPortBip8StatisticsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsUAS.setStatus('current')
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsUAS.setDescription('BIP8 Statistics: UAS(Unavailable Errored Second).')
hwPhysicalPortBip8StatisticsBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsBBE.setStatus('current')
if mibBuilder.loadTexts: hwPhysicalPortBip8StatisticsBBE.setDescription('BIP8 Statistics: BBE(Background Block Error).')
hwPhysicalPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 1, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwPhysicalPortSpeed.setDescription("An estimate of the interface's current bandwidth in 1000000 bits per second.")
hwEntityExtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2))
hwEntityExtTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0))
hwEntityExtTemperatureThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 1)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperature"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperatureThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtTemperatureThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtTemperatureThresholdNotification.setDescription(' The hwEntityEnvTemperatureThresholdNotification indicates the temperature have been exceed the threshold. In the condition, user should check the hardware and the environment of the entity, sometimes it happened because of the failture of air-condition. Anyway, the threshold should lower than the value that most service work fine. ')
hwEntityExtVoltageLowThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 2)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltageLowThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtVoltageLowThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtVoltageLowThresholdNotification.setDescription(' The hwEntityExtVoltageLowThresholdNotification indicates the voltage is lower than the threshold. This may decrease the usability of the entity. If the voltage is lower too much than the hardware needed, the entity will stop working. Anyway, the threshold should higher than the value that most service work fine. ')
hwEntityExtVoltageHighThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 3)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltageHighThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtVoltageHighThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtVoltageHighThresholdNotification.setDescription(' The hwEntityExtVoltageHighThresholdNotification indicates the voltage is higher than the threshold. This may decrease the usability of the entity. If the voltage is higher too much than the hardware needed, the entity may be destroyed by the high voltage. Anyway, the threshold should lower than the value that most service work fine. ')
hwEntityExtCpuUsageThresholdNotfication = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 4)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsageThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperature"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperatureThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtCpuUsageThresholdNotfication.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtCpuUsageThresholdNotfication.setDescription(" The hwEntityExtCpuUsageThresholdNotfication indicates the entity is overload, and the service running in the entity will not get the performance it should because of CPU's performance. Anyway, the threshold should lower than the value that most service work fine. ")
hwEntityExtMemUsageThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 5)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemUsageThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemSize"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtMemUsageThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtMemUsageThresholdNotification.setDescription(' The hwEntityExtMemUsageThresholdNotification indicates the entity is overload, and the service running in the entity will not get the performance it should because of lower memory. Anyway, the threshold should lower than the value that most service work fine. ')
hwEntityExtOperEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 6)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtOperEnabled.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtOperEnabled.setDescription('The entity is operational. The entity this notification refers can be identified by extracting the entPhysicalIndex from one of the variable bindings.')
hwEntityExtOperDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 7)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtOperDisabled.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtOperDisabled.setDescription('The entity is operational. The entity this notification refers can be identified by extracting the entPhysicalIndex from one of the variable bindings.')
hwEntityExtMonitorBoardAbnormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 8))
if mibBuilder.loadTexts: hwEntityExtMonitorBoardAbnormalNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtMonitorBoardAbnormalNotification.setDescription('The monitor board turns normal to abnormal.')
hwEntityExtMonitorBoardNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 9))
if mibBuilder.loadTexts: hwEntityExtMonitorBoardNormalNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtMonitorBoardNormalNotification.setDescription('The monitor board turns abnormal to normal.')
hwEntityExtMonitorPortAbnormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 10)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputState"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputName"))
if mibBuilder.loadTexts: hwEntityExtMonitorPortAbnormalNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtMonitorPortAbnormalNotification.setDescription('The monitor port turns normal to abnormal.')
hwEntityExtMonitorPortNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 11)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputState"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputName"))
if mibBuilder.loadTexts: hwEntityExtMonitorPortNormalNotification.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtMonitorPortNormalNotification.setDescription('The monitor port turns abnormal to normal.')
hwEntityExtCpuUsageLowThresholdNotfication = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 2, 0, 12)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsageThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperature"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperatureThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"))
if mibBuilder.loadTexts: hwEntityExtCpuUsageLowThresholdNotfication.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtCpuUsageLowThresholdNotfication.setDescription(" The hwEntityExtCpuUsageThresholdNotfication indicates the entity is overload, and the service running in the entity will not get the performance it should because of CPU's performance. Anyway, the threshold should lower than the value that most service work fine. ")
hwDevicePowerInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 3))
hwDevicePowerInfoTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevicePowerInfoTotalPower.setStatus('current')
if mibBuilder.loadTexts: hwDevicePowerInfoTotalPower.setDescription('Device total power.')
hwDevicePowerInfoUsedPower = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDevicePowerInfoUsedPower.setStatus('current')
if mibBuilder.loadTexts: hwDevicePowerInfoUsedPower.setDescription('Device used power.')
hwEntityExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4))
hwEntityExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 1))
hwEntityExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 1, 1)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEntityExtCompliance = hwEntityExtCompliance.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtCompliance.setDescription('The compliance statement for systems supporting the HUAWEI Entity extent MIB.')
hwEntityExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2))
hwEntityExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 1)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAdminStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOperStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityStandbyStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityAlarmLight"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsageThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemUsageThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemSize"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityUpTime"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperature"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperatureThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltageLowThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVoltageHighThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTemperatureLowThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalPower"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCurrent"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemSizeMega"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityPortType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityDuplex"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalPowerRx"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuUsageLowThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityBoardPower"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuFrequency"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySupportFlexCard"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityBoardClass"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwNseOpmStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCpuMaxUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityServiceType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCPUType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemoryType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFlashSize"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityIfUpTimes"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityIfDownTimes"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCPUAvgUsage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityMemoryAvgUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEntityExtGroup = hwEntityExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtGroup.setDescription('Standard HUAWEI Entity Extent group.')
hwEntityExtNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 2)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtTemperatureThresholdNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtVoltageLowThresholdNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtVoltageHighThresholdNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtCpuUsageThresholdNotfication"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtMemUsageThresholdNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtOperEnabled"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtOperDisabled"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtMonitorBoardAbnormalNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtMonitorBoardNormalNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtMonitorPortAbnormalNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtMonitorPortNormalNotification"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityExtCpuUsageLowThresholdNotfication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEntityExtNotificationGroup = hwEntityExtNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtNotificationGroup.setDescription('Standard HUAWEI Entity Extent Notification group.')
hwRUModuleInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 3)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityBomId"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityBomEnDesc"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityManufacturedDate"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityCLEICode"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityArchivesInfoVersion"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpenBomId"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityIssueNum"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityBoardType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRUModuleInfoGroup = hwRUModuleInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwRUModuleInfoGroup.setDescription('Standard HUAWEI Entity Extent group.')
hwEntityExtOldObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 4)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityBomLocalDesc"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityManufactureCode"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityUpdateLog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEntityExtOldObjectsGroup = hwEntityExtOldObjectsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwEntityExtOldObjectsGroup.setDescription('Group for old objects that may be obsoleted.')
hwOpticalModuleInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 5)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalMode"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalWaveLength"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalTransDistance"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalVendorSn"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalTemperature"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalVoltage"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalBiasCurrent"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalRxPower"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalTxPower"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalTransBW"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalFiberType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalRxLowThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalRxHighThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalTxLowThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalTxHighThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalPlug"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalDirectionType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityOpticalUserEeprom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOpticalModuleInfoGroup = hwOpticalModuleInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwOpticalModuleInfoGroup.setDescription('Collection of objects that display the fiber module working information.')
hwMonitorInputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 6)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputName"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputState"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputStateEnable"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorInputRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMonitorInputGroup = hwMonitorInputGroup.setStatus('current')
if mibBuilder.loadTexts: hwMonitorInputGroup.setDescription('Standard HUAWEI Entity Extent group.')
hwMonitorOutputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 7)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorOutputMask"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorOutputKey"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwMonitorOutputRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMonitorOutputGroup = hwMonitorOutputGroup.setStatus('current')
if mibBuilder.loadTexts: hwMonitorOutputGroup.setDescription('Standard HUAWEI Entity Extent group.')
hwEntPowerUsedInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 8)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntPowerUsedInfoBoardName"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntPowerUsedInfoBoardType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntPowerUsedInfoBoardSlot"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntPowerUsedInfoPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEntPowerUsedInfoGroup = hwEntPowerUsedInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwEntPowerUsedInfoGroup.setDescription('Collection of objects that display the power informations of entity.')
hwDevicePowerInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 9)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwDevicePowerInfoTotalPower"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDevicePowerInfoUsedPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDevicePowerInfoGroup = hwDevicePowerInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwDevicePowerInfoGroup.setDescription('Collection of objects that display the power informations of device.')
hwVirtualCableTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 10)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairLength"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestOperation"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestLastTime"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairAStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairBStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairCStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairDStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairALength"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairBLength"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairCLength"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwVirtualCableTestPairDLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVirtualCableTestGroup = hwVirtualCableTestGroup.setStatus('current')
if mibBuilder.loadTexts: hwVirtualCableTestGroup.setDescription('Collection of objects that display the status of cable.')
hwTemperatureThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 11)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempSlotId"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempI2CId"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempAddr"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempChannel"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempValue"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempMinorAlmThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempMajorAlmThreshold"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityTempFatalAlmThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTemperatureThresholdGroup = hwTemperatureThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: hwTemperatureThresholdGroup.setDescription('Temperature threshold group.')
hwVoltageInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 12)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolSlot"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolI2CId"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolAddr"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolChannel"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolRequired"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolLowAlmMajor"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolLowAlmFatal"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolHighAlmMajor"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolHighAlmFatal"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolCurValue"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityVolRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVoltageInfoGroup = hwVoltageInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwVoltageInfoGroup.setDescription('Voltage info group.')
hwFanStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 13)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanSlot"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanSn"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanReg"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanSpdAdjMode"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanSpeed"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanPresent"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityFanState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFanStatusGroup = hwFanStatusGroup.setStatus('current')
if mibBuilder.loadTexts: hwFanStatusGroup.setDescription('fan state group.')
hwPnpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 14)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwHardwareCapaSequenceNo"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneIndex"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneResourceType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneResourceID"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneDestinationFile"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneOperState"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPnpGroup = hwPnpGroup.setStatus('current')
if mibBuilder.loadTexts: hwPnpGroup.setDescription('Pnp group.')
hwSystemGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 15)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemNetID"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySoftwareName"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySoftwareVersion"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySoftwareVendor"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemModel"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemTime"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemMacAddress"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemReset"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemHealthInterval"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntitySystemNEId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSystemGlobalGroup = hwSystemGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hwSystemGlobalGroup.setDescription('System global group.')
hwHeartbeatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 16)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityHeartbeatOnOff"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityHeartbeatPeriod"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwEntityHeartbeatTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwHeartbeatGroup = hwHeartbeatGroup.setStatus('current')
if mibBuilder.loadTexts: hwHeartbeatGroup.setDescription('Heart beat group.')
hwPortBip8StatisticsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 17)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwPhysicalPortBip8StatisticsEB"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwPhysicalPortBip8StatisticsES"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwPhysicalPortBip8StatisticsSES"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwPhysicalPortBip8StatisticsUAS"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwPhysicalPortBip8StatisticsBBE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortBip8StatisticsObjectGroup = hwPortBip8StatisticsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortBip8StatisticsObjectGroup.setDescription('The BIP8 statistics group.')
hwPredisposeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 4, 2, 18)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwPreDisposeSequenceNo"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeSlot"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeCardId"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeSbom"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeRowStatus"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeOperState"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalIndex"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalDescr"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalVendorType"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalContainedIn"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalClass"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalParentRelPos"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPredisposeGroup = hwPredisposeGroup.setStatus('current')
if mibBuilder.loadTexts: hwPredisposeGroup.setDescription('Pnp group.')
hwPnpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5))
hwPnpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 1))
hwHardwareCapaSequenceNo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHardwareCapaSequenceNo.setStatus('current')
if mibBuilder.loadTexts: hwHardwareCapaSequenceNo.setDescription("This object indicates the sequence number of the 'hardware capability file'.The value consists of the file version number and CRC code.")
hwPnpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 2))
hwHardwareCapaChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 2, 1)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwHardwareCapaSequenceNo"))
if mibBuilder.loadTexts: hwHardwareCapaChangeNotification.setStatus('current')
if mibBuilder.loadTexts: hwHardwareCapaChangeNotification.setDescription("This object indicates the change of the 'hardware capability file'. An alarm is generated if the sequence number of the 'hardware capability file' in the current startup file is different from that in the last startup file.")
hwPnpOperateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3), )
if mibBuilder.loadTexts: hwPnpOperateTable.setStatus('current')
if mibBuilder.loadTexts: hwPnpOperateTable.setDescription("This table describes the hardware functions. Using this table, you can obtain the specified 'hardware description file' or 'hardware capability file'.")
hwPnpOperateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwFileGeneIndex"))
if mibBuilder.loadTexts: hwPnpOperateEntry.setStatus('current')
if mibBuilder.loadTexts: hwPnpOperateEntry.setDescription(' ')
hwFileGeneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwFileGeneIndex.setStatus('current')
if mibBuilder.loadTexts: hwFileGeneIndex.setDescription('The value of this object identifies the operation index, which can be specified by the user. The value ranges from 1 to 2147483647.')
hwFileGeneOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("opInProgress", 1), ("opSuccess", 2), ("opGetFileError", 3), ("opInvalidDestName", 4), ("opNoFlashSpace", 5), ("opWriteFileError", 6), ("opDestoryError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFileGeneOperState.setStatus('current')
if mibBuilder.loadTexts: hwFileGeneOperState.setDescription('The value of this object identifies the operation status. opInProgress(1): The operation is ongoing. opSuccess(2): The operation succeeds. opGetFileError(3): Obtaining the file fails. opInvalidDestName(4): The specified storage path is invalid. opNoFlashSpace(5): The space in the flash memory is insufficient. opWriteFileError(6): Writing the file fails. opDestoryError(7): Deleting the file fails.')
hwFileGeneResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pnpcard", 1), ("pnpsubcard", 2), ("pnphardcapability", 3), ("pnpPreDisposeCapability", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFileGeneResourceType.setStatus('current')
if mibBuilder.loadTexts: hwFileGeneResourceType.setDescription('This object indicates the type of the file to be obtained. pnpcard(1): board description file pnpcard(2): subcard description file pnphardcapability(3): hardware capability file pnpPreDisposeCapability(4): predispose capability file')
hwFileGeneResourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFileGeneResourceID.setStatus('current')
if mibBuilder.loadTexts: hwFileGeneResourceID.setDescription("This object indicates the ID of the 'hardware capability file' to be obtained.")
hwFileGeneDestinationFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFileGeneDestinationFile.setStatus('current')
if mibBuilder.loadTexts: hwFileGeneDestinationFile.setDescription('This object indicates the target path storing the file, which does not need to be specified.')
hwFileGeneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 5, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFileGeneRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwFileGeneRowStatus.setDescription('This object indicates the row status. active(1) notInService(2) notReady(3) createAndGo(4) createAndWait(5) destroy(6)')
hwSystemGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6))
hwEntitySystemNetID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntitySystemNetID.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemNetID.setDescription('Network element ID.')
hwEntitySoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntitySoftwareName.setStatus('current')
if mibBuilder.loadTexts: hwEntitySoftwareName.setDescription('System software name.')
hwEntitySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntitySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwEntitySoftwareVersion.setDescription('Software version number. ')
hwEntitySoftwareVendor = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntitySoftwareVendor.setStatus('current')
if mibBuilder.loadTexts: hwEntitySoftwareVendor.setDescription('Software vendor.')
hwEntitySystemModel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntitySystemModel.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemModel.setDescription('Device model.')
hwEntitySystemTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntitySystemTime.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemTime.setDescription('System time displayed on the device.')
hwEntitySystemMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEntitySystemMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemMacAddress.setDescription('MAC address of the device.')
hwEntitySystemReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntitySystemReset.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemReset.setDescription('System reset.')
hwEntitySystemHealthInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntitySystemHealthInterval.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemHealthInterval.setDescription('Statistical interval for average CPU and memory usage, in seconds (By default, the value is 300) .')
hwEntitySystemNEId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntitySystemNEId.setStatus('current')
if mibBuilder.loadTexts: hwEntitySystemNEId.setDescription('Systme NEId.')
hwHeartbeatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 7))
hwHeartbeatConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 7, 1))
hwEntityHeartbeatOnOff = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityHeartbeatOnOff.setStatus('current')
if mibBuilder.loadTexts: hwEntityHeartbeatOnOff.setDescription('Whether Heartbeat sending periodically enabled.')
hwEntityHeartbeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEntityHeartbeatPeriod.setStatus('current')
if mibBuilder.loadTexts: hwEntityHeartbeatPeriod.setDescription('Heartbeat sending period detected in the trap reporting channel, with the minimum value of 60 seconds.')
hwHeartbeatTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 7, 2))
hwEntityHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 7, 2, 1))
if mibBuilder.loadTexts: hwEntityHeartbeatTrap.setStatus('current')
if mibBuilder.loadTexts: hwEntityHeartbeatTrap.setDescription('Heartbeat trap.')
hwPreDisposeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8))
hwPreDisposeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 1))
hwPreDisposeSequenceNo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPreDisposeSequenceNo.setStatus('current')
if mibBuilder.loadTexts: hwPreDisposeSequenceNo.setDescription("This object indicates the sequence number of the 'predispose capability file'.The value consists of the file version number and CRC code.")
hwPreDisposedTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 2))
hwInsertDiffFromPreDisposed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 2, 1)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalIndex"), ("HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalVendorType"), ("ENTITY-MIB", "entPhysicalVendorType"))
if mibBuilder.loadTexts: hwInsertDiffFromPreDisposed.setStatus('current')
if mibBuilder.loadTexts: hwInsertDiffFromPreDisposed.setDescription('This object indicates the type of the inserted entity is different from that of pre-disposed entity on the slot.')
hwPreDisposedChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 2, 2)).setObjects(("HUAWEI-ENTITY-EXTENT-MIB", "hwPreDisposeSequenceNo"))
if mibBuilder.loadTexts: hwPreDisposedChangeNotification.setStatus('current')
if mibBuilder.loadTexts: hwPreDisposedChangeNotification.setDescription("This object indicates the change of the 'predispose capability file'. An alarm is generated if the sequence number of the 'predispose capability file' in the current startup file is different from that in the last startup file.")
hwPreDisposeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3), )
if mibBuilder.loadTexts: hwPreDisposeConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwPreDisposeConfigTable.setDescription('Table of predisposing boards or flexible subcards.')
hwPreDisposeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeSlot"), (0, "HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeCardId"))
if mibBuilder.loadTexts: hwPreDisposeConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwPreDisposeConfigEntry.setDescription('Entry of the table to predispose boards or flexible subcards.')
hwDisposeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDisposeSlot.setStatus('current')
if mibBuilder.loadTexts: hwDisposeSlot.setDescription('This object indicates the slot ID of predisposed board. ')
hwDisposeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDisposeCardId.setStatus('current')
if mibBuilder.loadTexts: hwDisposeCardId.setDescription('This object indicates the card ID of predisposed subcard. ')
hwDisposeSbom = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDisposeSbom.setStatus('current')
if mibBuilder.loadTexts: hwDisposeSbom.setDescription('This object indicates the sbom information of predisposed board or subcard. ')
hwDisposeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDisposeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDisposeRowStatus.setDescription('This object indicates the row status when config predispose. active(1) notInService(2) notReady(3) createAndGo(4) createAndWait(5) destroy(6)')
hwDisposeOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("opSuccess", 1), ("opInProgress", 2), ("opDevNotSupportPredispose", 3), ("opCardNotSupportPredispose", 4), ("opAlreadyPredispose", 5), ("opCardConflict", 6), ("opDevOperationError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeOperState.setStatus('current')
if mibBuilder.loadTexts: hwDisposeOperState.setDescription('The value of this object identifies the operation status. opSuccess(1): The operation succeeds. opInProgress(2): The operation is ongoing. opDevNotSupportPredispose(3): The device does not support predispose. opCardNotSupportPredispose(4): The type of card or subcard is not supported to be predisposed on this device. opAlreadyPredispose(5): The slot or subslot has already been predisposed. opCardConflict(6): The slot or subslot to be predisposed conflict with others. opDevOperationError(7): Other error occurs on the device.')
hwPreDisposeEntInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4), )
if mibBuilder.loadTexts: hwPreDisposeEntInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwPreDisposeEntInfoTable.setDescription('This table is used to get the information of predisposed entitys.')
hwPreDisposeEntInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1), ).setIndexNames((0, "HUAWEI-ENTITY-EXTENT-MIB", "hwDisposeEntPhysicalIndex"))
if mibBuilder.loadTexts: hwPreDisposeEntInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwPreDisposeEntInfoEntry.setDescription('Entry of the table to get the information of predisposed entitys.')
hwDisposeEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: hwDisposeEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalIndex.setDescription('The index for this entry.')
hwDisposeEntPhysicalDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeEntPhysicalDescr.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalDescr.setDescription("A textual description of predisposed physical entity.This object should contain a string which identifies the manufacturer's name for the physical entity. ")
hwDisposeEntPhysicalVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeEntPhysicalVendorType.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalVendorType.setDescription('An indication of the vendor-specific hardware type of the predisposed physical entity. ')
hwDisposeEntPhysicalContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeEntPhysicalContainedIn.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalContainedIn.setDescription("The value of 'entPhysicalContainedIn' for the predisposed physical entity.")
hwDisposeEntPhysicalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 5), PhysicalClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeEntPhysicalClass.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalClass.setDescription('An indication of the general hardware type of the predisposed physical entity.')
hwDisposeEntPhysicalParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeEntPhysicalParentRelPos.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalParentRelPos.setDescription("An indication of the relative position of this 'child' component among all its 'sibling' components.")
hwDisposeEntPhysicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 31, 8, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDisposeEntPhysicalName.setStatus('current')
if mibBuilder.loadTexts: hwDisposeEntPhysicalName.setDescription('The textual name of the predisposed physical entity.')
mibBuilder.exportSymbols("HUAWEI-ENTITY-EXTENT-MIB", hwPreDisposeSequenceNo=hwPreDisposeSequenceNo, hwDevicePowerInfoGroup=hwDevicePowerInfoGroup, hwMonitorOutputKey=hwMonitorOutputKey, hwEntityVolI2CId=hwEntityVolI2CId, hwVirtualCableTestPairBStatus=hwVirtualCableTestPairBStatus, hwEntityFanSlot=hwEntityFanSlot, hwDisposeEntPhysicalDescr=hwDisposeEntPhysicalDescr, hwEntityIssueNum=hwEntityIssueNum, hwPnpTraps=hwPnpTraps, hwEntityArchivesInfoVersion=hwEntityArchivesInfoVersion, hwVirtualCableTestPairBLength=hwVirtualCableTestPairBLength, hwEntityOpticalMode=hwEntityOpticalMode, hwEntityMemSize=hwEntityMemSize, hwEntityIfDownTimes=hwEntityIfDownTimes, hwEntityOpticalType=hwEntityOpticalType, hwEntitySoftwareName=hwEntitySoftwareName, hwEntitySystemTime=hwEntitySystemTime, hwEntityBoardClass=hwEntityBoardClass, hwEntityExtCompliances=hwEntityExtCompliances, hwInsertDiffFromPreDisposed=hwInsertDiffFromPreDisposed, hwEntityTempFatalAlmThreshold=hwEntityTempFatalAlmThreshold, hwVirtualCableTestGroup=hwVirtualCableTestGroup, HwStandbyStatus=HwStandbyStatus, hwEntityOpticalTransBW=hwEntityOpticalTransBW, hwVirtualCableTestPairAStatus=hwVirtualCableTestPairAStatus, hwEntityCpuUsageThreshold=hwEntityCpuUsageThreshold, hwMonitorOutputTable=hwMonitorOutputTable, hwPhysicalPortBip8StatisticsES=hwPhysicalPortBip8StatisticsES, hwPreDisposedTraps=hwPreDisposedTraps, hwPhysicalPortBip8StatisticsEB=hwPhysicalPortBip8StatisticsEB, hwEntityExtMonitorBoardAbnormalNotification=hwEntityExtMonitorBoardAbnormalNotification, hwEntityExtMonitorPortNormalNotification=hwEntityExtMonitorPortNormalNotification, hwEntityMemUsage=hwEntityMemUsage, hwEntityOpticalPlug=hwEntityOpticalPlug, HWLevelState=HWLevelState, hwFileGeneResourceID=hwFileGeneResourceID, hwEntityExtGroups=hwEntityExtGroups, hwEntityTemperatureThreshold=hwEntityTemperatureThreshold, hwMonitorInputState=hwMonitorInputState, hwPreDisposeEntInfoTable=hwPreDisposeEntInfoTable, hwEntityTempMinorAlmThreshold=hwEntityTempMinorAlmThreshold, hwEntityTemperatureLowThreshold=hwEntityTemperatureLowThreshold, hwMonitorInputName=hwMonitorInputName, hwDisposeSlot=hwDisposeSlot, hwEntityTempChannel=hwEntityTempChannel, hwVirtualCableTestPairStatus=hwVirtualCableTestPairStatus, hwEntityOpticalPower=hwEntityOpticalPower, hwEntityExtNotificationGroup=hwEntityExtNotificationGroup, hwPhysicalPortBip8StatisticsBBE=hwPhysicalPortBip8StatisticsBBE, hwEntityStandbyStatus=hwEntityStandbyStatus, HwAdminState=HwAdminState, hwEntityOpticalBiasCurrent=hwEntityOpticalBiasCurrent, hwEntityOpticalDirectionType=hwEntityOpticalDirectionType, hwPnpInfo=hwPnpInfo, hwPreDisposeConfigEntry=hwPreDisposeConfigEntry, hwEntityOpticalVendorSn=hwEntityOpticalVendorSn, hwEntityOpticalRxPower=hwEntityOpticalRxPower, hwEntityVolChannel=hwEntityVolChannel, hwEntityManufacturedDate=hwEntityManufacturedDate, hwEntityCPUType=hwEntityCPUType, hwEntityMemUsageThreshold=hwEntityMemUsageThreshold, hwDisposeRowStatus=hwDisposeRowStatus, hwDisposeEntPhysicalVendorType=hwDisposeEntPhysicalVendorType, hwEntityUpdateLog=hwEntityUpdateLog, hwFileGeneOperState=hwFileGeneOperState, hwEntityExtTemperatureThresholdNotification=hwEntityExtTemperatureThresholdNotification, hwPhysicalPortBip8StatisticsUAS=hwPhysicalPortBip8StatisticsUAS, hwMonitorInputTable=hwMonitorInputTable, PYSNMP_MODULE_ID=hwEntityExtentMIB, hwDevicePowerInfoTotalPower=hwDevicePowerInfoTotalPower, hwEntityTempStatus=hwEntityTempStatus, hwEntityTemperature=hwEntityTemperature, hwDisposeEntPhysicalParentRelPos=hwDisposeEntPhysicalParentRelPos, hwDevicePowerInfoUsedPower=hwDevicePowerInfoUsedPower, hwDisposeEntPhysicalIndex=hwDisposeEntPhysicalIndex, hwPhysicalPortBip8StatisticsSES=hwPhysicalPortBip8StatisticsSES, hwEntityVolAddr=hwEntityVolAddr, hwVirtualCableTestTable=hwVirtualCableTestTable, hwEntityCpuUsageLowThreshold=hwEntityCpuUsageLowThreshold, hwHardwareCapaChangeNotification=hwHardwareCapaChangeNotification, hwFileGeneIndex=hwFileGeneIndex, hwOpticalModuleInfoEntry=hwOpticalModuleInfoEntry, hwVirtualCableTestIfIndex=hwVirtualCableTestIfIndex, hwEntityOperStatus=hwEntityOperStatus, hwPortBip8StatisticsTable=hwPortBip8StatisticsTable, hwEntitySystemMacAddress=hwEntitySystemMacAddress, hwEntityFanReg=hwEntityFanReg, hwEntityExtMemUsageThresholdNotification=hwEntityExtMemUsageThresholdNotification, HwAlarmStatus=HwAlarmStatus, hwEntityOpticalWaveLength=hwEntityOpticalWaveLength, hwEntityVolStatus=hwEntityVolStatus, hwPnpOperateTable=hwPnpOperateTable, hwVirtualCableTestEntry=hwVirtualCableTestEntry, hwEntityExtVoltageHighThresholdNotification=hwEntityExtVoltageHighThresholdNotification, hwEntityUpTime=hwEntityUpTime, hwEntityExtCompliance=hwEntityExtCompliance, hwEntityExtOperDisabled=hwEntityExtOperDisabled, hwMonitorOutputRuleIndex=hwMonitorOutputRuleIndex, hwEntityExtObjects=hwEntityExtObjects, hwEntityFanSpdAdjMode=hwEntityFanSpdAdjMode, hwSystemGlobalObjects=hwSystemGlobalObjects, hwEntitySystemModel=hwEntitySystemModel, hwPhysicalPortSpeed=hwPhysicalPortSpeed, hwPnpObjects=hwPnpObjects, hwDisposeEntPhysicalContainedIn=hwDisposeEntPhysicalContainedIn, hwPreDisposeInfo=hwPreDisposeInfo, hwEntityBomId=hwEntityBomId, hwEntityCpuMaxUsage=hwEntityCpuMaxUsage, hwEntityMemoryType=hwEntityMemoryType, hwOpticalModuleInfoGroup=hwOpticalModuleInfoGroup, hwEntityBoardType=hwEntityBoardType, hwEntPowerUsedInfoBoardType=hwEntPowerUsedInfoBoardType, hwSystemGlobalGroup=hwSystemGlobalGroup, hwEntityHeartbeatOnOff=hwEntityHeartbeatOnOff, hwEntityCpuFrequency=hwEntityCpuFrequency, hwHeartbeatTrapPrefix=hwHeartbeatTrapPrefix, hwEntityCPUAvgUsage=hwEntityCPUAvgUsage, hwEntityStateTable=hwEntityStateTable, hwEntPowerUsedInfoBoardName=hwEntPowerUsedInfoBoardName, hwVirtualCableTestPairDStatus=hwVirtualCableTestPairDStatus, hwEntityIfUpTimes=hwEntityIfUpTimes, hwEntityOpticalVoltage=hwEntityOpticalVoltage, hwEntityFanSpeed=hwEntityFanSpeed, hwEntityOpticalTxHighThreshold=hwEntityOpticalTxHighThreshold, hwMonitorOutputGroup=hwMonitorOutputGroup, hwFileGeneDestinationFile=hwFileGeneDestinationFile, hwEntPowerUsedInfoTable=hwEntPowerUsedInfoTable, hwEntityFanPresent=hwEntityFanPresent, hwEntityOpticalRxHighThreshold=hwEntityOpticalRxHighThreshold, hwEntityVoltageHighThreshold=hwEntityVoltageHighThreshold, hwMonitorInputGroup=hwMonitorInputGroup, hwDisposeEntPhysicalClass=hwDisposeEntPhysicalClass, hwEntityAlarmLight=hwEntityAlarmLight, hwEntityOpticalPowerRx=hwEntityOpticalPowerRx, hwEntityVolSlot=hwEntityVolSlot, hwMonitorInputEntry=hwMonitorInputEntry, hwDevicePowerInfoObjects=hwDevicePowerInfoObjects, hwMonitorInputRowStatus=hwMonitorInputRowStatus, hwMonitorOutputEntry=hwMonitorOutputEntry, hwVirtualCableTestOperation=hwVirtualCableTestOperation, hwEntityCurrent=hwEntityCurrent, hwEntityVolRequired=hwEntityVolRequired, hwEntityPortType=hwEntityPortType, hwPreDisposeObjects=hwPreDisposeObjects, hwEntityExtVoltageLowThresholdNotification=hwEntityExtVoltageLowThresholdNotification, hwEntityExtMonitorPortAbnormalNotification=hwEntityExtMonitorPortAbnormalNotification, hwEntityVolRatio=hwEntityVolRatio, hwEntityOpticalTxHighWarnThreshold=hwEntityOpticalTxHighWarnThreshold, hwRUModuleInfoEntry=hwRUModuleInfoEntry, hwEntitySupportFlexCard=hwEntitySupportFlexCard, hwEntityBomEnDesc=hwEntityBomEnDesc, hwPortBip8StatisticsEntry=hwPortBip8StatisticsEntry, hwEntityExtTraps=hwEntityExtTraps, hwEntityExtGroup=hwEntityExtGroup, hwPortBip8StatisticsObjectGroup=hwPortBip8StatisticsObjectGroup, hwEntPowerUsedInfoPower=hwEntPowerUsedInfoPower, hwEntityHeartbeatTrap=hwEntityHeartbeatTrap, hwEntityOpticalTxPower=hwEntityOpticalTxPower, hwPnpGroup=hwPnpGroup, hwVirtualCableTestLastTime=hwVirtualCableTestLastTime, hwEntityMemoryAvgUsage=hwEntityMemoryAvgUsage, hwEntityTempSlotId=hwEntityTempSlotId, hwEntityVoltage=hwEntityVoltage, hwVoltageInfoGroup=hwVoltageInfoGroup, hwNseOpmStatus=hwNseOpmStatus, hwHeartbeatGroup=hwHeartbeatGroup, hwPnpOperateEntry=hwPnpOperateEntry, hwHeartbeatConfig=hwHeartbeatConfig, hwEntityExtCpuUsageLowThresholdNotfication=hwEntityExtCpuUsageLowThresholdNotfication, hwRUModuleInfoGroup=hwRUModuleInfoGroup, hwEntityExtCpuUsageThresholdNotfication=hwEntityExtCpuUsageThresholdNotfication, hwPreDisposeConfigTable=hwPreDisposeConfigTable, hwEntityState=hwEntityState, hwEntityCLEICode=hwEntityCLEICode, hwVirtualCableTestPairLength=hwVirtualCableTestPairLength, hwEntityTempMajorAlmThreshold=hwEntityTempMajorAlmThreshold, hwEntityExtOperEnabled=hwEntityExtOperEnabled, hwPredisposeGroup=hwPredisposeGroup, hwRUModuleInfoTable=hwRUModuleInfoTable, hwEntityOpticalTxLowWarnThreshold=hwEntityOpticalTxLowWarnThreshold, HwOperState=HwOperState, hwEntityVolLowAlmFatal=hwEntityVolLowAlmFatal, hwHeartbeatObjects=hwHeartbeatObjects, hwEntityMemSizeMega=hwEntityMemSizeMega, hwEntityOpticalRxLowThreshold=hwEntityOpticalRxLowThreshold, hwEntPowerUsedInfoBoardSlot=hwEntPowerUsedInfoBoardSlot, hwEntityFanState=hwEntityFanState, hwEntityExtConformance=hwEntityExtConformance, hwPreDisposedChangeNotification=hwPreDisposedChangeNotification, hwVoltageInfoEntry=hwVoltageInfoEntry, hwMonitorOutputMask=hwMonitorOutputMask, hwEntityExtOldObjectsGroup=hwEntityExtOldObjectsGroup, hwEntitySystemReset=hwEntitySystemReset, hwEntityDuplex=hwEntityDuplex, hwVirtualCableTestPairCLength=hwVirtualCableTestPairCLength, hwMonitorInputIndex=hwMonitorInputIndex, hwEntityManufactureCode=hwEntityManufactureCode, hwEntityVolHighAlmFatal=hwEntityVolHighAlmFatal, hwDisposeOperState=hwDisposeOperState, hwDisposeCardId=hwDisposeCardId, hwFanStatusTable=hwFanStatusTable, hwEntityExtTrapsPrefix=hwEntityExtTrapsPrefix, hwEntityHeartbeatPeriod=hwEntityHeartbeatPeriod, hwEntityOpticalFiberType=hwEntityOpticalFiberType, hwEntitySoftwareVendor=hwEntitySoftwareVendor, hwEntitySystemHealthInterval=hwEntitySystemHealthInterval, hwEntityFanSn=hwEntityFanSn, hwEntPowerUsedInfoGroup=hwEntPowerUsedInfoGroup, hwDisposeSbom=hwDisposeSbom, hwMonitorOutputIndex=hwMonitorOutputIndex, hwVirtualCableTestPairALength=hwVirtualCableTestPairALength, hwTemperatureThresholdGroup=hwTemperatureThresholdGroup, hwEntPowerUsedInfoEntry=hwEntPowerUsedInfoEntry, hwEntityOpticalRxHighWarnThreshold=hwEntityOpticalRxHighWarnThreshold, hwEntityVolLowAlmMajor=hwEntityVolLowAlmMajor, hwEntitySystemNEId=hwEntitySystemNEId, hwEntityBoardPower=hwEntityBoardPower, hwEntityOpticalTemperature=hwEntityOpticalTemperature, hwEntityGlobalPara=hwEntityGlobalPara, hwEntitySystemNetID=hwEntitySystemNetID, hwVirtualCableTestPairCStatus=hwVirtualCableTestPairCStatus, hwEntityStateEntry=hwEntityStateEntry, hwEntityVoltageLowThreshold=hwEntityVoltageLowThreshold, hwEntityExtMonitorBoardNormalNotification=hwEntityExtMonitorBoardNormalNotification, hwPreDisposeEntInfoEntry=hwPreDisposeEntInfoEntry, hwEntityOpticalTxLowThreshold=hwEntityOpticalTxLowThreshold, hwEntityBomLocalDesc=hwEntityBomLocalDesc, hwEntityOpenBomId=hwEntityOpenBomId, hwEntityFlashSize=hwEntityFlashSize, hwTemperatureThresholdEntry=hwTemperatureThresholdEntry, hwEntityExtentMIB=hwEntityExtentMIB, hwVirtualCableTestPairDLength=hwVirtualCableTestPairDLength, hwEntityOpticalRxLowWarnThreshold=hwEntityOpticalRxLowWarnThreshold, hwEntityVolCurValue=hwEntityVolCurValue, hwFileGeneRowStatus=hwFileGeneRowStatus, hwTemperatureThresholdTable=hwTemperatureThresholdTable, hwEntityTempI2CId=hwEntityTempI2CId, hwEntityOpticalTransDistance=hwEntityOpticalTransDistance, hwEntityVolHighAlmMajor=hwEntityVolHighAlmMajor, hwEntitySoftwareVersion=hwEntitySoftwareVersion, hwFanStatusGroup=hwFanStatusGroup, hwEntityAdminStatus=hwEntityAdminStatus, hwOpticalModuleInfoTable=hwOpticalModuleInfoTable, hwFileGeneResourceType=hwFileGeneResourceType, hwFanStatusEntry=hwFanStatusEntry, hwEntityCpuUsage=hwEntityCpuUsage, hwMonitorOutputRowStatus=hwMonitorOutputRowStatus, hwMonitorInputStateEnable=hwMonitorInputStateEnable, hwVoltageInfoTable=hwVoltageInfoTable, hwHardwareCapaSequenceNo=hwHardwareCapaSequenceNo, hwDisposeEntPhysicalName=hwDisposeEntPhysicalName, hwEntityTempAddr=hwEntityTempAddr, hwEntityOpticalUserEeprom=hwEntityOpticalUserEeprom, hwEntityTempValue=hwEntityTempValue)
mibBuilder.exportSymbols("HUAWEI-ENTITY-EXTENT-MIB", hwEntityServiceType=hwEntityServiceType)
