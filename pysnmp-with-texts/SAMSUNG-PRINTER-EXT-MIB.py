#
# PySNMP MIB module SAMSUNG-PRINTER-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAMSUNG-PRINTER-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hrDeviceIndex, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrDeviceIndex")
prtOutputEntry, prtInterpreterEntry, prtGeneralEntry, PresentOnOff, prtInputEntry, prtChannelEntry, prtInterpreterIndex = mibBuilder.importSymbols("Printer-MIB", "prtOutputEntry", "prtInterpreterEntry", "prtGeneralEntry", "PresentOnOff", "prtInputEntry", "prtChannelEntry", "prtInterpreterIndex")
samsungCommonMIB, = mibBuilder.importSymbols("SAMSUNG-COMMON-MIB", "samsungCommonMIB")
Ordinal32, Cardinal32 = mibBuilder.importSymbols("SAMSUNG-GENERAL-TC", "Ordinal32", "Cardinal32")
ScmPrtOutputOffsetStackingType, = mibBuilder.importSymbols("SAMSUNG-PRINTER-EXT-TC", "ScmPrtOutputOffsetStackingType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, TimeTicks, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, Unsigned32, ModuleIdentity, Gauge32, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "TimeTicks", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "NotificationType", "IpAddress")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
scmPrintMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55))
if mibBuilder.loadTexts: scmPrintMIB.setLastUpdated('190407170000Z')
if mibBuilder.loadTexts: scmPrintMIB.setOrganization('Samsung Common Management Interface Working Group')
if mibBuilder.loadTexts: scmPrintMIB.setContactInfo(' SCMI Editors E-Mail: wono.song@samsung.com -- -- ')
if mibBuilder.loadTexts: scmPrintMIB.setDescription(' Version: 1.00 Samsung SCMI Extension to IETF Printer MIB Module. This Module provides extension to the IETF Printer MIB. Copyright (C) 2003-2004 Samsung Corporation. All Rights Reserved.')
scmPrtBase = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 1))
scmPrtBaseTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 1, 2), )
if mibBuilder.loadTexts: scmPrtBaseTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtBaseTable.setDescription("A table of general counters and information for ease of use of the SCMI Extension to IETF Printer MIB Module and the IETF Printer MIB on this host system. Usage: The ONLY valid row in the 'scmPrtBaseTable' shall ALWAYS have an 'scmPrtBaseIndex' of one ('1').")
scmPrtBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 1, 2, 1), ).setIndexNames((0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtBaseIndex"))
if mibBuilder.loadTexts: scmPrtBaseEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtBaseEntry.setDescription("An entry of general counters and information for ease of use of the SCMI Extension to IETF Printer MIB Module and the IETF Printer MIB on this host system. Usage: The ONLY valid row in the 'scmPrtBaseTable' shall ALWAYS have an 'scmPrtBaseIndex' of one ('1').")
scmPrtBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 1, 2, 1, 1), Ordinal32())
if mibBuilder.loadTexts: scmPrtBaseIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtBaseIndex.setDescription("A unique value used by this host system to identify this conceptual row in the 'scmPrtBaseTable'. Usage: The ONLY valid row in the 'scmPrtBaseTable' shall ALWAYS have an 'scmPrtBaseIndex' of one ('1').")
scmPrtBaseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtBaseRowStatus.setStatus('current')
if mibBuilder.loadTexts: scmPrtBaseRowStatus.setDescription("This object is used to display status of the ONLY valid conceptual row in the 'scmPrtBaseTable'. Usage: 'scmPrtBaseRowStatus' is 'read-only' because the ONLY valid conceptual row shall NOT be deleted.")
scmPrtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2))
scmPrtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 1)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtBaseGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtChannelGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpreterGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfiguratioinGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtSerialGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Group"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtAlertGroup"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConsoleDisplayBufferGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtMIBCompliance = scmPrtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: scmPrtMIBCompliance.setDescription(' The compliance statement for agents that implement the printer MIB extension module.')
scmPrtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3))
scmPrtBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 1)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtBaseRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtBaseGroup = scmPrtBaseGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtBaseGroup.setDescription(' The general printer group extension.')
scmPrtGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 5)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralRowStatus"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnModelName"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnModelVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnOSFWVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnSerialNo"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnPCLFWVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnEngFWVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnSCFFWVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnEpsonVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnPCL5eVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnPSFWVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnScanFWVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnKS5843Ver"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnKSSMVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnKS5895Ver"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnMainSystemVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnSPLVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrncolorPPM"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnPCL5CeVer"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnModelDescr"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnManufacture"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralPrnVendor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtGeneralGroup = scmPrtGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralGroup.setDescription(' The general printer group extension.')
scmPrtInputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 8)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputRowStatus"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputNextPrtInputIndex"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputUseCustomSize"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputCustDimFeedDirDecl"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputCustDimXFeedDirDecl"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputTrayPriority"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputPaperSize"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputPaperSizeOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputTrayNum"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputTrayNumOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputTraySwitch"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputTraySwitchOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputLockTray"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputLockTrayOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputPaperType"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputPaperTypeOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtInputGroup = scmPrtInputGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputGroup.setDescription(' The input group extension.')
scmPrtOutputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 9)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputRowStatus"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputNextIndex"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputPassword"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputOffsetStackingType"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputTrayTimeoutSupport"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputTrayTimeout"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputFinishier"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputFinishierOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtOutputGroup = scmPrtOutputGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputGroup.setDescription(' The output group extension.')
scmPrtChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 14)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtChannelRowStatus"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtChannelEOJTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtChannelGroup = scmPrtChannelGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtChannelGroup.setDescription(' The Channel group extension.')
scmPrtInterpreterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 15)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpRowStatus"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpJobCopiesDefault"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpLineTerm"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpProcessBarcodes"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpOrientation"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpOrientationOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpreterCopyNum"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpreterEmulation"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpreterEmulationOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtInterpreterGroup = scmPrtInterpreterGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpreterGroup.setDescription(' The interpreter group extension.')
scmPrtMarkerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 17)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerResolution"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerResolutionOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerIndex"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerColor"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerColorDescription"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerSrt"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerMarginUnit"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerLevel"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerDensity"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerSrtOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerDensityOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerSmetMode"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerSmetModeOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerduplexTopMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerduplexLeftMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerShortEdgeBindingMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerLongEdgeBindingMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerSave"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerSaveOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerOutAction"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerOutActionOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtMarkerGroup = scmPrtMarkerGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerGroup.setDescription(' The Marker Group.')
scmPrtOperationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 18)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationJobCancel"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperarionMenuClear"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationMenuClearOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationFuserClean"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationFuserCleanOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationOpcClean"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationOpcCleanOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationTestPrtRequest"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationPrintFontRequest"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationIndex"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationPrintBlackOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtOperationGroup = scmPrtOperationGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationGroup.setDescription('Description.')
scmPrtConfiguratioinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 19)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationPowerSave"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationPowerSaveOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationAutocont"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationAutoCountOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationJam2Recover"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationJam2RecOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationAltitudeAction"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationAltitudeActionOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtConfiguratioinGroup = scmPrtConfiguratioinGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfiguratioinGroup.setDescription('Description.')
scmPrtCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 20)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountDrumImageCount"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountDrumImageCountReset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountTransferImageCount"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountTransferImageCountReset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountFuserImageCount"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountFuserImageCountReset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountTwoRollerCount"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountTwoRollerReset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountPickupMPCount"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountPickupMPReset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountPickupTray1Count"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountPickupTray1Reset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountPickupTray2Count"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountPickupTray2Reset"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountIndex"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountType"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountMediaSize"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountColorant"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountDuplex"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountUnit"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountResolution"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountValue"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountDeviceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtCountGroup = scmPrtCountGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountGroup.setDescription('Description.')
scmPrtSerialGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 21)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtSerialNbaudRate"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtSerialBrOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtSerialBobuxon"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtSerialBobuxonOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtSerialGroup = scmPrtSerialGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialGroup.setDescription(' The Serial group.')
scmPrtPCLGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 22)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLFont"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLSymbolSet"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLFormLine"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLPitch"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLPointSize"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLCourier"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLCourierOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLAppendCR"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLAppendCROptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLWideA4"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLWideA4Options"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLTopMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLLeftMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtPCLGroup = scmPrtPCLGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLGroup.setDescription('Description.')
scmPrtKS5843Group = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 23)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Font"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843FontOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Code"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843CodeOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843cpi"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843cpiOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Lines"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Zoom"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843AutoWrap"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843AutoWrapOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Topmargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKS5843Sitemode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtKS5843Group = scmPrtKS5843Group.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Group.setDescription('Description.')
scmPrtKSSMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 24)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMFont"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMFontOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMCode"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMCodeOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMCPI"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMCPIOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMLines"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMZoom"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMAutoWrap"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMAutoWrapOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMTopMargin"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtKSSMSiteMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtKSSMGroup = scmPrtKSSMGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMGroup.setDescription('Description.')
scmPrtIPPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 25)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPColorSupported"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobKOctetsSupportedLBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobKOctetsSupportedUBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobImpressionsSupportedLBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobImpressionsSupportedUBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobMediaSheetsSupportedLBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobMediaSheetsSupportedUBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobSheets"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPCollatedCopiesLBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPCollatedCopiesUBound"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPCollatedCopies"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPFinishingsSupported"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPFinishings"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPPageRangesSupported"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPNumberUp"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPNumberUpOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPPrintQuality"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPPrintQualityOptions"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobKOctetsProcessed"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobImpressionsCompleted"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtIPPJobMediaSheetsCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtIPPGroup = scmPrtIPPGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPGroup.setDescription('Description.')
scmPrtAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 26)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtAlertAlarmShortage"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtAlertAlarmShortageOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtAlertGroup = scmPrtAlertGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtAlertGroup.setDescription('Description.')
scmPrtConsoleDisplayBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 2, 3, 27)).setObjects(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConsoleDisplayBufferLcdLangType"), ("SAMSUNG-PRINTER-EXT-MIB", "scmPrtConsoleDisplayBufferLcdLangTypeOptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scmPrtConsoleDisplayBufferGroup = scmPrtConsoleDisplayBufferGroup.setStatus('current')
if mibBuilder.loadTexts: scmPrtConsoleDisplayBufferGroup.setDescription('Description.')
scmPrtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5))
scmPrtGeneralSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1))
scmPrtGeneralPrnModelName = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnModelName.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnModelName.setDescription(' Represent the printer model name currently being connected with NPC.')
scmPrtGeneralPrnOSFWVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnOSFWVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnOSFWVer.setDescription(' Printer Software version number.')
scmPrtGeneralPrnModelVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnModelVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnModelVer.setDescription(' Model version number.')
scmPrtGeneralPrnSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnSerialNo.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnSerialNo.setDescription(' Printer Serial number.')
scmPrtGeneralPrnModelDescr = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnModelDescr.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnModelDescr.setDescription(' Printer HDD Size.')
scmPrtGeneralPrnManufacture = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnManufacture.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnManufacture.setDescription(' Printer DRAM Size.')
scmPrtGeneralPrnVendor = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnVendor.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnVendor.setDescription(' Print Per Minute')
scmPrtGeneralPrnPCLFWVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnPCLFWVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnPCLFWVer.setDescription('PCL Version information of printer')
scmPrtGeneralPrnEngFWVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnEngFWVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnEngFWVer.setDescription(' Print Engine FW Version')
scmPrtGeneralPrnSCFFWVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnSCFFWVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnSCFFWVer.setDescription('Print SCF FW Version')
scmPrtGeneralPrnEpsonVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnEpsonVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnEpsonVer.setDescription(' Print Epson Version')
scmPrtGeneralPrnPCL5eVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnPCL5eVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnPCL5eVer.setDescription(' Print PCL5e Version')
scmPrtGeneralPrnPSFWVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnPSFWVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnPSFWVer.setDescription('PS Version information of printer')
scmPrtGeneralPrnScanFWVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnScanFWVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnScanFWVer.setDescription(' Scanner FW Version')
scmPrtGeneralPrnKS5843Ver = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnKS5843Ver.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnKS5843Ver.setDescription(' Printer KS5843 Version.')
scmPrtGeneralPrnKSSMVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnKSSMVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnKSSMVer.setDescription(' Printer KSSM Version.')
scmPrtGeneralPrnKS5895Ver = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnKS5895Ver.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnKS5895Ver.setDescription(' Printer KS5895 Version.')
scmPrtGeneralPrnMainSystemVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnMainSystemVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnMainSystemVer.setDescription(' Printer Main System Versio.')
scmPrtGeneralPrnSPLVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnSPLVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnSPLVer.setDescription(' Print SPL Version')
scmPrtGeneralPrncolorPPM = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrncolorPPM.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrncolorPPM.setDescription(' Color Printing PPM')
scmPrtGeneralPrnPCL5CeVer = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtGeneralPrnPCL5CeVer.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralPrnPCL5CeVer.setDescription(' Print PCL5Ce Version')
scmPrtGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 2), )
if mibBuilder.loadTexts: scmPrtGeneralTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralTable.setDescription(' A table of general information per printer. This table augments the prtGeneralTable.')
scmPrtGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 2, 1), )
prtGeneralEntry.registerAugmentions(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtGeneralEntry"))
scmPrtGeneralEntry.setIndexNames(*prtGeneralEntry.getIndexNames())
if mibBuilder.loadTexts: scmPrtGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralEntry.setDescription(' An entry exists in this table for each device entry in the hostmib device table whose type is printer.')
scmPrtGeneralRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 5, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtGeneralRowStatus.setStatus('current')
if mibBuilder.loadTexts: scmPrtGeneralRowStatus.setDescription(' Manages the status of this conceptual row in the scmPrtGeneralTable.')
scmPrtInput = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8))
scmPrtInputSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1))
scmPrtInputTraySwitch = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInputTraySwitch.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputTraySwitch.setDescription(" if language is set to AUTO, this options can the printer anlyzes the stream of data being sent to determine which language is being used by the printer job, and the printer's emulation language automatically be switched if this options is set. ")
scmPrtInputTraySwitchOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("off", 1), ("auto", 2), ("tray1", 4), ("tray2", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInputTraySwitchOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputTraySwitchOptions.setDescription(' available options of the model')
scmPrtInputLockTray = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInputLockTray.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputLockTray.setDescription(' Trays and combination trays can be locked out of the paper selection process. The available options depend on the configuration of MP tray.')
scmPrtInputLockTrayOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInputLockTrayOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputLockTrayOptions.setDescription(' available options of the model')
scmPrtInputPaperType = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInputPaperType.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputPaperType.setDescription(' It determines paper thickness.')
scmPrtInputPaperTypeOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("normal", 1), ("thick", 2), ("wet", 4), ("transparency", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInputPaperTypeOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputPaperTypeOptions.setDescription(' available options of current model')
scmPrtInputTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2), )
if mibBuilder.loadTexts: scmPrtInputTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputTable.setDescription("This table logically augments the Printer MIB's prtInputTable.")
scmPrtInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1), )
prtInputEntry.registerAugmentions(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInputEntry"))
scmPrtInputEntry.setIndexNames(*prtInputEntry.getIndexNames())
if mibBuilder.loadTexts: scmPrtInputEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputEntry.setDescription('Entries may exist for each entry in the prtInputTable.')
scmPrtInputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputRowStatus.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputRowStatus.setDescription(' Manages the status of this conceptual row in the scmPrtInputTable.')
scmPrtInputNextPrtInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputNextPrtInputIndex.setReference(' See: scmPrtInputAliasGroup See: scmPrtInterpTraySwitch')
if mibBuilder.loadTexts: scmPrtInputNextPrtInputIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputNextPrtInputIndex.setDescription(" The value of prtInputIndex corresponding to the input subunit which will be used when this input subunit is emptied. The value of zero indicates that auto input switching will not occur when this input subunit is emptied. Two different mechanisms for input tray switching, scmPrtNextPrtInputIndex and scmPrtInputAliasGroup, are provided. A device agent may make use of one or the other, none, or both. Use the model that fits best for the given application. Usage: Conforming management agents, which ALSO implement the the Printer MIB v2, SHALL set 'scmPrtInputNextPrtInputIndex' to the SAME value as 'prtInputNextIndex' (i.e., the values of these two objects SHALL be interlocked).")
scmPrtInputUseCustomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 3), PresentOnOff().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputUseCustomSize.setReference(' See: scmPrtInputCustDimFeedDirDecl See: scmPrtInputCustDimXFeedDirDecl')
if mibBuilder.loadTexts: scmPrtInputUseCustomSize.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputUseCustomSize.setDescription(" Specifies how this input subunit determines the paper size to use. If the value is 'Off' this input subunit uses the paper size automatically sensed by the subunit. If the value is 'On' this input subunit uses the custom dimensions provided by scmPrtInputCustDimFeedDirDecl and scmPrtInputCustDimXFeedDirDecl.")
scmPrtInputCustDimFeedDirDecl = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputCustDimFeedDirDecl.setReference(' See: scmPrtInputUseCustomSize See: scmPrtInputCustDimXFeedDirDecl')
if mibBuilder.loadTexts: scmPrtInputCustDimFeedDirDecl.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputCustDimFeedDirDecl.setDescription(" Provides the dimension, in the feed direction, of the media in this input subunit, when the value of scmPrtInputUseCustomSize is set to 'On'. When scmPrtInputUseCustomSize is set to On, this value is copied to prtInputMediaDimFeedDirDeclared and prtInputMediaDimFeedDirChosen.")
scmPrtInputCustDimXFeedDirDecl = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputCustDimXFeedDirDecl.setReference(' See: scmPrtInputUseCustomSize See: scmPrtInputCustDimFeedDirDecl')
if mibBuilder.loadTexts: scmPrtInputCustDimXFeedDirDecl.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputCustDimXFeedDirDecl.setDescription(" Provides the dimension, in the feed direction, of the media in this input subunit, when the value of scmPrtInputUseCustomSize is set to 'On'. When scmPrtInputUseCustomSize is set to 'On', this value is copied to prtInputMediaDimFeedDirDeclared and prtInputMediaDimFeedDirChosen.")
scmPrtInputTrayPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputTrayPriority.setReference(' See: scmPrtNextPrtInputIndex See: scmPrtInputAliasGroup')
if mibBuilder.loadTexts: scmPrtInputTrayPriority.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputTrayPriority.setDescription(" The current priority of this tray. This value/mechanism is independent of scmPrtNextPrtInputIndex and scmPrtInputAliasGroup. Usage: The priority of this device, where '0' is unspecified (default), '1' is lowest, and '100' is highest.")
scmPrtInputPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputPaperSize.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputPaperSize.setDescription(' Value of Paper size for printing. Some printer such like ML6060 or Modena have a 4 bytes data length. So, to distinguish these models we have to check model id or version.')
scmPrtInputPaperSizeOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912))).clone(namedValues=NamedValues(("letter", 1), ("legal", 2), ("a4", 4), ("executive", 8), ("jisB5", 16), ("isoB5", 32), ("com10", 64), ("monarch", 128), ("dl", 256), ("c5", 512), ("postA6", 1024), ("c6", 2048), ("folio", 4096), ("a5", 8192), ("statement", 16384), ("a6", 32768), ("ledger", 65536), ("a3", 131072), ("jisB4", 262144), ("jpost", 524288), ("jpostd", 1048576), ("custom", 2097152), ("letterP", 4194304), ("a4P", 8388608), ("jisB5P", 16777216), ("a5P", 33554432), ("executiveP", 67108864), ("statementP", 134217728), ("a3Over", 268435456), ("b5Envelope", 536870912)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtInputPaperSizeOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputPaperSizeOptions.setDescription(' Paper size options that are available in this model. Some printer such like ML6060 or Modena have a 4 bytes data length. So, to distinguish these models we have to check model id or version. ')
scmPrtInputTrayNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputTrayNum.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputTrayNum.setDescription(' It can select the type of paper tray. The types of tray can be varied according to the printer model')
scmPrtInputTrayNumOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 8, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInputTrayNumOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInputTrayNumOptions.setDescription(' available options of tray types')
scmPrtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9))
scmPrtOutputTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1), )
if mibBuilder.loadTexts: scmPrtOutputTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputTable.setDescription(' This table logically augments the prtOutputTable in the Printer MIB.')
scmPrtOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1), )
prtOutputEntry.registerAugmentions(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtOutputEntry"))
scmPrtOutputEntry.setIndexNames(*prtOutputEntry.getIndexNames())
if mibBuilder.loadTexts: scmPrtOutputEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputEntry.setDescription(' Entries may exist for each entry in the prtOutputTable.')
scmPrtOutputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputRowStatus.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputRowStatus.setDescription(' Manages the status of this conceptual row in the scmPrtOutputTable.')
scmPrtOutputNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputNextIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputNextIndex.setDescription(' The value of prtOutputIndex corresponding to the output subunit which will be used when this output subunit is filled. A value of zero(0) indicates that auto output switching will not occur when this output subunit is filled.')
scmPrtOutputPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputPassword.setReference('See: prtOutputSecurity.')
if mibBuilder.loadTexts: scmPrtOutputPassword.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputPassword.setDescription(' This object is used as the password for an Output Tray, e.g. an output mailbox. It is the value that must be entered to open the output tray.')
scmPrtOutputOffsetStackingType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 4), ScmPrtOutputOffsetStackingType().clone('notSpecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputOffsetStackingType.setReference(' See: prtOutputOffsetStacking See: scmPrtInterpOffsetStackingType')
if mibBuilder.loadTexts: scmPrtOutputOffsetStackingType.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputOffsetStackingType.setDescription(' This object further refines the type of offset stacking from that specified by the object prtOutputOffsetStacking in the Printer MIB.')
scmPrtOutputTrayTimeoutSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 5), PresentOnOff().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputTrayTimeoutSupport.setReference('See: scmPrtOutputTrayTimeout')
if mibBuilder.loadTexts: scmPrtOutputTrayTimeoutSupport.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputTrayTimeoutSupport.setDescription(" Determines whether the printer should wait before sending the printed output to another output destination when the selected or default destination is full. 'On' indicates that would should wait as specified by scmPrtOutputTrayTimeout. 'Off' indicates this feature is off and should immediately seek to send the printed output to another destination. The value 'other' shall mean not specified.")
scmPrtOutputTrayTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 6), Cardinal32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputTrayTimeout.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputTrayTimeout.setDescription(" Determines how long the printer should wait before sending the printed output to another output destination when the selected or default destination is full. A value of (0) implies 'other' or 'infinite' which translates to this input subunit does not support this feature.")
scmPrtOutputFinishier = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 51), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputFinishier.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputFinishier.setDescription(' This object declares the printer output finishier.')
scmPrtOutputFinishierOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 9, 1, 1, 52), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtOutputFinishierOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtOutputFinishierOptions.setDescription(' This object declares the printer output finishier option. options 1. staple 2. punch ')
scmPrtChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 14))
scmPrtChannelSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 14, 1))
scmPrtChannelTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 14, 2), )
if mibBuilder.loadTexts: scmPrtChannelTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtChannelTable.setDescription(" This table logically augments Printer MIB's prtChannelTable.")
scmPrtChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 14, 2, 1), )
prtChannelEntry.registerAugmentions(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtChannelEntry"))
scmPrtChannelEntry.setIndexNames(*prtChannelEntry.getIndexNames())
if mibBuilder.loadTexts: scmPrtChannelEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtChannelEntry.setDescription(' An entry exists corresponding to each entry in the prtChannelTable.')
scmPrtChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 14, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: scmPrtChannelRowStatus.setDescription(' Manages the status of this conceptual row in the scmPrtChannelTable.')
scmPrtChannelEOJTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 14, 2, 1, 2), Cardinal32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtChannelEOJTimeout.setStatus('current')
if mibBuilder.loadTexts: scmPrtChannelEOJTimeout.setDescription(' Defines the number of seconds that the channel waits before timing out. For example, this may be used for the parallel channel. The value zero means infinite or no timeout on the channel.')
scmPrtInterpreter = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15))
scmPrtInterpreterSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 1))
scmPrtInterpreterCopyNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInterpreterCopyNum.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpreterCopyNum.setDescription(' It can select how many papers are printed Normally it can be selected 1- 999.')
scmPrtInterpreterEmulation = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInterpreterEmulation.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpreterEmulation.setDescription(' Emulation option')
scmPrtInterpreterEmulationOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768))).clone(namedValues=NamedValues(("auto", 1), ("pcl5e", 2), ("pcl4", 4), ("wps3", 8), ("wps6", 16), ("ksc5843", 32), ("kssm", 64), ("ksc5895", 128), ("hwp", 256), ("pclxl", 512), ("ps2", 1024), ("hexDump", 2048), ("epson", 4096), ("ps3swrender", 8192), ("ps3", 16384), ("colorGDI", 32768)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtInterpreterEmulationOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpreterEmulationOptions.setDescription(' available options of the model')
scmPrtInterpreterTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2), )
if mibBuilder.loadTexts: scmPrtInterpreterTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpreterTable.setDescription(" This table logically augments the Printer MIB's prtInterpreterTable.")
scmPrtInterpreterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1), )
prtInterpreterEntry.registerAugmentions(("SAMSUNG-PRINTER-EXT-MIB", "scmPrtInterpreterEntry"))
scmPrtInterpreterEntry.setIndexNames(*prtInterpreterEntry.getIndexNames())
if mibBuilder.loadTexts: scmPrtInterpreterEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpreterEntry.setDescription(' An entry exists corresponding to each entry in the prtInterpreterTable.')
scmPrtInterpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInterpRowStatus.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpRowStatus.setDescription(' Manages the status of this conceptual row in the scmPrtInterpreterTable.')
scmPrtInterpJobCopiesDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1, 9), Ordinal32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInterpJobCopiesDefault.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpJobCopiesDefault.setDescription(' This defines the default number of job copies to be printed by this interpreter. If set incorrectly, this object may cause difficulties at customer sites. Agent developers should consider making this object read-only, permanently set to one copy.')
scmPrtInterpLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1, 33), PresentOnOff().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInterpLineTerm.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpLineTerm.setDescription(" Enables adding a Carriage Return after every Line Feed. The value 'On' indicates that a Carriage Return will be added after every Line Feed. Usage example: This is a useful feature when printing text jobs via PCL through a standard queue in UNIX. The value 'other' shall mean not specified.")
scmPrtInterpProcessBarcodes = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1, 54), PresentOnOff().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInterpProcessBarcodes.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpProcessBarcodes.setDescription(" Specifies whether the 'extra' barcode processing within the interpreter should be used.")
scmPrtInterpOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1, 60), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scmPrtInterpOrientation.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpOrientation.setDescription(' It determines the direction of the print image on the page. The first two kinds of options are portrait(tall) and landscape(wide). reversePortrait is 180 degrees rotation of portrait. reverseLandscape is 180 degrees rotation of landscape.')
scmPrtInterpOrientationOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 15, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2), ("reverseLandscape", 4), ("reversePortrait", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtInterpOrientationOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtInterpOrientationOptions.setDescription(' available options in orientation')
scmPrtMediaPath = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 16))
scmPrtMarker = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17))
scmPrtMarkerSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1))
scmPrtMarkerMarginUnit = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mm", 1), ("inch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerMarginUnit.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerMarginUnit.setDescription(' ')
scmPrtMarkerSrt = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtMarkerSrt.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerSrt.setDescription(' It determin Samsung Resolution Technology option when it is ON.')
scmPrtMarkerSrtOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("enhance", 1), ("normal", 2), ("grayPlus", 4), ("gray", 8), ("res1200fast", 16), ("res1200true", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerSrtOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerSrtOptions.setDescription(' available options of current model')
scmPrtMarkerDensity = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerDensity.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerDensity.setDescription('It determines the overall density of page')
scmPrtMarkerDensityOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("light", 1), ("medium", 2), ("dark", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerDensityOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerDensityOptions.setDescription('available options of current model')
scmPrtMarkerSmetMode = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerSmetMode.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerSmetMode.setDescription('The value of this object indicates whether the SMET mode is currently enabled.')
scmPrtMarkerSmetModeOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerSmetModeOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerSmetModeOptions.setDescription('The value of this object will be the bitwise OR of the supported values for smetMode in this printer.')
scmPrtMarkerduplexTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerduplexTopMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerduplexTopMargin.setDescription('The value of this object gives the top margin on the backside of a page when printing in duplex mode. The actual value used in the printer is the value of this object divided by 10. The unit is inch.')
scmPrtMarkerduplexLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerduplexLeftMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerduplexLeftMargin.setDescription('The value of this object gives the left margin on the backside of a page when printing in duplex mode. The actual value used in the printer is the value of this object divided by 10. The unit is inch.')
scmPrtMarkerShortEdgeBindingMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerShortEdgeBindingMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerShortEdgeBindingMargin.setDescription('The value of this object gives the margin left for binding on the short edge of the paper when printing is done in short edge duplex mode. The actual value used in the printer is the value of this object divided by 10. The unit is inch.')
scmPrtMarkerLongEdgeBindingMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerLongEdgeBindingMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerLongEdgeBindingMargin.setDescription('The value of this object gives the margin left for binding on the long edge of the paper when printing is done in long edge duplex mode. The actual value used in the printer is the value of this object divided by 10. The unit is inch.')
scmPrtMarkerTonerSave = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerSave.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerSave.setDescription(' Echo mode option. Echo mode Off Echo mode On')
scmPrtMarkerTonerSaveOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerSaveOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerSaveOptions.setDescription(' available options of the model')
scmPrtMarkerTonerOutAction = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerOutAction.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerOutAction.setDescription(' The value of this object gives the action taken by the printer when the tonerLow condition occurs. If the value is continue(1), the printer continues to print in spite of the toner being low. If the value is stop(2), the printer stops printing when the toner is low.')
scmPrtMarkerTonerOutActionOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("continue", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerOutActionOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerOutActionOptions.setDescription(' The value of this object will be the bitwise OR of the supported values for tonerLowAction in this printer.')
scmPrtMarkerTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2), )
if mibBuilder.loadTexts: scmPrtMarkerTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTable.setDescription(' ')
scmPrtMarkerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtMarkerTonerIndex"))
if mibBuilder.loadTexts: scmPrtMarkerEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerEntry.setDescription(" Entries may exist in the table for each device index who's device type is printer")
scmPrtMarkerTonerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1, 1), Ordinal32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerIndex.setDescription('Index of the Toner number')
scmPrtMarkerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtMarkerResolution.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerResolution.setDescription(' The value of this object gives the current resolution used while printing. The value res300(1) means 300X300 dpi resolution. The value res600(2) means 600X600 dpi resolution. The value res1200(4) means 1200X1200 dpi resolution.')
scmPrtMarkerResolutionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("res300", 1), ("res600", 2), ("res1200", 4), ("res1200fast", 8), ("res1200best", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerResolutionOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerResolutionOptions.setDescription(' The value of this object will be the bitwise OR of all the supported values for resolution in this printer.')
scmPrtMarkerTonerColor = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerColor.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerColor.setDescription('color of Toner')
scmPrtMarkerTonerColorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerColorDescription.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerColorDescription.setDescription('Description of Toner')
scmPrtMarkerTonerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 17, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtMarkerTonerLevel.setStatus('current')
if mibBuilder.loadTexts: scmPrtMarkerTonerLevel.setDescription('Indication of Toner remainder')
scmPrtOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18))
scmPrtOperationSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1))
scmPrtOperationJobCancel = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cancelJob", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperationJobCancel.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationJobCancel.setDescription('Printer Operation Job Cancel Request')
scmPrtOperarionMenuClear = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperarionMenuClear.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperarionMenuClear.setDescription('When the value of this object is set to clearMenus(1), the values of all the printer properties in all the menus will be set to default values.')
scmPrtOperationMenuClearOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtOperationMenuClearOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationMenuClearOptions.setDescription('The value of this object will be the bitwise OR of the supported values for menuClear in this printer.')
scmPrtOperationFuserClean = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperationFuserClean.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationFuserClean.setDescription('When the value of this object is set to fuserClean(2),the printer fuser will be clear')
scmPrtOperationFuserCleanOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtOperationFuserCleanOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationFuserCleanOptions.setDescription('The value of this object will be the bitwise OR of the supported values for nfuserClean in this printer.')
scmPrtOperationOpcClean = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperationOpcClean.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationOpcClean.setDescription('When the value of this object is set to opcClean(2),the printer OPC will be clear')
scmPrtOperationOpcCleanOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtOperationOpcCleanOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationOpcCleanOptions.setDescription('The value of this object will be the bitwise OR of the supported values for nopcClean in this printer.')
scmPrtOperationTestPrtRequest = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperationTestPrtRequest.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationTestPrtRequest.setDescription(' request test printing 1: request ')
scmPrtOperationPrintFontRequest = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("pcl", 1), ("ps", 2), ("ks5843", 3), ("kssm", 4), ("ks5895", 5), ("epson", 6), ("opcClean", 7), ("fuserClean", 8), ("configpage", 9), ("demopage", 10), ("menuMap", 11), ("psFlashDirectory", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperationPrintFontRequest.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationPrintFontRequest.setDescription(' request test printing 1: pcl request 2: ps request 3: ks5843 request 4: kssm request 5: ks5895 request 6: epson requese, 7: opcClean request, 8: fuserClean request, 9: configpage request, 10: kssm request, 11: menuMap request, 12: psFlashDirectory requese, ')
scmPrtOperationPrintBlackOnly = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtOperationPrintBlackOnly.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationPrintBlackOnly.setDescription('Description.')
scmPrtOperationTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 2), )
if mibBuilder.loadTexts: scmPrtOperationTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationTable.setDescription(' ')
scmPrtOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 2, 1), ).setIndexNames((0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtOperationIndex"), (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: scmPrtOperationEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationEntry.setDescription(' ')
scmPrtOperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 18, 2, 1, 1), Ordinal32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtOperationIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtOperationIndex.setDescription(' ')
scmPrtConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19))
scmPrtConfigurationSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1))
scmPrtConfigurationPowerSave = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtConfigurationPowerSave.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationPowerSave.setDescription(' set power save mode 1: power save mode')
scmPrtConfigurationPowerSaveOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("pwSaveoff", 1), ("pwSave15", 2), ("pwSave30", 4), ("pwSave45", 8), ("pwSave60", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtConfigurationPowerSaveOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationPowerSaveOptions.setDescription(' available options of the model')
scmPrtConfigurationAutocont = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtConfigurationAutocont.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationAutocont.setDescription('It determines the printer action when the user prints a page without paper in the manual feed slot but the paper source is set to manual feed. If Auto Continue is ON the printer pick up the paper from the tray after few second. If it is OFF the printer wait forever until user insert paper into a manual feed slot.')
scmPrtConfigurationAutoCountOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtConfigurationAutoCountOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationAutoCountOptions.setDescription(' available options of the model')
scmPrtConfigurationJam2Recover = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtConfigurationJam2Recover.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationJam2Recover.setDescription('if it is on and occur JAM at Jam2 point printer will print this page again.')
scmPrtConfigurationJam2RecOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtConfigurationJam2RecOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationJam2RecOptions.setDescription(' available options of the model')
scmPrtConfigurationAltitudeAction = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtConfigurationAltitudeAction.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationAltitudeAction.setDescription("The value 'low(1)' will be used when the printer is in the low altitude location. The value 'high(2)' will be used when the printer is in the high altitude location. ")
scmPrtConfigurationAltitudeActionOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtConfigurationAltitudeActionOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationAltitudeActionOptions.setDescription('The value of this object will be the bitwise OR of the supported values for altitudeAction in this printer.')
scmPrtConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 2), )
if mibBuilder.loadTexts: scmPrtConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationTable.setDescription(' ')
scmPrtConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 2, 1), ).setIndexNames((0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtConfigurationIndex"), (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: scmPrtConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationEntry.setDescription(' ')
scmPrtConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 19, 2, 1, 1), Ordinal32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtConfigurationIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtConfigurationIndex.setDescription(' ')
scmPrtCount = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20))
scmPrtCountSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1))
scmPrtCountDrumImageCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountDrumImageCount.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountDrumImageCount.setDescription(' ')
scmPrtCountDrumImageCountReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountDrumImageCountReset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountDrumImageCountReset.setDescription(' ')
scmPrtCountTransferImageCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountTransferImageCount.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountTransferImageCount.setDescription(' ')
scmPrtCountTransferImageCountReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountTransferImageCountReset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountTransferImageCountReset.setDescription(' ')
scmPrtCountFuserImageCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountFuserImageCount.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountFuserImageCount.setDescription(' ')
scmPrtCountFuserImageCountReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountFuserImageCountReset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountFuserImageCountReset.setDescription(' ')
scmPrtCountTwoRollerCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountTwoRollerCount.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountTwoRollerCount.setDescription(' ')
scmPrtCountTwoRollerReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountTwoRollerReset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountTwoRollerReset.setDescription(' ')
scmPrtCountPickupMPCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountPickupMPCount.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountPickupMPCount.setDescription(' ')
scmPrtCountPickupMPReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountPickupMPReset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountPickupMPReset.setDescription(' ')
scmPrtCountPickupTray1Count = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountPickupTray1Count.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountPickupTray1Count.setDescription(' ')
scmPrtCountPickupTray1Reset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountPickupTray1Reset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountPickupTray1Reset.setDescription(' ')
scmPrtCountPickupTray2Count = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountPickupTray2Count.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountPickupTray2Count.setDescription(' ')
scmPrtCountPickupTray2Reset = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountPickupTray2Reset.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountPickupTray2Reset.setDescription(' ')
scmPrtCountTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2), )
if mibBuilder.loadTexts: scmPrtCountTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountTable.setDescription(' ')
scmPrtCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1), ).setIndexNames((0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtCountIndex"))
if mibBuilder.loadTexts: scmPrtCountEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountEntry.setDescription(' ')
scmPrtCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountIndex.setDescription(' ')
scmPrtCountDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("printer", 1), ("scanner", 2), ("copier", 3), ("fax", 4), ("mailbox", 5), ("finisher", 6), ("feeder", 7), ("sorter", 8), ("marker", 9), ("basicFunctionFinisher", 10), ("multiFunctionFinisher", 11), ("externalIFFinisher", 12), ("thirdPartyFinisher", 13), ("payment", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountDeviceType.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountDeviceType.setDescription('Description.')
scmPrtCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("copy", 3), ("faxIn", 4), ("faxout", 5), ("digitalSend", 6), ("digitalReceive", 7), ("scan", 8), ("print", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountType.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountType.setDescription('Description.')
scmPrtCountMediaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("unknown", 1), ("letter", 2), ("legal", 3), ("a4", 4), ("executive", 5), ("jisB5", 6), ("isoB5", 7), ("com10", 8), ("monarch", 9), ("dl", 10), ("c5", 11), ("postA6", 12), ("c6", 13), ("folio", 14), ("a5", 15), ("statement", 16), ("a6", 17), ("ledger", 18), ("a3", 19), ("jisB4", 20), ("jpost", 21), ("jpostd", 22), ("custom", 23), ("letterP", 24), ("a4P", 25), ("jisB5P", 26), ("a5P", 27), ("executiveP", 28), ("statementP", 29), ("a3Over", 30), ("b5Envelope", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountMediaSize.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountMediaSize.setDescription(' Paper size options that are available in this model. Some printer such like ML6060 or Modena have a 4 bytes data length. So, to distinguish these models we have to check model id or version. ')
scmPrtCountColorant = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mono", 1), ("color", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountColorant.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountColorant.setDescription('Description.')
scmPrtCountDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simplex", 1), ("duplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountDuplex.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountDuplex.setDescription('Description.')
scmPrtCountResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low300dpi", 1), ("normal600dpi", 2), ("high1200dpi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtCountResolution.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountResolution.setDescription('Description.')
scmPrtCountUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 11, 16, 17))).clone(namedValues=NamedValues(("tenThousandthsOfInches", 3), ("micrometers", 4), ("characters", 5), ("lines", 6), ("impressions", 7), ("sheets", 8), ("dotRow", 9), ("hours", 11), ("feet", 16), ("meters", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountUnit.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountUnit.setDescription('Description.')
scmPrtCountValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 20, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtCountValue.setStatus('current')
if mibBuilder.loadTexts: scmPrtCountValue.setDescription('Description.')
scmPrtSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21))
scmPrtSerialSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 1))
scmPrtSerialTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2), )
if mibBuilder.loadTexts: scmPrtSerialTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialTable.setDescription(' ')
scmPrtSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2, 1), ).setIndexNames((0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtSerialIndex"))
if mibBuilder.loadTexts: scmPrtSerialEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialEntry.setDescription(' ')
scmPrtSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2, 1, 1), Ordinal32())
if mibBuilder.loadTexts: scmPrtSerialIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialIndex.setDescription(' ')
scmPrtSerialNbaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtSerialNbaudRate.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialNbaudRate.setDescription('the speed when user use a serial port')
scmPrtSerialBrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtSerialBrOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialBrOptions.setDescription('available options of printer ')
scmPrtSerialBobuxon = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtSerialBobuxon.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialBobuxon.setDescription(' ')
scmPrtSerialBobuxonOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 21, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtSerialBobuxonOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtSerialBobuxonOptions.setDescription('The value of this object will be the bitwise OR of the supported values for robuxon in this printer.')
scmPrtPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22))
scmPrtPCLSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1))
scmPrtPCLFont = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 53))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLFont.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLFont.setDescription(' ')
scmPrtPCLSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLSymbolSet.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLSymbolSet.setDescription(' ')
scmPrtPCLFormLine = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLFormLine.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLFormLine.setDescription(' ')
scmPrtPCLPitch = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 399))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLPitch.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLPitch.setDescription(' ')
scmPrtPCLPointSize = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 399))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLPointSize.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLPointSize.setDescription(' ')
scmPrtPCLCourier = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLCourier.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLCourier.setDescription(' ')
scmPrtPCLCourierOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("dark", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtPCLCourierOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLCourierOptions.setDescription(' ')
scmPrtPCLAppendCR = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLAppendCR.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLAppendCR.setDescription(' ')
scmPrtPCLAppendCROptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lf", 1), ("lfCR", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtPCLAppendCROptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLAppendCROptions.setDescription(' ')
scmPrtPCLWideA4 = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLWideA4.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLWideA4.setDescription(' ')
scmPrtPCLWideA4Options = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtPCLWideA4Options.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLWideA4Options.setDescription(' ')
scmPrtPCLTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLTopMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLTopMargin.setDescription(' Margine between top and first line of this page ,actuall value of printing is a value divided by 10. basic unit is inch. If Orientation is portrait or reverse portrait, then the range of topMargine is 0 to 99 and if Orientation is landscape or reverse landscape, then range is 0 to 170')
scmPrtPCLLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtPCLLeftMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLLeftMargin.setDescription(' Left margine of printed page, actual value is a value divided by 10. Basic unit is inch. If Orentation is landscape or reverse landscape, the range is 0 to 99 and if the Orientation is portrait or reverse portrait, the range is 0 to 170.')
scmPrtPCLTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 2), )
if mibBuilder.loadTexts: scmPrtPCLTable.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLTable.setDescription(' ')
scmPrtPCLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 2, 1), ).setIndexNames((0, "SAMSUNG-PRINTER-EXT-MIB", "scmPrtPCLIndex"))
if mibBuilder.loadTexts: scmPrtPCLEntry.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLEntry.setDescription(' ')
scmPrtPCLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 22, 2, 1, 1), Ordinal32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtPCLIndex.setStatus('current')
if mibBuilder.loadTexts: scmPrtPCLIndex.setDescription(' ')
scmPrtKS5843 = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23))
scmPrtKS5843Simple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1))
scmPrtKS5843Font = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843Font.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Font.setDescription(' ')
scmPrtKS5843FontOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("myoungjo", 1), ("gothic", 2), ("gungseo", 4), ("gullim", 8), ("sammool", 16), ("yetche", 32), ("post", 64), ("newgraph", 128), ("sunmyun", 256), ("pilgi", 512), ("headline", 1024), ("ocrB1", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKS5843FontOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843FontOptions.setDescription(' ')
scmPrtKS5843Code = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843Code.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Code.setDescription(' ')
scmPrtKS5843CodeOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wansung", 1), ("johap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKS5843CodeOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843CodeOptions.setDescription(' ')
scmPrtKS5843cpi = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843cpi.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843cpi.setDescription(' ')
scmPrtKS5843cpiOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("kscpi10", 1), ("kscpi12", 2), ("kscpi133", 4), ("kscpi15", 8), ("kscpi20", 16), ("kscpi24", 32), ("kscpi267", 64), ("kscpi30", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKS5843cpiOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843cpiOptions.setDescription(' ')
scmPrtKS5843Lines = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843Lines.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Lines.setDescription(' ')
scmPrtKS5843Zoom = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843Zoom.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Zoom.setDescription(' ')
scmPrtKS5843AutoWrap = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843AutoWrap.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843AutoWrap.setDescription(' ')
scmPrtKS5843AutoWrapOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKS5843AutoWrapOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843AutoWrapOptions.setDescription(' ')
scmPrtKS5843Topmargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843Topmargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Topmargin.setDescription(' ')
scmPrtKS5843Sitemode = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 23, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKS5843Sitemode.setStatus('current')
if mibBuilder.loadTexts: scmPrtKS5843Sitemode.setDescription('Each site special Mode except ksc5843 standard')
scmPrtKSSM = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24))
scmPrtKSSMSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1))
scmPrtKSSMFont = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMFont.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMFont.setDescription(' ')
scmPrtKSSMFontOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("myoungjo", 1), ("gothic", 2), ("gungseo", 4), ("gullim", 8), ("sammool", 16), ("yetche", 32), ("post", 64), ("newgraph", 128), ("sunmyun", 256), ("pilgi", 512), ("headline", 1024), ("ocrB1", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKSSMFontOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMFontOptions.setDescription(' ')
scmPrtKSSMCode = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMCode.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMCode.setDescription(' ')
scmPrtKSSMCodeOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wansung", 1), ("johap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKSSMCodeOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMCodeOptions.setDescription(' ')
scmPrtKSSMCPI = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMCPI.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMCPI.setDescription(' ')
scmPrtKSSMCPIOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("kscpi10", 1), ("kscpi12", 2), ("kscpi133", 4), ("kscpi15", 8), ("kscpi20", 16), ("kscpi24", 32), ("kscpi267", 64), ("kscpi30", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKSSMCPIOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMCPIOptions.setDescription(' ')
scmPrtKSSMLines = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMLines.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMLines.setDescription(' ')
scmPrtKSSMZoom = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMZoom.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMZoom.setDescription(' ')
scmPrtKSSMAutoWrap = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMAutoWrap.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMAutoWrap.setDescription(' ')
scmPrtKSSMAutoWrapOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtKSSMAutoWrapOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMAutoWrapOptions.setDescription(' ')
scmPrtKSSMTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMTopMargin.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMTopMargin.setDescription(' ')
scmPrtKSSMSiteMode = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtKSSMSiteMode.setStatus('current')
if mibBuilder.loadTexts: scmPrtKSSMSiteMode.setDescription(' ')
scmPrtIPP = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25))
scmPrtIPPSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1))
scmPrtIPPColorSupported = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPColorSupported.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPColorSupported.setDescription('The value of this object indicates whether the printer supports color printing.')
scmPrtIPPJobKOctetsSupportedLBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobKOctetsSupportedLBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobKOctetsSupportedLBound.setDescription('The value of this object gives the lower bound of the size in units of 1024 octets for jobs accepted by the printer.')
scmPrtIPPJobKOctetsSupportedUBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobKOctetsSupportedUBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobKOctetsSupportedUBound.setDescription('The value of this object gives the upper bound of the size in units of 1024 octets for jobs accepted by the printer.')
scmPrtIPPJobImpressionsSupportedLBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobImpressionsSupportedLBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobImpressionsSupportedLBound.setDescription('The value of this object gives the lower bound of the number of print images for a job.')
scmPrtIPPJobImpressionsSupportedUBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobImpressionsSupportedUBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobImpressionsSupportedUBound.setDescription('The value of this object gives the upper bound of the number of print images for a job.')
scmPrtIPPJobMediaSheetsSupportedLBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobMediaSheetsSupportedLBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobMediaSheetsSupportedLBound.setDescription('The value of this object gives the lower bound of the number of pages printed for a job.')
scmPrtIPPJobMediaSheetsSupportedUBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobMediaSheetsSupportedUBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobMediaSheetsSupportedUBound.setDescription('The value of this object gives the upper bound of the number of pages printed for a job.')
scmPrtIPPJobSheets = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtIPPJobSheets.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobSheets.setDescription('The value of this object specifies the type of job start/end sheets printed with every IPP job. If the value is standard(1), the printer specific standard job start/end sheets will be printed for each job.')
scmPrtIPPCollatedCopiesLBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPCollatedCopiesLBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPCollatedCopiesLBound.setDescription('The value of this object gives the lower bound of the number of collated copies supported in this printer.')
scmPrtIPPCollatedCopiesUBound = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPCollatedCopiesUBound.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPCollatedCopiesUBound.setDescription('The value of this object gives the upper bound of the number of collated copies supported in this printer.')
scmPrtIPPCollatedCopies = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtIPPCollatedCopies.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPCollatedCopies.setDescription('The value of this object gives the number of collated copies printed for the each job.')
scmPrtIPPFinishingsSupported = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPFinishingsSupported.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPFinishingsSupported.setDescription('The value of this object gives the type of finishings supported in the printer. If bit 1 is set, stapling is supported. If bit 2 is set, punching is supported. If bit 3 is set, covering of printed document is supported. If bit 4 is set, binding is supported. If bit 0 is set, the option of no finishings is supported.')
scmPrtIPPFinishings = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtIPPFinishings.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPFinishings.setDescription('The value of this object gives the set of finishings applied for each job. If bit 0 is set, no finishings are applied. If bit 1 is set, stapling is done for each job. If bit 2 is set, punching is done for each job. If bit 3 is set, the printed document will be covered. If bit 4 is set, binding will be done for each job.')
scmPrtIPPPageRangesSupported = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtIPPPageRangesSupported.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPPageRangesSupported.setDescription('The value of this object indicates whether printing only a range of pages for IPP jobs is supported. If the value is on(1), printing only specified page ranges of the given IPP job is supported.')
scmPrtIPPNumberUp = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtIPPNumberUp.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPNumberUp.setDescription('The value of this object indicates the number of print images imposed on one side of a page.')
scmPrtIPPNumberUpOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("numberUp1", 1), ("numberUp2", 2), ("numberUp4", 4), ("numberUp6", 8), ("numberUp9", 16), ("numberUp16", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPNumberUpOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPNumberUpOptions.setDescription('The value of this object will be the bitwise OR of the supported values for numberUp in this printer.')
scmPrtIPPPrintQuality = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtIPPPrintQuality.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPPrintQuality.setDescription('The value of this object indicates the print quality that the printer uses for a print job. The value draft(1) means lowest quality available on the printer. Tha value normal(2) means normal or intermediate quality on the printer. The value high(4) means highest quality available on the printer.')
scmPrtIPPPrintQualityOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("draft", 1), ("normal", 2), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPPrintQualityOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPPrintQualityOptions.setDescription('The value of this object will be the bitwise OR of the supported values for printQuality in this printer.')
scmPrtIPPJobKOctetsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobKOctetsProcessed.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobKOctetsProcessed.setDescription('The value of this object gives the number of units of 1024 octets printed for the current job.')
scmPrtIPPJobImpressionsCompleted = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobImpressionsCompleted.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobImpressionsCompleted.setDescription('The value of this object gives the number of print images printed for the current job.')
scmPrtIPPJobMediaSheetsCompleted = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 25, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtIPPJobMediaSheetsCompleted.setStatus('current')
if mibBuilder.loadTexts: scmPrtIPPJobMediaSheetsCompleted.setDescription('The value of this object gives the number of pages printed for the current job.')
scmPrtAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 26))
scmPrtAlertSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 26, 1))
scmPrtAlertAlarmShortage = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtAlertAlarmShortage.setStatus('current')
if mibBuilder.loadTexts: scmPrtAlertAlarmShortage.setDescription('Printer Alert Alarm Shortage')
scmPrtAlertAlarmShortageOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPrtAlertAlarmShortageOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtAlertAlarmShortageOptions.setDescription('Printer Alert Shortage Oprions')
scmPrtConsoleDisplayBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 27))
scmPrtConsoleDisplayBufferSimple = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 27, 1))
scmPrtConsoleDisplayBufferLcdLangType = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("english", 1), ("german", 2), ("french", 4), ("italian", 8), ("spanish", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtConsoleDisplayBufferLcdLangType.setStatus('current')
if mibBuilder.loadTexts: scmPrtConsoleDisplayBufferLcdLangType.setDescription('Printer Console (LCD) Display String Language Type')
scmPrtConsoleDisplayBufferLcdLangTypeOptions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 55, 27, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmPrtConsoleDisplayBufferLcdLangTypeOptions.setStatus('current')
if mibBuilder.loadTexts: scmPrtConsoleDisplayBufferLcdLangTypeOptions.setDescription('Printer Console (LCD) Display String Language Type Option')
mibBuilder.exportSymbols("SAMSUNG-PRINTER-EXT-MIB", scmPrtInputCustDimXFeedDirDecl=scmPrtInputCustDimXFeedDirDecl, scmPrtBaseGroup=scmPrtBaseGroup, scmPrtGeneralPrnSCFFWVer=scmPrtGeneralPrnSCFFWVer, scmPrtOperationJobCancel=scmPrtOperationJobCancel, scmPrtMarkerduplexLeftMargin=scmPrtMarkerduplexLeftMargin, scmPrtOperationOpcCleanOptions=scmPrtOperationOpcCleanOptions, scmPrtGeneral=scmPrtGeneral, scmPrtPCLLeftMargin=scmPrtPCLLeftMargin, scmPrtIPPJobMediaSheetsSupportedLBound=scmPrtIPPJobMediaSheetsSupportedLBound, scmPrtChannelEntry=scmPrtChannelEntry, scmPrtAlertSimple=scmPrtAlertSimple, scmPrtConsoleDisplayBuffer=scmPrtConsoleDisplayBuffer, scmPrtInputSimple=scmPrtInputSimple, scmPrtMarkerduplexTopMargin=scmPrtMarkerduplexTopMargin, scmPrtCountPickupMPCount=scmPrtCountPickupMPCount, scmPrtOutput=scmPrtOutput, scmPrtConsoleDisplayBufferSimple=scmPrtConsoleDisplayBufferSimple, scmPrtKSSMFont=scmPrtKSSMFont, scmPrtOutputGroup=scmPrtOutputGroup, scmPrtChannel=scmPrtChannel, scmPrtInterpLineTerm=scmPrtInterpLineTerm, scmPrtConfigurationJam2RecOptions=scmPrtConfigurationJam2RecOptions, scmPrtKS5843FontOptions=scmPrtKS5843FontOptions, scmPrtBaseEntry=scmPrtBaseEntry, scmPrtPCLPitch=scmPrtPCLPitch, scmPrtMarkerResolutionOptions=scmPrtMarkerResolutionOptions, scmPrtConfigurationSimple=scmPrtConfigurationSimple, scmPrtConfigurationPowerSave=scmPrtConfigurationPowerSave, scmPrtPCLTable=scmPrtPCLTable, scmPrtMarkerTonerIndex=scmPrtMarkerTonerIndex, scmPrtKSSMGroup=scmPrtKSSMGroup, scmPrtOperationTestPrtRequest=scmPrtOperationTestPrtRequest, scmPrtConfigurationPowerSaveOptions=scmPrtConfigurationPowerSaveOptions, scmPrtMarkerGroup=scmPrtMarkerGroup, scmPrtChannelGroup=scmPrtChannelGroup, scmPrtMIBGroups=scmPrtMIBGroups, scmPrtChannelSimple=scmPrtChannelSimple, scmPrtMarkerEntry=scmPrtMarkerEntry, scmPrtConfigurationEntry=scmPrtConfigurationEntry, scmPrtKS5843Lines=scmPrtKS5843Lines, scmPrtOutputOffsetStackingType=scmPrtOutputOffsetStackingType, scmPrtInputTrayNumOptions=scmPrtInputTrayNumOptions, scmPrtMediaPath=scmPrtMediaPath, scmPrtGeneralPrnModelName=scmPrtGeneralPrnModelName, scmPrtInputTraySwitchOptions=scmPrtInputTraySwitchOptions, scmPrtKS5843Code=scmPrtKS5843Code, scmPrtKS5843cpi=scmPrtKS5843cpi, scmPrtAlert=scmPrtAlert, scmPrtMIBCompliance=scmPrtMIBCompliance, scmPrtSerialSimple=scmPrtSerialSimple, scmPrtInterpOrientation=scmPrtInterpOrientation, scmPrtGeneralTable=scmPrtGeneralTable, scmPrtPCLTopMargin=scmPrtPCLTopMargin, scmPrtKSSMTopMargin=scmPrtKSSMTopMargin, scmPrtOperationFuserClean=scmPrtOperationFuserClean, scmPrtConsoleDisplayBufferLcdLangTypeOptions=scmPrtConsoleDisplayBufferLcdLangTypeOptions, scmPrtInputNextPrtInputIndex=scmPrtInputNextPrtInputIndex, scmPrtGeneralPrnManufacture=scmPrtGeneralPrnManufacture, scmPrtInputEntry=scmPrtInputEntry, scmPrtMarkerTonerColor=scmPrtMarkerTonerColor, scmPrtKSSMFontOptions=scmPrtKSSMFontOptions, scmPrtCountFuserImageCountReset=scmPrtCountFuserImageCountReset, scmPrtIPPJobMediaSheetsCompleted=scmPrtIPPJobMediaSheetsCompleted, scmPrtMarkerSmetMode=scmPrtMarkerSmetMode, scmPrtKS5843Zoom=scmPrtKS5843Zoom, scmPrtGeneralGroup=scmPrtGeneralGroup, scmPrtConfigurationJam2Recover=scmPrtConfigurationJam2Recover, scmPrtInputPaperTypeOptions=scmPrtInputPaperTypeOptions, scmPrtBase=scmPrtBase, scmPrtBaseTable=scmPrtBaseTable, scmPrtInputTraySwitch=scmPrtInputTraySwitch, scmPrtMarkerSimple=scmPrtMarkerSimple, scmPrtInterpOrientationOptions=scmPrtInterpOrientationOptions, scmPrtMarkerDensity=scmPrtMarkerDensity, scmPrtConfigurationIndex=scmPrtConfigurationIndex, scmPrtIPPJobSheets=scmPrtIPPJobSheets, scmPrtIPPGroup=scmPrtIPPGroup, scmPrtCountPickupTray1Count=scmPrtCountPickupTray1Count, scmPrtMIBConformance=scmPrtMIBConformance, scmPrtOperationPrintBlackOnly=scmPrtOperationPrintBlackOnly, scmPrtCountIndex=scmPrtCountIndex, scmPrtCountColorant=scmPrtCountColorant, scmPrtMarkerTonerLevel=scmPrtMarkerTonerLevel, scmPrtInputPaperType=scmPrtInputPaperType, scmPrtInterpreterGroup=scmPrtInterpreterGroup, scmPrtPCLFont=scmPrtPCLFont, scmPrtGeneralRowStatus=scmPrtGeneralRowStatus, scmPrtOperationOpcClean=scmPrtOperationOpcClean, scmPrtMarkerMarginUnit=scmPrtMarkerMarginUnit, scmPrtGeneralPrnEngFWVer=scmPrtGeneralPrnEngFWVer, scmPrtInputTrayNum=scmPrtInputTrayNum, scmPrtInterpRowStatus=scmPrtInterpRowStatus, scmPrtCount=scmPrtCount, scmPrtPCL=scmPrtPCL, scmPrtCountDrumImageCountReset=scmPrtCountDrumImageCountReset, scmPrtGeneralPrncolorPPM=scmPrtGeneralPrncolorPPM, scmPrtMarkerTonerOutActionOptions=scmPrtMarkerTonerOutActionOptions, scmPrtKS5843cpiOptions=scmPrtKS5843cpiOptions, scmPrtIPPJobImpressionsSupportedUBound=scmPrtIPPJobImpressionsSupportedUBound, scmPrtIPPJobMediaSheetsSupportedUBound=scmPrtIPPJobMediaSheetsSupportedUBound, scmPrtCountPickupTray1Reset=scmPrtCountPickupTray1Reset, scmPrtIPPJobKOctetsSupportedLBound=scmPrtIPPJobKOctetsSupportedLBound, scmPrtIPPCollatedCopiesUBound=scmPrtIPPCollatedCopiesUBound, scmPrtPCLGroup=scmPrtPCLGroup, scmPrtInputLockTray=scmPrtInputLockTray, scmPrtInterpreterEmulationOptions=scmPrtInterpreterEmulationOptions, scmPrtPCLSymbolSet=scmPrtPCLSymbolSet, scmPrtConfiguratioinGroup=scmPrtConfiguratioinGroup, scmPrtOperationFuserCleanOptions=scmPrtOperationFuserCleanOptions, scmPrtKS5843=scmPrtKS5843, scmPrtInterpreterSimple=scmPrtInterpreterSimple, scmPrtGeneralPrnKS5843Ver=scmPrtGeneralPrnKS5843Ver, scmPrtMarkerTonerSaveOptions=scmPrtMarkerTonerSaveOptions, scmPrtOperationMenuClearOptions=scmPrtOperationMenuClearOptions, scmPrtConsoleDisplayBufferGroup=scmPrtConsoleDisplayBufferGroup, scmPrtMarkerDensityOptions=scmPrtMarkerDensityOptions, scmPrtCountMediaSize=scmPrtCountMediaSize, scmPrtCountTwoRollerCount=scmPrtCountTwoRollerCount, scmPrtMarkerSrt=scmPrtMarkerSrt, scmPrtKSSMLines=scmPrtKSSMLines, scmPrtGeneralSimple=scmPrtGeneralSimple, scmPrtIPPNumberUp=scmPrtIPPNumberUp, scmPrtOperarionMenuClear=scmPrtOperarionMenuClear, scmPrtKS5843Sitemode=scmPrtKS5843Sitemode, scmPrtSerialTable=scmPrtSerialTable, scmPrtMarkerTonerColorDescription=scmPrtMarkerTonerColorDescription, scmPrtGeneralPrnMainSystemVer=scmPrtGeneralPrnMainSystemVer, scmPrtKSSMAutoWrap=scmPrtKSSMAutoWrap, scmPrtIPPCollatedCopiesLBound=scmPrtIPPCollatedCopiesLBound, scmPrtIPPJobImpressionsSupportedLBound=scmPrtIPPJobImpressionsSupportedLBound, scmPrtIPPColorSupported=scmPrtIPPColorSupported, scmPrtIPPPrintQuality=scmPrtIPPPrintQuality, scmPrtInterpreter=scmPrtInterpreter, scmPrtInputCustDimFeedDirDecl=scmPrtInputCustDimFeedDirDecl, scmPrtKS5843Font=scmPrtKS5843Font, scmPrtGeneralPrnOSFWVer=scmPrtGeneralPrnOSFWVer, scmPrtGeneralPrnPSFWVer=scmPrtGeneralPrnPSFWVer, scmPrtInputTrayPriority=scmPrtInputTrayPriority, scmPrtGeneralPrnSPLVer=scmPrtGeneralPrnSPLVer, scmPrtCountGroup=scmPrtCountGroup, scmPrtMarkerTonerSave=scmPrtMarkerTonerSave, scmPrtOperationTable=scmPrtOperationTable, scmPrtCountFuserImageCount=scmPrtCountFuserImageCount, scmPrtCountTransferImageCountReset=scmPrtCountTransferImageCountReset, scmPrtCountPickupMPReset=scmPrtCountPickupMPReset, scmPrtGeneralPrnEpsonVer=scmPrtGeneralPrnEpsonVer, scmPrtKSSMCodeOptions=scmPrtKSSMCodeOptions, scmPrtInputTable=scmPrtInputTable, scmPrtCountDrumImageCount=scmPrtCountDrumImageCount, scmPrtKSSMZoom=scmPrtKSSMZoom, scmPrtMarkerTonerOutAction=scmPrtMarkerTonerOutAction, scmPrtMarkerShortEdgeBindingMargin=scmPrtMarkerShortEdgeBindingMargin, scmPrtIPPSimple=scmPrtIPPSimple, scmPrtIPPFinishings=scmPrtIPPFinishings, scmPrtMarkerTable=scmPrtMarkerTable, scmPrtOutputNextIndex=scmPrtOutputNextIndex, scmPrtConfigurationTable=scmPrtConfigurationTable, scmPrtSerialIndex=scmPrtSerialIndex, scmPrtKSSMCPI=scmPrtKSSMCPI, scmPrtInputPaperSizeOptions=scmPrtInputPaperSizeOptions, scmPrtMarkerSmetModeOptions=scmPrtMarkerSmetModeOptions, scmPrtIPPJobKOctetsProcessed=scmPrtIPPJobKOctetsProcessed, scmPrtOutputFinishier=scmPrtOutputFinishier, scmPrtIPPJobImpressionsCompleted=scmPrtIPPJobImpressionsCompleted, scmPrtConsoleDisplayBufferLcdLangType=scmPrtConsoleDisplayBufferLcdLangType, scmPrtGeneralPrnPCL5eVer=scmPrtGeneralPrnPCL5eVer, scmPrtOperation=scmPrtOperation, scmPrtPCLFormLine=scmPrtPCLFormLine, PYSNMP_MODULE_ID=scmPrintMIB, scmPrtGeneralPrnPCL5CeVer=scmPrtGeneralPrnPCL5CeVer, scmPrtMarker=scmPrtMarker, scmPrtPCLCourier=scmPrtPCLCourier, scmPrtPCLAppendCR=scmPrtPCLAppendCR, scmPrtKSSMAutoWrapOptions=scmPrtKSSMAutoWrapOptions, scmPrtInputUseCustomSize=scmPrtInputUseCustomSize, scmPrtOperationPrintFontRequest=scmPrtOperationPrintFontRequest, scmPrtPCLSimple=scmPrtPCLSimple, scmPrtOperationSimple=scmPrtOperationSimple, scmPrtConfigurationAutoCountOptions=scmPrtConfigurationAutoCountOptions, scmPrtGeneralEntry=scmPrtGeneralEntry, scmPrtConfigurationAutocont=scmPrtConfigurationAutocont, scmPrtInterpJobCopiesDefault=scmPrtInterpJobCopiesDefault, scmPrtCountUnit=scmPrtCountUnit, scmPrtConfigurationAltitudeAction=scmPrtConfigurationAltitudeAction, scmPrtInterpreterCopyNum=scmPrtInterpreterCopyNum, scmPrtOutputEntry=scmPrtOutputEntry, scmPrtCountSimple=scmPrtCountSimple, scmPrtSerialBrOptions=scmPrtSerialBrOptions, scmPrtPCLEntry=scmPrtPCLEntry, scmPrtPCLCourierOptions=scmPrtPCLCourierOptions, scmPrtKS5843CodeOptions=scmPrtKS5843CodeOptions, scmPrtCountPickupTray2Count=scmPrtCountPickupTray2Count, scmPrtKSSM=scmPrtKSSM, scmPrtGeneralPrnModelVer=scmPrtGeneralPrnModelVer, scmPrtMarkerLongEdgeBindingMargin=scmPrtMarkerLongEdgeBindingMargin, scmPrtGeneralPrnVendor=scmPrtGeneralPrnVendor, scmPrtInterpreterEmulation=scmPrtInterpreterEmulation, scmPrtSerialBobuxonOptions=scmPrtSerialBobuxonOptions, scmPrtSerialEntry=scmPrtSerialEntry, scmPrtIPPPageRangesSupported=scmPrtIPPPageRangesSupported, scmPrtAlertAlarmShortage=scmPrtAlertAlarmShortage, scmPrtKS5843Group=scmPrtKS5843Group, scmPrtKSSMSimple=scmPrtKSSMSimple, scmPrtIPP=scmPrtIPP, scmPrtIPPJobKOctetsSupportedUBound=scmPrtIPPJobKOctetsSupportedUBound, scmPrtCountEntry=scmPrtCountEntry, scmPrtKSSMCPIOptions=scmPrtKSSMCPIOptions, scmPrtMarkerSrtOptions=scmPrtMarkerSrtOptions, scmPrtCountDuplex=scmPrtCountDuplex, scmPrtOutputTrayTimeoutSupport=scmPrtOutputTrayTimeoutSupport, scmPrtBaseIndex=scmPrtBaseIndex, scmPrtGeneralPrnScanFWVer=scmPrtGeneralPrnScanFWVer, scmPrtSerialBobuxon=scmPrtSerialBobuxon, scmPrtPCLPointSize=scmPrtPCLPointSize, scmPrtCountTable=scmPrtCountTable, scmPrtBaseRowStatus=scmPrtBaseRowStatus, scmPrtKSSMSiteMode=scmPrtKSSMSiteMode, scmPrtMarkerResolution=scmPrtMarkerResolution, scmPrtCountType=scmPrtCountType, scmPrtSerialNbaudRate=scmPrtSerialNbaudRate, scmPrtOutputFinishierOptions=scmPrtOutputFinishierOptions, scmPrtChannelRowStatus=scmPrtChannelRowStatus, scmPrtConfigurationAltitudeActionOptions=scmPrtConfigurationAltitudeActionOptions, scmPrtPCLWideA4Options=scmPrtPCLWideA4Options, scmPrtChannelTable=scmPrtChannelTable, scmPrtInterpreterEntry=scmPrtInterpreterEntry, scmPrtKS5843Topmargin=scmPrtKS5843Topmargin, scmPrtIPPNumberUpOptions=scmPrtIPPNumberUpOptions, scmPrtPCLIndex=scmPrtPCLIndex, scmPrtInput=scmPrtInput, scmPrtInputGroup=scmPrtInputGroup, scmPrtInterpreterTable=scmPrtInterpreterTable, scmPrtCountTransferImageCount=scmPrtCountTransferImageCount, scmPrtPCLAppendCROptions=scmPrtPCLAppendCROptions, scmPrtKS5843AutoWrapOptions=scmPrtKS5843AutoWrapOptions, scmPrtGeneralPrnModelDescr=scmPrtGeneralPrnModelDescr, scmPrtOperationEntry=scmPrtOperationEntry, scmPrtOperationIndex=scmPrtOperationIndex, scmPrtInputRowStatus=scmPrtInputRowStatus, scmPrtOutputTable=scmPrtOutputTable, scmPrtOutputPassword=scmPrtOutputPassword, scmPrtConfiguration=scmPrtConfiguration, scmPrtOutputTrayTimeout=scmPrtOutputTrayTimeout, scmPrintMIB=scmPrintMIB, scmPrtSerial=scmPrtSerial, scmPrtKS5843AutoWrap=scmPrtKS5843AutoWrap, scmPrtAlertGroup=scmPrtAlertGroup, scmPrtInputLockTrayOptions=scmPrtInputLockTrayOptions, scmPrtCountPickupTray2Reset=scmPrtCountPickupTray2Reset, scmPrtSerialGroup=scmPrtSerialGroup, scmPrtKS5843Simple=scmPrtKS5843Simple, scmPrtAlertAlarmShortageOptions=scmPrtAlertAlarmShortageOptions, scmPrtOperationGroup=scmPrtOperationGroup, scmPrtIPPFinishingsSupported=scmPrtIPPFinishingsSupported)
mibBuilder.exportSymbols("SAMSUNG-PRINTER-EXT-MIB", scmPrtGeneralPrnSerialNo=scmPrtGeneralPrnSerialNo, scmPrtKSSMCode=scmPrtKSSMCode, scmPrtInputPaperSize=scmPrtInputPaperSize, scmPrtGeneralPrnKSSMVer=scmPrtGeneralPrnKSSMVer, scmPrtPCLWideA4=scmPrtPCLWideA4, scmPrtIPPPrintQualityOptions=scmPrtIPPPrintQualityOptions, scmPrtCountDeviceType=scmPrtCountDeviceType, scmPrtCountResolution=scmPrtCountResolution, scmPrtChannelEOJTimeout=scmPrtChannelEOJTimeout, scmPrtOutputRowStatus=scmPrtOutputRowStatus, scmPrtCountValue=scmPrtCountValue, scmPrtGeneralPrnKS5895Ver=scmPrtGeneralPrnKS5895Ver, scmPrtGeneralPrnPCLFWVer=scmPrtGeneralPrnPCLFWVer, scmPrtIPPCollatedCopies=scmPrtIPPCollatedCopies, scmPrtInterpProcessBarcodes=scmPrtInterpProcessBarcodes, scmPrtCountTwoRollerReset=scmPrtCountTwoRollerReset)
