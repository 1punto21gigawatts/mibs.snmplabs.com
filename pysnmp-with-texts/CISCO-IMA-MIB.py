#
# PySNMP MIB module CISCO-IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IMA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
MilliSeconds, imaGroupIndex, imaGroupEntry, imaLinkIfIndex, imaLinkEntry = mibBuilder.importSymbols("IMA-MIB", "MilliSeconds", "imaGroupIndex", "imaGroupEntry", "imaLinkIfIndex", "imaLinkEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, Integer32, Bits, ModuleIdentity, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, iso, MibIdentifier, IpAddress, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "Bits", "ModuleIdentity", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "iso", "MibIdentifier", "IpAddress", "NotificationType", "Gauge32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoImaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 235))
ciscoImaMIB.setRevisions(('2003-03-26 00:00', '2002-05-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoImaMIB.setRevisionsDescriptions(('(1) Added a new cimaFeatureTable indexed by entPhysicalIndex (2) Added following objects to cimaGroupTable: cimaGrpVerFallbackEnable cimaGrpAutoRestartMode cimaGrpRxImaIdExpected cimaGrpAutoRestartSyncState (3) Deprecated following objects: cimaGrpAlarmType cimaLinkAlarmType.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoImaMIB.setLastUpdated('200303260000Z')
if mibBuilder.loadTexts: ciscoImaMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoImaMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoImaMIB.setDescription('The MIB module describes Cisco IMA objects. This is an extension to the standard of ATM Forum IMA version 1.1, AF-PHY-0086.001 Spec. atmfImaMib. Acronyms and terms: ATM Asynchronous Transfer Mode CID Cell Identification (ICP CID) CRC Cyclic Redundancy Check DCB Data Compensation Buffer FE Far-End GSM Group State Machine HEC Header Error Check ICP IMA Control Protocol IDCR IMA Data Cell Rate IMA Inverse Multiplexing for ATM IMA ID IMA Group Identifier LID Link Identifier LIF Link Loss of IMA Frame defect LODS Link Out of Delay Synchronization defect LSI Link Stuff Indication M IMA frame size N Number of links configured in an IMA group NE Near-End OAM Operations And Maintenance SNMP Simple Network Management Protocol ')
ciscoImaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 235, 1))
class CiscoImaGrpAlarmType(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 12.2.3 on page 79'
    description = 'An identification of the event that causes the generation of a Cisco IMA group notification. The enums is a subset of enums from ImaAlarmType TEXTUAL-CONVENTION of IMA-MIB. CiscoImaGrpAlarmType is used specifically for IMA group alarms.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("cimaAlarmGroupStartupFe", 1), ("cimaAlarmGroupCfgAbort", 2), ("cimaAlarmGroupCfgAbortFe", 3), ("cimaAlarmGroupInsuffLinks", 4), ("cimaAlarmGroupInsuffLinksFe", 5), ("cimaAlarmGroupBlockedFe", 6), ("cimaAlarmGroupTimingSynch", 7))

class CiscoImaLinkAlarmType(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 12.2.3 on page 79'
    description = 'An identification of the event that causes the generation of a Cisco IMA link notification. The enums is a subset of enums from ImaAlarmType TEXTUAL-CONVENTION of IMA-MIB. CiscoImaLinkAlarmType is used specifically for IMA link alarms.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("cimaAlarmLinkLif", 1), ("cimaAlarmLinkLods", 2), ("cimaAlarmLinkRfi", 3), ("cimaAlarmLinkTxMisConnect", 4), ("cimaAlarmLinkRxMisConnect", 5), ("cimaAlarmLinkTxFault", 6), ("cimaAlarmLinkRxFault", 7), ("cimaAlarmLinkTxUnusableFe", 8), ("cimaAlarmLinkRxUnusableFe", 9))

cimaGrpAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 1), CiscoImaGrpAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpAlarmType.setStatus('deprecated')
if mibBuilder.loadTexts: cimaGrpAlarmType.setDescription('The notification object identifies the Cisco IMA group alarm.')
cimaLinkAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 2), CiscoImaLinkAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkAlarmType.setStatus('deprecated')
if mibBuilder.loadTexts: cimaLinkAlarmType.setDescription('The notification object identifies the Cisco IMA link alarm.')
cimaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3), )
if mibBuilder.loadTexts: cimaGroupTable.setStatus('current')
if mibBuilder.loadTexts: cimaGroupTable.setDescription('The Cisco IMA group table. This table contains Cisco extension objects for the imaGroupTable. Each entry in the table contains Cisco specific configuration, control, and status information for each IMA group.')
cimaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1), )
imaGroupEntry.registerAugmentions(("CISCO-IMA-MIB", "cimaGroupEntry"))
cimaGroupEntry.setIndexNames(*imaGroupEntry.getIndexNames())
if mibBuilder.loadTexts: cimaGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cimaGroupEntry.setDescription('An entry in the table containing additional management information applicable to a Cisco card/platform. When an entry is successfully created here, an entry in interfaces table is created with ifType value of atmIma(107), ifAdminStatus value of down(2), ifOperStatus value of down(2).')
cimaGroupAccumulatedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 1), MilliSeconds()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGroupAccumulatedDelay.setStatus('current')
if mibBuilder.loadTexts: cimaGroupAccumulatedDelay.setDescription('This object indicates the amount of data per link that is accumulated in the DCBs of the IMA group. This is a result of deleting the slowest link of the IMA group.')
cimaGroupClearAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGroupClearAccDelay.setStatus('current')
if mibBuilder.loadTexts: cimaGroupClearAccDelay.setDescription("This object indicates whether or not to clear accumulated delays of the IMA group. When the delay is cleared, the group DCBs are cleared such that the current slowest link in the group does not have any data accumulated in its DCB. As a result of this action, the data is played out to the network faster than the port rate. The agent clears the IMA group accumulated delays when this object is set to value of true(1) from a manager. This is a control object which can be changed/modified when the imaGroupRowStatus is 'active'.")
cimaStuffAndCellIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("lsibit0", 0), ("lsibit1", 1), ("lsibit2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaStuffAndCellIndication.setReference('ATM Forum IMA Spec v1.1, AF-PHY-0086.001, page 31.')
if mibBuilder.loadTexts: cimaStuffAndCellIndication.setStatus('current')
if mibBuilder.loadTexts: cimaStuffAndCellIndication.setDescription('This object specifies LSI bits 0-2. A combination of lsibit2, lsibit1, and lsibit0 indicates stuff event: -- 000 This is one out of the 2 ICP cells -- 001 Stuff event at the next PCP cell location -- 010 Stuff event in 2 ICP cell locations -- 011 Stuff event in 3 ICP cell locations -- 100 Stuff event in 4 ICP cell locations -- 111 No imminent stuff event that the Cisco specific card/platform supports.')
cimaGrpIntegrationUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 4), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 400000)).clone(10000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpIntegrationUpTime.setStatus('current')
if mibBuilder.loadTexts: cimaGrpIntegrationUpTime.setDescription('Integration time for the group UP status. The Group is declared to be UP if the status is UP persistently for the amount to time specified. The group changes to UP status immediately if 0 is specified.')
cimaGrpIntegrationDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 5), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(2500)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpIntegrationDownTime.setStatus('current')
if mibBuilder.loadTexts: cimaGrpIntegrationDownTime.setDescription('Integration time for the group DOWN status. The Group is declared to be DOWN if the status is DOWN persistently for the amount to time specified. The group changes to UP status immediately if 0 is specified.')
cimaGrpNumTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpNumTxIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNumTxIcpCells.setDescription('Number of error-free transmitted ICP cells in the IMA group.')
cimaGrpNumRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 7), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpNumRxIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNumRxIcpCells.setDescription('Number of error-free received ICP cells in the IMA group.')
cimaGrpNumRxErrIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpNumRxErrIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNumRxErrIcpCells.setDescription('Number of Errored ICP Cells received on this IMA group. Errored ICP Cell is defined as: a cell with HEC or CRC error at an expected ICP cell position if it is not a missing cell.')
cimaGrpNumRxInvalidIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpNumRxInvalidIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNumRxInvalidIcpCells.setDescription('Number of Invalid ICP Cells received on this IMA group. Invalid ICP Cell is defined as: Cell with good HEC & CRC and CID = ICP at expected frame position with (unexpected IMA OAM Label) or (unexpected LID) or (unexpected IMA ID) or (received M not equal to expected M of the IMA group) or (unexpected IMA frame number) or (unexpected ICP cell offset).')
cimaGrpNumRxMissingIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 10), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpNumRxMissingIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNumRxMissingIcpCells.setDescription('Number of Missing ICP Cells at the expected ICP cell position on this IMA group.')
cimaGrpNumTxMissingIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 11), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpNumTxMissingIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNumTxMissingIcpCells.setDescription('Number of ICP cells that could not be transmitted on this IMA group due to lack of resources, e.g. buffers.')
cimaGrpRestarting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpRestarting.setStatus('current')
if mibBuilder.loadTexts: cimaGrpRestarting.setDescription('The object controls if the IMA group restart is to be executed. During this operation the Group bringup procedure is restarted and the group will have to go through all the state transitions before it is declared Active. true(1) - restarting the IMA group false(2) - do not restart the IMA group The agent restarts the IMA group if it is set to value of true(1) request from a manager. When the agent is in the group restart transition state, it does not take any set to value of true(1) requests. The agent returns true(1) when it is in the process of group bringup. The agent returns false(2) after the completion of group restarting.')
cimaGrpNeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("version10", 2), ("version11", 3))).clone('version10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpNeVersion.setReference('ATM Forum IMA v1.0 specification (af-phy-0086.000) and ATM Forum IMA v1.1 specification (af-phy-0086.001)')
if mibBuilder.loadTexts: cimaGrpNeVersion.setStatus('current')
if mibBuilder.loadTexts: cimaGrpNeVersion.setDescription('This object specifies IMA group version at the near end. others(1) no available version10(2) IMA 1.0 version11(3) IMA 1.1')
cimaGrpMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 14), Gauge32()).setUnits('cells per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpMaxCellRate.setReference('ATM Forum IMA v1.1 specification (af-phy-0086.001), page 40.')
if mibBuilder.loadTexts: cimaGrpMaxCellRate.setStatus('current')
if mibBuilder.loadTexts: cimaGrpMaxCellRate.setDescription("This object indicates the IMA group's high water mark cell rate. The value is the same as the IDCR with all configured links in the 'active' state. It is derived according to the following equation: T1 based group = N * (3622 * (M-1)/M * 2048/2049) E1 based group = N * (4528 * (M-1)/M * 2048/2049) where M = IMA frame size N = Number of links configured in an IMA group.")
cimaGrpVerFallbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpVerFallbackEnable.setReference('ATM Forum IMA v1.1 specification (af-phy-0086.001), page 32.')
if mibBuilder.loadTexts: cimaGrpVerFallbackEnable.setStatus('current')
if mibBuilder.loadTexts: cimaGrpVerFallbackEnable.setDescription('This object controls the IMA version fallback support. Setting this object to true(1) will enable the fallback support. Setting this to false(2) will disable the fallback support.')
cimaGrpAutoRestartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("relearn", 2), ("reuse", 3))).clone('reuse')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpAutoRestartMode.setStatus('current')
if mibBuilder.loadTexts: cimaGrpAutoRestartMode.setDescription("This object specifies IMA unit sync up with FE behaviour. disable(1) auto-restart feature is disabled. relearn(2) In this mode, when IMA unit is restarted, the IMA unit ignores the expected IMA ID defined by cimaGrpRxImaIdExpected, and relearns the FE IMA ID. Relearning is a process that NE will try to sync up with any FE IMA IDs, when both NE and FE group transit to 'Operational' state for the first time, the agent will save this FE IMA ID to its persistent configuration. This learned FE IMA ID will be represented by cimaGrpRxImaIdExpected object. During relearning process, the agent returns value of '-1' for cimaGrpRxImaIdExpected object. reuse(3) In this mode, when IMA unit is restarted, the IMA unit will sync up with the expected FE group whose Id is specified by cimaGrpRxImaIdExpected. If the cimaGrpRxImaIdExpected object value is '-1', which indicates an undetermined FE IMA ID, the agent will relearn the FE IMA ID. The NE will use this FE IMA ID to sync up with FE in any subsequent card reset or IMA group restart.")
cimaGrpRxImaIdExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaGrpRxImaIdExpected.setReference('ATM Forum IMA v1.1 specification (af-phy-0086.001), page 31.')
if mibBuilder.loadTexts: cimaGrpRxImaIdExpected.setStatus('current')
if mibBuilder.loadTexts: cimaGrpRxImaIdExpected.setDescription("This object specifies the expected FE IMA ID or learned IMA ID. It is an extension to IMA-MIB's read-only object imaGroupRxImaId. The valid IMA ID range is from 0 to 255. The value '-1' of this object indicates an undetermined FE IMA ID. The following are the possible conditions for undetermined FE IMA ID in this object: [1] auto-restart feature is disabled. [2] in 'relearn' auto-restart mode, IMA group restarts and the relearning process is in progress. [3] in 'reuse' auto-restart mode, value of object cimaGrpRxImaIdExpected is set to '-1' and the relearning process is in progress.")
cimaGrpAutoRestartSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("inProgress", 2), ("loopbackSync", 3), ("tempSync", 4), ("feSync", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaGrpAutoRestartSyncState.setStatus('current')
if mibBuilder.loadTexts: cimaGrpAutoRestartSyncState.setDescription("This object indicates the IMA group auto restart synchronization state. When the group auto-restart feature is enabled, the IMA unit runs in an enhanced IMA GSM mode. The object transits to one of following four states: disable auto-restart is disabled. inProgress auto-restart is enabled. The enhanced GSM is in this state when the group is added or restarted. loopbackSync IMA group has sync'd up to NE when all links in the group are in local loopback. tempSync IMA group has sync'd up to FE, but FE group Id is not the same as the expected FE group Id, but all ima links in the group are receiving the same IMA ID, but the IMA ID is not the same as the NE IMA ID. feSync a transition state when IMA group has sync'd up to FE group i.e., the FE IMA ID is the same as the expected IMA ID given by cimaGrpRxImaIdExpected. or the FE IMA ID is not the same as cimaGrpRxImaIdExpected, but the NE group is restarted with relearn option. or object cimaGrpRxImaIdExpected is value of '-1' and the NE group is restarted with reuse/relearn option. The agent always returns 'disable' if the auto-restart feature is disabled.")
cimaLinkMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 4), )
if mibBuilder.loadTexts: cimaLinkMappingTable.setStatus('current')
if mibBuilder.loadTexts: cimaLinkMappingTable.setDescription("The link mapping table is an IMA group oriented mapping table which associates an IMA group to its corresponding IMA links. It provides an efficient way of accessing to IMA links based on the knowledge of an IMA group. This is a read-only mapping table. The agent creates an entry when an IMA link identified by 'imaLinkIfIndex' is added to an IMA group identified by 'imaGroupIndex'. The agent removes an entry when an IMA link identified by 'imaLinkIfIndex' is removed from an IMA group identified by 'imaGroupIndex'. A state object 'cimaLinkState' provides the link state in either 'active' or 'nonactive'. The management station can query detailed information in imaGroupTable, and imaLinkTable with the two index readily available.")
cimaLinkMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 4, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"), (0, "IMA-MIB", "imaLinkIfIndex"))
if mibBuilder.loadTexts: cimaLinkMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cimaLinkMappingEntry.setDescription("An entry in the table containing an IMA group oriented mapping from 'imaGroupIndex' to 'imaLinkIfIndex'.")
cimaLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("nonactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkState.setStatus('current')
if mibBuilder.loadTexts: cimaLinkState.setDescription('This object indicates whether the IMA link is in active(1) state or nonactive(2) state.')
cimaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5), )
if mibBuilder.loadTexts: cimaLinkTable.setStatus('current')
if mibBuilder.loadTexts: cimaLinkTable.setDescription('The Cisco IMA link table. This table has Cisco specific configuration, and status management information for IMA links.')
cimaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1), )
imaLinkEntry.registerAugmentions(("CISCO-IMA-MIB", "cimaLinkEntry"))
cimaLinkEntry.setIndexNames(*imaLinkEntry.getIndexNames())
if mibBuilder.loadTexts: cimaLinkEntry.setStatus('current')
if mibBuilder.loadTexts: cimaLinkEntry.setDescription('An entry in the table, containing status and configuration information of an IMA link.')
cimaLinkLifIntUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 1), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 25000)).clone(2500)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaLinkLifIntUpTime.setStatus('current')
if mibBuilder.loadTexts: cimaLinkLifIntUpTime.setDescription('IMA LIF integration up time. The agent declares LIF alarm immediately if 0 is specified.')
cimaLinkLifIntDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 2), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 25000)).clone(10000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaLinkLifIntDownTime.setStatus('current')
if mibBuilder.loadTexts: cimaLinkLifIntDownTime.setDescription('IMA LIF integration down time. The agent undeclares LIF alarm immediately if 0 is specified.')
cimaLinkLodsIntUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 3), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 25000)).clone(2500)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaLinkLodsIntUpTime.setStatus('current')
if mibBuilder.loadTexts: cimaLinkLodsIntUpTime.setDescription('IMA LODS integration up time. The agent declares LODS alarm immediately if 0 is specified.')
cimaLinkLodsIntDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 4), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 25000)).clone(10000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cimaLinkLodsIntDownTime.setStatus('current')
if mibBuilder.loadTexts: cimaLinkLodsIntDownTime.setDescription('IMA LODS integration down time. The agent undeclares IMA LODS alarm immediately if 0 is specified.')
cimaLinkNumTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 5), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkNumTxIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaLinkNumTxIcpCells.setDescription('Number of error-free transmitted ICP cells on this link of the IMA group.')
cimaLinkNumRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkNumRxIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaLinkNumRxIcpCells.setDescription('Number of error-free received ICP cells on this link of the IMA group.')
cimaLinkNumRxErrIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 7), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkNumRxErrIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaLinkNumRxErrIcpCells.setDescription('Number of Errored ICP Cell received on this link of the IMA group. Errored ICP Cell is defined as: a cell with HEC or CRC error at an expected ICP cell position if it is not a missing cell.')
cimaLinkNumRxInvalidIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkNumRxInvalidIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaLinkNumRxInvalidIcpCells.setDescription('Number of Invalid ICP Cell received on this link of the IMA group. Invalid ICP Cell is defined as: Cell with good HEC & CRC and CID = ICP at expected frame position with (unexpected IMA OAM Label) or (unexpected LID) or (unexpected IMA ID) or (received M not equal to expected M of the IMA group) or (unexpected IMA frame number) or (unexpected ICP cell offset).')
cimaLinkNumRxMissingIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkNumRxMissingIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaLinkNumRxMissingIcpCells.setDescription('Number of Missing ICP Cell at the expected ICP cell position on this link of the IMA group')
cimaLinkNumTxMissingIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 5, 1, 10), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaLinkNumTxMissingIcpCells.setStatus('current')
if mibBuilder.loadTexts: cimaLinkNumTxMissingIcpCells.setDescription('Number of ICP cells that could not be transmitted on this link of the IMA group due to lack of resources (buffers).')
cimaFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6), )
if mibBuilder.loadTexts: cimaFeatureTable.setStatus('current')
if mibBuilder.loadTexts: cimaFeatureTable.setDescription('The Cisco IMA feature table. This table provides IMA features supported in a Cisco card. Any SNMP set to the writable object has card wide impact on all IMA groups and IMA links.')
cimaFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cimaFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: cimaFeatureEntry.setDescription("An entry in the table containing IMA features supported and additional information applicable to a physical entity with class 'module(9)'.")
cimaMaxImaGroupsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaMaxImaGroupsSupported.setStatus('current')
if mibBuilder.loadTexts: cimaMaxImaGroupsSupported.setDescription('This object represents the maximum number of IMA Groups supported.')
cimaConfiguredImaGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimaConfiguredImaGroups.setStatus('current')
if mibBuilder.loadTexts: cimaConfiguredImaGroups.setDescription('This object represents the current number of IMA Groups configured.')
cimaMinGrpTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimaMinGrpTxImaId.setStatus('current')
if mibBuilder.loadTexts: cimaMinGrpTxImaId.setDescription('This object specifies the minimum value of the IMA ID range supported.')
cimaMaxGrpTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimaMaxGrpTxImaId.setStatus('current')
if mibBuilder.loadTexts: cimaMaxGrpTxImaId.setDescription('This object specifies the maximum value of the IMA ID range supported.')
cimaVerFallbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimaVerFallbackEnable.setReference('ATM Forum IMA v1.1 specification (af-phy-0086.001), page 32.')
if mibBuilder.loadTexts: cimaVerFallbackEnable.setStatus('current')
if mibBuilder.loadTexts: cimaVerFallbackEnable.setDescription('This object controls the IMA version fallback support. Setting this object to true(1) will enable the fallback support. Setting this to false(2) will disable the fallback support. Any set to this object has an impact on all the IMA groups configured.')
cimaAutoRestartEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 235, 1, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimaAutoRestartEnable.setReference('ATM Forum IMA v1.0 spec. (af-phy-0086.000), page 53-57 or ATM Forum IMA v1.1 spec. (af-phy-0086.001), page 55-59.')
if mibBuilder.loadTexts: cimaAutoRestartEnable.setStatus('current')
if mibBuilder.loadTexts: cimaAutoRestartEnable.setDescription("This object specifies IMA unit restart behaviour. By default, the IMA unit runs in the standard GSM mode. If the object is set to 'true', the IMA unit will be in auto restart mode running with an enhanced IMA GSM. The usage of loopbacks is an essential part of maintenance, and it is required that the FE IMA ID is always administratively kept different from the NE IMA ID. Any set to this object has an impact on all the IMA group configured.")
ciscoImaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 235, 2))
ciscoImaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 1))
ciscoImaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2))
ciscoImaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 1, 1)).setObjects(("CISCO-IMA-MIB", "ciscoImaGroupGroup"), ("CISCO-IMA-MIB", "ciscoImaLinkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaMIBCompliance = ciscoImaMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoImaMIBCompliance.setDescription('The Compliance statement for Cisco ATM IMA management group.')
ciscoImaMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 1, 2)).setObjects(("CISCO-IMA-MIB", "ciscoImaGroupGroup"), ("CISCO-IMA-MIB", "ciscoImaLinkGroup"), ("CISCO-IMA-MIB", "ciscoImaLinkMappingGroup"), ("CISCO-IMA-MIB", "ciscoImaFeatureGroup"), ("CISCO-IMA-MIB", "ciscoImaAutoRestartGroup"), ("CISCO-IMA-MIB", "ciscoImaVerFallbackSupportGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaMIBCompliance1 = ciscoImaMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: ciscoImaMIBCompliance1.setDescription('The Compliance statement for Cisco ATM IMA management group.')
ciscoImaGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 1)).setObjects(("CISCO-IMA-MIB", "cimaGroupAccumulatedDelay"), ("CISCO-IMA-MIB", "cimaGroupClearAccDelay"), ("CISCO-IMA-MIB", "cimaStuffAndCellIndication"), ("CISCO-IMA-MIB", "cimaGrpIntegrationUpTime"), ("CISCO-IMA-MIB", "cimaGrpIntegrationDownTime"), ("CISCO-IMA-MIB", "cimaGrpNumTxIcpCells"), ("CISCO-IMA-MIB", "cimaGrpNumRxIcpCells"), ("CISCO-IMA-MIB", "cimaGrpNumRxErrIcpCells"), ("CISCO-IMA-MIB", "cimaGrpNumRxInvalidIcpCells"), ("CISCO-IMA-MIB", "cimaGrpNumRxMissingIcpCells"), ("CISCO-IMA-MIB", "cimaGrpNumTxMissingIcpCells"), ("CISCO-IMA-MIB", "cimaGrpRestarting"), ("CISCO-IMA-MIB", "cimaGrpNeVersion"), ("CISCO-IMA-MIB", "cimaGrpMaxCellRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaGroupGroup = ciscoImaGroupGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoImaGroupGroup.setDescription('A set of objects providing configuration and status information for a Cisco IMA extension group definition.')
ciscoImaLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 2)).setObjects(("CISCO-IMA-MIB", "cimaLinkLifIntUpTime"), ("CISCO-IMA-MIB", "cimaLinkLodsIntUpTime"), ("CISCO-IMA-MIB", "cimaLinkLifIntDownTime"), ("CISCO-IMA-MIB", "cimaLinkLodsIntDownTime"), ("CISCO-IMA-MIB", "cimaLinkNumTxIcpCells"), ("CISCO-IMA-MIB", "cimaLinkNumRxIcpCells"), ("CISCO-IMA-MIB", "cimaLinkNumRxErrIcpCells"), ("CISCO-IMA-MIB", "cimaLinkNumRxInvalidIcpCells"), ("CISCO-IMA-MIB", "cimaLinkNumRxMissingIcpCells"), ("CISCO-IMA-MIB", "cimaLinkNumTxMissingIcpCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaLinkGroup = ciscoImaLinkGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoImaLinkGroup.setDescription('A set of objects providing status information for a Cisco IMA extension link.')
ciscoImaLinkMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 3)).setObjects(("CISCO-IMA-MIB", "cimaLinkState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaLinkMappingGroup = ciscoImaLinkMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoImaLinkMappingGroup.setDescription('A set of objects providing IMA group to IMA link lookup and IMA link state.')
ciscoImaAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 4)).setObjects(("CISCO-IMA-MIB", "cimaGrpAlarmType"), ("CISCO-IMA-MIB", "cimaLinkAlarmType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaAlarmGroup = ciscoImaAlarmGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoImaAlarmGroup.setDescription('A set of objects used in the notification of Cisco IMA group and link alarms.')
ciscoImaFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 5)).setObjects(("CISCO-IMA-MIB", "cimaMaxImaGroupsSupported"), ("CISCO-IMA-MIB", "cimaConfiguredImaGroups"), ("CISCO-IMA-MIB", "cimaMinGrpTxImaId"), ("CISCO-IMA-MIB", "cimaMaxGrpTxImaId"), ("CISCO-IMA-MIB", "cimaVerFallbackEnable"), ("CISCO-IMA-MIB", "cimaAutoRestartEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaFeatureGroup = ciscoImaFeatureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoImaFeatureGroup.setDescription('A set of objects providing IMA feature information and configurations.')
ciscoImaAutoRestartGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 6)).setObjects(("CISCO-IMA-MIB", "cimaGrpAutoRestartMode"), ("CISCO-IMA-MIB", "cimaGrpRxImaIdExpected"), ("CISCO-IMA-MIB", "cimaGrpAutoRestartSyncState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaAutoRestartGroup = ciscoImaAutoRestartGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoImaAutoRestartGroup.setDescription('A set of objects providing IMA group auto-restart feature configuration and status information.')
ciscoImaVerFallbackSupportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 235, 2, 2, 7)).setObjects(("CISCO-IMA-MIB", "cimaGrpVerFallbackEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoImaVerFallbackSupportGroup = ciscoImaVerFallbackSupportGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoImaVerFallbackSupportGroup.setDescription('A set of objects providing IMA group version fallback control support.')
mibBuilder.exportSymbols("CISCO-IMA-MIB", cimaAutoRestartEnable=cimaAutoRestartEnable, cimaGrpAutoRestartMode=cimaGrpAutoRestartMode, cimaGrpIntegrationUpTime=cimaGrpIntegrationUpTime, ciscoImaMIBCompliances=ciscoImaMIBCompliances, ciscoImaVerFallbackSupportGroup=ciscoImaVerFallbackSupportGroup, ciscoImaLinkGroup=ciscoImaLinkGroup, cimaGroupAccumulatedDelay=cimaGroupAccumulatedDelay, ciscoImaMIBObjects=ciscoImaMIBObjects, cimaGrpNumTxIcpCells=cimaGrpNumTxIcpCells, cimaGrpNumTxMissingIcpCells=cimaGrpNumTxMissingIcpCells, cimaLinkNumRxMissingIcpCells=cimaLinkNumRxMissingIcpCells, CiscoImaGrpAlarmType=CiscoImaGrpAlarmType, cimaLinkAlarmType=cimaLinkAlarmType, cimaGrpIntegrationDownTime=cimaGrpIntegrationDownTime, cimaLinkNumRxInvalidIcpCells=cimaLinkNumRxInvalidIcpCells, ciscoImaMIBGroups=ciscoImaMIBGroups, PYSNMP_MODULE_ID=ciscoImaMIB, cimaLinkLifIntUpTime=cimaLinkLifIntUpTime, cimaLinkNumTxIcpCells=cimaLinkNumTxIcpCells, cimaGrpRxImaIdExpected=cimaGrpRxImaIdExpected, cimaLinkEntry=cimaLinkEntry, cimaLinkLodsIntDownTime=cimaLinkLodsIntDownTime, ciscoImaGroupGroup=ciscoImaGroupGroup, cimaLinkLifIntDownTime=cimaLinkLifIntDownTime, ciscoImaMIBCompliance=ciscoImaMIBCompliance, cimaGrpRestarting=cimaGrpRestarting, cimaLinkTable=cimaLinkTable, cimaLinkNumRxIcpCells=cimaLinkNumRxIcpCells, cimaLinkNumTxMissingIcpCells=cimaLinkNumTxMissingIcpCells, ciscoImaMIB=ciscoImaMIB, cimaMinGrpTxImaId=cimaMinGrpTxImaId, cimaGrpNeVersion=cimaGrpNeVersion, cimaGrpNumRxInvalidIcpCells=cimaGrpNumRxInvalidIcpCells, cimaGrpAlarmType=cimaGrpAlarmType, cimaGroupEntry=cimaGroupEntry, CiscoImaLinkAlarmType=CiscoImaLinkAlarmType, cimaGroupTable=cimaGroupTable, cimaConfiguredImaGroups=cimaConfiguredImaGroups, cimaMaxGrpTxImaId=cimaMaxGrpTxImaId, cimaGrpAutoRestartSyncState=cimaGrpAutoRestartSyncState, ciscoImaLinkMappingGroup=ciscoImaLinkMappingGroup, ciscoImaAlarmGroup=ciscoImaAlarmGroup, ciscoImaFeatureGroup=ciscoImaFeatureGroup, cimaLinkState=cimaLinkState, ciscoImaMIBConformance=ciscoImaMIBConformance, cimaGrpNumRxMissingIcpCells=cimaGrpNumRxMissingIcpCells, cimaGrpVerFallbackEnable=cimaGrpVerFallbackEnable, ciscoImaAutoRestartGroup=ciscoImaAutoRestartGroup, cimaStuffAndCellIndication=cimaStuffAndCellIndication, cimaLinkMappingEntry=cimaLinkMappingEntry, cimaFeatureTable=cimaFeatureTable, ciscoImaMIBCompliance1=ciscoImaMIBCompliance1, cimaLinkLodsIntUpTime=cimaLinkLodsIntUpTime, cimaGrpMaxCellRate=cimaGrpMaxCellRate, cimaLinkNumRxErrIcpCells=cimaLinkNumRxErrIcpCells, cimaGrpNumRxIcpCells=cimaGrpNumRxIcpCells, cimaVerFallbackEnable=cimaVerFallbackEnable, cimaGroupClearAccDelay=cimaGroupClearAccDelay, cimaMaxImaGroupsSupported=cimaMaxImaGroupsSupported, cimaLinkMappingTable=cimaLinkMappingTable, cimaFeatureEntry=cimaFeatureEntry, cimaGrpNumRxErrIcpCells=cimaGrpNumRxErrIcpCells)
