#
# PySNMP MIB module HM2-CAM-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-CAM-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
HmEnabledStatus, hm2ConfigurationMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "hm2ConfigurationMibs")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, Counter64, Bits, Integer32, Counter32, ObjectIdentity, TimeTicks, ModuleIdentity, NotificationType, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "Counter64", "Bits", "Integer32", "Counter32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "NotificationType", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
hm2CamMgmtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 200))
hm2CamMgmtMib.setRevisions(('2013-07-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2CamMgmtMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2CamMgmtMib.setLastUpdated('201307010000Z')
if mibBuilder.loadTexts: hm2CamMgmtMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2CamMgmtMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2CamMgmtMib.setDescription('Hirschmann dummy for Central Authentication Management MIB for ABB. Copyright (C) 2013. All Rights Reserved.')
hm2CamMgmtMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 200, 0))
hm2CamMgmtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 200, 1))
hm2CamConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1))
hm2CamActionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 10))
hm2CamPwdChangeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 20))
hm2CamCertInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30))
hm2CamConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamConfigAdminStatus.setDescription('Configure authentication via CAM server. If CAM authentication is enabled local users are deactivated. Authentication will be done via CAM server (primary or backup) or replicated user database on switch. Otherwise access to the switch is not possible.')
hm2CamConfigLastValidServerindex = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamConfigLastValidServerindex.setStatus('current')
if mibBuilder.loadTexts: hm2CamConfigLastValidServerindex.setDescription('Last valid CAM server with succesful connection and authentication. Note: this attribute is set by CAM management application.')
hm2CamClientServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10), )
if mibBuilder.loadTexts: hm2CamClientServerAddrTable.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerAddrTable.setDescription('This table contains objects to configure CAM client connections.')
hm2CamClientServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1), ).setIndexNames((0, "HM2-CAM-MGMT-MIB", "hm2CamClientServerIndex"))
if mibBuilder.loadTexts: hm2CamClientServerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerAddrEntry.setDescription('The CAM client connection objects.')
hm2CamClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2CamClientServerIndex.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerIndex.setDescription('Index for CAM server table.')
hm2CamClientServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerAddrType.setDescription('Address type.')
hm2CamClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerAddr.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerAddr.setDescription('IP address of CAM authentication server.')
hm2CamClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 4), InetPortNumber().clone(389)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerPort.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerPort.setDescription('The port number of the CAM authentication server.')
hm2CamClientServerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerDescr.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerDescr.setDescription('The description of the server configured.')
hm2CamClientServerBaseDN = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerBaseDN.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerBaseDN.setDescription('Base distinguished name for LDAP query to CAM server.')
hm2CamClientServerSearchString = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerSearchString.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerSearchString.setDescription('Search string for LDAP query to CAM server.')
hm2CamClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("unreachable", 2), ("other", 3))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamClientServerStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerStatus.setDescription('Status of authentication against CAM server: - ok -> CAM server reachable, authentication succeeded - unreachable -> CAM server (primary and backup) not reachable - other -> any other error state')
hm2CamClientServerReplicationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerReplicationInterval.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerReplicationInterval.setDescription('Configurable replication interval in minutes.')
hm2CamClientServerReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("unsuccessful", 2), ("other", 3))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamClientServerReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerReplicationStatus.setDescription('Status of CAM replication: - ok -> CAM server reachable, replication succeeded - unsuccessful -> Replication was not successful - other -> any other error state')
hm2CamClientServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 1, 10, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2CamClientServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamClientServerRowStatus.setDescription("Indicates the status of an entry in this table, and is used to create/delete entries. Objects within this table can by changed while the status is 'active'.")
hm2CamAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("testConnection", 2), ("doReplication", 3))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamAction.setStatus('current')
if mibBuilder.loadTexts: hm2CamAction.setDescription('Test available CAM server connections. Status of testing the CAM server connections is shown in abb2CamTestConnectionStatus.')
hm2CamActionConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("unreachable", 2), ("pending", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamActionConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamActionConnectionStatus.setDescription('Status of available CAM server connections. - ok(1) -> at least one CAM server reachable. - unreachable(2)-> no CAM server reachable. - pending(3) -> testing connections is in progress. - other(4) -> no test has been done.')
hm2CamActionReplicationStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("unsuccessful", 2), ("pending", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamActionReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamActionReplicationStatus.setDescription('Status of replication to an available CAM server. - ok(1) -> replication successful. - unsuccessful(2)-> replication unsuccessful. - pending(3) -> replication is in progress. - other(4) -> no replication has been done.')
hm2CamPwdChangeUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 20, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamPwdChangeUserName.setStatus('current')
if mibBuilder.loadTexts: hm2CamPwdChangeUserName.setDescription('Set user name of user whose password has to be changed on CAM server.')
hm2CamPwdChangeUserPwOld = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 20, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamPwdChangeUserPwOld.setStatus('current')
if mibBuilder.loadTexts: hm2CamPwdChangeUserPwOld.setDescription('Set old password of user whose password has to be changed on CAM server.')
hm2CamPwdChangeUserPwNew = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 20, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamPwdChangeUserPwNew.setStatus('current')
if mibBuilder.loadTexts: hm2CamPwdChangeUserPwNew.setDescription('Set new password of user whose password has to be changed on CAM server.')
hm2CamPwdChangeAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("changePwd", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CamPwdChangeAction.setStatus('current')
if mibBuilder.loadTexts: hm2CamPwdChangeAction.setDescription('Execute password change of given user on CAM server. - other -> no action, password is not changed on CAM server - changePwd -> change password')
hm2CamPwdChangeActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("unsuccessful", 2), ("pending", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamPwdChangeActionStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CamPwdChangeActionStatus.setDescription('Status of password change action on available CAM server. - ok(1) -> password change successful. - unsuccessful(2)-> password change unsuccessful. - pending(3) -> password change is in progress. - other(4) -> password change was never done.')
hm2CamCertInfoTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1), )
if mibBuilder.loadTexts: hm2CamCertInfoTable.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoTable.setDescription('This table ....')
hm2CamCertInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1), ).setIndexNames((0, "HM2-CAM-MGMT-MIB", "hm2CamCertInfoIndex"))
if mibBuilder.loadTexts: hm2CamCertInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoEntry.setDescription('The CAM ...')
hm2CamCertInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rootCert", 1), ("deviceCert", 2))))
if mibBuilder.loadTexts: hm2CamCertInfoIndex.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoIndex.setDescription('Index for CAM certificate table.')
hm2CamCertInfoPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamCertInfoPresent.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoPresent.setDescription('Certificate present on device.')
hm2CamCertInfoExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamCertInfoExpiry.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoExpiry.setDescription('Expiry information of certificate.')
hm2CamCertInfoIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamCertInfoIssuer.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoIssuer.setDescription('Issuer information of certificate.')
hm2CamCertInfoSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamCertInfoSubject.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoSubject.setDescription('Subject information of certificate.')
hm2CamCertInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 200, 1, 30, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2CamCertInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hm2CamCertInfoSerialNumber.setDescription('Serial number of certificate.')
hm2CamConfigStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 200, 0, 1)).setObjects(("HM2-CAM-MGMT-MIB", "hm2CamClientServerIndex"), ("HM2-CAM-MGMT-MIB", "hm2CamClientServerStatus"))
if mibBuilder.loadTexts: hm2CamConfigStatusTrap.setStatus('current')
if mibBuilder.loadTexts: hm2CamConfigStatusTrap.setDescription('This notification is send when authentication via CAM server is done.')
hm2CamReplicationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 200, 0, 2)).setObjects(("HM2-CAM-MGMT-MIB", "hm2CamClientServerIndex"), ("HM2-CAM-MGMT-MIB", "hm2CamClientServerReplicationStatus"))
if mibBuilder.loadTexts: hm2CamReplicationStatusTrap.setStatus('current')
if mibBuilder.loadTexts: hm2CamReplicationStatusTrap.setDescription('This notification is send when replication via CAM server is done.')
mibBuilder.exportSymbols("HM2-CAM-MGMT-MIB", hm2CamClientServerStatus=hm2CamClientServerStatus, hm2CamPwdChangeUserPwNew=hm2CamPwdChangeUserPwNew, hm2CamActionGroup=hm2CamActionGroup, hm2CamClientServerRowStatus=hm2CamClientServerRowStatus, PYSNMP_MODULE_ID=hm2CamMgmtMib, hm2CamMgmtMib=hm2CamMgmtMib, hm2CamClientServerSearchString=hm2CamClientServerSearchString, hm2CamClientServerReplicationInterval=hm2CamClientServerReplicationInterval, hm2CamClientServerAddrTable=hm2CamClientServerAddrTable, hm2CamCertInfoPresent=hm2CamCertInfoPresent, hm2CamPwdChangeAction=hm2CamPwdChangeAction, hm2CamClientServerPort=hm2CamClientServerPort, hm2CamAction=hm2CamAction, hm2CamMgmtMibObjects=hm2CamMgmtMibObjects, hm2CamMgmtMibNotifications=hm2CamMgmtMibNotifications, hm2CamActionConnectionStatus=hm2CamActionConnectionStatus, hm2CamConfigLastValidServerindex=hm2CamConfigLastValidServerindex, hm2CamPwdChangeActionStatus=hm2CamPwdChangeActionStatus, hm2CamReplicationStatusTrap=hm2CamReplicationStatusTrap, hm2CamClientServerAddr=hm2CamClientServerAddr, hm2CamPwdChangeUserName=hm2CamPwdChangeUserName, hm2CamCertInfoTable=hm2CamCertInfoTable, hm2CamClientServerIndex=hm2CamClientServerIndex, hm2CamActionReplicationStatus=hm2CamActionReplicationStatus, hm2CamConfigAdminStatus=hm2CamConfigAdminStatus, hm2CamClientServerBaseDN=hm2CamClientServerBaseDN, hm2CamClientServerReplicationStatus=hm2CamClientServerReplicationStatus, hm2CamClientServerDescr=hm2CamClientServerDescr, hm2CamClientServerAddrType=hm2CamClientServerAddrType, hm2CamCertInfoSubject=hm2CamCertInfoSubject, hm2CamCertInfoIssuer=hm2CamCertInfoIssuer, hm2CamConfigStatusTrap=hm2CamConfigStatusTrap, hm2CamClientServerAddrEntry=hm2CamClientServerAddrEntry, hm2CamCertInfoEntry=hm2CamCertInfoEntry, hm2CamCertInfoGroup=hm2CamCertInfoGroup, hm2CamPwdChangeUserPwOld=hm2CamPwdChangeUserPwOld, hm2CamCertInfoSerialNumber=hm2CamCertInfoSerialNumber, hm2CamPwdChangeGroup=hm2CamPwdChangeGroup, hm2CamCertInfoIndex=hm2CamCertInfoIndex, hm2CamCertInfoExpiry=hm2CamCertInfoExpiry, hm2CamConfigGroup=hm2CamConfigGroup)
