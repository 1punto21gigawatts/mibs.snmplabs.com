#
# PySNMP MIB module NETASQ-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETASQ-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ntqif, = mibBuilder.importSymbols("NETASQ-SMI-MIB", "ntqif")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, Bits, Unsigned32, NotificationType, MibIdentifier, iso, TimeTicks, ObjectIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Bits", "Unsigned32", "NotificationType", "MibIdentifier", "iso", "TimeTicks", "ObjectIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ntqifTable = MibTable((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1), )
if mibBuilder.loadTexts: ntqifTable.setStatus('current')
if mibBuilder.loadTexts: ntqifTable.setDescription('List of interface')
ntqifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1), ).setIndexNames((0, "NETASQ-IF-MIB", "ntqifIndex"))
if mibBuilder.loadTexts: ntqifEntry.setStatus('current')
if mibBuilder.loadTexts: ntqifEntry.setDescription('Each entry in the ntqifTable holds a set of information.')
ntqifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifIndex.setStatus('current')
if mibBuilder.loadTexts: ntqifIndex.setDescription('A unique value for the table. Its value ranges between 1 and 65535 and may not be contigous. the index has no other meaning but a pure index')
ntqifUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUserName.setStatus('current')
if mibBuilder.loadTexts: ntqifUserName.setDescription('User interface name')
ntqifName = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifName.setStatus('current')
if mibBuilder.loadTexts: ntqifName.setDescription('System interface name')
ntqifAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifAddr.setStatus('current')
if mibBuilder.loadTexts: ntqifAddr.setDescription('Interface Adress')
ntqifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifMask.setStatus('current')
if mibBuilder.loadTexts: ntqifMask.setDescription('Interface mask')
ntqifType = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifType.setStatus('current')
if mibBuilder.loadTexts: ntqifType.setDescription('Interface type')
ntqifColor = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifColor.setStatus('current')
if mibBuilder.loadTexts: ntqifColor.setDescription('')
ntqifMacThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifMacThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifMacThroughput.setDescription(' ')
ntqifCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifCurThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifCurThroughput.setDescription('incoming + outgoing current throughput in b/s ')
ntqifMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifMaxThroughput.setDescription('incoming + outgoing maximum throughput in b/s')
ntqifPktAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktAccepted.setStatus('current')
if mibBuilder.loadTexts: ntqifPktAccepted.setDescription('number of accepted packets')
ntqifPktBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktBlocked.setStatus('current')
if mibBuilder.loadTexts: ntqifPktBlocked.setDescription('number of packets that have been blocked')
ntqifPktFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktFragmented.setStatus('current')
if mibBuilder.loadTexts: ntqifPktFragmented.setDescription('number of fragmented packets')
ntqifPktTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktTcp.setStatus('current')
if mibBuilder.loadTexts: ntqifPktTcp.setDescription('TCP packet forwarded')
ntqifPktUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktUdp.setStatus('current')
if mibBuilder.loadTexts: ntqifPktUdp.setDescription('UDP packet forwarded')
ntqifPktIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktIcmp.setStatus('current')
if mibBuilder.loadTexts: ntqifPktIcmp.setDescription('ICMP packet forwarded')
ntqifTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifTotalBytes.setDescription('data bytes forwarded')
ntqifTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTcpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifTcpBytes.setDescription('incoming + outgoing TCP data bytes')
ntqifUdpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUdpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifUdpBytes.setDescription('incoming + outgoing UDP data bytes')
ntqifIcmpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifIcmpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifIcmpBytes.setDescription('incoming + outgoing ICMP data bytes')
ntqifTcpConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTcpConn.setStatus('current')
if mibBuilder.loadTexts: ntqifTcpConn.setDescription('TCP connection established')
ntqifUdpConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUdpConn.setStatus('current')
if mibBuilder.loadTexts: ntqifUdpConn.setDescription('UDP connection established')
ntqifTcpConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTcpConnCount.setStatus('current')
if mibBuilder.loadTexts: ntqifTcpConnCount.setDescription('current TCP connection count')
ntqifUdpConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUdpConnCount.setStatus('current')
if mibBuilder.loadTexts: ntqifUdpConnCount.setDescription('current UCP connection count')
ntqifInCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInCurThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifInCurThroughput.setDescription('Incoming Current throughput in b/s ')
ntqifOutCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutCurThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifOutCurThroughput.setDescription('Outgoing Current throughput in b/s ')
ntqifInMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifInMaxThroughput.setDescription('Incoming maximum throughput in b/s')
ntqifOutMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqifOutMaxThroughput.setDescription('Outgoing maximum throughput in b/s')
ntqifInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifInTotalBytes.setDescription('Incoming data bytes')
ntqifOutTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifOutTotalBytes.setDescription('Outgoing data bytes')
ntqifInTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInTcpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifInTcpBytes.setDescription('Incoming TCP data bytes')
ntqifOutTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutTcpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifOutTcpBytes.setDescription('Outgoing TCP data bytes')
ntqifInUdpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInUdpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifInUdpBytes.setDescription('Incoming UDP data bytes')
ntqifOutUdpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutUdpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifOutUdpBytes.setDescription('Outgoing UDP data bytes')
ntqifInIcmpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInIcmpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifInIcmpBytes.setDescription('Incoming ICMP data bytes')
ntqifIOutIcmpBytes = MibScalar((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifIOutIcmpBytes.setStatus('current')
if mibBuilder.loadTexts: ntqifIOutIcmpBytes.setDescription('Outgoing ICMP data bytes')
mibBuilder.exportSymbols("NETASQ-IF-MIB", ntqifOutTotalBytes=ntqifOutTotalBytes, ntqifMaxThroughput=ntqifMaxThroughput, ntqifUdpBytes=ntqifUdpBytes, ntqifTcpBytes=ntqifTcpBytes, ntqifMask=ntqifMask, ntqifEntry=ntqifEntry, ntqifType=ntqifType, ntqifTotalBytes=ntqifTotalBytes, ntqifOutMaxThroughput=ntqifOutMaxThroughput, ntqifTcpConnCount=ntqifTcpConnCount, ntqifIndex=ntqifIndex, ntqifColor=ntqifColor, ntqifInIcmpBytes=ntqifInIcmpBytes, ntqifName=ntqifName, ntqifPktUdp=ntqifPktUdp, ntqifOutUdpBytes=ntqifOutUdpBytes, ntqifPktAccepted=ntqifPktAccepted, ntqifUdpConn=ntqifUdpConn, ntqifInMaxThroughput=ntqifInMaxThroughput, ntqifInTotalBytes=ntqifInTotalBytes, ntqifInUdpBytes=ntqifInUdpBytes, ntqifTcpConn=ntqifTcpConn, ntqifMacThroughput=ntqifMacThroughput, ntqifUserName=ntqifUserName, ntqifPktFragmented=ntqifPktFragmented, ntqifIcmpBytes=ntqifIcmpBytes, ntqifInTcpBytes=ntqifInTcpBytes, ntqifOutTcpBytes=ntqifOutTcpBytes, ntqifInCurThroughput=ntqifInCurThroughput, ntqifOutCurThroughput=ntqifOutCurThroughput, ntqifCurThroughput=ntqifCurThroughput, ntqifPktBlocked=ntqifPktBlocked, ntqifPktIcmp=ntqifPktIcmp, ntqifTable=ntqifTable, ntqifPktTcp=ntqifPktTcp, ntqifAddr=ntqifAddr, ntqifUdpConnCount=ntqifUdpConnCount, ntqifIOutIcmpBytes=ntqifIOutIcmpBytes)
