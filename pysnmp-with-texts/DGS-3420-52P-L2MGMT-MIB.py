#
# PySNMP MIB module DGS-3420-52P-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-3420-52P-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:44:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
dot1agCfmMaIndex, dot1agCfmMdIndex, dot1agCfmMepIdentifier = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMaIndex", "dot1agCfmMdIndex", "dot1agCfmMepIdentifier")
swPortSecPortIndex, = mibBuilder.importSymbols("PORT-SECURITY-MIB", "swPortSecPortIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, ModuleIdentity, TimeTicks, iso, IpAddress, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Unsigned32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "ModuleIdentity", "TimeTicks", "iso", "IpAddress", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Unsigned32", "MibIdentifier", "Bits")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
dlink_Dgs3420Proj_Dgs3420_52P, = mibBuilder.importSymbols("SWDGS3420PRIMGMT-MIB", "dlink-Dgs3420Proj-Dgs3420-52P")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('1011150000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1))
swL2VLANMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 14))
swL2MulticastFilterMode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 17))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    description = 'This data type is used as the syntax of the swL2PortAutoNegCapabilityBits, swL2PortAutoNegCapAdvertisedBits, and swL2PortAutoNegCapReceivedBits objects in swL2PortAutoNegTable.'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2))
swL2DevCtrlSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setDescription('This object controls the SNMP trap status.')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('When the object is set to active, all statistical counters will be cleared. If set to normal, no action will occur.')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setDescription('Indicates the VLAN ID to which the Dot1dTpFdbTable belongs; The default value is the DEFAULT_VLAN_ID of the system.')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enable or disable MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of MAC addresses in the MAC Address table. The default value is 1.')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval, in seconds, that will trigger MAC notification messages.')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setDescription('This object enables or disables asymmetric VLANs during the runtime of the system.')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object controls the Telnet status.')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setDescription('This object designates TCP ports. When Telnet is disabled, this object is not accessible.')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setDescription('This object controls which previously created VLANs are included in the System IP Interface.')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebState.setDescription('This object controls the Web status.')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setDescription('This object designates TCP ports. When Web is disabled, this object is not accessible.')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setDescription('Specifies the state of the LLDP function. When this function is enabled, the switch can start to transmit LLDP packets and receive and process the LLDP packets. The specific function of each port will depend on the per port LLDP setting. For the advertisement of LLDP packets, the switch announces the information to its neighbor through ports. For receiving LLDP packets, the switch will learn the information from the LLDP packets advertised from the neighbor in the neighbor table. ')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setDescription("When lldp is disabled and lldp forward_message's are enabled, the LLDP Data Unit packets received by the switch will be forwarded. ")
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setDescription('This object controls the IP auto configuration state.')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setDescription('This object indicates the CFM global state.')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setDescription('A table containing the CFM state of specified ports.')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 2, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setDescription('The entry of the CFM state on specified ports.')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setDescription('This object indicates the port number.')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setDescription('This object indicates the CFM state by port.')
swL2DevCtrlCFMMaTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 3), )
if mibBuilder.loadTexts: swL2DevCtrlCFMMaTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMaTable.setDescription('A table containing the CFM mode of specified MAs.')
swL2DevCtrlCFMMaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMMaEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMaEntry.setDescription('The entry of the CFM mode on specified MAs.')
swL2DevCtrlCFMMaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMMaMode.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMaMode.setDescription('This object indicates the CFM mode by MA.')
swL2DevCtrlCFMMepTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 4), )
if mibBuilder.loadTexts: swL2DevCtrlCFMMepTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMepTable.setDescription('A table containing the CFM mode of specified MEPs.')
swL2DevCtrlCFMMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: swL2DevCtrlCFMMepEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMepEntry.setDescription('The entry of the CFM mode on specified MEPs.')
swL2DevCtrlCFMMepMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 21, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DevCtrlCFMMepMode.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMepMode.setDescription('This object indicates the CFM mode by MEP.')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setDescription('This indicates the global state of the VLAN trunking feature of the device.')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decides whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription('This object determines whether or not to send a trap message when the switch topology changes. If the object is enabled (3), the Topology Change trap is sent by the device when any of its configured ports transition from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port transition, the device does not send the trap if this object value is disabled or in another state.')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription('This object determines whether or not to send a trap message when the link changes. If the object is enabled (3), the Link Change trap is sent by the device when any of its port links change. The device does not send the trap if this object value is disabled or in another state.')
swL2VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 1), )
if mibBuilder.loadTexts: swL2VlanStaticTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticTable.setDescription('A table containing static configuration information for each VLAN configured into the device by (local or network) management. All entries are permanent and will be restored after the device is reset.')
swL2VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 1, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanStaticEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticEntry.setDescription('Static information for a VLAN configured into this device by (local or network) management.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
swL2VLANAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VLANAdvertisement.setStatus('current')
if mibBuilder.loadTexts: swL2VLANAdvertisement.setDescription('This object indicates if the advertisement is active or not.')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setDescription("This object controls the PVID auto assignment state. If 'Auto-assign PVID' is disabled, the PVID can only be changed by PVID configuration (user changes explicitly). The VLAN configuration will not automatically change the PVID. If 'Auto-assign PVID' is enabled, the PVID will be changed by PVID or VLAN configuration. When a user configures a port to VLAN X's untagged membership, this port's PVID will be updated with VLAN X. Using the VLAN list command, PVID is updated as the last item of the VLAN list. When a user removes a port from the untagged membership of the PVID's VLAN, the port's PVID will be assigned 'default VLAN'.")
swL2VlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 3), )
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setDescription('A table containing the VLAN and port role information of each port.')
swL2VlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 3, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2VlanPortInfoPortIndex"), (0, "DGS-3420-52P-L2MGMT-MIB", "swL2VlanPortInfoVid"))
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setDescription('The table entry of VLAN port information.')
swL2VlanPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setDescription('The port index.')
swL2VlanPortInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setDescription('The VLAN ID assigned to a special port')
swL2VlanPortInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("untagged", 2), ("tagged", 3), ("dynamic", 4), ("forbidden", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setDescription("The port role of a special port. When the role is 'other', it means this port does not belong to the VLAN.")
swL2NniGvrpBpduAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setStatus('current')
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setDescription("Specifies the GVRP's BPDU MAC address of the NNI port with Q-in-Q status.")
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS-3420-52P-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoUnitID.setDescription('Indicates the ID of the unit in the system.')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("portType-none", 0), ("portType-100Base-T", 2), ("portType-100Base-X", 3), ("portType-1000Base-T", 4), ("portType-1000Base-X", 5), ("portType-10GBase-R", 6), ("portType-10GBase-CX4", 7), ("portType-SIO", 8), ("portType-module-empty", 9), ("portType-user-last", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('This object indicates the connector type of this port.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("stp-lbd", 2), ("ctp-lbd", 3), ("ddm", 4), ("bpdu-protection", 5), ("unknow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS-3420-52P-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port on the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates the ID of the unit in the device')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides if the port is enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Chose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, the IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortCtrlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setDescription('This object decides if the port is locked or not.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription("This object sets each port's MAC notification state.")
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setDescription('This object configures the MDIX setting of the port.')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setDescription("This object configures the switch's jumbo frame settings.")
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setDescription('This object describes how many bytes the max jumbo frame is.')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setDescription('A table that is used to clear counter information about every port.')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 6, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setDescription('A list of entries used to clear the counter information for each port of the device.')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setDescription('This object indicates whether to clear the counters for each port of the device or not.')
swL2PortJumboFrameCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 10), )
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlTable.setDescription("A table that contains information for each port's jumbo frame information.")
swL2PortJumboFrameCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 10, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2PortJumboFrameCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlEntry.setDescription("A list of information for each port's jumbo frame of the device.")
swL2PortJumboFrameCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortJumboFrameCtrlPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortState.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortState.setDescription("This object indicates if the port's jumbo frame is enabled or disabled.")
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setDescription('Maximum number of entries in the trunk configuration table (swL2TrunkCtrlTable).')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setDescription('Current active number of entries in the trunk configuration table.')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setDescription('This table specifies information about the logical port trunk groups.')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setDescription('A list of information about each logical port trunk group.')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkIndex.setDescription('The index number of the logical port trunk group. The trunk group number depends on the existence of unit and module.')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMasterPort.setDescription('This object indicates the master port number of the port trunk entry. When using Port Trunking, you cannot configure the other ports of the group except the master port. Their configuration must be the same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMember.setDescription('Indicates the number of ports included in this Trunk group. The trunk port number depends on the existence of the module. The maximum number of ports is 8 for one trunk group.')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setDescription('The object indicates the flooding port number of the port trunk entry. The first port of the Trunk group is implicitly configured to be the flooding port.')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkType.setDescription('This object indicates the type of trunk group. static: is a static trunk group lacp: is a LACP trunk group. ')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkState.setDescription('This object indicates the status of this entry.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7), ("l4-source-port", 8), ("l4-destination-port", 9), ("l4-source-dest-port", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures part of the packet examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setDescription('This table specifies which ports are grouped together (this can be up to 8 ports) into a single logical link.')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 5, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setDescription('A list of information specifying which ports are grouped together (this can be up to 8 ports) into a single logical link.')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setDescription('The index of logical port LACP. ')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setDescription('The state of a logical port LACP.')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANTable.setDescription('This table is used to manage the VLAN trunking feature of the device.')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 6, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setDescription('This object is used to configure the VLAN trunking settings for each port.')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANPort.setDescription('This object indicates the port being configured.')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANState.setDescription('The state of the logical port VLAN trunk.')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setDescription('This object indicates which switch port will sniff another port. A trunk port member cannot be configured as a target snooping port. The port number is the sequential (logical) number, which is also applied to the bridge MIB, etc.')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setDescription('This represents the port where ingress packets will be sniffed.')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setDescription('This represents the port where egress packets will be sniffed.')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortState.setDescription('This object indicates the port mirroring state. other (1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled (2) - After writing this value to the object, the corresponding entry will be removed from the table. enabled (3) - This entry resides in the table.')
swL2MirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5), )
if mibBuilder.loadTexts: swL2MirrorGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupTable.setDescription('This table specifies information about the Mirror group configuration.')
swL2MirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2MirrorGroupID"))
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setDescription('A list of information about each Mirror group configuration.')
swL2MirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2MirrorGroupID.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupID.setDescription('This object indicates the mirror group. The range of this object is (1..n), the value of n depends on detail project. ')
swL2MirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setDescription('This object manages this mirror group entry.')
swL2MirrorGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupState.setDescription('This object indicates the mirror group state.')
swL2MirrorGroupLogicTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupLogicTargetPort.setDescription('This object indicates the mirror group target port.')
swL2MirrorGroupPortSourceIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupPortSourceIngress.setDescription('This object indicates the mirror group ingress source ports.')
swL2MirrorGroupPortSourceEngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 10, 5, 1, 6), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupPortSourceEngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupPortSourceEngress.setDescription('This object indicates the mirror group engress source ports.')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifies that the port can just forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 14, 1, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information which specifies the port with its traffic forwarding list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list where a specific port can forward traffic.')
swL2MulticastFilterModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 17, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setDescription(' A table that contains information about the VLAN multicast filter mode.')
swL2MulticastFilterModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 17, 1, 1), ).setIndexNames((0, "DGS-3420-52P-L2MGMT-MIB", "swL2MulticastFilterVid"))
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setDescription('A list of multicast filter mode information for each VLAN. ')
swL2MulticastFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVid.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterVid.setDescription('Indicates the VID for each VLAN.')
swL2MulticastFilterVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setDescription('Specifies the multicast filter mode for each VLAN.')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1))
swL2NotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2, 0))
swL2macNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2macNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: swL2macNotificationSeverity.setDescription('Indicates the level of macNotification detection.')
swL2PortSecurityViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setDescription('Indicates the level of PortSecurityViolation detection.')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2, 0, 1)).setObjects(("DGS-3420-52P-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicates the MAC address variations in the address table . ')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2, 0, 2)).setObjects(("PORT-SECURITY-MIB", "swPortSecPortIndex"), ("DGS-3420-52P-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setDescription('When the port_security trap is enabled, new MAC addresses that violate the pre-defined port security configuration will trigger trap messages to be sent out.')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates information about the last time the system rebooted.')
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 5, 2, 100, 1, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setDescription('This object indicates the MAC address that violated the port security configuration.')
mibBuilder.exportSymbols("DGS-3420-52P-L2MGMT-MIB", swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2DevCtrl=swL2DevCtrl, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swl2NotificationBidings=swl2NotificationBidings, swL2VlanPortInfoTable=swL2VlanPortInfoTable, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2DevCtrlCFMMaEntry=swL2DevCtrlCFMMaEntry, VlanId=VlanId, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2macNotificationSeverity=swL2macNotificationSeverity, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2VlanStaticTable=swL2VlanStaticTable, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2MirrorGroupPortSourceEngress=swL2MirrorGroupPortSourceEngress, PortList=PortList, swL2PortJumboFrameCtrlTable=swL2PortJumboFrameCtrlTable, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2MirrorGroupTable=swL2MirrorGroupTable, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2TrunkIndex=swL2TrunkIndex, swL2NotifyPrefix=swL2NotifyPrefix, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2VLANMgmt=swL2VLANMgmt, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2VLANAdvertisement=swL2VLANAdvertisement, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2DevCtrlSnmpTrapState=swL2DevCtrlSnmpTrapState, swL2MulticastFilterVid=swL2MulticastFilterVid, swL2NotifyMgmt=swL2NotifyMgmt, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2DevCtrlCFMMaMode=swL2DevCtrlCFMMaMode, swL2MulticastFilterMode=swL2MulticastFilterMode, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2macNotification=swL2macNotification, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2MirrorGroupLogicTargetPort=swL2MirrorGroupLogicTargetPort, swL2MulticastFilterVlanMode=swL2MulticastFilterVlanMode, swL2DevAlarm=swL2DevAlarm, swL2PortJumboFrameCtrlEntry=swL2PortJumboFrameCtrlEntry, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2MirrorGroupEntry=swL2MirrorGroupEntry, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2MirrorGroupID=swL2MirrorGroupID, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2MirrorGroupState=swL2MirrorGroupState, swL2VlanStaticEntry=swL2VlanStaticEntry, swL2DevInfo=swL2DevInfo, swL2PortInfoTable=swL2PortInfoTable, swL2DevCtrlCFMMepEntry=swL2DevCtrlCFMMepEntry, swL2TrafficSegPort=swL2TrafficSegPort, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2VlanPortInfoPortIndex=swL2VlanPortInfoPortIndex, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2VlanPortInfoEntry=swL2VlanPortInfoEntry, swL2VlanPortInfoPortRole=swL2VlanPortInfoPortRole, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2VlanPortInfoVid=swL2VlanPortInfoVid, swL2Notify=swL2Notify, swL2TrunkVLANState=swL2TrunkVLANState, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2DevMgmt=swL2DevMgmt, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2PortJumboFrameCtrlPortState=swL2PortJumboFrameCtrlPortState, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2PortSecurityViolationSeverity=swL2PortSecurityViolationSeverity, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2TrunkMember=swL2TrunkMember, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2DevCtrlCFMMaTable=swL2DevCtrlCFMMaTable, swL2DevCtrlCFMMepTable=swL2DevCtrlCFMMepTable, MacAddress=MacAddress, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2TrunkType=swL2TrunkType, swL2MulticastFilterModeVlanTable=swL2MulticastFilterModeVlanTable, swL2NotifFirmware=swL2NotifFirmware, swL2macNotifyInfo=swL2macNotifyInfo, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2TrunkState=swL2TrunkState, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2VlanIndex=swL2VlanIndex, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2MgmtMIB=swL2MgmtMIB, swL2MirrorPortState=swL2MirrorPortState, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2DevCtrlCFMMepMode=swL2DevCtrlCFMMepMode, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, swL2MirrorGroupPortSourceIngress=swL2MirrorGroupPortSourceIngress, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2PortMgmt=swL2PortMgmt, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2MirrorGroupRowStatus=swL2MirrorGroupRowStatus, swL2NniGvrpBpduAddress=swL2NniGvrpBpduAddress, swL2MACNotifyState=swL2MACNotifyState, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2PortJumboFrameCtrlPortIndex=swL2PortJumboFrameCtrlPortIndex, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2PortCtrlLearningState=swL2PortCtrlLearningState, swL2TrafficSegTable=swL2TrafficSegTable, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2TrunkMgmt=swL2TrunkMgmt, swL2MirrorMgmt=swL2MirrorMgmt, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2MulticastFilterModeVlanEntry=swL2MulticastFilterModeVlanEntry, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, swL2PortCtrlTable=swL2PortCtrlTable, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, swL2PortInfoType=swL2PortInfoType)
