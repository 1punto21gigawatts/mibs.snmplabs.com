#
# PySNMP MIB module INFORMANT-WMI-CITRIX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-WMI-CITRIX
# Produced by pysmi-0.3.4 at Wed May  1 13:53:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, TimeTicks, Gauge32, Counter32, Unsigned32, NotificationType, Bits, IpAddress, ModuleIdentity, Counter64, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "TimeTicks", "Gauge32", "Counter32", "Unsigned32", "NotificationType", "Bits", "IpAddress", "ModuleIdentity", "Counter64", "MibIdentifier", "iso")
TruthValue, TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DateAndTime", "DisplayString")
WtcsDisplayString, informant = mibBuilder.importSymbols("WTCS", "WtcsDisplayString", "informant")
citrixWmi = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 42))
citrixWmi.setRevisions(('2008-06-02 17:14',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: citrixWmi.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: citrixWmi.setLastUpdated('200806021714Z')
if mibBuilder.loadTexts: citrixWmi.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: citrixWmi.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams.org')
if mibBuilder.loadTexts: citrixWmi.setDescription('The MIB module for informant Citrix WMI entities.')
citrixWmiCitrix = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1))
if mibBuilder.loadTexts: citrixWmiCitrix.setStatus('current')
if mibBuilder.loadTexts: citrixWmiCitrix.setDescription('Provides WMI information on the Citrix Application Services')
citrixAccountAuthorityTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 1), )
if mibBuilder.loadTexts: citrixAccountAuthorityTable.setStatus('current')
if mibBuilder.loadTexts: citrixAccountAuthorityTable.setDescription('The user authentication entities, typically NT Domains.Enumerate this class to get all Acc Authorities in current farm')
citrixAccountAuthorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 1, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxAccountAuthorityIndex"))
if mibBuilder.loadTexts: citrixAccountAuthorityEntry.setStatus('current')
if mibBuilder.loadTexts: citrixAccountAuthorityEntry.setDescription('None')
ctxAccountAuthorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAccountAuthorityIndex.setStatus('current')
if mibBuilder.loadTexts: ctxAccountAuthorityIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxAccountAuthorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAccountAuthorityName.setStatus('current')
if mibBuilder.loadTexts: ctxAccountAuthorityName.setDescription('The account authority name. For Windows NT domain and ADS users, the account authority name is the domain name. For NDS, this is the NDS tree name.')
ctxAccountAuthorityType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknownAccountAuthority", 0), ("windowsNTDomainOrADS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAccountAuthorityType.setStatus('current')
if mibBuilder.loadTexts: ctxAccountAuthorityType.setDescription('The account authority type.')
citrixApplicationFolderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 2), )
if mibBuilder.loadTexts: citrixApplicationFolderTable.setStatus('current')
if mibBuilder.loadTexts: citrixApplicationFolderTable.setDescription('Applications can be organised by folder for Administrative convenience')
citrixApplicationFolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 2, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxApplicationFolderIndex"))
if mibBuilder.loadTexts: citrixApplicationFolderEntry.setStatus('current')
if mibBuilder.loadTexts: citrixApplicationFolderEntry.setDescription('None')
ctxApplicationFolderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxApplicationFolderIndex.setStatus('current')
if mibBuilder.loadTexts: ctxApplicationFolderIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxApplicationFolderFolderDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxApplicationFolderFolderDN.setStatus('current')
if mibBuilder.loadTexts: ctxApplicationFolderFolderDN.setDescription('Get the folder?s distinguished name.')
ctxApplicationFolderFolderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxApplicationFolderFolderName.setStatus('current')
if mibBuilder.loadTexts: ctxApplicationFolderFolderName.setDescription('Get the name of the folder object.')
citrixGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 3), )
if mibBuilder.loadTexts: citrixGroupTable.setStatus('current')
if mibBuilder.loadTexts: citrixGroupTable.setDescription('Equivalent data but deliberately kept separate from CIMv2 alternatives for simplicity & to avoid cross namespace searches. See CIMv2:Win32_Group for full OS settings')
citrixGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 3, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxGroupIndex"))
if mibBuilder.loadTexts: citrixGroupEntry.setStatus('current')
if mibBuilder.loadTexts: citrixGroupEntry.setDescription('None')
ctxGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ctxGroupIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxGroupAccAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 3, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGroupAccAuthority.setStatus('current')
if mibBuilder.loadTexts: ctxGroupAccAuthority.setDescription('Authority in which this group exists')
ctxGroupAccountType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknownAccountType", 0), ("localGroup", 1), ("globalGroup", 2), ("universalGroup", 3), ("domainLocalGroup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGroupAccountType.setStatus('current')
if mibBuilder.loadTexts: ctxGroupAccountType.setDescription('The account authority type.')
ctxGroupGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 3, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGroupGroupName.setStatus('current')
if mibBuilder.loadTexts: ctxGroupGroupName.setDescription('Get the group name.')
citrixServerFolderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 4), )
if mibBuilder.loadTexts: citrixServerFolderTable.setStatus('current')
if mibBuilder.loadTexts: citrixServerFolderTable.setDescription('Servers can be grouped by Folder for administrative convenience')
citrixServerFolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 4, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxServerFolderIndex"))
if mibBuilder.loadTexts: citrixServerFolderEntry.setStatus('current')
if mibBuilder.loadTexts: citrixServerFolderEntry.setDescription('None')
ctxServerFolderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServerFolderIndex.setStatus('current')
if mibBuilder.loadTexts: ctxServerFolderIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxServerFolderFolderDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 4, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServerFolderFolderDN.setStatus('current')
if mibBuilder.loadTexts: ctxServerFolderFolderDN.setDescription('Get the folder?s distinguished name.')
ctxServerFolderFolderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 4, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServerFolderFolderName.setStatus('current')
if mibBuilder.loadTexts: ctxServerFolderFolderName.setDescription('Get the name of the folder object.')
citrixServersInFolderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 5), )
if mibBuilder.loadTexts: citrixServersInFolderTable.setStatus('current')
if mibBuilder.loadTexts: citrixServersInFolderTable.setDescription('Enumeration gives all Servers currently organised into a particular folder')
citrixServersInFolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 5, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxServersInFolderIndex"))
if mibBuilder.loadTexts: citrixServersInFolderEntry.setStatus('current')
if mibBuilder.loadTexts: citrixServersInFolderEntry.setDescription('None')
ctxServersInFolderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServersInFolderIndex.setStatus('current')
if mibBuilder.loadTexts: ctxServersInFolderIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxServersInFolderAntecedent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 5, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServersInFolderAntecedent.setStatus('current')
if mibBuilder.loadTexts: ctxServersInFolderAntecedent.setDescription('Get the folder?s distinguished name.')
ctxServersInFolderDependent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 5, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServersInFolderDependent.setStatus('current')
if mibBuilder.loadTexts: ctxServersInFolderDependent.setDescription('The name of the server')
citrixServersInZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 6), )
if mibBuilder.loadTexts: citrixServersInZoneTable.setStatus('current')
if mibBuilder.loadTexts: citrixServersInZoneTable.setDescription('Servers collected in a Zone')
citrixServersInZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 6, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxServersInZoneIndex"))
if mibBuilder.loadTexts: citrixServersInZoneEntry.setStatus('current')
if mibBuilder.loadTexts: citrixServersInZoneEntry.setDescription('None')
ctxServersInZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServersInZoneIndex.setStatus('current')
if mibBuilder.loadTexts: ctxServersInZoneIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxServersInZoneServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 6, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServersInZoneServer.setStatus('current')
if mibBuilder.loadTexts: ctxServersInZoneServer.setDescription('The name of the server')
ctxServersInZoneZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 6, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServersInZoneZone.setStatus('current')
if mibBuilder.loadTexts: ctxServersInZoneZone.setDescription('Zone in which this server operates')
citrixUserTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 7), )
if mibBuilder.loadTexts: citrixUserTable.setStatus('current')
if mibBuilder.loadTexts: citrixUserTable.setDescription('Equivalent data but deliberately kept separate from CIMv2 alternatives for simplicity & to avoid cross namespace searches. See CIMv2:Win32_Account for full OS settings')
citrixUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 7, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxUserIndex"))
if mibBuilder.loadTexts: citrixUserEntry.setStatus('current')
if mibBuilder.loadTexts: citrixUserEntry.setDescription('None')
ctxUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUserIndex.setStatus('current')
if mibBuilder.loadTexts: ctxUserIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxUserAccAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 7, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUserAccAuthority.setStatus('current')
if mibBuilder.loadTexts: ctxUserAccAuthority.setDescription('Authority in which this user exists')
ctxUserAccountType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknownAccountType", 0), ("localUser", 1), ("domainUser", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUserAccountType.setStatus('current')
if mibBuilder.loadTexts: ctxUserAccountType.setDescription('The account type')
ctxUserUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 7, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUserUserName.setStatus('current')
if mibBuilder.loadTexts: ctxUserUserName.setDescription('The user name')
citrixUsersInGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 8), )
if mibBuilder.loadTexts: citrixUsersInGroupTable.setStatus('current')
if mibBuilder.loadTexts: citrixUsersInGroupTable.setDescription('No GroupsForUser at the moment unless performance reasons require it')
citrixUsersInGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 8, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxUsersInGroupIndex"))
if mibBuilder.loadTexts: citrixUsersInGroupEntry.setStatus('current')
if mibBuilder.loadTexts: citrixUsersInGroupEntry.setDescription('None')
ctxUsersInGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUsersInGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ctxUsersInGroupIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxUsersInGroupAntecedent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 8, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUsersInGroupAntecedent.setStatus('current')
if mibBuilder.loadTexts: ctxUsersInGroupAntecedent.setDescription('Get the group name.')
ctxUsersInGroupDependent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 8, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxUsersInGroupDependent.setStatus('current')
if mibBuilder.loadTexts: ctxUsersInGroupDependent.setDescription('Get the user name')
citrixZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 9), )
if mibBuilder.loadTexts: citrixZoneTable.setStatus('current')
if mibBuilder.loadTexts: citrixZoneTable.setDescription('Subset of servers in a Farm used for data collection efficiency. An enumeration of these instances gives all the Zones in a Farm')
citrixZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 9, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxZoneIndex"))
if mibBuilder.loadTexts: citrixZoneEntry.setStatus('current')
if mibBuilder.loadTexts: citrixZoneEntry.setDescription('None')
ctxZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxZoneIndex.setStatus('current')
if mibBuilder.loadTexts: ctxZoneIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxZoneDataCollector = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 9, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxZoneDataCollector.setStatus('current')
if mibBuilder.loadTexts: ctxZoneDataCollector.setDescription('One Server in a Zone is elected as the data collector for the other servers')
ctxZoneNumServersInZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxZoneNumServersInZone.setStatus('current')
if mibBuilder.loadTexts: ctxZoneNumServersInZone.setDescription('Too many servers in a Zone can deteriorate data collection performance')
ctxZoneZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 9, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxZoneZoneName.setStatus('current')
if mibBuilder.loadTexts: ctxZoneZoneName.setDescription('Get the name of the zone')
metaframeApplLoadLevelTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 10), )
if mibBuilder.loadTexts: metaframeApplLoadLevelTable.setStatus('current')
if mibBuilder.loadTexts: metaframeApplLoadLevelTable.setDescription('Load Manager load value for Published Applications. Enumeration just gives application load for the local server')
metaframeApplLoadLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 10, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfApplicationLoadLevelIndex"))
if mibBuilder.loadTexts: metaframeApplLoadLevelEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeApplLoadLevelEntry.setDescription('None')
mfApplicationLoadLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfApplicationLoadLevelIndex.setStatus('current')
if mibBuilder.loadTexts: mfApplicationLoadLevelIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfApplicationLoadLevelAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 10, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfApplicationLoadLevelAppName.setStatus('current')
if mibBuilder.loadTexts: mfApplicationLoadLevelAppName.setDescription('Get the application name')
mfApplicationLoadLevelLoadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfApplicationLoadLevelLoadLevel.setStatus('current')
if mibBuilder.loadTexts: mfApplicationLoadLevelLoadLevel.setDescription('Get the load level')
mfApplicationLoadLevelServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 10, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfApplicationLoadLevelServerName.setStatus('current')
if mibBuilder.loadTexts: mfApplicationLoadLevelServerName.setDescription('Get the server name')
metaframeApplPublishOnSvrTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 11), )
if mibBuilder.loadTexts: metaframeApplPublishOnSvrTable.setStatus('current')
if mibBuilder.loadTexts: metaframeApplPublishOnSvrTable.setDescription('The set of applications that can be run from this server. Enumeration gives applications published across the farm')
metaframeApplPublishOnSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 11, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfaposIndex"))
if mibBuilder.loadTexts: metaframeApplPublishOnSvrEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeApplPublishOnSvrEntry.setDescription('None')
mfaposIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfaposIndex.setStatus('current')
if mibBuilder.loadTexts: mfaposIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfaposCtxServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 11, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfaposCtxServer.setStatus('current')
if mibBuilder.loadTexts: mfaposCtxServer.setDescription('Return the server name')
mfaposWinApp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 11, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfaposWinApp.setStatus('current')
if mibBuilder.loadTexts: mfaposWinApp.setDescription('Return the application name.')
metaframeApplRunOnServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 12), )
if mibBuilder.loadTexts: metaframeApplRunOnServerTable.setStatus('current')
if mibBuilder.loadTexts: metaframeApplRunOnServerTable.setDescription('The set of applications that are currently executing on this server')
metaframeApplRunOnServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 12, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfarosIndex"))
if mibBuilder.loadTexts: metaframeApplRunOnServerEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeApplRunOnServerEntry.setDescription('None')
mfarosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfarosIndex.setStatus('current')
if mibBuilder.loadTexts: mfarosIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfarosApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 12, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfarosApplication.setStatus('current')
if mibBuilder.loadTexts: mfarosApplication.setDescription('Return the appliation name')
mfarosProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfarosProcessId.setStatus('current')
if mibBuilder.loadTexts: mfarosProcessId.setDescription('Return the process ID')
mfarosServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 12, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfarosServer.setStatus('current')
if mibBuilder.loadTexts: mfarosServer.setDescription('Get the name of the server.')
metaframeAppsForGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 13), )
if mibBuilder.loadTexts: metaframeAppsForGroupTable.setStatus('current')
if mibBuilder.loadTexts: metaframeAppsForGroupTable.setDescription('The Applications that are published for a particular group')
metaframeAppsForGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 13, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfAppsForGroupIndex"))
if mibBuilder.loadTexts: metaframeAppsForGroupEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeAppsForGroupEntry.setDescription('None')
mfAppsForGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsForGroupIndex.setStatus('current')
if mibBuilder.loadTexts: mfAppsForGroupIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfAppsForGroupAntecedent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 13, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsForGroupAntecedent.setStatus('current')
if mibBuilder.loadTexts: mfAppsForGroupAntecedent.setDescription('Get the group name.')
mfAppsForGroupDependent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 13, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsForGroupDependent.setStatus('current')
if mibBuilder.loadTexts: mfAppsForGroupDependent.setDescription('Get the application name')
metaframeAppsInFolderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 14), )
if mibBuilder.loadTexts: metaframeAppsInFolderTable.setStatus('current')
if mibBuilder.loadTexts: metaframeAppsInFolderTable.setDescription('No Description')
metaframeAppsInFolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 14, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfAppsInFolderIndex"))
if mibBuilder.loadTexts: metaframeAppsInFolderEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeAppsInFolderEntry.setDescription('None')
mfAppsInFolderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsInFolderIndex.setStatus('current')
if mibBuilder.loadTexts: mfAppsInFolderIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfAppsInFolderAntecedent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 14, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsInFolderAntecedent.setStatus('current')
if mibBuilder.loadTexts: mfAppsInFolderAntecedent.setDescription('Get the name of the folder object.')
mfAppsInFolderDependent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 14, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsInFolderDependent.setStatus('current')
if mibBuilder.loadTexts: mfAppsInFolderDependent.setDescription('Get the application name')
metaframeAppsInSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 15), )
if mibBuilder.loadTexts: metaframeAppsInSessionTable.setStatus('current')
if mibBuilder.loadTexts: metaframeAppsInSessionTable.setDescription('Sessions have a primary app but can also enumerate all apps within a session')
metaframeAppsInSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 15, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfAppsInSessionIndex"))
if mibBuilder.loadTexts: metaframeAppsInSessionEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeAppsInSessionEntry.setDescription('None')
mfAppsInSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsInSessionIndex.setStatus('current')
if mibBuilder.loadTexts: mfAppsInSessionIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfAppsInSessionAntecedent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 15, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsInSessionAntecedent.setStatus('current')
if mibBuilder.loadTexts: mfAppsInSessionAntecedent.setDescription('Get the session name.')
mfAppsInSessionDependent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 15, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfAppsInSessionDependent.setStatus('current')
if mibBuilder.loadTexts: mfAppsInSessionDependent.setDescription('Get the application name.')
metaframeDisconnectSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 16), )
if mibBuilder.loadTexts: metaframeDisconnectSessionTable.setStatus('current')
if mibBuilder.loadTexts: metaframeDisconnectSessionTable.setDescription('Record of Disconnected Session occurences. Note that timestamps are serverspecific and cannot be guaranteed to match across different machines.Generated when a session disconnect occurs while subscribing to MetaFrameEvent.')
metaframeDisconnectSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 16, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfdshIndex"))
if mibBuilder.loadTexts: metaframeDisconnectSessionEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeDisconnectSessionEntry.setDescription('None')
mfdshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfdshIndex.setStatus('current')
if mibBuilder.loadTexts: mfdshIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfdshHowMany = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfdshHowMany.setStatus('current')
if mibBuilder.loadTexts: mfdshHowMany.setDescription('How Many events occurred since the last Happening was recordedFor those events where not all instances can be captured')
mfdshWhen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 16, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfdshWhen.setStatus('current')
if mibBuilder.loadTexts: mfdshWhen.setDescription('Get the time of the last Happening event')
metaframeICAClientTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17), )
if mibBuilder.loadTexts: metaframeICAClientTable.setStatus('current')
if mibBuilder.loadTexts: metaframeICAClientTable.setDescription('Attributes of the client used to connect to a session')
metaframeICAClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfICAClientIndex"))
if mibBuilder.loadTexts: metaframeICAClientEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeICAClientEntry.setDescription('None')
mfICAClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientIndex.setStatus('current')
if mibBuilder.loadTexts: mfICAClientIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfICAClientClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientAddress.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientAddress.setDescription('Get the client?s address. The returned client address is a string; this is the network address of the client. The address type is returned by the get_ClientAddrFamily call. If the address is an IP address, the returned string is in dotted-decimal format.')
mfICAClientClientAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedProtocol", 0), ("internetProtocolIP", 1), ("novellIPXSPX", 2), ("microsoftNetBIOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientAddrFamily.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientAddrFamily.setDescription('Get the client?s address family. This property indicates the network protocol used by the client to connect to the MetaFrame XP server. Use the ClientAddress property to get the client address.')
mfICAClientClientBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientBuild.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientBuild.setDescription('Get the client?s build number.')
mfICAClientClientCacheDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientCacheDisk.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientCacheDisk.setDescription('Get the client?s disk cache size.')
mfICAClientClientCacheLowMem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientCacheLowMem.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientCacheLowMem.setDescription('Return the client cache size for low/virtual memory.')
mfICAClientClientCacheTiny = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientCacheTiny.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientCacheTiny.setDescription('Get the client?s cache size for small objects.')
mfICAClientClientCacheXms = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientCacheXms.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientCacheXms.setDescription('Return the client cache size for XMS memory.')
mfICAClientClientColorDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientColorDepth.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientColorDepth.setDescription('Get the client display?s color depth. This returns the client display?s color depth, not the session?s color depth.')
mfICAClientClientDimBitmapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientDimBitmapMin.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientDimBitmapMin.setDescription('Return the client persistent cache minimum bitmap size.')
mfICAClientClientDimCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientDimCacheSize.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientDimCacheSize.setDescription('Return the client persistent cache size.')
mfICAClientClientDimVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientDimVersion.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientDimVersion.setDescription('Get the client?s persistent cache version.')
mfICAClientClientDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientDirectory.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientDirectory.setDescription('Get the client?s directory. This directory is the full path name on the client device where the client software is installed.')
mfICAClientClientEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientEncryption.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientEncryption.setDescription('Get the client?s encryption level. This returns the encryption level at which the connection was made.')
mfICAClientClientHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientHardwareID.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientHardwareID.setDescription('Get the client?s hardware ID. The ID returned is a serial number generated by the client. Do not use this as a unique client identifier. Instead, use the client?s IP address or client name to identify a client.')
mfICAClientClientHRes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientHRes.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientHRes.setDescription('Get the client display?s horizontal resolution. This is the client system?s display resolution, not the session?s horizontal resolution.')
mfICAClientClientLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientLicense.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientLicense.setDescription('Get the client?s license. This applies only to clients that have and use client connection licenses. This call should be ignored for MetaFrame XP.')
mfICAClientClientModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientModemName.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientModemName.setDescription('Get the client?s modem name. This property is valid only if the session is connected using a dial-up line. This name is empty if the session is connected using a LAN.')
mfICAClientClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientName.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientName.setDescription('Return the session client name. The session client name is usually the client device name. The client user can change the client device name to a string that is a valid client name.')
mfICAClientClientProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknownClient", 0), ("windows32Bit", 1), ("windows16Bit", 2), ("dos32Bit", 3), ("dos32Bit2", 4), ("windowsCE", 5), ("unix", 6), ("java", 7), ("web", 8), ("citrixDirectICAStation", 9), ("citrixTextTerminal", 10), ("citrixConsole", 11), ("citrixMacClient", 12), ("oemAndOther", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientProductID.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientProductID.setDescription('Get the client product ID.')
mfICAClientClientProductIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientProductIDValue.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientProductIDValue.setDescription("Returns the client's product ID value. Use this property to obtain the value of the client product ID. The value returned by the ClientProductID property is the client product type. This property returns the actual client product ID as shown in the Management Console for MetaFrame XP.")
mfICAClientClientVRes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientClientVRes.setStatus('current')
if mibBuilder.loadTexts: mfICAClientClientVRes.setDescription('Get the client display?s vertical resolution. This is the client machine?s display vertical resolution, not the session?s vertical resolution.')
mfICAClientICABufLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 17, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfICAClientICABufLen.setStatus('current')
if mibBuilder.loadTexts: mfICAClientICABufLen.setDescription('Return the ICA buffer length of the session.')
metaframeInstalledSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 18), )
if mibBuilder.loadTexts: metaframeInstalledSoftwareTable.setStatus('current')
if mibBuilder.loadTexts: metaframeInstalledSoftwareTable.setDescription('Association class used to determine the details of the MF software on all servers in the Farm')
metaframeInstalledSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 18, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfInstalledSoftwareIndex"))
if mibBuilder.loadTexts: metaframeInstalledSoftwareEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeInstalledSoftwareEntry.setDescription('None')
mfInstalledSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfInstalledSoftwareIndex.setStatus('current')
if mibBuilder.loadTexts: mfInstalledSoftwareIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfInstalledSoftwareServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 18, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfInstalledSoftwareServer.setStatus('current')
if mibBuilder.loadTexts: mfInstalledSoftwareServer.setDescription('Return the server name')
mfInstalledSoftwareSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 18, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfInstalledSoftwareSoftware.setStatus('current')
if mibBuilder.loadTexts: mfInstalledSoftwareSoftware.setDescription('Return the product name')
metaframeProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19), )
if mibBuilder.loadTexts: metaframeProcessTable.setStatus('current')
if mibBuilder.loadTexts: metaframeProcessTable.setDescription('An OS process running within a Session. Enum gives all process on current serverUse the processID with the CIMv2:Win32_Process class for more OS details')
metaframeProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfProcessIndex"))
if mibBuilder.loadTexts: metaframeProcessEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeProcessEntry.setDescription('None')
mfProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessIndex.setStatus('current')
if mibBuilder.loadTexts: mfProcessIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfProcessProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessProcessID.setStatus('current')
if mibBuilder.loadTexts: mfProcessProcessID.setDescription('Get process ID.')
mfProcessProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessProcessName.setStatus('current')
if mibBuilder.loadTexts: mfProcessProcessName.setDescription('Return the process name.')
mfProcessProcessState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("unknownState", 0), ("processInitialized", 1), ("processIsReadyToRun", 2), ("processIsRunning", 3), ("processIsStandingBy", 4), ("processTerminated", 5), ("processInTransit", 6), ("waitingOnExecutive", 7), ("waitingOnFreePage", 8), ("waitingToBePagedIn", 9), ("waitingForMemory", 10), ("executionDelayed", 11), ("processSuspended", 12), ("waitingOnUserRequest", 13), ("eventPairHigh", 14), ("eventPairLow", 15), ("lpcReceive", 16), ("lpcReply", 17), ("waitForVirtualMemory", 18), ("processIsPagedOut", 19), ("waitForOtherReasons", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessProcessState.setStatus('current')
if mibBuilder.loadTexts: mfProcessProcessState.setDescription('Get the state of the process.')
mfProcessServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessServerName.setStatus('current')
if mibBuilder.loadTexts: mfProcessServerName.setDescription('Get server name. This returns the name of the server on which this process is running.')
mfProcessSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessSessionID.setStatus('current')
if mibBuilder.loadTexts: mfProcessSessionID.setDescription('Return the session ID. This returns the ID of the session in which the process is running.')
mfProcessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 19, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessUserName.setStatus('current')
if mibBuilder.loadTexts: mfProcessUserName.setDescription('Get the user name. This is the name of the user who owns the current process. Some system processes may not have a user name.')
metaframeProcessesInSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 20), )
if mibBuilder.loadTexts: metaframeProcessesInSessionTable.setStatus('current')
if mibBuilder.loadTexts: metaframeProcessesInSessionTable.setDescription('No Description')
metaframeProcessesInSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 20, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfProcessesInSessionIndex"))
if mibBuilder.loadTexts: metaframeProcessesInSessionEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeProcessesInSessionEntry.setDescription('None')
mfProcessesInSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessesInSessionIndex.setStatus('current')
if mibBuilder.loadTexts: mfProcessesInSessionIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfProcessesInSessionAntecedent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 20, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessesInSessionAntecedent.setStatus('current')
if mibBuilder.loadTexts: mfProcessesInSessionAntecedent.setDescription('Get the session name.')
mfProcessesInSessionDependent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 20, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfProcessesInSessionDependent.setStatus('current')
if mibBuilder.loadTexts: mfProcessesInSessionDependent.setDescription('Return the process name.')
metaframeSchemaVersionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 21), )
if mibBuilder.loadTexts: metaframeSchemaVersionTable.setStatus('current')
if mibBuilder.loadTexts: metaframeSchemaVersionTable.setDescription('Schema Version. Used to verify that MOF & Dynamic provider are in step')
metaframeSchemaVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 21, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfSchemaVersionIndex"))
if mibBuilder.loadTexts: metaframeSchemaVersionEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeSchemaVersionEntry.setDescription('None')
mfSchemaVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSchemaVersionIndex.setStatus('current')
if mibBuilder.loadTexts: mfSchemaVersionIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfSchemaVersionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 21, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSchemaVersionVersion.setStatus('current')
if mibBuilder.loadTexts: mfSchemaVersionVersion.setDescription('Get the schema version')
metaframeServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22), )
if mibBuilder.loadTexts: metaframeServerTable.setStatus('current')
if mibBuilder.loadTexts: metaframeServerTable.setDescription('Where the Citrix Server has MetaFrame installed this class applies. Enumeration just gives information on the local server.')
metaframeServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfServerIndex"))
if mibBuilder.loadTexts: metaframeServerEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeServerEntry.setDescription('None')
mfServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerIndex.setStatus('current')
if mibBuilder.loadTexts: mfServerIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfServerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerDomain.setStatus('current')
if mibBuilder.loadTexts: mfServerDomain.setDescription('Primary domain of this server')
mfServerFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerFarmName.setStatus('current')
if mibBuilder.loadTexts: mfServerFarmName.setDescription('Farm in which this server operates')
mfServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: mfServerIPAddress.setDescription('The principal IP address of the server. Some servers mayhave several network addresses. See CIMv2:Win32_NetworkAdapterConfiguration')
mfServerLoginsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerLoginsEnabled.setStatus('current')
if mibBuilder.loadTexts: mfServerLoginsEnabled.setDescription('Are logins enabled on this server')
mfServerNumberOfActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerNumberOfActiveSessions.setStatus('current')
if mibBuilder.loadTexts: mfServerNumberOfActiveSessions.setDescription('Return the number of active sessions')
mfServerNumOfDisconnectSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerNumOfDisconnectSessions.setStatus('current')
if mibBuilder.loadTexts: mfServerNumOfDisconnectSessions.setDescription('Return the number of disconnected sessions')
mfServerNumberOfSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerNumberOfSessions.setStatus('current')
if mibBuilder.loadTexts: mfServerNumberOfSessions.setDescription('Return the total number of sessions')
mfServerServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerServerName.setStatus('current')
if mibBuilder.loadTexts: mfServerServerName.setDescription('Get the name of the server.')
mfServerServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknownObject", 0), ("windowsServer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerServerType.setStatus('current')
if mibBuilder.loadTexts: mfServerServerType.setDescription('Get the type of server object. The only value returned is MetaFrameWinSrvObject. The type of object is used to identify the type of server. Only MetaFrame XP Server for Windows is supported.')
mfServerZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerZoneName.setStatus('current')
if mibBuilder.loadTexts: mfServerZoneName.setDescription('Zone in which this server operates')
mfServerZoneRanking = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknownRank", 0), ("zoneDataCollector", 1), ("backupDataCollector", 2), ("serverIsAZoneMember", 3), ("cannotBeDataCollector", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerZoneRanking.setStatus('current')
if mibBuilder.loadTexts: mfServerZoneRanking.setDescription('Servers role in Zone')
metaframeServerLoadLevelTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 23), )
if mibBuilder.loadTexts: metaframeServerLoadLevelTable.setStatus('current')
if mibBuilder.loadTexts: metaframeServerLoadLevelTable.setDescription('Load Manager load value for MetaFrame Servers. Enumeration gives just the load level for the local server')
metaframeServerLoadLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 23, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfServerLoadLevelIndex"))
if mibBuilder.loadTexts: metaframeServerLoadLevelEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeServerLoadLevelEntry.setDescription('None')
mfServerLoadLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerLoadLevelIndex.setStatus('current')
if mibBuilder.loadTexts: mfServerLoadLevelIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfServerLoadLevelLoadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerLoadLevelLoadLevel.setStatus('current')
if mibBuilder.loadTexts: mfServerLoadLevelLoadLevel.setDescription('Return the load level')
mfServerLoadLevelServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 23, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfServerLoadLevelServerName.setStatus('current')
if mibBuilder.loadTexts: mfServerLoadLevelServerName.setDescription('Return the server name')
metaframeSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24), )
if mibBuilder.loadTexts: metaframeSessionTable.setStatus('current')
if mibBuilder.loadTexts: metaframeSessionTable.setDescription('Attributes of a MetaFrame ICA session on a server. Enumeration gives all sessions on the server')
metaframeSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfSessionIndex"))
if mibBuilder.loadTexts: metaframeSessionEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeSessionEntry.setDescription('None')
mfSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionIndex.setStatus('current')
if mibBuilder.loadTexts: mfSessionIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfSessionClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionClient.setStatus('current')
if mibBuilder.loadTexts: mfSessionClient.setDescription('Return the session client name. The session client name is usually the client device name. The client user can change the client device name to a string that is a valid client name.')
mfSessionConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionConnectTime.setStatus('current')
if mibBuilder.loadTexts: mfSessionConnectTime.setDescription('Return the connect time of the session.')
mfSessionCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionCurrentTime.setStatus('current')
if mibBuilder.loadTexts: mfSessionCurrentTime.setDescription('Return the current time. The returned time is not the exact time at which this call is made. Its value reflects the time when one of the session?s get_XxxTime functions was called')
mfSessionDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionDisconnectTime.setStatus('current')
if mibBuilder.loadTexts: mfSessionDisconnectTime.setDescription('Return the last session disconnect time. If the session is connected, the time is 0 for all the values returned by the IMetaFrameTime interface. If the session is disconnected, it contains the disconnect time.')
mfSessionLastInputTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionLastInputTime.setStatus('current')
if mibBuilder.loadTexts: mfSessionLastInputTime.setDescription('Get the session?s last input time. To get an updated session last input time, a new session object should be created to read the updated time. The value returned by this property is the time when this property is read the first time. Subsequent calls to this property return the same value.')
mfSessionLogonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionLogonTime.setStatus('current')
if mibBuilder.loadTexts: mfSessionLogonTime.setDescription('Return the session logon time. See the description for the MetaFrameTime object for more information about accessing the returned time.')
mfSessionNumberOfApps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionNumberOfApps.setStatus('current')
if mibBuilder.loadTexts: mfSessionNumberOfApps.setDescription('Return the number of applications')
mfSessionServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionServerName.setStatus('current')
if mibBuilder.loadTexts: mfSessionServerName.setDescription('Included as a convenience for session summaries')
mfSessionSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionSessionID.setStatus('current')
if mibBuilder.loadTexts: mfSessionSessionID.setDescription('Get session ID.')
mfSessionSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionSessionName.setStatus('current')
if mibBuilder.loadTexts: mfSessionSessionName.setDescription('Get the session name.')
mfSessionSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userLoggedOn", 0), ("connectedToClient", 1), ("connectingToClient", 2), ("shadowingOtherSession", 3), ("loggedOnButNoClient", 4), ("waitingForConnection", 5), ("listeningForConnection", 6), ("resetInProgress", 7), ("downDueToError", 8), ("initializing", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionSessionState.setStatus('current')
if mibBuilder.loadTexts: mfSessionSessionState.setDescription('Return the current state of the session. If the returned session state is MFSessionStateStale, no further attempt to read other session properties should be made. This state indicates that the session may not exist anymore.')
mfSessionSessionUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 24, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSessionSessionUser.setStatus('current')
if mibBuilder.loadTexts: mfSessionSessionUser.setDescription('Return the name of the user who is running the session.')
metaframeSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25), )
if mibBuilder.loadTexts: metaframeSoftwareTable.setStatus('current')
if mibBuilder.loadTexts: metaframeSoftwareTable.setDescription('Additional attributes of the MetaFrame product')
metaframeSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfSoftwareIndex"))
if mibBuilder.loadTexts: metaframeSoftwareEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeSoftwareEntry.setDescription('None')
mfSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareIndex.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfSoftwareFeatureReleaseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareFeatureReleaseLevel.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareFeatureReleaseLevel.setDescription('Query the MetaFrame XP Feature Release level.')
mfSoftwareInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareInstallDate.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareInstallDate.setDescription('Query the MetaFrame XP installation date.')
mfSoftwareMFWinProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareMFWinProductCode.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareMFWinProductCode.setDescription('Return the server product code. A server must have the proper product code installed for it to accept connections from ICA Clients.')
mfSoftwareProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareProductName.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareProductName.setDescription('Return the product name')
mfSoftwareReleaseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareReleaseLevel.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareReleaseLevel.setDescription('Return the release level')
mfSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 25, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: mfSoftwareVersion.setDescription('Return the product version')
metaframeWinApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26), )
if mibBuilder.loadTexts: metaframeWinApplicationTable.setStatus('current')
if mibBuilder.loadTexts: metaframeWinApplicationTable.setDescription('Additional Attributes of a published app on a Windows server')
metaframeWinApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfWinApplIndex"))
if mibBuilder.loadTexts: metaframeWinApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeWinApplicationEntry.setDescription('None')
mfWinApplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplIndex.setStatus('current')
if mibBuilder.loadTexts: mfWinApplIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfWinApplApplicationID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplApplicationID.setStatus('current')
if mibBuilder.loadTexts: mfWinApplApplicationID.setDescription('Get the 64 bit application ID. The ID is a 64-bit number that uniquely identifies the application even if the application name changed. You can access the ID data by reading the properties of the IMetaFrameID interface.')
mfWinApplAppVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplAppVersion.setStatus('current')
if mibBuilder.loadTexts: mfWinApplAppVersion.setDescription('Return the application version. Read-only. The version of an application is the version number of the IMA application subsystem on which this application was originally published. Currently this value is always 1. When an application is created, an internal version number is assigned to the application. This version number is used to make sure that the application data will be handled properly when a version of the IMA application subsystem needs to read an application data published by a newer version of the IMA application publishing subsystem.')
mfWinApplBrowserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplBrowserName.setStatus('current')
if mibBuilder.loadTexts: mfWinApplBrowserName.setDescription('Get the application?s browser name. The browser name is another name used by the ICA browser.')
mfWinApplDefaultEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknownEncryption", 0), ("basicEncryptionRC5Logon", 1), ("rc540Bit", 2), ("rc556Bit", 3), ("rc5128Bit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultEncryption.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultEncryption.setDescription('Return the value of the default encryption level to specify the encryption requirements for ICA Clients connecting to the application. This specifies the encryption requirements for ICA Clients connecting to the application.')
mfWinApplDefaultInitProg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultInitProg.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultInitProg.setDescription('Return the value of the default initial program (command line). You can include the %* token in the command line to act as a placeholder for clientsupplied application parameters. When a client makes a connection request, the server replaces the %* token in the command line with application parameters provided by the client. This default initial command line is used only when a server doesn?t have its own command line specified.')
mfWinApplDefaultSoundType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknownSoundType", 0), ("noSound", 1), ("basicSound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultSoundType.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultSoundType.setDescription('Return the value of the default sound type, specifying the sound requirements for ICA Clients connecting to the application. This specifies the sound requirements for ICA Clients connecting to the application. MFWinSoundNone disables audio support for the application. However, ICA Client users can change these settings for their connection. MFWinSoundBasic enables audio support for the application.')
mfWinApplDefaultWindowColor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknownWindowColor", 0), ("a16Colors", 1), ("a256Colors", 2), ("a65536Colors", 3), ("a16MillionColors", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultWindowColor.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultWindowColor.setDescription('Return the value of the default window color to specify how the application appears to the ICA Client user. Window color is the color depth for the application.')
mfWinApplDefaultWindowHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultWindowHeight.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultWindowHeight.setDescription('Return the value of the default window height to specify how the application appears to the ICA Client user. You must set the default window type to be custom resolution before applying a custom width or height.')
mfWinApplDefaultWindowScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultWindowScale.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultWindowScale.setDescription('Return the value of the default window scale to specify how the application appears to the ICA Client user. You must set the default window type to be a percentage of the client desktop resolution before applying this scale amount. This specifies the size of the application window (scaled as a percentage of the client screen) as it appears to the ICA Client user.')
mfWinApplDefaultWindowType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknownWindowType", 0), ("a640x480", 1), ("a800x600", 2), ("a1024x768", 3), ("a1280x1024", 4), ("a1600x1200", 5), ("custom", 6), ("percent", 7), ("fullscreen", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultWindowType.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultWindowType.setDescription('Get the default window type. This specifies how the application appears to the ICA Client user. The window type is the default window size for ICA connections. You can specify window type as a standard resolution, custom resolution, percentage of the client desktop, or full screen.')
mfWinApplDefaultWindowWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultWindowWidth.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultWindowWidth.setDescription('Return the value of the default window width to specify how the application appears to the ICA Client user. You must set the default window type to be custom resolution before applying a custom width or height.')
mfWinApplDefaultWorkDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDefaultWorkDir.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDefaultWorkDir.setDescription('Return the value of the default working directory. The default working directory is used if a server doesn?t have its own working directory specified.')
mfWinApplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDescription.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDescription.setDescription('Return the application?s description.')
mfWinApplDesktopIntegrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noDesktopIntegrate", 0), ("startMenu", 1), ("desktop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDesktopIntegrate.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDesktopIntegrate.setDescription("Return the value of the desktop integrate flags to specify how ICA Client users can access the application. These flags specify how ICA Client users can access the application. Desktop integrate flags are a combination of the following flags: MFWinAppIntegrateNone: A shortcut to this application is not created for the user?s local Start Menu or desktop. MFWinAppIntegrateStartMenu: A shortcut to this application is created in the user's local Start menu (ICA Win32 Clients only). MFWinAppIntegrateDesktop: A shortcut to this application is created on the user's local desktop (ICA Win32 Clients only).")
mfWinApplDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: mfWinApplDistinguishedName.setDescription('Return the application?s distinguished name. The application?s distinguished name is the unique identifier of the application in the farm. The maximum length of the distinguished name is 256 characters.')
mfWinApplEnableApp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplEnableApp.setStatus('current')
if mibBuilder.loadTexts: mfWinApplEnableApp.setDescription("Get the value of the 'Enable application' flag. When you publish an application, it is enabled by default. Enabled applications are then available to the users specified when the application was published. Disabled applications are not available to users. The application can become disabled internally if its server list becomes empty, or if its user list becomes empty and the application is not configured to accept anonymous connections. A disabled application is not available to ICA Clients. Another way to enable and disable an application is to set one of the application?s Program Neighborhood attributes. See the references for the IMetaFrameWinApp interface?s get/put_PNAttribute function. An application can also be internally enabled and disabled if its server and/or user list becomes empty or is no longer empty.")
mfWinApplFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplFarmName.setStatus('current')
if mibBuilder.loadTexts: mfWinApplFarmName.setDescription('Get the name of the farm. This property is useful if the server object is created using the GetServer() function of a farm object. It is also useful when servers from different farms are connected to one MFCOM client using DCOM. The farm name can also be obtained from many other objects. If a multi-farm environment is used, this method is useful in identifying a server.')
mfWinApplMFAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noMetaFrameAttribute", 0), ("maximizeOnStartup", 1), ("hideTitleBar", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplMFAttributes.setStatus('current')
if mibBuilder.loadTexts: mfWinApplMFAttributes.setDescription('Return the value of the MetaFrame XP attributes to specify how the application appears to the ICA Client user. Value of the MetaFrame attributes. These values can be: MFWinAppMFAttrNone: No application start up setting is defined. MFWinAppMaximizeOnStartup: The application window is maximized to fill the ICA session window. MFWinAppHideTitleBar: The application?s title bar is not displayed at the top of the ICA session window.')
mfWinApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplName.setStatus('current')
if mibBuilder.loadTexts: mfWinApplName.setDescription('Return the application name.')
mfWinApplParentFolderDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplParentFolderDN.setStatus('current')
if mibBuilder.loadTexts: mfWinApplParentFolderDN.setDescription('Return the parent folder?s distinguished name.')
mfWinApplPNAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplPNAttributes.setStatus('current')
if mibBuilder.loadTexts: mfWinApplPNAttributes.setDescription('Get the Program Neighborhood attributes. This specifies how Program Neighborhood users access the application. Program Neighborhood attributes are a combination of the following flags: MFWinAppPNAttrNone: The Program Neighborhood attributes settings are off. MFWinAppDisabled: Makes the application unavailable to users. Published applications are enabled by default and are available to the users specified when the application was published. An alternative way to enable or disable the application is to use the IMetaFrameApplication interface?s EnableApp property. MFWinAppMinimumSound: Allows only ICA Clients with required audio support to connect to the application. MFWinAppMinimumEncrypt: Allows only ICA Clients that support the required level of encryption to connect to the application. MFWinAppDesktop: Publishes the server?s entire Windows desktop. The user sees a desktop interface from which any application installed on that server can be launched. MFWinAppAnonymous: Allows all ICA Client users to start the application without specifying a user name, domain name, or password. Users connecting through Program Neighborhood and the Web Interface for MetaFrame XP must first authenticate to the server. After authenticating to the server, they do not need to authenticate again to access the application.')
mfWinApplPNFolder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplPNFolder.setStatus('current')
if mibBuilder.loadTexts: mfWinApplPNFolder.setDescription("Query the client's Program Neighborhood folder.")
mfWinApplPublishingFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noEnumerationMask", 0), ("browserEnumeration", 1), ("pnEnumeration", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplPublishingFlags.setStatus('current')
if mibBuilder.loadTexts: mfWinApplPublishingFlags.setDescription('Return the value of the application publishing flags.')
mfWinApplReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 26, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinApplReadOnly.setStatus('current')
if mibBuilder.loadTexts: mfWinApplReadOnly.setDescription('Return the value of the application ReadOnly flag.')
metaframeWinFarmTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27), )
if mibBuilder.loadTexts: metaframeWinFarmTable.setStatus('current')
if mibBuilder.loadTexts: metaframeWinFarmTable.setDescription('Where the MetaFrame farm contains NT servers, these extra attributes apply')
metaframeWinFarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "mfWinFarmIndex"))
if mibBuilder.loadTexts: metaframeWinFarmEntry.setStatus('current')
if mibBuilder.loadTexts: metaframeWinFarmEntry.setDescription('None')
mfWinFarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmIndex.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
mfWinFarmAlternateCachingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmAlternateCachingMethod.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmAlternateCachingMethod.setDescription("Return the value of the 'Alternate caching method' flag. If the 'Use farm settings for ICA display' flag is set to TRUE, this flag is ignored. The alternate caching method uses the updated caching method supported by MetaFrame 1.8 servers.")
mfWinFarmDCRespondToClientBdcst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmDCRespondToClientBdcst.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmDCRespondToClientBdcst.setDescription("Return the value of the 'Data collectors respond to ICA client broadcast messages' flag. Data collectors for the farm do not respond to ICA Client broadcast messages. This sets up the data collector for the farm to respond to broadcasts from ICA Clients. By default, this option is unavailable if MetaFrame 1.8 servers are in the farm or other servers in the farm are responding to broadcast messages.")
mfWinFarmDegradationBias = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("degradeResolutionFirst", 1), ("degradeColorDepthFirst", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmDegradationBias.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmDegradationBias.setDescription('Return the value of the ICA display degradation bias.')
mfWinFarmDisableClientLocalTmEst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmDisableClientLocalTmEst.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmDisableClientLocalTmEst.setDescription("Return the value of the 'Disable client local time estimation' flag. Disable local time estimation is available after 'Per client time zone support' mode is selected. To prevent estimation of local time for ICA Clients other than the ICA Win32 and WinCE Clients, set 'Disable local time estimation' mode in the Management Console.")
mfWinFarmDiscardRedundantGraphic = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmDiscardRedundantGraphic.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmDiscardRedundantGraphic.setDescription("Return the value of the 'discard redundant graphic operations' flag. Set this flag to TRUE to discard intermediate graphic rendering; this improves bandwidth usage. For example, if an area of the display generates an intermediate image that is immediately replaced by another image, the intermediate image is discarded and never displayed.")
mfWinFarmEnableAutoClientReconn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmEnableAutoClientReconn.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmEnableAutoClientReconn.setDescription('Query the flag to enable auto client reconnect. If this flag is TRUE, auto client reconnect to this server is enabled. This flag is ignored if the value of UseFarmACRSetting is TRUE.')
mfWinFarmEnableDNSAddrResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmEnableDNSAddrResolution.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmEnableDNSAddrResolution.setDescription('Query the enable DNS address resolution flag. If this flag is set to TRUE, the DNS address resolution flag is enabled. If it is FALSE, it is disabled. This flag is a farm default value. Individual servers may overwrite this setting.')
mfWinFarmEnableSNMPAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmEnableSNMPAgent.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmEnableSNMPAgent.setDescription("Get the value of the 'Enable SNMP agent on all servers' flag. Enabling the SNMP agent subscribes each server to notifications of the selected events, such as Session Logon, Session Logoff, Session Disconnect, and Session Threshold Exceeded. The SNMP service must be running on the servers with this flag set to TRUE.")
mfWinFarmFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmFarmName.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmFarmName.setDescription('Get the name of the farm. This property is useful if the server object is created using the GetServer() function of a farm object. It is also useful when servers from different farms are connected to one MFCOM client using DCOM. The farm name can also be obtained from many other objects. If a multi-farm environment is used, this method is useful in identifying a server.')
mfWinFarmICAVideoBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmICAVideoBufferSize.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmICAVideoBufferSize.setDescription("Get the value of the ICA session video buffer size. If the 'Use farm settings for ICA display' flag is set to TRUE, this flag is ignored. The ICA session video buffer size is the maximum memory allowed for use as a buffer by each client connection. The range is between 150KB and 7500KB, in multiples of 1K (1024 bytes).")
mfWinFarmLegacyDisplayCompatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmLegacyDisplayCompatMode.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmLegacyDisplayCompatMode.setDescription("Get the value of the 'Use legacy ICA display protocol' flag.")
mfWinFarmLegacyServerCompatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmLegacyServerCompatMode.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmLegacyServerCompatMode.setDescription("Return the value of the 'Work with MetaFrame 1.8 servers in the farm' flag. Selecting this mode allows MetaFrame 1.8 servers to belong to the same farm as MetaFrame XP servers.")
mfWinFarmLogAutoReconnectAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmLogAutoReconnectAttempt.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmLogAutoReconnectAttempt.setDescription('Query the auto client reconnect attempt logging flag. If this flag is set to TRUE, the logging of auto client reconnect attempt is enabled. If it is FALSE, it is disabled. This flag is a farm default value. Individual servers may overwrite this setting.')
mfWinFarmLogOverLimitDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmLogOverLimitDenials.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmLogOverLimitDenials.setDescription("Query the logging over the connection limit denial count flag. Set this flag to TRUE or FALSE to turn on or off the logging of over the connection limit denial count. The count indicates how many times a user's logon attempt have been denied once the connection limit for that user has reached.")
mfWinFarmMaxConnectionsPerUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmMaxConnectionsPerUser.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmMaxConnectionsPerUser.setDescription('Query the value of maximum connections per user setting. The maximum connections per user setting limits the number of connections a user may make. This setting is a farm default value. Individual users may overwrite this value.')
mfWinFarmNotifyDegradation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmNotifyDegradation.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmNotifyDegradation.setDescription("Return the value of the 'Notify user of session degradation' flag. If the 'Use farm settings for ICA display' flag is set to TRUE, this flag is ignored. Notifies the user of session degradation. A brief explanation is displayed when a session is degraded. Session degradation can be caused by the session exceeding its memory limit, the use of inappropriate licenses, or an attempt to connect with an ICA Client that is unable to support the requested parameters.")
mfWinFarmRASRespondToClientBdcst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmRASRespondToClientBdcst.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmRASRespondToClientBdcst.setDescription("Return the value of the 'RAS servers respond to ICA client broadcast message' flag.")
mfWinFarmSNMPDisconnectTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmSNMPDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmSNMPDisconnectTrap.setDescription("Return the value of the 'Enable SNMP session disconnect trap' flag. If the 'Use farm?s SNMP settings' flag is set to TRUE, this flag is ignored. The SNMP session logon trap notifies the server each time a user logs on. This is available only if the 'Enable SNMP agent' flag is set to TRUE.")
mfWinFarmSNMPLogoffTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmSNMPLogoffTrap.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmSNMPLogoffTrap.setDescription("Return the value of the 'Enable SNMP session logoff trap' flag. The SNMP session logoff trap notifies the server each time a user logs off. This mode is available after 'Enable SNMP agent on all servers' mode is selected.")
mfWinFarmSNMPLogonTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmSNMPLogonTrap.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmSNMPLogonTrap.setDescription("Return the value of the 'Enable SNMP session logon trap' flag. The SNMP session logon trap notifies the server each time a user logs on. This mode is available after 'Enable SNMP agent on all servers' mode is selected.")
mfWinFarmSNMPThresholdExceedTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmSNMPThresholdExceedTrap.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmSNMPThresholdExceedTrap.setDescription("Return the value of the 'Enable SNMP session threshold exceeded trap' flag. If the 'Use farm?s SNMP settings' flag is set to TRUE, this flag is ignored. The SNMP session threshold exceeded trap notifies the server each time the number of sessions on a server exceeds the specified number of sessions. This is available only if the 'Enable SNMP agent' flag is set to TRUE.")
mfWinFarmSNMPThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmSNMPThresholdValue.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmSNMPThresholdValue.setDescription("Return an SNMP session threshold value (session limit per server). If the 'Use farm?s SNMP settings' flag is set to TRUE, this flag is ignored. The SNMP session threshold value (session limit per server) is the upper limit of sessions allowed to connect to each server in the farm. This is available only if the 'Enable SNMP agent' and 'Enable SNMP session threshold exceeded trap' flags are set to TRUE.")
mfWinFarmUseClientLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 1, 27, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfWinFarmUseClientLocalTime.setStatus('current')
if mibBuilder.loadTexts: mfWinFarmUseClientLocalTime.setDescription("Return the value of the 'Use local time of ICA Clients' flag. The flag allows the use of the local time of ICA Clients. All timestamps for all applications are based on the client?s time instead of the server?s time.")
ciitrixWmiCitrixLicensing = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2))
if mibBuilder.loadTexts: ciitrixWmiCitrixLicensing.setStatus('current')
if mibBuilder.loadTexts: ciitrixWmiCitrixLicensing.setDescription('Provides WMI information on the Citrix Licensing Services')
citrixGTLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1), )
if mibBuilder.loadTexts: citrixGTLicenseTable.setStatus('current')
if mibBuilder.loadTexts: citrixGTLicenseTable.setDescription('Licensing base class describing the data associated with a Citrix License Serial Number')
citrixGTLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxGTLicenseIndex"))
if mibBuilder.loadTexts: citrixGTLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: citrixGTLicenseEntry.setDescription('None')
ctxGTLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxGTLicenseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseCount.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseCount.setDescription('The number of licenses installed')
ctxGTLicenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseExpirationDate.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseExpirationDate.setDescription('Expiration date in the format of dd-mmm-yyyy')
ctxGTLicenseLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseLicenseType.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseLicenseType.setDescription('License type - NFR(Not For Resale), Retail, Eval(Evaluation), and TP(Technology Preview)')
ctxGTLicenseOverdraft = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseOverdraft.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseOverdraft.setDescription('The number of Overdraft for a feature/increment line')
ctxGTLicensePLD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePLD.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePLD.setDescription('Product License Descriptor (The Globetrotter Feature Name). Every PLD consists of the three fields, Product Name, Product Feature and the License Model, e.g., MPS_ENT_CCU')
ctxGTLicensePLDFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePLDFullName.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePLDFullName.setDescription('The full name of the PLD - <Product Name>|<License Model>')
ctxGTLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseSerialNumber.setDescription('No description')
ctxGTLicenseSubscriptionDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicenseSubscriptionDate.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicenseSubscriptionDate.setDescription('Used as Citrix Subscription Advantage Date in the format of yyyy.mmdd')
citrixGTLicensePoolTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2), )
if mibBuilder.loadTexts: citrixGTLicensePoolTable.setStatus('current')
if mibBuilder.loadTexts: citrixGTLicensePoolTable.setDescription('License Pools')
citrixGTLicensePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxGTLicensePoolIndex"))
if mibBuilder.loadTexts: citrixGTLicensePoolEntry.setStatus('current')
if mibBuilder.loadTexts: citrixGTLicensePoolEntry.setDescription('None')
ctxGTLicensePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolIndex.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxGTLicensePoolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolCount.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolCount.setDescription('Overall number of licenses in license pool')
ctxGTLicensePoolDUPGROUP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolDUPGROUP.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolDUPGROUP.setDescription('FLEXlm duplicate grouping')
ctxGTLicensePoolFLOATOK = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolFLOATOK.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolFLOATOK.setDescription('FLEXlm mobile licensing')
ctxGTLicensePoolHOSTBASED = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolHOSTBASED.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolHOSTBASED.setDescription('FLEXlm host based license')
ctxGTLicensePoolHOSTID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolHOSTID.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolHOSTID.setDescription('License server host ID')
ctxGTLicensePoolInUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolInUseCount.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolInUseCount.setDescription('The number of licenses pooled in use')
ctxGTLicensePoolLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolLicenseType.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolLicenseType.setDescription('License type - NFR(Not For Resale), Retail, Eval(Evaluation), and TP(Technology Preview)')
ctxGTLicensePoolOverdraft = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolOverdraft.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolOverdraft.setDescription('The number of Overdraft for a a license pool')
ctxGTLicensePoolPLATFORMS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolPLATFORMS.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolPLATFORMS.setDescription('Platforms a license is restricted to be used on')
ctxGTLicensePoolPLD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolPLD.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolPLD.setDescription('Product License Descriptor (The Globetrotter Feature Name). Every PLD consists of the three fields, Product Name, Product Feature and the License Model, e.g., MPS_ENT_CCU')
ctxGTLicensePoolPLDFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolPLDFullName.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolPLDFullName.setDescription('The full name of the PLD - <Product Name>|<License Model>')
ctxGTLicensePoolPooledAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolPooledAvailable.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolPooledAvailable.setDescription('The number of licenses pooled available')
ctxGTLicensePoolSubscriptionDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolSubscriptionDate.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolSubscriptionDate.setDescription('Used as Citrix Subscription Advantage Date in the format of yyyy.mmdd')
ctxGTLicensePoolUSERBASED = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolUSERBASED.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolUSERBASED.setDescription('FLEXlm user based license')
ctxGTLicensePoolVendorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxGTLicensePoolVendorString.setStatus('current')
if mibBuilder.loadTexts: ctxGTLicensePoolVendorString.setDescription('Vendor string')
citrixGTLicensesInLicensePlTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 3), )
if mibBuilder.loadTexts: citrixGTLicensesInLicensePlTable.setStatus('current')
if mibBuilder.loadTexts: citrixGTLicensesInLicensePlTable.setDescription('The set of licenses that make up a license pool')
citrixGTLicensesInLicensePlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 3, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxgtllpIndex"))
if mibBuilder.loadTexts: citrixGTLicensesInLicensePlEntry.setStatus('current')
if mibBuilder.loadTexts: citrixGTLicensesInLicensePlEntry.setDescription('None')
ctxgtllpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxgtllpIndex.setStatus('current')
if mibBuilder.loadTexts: ctxgtllpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxgtllpLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 3, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxgtllpLicense.setStatus('current')
if mibBuilder.loadTexts: ctxgtllpLicense.setDescription('Return the license number')
ctxgtllpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxgtllpPool.setStatus('current')
if mibBuilder.loadTexts: ctxgtllpPool.setDescription('Return the vendor string')
citrixLicenseSchemaVersionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 4), )
if mibBuilder.loadTexts: citrixLicenseSchemaVersionTable.setStatus('current')
if mibBuilder.loadTexts: citrixLicenseSchemaVersionTable.setDescription('Schema Version. Used to verify that MOF & Dynamic provider are in step')
citrixLicenseSchemaVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 4, 1), ).setIndexNames((0, "INFORMANT-WMI-CITRIX", "ctxLicensingSchemaVersionIndex"))
if mibBuilder.loadTexts: citrixLicenseSchemaVersionEntry.setStatus('current')
if mibBuilder.loadTexts: citrixLicenseSchemaVersionEntry.setDescription('None')
ctxLicensingSchemaVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxLicensingSchemaVersionIndex.setStatus('current')
if mibBuilder.loadTexts: ctxLicensingSchemaVersionIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ctxLicensingSchemaVersionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 42, 2, 4, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxLicensingSchemaVersionVersion.setStatus('current')
if mibBuilder.loadTexts: ctxLicensingSchemaVersionVersion.setDescription('Return the license schema version')
mibBuilder.exportSymbols("INFORMANT-WMI-CITRIX", citrixGTLicenseEntry=citrixGTLicenseEntry, citrixServersInFolderTable=citrixServersInFolderTable, mfAppsInSessionAntecedent=mfAppsInSessionAntecedent, citrixServersInZoneEntry=citrixServersInZoneEntry, mfAppsInSessionIndex=mfAppsInSessionIndex, metaframeSessionTable=metaframeSessionTable, ctxGTLicenseCount=ctxGTLicenseCount, mfICAClientClientDimCacheSize=mfICAClientClientDimCacheSize, ctxAccountAuthorityIndex=ctxAccountAuthorityIndex, ctxZoneIndex=ctxZoneIndex, mfWinFarmSNMPThresholdValue=mfWinFarmSNMPThresholdValue, mfWinApplDefaultWindowHeight=mfWinApplDefaultWindowHeight, citrixServerFolderEntry=citrixServerFolderEntry, mfWinApplFarmName=mfWinApplFarmName, metaframeWinFarmEntry=metaframeWinFarmEntry, citrixAccountAuthorityEntry=citrixAccountAuthorityEntry, mfWinFarmEnableDNSAddrResolution=mfWinFarmEnableDNSAddrResolution, ciitrixWmiCitrixLicensing=ciitrixWmiCitrixLicensing, mfSoftwareReleaseLevel=mfSoftwareReleaseLevel, ctxGTLicensePoolFLOATOK=ctxGTLicensePoolFLOATOK, mfWinFarmUseClientLocalTime=mfWinFarmUseClientLocalTime, mfWinApplPublishingFlags=mfWinApplPublishingFlags, mfInstalledSoftwareServer=mfInstalledSoftwareServer, ctxGTLicensePoolInUseCount=ctxGTLicensePoolInUseCount, metaframeProcessEntry=metaframeProcessEntry, ctxApplicationFolderIndex=ctxApplicationFolderIndex, mfAppsForGroupAntecedent=mfAppsForGroupAntecedent, mfICAClientClientEncryption=mfICAClientClientEncryption, mfWinApplDistinguishedName=mfWinApplDistinguishedName, citrixUsersInGroupTable=citrixUsersInGroupTable, metaframeWinFarmTable=metaframeWinFarmTable, mfApplicationLoadLevelLoadLevel=mfApplicationLoadLevelLoadLevel, mfICAClientClientProductIDValue=mfICAClientClientProductIDValue, ctxGTLicensePoolUSERBASED=ctxGTLicensePoolUSERBASED, ctxUserUserName=ctxUserUserName, mfProcessProcessName=mfProcessProcessName, metaframeSoftwareEntry=metaframeSoftwareEntry, ctxUsersInGroupAntecedent=ctxUsersInGroupAntecedent, ctxGTLicenseSubscriptionDate=ctxGTLicenseSubscriptionDate, mfServerNumberOfSessions=mfServerNumberOfSessions, citrixWmi=citrixWmi, mfICAClientClientName=mfICAClientClientName, metaframeAppsForGroupEntry=metaframeAppsForGroupEntry, mfWinApplDesktopIntegrate=mfWinApplDesktopIntegrate, mfWinApplDefaultEncryption=mfWinApplDefaultEncryption, mfProcessServerName=mfProcessServerName, mfWinFarmLogAutoReconnectAttempt=mfWinFarmLogAutoReconnectAttempt, citrixServerFolderTable=citrixServerFolderTable, mfICAClientClientDirectory=mfICAClientClientDirectory, ctxLicensingSchemaVersionIndex=ctxLicensingSchemaVersionIndex, metaframeProcessesInSessionEntry=metaframeProcessesInSessionEntry, mfWinFarmMaxConnectionsPerUser=mfWinFarmMaxConnectionsPerUser, mfServerLoginsEnabled=mfServerLoginsEnabled, mfAppsInFolderDependent=mfAppsInFolderDependent, mfWinFarmSNMPLogonTrap=mfWinFarmSNMPLogonTrap, mfServerLoadLevelLoadLevel=mfServerLoadLevelLoadLevel, mfSessionLastInputTime=mfSessionLastInputTime, citrixGTLicensePoolEntry=citrixGTLicensePoolEntry, mfServerLoadLevelServerName=mfServerLoadLevelServerName, mfWinFarmSNMPThresholdExceedTrap=mfWinFarmSNMPThresholdExceedTrap, ctxgtllpLicense=ctxgtllpLicense, mfWinApplDefaultSoundType=mfWinApplDefaultSoundType, mfServerZoneName=mfServerZoneName, mfWinApplPNAttributes=mfWinApplPNAttributes, mfServerNumberOfActiveSessions=mfServerNumberOfActiveSessions, metaframeApplLoadLevelEntry=metaframeApplLoadLevelEntry, mfWinApplBrowserName=mfWinApplBrowserName, metaframeAppsForGroupTable=metaframeAppsForGroupTable, mfICAClientClientHardwareID=mfICAClientClientHardwareID, mfICAClientClientDimBitmapMin=mfICAClientClientDimBitmapMin, ctxGTLicensePLD=ctxGTLicensePLD, metaframeDisconnectSessionTable=metaframeDisconnectSessionTable, citrixGTLicensesInLicensePlTable=citrixGTLicensesInLicensePlTable, mfICAClientClientCacheDisk=mfICAClientClientCacheDisk, mfdshWhen=mfdshWhen, mfProcessesInSessionAntecedent=mfProcessesInSessionAntecedent, metaframeSoftwareTable=metaframeSoftwareTable, ctxGroupGroupName=ctxGroupGroupName, mfarosApplication=mfarosApplication, metaframeWinApplicationTable=metaframeWinApplicationTable, ctxUsersInGroupIndex=ctxUsersInGroupIndex, ctxServersInZoneZone=ctxServersInZoneZone, mfWinApplMFAttributes=mfWinApplMFAttributes, ctxGTLicenseExpirationDate=ctxGTLicenseExpirationDate, mfAppsForGroupDependent=mfAppsForGroupDependent, ctxServersInFolderIndex=ctxServersInFolderIndex, metaframeSchemaVersionTable=metaframeSchemaVersionTable, mfServerNumOfDisconnectSessions=mfServerNumOfDisconnectSessions, citrixZoneEntry=citrixZoneEntry, mfaposWinApp=mfaposWinApp, metaframeServerTable=metaframeServerTable, mfServerZoneRanking=mfServerZoneRanking, ctxGTLicensePoolDUPGROUP=ctxGTLicensePoolDUPGROUP, mfSessionCurrentTime=mfSessionCurrentTime, metaframeAppsInFolderTable=metaframeAppsInFolderTable, ctxGTLicenseLicenseType=ctxGTLicenseLicenseType, ctxgtllpIndex=ctxgtllpIndex, mfWinApplEnableApp=mfWinApplEnableApp, mfICAClientICABufLen=mfICAClientICABufLen, mfServerFarmName=mfServerFarmName, ctxZoneZoneName=ctxZoneZoneName, citrixUserTable=citrixUserTable, mfICAClientClientVRes=mfICAClientClientVRes, metaframeSchemaVersionEntry=metaframeSchemaVersionEntry, ctxGTLicensePoolIndex=ctxGTLicensePoolIndex, citrixApplicationFolderEntry=citrixApplicationFolderEntry, mfWinFarmNotifyDegradation=mfWinFarmNotifyDegradation, mfarosIndex=mfarosIndex, mfSessionIndex=mfSessionIndex, mfWinFarmFarmName=mfWinFarmFarmName, ctxLicensingSchemaVersionVersion=ctxLicensingSchemaVersionVersion, mfarosProcessId=mfarosProcessId, metaframeWinApplicationEntry=metaframeWinApplicationEntry, metaframeServerLoadLevelEntry=metaframeServerLoadLevelEntry, ctxZoneNumServersInZone=ctxZoneNumServersInZone, mfWinFarmLegacyDisplayCompatMode=mfWinFarmLegacyDisplayCompatMode, mfSoftwareMFWinProductCode=mfSoftwareMFWinProductCode, mfApplicationLoadLevelServerName=mfApplicationLoadLevelServerName, mfICAClientClientCacheTiny=mfICAClientClientCacheTiny, ctxGTLicenseOverdraft=ctxGTLicenseOverdraft, mfWinFarmLegacyServerCompatMode=mfWinFarmLegacyServerCompatMode, ctxGTLicensePoolLicenseType=ctxGTLicensePoolLicenseType, citrixGTLicensesInLicensePlEntry=citrixGTLicensesInLicensePlEntry, mfProcessesInSessionIndex=mfProcessesInSessionIndex, mfServerServerType=mfServerServerType, citrixAccountAuthorityTable=citrixAccountAuthorityTable, mfICAClientClientColorDepth=mfICAClientClientColorDepth, mfSessionServerName=mfSessionServerName, mfSessionDisconnectTime=mfSessionDisconnectTime, mfWinFarmSNMPLogoffTrap=mfWinFarmSNMPLogoffTrap, ctxGTLicenseSerialNumber=ctxGTLicenseSerialNumber, citrixApplicationFolderTable=citrixApplicationFolderTable, mfWinApplDescription=mfWinApplDescription, metaframeICAClientEntry=metaframeICAClientEntry, mfSoftwareInstallDate=mfSoftwareInstallDate, ctxUserIndex=ctxUserIndex, citrixGTLicensePoolTable=citrixGTLicensePoolTable, mfICAClientClientModemName=mfICAClientClientModemName, citrixZoneTable=citrixZoneTable, metaframeProcessesInSessionTable=metaframeProcessesInSessionTable, mfICAClientClientBuild=mfICAClientClientBuild, citrixGroupTable=citrixGroupTable, citrixUsersInGroupEntry=citrixUsersInGroupEntry, mfWinFarmEnableSNMPAgent=mfWinFarmEnableSNMPAgent, mfAppsInFolderAntecedent=mfAppsInFolderAntecedent, ctxGroupAccAuthority=ctxGroupAccAuthority, citrixServersInZoneTable=citrixServersInZoneTable, mfProcessProcessState=mfProcessProcessState, citrixWmiCitrix=citrixWmiCitrix, metaframeInstalledSoftwareTable=metaframeInstalledSoftwareTable, mfWinApplDefaultWindowScale=mfWinApplDefaultWindowScale, ctxGTLicenseIndex=ctxGTLicenseIndex, mfApplicationLoadLevelIndex=mfApplicationLoadLevelIndex, ctxGTLicensePLDFullName=ctxGTLicensePLDFullName, mfInstalledSoftwareSoftware=mfInstalledSoftwareSoftware, mfServerLoadLevelIndex=mfServerLoadLevelIndex, mfSessionSessionID=mfSessionSessionID, ctxgtllpPool=ctxgtllpPool, ctxGroupIndex=ctxGroupIndex, mfdshHowMany=mfdshHowMany, mfSessionLogonTime=mfSessionLogonTime, ctxGTLicensePoolHOSTBASED=ctxGTLicensePoolHOSTBASED, mfWinFarmSNMPDisconnectTrap=mfWinFarmSNMPDisconnectTrap, mfProcessUserName=mfProcessUserName, mfWinFarmDegradationBias=mfWinFarmDegradationBias, mfServerDomain=mfServerDomain, mfICAClientClientHRes=mfICAClientClientHRes, mfWinApplDefaultWorkDir=mfWinApplDefaultWorkDir, mfWinFarmDCRespondToClientBdcst=mfWinFarmDCRespondToClientBdcst, mfSchemaVersionIndex=mfSchemaVersionIndex, mfWinFarmEnableAutoClientReconn=mfWinFarmEnableAutoClientReconn, metaframeAppsInSessionTable=metaframeAppsInSessionTable, mfWinApplName=mfWinApplName, mfWinFarmRASRespondToClientBdcst=mfWinFarmRASRespondToClientBdcst, ctxGTLicensePoolOverdraft=ctxGTLicensePoolOverdraft, ctxGTLicensePoolPLD=ctxGTLicensePoolPLD, mfICAClientClientProductID=mfICAClientClientProductID, ctxApplicationFolderFolderDN=ctxApplicationFolderFolderDN, ctxApplicationFolderFolderName=ctxApplicationFolderFolderName, mfSessionConnectTime=mfSessionConnectTime, mfSessionSessionState=mfSessionSessionState, mfWinApplIndex=mfWinApplIndex, mfWinFarmICAVideoBufferSize=mfWinFarmICAVideoBufferSize, mfAppsInFolderIndex=mfAppsInFolderIndex, metaframeServerEntry=metaframeServerEntry, metaframeApplPublishOnSvrTable=metaframeApplPublishOnSvrTable, mfICAClientClientAddress=mfICAClientClientAddress, mfSoftwareFeatureReleaseLevel=mfSoftwareFeatureReleaseLevel, ctxGTLicensePoolHOSTID=ctxGTLicensePoolHOSTID, ctxServersInZoneIndex=ctxServersInZoneIndex, mfICAClientClientAddrFamily=mfICAClientClientAddrFamily, ctxGTLicensePoolSubscriptionDate=ctxGTLicensePoolSubscriptionDate, mfServerServerName=mfServerServerName, mfaposIndex=mfaposIndex, mfWinFarmDiscardRedundantGraphic=mfWinFarmDiscardRedundantGraphic, mfWinApplApplicationID=mfWinApplApplicationID, citrixLicenseSchemaVersionTable=citrixLicenseSchemaVersionTable, ctxServersInFolderAntecedent=ctxServersInFolderAntecedent, mfICAClientClientDimVersion=mfICAClientClientDimVersion, metaframeApplLoadLevelTable=metaframeApplLoadLevelTable, mfdshIndex=mfdshIndex, mfICAClientIndex=mfICAClientIndex, ctxServerFolderFolderDN=ctxServerFolderFolderDN, mfICAClientClientLicense=mfICAClientClientLicense, metaframeAppsInFolderEntry=metaframeAppsInFolderEntry, metaframeApplRunOnServerEntry=metaframeApplRunOnServerEntry, citrixGTLicenseTable=citrixGTLicenseTable, metaframeICAClientTable=metaframeICAClientTable, citrixServersInFolderEntry=citrixServersInFolderEntry, ctxUserAccountType=ctxUserAccountType, ctxZoneDataCollector=ctxZoneDataCollector, mfProcessIndex=mfProcessIndex, mfSchemaVersionVersion=mfSchemaVersionVersion, mfSoftwareVersion=mfSoftwareVersion, mfWinApplDefaultWindowColor=mfWinApplDefaultWindowColor, mfWinFarmLogOverLimitDenials=mfWinFarmLogOverLimitDenials, metaframeDisconnectSessionEntry=metaframeDisconnectSessionEntry, ctxServerFolderFolderName=ctxServerFolderFolderName, metaframeInstalledSoftwareEntry=metaframeInstalledSoftwareEntry, mfSessionSessionUser=mfSessionSessionUser, mfICAClientClientCacheLowMem=mfICAClientClientCacheLowMem, ctxGTLicensePoolVendorString=ctxGTLicensePoolVendorString, ctxServerFolderIndex=ctxServerFolderIndex, mfWinApplReadOnly=mfWinApplReadOnly, citrixLicenseSchemaVersionEntry=citrixLicenseSchemaVersionEntry, ctxAccountAuthorityName=ctxAccountAuthorityName, mfaposCtxServer=mfaposCtxServer, ctxAccountAuthorityType=ctxAccountAuthorityType, mfAppsInSessionDependent=mfAppsInSessionDependent, mfInstalledSoftwareIndex=mfInstalledSoftwareIndex, ctxGTLicensePoolPLDFullName=ctxGTLicensePoolPLDFullName, mfSoftwareProductName=mfSoftwareProductName, mfWinApplDefaultInitProg=mfWinApplDefaultInitProg, metaframeApplPublishOnSvrEntry=metaframeApplPublishOnSvrEntry, mfSessionNumberOfApps=mfSessionNumberOfApps, mfServerIPAddress=mfServerIPAddress, metaframeServerLoadLevelTable=metaframeServerLoadLevelTable, mfarosServer=mfarosServer, mfSessionClient=mfSessionClient, mfWinApplDefaultWindowType=mfWinApplDefaultWindowType, ctxServersInZoneServer=ctxServersInZoneServer, ctxUserAccAuthority=ctxUserAccAuthority, citrixGroupEntry=citrixGroupEntry, mfSessionSessionName=mfSessionSessionName, mfICAClientClientCacheXms=mfICAClientClientCacheXms, mfWinApplAppVersion=mfWinApplAppVersion, ctxServersInFolderDependent=ctxServersInFolderDependent, metaframeSessionEntry=metaframeSessionEntry, mfWinFarmDisableClientLocalTmEst=mfWinFarmDisableClientLocalTmEst, ctxGTLicensePoolPLATFORMS=ctxGTLicensePoolPLATFORMS, ctxGTLicensePoolPooledAvailable=ctxGTLicensePoolPooledAvailable, mfWinFarmIndex=mfWinFarmIndex, metaframeApplRunOnServerTable=metaframeApplRunOnServerTable, mfAppsForGroupIndex=mfAppsForGroupIndex)
mibBuilder.exportSymbols("INFORMANT-WMI-CITRIX", metaframeProcessTable=metaframeProcessTable, metaframeAppsInSessionEntry=metaframeAppsInSessionEntry, ctxGroupAccountType=ctxGroupAccountType, mfProcessesInSessionDependent=mfProcessesInSessionDependent, mfServerIndex=mfServerIndex, mfSoftwareIndex=mfSoftwareIndex, mfWinApplParentFolderDN=mfWinApplParentFolderDN, mfProcessSessionID=mfProcessSessionID, mfWinFarmAlternateCachingMethod=mfWinFarmAlternateCachingMethod, mfWinApplPNFolder=mfWinApplPNFolder, PYSNMP_MODULE_ID=citrixWmi, mfProcessProcessID=mfProcessProcessID, mfWinApplDefaultWindowWidth=mfWinApplDefaultWindowWidth, ctxGTLicensePoolCount=ctxGTLicensePoolCount, ctxUsersInGroupDependent=ctxUsersInGroupDependent, citrixUserEntry=citrixUserEntry, mfApplicationLoadLevelAppName=mfApplicationLoadLevelAppName)
