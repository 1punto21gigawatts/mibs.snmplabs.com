#
# PySNMP MIB module PACKETPOWER-EG4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETPOWER-EG4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, enterprises, MibIdentifier, IpAddress, Gauge32, Counter32, ObjectIdentity, Counter64, Unsigned32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "enterprises", "MibIdentifier", "IpAddress", "Gauge32", "Counter32", "ObjectIdentity", "Counter64", "Unsigned32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus", "DateAndTime")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
packetPower = MibIdentifier((1, 3, 6, 1, 4, 1, 33688))
eg4 = MibIdentifier((1, 3, 6, 1, 4, 1, 33688, 4))
readingsTable = MibTable((1, 3, 6, 1, 4, 1, 33688, 4, 1), )
if mibBuilder.loadTexts: readingsTable.setStatus('current')
if mibBuilder.loadTexts: readingsTable.setDescription('Table of most recent, time-stamped readings on all channels monitored by each node.')
readingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1), ).setIndexNames((0, "PACKETPOWER-EG4-MIB", "reNodeId1"), (0, "PACKETPOWER-EG4-MIB", "reNodeId2"), (0, "PACKETPOWER-EG4-MIB", "reNodeId3"), (0, "PACKETPOWER-EG4-MIB", "reNodeId4"), (0, "PACKETPOWER-EG4-MIB", "channelId"))
if mibBuilder.loadTexts: readingsEntry.setStatus('current')
if mibBuilder.loadTexts: readingsEntry.setDescription('Time-stamped reading corresponding to a physical value most recently reported on a given measurement channel.')
reNodeId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId1.setStatus('current')
if mibBuilder.loadTexts: reNodeId1.setDescription('Node identifier, part 1 of 4 (16 bits, bits 63-48 of the id - part AAAA of AAAA-BBBB-CCCC-DDDD).')
reNodeId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId2.setStatus('current')
if mibBuilder.loadTexts: reNodeId2.setDescription('Node identifier, part 2 of 4 (16 bits, bits 47-32 of the id - part BBBB of AAAA-BBBB-CCCC-DDDD).')
reNodeId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId3.setStatus('current')
if mibBuilder.loadTexts: reNodeId3.setDescription('Node identifier, part 3 of 4 (16 bits, bits 31-16 of the id - part CCCC of AAAA-BBBB-CCCC-DDDD).')
reNodeId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId4.setStatus('current')
if mibBuilder.loadTexts: reNodeId4.setDescription('Node identifier, part 4 of 4 (16 bits, bits 15-0 of the id - part DDDD of AAAA-BBBB-CCCC-DDDD).')
channelId = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("current", 2), ("voltage", 1), ("power", 3), ("energy", 4), ("frequency", 5), ("temperature", 6), ("humidity", 7), ("va", 8), ("vdd", 9), ("battery", 10), ("pressure", 11), ("contact", 12), ("contactcount", 13))))
if mibBuilder.loadTexts: channelId.setStatus('current')
if mibBuilder.loadTexts: channelId.setDescription('Channel ID, indicating the type of measurement reported.')
reNodeIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reNodeIdHex.setStatus('current')
if mibBuilder.loadTexts: reNodeIdHex.setDescription('Node ID number as as 16-character uppercase hexadecimal string.')
reNodeIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reNodeIdString.setStatus('current')
if mibBuilder.loadTexts: reNodeIdString.setDescription('Node identifier (hex), formatted XXXX-XXXX-XXXX-XXXX (matches all Packet Power product labels).')
reChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reChannelName.setStatus('current')
if mibBuilder.loadTexts: reChannelName.setDescription('Channel name, indicating channel type and instance (e.g.VoltageA).')
reTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reTime.setStatus('current')
if mibBuilder.loadTexts: reTime.setDescription('Timestamp of the reading.')
reUnixTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reUnixTime.setStatus('current')
if mibBuilder.loadTexts: reUnixTime.setDescription('Reading timestamp, UNIX epoch format.')
reIso8601Time = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reIso8601Time.setStatus('current')
if mibBuilder.loadTexts: reIso8601Time.setDescription('Reading timestamp, ISO8601 format.')
reValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reValue.setStatus('current')
if mibBuilder.loadTexts: reValue.setDescription('Reading value at timestamp.')
reUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reUnits.setStatus('current')
if mibBuilder.loadTexts: reUnits.setDescription('Units of measure.')
nodesTable = MibTable((1, 3, 6, 1, 4, 1, 33688, 4, 2), )
if mibBuilder.loadTexts: nodesTable.setStatus('current')
if mibBuilder.loadTexts: nodesTable.setDescription('Table of all active nodes.')
nodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1), ).setIndexNames((0, "PACKETPOWER-EG4-MIB", "ntNodeId1"), (0, "PACKETPOWER-EG4-MIB", "ntNodeId2"), (0, "PACKETPOWER-EG4-MIB", "ntNodeId3"), (0, "PACKETPOWER-EG4-MIB", "ntNodeId4"))
if mibBuilder.loadTexts: nodesEntry.setStatus('current')
if mibBuilder.loadTexts: nodesEntry.setDescription('Node status, including most recent activity time and radio link quality.')
ntNodeId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId1.setStatus('current')
if mibBuilder.loadTexts: ntNodeId1.setDescription('Node identifier, part 1 of 4 (16 bits, bits 63-48 of the id - part AAAA of AAAA-BBBB-CCCC-DDDD).')
ntNodeId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId2.setStatus('current')
if mibBuilder.loadTexts: ntNodeId2.setDescription('Node identifier, part 2 of 4 (16 bits, bits 47-32 of the id - part BBBB of AAAA-BBBB-CCCC-DDDD).')
ntNodeId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId3.setStatus('current')
if mibBuilder.loadTexts: ntNodeId3.setDescription('Node identifier, part 3 of 4 (16 bits, bits 31-16 of the id - part CCCC of AAAA-BBBB-CCCC-DDDD).')
ntNodeId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId4.setStatus('current')
if mibBuilder.loadTexts: ntNodeId4.setDescription('Node identifier, part 4 of 4 (16 bits, bits 15-0 of the id - part DDDD of AAAA-BBBB-CCCC-DDDD).')
ntNodeIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntNodeIdHex.setStatus('current')
if mibBuilder.loadTexts: ntNodeIdHex.setDescription('Node ID number as as 16-character uppercase hexadecimal string.')
ntNodeIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntNodeIdString.setStatus('current')
if mibBuilder.loadTexts: ntNodeIdString.setDescription('Node identifier (hex), formatted XXXX-XXXX-XXXX-XXXX (matches all Packet Power product labels).')
ntTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTime.setStatus('current')
if mibBuilder.loadTexts: ntTime.setDescription('Timestamp of the most recent reading from the node.')
ntUnixTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntUnixTime.setStatus('current')
if mibBuilder.loadTexts: ntUnixTime.setDescription('Timestamp of the most recent reading from the node, UNIX epoch format.')
ntIso8601Time = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntIso8601Time.setStatus('current')
if mibBuilder.loadTexts: ntIso8601Time.setDescription('Timestamp of the most recent reading from the node, ISO8601 format.')
ntLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLinkQuality.setStatus('current')
if mibBuilder.loadTexts: ntLinkQuality.setDescription('Radio link quality 0..100')
mibBuilder.exportSymbols("PACKETPOWER-EG4-MIB", ntNodeId4=ntNodeId4, ntNodeId3=ntNodeId3, enterprises=enterprises, reNodeId2=reNodeId2, reUnits=reUnits, reNodeIdString=reNodeIdString, ntLinkQuality=ntLinkQuality, reNodeId3=reNodeId3, ntIso8601Time=ntIso8601Time, dod=dod, reChannelName=reChannelName, reIso8601Time=reIso8601Time, ntNodeId1=ntNodeId1, ntTime=ntTime, packetPower=packetPower, org=org, reNodeId1=reNodeId1, readingsEntry=readingsEntry, reTime=reTime, nodesTable=nodesTable, private=private, reUnixTime=reUnixTime, internet=internet, readingsTable=readingsTable, reNodeId4=reNodeId4, reNodeIdHex=reNodeIdHex, nodesEntry=nodesEntry, eg4=eg4, ntNodeIdString=ntNodeIdString, ntNodeId2=ntNodeId2, channelId=channelId, ntNodeIdHex=ntNodeIdHex, ntUnixTime=ntUnixTime, reValue=reValue)
