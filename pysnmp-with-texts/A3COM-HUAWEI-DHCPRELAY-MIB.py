#
# PySNMP MIB module A3COM-HUAWEI-DHCPRELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DHCPRELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, Counter32, TimeTicks, ObjectIdentity, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Gauge32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Counter32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
MacAddress, DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
h3cDhcpRelay = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58))
h3cDhcpRelay.setRevisions(('2005-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDhcpRelay.setRevisionsDescriptions(('The initial version of this MIB module.',))
if mibBuilder.loadTexts: h3cDhcpRelay.setLastUpdated('200506080000Z')
if mibBuilder.loadTexts: h3cDhcpRelay.setOrganization('Huawei 3Com Technologies Co.,Ltd. ')
if mibBuilder.loadTexts: h3cDhcpRelay.setContactInfo('Platform Team Huawei 3Com Technologies Co.,Ltd. Hai-Dian District Beijing P.R. China http://www.huawei-3com.com Zip: 100085')
if mibBuilder.loadTexts: h3cDhcpRelay.setDescription('HUAWEI-3COM DHCPR MIB')
h3cDHCPRMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1))
h3cDHCPRIfSelectTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 1), )
if mibBuilder.loadTexts: h3cDHCPRIfSelectTable.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfSelectTable.setDescription('A table for configuring relay mode for interfaces. ')
h3cDHCPRIfSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDHCPRIfSelectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfSelectEntry.setDescription('An entry for configuring relay mode for an interface. ')
h3cDHCPRIfSelectRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRIfSelectRelayMode.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfSelectRelayMode.setDescription('If the value is on, the DHCP relay function would be enabled on this interface. ')
h3cDHCPRIpToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 2), )
if mibBuilder.loadTexts: h3cDHCPRIpToGroupTable.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIpToGroupTable.setDescription('A table for configuring ip addresses for DHCP server groups. ')
h3cDHCPRIpToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DHCPRELAY-MIB", "h3cDHCPRIpToGroupGroupId"), (0, "A3COM-HUAWEI-DHCPRELAY-MIB", "h3cDHCPRIpToGroupServerIpType"), (0, "A3COM-HUAWEI-DHCPRELAY-MIB", "h3cDHCPRIpToGroupServerIp"))
if mibBuilder.loadTexts: h3cDHCPRIpToGroupEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIpToGroupEntry.setDescription('An entry for configuring ip addresses for a DHCP server group. ')
h3cDHCPRIpToGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: h3cDHCPRIpToGroupGroupId.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIpToGroupGroupId.setDescription('Group identifier of DHCP server group. ')
h3cDHCPRIpToGroupServerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: h3cDHCPRIpToGroupServerIpType.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIpToGroupServerIpType.setDescription('Ip address type of DHCP server. ')
h3cDHCPRIpToGroupServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cDHCPRIpToGroupServerIp.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIpToGroupServerIp.setDescription('Ip address of DHCP server. ')
h3cDHCPRIpToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDHCPRIpToGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIpToGroupRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, destroy. ')
h3cDHCPRIfToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 3), )
if mibBuilder.loadTexts: h3cDHCPRIfToGroupTable.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfToGroupTable.setDescription('A table for configuring DHCP server groups for interfaces. ')
h3cDHCPRIfToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDHCPRIfToGroupEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfToGroupEntry.setDescription('An entry for configuring DHCP server group for an interface. ')
h3cDHCPRIfToGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRIfToGroupGroupId.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfToGroupGroupId.setDescription('The DHCP server group for this interface. ')
h3cDHCPRIfToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDHCPRIfToGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRIfToGroupRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, destroy')
h3cDHCPRAddrCheckTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 4), )
if mibBuilder.loadTexts: h3cDHCPRAddrCheckTable.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRAddrCheckTable.setDescription('A table containing the states of dhcp security address check switchs for interfaces. ')
h3cDHCPRAddrCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDHCPRAddrCheckEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRAddrCheckEntry.setDescription('An entry containing the state of dhcp security address check switch for an interface. ')
h3cDHCPRAddrCheckSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRAddrCheckSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRAddrCheckSwitch.setDescription('The state of dhcp security address check switch for this interface. It has two defined values: enabled and disabled. If the value is enabled, the address check function would be enabled. The default value is disabled. ')
h3cDHCPRSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5), )
if mibBuilder.loadTexts: h3cDHCPRSecurityTable.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityTable.setDescription('A table containing the information of DHCP security. ')
h3cDHCPRSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-DHCPRELAY-MIB", "h3cDHCPRSecurityClientIpAddrType"), (0, "A3COM-HUAWEI-DHCPRELAY-MIB", "h3cDHCPRSecurityClientIpAddr"))
if mibBuilder.loadTexts: h3cDHCPRSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityEntry.setDescription('An entry containing the information of DHCP security. ')
h3cDHCPRSecurityClientIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: h3cDHCPRSecurityClientIpAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityClientIpAddrType.setDescription("DHCP client's net ip address type")
h3cDHCPRSecurityClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cDHCPRSecurityClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityClientIpAddr.setDescription("DHCP client's net ip address")
h3cDHCPRSecurityClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRSecurityClientMacAddr.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityClientMacAddr.setDescription("DHCP client's mac address")
h3cDHCPRSecurityClientProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRSecurityClientProperty.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityClientProperty.setDescription('Property of client address')
h3cDHCPRSecurityClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDHCPRSecurityClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRSecurityClientRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, destroy')
h3cDHCPRStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6))
h3cDHCPRRxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRRxClientPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRRxClientPktNum.setDescription('The total number of the packets received from DHCP clients by DHCP relay. ')
h3cDHCPRTxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRTxClientPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRTxClientPktNum.setDescription('The total number of the brodcast packets transmitted to DHCP clients by DHCP relay. ')
h3cDHCPRRxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRRxServerPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRRxServerPktNum.setDescription('The total number of the packets received from DHCP Servers by DHCP relay. ')
h3cDHCPRTxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRTxServerPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRTxServerPktNum.setDescription('The total number of the packets transmitted to DHCP Servers by DHCP relay. ')
h3cDHCPRDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRDiscoverPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRDiscoverPktNum.setDescription('The total number of the DHCP Discover packets handled by DHCP relay. ')
h3cDHCPRRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRRequestPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRRequestPktNum.setDescription('The total number of the DHCP Request packets handled by DHCP relay. ')
h3cDHCPRDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRDeclinePktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRDeclinePktNum.setDescription('The total number of the DHCP Decline packets handled by DHCP relay. ')
h3cDHCPRReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRReleasePktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRReleasePktNum.setDescription('The total number of the DHCP Release packets handled by DHCP relay. ')
h3cDHCPRInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRInformPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRInformPktNum.setDescription('The total number of the DHCP Inform packets handled by DHCP relay. ')
h3cDHCPROfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPROfferPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROfferPktNum.setDescription('The total number of the DHCP Offer packets handled by DHCP relay. ')
h3cDHCPRAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRAckPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRAckPktNum.setDescription('The total number of the DHCP Ack packets handled by DHCP relay. ')
h3cDHCPRNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDHCPRNakPktNum.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRNakPktNum.setDescription('The total number of the DHCP Nak packets handled by DHCP relay. ')
h3cDHCPRStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 6, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRStatisticsReset.setDescription('This node only supports set operation. If the value is true,it will clear all of the packet statistics. ')
h3cDHCPRCycleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 7))
h3cDHCPRCycleStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPRCycleStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRCycleStatus.setDescription('If the value is on, the cycle function would be enabled. ')
h3cDHCPRConfigOption82Group = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8))
h3cDHCPROption82Switch = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82Switch.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82Switch.setDescription('If the value is enabled, DHCP relay supporting option 82 function would be enabled. ')
h3cDHCPROption82HandleStrategy = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82HandleStrategy.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82HandleStrategy.setDescription("The strategies of DHCP relay handling option 82. 'drop' indicates DHCP relay discarding the request packet including option 82. 'keep' indicates DHCP relay accepting the request packet without any change of the option 82. 'replace' indicates DHCP relay accepting the request packet on condition that it generates a new option 82 to replace the original one. ")
h3cDHCPRConfigOption82IfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3), )
if mibBuilder.loadTexts: h3cDHCPRConfigOption82IfTable.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRConfigOption82IfTable.setDescription('A table containing the information of DHCP option 82. This table depends on h3cDHCPRIfToGroupTable. An entry of this table will be created when an entry of h3cDHCPRIfToGroupTable is created. ')
h3cDHCPRConfigOption82IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDHCPRConfigOption82IfEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPRConfigOption82IfEntry.setDescription('An entry containing the information of DHCP option 82. ')
h3cDHCPROption82IfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82IfSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82IfSwitch.setDescription("If DHCP relay supports option 82 functions, the value is 'enabled'. If DHCP relay does not support option 82 functions, the value is 'disabled'. ")
h3cDHCPROption82IfStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82IfStrategy.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82IfStrategy.setDescription("The strategies of DHCP relay handling option 82. 'drop' indicates DHCP relay discarding the request packet including option 82. 'keep' indicates DHCP relay accepting the request packet without any change of the option 82. 'replace' indicates DHCP relay accepting the request packet on condition that it generates a new option 82 to replace the original one. ")
h3cDHCPROption82IfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82IfFormat.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82IfFormat.setDescription("The format of DHCP relay option 82. 'normal' is the standard format. 'verbose' is the detailed format. ")
h3cDHCPROption82IfNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("mac", 2), ("sysname", 3), ("userdefine", 4))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82IfNodeType.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82IfNodeType.setDescription("Property of DHCP relay option 82 verbose format. The value can be set by user only when the value of h3cDHCPROption82IfFormat is set with 'verbose'. If the value of h3cDHCPROption82IfFormat is 'normal', the value is automatically set with 'invalid'. the value can not be set with 'invalid' by user. 'mac' indicates the option 82 verbose format is filled in with the mac of DHCP relay input interface. If the value of h3cDHCPROption82IfFormat is set with 'verbose', the value is automatically set with 'mac'. 'sysname' indicates the option 82 verbose format is filled in with the name of the DHCP relay. 'userdefine' indicates the option 82 verbose format is filled in with the string defined by user. If the value is set with 'userdefine', the value of h3cDHCPROption82IfUsrDefString must be set simultaneously. ")
h3cDHCPROption82IfUsrDefString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 58, 1, 8, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDHCPROption82IfUsrDefString.setStatus('current')
if mibBuilder.loadTexts: h3cDHCPROption82IfUsrDefString.setDescription("The string defined by user to fill in the option 82 verbose format. If the value of h3cDHCPROption82IfFormat is 'normal', or the value of h3cDHCPROption82IfNodeType is 'mac' or 'sysname', it is set with a null string automatically and can not be modified by user. It must be set with a non-zero length string when the value of h3cDHCPROption82IfNodeType is set with 'userdefine'. ")
mibBuilder.exportSymbols("A3COM-HUAWEI-DHCPRELAY-MIB", h3cDHCPRSecurityClientIpAddrType=h3cDHCPRSecurityClientIpAddrType, h3cDHCPRIfToGroupEntry=h3cDHCPRIfToGroupEntry, h3cDHCPRIfToGroupGroupId=h3cDHCPRIfToGroupGroupId, h3cDHCPRIpToGroupEntry=h3cDHCPRIpToGroupEntry, h3cDHCPRSecurityTable=h3cDHCPRSecurityTable, h3cDHCPRSecurityClientProperty=h3cDHCPRSecurityClientProperty, h3cDHCPRDiscoverPktNum=h3cDHCPRDiscoverPktNum, h3cDHCPRNakPktNum=h3cDHCPRNakPktNum, h3cDHCPROption82IfFormat=h3cDHCPROption82IfFormat, h3cDHCPROption82IfUsrDefString=h3cDHCPROption82IfUsrDefString, h3cDHCPRIfToGroupRowStatus=h3cDHCPRIfToGroupRowStatus, h3cDHCPRSecurityClientRowStatus=h3cDHCPRSecurityClientRowStatus, h3cDHCPROfferPktNum=h3cDHCPROfferPktNum, h3cDHCPRIpToGroupGroupId=h3cDHCPRIpToGroupGroupId, h3cDHCPROption82Switch=h3cDHCPROption82Switch, h3cDHCPRRxServerPktNum=h3cDHCPRRxServerPktNum, h3cDHCPROption82IfSwitch=h3cDHCPROption82IfSwitch, h3cDHCPRCycleGroup=h3cDHCPRCycleGroup, h3cDHCPRAddrCheckSwitch=h3cDHCPRAddrCheckSwitch, PYSNMP_MODULE_ID=h3cDhcpRelay, h3cDHCPROption82HandleStrategy=h3cDHCPROption82HandleStrategy, h3cDHCPRMibObject=h3cDHCPRMibObject, h3cDHCPROption82IfStrategy=h3cDHCPROption82IfStrategy, h3cDHCPRIfToGroupTable=h3cDHCPRIfToGroupTable, h3cDHCPRConfigOption82IfTable=h3cDHCPRConfigOption82IfTable, h3cDHCPRAckPktNum=h3cDHCPRAckPktNum, h3cDHCPRIpToGroupTable=h3cDHCPRIpToGroupTable, h3cDHCPRSecurityEntry=h3cDHCPRSecurityEntry, h3cDHCPROption82IfNodeType=h3cDHCPROption82IfNodeType, h3cDHCPRReleasePktNum=h3cDHCPRReleasePktNum, h3cDHCPRIfSelectRelayMode=h3cDHCPRIfSelectRelayMode, h3cDHCPRConfigOption82Group=h3cDHCPRConfigOption82Group, h3cDHCPRIpToGroupServerIp=h3cDHCPRIpToGroupServerIp, h3cDHCPRInformPktNum=h3cDHCPRInformPktNum, h3cDHCPRCycleStatus=h3cDHCPRCycleStatus, h3cDHCPRTxServerPktNum=h3cDHCPRTxServerPktNum, h3cDhcpRelay=h3cDhcpRelay, h3cDHCPRStatisticsGroup=h3cDHCPRStatisticsGroup, h3cDHCPRIfSelectTable=h3cDHCPRIfSelectTable, h3cDHCPRIpToGroupServerIpType=h3cDHCPRIpToGroupServerIpType, h3cDHCPRSecurityClientIpAddr=h3cDHCPRSecurityClientIpAddr, h3cDHCPRDeclinePktNum=h3cDHCPRDeclinePktNum, h3cDHCPRStatisticsReset=h3cDHCPRStatisticsReset, h3cDHCPRTxClientPktNum=h3cDHCPRTxClientPktNum, h3cDHCPRIpToGroupRowStatus=h3cDHCPRIpToGroupRowStatus, h3cDHCPRRequestPktNum=h3cDHCPRRequestPktNum, h3cDHCPRRxClientPktNum=h3cDHCPRRxClientPktNum, h3cDHCPRSecurityClientMacAddr=h3cDHCPRSecurityClientMacAddr, h3cDHCPRConfigOption82IfEntry=h3cDHCPRConfigOption82IfEntry, h3cDHCPRAddrCheckTable=h3cDHCPRAddrCheckTable, h3cDHCPRAddrCheckEntry=h3cDHCPRAddrCheckEntry, h3cDHCPRIfSelectEntry=h3cDHCPRIfSelectEntry)
