#
# PySNMP MIB module WWP-EXT-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-EXT-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter32, Counter64, Integer32, IpAddress, Bits, MibIdentifier, Gauge32, ObjectIdentity, iso, NotificationType, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Counter64", "Integer32", "IpAddress", "Bits", "MibIdentifier", "Gauge32", "ObjectIdentity", "iso", "NotificationType", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, MacAddress, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "RowStatus", "DisplayString", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpExtBridgeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 4))
wwpExtBridgeMIB.setRevisions(('2005-11-23 09:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpExtBridgeMIB.setRevisionsDescriptions(('This MIB module is for the Extension of the BRIDGE MIB for WWP Products', 'Initial creation.',))
if mibBuilder.loadTexts: wwpExtBridgeMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpExtBridgeMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpExtBridgeMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpExtBridgeMIB.setDescription('Updated with port rate limit state and rate limit value controls.')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpExtBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1))
wwpPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1))
wwpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2))
wwpExtBridgeMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 2))
wwpExtBridgeMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 2, 0))
wwpExtBridgeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 3))
wwpExtBridgeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 3, 1))
wwpExtBridgeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 4, 3, 2))
wwpPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: wwpPortTable.setStatus('current')
if mibBuilder.loadTexts: wwpPortTable.setDescription('Table of Ports.')
wwpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "WWP-EXT-BRIDGE-MIB", "wwpPortId"))
if mibBuilder.loadTexts: wwpPortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpPortEntry.setDescription('Port Entry in the Table.')
wwpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortId.setStatus('current')
if mibBuilder.loadTexts: wwpPortId.setDescription("Port ID for the instance. Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lx", 1), ("fastEth", 2), ("voip", 3), ("sx", 4), ("hundredFx", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortType.setStatus('current')
if mibBuilder.loadTexts: wwpPortType.setDescription('The port type for the port.')
wwpPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortName.setStatus('current')
if mibBuilder.loadTexts: wwpPortName.setDescription('Friendly name for the port.')
wwpPortPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortPhysAddr.setStatus('current')
if mibBuilder.loadTexts: wwpPortPhysAddr.setDescription('The ethernet MAC address for the port. This information can also be achieved via dot1dTpFdbTable')
wwpPortAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortAutoNeg.setStatus('current')
if mibBuilder.loadTexts: wwpPortAutoNeg.setDescription('The object sets the port to AUTO NEG MOde and vice versa. Specific platforms may have requirements of configuring speed before moving the port to out of AUTO-NEG mode.')
wwpPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpPortAdminStatus.setDescription('The desired state of the port.')
wwpPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpPortOperStatus.setDescription('The current operational state of Port.')
wwpPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMb", 1), ("hundredMb", 2), ("gig", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpPortAdminSpeed.setDescription("Desired speed of the port. Set the port speed to be either 10MB, 100MB, or gig. The Management Station can't set the adminSpeed to auto. The default value for this object depends upon the platform.")
wwpPortOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortOperSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpPortOperSpeed.setDescription('The current operational speed of the port in MB.')
wwpPortAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortAdminDuplex.setStatus('current')
if mibBuilder.loadTexts: wwpPortAdminDuplex.setDescription('The desired mode for the port. It can be set to either half or full duplex operation but not to auto.The default value for this object depends upon the platform.')
wwpPortOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortOperDuplex.setStatus('current')
if mibBuilder.loadTexts: wwpPortOperDuplex.setDescription('The current duplex mode of the port.')
wwpPortAdminFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortAdminFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: wwpPortAdminFlowCtrl.setDescription('Configures the ports flow control operation. Need to check 802.3x for additional modes for gig ports.')
wwpPortOperFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortOperFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: wwpPortOperFlowCtrl.setDescription('Shows ports flow control configuration.')
wwpPortTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untagged", 0), ("tagged", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortTagged.setStatus('current')
if mibBuilder.loadTexts: wwpPortTagged.setDescription("The port tagged Status can be set to tagged or untagged. If a port is part of more than one VLAN, then the port Status should be 'tagged'.")
wwpPortUntaggedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortUntaggedPriority.setStatus('current')
if mibBuilder.loadTexts: wwpPortUntaggedPriority.setDescription('The 802.1p packet priority to be assigned to packets associated with this port that do not have an 802.1Q VLAN header.')
wwpPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpPortMaxFrameSize.setDescription('Setting this object will set the max frame size allowed on a port. The max frame size can vary between 1522 bytes till 9216 bytes. Default value is 1522 bytes')
wwpPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: wwpPortIngressFiltering.setDescription('When this is true(1) the device will discard incoming frames for VLANs which do not include this Port in its Member set. When false(2), the port will accept all incoming frames.')
wwpPortRateLimitState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortRateLimitState.setStatus('current')
if mibBuilder.loadTexts: wwpPortRateLimitState.setDescription('When set to true, the rate limiting mechanism is enabled for this port. When set to false, the rate limiting mechanism is disabled for this port.')
wwpPortRateLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10000000)).setUnits('Bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortRateLimitValue.setStatus('current')
if mibBuilder.loadTexts: wwpPortRateLimitValue.setDescription('The value of this object represents the desired bit-rate limit for this port. When the rate limiting mechanism is enabled for this port, this value is enforced to the best extent possible by the device. For some devices the actual maximum bit-rate allowed may exceed the rate limit parameter under certain circumstances due to hardware and software limitations.')
wwpLocalMgmtPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLocalMgmtPortEnable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLocalMgmtPortEnable.setDescription('Setting this object to false(2) will disable the local Management Port. The object has beed deprecated as we need to have the general functionality of disabling and enableing any in-band and out-band mgmt interface.')
wwpVlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVlanVersionNumber.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: wwpVlanVersionNumber.setStatus('current')
if mibBuilder.loadTexts: wwpVlanVersionNumber.setDescription('The version number of IEEE 802.1Q that this device supports.')
wwpMaxVlanId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMaxVlanId.setReference('IEEE 802.1Q/D11 Section 9.3.2.3')
if mibBuilder.loadTexts: wwpMaxVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpMaxVlanId.setDescription('The maximum IEEE 802.1Q VLAN ID that this device supports.')
wwpMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMaxSupportedVlans.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: wwpMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: wwpMaxSupportedVlans.setDescription('The maximum number of IEEE 802.1Q VLANs that this device supports.')
wwpNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpNumVlans.setReference('IEEE 802.1Q/D11 Section 12.7.1.1')
if mibBuilder.loadTexts: wwpNumVlans.setStatus('current')
if mibBuilder.loadTexts: wwpNumVlans.setDescription('The current number of IEEE 802.1Q VLANs that are configured in this device.')
wwpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5), )
if mibBuilder.loadTexts: wwpVlanTable.setStatus('current')
if mibBuilder.loadTexts: wwpVlanTable.setDescription('VLAN table')
wwpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1), ).setIndexNames((0, "WWP-EXT-BRIDGE-MIB", "wwpVlanId"))
if mibBuilder.loadTexts: wwpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: wwpVlanEntry.setDescription('table of vlans')
wwpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpVlanId.setDescription('802.1Q VLAN ID (1-4094)')
wwpVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpVlanName.setStatus('current')
if mibBuilder.loadTexts: wwpVlanName.setDescription('Name associated with this VLAN.')
wwpVlanCurrentEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1, 3), PortList().clone(hexValue="0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVlanCurrentEgressPorts.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: wwpVlanCurrentEgressPorts.setStatus('current')
if mibBuilder.loadTexts: wwpVlanCurrentEgressPorts.setDescription('The set of ports which are transmitting traffic for this VLAN as either tagged or untagged frames.')
wwpVlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVlanCurrentUntaggedPorts.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: wwpVlanCurrentUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: wwpVlanCurrentUntaggedPorts.setDescription('The set of ports which are transmitting traffic for this VLAN as untagged frames.')
wwpVlanMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notMgmtVlan", 0), ("remoteMgmtVlan", 1), ("localMgmtVlan", 2))).clone('notMgmtVlan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVlanMgmtStatus.setStatus('current')
if mibBuilder.loadTexts: wwpVlanMgmtStatus.setDescription('Indicates if this VLAN is a management VLAN. The system can have at most one remote mgt vlan, and one local mgt vlan. Any Valn can be set either to remoteMgmtVlan or localMgmtvlan.')
wwpVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpVlanRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, there should not be any port associated with this vlan.")
wwpVlanXTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 6), )
if mibBuilder.loadTexts: wwpVlanXTable.setStatus('current')
if mibBuilder.loadTexts: wwpVlanXTable.setDescription('Extension of the VLAN table')
wwpVlanXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 6, 1), )
wwpVlanEntry.registerAugmentions(("WWP-EXT-BRIDGE-MIB", "wwpVlanXEntry"))
wwpVlanXEntry.setIndexNames(*wwpVlanEntry.getIndexNames())
if mibBuilder.loadTexts: wwpVlanXEntry.setStatus('current')
if mibBuilder.loadTexts: wwpVlanXEntry.setDescription('Entry in the extended vlan table.')
wwpVlanTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 4, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVlanTunnel.setStatus('current')
if mibBuilder.loadTexts: wwpVlanTunnel.setDescription('Enable/disable VLAN tunneling on this VLAN.')
mibBuilder.exportSymbols("WWP-EXT-BRIDGE-MIB", wwpVlanId=wwpVlanId, wwpVlanEntry=wwpVlanEntry, wwpExtBridgeMIBObjects=wwpExtBridgeMIBObjects, wwpVlanName=wwpVlanName, wwpExtBridgeMIBCompliances=wwpExtBridgeMIBCompliances, wwpPortAdminDuplex=wwpPortAdminDuplex, wwpPortAdminFlowCtrl=wwpPortAdminFlowCtrl, wwpVlanCurrentUntaggedPorts=wwpVlanCurrentUntaggedPorts, wwpVlanXTable=wwpVlanXTable, wwpNumVlans=wwpNumVlans, wwpPortEntry=wwpPortEntry, VlanId=VlanId, PYSNMP_MODULE_ID=wwpExtBridgeMIB, wwpExtBridgeMIBConformance=wwpExtBridgeMIBConformance, wwpVlanCurrentEgressPorts=wwpVlanCurrentEgressPorts, wwpPortOperFlowCtrl=wwpPortOperFlowCtrl, wwpLocalMgmtPortEnable=wwpLocalMgmtPortEnable, wwpPortAutoNeg=wwpPortAutoNeg, wwpExtBridgeMIBNotificationPrefix=wwpExtBridgeMIBNotificationPrefix, wwpVlanTable=wwpVlanTable, wwpPortType=wwpPortType, wwpPortOperDuplex=wwpPortOperDuplex, wwpPortRateLimitState=wwpPortRateLimitState, wwpExtBridgeMIB=wwpExtBridgeMIB, wwpPortAdminStatus=wwpPortAdminStatus, wwpVlanRowStatus=wwpVlanRowStatus, wwpVlanMgmtStatus=wwpVlanMgmtStatus, wwpVlanVersionNumber=wwpVlanVersionNumber, wwpPortRateLimitValue=wwpPortRateLimitValue, wwpPortMaxFrameSize=wwpPortMaxFrameSize, wwpPortPhysAddr=wwpPortPhysAddr, wwpPortTagged=wwpPortTagged, wwpVlanTunnel=wwpVlanTunnel, wwpPortTable=wwpPortTable, wwpExtBridgeMIBGroups=wwpExtBridgeMIBGroups, wwpExtBridgeMIBNotifications=wwpExtBridgeMIBNotifications, wwpPortName=wwpPortName, wwpPortIngressFiltering=wwpPortIngressFiltering, wwpMaxVlanId=wwpMaxVlanId, wwpMaxSupportedVlans=wwpMaxSupportedVlans, PortList=PortList, wwpPortOperStatus=wwpPortOperStatus, wwpPortOperSpeed=wwpPortOperSpeed, wwpPort=wwpPort, wwpVlan=wwpVlan, wwpPortAdminSpeed=wwpPortAdminSpeed, wwpPortUntaggedPriority=wwpPortUntaggedPriority, wwpPortId=wwpPortId, wwpVlanXEntry=wwpVlanXEntry)
