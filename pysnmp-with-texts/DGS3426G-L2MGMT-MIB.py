#
# PySNMP MIB module DGS3426G-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3426G-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:46:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Integer32, Bits, TimeTicks, Counter64, IpAddress, ModuleIdentity, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Integer32", "Bits", "TimeTicks", "Counter64", "IpAddress", "ModuleIdentity", "Counter32", "Unsigned32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
dgs3426g, = mibBuilder.importSymbols("SW34XXPRIMGMT-MIB", "dgs3426g")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization(' ')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo(' ')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1))
swL2MultiFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 14))
swL2IpLimitedMulticastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    description = 'This data type is used as the syntax of the swL2PortAutoNegCapabilityBits, swL2PortAutoNegCapAdvertisedBits, and swL2PortAutoNegCapReceivedBits objects in swL2PortAutoNegTable.'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
swDevModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3), )
if mibBuilder.loadTexts: swDevModuleInfoTable.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoTable.setDescription('This table contains the module information.')
swDevModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swDevModuleInfoUnitID"), (0, "DGS3426G-L2MGMT-MIB", "swDevModuleInfoModuleID"))
if mibBuilder.loadTexts: swDevModuleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoEntry.setDescription('A list of management information for each unit in the system.')
swDevModuleInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setDescription('This object indicates the specific unit ID in the stacking/chassis table.')
swDevModuleInfoModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleID.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoModuleID.setDescription('This object indicates the module ID of this unit.')
swDevModuleInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setDescription('A textual string containing name of the the module. ')
swDevModuleInfoReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoReversion.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoReversion.setDescription('A textual string containing reversion of the module.')
swDevModuleInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoSerial.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoSerial.setDescription('A textual string containing serial of the module.')
swDevModuleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoDescription.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoDescription.setDescription('A textual string containing description of the module. ')
swDevInfoBootPromVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoBootPromVersion.setStatus('current')
if mibBuilder.loadTexts: swDevInfoBootPromVersion.setDescription('Boot Prom Version.')
swDevInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: swDevInfoFirmwareVersion.setDescription('Firmware Version.')
swDevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setStatus('current')
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setDescription('This object is a set of system LED indications. The first two octets is defined as system LED. The first LED is power LED. The second LED is console LED. The third LED is RPS (Redundancy Power Supply) LED. The other octets following the second octets are the logical port LED (following dot1dBasePort ordering). Every two bytes are presented to a port. The first byte is presentd to the Link/Activity LED. The second byte is presented to the Speed LED. Link/Activity LED : The most significant bit is used for blink/solid: 8 = The LED blinks. The second significant bit is used for link status: 1 = link fail. 2 = link pass. Speed LED : 01 = 10Mbps. 02 = 100Mbps. 03 = 1000Mbps. 04 = 10Gbps. The four remaining bits are currently unused and must be 0.')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlStpState.setDescription('This object can be enabled or disabled spanning tree algorithm during runtime of the system.')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setDescription('This object indicates layer 2 Internet Group Management Protocol (IGMP) capture function is enabled or disabled.')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setDescription('')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setDescription('This object can be enabled or disabled RMON.')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('As the object is set to active, all the statistic counters will be cleared. If set to normal, do nothing.')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 6), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setDescription('Indicates the VLAN ID which the Dot1dTpFdbTable belongs to ; The default value is DEFAULT_VLAN_ID of system .')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setDescription('This object controls which Vlan includes system ip. And the Vlan should have been created.')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enabled or disabled MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of variation MAC in address table. The default value is 1 .')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval in second for trigger the MAC notify message. ')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 13))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebState.setDescription('This object control web status.')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setDescription("This object can designate tcp port. When web disable this object can't accessible.")
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object control telnet status.')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setDescription("This object can designate tcp port. When telnet disable this object can't accessible.")
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setDescription('')
swL2DevCtrlClipagingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlClipagingState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlClipagingState.setDescription('')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setDescription('Specifies the state of the LLDP function. When this function is enabled, the switch can start to transmit LLDP packets and receive and process the LLDP packets. The specific function of each port will depend on the per port LLDP setting. For the advertisement of LLDP packets, the switch announces the information to its neighbor through ports. For receiving LLDP packets, the switch will learn the information from the LLDP packets advertised from the neighbor in the neighbor table. ')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setDescription("When lldp is disabled and lldp forward_message's are enabled, the LLDP Data Unit packets received by the switch will be forwarded. ")
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decide whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription("This object determine to send a trap or not when the switch topology was changed. If the object is enabled(3), the topologyChange trap is sent by the device when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port tranition, the device doesn't send the trap if this object value is disabled or other.")
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription("This object determine to send a trap or not when the link was changed. If the object is enabled(3), the Link Change trap is sent by the device when any of its ports link change. The device doesn't send the trap if this object value is disabled or other.")
swL2MultiFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 2, 1), )
if mibBuilder.loadTexts: swL2MultiFilterTable.setStatus('current')
if mibBuilder.loadTexts: swL2MultiFilterTable.setDescription(' A table that contains infomation about vlan multicast filter mode.')
swL2MultiFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 2, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2MultiFilterVid"))
if mibBuilder.loadTexts: swL2MultiFilterEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MultiFilterEntry.setDescription('A list of multicast filter mode information for each vlan. ')
swL2MultiFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MultiFilterVid.setStatus('current')
if mibBuilder.loadTexts: swL2MultiFilterVid.setDescription(' vid for each vlan')
swL2MultiFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MultiFilterMode.setStatus('current')
if mibBuilder.loadTexts: swL2MultiFilterMode.setDescription(' vlan multicast filter mode.')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS3426G-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoMediumType.setDescription('Indicates medium type of the port number.')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoUnitID.setDescription('Indicates ID of the unit in the system')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("portType-none", 0), ("portType-100Base-T", 2), ("portType-100Base-X", 3), ("portType-1000Base-T", 4), ("portType-1000Base-X", 5), ("portType-10GBase-R", 6), ("portType-10GBase-CX4", 7), ("portType-SIO", 8), ("portType-module-empty", 9), ("portType-user-last", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('This object indicates the connector type of this port.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInfoErrDisReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("err-none", 1), ("storm-control", 2), ("lbd-control", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrDisReason.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoErrDisReason.setDescription('This object indicates the port if disabled and why error disabled.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS3426G-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port of the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setDescription('Indicates medium type of the port number.')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decide the port enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Chose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlLockState.setDescription('This object decide the port is locked or not.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription('This object set each poet MAC notification state.')
swL2PortCtrlAutoNegRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setReference('[IEEE802.3], 30.6.1.2.1, acAutoNegRestartAutoConfig.')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setDescription('If the value of this object is set to restart(1) then this will force auto-negotiation to begin link renegotiation. If auto-negotiation signaling is disabled, a write to this object has no effect. Setting the value of this object to norestart(2) has no effect.')
swL2PortCtrlAutoNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 2, 1, 12), IANAifMauAutoNegCapBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setReference('[IEEE802.3], 30.6.1.1.6, aAutoNegAdvertisedTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setDescription('A value that uniquely identifies the set of capabilities advertised by the local auto-negotiation entity. Capabilities in this object that are not available in swL2PortAutoNegInfoCapabilityBits cannot be enabled. Note that the local auto-negotiation entity may advertise some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setDescription("This object configure the switch's jumbo frame settings.")
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setDescription('This object describes how many bytes the max jumbo frame is.')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setDescription('A table that is used to clear counter information about every port.')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 6, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setDescription('A list of entries used to clear the counter information for each port of the device.')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setDescription('This object indicates whether to clear the counters for each port of the device or not.')
swL2PortAutoNegInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8), )
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setDescription("A table that contains information about every port's auto negotiation status.")
swL2PortAutoNegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2PortAutoNegInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setDescription('A list of information for each port auto negotiation of the device.')
swL2PortAutoNegInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortAutoNegInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setReference('[IEEE802.3], 30.6.1.1.2, aAutoNegAdminState, and 30.6.1.2.2, acAutoNegAdminControl.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setDescription(' If the value of this object is disabled(2) then the interface will act as it would if it had no auto-negotiation signaling. The status is affect by setting swL2PortCtrlNwayState.')
swL2PortAutoNegInfoCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8, 1, 3), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setReference('[IEEE802.3], 30.6.1.1.5, aAutoNegLocalTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setDescription('A value that uniquely identifies the set of capabilities of the local auto-negotiation entity. Note that interfaces that support this MIB may have capabilities that extend beyond the scope of this MIB. Note that the local auto-negotiation entity may support some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortAutoNegInfoCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8, 1, 4), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setReference('[IEEE802.3], 30.6.1.1.6, aAutoNegAdvertisedTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setDescription('A value that uniquely identifies the set of capabilities advertised by the local auto-negotiation entity. Capabilities in this object that are not available in swL2PortAutoNegCapabilityBits cannot be enabled. Note that the local auto-negotiation entity may advertise some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortAutoNegInfoCapReceivedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 8, 1, 5), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setReference('[IEEE802.3], 30.6.1.1.7, aAutoNegReceivedTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setDescription('A value that uniquely identifies the set of capabilities received from the remote auto-negotiation entity. Note that interfaces that support this MIB may be attached to remote auto-negotiation entities that have capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortDropCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9), )
if mibBuilder.loadTexts: swL2PortDropCounterTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortDropCounterTable.setDescription('A table that contains information for each port drop counter.')
swL2PortDropCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2PortDropCounterPortIndex"))
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setDescription('A list of information for each port auto negotiation of the device.')
swL2PortDropCounterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortBufferFullDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setDescription('The total number of packets discarded while buffer full.')
swL2PortACLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortACLDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortACLDrops.setDescription('The total number of packets denied by ACLs.')
swL2PortMulticastDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMulticastDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortMulticastDrops.setDescription('The total number of multicast packet that is discarded.')
swL2PortVLANIngressDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setDescription('The total number of packets discarded by VLAN ingress checking.')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setDescription('.')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setDescription('A list of information contained in swL2QOSBandwidthControlTable.')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setDescription('Indicates the port .')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setDescription('Indicates RX Rate(1kbit/sec) of the specifed port. Value 10000000 means no limit.')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setDescription('Indicates TX Rate(1kbit/sec) of the specifed port. Value 10000000 means no limit.')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setDescription('The RxRate value comes from RADIUS server, If an 802.1X port is authenticated, this value will overwrites the locally configured RxRate. ')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setDescription('The TxRate value comes from RADIUS server, If an 802.1X port is authenticated, this value will overwrites the locally configured TxRate. ')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setDescription('.')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 2, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setDescription('A list of information contained in swL2QOSSchedulingTable.')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setDescription('Indicates the hardware queue number.')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setDescription('Indicates the maximum number of packets the hardware priority queue will be allowed to transmit before allowing the next lowest priority queue to transmit its packets. a value between 0 and 15 can be specified.')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setDescription('Indicates the mechanism of QOS scheduling.')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setDescription('.')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 3, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setDescription('A list of information contained in swL2QOS8021pUserPriorityTable.')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setDescription('The 802.1p user priority .')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setDescription("The number of the switch's hardware priority queue. The switch has four hardware priority queues available. They are numbered between 0 (the lowest priority) and 6 (the highest priority).")
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setDescription('.')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 4, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setDescription('A list of information contained in swL2QOS8021pDefaultPriorityTable.')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setDescription('Indicates the port number .')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setDescription('The priority value to assign to untagged packets received by the switch ports on the switch..')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setDescription('The value of 802.1p comes from RADIUS server. If an 802.1X port is authenticated, this value will overwrite the local configured value.')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setDescription('This object can control QOS scheduling Mechanism.')
swL2QOSHolPreventionCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setDescription('Control QOS Hol Prevention')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setDescription('port security feature which controls the address leaning capability and the traffic forwarding decision. Each port can have this function enabled or disabled. When it is enabled and a number is given said N, which allows N addresses to be learned at this port, the first N learned addresses are locked at this port as static entry. When the learned addresses number reach N, any coming packet with not learned source addresses are discarded (e.g. dropped) and no more new addresses can be learned at this port.')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setDescription('A list of information contained in swL2PortSecurityControlTable.')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setDescription('Indicates the secured port to lock address learning.')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setDescription('Indicates allowable number of addresses to be learned at this port.')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMode.setDescription('Indicates the mode of locking address. In deleteOnTimeout(3) mode - the locked addresses can be aged out after aging timer expire. In this mode, when the locked address is aged out, the number of address can be learned has to be increased by one. In deleteOnReset(4) mode - never age out the locked addresses unless restart the system to prevent from port movement or intrusion.')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setDescription('Indicates administration state of locking address.')
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 2))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setDescription('Indicates vlan name.')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setDescription("Indicates the port.0 indicated the function isn't working now.")
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 2, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setDescription('Specifies MAC address.')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setDescription('.')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setDescription('Maximum number of entries in the trunk configuration table (swL2TrunkCtrlTable).')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setDescription('Current actived number of entries in the trunk configuration table.')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setDescription('This table specifys which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setDescription('A list of information specifies which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkIndex.setDescription('The index of logical port trunk. The trunk group number depend on the existence of unit and module.')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkName.setDescription('The name of logical port trunk.')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMasterPort.setDescription('The object indicates the master port number of the port trunk entry. When using Port Trunk, you can not configure the other ports of the group except the master port. Their configuration must be same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMember.setDescription('Indicate how many number of ports is included in this Trunk. The trunk port number depend on the existence of module. The maximum number of ports is 8 for one trunks.')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setDescription('The object indicates the flooding port number of the port trunk entry. The first port of the trunk is implicitly configured to be the flooding port.')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkType.setDescription('This object indicated that type of the trunk group. static : is static trunk group lacp : is LACP trunk group . ')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkState.setDescription('This object indicates the status of this entry.')
swL2TrunkActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 3, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkActivePorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkActivePorts.setDescription('The object indicates the active ports of the port trunk entry.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures to part of the packet examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setDescription('This table specifys which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 5, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setDescription('A list of information specifies which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setDescription('The index of logical port lacp. ')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setDescription('The state of logical port lacp.')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setDescription('This object indicates switch which port will sniff another port. A trunk port member cannot be configured as a target Snooping port. The port number is the sequential (logical) number which is also applied to bridge MIB, etc.')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setDescription('The represent the ingress into the source port packet to sniffed.')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setDescription('The represent the egress from the source port packet to sniffed.')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortState.setDescription('This object indicates the port mirroring state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - writing this value to the object, and then the corresponding entry will be removed from the table. enabled(3) - this entry is reside in the table.')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setDescription('Maximum number of Vlans in the layer 2 IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setDescription('Maximum number of multicast ip group per Vlan in the layer 2 IGMP information table (swL2IGMPQueryInfoTable).')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setDescription("The table controls the Vlan's IGMP function. Its scale depends on current VLAN state (swL2VlanInfoStatus). If VLAN is disabled mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with index range from 1 to 12.")
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setDescription('The entry in IGMP control table (swL2IGMPCtrlTable). The entry is effective only when IGMP capture switch (swL2DevCtrlIGMPSnooping) is enabled.')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN id. If VLAN is disabled, the Vid is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the Vid is arranged from 1 to 12, fixed form. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setDescription('The frequency at which IGMP Host-Query packets are transmitted on this switch.')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setDescription('The maximum query response time on this switch.')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses.')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages.')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setDescription('The timer value for sending IGMP query packet when none was sent by the host in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer is expired. Please reference RFC2236-1997.')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setDescription('The Router Timeout is how long a host must wait after hearing a Query before it may send any IGMPv2 messages.')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setDescription('When a querier receives a Leave Group message for a group that has group members on the reception interface, it sends Group-Specific Queries every swL2IGMPLeaveTimer to the group being left.')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryState.setDescription('This object decide the IGMP query enabled or disabled.')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCurrentState.setDescription('This object indicates the current IGMP query state.')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP funtion is disabled for this entry. enable(3) - IGMP funtion is enabled for this entry.')
swL2IGMPFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setDescription('This object indicates the fast_leave status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP fast-leave funtion is disabled for this entry. enable(3) - IGMP fast-leave funtion is enabled for this entry.')
swL2IGMPQueryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryVersion.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryVersion.setDescription('Configure the IGMP version of query packet which will be sent by the router.')
swL2IGMPReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPReportSuppression.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPReportSuppression.setDescription('When enabled, multiple IGMP reports or leaves for a specific group (S,G) will be integrated into only one report before being sent to the router port.')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setDescription('The table contains the number current IGMP query packets which is captured by this device, as well as the IGMP query packets sent by the device.')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 4, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setDescription('Information about current IGMP query information, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrState of associated VLAN entry are all enabled.')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoVid.setDescription('This object indicates the Vid of associated IGMP info table entry. It follows swL2IGMPCtrlVid in the associated entry of IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function enabled, in per-VLAN basis.')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, in per-VLAN basis. In case of IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTable.setDescription('The table containing current IGMP information which captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entry are all enabled. Note that the priority of IGMP table entries is lower than Filtering Table, i.e. if there is a table hash collision between the entries of IGMP Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of IGMP Table. See swL2FilterMgmt description also.')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPVid"), (0, "DGS3426G-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setDescription('Information about current IGMP information which captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entry are all enabled.')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPVid.setDescription('This object indicates the Vid of individual IGMP table entry. It shows the Vid of IGMP report information captured on network.')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setDescription('This object is identify group ip address which is captured from IGMP packet, in per-Vlan basis.')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMacAddr.setDescription('This object is identify mac address which is corresponding to swL2IGMPGroupIpAddr, in per-Vlan basis.')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPPortMap.setDescription("This object indicates which ports are belong to the same multicast group, in per-Vlan basis. Each multicast group has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'(Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant). The 4 octets is represent one unit port according its logic port. If the unit less 32 port, the other port don't care just fill zero.")
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setDescription('This object indicate how much report packet was receive by our device corresponding with this entry from IGMP function enabled, in per-Vlan basis.')
swL2IGMPRouterPortsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 6), )
if mibBuilder.loadTexts: swL2IGMPRouterPortsTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortsTable.setDescription("The table controls the Vlan's IGMP router ports function.")
swL2IGMPRouterPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 6, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPRouterPortsVid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortsEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortsEntry.setDescription('The entry in IGMP router ports table (swL2IGMPRouterPortsTable).')
swL2IGMPRouterPortsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortsVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortsVid.setDescription("This object indicates the IGMP router ports entry's VLAN id. If VLAN is disabled, the Vid is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the Vid is arranged from 1 to 12, fixed form. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP ports Table.")
swL2IGMPRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 6, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterStaticPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterStaticPortList.setDescription('')
swL2IGMPRouterDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterDynamicPortList.setDescription('')
swL2IGMPRouterForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 6, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterForbiddenPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterForbiddenPortList.setDescription('')
swIGMPSnoopingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11), )
if mibBuilder.loadTexts: swIGMPSnoopingGroupTable.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupTable.setDescription('The table contains the current IGMP snooping group information captured by the device.')
swIGMPSnoopingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swIGMPSnoopingGroupVid"), (0, "DGS3426G-L2MGMT-MIB", "swIGMPSnoopingGroupGroupAddr"), (0, "DGS3426G-L2MGMT-MIB", "swIGMPSnoopingGroupSourceAddr"))
if mibBuilder.loadTexts: swIGMPSnoopingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupEntry.setDescription('Information about the current IGMP snooping group information which has been captured by the device.')
swIGMPSnoopingGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupVid.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupVid.setDescription('This object indicates the VID of the individual IGMP snooping group table entry.')
swIGMPSnoopingGroupGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupGroupAddr.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupGroupAddr.setDescription('This object identifies the group IP address which have been captured from the IGMP packet, on a per-VLAN basis.')
swIGMPSnoopingGroupSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupSourceAddr.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupSourceAddr.setDescription('This object identifies the source addresses.')
swIGMPSnoopingGroupIncludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupIncludePortMap.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupIncludePortMap.setDescription('This object indicates the port list under INCLUDE mode.')
swIGMPSnoopingGroupExcludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 11, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupExcludePortMap.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupExcludePortMap.setDescription('This object indicates the port list under EXCLUDE mode.')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setDescription('The information of the IGMP snooping multicast VLAN table.')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setDescription('The entry of swL2IGMPMulticastVlanTable.')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setDescription('This object indicates the VLAN ID of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setDescription('This object indicates the VLAN name of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setDescription('This object indicate the portlist of the source ports of IGMP snooping multicast VLAN. The source ports will be set as tag ports of the VLAN entry. And the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setDescription('This object indicate the portlist of the member ports of the IGMP snooping multicast VLAN. The source ports will be set as untagged ports of the VLAN entry. And the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setDescription('This object indicate the portlist of the tag member ports of IGMP snooping multicast VLAN.')
swL2IGMPMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setDescription(' This object can be enabled or disabled IGMP_snooping multicast VLAN.')
swL2IGMPMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setDescription('The replace source IP of this multicast vlan.')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPMulticastVlanRemoveAllMcastAddrListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setDescription('This object indicates if remove all the multicast address list from the IGMP multicast VLAN or not.')
swL2IGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 8), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setDescription('The table containing the IGMP snooping multicast VLAN group information')
swL2IGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 8, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupVid"), (0, "DGS3426G-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupFromIp"), (0, "DGS3426G-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setDescription('Information about current IGMP snooping multicast VLAN group.')
swL2IGMPMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setDescription('This object indicates the Vid of IGMP snooping multicast VLAN group.')
swL2IGMPMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setDescription('Specifies the multicast address list for this VLAN.')
swL2IGMPMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setDescription('Specifies the multicast address list for this VLAN.')
swL2IGMPMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPSnoopingStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 16), )
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupTable.setDescription('The table contains the current IGMP snooping static group information captured by the device.')
swL2IGMPSnoopingStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 16, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IGMPSnoopingStaticGroupVID"), (0, "DGS3426G-L2MGMT-MIB", "swL2IGMPSnoopingStaticGroupIPaddress"))
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupEntry.setDescription('Information about current IGMP snooping static group information captured by the device.')
swL2IGMPSnoopingStaticGroupVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupVID.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupVID.setDescription('This object indicates the VID of the current IGMP snooping static group.')
swL2IGMPSnoopingStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupIPaddress.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupIPaddress.setDescription('This object indicates the current IGMP snooping static group IP address. ')
swL2IGMPSnoopingStaticGroupMemberPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 16, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupMemberPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupMemberPortList.setDescription('This object indicates the current IGMP snooping static group Member Portlist. ')
swL2IGMPSnoopingStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 11, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupRowStatus.setDescription('This object indicates the status of this entry.')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifys the port just can forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 14, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information specifies the port with its traffic forward list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list that the specific port can forward traffic.')
swL2IpLimitedMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1), )
if mibBuilder.loadTexts: swL2IpLimitedMulticastTable.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastTable.setDescription("This entity's per-port Limited IP multicast address range table.")
swL2IpLimitedMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2IpLimitedMulticastPortIndex"))
if mibBuilder.loadTexts: swL2IpLimitedMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastEntry.setDescription("A particular route to a particular destination, under a particular policy. Once an entry be built,it shouldn't be modified.That is,it just support create and delete action.")
swL2IpLimitedMulticastPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpLimitedMulticastPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastPortIndex.setDescription('A port to config the limited multicast address.')
swL2IpLimitedMulticastHead = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastHead.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastHead.setDescription('The head of multicast address range.')
swL2IpLimitedMulticastTail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastTail.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastTail.setDescription('The tail of multicast address range.')
swL2IpLimitedMulticastAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastAccess.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastAccess.setDescription('It allow you to permit or deny multicast range.')
swL2IpLimitedMulticastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastState.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastState.setDescription('Enable or disable limited multicast address for the chosen portlist.')
swL2IpLimitedMulticastDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastDelState.setStatus('current')
if mibBuilder.loadTexts: swL2IpLimitedMulticastDelState.setDescription('Enable or disable delete limited multicast address for the chosen portlist.')
swL2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1), )
if mibBuilder.loadTexts: swL2VlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanTable.setDescription('A table containing current configuration information for each VLAN currently configured into the device by (local or network) management, or dynamically created as a result of GVRP requests received.')
swL2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanEntry.setDescription('Information for a VLAN configured into the device by (local or network) management, or dynamically created as a result of GVRP requests received.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN ID of the VLAN to be created. The range is 1 - 4094.')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
if mibBuilder.loadTexts: swL2VlanName.setDescription('The name of the VLAN to be displayed.')
swL2VlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid-vlan-type", 0), ("static-1q-vlan", 1), ("dynamic-vlan", 2), ("port-base-vlan", 3), ("protocolvlan", 4), ("double-vlan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanType.setStatus('current')
if mibBuilder.loadTexts: swL2VlanType.setDescription('The type of the VLAN to be displayed.')
swL2VlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanMemberPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanMemberPorts.setDescription('A range of member ports to the VLAN.')
swL2VlanStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanStaticPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticPorts.setDescription('A range of static ports to the VLAN.')
swL2VlanStaticTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanStaticTaggedPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticTaggedPorts.setDescription('Specifies the additional ports as tagged.')
swL2VlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 7), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanStaticUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticUntaggedPorts.setDescription('Specifies the additional ports as untagged.')
swL2VlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanForbiddenPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanForbiddenPorts.setDescription('The set of ports which are prohibited by management from being included in the egress list for this VLAN. Changes to this object that cause a port to be included or excluded affect the per-port per-VLAN Registrar control for Registration Forbidden for the relevant GVRP state machine on each port. A port may not be added in this set if it is already a member of the set of ports in dot1qVlanStaticEgressPorts. The default value of this object is a string of zeros of appropriate length, excluding all ports from the forbidden set.')
swL2VlanCurrentTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 9), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanCurrentTaggedPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanCurrentTaggedPorts.setDescription('The set of ports which are transmitting traffic for this VLAN as tagged frames.')
swL2VlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 10), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanCurrentUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: swL2VlanCurrentUntaggedPorts.setDescription('The set of ports which are transmitting traffic for this VLAN as untagged frames.')
swL2VlanAdvertisementState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertisementState.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementState.setDescription('Specifies the VLAN as able to join GVRP If this parameter is not set, the VLAN cannot be configured to have forbidden ports. This flag protocol VLAN is fixed to DISABLE.')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setDescription("This object controls the PVID auto assigment state. If 'Auto-assign PVID' is disabled, PVID only be changed by PVID configuration (user changes explicitly). The VLAN configuration will not automatically change PVID. If 'Auto-assign PVID' is enabled, PVID will be possibly changed by PVID or VLAN configuration. When user configures a port to VLAN X's untagged membership, this port's PVID will be updated with VLAN X. In the form of VLAN list command, PVID is updated with last item of VLAN list. When user removes a port from the untagged membership of the PVID's VLAN, the port's PVID will be assigned with 'default VLAN'.")
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setDescription('This object indicates the loopback detection status for the system.')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectInterval.setDescription('This object indicates the interval value, the range is from 1 to 32767 seconds.')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setDescription('This object indicates the recover time, the range is from 60 to 1000000. The value of 0 disables the recover function.')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectMode.setDescription('This object indicates the loopback detection mode for the system.')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setDescription('This object indicates the loopback detection trap mode for the system.')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2, 1, 1), ).setIndexNames((0, "DGS3426G-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number specified in the module")
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortState.setDescription('This object indicates the loopback detection function state on the port.')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setDescription('This object indicates the VLAN list that has detected a loopback.')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setDescription('This object indicates the port status.')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0))
swL2LoopDetectedNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0, 0))
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0, 1)).setObjects(("DGS3426G-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicates the mac addresses variation in address table . ')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0, 0, 3)).setObjects(("DGS3426G-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopOccurred.setDescription('The trap is sent when Port loop occurred.')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0, 0, 4)).setObjects(("DGS3426G-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopRestart.setDescription('The trap is sent when Port loop restart after interval time.')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0, 0, 5)).setObjects(("DGS3426G-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3426G-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setDescription('The trap is sent when Port with VID loop occurred.')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 0, 0, 6)).setObjects(("DGS3426G-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3426G-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopRestart.setDescription('The trap is sent when Port with VID loop restart after interval time.')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates the last time reboot information.')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 11, 2, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setDescription('This object indicates the VID that has detected a loopback.')
mibBuilder.exportSymbols("DGS3426G-L2MGMT-MIB", swL2IpLimitedMulticastState=swL2IpLimitedMulticastState, swL2PortInfoTable=swL2PortInfoTable, swIGMPSnoopingGroupSourceAddr=swIGMPSnoopingGroupSourceAddr, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swDevModuleInfoModuleName=swDevModuleInfoModuleName, swL2TrunkType=swL2TrunkType, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2IGMPMacAddr=swL2IGMPMacAddr, swIGMPSnoopingGroupExcludePortMap=swIGMPSnoopingGroupExcludePortMap, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2TrunkActivePorts=swL2TrunkActivePorts, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2DevInfo=swL2DevInfo, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swDevModuleInfoEntry=swDevModuleInfoEntry, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2MultiFilterTable=swL2MultiFilterTable, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swDevModuleInfoUnitID=swDevModuleInfoUnitID, swL2QOSHolPreventionCtrl=swL2QOSHolPreventionCtrl, swL2IGMPSnoopingStaticGroupRowStatus=swL2IGMPSnoopingStaticGroupRowStatus, swL2IGMPRouterPortsVid=swL2IGMPRouterPortsVid, swL2IGMPMulticastVlanTagMemberPort=swL2IGMPMulticastVlanTagMemberPort, swL2DevAlarm=swL2DevAlarm, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swL2NotifFirmware=swL2NotifFirmware, swL2IGMPRouterStaticPortList=swL2IGMPRouterStaticPortList, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2IGMPMulticastVlanReplaceSourceIp=swL2IGMPMulticastVlanReplaceSourceIp, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2IpLimitedMulticastAccess=swL2IpLimitedMulticastAccess, swL2VlanName=swL2VlanName, swL2VlanStaticPorts=swL2VlanStaticPorts, swL2VlanAdvertisementState=swL2VlanAdvertisementState, swL2VlanMgmt=swL2VlanMgmt, swL2macNotification=swL2macNotification, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2IGMPSnoopingStaticGroupMemberPortList=swL2IGMPSnoopingStaticGroupMemberPortList, swL2PortInfoUnitID=swL2PortInfoUnitID, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2IGMPSnoopingStaticGroupVID=swL2IGMPSnoopingStaticGroupVID, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swIGMPSnoopingGroupEntry=swIGMPSnoopingGroupEntry, swL2DevMgmt=swL2DevMgmt, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2PortDropCounterEntry=swL2PortDropCounterEntry, swL2VlanTable=swL2VlanTable, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2IpLimitedMulticastTable=swL2IpLimitedMulticastTable, swL2IGMPPortMap=swL2IGMPPortMap, swL2VlanEntry=swL2VlanEntry, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2IGMPVid=swL2IGMPVid, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2IGMPRouterForbiddenPortList=swL2IGMPRouterForbiddenPortList, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2LoopDetectedNotify=swL2LoopDetectedNotify, swL2IpLimitedMulticastEntry=swL2IpLimitedMulticastEntry, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2VlanForbiddenPorts=swL2VlanForbiddenPorts, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2PortCtrlAutoNegRestart=swL2PortCtrlAutoNegRestart, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2TrunkName=swL2TrunkName, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2IGMPMulticastVlanState=swL2IGMPMulticastVlanState, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2IGMPFastLeaveState=swL2IGMPFastLeaveState, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2IGMPMulticastVlanGroupToIp=swL2IGMPMulticastVlanGroupToIp, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2MultiFilter=swL2MultiFilter, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2VlanStaticTaggedPorts=swL2VlanStaticTaggedPorts, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swIGMPSnoopingGroupTable=swIGMPSnoopingGroupTable, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2MultiFilterMode=swL2MultiFilterMode, swL2PortAutoNegInfoTable=swL2PortAutoNegInfoTable, swl2NotificationBidings=swl2NotificationBidings, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, MacAddress=MacAddress, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swIGMPSnoopingGroupVid=swIGMPSnoopingGroupVid, swL2TrafficSegPort=swL2TrafficSegPort, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2IpLimitedMulticastHead=swL2IpLimitedMulticastHead, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swDevModuleInfoDescription=swDevModuleInfoDescription, swL2MirrorMgmt=swL2MirrorMgmt, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2IpLimitedMulticastDelState=swL2IpLimitedMulticastDelState, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2IGMPRobustness=swL2IGMPRobustness, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2PortAutoNegInfoCapReceivedBits=swL2PortAutoNegInfoCapReceivedBits, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swDevInfoFrontPanelLedStatus=swDevInfoFrontPanelLedStatus, swL2IGMPRouterPortsTable=swL2IGMPRouterPortsTable, swL2DevCtrlClipagingState=swL2DevCtrlClipagingState, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2IGMPReportSuppression=swL2IGMPReportSuppression, swL2PortACLDrops=swL2PortACLDrops, swL2PortMgmt=swL2PortMgmt, swL2IpLimitedMulticastPortIndex=swL2IpLimitedMulticastPortIndex, swL2MirrorPortState=swL2MirrorPortState, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2IGMPMulticastVlanGroupEntry=swL2IGMPMulticastVlanGroupEntry, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2TrunkMember=swL2TrunkMember, swL2TrunkLACPPortState=swL2TrunkLACPPortState, PortList=PortList, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2MultiFilterEntry=swL2MultiFilterEntry, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2PortAutoNegInfoEntry=swL2PortAutoNegInfoEntry, swDevInfoFirmwareVersion=swDevInfoFirmwareVersion, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2PortInfoErrDisReason=swL2PortInfoErrDisReason, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortDropCounterPortIndex=swL2PortDropCounterPortIndex, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2IGMPMgmt=swL2IGMPMgmt, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2PortInfoType=swL2PortInfoType, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2PortAutoNegInfoCapAdvertisedBits=swL2PortAutoNegInfoCapAdvertisedBits, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2IGMPMulticastVlanGroupStatus=swL2IGMPMulticastVlanGroupStatus, swL2VlanCurrentTaggedPorts=swL2VlanCurrentTaggedPorts, swDevModuleInfoTable=swDevModuleInfoTable, swL2TrunkMgmt=swL2TrunkMgmt, swL2MACNotifyState=swL2MACNotifyState, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2VlanStaticUntaggedPorts=swL2VlanStaticUntaggedPorts, swL2PortCtrlAutoNegCapAdvertisedBits=swL2PortCtrlAutoNegCapAdvertisedBits, swL2PortSecurityMode=swL2PortSecurityMode, swL2LoopDetectMode=swL2LoopDetectMode, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2TrunkState=swL2TrunkState, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2IGMPRouterPortsEntry=swL2IGMPRouterPortsEntry, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2VlanType=swL2VlanType, swL2NotifyPrefix=swL2NotifyPrefix, swL2IGMPQueryVersion=swL2IGMPQueryVersion, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2IGMPRouterDynamicPortList=swL2IGMPRouterDynamicPortList, swIGMPSnoopingGroupIncludePortMap=swIGMPSnoopingGroupIncludePortMap, swL2TrafficSegTable=swL2TrafficSegTable, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2DevCtrl=swL2DevCtrl, VlanId=VlanId, swL2QOSMgmt=swL2QOSMgmt, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2Notify=swL2Notify, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2TrunkIndex=swL2TrunkIndex, swIGMPSnoopingGroupGroupAddr=swIGMPSnoopingGroupGroupAddr, swL2PortMulticastDrops=swL2PortMulticastDrops, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2IGMPMulticastVlanGroupVid=swL2IGMPMulticastVlanGroupVid, swL2PortAutoNegInfoAdminStatus=swL2PortAutoNegInfoAdminStatus, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swDevModuleInfoModuleID=swDevModuleInfoModuleID, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2PortCtrlLockState=swL2PortCtrlLockState, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2PortAutoNegInfoCapabilityBits=swL2PortAutoNegInfoCapabilityBits, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2IGMPSnoopingStaticGroupEntry=swL2IGMPSnoopingStaticGroupEntry, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, swL2IGMPQueryState=swL2IGMPQueryState, swL2macNotifyInfo=swL2macNotifyInfo, swL2IpLimitedMulticastTail=swL2IpLimitedMulticastTail, swDevInfoBootPromVersion=swDevInfoBootPromVersion, swL2PortVLANIngressDrops=swL2PortVLANIngressDrops, swL2PortAutoNegInfoPortIndex=swL2PortAutoNegInfoPortIndex, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2IGMPMulticastVlanGroupFromIp=swL2IGMPMulticastVlanGroupFromIp, swL2MultiFilterVid=swL2MultiFilterVid, swL2PortDropCounterTable=swL2PortDropCounterTable, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2VlanCurrentUntaggedPorts=swL2VlanCurrentUntaggedPorts, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2VlanMemberPorts=swL2VlanMemberPorts, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2IpLimitedMulticastMgmt=swL2IpLimitedMulticastMgmt, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2IGMPMulticastVlanRemoveAllMcastAddrListAction=swL2IGMPMulticastVlanRemoveAllMcastAddrListAction, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swDevModuleInfoSerial=swDevModuleInfoSerial, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2IGMPSnoopingStaticGroupIPaddress=swL2IGMPSnoopingStaticGroupIPaddress, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState)
mibBuilder.exportSymbols("DGS3426G-L2MGMT-MIB", swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2IGMPMulticastVlanGroupTable=swL2IGMPMulticastVlanGroupTable, swL2MgmtMIB=swL2MgmtMIB, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swDevModuleInfoReversion=swDevModuleInfoReversion, swL2PortCtrlTable=swL2PortCtrlTable, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2IGMPSnoopingStaticGroupTable=swL2IGMPSnoopingStaticGroupTable, swL2VlanIndex=swL2VlanIndex, swL2PortLoopRestart=swL2PortLoopRestart, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2PortBufferFullDrops=swL2PortBufferFullDrops, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot)
