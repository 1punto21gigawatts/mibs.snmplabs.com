#
# PySNMP MIB module OLD-CISCO-ENV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-ENV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, Counter32, Bits, ModuleIdentity, ObjectIdentity, Counter64, Integer32, iso, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Counter32", "Bits", "ModuleIdentity", "ObjectIdentity", "Counter64", "Integer32", "iso", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lenv = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 1))
envPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPresent.setStatus('mandatory')
if mibBuilder.loadTexts: envPresent.setDescription('Is there an environmental monitor card in this box?, 0 - No, 1-AGS card present, wrong firmware, 2-AGS CARD present, firmware ok, 3-7000 support')
envTestPt1Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1Descr.setDescription('Description of the test point 1. Typically ambient air or the temperature of air entering the router')
envTestPt1Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1Measure.setDescription('Current value of test point 1. Typically a temperature in centigrade.')
envTestPt2Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2Descr.setDescription('Description of the test point 2. Typically airflow or the temperature of air leaving the router')
envTestPt2Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2Measure.setDescription('Current value of test point 2. Typically a temperature in centigrade.')
envTestPt3Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3Descr.setDescription('Description of the test point 3. Typically +5 volt')
envTestPt3Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3Measure.setDescription('Current value of test point 3. Typically the value in millivolts of the +5v supply')
envTestPt4Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4Descr.setDescription('Description of the test point 4. Typically +12 volt')
envTestPt4Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4Measure.setDescription('Current value of test point 4. Typically the value in millivolts of the +12v supply')
envTestPt5Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5Descr.setDescription('Description of the test point 5. Typically -12 volt')
envTestPt5Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5Measure.setDescription('Current value of test point 5. Typically the value in millivolts of the -12v supply')
envTestPt6Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6Descr.setDescription('Description of the test point 6. Typically -5 volt')
envTestPt6Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6Measure.setDescription('Current value of test point 6. Typically the value in millivolts of the -5v supply')
envTestPt1MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1MarginVal.setDescription('Value at which the router will shutdown. Typically the ambient air temperature that will shut the router down. (e.g. 43)')
envTestPt2MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2MarginVal.setDescription('Value at which the router will shutdown. Typically the airflow air temperature that will shut the router down. (e.g. 58)')
envTestPt3MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically +5 volt')
envTestPt4MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically +12 volt')
envTestPt5MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically -12 volt')
envTestPt6MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically -5 volt')
envTestPt1last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1last.setDescription('Value of TestPt1 when last shutdown occurred.')
envTestPt2last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2last.setDescription('Value of TestPt2 when last shutdown occurred.')
envTestPt3last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3last.setDescription('Value of TestPt3 when last shutdown occurred.')
envTestPt4last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4last.setDescription('Value of TestPt4 when last shutdown occurred.')
envTestPt5last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5last.setDescription('Value of TestPt5 when last shutdown occurred.')
envTestPt6last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6last.setDescription('Value of TestPt6 when last shutdown occurred.')
envTestPt1warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1warn.setDescription('Is this test point at a warning level?')
envTestPt2warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2warn.setDescription('Is this test point at a warning level?')
envTestPt3warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3warn.setDescription('Is this test point at a warning level?')
envTestPt4warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4warn.setDescription('Is this test point at a warning level?')
envTestPt5warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5warn.setDescription('Is this test point at a warning level?')
envTestPt6warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6warn.setDescription('Is this test point at a warning level?')
envFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFirmVersion.setStatus('mandatory')
if mibBuilder.loadTexts: envFirmVersion.setDescription('Description of Environmental Card firmware')
envTechnicianID = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTechnicianID.setStatus('mandatory')
if mibBuilder.loadTexts: envTechnicianID.setDescription('Technician ID')
envType = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envType.setStatus('mandatory')
if mibBuilder.loadTexts: envType.setDescription('The type of environmental card')
envBurnDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envBurnDate.setStatus('mandatory')
if mibBuilder.loadTexts: envBurnDate.setDescription('The calibration / burn in date')
envSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: envSerialNumber.setDescription('Serial Number of environmental monitor card')
mibBuilder.exportSymbols("OLD-CISCO-ENV-MIB", envTestPt3last=envTestPt3last, envTestPt6last=envTestPt6last, envTestPt4warn=envTestPt4warn, envTestPt6warn=envTestPt6warn, envTestPt1Measure=envTestPt1Measure, envType=envType, envSerialNumber=envSerialNumber, lenv=lenv, envTestPt1last=envTestPt1last, envTestPt3MarginPercent=envTestPt3MarginPercent, envTestPt2warn=envTestPt2warn, envTestPt5warn=envTestPt5warn, envTestPt6Measure=envTestPt6Measure, envTestPt1Descr=envTestPt1Descr, envTestPt3Measure=envTestPt3Measure, envTestPt1warn=envTestPt1warn, envTestPt2MarginVal=envTestPt2MarginVal, envTestPt6MarginPercent=envTestPt6MarginPercent, envTestPt3warn=envTestPt3warn, envTechnicianID=envTechnicianID, envTestPt5Descr=envTestPt5Descr, envTestPt2Descr=envTestPt2Descr, envTestPt4MarginPercent=envTestPt4MarginPercent, envTestPt2last=envTestPt2last, envTestPt5Measure=envTestPt5Measure, envTestPt5MarginPercent=envTestPt5MarginPercent, envBurnDate=envBurnDate, envTestPt5last=envTestPt5last, envTestPt1MarginVal=envTestPt1MarginVal, envTestPt4Measure=envTestPt4Measure, envTestPt3Descr=envTestPt3Descr, envTestPt6Descr=envTestPt6Descr, envTestPt2Measure=envTestPt2Measure, envTestPt4last=envTestPt4last, envTestPt4Descr=envTestPt4Descr, envFirmVersion=envFirmVersion, envPresent=envPresent)
