#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-IMA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, TimeTicks, Bits, MibIdentifier, Gauge32, Counter32, Integer32, NotificationType, ObjectIdentity, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "TimeTicks", "Bits", "MibIdentifier", "Gauge32", "Counter32", "Integer32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaImaATMAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7))
atmImaGroupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1))
atmImaLinkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2))
atmImaDs1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3))
atmImaE1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4))
imaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNumber.setDescription('The number of IMA groups configured on this system.')
imaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2), )
if mibBuilder.loadTexts: imaGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTable.setDescription('The IMA Group Configuration table.')
imaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupEntry.setDescription('An entry in the IMA Group table.')
imaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupIndex.setDescription('A unique value for the IMA Group.')
imaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupRowStatus.setDescription("This object identifies the IMA Group's administrative status. It is used to enable and disable a group.")
imaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupIfIndex.setDescription("This object identifies the logical interface number ('ifIndex') assigned to this IMA group, and is used to identify corresponding rows in the Interfaces MIB. Note that re-initialization of the management agent may cause a client's 'imaGroupIfIndex' to change.")
imaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeState.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNeState.setDescription('The current operational state of the near-end IMA Group State Machine.')
imaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeState.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupFeState.setDescription('The current operational state of the far-end IMA Group State Machine.')
imaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupFailureStatus.setDescription('The current failure status of the IMA group (the reason why the GTSM is in the down state.')
imaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))).clone('symmetricOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupSymmetry.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupSymmetry.setDescription('Symmetry of the IMA group.')
imaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setDescription('Minimum number of transmit links required to be Active for the IMA group to be in the Up state.')
imaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setDescription('Minimum number of receive links required to be Active for the IMA group to be in the Up state.')
imaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2))).clone('ctc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setDescription('Transmit clocking mode used by the near-end IMA group.')
imaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setDescription('Transmit clocking mode used by the far-end IMA group.')
imaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setDescription('The ifIndex of the transmit timing reference link to be used by the near-end for IMA data cell clock recovery from the ATM layer.')
imaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setDescription('The ifIndex of the receive timing reference link to be used by near-end for IMA data cell clock recovery toward the ATM layer.')
imaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupLastChange.setDescription('The time-of-day the IMA group last changed operational state (i.e., value of imaNeGroupState changed).')
imaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTxImaId.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTxImaId.setDescription('The IMA ID currently in use by the near-end IMA function.')
imaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxImaId.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupRxImaId.setDescription('The IMA ID currently in use by the far-end IMA function.')
imaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))).clone('m128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTxFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTxFrameLength.setDescription('The frame length to be used by the IMA group in the transmit direction. Can only be set when the IMA group is startup.')
imaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupRxFrameLength.setDescription('Value of IMA frame length as received from remote IMA function.')
imaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 19), Integer32().clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setDescription('The maximum number of milliseconds of delay differential among the links that will be tolerated on this interface.')
imaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setDescription('The ifIndex of the link configured in the IMA group which has the smallest link propagation delay. This value has meaning only if at least 1 link has been configured in the IMA group.')
imaGroupDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setDescription('The latest maximum differential delay observed (in milliseconds), i.e. between the links having the least and most link propagation delay, among the receive links that are currently configured in the IMA group.')
imaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupAlphaValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupAlphaValue.setDescription("This indicates the 'alpha' value used to specify the number of consecutive invalid ICP cells to be detected before moving to the IMA HUNT state.")
imaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupBetaValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupBetaValue.setDescription("This indicates the 'beta' value used to specify the number of consecutive errored ICP cells to be detected before moving to the IMA HUNT state.")
imaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupGammaValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupGammaValue.setDescription("This indicates the 'gamma' value used to specify the number of consecutive valid ICP cells to be detected before moving to the IMA SYNC state from the PRESYNC state.")
imaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRunningSecs.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupRunningSecs.setDescription('The amount of time (in seconds) since this IMA group has been in operation (up or down).')
imaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupUnavailSecs.setDescription('Count of one second intervals where the IMA Group Traffic State Machine is Down.')
imaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNeNumFailures.setDescription('The number of times a near-end group failure (Config-Abort, Insufficient-Links) has been reported since power-up or reboot.')
imaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupFeNumFailures.setDescription('The number of times a far-end group failure (Config-Abort-FE, Insufficient-Links-FE, Blocked-FE) has been reported since power-up or reboot. This is an optional attribute.')
imaGroupTxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxAvailCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTxAvailCellRate.setDescription('The current cell rate (truncated value in cells per second) provided by this IMA group in the transmit direction, considering all the transmit links in the Active state.')
imaGroupRxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxAvailCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupRxAvailCellRate.setDescription('The current cell rate (truncated value in cells per second) provided by this IMA group in the receive direction, considering all the receive links in the Active state.')
imaGroupNumTxCfgLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxCfgLnks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNumTxCfgLnks.setDescription('The number of links that are configured to transmit in this IMA group.')
imaGroupNumRxCfgLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxCfgLnks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNumRxCfgLnks.setDescription('The number of links that are configured to receive in this IMA group.')
imaGroupNumTxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxActLnks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNumTxActLnks.setDescription('The number of links which are configured to transmit and are currently Active in this IMA group.')
imaGroupNumRxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxActLnks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupNumRxActLnks.setDescription('The number of links which are configured to receive and are currently Active in this IMA group.')
imaGroupTestLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 35), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setDescription("This object is used to designate an interface as the Test Link. A value of -1 specifies that the implementation may choose the Test Link. In this case, the implementation may also choose the value of 'imaGroupTestPattern'.")
imaGroupTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 36), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTestPattern.setDescription("The value of this object is used to specify the test pattern in an IMA group loopback operation. A value in the range 0 to 255 designates a specific pattern. A value of -1 specifies that the implementation may choose the value. In this case, the implementation may also choose the value of 'imaGroupTestLinkIfIndex'.")
imaGroupTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("operating", 2), ("linkFail", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTestProcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupTestProcStatus.setDescription('This object is used to enable or disable the Test Pattern Procedure, and to note whether at least one link failed the test. The test is started by setting operating(2) status. If any link should fail the test, the IMA will set the status to linkfail(3). The linkfail(3) state will persist until either the disabled(1) state is set or until no instance of imaLinkTestProcStatus has the value linkfail(3). Only the values disabled(1) and operating(2) may be written. Writing the operating(2) value will not cause clearing of the linkfail(3) state.')
imaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1), )
if mibBuilder.loadTexts: imaLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkTable.setDescription('The IMA group Link Status and Configuration table.')
imaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaLinkGroupIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaLinkIfIndex"))
if mibBuilder.loadTexts: imaLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkEntry.setDescription('An entry in the IMA Group Link table.')
imaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkIfIndex.setDescription("This corresponds to the 'ifIndex' of the MIB-II interface on which this link is established. This object also corresponds to the logical number ('ifIndex') assigned to this IMA link.")
imaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaLinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkRowStatus.setDescription("The imaLinkRowStatus object allows create, change and delete operations on imaLinkTable entries. To create a new conceptual row (or instance) of the imaLinkTable, imaLinkRowStatus must be set to 'createAndWait' or 'createAndGo.' A successful set of the object imaLinkGroupIndex must be performed before the RowStatus of this new row can transition to the 'Active' state. The imaLinkGroupIndex provides the association between a physical IMA link to an IMA group. To change (modify) an imaLinkTable entry, the imaLinkRowStatus object must be set to 'notInService'. Only then can the conceptual row be changed. Setting object imaLinkGroupIndex to a different value has the effect of changing the association between a physical IMA link and an IMA group. To place the link 'in group', the imaLinkRowStatus object is set to 'Active'. While the row is not in 'Active' state, both the Transmit and Receive IMA state machines are in the 'Not In Group' state. To remove (delete) an imaLinkTable entry from this table, set this object to 'destroy.' A network manager may elect to perform a delete operation followed immediately by a create operation instead of a modify operation. The net effect of the delete/create is to re-instantiate (reset) agent counters defined in this table.")
imaLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("imaGroup-1", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaLinkGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkGroupIndex.setDescription('The value which identifies the IMA group (imaGroupIndex) of which this link is a member.')
imaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxState.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeTxState.setDescription('The current state of the near-end transmit link.')
imaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxState.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeRxState.setDescription('The current state of the near-end receive link.')
imaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxState.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeTxState.setDescription('The current state of the far-end transmit link as reported via ICP cells.')
imaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxState.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeRxState.setDescription('The current state of the far-end receive link as reported via ICP cells.')
imaLinkNeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setDescription('The current link failure status of the near-end receive link.')
imaLinkFeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setDescription('The current link failure status of the far-end receive link as reported via ICP cells.')
imaLinkTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxLid.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkTxLid.setDescription('The outgoing LID used currently on the link by the local end. This value has meaning only if the link belongs to an IMA group.')
imaLinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxLid.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkRxLid.setDescription('The incoming LID used currently on the link by the remote end as reported via ICP cells. This value has meaning only if the link belongs to an IMA group.')
imaLinkRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRelDelay.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkRelDelay.setDescription('The latest measured delay on this link relative to the link, in the same IMA group, with the least delay.')
imaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkImaViolations.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells during non-SES-IMA condition.')
imaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkOifAnomalies.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkOifAnomalies.setDescription('The number of OIF anomalies during non-SES-IMA condition at the near-end. This is an optional attribute.')
imaLinkNeSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeSevErroredSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeSevErroredSec.setDescription('Count of one second intervals containing several IV-IMA, or one or more link defects (e.g., LOS, OOF/LOF, AIS, LCD), LIF, LODS defects during non-UAS-IMA condition.')
imaLinkFeSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeSevErroredSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeSevErroredSec.setDescription('Count of one second intervals containing one or more RDI-IMA defects.')
imaLinkNeUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeUnavailSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeUnavailSec.setDescription('Count of unavailable seconds at near-end: unavailability begins at the onset of 10 contiguous SES-IMA and ends at the onset of 10 contiguous seconds with no SES-IMA.')
imaLinkFeUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeUnavailSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeUnavailSec.setDescription('Count of unavailable seconds at far-end: unavailability begins at the onset of 10 contiguous SES-IMA-FE and ends at the onset of 10 contiguous seconds with no SES-IMA-FE.')
imaLinkNeTxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxUnusableSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeTxUnusableSec.setDescription('Tx Unusable seconds: count of Unusable seconds at the near end Tx LSM.')
imaLinkNeRxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxUnusableSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeRxUnusableSec.setDescription('Rx Unusable seconds: count of Unusable seconds at the near end Rx LSM.')
imaLinkFeTxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxUnusableSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeTxUnusableSec.setDescription('Tx Unusable seconds at far-end: count of seconds with Unusable indications from the far-end Tx LSM.')
imaLinkFeRxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxUnusableSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeRxUnusableSec.setDescription('Rx Unusable seconds at far-end: count of seconds with Unusable indications from the far-end Rx LSM.')
imaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition has been entered on this link.')
imaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition has been entered on this link (i.e., LIF, LODS, Mis-Connected, RDI-IMA).')
imaLinkFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setDescription('The number of times a far-end transmit failure alarm condition has been entered on this link. This is an optional attribute.')
imaLinkFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setDescription('The number of times a far-end receive failure alarm condition has been entered on this link (i.e., LIF, LODS, Mis-Connected, RDI-IMA). This is an optional attribute.')
imaLinkTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxStuffs.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkTxStuffs.setDescription('Counts of stuff events inserted in the transmit direction. This is an optional attribute.')
imaLinkRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxStuffs.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkRxStuffs.setDescription('Counts of stuff events detected in the receive direction. This is an optional attribute.')
imaLinkRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkRxTestPattern.setDescription('This object identifies the test pattern received in the ICP Cell (octet 17) on the link during the IMA Test Pattern Procedure. This value then may be compared to the transmitted test pattern.')
imaLinkTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("operating", 2), ("linkFail", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTestProcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkTestProcStatus.setDescription('This value indicates the current state of the Test Pattern Procedure. If the value is disabled(1), the test is not running. A value of operating(2) means the test is running and no error has been found on this interface. A value of linkfail(3) means an error has been detected o this link during the test. Once an error occurs, the linkfail(3) value is latched until either this object is read or until the imaGroupTestProcStatus is moved to disabled(1). Once read, if the error no longer persists, a subsequent read will report the value operating(2).')
imaLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: imaLinkNumber.setDescription('This corresponds to the link number on the IMA Group.')
imaDs1Table = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1), )
if mibBuilder.loadTexts: imaDs1Table.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1Table.setDescription('A table of physical layer configuration for the DS1 interface')
imaDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaDs1GroupIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaDs1Index"))
if mibBuilder.loadTexts: imaDs1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1Entry.setDescription('A entry in the table, containing information about the physical layer of a DS1 interface')
imaDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1Index.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1Index.setDescription('The physical interface index.')
imaDs1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1GroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1GroupIndex.setDescription("The IMA Group's interface index.")
imaDs1ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("line", 3), ("local", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1ConfLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfLoopback.setDescription('This object is used to modify the state of internal loopback....')
imaDs1ConfTxClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("recovered", 2))).clone('recovered')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1ConfTxClockSelect.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfTxClockSelect.setDescription('Configure the transmit clock.')
imaDs1ConfLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfLineCode.setDescription('Configure the line coding method.')
imaDs1ConfFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sf", 1), ("esf", 2))).clone('esf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfFrameFormat.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfFrameFormat.setDescription('Configure the framing format.')
imaDs1ConfCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("short-haul-0-133-FT", 1), ("short-haul-133-266-FT", 2), ("short-haul-266-399-FT", 3), ("short-haul-399-533-FT", 4), ("short-haul-533-655-FT", 5), ("long-haul-0-0-dB", 6), ("long-haul-7-5-dB", 7), ("long-haul-15-0-dB", 8), ("long-haul-22-5-dB", 9))).clone('short-haul-0-133-FT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1ConfCableLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfCableLength.setDescription('Configure the cable length.')
imaDs1ConfTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfTxTimingRefLink.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfTxTimingRefLink.setDescription('The ifIndex of the transmit timing reference link to be used by the near-end for IMA data cell clock recovery from the ATM layer.')
imaDs1ConfScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfScramble.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1ConfScramble.setDescription('The cells are scrambled / de-scrambled on the line.')
imaDs1StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsNoSignals.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsNoSignals.setDescription('No signal error counter.')
imaDs1StatsAISDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsAISDetects.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsAISDetects.setDescription('AIS Detect counter.')
imaDs1StatsYelAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsYelAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsYelAlarmCount.setDescription('A count of the number of Yellow Alarms.')
imaDs1StatsLCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsLCVErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsLCVErrors.setDescription('LCV (Line Code Violation) error counter.')
imaDs1StatsPCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsPCVErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsPCVErrors.setDescription('PCV (Path Code Violation) error counter.')
imaDs1StatsMOSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsMOSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsMOSErrors.setDescription('Multiframe out of sync error counter.')
imaDs1StatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSyncLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsSyncLossCount.setDescription('Sync Loss counter.')
imaDs1StatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsHECErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsHECErrors.setDescription('HEC error counter.')
imaDs1StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSignalLoss.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsSignalLoss.setDescription('Signal loss indication.')
imaDs1StatsAISDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsAISDetect.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsAISDetect.setDescription('AIS indication.')
imaDs1StatsYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsYellowAlarm.setDescription('Yellow Alarm indication.')
imaDs1StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsSyncLoss.setDescription('Loss of sync indication.')
imaDs1StatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsTxClockLoss.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsTxClockLoss.setDescription('Loss of transmit clock indication.')
imaDs1StatsErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsErrSec.setDescription('Count of Errored Seconds.')
imaDs1StatsLineErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsLineErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsLineErrSec.setDescription('Count of Line Errored Seconds.')
imaDs1StatsErrFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsErrFreeSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsErrFreeSec.setDescription('Count of Error Free Seconds.')
imaDs1StatsBurstErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsBurstErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsBurstErrSec.setDescription('Count of Bursty Errored Seconds.')
imaDs1StatsSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSevErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsSevErrSec.setDescription('Count of Severely Errored Seconds.')
imaDs1StatsConSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsConSevErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsConSevErrSec.setDescription('Count of Consecutive Severely Errored Seconds.')
imaDs1StatsFailedSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsFailedSignal.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsFailedSignal.setDescription('Count of Failed Signal conditions.')
imaDs1StatsUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsUnavailSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsUnavailSec.setDescription('Count of unavailable secondss.')
imaDs1StatsSevErrFramSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSevErrFramSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsSevErrFramSec.setDescription('Count of Severely Errored Framing Seconds.')
imaDs1StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1StatsClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1StatsClearCounters.setDescription('Clear all counters in this group ONLY.')
imaDs1DebugAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugAddr.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1DebugAddr.setDescription('PCI Phy address for DS1 port register.')
imaDs1DebugReadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugReadValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1DebugReadValue.setDescription('Value read from DS1 port register.')
imaDs1DebugWriteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugWriteValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1DebugWriteValue.setDescription('Value written to DS1 port register.')
imaDs1DebugRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 36), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugRead.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1DebugRead.setDescription('Read or Write of DS1 port register (TRUE = READ).')
imaDs1PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: imaDs1PortNumber.setDescription('The port number on the IMA.')
imaE1Table = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1), )
if mibBuilder.loadTexts: imaE1Table.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1Table.setDescription('A table of physical layer configuration for the E1 interface')
imaE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaE1GroupIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaE1Index"))
if mibBuilder.loadTexts: imaE1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1Entry.setDescription('A entry in the table, containing information about the physical layer of a E1 interface')
imaE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1Index.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1Index.setDescription('The physical interface index.')
imaE1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1GroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1GroupIndex.setDescription("The IMA Group's interface index.")
imaE1ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("internal", 2), ("external", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1ConfLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfLoopback.setDescription('This object is used to modify the state of internal loopback....')
imaE1ConfTxClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("recovered", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1ConfTxClockSelect.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfTxClockSelect.setDescription('Configure the transmit clock.')
imaE1ConfLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 2))).clone('hdb3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfLineCode.setDescription('Configure the line coding method.')
imaE1ConfFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc4-enabled", 1), ("crc4-disabled", 2))).clone('crc4-enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfFrameFormat.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfFrameFormat.setDescription('Configure the framing format.')
imaE1ConfCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("short-haul", 1), ("long-haul", 2), ("long-haul-75", 3))).clone('short-haul')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1ConfCableLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfCableLength.setDescription('Configure Long or Short Haul.')
imaE1ConfTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfTxTimingRefLink.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfTxTimingRefLink.setDescription('The ifIndex of the transmit timing reference link to be used by the near-end for IMA data cell clock recovery from the ATM layer.')
imaE1ConfScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfScramble.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1ConfScramble.setDescription('The cells are scrambled / de-scrambled on the line.')
imaE1StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsNoSignals.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsNoSignals.setDescription('No signal error counter.')
imaE1StatsRAIDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsRAIDetects.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsRAIDetects.setDescription('RAI Detect counter.')
imaE1StatsFASErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsFASErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsFASErrors.setDescription('FAS (Frame Alignment Signal) error counter.')
imaE1StatsCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsCVErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsCVErrors.setDescription('CV (Code Violation) error counter.')
imaE1StatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsCRCErrors.setDescription('CRC4 error counter.')
imaE1StatsEBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsEBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsEBitErrors.setDescription('E-Bit (FEBE) error counter.')
imaE1StatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSyncLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsSyncLossCount.setDescription('Sync Loss counter.')
imaE1StatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsHECErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsHECErrors.setDescription('HEC error counter.')
imaE1StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSignalLoss.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsSignalLoss.setDescription('Signal loss indication.')
imaE1StatsRAIDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsRAIDetect.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsRAIDetect.setDescription('RAI indication.')
imaE1StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsSyncLoss.setDescription('Loss of sync indication.')
imaE1StatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsTxClockLoss.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsTxClockLoss.setDescription('Loss of transmit clock indication.')
imaE1StatsErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsErrSec.setDescription('Count of Errored Seconds.')
imaE1StatsLineErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsLineErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsLineErrSec.setDescription('Count of Line Errored Seconds.')
imaE1StatsErrFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsErrFreeSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsErrFreeSec.setDescription('Count of Error Free Seconds.')
imaE1StatsBurstErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsBurstErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsBurstErrSec.setDescription('Count of Bursty Errored Seconds.')
imaE1StatsSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSevErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsSevErrSec.setDescription('Count of Severely Errored Seconds.')
imaE1StatsConSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsConSevErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsConSevErrSec.setDescription('Count of Consecutive Severely Errored Seconds.')
imaE1StatsFailedSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsFailedSignal.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsFailedSignal.setDescription('Count of Failed Signal conditions.')
imaE1StatsUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsUnavailSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsUnavailSec.setDescription('Count of unavailable secondss.')
imaE1StatsSevErrFramSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSevErrFramSec.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsSevErrFramSec.setDescription('Count of Severely Errored Framing Seconds.')
imaE1StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1StatsClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1StatsClearCounters.setDescription('Clear all counters in this group ONLY.')
imaE1DebugAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugAddr.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1DebugAddr.setDescription('PCI Phy address for E1 port register.')
imaE1DebugReadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugReadValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1DebugReadValue.setDescription('Value read from E1 port register.')
imaE1DebugWriteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugWriteValue.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1DebugWriteValue.setDescription('Value written to E1 port register.')
imaE1DebugRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 35), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugRead.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1DebugRead.setDescription('Read or Write of E1 port register (TRUE = READ).')
imaE1PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: imaE1PortNumber.setDescription('The port number on the IMA.')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", imaE1ConfFrameFormat=imaE1ConfFrameFormat, imaGroupNeNumFailures=imaGroupNeNumFailures, imaE1StatsSignalLoss=imaE1StatsSignalLoss, imaLinkNeTxNumFailures=imaLinkNeTxNumFailures, imaDs1ConfCableLength=imaDs1ConfCableLength, imaLinkTable=imaLinkTable, imaGroupDiffDelayMaxObs=imaGroupDiffDelayMaxObs, imaLinkGroupIndex=imaLinkGroupIndex, imaGroupEntry=imaGroupEntry, imaE1StatsCVErrors=imaE1StatsCVErrors, imaGroupTestPattern=imaGroupTestPattern, imaDs1StatsSevErrSec=imaDs1StatsSevErrSec, atmImaLinkObjects=atmImaLinkObjects, imaGroupFeTxClkMode=imaGroupFeTxClkMode, imaDs1GroupIndex=imaDs1GroupIndex, imaE1StatsRAIDetect=imaE1StatsRAIDetect, imaLinkEntry=imaLinkEntry, imaGroupDiffDelayMax=imaGroupDiffDelayMax, imaLinkTestProcStatus=imaLinkTestProcStatus, imaDs1PortNumber=imaDs1PortNumber, imaE1DebugRead=imaE1DebugRead, imaE1StatsSevErrSec=imaE1StatsSevErrSec, imaDs1StatsYelAlarmCount=imaDs1StatsYelAlarmCount, imaDs1StatsUnavailSec=imaDs1StatsUnavailSec, imaDs1StatsPCVErrors=imaDs1StatsPCVErrors, imaDs1StatsBurstErrSec=imaDs1StatsBurstErrSec, imaDs1Table=imaDs1Table, imaE1ConfScramble=imaE1ConfScramble, imaE1StatsErrFreeSec=imaE1StatsErrFreeSec, imaGroupIndex=imaGroupIndex, imaDs1StatsConSevErrSec=imaDs1StatsConSevErrSec, imaE1StatsErrSec=imaE1StatsErrSec, imaGroupRunningSecs=imaGroupRunningSecs, imaE1StatsSyncLossCount=imaE1StatsSyncLossCount, imaGroupTestLinkIfIndex=imaGroupTestLinkIfIndex, imaLinkOifAnomalies=imaLinkOifAnomalies, imaGroupNeState=imaGroupNeState, imaDs1StatsErrFreeSec=imaDs1StatsErrFreeSec, imaGroupTestProcStatus=imaGroupTestProcStatus, imaE1Entry=imaE1Entry, imaDs1StatsNoSignals=imaDs1StatsNoSignals, imaE1StatsRAIDetects=imaE1StatsRAIDetects, imaLinkNeTxUnusableSec=imaLinkNeTxUnusableSec, imaGroupTxAvailCellRate=imaGroupTxAvailCellRate, imaLinkTxLid=imaLinkTxLid, imaDs1StatsLineErrSec=imaDs1StatsLineErrSec, imaE1Index=imaE1Index, imaDs1Entry=imaDs1Entry, imaDs1StatsMOSErrors=imaDs1StatsMOSErrors, imaE1DebugReadValue=imaE1DebugReadValue, imaDs1StatsAISDetect=imaDs1StatsAISDetect, imaE1StatsCRCErrors=imaE1StatsCRCErrors, imaLinkNeRxState=imaLinkNeRxState, imaE1StatsNoSignals=imaE1StatsNoSignals, atmImaE1Objects=atmImaE1Objects, imaGroupFeNumFailures=imaGroupFeNumFailures, imaGroupNumRxCfgLnks=imaGroupNumRxCfgLnks, imaDs1StatsSignalLoss=imaDs1StatsSignalLoss, imaGroupRxAvailCellRate=imaGroupRxAvailCellRate, imaLinkRxTestPattern=imaLinkRxTestPattern, imaDs1StatsYellowAlarm=imaDs1StatsYellowAlarm, imaE1StatsFailedSignal=imaE1StatsFailedSignal, imaE1ConfTxTimingRefLink=imaE1ConfTxTimingRefLink, imaE1ConfLoopback=imaE1ConfLoopback, imaE1StatsEBitErrors=imaE1StatsEBitErrors, imaGroupNumTxCfgLnks=imaGroupNumTxCfgLnks, imaGroupNeTxClkMode=imaGroupNeTxClkMode, imaDs1StatsTxClockLoss=imaDs1StatsTxClockLoss, imaGroupRxTimingRefLink=imaGroupRxTimingRefLink, imaLinkImaViolations=imaLinkImaViolations, imaLinkNeTxState=imaLinkNeTxState, imaLinkFeTxUnusableSec=imaLinkFeTxUnusableSec, imaE1StatsTxClockLoss=imaE1StatsTxClockLoss, imaDs1DebugAddr=imaDs1DebugAddr, imaE1StatsConSevErrSec=imaE1StatsConSevErrSec, imaE1StatsFASErrors=imaE1StatsFASErrors, imaDs1ConfLineCode=imaDs1ConfLineCode, imaGroupNumber=imaGroupNumber, imaLinkFeRxUnusableSec=imaLinkFeRxUnusableSec, imaDs1StatsHECErrors=imaDs1StatsHECErrors, imaLinkNeSevErroredSec=imaLinkNeSevErroredSec, imaLinkFeTxNumFailures=imaLinkFeTxNumFailures, imaDs1StatsErrSec=imaDs1StatsErrSec, imaDs1ConfTxClockSelect=imaDs1ConfTxClockSelect, imaGroupFeState=imaGroupFeState, imaE1ConfLineCode=imaE1ConfLineCode, imaGroupLastChange=imaGroupLastChange, imaLinkRowStatus=imaLinkRowStatus, imaDs1ConfLoopback=imaDs1ConfLoopback, imaLinkFeRxNumFailures=imaLinkFeRxNumFailures, imaE1StatsHECErrors=imaE1StatsHECErrors, imaE1StatsSyncLoss=imaE1StatsSyncLoss, imaDs1StatsAISDetects=imaDs1StatsAISDetects, imaGroupMinNumTxLinks=imaGroupMinNumTxLinks, imaLinkRxLid=imaLinkRxLid, imaLinkNumber=imaLinkNumber, imaLinkFeRxState=imaLinkFeRxState, imaE1GroupIndex=imaE1GroupIndex, imaGroupSymmetry=imaGroupSymmetry, imaE1PortNumber=imaE1PortNumber, imaGroupUnavailSecs=imaGroupUnavailSecs, imaDs1StatsClearCounters=imaDs1StatsClearCounters, imaGroupNumTxActLnks=imaGroupNumTxActLnks, imaE1StatsClearCounters=imaE1StatsClearCounters, imaGroupTxTimingRefLink=imaGroupTxTimingRefLink, imaE1DebugWriteValue=imaE1DebugWriteValue, imaGroupRxImaId=imaGroupRxImaId, imaDs1StatsLCVErrors=imaDs1StatsLCVErrors, imaDs1StatsSyncLoss=imaDs1StatsSyncLoss, imaLinkNeUnavailSec=imaLinkNeUnavailSec, imaLinkFeSevErroredSec=imaLinkFeSevErroredSec, imaDs1StatsFailedSignal=imaDs1StatsFailedSignal, imaGroupNumRxActLnks=imaGroupNumRxActLnks, imaGroupRxFrameLength=imaGroupRxFrameLength, imaGroupIfIndex=imaGroupIfIndex, imaLinkRelDelay=imaLinkRelDelay, imaGroupLeastDelayLink=imaGroupLeastDelayLink, atmImaDs1Objects=atmImaDs1Objects, imaLinkFeUnavailSec=imaLinkFeUnavailSec, imaGroupBetaValue=imaGroupBetaValue, imaLinkNeRxNumFailures=imaLinkNeRxNumFailures, imaLinkFeRxFailureStatus=imaLinkFeRxFailureStatus, imaDs1DebugReadValue=imaDs1DebugReadValue, imaE1StatsSevErrFramSec=imaE1StatsSevErrFramSec, imaGroupMinNumRxLinks=imaGroupMinNumRxLinks, imaDs1Index=imaDs1Index, imaE1ConfCableLength=imaE1ConfCableLength, atmImaGroupObjects=atmImaGroupObjects, imaE1Table=imaE1Table, imaE1DebugAddr=imaE1DebugAddr, imaGroupRowStatus=imaGroupRowStatus, imaGroupTxImaId=imaGroupTxImaId, imaLinkRxStuffs=imaLinkRxStuffs, imaE1StatsBurstErrSec=imaE1StatsBurstErrSec, imaLinkNeRxFailureStatus=imaLinkNeRxFailureStatus, imaDs1ConfScramble=imaDs1ConfScramble, imaDs1DebugWriteValue=imaDs1DebugWriteValue, sonomaImaATMAdapterGroup=sonomaImaATMAdapterGroup, imaLinkFeTxState=imaLinkFeTxState, imaGroupFailureStatus=imaGroupFailureStatus, imaGroupAlphaValue=imaGroupAlphaValue, imaGroupTable=imaGroupTable, imaDs1ConfFrameFormat=imaDs1ConfFrameFormat, imaE1StatsLineErrSec=imaE1StatsLineErrSec, imaDs1ConfTxTimingRefLink=imaDs1ConfTxTimingRefLink, imaLinkNeRxUnusableSec=imaLinkNeRxUnusableSec, imaGroupTxFrameLength=imaGroupTxFrameLength, imaLinkTxStuffs=imaLinkTxStuffs, imaDs1StatsSyncLossCount=imaDs1StatsSyncLossCount, imaE1ConfTxClockSelect=imaE1ConfTxClockSelect, imaLinkIfIndex=imaLinkIfIndex, imaGroupGammaValue=imaGroupGammaValue, imaDs1DebugRead=imaDs1DebugRead, imaE1StatsUnavailSec=imaE1StatsUnavailSec, imaDs1StatsSevErrFramSec=imaDs1StatsSevErrFramSec)
