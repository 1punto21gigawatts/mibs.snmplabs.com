#
# PySNMP MIB module DNOS-PFC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-PFC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, MibIdentifier, TimeTicks, Counter64, Counter32, Gauge32, NotificationType, ModuleIdentity, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "MibIdentifier", "TimeTicks", "Counter64", "Counter32", "Gauge32", "NotificationType", "ModuleIdentity", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress")
TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
fastPathPFC = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47))
fastPathPFC.setRevisions(('2011-01-26 00:00', '2009-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathPFC.setRevisionsDescriptions(('Postal address updated.', 'Initial version.',))
if mibBuilder.loadTexts: fastPathPFC.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathPFC.setOrganization('Dell, Inc.')
if mibBuilder.loadTexts: fastPathPFC.setContactInfo('')
if mibBuilder.loadTexts: fastPathPFC.setDescription('The MIB definitions Priority based Flow Control Feature.')
agentPfcCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1))
agentPfcTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1), )
if mibBuilder.loadTexts: agentPfcTable.setStatus('current')
if mibBuilder.loadTexts: agentPfcTable.setDescription('A table providing configuration of PFC Profile per interface.')
agentPfcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1), ).setIndexNames((0, "DNOS-PFC-MIB", "agentPfcIntfIndex"))
if mibBuilder.loadTexts: agentPfcEntry.setStatus('current')
if mibBuilder.loadTexts: agentPfcEntry.setDescription('PFC Profile configuration for a port.')
agentPfcIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: agentPfcIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfIndex.setDescription('This is a unique index for an entry in the agentPfcTable. A non-zero value indicates the ifIndex for the corresponding interface entry in the ifTable.')
agentPfcIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPfcIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfAdminMode.setDescription('Enables/disables PFC profile on an interface.')
agentPfcIntfPfcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPfcStatus.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPfcStatus.setDescription('Shows the operational-status of PFC on an interface.')
agentPfcTotalIntfPfcFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcTotalIntfPfcFramesRx.setStatus('current')
if mibBuilder.loadTexts: agentPfcTotalIntfPfcFramesRx.setDescription('Total Received PFC Frames on this interface.')
agentPfcTotalIntfPfcFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcTotalIntfPfcFramesTx.setStatus('current')
if mibBuilder.loadTexts: agentPfcTotalIntfPfcFramesTx.setDescription('Total Transmitted PFC Frames on this interface.')
agentPfcIntfLinkDelayAllowance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfLinkDelayAllowance.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfLinkDelayAllowance.setDescription('Indicates the Link Delay Allowance on this interface, measured in bit times.')
agentPfcIntfAdvWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("willing", 1), ("unwilling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfAdvWilling.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfAdvWilling.setDescription('Indicates if the interface is willing to accept PFC configuration via DCBX.')
agentPfcIntfPeerDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerDetected.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerDetected.setDescription('Indicates if the peer has been detected via DCBX.')
agentPfcIntfPeerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerMacAddr.setDescription('MAC address of the peer detected via DCBX. If there is no peer, this will be a null MAC address.')
agentPfcIntfPeerWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("willing", 2), ("unwilling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerWilling.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerWilling.setDescription('Indicates if the peer is willing to accept PFC configuration via DCBX.')
agentPfcIntfPeerMBCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerMBCStatus.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerMBCStatus.setDescription('Indicates if the peer has MACSEC bypass capability.')
agentPfcIntfPeerCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerCapability.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerCapability.setDescription('Indicates the number of no-drop priorities supported by the peer. If there is no peer, this will be zero.')
agentPfcIntfPeerCfgCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerCfgCompatible.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerCfgCompatible.setDescription("Indicates if the peer's PFC configuration is compatible.")
agentPfcIntfPeerCompatibleCfgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerCompatibleCfgCount.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerCompatibleCfgCount.setDescription('Indicates the number of compatible PFC configurations received from the peer. Does not count duplicate configurations.')
agentPfcIntfPeerIncompatibleCfgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPeerIncompatibleCfgCount.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPeerIncompatibleCfgCount.setDescription('Indicates the number of incompatible PFC configurations received from the peer.')
agentPfcActionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2), )
if mibBuilder.loadTexts: agentPfcActionTable.setStatus('current')
if mibBuilder.loadTexts: agentPfcActionTable.setDescription('A table providing priority and action mappings configuration of PFC.')
agentPfcActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2, 1), ).setIndexNames((0, "DNOS-PFC-MIB", "agentPfcIntfIndex"), (0, "DNOS-PFC-MIB", "agentPfcPriority"))
if mibBuilder.loadTexts: agentPfcActionEntry.setStatus('current')
if mibBuilder.loadTexts: agentPfcActionEntry.setDescription('PFC Action Profile configuration for a port.')
agentPfcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentPfcPriority.setStatus('current')
if mibBuilder.loadTexts: agentPfcPriority.setDescription('This is a unique index for an entry in the agentPfcActionTable. A non-zero value indicates the CosQueue Priority.')
agentPfcAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("nodrop", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPfcAction.setStatus('current')
if mibBuilder.loadTexts: agentPfcAction.setDescription('Set Drop/No-Drop action in PFC profile for the corresponding priority.')
agentPfcOperAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("nodrop", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcOperAction.setStatus('current')
if mibBuilder.loadTexts: agentPfcOperAction.setDescription('The operational Drop/No-Drop action in PFC profile for the corresponding priority.')
agentPfcAdvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("nodrop", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcAdvAction.setStatus('current')
if mibBuilder.loadTexts: agentPfcAdvAction.setDescription('The advertised Drop/No-Drop action in PFC profile for the corresponding priority.')
agentPfcPeerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("drop", 2), ("nodrop", 3))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcPeerAction.setStatus('current')
if mibBuilder.loadTexts: agentPfcPeerAction.setDescription("The peer's Drop/No-Drop action in PFC profile for the corresponding priority.")
agentPfcIntfStatsPerPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 3), )
if mibBuilder.loadTexts: agentPfcIntfStatsPerPriorityTable.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfStatsPerPriorityTable.setDescription('A table providing statistics of PFC per interface per priority.')
agentPfcIntfStatsPerPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 3, 1), ).setIndexNames((0, "DNOS-PFC-MIB", "agentPfcIntfIndex"), (0, "DNOS-PFC-MIB", "agentPfcPriority"))
if mibBuilder.loadTexts: agentPfcIntfStatsPerPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfStatsPerPriorityEntry.setDescription('PFC Stats for a priority and for a port.')
agentPfcIntfPfcPriorityFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPfcPriorityFramesRx.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPfcPriorityFramesRx.setDescription('Received PFC Frames on this interface for a priority.')
agentPfcIntfPfcPriorityFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 47, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPfcIntfPfcPriorityFramesTx.setStatus('current')
if mibBuilder.loadTexts: agentPfcIntfPfcPriorityFramesTx.setDescription('Transmitted PFC Frames on this interface for a priority.')
mibBuilder.exportSymbols("DNOS-PFC-MIB", PYSNMP_MODULE_ID=fastPathPFC, agentPfcTable=agentPfcTable, agentPfcIntfPfcPriorityFramesRx=agentPfcIntfPfcPriorityFramesRx, agentPfcEntry=agentPfcEntry, agentPfcIntfAdvWilling=agentPfcIntfAdvWilling, agentPfcPriority=agentPfcPriority, agentPfcPeerAction=agentPfcPeerAction, agentPfcActionTable=agentPfcActionTable, agentPfcActionEntry=agentPfcActionEntry, fastPathPFC=fastPathPFC, agentPfcTotalIntfPfcFramesTx=agentPfcTotalIntfPfcFramesTx, agentPfcIntfLinkDelayAllowance=agentPfcIntfLinkDelayAllowance, agentPfcIntfPeerCapability=agentPfcIntfPeerCapability, agentPfcIntfPeerWilling=agentPfcIntfPeerWilling, agentPfcIntfStatsPerPriorityTable=agentPfcIntfStatsPerPriorityTable, agentPfcIntfIndex=agentPfcIntfIndex, agentPfcAdvAction=agentPfcAdvAction, agentPfcIntfPeerDetected=agentPfcIntfPeerDetected, agentPfcTotalIntfPfcFramesRx=agentPfcTotalIntfPfcFramesRx, agentPfcCfgGroup=agentPfcCfgGroup, agentPfcIntfPfcStatus=agentPfcIntfPfcStatus, agentPfcIntfAdminMode=agentPfcIntfAdminMode, agentPfcAction=agentPfcAction, agentPfcIntfPeerCfgCompatible=agentPfcIntfPeerCfgCompatible, agentPfcIntfPeerMBCStatus=agentPfcIntfPeerMBCStatus, agentPfcIntfPfcPriorityFramesTx=agentPfcIntfPfcPriorityFramesTx, agentPfcIntfPeerIncompatibleCfgCount=agentPfcIntfPeerIncompatibleCfgCount, agentPfcOperAction=agentPfcOperAction, agentPfcIntfPeerCompatibleCfgCount=agentPfcIntfPeerCompatibleCfgCount, agentPfcIntfPeerMacAddr=agentPfcIntfPeerMacAddr, agentPfcIntfStatsPerPriorityEntry=agentPfcIntfStatsPerPriorityEntry)
