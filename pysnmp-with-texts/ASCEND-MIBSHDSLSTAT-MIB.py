#
# PySNMP MIB module ASCEND-MIBSHDSLSTAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBSHDSLSTAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, Gauge32, iso, ModuleIdentity, TimeTicks, Counter32, Unsigned32, NotificationType, MibIdentifier, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "Gauge32", "iso", "ModuleIdentity", "TimeTicks", "Counter32", "Unsigned32", "NotificationType", "MibIdentifier", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibshdslDslLineStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 157))
mibshdslDslLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 157, 1), )
if mibBuilder.loadTexts: mibshdslDslLineStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibshdslDslLineStatusTable.setDescription('A list of mibshdslDslLineStatus profile entries.')
mibshdslDslLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1), ).setIndexNames((0, "ASCEND-MIBSHDSLSTAT-MIB", "shdslDslLineStatus-Shelf-o"), (0, "ASCEND-MIBSHDSLSTAT-MIB", "shdslDslLineStatus-Slot-o"), (0, "ASCEND-MIBSHDSLSTAT-MIB", "shdslDslLineStatus-Item-o"))
if mibBuilder.loadTexts: mibshdslDslLineStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibshdslDslLineStatusEntry.setDescription('A mibshdslDslLineStatus entry containing objects that maps to the parameters of mibshdslDslLineStatus profile.')
shdslDslLineStatus_Shelf_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 1), Integer32()).setLabel("shdslDslLineStatus-Shelf-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_Shelf_o.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_Shelf_o.setDescription('')
shdslDslLineStatus_Slot_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 2), Integer32()).setLabel("shdslDslLineStatus-Slot-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_Slot_o.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_Slot_o.setDescription('')
shdslDslLineStatus_Item_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 3), Integer32()).setLabel("shdslDslLineStatus-Item-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_Item_o.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_Item_o.setDescription('')
shdslDslLineStatus_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("shdslDslLineStatus-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalAddress_Shelf.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalAddress_Shelf.setDescription('The number of the shelf that the addressed physical device resides on.')
shdslDslLineStatus_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("shdslDslLineStatus-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalAddress_Slot.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalAddress_Slot.setDescription('The number of the slot that the addressed physical device resides on.')
shdslDslLineStatus_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 6), Integer32()).setLabel("shdslDslLineStatus-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalAddress_ItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalAddress_ItemNumber.setDescription('A number that specifies an addressable entity within the context of shelf and slot.')
shdslDslLineStatus_LineState = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("doesNotExist", 1), ("disabled", 2), ("active", 3)))).setLabel("shdslDslLineStatus-LineState").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_LineState.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_LineState.setDescription('The overall state of the line.')
shdslDslLineStatus_SparePhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("shdslDslLineStatus-SparePhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_SparePhysicalAddress_Shelf.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparePhysicalAddress_Shelf.setDescription('The number of the shelf that the addressed physical device resides on.')
shdslDslLineStatus_SparePhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("shdslDslLineStatus-SparePhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_SparePhysicalAddress_Slot.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparePhysicalAddress_Slot.setDescription('The number of the slot that the addressed physical device resides on.')
shdslDslLineStatus_SparePhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 10), Integer32()).setLabel("shdslDslLineStatus-SparePhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_SparePhysicalAddress_ItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparePhysicalAddress_ItemNumber.setDescription('A number that specifies an addressable entity within the context of shelf and slot.')
shdslDslLineStatus_SparingState = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sparingNone", 1), ("primaryActive", 2), ("primaryInactive", 3), ("secondaryActive", 4), ("secondaryInactive", 5)))).setLabel("shdslDslLineStatus-SparingState").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_SparingState.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparingState.setDescription('The sparing state of the line.')
shdslDslLineStatus_SparingChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("manual", 2), ("automatic", 3), ("test", 4)))).setLabel("shdslDslLineStatus-SparingChangeReason").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_SparingChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparingChangeReason.setDescription('The reson for the last sparing state change.')
shdslDslLineStatus_SparingChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 13), Integer32()).setLabel("shdslDslLineStatus-SparingChangeTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_SparingChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparingChangeTime.setDescription('The time of the last sparing state change.')
shdslDslLineStatus_SparingChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 14), Integer32()).setLabel("shdslDslLineStatus-SparingChangeCounter").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_SparingChangeCounter.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_SparingChangeCounter.setDescription('The number of sparing state changes.')
shdslDslLineStatus_VpiVciRange = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vpi01Vci321023", 6), ("vpi03Vci32511", 1), ("vpi07Vci32255", 2), ("vpi015Vci32127", 3), ("vpi031Vci3263", 4), ("notApplicable", 5)))).setLabel("shdslDslLineStatus-VpiVciRange").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_VpiVciRange.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_VpiVciRange.setDescription('The valid range of vpi and vci for the circuits established for the line. This range can change only after LIM reboot.')
shdslDslLineStatus_VpSwitchingVpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 16), Integer32()).setLabel("shdslDslLineStatus-VpSwitchingVpi").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_VpSwitchingVpi.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_VpSwitchingVpi.setDescription('VPI to be used for the VP switching. Rest of the VPIs will be used for the VC switching.')
shdslDslLineStatus_PhysicalStatus_IfGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 17), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatus-IfGroupIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_IfGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_IfGroupIndex.setDescription('Interface groups index assigned to this physical port.')
shdslDslLineStatus_PhysicalStatus_UnitType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coe", 1), ("cpe", 2)))).setLabel("shdslDslLineStatus-PhysicalStatus-UnitType").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_UnitType.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_UnitType.setDescription('Unit types defines if the node is operating Central Office or Customer Premise equipment software.')
shdslDslLineStatus_PhysicalStatus_InterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("gShdsl", 2), ("hdsl2", 3)))).setLabel("shdslDslLineStatus-PhysicalStatus-InterfaceType").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_InterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_InterfaceType.setDescription('Interface type defines if the node is operating on SHDSL or GSHDSL')
shdslDslLineStatus_PhysicalStatus_DevLineState = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("portUp", 2), ("test", 3), ("startupHandshake", 4), ("startupTraining", 5), ("startupDownload", 6), ("idle", 7), ("down", 8), ("outOfService", 9), ("unknown", 10), ("analogLoopback", 11), ("digitalLoopback", 12)))).setLabel("shdslDslLineStatus-PhysicalStatus-DevLineState").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_DevLineState.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_DevLineState.setDescription('Display of current interface state.')
shdslDslLineStatus_PhysicalStatus_OperationalRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 21), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatus-OperationalRate").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_OperationalRate.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_OperationalRate.setDescription('Operational up and down stream rate. Zero means unknown.')
shdslDslLineStatus_PhysicalStatus_FirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 22), DisplayString()).setLabel("shdslDslLineStatus-PhysicalStatus-FirmwareVer").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_FirmwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_FirmwareVer.setDescription('Firmware version ID.')
shdslDslLineStatus_PhysicalStatus_HardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 23), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatus-HardwareVer").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_HardwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_HardwareVer.setDescription('Hardware chip version.')
shdslDslLineStatus_PhysicalStatus_NetworkType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("shdslDslLineStatus-PhysicalStatus-NetworkType").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_NetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatus_NetworkType.setDescription('Current Standard Network type. Either Annex A, Annex B or Annex B ANFP.')
shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Days = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 24), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-LineUpTimer-Days").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Days.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Days.setDescription('Number of days that the DSL line has been up.')
shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Hours = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 25), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-LineUpTimer-Hours").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Hours.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Hours.setDescription('Number of hours that the DSL line has been up.')
shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Minutes = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 26), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-LineUpTimer-Minutes").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Minutes.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Minutes.setDescription('Number of minutes that the DSL line has been up.')
shdslDslLineStatus_PhysicalStatistic_RxSignalPresent = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2))).clone(namedValues=NamedValues(("yes", 3), ("no", 2)))).setLabel("shdslDslLineStatus-PhysicalStatistic-RxSignalPresent").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_RxSignalPresent.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_RxSignalPresent.setDescription('State if the receive signal is present or not.')
shdslDslLineStatus_PhysicalStatistic_LineQuality = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 28), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-LineQuality").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineQuality.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LineQuality.setDescription('While the port is in the up state, this parameter displays the line quality.')
shdslDslLineStatus_PhysicalStatistic_UpDwnCntr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 29), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-UpDwnCntr").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_UpDwnCntr.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_UpDwnCntr.setDescription('Interface Up Down counter value displays the number of times the interface trasitions from a down to up state.')
shdslDslLineStatus_PhysicalStatistic_SelfTest = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passed", 1), ("selfTestFailed", 2), ("localLoopBackFailed", 3)))).setLabel("shdslDslLineStatus-PhysicalStatistic-SelfTest").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SelfTest.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SelfTest.setDescription('Hardware/firmware self test results.')
shdslDslLineStatus_PhysicalStatistic_TransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 31), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-TransmitPower").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_TransmitPower.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_TransmitPower.setDescription('Transmit power in DB.')
shdslDslLineStatus_PhysicalStatistic_FramerSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("inSync", 2), ("outOfSync", 1)))).setLabel("shdslDslLineStatus-PhysicalStatistic-FramerSyncStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_FramerSyncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_FramerSyncStatus.setDescription('Framer sync status')
shdslDslLineStatus_PhysicalStatistic_CodeViolations = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 33), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-CodeViolations").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_CodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_CodeViolations.setDescription('Line is defined as a count of SHDSL CRC anomalies occuring during the accumuation period.')
shdslDslLineStatus_PhysicalStatistic_ErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 34), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-ErroredSecond").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_ErroredSecond.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_ErroredSecond.setDescription('Errored second is defined as a count of 1 second intervals during which one or more CRC anomalies are declaired and/or one or more LOSW defects are declared.')
shdslDslLineStatus_PhysicalStatistic_SeverelyErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 35), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-SeverelyErroredSecond").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SeverelyErroredSecond.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SeverelyErroredSecond.setDescription('Line is defined as a count of 1 second intervals for during which at least 50 CRC anomalies are declared or one or more LOSW defects are declared.')
shdslDslLineStatus_PhysicalStatistic_LoswSecond = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 36), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-LoswSecond").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LoswSecond.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LoswSecond.setDescription('Line is defined as a count of 1 second intervals during which one or more SHDSL LOSW defects are declared.')
shdslDslLineStatus_PhysicalStatistic_UnavailableSecond = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 37), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-UnavailableSecond").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_UnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_UnavailableSecond.setDescription("Line is a count of 1 second intervals for which the SHDSL line is unavailable. The SHDSL line becomes unavailable at the onset of 10 contiguous SES-L's. Once unavailable the SHDSL line becomes available at the onset of 10 contiguous seconds with no SES-L's.")
shdslDslLineStatus_PhysicalStatistic_LoopAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 38), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-LoopAttenuation").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LoopAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_LoopAttenuation.setDescription('Current loop attenuation in DB. ')
shdslDslLineStatus_PhysicalStatistic_Snr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 40), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-Snr").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_Snr.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_Snr.setDescription('While the port is in the up state, this parameter displays the Signal to Noise Ratio.')
shdslDslLineStatus_PhysicalStatistic_SturLoopAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 41), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-SturLoopAttenuation").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SturLoopAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SturLoopAttenuation.setDescription('Current loop attenuation in DB from the STU-R. ')
shdslDslLineStatus_PhysicalStatistic_SturSnr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 42), Integer32()).setLabel("shdslDslLineStatus-PhysicalStatistic-SturSnr").setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SturSnr.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_PhysicalStatistic_SturSnr.setDescription('While the port is in the up state, this parameter displays the Signal to Noise Ratio from the STU-R.')
shdslDslLineStatus_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 157, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("shdslDslLineStatus-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslDslLineStatus_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDslLineStatus_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBSHDSLSTAT-MIB", shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Hours=shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Hours, shdslDslLineStatus_SparingState=shdslDslLineStatus_SparingState, shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Minutes=shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Minutes, shdslDslLineStatus_PhysicalStatistic_LineQuality=shdslDslLineStatus_PhysicalStatistic_LineQuality, shdslDslLineStatus_PhysicalStatistic_UnavailableSecond=shdslDslLineStatus_PhysicalStatistic_UnavailableSecond, shdslDslLineStatus_Slot_o=shdslDslLineStatus_Slot_o, shdslDslLineStatus_PhysicalStatistic_Snr=shdslDslLineStatus_PhysicalStatistic_Snr, shdslDslLineStatus_PhysicalStatistic_CodeViolations=shdslDslLineStatus_PhysicalStatistic_CodeViolations, shdslDslLineStatus_SparePhysicalAddress_Shelf=shdslDslLineStatus_SparePhysicalAddress_Shelf, shdslDslLineStatus_SparingChangeCounter=shdslDslLineStatus_SparingChangeCounter, shdslDslLineStatus_PhysicalStatistic_SturSnr=shdslDslLineStatus_PhysicalStatistic_SturSnr, DisplayString=DisplayString, shdslDslLineStatus_PhysicalStatus_HardwareVer=shdslDslLineStatus_PhysicalStatus_HardwareVer, shdslDslLineStatus_PhysicalAddress_ItemNumber=shdslDslLineStatus_PhysicalAddress_ItemNumber, shdslDslLineStatus_PhysicalStatistic_RxSignalPresent=shdslDslLineStatus_PhysicalStatistic_RxSignalPresent, shdslDslLineStatus_VpSwitchingVpi=shdslDslLineStatus_VpSwitchingVpi, shdslDslLineStatus_PhysicalStatistic_ErroredSecond=shdslDslLineStatus_PhysicalStatistic_ErroredSecond, shdslDslLineStatus_LineState=shdslDslLineStatus_LineState, shdslDslLineStatus_SparingChangeReason=shdslDslLineStatus_SparingChangeReason, shdslDslLineStatus_PhysicalStatus_NetworkType=shdslDslLineStatus_PhysicalStatus_NetworkType, mibshdslDslLineStatusEntry=mibshdslDslLineStatusEntry, shdslDslLineStatus_PhysicalStatistic_FramerSyncStatus=shdslDslLineStatus_PhysicalStatistic_FramerSyncStatus, shdslDslLineStatus_VpiVciRange=shdslDslLineStatus_VpiVciRange, shdslDslLineStatus_PhysicalStatistic_UpDwnCntr=shdslDslLineStatus_PhysicalStatistic_UpDwnCntr, shdslDslLineStatus_Action_o=shdslDslLineStatus_Action_o, shdslDslLineStatus_PhysicalAddress_Slot=shdslDslLineStatus_PhysicalAddress_Slot, shdslDslLineStatus_PhysicalAddress_Shelf=shdslDslLineStatus_PhysicalAddress_Shelf, shdslDslLineStatus_PhysicalStatistic_LoswSecond=shdslDslLineStatus_PhysicalStatistic_LoswSecond, shdslDslLineStatus_PhysicalStatistic_LoopAttenuation=shdslDslLineStatus_PhysicalStatistic_LoopAttenuation, shdslDslLineStatus_SparingChangeTime=shdslDslLineStatus_SparingChangeTime, shdslDslLineStatus_SparePhysicalAddress_Slot=shdslDslLineStatus_SparePhysicalAddress_Slot, shdslDslLineStatus_PhysicalStatus_IfGroupIndex=shdslDslLineStatus_PhysicalStatus_IfGroupIndex, shdslDslLineStatus_PhysicalStatistic_SeverelyErroredSecond=shdslDslLineStatus_PhysicalStatistic_SeverelyErroredSecond, mibshdslDslLineStatusTable=mibshdslDslLineStatusTable, shdslDslLineStatus_PhysicalStatus_OperationalRate=shdslDslLineStatus_PhysicalStatus_OperationalRate, shdslDslLineStatus_PhysicalStatus_FirmwareVer=shdslDslLineStatus_PhysicalStatus_FirmwareVer, shdslDslLineStatus_PhysicalStatistic_SelfTest=shdslDslLineStatus_PhysicalStatistic_SelfTest, shdslDslLineStatus_PhysicalStatistic_SturLoopAttenuation=shdslDslLineStatus_PhysicalStatistic_SturLoopAttenuation, shdslDslLineStatus_SparePhysicalAddress_ItemNumber=shdslDslLineStatus_SparePhysicalAddress_ItemNumber, shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Days=shdslDslLineStatus_PhysicalStatistic_LineUpTimer_Days, mibshdslDslLineStatus=mibshdslDslLineStatus, shdslDslLineStatus_Shelf_o=shdslDslLineStatus_Shelf_o, shdslDslLineStatus_PhysicalStatus_InterfaceType=shdslDslLineStatus_PhysicalStatus_InterfaceType, shdslDslLineStatus_PhysicalStatus_DevLineState=shdslDslLineStatus_PhysicalStatus_DevLineState, shdslDslLineStatus_PhysicalStatus_UnitType=shdslDslLineStatus_PhysicalStatus_UnitType, shdslDslLineStatus_PhysicalStatistic_TransmitPower=shdslDslLineStatus_PhysicalStatistic_TransmitPower, shdslDslLineStatus_Item_o=shdslDslLineStatus_Item_o)
