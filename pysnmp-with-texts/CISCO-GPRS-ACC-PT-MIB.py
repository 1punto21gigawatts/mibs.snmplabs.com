#
# PySNMP MIB module CISCO-GPRS-ACC-PT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GPRS-ACC-PT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoInetAddressMask, InterfaceIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "CiscoInetAddressMask", "InterfaceIndexOrZero")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, ModuleIdentity, Bits, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Counter32, NotificationType, Unsigned32, MibIdentifier, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Bits", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Counter32", "NotificationType", "Unsigned32", "MibIdentifier", "iso", "ObjectIdentity")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoGprsAccPtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 183))
ciscoGprsAccPtMIB.setRevisions(('2012-04-04 00:00', '2011-09-22 00:00', '2011-03-14 00:00', '2010-04-29 00:00', '2010-04-02 20:00', '2008-12-19 00:00', '2008-03-03 00:00', '2008-02-27 00:00', '2006-08-30 00:00', '2006-05-18 13:00', '2005-11-22 14:00', '2005-10-28 17:00', '2004-07-26 02:00', '2004-02-11 20:00', '2002-08-26 18:00', '2002-06-13 18:00', '2001-12-28 14:30', '2000-07-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGprsAccPtMIB.setRevisionsDescriptions(('The following changes have been made. [1] The following objects have been added to cgprsAccPtStatisticsTable. cgprsAccPtFailMsActivatedPdps, cgprsAccPtFailPdpUpdate, cgprsAccPtUpdateRspTimeOut [2] Added cgprsAccPtStatisticsGroupSup6 group. [3] Deprecated cgprsAccPtMIBComplianceRev14 and replaced it with cgprsAccPtMIBComplianceRev15.', 'The following changes have been made. [1] The following objects have been added to cgprsAccPtStatisticsTable. cgprsAccPtIpv4v6MsActivatedDynamicPdps, cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps. [2] Added cgprsAccPtStatisticsGroupSup5 group. [3] Deprecated cgprsAccPtMIBComplianceRev13 and replaced it with cgprsAccPtMIBComplianceRev14.', 'The following changes have been made. [1] The following objects has been added to cgprsAccPtStatisticsTable. cgprsAccPtActiveBearers, cgprsAccPtDhcpProxServTxErrDrops, cgprsAccPtDhcpProxServIpAllocErr, cgprsAccPtDedBearerDeactivations, cgprsAccPtDedBearerQosUpdate, cgprsAccPtDedBearerSucQosUpdate, cgprsAccPtDedBearerNoQosUpdate, cgprsAccPtDedBearerSucNoQosUpdate. [2] Added table cgprsAccPtDhcpv6ProxyStatsTable which includes the following objects. cgprsAccPtDhcpv6ProxInforeqRcvd, cgprsAccPtDhcpv6ProxInforeqRply, cgprsAccPtDhcpv6ProxInforeqLocRply, cgprsAccPtDhcpv6ProxIpAllocSuc, cgprsAccPtDhcpv6ProxIpAllocFail, cgprsAccPtDhcpv6ProxIpRelease, cgprsAccPtDhcpv6ProxIpRenewFail, cgprsAccPtDhcpv6ProxUnkwnMsg, cgprsAccPtDhcpv6ProxErrs. [3] The following objects has been added to cgprsAccPtExtTable. cgprsAccPtVerifyDownlinkAddr. [4] The following objects has been added to cgprsAccPtIpv6Table. cgprsAccPtDhcpv6ProxClientIntf, cgprsAccptDhcpv6RapidCommit, cgprsAccptDhcpv6PoolName. [5] Modified the description for the following objects to extend Bearer support to the MIB. cgprsAccPtTable, cgprsAccPtEntry, cgprsAccPtIndex, cgprsAccPtMode, cgprsAccPtIpAddressPool, cgprsAccPtDHCPGwAddr, cgprsAccPtIPAccListGroupIn, cgprsAccPtIPAccListGroupOut, cgprsAccPtNetworkInitiated, cgprsAccPtIpAddrAllocations, cgprsAccPtIdlePdpPurgeTimer, cgprsAccPtMsIsdnSuppressed, cgprsAccPtType, cgprsAccPtPppRegenEnable, cgprsAccPtPppRegenMaxSessions, cgprsAccPtPcscfServerGroupName, cgprsAccPtAggregTable, cgprsAccPtAggregEntry, cgprsAccPtGtpRespMesgWaitAcctng, cgprsAccPtInterimAccountinEnable, cgprsAccPtVerifyUpStrTpduSrcAddr, cgprsAccPtVerifyUpStrTpduDstAddr, cgprsAccPtRedirInterMobilAddr, cgprsAccPtSuppressRadiusAttribs, cgprsAccPtSetRadiusAttributes, cgprsAccPtOperationMode, cgprsAccPtAbsoluteSessionTimer, cgprsAccPtRadiusAttrNasId, cgprsAccPtPdpInServicePolicyName, cgprsAccPtPdpOutServicePolicyNam, cgprsAccPtAdvDownlinkNextHopAddr, cgprsAccPtGtpUpdateFailDelete, cgprsAccPtAaaAccountInterPeriod, cgprsAccPtAaaAccountInterRadius, cgprsAccPtPcscfLoadBalance, cgprsAccPtNetworkBehindMsEnable, cgprsAccPtChargingRecordType, cgprsAccPtImsConfigTable, cgprsAccPtChgProfTable, cgprsAccPtMsType, cgprsAccPtChgProfOverride, cgprsAccPtCacTable, cgprsAccPtCacPolicyName, cgprsAccPtCacUpStrBandWidthPool, cgprsAccPtRouteProbeTable, cgprsAccPtIpv6Table, cgprsAccPtIpv6BaseVTemplate, cgprsAccPtIpv6Enable, cgprsAccPtIpv6Exclusive, cgprsAccPtIpv6AddrPool, cgprsAccPtIpv6Redirect, cgprsAccPtIpv6SecurityVerifySrc, cgprsAccPtIpv6SecurityVerifyDst, cgprsAccPtCfgNotifIndex, cgprsAccPtStatisticsTable, cgprsAccPtMsActivatedPdps, cgprsAccPtSuccMsActivatedPdps, cgprsAccPtMsActivatedDynPdps, cgprsAccPtSuccMsActivatedDynPdps, cgprsAccPtMsDeactivatedPdps, cgprsAccPtSuccMsDeactivatedPdps, cgprsAccPtNetworkInitPdps, cgprsAccPtSuccNetworkInitPdps, cgprsAccPtGgsnDeactivatedPdps, cgprsAccPtSuccGgsDeactivatedPdps, cgprsAccPtActivePdps, cgprsAccPtDhcpAddrRequests, cgprsAccPtSuccDhcpAddrRequests, cgprsAccPtDhcpAddrReleases, cgprsAccPtIpv6MsActivatedPdps, cgprsAccPtIpv6MsSuccActivatedPdps, cgprsAccPtIpv6NetworkInitDeactPdps, cgprsAccPtIpv6NetworkInitDeactSuccPdps, cgprsAccPtIpv6MsActivatedDynPdps, cgprsAccPtIpv6MsSuccActivatedDynPdps, cgprsAccPtIpv6MsDeactivatedPdps, cgprsAccPtIpv6MsSuccDeactivatedPdps, cgprsAccPtIpv6GgsnDeactivatedPdps, cgprsAccPtIpv6GgsnSuccDeactivatedPdps, cgprsAccPtPdpUpdateReqSent, cgprsAccPtSuccPdpUpdateResRcvd, cgprsAccPtCoaSuccess, cgprsAccPtDtEnabled, cgprsAccPtTotalBearers, cgprsAccPtTotRmtInitCreateBearers, cgprsAccPtSuccRmtInitCreateBearers, cgprsAccPtNetworkInitDeleteBearers, cgprsAccPtTotRmtInitModifyBearers, cgprsAccPtSuccRmtInitModifyBearers, cgprsAccPtTotNetworkInitUpdateBearers, cgprsAccPtSuccNetworkInitUpdateBearers, cgprsAccPtTotNetworkInitCreateDedBearers, cgprsAccPtSuccNetworkInitCreateDedBearers, cgprsAccPtTotNetworkInitCreateIPv6DedBearers, cgprsAccPtSuccNetworkInitCreateIPv6DedBearers, cgprsAccPtv4v6MsActivatedPdps, cgprsAccPtv4v6SuccMsActivatedPdps, cgprsAccPtv4v6MsDeactivatedPdps, cgprsAccPtv4v6SuccMsDeactivatedPdps, cgprsAccPtv4v6ActDedbearerPdps, cgprsAccPtv4v6SuccActDedbearerPdps, cgprsAccPtDhcpProxServRelease, cgprsAccPtDhcpProxServOffer, cgprsAccPtDhcpProxServAcks, cgprsAccPtDhcpProxServNaks, cgprsAccPtDhcpProxServInform, cgprsAccPtDhcpProxServUnknowMsg, cgprsAccPtDhcpProxServRetryDrops, cgprsAccPtDhcpProxServErrDrops, cgprsAccPtThruputStatsTable, cgprsAccPtRouteProbeGroup, cgprsAccPtIpv6Group. [6] Added the following groups cgprsAccPtExtMIBGroupSup2, cgprsAccPtDhcpv6ProxyStatsGroup, cgprsAccPtStatisticsGroupSup4. [7] Deprecated MODULE-COMPLIANCE cgprsAccPtMIBComplianceRev12 and is superceded by cgprsAccPtMIBComplianceRev13.', 'The following changes have been made. [1] The following objects has been added to cgprsAccPtStatisticsTable. cgprsAccPtv4v6MsActivatedPdps, cgprsAccPtv4v6SuccMsActivatedPdps, cgprsAccPtv4v6MsDeactivatedPdps, cgprsAccPtv4v6SuccMsDeactivatedPdps, cgprsAccPtv4v6SuccActDedbearerPdps, cgprsAccPtv4v6SuccActDedbearerPdps, cgprsAccPtDhcpProxServDiscover, cgprsAccPtDhcpProxServRequest, cgprsAccPtDhcpProxServDeclines, cgprsAccPtDhcpProxServRelease, cgprsAccPtDhcpProxServOffer, cgprsAccPtDhcpProxServAcks, cgprsAccPtDhcpProxServNaks, cgprsAccPtDhcpProxServInform, cgprsAccPtDhcpProxServUnknowMsg, cgprsAccPtDhcpProxServRetryDrops, cgprsAccPtDhcpProxServErrDrops [2] The following objects has been added to cgprsAccPtExtTable. cgprsAccPtDualAddrEnabled [3] The following objects has been added to cgprsAccPtIpv6Table. cgprsAccPtIpv6AddrAllocations [4] Added group cgprsAccPtStatisticsGroupSup3, which deprecates cgprsAccPtStatisticsGroupSup2. [5] Added new group cgprsAccPtMIBGroupSup1. [6] Deprecated MODULE-COMPLIANCE cgprsAccPtMIBComplianceRev11 and is superceded by cgprsAccPtMIBComplianceRev12.', 'The following changes have been made. [1] The following objects has been added to cgprsAccPtStatisticsTable. cgprsAccPtTotalBearers, cgprsAccPtTotRmtInitCreateBearers, cgprsAccPtSuccRmtInitCreateBearers, cgprsAccPtNetworkInitDeleteBearers, cgprsAccPtTotNetworkInitUpdateBearers, cgprsAccPtSuccNetworkInitUpdateBearers, cgprsAccPtTotNetworkInitCreateDedBearers, cgprsAccPtSuccNetworkInitCreateDedBearers, cgprsAccPtTotRmtInitModifyBearers, cgprsAccPtSuccRmtInitModifyBearers, cgprsAccPtTotNetworkInitCreateIPv6DedBearers, cgprsAccPtSuccNetworkInitCreateIPv6DedBearers [2] The following objects has been added to cgprsAccPtExtTable. cgprsAccPtChargingRecordType, cgprsAccPtChargingGrp, cgprsAccPtIpAddrPoolNoRedistribute [3] The following object has been added to cgprsAccPtAggregTable. cgprsAccPtAggregCsgGroup [4] Added cgprsAccPtCsgGroupTable to ciscoGprsAccPtConfig. [5] Added group cgprsAccPtStatisticsGroupSup2, which deprecates cgprsAccPtStatisticsGroupSup1. [6] Added group cgprsAccPtMIBR90GroupRev1, which deprecates cgprsAccPtMIBR90Group. [7] Added new group cgprsAccPtMIBR92Group. [8] Added new group cgprsAccPtMIBR100Group. [9] Deprecated MODULE-COMPLIANCE cgprsAccPtMIBComplianceRev10 and is superceded by cgprsAccPtMIBComplianceRev11.', 'Added cgprsAccPtGxEnable, cgprsAccPtPcscfLoadBalance, cgprsAccPtNetworkBehindMsEnable, cgprsAccPtMaxSubnetsBehindMobile to cgprsAccPtExtTable.', 'Added cgprsAccPtAaaAccountInterRadius to cgprsAccPtExtTable.', 'Added cgprsAccPtGtpUpdateFailDelete, cgprsAccPtAaaAccountInterPeriod to cgprsAccPtExtTable. Added cgprsAccPtPdpUpdateReqSent, cgprsAccPtSuccPdpUpdateResRcvd, cgprsAccPtCoaRcvd, cgprsAccPtCoaSuccess, cgprsAccPtDtEnabled to cgprsAccPtStatisticsTable.', 'Deprecated cgprsAccPtImsConfigTable, as IMS is not supported from GGSN release 5.0 onwards. Added cgprsAccPtPcscfServerGroupName to cgprsAccPtTable.', 'Added cgprsAccPtIpv6Configs to ciscoGprsAccPtConfig. Added following objects to cgprsAccPtStatisticsTable: cgprsAccPtIpv6MsActivatedPdps, cgprsAccPtIpv6MsSuccActivatedPdps, cgprsAccPtIpv6NetworkInitDeactPdps, cgprsAccPtIpv6NetworkInitDeactSuccPdps, cgprsAccPtIpv6MsActivatedDynPdps, cgprsAccPtIpv6MsSuccActivatedDynPdps, cgprsAccPtIpv6MsDeactivatedPdps, cgprsAccPtIpv6MsSuccDeactivatedPdps, cgprsAccPtIpv6GgsnDeactivatedPdps, cgprsAccPtIpv6GgsnSuccDeactivatedPdps, cgprsAccPtIpv6UpstreamTrafficVolume, cgprsAccPtIpv6DownstreamTrafficVolume, cgprsAccPtIpv6UpstreamPackets, cgprsAccPtIpv6DownstreamPackets.', 'Changed the range of cgprsAccPtName and cgprsAccPtMsIsdnSuppressedValue.', 'Modified the description for the object cgprsAccPtName. Modified the description for the object cgprsAccPtChgProfile. Added new value to the object cgprsAccPtType. Added new objects cgprsAccPtServiceAware, cgprsAccPtAdvDownlinkNextHopAddrType, cgprsAccPtAdvDownlinkNextHopAddr to cgprsAccPtExtTable.', 'Modified the description for the object cgprsAccPtChgProfile.', '+ Added cgprsAccPtInterimAccountinEnable, cgprsAccPtSetRadiusAttributes, cgprsAccPtOperationMode, cgprsAccPtAbsoluteSessionTimer, cgprsAccPtRadiusAttrNasId, cgprsAccPtPdpInServicePolicyName, cgprsAccPtPdpOutServicePolicyNam, cgprsAccPtPppRegenVerifyDomain, cgprsAccPtIpAddrLocalPoolName to cgprsAccPtExtTable. + Added cgprsAccPtGenServerConfigs, cgprsAccPtImsConfigs, cgprsAccPtChargingParams, cgprsAccPtCacConfigs, cgprsAccPtRouteProbeConfigs to ciscoGprsAccPtConfig. + Added cgprsAccPtThruputStatsTable to ciscoGprsAccPtStatistics. + Added cgprsAccPtRevUpstreamTrafficVol, cgprsAccPtRevDownstrTrafficVol, cgprsAccPtUpstreamPacketCount, cgprsAccPtDownstreamPacketCount, cgprsAccPtDhcpAddrRequests, cgprsAccPtSuccDhcpAddrRequests, cgprsAccPtDhcpAddrReleases to cgprsAccPtStatisticsTable. + Added cgprsAccPtSecSrcViolNotif, cgprsAccPtSecDestViolNotif, cgprsAccPtMaintenanceNotif and cgprsAccPtInServiceNotif to cgprsAccPtMIBNotifications. + Deprecated cgprsAccPtUpstreamTrafficVol, cgprsAccPtDownstreamTrafficVol.', '+ Added cgprsAccPtSuppressRadiusAttribs to cgprsAccPtExtTable. + Deprecated cgprsAccPtImsiSuppressed.', '+ Added cgprsAccPtImsiSuppressed, cgprsAccPtVerifyUpStrTpduSrcAddr, cgprsAccPtVerifyUpStrTpduDstAddr, cgprsAccPtRedirInterMobilAddrTyp, cgprsAccPtRedirInterMobilAddr to cgprsAccPtExtTable. + Added cgprsAccPtSourceAddrViolTpdus, cgprsAccPtDestAddrViolTpdus, cgprsAccPtRedirInterMobilTraffic to cgprsAccPtStatisticsTable. + Updated the DESCRIPTION and DEFVAL of cgprsAccPtPppRegenMaxSessions. + Updated the DESCRIPTION of cgprsAccPtMsIsdnSuppressed.', '+ Added cgprsAccPtExtTable. + Added cgprsAccPtType, cgprsAccPtVrfName, cgprsAccPtDhcpAddrSpace, cgprsAccPtPppRegenEnable, cgprsAccPtPppRegenMaxSessions, cgprsAccPtPppRegenSetupTime, cgprsAccPtAutoAggregation. + Added objects for performance data measurements related to GGSN. + Added cgprsAccPtIdlePdpPurgeTimer, cgprsAccPtBlockMsRoaming, cgprsAccPtAnonymousUserName, cgprsAccPtAnonymousUserPassword cgprsAccPtMsIsdnSuppressed, cgprsAccPtMsIsdnSuppressedValue, cgprsAccPtAaaAuthServerGroup, cgprsAccPtAaaAccountServerGroup, cgprsAccPtAaaAccountingEnable. + Deprecated cgprsAccPtUsers, cgprsAccPtRadiusServerPri and cgprsAccPtRadiusServerSec.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGprsAccPtMIB.setLastUpdated('201204040000Z')
if mibBuilder.loadTexts: ciscoGprsAccPtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGprsAccPtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: ciscoGprsAccPtMIB.setDescription("This MIB module supports access point configuration for GGSN in a GPRS system. GPRS [1] is a GSM network providing mobile wireless data communication services. GGSN is the Gateway GPRS Support Node in the GPRS architecture. It provides interworking with external packet-switched networks - PDNs or other data networks. GGSN is a software extension of a router. A GGSN provides data access for its mobile subscribers to parts of the data network identified by the list of APNs configured on the node. The following diagram illustrates the network elements in a GPRS network, and the interfaces between them: +=====+ +======+ +======+ +=====+ | BSS |----| SGSN |--Gn--| GGSN |--Gi--| PDN | +=====+ +======+ +======+ +=====+ ^ ^ /|\\ /|\\ | | | Visited access +--------+ | provider network | Access | | | point | \\|/ | table | V +--------+ +=====+ | MS | +=====+ Access points must be configured on the GGSN. The Access Point Name is defined in GSM 03.03 [2] and consists of two parts, the APN Network Identifier and the APN Operator Identifier (more details in the object description in this MIB module). The cgprsAccPtTable contains the list of APNs supported by this GGSN and a set of engineering parameters that define the access point's operation. This MIB is also supported in the Evolved Packet Core(EPC) architecture. The details of this architecture is discussed in CISCO-EPC-GATEWAY-MIB description. Hence, the MIB will be supported by GGSN Gateway, PDN Gateway(PGW), Serving Gateway(SGW) and a combined PGW and SGW Gateway SPGW(SGW PGW Gateway). Acronyms and terms: 3GPP 3rd Generation Partnership Project APN Access Point Name BSS Base Station Subsystem CAC Call Admission Control COA Change of Authorization CSG2 Content Service Gateway Release 2 ETSI European Telecommunications Standards Institute Gi Name of the Interface between GGSN and PDN Gn Name of the Interface between GGSN and SGSN GGSN Gateway GPRS Support Node GPRS General Packet Radio Service GSM Global System for Mobile communication Gx Dynamic Charging and Policy Interface IMS IP Multimedia Subsystem MME Mobility Management Entity MS Mobile Station P-CSCF Proxy Call Session Control Function PCO Protocol Config Options PDF Policy Decision Function PDN Public Data Network PDP Packet Data Protocol PLMN Public Land Mobile Network QOS Quality Of Service SGSN Serving GPRS support Node UE User Equipment VPN Virtual Private Network VRF VPN Routing and Forwarding REFERENCE [1] GSM 03.60: Digital cellular telecommunications system (Phase 2+); General Packet Radio Service (GPRS); Service description; Stage 2. [2] GSM 03.03: Digital cellular telecommunication system (Phase 2+); General Packet Radio Service (GPRS); Service description; Stage 1.")
class AccessControlListId(TextualConvention, Integer32):
    description = 'Access Control List (ACL) specifies criteria by which packets are evaluated as matching or non-matching. The ACL also specifies an action which is applied to packets which match. Objects which use this textual convention identify ACLs. ACLs are configured/defined outside the scope of this MIB. The value of an object with this syntax associates to an ACL with the same ACL number.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2699)

class AccessControlListOrZero(TextualConvention, Integer32):
    description = 'Access Control List (ACL) specifies criteria by which packets are evaluated as matching or non-matching. The ACL also specifies an action which is applied to packets which match. Objects which use this textual convention identify ACLs. ACLs are configured/defined outside the scope of this MIB. The value of an object with this syntax associates to an ACL with the same ACL number. A value of zero indicates no ACL is configured.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 199), ValueRangeConstraint(1300, 2699), )
class AccessControlListName(TextualConvention, OctetString):
    description = 'Access Control List (ACL) specifies the criteria by which packets are evaluated as matching or non-matching. The ACL also specifies an action, which is applied to packets which match. Objects which use this textual convention identify ACLs. ACLs are configured/defined outside the scope of this MIB. The name of an object with this syntax associates to an ACL with the same ACL name.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

ciscoGprsAccPtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1))
ciscoGprsAccPtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1))
ciscoGprsAccPtCfgNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2))
ciscoGprsAccPtStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3))
ciscoGprsAccPtNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 4))
cgprsAccPtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1), )
if mibBuilder.loadTexts: cgprsAccPtTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTable.setDescription('This table contains a list of access points configured on this Gateway.')
cgprsAccPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIndex"))
if mibBuilder.loadTexts: cgprsAccPtEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtEntry.setDescription("A description of an access point. Access point parameters cannot be changed when active PDP's or Bearer's exists on the Gateway.")
cgprsAccPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cgprsAccPtIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIndex.setDescription('A locally unique identifier for this access point on this Gateway.')
cgprsAccPtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRowStatus.setDescription("This object is used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cgprsAccPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtName.setReference('GSM 03.03: Digital cellular telecommunication system (Phase 2+); General Packet Radio Service (GPRS); Service description; Stage 1.')
if mibBuilder.loadTexts: cgprsAccPtName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtName.setDescription("The Access Point Name. It is composed of two parts: - The APN Network Identifier is mandatory and is a fully qualified domain name according to the DNS naming conventions, e.g., 'company.com.'. - The APN Operator Identifier is optional. It is a fully qualified domain name according to the DNS naming convention, and consists of three labels, the last of which must be '.gprs'. For example, 'mncyyyy.mcczzzz.gprs'. An example of a full APN name with both the Network and operator identifiers is 'company.com.mncyyyy.mcczzzz.gprs'.")
cgprsAccPtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("nontransparent", 2))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtMode.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMode.setDescription("Specifies the type of access allowed to the PDN through this access point. - 'transparent', indicates that users can access without authentication. - 'nontransparent', indicates that users must be authenticated by the Gateway.")
cgprsAccPtIpAddressPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("global", 1), ("dhcp", 2), ("radius", 3), ("disable", 4), ("local", 5))).clone('global')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpAddressPool.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpAddressPool.setDescription("Specifies a dynamic address allocation method for this access point. - 'global', which indicates that no method is defined specifically to this access point and the DHCP or radius server configured for this Gateway 'globally' will be used to allocation a dynamic IP address to the user. - 'dhcp', which indicates that the DHCP server will be used. - 'radius', which indicates that the radius server will be used. - 'disable', which indicates that dynamic address allocation is disabled. - 'local', indicates that local address pool configured on the Gateway is going to be used. cgprsAccPtIpAddrLocalPoolName denotes the name of the corresponding address pool.")
cgprsAccPtDHCPServerPri = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDHCPServerPri.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDHCPServerPri.setDescription('This object specifies the IP address of the primary DHCP server from which a mobile subscriber can request an IP address assignment for the access of this APN. In case this DHCP server is not available, the secondary DHCP server is used.')
cgprsAccPtDHCPServerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDHCPServerSec.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDHCPServerSec.setDescription('The IP address of the secondary DHCP server. The secondary DHCP server is used if the primary DHCP server is not available. This object can be set after configuring primary DHCP server.')
cgprsAccPtDHCPGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDHCPGwAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDHCPGwAddr.setDescription("This object specifies the DHCP Gateway address that is used in the 'giaddr' field of the DHCP request. It is used by DHCP to determine from which pool the IP address will be allocated. If no DHCP Gateway is specified, the IP address associated with the Gn interface is used.")
cgprsAccPtRadiusServerPri = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRadiusServerPri.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtRadiusServerPri.setDescription('This object specifies the IP address of the primary RADIUS server used by this access point to authenticate and/or authorize mobile users to access the PDN. In case this RADIUS server is not available, the secondary will be used. Obsoleted by cgprsAccPtAaaAuthServerGroup and cgprsAccPtAaaAccountServerGroup.')
cgprsAccPtRadiusServerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRadiusServerSec.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtRadiusServerSec.setDescription('Specifies a secondary RADIUS server. The secondary RADIUS server will be used if the primary RADIUS server is not available. Obsoleted by cgprsAccPtAaaAuthServerGroup and cgprsAccPtAaaAccountServerGroup.')
cgprsAccPtIPAccListGroupIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 11), AccessControlListId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIPAccListGroupIn.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIPAccListGroupIn.setDescription("This object specifies the ACL against which to compare packets received at this Access Point from the PDN for forwarding towards an MS. Access list at the access point level is used to control which packets are allowed access between the APN and the MS. Access violations by a packet according to the rules in this ACL could cause this packet to be dropped or its PDP or Bearer session terminated. Which of these treatments is taken is specified by the object cgprsAccPtAccessViolation. This object is ignored if cgprsAccPtIPAccListInEnable is set to 'false'.")
cgprsAccPtIPAccListGroupOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 12), AccessControlListId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIPAccListGroupOut.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIPAccListGroupOut.setDescription("This object specifies the ACL against which to compare packets originated by an MS and received by at this Access Point for forwarding to the PDN. Access list at the access point level is used to control which packets are allowed access between the APN and the MS. Access violations by a packet according to the rules in this ACL could cause this packet to be dropped or its PDP or Bearer session terminated. Which of these treatments is taken is specified by the object cgprsAccPtAccessViolation. This object is ignored if cgprsAccPtIPAccListOutEnable is set to 'false'.")
cgprsAccPtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtIfIndex.setDescription('Specifies an interface to be used by GGSN on Gi interface. The value zero indicates that no interface is specified. The cgprsAccPtIfNextHop must be specified if this object is set to the Gi associated interface.')
cgprsAccPtIfNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIfNextHop.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtIfNextHop.setDescription("Specifies the IP address of the next hop for the Gi interface, specified by cgprsAccPtIfIndex. This value is mandatory if the value of cgprsAccPtIfIndex is non-zero. Setting the cgprsAccPtIfIndex object to zero will reset this object to the value of '00000000'H, which means it is not used.")
cgprsAccPtAccessViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discardPacket", 1), ("terminateSession", 2))).clone('discardPacket')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAccessViolation.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAccessViolation.setDescription("Specifies how access violation should be treated. An access violation occurs if the IP packets violates any rules in ACL as specified by either cgprsAccPtIPAccListGroupIn or cgprsAccPtIPAccListGroupOut. - 'discardPacket', packets are discarded. - 'terminateSession', the user's session is terminated.")
cgprsAccPtSubrRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtSubrRequired.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSubrRequired.setDescription('This object indicates if a user needs to subscribe to this access point before accessing it.')
cgprsAccPtNetworkInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtNetworkInitiated.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtNetworkInitiated.setDescription('This object indicates whether network (PDN) initiated PDP or Bearer sessions are allowed for this access point. The more common case, is false, which indicates that the PDP or Bearer is initiated by the MS.')
cgprsAccPtIpAddrAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpAddrAllocations.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpAddrAllocations.setDescription("Indicates the number of IP addresses allocated to MS's. Trigger Condition: This gauge is incremented/decremented by successful completion of create/delete dynamic PDP or Bearer context request message respectively.")
cgprsAccPtUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtUsers.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtUsers.setDescription('The number of mobile subscribers currently accessing this APN. Obsoleted by cgprsAccPtActivePdps.')
cgprsAccPtIdlePdpPurgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIdlePdpPurgeTimer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIdlePdpPurgeTimer.setDescription('This object indicates maximum idle connection time allowed to the PDP or Bearer context before termination of the GTP session. A value of 0 means session idle timer is not used.')
cgprsAccPtBlockMsRoaming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtBlockMsRoaming.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtBlockMsRoaming.setDescription('This object indicates whether access to a roaming MS needs to be blocked for this APN.')
cgprsAccPtAnonymousUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 22), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAnonymousUserName.setReference('GSM 03.03: Digital cellular telecommunication system (Phase 2+); General Packet Radio Service (GPRS); Service description; Stage 1.')
if mibBuilder.loadTexts: cgprsAccPtAnonymousUserName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAnonymousUserName.setDescription('This object specifies the anonymous user name, which is used when a MS tries to access a non-transparent APN without supplying user name and password.')
cgprsAccPtAnonymousUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 23), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAnonymousUserPassword.setReference('GSM 03.03: Digital cellular telecommunication system (Phase 2+); General Packet Radio Service (GPRS); Service description; Stage 1.')
if mibBuilder.loadTexts: cgprsAccPtAnonymousUserPassword.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAnonymousUserPassword.setDescription('This object specifies the password corresponding to cgprsAccPtAnonymousUserName. For security reasons, retrieving this object returns a zero-length string.')
cgprsAccPtMsIsdnSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtMsIsdnSuppressed.setReference('GSM 09.02: Digital cellular telecommunication system (Phase 2+); Mobile Application Part (MAP) specification.')
if mibBuilder.loadTexts: cgprsAccPtMsIsdnSuppressed.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsIsdnSuppressed.setDescription("This object specifies whether the ISDN ID used by the MS, when authenticating with a radius server, needs to be suppressed or not. When set to 'true', the ISDN ID attribute will not be sent by the Gateway. When set to 'false', the ISDN ID attribute will be sent by the Gateway. To set this object to 'true', AAA radius group for authentication should have been configured on the Gateway(either at global or APN level).")
cgprsAccPtMsIsdnSuppressedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtMsIsdnSuppressedValue.setReference('GSM 09.02: Digital cellular telecommunication system (Phase 2+); Mobile Application Part (MAP) specification.')
if mibBuilder.loadTexts: cgprsAccPtMsIsdnSuppressedValue.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsIsdnSuppressedValue.setDescription("This object specifies the value that will be transmitted to the radius server in place of mobile stations ISDN ID. This object can only be set if cgprsAccPtMsIsdnSuppressed is 'true'. Valid characters for this object are 0..9, a, b, c, * and #. If no value is set, no MS-ISDN ID will be sent to the radius server.")
cgprsAccPtAaaAuthServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 26), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAaaAuthServerGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAaaAuthServerGroup.setDescription('This object specifies the AAA radius server group that is used for authentication by this APN.')
cgprsAccPtAaaAccountServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 27), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAaaAccountServerGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAaaAccountServerGroup.setDescription('This object specifies the AAA radius server group that is used for accounting by this APN. If no group is specified for accounting, cgprsAccPtAaaAuthServerGroup will be used.')
cgprsAccPtAaaAccountingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAaaAccountingEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAaaAccountingEnable.setDescription("This object is used to enable accounting when the APN is in 'transparent' mode. When the object is set to 'true', cgprsAccPtAaaAccountServerGroup is used for accounting. If cgprsAccPtAaaAccountServerGroup is not specified, cgprsAccPtAaaAuthServerGroup will be used. When the APN is in 'non-transparent' mode, the accounting will always be enabled i.e., this object will be 'true' by default.")
cgprsAccPtType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("real", 1), ("virtual", 2), ("virtualPreAuth", 3))).clone('real')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtType.setDescription("This object specifies the type of APN. 'virtual' - Specifies an APN type that is not associated with any specific physical target network on the Gateway. When this object is set to 'virtual', all other APN parameters are ignored. 'real' - Specifies an APN type that corresponds to a physical interface to an external network on the Gateway. 'virtualPreAuth' - Specifies an APN type that is not associated with any specific physical target network on the Gateway. It applies a pre-authentication phase for any create PDP or Bearer request that includes a virtual APN. During pre-authentication, an Access-Request message is sent to an AAA server and the AAA server then returns a target APN encoded in a Radius attribute in the Access-Accept message.")
cgprsAccPtVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 30), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtVrfName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtVrfName.setDescription('This object specifies the name of the VRF with which this APN is associated.')
cgprsAccPtDhcpAddrSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("global", 1), ("vrf", 2))).clone('global')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDhcpAddrSpace.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpAddrSpace.setDescription('This object specifies the address space used by the dhcp server. This object can only be set if cgprsAccPtDHCPServerPri is set.')
cgprsAccPtPppRegenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPppRegenEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPppRegenEnable.setDescription('This object is used to enable Gateway to regenerate a PPP session for each IP PDP or Bearer context on this APN.')
cgprsAccPtPppRegenMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPppRegenMaxSessions.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPppRegenMaxSessions.setDescription("This object specifies the maximum number of regenerated PPP sessions allowed for this access-point. This object can only be set if cgprsAccPtPppRegenEnable is set to 'true'. The maximum value that can be held by this object depends on the Gateway's platform.")
cgprsAccPtPppRegenSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPppRegenSetupTime.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPppRegenSetupTime.setDescription("This object specifies the maximum tolerance time within which a regenerated PPP session has to fully come up. This object can only be set if cgprsAccPtPppRegenEnable is set to 'true'.")
cgprsAccPtAutoAggregation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAutoAggregation.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAutoAggregation.setDescription("This object is used to enable auto aggregation on this APN. When a user tries to configure entries in cgprsAccPtAggregTable, this object will automatically be set to 'false'. When this object is set to 'true', the entries in cgprsAccPtAggregTable, if any, will be deleted.")
cgprsAccPtPcscfServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 1, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPcscfServerGroupName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPcscfServerGroupName.setDescription('This object represents the Proxy-CSCF server group that will be used by this APN. The Proxy-CSCF server group contains a list of Proxy-CSCF addresses which will be provided to the MS(UE) in response to a PDP or Bearer contexts for which the P-CSCF address request field is set in PCO.')
cgprsAccPtAggregTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2), )
if mibBuilder.loadTexts: cgprsAccPtAggregTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregTable.setDescription('This table contains the list of aggregate routes configured on this APN. Gateway uses a static host route to forward user data packets for each PDP or Bearer context received from Gi interface to Gn interface. Using the aggregate route (address range), total number of static routes implemented in the Gateway for PDP or Bearer requests can be greatly reduced. If there is no aggregate route configured on this access-point, then default aggregate routes configured on Gateway will be used.')
cgprsAccPtAggregEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIndex"), (0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAggregIpAddrType"), (0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAggregIpAddr"), (0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAggregIpMask"))
if mibBuilder.loadTexts: cgprsAccPtAggregEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregEntry.setDescription('An Entry contains the IP network prefix which is used to combine the routes of PDP or Bearer requests for the same network as a single route on the Gateway.')
cgprsAccPtAggregIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cgprsAccPtAggregIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregIpAddrType.setDescription('This object specifies the type of Internet address denoted by cgprsAccPtAggregIpAddr.')
cgprsAccPtAggregIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cgprsAccPtAggregIpAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregIpAddr.setDescription('This object specifies the IP address whose network prefix is going to be defined by cgprsAccPtAggregIpMask. When this object is set, cgprsAccPtAggregIpMask must be specified.')
cgprsAccPtAggregIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2, 1, 3), CiscoInetAddressMask())
if mibBuilder.loadTexts: cgprsAccPtAggregIpMask.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregIpMask.setDescription('This object specifies the net-mask pertaining to cgprsAccPtAggregIpAddr.')
cgprsAccPtAggregRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAggregRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'.")
cgprsAccPtAggregCsgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAggregCsgGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAggregCsgGroup.setDescription('This object specifies the name of the CSG Group. The value must be same as an entry in cgprsAccPtCsgGroupTable identified by cgprsAccPtCsgGroupName.')
cgprsAccPtExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3), )
if mibBuilder.loadTexts: cgprsAccPtExtTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtExtTable.setDescription('This table is an extension of cgprsAccPtTable.')
cgprsAccPtExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtEntry"))
cgprsAccPtExtEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtExtEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtExtEntry.setDescription('An entry in cgprsAccPtExtTable.')
cgprsAccPtIPAccListInEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIPAccListInEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIPAccListInEnable.setDescription("When this object is set to 'true', ACL denoted by cgprsAccPtIPAccListGroupIn will be active. When set to 'false', it will become inactive.")
cgprsAccPtIPAccListOutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIPAccListOutEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIPAccListOutEnable.setDescription("When this object is set to 'true', ACL denoted by cgprsAccPtIPAccListGroupOut will be active. When set to 'false', it will become inactive.")
cgprsAccPtGtpRespMesgWaitAcctng = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtGtpRespMesgWaitAcctng.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGtpRespMesgWaitAcctng.setDescription("When this object is set to 'true', Gateway waits for a RADIUS accounting response before sending a create PDP or Bearer context response to the MME or SGSN, for create PDP or Bearer context requests received at a particular APN. When this object is set to 'false', Gateway sends create PDP or Bearer response to MME or SGSN after sending a RADIUS start accounting message to the RADIUS server (without waiting for a response from the RADIUS accounting server).")
cgprsAccPtImsiSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtImsiSuppressed.setReference('3GPP TS 29.061 Release 1999: Digital cellular telecommunications system (Phase 2+) (GSM); Universal Mobile Telecommunications System (UMTS);Interworking between the Public Land Mobile Network (PLMN) supporting Packet Based services and Packet Data Networks (PDN).')
if mibBuilder.loadTexts: cgprsAccPtImsiSuppressed.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtImsiSuppressed.setDescription("This object specifies whether GGSN will be sending the radius attribute, IMSI value, in any of the radius requests to the radius server or not. When set to 'true', the IMSI attribute will not be sent by the GGSN. When set to 'false', the IMSI attribute will be sent by the GGSN. This object is obsoleted by cgprsAccPtSuppressRadiusAttribs.")
cgprsAccPtVerifyUpStrTpduSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtVerifyUpStrTpduSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtVerifyUpStrTpduSrcAddr.setDescription("When this object is set to 'true', the Gateway will check the upstream TPDU source address against the address previously assigned to this user. If the addresses are different, the TPDU is dropped, the notification cgprsAccPtSecSrcViolNotif is generated and cgprsAccPtSourceAddrViolTpdus is incremented. This check will enable the Gateway to restrict the users with fake identity. When the object is set to 'false', no checking is performed by the Gateway.")
cgprsAccPtVerifyUpStrTpduDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtVerifyUpStrTpduDstAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtVerifyUpStrTpduDstAddr.setDescription("When this object is set to 'true', Gateway will check the upstream TPDU destination address against the range of IP addresses reserved for PLMN devices. If there is a match, the TPDU is dropped, the notification cgprsAccPtSecDestViolNotif is generated and cgprsAccPtDestAddrViolTpdus is incremented. The configuration of IP address ranges reserved for PLMN device is out of the scope of this MIB. This check would enable the Gateway to protect the GPRS network from some hacker who may try to flood the Gateway and PLMN nodes with intense data traffic. When the object is set to 'false', no checking is performed by the Gateway.")
cgprsAccPtRedirInterMobilAddrTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRedirInterMobilAddrTyp.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRedirInterMobilAddrTyp.setDescription('This object indicates the type of Internet address by which cgprsAccPtRedirInterMobilAddr is reachable.')
cgprsAccPtRedirInterMobilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRedirInterMobilAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRedirInterMobilAddr.setDescription("This object represents the IP address of the device to which inter-mobile traffic will be re-directed. When this redirection is active on an APN, before downstream packets exit the Gateway, they are screened to see if they come from other GTP tunnels. If so, they won't be GTP-tunneled downstream, but will get redirected to the device specified by this object and cgprsAccPtRedirInterMobilTraffic is incremented. When this object is set to zero value, inter-mobile traffic will not be redirected i.e., the traffic will get switched through Gateway without going through any Gi interface.")
cgprsAccPtSuppressRadiusAttribs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("none", 0), ("imsi", 1), ("sgsnAddr", 2), ("qos", 3))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtSuppressRadiusAttribs.setReference('3GPP TS 29.061 Release 1999: Digital cellular telecommunications system (Phase 2+) (GSM); Universal Mobile Telecommunications System (UMTS);Interworking between the Public Land Mobile Network (PLMN) supporting Packet Based services and Packet Data Networks (PDN).')
if mibBuilder.loadTexts: cgprsAccPtSuppressRadiusAttribs.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuppressRadiusAttribs.setDescription('This object indicates the attributes that will be suppressed by the Gateway in its its authorization and accounting requests to the RADIUS server.')
cgprsAccPtInterimAccountinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtInterimAccountinEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtInterimAccountinEnable.setDescription("This object is used to enable Interim Accounting for a PDP or Bearer context on this APN. When set to 'true', accounting updates will be triggered whenever a update PDP or Bearer request is received. This object can set to 'true' only when accounting(cgprsAccPtAaaAccountingEnable) is enabled.")
cgprsAccPtSetRadiusAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 11), Bits().clone(namedValues=NamedValues(("none", 0), ("userNameMsisdn", 1), ("accSessIdChargingId", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtSetRadiusAttributes.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSetRadiusAttributes.setDescription("This object indicates the values set in various radius attributes by the Gateway while communicating with RADIUS Server. When set to 'none' - reset the value set by the options below. 'userNameMsisdn' - MSISDN of the mobile is sent in the user-name attribute. 'accSessIdChargingId' - Charging ID is sent in the accounting session ID attribute.")
cgprsAccPtOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inService", 0), ("maintenance", 1))).clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtOperationMode.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtOperationMode.setDescription('This object denotes the operation mode of this APN. Each mode has different PDP or Bearer context activation and deactivation behavior and is given as below: inService - normal operational mode in which all functions are allowed. cgprsAccPtInServiceNotif notification will be sent to indicate the state change. maintenance - No new PDPs or Bearers can be activated in this state. cgprsAccPtMaintenanceNotif notification will be sent to indicate the state change.')
cgprsAccPtAbsoluteSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 4294967), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAbsoluteSessionTimer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAbsoluteSessionTimer.setDescription("Absolute session timer is a RADIUS attribute (#27) sent by the AAA server in the Access-Accept packet. The Gateway will deactivate the PDP or Bearer when this timer expires. This object denotes the timer used by the Gateway when the same is not received from the AAA server. Value of '0' denotes that the timer is disabled.")
cgprsAccPtRadiusAttrNasId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRadiusAttrNasId.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRadiusAttrNasId.setDescription('This object denotes the value used as NAS ID in the RADIUS access requests sent by the Gateway on this APN. A zero length string needs to be set to unconfigure the NAS ID value.')
cgprsAccPtPdpInServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPdpInServicePolicyName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPdpInServicePolicyName.setDescription("Per PDP or Bearer Policy feature on the Gateway ensures that the PDP or Bearer contexts does not exceed bandwidth negotiated as part of PDP or Bearer context activation procedure. A service policy contains classification and policing parameters, details of the same is out of the scope of this MIB. This object denotes the name of the service policy that is applicable to inbound traffic on all the PDP's pertaining to this APN.")
cgprsAccPtPdpOutServicePolicyNam = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPdpOutServicePolicyNam.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPdpOutServicePolicyNam.setDescription("This object denotes the name of the service policy that is applicable to outbound traffic on all the PDP's or Bearer's pertaining to this APN.")
cgprsAccPtPppRegenVerifyDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPppRegenVerifyDomain.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPppRegenVerifyDomain.setDescription("When this object is set to 'true', a PPP regen session creation would be rejected if the domain name in PCO field is different than the APN name. This object can only be set when cgprsAccPtPppRegenEnable is 'true'.")
cgprsAccPtIpAddrLocalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 18), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpAddrLocalPoolName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpAddrLocalPoolName.setDescription("This object represents the name of the local address pool used when cgprsAccPtIpAddressPool is set to 'local'.")
cgprsAccPtServiceAware = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtServiceAware.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtServiceAware.setDescription("This object is to enable service-aware billing (Diameter Credit Control Application [DCCA] support) on the access-point. This object can be set only when the object cGgsnSAServiceAware present in CISCO-GGSN-SERVICE-AWARE-MIB is set to 'true'.")
cgprsAccPtAdvDownlinkNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 20), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAdvDownlinkNextHopAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAdvDownlinkNextHopAddrType.setDescription('This object indicates the type of Internet address of downlink next hop address.')
cgprsAccPtAdvDownlinkNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 21), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAdvDownlinkNextHopAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAdvDownlinkNextHopAddr.setDescription('This object advertises the next hop address on the Gateway to which downlink traffic destined for the Gateway is to be routed. The address type is given by the cgprsAccPtAdvDownlinkNextHopAddrType object.')
cgprsAccPtGtpUpdateFailDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtGtpUpdateFailDelete.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGtpUpdateFailDelete.setDescription("This object denotes the action to be taken when a COA initiated update request for QOS change fails for a PDP or Bearer context on this Access Point. If the object is set to 'true' and the update response from MME or SGSN (for a update request) is not got after the configured retries or the received response indicates a cause value other than 'request accepted', then the PDP or Bearer context will be deleted by the Gateway.")
cgprsAccPtAaaAccountInterPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(15, 71582), ))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAaaAccountInterPeriod.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAaaAccountInterPeriod.setDescription("This object specifies the periodic accounting timer interval value for the access point. When this object is set to a value, 'interim' type accounting records will be sent at the specified interval for the PDP or Bearer contexts on this APN. When set to '0' the 'interim' type accounting records will not be sent out.")
cgprsAccPtAaaAccountInterRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtAaaAccountInterRadius.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtAaaAccountInterRadius.setDescription("This object when set to 'true', enables Gateway to receive and use the Accounting Periodic Interval from Radius for the PDP or Bearer contexts on this APN.")
cgprsAccPtGxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtGxEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGxEnable.setDescription("This object when set to 'true', indicates that this APN is Gx enabled.")
cgprsAccPtPcscfLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPcscfLoadBalance.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPcscfLoadBalance.setDescription("The Proxy-CSCF server group represented by the object cgprsAccPtPcscfServerGroupName contains a list of Proxy-CSCF addresses which will be provided to the MS(UE) in the PCO (Protocol Configuration Option) response message. The object cgprsAccPtPcscfLoadBalance when set to 'true', enables Gateway to include the IP address of the least loaded P-CSCF server in the PCO response message. Round Robin algorithm is used for the selection of the least loaded P-CSCF server.")
cgprsAccPtNetworkBehindMsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtNetworkBehindMsEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtNetworkBehindMsEnable.setDescription("This object when set to 'true', enables the Gateway to support a network behind the Mobile Station.")
cgprsAccPtMaxSubnetsBehindMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtMaxSubnetsBehindMobile.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMaxSubnetsBehindMobile.setDescription("This object indicates the number of subnetworks that can be permitted behind the Mobile station. This object can be set only when the object cgprsAccPtNetworkBehindMsEnable is set to 'true' as this object can take effect only when cgprsAccPtNetworkBehindMsEnable is 'true'. Setting the value of '0' to this object will not take effect. The value of this object will be set to '0' only if the object cgprsAccPtNetworkBehindMsEnable is set to 'false'.")
cgprsAccPtChargingRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noconfig", 0), ("none", 1), ("gcdr", 2), ("egcdr", 3))).clone('noconfig')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtChargingRecordType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChargingRecordType.setDescription('This object denotes the charging record type of this APN. Each type has different PDP or Bearer context behavior and is given as below: noconfig - When no record type is configured. none - when there are no active PDP or Bearer contexts under this APN gcdr - When the derived record type is gcdr, the Gateway indicates CSG2 that gcdr generation is configured for this user, so that CSG2 will generate service level CDRs. egcdr - When the derived record type is egcdr, the Gateway indicates CSG2 that egcdr generation is configured for this user, so that CSG2 will not generate service level CDRs.')
cgprsAccPtChargingGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtChargingGrp.setReference('csgprsCgGroupIndex is defined in CISCO-GPRS-CHARGING-MIB.')
if mibBuilder.loadTexts: cgprsAccPtChargingGrp.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChargingGrp.setDescription('This object provides the charging group identifier to which an access point is associated with. By default the value of this object is 0, it indicates that the default charging group is associated with this access point entry. The value of this object must be same as one of the values identified by cgprsCgGroupIndex.')
cgprsAccPtIpAddrPoolNoRedistribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpAddrPoolNoRedistribute.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpAddrPoolNoRedistribute.setDescription('This object indicates whether route propagation from PCOP to SUP (Supervisor) shall occur. This object can be set/unset only when the object cgprsAccPtIpAddressPool is configured. By default the value of this object is false. Setting it to true does not allow the redistribution of routes from PCOP to the SUP.')
cgprsAccPtDualAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDualAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDualAddrEnabled.setDescription("This object when set to 'true' indicates that the APN has dual stack capability.")
cgprsAccPtVerifyDownlinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 3, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtVerifyDownlinkAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtVerifyDownlinkAddr.setDescription("This object indicates that the Gateway is programmed to check and reject all downstream packets with same source and destination. When the value is set to 'true', the Gateway check and reject all downstream packets with same source and destination and 'false' means this feature is disabled.")
cgprsAccPtGenServerConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4))
cgprsAccPtGenServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cgprsAccPtGenServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGenServerConfigTable.setDescription('Each column in this table represent IP address of different generic servers, for example: DNS, NetBIOS, configured on the APN.')
cgprsAccPtGenServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerConfigEntry"))
cgprsAccPtGenServerConfigEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtGenServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGenServerConfigEntry.setDescription('An entry in cgprsAccPtGenServerConfigTable.')
cgprsAccPtDnsServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDnsServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDnsServerAddrType.setDescription('This object indicates the type of Internet address by which cgprsAccPtPriDnsServer and cgprsAccPtSecDnsServer are reachable. DNS addresses to be sent to the MS can come from DHCP server or RADIUS server based on IP address allocation scheme chosen by cgprsAccPtIpAddressPool. The IP address configured to cgprsAccPtPriDnsServer and cgprsAccPtSecDnsServer will be sent to MS only when - DHCP/RADIUS servers does not return any DNS address. - local address pool is used for IP address allocation for MS.')
cgprsAccPtPriDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPriDnsServer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPriDnsServer.setDescription('This object specifies the IP address of the primary DNS server that will be sent to MS.')
cgprsAccPtSecDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtSecDnsServer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSecDnsServer.setDescription('This object specifies the IP address of the secondary DNS server that will be sent to MS. A secondary server can be configured only if primary exists.')
cgprsAccPtNetbiosServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtNetbiosServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtNetbiosServerAddrType.setDescription('This object indicates the type of Internet address by which cgprsAccPtPriNetbiosServer and cgprsAccPtSecNetbiosServer are reachable. NBNS addresses to be sent to the MS can come from DHCP server or RADIUS server based on IP address allocation scheme chosen by cgprsAccPtIpAddressPool. The IP address configured to cgprsAccPtPriNetbiosServer and cgprsAccPtSecNetbiosServer will be sent to MS only when - DHCP/RADIUS servers does not return any NBNS address. - local address pool is used for IP address allocation for MS.')
cgprsAccPtPriNetbiosServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPriNetbiosServer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPriNetbiosServer.setDescription('This object specifies the IP address of the primary NetBIOS name server(NBNS) that will be sent to MS.')
cgprsAccPtSecNetbiosServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 4, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtSecNetbiosServer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSecNetbiosServer.setDescription('This object specifies the IP address of the secondary NetBIOS name server(NBNS) that will be sent to MS. A secondary server can be configured only if primary exists.')
cgprsAccPtImsConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5))
cgprsAccPtImsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1), )
if mibBuilder.loadTexts: cgprsAccPtImsConfigTable.setReference('3GPP TS 29.207: Policy Control over Go interface.')
if mibBuilder.loadTexts: cgprsAccPtImsConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtImsConfigTable.setDescription('IP Multimedia Subsystem(IMS) has been introduced in 3GPP release 5 for the provision of multimedia services. The Gateway terminates the GPRS Bearer to carry IMS signaling and traffic. It communicates with Policy Decision Function(PDF) over the Go interface and acts as a Policy Enforcement Point(PEP) to enforce QoS per media flows using COPS protocol. This table represents various parameters required to support IMS. This table is deprecated as IMS is not supported from GGSN 5.0 release onwards.')
cgprsAccPtImsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsConfigEntry"))
cgprsAccPtImsConfigEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtImsConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtImsConfigEntry.setDescription('An entry in cgprsAccPtImsConfigTable')
cgprsAccPtImsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1, 1, 1), Bits().clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("exclusive", 2), ("transformPrimary", 3))).clone(namedValues=NamedValues(("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtImsEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtImsEnable.setDescription("This object indicates whether IMS traffic, both signaling and data, is allowed on this APN. When set to disable - IMS traffic is not allowed. enable - IMS traffic is allowed. exclusive - Only IMS traffic is allowed, non-IMS traffic will be rejected. transformPrimary - non IMS traffic will be allowed but all the rules applicable to IMS traffic will also apply, for example. ACL's. The options 'exclusive' and 'transformPrimary' are mutually exclusive and can be set only when IMS is enabled, i.e., when 'enable' is set.")
cgprsAccPtPCscfGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtPCscfGroupName.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtPCscfGroupName.setDescription('This object represents the Proxy-CSCF server group that will be used by this APN. Proxy-CSCF server group contains list of Proxy-CSCF addresses which will be provided to MS(UE) in response to a PDP contexts for which P-CSCF address request field is set in PCO.')
cgprsAccPtImsSigAccGroupIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1, 1, 3), AccessControlListOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtImsSigAccGroupIn.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtImsSigAccGroupIn.setDescription('This object represents the access list that will be applied to all the IMS signaling PDP context received by this APN from the PDN for forwarding towards a MS. An IMS signaling PDP context will have IMS signaling flag set in the PCO field.')
cgprsAccPtImsSigAccGroupOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1, 1, 4), AccessControlListOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtImsSigAccGroupOut.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtImsSigAccGroupOut.setDescription('This object represents the access list that will be applied to all the IMS signaling PDP context received by this APN from a MS for forwarding towards PDN. An IMS signaling PDP context will have IMS signaling flag set in the PCO field.')
cgprsAccPtRejNonImsPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 5, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRejNonImsPdp.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtRejNonImsPdp.setDescription("This object represents the action to be taken on a non IMS PDP context, when cgprsAccPtImsEnable is set to 'true' on this APN. When this object is set to 'true', respective PDP context activation will be rejected. When set to 'false', PDP activation will be based on the QoS negotiation.")
cgprsAccPtChargingParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6))
cgprsAccPtChgProfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6, 1), )
if mibBuilder.loadTexts: cgprsAccPtChgProfTable.setReference('3GPP TS 32.215 V5.2.0 Charging data description for the Packet Switched domain(Release 4).')
if mibBuilder.loadTexts: cgprsAccPtChgProfTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChgProfTable.setDescription('Charging characteristics is a parameter that allows the operator to apply different charging methods on a per PDP or Bearer basis. Each charging profile is associated with an index, set of charging parameters like subscriber category, volume limit trigger, etc., details of the same is outside the scope of the MIB and are defined in CISCO-GPRS-CHARGING-MIB. Charging characteristics can be received from MME or SGSN as an Information Element in the create PDP/Bearer request or defaults can be configured at the Gateway and/or APN level. This table represents the charging profiles that can be applied to different type of mobile subscribers on an APN. The Gateway level configurations are dealt in CISCO-GPRS-CHARGING-MIB.')
cgprsAccPtChgProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIndex"), (0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsType"))
if mibBuilder.loadTexts: cgprsAccPtChgProfEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChgProfEntry.setDescription('An entry in cgprsAccPtChgProfTable.')
cgprsAccPtMsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("home", 2), ("roaming", 3), ("roamingTrusted", 4), ("visiting", 5), ("visitingTrusted", 6))))
if mibBuilder.loadTexts: cgprsAccPtMsType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsType.setDescription('This object represents the type of MS to which the charging profile selected by cgprsAccPtChgProfile is applied on this APN. Different types of MS - A roaming MS belongs to a MME/SGSN of a different PLMN. A visitor MS is one whose IMSI value belongs to a different PLMN. A home MS is neither roamer nor visitor, i.e., IMSI and MME/SGSN corresponds to same PLMN. A roamer/visitor is said to be Trusted/Friendly if the different PLMN is a trusted/friendly PLMN.')
cgprsAccPtChgProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtChgProfile.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChgProfile.setDescription('This object represents the charging profile number to be applied to MS denoted by cgprsAccPtMsType on this APN. Details of charging profile parameters are outside the scope of this MIB and are covered by CISCO-GPRS-CHARGING-MIB. This object is mandatory while creating a row. The current valid values are 1 to 255.')
cgprsAccPtChgProfOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtChgProfOverride.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChgProfOverride.setDescription("This object specifies whether charging characteristics value supplied by MME or SGSN will be ignored and the values supplied in this table are used. When this object is set to 'true', the value supplied by MME or SGSN will be ignored.")
cgprsAccPtChgProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtChgProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChgProfRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'.")
cgprsAccPtCacConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 7))
cgprsAccPtCacTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 7, 1), )
if mibBuilder.loadTexts: cgprsAccPtCacTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCacTable.setDescription('Call Admission Control(CAC) on the Gateway ensures that required network resources are available for real-time data traffic, such as voice, video, etc., and to support establishment and modification of the QoS parameters by signaling and negotiating during PDP or Bearer context activation procedure and modification procedure. CAC performs this by examining various QoS parameters like traffic class, maximum bit rate and guaranteed bit rate for both uplink and downlink received from the MME or SGSN with the local configured parameters or policy received from Policy Decision Function(PDF). This table represents various parameters required to support CAC.')
cgprsAccPtCacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 7, 1, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacEntry"))
cgprsAccPtCacEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtCacEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCacEntry.setDescription('An entry in cgprsAccPtCacTable.')
cgprsAccPtCacPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 7, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtCacPolicyName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCacPolicyName.setDescription("This object represents the local policy name that will be used by CAC for the PDP's or Bearer's pertaining to this APN. Details of QoS parameters pertaining to a CAC policy are out of scope of this MIB and are covered in CISCO-GGSN-QOS-MIB. A zero-length string denotes that no policy is configured.")
cgprsAccPtCacUpStrBandWidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 7, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtCacUpStrBandWidthPool.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCacUpStrBandWidthPool.setDescription('A Bandwidth pool is a user defined pool with bandwidth pre-allocation details like amount of available bandwidth, percent of bandwidth available to a specific traffic class. CAC uses this information during PDP or Bearer context activation and modification procedures. This object represents the name of the bandwidth pool used for upstream traffic. Configuration of the bandwidth pool is covered in CISCO-GGSN-QOS-MIB. A zero-length string denotes that no policy is configured.')
cgprsAccPtCacDnStrBandWidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 7, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtCacDnStrBandWidthPool.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCacDnStrBandWidthPool.setDescription('This object represents the name of the bandwidth pool used for downstream traffic. Configuration of the bandwidth pool is covered in CISCO-GGSN-QOS-MIB. A zero-length string denotes that no policy is configured.')
cgprsAccPtRouteProbeConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8))
cgprsAccPtRouteProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1), )
if mibBuilder.loadTexts: cgprsAccPtRouteProbeTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRouteProbeTable.setDescription('Route probe feature enables the Gateway to send out a route probe packet to a configured destination after a successful PDP or Bearer activation procedure. The source IP address of the packet would be the IP address of the PDP or Bearer context. This table represents various parameters set in the route probe packet. At this point, UDP packets will be sent, a new column will be added to represent the protocol when the support is extended to other protocols.')
cgprsAccPtRouteProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeEntry"))
cgprsAccPtRouteProbeEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtRouteProbeEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRouteProbeEntry.setDescription('An entry in cgprsAccPtRouteProbeTable.')
cgprsAccPtRpDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRpDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRpDestAddrType.setDescription('This object indicates the type of Internet address by which cgprsAccPtRpDestAddr is reachable.')
cgprsAccPtRpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRpDestAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRpDestAddr.setDescription('This object specifies the destination IP address to which the route probe packet needs to be sent.')
cgprsAccPtRpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("icmp", 2))).clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRpProtocol.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRpProtocol.setDescription('This objects specifies the protocol type of route probe packet. This object can be set only after cgprsAccPtRpDestAddr is being set.')
cgprsAccPtRpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1, 1, 4), InetPortNumber().clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRpDestPort.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRpDestPort.setDescription("This object specifies the destination port number of the route probe packet when cgprsAccPtRpProtocol is set to 'udp'. This object can be set only after cgprsAccPtRpDestAddr is being set.")
cgprsAccPtRpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 8, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtRpTtl.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRpTtl.setDescription('This object specifies the TTL value set in the route probe packet. This object can be set only after cgprsAccPtRpDestAddr is being set.')
cgprsAccPtIpv6Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9))
cgprsAccPtIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1), )
if mibBuilder.loadTexts: cgprsAccPtIpv6Table.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6Table.setDescription('The Gateway supports IPv6 PDP or Bearer type and its user traffic. It will provide the IPv6 prefix and interface identifier to the MS; generate IPv6 PDP or Bearer address in the appropriate charging records and AAA accounting record. This table represents various parameters required to support IPv6 PDP or Bearer under APN.')
cgprsAccPtIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Entry"))
cgprsAccPtIpv6Entry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6Entry.setDescription('An entry in cgprsAccPtIpv6Table. The agent can create/destroy/modify a profile as a result of actions from the local console. The table objects can be modified, when the RowStatus is active. The entries in this table are stored in NVRAM when the agent writes the configuration to memory before restart.')
cgprsAccPtIpv6BaseVTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6BaseVTemplate.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6BaseVTemplate.setDescription("This object specifies the base virtual template for an APN. To create a sub-interface for each PDP or Bearer, a base virtual-template needs to be configured so that virtual-access interface can be cloned from it. Many APN can share one base virtual-template. But one APN can only use one base virtual-template. This object must be set to appropriate value for IPv6 APN i.e., when the object cgprsAccPtIpv6Enable or cgprsAccPtIpv6Exclusive is set to 'true'.")
cgprsAccPtIpv6DnsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6DnsAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6DnsAddrType.setDescription('This object specifies the type of cgprsAccPtIpv6DnsPriAddress and cgprsAccPtIpv6DnsSecAddress. DNS addresses to be sent to the MS can come from DHCP server or RADIUS server based on IP address allocation scheme chosen by cgprsAccPtIpv6AddrPool. The IP address configured to cgprsAccPtIpv6DnsPriAddress and cgprsAccPtIpv6DnsSecAddress will be sent to MS only when - DHCP/RADIUS servers does not return any DNS address. - local address pool is used for IP address allocation for MS.')
cgprsAccPtIpv6DnsPriAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6DnsPriAddress.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6DnsPriAddress.setDescription('This object specifies the IPv6 address of the primary DNS server that will be sent to MS.')
cgprsAccPtIpv6DnsSecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6DnsSecAddress.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6DnsSecAddress.setDescription('This object specifies the IPv6 address of the secondary DNS server that will be sent to MS. This object can be configured only after configuring the primary DNS address(cgprsAccPtIpv6DnsPriAddress).')
cgprsAccPtIpv6Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6Enable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6Enable.setDescription('This object specifies whether the APN supports IPv6 PDP or Bearer. The Gateway supports dual stack APN. Both IPv6 and IPv4 PDP or Bearer can be created for the same APN.')
cgprsAccPtIpv6Exclusive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6Exclusive.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6Exclusive.setDescription('This object specifies whether the APN supports only IPv6 PDPs or Bearers.')
cgprsAccPtIpv6AccessGroupDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 7), AccessControlListName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6AccessGroupDown.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6AccessGroupDown.setDescription('This object specifies the name of the access list applied to all the traffic received by this APN from the PDN, for forwarding towards a MS.')
cgprsAccPtIpv6AccessGroupUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 8), AccessControlListName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6AccessGroupUp.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6AccessGroupUp.setDescription('This object specifies the name of the access list applied to all the traffic received by this APN from a MS, for forwarding towards PDN.')
cgprsAccPtIpv6AddrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("global", 1), ("dhcp", 2), ("disable", 3), ("local", 4), ("radius", 5))).clone('global')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6AddrPool.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6AddrPool.setDescription("This object specifies a dynamic address allocation method followed by this access point. - 'global', which indicates that no method is defined specifically to this access point and the DHCP or radius server configured for this Gateway under AAA configurations will be used to allocation a dynamic IPv6 address to the user. - 'dhcp', which indicates that the DHCP server will be used. - 'radius', which indicates that the radius server will be used. - 'disable', which indicates that dynamic address allocation is disabled. - 'local', indicates that local address pool configured on the Gateway is going to be used. cgprsAccPtIpv6AddrLocalPoolName denotes the name of the corresponding address pool.")
cgprsAccPtIpv6AddrLocalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6AddrLocalPoolName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6AddrLocalPoolName.setDescription("This object specifies the name of the local address pool used when cgprsAccPtIpv6AddrPool is set to 'local'.")
cgprsAccPtIpv6Redirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("all", 1), ("intermobile", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6Redirect.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6Redirect.setDescription("This object specifies the traffic redirection in an APN. - 'none', indicates that, traffic will not be redirected i.e., the traffic will get switched through the Gateway without going through any Gi interface. - 'intermobile', when this redirection is active on an APN, before downstream packets exit the Gateway, they are screened to see if they come from other GTP tunnels. If so, packets won't be GTP-tunneled downstream, but will get redirected to the device specified by the object cgprsAccPtIpv6RedirectAddr. - 'all', when this redirection is active on an APN, redirect all packets to a specified destination, given by the object cgprsAccPtIpv6RedirectAddr, regardless whether the destination address belongs to a MS on the same Gateway or not.")
cgprsAccPtIpv6RedirectAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 12), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6RedirectAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6RedirectAddrType.setDescription('This object specifies the type of cgprsAccPtIpv6RedirectAddr.')
cgprsAccPtIpv6RedirectAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 13), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6RedirectAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6RedirectAddr.setDescription('This object specifies the Internet address of the device to which traffic will be re-directed.')
cgprsAccPtIpv6SecurityVerifySrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6SecurityVerifySrc.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6SecurityVerifySrc.setDescription("When this object is set to 'true', the Gateway will check the upstream TPDU source address against the address previously assigned to this user. If the addresses are different, the TPDU is dropped. This check will enable the Gateway to restrict the users with fake identity. When the object is set to 'false', the Gateway will not perform any checking on the upstream TPDU for the source address.")
cgprsAccPtIpv6SecurityVerifyDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtIpv6SecurityVerifyDst.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6SecurityVerifyDst.setDescription("When this object is set to 'true', the Gateway will check the upstream TPDU destination address against the range of IP addresses reserved for PLMN devices. If there is a match, the TPDU is dropped. This check would enable the Gateway to protect the GPRS network from some hacker who may try to flood the Gateway and PLMN nodes with intense data traffic. When the object is set to 'false', the Gateway will not perform any checking on the upstream TPDU for the destination address.")
cgprsAccPtIpv6AddrAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6AddrAllocations.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6AddrAllocations.setDescription('This object indicates the total number of IPv6 addresses currently allocated to user.')
cgprsAccPtDhcpv6ProxClientIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 17), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxClientIntf.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxClientIntf.setDescription('The object indicates the interface index, of the interface which is to be used for DHCPv6 request multicasting.')
cgprsAccptDhcpv6RapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccptDhcpv6RapidCommit.setStatus('current')
if mibBuilder.loadTexts: cgprsAccptDhcpv6RapidCommit.setDescription('This object indicates that whether DHCPv6 rapid-commit feature is enabled for this APN.')
cgprsAccptDhcpv6PoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 9, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccptDhcpv6PoolName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccptDhcpv6PoolName.setDescription('This object represents the IPV6 DHCP pool-name configured for this APN.')
cgprsAccPtCsgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 10), )
if mibBuilder.loadTexts: cgprsAccPtCsgGroupTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCsgGroupTable.setDescription('This table contains the list of CSG Groups configured on this APN.')
cgprsAccPtCsgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 10, 1), ).setIndexNames((0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIndex"), (0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCsgGroupName"))
if mibBuilder.loadTexts: cgprsAccPtCsgGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCsgGroupEntry.setDescription('An Entry contains the CSG Group name configured under the access point entry with index cgprsAccPtIndex. The agent can create/destroy a CSG group under access point.')
cgprsAccPtCsgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 10, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cgprsAccPtCsgGroupName.setReference('cGgsnSACsgGroupName is defined in CISCO-GGSN-SERVICE-AWARE-MIB.')
if mibBuilder.loadTexts: cgprsAccPtCsgGroupName.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCsgGroupName.setDescription('This object specifies CSG Group name to use to communicate with the CSG server in an access point configuration. The value must be same as an entry in cGgsnSACsgTable identified by cGgsnSACsgGroupName.')
cgprsAccPtCsgGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsAccPtCsgGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCsgGroupRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. This object must be set to 'creatAndGo' to create an entry and set to 'destroy' to delete an entry. The value in any column may be modified any time even the value of this entry rowStatus object is 'active'.")
cgprsAccPtCfgNotifHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 1), )
if mibBuilder.loadTexts: cgprsAccPtCfgNotifHistTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifHistTable.setDescription('This table contains a history of access point configuration change notifications generated by the agent for changes in the access point configuration. The object cgprsAccPtCfgNotifHistMax specifies the maximum number of entries stored in this table. When the table is full, the oldest entries are discarded to make space for new entries.')
cgprsAccPtCfgNotifHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifIndex"))
if mibBuilder.loadTexts: cgprsAccPtCfgNotifHistEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifHistEntry.setDescription("A description of a configuration change in the cgprsAccPtTable. A configuration change is said to occur if one of the following happens: - An access point has been created. In this case the object cgprsAccPtCfgNotifAccPtIndex is set to the index of the access point being created and cgprsAccPtCfgNotifReason is set to 'creation'. - An access point has been deleted. In this case the object cgprsAccPtCfgNotifAccPtIndex is set to the index of the access point being deleted and cgprsAccPtCfgNotifReason is set to 'deletion'. - The configuration of an access point has changed. In this case the object cgprsAccPtCfgNotifAccPtIndex is set to the index of the access point being changed and cgprsAccPtCfgNotifReason is set to 'modification'. The configuration change of an access point is said to occur if any of the configurable attributes are changed.")
cgprsAccPtCfgNotifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgprsAccPtCfgNotifIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifIndex.setDescription('An arbitrary non-zero integer value uniquely identifying each notification previously sent by the GPRS. This value increases monotonically with each notification sent by the Gateway. When it reaches the maximum value, it wraps to 1.')
cgprsAccPtCfgNotifAccPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtCfgNotifAccPtIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifAccPtIndex.setDescription('This object specifies the access point which has been created, changed or modified.')
cgprsAccPtCfgNotifReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modification", 1), ("creation", 2), ("deletion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtCfgNotifReason.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifReason.setDescription('This object describes the reason of the notification.')
cgprsAccPtCfgNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsAccPtCfgNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifEnable.setDescription('This object controls whether the access point notifications, cgprsAccPtMIBNotifications, are generated. Note that entries in the cgprsAccPtCfgNotifHistTable are generated irrespectively to this object.')
cgprsAccPtCfgNotifHistMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsAccPtCfgNotifHistMax.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifHistMax.setDescription('The maximum size of the event history table, cgprsAccPtCfgNotifHistTable. When the table is full, the oldest entries are removed to make space for new entries.')
cgprsAccPtCfgNotifLatestIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtCfgNotifLatestIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifLatestIndex.setDescription('The value of cgprsAccPtCfgNotifIndex for the most recently created entry in cgprsAccPtCfgNotifHistTable.')
cgprsAccPtStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1), )
if mibBuilder.loadTexts: cgprsAccPtStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsTable.setDescription('This table contains the performance statistics of each APN on this Gateway.')
cgprsAccPtStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsEntry"))
cgprsAccPtStatisticsEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsEntry.setDescription('Entry for each APN in statistics table.')
cgprsAccPtMsActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtMsActivatedPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.1.')
if mibBuilder.loadTexts: cgprsAccPtMsActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsActivatedPdps.setDescription('This object indicates the total number of PDP or Bearer context activation procedures initiated by any MS on this APN. Trigger Condition: This counter is triggered by create PDP or Bearer request message.')
cgprsAccPtSuccMsActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccMsActivatedPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.2.')
if mibBuilder.loadTexts: cgprsAccPtSuccMsActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccMsActivatedPdps.setDescription('This object indicates the total number of successfully completed PDP or Bearer context activation procedures initiated by MS on this APN. Trigger Condition: This counter is triggered by create PDP or Bearer request message.')
cgprsAccPtMsActivatedDynPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtMsActivatedDynPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.3.')
if mibBuilder.loadTexts: cgprsAccPtMsActivatedDynPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsActivatedDynPdps.setDescription('This object indicates the total number of dynamic PDP or Bearer context activation procedures initiated by the MS on this APN. When a MS requests dynamic PDP or Bearer address from the PLMN, a dynamic PDP or Bearer context activation procedure is initiated. Trigger Condition: This counter is triggered by a request message to create a PDP or Bearer context.')
cgprsAccPtSuccMsActivatedDynPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccMsActivatedDynPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.4.')
if mibBuilder.loadTexts: cgprsAccPtSuccMsActivatedDynPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccMsActivatedDynPdps.setDescription('This object indicates the total number of successfully completed dynamic PDP or Bearer context activation procedures initiated by MS on this APN. Trigger Condition: This counter is triggered by a request message to create a PDP or Bearer context.')
cgprsAccPtMsDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtMsDeactivatedPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.5.')
if mibBuilder.loadTexts: cgprsAccPtMsDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsDeactivatedPdps.setDescription('This object indicates the total number of PDP or Bearer context deactivation procedures initiated by the MS on this APN. Trigger Condition: This counter is triggered by a request message to delete PDP or Bearer context.')
cgprsAccPtSuccMsDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccMsDeactivatedPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.6.')
if mibBuilder.loadTexts: cgprsAccPtSuccMsDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccMsDeactivatedPdps.setDescription('This object indicates the total number of successfully completed PDP or Bearer context deactivation procedures initiated by the MS. Trigger Condition: This counter is triggered by a request message to delete PDP or Bearer context.')
cgprsAccPtNetworkInitPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtNetworkInitPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtNetworkInitPdps.setDescription('This object indicates the total number of network initiated PDP or Bearer context activation procedures. Trigger Condition: This counter is triggered by a request message to create PDP or Bearer context.')
cgprsAccPtSuccNetworkInitPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitPdps.setDescription('This object indicates the total number of successfully completed network initiated PDP or Bearer context activation procedures. Trigger Condition: This counter is triggered by a request message to create PDP or Bearer context.')
cgprsAccPtGgsnDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtGgsnDeactivatedPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.7.')
if mibBuilder.loadTexts: cgprsAccPtGgsnDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGgsnDeactivatedPdps.setDescription('This object indicates the total number of PDP context deactivation procedures initiated by the Gateway. Trigger Condition: This counter is triggered by delete PDP request message.')
cgprsAccPtSuccGgsDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccGgsDeactivatedPdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.8.')
if mibBuilder.loadTexts: cgprsAccPtSuccGgsDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccGgsDeactivatedPdps.setDescription('This object indicates the total number of successfully completed PDP context deactivation procedures initiated by the Gateway. Trigger Condition: This counter is triggered by delete PDP request message.')
cgprsAccPtActivePdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtActivePdps.setReference('GSM 12.04: Digital cellular telecommunications system (Phase 2+); Performance data measurements, Section: B.9.1.9.')
if mibBuilder.loadTexts: cgprsAccPtActivePdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtActivePdps.setDescription('This object indicates the current number of active PDP or Bearer contexts on this APN. Trigger Condition: This counter is incremented/ decremented by a request message to create/delete PDP or Bearer context respectively.')
cgprsAccPtUpstreamTrafficVol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtUpstreamTrafficVol.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtUpstreamTrafficVol.setDescription('This object indicates the total payload volume in upstream traffic. Data flow from MS to PDN is considered to be upstream traffic. This object is deprecated by cgprsAccPtRevUpstreamTrafficVol.')
cgprsAccPtDownstreamTrafficVol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 13), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDownstreamTrafficVol.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtDownstreamTrafficVol.setDescription('This object indicates the total payload volume in downstream traffic. Data flow from PDN to MS is considered as downstream traffic. This object is deprecated by cgprsAccPtRevDownstrTrafficVol.')
cgprsAccPtSourceAddrViolTpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSourceAddrViolTpdus.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSourceAddrViolTpdus.setDescription("This object indicates the total number of upstream TPDU's that have been dropped due to source address violation as specified by cgprsAccPtVerifyUpStrTpduSrcAddr.")
cgprsAccPtDestAddrViolTpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDestAddrViolTpdus.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDestAddrViolTpdus.setDescription("This object indicates the total number of upstream TPDU's that have been dropped due to destination address violation as specified by cgprsAccPtVerifyUpStrTpduDstAddr.")
cgprsAccPtRedirInterMobilTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtRedirInterMobilTraffic.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRedirInterMobilTraffic.setDescription('This object represents the total number of packets, pertaining to inter mobile communication, that have been redirected to device specified by cgprsAccPtRedirInterMobilAddr.')
cgprsAccPtRevUpstreamTrafficVol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 17), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtRevUpstreamTrafficVol.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRevUpstreamTrafficVol.setDescription('This object indicates the total payload volume in upstream traffic. Data flow from MS to PDN is considered to be upstream traffic. Trigger Condition: This counter is triggered when upstream traffic is being routed to PDN.')
cgprsAccPtRevDownstrTrafficVol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 18), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtRevDownstrTrafficVol.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRevDownstrTrafficVol.setDescription('This object indicates the total payload volume in downstream traffic. Data flow from PDN to MS is considered as downstream traffic. Trigger Condition: This counter is triggered when downstream traffic is being routed to PDN.')
cgprsAccPtUpstreamPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtUpstreamPacketCount.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtUpstreamPacketCount.setDescription('This object represents the total number of upstream packets sent on this APN. Data flow from MS to PDN is considered to be upstream traffic. Trigger Condition: This counter is triggered when upstream traffic is being routed to PDN.')
cgprsAccPtDownstreamPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDownstreamPacketCount.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDownstreamPacketCount.setDescription('This object represents the total number of downstream packets sent on this APN. Data flow from PDN to MS is considered to be downstream traffic. Trigger Condition: This counter is triggered when downstream traffic is being routed to PDN.')
cgprsAccPtDhcpAddrRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpAddrRequests.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpAddrRequests.setDescription('This object represents the total number of DHCP address request sent by the Gateway on this APN. Trigger Condition: This counter is triggered by create PDP or Bearer request message.')
cgprsAccPtSuccDhcpAddrRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccDhcpAddrRequests.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccDhcpAddrRequests.setDescription('This object represents the total number of successful DHCP address request sent by the Gateway on this APN. Trigger Condition: This counter is triggered by create PDP or Bearer request message.')
cgprsAccPtDhcpAddrReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpAddrReleases.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpAddrReleases.setDescription('This object represents the total number of DHCP address release request sent by the Gateway on this APN. Trigger Condition: This counter is triggered by delete PDP or Bearer request message.')
cgprsAccPtIpv6MsActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6MsActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6MsActivatedPdps.setDescription('This object indicates the total number of IPv6 PDP or Bearer context activation procedures initiated by any MS on this APN. Trigger Condition: This counter is triggered by a request message to create PDP or Bearer context.')
cgprsAccPtIpv6MsSuccActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6MsSuccActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6MsSuccActivatedPdps.setDescription('This object indicates the total number of successfully completed IPv6 PDP or Bearer context activation procedures initiated by MS on this APN. Trigger Condition: This counter is triggered by create PDP or Bearer response message sent by the Gateway.')
cgprsAccPtIpv6NetworkInitDeactPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6NetworkInitDeactPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6NetworkInitDeactPdps.setDescription('This object indicates the total number of IPv6 PDP or Bearer context deactivation procedures initiated by network. Trigger Condition: This counter is triggered by delete PDP or Bearer request message by network.')
cgprsAccPtIpv6NetworkInitDeactSuccPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6NetworkInitDeactSuccPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6NetworkInitDeactSuccPdps.setDescription('This object indicates the total number of successfully completed IPv6 PDP or Bearer context deactivation procedures initiated by the network on this APN. Trigger Condition: This counter is triggered by delete PDP or Bearer response message by network.')
cgprsAccPtIpv6MsActivatedDynPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6MsActivatedDynPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6MsActivatedDynPdps.setDescription('This object indicates the total number of dynamic IPv6 PDP or Bearer context activation procedures initiated by the MS on this APN. When a MS requests dynamic PDP or Bearer address from the PLMN, a dynamic PDP or Bearer context activation procedure is initiated. Trigger Condition: This counter is triggered by create PDP or Bearer request message, received by Gateway from an MS.')
cgprsAccPtIpv6MsSuccActivatedDynPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6MsSuccActivatedDynPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6MsSuccActivatedDynPdps.setDescription('This object indicates the total number of successfully completed dynamic IPv6 PDP or Bearer context activation procedures initiated by MS on this APN. Trigger Condition: This counter is triggered by create PDP or Bearer response message.')
cgprsAccPtIpv6MsDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6MsDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6MsDeactivatedPdps.setDescription('This object indicates the total number of IPv6 PDP or Bearer context deactivation procedures initiated by the MS on this APN. Trigger Condition: This counter is triggered by delete PDP or Bearer request message.')
cgprsAccPtIpv6MsSuccDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6MsSuccDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6MsSuccDeactivatedPdps.setDescription('This object indicates the total number of successfully completed IPv6 PDP or Bearer context deactivation procedures initiated by the MS on this APN. Trigger Condition: This counter is triggered by delete PDP or Bearer context response message.')
cgprsAccPtIpv6GgsnDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6GgsnDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6GgsnDeactivatedPdps.setDescription('This object indicates the total number of IPv6 PDP context deactivation procedures initiated by the Gateway on this APN. Trigger Condition: This counter is triggered by delete PDP request message, sent by the Gateway to a MME or SGSN.')
cgprsAccPtIpv6GgsnSuccDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6GgsnSuccDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6GgsnSuccDeactivatedPdps.setDescription('This object indicates the total number of successfully completed IPv6 PDP context deactivation procedures initiated by the Gateway on this APN. Trigger Condition: This counter is triggered by delete PDP response message, received by the Gateway from a MME or SGSN.')
cgprsAccPtIpv6UpstreamTrafficVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 34), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6UpstreamTrafficVolume.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6UpstreamTrafficVolume.setDescription('This object indicates the total payload volume in upstream traffic sent on this APN. Data flow from MS to PDN is considered to be upstream traffic. Trigger Condition: This counter is triggered when upstream traffic is being routed to PDN.')
cgprsAccPtIpv6DownstreamTrafficVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 35), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6DownstreamTrafficVolume.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6DownstreamTrafficVolume.setDescription('This object indicates the total payload volume in downstream traffic sent on this APN. Data flow from PDN to MS is considered as downstream traffic. Trigger Condition: This counter is triggered when downstream traffic is being routed to PDN.')
cgprsAccPtIpv6UpstreamPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 36), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6UpstreamPackets.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6UpstreamPackets.setDescription('This object indicates the total number of upstream packets sent on this APN. Data flow from MS to PDN is considered to be upstream traffic. Trigger Condition: This counter is triggered when upstream traffic is being routed to PDN.')
cgprsAccPtIpv6DownstreamPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 37), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv6DownstreamPackets.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6DownstreamPackets.setDescription('This object represents the total number of downstream packets sent on this APN. Data flow from PDN to MS is considered to be downstream traffic. Trigger Condition: This counter is triggered when downstream traffic is being routed to PDN.')
cgprsAccPtPdpUpdateReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 38), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtPdpUpdateReqSent.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPdpUpdateReqSent.setDescription('This object represents the total number of PDP or Bearer context update requests sent on this APN. Trigger Condition: This counter is triggered when a PDP or Bearer context update request is initiated.')
cgprsAccPtSuccPdpUpdateResRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 39), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccPdpUpdateResRcvd.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccPdpUpdateResRcvd.setDescription("This object represents the total number of successful PDP or Bearer context update responses received with a cause value 'Request accepted' for the initiated update requests on this APN. Trigger condition: This counter is triggered when a update response with cause value 'Request accepted' is received on this APN.")
cgprsAccPtCoaRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 40), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtCoaRcvd.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCoaRcvd.setDescription('This object represents the total number of Change of Authorization (COA) messages received on this APN. Trigger condition: This counter is triggered when a COA message is received.')
cgprsAccPtCoaSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 41), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtCoaSuccess.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCoaSuccess.setDescription('This object represents the number of COA messages that were acknowledged by the Gateway with a COA ACK. Trigger condition: This counter is triggered when a COA ACK is sent by the Gateway.')
cgprsAccPtDtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 42), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDtEnabled.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDtEnabled.setDescription('This object represents the number of times Direct tunnel is enabled for the PDP contexts on this APN in Gateway.')
cgprsAccPtTotalBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtTotalBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTotalBearers.setDescription('This object indicates the total number of Bearers in this APN.')
cgprsAccPtTotRmtInitCreateBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtTotRmtInitCreateBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTotRmtInitCreateBearers.setDescription('This object indicates the total number of Bearer creation initiated by MME, SGSN or MS.')
cgprsAccPtSuccRmtInitCreateBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccRmtInitCreateBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccRmtInitCreateBearers.setDescription('This object indicates the total number of successful Bearer creation initiated by MME, SGSN or MS.')
cgprsAccPtNetworkInitDeleteBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtNetworkInitDeleteBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtNetworkInitDeleteBearers.setDescription('This object indicates the total number of Bearer delete initiated by network.')
cgprsAccPtTotRmtInitModifyBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtTotRmtInitModifyBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTotRmtInitModifyBearers.setDescription('This object indicates the total number of Bearer modify initiated by MME or SGSN.')
cgprsAccPtSuccRmtInitModifyBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccRmtInitModifyBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccRmtInitModifyBearers.setDescription('This object indicates the total number of successful Bearer modify initiated by MME or SGSN.')
cgprsAccPtTotNetworkInitUpdateBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtTotNetworkInitUpdateBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTotNetworkInitUpdateBearers.setDescription('This object indicates the total number of Bearer update initiated by network.')
cgprsAccPtSuccNetworkInitUpdateBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitUpdateBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitUpdateBearers.setDescription('This object indicates the total number of successful Bearer update initiated by network.')
cgprsAccPtTotNetworkInitCreateDedBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtTotNetworkInitCreateDedBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTotNetworkInitCreateDedBearers.setDescription('This object indicates the total number of dedicated Bearer creation initiated by network.')
cgprsAccPtSuccNetworkInitCreateDedBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitCreateDedBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitCreateDedBearers.setDescription('This object indicates the total number of successful dedicated Bearer creation initiated by network.')
cgprsAccPtTotNetworkInitCreateIPv6DedBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtTotNetworkInitCreateIPv6DedBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtTotNetworkInitCreateIPv6DedBearers.setDescription('This object indicates the total number of IPv6 dedicated Bearer creation initiated by network.')
cgprsAccPtSuccNetworkInitCreateIPv6DedBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitCreateIPv6DedBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSuccNetworkInitCreateIPv6DedBearers.setDescription('This object indicates the total number of IPv6 dedicated Bearer creation initiated by network.')
cgprsAccPtv4v6MsActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtv4v6MsActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtv4v6MsActivatedPdps.setDescription('This object indicates the total number of IPv4v6 PDP or Bearer context activation procedures initiated by any MS on this APN.')
cgprsAccPtv4v6SuccMsActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtv4v6SuccMsActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtv4v6SuccMsActivatedPdps.setDescription('This object indicates the total number of successfully completed IPv4v6 PDP or Bearer context activation procedures initiated by MS on this APN.')
cgprsAccPtv4v6MsDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtv4v6MsDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtv4v6MsDeactivatedPdps.setDescription('This object indicates the total number of IPv4v6 PDP or Bearer context deactivation procedures initiated by the MS on this APN.')
cgprsAccPtv4v6SuccMsDeactivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtv4v6SuccMsDeactivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtv4v6SuccMsDeactivatedPdps.setDescription('This object indicates the total number of successfully completed IPv4v6 PDP or Bearer context deactivation procedures initiated by the MS on this APN.')
cgprsAccPtv4v6ActDedbearerPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtv4v6ActDedbearerPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtv4v6ActDedbearerPdps.setDescription('This object indicates the total number of IPv4v6, dedicated Bearer activations that were initiated by the PGW on this APN.')
cgprsAccPtv4v6SuccActDedbearerPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtv4v6SuccActDedbearerPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtv4v6SuccActDedbearerPdps.setDescription('This object indicates the total number of IPv4v6 dedicated Bearers that were successfully activated by the PGW.')
cgprsAccPtDhcpProxServDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServDiscover.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServDiscover.setDescription('This object represents the number of DHCP Discover messages received by the Gateway. The UE sends this message upon bootup/lease rebinding timer expiry.')
cgprsAccPtDhcpProxServRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServRequest.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServRequest.setDescription('This object represents the number of DHCP request messages received by the Gateway. The UE may send the DHCP-Request message with Requested-IP-Address option in one of the many following scenarios: UE is rebooting and it has an IPv4-address with unexpired lease. UE is selecting an offer from the DHCP-server. UE is renewing the lease. UE is attempting to rebind the lease.')
cgprsAccPtDhcpProxServDeclines = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServDeclines.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServDeclines.setDescription('This object represents the number of DHCP decline messages received by the Gateway from UE. The UE may send this message when the IP-address it received is found to be already in use by another device.')
cgprsAccPtDhcpProxServRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServRelease.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServRelease.setDescription('This object represents the number DHCP - Release messages received by the Gateway. The User Equipment may send this message when the IPv4-session is terminated.')
cgprsAccPtDhcpProxServOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServOffer.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServOffer.setDescription('This object represents the number of DHCP offer messages sent by the Gateway. The Gateway sends this message on allocating a Requested IP address to the User equipment.')
cgprsAccPtDhcpProxServAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServAcks.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServAcks.setDescription('This object represents the number of DHCP Acknowledge messages sent by the Gateway. The Gateway sends this message to the User equipment in response to a DHCP-Request message.')
cgprsAccPtDhcpProxServNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServNaks.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServNaks.setDescription('This object represents the number of DHCP-Negative-Acknowledge messages sent by the Gateway. The Gateway sends DHCP-Negative acknowledge message to the User Equipment in the following cases: If the DHCP-Request contains an IP-address that is different from the address that PGW sent in the DHCP-Offer. If PGW is unable to allocate the offered IP-address')
cgprsAccPtDhcpProxServInform = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServInform.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServInform.setDescription('This object represents the number of DHCP-Inform message sent by the Gateway. The Gateway shall respond with a DHCP-Acknowledge to the DHCP-Inform message sent by the UE')
cgprsAccPtDhcpProxServUnknowMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServUnknowMsg.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServUnknowMsg.setDescription('This object represents the number of DHCP-Unknown messages received by the Gateway. DHCP-Control messages, with unknown format are specified as DHCP-uknown message.')
cgprsAccPtDhcpProxServRetryDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServRetryDrops.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServRetryDrops.setDescription('This object represents the number of times the Gateway has retried to establish a connection with the Proxy server.')
cgprsAccPtDhcpProxServErrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServErrDrops.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServErrDrops.setDescription('This object represents the number of times a DHCP proxy server control message is dropped by the Gateway due to some error in the message.')
cgprsAccPtActiveBearers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 72), Gauge32()).setUnits('bearers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtActiveBearers.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtActiveBearers.setDescription('This object indicates the current number of active Bearer on this APN.')
cgprsAccPtDhcpProxServTxErrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServTxErrDrops.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServTxErrDrops.setDescription('This object represents the number of times an outgoing DHCP proxy server control message is dropped by the Gateway due to some failure in the Gateway.')
cgprsAccPtDhcpProxServIpAllocErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServIpAllocErr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpProxServIpAllocErr.setDescription('This object represents the number of times an incoming DHCP proxy server control message has been dropped by the Gateway due to IP allocation error in the message.')
cgprsAccPtDedBearerDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDedBearerDeactivations.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDedBearerDeactivations.setDescription('This object represents the total number dedicated bearer deactivation request initiated by the Gateway.')
cgprsAccPtDedBearerQosUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDedBearerQosUpdate.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDedBearerQosUpdate.setDescription('This object represents the total number of dedicated bearer modification request with QoS change initiated by the Gateway.')
cgprsAccPtDedBearerSucQosUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDedBearerSucQosUpdate.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDedBearerSucQosUpdate.setDescription('This object represents the total number of successful dedicated bearer modification request with QoS change initiated by the Gateway.')
cgprsAccPtDedBearerNoQosUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDedBearerNoQosUpdate.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDedBearerNoQosUpdate.setDescription('This object represents the total number of dedicated bearer modification request without QoS change initiated by the Gateway.')
cgprsAccPtDedBearerSucNoQosUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDedBearerSucNoQosUpdate.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDedBearerSucNoQosUpdate.setDescription('This object represents the total number of successful dedicated bearer modification request without QoS change initiated by the Gateway.')
cgprsAccPtIpv4v6MsActivatedDynamicPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv4v6MsActivatedDynamicPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv4v6MsActivatedDynamicPdps.setDescription('This object indicates the total number of IPv4v6 PDP or Bearer context activation procedures initiated by any MS on this APN.')
cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps.setDescription('This object indicates the total number of successfully completed IPv4v6 PDP or Bearer context activation procedures initiated by MS on this APN.')
cgprsAccPtFailMsActivatedPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtFailMsActivatedPdps.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtFailMsActivatedPdps.setDescription('This object indicates the total number of failed PDP or Bearer context activation procedures initiated by MS on this APN.')
cgprsAccPtFailPdpUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtFailPdpUpdate.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtFailPdpUpdate.setDescription('This object represents the total number of failed PDP or Bearer context update for the initiated update requests on this APN.')
cgprsAccPtUpdateRspTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtUpdateRspTimeOut.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtUpdateRspTimeOut.setDescription('This object represents the total number of failed PDP or Bearer context update response not received due to the time out for the initiated update requests on this APN.')
cgprsAccPtDhcpv6ProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2), )
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxyStatsTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxyStatsTable.setDescription('This table contains the DHCPv6 proxy server performance statistics for each APN on this Gateway.')
cgprsAccPtDhcpv6ProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1), )
cgprsAccPtEntry.registerAugmentions(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxyStatsEntry"))
cgprsAccPtDhcpv6ProxyStatsEntry.setIndexNames(*cgprsAccPtEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxyStatsEntry.setDescription('There is an entry in this table for each APN in the Gateway.')
cgprsAccPtDhcpv6ProxInforeqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxInforeqRcvd.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxInforeqRcvd.setDescription("This object represents the total number of DHCPv6 information request message handled by the Gateway's DHCPv6 proxy-client.")
cgprsAccPtDhcpv6ProxInforeqRply = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxInforeqRply.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxInforeqRply.setDescription("This object represents the total number of DHCPv6 response message sent by the Gateway's DHCPv6 proxy-client.")
cgprsAccPtDhcpv6ProxInforeqLocRply = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxInforeqLocRply.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxInforeqLocRply.setDescription("This object represents the total number of times a local response was sent for the DHCPv6 information request received by the Gateway's DHCPv6 proxy-client.")
cgprsAccPtDhcpv6ProxIpAllocSuc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpAllocSuc.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpAllocSuc.setDescription('This object represents the total number of times DHCPv6 IP allocation was successful.')
cgprsAccPtDhcpv6ProxIpAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpAllocFail.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpAllocFail.setDescription('This object represents the total number of times DHCPv6 IP allocation was failed.')
cgprsAccPtDhcpv6ProxIpRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpRelease.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpRelease.setDescription('This object represents the total number of times an allocated DHCPv6 IP was released.')
cgprsAccPtDhcpv6ProxIpRenewFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpRenewFail.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxIpRenewFail.setDescription('This object represents the total number of times an allocated DHCPv6 IP renewal was failed.')
cgprsAccPtDhcpv6ProxUnkwnMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxUnkwnMsg.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxUnkwnMsg.setDescription("This object represents the total number of times an unknown message was handled by the Gateway's DHCPv6 proxy-client.")
cgprsAccPtDhcpv6ProxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxErrs.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxErrs.setDescription("This object represents the total number of times an error has occurred at the Gateway's DHCPv6 proxy-client.")
cgprsAccPtThruputStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3), )
if mibBuilder.loadTexts: cgprsAccPtThruputStatsTable.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtThruputStatsTable.setDescription('This table contains the throughput statistics of each APN on this Gateway.')
cgprsAccPtThruputStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIndex"), (0, "CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruputInterval"))
if mibBuilder.loadTexts: cgprsAccPtThruputStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtThruputStatsEntry.setDescription('An entry in this table.')
cgprsAccPtThruputInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('minutes')
if mibBuilder.loadTexts: cgprsAccPtThruputInterval.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtThruputInterval.setDescription('This object represents the time interval at which the statistics are sampled. Interval configuration is out of the scope of the MIB and are covered in CISCO-GGSN-MIB.')
cgprsAccPtThruPutLastCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtThruPutLastCollected.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtThruPutLastCollected.setDescription('This object represents the delta value between the time when this data is collected and the time it is been retrieved.')
cgprsAccPtUpstrByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1, 3), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtUpstrByteCount.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtUpstrByteCount.setDescription('This object represents the total payload volume in upstream traffic sent on this APN in the last sampling period specified by cgprsAccPtThruputInterval.')
cgprsAccPtDownstrByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1, 4), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDownstrByteCount.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDownstrByteCount.setDescription('This object represents the total payload volume in downstream traffic sent on this APN in the last sampling period specified by cgprsAccPtThruputInterval.')
cgprsAccPtUpstrPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1, 5), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtUpstrPktCount.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtUpstrPktCount.setDescription('This object represents the number of upstream packets sent on this APN in the last sampling period specified by cgprsAccPtThruputInterval.')
cgprsAccPtDownstrPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 3, 3, 1, 6), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsAccPtDownstrPktCount.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDownstrPktCount.setDescription('This object represents the number of downstream packets sent on this APN in the last sampling period specified by cgprsAccPtThruputInterval.')
cgprsAccPtMsAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 4, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgprsAccPtMsAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsAddrType.setDescription('This object specifies the type of Internet address denoted by cgprsAccPtMsAllocAddr, cgprsAccPtMsNewAddr and cgprsAccPtMsTpduDstAddr.')
cgprsAccPtMsAllocAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 4, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgprsAccPtMsAllocAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsAllocAddr.setDescription('This object specifies the IP address that is assigned to the MS during PDP activation.')
cgprsAccPtMsNewAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 4, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgprsAccPtMsNewAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsNewAddr.setDescription('This object specifies the fake IP address that is used by the MS.')
cgprsAccPtMsTpduDstAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 183, 1, 4, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgprsAccPtMsTpduDstAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMsTpduDstAddr.setDescription('This object specifies the upstream TPDU destination address used by a MS that falls in the reserved range of IP addresses for PLMN devices.')
cgprsAccPtMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 2))
cgprsAccPtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 2, 0))
cgprsAccPtCfgNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 183, 2, 0, 1)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifAccPtIndex"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifReason"))
if mibBuilder.loadTexts: cgprsAccPtCfgNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotif.setDescription('A notification of this type is generated when an entry is generated in the cgprsAccPtCfgNotifHistTable and cgprsAccPtCfgNotifEnable is set to true.')
cgprsAccPtSecSrcViolNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 183, 2, 0, 2)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifAccPtIndex"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsAllocAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsNewAddr"))
if mibBuilder.loadTexts: cgprsAccPtSecSrcViolNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSecSrcViolNotif.setDescription('A notification of this type is generated when security violation as specified by cgprsAccPtVerifyUpStrTpduSrcAddr occurs on an APN.')
cgprsAccPtSecDestViolNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 183, 2, 0, 3)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifAccPtIndex"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsAllocAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsTpduDstAddr"))
if mibBuilder.loadTexts: cgprsAccPtSecDestViolNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtSecDestViolNotif.setDescription('A notification of this type is generated when security violation as specified by cgprsAccPtVerifyUpStrTpduDstAddr occurs on an APN.')
cgprsAccPtMaintenanceNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 183, 2, 0, 4)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifAccPtIndex"))
if mibBuilder.loadTexts: cgprsAccPtMaintenanceNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMaintenanceNotif.setDescription('A notification of this type is generated when APN is placed in maintenance mode which is specified by cgprsAccPtOperationMode.')
cgprsAccPtInServiceNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 183, 2, 0, 5)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifAccPtIndex"))
if mibBuilder.loadTexts: cgprsAccPtInServiceNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtInServiceNotif.setDescription('A notification of this type is generated when APN is placed in in-service mode which is specified by cgprsAccPtOperationMode.')
cgprsAccPtConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 3))
cgprsAccPtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1))
cgprsAccPtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2))
cgprsAccPtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 1)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBCompliance = cgprsAccPtMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtMIBCompliance.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 2)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev1 = cgprsAccPtMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev1.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 3)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev2 = cgprsAccPtMIBComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev2.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is obsoleted by cgprsAccPtMIBComplianceRev3.')
cgprsAccPtMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 4)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev3 = cgprsAccPtMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev3.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is deprecated by cgprsAccPtMIBComplianceRev4.')
cgprsAccPtMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 5)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev4 = cgprsAccPtMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev4.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 6)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev5 = cgprsAccPtMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev5.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 7)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev6 = cgprsAccPtMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev6.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 8)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev7 = cgprsAccPtMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev7.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 9)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev8 = cgprsAccPtMIBComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev8.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is deprecated by cgprsAccPtMIBComplianceRev9.')
cgprsAccPtMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 10)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev9 = cgprsAccPtMIBComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev9.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is deprecated by cgprsAccPtMIBComplianceRev10.')
cgprsAccPtMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 11)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR90Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev10 = cgprsAccPtMIBComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev10.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is deprecated by cgprsAccPtMIBComplianceRev11.')
cgprsAccPtMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 12)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR92Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR90GroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR100Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev11 = cgprsAccPtMIBComplianceRev11.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev11.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is deprecated by cgprsAccPtMIBComplianceRev12.')
cgprsAccPtMIBComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 13)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR92Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR90GroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR100Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6GroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev12 = cgprsAccPtMIBComplianceRev12.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev12.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is deprecated by cgprsAccPtMIBComplianceRev13.')
cgprsAccPtMIBComplianceRev13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 14)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup4"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR92Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR90GroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR100Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev13 = cgprsAccPtMIBComplianceRev13.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev13.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is superceded by cgprsAccPtMIBComplianceRev14.')
cgprsAccPtMIBComplianceRev14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 15)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR92Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR90GroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR100Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup4"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxyStatsGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev14 = cgprsAccPtMIBComplianceRev14.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev14.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB. This is superceded by cgprsAccPtMIBComplianceRev15.')
cgprsAccPtMIBComplianceRev15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 1, 16)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGenServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRouteProbeGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNotifInfoGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBNotifGroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR60Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupRev3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR80GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR92Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR90GroupRev1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMIBR100Group"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup3"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6GroupSup1"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup4"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxyStatsGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtExtMIBGroupSup2"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup5"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtStatisticsGroupSup6"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBComplianceRev15 = cgprsAccPtMIBComplianceRev15.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBComplianceRev15.setDescription('The compliance statements for entities which implement the CISCO-GPRS-ACC-PT-MIB.')
cgprsAccPtMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 1)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRowStatus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMode"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpAddressPool"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDHCPServerPri"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDHCPServerSec"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDHCPGwAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRadiusServerPri"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRadiusServerSec"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListGroupIn"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListGroupOut"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIfIndex"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIfNextHop"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAccessViolation"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSubrRequired"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitiated"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpAddrAllocations"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUsers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIdlePdpPurgeTimer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtBlockMsRoaming"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAnonymousUserName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAnonymousUserPassword"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsIsdnSuppressed"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsIsdnSuppressedValue"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAuthServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAccountServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAccountingEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAggregRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBGroup = cgprsAccPtMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtMIBGroup.setDescription('A collection of objects providing APN configurations.')
cgprsAccPtCfgNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 2)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifAccPtIndex"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifReason"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifHistMax"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotifLatestIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtCfgNotifGroup = cgprsAccPtCfgNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCfgNotifGroup.setDescription('A collection of objects providing GPRS access point configuration change event related information.')
cgprsAccPtStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 3)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGgsnDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccGgsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtActivePdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpstreamTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDownstreamTrafficVol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroup = cgprsAccPtStatisticsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroup.setDescription('A collection of objects providing GPRS access point performance statistics. This is obsoleted by cgprsAccPtStatisticsGroupRev1.')
cgprsAccPtMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 4)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRowStatus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMode"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpAddressPool"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDHCPServerPri"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDHCPServerSec"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDHCPGwAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListGroupIn"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListGroupOut"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAccessViolation"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSubrRequired"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitiated"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpAddrAllocations"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIdlePdpPurgeTimer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtBlockMsRoaming"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAnonymousUserName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAnonymousUserPassword"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsIsdnSuppressed"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsIsdnSuppressedValue"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAuthServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAccountServerGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAccountingEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVrfName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpAddrSpace"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPppRegenEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPppRegenMaxSessions"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPppRegenSetupTime"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAutoAggregation"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAggregRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBGroupRev1 = cgprsAccPtMIBGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBGroupRev1.setDescription('A collection of objects providing APN configurations.')
cgprsAccPtExtMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 5)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListInEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListOutEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGtpRespMesgWaitAcctng"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtExtMIBGroup = cgprsAccPtExtMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtExtMIBGroup.setDescription('A collection of objects providing APN configurations.')
cgprsAccPtMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 6)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBNotifGroup = cgprsAccPtMIBNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBNotifGroup.setDescription('A collection of objects providing GPRS access point notifications.')
cgprsAccPtExtMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 7)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListInEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListOutEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGtpRespMesgWaitAcctng"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsiSuppressed"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyUpStrTpduSrcAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyUpStrTpduDstAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilAddrTyp"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtExtMIBGroupRev1 = cgprsAccPtExtMIBGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsAccPtExtMIBGroupRev1.setDescription('A collection of objects providing APN configurations. This is obsoleted by cgprsAccPtExtMIBGroupRev2.')
cgprsAccPtStatisticsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 8)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGgsnDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccGgsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtActivePdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpstreamTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDownstreamTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSourceAddrViolTpdus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDestAddrViolTpdus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilTraffic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupRev1 = cgprsAccPtStatisticsGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupRev1.setDescription('A collection of objects providing GPRS access point performance statistics. This is deprecated by cgprsAccPtStatisticsGroupRev2.')
cgprsAccPtExtMIBGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 9)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListInEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListOutEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGtpRespMesgWaitAcctng"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyUpStrTpduSrcAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyUpStrTpduDstAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilAddrTyp"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuppressRadiusAttribs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtExtMIBGroupRev2 = cgprsAccPtExtMIBGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtExtMIBGroupRev2.setDescription('A collection of objects providing APN configurations. This is deprecated by cgprsAccPtExtMIBGroupRev3.')
cgprsAccPtExtMIBGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 10)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListInEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIPAccListOutEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGtpRespMesgWaitAcctng"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyUpStrTpduSrcAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyUpStrTpduDstAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilAddrTyp"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuppressRadiusAttribs"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtInterimAccountinEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSetRadiusAttributes"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtOperationMode"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAbsoluteSessionTimer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRadiusAttrNasId"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPdpInServicePolicyName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPdpOutServicePolicyNam"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPppRegenVerifyDomain"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpAddrLocalPoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtExtMIBGroupRev3 = cgprsAccPtExtMIBGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtExtMIBGroupRev3.setDescription('A collection of objects providing APN configurations.')
cgprsAccPtGenServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 11)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDnsServerAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPriDnsServer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSecDnsServer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetbiosServerAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPriNetbiosServer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSecNetbiosServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtGenServerGroup = cgprsAccPtGenServerGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtGenServerGroup.setDescription('A collection of objects providing address of generic server configurations on the APN.')
cgprsAccPtImsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 12)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPCscfGroupName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsSigAccGroupIn"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtImsSigAccGroupOut"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRejNonImsPdp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtImsGroup = cgprsAccPtImsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtImsGroup.setDescription('A collection of objects providing IMS configurations under APN.')
cgprsAccPtChargingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 13)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChgProfile"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChgProfOverride"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChgProfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtChargingGroup = cgprsAccPtChargingGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtChargingGroup.setDescription('A collection of objects providing Charging configurations under APN.')
cgprsAccPtCacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 14)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacPolicyName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacUpStrBandWidthPool"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCacDnStrBandWidthPool"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtCacGroup = cgprsAccPtCacGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtCacGroup.setDescription('A collection of objects providing CAC configurations under APN.')
cgprsAccPtRouteProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 15)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRpDestAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRpDestAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRpProtocol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRpDestPort"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRpTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtRouteProbeGroup = cgprsAccPtRouteProbeGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtRouteProbeGroup.setDescription('A collection of objects providing configurations for route probe feature.')
cgprsAccPtStatisticsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 16)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGgsnDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccGgsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtActivePdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSourceAddrViolTpdus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDestAddrViolTpdus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilTraffic"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRevUpstreamTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRevDownstrTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpstreamPacketCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDownstreamPacketCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpAddrRequests"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccDhcpAddrRequests"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpAddrReleases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupRev2 = cgprsAccPtStatisticsGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupRev2.setDescription('A collection of objects providing GPRS access point performance statistics per name. This is deprecated by cgprsAccPtStatisticsGroupRev3.')
cgprsAccPtThruPutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 17)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtThruPutLastCollected"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpstrByteCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDownstrByteCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpstrPktCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDownstrPktCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtThruPutGroup = cgprsAccPtThruPutGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtThruPutGroup.setDescription('A collection of objects providing throughput statistics per APN.')
cgprsAccPtNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 18)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsAllocAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsNewAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsTpduDstAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtNotifInfoGroup = cgprsAccPtNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtNotifInfoGroup.setDescription('A collection of objects providing notification info on an APN.')
cgprsAccPtMIBNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 19)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCfgNotif"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSecSrcViolNotif"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSecDestViolNotif"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMaintenanceNotif"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtInServiceNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBNotifGroupRev1 = cgprsAccPtMIBNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBNotifGroupRev1.setDescription('A collection of objects providing GPRS access point notifications.')
cgprsAccPtMIBR60Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 20)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtServiceAware"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAdvDownlinkNextHopAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAdvDownlinkNextHopAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR60Group = cgprsAccPtMIBR60Group.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBR60Group.setDescription('A collection of objects added as a part of GGSN R6.0 release.')
cgprsAccPtIpv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 21)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6BaseVTemplate"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6DnsAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6DnsPriAddress"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6DnsSecAddress"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Enable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Exclusive"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6AccessGroupDown"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6AccessGroupUp"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6AddrPool"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6AddrLocalPoolName"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6Redirect"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6RedirectAddrType"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6RedirectAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6SecurityVerifySrc"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6SecurityVerifyDst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtIpv6Group = cgprsAccPtIpv6Group.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6Group.setDescription('A collection of objects providing configurations for IPv6 feature.')
cgprsAccPtStatisticsGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 22)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGgsnDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccGgsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtActivePdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSourceAddrViolTpdus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDestAddrViolTpdus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRedirInterMobilTraffic"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRevUpstreamTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtRevDownstrTrafficVol"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpstreamPacketCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDownstreamPacketCount"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpAddrRequests"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccDhcpAddrRequests"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpAddrReleases"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6MsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6MsSuccActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6NetworkInitDeactPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6NetworkInitDeactSuccPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6MsActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6MsSuccActivatedDynPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6MsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6MsSuccDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6GgsnDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6GgsnSuccDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6UpstreamTrafficVolume"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6DownstreamTrafficVolume"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6UpstreamPackets"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6DownstreamPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupRev3 = cgprsAccPtStatisticsGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupRev3.setDescription('A collection of objects providing GPRS access point performance statistics per name.')
cgprsAccPtPcscfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 23)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfServerGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtPcscfGroup = cgprsAccPtPcscfGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtPcscfGroup.setDescription('A collection of pcscf related objects.')
cgprsAccPtMIBR80Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 24)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGtpUpdateFailDelete"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAccountInterPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR80Group = cgprsAccPtMIBR80Group.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBR80Group.setDescription('A collection of config objects added for GGSN 8.0.')
cgprsAccPtStatisticsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 25)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPdpUpdateReqSent"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccPdpUpdateResRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCoaRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCoaSuccess"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDtEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupSup1 = cgprsAccPtStatisticsGroupSup1.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupSup1.setDescription('A collection of objects providing GPRS access point performance statistics per name. This is deprecated by cgprsAccPtStatisticsGroupSup2.')
cgprsAccPtMIBR80GroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 26)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAaaAccountInterRadius"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR80GroupSup1 = cgprsAccPtMIBR80GroupSup1.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBR80GroupSup1.setDescription('A collection of config objects added for GGSN 8.0.')
cgprsAccPtMIBR90Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 27)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGxEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfLoadBalance"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkBehindMsEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMaxSubnetsBehindMobile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR90Group = cgprsAccPtMIBR90Group.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtMIBR90Group.setDescription('A collection of config objects added for GGSN 9.0. This is deprecated by cgprsAccPtMIBR90GroupRev1.')
cgprsAccPtStatisticsGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 28)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPdpUpdateReqSent"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccPdpUpdateResRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCoaRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCoaSuccess"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDtEnabled"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotalBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotRmtInitCreateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccRmtInitCreateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitDeleteBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotNetworkInitUpdateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitUpdateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotNetworkInitCreateDedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitCreateDedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotRmtInitModifyBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccRmtInitModifyBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotNetworkInitCreateIPv6DedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitCreateIPv6DedBearers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupSup2 = cgprsAccPtStatisticsGroupSup2.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupSup2.setDescription('A collection of objects providing GPRS access point performance statistics per name. This is deprecated by cgprsAccPtStatisticsGroupSup3.')
cgprsAccPtMIBR92Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 29)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingRecordType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR92Group = cgprsAccPtMIBR92Group.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBR92Group.setDescription('A collection of config objects added for GGSN.')
cgprsAccPtMIBR90GroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 30)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtGxEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPcscfLoadBalance"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkBehindMsEnable"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtMaxSubnetsBehindMobile"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtChargingGrp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR90GroupRev1 = cgprsAccPtMIBR90GroupRev1.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBR90GroupRev1.setDescription('A collection of config objects added for GGSN.')
cgprsAccPtMIBR100Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 31)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtAggregCsgGroup"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCsgGroupRowStatus"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpAddrPoolNoRedistribute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtMIBR100Group = cgprsAccPtMIBR100Group.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtMIBR100Group.setDescription('A collection of config objects added for providing the name of the CSG Group and allowing the redistribution of routes from PCOP to the SUP (Supervisor).')
cgprsAccPtStatisticsGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 32)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtPdpUpdateReqSent"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccPdpUpdateResRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCoaRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtCoaSuccess"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDtEnabled"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotalBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotRmtInitCreateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccRmtInitCreateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtNetworkInitDeleteBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotNetworkInitUpdateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitUpdateBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotNetworkInitCreateDedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitCreateDedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotRmtInitModifyBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccRmtInitModifyBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtTotNetworkInitCreateIPv6DedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtSuccNetworkInitCreateIPv6DedBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtv4v6MsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtv4v6SuccMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtv4v6MsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtv4v6SuccMsDeactivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtv4v6ActDedbearerPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtv4v6SuccActDedbearerPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServDiscover"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServRequest"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServDeclines"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServRelease"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServOffer"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServAcks"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServNaks"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServInform"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServUnknowMsg"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServRetryDrops"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServErrDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupSup3 = cgprsAccPtStatisticsGroupSup3.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupSup3.setDescription('A collection of objects providing GPRS access point performance statistics per name.')
cgprsAccPtExtMIBGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 33)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDualAddrEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtExtMIBGroupSup1 = cgprsAccPtExtMIBGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtExtMIBGroupSup1.setDescription('This group supplements cgprsAccPtExtMIBGroupRev3 to provide dual stack APN configurations.')
cgprsAccPtIpv6GroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 34)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv6AddrAllocations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtIpv6GroupSup1 = cgprsAccPtIpv6GroupSup1.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtIpv6GroupSup1.setDescription('This group supplements cgprsAccPtIpv6Group to provide Ipv6 address allocation status.')
cgprsAccPtStatisticsGroupSup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 35)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtActiveBearers"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServTxErrDrops"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpProxServIpAllocErr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDedBearerDeactivations"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDedBearerQosUpdate"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDedBearerSucQosUpdate"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDedBearerNoQosUpdate"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDedBearerSucNoQosUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupSup4 = cgprsAccPtStatisticsGroupSup4.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupSup4.setDescription('A collection of objects providing GPRS access point performance statistics per name.')
cgprsAccPtDhcpv6ProxyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 36)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxInforeqRcvd"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxInforeqRply"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxInforeqLocRply"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxIpAllocSuc"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxIpAllocFail"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxIpRelease"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxIpRenewFail"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxUnkwnMsg"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtDhcpv6ProxyStatsGroup = cgprsAccPtDhcpv6ProxyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtDhcpv6ProxyStatsGroup.setDescription('A collection of objects providing DHCPv6 proxy server performance statistics for each GPRS access point.')
cgprsAccPtExtMIBGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 37)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtVerifyDownlinkAddr"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtDhcpv6ProxClientIntf"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccptDhcpv6RapidCommit"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccptDhcpv6PoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtExtMIBGroupSup2 = cgprsAccPtExtMIBGroupSup2.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtExtMIBGroupSup2.setDescription('This group supplements cgprsAccPtExtMIBGroupRev3 to provide APN configurations.')
cgprsAccPtStatisticsGroupSup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 38)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv4v6MsActivatedDynamicPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupSup5 = cgprsAccPtStatisticsGroupSup5.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupSup5.setDescription('A collection of objects providing GPRS access point performance statistics per name.')
cgprsAccPtStatisticsGroupSup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 183, 3, 2, 39)).setObjects(("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtFailMsActivatedPdps"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtFailPdpUpdate"), ("CISCO-GPRS-ACC-PT-MIB", "cgprsAccPtUpdateRspTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsAccPtStatisticsGroupSup6 = cgprsAccPtStatisticsGroupSup6.setStatus('current')
if mibBuilder.loadTexts: cgprsAccPtStatisticsGroupSup6.setDescription('A collection of objects providing GPRS access point performance statistics per name.')
mibBuilder.exportSymbols("CISCO-GPRS-ACC-PT-MIB", cgprsAccPtChargingParams=cgprsAccPtChargingParams, cgprsAccPtDhcpProxServRetryDrops=cgprsAccPtDhcpProxServRetryDrops, cgprsAccPtStatisticsGroupSup3=cgprsAccPtStatisticsGroupSup3, cgprsAccPtMIBComplianceRev8=cgprsAccPtMIBComplianceRev8, cgprsAccPtTotNetworkInitCreateIPv6DedBearers=cgprsAccPtTotNetworkInitCreateIPv6DedBearers, cgprsAccPtThruputInterval=cgprsAccPtThruputInterval, cgprsAccPtUpstrByteCount=cgprsAccPtUpstrByteCount, cgprsAccPtIpv6MsDeactivatedPdps=cgprsAccPtIpv6MsDeactivatedPdps, cgprsAccPtRpDestAddr=cgprsAccPtRpDestAddr, cgprsAccPtCacGroup=cgprsAccPtCacGroup, cgprsAccPtTable=cgprsAccPtTable, cgprsAccPtPdpUpdateReqSent=cgprsAccPtPdpUpdateReqSent, cgprsAccPtDHCPServerPri=cgprsAccPtDHCPServerPri, cgprsAccPtPcscfGroup=cgprsAccPtPcscfGroup, cgprsAccPtStatisticsGroupRev1=cgprsAccPtStatisticsGroupRev1, cgprsAccPtRpProtocol=cgprsAccPtRpProtocol, cgprsAccPtGenServerConfigs=cgprsAccPtGenServerConfigs, cgprsAccPtVerifyUpStrTpduDstAddr=cgprsAccPtVerifyUpStrTpduDstAddr, cgprsAccPtDhcpProxServDiscover=cgprsAccPtDhcpProxServDiscover, cgprsAccPtDhcpv6ProxClientIntf=cgprsAccPtDhcpv6ProxClientIntf, cgprsAccPtStatisticsGroupSup1=cgprsAccPtStatisticsGroupSup1, cgprsAccPtIpAddressPool=cgprsAccPtIpAddressPool, cgprsAccPtv4v6ActDedbearerPdps=cgprsAccPtv4v6ActDedbearerPdps, cgprsAccPtMIBNotifGroup=cgprsAccPtMIBNotifGroup, cgprsAccPtAggregIpAddr=cgprsAccPtAggregIpAddr, cgprsAccPtAutoAggregation=cgprsAccPtAutoAggregation, cgprsAccPtDedBearerSucNoQosUpdate=cgprsAccPtDedBearerSucNoQosUpdate, cgprsAccPtNetworkInitiated=cgprsAccPtNetworkInitiated, cgprsAccPtCfgNotifAccPtIndex=cgprsAccPtCfgNotifAccPtIndex, cgprsAccPtIpv6GgsnDeactivatedPdps=cgprsAccPtIpv6GgsnDeactivatedPdps, cgprsAccPtDedBearerSucQosUpdate=cgprsAccPtDedBearerSucQosUpdate, cgprsAccPtIpv6AddrPool=cgprsAccPtIpv6AddrPool, cgprsAccPtIpv6GgsnSuccDeactivatedPdps=cgprsAccPtIpv6GgsnSuccDeactivatedPdps, cgprsAccPtTotRmtInitModifyBearers=cgprsAccPtTotRmtInitModifyBearers, cgprsAccPtPdpInServicePolicyName=cgprsAccPtPdpInServicePolicyName, cgprsAccPtAbsoluteSessionTimer=cgprsAccPtAbsoluteSessionTimer, cgprsAccPtStatisticsGroupSup6=cgprsAccPtStatisticsGroupSup6, cgprsAccPtDownstrPktCount=cgprsAccPtDownstrPktCount, cgprsAccPtDhcpv6ProxIpAllocFail=cgprsAccPtDhcpv6ProxIpAllocFail, cgprsAccPtDhcpv6ProxIpRenewFail=cgprsAccPtDhcpv6ProxIpRenewFail, cgprsAccPtMIBGroup=cgprsAccPtMIBGroup, cgprsAccPtSuccMsActivatedDynPdps=cgprsAccPtSuccMsActivatedDynPdps, cgprsAccptDhcpv6PoolName=cgprsAccptDhcpv6PoolName, cgprsAccPtVerifyDownlinkAddr=cgprsAccPtVerifyDownlinkAddr, cgprsAccPtCfgNotifHistTable=cgprsAccPtCfgNotifHistTable, cgprsAccPtMIBR60Group=cgprsAccPtMIBR60Group, cgprsAccPtMIBR92Group=cgprsAccPtMIBR92Group, cgprsAccPtIpv6NetworkInitDeactPdps=cgprsAccPtIpv6NetworkInitDeactPdps, cgprsAccPtMIBComplianceRev3=cgprsAccPtMIBComplianceRev3, cgprsAccPtSuccNetworkInitCreateIPv6DedBearers=cgprsAccPtSuccNetworkInitCreateIPv6DedBearers, cgprsAccPtCfgNotifReason=cgprsAccPtCfgNotifReason, cgprsAccPtMIBComplianceRev4=cgprsAccPtMIBComplianceRev4, cgprsAccPtIPAccListOutEnable=cgprsAccPtIPAccListOutEnable, cgprsAccPtMIBComplianceRev13=cgprsAccPtMIBComplianceRev13, cgprsAccPtRadiusAttrNasId=cgprsAccPtRadiusAttrNasId, cgprsAccPtMIBNotificationPrefix=cgprsAccPtMIBNotificationPrefix, cgprsAccPtPppRegenVerifyDomain=cgprsAccPtPppRegenVerifyDomain, cgprsAccPtCacTable=cgprsAccPtCacTable, cgprsAccPtImsEnable=cgprsAccPtImsEnable, cgprsAccPtDownstrByteCount=cgprsAccPtDownstrByteCount, cgprsAccPtInterimAccountinEnable=cgprsAccPtInterimAccountinEnable, cgprsAccPtExtMIBGroupSup2=cgprsAccPtExtMIBGroupSup2, cgprsAccPtDedBearerNoQosUpdate=cgprsAccPtDedBearerNoQosUpdate, cgprsAccPtIpAddrPoolNoRedistribute=cgprsAccPtIpAddrPoolNoRedistribute, cgprsAccPtUpstreamTrafficVol=cgprsAccPtUpstreamTrafficVol, cgprsAccptDhcpv6RapidCommit=cgprsAccptDhcpv6RapidCommit, cgprsAccPtRedirInterMobilAddrTyp=cgprsAccPtRedirInterMobilAddrTyp, cgprsAccPtCacConfigs=cgprsAccPtCacConfigs, cgprsAccPtNetworkInitPdps=cgprsAccPtNetworkInitPdps, cgprsAccPtIpv6RedirectAddrType=cgprsAccPtIpv6RedirectAddrType, cgprsAccPtImsConfigEntry=cgprsAccPtImsConfigEntry, cgprsAccPtMsNewAddr=cgprsAccPtMsNewAddr, cgprsAccPtDhcpv6ProxInforeqRply=cgprsAccPtDhcpv6ProxInforeqRply, cgprsAccPtMsActivatedDynPdps=cgprsAccPtMsActivatedDynPdps, cgprsAccPtChgProfRowStatus=cgprsAccPtChgProfRowStatus, cgprsAccPtRpDestAddrType=cgprsAccPtRpDestAddrType, cgprsAccPtDhcpv6ProxInforeqRcvd=cgprsAccPtDhcpv6ProxInforeqRcvd, cgprsAccPtStatisticsGroupSup4=cgprsAccPtStatisticsGroupSup4, cgprsAccPtDnsServerAddrType=cgprsAccPtDnsServerAddrType, cgprsAccPtCoaRcvd=cgprsAccPtCoaRcvd, cgprsAccPtSuccNetworkInitCreateDedBearers=cgprsAccPtSuccNetworkInitCreateDedBearers, cgprsAccPtCacUpStrBandWidthPool=cgprsAccPtCacUpStrBandWidthPool, cgprsAccPtPppRegenMaxSessions=cgprsAccPtPppRegenMaxSessions, cgprsAccPtIpv6MsActivatedPdps=cgprsAccPtIpv6MsActivatedPdps, cgprsAccPtCoaSuccess=cgprsAccPtCoaSuccess, cgprsAccPtMIBCompliances=cgprsAccPtMIBCompliances, cgprsAccPtRouteProbeGroup=cgprsAccPtRouteProbeGroup, cgprsAccPtActivePdps=cgprsAccPtActivePdps, cgprsAccPtIpv6RedirectAddr=cgprsAccPtIpv6RedirectAddr, cgprsAccPtMaintenanceNotif=cgprsAccPtMaintenanceNotif, cgprsAccPtRadiusServerSec=cgprsAccPtRadiusServerSec, cgprsAccPtImsiSuppressed=cgprsAccPtImsiSuppressed, cgprsAccPtAnonymousUserPassword=cgprsAccPtAnonymousUserPassword, PYSNMP_MODULE_ID=ciscoGprsAccPtMIB, cgprsAccPtAaaAccountingEnable=cgprsAccPtAaaAccountingEnable, cgprsAccPtCacDnStrBandWidthPool=cgprsAccPtCacDnStrBandWidthPool, cgprsAccPtDhcpProxServDeclines=cgprsAccPtDhcpProxServDeclines, cgprsAccPtGtpRespMesgWaitAcctng=cgprsAccPtGtpRespMesgWaitAcctng, cgprsAccPtActiveBearers=cgprsAccPtActiveBearers, cgprsAccPtDhcpAddrSpace=cgprsAccPtDhcpAddrSpace, cgprsAccPtMIBR90GroupRev1=cgprsAccPtMIBR90GroupRev1, cgprsAccPtAggregIpMask=cgprsAccPtAggregIpMask, cgprsAccPtMsType=cgprsAccPtMsType, cgprsAccPtIpv6Entry=cgprsAccPtIpv6Entry, cgprsAccPtIpv6Enable=cgprsAccPtIpv6Enable, cgprsAccPtGenServerConfigTable=cgprsAccPtGenServerConfigTable, ciscoGprsAccPtNotifInfo=ciscoGprsAccPtNotifInfo, cgprsAccPtIfNextHop=cgprsAccPtIfNextHop, cgprsAccPtMIBComplianceRev9=cgprsAccPtMIBComplianceRev9, cgprsAccPtStatisticsGroupRev3=cgprsAccPtStatisticsGroupRev3, cgprsAccPtAggregEntry=cgprsAccPtAggregEntry, cgprsAccPtMsActivatedPdps=cgprsAccPtMsActivatedPdps, cgprsAccPtIdlePdpPurgeTimer=cgprsAccPtIdlePdpPurgeTimer, cgprsAccPtImsSigAccGroupOut=cgprsAccPtImsSigAccGroupOut, cgprsAccPtName=cgprsAccPtName, cgprsAccPtNetworkBehindMsEnable=cgprsAccPtNetworkBehindMsEnable, cgprsAccPtUpdateRspTimeOut=cgprsAccPtUpdateRspTimeOut, cgprsAccPtExtMIBGroupRev2=cgprsAccPtExtMIBGroupRev2, AccessControlListId=AccessControlListId, cgprsAccPtIfIndex=cgprsAccPtIfIndex, cgprsAccPtIpv6MsSuccActivatedDynPdps=cgprsAccPtIpv6MsSuccActivatedDynPdps, AccessControlListOrZero=AccessControlListOrZero, cgprsAccPtChargingGrp=cgprsAccPtChargingGrp, cgprsAccPtImsConfigTable=cgprsAccPtImsConfigTable, cgprsAccPtRouteProbeTable=cgprsAccPtRouteProbeTable, cgprsAccPtPCscfGroupName=cgprsAccPtPCscfGroupName, cgprsAccPtCfgNotifIndex=cgprsAccPtCfgNotifIndex, cgprsAccPtMIBR100Group=cgprsAccPtMIBR100Group, cgprsAccPtStatisticsEntry=cgprsAccPtStatisticsEntry, cgprsAccPtMIBGroupRev1=cgprsAccPtMIBGroupRev1, cgprsAccPtStatisticsGroup=cgprsAccPtStatisticsGroup, cgprsAccPtSuccPdpUpdateResRcvd=cgprsAccPtSuccPdpUpdateResRcvd, cgprsAccPtAggregRowStatus=cgprsAccPtAggregRowStatus, cgprsAccPtTotNetworkInitUpdateBearers=cgprsAccPtTotNetworkInitUpdateBearers, cgprsAccPtv4v6MsDeactivatedPdps=cgprsAccPtv4v6MsDeactivatedPdps, cgprsAccPtMode=cgprsAccPtMode, cgprsAccPtMIBNotifications=cgprsAccPtMIBNotifications, cgprsAccPtUpstreamPacketCount=cgprsAccPtUpstreamPacketCount, cgprsAccPtStatisticsTable=cgprsAccPtStatisticsTable, cgprsAccPtConformances=cgprsAccPtConformances, cgprsAccPtMIBNotifGroupRev1=cgprsAccPtMIBNotifGroupRev1, cgprsAccPtIpAddrLocalPoolName=cgprsAccPtIpAddrLocalPoolName, cgprsAccPtIpv6Table=cgprsAccPtIpv6Table, cgprsAccPtCfgNotif=cgprsAccPtCfgNotif, cgprsAccPtCfgNotifLatestIndex=cgprsAccPtCfgNotifLatestIndex, cgprsAccPtSuppressRadiusAttribs=cgprsAccPtSuppressRadiusAttribs, cgprsAccPtIpv6NetworkInitDeactSuccPdps=cgprsAccPtIpv6NetworkInitDeactSuccPdps, cgprsAccPtRedirInterMobilTraffic=cgprsAccPtRedirInterMobilTraffic, cgprsAccPtDedBearerDeactivations=cgprsAccPtDedBearerDeactivations, cgprsAccPtType=cgprsAccPtType, cgprsAccPtExtMIBGroup=cgprsAccPtExtMIBGroup, cgprsAccPtStatisticsGroupSup5=cgprsAccPtStatisticsGroupSup5, cgprsAccPtDhcpProxServRequest=cgprsAccPtDhcpProxServRequest, cgprsAccPtv4v6SuccMsDeactivatedPdps=cgprsAccPtv4v6SuccMsDeactivatedPdps, cgprsAccPtMIBComplianceRev1=cgprsAccPtMIBComplianceRev1, cgprsAccPtRevDownstrTrafficVol=cgprsAccPtRevDownstrTrafficVol, cgprsAccPtIpv6UpstreamPackets=cgprsAccPtIpv6UpstreamPackets, cgprsAccPtDhcpProxServTxErrDrops=cgprsAccPtDhcpProxServTxErrDrops, cgprsAccPtMsAllocAddr=cgprsAccPtMsAllocAddr, cgprsAccPtMIBR90Group=cgprsAccPtMIBR90Group, cgprsAccPtMIBComplianceRev10=cgprsAccPtMIBComplianceRev10, cgprsAccPtSuccNetworkInitPdps=cgprsAccPtSuccNetworkInitPdps, cgprsAccPtIpv6MsActivatedDynPdps=cgprsAccPtIpv6MsActivatedDynPdps, cgprsAccPtPriNetbiosServer=cgprsAccPtPriNetbiosServer, cgprsAccPtDhcpv6ProxIpRelease=cgprsAccPtDhcpv6ProxIpRelease, cgprsAccPtAaaAuthServerGroup=cgprsAccPtAaaAuthServerGroup, cgprsAccPtSecDnsServer=cgprsAccPtSecDnsServer, cgprsAccPtv4v6SuccMsActivatedPdps=cgprsAccPtv4v6SuccMsActivatedPdps, cgprsAccPtIpv6MsSuccActivatedPdps=cgprsAccPtIpv6MsSuccActivatedPdps, cgprsAccPtExtEntry=cgprsAccPtExtEntry, cgprsAccPtCsgGroupEntry=cgprsAccPtCsgGroupEntry, cgprsAccPtDhcpProxServRelease=cgprsAccPtDhcpProxServRelease, cgprsAccPtIpv6Group=cgprsAccPtIpv6Group, cgprsAccPtAnonymousUserName=cgprsAccPtAnonymousUserName, cgprsAccPtMIBComplianceRev11=cgprsAccPtMIBComplianceRev11, cgprsAccPtCacEntry=cgprsAccPtCacEntry, cgprsAccPtUpstrPktCount=cgprsAccPtUpstrPktCount, cgprsAccPtDownstreamPacketCount=cgprsAccPtDownstreamPacketCount, cgprsAccPtSuccNetworkInitUpdateBearers=cgprsAccPtSuccNetworkInitUpdateBearers, cgprsAccPtIpv6AddrAllocations=cgprsAccPtIpv6AddrAllocations, cgprsAccPtIpAddrAllocations=cgprsAccPtIpAddrAllocations, cgprsAccPtExtMIBGroupRev1=cgprsAccPtExtMIBGroupRev1, cgprsAccPtGenServerConfigEntry=cgprsAccPtGenServerConfigEntry, cgprsAccPtUsers=cgprsAccPtUsers, cgprsAccPtIpv6BaseVTemplate=cgprsAccPtIpv6BaseVTemplate, cgprsAccPtFailPdpUpdate=cgprsAccPtFailPdpUpdate, cgprsAccPtEntry=cgprsAccPtEntry, cgprsAccPtMsTpduDstAddr=cgprsAccPtMsTpduDstAddr, cgprsAccPtPppRegenSetupTime=cgprsAccPtPppRegenSetupTime, cgprsAccPtChgProfile=cgprsAccPtChgProfile, cgprsAccPtRadiusServerPri=cgprsAccPtRadiusServerPri, cgprsAccPtVerifyUpStrTpduSrcAddr=cgprsAccPtVerifyUpStrTpduSrcAddr, cgprsAccPtDhcpv6ProxyStatsTable=cgprsAccPtDhcpv6ProxyStatsTable, cgprsAccPtGenServerGroup=cgprsAccPtGenServerGroup, cgprsAccPtCfgNotifGroup=cgprsAccPtCfgNotifGroup, cgprsAccPtPdpOutServicePolicyNam=cgprsAccPtPdpOutServicePolicyNam, cgprsAccPtDhcpProxServErrDrops=cgprsAccPtDhcpProxServErrDrops, ciscoGprsAccPtStatistics=ciscoGprsAccPtStatistics, cgprsAccPtStatisticsGroupSup2=cgprsAccPtStatisticsGroupSup2, cgprsAccPtIpv6AccessGroupUp=cgprsAccPtIpv6AccessGroupUp, cgprsAccPtMIBR80Group=cgprsAccPtMIBR80Group, cgprsAccPtSuccRmtInitCreateBearers=cgprsAccPtSuccRmtInitCreateBearers, cgprsAccPtMsAddrType=cgprsAccPtMsAddrType, cgprsAccPtNotifInfoGroup=cgprsAccPtNotifInfoGroup, cgprsAccPtAggregTable=cgprsAccPtAggregTable, cgprsAccPtDhcpAddrReleases=cgprsAccPtDhcpAddrReleases, cgprsAccPtGxEnable=cgprsAccPtGxEnable, cgprsAccPtMIBCompliance=cgprsAccPtMIBCompliance, cgprsAccPtSubrRequired=cgprsAccPtSubrRequired, cgprsAccPtIpv6MsSuccDeactivatedPdps=cgprsAccPtIpv6MsSuccDeactivatedPdps, cgprsAccPtSourceAddrViolTpdus=cgprsAccPtSourceAddrViolTpdus, cgprsAccPtTotNetworkInitCreateDedBearers=cgprsAccPtTotNetworkInitCreateDedBearers, cgprsAccPtDhcpProxServNaks=cgprsAccPtDhcpProxServNaks, cgprsAccPtNetworkInitDeleteBearers=cgprsAccPtNetworkInitDeleteBearers, cgprsAccPtIPAccListGroupOut=cgprsAccPtIPAccListGroupOut, cgprsAccPtChgProfEntry=cgprsAccPtChgProfEntry, cgprsAccPtChgProfTable=cgprsAccPtChgProfTable, cgprsAccPtv4v6SuccActDedbearerPdps=cgprsAccPtv4v6SuccActDedbearerPdps, cgprsAccPtMIBComplianceRev2=cgprsAccPtMIBComplianceRev2, cgprsAccPtCsgGroupRowStatus=cgprsAccPtCsgGroupRowStatus, cgprsAccPtCsgGroupName=cgprsAccPtCsgGroupName, cgprsAccPtExtTable=cgprsAccPtExtTable, cgprsAccPtExtMIBGroupSup1=cgprsAccPtExtMIBGroupSup1, AccessControlListName=AccessControlListName, cgprsAccPtDestAddrViolTpdus=cgprsAccPtDestAddrViolTpdus, cgprsAccPtDtEnabled=cgprsAccPtDtEnabled, cgprsAccPtAggregCsgGroup=cgprsAccPtAggregCsgGroup, cgprsAccPtCfgNotifHistEntry=cgprsAccPtCfgNotifHistEntry, cgprsAccPtThruputStatsTable=cgprsAccPtThruputStatsTable, cgprsAccPtRedirInterMobilAddr=cgprsAccPtRedirInterMobilAddr, cgprsAccPtRejNonImsPdp=cgprsAccPtRejNonImsPdp, cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps=cgprsAccPtIpv4v6MsSuccActivatedDynamicPdps, ciscoGprsAccPtConfig=ciscoGprsAccPtConfig, cgprsAccPtDualAddrEnabled=cgprsAccPtDualAddrEnabled, cgprsAccPtDhcpProxServInform=cgprsAccPtDhcpProxServInform, cgprsAccPtTotRmtInitCreateBearers=cgprsAccPtTotRmtInitCreateBearers, cgprsAccPtMIBComplianceRev15=cgprsAccPtMIBComplianceRev15, cgprsAccPtDhcpProxServOffer=cgprsAccPtDhcpProxServOffer, cgprsAccPtPcscfServerGroupName=cgprsAccPtPcscfServerGroupName, cgprsAccPtAggregIpAddrType=cgprsAccPtAggregIpAddrType, cgprsAccPtDhcpv6ProxInforeqLocRply=cgprsAccPtDhcpv6ProxInforeqLocRply, cgprsAccPtBlockMsRoaming=cgprsAccPtBlockMsRoaming, cgprsAccPtMIBComplianceRev5=cgprsAccPtMIBComplianceRev5, cgprsAccPtDhcpv6ProxUnkwnMsg=cgprsAccPtDhcpv6ProxUnkwnMsg, ciscoGprsAccPtMIB=ciscoGprsAccPtMIB, cgprsAccPtSuccDhcpAddrRequests=cgprsAccPtSuccDhcpAddrRequests, cgprsAccPtMIBR80GroupSup1=cgprsAccPtMIBR80GroupSup1, cgprsAccPtCfgNotifEnable=cgprsAccPtCfgNotifEnable, cgprsAccPtDhcpProxServIpAllocErr=cgprsAccPtDhcpProxServIpAllocErr, cgprsAccPtOperationMode=cgprsAccPtOperationMode, cgprsAccPtRevUpstreamTrafficVol=cgprsAccPtRevUpstreamTrafficVol, cgprsAccPtRpDestPort=cgprsAccPtRpDestPort, cgprsAccPtStatisticsGroupRev2=cgprsAccPtStatisticsGroupRev2, cgprsAccPtIpv6DownstreamTrafficVolume=cgprsAccPtIpv6DownstreamTrafficVolume)
mibBuilder.exportSymbols("CISCO-GPRS-ACC-PT-MIB", cgprsAccPtTotalBearers=cgprsAccPtTotalBearers, cgprsAccPtDHCPGwAddr=cgprsAccPtDHCPGwAddr, cgprsAccPtSuccRmtInitModifyBearers=cgprsAccPtSuccRmtInitModifyBearers, cgprsAccPtCfgNotifHistMax=cgprsAccPtCfgNotifHistMax, cgprsAccPtNetbiosServerAddrType=cgprsAccPtNetbiosServerAddrType, cgprsAccPtIpv6DnsAddrType=cgprsAccPtIpv6DnsAddrType, cgprsAccPtIpv4v6MsActivatedDynamicPdps=cgprsAccPtIpv4v6MsActivatedDynamicPdps, cgprsAccPtMIBComplianceRev14=cgprsAccPtMIBComplianceRev14, cgprsAccPtImsConfigs=cgprsAccPtImsConfigs, cgprsAccPtInServiceNotif=cgprsAccPtInServiceNotif, cgprsAccPtIpv6Configs=cgprsAccPtIpv6Configs, cgprsAccPtDhcpv6ProxErrs=cgprsAccPtDhcpv6ProxErrs, cgprsAccPtMIBComplianceRev7=cgprsAccPtMIBComplianceRev7, cgprsAccPtIpv6AccessGroupDown=cgprsAccPtIpv6AccessGroupDown, cgprsAccPtImsGroup=cgprsAccPtImsGroup, cgprsAccPtAaaAccountServerGroup=cgprsAccPtAaaAccountServerGroup, cgprsAccPtSuccMsDeactivatedPdps=cgprsAccPtSuccMsDeactivatedPdps, cgprsAccPtDedBearerQosUpdate=cgprsAccPtDedBearerQosUpdate, cgprsAccPtv4v6MsActivatedPdps=cgprsAccPtv4v6MsActivatedPdps, cgprsAccPtDhcpProxServUnknowMsg=cgprsAccPtDhcpProxServUnknowMsg, cgprsAccPtPppRegenEnable=cgprsAccPtPppRegenEnable, cgprsAccPtChgProfOverride=cgprsAccPtChgProfOverride, cgprsAccPtIpv6DnsSecAddress=cgprsAccPtIpv6DnsSecAddress, cgprsAccPtMIBGroups=cgprsAccPtMIBGroups, cgprsAccPtDhcpProxServAcks=cgprsAccPtDhcpProxServAcks, cgprsAccPtIndex=cgprsAccPtIndex, cgprsAccPtPcscfLoadBalance=cgprsAccPtPcscfLoadBalance, cgprsAccPtSecNetbiosServer=cgprsAccPtSecNetbiosServer, cgprsAccPtSetRadiusAttributes=cgprsAccPtSetRadiusAttributes, cgprsAccPtMIBComplianceRev6=cgprsAccPtMIBComplianceRev6, cgprsAccPtDhcpv6ProxyStatsEntry=cgprsAccPtDhcpv6ProxyStatsEntry, cgprsAccPtAdvDownlinkNextHopAddr=cgprsAccPtAdvDownlinkNextHopAddr, cgprsAccPtMsIsdnSuppressed=cgprsAccPtMsIsdnSuppressed, cgprsAccPtIpv6UpstreamTrafficVolume=cgprsAccPtIpv6UpstreamTrafficVolume, cgprsAccPtVrfName=cgprsAccPtVrfName, cgprsAccPtFailMsActivatedPdps=cgprsAccPtFailMsActivatedPdps, cgprsAccPtThruPutLastCollected=cgprsAccPtThruPutLastCollected, cgprsAccPtSecSrcViolNotif=cgprsAccPtSecSrcViolNotif, cgprsAccPtAaaAccountInterRadius=cgprsAccPtAaaAccountInterRadius, cgprsAccPtDhcpv6ProxIpAllocSuc=cgprsAccPtDhcpv6ProxIpAllocSuc, cgprsAccPtPriDnsServer=cgprsAccPtPriDnsServer, cgprsAccPtDhcpAddrRequests=cgprsAccPtDhcpAddrRequests, cgprsAccPtCsgGroupTable=cgprsAccPtCsgGroupTable, cgprsAccPtExtMIBGroupRev3=cgprsAccPtExtMIBGroupRev3, cgprsAccPtDHCPServerSec=cgprsAccPtDHCPServerSec, cgprsAccPtIpv6GroupSup1=cgprsAccPtIpv6GroupSup1, cgprsAccPtRouteProbeConfigs=cgprsAccPtRouteProbeConfigs, cgprsAccPtIpv6DnsPriAddress=cgprsAccPtIpv6DnsPriAddress, cgprsAccPtGtpUpdateFailDelete=cgprsAccPtGtpUpdateFailDelete, cgprsAccPtMIBComplianceRev12=cgprsAccPtMIBComplianceRev12, cgprsAccPtMsDeactivatedPdps=cgprsAccPtMsDeactivatedPdps, cgprsAccPtIpv6SecurityVerifySrc=cgprsAccPtIpv6SecurityVerifySrc, cgprsAccPtAccessViolation=cgprsAccPtAccessViolation, cgprsAccPtCacPolicyName=cgprsAccPtCacPolicyName, cgprsAccPtMsIsdnSuppressedValue=cgprsAccPtMsIsdnSuppressedValue, cgprsAccPtIpv6Exclusive=cgprsAccPtIpv6Exclusive, cgprsAccPtDhcpv6ProxyStatsGroup=cgprsAccPtDhcpv6ProxyStatsGroup, cgprsAccPtDownstreamTrafficVol=cgprsAccPtDownstreamTrafficVol, cgprsAccPtThruPutGroup=cgprsAccPtThruPutGroup, cgprsAccPtIPAccListGroupIn=cgprsAccPtIPAccListGroupIn, cgprsAccPtIpv6SecurityVerifyDst=cgprsAccPtIpv6SecurityVerifyDst, cgprsAccPtChargingRecordType=cgprsAccPtChargingRecordType, cgprsAccPtAdvDownlinkNextHopAddrType=cgprsAccPtAdvDownlinkNextHopAddrType, ciscoGprsAccPtCfgNotifInfo=ciscoGprsAccPtCfgNotifInfo, cgprsAccPtIPAccListInEnable=cgprsAccPtIPAccListInEnable, cgprsAccPtSuccGgsDeactivatedPdps=cgprsAccPtSuccGgsDeactivatedPdps, cgprsAccPtIpv6Redirect=cgprsAccPtIpv6Redirect, cgprsAccPtRouteProbeEntry=cgprsAccPtRouteProbeEntry, cgprsAccPtRpTtl=cgprsAccPtRpTtl, cgprsAccPtChargingGroup=cgprsAccPtChargingGroup, cgprsAccPtIpv6DownstreamPackets=cgprsAccPtIpv6DownstreamPackets, cgprsAccPtAaaAccountInterPeriod=cgprsAccPtAaaAccountInterPeriod, cgprsAccPtSecDestViolNotif=cgprsAccPtSecDestViolNotif, cgprsAccPtSuccMsActivatedPdps=cgprsAccPtSuccMsActivatedPdps, cgprsAccPtMaxSubnetsBehindMobile=cgprsAccPtMaxSubnetsBehindMobile, ciscoGprsAccPtMIBObjects=ciscoGprsAccPtMIBObjects, cgprsAccPtIpv6AddrLocalPoolName=cgprsAccPtIpv6AddrLocalPoolName, cgprsAccPtGgsnDeactivatedPdps=cgprsAccPtGgsnDeactivatedPdps, cgprsAccPtThruputStatsEntry=cgprsAccPtThruputStatsEntry, cgprsAccPtServiceAware=cgprsAccPtServiceAware, cgprsAccPtRowStatus=cgprsAccPtRowStatus, cgprsAccPtImsSigAccGroupIn=cgprsAccPtImsSigAccGroupIn)
