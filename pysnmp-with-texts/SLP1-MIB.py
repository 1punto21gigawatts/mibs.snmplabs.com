#
# PySNMP MIB module SLP1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SLP1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Unsigned32, NotificationType, MibIdentifier, iso, TimeTicks, IpAddress, ModuleIdentity, enterprises, Bits, Counter64, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Unsigned32", "NotificationType", "MibIdentifier", "iso", "TimeTicks", "IpAddress", "ModuleIdentity", "enterprises", "Bits", "Counter64", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
slp1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 244, 1, 9, 1))
if mibBuilder.loadTexts: slp1.setLastUpdated('200412091740Z')
if mibBuilder.loadTexts: slp1.setOrganization('Lantronix')
if mibBuilder.loadTexts: slp1.setContactInfo('Postal: Lantronix 15353 Barranca Parkway Irvine, CA 92618 Tel: (949) 453-7198 Email: support@lantronix.com')
if mibBuilder.loadTexts: slp1.setDescription('This is the MIB module for the SecureLinx Power Manager.')
lantronix = MibIdentifier((1, 3, 6, 1, 4, 1, 244))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1))
slp = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 9))
slp1SystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 1))
slp1SystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1SystemVersion.setStatus('current')
if mibBuilder.loadTexts: slp1SystemVersion.setDescription('The firmware version of the system.')
slp1SystemNICSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1SystemNICSerialNumber.setStatus('current')
if mibBuilder.loadTexts: slp1SystemNICSerialNumber.setDescription('The serial number of the network interface card in the system.')
slp1SystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1SystemLocation.setStatus('current')
if mibBuilder.loadTexts: slp1SystemLocation.setDescription('The location of the system.')
slp1SystemTowerCount = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1SystemTowerCount.setStatus('current')
if mibBuilder.loadTexts: slp1SystemTowerCount.setDescription('The number of towers in the system.')
slp1SystemEnvMonCount = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1SystemEnvMonCount.setStatus('current')
if mibBuilder.loadTexts: slp1SystemEnvMonCount.setDescription('The number of environmental monitors in the system.')
slp1SystemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2))
slp1TowerTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1), )
if mibBuilder.loadTexts: slp1TowerTable.setStatus('current')
if mibBuilder.loadTexts: slp1TowerTable.setDescription('A table of towers.')
slp1TowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1, 1), ).setIndexNames((0, "SLP1-MIB", "slp1TowerIndex"))
if mibBuilder.loadTexts: slp1TowerEntry.setStatus('current')
if mibBuilder.loadTexts: slp1TowerEntry.setDescription('Row definition for the tower table.')
slp1TowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: slp1TowerIndex.setStatus('current')
if mibBuilder.loadTexts: slp1TowerIndex.setDescription('Index for the tower table.')
slp1TowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TowerID.setStatus('current')
if mibBuilder.loadTexts: slp1TowerID.setDescription('The ID of the tower.')
slp1TowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1TowerName.setStatus('current')
if mibBuilder.loadTexts: slp1TowerName.setDescription('The name of the tower.')
slp1TowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("noComm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TowerStatus.setStatus('current')
if mibBuilder.loadTexts: slp1TowerStatus.setDescription('The operational status of the tower.')
slp1TowerInfeedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TowerInfeedCount.setStatus('current')
if mibBuilder.loadTexts: slp1TowerInfeedCount.setDescription('The number of input feeds on the tower.')
slp1InfeedTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2), )
if mibBuilder.loadTexts: slp1InfeedTable.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedTable.setDescription('A table of input feeds.')
slp1InfeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1), ).setIndexNames((0, "SLP1-MIB", "slp1TowerIndex"), (0, "SLP1-MIB", "slp1InfeedIndex"))
if mibBuilder.loadTexts: slp1InfeedEntry.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedEntry.setDescription('Row definition for the input feed table.')
slp1InfeedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: slp1InfeedIndex.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedIndex.setDescription('Index for the input feed table.')
slp1InfeedID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1InfeedID.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedID.setDescription('The ID of the input feed.')
slp1InfeedName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1InfeedName.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedName.setDescription('The name of the input feed.')
slp1InfeedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1), ("powerControl", 2), ("failSafe", 3), ("defaultOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1InfeedCapabilities.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedCapabilities.setDescription('The capabilities of the input feed.')
slp1InfeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1InfeedStatus.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedStatus.setDescription("The status of the input feed. If the slp1InfeedCapabilities 'onSense' bit is TRUE, then all of the states are supported and indicate the sensed state of the input feed. If the slp1InfeedCapabilities 'onSense' bit is FALSE, then only the 'on' and 'noComm' states are supported, and 'on' indicates a derived state, not a sensed state.")
slp1InfeedLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1InfeedLoadStatus.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedLoadStatus.setDescription("The status of the load measured on the input feed. If the slp1InfeedCapabilities 'loadSense' bit is TRUE, then all of the states are supported. If the slp1InfeedCapabilities 'loadSense' bit is FALSE, then only the 'normal' and 'noComm' states are supported.")
slp1InfeedLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1InfeedLoadValue.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedLoadValue.setDescription('The load measured on the input feed. A non-negative value indicates the measured load in hundredths of Amps. A negative value indicates that a load value was not able to be measured.')
slp1InfeedLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1InfeedLoadHighThresh.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedLoadHighThresh.setDescription('The load high threshold value of the input feed in Amps.')
slp1InfeedOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1InfeedOutletCount.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedOutletCount.setDescription('The number of outlets on the input feed.')
slp1OutletTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3), )
if mibBuilder.loadTexts: slp1OutletTable.setStatus('current')
if mibBuilder.loadTexts: slp1OutletTable.setDescription('A table of outlets.')
slp1OutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1), ).setIndexNames((0, "SLP1-MIB", "slp1TowerIndex"), (0, "SLP1-MIB", "slp1InfeedIndex"), (0, "SLP1-MIB", "slp1OutletIndex"))
if mibBuilder.loadTexts: slp1OutletEntry.setStatus('current')
if mibBuilder.loadTexts: slp1OutletEntry.setDescription('Row definition for the outlet table.')
slp1OutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: slp1OutletIndex.setStatus('current')
if mibBuilder.loadTexts: slp1OutletIndex.setDescription('Index for the outlet table.')
slp1OutletID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1OutletID.setStatus('current')
if mibBuilder.loadTexts: slp1OutletID.setDescription('The ID of the outlet.')
slp1OutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1OutletName.setStatus('current')
if mibBuilder.loadTexts: slp1OutletName.setDescription('The name of the outlet.')
slp1OutletCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1), ("powerControl", 2), ("shutdown", 3), ("defaultOn", 4), ("ownInfeed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1OutletCapabilities.setStatus('current')
if mibBuilder.loadTexts: slp1OutletCapabilities.setDescription('The capabilities of the outlet.')
slp1OutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1OutletStatus.setStatus('current')
if mibBuilder.loadTexts: slp1OutletStatus.setDescription("The status of the outlet. If the slp1OutletCapabilities 'onSense' bit is TRUE, then all of the states are supported and indicate the sensed state of the outlet. If the slp1OutletCapabilities 'onSense' bit is FALSE, then only the 'off', 'on', and 'noComm' states are supported, and 'off' and 'on' indicate a derived state, not a sensed state.")
slp1OutletLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1OutletLoadStatus.setStatus('current')
if mibBuilder.loadTexts: slp1OutletLoadStatus.setDescription("The status of the load measured on the outlet. If the slp1OutletCapabilities 'loadSense' bit is TRUE, then all of the states are supported. If the slp1OutletCapabilities 'loadSense' bit is FALSE, then only the 'normal' and 'noComm' states are supported.")
slp1OutletLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1OutletLoadValue.setStatus('current')
if mibBuilder.loadTexts: slp1OutletLoadValue.setDescription('The load measured on the outlet. A non-negative value indicates the measured load in hundredths of Amps. A negative value indicates that a load value was not able to be measured.')
slp1OutletLoadLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1OutletLoadLowThresh.setStatus('current')
if mibBuilder.loadTexts: slp1OutletLoadLowThresh.setDescription('The load low threshold value of the outlet in Amps.')
slp1OutletLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1OutletLoadHighThresh.setStatus('current')
if mibBuilder.loadTexts: slp1OutletLoadHighThresh.setDescription('The load high threshold value of the outlet in Amps.')
slp1OutletControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("idleOff", 0), ("idleOn", 1), ("wakeOff", 2), ("wakeOn", 3), ("off", 4), ("on", 5), ("lockedOff", 6), ("lockedOn", 7), ("reboot", 8), ("shutdown", 9), ("pendOn", 10), ("pendOff", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1OutletControlState.setStatus('current')
if mibBuilder.loadTexts: slp1OutletControlState.setDescription("The control state of the outlet. The supported states are dependent upon the slp1OutletCapabilities 'powerControl' and 'shutdown' bits, as well as the supported features of the firmware version.")
slp1OutletControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("on", 1), ("off", 2), ("reboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1OutletControlAction.setStatus('current')
if mibBuilder.loadTexts: slp1OutletControlAction.setDescription("An action to change the control state of the outlet. If the slp1OutletCapabilities 'powerControl' bit is TRUE, then the 'on', 'off', and 'reboot' actions can be used to change the control state of the outlet. If the slp1OutletCapabilities 'powerControl' bit is FALSE, then the actions have no effect.")
slp1EnvMonTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4), )
if mibBuilder.loadTexts: slp1EnvMonTable.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonTable.setDescription('A table of environmental monitors.')
slp1EnvMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1), ).setIndexNames((0, "SLP1-MIB", "slp1EnvMonIndex"))
if mibBuilder.loadTexts: slp1EnvMonEntry.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonEntry.setDescription('Row definition for the environmental monitor table.')
slp1EnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: slp1EnvMonIndex.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonIndex.setDescription('Index for the environmental monitor table.')
slp1EnvMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonID.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonID.setDescription('The ID of the environmental monitor.')
slp1EnvMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1EnvMonName.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonName.setDescription('The name of the environmental monitor.')
slp1EnvMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("noComm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonStatus.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonStatus.setDescription('The operational status of the environmental monitor.')
slp1EnvMonWaterSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1EnvMonWaterSensorName.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonWaterSensorName.setDescription('The name of the water sensor.')
slp1EnvMonWaterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonWaterSensorStatus.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonWaterSensorStatus.setDescription('The status of the water sensor.')
slp1EnvMonADCName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1EnvMonADCName.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonADCName.setDescription('The name of the analog-to-digital converter.')
slp1EnvMonADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("reading", 1), ("countLow", 2), ("countHigh", 3), ("readError", 4), ("noComm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonADCStatus.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonADCStatus.setDescription('The status of the analog-to-digital converter.')
slp1EnvMonADCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonADCCount.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonADCCount.setDescription('The 8-bit count value from the analog-to-digital converter. A non-negative value indicates the digital value retrieved from the ADC. A negative value indicates that a digital value was not able to be retrieved.')
slp1EnvMonADCLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1EnvMonADCLowThresh.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonADCLowThresh.setDescription('The 8-bit count low threshold value of the analog-to-digital converter.')
slp1EnvMonADCHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1EnvMonADCHighThresh.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonADCHighThresh.setDescription('The 8-bit count high threshold value of the analog-to-digital converter.')
slp1EnvMonTempHumidSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonTempHumidSensorCount.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonTempHumidSensorCount.setDescription('The number of temperature/humidity sensors on the environmental monitor.')
slp1EnvMonContactClosureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1EnvMonContactClosureCount.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonContactClosureCount.setDescription('The number of contact closures on the environmental monitor.')
slp1TempHumidSensorTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5), )
if mibBuilder.loadTexts: slp1TempHumidSensorTable.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorTable.setDescription('A table of temperature/humidity sensors.')
slp1TempHumidSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1), ).setIndexNames((0, "SLP1-MIB", "slp1EnvMonIndex"), (0, "SLP1-MIB", "slp1TempHumidSensorIndex"))
if mibBuilder.loadTexts: slp1TempHumidSensorEntry.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorEntry.setDescription('Row definition for the temperature/humidity sensor table.')
slp1TempHumidSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: slp1TempHumidSensorIndex.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorIndex.setDescription('Index for the temperature/humidity sensor table.')
slp1TempHumidSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TempHumidSensorID.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorID.setDescription('The ID of the temperature/humidity sensor.')
slp1TempHumidSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1TempHumidSensorName.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorName.setDescription('The name of the temperature/humidity sensor.')
slp1TempHumidSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("found", 0), ("notFound", 1), ("lost", 2), ("noComm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TempHumidSensorStatus.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorStatus.setDescription('The operational status of the temperature/humidity sensor.')
slp1TempHumidSensorTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notFound", 1), ("reading", 2), ("tempLow", 3), ("tempHigh", 4), ("readError", 5), ("lost", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TempHumidSensorTempStatus.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorTempStatus.setDescription('The status of the temperature sensor.')
slp1TempHumidSensorTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1235))).setUnits('tenth degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TempHumidSensorTempValue.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorTempValue.setDescription('The temperature measured by the sensor. A non-negative value indicates the measured temperature in tenths of degrees Celsius. A negative value indicates that a temperature value was not able to be measured.')
slp1TempHumidSensorTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 123))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1TempHumidSensorTempLowThresh.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorTempLowThresh.setDescription('The temperature low threshold value of the sensor in degrees Celsius.')
slp1TempHumidSensorTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 123))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1TempHumidSensorTempHighThresh.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorTempHighThresh.setDescription('The temperature high threshold value of the sensor in degrees Celsius.')
slp1TempHumidSensorHumidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("notFound", 1), ("reading", 2), ("humidLow", 3), ("humidHigh", 4), ("readError", 5), ("lost", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TempHumidSensorHumidStatus.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorHumidStatus.setDescription('The status of the humidity sensor.')
slp1TempHumidSensorHumidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage relative humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TempHumidSensorHumidValue.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorHumidValue.setDescription('The humidity measured by the sensor. A non-negative value indicates the measured humidity in percentage relative humidity. A negative value indicates that a humidity value was not able to be measured.')
slp1TempHumidSensorHumidLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1TempHumidSensorHumidLowThresh.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorHumidLowThresh.setDescription('The humidity low threshold value of the sensor in percentage relative humidity.')
slp1TempHumidSensorHumidHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1TempHumidSensorHumidHighThresh.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorHumidHighThresh.setDescription('The humidity low threshold value of the sensor in percentage relative humidity.')
slp1ContactClosureTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 6), )
if mibBuilder.loadTexts: slp1ContactClosureTable.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureTable.setDescription('A table of contact closures.')
slp1ContactClosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 6, 1), ).setIndexNames((0, "SLP1-MIB", "slp1EnvMonIndex"), (0, "SLP1-MIB", "slp1ContactClosureIndex"))
if mibBuilder.loadTexts: slp1ContactClosureEntry.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureEntry.setDescription('Row definition for the contact closure table.')
slp1ContactClosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: slp1ContactClosureIndex.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureIndex.setDescription('Index for the contact closure table.')
slp1ContactClosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1ContactClosureID.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureID.setDescription('The ID of the contact closure.')
slp1ContactClosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slp1ContactClosureName.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureName.setDescription('The name of the contact closure.')
slp1ContactClosureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1ContactClosureStatus.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureStatus.setDescription('The status of the contact closure.')
slp1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100))
slp1Events = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0))
slp1TowerStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 1)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1TowerID"), ("SLP1-MIB", "slp1TowerName"), ("SLP1-MIB", "slp1TowerStatus"))
if mibBuilder.loadTexts: slp1TowerStatusEvent.setStatus('current')
if mibBuilder.loadTexts: slp1TowerStatusEvent.setDescription("Tower status event. If enabled, this trap is sent when the slp1TowerStatus indicates an error state ('noComm'). This trap is repeated periodically while the slp1TowerStatus remains in an error state. If the slp1TowerStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1TowerStatus, and then stops being repeated. While the slp1TowerStatus indicates an error state, all status and load traps are suppressed for input feeds and outlets on the tower.")
slp1InfeedStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 2)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1InfeedID"), ("SLP1-MIB", "slp1InfeedName"), ("SLP1-MIB", "slp1InfeedStatus"))
if mibBuilder.loadTexts: slp1InfeedStatusEvent.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedStatusEvent.setDescription("Input feed status event. If enabled, this trap is sent when the slp1InfeedStatus indicates an error state ('offError', 'onError', or 'noComm'). This trap is repeated periodically while the slp1InfeedStatus remains in an error state. If the slp1InfeedStatus returns to a non-error state ('off' or 'on'), this trap is sent once more with the non-error slp1InfeedStatus, and then stops being repeated. While the slp1InfeedStatus indicates an error state, load traps are suppressed for the input feed, and, if the slp1InfeedCapabilities 'failSafe' bit is FALSE, all status and load traps are suppressed for outlets on the input feed.")
slp1InfeedLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 3)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1InfeedID"), ("SLP1-MIB", "slp1InfeedName"), ("SLP1-MIB", "slp1InfeedLoadStatus"), ("SLP1-MIB", "slp1InfeedLoadValue"), ("SLP1-MIB", "slp1InfeedLoadHighThresh"))
if mibBuilder.loadTexts: slp1InfeedLoadEvent.setStatus('current')
if mibBuilder.loadTexts: slp1InfeedLoadEvent.setDescription("Input feed load event. If enabled, this trap is sent when the slp1InfeedLoadStatus indicates an error state ('loadLow', 'loadHigh', 'overLoad', 'readError', or 'noComm'). This trap is repeated periodically while the slp1InfeedLoadStatus remains in an error state. If the slp1InfeedLoadStatus returns to a non-error state ('normal' or 'notOn'), this trap is sent once more with the non-error slp1InfeedLoadStatus, and then stops being repeated.")
slp1OutletStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 4)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1OutletID"), ("SLP1-MIB", "slp1OutletName"), ("SLP1-MIB", "slp1OutletStatus"))
if mibBuilder.loadTexts: slp1OutletStatusEvent.setStatus('current')
if mibBuilder.loadTexts: slp1OutletStatusEvent.setDescription("Outlet status event. If enabled, this trap is sent when the slp1OutletStatus indicates an error state ('offError', 'onError', or 'noComm'). This trap is repeated periodically while the slp1OutletStatus remains in an error state. If the slp1OutletStatus returns to a non-error state ('off' or 'on'), this trap is sent once more with the non-error slp1OutletStatus, and then stops being repeated. While the slp1OutletStatus indicates an error state, load traps are suppressed for the outlet.")
slp1OutletLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 5)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1OutletID"), ("SLP1-MIB", "slp1OutletName"), ("SLP1-MIB", "slp1OutletLoadStatus"), ("SLP1-MIB", "slp1OutletLoadValue"), ("SLP1-MIB", "slp1OutletLoadLowThresh"), ("SLP1-MIB", "slp1OutletLoadHighThresh"))
if mibBuilder.loadTexts: slp1OutletLoadEvent.setStatus('current')
if mibBuilder.loadTexts: slp1OutletLoadEvent.setDescription("Outlet load event. If enabled, this trap is sent when the slp1OutletLoadStatus indicates an error state ('loadLow', 'loadHigh', 'overLoad', 'readError', or 'noComm'). This trap is repeated periodically while the slp1OutletLoadStatus remains in an error state. If the slp1OutletLoadStatus returns to a non-error state ('normal' or 'notOn'), this trap is sent once more with the non-error slp1OutletLoadStatus, and then stops being repeated.")
slp1OutletChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 6)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1OutletID"), ("SLP1-MIB", "slp1OutletName"), ("SLP1-MIB", "slp1OutletStatus"), ("SLP1-MIB", "slp1OutletControlState"))
if mibBuilder.loadTexts: slp1OutletChangeEvent.setStatus('current')
if mibBuilder.loadTexts: slp1OutletChangeEvent.setDescription("Outlet on/off change event. If enabled, this trap is sent when the slp1OutletStatus changes from any 'on' state ('on', 'onWait' or 'onError') to any 'off' state ('off', 'offWait' or 'offError'), and vice-versa.")
slp1EnvMonStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 7)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1EnvMonID"), ("SLP1-MIB", "slp1EnvMonName"), ("SLP1-MIB", "slp1EnvMonStatus"))
if mibBuilder.loadTexts: slp1EnvMonStatusEvent.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonStatusEvent.setDescription("Environmental monitor status event. If enabled, this trap is sent when the slp1EnvMonStatus indicates an error state ('noComm'). This trap is repeated periodically while the slp1EnvMonStatus remains in an error state. If the slp1EnvMonStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1EnvMonStatus, and then stops being repeated. While the slp1EnvMonStatus indicates an error state, all status traps are suppressed for the water sensor, ADC, temperature/humudity sensors, and contact closures on the environmental monitor.")
slp1EnvMonWaterSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 8)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1EnvMonID"), ("SLP1-MIB", "slp1EnvMonWaterSensorName"), ("SLP1-MIB", "slp1EnvMonWaterSensorStatus"))
if mibBuilder.loadTexts: slp1EnvMonWaterSensorEvent.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonWaterSensorEvent.setDescription("Environmental monitor water sensor event. If enabled, this trap is sent when the slp1EnvMonWaterSensorStatus indicates an error state ('alarm'). This trap is repeated periodically while the slp1EnvMonWaterSensorStatus remains in an error state. If the slp1EnvMonWaterSensorStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1EnvMonWaterSensorStatus, and then stops being repeated.")
slp1EnvMonADCEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 9)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1EnvMonID"), ("SLP1-MIB", "slp1EnvMonADCName"), ("SLP1-MIB", "slp1EnvMonADCStatus"), ("SLP1-MIB", "slp1EnvMonADCCount"), ("SLP1-MIB", "slp1EnvMonADCLowThresh"), ("SLP1-MIB", "slp1EnvMonADCHighThresh"))
if mibBuilder.loadTexts: slp1EnvMonADCEvent.setStatus('current')
if mibBuilder.loadTexts: slp1EnvMonADCEvent.setDescription("Environmental monitor analog-to-digital converter event. If enabled, this trap is sent when the slp1EnvMonADCStatus indicates an error state ('countLow' or 'countHigh'). This trap is repeated periodically while the slp1EnvMonADCStatus remains in an error state. If the slp1EnvMonADCStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1EnvMonADCStatus, and then stops being repeated.")
slp1TempHumidSensorStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 10)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1TempHumidSensorID"), ("SLP1-MIB", "slp1TempHumidSensorName"), ("SLP1-MIB", "slp1TempHumidSensorStatus"))
if mibBuilder.loadTexts: slp1TempHumidSensorStatusEvent.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorStatusEvent.setDescription("Temperature/humidity sensor status event. If enabled, this trap is sent when the slp1TempHumidSensorStatus indicates an error state ('lost'). This trap is repeated periodically while the slp1TempHumidSensorStatus remains in an error state. If the slp1TempHumidSensorStatus returns to a non-error state ('found'), this trap is sent once more with the non-error slp1TempHumidSensorStatus, and then stops being repeated. While the slp1TempHumidSensorStatus indicates an error state, all temperature and humidity status traps are suppressed for the temperature/humudity sensor.")
slp1TempHumidSensorTempEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 11)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1TempHumidSensorID"), ("SLP1-MIB", "slp1TempHumidSensorName"), ("SLP1-MIB", "slp1TempHumidSensorTempStatus"), ("SLP1-MIB", "slp1TempHumidSensorTempValue"), ("SLP1-MIB", "slp1TempHumidSensorTempLowThresh"), ("SLP1-MIB", "slp1TempHumidSensorTempHighThresh"))
if mibBuilder.loadTexts: slp1TempHumidSensorTempEvent.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorTempEvent.setDescription("Temperature/humidity sensor temperature event. If enabled, this trap is sent when the slp1TempHumidSensorTempStatus indicates an error state ('tempLow' or 'tempHigh'). This trap is repeated periodically while the slp1TempHumidSensorTempStatus remains in an error state. If the slp1TempHumidSensorTempStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1TempHumidSensorTempStatus, and then stops being repeated.")
slp1TempHumidSensorHumidEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 12)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1TempHumidSensorID"), ("SLP1-MIB", "slp1TempHumidSensorName"), ("SLP1-MIB", "slp1TempHumidSensorHumidStatus"), ("SLP1-MIB", "slp1TempHumidSensorHumidValue"), ("SLP1-MIB", "slp1TempHumidSensorHumidLowThresh"), ("SLP1-MIB", "slp1TempHumidSensorHumidHighThresh"))
if mibBuilder.loadTexts: slp1TempHumidSensorHumidEvent.setStatus('current')
if mibBuilder.loadTexts: slp1TempHumidSensorHumidEvent.setDescription("Temperature/humidity sensor humidity event. If enabled, this trap is sent when the slp1TempHumidSensorHumidStatus indicates an error state ('humidLow' or 'humidHigh'). This trap is repeated periodically while the slp1TempHumidSensorHumidStatus remains in an error state. If the slp1TempHumidSensorHumidStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1TempHumidSensorHumidStatus, and then stops being repeated.")
slp1ContactClosureEvent = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 9, 1, 100, 0, 13)).setObjects(("SLP1-MIB", "slp1SystemLocation"), ("SLP1-MIB", "slp1ContactClosureID"), ("SLP1-MIB", "slp1ContactClosureName"), ("SLP1-MIB", "slp1ContactClosureStatus"))
if mibBuilder.loadTexts: slp1ContactClosureEvent.setStatus('current')
if mibBuilder.loadTexts: slp1ContactClosureEvent.setDescription("Contact closure event. If enabled, this trap is sent when the slp1ContactClosureStatus indicates an error state ('alarm'). This trap is repeated periodically while the slp1ContactClosureStatus remains in an error state. If the slp1ContactClosureStatus returns to a non-error state ('normal'), this trap is sent once more with the non-error slp1ContactClosureStatus, and then stops being repeated.")
mibBuilder.exportSymbols("SLP1-MIB", slp1InfeedEntry=slp1InfeedEntry, slp1InfeedLoadStatus=slp1InfeedLoadStatus, slp1SystemVersion=slp1SystemVersion, slp1InfeedStatus=slp1InfeedStatus, slp1ContactClosureName=slp1ContactClosureName, slp1SystemTowerCount=slp1SystemTowerCount, slp1OutletStatusEvent=slp1OutletStatusEvent, slp1OutletLoadStatus=slp1OutletLoadStatus, lantronix=lantronix, slp1InfeedLoadEvent=slp1InfeedLoadEvent, slp1OutletLoadEvent=slp1OutletLoadEvent, slp1TempHumidSensorTempStatus=slp1TempHumidSensorTempStatus, slp1TempHumidSensorTable=slp1TempHumidSensorTable, slp1TowerID=slp1TowerID, slp1TempHumidSensorHumidStatus=slp1TempHumidSensorHumidStatus, slp1ContactClosureStatus=slp1ContactClosureStatus, slp1TempHumidSensorID=slp1TempHumidSensorID, slp1TempHumidSensorTempLowThresh=slp1TempHumidSensorTempLowThresh, slp1OutletEntry=slp1OutletEntry, slp1EnvMonTable=slp1EnvMonTable, slp1TowerStatus=slp1TowerStatus, slp1OutletIndex=slp1OutletIndex, slp1InfeedOutletCount=slp1InfeedOutletCount, slp1TempHumidSensorEntry=slp1TempHumidSensorEntry, slp1ContactClosureEvent=slp1ContactClosureEvent, slp1TowerTable=slp1TowerTable, slp1OutletLoadHighThresh=slp1OutletLoadHighThresh, slp1TempHumidSensorTempValue=slp1TempHumidSensorTempValue, slp1ContactClosureID=slp1ContactClosureID, slp=slp, slp1SystemLocation=slp1SystemLocation, slp1Events=slp1Events, slp1TempHumidSensorStatus=slp1TempHumidSensorStatus, slp1EnvMonTempHumidSensorCount=slp1EnvMonTempHumidSensorCount, slp1EnvMonID=slp1EnvMonID, slp1InfeedStatusEvent=slp1InfeedStatusEvent, slp1=slp1, slp1EnvMonADCHighThresh=slp1EnvMonADCHighThresh, slp1InfeedTable=slp1InfeedTable, slp1TempHumidSensorIndex=slp1TempHumidSensorIndex, slp1TowerIndex=slp1TowerIndex, slp1EnvMonADCName=slp1EnvMonADCName, slp1ContactClosureTable=slp1ContactClosureTable, slp1SystemEnvMonCount=slp1SystemEnvMonCount, slp1OutletLoadLowThresh=slp1OutletLoadLowThresh, slp1TempHumidSensorName=slp1TempHumidSensorName, slp1TowerEntry=slp1TowerEntry, slp1OutletTable=slp1OutletTable, slp1TempHumidSensorHumidValue=slp1TempHumidSensorHumidValue, slp1OutletID=slp1OutletID, slp1TempHumidSensorHumidLowThresh=slp1TempHumidSensorHumidLowThresh, slp1InfeedLoadHighThresh=slp1InfeedLoadHighThresh, slp1TowerInfeedCount=slp1TowerInfeedCount, slp1EnvMonADCCount=slp1EnvMonADCCount, slp1TowerStatusEvent=slp1TowerStatusEvent, slp1EnvMonStatusEvent=slp1EnvMonStatusEvent, slp1EnvMonADCLowThresh=slp1EnvMonADCLowThresh, slp1EnvMonWaterSensorEvent=slp1EnvMonWaterSensorEvent, slp1OutletName=slp1OutletName, slp1EnvMonADCEvent=slp1EnvMonADCEvent, slp1TempHumidSensorTempEvent=slp1TempHumidSensorTempEvent, slp1SystemNICSerialNumber=slp1SystemNICSerialNumber, slp1InfeedLoadValue=slp1InfeedLoadValue, slp1OutletLoadValue=slp1OutletLoadValue, slp1InfeedIndex=slp1InfeedIndex, slp1SystemTables=slp1SystemTables, slp1EnvMonStatus=slp1EnvMonStatus, slp1Traps=slp1Traps, slp1EnvMonIndex=slp1EnvMonIndex, slp1EnvMonWaterSensorStatus=slp1EnvMonWaterSensorStatus, slp1OutletChangeEvent=slp1OutletChangeEvent, slp1TempHumidSensorStatusEvent=slp1TempHumidSensorStatusEvent, slp1TempHumidSensorTempHighThresh=slp1TempHumidSensorTempHighThresh, slp1OutletControlAction=slp1OutletControlAction, slp1EnvMonADCStatus=slp1EnvMonADCStatus, slp1SystemGroup=slp1SystemGroup, slp1EnvMonEntry=slp1EnvMonEntry, slp1EnvMonWaterSensorName=slp1EnvMonWaterSensorName, slp1InfeedID=slp1InfeedID, slp1EnvMonContactClosureCount=slp1EnvMonContactClosureCount, slp1TempHumidSensorHumidHighThresh=slp1TempHumidSensorHumidHighThresh, slp1EnvMonName=slp1EnvMonName, PYSNMP_MODULE_ID=slp1, slp1InfeedName=slp1InfeedName, slp1ContactClosureIndex=slp1ContactClosureIndex, slp1OutletCapabilities=slp1OutletCapabilities, slp1OutletControlState=slp1OutletControlState, products=products, slp1TempHumidSensorHumidEvent=slp1TempHumidSensorHumidEvent, slp1TowerName=slp1TowerName, slp1ContactClosureEntry=slp1ContactClosureEntry, slp1OutletStatus=slp1OutletStatus, slp1InfeedCapabilities=slp1InfeedCapabilities)
