#
# PySNMP MIB module JUNIPER-IFOTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IFOTN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
JnxoptIfOTNODUkTcmAlarms, JnxoptIfOTNOChAlarms = mibBuilder.importSymbols("JNX-OPT-IF-EXT-MIB", "JnxoptIfOTNODUkTcmAlarms", "JnxoptIfOTNOChAlarms")
jnxIfOtnMibRoot, jnxIfOtnNotifications = mibBuilder.importSymbols("JUNIPER-SMI", "jnxIfOtnMibRoot", "jnxIfOtnNotifications")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, IpAddress, Gauge32, MibIdentifier, ObjectIdentity, NotificationType, Bits, Counter32, Counter64, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "ObjectIdentity", "NotificationType", "Bits", "Counter32", "Counter64", "ModuleIdentity", "TimeTicks")
TruthValue, TextualConvention, DateAndTime, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DateAndTime", "DisplayString", "RowStatus")
jnxIfOtnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1))
jnxIfOtnMib.setRevisions(('2016-09-12 20:15', '2015-06-24 12:27', '2012-01-27 00:00', '2012-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxIfOtnMib.setRevisionsDescriptions((' Added OTN table entries for handling sub-port in the interface name. With suffix OCH2', 'This MIB module defines objects used for managing the OTN interface for Juniper products.', 'Added OTN Alarms and PM data.', 'Initial revision.',))
if mibBuilder.loadTexts: jnxIfOtnMib.setLastUpdated('201609122015Z')
if mibBuilder.loadTexts: jnxIfOtnMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxIfOtnMib.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxIfOtnMib.setDescription(' Deprecated OCh2 tables and entries')
class JnxIfAdminStates(TextualConvention, Integer32):
    description = 'Admin states for an interface'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxAdminStateInService", 1), ("jnxAdminStateInServiceMA", 2), ("jnxAdminStateOutofService", 3), ("jnxAdminStateOutofServiceMA", 4))

class JnxIfOperStates(TextualConvention, Integer32):
    description = 'Operational states for an interface'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxOperStateInit", 1), ("jnxOperStateNormal", 2), ("jnxOperStateFault", 3), ("jnxOperStateDegraded", 4))

class JnxIfOtnRate(TextualConvention, Integer32):
    description = 'Rates for an interface '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("otu0", 1), ("otu1", 2), ("otu2", 3), ("otu2e", 4), ("otu3", 5), ("otu4", 6), ("otu1e", 7), ("otu5", 8))

class JnxIfOtnFecType(TextualConvention, Integer32):
    description = 'fec modes of an interface '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("nofec", 0), ("gfec", 1), ("efecI2", 2), ("efecI3", 3), ("efecI4", 4), ("efecI5", 5), ("efecI6", 6), ("efecI7", 7), ("efecI8", 8), ("efecI9", 9), ("gfecandsdfec", 10), ("sdfec", 11), ("hgfec", 12))

class JnxIfOtnLayer(TextualConvention, Integer32):
    description = ' Layer which describes the table'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxOch", 1), ("jnxOTUk", 2), ("jnxODUk", 3), ("jnxTCM", 4))

class JnxIfOtnType(TextualConvention, Integer32):
    description = ' Near End or Far End '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("jnxNearEnd", 1), ("jnxFarEnd", 2))

class JnxIfOtnDirection(TextualConvention, Integer32):
    description = ' Direction for the entities in the table'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3))

class JnxIfOtnSeverity(TextualConvention, Integer32):
    description = ' Severity of the Notification'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4))

class JnxIfOtnServiceStateAction(TextualConvention, Integer32):
    description = " Notification's action on the service state"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("jnxNotSupported", 0), ("jnxNonServiceAffecting", 1), ("jnxServiceAffecting", 2))

jnxIfOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1))
jnxIfOtnOCh2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2))
jnxIfOtnOChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1), )
if mibBuilder.loadTexts: jnxIfOtnOChCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChCfgTable.setDescription('Information about the Otn OCh Config Table. ')
jnxIfOtnOChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnOChCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChCfgEntry.setDescription('A conceptual row that contains of the Otn OCh Config Table.')
jnxIfOtnOChCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChCfgContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf..')
jnxIfOtnOChCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChCfgL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxIfOtnOChCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChCfgL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxIfOtnOChCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChCfgL3Index.setDescription('The level three index associated with this subject.. eg port. ')
jnxIfOtnLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnLocalLoopback.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnLocalLoopback.setDescription('This is the local loopback at the Line (after the optics).')
jnxIfOtnLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnLineLoopback.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnLineLoopback.setDescription('This is the line loopback at the Line.')
jnxIfOtnPayloadLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnPayloadLoopback.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnPayloadLoopback.setDescription('This is the Payload loopback before the optics.')
jnxIfOtnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 8), JnxIfAdminStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnAdminState.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnAdminState.setDescription('The Admin state of this interface')
jnxIfOtnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 9), JnxIfOperStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOperState.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOperState.setDescription('The operational state of this interface')
jnxIfOtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnIndex.setDescription('The interface ifIndex of this interface')
jnxIfOtnOChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 11), Bits().clone(namedValues=NamedValues(("los", 0), ("lof", 1), ("lom", 2), ("wavelengthlockerr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOChStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChStatus.setDescription('The interface status at the OCh layer.')
jnxIfOtnOChPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOChPortMode.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOChPortMode.setDescription('The Port Mode for this interface 0 - default (not applicable) 1 - lan 2 - wan 3 - gfp ')
jnxIfOtnOTUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2), )
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgTable.setDescription('Information about the Otn OTUk config table. ')
jnxIfOtnOTUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgEntry.setDescription('A conceptual row that contains the Otn OTUk config table. ')
jnxIfOtnOTUkCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf.')
jnxIfOtnOTUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxIfOtnOTUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxIfOtnOTUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL3Index.setDescription('The level three index associated with this subject.. eg port. ')
jnxIfOtnOTUkCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 5), JnxIfOtnRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgRate.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgRate.setDescription(' This is the rate for the interface and the rates depend on the interface/fru type. ')
jnxIfOtnOTUkCfgFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 6), JnxIfOtnFecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgFecMode.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgFecMode.setDescription(' This is the Fec type in the OTU frame and the selection depends on the interface/fru type. ')
jnxIfOtnOTUkEnableAutoFrrByteInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableAutoFrrByteInsert.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableAutoFrrByteInsert.setDescription(' This will enable/disable the automatic insertion of the frr SF/SD byte in the overhead bytes(RES) ')
jnxIfOtnOTUkEnableBERFrrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableBERFrrSupport.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableBERFrrSupport.setDescription(' This will enable/disable the FRR support for BER ')
jnxIfOtnOTUkPreFecBERThresholdMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdMantissa.setDescription(' This will set the BER threshold(mantissa), which when crossed will trigger Signal Degrade. ')
jnxIfOtnOTUkPreFecBERThresholdExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdExponent.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdExponent.setDescription(' This will set the BER threshold(exponent), which when crossed will trigger Signal Degrade. ')
jnxIfOtnOTUkPreFecBERThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 11), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdTime.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdTime.setDescription(' The collection times (1ms - 1sec) to calculate the BER. ')
jnxIfOtnOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkTIMActEnabled.setDescription(' Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. The default value of this object is false(2). ')
jnxIfOtnOTUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkTxTTI.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkTxTTI.setDescription(' The Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined ')
jnxIfOtnOTUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOTUkRxTTI.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkRxTTI.setDescription(' The Receive Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined ')
jnxIfOtnOTUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxSapi.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxSapi.setDescription(' Expected receive SAPI. ')
jnxIfOtnOTUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxDapi.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxDapi.setDescription(' Expected receive DAPI. ')
jnxIfOtnOTUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 17), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("fecexcessive", 9), ("fecdegrade", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOTUkStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkStatus.setDescription('The interface status at the OTUk layer.')
jnxIfOtnOTUkPreFecBERThresholdClearMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearMantissa.setDescription(' This will set the BER threshold(mantissa) for clear signal degrade condition, which signal degrade condition will be cleared when Pre-Fec error count is below the clear threshold error count. ')
jnxIfOtnOTUkPreFecBERThresholdClearExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearExponent.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearExponent.setDescription(' This will set the BER threshold(exponent) for clear signal degrade condition, which signal degrade condition will be cleared when Pre-Fec error count is below the clear threshold error count. ')
jnxIfOtnODUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3), )
if mibBuilder.loadTexts: jnxIfOtnODUkCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkCfgTable.setDescription('Information about the Otn ODUk config table. ')
jnxIfOtnODUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkCfgEntry.setDescription('A conceptual row that contains information about the Otn ODUk config. ')
jnxIfOtnODUkCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkCfgContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf..')
jnxIfOtnODUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxIfOtnODUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxIfOtnODUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL3Index.setDescription('The level three index associated with this subject.. eg port. ')
jnxIfOtnODUkAPSPCC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC0.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC0.setDescription(' Read/Write APS PCC byte 0 for this ODUk only. ')
jnxIfOtnODUkAPSPCC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC1.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC1.setDescription(' Read/Write APS PCC byte 1 for this ODUk only. ')
jnxIfOtnODUkAPSPCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC2.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC2.setDescription(' Read/Write APS PCC byte 2 for this ODUk only. ')
jnxIfOtnODUkAPSPCC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC3.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC3.setDescription(' Read/Write APS PCC byte 3 for this ODUk only. ')
jnxIfOtnODUkPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadType.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadType.setDescription(' Read/Write Payload Type for ODUk only. ')
jnxIfOtnODUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTIMActEnabled.setDescription(' Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. The default value of this object is false(2). ')
jnxIfOtnODUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTxTTI.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTxTTI.setDescription(' The Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnODUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkRxTTI.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkRxTTI.setDescription(' The Receive Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnODUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxSapi.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxSapi.setDescription(' Expected receive SAPI for this layer. ')
jnxIfOtnODUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxDapi.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxDapi.setDescription(' Expected receive DAPI for this layer. ')
jnxIfOtnODUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 15), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("csf", 9), ("oci", 10), ("lck", 11), ("ltc", 12), ("ptm", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkStatus.setDescription('The status at the ODUk layer Only some of these alarms are valid for the TCM layer ')
jnxIfOtnODUkRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkRxPayloadType.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkRxPayloadType.setDescription(' Receive Payload Type for ODUk only. ')
jnxIfOtnTcmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4), )
if mibBuilder.loadTexts: jnxIfOtnTcmCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgTable.setDescription('Information about the Otn TCM config table. ')
jnxIfOtnTcmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgLevel"))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgEntry.setDescription('A conceptual row that contains information about the Otn Tcm config. ')
jnxIfOtnTcmCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf.')
jnxIfOtnTcmCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxIfOtnTcmCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxIfOtnTcmCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL3Index.setDescription('The level three index associated with this subject.. eg port. ')
jnxIfOtnTcmCfgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgLevel.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmCfgLevel.setDescription(' The TCM level for the Table ')
jnxIfOtnTCMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTCMEnable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTCMEnable.setDescription(' Enable this TCM layer (only for TCM layers) ')
jnxIfOtnTcmTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmTxTTI.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmTxTTI.setDescription(' The Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnTcmRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTcmRxTTI.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmRxTTI.setDescription(' The Receive Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnTcmExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxSapi.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxSapi.setDescription(' Expected receive SAPI for this layer. ')
jnxIfOtnTcmExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxDapi.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxDapi.setDescription(' Expected receive DAPI for this layer. ')
jnxIfOtnTcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 11), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("biae", 6), ("tsf", 7), ("ssf", 8), ("ltc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTcmStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTcmStatus.setDescription(' The status at the TCM layer. ')
jnxIfOtnODUkTcmTestTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5), )
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTable.setDescription('Information about the Otn ODUk Test function table. ')
jnxIfOtnODUkTcmTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmTestLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmTestTCMLevel"))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestEntry.setDescription('A conceptual row that contains information about the Otn ODUk Test function. ')
jnxIfOtnODUkTcmTestLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 1), JnxIfOtnLayer())
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestLayer.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestLayer.setDescription(' The layer OTU/ODU/TCM layer for the alarm ')
jnxIfOtnODUkTcmTestTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTCMLevel.setDescription(' For ODUk will be this will be 0 If layer is TCM then this will give the TCM level 1..6. ')
jnxIfOtnODUkTcmInsertAis = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertAis.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertAis.setDescription(' Insert ODU Ais into OTN stream. ')
jnxIfOtnODUkTcmInsertLck = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertLck.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertLck.setDescription(' Insert ODU Lck into OTN stream. ')
jnxIfOtnODUkTcmInsertOci = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertOci.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertOci.setDescription(' Insert ODU Oci into OTN stream. ')
jnxIfOtnODUkPayloadPRBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBS.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBS.setDescription(' Insert Payload PRBS, For ODUK layer and TCM level is 0. ')
jnxIfOtnODUkPayloadPRBSResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBSResult.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBSResult.setDescription(' Result of the Payload PRBS . ')
jnxIfOtnODUkTcmDMTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6), )
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMTable.setDescription('Table for Otn ODUk/TCM Delay Measurement config table. ')
jnxIfOtnODUkTcmDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmDMLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmDMLevel"))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMEntry.setDescription('A conceptual row that contains information about the Delay Measurement test table. ')
jnxIfOtnODUkTcmDMLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 1), JnxIfOtnLayer())
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLayer.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLayer.setDescription(' The layer OTU/ODU/TCM layer for the alarm ')
jnxIfOtnODUkTcmDMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLevel.setDescription(' For ODUk will be this will be 0 If layer is TCM then this will give the TCM level 1..6. ')
jnxIfOtnDMConnectionMonitoringEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMConnectionMonitoringEndpoint.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnDMConnectionMonitoringEndpoint.setDescription(' Originate Connection Monitoring Endpoint for the Delay Measurement ')
jnxIfOtnDMBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMBypass.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnDMBypass.setDescription(' Act as tandem, passing Dm value through node ')
jnxIfOtnDMPersistFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMPersistFrames.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnDMPersistFrames.setDescription(' Number of consequtive frames required to declare Dm Complete ')
jnxIfOtnDMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMEnable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnDMEnable.setDescription(' Start/Stop the DM measurement ')
jnxIfOtnNotificationTrigDefaultHoldtimeUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeUp.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeUp.setDescription(' This object will indicate the time (ms) for the defect to persist before it is declared an alarm. ')
jnxIfOtnNotificationTrigDefaultHoldtimeDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeDown.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeDown.setDescription(' This object will indicate the time (ms) for the defect to absent before the alarm is cleared. ')
jnxIfOtnNotificationTrigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9), )
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTable.setDescription('Information about the otn Alarm/Alart/Info trigger table. ')
jnxIfOtnNotificationTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigTCMLevel"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigAlmId"))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigEntry.setDescription('A conceptual row that contains information about the Otn Alarm Trigger Table. ')
jnxIfOtnNotificationTrigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf.')
jnxIfOtnNotificationTrigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxIfOtnNotificationTrigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxIfOtnNotificationTrigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL3Index.setDescription('The level three index associated with this subject.. eg port. ')
jnxIfOtnNotificationTrigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 5), JnxIfOtnLayer())
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigLayer.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigLayer.setDescription(' The layer OTU/ODU/TCM layer for the alarm ')
jnxIfOtnNotificationTrigTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTCMLevel.setDescription(' For OCh/OTUk/ODUk will be this will be 0 If layer is TCM then this will give the TCM level 1..6. ')
jnxIfOtnNotificationTrigAlmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigAlmId.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigAlmId.setDescription(" This will be the ID of Alarm for that layer 'JnxoptIfOTNOChAlarms'/'JnxoptIfOTNODUkTcmAlarms'. ")
jnxIfOtnNotificationTrigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 8), JnxIfOtnSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigSeverity.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigSeverity.setDescription(' This will be the Severity of the Notification for that layer. ')
jnxIfOtnNotificationTrigIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigIgnore.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigIgnore.setDescription(' This object will ignore the alarm when set. ')
jnxIfOtnNotificationTrigHoldtimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeUp.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeUp.setDescription(' This object will indicate the time (ms) for the defect to persist before it is declared an alarm. ')
jnxIfOtnNotificationTrigHoldtimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeDown.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeDown.setDescription(' This object will indicate the time (ms) for the defect is absent before the alarm is cleared. ')
jnxIfOtnTrigServiceStateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 12), JnxIfOtnServiceStateAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTrigServiceStateAction.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnTrigServiceStateAction.setDescription(' This will indicate whether this alarm is service affecting or not . ')
jnxOtnClearAllPMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearAllPMs.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearAllPMs.setDescription(' To clear all Performance monitoring counters on OTN interfaces ')
jnxOtnClearInterfacePMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 11), TruthValue()).setMaxAccess("readwrite").setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearInterfacePMs.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearInterfacePMs.setDescription(' To clear all Performance monitoring counters on this OTN interfaces ')
jnxOtnClearInterfaceCurrentPM = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 12), TruthValue()).setMaxAccess("readwrite").setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearInterfaceCurrentPM.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearInterfaceCurrentPM.setDescription(' To clear the current Performance monitoring counters on this OTN interfaces ')
jnxOtnClearIfPMsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearIfPMsTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearIfPMsTable.setDescription(' To clear OTN Performance monitoring counters on this OTN interfaces ')
jnxOtnClearIfPMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearIfPMsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearIfPMsEntry.setDescription('A conceptual row that s used to clear the OTN PM Table.')
jnxOtnClearCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearCurrent.setDescription(" 1- to clear all the current OTN PM's for this interface ")
jnxOtnClearInterfaceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearInterfaceInterval.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearInterfaceInterval.setDescription(" 1- to clear all the OTN PM's intervals(1-96) for this interface ")
jnxOtnClearInterfaceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearInterfaceDay.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearInterfaceDay.setDescription(" 1 - to clear all the Current Day and Previous Day OTN PM's for this interface ")
jnxOtnClearInterfaceAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearInterfaceAll.setStatus('current')
if mibBuilder.loadTexts: jnxOtnClearInterfaceAll.setDescription(" 1 - to clear all the OTN PM's for this interface ")
jnxIfOtnOCh2CfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1), )
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgTable.setDescription('Table was for 48x10G/12x40G gingerALE PIC in 10G mode. It is not supported hence marked as obsolete. Information about the Otn OCh2 Config Table. ')
jnxIfOtnOCh2CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL4Index"))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgEntry.setDescription('A conceptual row that contains of the Otn OCh2 Config Table.')
jnxIfOtnOCh2CfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgContainerIndex.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgContainerIndex.setDescription('Container Index associated with the object instance.')
jnxIfOtnOCh2CfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL1Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL1Index.setDescription('FPC slot number of the interface.')
jnxIfOtnOCh2CfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL2Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL2Index.setDescription('PIC slot number of the interface.')
jnxIfOtnOCh2CfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL3Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL3Index.setDescription('Port number of the interface.')
jnxIfOtnOCh2CfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL4Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL4Index.setDescription('Sub-Port number of the interface.')
jnxIfOtnOCh2LocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2LocalLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2LocalLoopback.setDescription('This is the local loopback at the Line (after the optics).')
jnxIfOtnOCh2LineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2LineLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2LineLoopback.setDescription('This is the line loopback at the Line.')
jnxIfOtnOCh2PayloadLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2PayloadLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2PayloadLoopback.setDescription('This is the Payload loopback before the optics.')
jnxIfOtnOCh2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 9), JnxIfAdminStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2AdminState.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2AdminState.setDescription('The Admin state of this interface')
jnxIfOtnOCh2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 10), JnxIfOperStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2OperState.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OperState.setDescription('The operational state of this interface')
jnxIfOtnOCh2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2Index.setDescription('The interface ifIndex of this interface')
jnxIfOtnOCh2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 12), Bits().clone(namedValues=NamedValues(("los", 0), ("lof", 1), ("lom", 2), ("wavelengthlockerr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2Status.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOCh2Status.setDescription('The interface status at the OCh layer.')
jnxIfOtnOCh2PortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2PortMode.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2PortMode.setDescription('The Port Mode for this interface 0 - default (not applicable) 1 - lan 2 - wan 3 - gfp ')
jnxIfOtnOCh2OTUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2), )
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgTable.setDescription('Table was for 48x10G/12x40G gingerALE PIC in 10G mode. It is not supported hence marked as obsolete. Information about the Otn OCh2 OTUk config table. ')
jnxIfOtnOCh2OTUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgContIndx"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL4Index"))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgEntry.setDescription('A conceptual row that contains the Otn OCh2 OTUk config table. ')
jnxIfOtnOCh2OTUkCfgContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgContIndx.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgContIndx.setDescription('Container Index associated with the object instance. ')
jnxIfOtnOCh2OTUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL1Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL1Index.setDescription('FPC slot number of the interface. ')
jnxIfOtnOCh2OTUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL2Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL2Index.setDescription('PIC slot number of the interface. ')
jnxIfOtnOCh2OTUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL3Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL3Index.setDescription('Port number of the interface. ')
jnxIfOtnOCh2OTUkCfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL4Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL4Index.setDescription('Port number of the interface. ')
jnxIfOtnOCh2OTUkCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 6), JnxIfOtnRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgRate.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgRate.setDescription(' This is the rate for the interface and the rates depend on the interface/fru type. ')
jnxIfOtnOCh2OTUkCfgFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 7), JnxIfOtnFecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgFecMode.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgFecMode.setDescription(' This is the Fec type in the OTU frame and the selection depends on the interface/fru type. ')
jnxIfOtnOCh2OTUkEnAutoFrrByteIns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkEnAutoFrrByteIns.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkEnAutoFrrByteIns.setDescription(' This will enable/disable the automatic insertion of the frr SF/SD byte in the overhead bytes(RES) ')
jnxIfOtnOCh2OTUkEnBERFrrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkEnBERFrrSupport.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkEnBERFrrSupport.setDescription(' This will enable/disable the FRR support for BER ')
jnxIfOtnOCh2OTUkPreFecBERThMant = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThMant.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThMant.setDescription(' This will set the BER threshold(mantissa), which when crossed will trigger Signal Degrade. ')
jnxIfOtnOCh2OTUkPreFecBERThExpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThExpo.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThExpo.setDescription(' This will set the BER threshold(exponent), which when crossed will trigger Signal Degrade. ')
jnxIfOtnOCh2OTUkPreFecBERThTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 12), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThTime.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThTime.setDescription(' The collection times (1ms - 1sec) to calculate the BER. ')
jnxIfOtnOCh2OTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkTIMActEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkTIMActEnabled.setDescription(' Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. The default value of this object is false(2). ')
jnxIfOtnOCh2OTUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkTxTTI.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkTxTTI.setDescription(' The Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined ')
jnxIfOtnOCh2OTUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkRxTTI.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkRxTTI.setDescription(' The Receive Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined ')
jnxIfOtnOCh2OTUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkExpectedRxSapi.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkExpectedRxSapi.setDescription(' Expected receive SAPI. ')
jnxIfOtnOCh2OTUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkExpectedRxDapi.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkExpectedRxDapi.setDescription(' Expected receive DAPI. ')
jnxIfOtnOCh2OTUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 18), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("fecexcessive", 9), ("fecdegrade", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkStatus.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkStatus.setDescription('The interface status at the OTUk layer.')
jnxIfOtnOCh2OTUkPreFecBERThClrMn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThClrMn.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThClrMn.setDescription(' This will set the BER threshold(mantissa) for clear signal degrade condition, which signal degrade condition will be cleared when Pre-Fec error count is below the clear threshold error count. ')
jnxIfOtnOCh2OTUkPreFecBERThClrEx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThClrEx.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThClrEx.setDescription(' This will set the BER threshold(exponent) for clear signal degrade condition, which signal degrade condition will be cleared when Pre-Fec error count is below the clear threshold error count. ')
jnxIfOtnOCh2ODUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3), )
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgTable.setDescription('Table was for 48x10G/12x40G gingerALE PIC in 10G mode. It is not supported hence marked as obsolete. Information about the Otn ODUk config table. ')
jnxIfOtnOCh2ODUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgContIndx"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL4Index"))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgEntry.setDescription('A conceptual row that contains information about the Otn ODUk config. ')
jnxIfOtnOCh2ODUkCfgContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgContIndx.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgContIndx.setDescription('Container Index associated with the Object Instance. ')
jnxIfOtnOCh2ODUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL1Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL1Index.setDescription('FPC slot number of the interface. ')
jnxIfOtnOCh2ODUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL2Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL2Index.setDescription('PIC slot number of the interface. ')
jnxIfOtnOCh2ODUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL3Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL3Index.setDescription('Port number of the interface. ')
jnxIfOtnOCh2ODUkCfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL4Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL4Index.setDescription('Sub-Port number of the interface. ')
jnxIfOtnOCh2ODUkAPSPCC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC0.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC0.setDescription(' Read/Write APS PCC byte 0 for this ODUk only. ')
jnxIfOtnOCh2ODUkAPSPCC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC1.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC1.setDescription(' Read/Write APS PCC byte 1 for this ODUk only. ')
jnxIfOtnOCh2ODUkAPSPCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC2.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC2.setDescription(' Read/Write APS PCC byte 2 for this ODUk only. ')
jnxIfOtnOCh2ODUkAPSPCC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC3.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC3.setDescription(' Read/Write APS PCC byte 3 for this ODUk only. ')
jnxIfOtnOCh2ODUkPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkPayloadType.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkPayloadType.setDescription(' Read/Write Payload Type for ODUk only. ')
jnxIfOtnOCh2ODUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkTIMActEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkTIMActEnabled.setDescription(' Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. The default value of this object is false(2). ')
jnxIfOtnOCh2ODUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkTxTTI.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkTxTTI.setDescription(' The Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnOCh2ODUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkRxTTI.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkRxTTI.setDescription(' The Receive Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnOCh2ODUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkExpectedRxSapi.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkExpectedRxSapi.setDescription(' Expected receive SAPI for this layer. ')
jnxIfOtnOCh2ODUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkExpectedRxDapi.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkExpectedRxDapi.setDescription(' Expected receive DAPI for this layer. ')
jnxIfOtnOCh2ODUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 16), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("csf", 9), ("oci", 10), ("lck", 11), ("ltc", 12), ("ptm", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkStatus.setDescription('The status at the ODUk layer Only some of these alarms are valid for the TCM layer ')
jnxIfOtnOCh2ODUkRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkRxPayloadType.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkRxPayloadType.setDescription(' Receive Payload Type for ODUk only. ')
jnxIfOtnOCh2TcmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4), )
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgTable.setDescription('Table was for 48x10G/12x40G gingerALE PIC in 10G mode. It is not supported hence marked as obsolete. Information about the Otn TCM config table. ')
jnxIfOtnOCh2TcmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgContIndx"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL4Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgLevel"))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgEntry.setDescription('A conceptual row that contains information about the Otn Tcm config. ')
jnxIfOtnOCh2TcmCfgContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgContIndx.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgContIndx.setDescription('Container Index associated with the object.')
jnxIfOtnOCh2TcmCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL1Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL1Index.setDescription('FPC slot number of the interface.')
jnxIfOtnOCh2TcmCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL2Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL2Index.setDescription('PIC slot number of the interface.')
jnxIfOtnOCh2TcmCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL3Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL3Index.setDescription('Port number of the interface.')
jnxIfOtnOCh2TcmCfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL4Index.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL4Index.setDescription('Sub-Port number of the interface.')
jnxIfOtnOCh2TcmCfgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgLevel.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgLevel.setDescription(' The TCM level for the Table ')
jnxIfOtnOCh2TCMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TCMEnable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TCMEnable.setDescription(' Enable this TCM layer (only for TCM layers) ')
jnxIfOtnOCh2TcmTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmTxTTI.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmTxTTI.setDescription(' The Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnOCh2TcmRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmRxTTI.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmRxTTI.setDescription(' The Receive Trace TTI SAPI 0..15, DAPI 16..31 32 ..63 user defined for this layer. ')
jnxIfOtnOCh2TcmExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmExpectedRxSapi.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmExpectedRxSapi.setDescription(' Expected receive SAPI for this layer. ')
jnxIfOtnOCh2TcmExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmExpectedRxDapi.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmExpectedRxDapi.setDescription(' Expected receive DAPI for this layer. ')
jnxIfOtnOCh2TcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 12), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("biae", 6), ("tsf", 7), ("ssf", 8), ("ltc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmStatus.setStatus('obsolete')
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmStatus.setDescription(' The status at the TCM layer. ')
jnxIfOtnNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0))
jnxIfOtnNotificationAdminStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-IFOTN-MIB", "jnxIfOtnAdminState"))
if mibBuilder.loadTexts: jnxIfOtnNotificationAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationAdminStatus.setDescription('Notification of the admin state of the otn interface.')
jnxIfOtnNotificationOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-IFOTN-MIB", "jnxIfOtnOperState"))
if mibBuilder.loadTexts: jnxIfOtnNotificationOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxIfOtnNotificationOperStatus.setDescription('Notification of operational state of the otn interface')
mibBuilder.exportSymbols("JUNIPER-IFOTN-MIB", jnxIfOtnOCh2OTUkCfgL4Index=jnxIfOtnOCh2OTUkCfgL4Index, jnxIfOtnOCh2TcmExpectedRxDapi=jnxIfOtnOCh2TcmExpectedRxDapi, jnxIfOtnDMEnable=jnxIfOtnDMEnable, jnxIfOtnOCh2TcmCfgEntry=jnxIfOtnOCh2TcmCfgEntry, jnxIfOtnNotificationTrigL2Index=jnxIfOtnNotificationTrigL2Index, jnxIfOtnODUkAPSPCC0=jnxIfOtnODUkAPSPCC0, jnxIfOtnODUkTcmTestTable=jnxIfOtnODUkTcmTestTable, jnxIfOtnTcmTxTTI=jnxIfOtnTcmTxTTI, jnxIfOtnOCh2OTUkCfgL3Index=jnxIfOtnOCh2OTUkCfgL3Index, JnxIfAdminStates=JnxIfAdminStates, jnxIfOtnTcmStatus=jnxIfOtnTcmStatus, jnxIfOtnOCh2ODUkCfgContIndx=jnxIfOtnOCh2ODUkCfgContIndx, jnxIfOtnOTUkPreFecBERThresholdTime=jnxIfOtnOTUkPreFecBERThresholdTime, jnxIfOtnODUkTcmTestEntry=jnxIfOtnODUkTcmTestEntry, jnxIfOtnOTUkCfgL1Index=jnxIfOtnOTUkCfgL1Index, jnxIfOtnOCh2TcmExpectedRxSapi=jnxIfOtnOCh2TcmExpectedRxSapi, jnxIfOtnTcmCfgContainerIndex=jnxIfOtnTcmCfgContainerIndex, jnxIfOtnOCh2OTUkPreFecBERThTime=jnxIfOtnOCh2OTUkPreFecBERThTime, jnxIfOtnOCh2PortMode=jnxIfOtnOCh2PortMode, jnxOtnClearCurrent=jnxOtnClearCurrent, jnxIfOtnOTUkPreFecBERThresholdMantissa=jnxIfOtnOTUkPreFecBERThresholdMantissa, jnxIfOtnOTUkExpectedRxDapi=jnxIfOtnOTUkExpectedRxDapi, jnxIfOtnOCh2OTUkPreFecBERThClrEx=jnxIfOtnOCh2OTUkPreFecBERThClrEx, jnxIfOtnNotificationTrigLayer=jnxIfOtnNotificationTrigLayer, jnxIfOtnOCh2OTUkCfgL1Index=jnxIfOtnOCh2OTUkCfgL1Index, jnxIfOtnOCh2ODUkCfgEntry=jnxIfOtnOCh2ODUkCfgEntry, jnxIfOtnTcmCfgL3Index=jnxIfOtnTcmCfgL3Index, jnxIfOtnTCMEnable=jnxIfOtnTCMEnable, jnxIfOtnOCh2OTUkRxTTI=jnxIfOtnOCh2OTUkRxTTI, jnxIfOtnOCh2TcmCfgL3Index=jnxIfOtnOCh2TcmCfgL3Index, jnxIfOtnNotificationTrigL1Index=jnxIfOtnNotificationTrigL1Index, jnxIfOtnOCh2ODUkCfgL3Index=jnxIfOtnOCh2ODUkCfgL3Index, JnxIfOtnRate=JnxIfOtnRate, jnxIfOtnOChCfgL2Index=jnxIfOtnOChCfgL2Index, jnxIfOtnNotificationTrigTable=jnxIfOtnNotificationTrigTable, jnxIfOtnOperState=jnxIfOtnOperState, jnxIfOtnNotificationTrigDefaultHoldtimeUp=jnxIfOtnNotificationTrigDefaultHoldtimeUp, jnxIfOtnODUkRxTTI=jnxIfOtnODUkRxTTI, jnxIfOtnTcmCfgEntry=jnxIfOtnTcmCfgEntry, jnxIfOtnLineLoopback=jnxIfOtnLineLoopback, jnxIfOtnODUkPayloadPRBS=jnxIfOtnODUkPayloadPRBS, jnxIfOtnOTUkCfgEntry=jnxIfOtnOTUkCfgEntry, jnxIfOtnNotificationAdminStatus=jnxIfOtnNotificationAdminStatus, jnxOtnClearInterfaceDay=jnxOtnClearInterfaceDay, jnxIfOtnOTUkPreFecBERThresholdClearMantissa=jnxIfOtnOTUkPreFecBERThresholdClearMantissa, jnxIfOtnOCh2TcmCfgL4Index=jnxIfOtnOCh2TcmCfgL4Index, jnxIfOtnOCh2AdminState=jnxIfOtnOCh2AdminState, jnxIfOtnOCh2OTUkCfgFecMode=jnxIfOtnOCh2OTUkCfgFecMode, jnxIfOtnTcmExpectedRxDapi=jnxIfOtnTcmExpectedRxDapi, jnxIfOtnODUkTcmDMEntry=jnxIfOtnODUkTcmDMEntry, jnxIfOtnOCh2ODUkPayloadType=jnxIfOtnOCh2ODUkPayloadType, jnxIfOtnOChCfgL1Index=jnxIfOtnOChCfgL1Index, jnxIfOtnOCh2LineLoopback=jnxIfOtnOCh2LineLoopback, jnxIfOtnOTUkCfgContainerIndex=jnxIfOtnOTUkCfgContainerIndex, jnxIfOtnOChStatus=jnxIfOtnOChStatus, jnxIfOtnOTUkPreFecBERThresholdExponent=jnxIfOtnOTUkPreFecBERThresholdExponent, jnxIfOtnOTUkPreFecBERThresholdClearExponent=jnxIfOtnOTUkPreFecBERThresholdClearExponent, jnxIfOtnOTUkCfgTable=jnxIfOtnOTUkCfgTable, jnxIfOtnOCh2ODUkRxTTI=jnxIfOtnOCh2ODUkRxTTI, jnxIfOtnOTUkTIMActEnabled=jnxIfOtnOTUkTIMActEnabled, jnxIfOtnOCh2OTUkEnBERFrrSupport=jnxIfOtnOCh2OTUkEnBERFrrSupport, jnxIfOtnOTUkTxTTI=jnxIfOtnOTUkTxTTI, jnxIfOtnOCh2ODUkCfgL2Index=jnxIfOtnOCh2ODUkCfgL2Index, jnxIfOtnODUkTcmInsertOci=jnxIfOtnODUkTcmInsertOci, jnxIfOtnTcmExpectedRxSapi=jnxIfOtnTcmExpectedRxSapi, PYSNMP_MODULE_ID=jnxIfOtnMib, jnxIfOtnOTUkRxTTI=jnxIfOtnOTUkRxTTI, jnxIfOtnODUkAPSPCC1=jnxIfOtnODUkAPSPCC1, jnxOtnClearIfPMsEntry=jnxOtnClearIfPMsEntry, jnxIfOtnLocalLoopback=jnxIfOtnLocalLoopback, jnxIfOtnOCh2CfgL4Index=jnxIfOtnOCh2CfgL4Index, jnxIfOtnOTUkEnableBERFrrSupport=jnxIfOtnOTUkEnableBERFrrSupport, jnxOtnClearInterfacePMs=jnxOtnClearInterfacePMs, jnxIfOtnDMBypass=jnxIfOtnDMBypass, jnxIfOtnAdminState=jnxIfOtnAdminState, jnxIfOtnOCh2LocalLoopback=jnxIfOtnOCh2LocalLoopback, jnxIfOtnODUkCfgL2Index=jnxIfOtnODUkCfgL2Index, jnxIfOtnOCh2CfgTable=jnxIfOtnOCh2CfgTable, jnxOtnClearInterfaceCurrentPM=jnxOtnClearInterfaceCurrentPM, jnxIfOtnOCh2ODUkExpectedRxDapi=jnxIfOtnOCh2ODUkExpectedRxDapi, jnxIfOtnNotificationTrigHoldtimeUp=jnxIfOtnNotificationTrigHoldtimeUp, jnxIfOtnOCh2ODUkTIMActEnabled=jnxIfOtnOCh2ODUkTIMActEnabled, jnxIfOtnOCh2TcmStatus=jnxIfOtnOCh2TcmStatus, jnxIfOtnOCh2Status=jnxIfOtnOCh2Status, jnxIfOtnOCh2OTUkTIMActEnabled=jnxIfOtnOCh2OTUkTIMActEnabled, jnxIfOtnODUkTcmTestTCMLevel=jnxIfOtnODUkTcmTestTCMLevel, jnxIfOtnOCh2TCMEnable=jnxIfOtnOCh2TCMEnable, jnxIfOtnOTUkEnableAutoFrrByteInsert=jnxIfOtnOTUkEnableAutoFrrByteInsert, jnxIfOtnTcmCfgTable=jnxIfOtnTcmCfgTable, jnxIfOtnODUkAPSPCC2=jnxIfOtnODUkAPSPCC2, jnxIfOtnNotificationTrigContainerIndex=jnxIfOtnNotificationTrigContainerIndex, jnxIfOtnOCh2OTUkEnAutoFrrByteIns=jnxIfOtnOCh2OTUkEnAutoFrrByteIns, jnxIfOtnOCh2CfgL3Index=jnxIfOtnOCh2CfgL3Index, jnxIfOtnOCh2ODUkAPSPCC1=jnxIfOtnOCh2ODUkAPSPCC1, jnxIfOtnPayloadLoopback=jnxIfOtnPayloadLoopback, jnxIfOtnODUkPayloadType=jnxIfOtnODUkPayloadType, jnxIfOtnOCh2Index=jnxIfOtnOCh2Index, jnxIfOtnODUkCfgEntry=jnxIfOtnODUkCfgEntry, JnxIfOtnType=JnxIfOtnType, jnxIfOtnNotificationOperStatus=jnxIfOtnNotificationOperStatus, jnxIfOtnOCh2TcmCfgTable=jnxIfOtnOCh2TcmCfgTable, jnxOtnClearAllPMs=jnxOtnClearAllPMs, jnxIfOtnOCh2PayloadLoopback=jnxIfOtnOCh2PayloadLoopback, jnxIfOtnOCh2OTUkCfgTable=jnxIfOtnOCh2OTUkCfgTable, jnxIfOtnODUkStatus=jnxIfOtnODUkStatus, jnxIfOtnOCh2ODUkCfgL4Index=jnxIfOtnOCh2ODUkCfgL4Index, jnxIfOtnODUkTcmDMLevel=jnxIfOtnODUkTcmDMLevel, jnxIfOtnOCh2OTUkExpectedRxSapi=jnxIfOtnOCh2OTUkExpectedRxSapi, jnxIfOtnOCh2OTUkStatus=jnxIfOtnOCh2OTUkStatus, JnxIfOperStates=JnxIfOperStates, jnxIfOtnOCh2TcmRxTTI=jnxIfOtnOCh2TcmRxTTI, jnxIfOtnTrigServiceStateAction=jnxIfOtnTrigServiceStateAction, jnxIfOtnODUkTcmDMTable=jnxIfOtnODUkTcmDMTable, JnxIfOtnFecType=JnxIfOtnFecType, jnxIfOtnODUkCfgTable=jnxIfOtnODUkCfgTable, jnxIfOtnODUkTcmDMLayer=jnxIfOtnODUkTcmDMLayer, jnxIfOtnOCh2CfgContainerIndex=jnxIfOtnOCh2CfgContainerIndex, jnxIfOtnOTUkStatus=jnxIfOtnOTUkStatus, jnxOtnClearInterfaceInterval=jnxOtnClearInterfaceInterval, jnxIfOtnOCh2TcmCfgL1Index=jnxIfOtnOCh2TcmCfgL1Index, jnxOtnClearIfPMsTable=jnxOtnClearIfPMsTable, jnxIfOtnODUkAPSPCC3=jnxIfOtnODUkAPSPCC3, jnxIfOtnOCh2CfgL2Index=jnxIfOtnOCh2CfgL2Index, jnxIfOtnODUkTcmInsertAis=jnxIfOtnODUkTcmInsertAis, jnxIfOtnOCh2OperState=jnxIfOtnOCh2OperState, jnxIfOtnOCh2ODUkTxTTI=jnxIfOtnOCh2ODUkTxTTI, jnxIfOtnOCh2OTUkPreFecBERThMant=jnxIfOtnOCh2OTUkPreFecBERThMant, jnxIfOtnODUkTcmInsertLck=jnxIfOtnODUkTcmInsertLck, jnxIfOtnMib=jnxIfOtnMib, jnxIfOtnOCh2ODUkStatus=jnxIfOtnOCh2ODUkStatus, jnxIfOtnODUkExpectedRxDapi=jnxIfOtnODUkExpectedRxDapi, jnxIfOtnOCh2TcmCfgL2Index=jnxIfOtnOCh2TcmCfgL2Index, jnxIfOtnODUkTxTTI=jnxIfOtnODUkTxTTI, jnxIfOtnNotificationTrigHoldtimeDown=jnxIfOtnNotificationTrigHoldtimeDown, jnxIfOtnTcmCfgL2Index=jnxIfOtnTcmCfgL2Index, JnxIfOtnServiceStateAction=JnxIfOtnServiceStateAction, jnxIfOtnOTUkExpectedRxSapi=jnxIfOtnOTUkExpectedRxSapi, jnxIfOtnOCh2ODUkCfgTable=jnxIfOtnOCh2ODUkCfgTable, jnxIfOtnODUkRxPayloadType=jnxIfOtnODUkRxPayloadType, jnxIfOtnOChCfgContainerIndex=jnxIfOtnOChCfgContainerIndex, jnxIfOtnTcmCfgL1Index=jnxIfOtnTcmCfgL1Index, jnxIfOtnOCh2ODUkCfgL1Index=jnxIfOtnOCh2ODUkCfgL1Index, jnxIfOtnOCh2ODUkRxPayloadType=jnxIfOtnOCh2ODUkRxPayloadType, jnxIfOtnOCh2OTUkCfgEntry=jnxIfOtnOCh2OTUkCfgEntry, jnxIfOtnOCh2OTUkCfgL2Index=jnxIfOtnOCh2OTUkCfgL2Index, jnxIfOtnOCh2TcmCfgLevel=jnxIfOtnOCh2TcmCfgLevel, jnxIfOtnODUkTcmTestLayer=jnxIfOtnODUkTcmTestLayer, jnxIfOtn=jnxIfOtn, jnxIfOtnOChPortMode=jnxIfOtnOChPortMode, jnxIfOtnOCh2OTUkPreFecBERThExpo=jnxIfOtnOCh2OTUkPreFecBERThExpo, jnxIfOtnODUkTIMActEnabled=jnxIfOtnODUkTIMActEnabled, jnxIfOtnDMPersistFrames=jnxIfOtnDMPersistFrames, jnxIfOtnNotificationTrigTCMLevel=jnxIfOtnNotificationTrigTCMLevel, jnxIfOtnOCh2OTUkTxTTI=jnxIfOtnOCh2OTUkTxTTI, jnxIfOtnOCh2CfgEntry=jnxIfOtnOCh2CfgEntry, jnxIfOtnOCh2ODUkExpectedRxSapi=jnxIfOtnOCh2ODUkExpectedRxSapi, jnxIfOtnODUkPayloadPRBSResult=jnxIfOtnODUkPayloadPRBSResult, jnxIfOtnODUkCfgL1Index=jnxIfOtnODUkCfgL1Index, jnxIfOtnNotificationTrigEntry=jnxIfOtnNotificationTrigEntry, jnxIfOtnOCh2CfgL1Index=jnxIfOtnOCh2CfgL1Index, jnxIfOtnOCh2TcmCfgContIndx=jnxIfOtnOCh2TcmCfgContIndx, jnxIfOtnNotificationTrigSeverity=jnxIfOtnNotificationTrigSeverity, jnxIfOtnNotificationPrefix=jnxIfOtnNotificationPrefix, jnxIfOtnODUkCfgL3Index=jnxIfOtnODUkCfgL3Index, jnxIfOtnOTUkCfgFecMode=jnxIfOtnOTUkCfgFecMode, jnxIfOtnODUkExpectedRxSapi=jnxIfOtnODUkExpectedRxSapi, jnxIfOtnTcmCfgLevel=jnxIfOtnTcmCfgLevel, jnxIfOtnNotificationTrigDefaultHoldtimeDown=jnxIfOtnNotificationTrigDefaultHoldtimeDown, jnxIfOtnOTUkCfgL2Index=jnxIfOtnOTUkCfgL2Index, jnxIfOtnOCh2ODUkAPSPCC3=jnxIfOtnOCh2ODUkAPSPCC3, jnxIfOtnOChCfgL3Index=jnxIfOtnOChCfgL3Index, jnxIfOtnOCh2ODUkAPSPCC2=jnxIfOtnOCh2ODUkAPSPCC2, jnxIfOtnDMConnectionMonitoringEndpoint=jnxIfOtnDMConnectionMonitoringEndpoint, jnxIfOtnOCh2TcmTxTTI=jnxIfOtnOCh2TcmTxTTI, jnxOtnClearInterfaceAll=jnxOtnClearInterfaceAll, jnxIfOtnOCh2OTUkExpectedRxDapi=jnxIfOtnOCh2OTUkExpectedRxDapi, jnxIfOtnOChCfgEntry=jnxIfOtnOChCfgEntry, jnxIfOtnOTUkCfgRate=jnxIfOtnOTUkCfgRate, jnxIfOtnOCh2OTUkPreFecBERThClrMn=jnxIfOtnOCh2OTUkPreFecBERThClrMn, jnxIfOtnOCh2ODUkAPSPCC0=jnxIfOtnOCh2ODUkAPSPCC0, jnxIfOtnNotificationTrigL3Index=jnxIfOtnNotificationTrigL3Index, jnxIfOtnOCh2OTUkCfgContIndx=jnxIfOtnOCh2OTUkCfgContIndx, jnxIfOtnIndex=jnxIfOtnIndex, JnxIfOtnLayer=JnxIfOtnLayer, JnxIfOtnDirection=JnxIfOtnDirection, jnxIfOtnTcmRxTTI=jnxIfOtnTcmRxTTI, JnxIfOtnSeverity=JnxIfOtnSeverity, jnxIfOtnOChCfgTable=jnxIfOtnOChCfgTable, jnxIfOtnNotificationTrigIgnore=jnxIfOtnNotificationTrigIgnore, jnxIfOtnOTUkCfgL3Index=jnxIfOtnOTUkCfgL3Index, jnxIfOtnODUkCfgContainerIndex=jnxIfOtnODUkCfgContainerIndex, jnxIfOtnOCh2=jnxIfOtnOCh2, jnxIfOtnOCh2OTUkCfgRate=jnxIfOtnOCh2OTUkCfgRate, jnxIfOtnNotificationTrigAlmId=jnxIfOtnNotificationTrigAlmId)
