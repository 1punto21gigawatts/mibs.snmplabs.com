#
# PySNMP MIB module EdgeSwitch-QOS-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-QOS-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:10:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
fastPathQOS, = mibBuilder.importSymbols("EdgeSwitch-QOS-MIB", "fastPathQOS")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, Unsigned32, iso, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Unsigned32", "iso", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "NotificationType")
TextualConvention, TruthValue, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "MacAddress", "DisplayString")
fastPathQOSACL = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2))
fastPathQOSACL.setRevisions(('2012-04-27 00:00', '2012-02-14 00:00', '2011-01-26 00:00', '2007-05-23 00:00', '2005-07-08 00:00', '2004-09-20 00:00', '2003-11-21 00:00', '2003-02-06 23:34',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathQOSACL.setRevisionsDescriptions(('Added support for ACL Redirect to External Agent action attribute.', 'Added support for ACL Rate Limiting rule attribute.', 'Postal address updated.', 'Ubiquiti branding related changes.', 'Added support for ACL rule logging and trap notification.', 'Added L2 MAC ACL support.', 'Revisions made for new release.', 'Updated for release',))
if mibBuilder.loadTexts: fastPathQOSACL.setLastUpdated('201204270000Z')
if mibBuilder.loadTexts: fastPathQOSACL.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathQOSACL.setContactInfo('')
if mibBuilder.loadTexts: fastPathQOSACL.setDescription('The MIB definitions for Quality of Service - ACL Flex package.')
class EtypeValue(TextualConvention, Unsigned32):
    description = 'Ethertype value of a packet. The allowed value is 0x0600 to 0xFFFF.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address prefixes. This is a binary string of up to 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class AclBurstSize(TextualConvention, Unsigned32):
    description = 'The number of kilobytes (Kbytes) in a packet that may be sent in a traffic stream without regard for other traffic streams.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

aclNamedIpv4IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNamedIpv4IndexNextFree.setStatus('current')
if mibBuilder.loadTexts: aclNamedIpv4IndexNextFree.setDescription('This object contains an unused value for the aclIndex to be used when creating a new named IPv4 ACL. A value of zero zero indicates the ACL table is full.')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
if mibBuilder.loadTexts: aclTable.setDescription('A table of ACL instances.')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
if mibBuilder.loadTexts: aclEntry.setDescription('')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIndex.setStatus('current')
if mibBuilder.loadTexts: aclIndex.setDescription('The IP ACL table index this instance is associated with.')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
if mibBuilder.loadTexts: aclStatus.setDescription('Status of this instance. Entries can not be deleted until all rows in the aclIfTable and aclRuleTable with corresponding values of aclIndex have been deleted. active(1) - this ACL instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
aclName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclName.setStatus('current')
if mibBuilder.loadTexts: aclName.setDescription('The name of this IPv4 ACL entry, which must consist of 1 to 31 alphanumeric characters and uniquely identify this IPv4 ACL. An existing IPv4 ACL can be renamed by setting this object to a new name. This object must be set to complete a new IPv4 ACL row instance.')
aclIfTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8), )
if mibBuilder.loadTexts: aclIfTable.setStatus('current')
if mibBuilder.loadTexts: aclIfTable.setDescription('A table of ACL interface instances per direction.')
aclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIfIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfDirection"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfSequence"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfAclType"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfAclId"))
if mibBuilder.loadTexts: aclIfEntry.setStatus('current')
if mibBuilder.loadTexts: aclIfEntry.setDescription('')
aclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIfIndex.setStatus('current')
if mibBuilder.loadTexts: aclIfIndex.setDescription('The interface to which this ACL instance applies.')
aclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclIfDirection.setStatus('current')
if mibBuilder.loadTexts: aclIfDirection.setDescription('The interface direction to which this ACL instance applies.')
aclIfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclIfSequence.setStatus('current')
if mibBuilder.loadTexts: aclIfSequence.setDescription('The relative evaluation sequence of this ACL for this interface and direction. When multiple ACLs are allowed for a given interface and direction, the sequence number determines the order in which the list of ACLs are evaluated, with lower sequence numbers given higher precedence. The sequence number value is arbitrary, but must be a unique non-zero value for a given interface and direction. Setting this object to an existing sequence number value for a given interface and direction causes the ACL corresponding to that value to be replaced with this ACL.')
aclIfAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: aclIfAclType.setStatus('current')
if mibBuilder.loadTexts: aclIfAclType.setDescription('The type of this ACL, which is used to interpret the aclIfId object value. Each type of ACL uses its own numbering scheme for identification (see aclIfAclId object for details). The aclIfAclId object must be specified along with this object.')
aclIfAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIfAclId.setStatus('current')
if mibBuilder.loadTexts: aclIfAclId.setDescription('The ACL identifier value, which is interpreted based on the aclIfType object. For the IP ACLs, the actual ACL number is its identifier as follows: IP standard ranges from 1-99, while IP extended ranges from 100-199. Here, aclIfAclId represents aclIndex. The MAC ACLs use an internally-generated index value that is assigned when the ACL is created.Here, aclIfAclId represents aclMacIndex. The IPv6 ACLs use an internally-generated index value that is assigned when the ACL is created.Here, aclVlanAclId represents aclIpv6Index. The aclIfType object must be specified along with this object.')
aclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIfStatus.setStatus('current')
if mibBuilder.loadTexts: aclIfStatus.setDescription('Status of this instance. active(1) - this ACL interface instance is active createAndGo(4) - set to this value to assign an ACL to an interface and direction destroy(6) - set to this value to remove an ACL from an interface and direction')
aclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: aclRuleTable.setStatus('current')
if mibBuilder.loadTexts: aclRuleTable.setDescription('A table of IP ACL Rule instances.')
aclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: aclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclRuleEntry.setDescription('A table of IP ACL Classification Rules')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: aclRuleIndex.setDescription('The index of this rule instance within an IP ACL.')
aclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAction.setStatus('current')
if mibBuilder.loadTexts: aclRuleAction.setDescription('The type of action this rule should perform.')
aclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: aclRuleProtocol.setDescription('icmp - 1 igmp - 2 ip - 4 tcp - 6 udp - 17 All values from 1 to 255 are valid.')
aclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setDescription('The Source IP Address used in the ACL Classification.')
aclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcIpMask.setDescription("The Source IP Mask used in the ACL Classification. This mask is expressed using wild-card notation,which is the 1's compliment of traditional Subnet Masks. Here, the 'Don't care bits' are represented by binary 1's and 'Do care bits' are represented by binary 0's. ")
aclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4Port.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcL4Port.setDescription('The Source Port Number (Layer 4) used in the ACL Classification.')
aclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setDescription('The Source Port Number(Layer 4) range start.')
aclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setDescription('The Source Port Number(Layer 4) range end.')
aclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestIpAddress.setDescription('The Destination IP Address used in the ACL Classification.')
aclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpMask.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestIpMask.setDescription("The Destination IP Mask used in the ACL Classification. This mask is expressed using wild-card notation,which is the 1's compliment of traditional Subnet Masks. Here, the 'Don't care bits' are represented by binary 1's and 'Do care bits' are represented by binary 0's. ")
aclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4Port.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestL4Port.setDescription('The Destination Port (Layer 4) used in ACl classification.')
aclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setDescription('The Destination Port (Layer 4) starting range used in ACL classification.')
aclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setDescription('The Destination Port (Layer 4) ending range used in ACL classification.')
aclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIPDSCP.setStatus('current')
if mibBuilder.loadTexts: aclRuleIPDSCP.setDescription('The Differentiated Services Code Point value.')
aclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: aclRuleIpPrecedence.setDescription('The Type of Service (TOS) IP Precedence value.')
aclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosBits.setStatus('current')
if mibBuilder.loadTexts: aclRuleIpTosBits.setDescription('The Type of Service (TOS) Bits value.')
aclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosMask.setStatus('current')
if mibBuilder.loadTexts: aclRuleIpTosMask.setDescription('The Type of Service (TOS) Mask value.')
aclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclRuleStatus.setDescription('Status of this instance. active(1) - this ACL Rule is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
aclRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAssignQueueId.setStatus('current')
if mibBuilder.loadTexts: aclRuleAssignQueueId.setDescription('Queue identifier to which all inbound packets matching this ACL rule are directed. This object defaults to the standard queue assignment for user priority 0 traffic per the IEEE 802.1D specification based on the number of assignable queues in the system: 1-3 queues: 0 4-7 queues: 1 8 queues: 2 This default assignment is static and is not influenced by other system configuration changes.')
aclRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRedirectIntf.setStatus('current')
if mibBuilder.loadTexts: aclRuleRedirectIntf.setDescription('A non-zero value indicates the external ifIndex to which all inbound packets matching this ACL rule are directed. A value of zero means packet redirection is not in effect, which is the default value of this object. Note that packet redirection and mirroring (aclRuleMirrorIntf object) are mutually-exclusive rule attributes.')
aclRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMatchEvery.setStatus('current')
if mibBuilder.loadTexts: aclRuleMatchEvery.setDescription('Flag to indicate that the ACL rule is defined to match on every IP packet, regardless of content.')
aclRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 22), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMirrorIntf.setStatus('current')
if mibBuilder.loadTexts: aclRuleMirrorIntf.setDescription('A non-zero value indicates the external ifIndex to which all inbound packets matching this ACL rule are copied. A value of zero means packet mirroring is not in effect, which is the default value of this object. Note that packet mirroring and redirection (aclRuleRedirectIntf object) are mutually-exclusive rule attributes.')
aclRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleLogging.setStatus('current')
if mibBuilder.loadTexts: aclRuleLogging.setDescription('Flag to indicate that the ACL rule is being logged. A hardware count of the number of times this rule is hit is reported via the aclTrapRuleLogEvent notification. This object may be supported for an aclRuleAction setting of permit(1) and/or deny(2), depending on the ACL feature capabilities of the device.')
aclRuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: aclRuleTimeRangeName.setDescription('Name of the time range, that the ACL rule has referenced.It must start with alphabet and shall consist of 1 to 31 alphanumeric characters.')
aclRuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclRuleTimeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: aclRuleTimeRangeStatus.setDescription('Flag that indicates the ACL rule status. If the status is active, it implies that the ACL rule is in effect. If the status is inactive, it implies that the ACL rule is not in effect.')
aclRuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRateLimitCrate.setStatus('current')
if mibBuilder.loadTexts: aclRuleRateLimitCrate.setDescription('Committed rate attribute statement value, specified in kbps.')
aclRuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 27), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRateLimitCburst.setStatus('current')
if mibBuilder.loadTexts: aclRuleRateLimitCburst.setDescription('Committed burst size attribute statement value, specified in kbytes.')
aclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIcmpType.setStatus('current')
if mibBuilder.loadTexts: aclRuleIcmpType.setDescription('ACL rule matches on the specified ICMP type. All values from 1 to 255 are valid.')
aclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIcmpCode.setStatus('current')
if mibBuilder.loadTexts: aclRuleIcmpCode.setDescription('ACL rule matches on the specified ICMP code. All values from 1 to 255 are valid.')
aclRuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIgmpType.setStatus('current')
if mibBuilder.loadTexts: aclRuleIgmpType.setDescription('ACL rule matches on the specified IGMP type. All values from 1 to 255 are valid.')
aclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 32), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleEstablished.setStatus('current')
if mibBuilder.loadTexts: aclRuleEstablished.setDescription('Flag to indicate the ACL rule to match on TCP packets that has either RST or ACK bits set in the TCP header')
aclRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleFragments.setStatus('current')
if mibBuilder.loadTexts: aclRuleFragments.setDescription('Flag to indicate the ACL rule to match if the packet is fragmented')
aclMacIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: aclMacIndexNextFree.setDescription('This object contains an unused value for the aclMacIndex to be used when creating a new MAC ACL. A value of zero zero indicates the ACL table is full.')
aclMacTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: aclMacTable.setStatus('current')
if mibBuilder.loadTexts: aclMacTable.setDescription('A table of MAC ACL instances.')
aclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclMacIndex"))
if mibBuilder.loadTexts: aclMacEntry.setStatus('current')
if mibBuilder.loadTexts: aclMacEntry.setDescription('')
aclMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclMacIndex.setStatus('current')
if mibBuilder.loadTexts: aclMacIndex.setDescription('The MAC ACL table index this instance is associated with. When creating a new MAC ACL, refer to the aclMacIndexNextFree object to determine the next available aclMacIndex to use.')
aclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacName.setStatus('current')
if mibBuilder.loadTexts: aclMacName.setDescription('The name of this MAC ACL entry, which must consist of 1 to 31 alphanumeric characters and uniquely identify this MAC ACL. An existing MAC ACL can be renamed by setting this object to a new name. This object must be set to complete a new MAC ACL row instance.')
aclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacStatus.setStatus('current')
if mibBuilder.loadTexts: aclMacStatus.setDescription('Status of this instance. ACL MAC entries can not be deleted until all rows in the aclIfTable and aclRuleTable with corresponding values of aclMacIndex have been deleted. active(1) - this ACL instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance The aclMacName object must be set to complete this row instance.')
aclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7), )
if mibBuilder.loadTexts: aclMacRuleTable.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleTable.setDescription('A table of layer 2 MAC ACL Rule instances.')
aclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclMacIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclMacRuleIndex"))
if mibBuilder.loadTexts: aclMacRuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleEntry.setDescription('A table of layer 2 MAC ACL Classification Rules')
aclMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclMacRuleIndex.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleIndex.setDescription('The index of this rule instance within an MAC ACL.')
aclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAction.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleAction.setDescription('The type of action this MAC ACL rule should perform.')
aclMacRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleCos.setDescription('The Class of Service (COS) used in the MAC ACL Classification. This is the three-bit user priority field in the 802.1Q tag header of a tagged Ethernet frame. For frames containing a double VLAN tag, this field is located in the first/outer tag.')
aclMacRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos2.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleCos2.setDescription('The Secondary Class of Service (COS2) used in the MAC ACL Classification. This is the three-bit user priority field in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
aclMacRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleDestMacAddr.setDescription('The Destination MAC address used in the MAC ACL Classification.')
aclMacRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacMask.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleDestMacMask.setDescription('The Destination MAC address mask used in the MAC ACL Classification. This mask value identifies the portion of the aclMacRuleDestMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
aclMacRuleEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeKey.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleEtypeKey.setDescription('The Ethertype keyword used in the MAC ACL Classification. A keyword of custom(1) requires that the aclMacRuleEtypeValue object also be set.')
aclMacRuleEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 8), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeValue.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleEtypeValue.setDescription('The Ethertype custom value used in the MAC ACL Classification. This object is only valid if the aclMacRuleEtypeKey is set to custom(1). The allowed value for this object is 0x0600 to 0xFFFF (1536 to 65535).')
aclMacRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleSrcMacAddr.setDescription('The Source MAC address used in the MAC ACL Classification.')
aclMacRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleSrcMacMask.setDescription('The Source MAC address mask used in the MAC ACL Classification. This mask value identifies the portion of the aclMacRuleSrcMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
aclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleVlanId.setDescription('The VLAN ID value used in the MAC ACL Classification. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
aclMacRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeStart.setDescription('The VLAN ID range start value used in the MAC ACL Classification. Setting this value greater than the current aclMacRuleVlanIdRangeEnd changes the VLAN ID range end to the same value as the range start. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
aclMacRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeEnd.setDescription('The VLAN ID range end value used in the MAC ACL Classification. Setting this value less than the current aclMacRuleVlanIdRangeStart changes the VLAN ID range start to the same value as the range end. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
aclMacRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleVlanId2.setDescription('The Secondary VLAN ID value used in the MAC ACL Classification. The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
aclMacRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeStart.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeStart.setDescription('The Secondary VLAN ID range start value used in the MAC ACL Classification. Setting this value greater than the current aclMacRuleVlanId2RangeEnd changes the Secondary VLAN ID range end to the same value as the range start. The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
aclMacRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeEnd.setDescription('The Secondary VLAN ID range end value used in the MAC ACL Classification. Setting this value less than the current aclMacRuleVlanId2RangeStart changes the Secondary VLAN ID range start to the same value as the range end. The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
aclMacRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleStatus.setDescription('Status of this instance. active(1) - this ACL Rule is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
aclMacRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAssignQueueId.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleAssignQueueId.setDescription('Queue identifier to which all inbound packets matching this MAC ACL rule are directed. This object defaults to the standard queue assignment for user priority 0 traffic per the IEEE 802.1D specification based on the number of assignable queues in the system: 1-3 queues: 0 4-7 queues: 1 8 queues: 2 This default assignment is static and is not influenced by other system configuration changes.')
aclMacRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRedirectIntf.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleRedirectIntf.setDescription('A non-zero value indicates the external ifIndex to which all inbound packets matching this MAC ACL rule are directed. A value of zero means packet redirection is not in effect, which is the default value of this object. Note that packet redirection and mirroring (aclMacRuleMirrorIntf object) are mutually-exclusive rule attributes.')
aclMacRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMatchEvery.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleMatchEvery.setDescription('Flag to indicate that the MAC ACL rule is defined to match all packets, regardless of Ethertype.')
aclMacRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 21), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMirrorIntf.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleMirrorIntf.setDescription('A non-zero value indicates the external ifIndex to which all inbound packets matching this MAC ACL rule are copied. A value of zero means packet mirroring is not in effect, which is the default value of this object. Note that packet mirroring and redirection (aclMacRuleRedirectIntf object) are mutually-exclusive rule attributes.')
aclMacRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleLogging.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleLogging.setDescription('Flag to indicate that the ACL rule is being logged. A hardware count of the number of times this rule is hit is reported via the aclTrapRuleLogEvent notification. This object may be supported for an aclMacRuleAction setting of permit(1) and/or deny(2), depending on the ACL feature capabilities of the device.')
aclMacRuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleTimeRangeName.setDescription('Name of the time range, that the ACL rule has referenced.It must start with alphabet and shall consist of 1 to 31 alphanumeric characters.')
aclMacRuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacRuleTimeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleTimeRangeStatus.setDescription('Flag that indicates the ACL rule status. If the status is active, it implies that the ACL rule is in effect. If the status is inactive, it implies that the ACL rule is not in effect.')
aclMacRuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRateLimitCrate.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleRateLimitCrate.setDescription('Committed rate attribute statement value, specified in kbps.')
aclMacRuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 26), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRateLimitCburst.setStatus('current')
if mibBuilder.loadTexts: aclMacRuleRateLimitCburst.setDescription('Committed burst size attribute statement value, specified in kbytes.')
aclLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9))
aclTrapRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleIndex.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleIndex.setDescription('The index of an ACL rule instance. Used by aclTrapRuleLogEvent trap.')
aclTrapRuleAction = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleAction.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleAction.setDescription('The type of action this rule should perform, either permit(1) or deny(2). Used by aclTrapRuleLogEvent trap.')
aclTrapRuleHitCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 4), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleHitCount.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleHitCount.setDescription('Number of times the ACL rule was hit during the most recent logging interval. Used by aclTrapRuleLogEvent trap.')
aclTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclTrapFlag.setStatus('current')
if mibBuilder.loadTexts: aclTrapFlag.setDescription('ACL Trap Flag - Enables or disables ACL trap generation. When this value is set to enable(1), ACL traps are sent from the switch when they occur.')
aclTrapRuleTimeRangeName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleTimeRangeName.setDescription('Name of the time range on which there is a notification received. Used by aclTrapRuleTimeRangeEvent.')
aclTrapRuleTimeRangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2), ("delete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleTimeRangeNotification.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleTimeRangeNotification.setDescription('Flag to indicate the type of time range notification received. Used by aclTrapRuleTimeRangeEvent.')
aclTrapRuleInstallationStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("success", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleInstallationStatus.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleInstallationStatus.setDescription('Value specifies the status of the ACL Rule installed in hardware as activated/deactivated. Used by aclTrapRuleTimeRangeEvent.')
aclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 0))
aclTrapRuleLogEvent = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 0, 1)).setObjects(("EdgeSwitch-QOS-ACL-MIB", "aclIfAclType"), ("EdgeSwitch-QOS-ACL-MIB", "aclIfAclId"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleIndex"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleAction"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleHitCount"))
if mibBuilder.loadTexts: aclTrapRuleLogEvent.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleLogEvent.setDescription('This trap is generated on a periodic basis to indicate that an ACL rule configured for logging was actively used by hardware to take action on one or more packets. The aclTrapRuleHitCount denotes the number of times this rule was hit during the most recent logging interval. ACL Trap generation requires that the aclTrapFlag object be set to enable(1).')
aclTrapRuleTimeRangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 0, 2)).setObjects(("EdgeSwitch-QOS-ACL-MIB", "aclIfAclType"), ("EdgeSwitch-QOS-ACL-MIB", "aclIfAclId"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleIndex"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleTimeRangeName"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleTimeRangeNotification"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleInstallationStatus"))
if mibBuilder.loadTexts: aclTrapRuleTimeRangeEvent.setStatus('current')
if mibBuilder.loadTexts: aclTrapRuleTimeRangeEvent.setDescription('This trap is generated when there is a time range notification received on any Time based ACL rule. The aclTrapRuleTimeRangeName denotes the time range name associated with the ACL Rule, aclTrapRuleTimeRangeNotification indicates the type of notification received and aclTrapRuleInstallationStatus indicates the installation status of ACL Rule in hardware. When activate notification is received ACL rule is activated in the hardware. When deactivate notifcation is received ACL rule is deactivated in the hardware. When delete notification is received ACL rule is activated in the hardware, if it is already not activated. ACL Trap generation requires the aclTrapFlag object be set to enable(1).')
aclIpv6IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpv6IndexNextFree.setStatus('current')
if mibBuilder.loadTexts: aclIpv6IndexNextFree.setDescription('This object contains an unused value for the aclIPv6Index to be used when creating a new IPv6 ACL. A value of zero zero indicates the ACL table is full.')
aclIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11), )
if mibBuilder.loadTexts: aclIpv6Table.setStatus('current')
if mibBuilder.loadTexts: aclIpv6Table.setDescription('A table of Ipv6 ACL instances.')
aclIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIpv6Index"))
if mibBuilder.loadTexts: aclIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: aclIpv6Entry.setDescription('')
aclIpv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIpv6Index.setStatus('current')
if mibBuilder.loadTexts: aclIpv6Index.setDescription('The IPv6 ACL table index this instance is associated with. When creating a new IPv6 ACL, refer to the aclIPv6IndexNextFree object to determine the next available aclIpv6Index to use.')
aclIpv6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6Name.setStatus('current')
if mibBuilder.loadTexts: aclIpv6Name.setDescription('The name of this IPv6 ACL entry, which must consist of 1 to 31 alphanumeric characters and uniquely identify this IPv6 ACL. An existing IPv6 ACL can be renamed by setting this object to a new name. This object must be set to complete a new IPv6 ACL row instance.')
aclIpv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6Status.setStatus('current')
if mibBuilder.loadTexts: aclIpv6Status.setDescription('Status of this instance. active(1) - this ACL instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance The aclMacName object must be set to complete this row instance.')
aclIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12), )
if mibBuilder.loadTexts: aclIpv6RuleTable.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleTable.setDescription('A table of IPv6 ACL Rule instances.')
aclIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIpv6Index"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIpv6RuleIndex"))
if mibBuilder.loadTexts: aclIpv6RuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleEntry.setDescription('A table of IPv6 ACL Classification Rules')
aclIpv6RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIpv6RuleIndex.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleIndex.setDescription('The index of this rule instance within an IPv6 ACL.')
aclIpv6RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleAction.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleAction.setDescription('The type of action this IPv6 ACL rule should perform.')
aclIpv6RuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleLogging.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleLogging.setDescription('Flag to indicate that the ACL rule is being logged. A hardware count of the number of times this rule is hit is reported via the aclTrapRuleLogEvent notification. This object may be supported for an aclIPv6RuleAction setting of permit(1) and/or deny(2), depending on the ACL feature capabilities of the device.')
aclIpv6RuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleAssignQueueId.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleAssignQueueId.setDescription('Queue identifier to which all inbound packets matching this ACL rule are directed. This object defaults to the standard queue assignment for user priority 0 traffic per the IEEE 802.1D specification based on the number of assignable queues in the system: 1-3 queues: 0 4-7 queues: 1 8 queues: 2 This default assignment is static and is not influenced by other system configuration changes.')
aclIpv6RuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRedirectIntf.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleRedirectIntf.setDescription('A non-zero value indicates the external ifIndex to which all inbound packets matching this Ipv6 ACL rule are directed. A value of zero means packet redirection is not in effect, which is the default value of this object. Note that packet redirection and mirroring (aclIpv6RuleMirrorIntf object) are mutually-exclusive rule attributes.')
aclIpv6RuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleMirrorIntf.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleMirrorIntf.setDescription('A non-zero value indicates the external ifIndex to which all inbound packets matching this IPv6 ACL rule are copied. A value of zero means packet mirroring is not in effect, which is the default value of this object. Note that packet mirroring and redirection (aclIpv6RuleRedirectIntf object) are mutually-exclusive rule attributes.')
aclIpv6RuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleMatchEvery.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleMatchEvery.setDescription('Flag to indicate that the ACL rule is defined to match on every IP packet, regardless of content.')
aclIpv6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleProtocol.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleProtocol.setDescription('icmp - 1 igmp - 2 ip - 4 tcp - 6 udp - 17 All values from 1 to 255 are valid.')
aclIpv6RuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4Port.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleSrcL4Port.setDescription('The Source Port Number (Layer 4) used in the ACL Classification.')
aclIpv6RuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeStart.setDescription('The Source Port Number(Layer 4) range start.')
aclIpv6RuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeEnd.setDescription('The Source Port Number(Layer 4) range end.')
aclIpv6RuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4Port.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleDestL4Port.setDescription('The Destination Port (Layer 4) used in ACl classification.')
aclIpv6RuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeStart.setDescription('The Destination Port (Layer 4) starting range used in ACL classification.')
aclIpv6RuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeEnd.setDescription('The Destination Port (Layer 4) ending range used in ACL classification.')
aclIpv6RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleStatus.setDescription('Status of this instance. active(1) - this ACL Rule is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
aclIpv6RuleFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleFlowLabel.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleFlowLabel.setDescription('Flow label is 20-bit number that is unique to an IPv6 packet, used by end stations to signify quality-of-service handling in routers.')
aclIpv6RuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIPDSCP.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleIPDSCP.setDescription('The Differentiated Services Code Point value.')
aclRuleSrcIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 18), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclRuleSrcIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcIpv6Prefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
aclRuleSrcIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpv6PrefixLength.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcIpv6PrefixLength.setDescription('The Prefix Length.')
aclRuleDstIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 20), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclRuleDstIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: aclRuleDstIpv6Prefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
aclRuleDstIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDstIpv6PrefixLength.setStatus('current')
if mibBuilder.loadTexts: aclRuleDstIpv6PrefixLength.setDescription('The Prefix Length.')
aclIpv6RuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleTimeRangeName.setDescription('Name of the time range, that the ACL rule has referenced.It must start with alphabet and shall consist of 1 to 31 alphanumeric characters.')
aclIpv6RuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpv6RuleTimeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleTimeRangeStatus.setDescription('Flag that indicates the ACL rule status. If the status is active, it implies that the ACL rule is in effect. If the status is inactive, it implies that the ACL rule is not in effect.')
aclIpv6RuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRateLimitCrate.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleRateLimitCrate.setDescription('Committed rate attribute statement value, specified in kbps.')
aclIpv6RuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 25), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRateLimitCburst.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleRateLimitCburst.setDescription('Committed burst size attribute statement value, specified in kbytes.')
aclIpv6RuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIcmpType.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleIcmpType.setDescription('ACL rule matches on the specified ICMP type. All values from 1 to 255 are valid.')
aclIpv6RuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIcmpCode.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleIcmpCode.setDescription('ACL rule matches on the specified ICMP code. All values from 1 to 255 are valid.')
aclIpv6RuleRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 29), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRouting.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleRouting.setDescription('Flag to indicate the ACL rule to match on packets with routing extention header')
aclIpv6RuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleFragments.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleFragments.setDescription('Flag to indicate the ACL rule to match if the packets with fragments extention header')
aclIpv6RuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 31), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleEstablished.setStatus('current')
if mibBuilder.loadTexts: aclIpv6RuleEstablished.setDescription('Flag to indicate the ACL rule to match on TCP packets that has either RST or ACK bits set in the TCP header')
aclVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13), )
if mibBuilder.loadTexts: aclVlanTable.setStatus('current')
if mibBuilder.loadTexts: aclVlanTable.setDescription('A table of ACL VLAN instances per direction.')
aclVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanDirection"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanSequence"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanAclType"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanAclId"))
if mibBuilder.loadTexts: aclVlanEntry.setStatus('current')
if mibBuilder.loadTexts: aclVlanEntry.setDescription('')
aclVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclVlanIndex.setStatus('current')
if mibBuilder.loadTexts: aclVlanIndex.setDescription('The Vlan to which this ACL instance applies.')
aclVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclVlanDirection.setStatus('current')
if mibBuilder.loadTexts: aclVlanDirection.setDescription('The Vlan direction to which this ACL instance applies.')
aclVlanSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclVlanSequence.setStatus('current')
if mibBuilder.loadTexts: aclVlanSequence.setDescription('The relative evaluation sequence of this ACL for this Vlan and direction. When multiple ACLs are allowed for a given Vlan and direction, the sequence number determines the order in which the list of ACLs are evaluated, with lower sequence numbers given higher precedence. The sequence number value is arbitrary, but must be a unique non-zero value for a given Vlan and direction. Setting this object to an existing sequence number value for a given Vlan and direction causes the ACL corresponding to that value to be replaced with this ACL.')
aclVlanAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: aclVlanAclType.setStatus('current')
if mibBuilder.loadTexts: aclVlanAclType.setDescription('The type of this ACL, which is used to interpret the aclVlanId object value. Each type of ACL uses its own numbering scheme for identification (see aclVlanAclId object for details). The aclVlanAclId object must be specified along with this object.')
aclVlanAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclVlanAclId.setStatus('current')
if mibBuilder.loadTexts: aclVlanAclId.setDescription('The ACL identifier value, which is interpreted based on the aclVlanType object. For the IP ACLs, the actual ACL number is its identifier as follows: IP standard ranges from 1-99, while IP extended ranges from 100-199. Here, aclVlanAclId represents aclIndex. The MAC ACLs use an internally-generated index value that is assigned when the ACL is created. Here, aclVlanAclId represents aclMacIndex. The IPv6 ACLs use an internally-generated index value that is assigned when the ACL is created.Here, aclVlanAclId represents aclIpv6Index. The aclVlanType object must be specified along with this object.')
aclVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclVlanStatus.setStatus('current')
if mibBuilder.loadTexts: aclVlanStatus.setDescription('Status of this instance. active(1) - this ACL Vlan instance is active createAndGo(4) - set to this value to assign an ACL to a Vlan and direction destroy(6) - set to this value to remove an ACL from a Vlan and direction')
mibBuilder.exportSymbols("EdgeSwitch-QOS-ACL-MIB", aclEntry=aclEntry, aclRuleIpPrecedence=aclRuleIpPrecedence, aclMacRuleEtypeValue=aclMacRuleEtypeValue, aclMacEntry=aclMacEntry, aclMacRuleStatus=aclMacRuleStatus, aclTrapFlag=aclTrapFlag, aclIpv6RuleStatus=aclIpv6RuleStatus, aclRuleAssignQueueId=aclRuleAssignQueueId, aclIpv6RuleDestL4Port=aclIpv6RuleDestL4Port, aclNotifications=aclNotifications, aclMacRuleAction=aclMacRuleAction, aclIpv6RuleTimeRangeStatus=aclIpv6RuleTimeRangeStatus, aclRuleDestIpMask=aclRuleDestIpMask, aclIpv6RuleIcmpType=aclIpv6RuleIcmpType, aclMacRuleVlanIdRangeStart=aclMacRuleVlanIdRangeStart, aclStatus=aclStatus, aclIpv6RuleRouting=aclIpv6RuleRouting, fastPathQOSACL=fastPathQOSACL, aclMacRuleRedirectIntf=aclMacRuleRedirectIntf, aclIfAclId=aclIfAclId, aclRuleDestL4Port=aclRuleDestL4Port, aclLoggingGroup=aclLoggingGroup, AclBurstSize=AclBurstSize, aclIndex=aclIndex, aclRuleStatus=aclRuleStatus, aclTrapRuleTimeRangeEvent=aclTrapRuleTimeRangeEvent, aclIfSequence=aclIfSequence, aclRuleSrcL4PortRangeStart=aclRuleSrcL4PortRangeStart, aclRuleDstIpv6Prefix=aclRuleDstIpv6Prefix, aclRuleIpTosBits=aclRuleIpTosBits, aclRuleTable=aclRuleTable, aclIpv6RuleRedirectIntf=aclIpv6RuleRedirectIntf, aclMacRuleVlanId=aclMacRuleVlanId, aclMacStatus=aclMacStatus, aclMacRuleCos=aclMacRuleCos, aclRuleIcmpCode=aclRuleIcmpCode, aclIpv6RuleMatchEvery=aclIpv6RuleMatchEvery, aclIpv6RuleIcmpCode=aclIpv6RuleIcmpCode, aclRuleAction=aclRuleAction, aclMacRuleTimeRangeStatus=aclMacRuleTimeRangeStatus, aclIpv6RuleSrcL4PortRangeEnd=aclIpv6RuleSrcL4PortRangeEnd, EtypeValue=EtypeValue, aclIpv6Table=aclIpv6Table, aclIpv6RuleRateLimitCrate=aclIpv6RuleRateLimitCrate, aclMacRuleIndex=aclMacRuleIndex, aclIfDirection=aclIfDirection, aclIpv6RuleTable=aclIpv6RuleTable, aclRuleSrcIpMask=aclRuleSrcIpMask, aclIpv6Index=aclIpv6Index, aclIfEntry=aclIfEntry, aclRuleSrcIpv6Prefix=aclRuleSrcIpv6Prefix, aclMacName=aclMacName, aclMacRuleTimeRangeName=aclMacRuleTimeRangeName, aclMacTable=aclMacTable, aclMacRuleRateLimitCrate=aclMacRuleRateLimitCrate, aclRuleSrcL4Port=aclRuleSrcL4Port, aclMacIndexNextFree=aclMacIndexNextFree, aclRuleFragments=aclRuleFragments, aclIpv6RuleDestL4PortRangeStart=aclIpv6RuleDestL4PortRangeStart, aclIfIndex=aclIfIndex, aclVlanTable=aclVlanTable, aclRuleSrcL4PortRangeEnd=aclRuleSrcL4PortRangeEnd, aclIpv6RuleProtocol=aclIpv6RuleProtocol, aclMacRuleAssignQueueId=aclMacRuleAssignQueueId, aclMacRuleVlanIdRangeEnd=aclMacRuleVlanIdRangeEnd, aclMacRuleTable=aclMacRuleTable, aclIpv6RuleSrcL4PortRangeStart=aclIpv6RuleSrcL4PortRangeStart, aclIpv6RuleDestL4PortRangeEnd=aclIpv6RuleDestL4PortRangeEnd, aclIpv6Entry=aclIpv6Entry, aclIfStatus=aclIfStatus, aclIpv6RuleIndex=aclIpv6RuleIndex, aclMacRuleDestMacMask=aclMacRuleDestMacMask, aclMacRuleCos2=aclMacRuleCos2, aclName=aclName, aclMacRuleVlanId2=aclMacRuleVlanId2, aclVlanAclId=aclVlanAclId, aclRuleTimeRangeName=aclRuleTimeRangeName, aclRuleIndex=aclRuleIndex, aclTable=aclTable, aclMacRuleEntry=aclMacRuleEntry, aclIpv6RuleEntry=aclIpv6RuleEntry, aclTrapRuleTimeRangeNotification=aclTrapRuleTimeRangeNotification, aclMacRuleVlanId2RangeStart=aclMacRuleVlanId2RangeStart, aclMacRuleRateLimitCburst=aclMacRuleRateLimitCburst, aclIpv6IndexNextFree=aclIpv6IndexNextFree, aclIpv6RuleLogging=aclIpv6RuleLogging, aclRuleRedirectIntf=aclRuleRedirectIntf, aclIpv6Status=aclIpv6Status, aclIpv6RuleFragments=aclIpv6RuleFragments, aclIpv6Name=aclIpv6Name, aclVlanEntry=aclVlanEntry, aclRuleProtocol=aclRuleProtocol, Ipv6AddressPrefix=Ipv6AddressPrefix, aclMacRuleEtypeKey=aclMacRuleEtypeKey, aclVlanAclType=aclVlanAclType, aclIpv6RuleMirrorIntf=aclIpv6RuleMirrorIntf, aclRuleIPDSCP=aclRuleIPDSCP, aclTrapRuleTimeRangeName=aclTrapRuleTimeRangeName, aclRuleEstablished=aclRuleEstablished, aclMacRuleMirrorIntf=aclMacRuleMirrorIntf, PYSNMP_MODULE_ID=fastPathQOSACL, aclMacRuleSrcMacMask=aclMacRuleSrcMacMask, aclMacRuleLogging=aclMacRuleLogging, aclRuleRateLimitCburst=aclRuleRateLimitCburst, aclTrapRuleAction=aclTrapRuleAction, aclRuleIcmpType=aclRuleIcmpType, aclRuleDestL4PortRangeEnd=aclRuleDestL4PortRangeEnd, aclRuleRateLimitCrate=aclRuleRateLimitCrate, aclRuleEntry=aclRuleEntry, aclRuleDestIpAddress=aclRuleDestIpAddress, aclMacRuleVlanId2RangeEnd=aclMacRuleVlanId2RangeEnd, aclIfTable=aclIfTable, aclNamedIpv4IndexNextFree=aclNamedIpv4IndexNextFree, aclTrapRuleLogEvent=aclTrapRuleLogEvent, aclRuleIpTosMask=aclRuleIpTosMask, aclIpv6RuleAssignQueueId=aclIpv6RuleAssignQueueId, aclMacIndex=aclMacIndex, aclRuleSrcIpv6PrefixLength=aclRuleSrcIpv6PrefixLength, aclMacRuleSrcMacAddr=aclMacRuleSrcMacAddr, aclRuleDstIpv6PrefixLength=aclRuleDstIpv6PrefixLength, aclVlanDirection=aclVlanDirection, aclIfAclType=aclIfAclType, aclIpv6RuleSrcL4Port=aclIpv6RuleSrcL4Port, aclRuleMatchEvery=aclRuleMatchEvery, aclVlanStatus=aclVlanStatus, aclTrapRuleInstallationStatus=aclTrapRuleInstallationStatus, aclTrapRuleHitCount=aclTrapRuleHitCount, aclMacRuleDestMacAddr=aclMacRuleDestMacAddr, aclRuleDestL4PortRangeStart=aclRuleDestL4PortRangeStart, aclIpv6RuleFlowLabel=aclIpv6RuleFlowLabel, aclIpv6RuleEstablished=aclIpv6RuleEstablished, aclRuleSrcIpAddress=aclRuleSrcIpAddress, aclIpv6RuleAction=aclIpv6RuleAction, aclIpv6RuleRateLimitCburst=aclIpv6RuleRateLimitCburst, aclIpv6RuleIPDSCP=aclIpv6RuleIPDSCP, aclRuleTimeRangeStatus=aclRuleTimeRangeStatus, aclRuleLogging=aclRuleLogging, aclRuleIgmpType=aclRuleIgmpType, aclVlanIndex=aclVlanIndex, aclVlanSequence=aclVlanSequence, aclIpv6RuleTimeRangeName=aclIpv6RuleTimeRangeName, aclRuleMirrorIntf=aclRuleMirrorIntf, aclMacRuleMatchEvery=aclMacRuleMatchEvery, aclTrapRuleIndex=aclTrapRuleIndex)
