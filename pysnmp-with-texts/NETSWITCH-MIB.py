#
# PySNMP MIB module NETSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, Integer32, ModuleIdentity, Gauge32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter64, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Integer32", "ModuleIdentity", "Gauge32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter64", "iso", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpOpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

hpBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1))
hpMsgBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1))
hpPktBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2))
hpMsgBufTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hpMsgBufTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufTable.setDescription('A table that contains information on all the Message buffers for each slot.')
hpMsgBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpMsgBufSlotIndex"))
if mibBuilder.loadTexts: hpMsgBufEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufEntry.setDescription('Information about a slot in a chassis')
hpMsgBufSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufSlotIndex.setDescription('The slot number within the box for which this entry contains information.')
hpMsgBufCorrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufCorrupted.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufCorrupted.setDescription('The number of times a corrupted buffer was deleted.')
hpMsgBufFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufFree.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufFree.setDescription('The number of message buffers available for internal VME transfers or external transfers, respectively. Because switch operations and application software modules impose some overhead on global memory buffers, the number of buffers available for data transfers is less than the total number of buffers allocated when the switch boots.')
hpMsgBufInit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufInit.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufInit.setDescription('The number of message buffers allocated when the switch booted.')
hpMsgBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufMin.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufMin.setDescription('The smallest number of message buffers available since the switch booted.')
hpMsgBufMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufMiss.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufMiss.setDescription('The number of times that the switch was unable to obtain a message buffer. Failure to obtain a buffer indicates that buffers were busy. This parameter is directly related to hpMsgBufMin. If hpMsgBufMiss is greater than 0, hpMsgBufMin must equal 0. Conversely, if hpMsgBufMiss equals 0, then hpMsgBufMin must be greater than 0.')
hpMsgBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpMsgBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpMsgBufSize.setDescription('The size of the message buffer in bytes.')
hpPktBufTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hpPktBufTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufTable.setDescription('A table that contains information on all the Packet buffers for each slot.')
hpPktBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpPktBufSlotIndex"))
if mibBuilder.loadTexts: hpPktBufEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufEntry.setDescription('Information about a slot in a chassis')
hpPktBufSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufSlotIndex.setDescription('The slot number within the box for which this entry contains information.')
hpPktBufCorrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufCorrupted.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufCorrupted.setDescription('The number of times a corrupted buffer was deleted.')
hpPktBufFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufFree.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufFree.setDescription('The number of packet buffers available for internal VME transfers or external transfers, respectively. Because switch operations and application software modules impose some overhead on global memory buffers, the number of buffers available for data transfers is less than the total number of buffers allocated when the switch boots.')
hpPktBufInit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufInit.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufInit.setDescription('The number of packet buffers allocated when the switch booted.')
hpPktBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufMin.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufMin.setDescription('The smallest number of packet buffers available since the switch booted.')
hpPktBufMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufMiss.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufMiss.setDescription('The number of times that the switch was unable to obtain a packet buffer. Failure to obtain a buffer indicates that buffers were busy. This parameter is directly related to hpPktBufMin. If hpPktBufMiss is greater than 0, hpPktBufMin must equal 0. Conversely, if hpPktBufMiss equals 0, then hpPktBufMin must be greater than 0.')
hpPktBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPktBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpPktBufSize.setDescription('The size of the packet buffer in bytes.')
hpMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2))
hpLocalMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1))
hpGlobalMem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2))
hpLocalMemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hpLocalMemTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemTable.setDescription('A table that contains information on all the local memory for each slot.')
hpLocalMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpLocalMemSlotIndex"))
if mibBuilder.loadTexts: hpLocalMemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemEntry.setDescription('Information about a slot in a chassis')
hpLocalMemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemSlotIndex.setDescription('The slot number within the box for which this entry contains information.')
hpLocalMemSlabCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemSlabCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemSlabCnt.setDescription('The current number of discretely managed memory areas. Each slab is further broken down into smaller contiguous areas called segments.')
hpLocalMemFreeSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemFreeSegCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemFreeSegCnt.setDescription('The current number of free memory segments. A free memory segment is an unused contiguous memory block of greater than 16 bytes. Generally, an increase in the number of free memory segments indicates an increase in memory fragmentation.')
hpLocalMemAllocSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemAllocSegCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemAllocSegCnt.setDescription('The number of currently allocated memory segments.')
hpLocalMemTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemTotalBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemTotalBytes.setDescription('The number of currently installed bytes.')
hpLocalMemFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemFreeBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemFreeBytes.setDescription('The number of available (unallocated) bytes.')
hpLocalMemAllocBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLocalMemAllocBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hpLocalMemAllocBytes.setDescription('The number of currently allocated bytes.')
hpGlobalMemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: hpGlobalMemTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemTable.setDescription('A table that contains information on all the local memory for each slot.')
hpGlobalMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "NETSWITCH-MIB", "hpGlobalMemSlotIndex"))
if mibBuilder.loadTexts: hpGlobalMemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemEntry.setDescription('Information about a slot in a chassis')
hpGlobalMemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemSlotIndex.setDescription('The slot number within the box for which this entry contains information.')
hpGlobalMemSlabCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemSlabCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemSlabCnt.setDescription('The current number of discretely managed memory areas. Each slab is further broken down into smaller contiguous areas called segments.')
hpGlobalMemFreeSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemFreeSegCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemFreeSegCnt.setDescription('The current number of free memory segments. A free memory segment is an unused contiguous memory block of greater than 16 bytes. Generally, an increase in the number of free memory segments indicates an increase in memory fragmentation.')
hpGlobalMemAllocSegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemAllocSegCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemAllocSegCnt.setDescription('The number of currently allocated memory segments.')
hpGlobalMemTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemTotalBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemTotalBytes.setDescription('The number of currently installed bytes.')
hpGlobalMemFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemFreeBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemFreeBytes.setDescription('The number of available (unallocated) bytes.')
hpGlobalMemAllocBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGlobalMemAllocBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hpGlobalMemAllocBytes.setDescription('The number of currently allocated bytes.')
hpSwitchOsVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchOsVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchOsVersion.setDescription('Contains the operating code version number (also known as software or firmware). For example, a software version such as A.08.01 is described as follows: A the function set available in your router 08 the common release number 01 updates to the current common release')
hpSwitchRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRomVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRomVersion.setDescription('Contains the ROM version number (such as A.08.01 is described as follows: A the function set available in your router 08 the common release number 01 updates to the current common release')
hpSwitchSmartCardType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("fddi", 2), ("atm", 3), ("fddiAndATM", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSmartCardType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSmartCardType.setDescription('Return the type of Smart Cards in the system. Some system may contains more than one types of smart cards, such as FDDI and ATM')
hpSwitchBaseMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchBaseMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchBaseMACAddress.setDescription('Return the base MAC address of the switch. This is also the MAC address of the default vlan. ')
mibBuilder.exportSymbols("NETSWITCH-MIB", hpPktBuf=hpPktBuf, hpSwitchRomVersion=hpSwitchRomVersion, hpMsgBufMin=hpMsgBufMin, hpMem=hpMem, hpGlobalMemAllocBytes=hpGlobalMemAllocBytes, hpLocalMemTable=hpLocalMemTable, hpPktBufMin=hpPktBufMin, hpMsgBufEntry=hpMsgBufEntry, hpGlobalMemFreeBytes=hpGlobalMemFreeBytes, MacAddress=MacAddress, hpPktBufTable=hpPktBufTable, hpLocalMemEntry=hpLocalMemEntry, hpLocalMemAllocSegCnt=hpLocalMemAllocSegCnt, hpLocalMemFreeSegCnt=hpLocalMemFreeSegCnt, hpPktBufInit=hpPktBufInit, hpMsgBufInit=hpMsgBufInit, hpLocalMemTotalBytes=hpLocalMemTotalBytes, hpGlobalMemEntry=hpGlobalMemEntry, hpMsgBufCorrupted=hpMsgBufCorrupted, hpGlobalMemTable=hpGlobalMemTable, hpGlobalMemAllocSegCnt=hpGlobalMemAllocSegCnt, hpGlobalMemTotalBytes=hpGlobalMemTotalBytes, hpSwitchOsVersion=hpSwitchOsVersion, hpMsgBufFree=hpMsgBufFree, hpGlobalMemSlotIndex=hpGlobalMemSlotIndex, hpSwitchBaseMACAddress=hpSwitchBaseMACAddress, hpGlobalMemSlabCnt=hpGlobalMemSlabCnt, hpLocalMemSlabCnt=hpLocalMemSlabCnt, hpLocalMemFreeBytes=hpLocalMemFreeBytes, hpMsgBufSlotIndex=hpMsgBufSlotIndex, hpPktBufMiss=hpPktBufMiss, hpPktBufSlotIndex=hpPktBufSlotIndex, hpLocalMemAllocBytes=hpLocalMemAllocBytes, hpPktBufEntry=hpPktBufEntry, hpGlobalMemFreeSegCnt=hpGlobalMemFreeSegCnt, hpSwitchSmartCardType=hpSwitchSmartCardType, hpPktBufCorrupted=hpPktBufCorrupted, hpMsgBufTable=hpMsgBufTable, hpMsgBufMiss=hpMsgBufMiss, hpLocalMem=hpLocalMem, hpGlobalMem=hpGlobalMem, hpMsgBuf=hpMsgBuf, hpPktBufSize=hpPktBufSize, hpOpSystem=hpOpSystem, hpLocalMemSlotIndex=hpLocalMemSlotIndex, hpPktBufFree=hpPktBufFree, hpBuf=hpBuf, hpMsgBufSize=hpMsgBufSize)
