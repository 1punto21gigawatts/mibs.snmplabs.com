#
# PySNMP MIB module HP-ICF-IP-LOCKDOWN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-IP-LOCKDOWN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:34:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, TimeTicks, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Counter64, Integer32, Unsigned32, MibIdentifier, Counter32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Counter64", "Integer32", "Unsigned32", "MibIdentifier", "Counter32", "ObjectIdentity", "NotificationType")
DisplayString, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "TextualConvention")
hpicfIpLockdown = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39))
hpicfIpLockdown.setRevisions(('2008-03-16 05:24', '2006-06-08 23:47',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfIpLockdown.setRevisionsDescriptions(("Added hpicfIpLockErrantNotify, it's objects and groups. Obsoleted hpicfIpLockTrapsCntl in favor of hpicfIpLockTrapsCtrl and added a hpicfIpLockObsoleteGroup.", 'Initial revision.',))
if mibBuilder.loadTexts: hpicfIpLockdown.setLastUpdated('200803160524Z')
if mibBuilder.loadTexts: hpicfIpLockdown.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfIpLockdown.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfIpLockdown.setDescription('This MIB module contains HP proprietary objects for managing Dynamic IP Lockdown.')
hpicfIpLockTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0))
hpicfIpLockTrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1))
hpicfIpLockOutOfResourceSource = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpsnooping", 1), ("iplockdown", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockOutOfResourceSource.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockOutOfResourceSource.setDescription('The identifier of the reason for out of hardware resource condition')
hpicfIpLockOutOfResources = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 2)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrPort"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrMacAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrIpAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrVlan"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockOutOfResourceSource"))
if mibBuilder.loadTexts: hpicfIpLockOutOfResources.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockOutOfResources.setDescription("This trap indicates that unexpected running out of hardware resources to program a Dynamic IP Lockdown rule. This notification trap is controlled by the state of 'hpicfIpLockTrapCtrl' object. Implementation of this trap is optional.")
hpicfIpLockErrantNotify = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 3)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyCount"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyPort"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifySrcIpType"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifySrcIpAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyDstIpType"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyDstIpAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyMacAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyPktCount"))
if mibBuilder.loadTexts: hpicfIpLockErrantNotify.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockErrantNotify.setDescription("This notification indicates a host was denied access to the switch based on Dynamic Lockdown Protection rules. This notification trap is controlled by the state of the 'hpicfIpLockTrapCtrl' object. Implementation of this trap is optional.")
hpicfIpLockErrantNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4))
hpicfIpLockNotifyCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 1), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifyCount.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifyCount.setDescription("A count of 'hpicfIpLockErrantNotify' sent from the Dynamic Ip Lockdown Protection entity to the SNMP entity since boot.")
hpicfIpLockNotifyPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifyPort.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifyPort.setDescription("The port for which this 'hpicfIpLockErrantNotify' applies.")
hpicfIpLockNotifySrcIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifySrcIpType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifySrcIpType.setDescription("The type of IP address contained in 'hpicfIpLockNotifySrcIpAddress'. The only values expected are ipv4 or ipv6.")
hpicfIpLockNotifySrcIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifySrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifySrcIpAddress.setDescription("The source IP address for which this 'hpicfIpLockErrantNotify' applies.")
hpicfIpLockNotifyDstIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 5), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifyDstIpType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifyDstIpType.setDescription("The type of IP address contained in 'hpicfIpLockNotifyDstIpAddress'. The only values expected are ipv4 or ipv6.")
hpicfIpLockNotifyDstIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 6), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifyDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifyDstIpAddress.setDescription("The destination IP address for which this 'hpicfIpLockErrantNotify' applies.")
hpicfIpLockNotifyMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifyMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifyMacAddress.setDescription("The source MAC address for which this 'hpicfIpLockErrantNotify' applies.")
hpicfIpLockNotifyPktCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 0, 1, 4, 8), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfIpLockNotifyPktCount.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockNotifyPktCount.setDescription('This object indicates the number of packets received from this host which were dropped.')
hpicfIpLockObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1))
hpicfIpLockConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1))
hpicfIpLockEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpLockEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockEnable.setDescription('The administrative status of the Dynamic IP Lockdown feature.')
hpicfIpLockPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfIpLockPortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockPortTable.setDescription('Per-interface configuration for Dynamic IP Lockdown.')
hpicfIpLockTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1, 3), Bits().clone(namedValues=NamedValues(("outOfResource", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpLockTrapCntl.setStatus('obsolete')
if mibBuilder.loadTexts: hpicfIpLockTrapCntl.setDescription("********* THIS OBJECT IS OBSOLETED ********** This object has been obsoleted in favor of 'hpicfIpLockTrapCtrl'. Controls generation of SNMP traps for events defined in this MIB. The set bit means 'enabled'. - OutOfResource(0) The state of this bit specifies whether the notification trap is allowed to be send when one runs out of resources programming a dynamic IP Lockdown rule..")
hpicfIpLockTrapCtrl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpLockTrapCtrl.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockTrapCtrl.setDescription('Controls generation of SNMP notifications for traps defined in this MIB.')
hpicfIpLockPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfIpLockPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockPortEntry.setDescription('Dynamic IP Lockdown configuration information for a single port.')
hpicfIpLockPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpLockPortEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockPortEnable.setDescription('This object indicates whether this port is enabled for Dynamic IP Lockdown.')
hpicfIpLockStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2))
hpicfIpLockPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 1), )
if mibBuilder.loadTexts: hpicfIpLockPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockPortStatusTable.setDescription('Per-interface status for Dynamic IP Lockdown.')
hpicfIpLockPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfIpLockPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockPortStatusEntry.setDescription('Dynamic IP Lockdown status information for a single port.')
hpicfIpLockPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("active", 0), ("noDsnoop", 1), ("trustedPort", 2), ("noSnoopingVlan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockPortOperStatus.setDescription("This object indicates the various states of the current operating mode of Dynamic IP Lockdown on this port. When no bits are set, the status of this feature shall be 'disabled'. Each status is described below: active - Dynamic IP Lockdown is active on this port. noDsnoop - Dynamic IP Lockdown is enabled on this port, but DHCP Snooping is not globally enabled. trustedPort - Dynamic IP Lockdown is enabled on this port, but is not active because the port is a DHCP Snooping trusted port. noSnoopingVlan - Dynamic IP Lockdown is enabled on this port, but is not active because the port is not a member of any VLAN with DHCP Snooping enabled.")
hpicfIpLockAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2), )
if mibBuilder.loadTexts: hpicfIpLockAddrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrTable.setDescription('Table of source address bindings on ports where Dynamic IP Lockdown is active that are currently permitted.')
hpicfIpLockAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1), ).setIndexNames((0, "HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrPort"), (0, "HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrType"), (0, "HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrIpAddress"))
if mibBuilder.loadTexts: hpicfIpLockAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrEntry.setDescription('An entry in the table containing a single permitted source address binding.')
hpicfIpLockAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockAddrPort.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrPort.setDescription('The port that this address binding is permitted on.')
hpicfIpLockAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrType.setDescription('The type of IP address contained in hpicfIpLockAddrIpAddress. The only values expected are ipv4 or ipv6.')
hpicfIpLockAddrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockAddrIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrIpAddress.setDescription('A source IP address permitted on this port. The type of address contained in this object is indicated by hpicfIpLockAddrType.')
hpicfIpLockAddrVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1, 4), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockAddrVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrVlan.setDescription('The VLAN ID on which this source address is permitted on this port.')
hpicfIpLockAddrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockAddrMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockAddrMacAddress.setDescription('The source MAC address that is permitted for this source IP address on this port.')
hpicfIpLockResourceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpLockResourceAvailable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockResourceAvailable.setDescription('TRUE indicates that resources were available to add binding. FALSE indicates that resources were not available')
hpicfIpLockConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2))
hpicfIpLockGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 1))
hpicfIpLockBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 1, 1)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockEnable"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockPortEnable"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockPortOperStatus"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrPort"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrType"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrIpAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrVlan"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockAddrMacAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockResourceAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpLockBaseGroup = hpicfIpLockBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockBaseGroup.setDescription('A collection of objects for configuring and monitoring the base Dynamic IP Lockdown functionality.')
hpicfIpLockTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 1, 2)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockOutOfResources"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockErrantNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpLockTrapsGroup = hpicfIpLockTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockTrapsGroup.setDescription('A collection of trap objects for Dynamic IP Lockdown.')
hpicfIpLockTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 1, 3)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockOutOfResourceSource"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyCount"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyPort"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifySrcIpType"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifySrcIpAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyDstIpType"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyDstIpAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyMacAddress"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockNotifyPktCount"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockTrapCtrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpLockTrapObjectsGroup = hpicfIpLockTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockTrapObjectsGroup.setDescription('A collection of objects for receiving notification information in regards to the Dynamic IP Lockdown functionality.')
hpicfIpLockObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 1, 4)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockTrapCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpLockObsoleteGroup = hpicfIpLockObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hpicfIpLockObsoleteGroup.setDescription('These objects are obsolete and are no longer used.')
hpicfIpLockCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 2))
hpicfIpLockCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 2, 1)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpLockCompliance = hpicfIpLockCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockCompliance.setDescription('The compliance statement for HP switches that support Dynamic IP Lockdown.')
hpicfIpLockTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 39, 2, 2, 2)).setObjects(("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockTrapObjectsGroup"), ("HP-ICF-IP-LOCKDOWN-MIB", "hpicfIpLockTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpLockTrapCompliance = hpicfIpLockTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpLockTrapCompliance.setDescription('The compliance statement for HP switches that support Dynamic IP Lockdown Notify group .')
mibBuilder.exportSymbols("HP-ICF-IP-LOCKDOWN-MIB", hpicfIpLockConformance=hpicfIpLockConformance, hpicfIpLockTrapCtrl=hpicfIpLockTrapCtrl, hpicfIpLockNotifyDstIpAddress=hpicfIpLockNotifyDstIpAddress, hpicfIpLockNotifyPktCount=hpicfIpLockNotifyPktCount, hpicfIpLockAddrType=hpicfIpLockAddrType, hpicfIpLockdown=hpicfIpLockdown, hpicfIpLockErrantNotifyObjects=hpicfIpLockErrantNotifyObjects, hpicfIpLockAddrEntry=hpicfIpLockAddrEntry, hpicfIpLockNotifyCount=hpicfIpLockNotifyCount, hpicfIpLockAddrVlan=hpicfIpLockAddrVlan, hpicfIpLockAddrPort=hpicfIpLockAddrPort, hpicfIpLockPortStatusEntry=hpicfIpLockPortStatusEntry, hpicfIpLockResourceAvailable=hpicfIpLockResourceAvailable, hpicfIpLockPortStatusTable=hpicfIpLockPortStatusTable, hpicfIpLockCompliance=hpicfIpLockCompliance, hpicfIpLockNotifyPort=hpicfIpLockNotifyPort, hpicfIpLockPortEntry=hpicfIpLockPortEntry, hpicfIpLockEnable=hpicfIpLockEnable, hpicfIpLockObjects=hpicfIpLockObjects, hpicfIpLockTrapsGroup=hpicfIpLockTrapsGroup, hpicfIpLockTrapCompliance=hpicfIpLockTrapCompliance, hpicfIpLockAddrMacAddress=hpicfIpLockAddrMacAddress, hpicfIpLockTrapsObjects=hpicfIpLockTrapsObjects, hpicfIpLockNotifySrcIpAddress=hpicfIpLockNotifySrcIpAddress, hpicfIpLockGroups=hpicfIpLockGroups, hpicfIpLockNotifySrcIpType=hpicfIpLockNotifySrcIpType, hpicfIpLockOutOfResources=hpicfIpLockOutOfResources, hpicfIpLockTraps=hpicfIpLockTraps, hpicfIpLockStatus=hpicfIpLockStatus, hpicfIpLockPortEnable=hpicfIpLockPortEnable, hpicfIpLockAddrIpAddress=hpicfIpLockAddrIpAddress, hpicfIpLockErrantNotify=hpicfIpLockErrantNotify, hpicfIpLockNotifyDstIpType=hpicfIpLockNotifyDstIpType, hpicfIpLockTrapCntl=hpicfIpLockTrapCntl, hpicfIpLockCompliances=hpicfIpLockCompliances, hpicfIpLockObsoleteGroup=hpicfIpLockObsoleteGroup, hpicfIpLockConfig=hpicfIpLockConfig, hpicfIpLockBaseGroup=hpicfIpLockBaseGroup, hpicfIpLockPortOperStatus=hpicfIpLockPortOperStatus, hpicfIpLockPortTable=hpicfIpLockPortTable, hpicfIpLockAddrTable=hpicfIpLockAddrTable, PYSNMP_MODULE_ID=hpicfIpLockdown, hpicfIpLockTrapObjectsGroup=hpicfIpLockTrapObjectsGroup, hpicfIpLockNotifyMacAddress=hpicfIpLockNotifyMacAddress, hpicfIpLockOutOfResourceSource=hpicfIpLockOutOfResourceSource)
