#
# PySNMP MIB module ELTEX-BRIDGE-ERPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-BRIDGE-ERPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:00:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
eltexBridgeExtMIBObjects, = mibBuilder.importSymbols("ELTEX-BRIDGE-EXT-MIB", "eltexBridgeExtMIBObjects")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, Integer32, Counter64, Unsigned32, Counter32, ObjectIdentity, ModuleIdentity, IpAddress, Gauge32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Integer32", "Counter64", "Unsigned32", "Counter32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Gauge32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, MacAddress, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString", "TruthValue")
eltexErpsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1))
if mibBuilder.loadTexts: eltexErpsMIB.setLastUpdated('1304220000Z')
if mibBuilder.loadTexts: eltexErpsMIB.setOrganization('Eltex Ltd.')
if mibBuilder.loadTexts: eltexErpsMIB.setContactInfo('http://www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltexErpsMIB.setDescription('The MIB module for managing Ethernet Ring Protection Switching.')
eltexErpsCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1))
eltexErpsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 2))
eltexErpsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3))
eltexErpsNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4))
class EltexErpsEnabledState(TextualConvention, Integer32):
    reference = 'ITU-T G.8032'
    description = 'Indicates whether the state of object is enabled or disabled. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class EltexErpsMgmtRAPSPortState(TextualConvention, Integer32):
    reference = 'ITU-T G.8032'
    description = 'Indicates Ethernet ring port state. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("fowarding", 1), ("blocking", 2), ("signal-fail", 3), ("manual-switch", 4), ("forced-switch", 5))

class EltexErpsMgmtRAPSPortId(TextualConvention, Integer32):
    reference = 'ITU-T G.8032'
    description = 'Ethernet ring port id. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("west", 2), ("east", 3))

eltexErpsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1, 1), EltexErpsEnabledState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsAdminState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsAdminState.setDescription('This object indicates the ERPS state of the bridge.')
eltexErpsLogState = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1, 2), EltexErpsEnabledState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsLogState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsLogState.setDescription('This object indicates the ERPS log state of the bridge.')
eltexErpsTrapState = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1, 3), EltexErpsEnabledState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsTrapState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsTrapState.setDescription('This object indicates the ERPS trap state of the bridge.')
eltexErpsPendingAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copyPendingActive", 1), ("copyActivePending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsPendingAction.setStatus('current')
if mibBuilder.loadTexts: eltexErpsPendingAction.setDescription('The action to be done with the pending configuration. copyPendingActive - to copy the pending erps configuration to the active one. copyActivePending - to copy the active erps configuration to the pending one. ')
eltexErpsPendingActionVlan = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsPendingActionVlan.setStatus('current')
if mibBuilder.loadTexts: eltexErpsPendingActionVlan.setDescription('Variable is associated with eltexErpsPendingAction and determines vlan_tag number in config for action copying/revert on pending config')
eltexErpsGetConfigId = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("pending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsGetConfigId.setStatus('current')
if mibBuilder.loadTexts: eltexErpsGetConfigId.setDescription('Set config id fot snmp get.')
eltexErpsMgmtRAPSVlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1), )
if mibBuilder.loadTexts: eltexErpsMgmtRAPSVlanTable.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSVlanTable.setDescription('This table contains ERPS ring configuration information.')
eltexErpsMgmtRAPSVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1), ).setIndexNames((0, "ELTEX-BRIDGE-ERPS-MIB", "eltexErpsMgmtRAPSVlanId"))
if mibBuilder.loadTexts: eltexErpsMgmtRAPSVlanEntry.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSVlanEntry.setDescription('A list of ERPS ring configuration information.')
eltexErpsMgmtRAPSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSVlanId.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSVlanId.setDescription('The RAPS VLAN is an index of configuration.')
eltexErpsMgmtRAPSWestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSWestPort.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSWestPort.setDescription('This is one of the Ethernet ring ports. The value 0 indicates the west port is a virtual channel. ')
eltexErpsMgmtRAPSWestPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 3), EltexErpsMgmtRAPSPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSWestPortState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSWestPortState.setDescription('This is the west port state. It may change sometimes. When the west port is configured on a virtual channel, the west port state is always fowarding. ')
eltexErpsMgmtRAPSEastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSEastPort.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSEastPort.setDescription('This is the other Ethernet ring port. The value 0 indicates the west port is a virtual channel. ')
eltexErpsMgmtRAPSEastPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 5), EltexErpsMgmtRAPSPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSEastPortState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSEastPortState.setDescription('This is the east port state. It may change sometimes. When the east port is configured on a virtual channel, the east port state is always fowarding. ')
eltexErpsMgmtRAPSRPLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 6), EltexErpsMgmtRAPSPortId().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRPLPort.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRPLPort.setDescription("When the port Enable state is enabled, the RPL port's current port role is defined by the application of the ERPS. ")
eltexErpsMgmtRAPSRPLOwnerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 7), EltexErpsEnabledState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRPLOwnerAdminState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRPLOwnerAdminState.setDescription('The administrative value of the RPL owner state. The RPL owner is an Ethernet Ring Node adjacent to the RPL that is responsible for blocking its end of the RPL under normal conditions.')
eltexErpsMgmtRAPSRingMEL = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRingMEL.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRingMEL.setDescription('The ring MEL is the maintenance entity group (MEG) level providing a communication channel for ring automatic protection switching (RAPS) information.')
eltexErpsMgmtRAPSHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSHoldOffTime.setDescription('In order to coordinate timing of protection switches at multiple layers.')
eltexErpsMgmtRAPSGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSGuardTime.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSGuardTime.setDescription('This is used to prevent ring nodes from receiving outdated RAPS messages.')
eltexErpsMgmtRAPSWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSWTRTime.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSWTRTime.setDescription('In the revertive mode of operation, to prevent frequent operation of the protection switch due to an intermittent defect, a failed working transport entity must become stable in a fault-free state.')
eltexErpsMgmtRAPSRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("protection", 3), ("manual-switch", 4), ("forced-switch", 5), ("pending", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRingState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRingState.setDescription('This indicates the state of the ring: begin, init, idle, or protection.')
eltexErpsMgmtRAPSRingAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 13), EltexErpsEnabledState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRingAdminState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRingAdminState.setDescription('This indicates the administrative state of the ring.')
eltexErpsMgmtRAPSRPLOwnerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRPLOwnerOperStatus.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRPLOwnerOperStatus.setDescription("The current operational value of the RPL owner state. The value 'active' is used to indicate that the RPL owner administrative state is enabled and the device is operated as the active RPL owner. The value 'inactive' is used to indicate that the RPL owner administrative state is enabled, but the device is operated as the inactive RPL owner. The value 'disabled' is used to indicate that the RPL owner administrative state of the device is disabled.")
eltexErpsMgmtRAPSProtectionVlanRangeList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList1to1024.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList1to1024.setDescription('This object indicates the VLAN range (1-1024) that belongs to the protection VLANs.')
eltexErpsMgmtRAPSProtectionVlanRangeList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList1025to2048.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList1025to2048.setDescription('This object indicates the VLAN range (1025-2048) that belongs to the protection VLANs.')
eltexErpsMgmtRAPSProtectionVlanRangeList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList2049to3072.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList2049to3072.setDescription('This object indicates the VLAN range (2049-3072) that belongs to the protection VLANs.')
eltexErpsMgmtRAPSProtectionVlanRangeList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList3073to4094.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtectionVlanRangeList3073to4094.setDescription('This object indicates the VLAN range (3073-4094) that belongs to the protection VLANs.')
eltexErpsMgmtRAPSRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 19), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRevertive.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRevertive.setDescription('This indicates the revertive mode.')
eltexErpsMgmtRAPSProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSProtocolVersion.setDescription('This object indicates the ERPS protocol compatibility with other versions of ITU-T G.8032.')
eltexErpsMgmtRAPSPortForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 21), EltexErpsMgmtRAPSPortId().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSPortForcedSwitch.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSPortForcedSwitch.setDescription('Forced switch port.')
eltexErpsMgmtRAPSPortManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 22), EltexErpsMgmtRAPSPortId().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSPortManualSwitch.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSPortManualSwitch.setDescription('Manual switch port.')
eltexErpsMgmtRAPSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtRAPSRowStatus.setDescription('This object indicates the RowStatus of this entry.')
eltexErpsMgmtSubRingCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 2), )
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlTable.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlTable.setDescription('This table contains ERPS sub-ring configuration information.')
eltexErpsMgmtSubRingCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 2, 1), ).setIndexNames((0, "ELTEX-BRIDGE-ERPS-MIB", "eltexErpsMgmtSubRingCtrlRAPSVlanId"), (0, "ELTEX-BRIDGE-ERPS-MIB", "eltexErpsMgmtSubRingCtrlSubRingRAPSVlanId"))
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlEntry.setDescription('A list of ERPS sub-ring configuration information.')
eltexErpsMgmtSubRingCtrlRAPSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlRAPSVlanId.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlRAPSVlanId.setDescription('The RAPS VLAN is an index of configuration.')
eltexErpsMgmtSubRingCtrlSubRingRAPSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlSubRingRAPSVlanId.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlSubRingRAPSVlanId.setDescription('This indicates the ring control VLAN-ID of the sub-ring which connects to another ring.')
eltexErpsMgmtSubRingCtrlTCPropagationState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 2, 1, 3), EltexErpsEnabledState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlTCPropagationState.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlTCPropagationState.setDescription('This indicates the state of sub-ring topology change propagation.')
eltexErpsMgmtSubRingCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltexErpsMgmtSubRingCtrlRowStatus.setDescription('This object indicates the RowStatus of this entry.')
eltexErpsNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4, 0))
eltexErpsSFDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4, 0, 1)).setObjects(("ELTEX-BRIDGE-ERPS-MIB", "eltexErpsNodeId"))
if mibBuilder.loadTexts: eltexErpsSFDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: eltexErpsSFDetectedTrap.setDescription('When the signal fail occurs, a trap will be generated.')
eltexErpsSFClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4, 0, 2)).setObjects(("ELTEX-BRIDGE-ERPS-MIB", "eltexErpsNodeId"))
if mibBuilder.loadTexts: eltexErpsSFClearedTrap.setStatus('current')
if mibBuilder.loadTexts: eltexErpsSFClearedTrap.setDescription('When the signal fail clears, a trap will be generated.')
eltexErpsRPLOwnerConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4, 0, 3)).setObjects(("ELTEX-BRIDGE-ERPS-MIB", "eltexErpsNodeId"))
if mibBuilder.loadTexts: eltexErpsRPLOwnerConflictTrap.setStatus('current')
if mibBuilder.loadTexts: eltexErpsRPLOwnerConflictTrap.setDescription('When a conflict occurs, a trap will be generated.')
eltexErpsNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4, 2))
eltexErpsNodeId = MibScalar((1, 3, 6, 1, 4, 1, 35265, 35, 1, 1, 4, 2, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eltexErpsNodeId.setStatus('current')
if mibBuilder.loadTexts: eltexErpsNodeId.setDescription('This used trap object means the node MAC.')
mibBuilder.exportSymbols("ELTEX-BRIDGE-ERPS-MIB", eltexErpsMgmtSubRingCtrlRowStatus=eltexErpsMgmtSubRingCtrlRowStatus, eltexErpsInfo=eltexErpsInfo, eltexErpsMgmtRAPSEastPort=eltexErpsMgmtRAPSEastPort, eltexErpsLogState=eltexErpsLogState, eltexErpsMgmtSubRingCtrlSubRingRAPSVlanId=eltexErpsMgmtSubRingCtrlSubRingRAPSVlanId, eltexErpsMgmtRAPSPortForcedSwitch=eltexErpsMgmtRAPSPortForcedSwitch, eltexErpsTrapState=eltexErpsTrapState, eltexErpsMgmtRAPSRingState=eltexErpsMgmtRAPSRingState, eltexErpsMgmtRAPSProtocolVersion=eltexErpsMgmtRAPSProtocolVersion, eltexErpsMgmtRAPSProtectionVlanRangeList1025to2048=eltexErpsMgmtRAPSProtectionVlanRangeList1025to2048, eltexErpsMIB=eltexErpsMIB, eltexErpsMgmtRAPSWestPort=eltexErpsMgmtRAPSWestPort, EltexErpsMgmtRAPSPortId=EltexErpsMgmtRAPSPortId, eltexErpsMgmtRAPSVlanEntry=eltexErpsMgmtRAPSVlanEntry, eltexErpsCtrl=eltexErpsCtrl, eltexErpsMgmtSubRingCtrlTable=eltexErpsMgmtSubRingCtrlTable, eltexErpsMgmtRAPSVlanId=eltexErpsMgmtRAPSVlanId, eltexErpsMgmt=eltexErpsMgmt, eltexErpsMgmtRAPSGuardTime=eltexErpsMgmtRAPSGuardTime, eltexErpsMgmtRAPSProtectionVlanRangeList1to1024=eltexErpsMgmtRAPSProtectionVlanRangeList1to1024, eltexErpsSFDetectedTrap=eltexErpsSFDetectedTrap, eltexErpsMgmtRAPSRPLOwnerAdminState=eltexErpsMgmtRAPSRPLOwnerAdminState, eltexErpsPendingAction=eltexErpsPendingAction, eltexErpsMgmtRAPSEastPortState=eltexErpsMgmtRAPSEastPortState, eltexErpsNodeId=eltexErpsNodeId, eltexErpsMgmtRAPSWestPortState=eltexErpsMgmtRAPSWestPortState, eltexErpsMgmtRAPSVlanTable=eltexErpsMgmtRAPSVlanTable, eltexErpsMgmtRAPSPortManualSwitch=eltexErpsMgmtRAPSPortManualSwitch, eltexErpsMgmtRAPSRPLPort=eltexErpsMgmtRAPSRPLPort, eltexErpsMgmtRAPSProtectionVlanRangeList2049to3072=eltexErpsMgmtRAPSProtectionVlanRangeList2049to3072, eltexErpsNotificationBindings=eltexErpsNotificationBindings, eltexErpsNotify=eltexErpsNotify, PYSNMP_MODULE_ID=eltexErpsMIB, eltexErpsMgmtRAPSRevertive=eltexErpsMgmtRAPSRevertive, eltexErpsRPLOwnerConflictTrap=eltexErpsRPLOwnerConflictTrap, EltexErpsMgmtRAPSPortState=EltexErpsMgmtRAPSPortState, eltexErpsAdminState=eltexErpsAdminState, eltexErpsMgmtSubRingCtrlTCPropagationState=eltexErpsMgmtSubRingCtrlTCPropagationState, eltexErpsMgmtRAPSRowStatus=eltexErpsMgmtRAPSRowStatus, EltexErpsEnabledState=EltexErpsEnabledState, eltexErpsMgmtRAPSHoldOffTime=eltexErpsMgmtRAPSHoldOffTime, eltexErpsMgmtRAPSRingAdminState=eltexErpsMgmtRAPSRingAdminState, eltexErpsMgmtSubRingCtrlEntry=eltexErpsMgmtSubRingCtrlEntry, eltexErpsGetConfigId=eltexErpsGetConfigId, eltexErpsNotifyPrefix=eltexErpsNotifyPrefix, eltexErpsMgmtSubRingCtrlRAPSVlanId=eltexErpsMgmtSubRingCtrlRAPSVlanId, eltexErpsMgmtRAPSWTRTime=eltexErpsMgmtRAPSWTRTime, eltexErpsMgmtRAPSRPLOwnerOperStatus=eltexErpsMgmtRAPSRPLOwnerOperStatus, eltexErpsMgmtRAPSProtectionVlanRangeList3073to4094=eltexErpsMgmtRAPSProtectionVlanRangeList3073to4094, eltexErpsPendingActionVlan=eltexErpsPendingActionVlan, eltexErpsSFClearedTrap=eltexErpsSFClearedTrap, eltexErpsMgmtRAPSRingMEL=eltexErpsMgmtRAPSRingMEL)
