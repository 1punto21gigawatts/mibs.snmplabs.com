#
# PySNMP MIB module CISCO-SCAS-BB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SCAS-BB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
linkIndex, spvIndex, linkModuleIndex, pmoduleIndex = mibBuilder.importSymbols("PCUBE-SE-MIB", "linkIndex", "spvIndex", "linkModuleIndex", "pmoduleIndex")
pcubeWorkgroup, pcubeModules = mibBuilder.importSymbols("PCUBE-SMI", "pcubeWorkgroup", "pcubeModules")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, iso, Counter32, Counter64, Integer32, ModuleIdentity, TimeTicks, Gauge32, IpAddress, MibIdentifier, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "IpAddress", "MibIdentifier", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pcubeEngageMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5655, 2, 4))
pcubeEngageMIB.setRevisions(('2006-05-10 00:00', '2004-12-21 00:00', '2004-07-01 00:00', '2002-07-03 20:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pcubeEngageMIB.setRevisionsDescriptions(('MIB revised as a part of integration into Cisco SNMP MIB standard. Changed contacts, Added OBJECT-GROUPS, Added MODULE-COMPLIANCE.', "Main SNMP MIB for P-cube's Engage Applictaion, revised for Engage 2.5.", "Main SNMP MIB for P-cube's Engage Applictaion.", 'This MIB provides runtime status and monitoring capabilities for the SCAS BB application.',))
if mibBuilder.loadTexts: pcubeEngageMIB.setLastUpdated('200605100000Z')
if mibBuilder.loadTexts: pcubeEngageMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: pcubeEngageMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sce@cisco.com')
if mibBuilder.loadTexts: pcubeEngageMIB.setDescription('Main SNMP MIB for Cisco SCAS BB application which runs over Service Control Engine devices.')
pcubeEngageObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2))
pcubeEngageConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3))
pcubeEngageGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 1))
pcubeEngageCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 2))
serviceGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2, 1))
linkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2))
packageGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3))
subscriberGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4))
serviceCounterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5))
serviceTable = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 2, 1, 1))
linkServiceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1), )
if mibBuilder.loadTexts: linkServiceUsageTable.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageTable.setDescription('The Link Service-usage table provides information per link per global-scope service-counter.')
linkServiceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "linkModuleIndex"), (0, "PCUBE-SE-MIB", "linkIndex"), (0, "CISCO-SCAS-BB-MIB", "globalScopeServiceCounterIndex"))
if mibBuilder.loadTexts: linkServiceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageEntry.setDescription('A linkServiceUsageTable entry.')
linkServiceUsageUpVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 1), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUsageUpVolume.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageUpVolume.setDescription('The link service-counter upstream volume.')
linkServiceUsageDownVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 2), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUsageDownVolume.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageDownVolume.setDescription('The link service-counter downstream volume.')
linkServiceUsageNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 3), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUsageNumSessions.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageNumSessions.setDescription('The link service-counter.')
linkServiceUsageDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUsageDuration.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageDuration.setDescription('The link service-counter aggregated session duration.')
linkServiceUsageConcurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 5), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUsageConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageConcurrentSessions.setDescription('The link service-counter concurrent sessions.')
linkServiceUsageActiveSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 6), Counter32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUsageActiveSubscribers.setStatus('current')
if mibBuilder.loadTexts: linkServiceUsageActiveSubscribers.setDescription('The link service-counter amount of active subscribers.')
linkServiceUpDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUpDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: linkServiceUpDroppedPackets.setDescription('The link service-counter number of dropped packets on the upstream, when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
linkServiceDownDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceDownDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: linkServiceDownDroppedPackets.setDescription('The link service-counter number of dropped packets on the downstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
linkServiceUpDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceUpDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: linkServiceUpDroppedBytes.setDescription('The link service-counter number of dropped bytes on the upstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
linkServiceDownDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 2, 1, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkServiceDownDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: linkServiceDownDroppedBytes.setDescription('The link service-counter number of dropped bytes on the downstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
packageCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 1), )
if mibBuilder.loadTexts: packageCounterTable.setStatus('current')
if mibBuilder.loadTexts: packageCounterTable.setDescription('This table provides information per each package-counter configured into the system.')
packageCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "CISCO-SCAS-BB-MIB", "packageCounterIndex"))
if mibBuilder.loadTexts: packageCounterEntry.setStatus('current')
if mibBuilder.loadTexts: packageCounterEntry.setDescription('A packageCounterTable entry.')
packageCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: packageCounterIndex.setStatus('current')
if mibBuilder.loadTexts: packageCounterIndex.setDescription('The package-counter index.')
packageCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: packageCounterStatus.setStatus('current')
if mibBuilder.loadTexts: packageCounterStatus.setDescription('The package-counter status.')
packageCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packageCounterName.setStatus('current')
if mibBuilder.loadTexts: packageCounterName.setDescription('The name of the package-counter.')
packageCounterActiveSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packageCounterActiveSubscribers.setStatus('current')
if mibBuilder.loadTexts: packageCounterActiveSubscribers.setDescription('The total amount of active subscribers of the package-counter.')
packageServiceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2), )
if mibBuilder.loadTexts: packageServiceUsageTable.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageTable.setDescription('The Package Service Usage table contains counters per package-counter per global-scope service-counter.')
packageServiceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "CISCO-SCAS-BB-MIB", "packageCounterIndex"), (0, "CISCO-SCAS-BB-MIB", "globalScopeServiceCounterIndex"))
if mibBuilder.loadTexts: packageServiceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageEntry.setDescription('A packageServiceUsageTable entry.')
packageServiceUsageUpVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 1), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUsageUpVolume.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageUpVolume.setDescription('The package-counter service-counter upstream volume.')
packageServiceUsageDownVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 2), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUsageDownVolume.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageDownVolume.setDescription('The package-counter service-counter downstream volume.')
packageServiceUsageNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 3), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUsageNumSessions.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageNumSessions.setDescription('The package-counter service-counter number of sessions.')
packageServiceUsageDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUsageDuration.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageDuration.setDescription('The package-counter service-counter aggregated session duration.')
packageServiceUsageConcurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 5), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUsageConcurrentSessions.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageConcurrentSessions.setDescription('The package-counter service-counter concurrent sessions.')
packageServiceUsageActiveSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 6), Counter32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUsageActiveSubscribers.setStatus('current')
if mibBuilder.loadTexts: packageServiceUsageActiveSubscribers.setDescription('The package-counter service-counter amount of active subscribers.')
packageServiceUpDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUpDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: packageServiceUpDroppedPackets.setDescription('The package-counter service number of dropped packets on the upstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
packageServiceDownDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceDownDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: packageServiceDownDroppedPackets.setDescription('The package-counter service number of dropped packets on the downstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
packageServiceUpDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceUpDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: packageServiceUpDroppedBytes.setDescription('The package-counter service number of dropped bytes on the upstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
packageServiceDownDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 3, 2, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: packageServiceDownDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: packageServiceDownDroppedBytes.setDescription('The package-counter service number of dropped bytes on the downstream when accelerate packet drop is enabled this counter will always return 0xFFFFFFFF.')
subscribersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 1), )
if mibBuilder.loadTexts: subscribersTable.setStatus('current')
if mibBuilder.loadTexts: subscribersTable.setDescription('This table provides information for each subscriber.')
subscribersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "spvIndex"))
if mibBuilder.loadTexts: subscribersEntry.setStatus('current')
if mibBuilder.loadTexts: subscribersEntry.setDescription('A subscribersTable entry.')
subscriberPackageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberPackageIndex.setStatus('current')
if mibBuilder.loadTexts: subscriberPackageIndex.setDescription('The subscriber package index.')
subscriberServiceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 2), )
if mibBuilder.loadTexts: subscriberServiceUsageTable.setStatus('current')
if mibBuilder.loadTexts: subscriberServiceUsageTable.setDescription('This table provides information for each subscriber for each subscriber-scope service-counter.')
subscriberServiceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "spvIndex"), (0, "CISCO-SCAS-BB-MIB", "subscriberScopeServiceCounterIndex"))
if mibBuilder.loadTexts: subscriberServiceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: subscriberServiceUsageEntry.setDescription('A subscriberServiceUsageTable entry.')
subscriberServiceUsageUpVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 2, 1, 1), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberServiceUsageUpVolume.setStatus('current')
if mibBuilder.loadTexts: subscriberServiceUsageUpVolume.setDescription('The upstream volume.')
subscriberServiceUsageDownVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 2, 1, 2), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberServiceUsageDownVolume.setStatus('current')
if mibBuilder.loadTexts: subscriberServiceUsageDownVolume.setDescription('The downstream volume.')
subscriberServiceUsageNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberServiceUsageNumSessions.setStatus('current')
if mibBuilder.loadTexts: subscriberServiceUsageNumSessions.setDescription('The number of sessions.')
subscriberServiceUsageDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberServiceUsageDuration.setStatus('current')
if mibBuilder.loadTexts: subscriberServiceUsageDuration.setDescription('Aggregated session duration.')
globalScopeServiceCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 1), )
if mibBuilder.loadTexts: globalScopeServiceCounterTable.setStatus('current')
if mibBuilder.loadTexts: globalScopeServiceCounterTable.setDescription('The Global-scope Service-counter table consists of data regarding each service-counter configured into the system, used by the link and package entries.')
globalScopeServiceCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "CISCO-SCAS-BB-MIB", "globalScopeServiceCounterIndex"))
if mibBuilder.loadTexts: globalScopeServiceCounterEntry.setStatus('current')
if mibBuilder.loadTexts: globalScopeServiceCounterEntry.setDescription('A globalScopeServiceCounterEntry entry.')
globalScopeServiceCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: globalScopeServiceCounterIndex.setStatus('current')
if mibBuilder.loadTexts: globalScopeServiceCounterIndex.setDescription('The global-scope service-counter index.')
globalScopeServiceCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalScopeServiceCounterStatus.setStatus('current')
if mibBuilder.loadTexts: globalScopeServiceCounterStatus.setDescription('The global-scope service-counter status.')
globalScopeServiceCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalScopeServiceCounterName.setStatus('current')
if mibBuilder.loadTexts: globalScopeServiceCounterName.setDescription('The name of the global-scope service-counter.')
subscriberScopeServiceCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 2), )
if mibBuilder.loadTexts: subscriberScopeServiceCounterTable.setStatus('current')
if mibBuilder.loadTexts: subscriberScopeServiceCounterTable.setDescription('The Subscriber-Scope Service-counter table consists of data regarding each service-counter definition configured into the system, used by the subscriber entries.')
subscriberScopeServiceCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "CISCO-SCAS-BB-MIB", "subscriberScopeServiceCounterIndex"))
if mibBuilder.loadTexts: subscriberScopeServiceCounterEntry.setStatus('current')
if mibBuilder.loadTexts: subscriberScopeServiceCounterEntry.setDescription('A subscriberScopeServiceCounterEntry entry.')
subscriberScopeServiceCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: subscriberScopeServiceCounterIndex.setStatus('current')
if mibBuilder.loadTexts: subscriberScopeServiceCounterIndex.setDescription('The subscriber-scope service-counter index.')
subscriberScopeServiceCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberScopeServiceCounterStatus.setStatus('current')
if mibBuilder.loadTexts: subscriberScopeServiceCounterStatus.setDescription('The subscriber-scope service-counter status.')
subscriberScopeServiceCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 2, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberScopeServiceCounterName.setStatus('current')
if mibBuilder.loadTexts: subscriberScopeServiceCounterName.setDescription('The name of the subscriber-scope service-counter.')
pcubeEngageCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 2, 1)).setObjects(("CISCO-SCAS-BB-MIB", "pcubeLinkGroup"), ("CISCO-SCAS-BB-MIB", "pcubePackageGroup"), ("CISCO-SCAS-BB-MIB", "pcubeSubscriberGroup"), ("CISCO-SCAS-BB-MIB", "pcubeServiceCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeEngageCompliance = pcubeEngageCompliance.setStatus('current')
if mibBuilder.loadTexts: pcubeEngageCompliance.setDescription('A compliance statement defined in this MIB module, for SCABB SNMP agents.')
pcubeLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 1, 2)).setObjects(("CISCO-SCAS-BB-MIB", "linkServiceUsageUpVolume"), ("CISCO-SCAS-BB-MIB", "linkServiceUsageDownVolume"), ("CISCO-SCAS-BB-MIB", "linkServiceUsageNumSessions"), ("CISCO-SCAS-BB-MIB", "linkServiceUsageDuration"), ("CISCO-SCAS-BB-MIB", "linkServiceUsageConcurrentSessions"), ("CISCO-SCAS-BB-MIB", "linkServiceUsageActiveSubscribers"), ("CISCO-SCAS-BB-MIB", "linkServiceUpDroppedPackets"), ("CISCO-SCAS-BB-MIB", "linkServiceDownDroppedPackets"), ("CISCO-SCAS-BB-MIB", "linkServiceUpDroppedBytes"), ("CISCO-SCAS-BB-MIB", "linkServiceDownDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeLinkGroup = pcubeLinkGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeLinkGroup.setDescription('Link related inforamtion.')
pcubePackageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 1, 3)).setObjects(("CISCO-SCAS-BB-MIB", "packageCounterStatus"), ("CISCO-SCAS-BB-MIB", "packageCounterName"), ("CISCO-SCAS-BB-MIB", "packageCounterActiveSubscribers"), ("CISCO-SCAS-BB-MIB", "packageServiceUsageUpVolume"), ("CISCO-SCAS-BB-MIB", "packageServiceUsageDownVolume"), ("CISCO-SCAS-BB-MIB", "packageServiceUsageNumSessions"), ("CISCO-SCAS-BB-MIB", "packageServiceUsageDuration"), ("CISCO-SCAS-BB-MIB", "packageServiceUsageConcurrentSessions"), ("CISCO-SCAS-BB-MIB", "packageServiceUsageActiveSubscribers"), ("CISCO-SCAS-BB-MIB", "packageServiceUpDroppedPackets"), ("CISCO-SCAS-BB-MIB", "packageServiceDownDroppedPackets"), ("CISCO-SCAS-BB-MIB", "packageServiceUpDroppedBytes"), ("CISCO-SCAS-BB-MIB", "packageServiceDownDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubePackageGroup = pcubePackageGroup.setStatus('current')
if mibBuilder.loadTexts: pcubePackageGroup.setDescription('Package related information.')
pcubeSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 1, 4)).setObjects(("CISCO-SCAS-BB-MIB", "subscriberPackageIndex"), ("CISCO-SCAS-BB-MIB", "subscriberServiceUsageUpVolume"), ("CISCO-SCAS-BB-MIB", "subscriberServiceUsageDownVolume"), ("CISCO-SCAS-BB-MIB", "subscriberServiceUsageNumSessions"), ("CISCO-SCAS-BB-MIB", "subscriberServiceUsageDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSubscriberGroup = pcubeSubscriberGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeSubscriberGroup.setDescription('Subscriber related information.')
pcubeServiceCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 4, 3, 1, 5)).setObjects(("CISCO-SCAS-BB-MIB", "globalScopeServiceCounterStatus"), ("CISCO-SCAS-BB-MIB", "globalScopeServiceCounterName"), ("CISCO-SCAS-BB-MIB", "subscriberScopeServiceCounterStatus"), ("CISCO-SCAS-BB-MIB", "subscriberScopeServiceCounterName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeServiceCounterGroup = pcubeServiceCounterGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeServiceCounterGroup.setDescription('Service related information.')
mibBuilder.exportSymbols("CISCO-SCAS-BB-MIB", subscriberServiceUsageEntry=subscriberServiceUsageEntry, globalScopeServiceCounterStatus=globalScopeServiceCounterStatus, linkServiceUsageConcurrentSessions=linkServiceUsageConcurrentSessions, packageCounterEntry=packageCounterEntry, packageServiceUpDroppedPackets=packageServiceUpDroppedPackets, linkGrp=linkGrp, linkServiceUsageTable=linkServiceUsageTable, packageServiceUsageUpVolume=packageServiceUsageUpVolume, packageCounterName=packageCounterName, subscriberServiceUsageTable=subscriberServiceUsageTable, serviceCounterGrp=serviceCounterGrp, subscriberServiceUsageUpVolume=subscriberServiceUsageUpVolume, subscriberGrp=subscriberGrp, packageServiceUpDroppedBytes=packageServiceUpDroppedBytes, pcubeEngageCompliance=pcubeEngageCompliance, globalScopeServiceCounterTable=globalScopeServiceCounterTable, packageServiceUsageDuration=packageServiceUsageDuration, subscriberServiceUsageDuration=subscriberServiceUsageDuration, subscriberScopeServiceCounterIndex=subscriberScopeServiceCounterIndex, pcubeLinkGroup=pcubeLinkGroup, subscriberScopeServiceCounterEntry=subscriberScopeServiceCounterEntry, subscriberScopeServiceCounterTable=subscriberScopeServiceCounterTable, packageServiceUsageActiveSubscribers=packageServiceUsageActiveSubscribers, pcubeEngageGroups=pcubeEngageGroups, serviceGrp=serviceGrp, linkServiceUsageDownVolume=linkServiceUsageDownVolume, packageCounterIndex=packageCounterIndex, linkServiceUsageNumSessions=linkServiceUsageNumSessions, packageServiceUsageTable=packageServiceUsageTable, pcubeEngageObjs=pcubeEngageObjs, PYSNMP_MODULE_ID=pcubeEngageMIB, subscribersEntry=subscribersEntry, packageServiceDownDroppedPackets=packageServiceDownDroppedPackets, linkServiceUsageUpVolume=linkServiceUsageUpVolume, packageCounterTable=packageCounterTable, globalScopeServiceCounterEntry=globalScopeServiceCounterEntry, subscriberScopeServiceCounterName=subscriberScopeServiceCounterName, linkServiceUpDroppedBytes=linkServiceUpDroppedBytes, pcubeEngageConformance=pcubeEngageConformance, packageCounterStatus=packageCounterStatus, globalScopeServiceCounterName=globalScopeServiceCounterName, globalScopeServiceCounterIndex=globalScopeServiceCounterIndex, linkServiceUsageEntry=linkServiceUsageEntry, pcubeEngageCompliances=pcubeEngageCompliances, linkServiceDownDroppedPackets=linkServiceDownDroppedPackets, packageServiceUsageDownVolume=packageServiceUsageDownVolume, linkServiceUpDroppedPackets=linkServiceUpDroppedPackets, packageServiceUsageEntry=packageServiceUsageEntry, packageServiceDownDroppedBytes=packageServiceDownDroppedBytes, packageServiceUsageNumSessions=packageServiceUsageNumSessions, subscriberScopeServiceCounterStatus=subscriberScopeServiceCounterStatus, linkServiceDownDroppedBytes=linkServiceDownDroppedBytes, packageGrp=packageGrp, linkServiceUsageDuration=linkServiceUsageDuration, pcubePackageGroup=pcubePackageGroup, pcubeSubscriberGroup=pcubeSubscriberGroup, subscribersTable=subscribersTable, subscriberPackageIndex=subscriberPackageIndex, subscriberServiceUsageDownVolume=subscriberServiceUsageDownVolume, serviceTable=serviceTable, packageCounterActiveSubscribers=packageCounterActiveSubscribers, subscriberServiceUsageNumSessions=subscriberServiceUsageNumSessions, pcubeServiceCounterGroup=pcubeServiceCounterGroup, packageServiceUsageConcurrentSessions=packageServiceUsageConcurrentSessions, pcubeEngageMIB=pcubeEngageMIB, linkServiceUsageActiveSubscribers=linkServiceUsageActiveSubscribers)
