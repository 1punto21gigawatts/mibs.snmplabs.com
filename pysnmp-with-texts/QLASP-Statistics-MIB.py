#
# PySNMP MIB module QLASP-Statistics-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QLASP-Statistics-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:43:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, Unsigned32, IpAddress, Counter32, iso, Counter64, Bits, NotificationType, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Unsigned32", "IpAddress", "Counter32", "iso", "Counter64", "Bits", "NotificationType", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
qlogic = MibIdentifier((1, 3, 6, 1, 4, 1, 3873))
enet = MibIdentifier((1, 3, 6, 1, 4, 1, 3873, 1))
qlasp = MibIdentifier((1, 3, 6, 1, 4, 1, 3873, 1, 2))
qlaspStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2))
qlaspTeamStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1))
qlaspPhyAdapterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2))
qlaspVirAdapterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3))
btsTeamNumber = MibScalar((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsTeamNumber.setStatus('mandatory')
if mibBuilder.loadTexts: btsTeamNumber.setDescription('The number of loadbalance teams present on this system.')
btsTeamTable = MibTable((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: btsTeamTable.setStatus('mandatory')
if mibBuilder.loadTexts: btsTeamTable.setDescription('A list of team entries. The number of teams is given by the value of teamNumber.')
btsTeamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "QLASP-Statistics-MIB", "btsTeamIndex"))
if mibBuilder.loadTexts: btsTeamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: btsTeamEntry.setDescription('An entry containing team statistics objects at the target system.')
btsTeamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btsTeamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: btsTeamIndex.setDescription("An unique value for each team. The value for each team must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
btsTeamName = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsTeamName.setStatus('mandatory')
if mibBuilder.loadTexts: btsTeamName.setDescription(' A textual string containing name of the team')
btsPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPhyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: btsPhyNumber.setDescription('Number of physical adapters in the team')
btsVirNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsVirNumber.setStatus('mandatory')
if mibBuilder.loadTexts: btsVirNumber.setDescription('Number of virtual adapters in the team ')
btsPacketSends = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPacketSends.setStatus('mandatory')
if mibBuilder.loadTexts: btsPacketSends.setDescription('number of send packets that are forwarded to the team members, derived from physical adapter statistics.')
btsPacketSendDiscardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPacketSendDiscardeds.setStatus('mandatory')
if mibBuilder.loadTexts: btsPacketSendDiscardeds.setDescription('number of send packets that are discarded, derived from physical adapter statistics.')
btsPacketSendQueueds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPacketSendQueueds.setStatus('mandatory')
if mibBuilder.loadTexts: btsPacketSendQueueds.setDescription('number of send packets queued by driver waiting for resource')
btsPacketRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPacketRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: btsPacketRecvs.setDescription('number of receive packets that are indicated to upper layer, derived from physical adapter statistics.')
btsPacketRecvDiscardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPacketRecvDiscardeds.setStatus('mandatory')
if mibBuilder.loadTexts: btsPacketRecvDiscardeds.setDescription('number of receive packets discarded, derived from physical adapter statistics.')
btsLinkPacketsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsLinkPacketsSents.setStatus('mandatory')
if mibBuilder.loadTexts: btsLinkPacketsSents.setDescription('For LiveLink feature: Number of link packets sent across all adapters for the team - Expressed as a quantity.')
btsLinkPacketsRetrieds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsLinkPacketsRetrieds.setStatus('mandatory')
if mibBuilder.loadTexts: btsLinkPacketsRetrieds.setDescription('For LiveLink feature: The number of retry packets sent across all adapters for the team - Expressed as a quantity.')
btsPhyAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsPhyAdapterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: btsPhyAdapterNumber.setDescription('Number of physical adapters presented in the physical adapter table.')
btsPhyAdapterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2), )
if mibBuilder.loadTexts: btsPhyAdapterStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: btsPhyAdapterStatTable.setDescription('The phyMember tables contain the physical adapter members of loadbalance teams.')
btsPhyAdapterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1), ).setIndexNames((0, "QLASP-Statistics-MIB", "btspTeamIndex"), (0, "QLASP-Statistics-MIB", "btspAdapterIndex"))
if mibBuilder.loadTexts: btsPhyAdapterStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: btsPhyAdapterStatEntry.setDescription('A team entry containing objects at the target system.')
btspTeamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btspTeamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: btspTeamIndex.setDescription('An unique value for each team.')
btspAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btspAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: btspAdapterIndex.setDescription('A value for each adapter within a team.')
btspAdapterDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspAdapterDesc.setStatus('mandatory')
if mibBuilder.loadTexts: btspAdapterDesc.setDescription(' A textual string containing name of the physical member')
btspPacketSends = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspPacketSends.setStatus('mandatory')
if mibBuilder.loadTexts: btspPacketSends.setDescription('number of send request completed by miniport .')
btspPacketSendDiscardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspPacketSendDiscardeds.setStatus('mandatory')
if mibBuilder.loadTexts: btspPacketSendDiscardeds.setDescription('number of send request discarded.')
btspPacketRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspPacketRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: btspPacketRecvs.setDescription('number of receive packets that are indicated to upper layer.')
btspPacketRecvDiscardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspPacketRecvDiscardeds.setStatus('mandatory')
if mibBuilder.loadTexts: btspPacketRecvDiscardeds.setDescription(' number of receive packets discarded.')
btspLinkPacketsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspLinkPacketsSents.setStatus('mandatory')
if mibBuilder.loadTexts: btspLinkPacketsSents.setDescription('For LiveLink feature: Number of link packets sent vis the adapters for the team - Expressed as a quantity.')
btspLinkPacketsRetrieds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btspLinkPacketsRetrieds.setStatus('mandatory')
if mibBuilder.loadTexts: btspLinkPacketsRetrieds.setDescription('For LiveLink feature: The number of retry packets sent via the adapters for the team - Expressed as a quantity.')
btsVirAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsVirAdapterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: btsVirAdapterNumber.setDescription('Number of virtual adapters presented in the virtual adapter table.')
btsVirAdapterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2), )
if mibBuilder.loadTexts: btsVirAdapterStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: btsVirAdapterStatTable.setDescription('The phyMember tables contain the physical adapter members of loadbalance teams.')
btsVirAdapterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1), ).setIndexNames((0, "QLASP-Statistics-MIB", "btsvTeamIndex"), (0, "QLASP-Statistics-MIB", "btsvAdapterIndex"))
if mibBuilder.loadTexts: btsVirAdapterStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: btsVirAdapterStatEntry.setDescription('A team entry containing objects at the target system.')
btsvTeamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btsvTeamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: btsvTeamIndex.setDescription('An unique value for each team.')
btsvAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: btsvAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: btsvAdapterIndex.setDescription('A value for each adapter within a team.')
btsvAdapterDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsvAdapterDesc.setStatus('mandatory')
if mibBuilder.loadTexts: btsvAdapterDesc.setDescription('A textual string containing name of the virtual member')
btsvPacketSends = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsvPacketSends.setStatus('mandatory')
if mibBuilder.loadTexts: btsvPacketSends.setDescription('number of send request completed .')
btsvPacketSendQueueds = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsvPacketSendQueueds.setStatus('mandatory')
if mibBuilder.loadTexts: btsvPacketSendQueueds.setDescription('number of send request being queued by driver waiting for resource')
btsvPacketRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 3873, 1, 2, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btsvPacketRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: btsvPacketRecvs.setDescription(' number of receive indicated to upper layer successfully.')
mibBuilder.exportSymbols("QLASP-Statistics-MIB", btsvPacketSends=btsvPacketSends, qlaspStat=qlaspStat, btsTeamName=btsTeamName, btspAdapterIndex=btspAdapterIndex, qlogic=qlogic, btspAdapterDesc=btspAdapterDesc, btsPacketSends=btsPacketSends, btsLinkPacketsSents=btsLinkPacketsSents, btsPhyAdapterNumber=btsPhyAdapterNumber, btsVirAdapterStatTable=btsVirAdapterStatTable, btsvPacketRecvs=btsvPacketRecvs, btsVirAdapterNumber=btsVirAdapterNumber, btsTeamEntry=btsTeamEntry, btsTeamNumber=btsTeamNumber, qlaspTeamStat=qlaspTeamStat, btspLinkPacketsRetrieds=btspLinkPacketsRetrieds, qlasp=qlasp, btsvAdapterDesc=btsvAdapterDesc, btspPacketRecvs=btspPacketRecvs, btsvAdapterIndex=btsvAdapterIndex, btsTeamIndex=btsTeamIndex, btspTeamIndex=btspTeamIndex, btsPacketRecvDiscardeds=btsPacketRecvDiscardeds, btsLinkPacketsRetrieds=btsLinkPacketsRetrieds, btsPhyAdapterStatEntry=btsPhyAdapterStatEntry, btsPhyAdapterStatTable=btsPhyAdapterStatTable, enet=enet, qlaspVirAdapterStat=qlaspVirAdapterStat, btspPacketSendDiscardeds=btspPacketSendDiscardeds, btsVirNumber=btsVirNumber, btsvTeamIndex=btsvTeamIndex, btsTeamTable=btsTeamTable, btsVirAdapterStatEntry=btsVirAdapterStatEntry, btsPacketRecvs=btsPacketRecvs, btsPacketSendQueueds=btsPacketSendQueueds, btsvPacketSendQueueds=btsvPacketSendQueueds, btspLinkPacketsSents=btspLinkPacketsSents, btspPacketSends=btspPacketSends, btsPhyNumber=btsPhyNumber, btsPacketSendDiscardeds=btsPacketSendDiscardeds, qlaspPhyAdapterStat=qlaspPhyAdapterStat, btspPacketRecvDiscardeds=btspPacketRecvDiscardeds)
