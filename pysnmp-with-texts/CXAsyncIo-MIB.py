#
# PySNMP MIB module CXAsyncIo-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXAsyncIo-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cxAsyncIo, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxAsyncIo", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, MibIdentifier, Counter32, TimeTicks, NotificationType, ModuleIdentity, Bits, Gauge32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "MibIdentifier", "Counter32", "TimeTicks", "NotificationType", "ModuleIdentity", "Bits", "Gauge32", "Counter64", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
asioSapOprTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1), )
if mibBuilder.loadTexts: asioSapOprTable.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprTable.setDescription('Contains configuration information about each Async driver SAP (service access point) and its associated hardware port.')
asioSapOprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1), ).setIndexNames((0, "CXAsyncIo-MIB", "asioSapOprNumber"))
if mibBuilder.loadTexts: asioSapOprEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprEntry.setDescription('Contains configuration information for a specific Async driver SAP (service access point) and its associated hardware port.')
asioSapOprNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprNumber.setDescription('Indicates the table row containing configuration or monitoring objects for a SAP (service access point) associated with the slot and port for this card. Range of Values: 11 - 71 Note: First digit indicates the slot and the second digit indicates the port. Default Value: none')
asioSapOprAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 2), Alias()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprAlias.setDescription('Determines the name which uniquely identifies the SAP (service access point). Range of Values: 1 to 16 alphanumeric characters starting with an alpha character Default Value: none Configuration Changed: Administrative ')
asioSapOprPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 115200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortSpeed.setDescription('Defines the input and output speed, in bits per second, for the associated hardware port. Any value between 50 and 115200 will be accepted. Note: 134.5 bit/s is the minimum speed supported on ports in slots 5, 6 and 7 when the Data Expansion Module is installed. Default Value: 9600 bit/s')
asioSapOprPortCharacterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortCharacterSize.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortCharacterSize.setDescription('Defines the character size, in number of bits, to be used on the associated hardware port. Options: 5,6, 7 or 8 Note: This value does not include the start, stop or parity bits.')
asioSapOprPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("one-point-five", 2), ("two", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortStopBits.setDescription('Defines the number of stop bits to be used on the associated hardware port. Options: one (1 bit) one-point-five (1.5 bits) two (2 bits) Default Value: 1 bit')
asioSapOprPortBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortBreakLength.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortBreakLength.setDescription('Defines the number of break characters to be transmitted on the line when a reset is requested by the upper layer. A break is an all-zeroes character without a stop bit(s). Range of Values: 0 - 65535 Default Value: 10')
asioSapOprPortMaxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortMaxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortMaxQueueLength.setDescription('Defines the maximum transmitter queue length, in number of buffers. If more data requests are received from the upper layer after the queue has reached its maximum value, the data is discarded and the object asyStatOprTxSysCongestionDiscards is incremented. You must be careful when updating this object dynamically because queued data can be lost if the size of the transmitter queue is decreased. Range of Values: 1 - 100 Default Value: 50 Configuration Changed: Operative only ')
asioSapOprPortQueueUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortQueueUpperThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortQueueUpperThreshold.setDescription('Defines the queue length, in number of buffers, after which the Async driver starts flow controlling the upper layer. After the queue has reached this length, the Async driver will queue more data requests on the transmit queue up to the length specified in object asySapOprPortMaxQueueLength. Data is discarded above that length. The value for this object should always be less than the value of object asySapOprPortMaxQueueLength Range of Values: 1 - 100 Default Value: 45 Configuration Changed: Operative only ')
asioSapOprPortQueueLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortQueueLowerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortQueueLowerThreshold.setDescription('Defines the queue length, in number of buffers, after which the Async driver stops flow controlling the upper layer. The value for this object should always be less than or equal to the value of object asySapOprPortQueueUpperThreshold. Range of Values: 1 - 100 Default Value: 15 Configuration Changed: Operative only ')
asioSapOprPortSignalDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortSignalDownTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortSignalDownTimer.setDescription('Defines the length of time, in seconds, after which the Async port will drop its signals when it has received a disconnect request from the upper layer. Range of Values: 0 - 255 Default Value: 3')
asioSapOprPortMaxTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortMaxTimeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortMaxTimeDelay.setDescription('Defines the maximum time, in milliseconds, the port must wait before processing received characters. Range of Values: 1 - 5 Default Value: 5')
asioSapOprPortMaxInterruptCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortMaxInterruptCharacters.setStatus('obsolete')
if mibBuilder.loadTexts: asioSapOprPortMaxInterruptCharacters.setDescription('Obsolete.')
asioSapOprPortSignalSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortSignalSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortSignalSamplingPeriod.setDescription('Determines the sampling period, in 100 millisecond increments, that the associated hardware port uses to sample detectable signals. Range of Values: 3 - 100 Default Value: 5 Configuration Changed: Operative only ')
asioSapOprPortDcdDtrSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortDcdDtrSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortDcdDtrSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the DCD (Data Carrier Detect) signals if the port is physically strapped as a DTE, or DTR (Data Terminal Ready) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Operative only ')
asioSapOprPortCtsRtsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortCtsRtsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortCtsRtsSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the CTS (Clear To Send) signals if the port is physically strapped as a DTE, or RTS (Request To Send) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Operative only ')
asioSapOprPortDsrDrsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortDsrDrsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortDsrDrsSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the DRS (Data Rate Selector) signals if the port is physically strapped as a DTE, or DSR (Data Set Ready) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Operative only ')
asioSapOprPortTmLlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortTmLlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortTmLlSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the TM (Test Mode) signals if the port is physically strapped as a DTE, or LL (Local Loopback) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Operative only ')
asioSapOprPortRiRlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortRiRlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortRiRlSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the RI (Ring Indicator)signals if the port is physically strapped as a DTE, RL (Remote Loopback) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Operative only ')
asioSapOprPortStatisticsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortStatisticsTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortStatisticsTimer.setDescription('Determines the period of time, in seconds, that is used to measure Async driver performance and collect statistics. Range of Values: 0 - 60. Default Value: 0 (Performance statistics are not measured)')
asioSapOprPortCarrierAction = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortCarrierAction.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapOprPortCarrierAction.setDescription('Determines whether or not this SAP (service access point) will inform the associated upper layer SAP that service is no longer available because its associated hardware port has detected a loss of DCD (Data Carrier Detect) if the port is physically strapped as a DTE, or a loss of DTR (Data Terminal Ready) if the port is physically strapped as a DCE. Options: disabled (1) enabled (2) Default Value: disabled Configuration Changed: Operative only ')
asioOprPortTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioOprPortTrap.setStatus('mandatory')
if mibBuilder.loadTexts: asioOprPortTrap.setDescription('Indicates whether or not this SAP (service access point) produces the object asyPortStatusChange trap. Options: disabled (1) enabled (2) Default Value: disabled Configuration Changed: Operative only ')
asioOprControlLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceDown", 1), ("forceUp", 2), ("forceReset", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: asioOprControlLine.setStatus('mandatory')
if mibBuilder.loadTexts: asioOprControlLine.setDescription('Controls the state of the hardware port associated with the specified SAP (service access point). Options: forceDown (1) forceUp (2) forceReset (3) Configuration Changed: Operative only ')
asioOprControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearSapStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: asioOprControlStats.setStatus('mandatory')
if mibBuilder.loadTexts: asioOprControlStats.setDescription('Controls the handling of statistics collected at the associated hardware port. Option: clearSAPStats (1) Configuration Changed: Operative only ')
asioStatOprPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortType.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprPortType.setDescription('Identifies the hardware strapping used at the associated hardware port. Options: unknown (1) dte (2) dce (3)')
asioStatOprPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("rs232d", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprPortInterfaceType.setDescription('Identifies the type of hardware interface needed for the associated hardware port. Options: unknown (1) rs232d')
asioStatOprPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portUp", 1), ("portDown", 2), ("portShutDown", 3), ("portDownBadConfiguration", 4), ("portOutOfOrder", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprPortState.setDescription('Indicates the state of the associated hardware port. Options: portUp (1) portDown (2) portShutDown (3) portDownBadConfiguration (4) portOutOfOrder (5)')
asioStatOprDCDState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDCDState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDCDState.setDescription('Indicates the current state (active- high or active-low) of the DCD (Data Carrier Detect) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprDTRState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDTRState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDTRState.setDescription('Indicates the current state (active- high or active-low) of the DTR (Data Terminal Ready) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprRTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRTSState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRTSState.setDescription('Indicates the current state (active- high or active-low) of the RTS (Request To Send) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprCTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprCTSState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprCTSState.setDescription('Indicates the current state (active- high or active-low) of the CTS (Clear To Send) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprDSRState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDSRState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDSRState.setDescription('Indicates the current state (active- high or active-low) of the DSR (Data Set Ready) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprDRSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDRSState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDRSState.setDescription('Indicates the current state (active- high or active-low) of the DRS (Data Rate Selection) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprTMState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTMState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTMState.setDescription('Indicates the current state (active- high or active-low) of the TM (Test Mode) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprLLState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprLLState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprLLState.setDescription('Indicates the current state (active- high or active-low) of the LL (Local Loopback) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprRIState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRIState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRIState.setDescription('Indicates the current state (active- high or active-low) of the RI (Ring Indicator) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprRLState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRLState.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRLState.setDescription('Indicates the current state (active- high or active-low) of the RL (Remote Loopback) signal at the associated hardware port. Options: unknown (1) inactive (2) active (3)')
asioStatOprTxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxBps.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTxBps.setDescription('Indicates the number of bits per second that were transmitted during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBps.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxBps.setDescription('Indicates the number of bits per second that were received during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprTxBpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxBpsMax.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTxBpsMax.setDescription('Indicates the maximum number of bits per second transmitted, since the statistics were last reset, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxBpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBpsMax.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxBpsMax.setDescription('Indicates the maximum number of bits per second received, since the statistics were last reset, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprTxCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTxCharacters.setDescription('Indicates the number of characters transmitted from this port, since the statistics were last reset, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprTxBadStateDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxBadStateDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTxBadStateDiscards.setDescription('Indicates the number of characters that were discarded at this SAP (service access point) since the last power-up. The characters were discarded as a result of a frame transmission requested while the port was in an invalid state, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprTxResetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxResetDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTxResetDiscards.setDescription('Indicates the number of characters that were discarded at this SAP (service access point) since the last power-up as a result of a management requested line reset during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprTxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxSysCongestionDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTxSysCongestionDiscards.setDescription('Indicates the number of characters that were discarded at this SAP (service access point) since the last power-up as a result of system congestion, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxCharacters.setDescription('Indicates the number of characters that were received through this port since the statistics were last reset, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxOverrunErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxOverrunErrorCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxOverrunErrorCharacters.setDescription('Indicates the number of overrun error characters that were received by the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxParityErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxParityErrorCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxParityErrorCharacters.setDescription('Indicates the number of parity error characters that were received by the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxFramingErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxFramingErrorCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxFramingErrorCharacters.setDescription('Indicates the number of framing error characters that were received by the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxNoiseErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxNoiseErrorCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxNoiseErrorCharacters.setDescription('Indicates the number of noise error characters that were received by the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxBreakCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBreakCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxBreakCharacters.setDescription('Indicates the number of break characters that were received by the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxBadStateDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBadStateDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxBadStateDiscards.setDescription('Indicates the number of characters that were discarded at this SAP (service access point) since the last power-up. They were discarded as a result of a frame reception while in an invalid state, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioStatOprRxBusyDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBusyDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRxBusyDiscards.setDescription('Indicates the number of characters that were discarded at this SAP (service access point) since the last power-up. They were discarded as a result of a busy condition, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: The busy condition occurs as a result of a slow response to data reception.')
asioStatOprPortStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprPortStateChanges.setDescription('Indicates the number of state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change between any of the states defined in object asyStatOprPortState.')
asioStatOprDCDStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDCDStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDCDStateChanges.setDescription('Indicates the number of DCD (Data Carrier Detect) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprDTRStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDTRStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDTRStateChanges.setDescription('Indicates the number of DTR (Data Terminal Ready) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprRTSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRTSStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRTSStateChanges.setDescription('Indicates the number of RTS (Request To Send) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprCTSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprCTSStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprCTSStateChanges.setDescription('Indicates the number of CTS (Clear To Send) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice versa.')
asioStatOprDSRStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDSRStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDSRStateChanges.setDescription('Indicates the number of DSR (Data Set Ready) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprDRSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDRSStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprDRSStateChanges.setDescription('Indicates the number of DRS (Data Rate Selector) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprTMStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTMStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprTMStateChanges.setDescription('Indicates the number of TM (Test Mode) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprLLStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprLLStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprLLStateChanges.setDescription('Indicates the number of LL (Local Loopback) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprRIStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRIStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRIStateChanges.setDescription('Indicates the number of RI (Ring Indicator) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprRLStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRLStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprRLStateChanges.setDescription('Indicates the number of RL (Remote Loopback) state transitions that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer. Note: One state transition is defined as a change from inactive to active, or vice- versa.')
asioStatOprPortResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortResets.setStatus('mandatory')
if mibBuilder.loadTexts: asioStatOprPortResets.setDescription('Indicates the number of port resets that have occurred at the associated hardware port since the last power-up, during the sampling period entered in object asySapAdmPortStatisticsTimer.')
asioSapAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2), )
if mibBuilder.loadTexts: asioSapAdmTable.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmTable.setDescription('Contains the planned configuration information for each Async driver SAP (service access point) and its associated hardware port.')
asioSapAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1), ).setIndexNames((0, "CXAsyncIo-MIB", "asioSapAdmNumber"))
if mibBuilder.loadTexts: asioSapAdmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmEntry.setDescription('Contains the planned configuration information for a specific Async driver SAP (service access point) and its associated hardware port.')
asioSapAdmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapAdmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmNumber.setDescription('Indicates the table row containing configuration or monitoring objects for a SAP (service access point) associated with the slot and a port for this card. Range of Values: 11 - 71 Note: First digit indicates the slot and the second digit indicates the port. Default Value: None')
asioSapAdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmAlias.setDescription('Determines the name which uniquely identifies the SAP (service access point). Range of Values: 1 to 16 alphanumeric characters beginning with an alpha character Default Value: none Configuration Changed: Administrative ')
asioSapAdmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 115200)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortSpeed.setDescription('Defines the input and output speed, in bits per second, for the associated hardware port. Any value between 50 and 115200 will be accepted. Note: 134.5 bit/s is the minimum speed supported on ports in slots 5, 6 and 7 when the Data Expansion Module is installed. Default Value: 9600 bit/s Configuration Changed: Administrative ')
asioSapAdmPortCharacterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortCharacterSize.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortCharacterSize.setDescription('Defines the character size, in number of bits, to be used on the associated hardware port. Options: 5, 6, 7 or 8 Note: This value does not include the start, stop or parity bits. Default Value: 8 Configuration Changed: Administrative ')
asioSapAdmPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("one-point-five", 2), ("two", 3))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortStopBits.setDescription('Defines the number of stop bits to be used on the associated hardware port. Options: one (1 bit) one-point-five (1.5 bits) two (2 bits) Default Value: 1 bit Configuration Changed: Administrative ')
asioSapAdmPortBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortBreakLength.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortBreakLength.setDescription('Defines the number of break characters to be transmitted on the line when a reset is requested by the upper layer. A break is an all-zeroes character without a stop bit(s). Range of Values: 0 - 65535 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortMaxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortMaxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortMaxQueueLength.setDescription('Defines the maximum transmitter queue length, in number of buffers. If more data requests are received from the upper layer after the queue has reached its maximum value, the data is discarded and the object asyStatOprTxSysCongestionDiscards is incremented. You must be careful when updating this object dynamically because queued data can be lost if the size of the transmitter queue is decreased. Range of Values: 1 - 100 Default Value: 50 Configuration Changed: Administrative ')
asioSapAdmPortQueueUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortQueueUpperThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortQueueUpperThreshold.setDescription('Defines the queue length, in number of buffers, after which the Async driver starts flow controlling the upper layer. After the queue has reached this length, the Async driver will queue more data requests on the transmit queue up to the length specified in object asySapOprPortMaxQueueLength. Data is discarded above that length. The value for this object should always be less than or equal to the value of object asySapOprPortMaxQueueLength Range of Values: 1 - 100 Default Value: 45 Configuration Changed: Administrative ')
asioSapAdmPortQueueLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortQueueLowerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortQueueLowerThreshold.setDescription('Defines the queue length, in number of buffers, after which the Async driver stops flow controlling the upper layer. The value for this object should always be less than or equal to the value of object asySapOprPortQueueUpperThreshold. Range of Values: 1 - 100 Default Value: 15 Configuration Changed: Administrative ')
asioSapAdmPortSignalDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortSignalDownTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortSignalDownTimer.setDescription('Defines the length of time, in seconds, after which the Async port will drop its signals when it has received a disconnect request from the upper layer. Range of Values: 0 - 255 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortMaxTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortMaxTimeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortMaxTimeDelay.setDescription('Defines the maximum time, in milliseconds, the port must wait before processing received characters. Range of Values: 1 - 5 Default Value: 5 Configuration Changed: Administrative ')
asioSapAdmPortMaxInterruptCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortMaxInterruptCharacters.setStatus('obsolete')
if mibBuilder.loadTexts: asioSapAdmPortMaxInterruptCharacters.setDescription('Obsolete.')
asioSapAdmPortSignalSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortSignalSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortSignalSamplingPeriod.setDescription('Determines the sampling period, in 100 millisecond increments, that the associated hardware port uses to sample detectable signals. Range of Values: 3 - 100 Default Value: 5 Configuration Changed: Administrative ')
asioSapAdmPortDcdDtrSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortDcdDtrSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortDcdDtrSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the DCD (Data Carrier Detect) signals if the port is physically strapped as a DTE, or DTR (Data Terminal Ready) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortCtsRtsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortCtsRtsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortCtsRtsSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the CTS (Clear To Send) signals if the port is physically strapped as a DTE, or RTS (Request To Send) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortDsrDrsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortDsrDrsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortDsrDrsSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the DRS (Data Rate Selector) signals if the port is physically strapped as a DTE, or DSR (Data Set Ready) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortTmLlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortTmLlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortTmLlSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the TM (Test Mode) signals if the port is physically strapped as a DTE, or LL (Local Loopback) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortRiRlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortRiRlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortRiRlSignalSamples.setDescription('Defines the number of samples of object asySapPortSignalSamplingPeriod that the associated hardware port must detect before validating the RI (Ring Indicator)signals if the port is physically strapped as a DTE, RL (Remote Loopback) signals if the port is strapped as a DCE. Range of Values: 1 - 30 Default Value: 3 Configuration Changed: Administrative ')
asioSapAdmPortStatisticsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortStatisticsTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortStatisticsTimer.setDescription('Determines the period of time, in seconds, that is used to measure Async driver performance and collect statistics. Range of Values: 0 - 60. Default Value: 0 = Performance statistics are not measured')
asioSapAdmPortCarrierAction = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortCarrierAction.setStatus('mandatory')
if mibBuilder.loadTexts: asioSapAdmPortCarrierAction.setDescription('Determines whether or not this SAP (service access point) will inform the associated upper layer SAP that service is no longer available because its associated hardware port has detected a loss of DCD (Data Carrier Detect) if the port is physically strapped as a DTE, or a loss of DTR (Data Terminal Ready) if the port is physically strapped as a DCE. Options: disabled (1) enabled (2) Default Value: enabled Configuration Changed: Administrative ')
asioAdmPortTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioAdmPortTrap.setStatus('mandatory')
if mibBuilder.loadTexts: asioAdmPortTrap.setDescription('Indicates whether on not this SAP (service access point) produces the asyPortStatusChange trap. Options: disabled (1) enabled (2) Default Value: disabled Configuration Changed: Administrative ')
asioPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44) + (0,1)).setObjects(("CXAsyncIo-MIB", "asioSapOprNumber"), ("CXAsyncIo-MIB", "asioStatOprPortState"))
if mibBuilder.loadTexts: asioPortStatusChange.setDescription('Indicates that the associated hardware port has changed state. It has toggled between any of the states as defined in object asyStatOprPortState.')
mibBuilder.exportSymbols("CXAsyncIo-MIB", asioSapAdmAlias=asioSapAdmAlias, asioSapOprPortRiRlSignalSamples=asioSapOprPortRiRlSignalSamples, asioSapOprPortDsrDrsSignalSamples=asioSapOprPortDsrDrsSignalSamples, asioSapAdmPortMaxTimeDelay=asioSapAdmPortMaxTimeDelay, asioStatOprRxBps=asioStatOprRxBps, asioStatOprRLStateChanges=asioStatOprRLStateChanges, asioStatOprDTRStateChanges=asioStatOprDTRStateChanges, asioStatOprTMState=asioStatOprTMState, asioSapOprPortCarrierAction=asioSapOprPortCarrierAction, asioSapAdmPortStatisticsTimer=asioSapAdmPortStatisticsTimer, asioSapAdmPortMaxInterruptCharacters=asioSapAdmPortMaxInterruptCharacters, asioSapAdmPortCarrierAction=asioSapAdmPortCarrierAction, asioSapOprPortQueueLowerThreshold=asioSapOprPortQueueLowerThreshold, asioStatOprDTRState=asioStatOprDTRState, asioStatOprTxBpsMax=asioStatOprTxBpsMax, asioStatOprDCDState=asioStatOprDCDState, asioSapOprPortSignalDownTimer=asioSapOprPortSignalDownTimer, asioSapOprAlias=asioSapOprAlias, asioSapOprPortSignalSamplingPeriod=asioSapOprPortSignalSamplingPeriod, asioSapAdmPortBreakLength=asioSapAdmPortBreakLength, asioSapAdmPortQueueUpperThreshold=asioSapAdmPortQueueUpperThreshold, asioSapAdmPortSignalSamplingPeriod=asioSapAdmPortSignalSamplingPeriod, asioStatOprLLState=asioStatOprLLState, asioSapAdmPortCtsRtsSignalSamples=asioSapAdmPortCtsRtsSignalSamples, asioStatOprRxBreakCharacters=asioStatOprRxBreakCharacters, asioSapOprPortDcdDtrSignalSamples=asioSapOprPortDcdDtrSignalSamples, asioSapOprPortCtsRtsSignalSamples=asioSapOprPortCtsRtsSignalSamples, asioStatOprRTSState=asioStatOprRTSState, asioStatOprPortInterfaceType=asioStatOprPortInterfaceType, asioStatOprDSRStateChanges=asioStatOprDSRStateChanges, asioSapOprPortSpeed=asioSapOprPortSpeed, asioStatOprDSRState=asioStatOprDSRState, asioSapOprPortStatisticsTimer=asioSapOprPortStatisticsTimer, asioAdmPortTrap=asioAdmPortTrap, asioSapAdmPortCharacterSize=asioSapAdmPortCharacterSize, asioStatOprRLState=asioStatOprRLState, asioStatOprTMStateChanges=asioStatOprTMStateChanges, asioSapAdmEntry=asioSapAdmEntry, asioSapAdmTable=asioSapAdmTable, asioStatOprRxFramingErrorCharacters=asioStatOprRxFramingErrorCharacters, asioPortStatusChange=asioPortStatusChange, asioSapAdmNumber=asioSapAdmNumber, asioStatOprTxBps=asioStatOprTxBps, asioSapOprPortMaxTimeDelay=asioSapOprPortMaxTimeDelay, asioStatOprDRSState=asioStatOprDRSState, asioStatOprRxParityErrorCharacters=asioStatOprRxParityErrorCharacters, asioSapAdmPortQueueLowerThreshold=asioSapAdmPortQueueLowerThreshold, asioSapAdmPortStopBits=asioSapAdmPortStopBits, asioStatOprDCDStateChanges=asioStatOprDCDStateChanges, asioStatOprRxOverrunErrorCharacters=asioStatOprRxOverrunErrorCharacters, asioStatOprRxNoiseErrorCharacters=asioStatOprRxNoiseErrorCharacters, asioSapAdmPortTmLlSignalSamples=asioSapAdmPortTmLlSignalSamples, asioSapOprNumber=asioSapOprNumber, asioOprControlLine=asioOprControlLine, asioStatOprTxSysCongestionDiscards=asioStatOprTxSysCongestionDiscards, asioSapOprPortQueueUpperThreshold=asioSapOprPortQueueUpperThreshold, asioSapOprPortMaxInterruptCharacters=asioSapOprPortMaxInterruptCharacters, asioSapOprEntry=asioSapOprEntry, asioStatOprRxBusyDiscards=asioStatOprRxBusyDiscards, asioStatOprPortStateChanges=asioStatOprPortStateChanges, asioStatOprRxBpsMax=asioStatOprRxBpsMax, asioSapOprPortStopBits=asioSapOprPortStopBits, asioStatOprTxResetDiscards=asioStatOprTxResetDiscards, asioSapAdmPortRiRlSignalSamples=asioSapAdmPortRiRlSignalSamples, asioStatOprRIStateChanges=asioStatOprRIStateChanges, asioStatOprRxCharacters=asioStatOprRxCharacters, asioSapOprPortTmLlSignalSamples=asioSapOprPortTmLlSignalSamples, asioStatOprPortState=asioStatOprPortState, asioStatOprTxCharacters=asioStatOprTxCharacters, asioStatOprTxBadStateDiscards=asioStatOprTxBadStateDiscards, asioSapAdmPortDcdDtrSignalSamples=asioSapAdmPortDcdDtrSignalSamples, asioSapOprTable=asioSapOprTable, asioStatOprRxBadStateDiscards=asioStatOprRxBadStateDiscards, asioSapAdmPortSpeed=asioSapAdmPortSpeed, asioStatOprCTSStateChanges=asioStatOprCTSStateChanges, asioSapAdmPortDsrDrsSignalSamples=asioSapAdmPortDsrDrsSignalSamples, asioSapOprPortMaxQueueLength=asioSapOprPortMaxQueueLength, asioStatOprLLStateChanges=asioStatOprLLStateChanges, asioStatOprDRSStateChanges=asioStatOprDRSStateChanges, asioOprControlStats=asioOprControlStats, asioSapAdmPortSignalDownTimer=asioSapAdmPortSignalDownTimer, asioSapOprPortCharacterSize=asioSapOprPortCharacterSize, asioOprPortTrap=asioOprPortTrap, asioStatOprPortResets=asioStatOprPortResets, asioSapAdmPortMaxQueueLength=asioSapAdmPortMaxQueueLength, asioStatOprRTSStateChanges=asioStatOprRTSStateChanges, asioSapOprPortBreakLength=asioSapOprPortBreakLength, asioStatOprRIState=asioStatOprRIState, asioStatOprPortType=asioStatOprPortType, asioStatOprCTSState=asioStatOprCTSState)
