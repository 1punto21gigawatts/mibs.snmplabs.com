#
# PySNMP MIB module NBS-ROADM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-ROADM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, ifAlias = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifAlias")
NbsTcMHz, NbsTcStagingCommit, NbsTcMilliDb, nbs = mibBuilder.importSymbols("NBS-MIB", "NbsTcMHz", "NbsTcStagingCommit", "NbsTcMilliDb", "nbs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, ObjectIdentity, Integer32, ModuleIdentity, Unsigned32, NotificationType, Gauge32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "ObjectIdentity", "Integer32", "ModuleIdentity", "Unsigned32", "NotificationType", "Gauge32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "MibIdentifier")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
nbsRoadmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 235))
if mibBuilder.loadTexts: nbsRoadmMib.setLastUpdated('201504300000Z')
if mibBuilder.loadTexts: nbsRoadmMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsRoadmMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsRoadmMib.setDescription('Reconfigurable Optical Add/Drop Multiplexing')
nbsRoadmCommonGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 10))
if mibBuilder.loadTexts: nbsRoadmCommonGrp.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonGrp.setDescription('Channels per Common port')
nbsRoadmFlexgridGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 20))
if mibBuilder.loadTexts: nbsRoadmFlexgridGrp.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridGrp.setDescription('Describes Flexgrid centerline and bandwidth capabilities ')
nbsRoadmStagingGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 30))
if mibBuilder.loadTexts: nbsRoadmStagingGrp.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingGrp.setDescription('Scratchpad for users to configure channels and WSS setup')
nbsRoadmCommittedGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 31))
if mibBuilder.loadTexts: nbsRoadmCommittedGrp.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedGrp.setDescription('Administratively active channel and WSS setup.')
nbsRoadmRedundantGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 32))
if mibBuilder.loadTexts: nbsRoadmRedundantGrp.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantGrp.setDescription('Current active port.')
nbsRoadmTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 100))
if mibBuilder.loadTexts: nbsRoadmTraps.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmTraps.setDescription('SNMP Traps or Notifications')
nbsRoadmEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 235, 100, 0))
if mibBuilder.loadTexts: nbsRoadmEvent.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmEvent.setDescription('Event Notification Definitions')
nbsRoadmCommonTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 235, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommonTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonTableSize.setDescription('The number of entries in nbsRoadmCommonTable')
nbsRoadmCommonTable = MibTable((1, 3, 6, 1, 4, 1, 629, 235, 10, 2), )
if mibBuilder.loadTexts: nbsRoadmCommonTable.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonTable.setDescription('WSS Switch Configuration')
nbsRoadmCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1), ).setIndexNames((0, "NBS-ROADM-MIB", "nbsRoadmCommonIfIndex"))
if mibBuilder.loadTexts: nbsRoadmCommonEntry.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonEntry.setDescription('')
nbsRoadmCommonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommonIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonIfIndex.setDescription("The Mib2 ifIndex of this channel's trunk port.")
nbsRoadmCommonStagingQuickCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2), ("std100Ghz", 3), ("std50Ghz", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsRoadmCommonStagingQuickCfg.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonStagingQuickCfg.setDescription("Impulse object used to replace this port's current nbsRoadmStagingTable entries with a known configuration. Users may create the nbsRoadmStagingTable manually, a row at a time. Often it would save the users much work if they could initially populate this table with a standard or known configuration and then customize it to their own requirements. When read, this object will indicate whether this feature is available by reporting either notSupported(1) or supported(2). The value std100Ghz(3) overwrites this port's nbsRoadmStagingTable with all the standard 100 GHz ITU grid channels which are supported by this port. The value std50Ghz(4) overwrites this port's nbsRoadmStagingTable with all the standard 50 GHz ITU grid channels which are supported by this port. Overwriting the nbsRoadmStagingTable entries has no effect on the live configuration until committed using nbsRoadmCommonStagingCommit")
nbsRoadmCommonStagingAddCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("capable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommonStagingAddCaps.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonStagingAddCaps.setDescription('This object indicates if this port is capable of Add')
nbsRoadmCommonStagingDropCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("capable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommonStagingDropCaps.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonStagingDropCaps.setDescription('This object indicates if this port is capable of Drop')
nbsRoadmCommonStagingCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 20), NbsTcStagingCommit()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsRoadmCommonStagingCommit.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonStagingCommit.setDescription("Impulse object used to rewrite the entire WSS configuration. In order to protect users against accidentally dropping traffic streams, a two-step process is used. In the first step, users 'stage' a WSS configuration. The nbsRoadmStagingTable is like a scratchpad where users can build and modify the entire WSS configuration without affecting the live network. Here users assign channels to WSS ports, and for flex-grids, define the channels. The second step is to replace the existing WSS configuration (which can be read from the nbsRoadmCommittedTable). To replace the existing setup with the configuration specified in the nbsRoadmStagingTable, users set this object to apply(4). To discard all changes done to nbsRoadmStagingTable, users set this object to revertToCommitted(3), which will synchronize the Staging table to the Staged configuation. When read, this object will report the action last requested until that action is completed, after which it will report supported(2).")
nbsRoadmCommonCommittedGridType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("reserved", 2), ("customized", 3), ("std100Ghz", 4), ("std50Ghz", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommonCommittedGridType.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonCommittedGridType.setDescription("This object is automatically updated in association with writes to nbsRoadmCommonStagingApply. It indicates whether or not this port's updated nbsRoadmCommittedTable is equivalent to a standard ITU grid such as would come from nbsRoadmCommonStagingQuickCfg. If the nbsRoadmCommittedTable matches the results from a nbsRoadmCommonStagingQuickCfg of std100Ghz(4), then this object will report std100Ghz(4). If the nbsRoadmCommittedTable matches the results from a nbsRoadmCommonStagingQuickCfg of std50Ghz(5), then this object will report std50Ghz(5). If the nbsRoadmCommittedTable matches neither the results from a nbsRoadmCommonStagingQuickCfg of std100Ghz(4) or std50Ghz(5), then this object will report customized(3).")
nbsRoadmCommonCommittedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 10, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommonCommittedChannels.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommonCommittedChannels.setDescription('The number of channels for this wdm port in the nbsRoadmCommittedTable.')
nbsRoadmFlexgridTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 235, 20, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridTableSize.setDescription('The number of entries in nbsRoadmFlexgridTable.')
nbsRoadmFlexgridTable = MibTable((1, 3, 6, 1, 4, 1, 629, 235, 20, 2), )
if mibBuilder.loadTexts: nbsRoadmFlexgridTable.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridTable.setDescription('Flexgrid channel creation parameters')
nbsRoadmFlexgridEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1), ).setIndexNames((0, "NBS-ROADM-MIB", "nbsRoadmFlexgridIfIndex"))
if mibBuilder.loadTexts: nbsRoadmFlexgridEntry.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridEntry.setDescription('')
nbsRoadmFlexgridIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridIfIndex.setDescription('The Mib2 ifIndex of the Common port.')
nbsRoadmFlexgridCenterlineMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 21), NbsTcMHz().clone(190100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridCenterlineMin.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridCenterlineMin.setDescription('The frequency of the lowest centerline possible.')
nbsRoadmFlexgridCenterlineMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 22), NbsTcMHz().clone(197250000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridCenterlineMax.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridCenterlineMax.setDescription('The frequency of the highest centerline possible.')
nbsRoadmFlexgridCenterlineIncr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 23), NbsTcMHz().clone(12500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridCenterlineIncr.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridCenterlineIncr.setDescription("Centerline increment - the minimum possible difference, in MHz, between adjacent channels' centerlines.")
nbsRoadmFlexgridBandwidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 31), NbsTcMHz().clone(25000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridBandwidthMin.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridBandwidthMin.setDescription('The minimum bandwidth possible. Each channel must be at least this wide.')
nbsRoadmFlexgridBandwidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 32), NbsTcMHz().clone(25000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridBandwidthMax.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridBandwidthMax.setDescription('The maximum bandwidth possible. Each channel must be at most this wide.')
nbsRoadmFlexgridBandwidthIncr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 20, 2, 1, 33), NbsTcMHz().clone(25000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmFlexgridBandwidthIncr.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmFlexgridBandwidthIncr.setDescription("The granularity of bandwidths possible. Each channel's bandwidth must be a multiple of this number.")
nbsRoadmStagingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 235, 30, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmStagingTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingTableSize.setDescription('The number of entries in nbsRoadmStagingTable')
nbsRoadmStagingTable = MibTable((1, 3, 6, 1, 4, 1, 629, 235, 30, 2), )
if mibBuilder.loadTexts: nbsRoadmStagingTable.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingTable.setDescription('Scratchpad where users can specify a new WSS configuration. Changes to this table have no effect on the system until they are committed using nbsRoadmCommonStagingApply.')
nbsRoadmStagingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1), ).setIndexNames((0, "NBS-ROADM-MIB", "nbsRoadmStagingIfIndex"), (0, "NBS-ROADM-MIB", "nbsRoadmStagingCenterline"))
if mibBuilder.loadTexts: nbsRoadmStagingEntry.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingEntry.setDescription('')
nbsRoadmStagingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmStagingIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingIfIndex.setDescription("The Mib2 ifIndex of this channel's Common port.")
nbsRoadmStagingCenterline = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 2), NbsTcMHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmStagingCenterline.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingCenterline.setDescription('The center frequency of this channel, in MHz')
nbsRoadmStagingBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 10), NbsTcMHz().clone(100000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingBandwidth.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingBandwidth.setDescription('The amount of spectrum allocated for this channel, in MHz')
nbsRoadmStagingChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingChannelName.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingChannelName.setDescription('User-assigned name for this channel. The assigned name must be unique within this agent system.')
nbsRoadmStagingAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 41), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingAddPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingAddPort.setDescription("The Mib2 ifIndex of this channel's Add port. This channel will be blocked from all Add ports except the port specified here. Setting this object to 0 blocks the channel on all Add ports. Not supported value : -1")
nbsRoadmStagingDropPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 42), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingDropPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingDropPort.setDescription("The Mib2 ifIndex of this channel's Drop port. This channel will be blocked on all Drop ports except the port specified here. Setting this object to 0 blocks the channel on all Drop ports. Not supported value : -1")
nbsRoadmStagingSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 43), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingSecondaryPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingSecondaryPort.setDescription("The Mib2 ifIndex of this channel's Secondary port. This channel will be blocked from all Add ports except the port specified here. Setting this object to 0 removes the secondary.")
nbsRoadmStagingSecondAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 44), NbsTcMilliDb().clone(-1000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingSecondAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingSecondAttenu.setDescription('Attenuation actually being applied to the secondary port, in millidecibels (mdB).')
nbsRoadmStagingAddAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 51), NbsTcMilliDb().clone(-1000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingAddAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingAddAttenu.setDescription('Attenuation to be applied to Add channel, expressed in millidecibels (mdB). Default is the blocked value as defined in NbsTcMilliDb')
nbsRoadmStagingDropAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 52), NbsTcMilliDb().clone(-1000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingDropAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingDropAttenu.setDescription('Attenuation to be applied to Drop channel, expressed in millidecibels (mdB). Default is the blocked value as defined in NbsTcMilliDb')
nbsRoadmStagingItuName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmStagingItuName.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingItuName.setDescription("If this channel's centerline and bandwidth match a channel specified in the ITU grid DWDM standard, the name of that ITU channel will be shown here. The naming convention for 100GHz channels will be the two digit ITU channel number. For 50GHz channels, the convention will be to specify either the C or H band, followed by the two digit ITU channel number. For user-defined channels that don't match an ITU channel, this object will report 'N/A'.")
nbsRoadmStagingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 30, 2, 1, 99), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsRoadmStagingRowStatus.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmStagingRowStatus.setDescription('Used to create and delete channels in staging area')
nbsRoadmCommittedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 235, 31, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedTableSize.setDescription('The number of entries in nbsRoadmCommittedTable')
nbsRoadmCommittedTable = MibTable((1, 3, 6, 1, 4, 1, 629, 235, 31, 2), )
if mibBuilder.loadTexts: nbsRoadmCommittedTable.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedTable.setDescription('Current wss configuration')
nbsRoadmCommittedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1), ).setIndexNames((0, "NBS-ROADM-MIB", "nbsRoadmCommittedIfIndex"), (0, "NBS-ROADM-MIB", "nbsRoadmCommittedCenterline"))
if mibBuilder.loadTexts: nbsRoadmCommittedEntry.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedEntry.setDescription('')
nbsRoadmCommittedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedIfIndex.setDescription("The Mib2 ifIndex of the channel's Common port.")
nbsRoadmCommittedCenterline = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 2), NbsTcMHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedCenterline.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedCenterline.setDescription('The center frequency of this channel, in MHz')
nbsRoadmCommittedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 10), NbsTcMHz().clone(100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedBandwidth.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedBandwidth.setDescription('The amount of spectrum allocated for this channel, in MHz')
nbsRoadmCommittedChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedChannelName.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedChannelName.setDescription('User-assigned name for this channel. The assigned name must be unique within this agent system. This object is equivalent to nbsWdmChannelCustomName.')
nbsRoadmCommittedAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 41), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedAddPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedAddPort.setDescription("The Mib2 ifIndex of this channel's Add port. This channel will be blocked from all Add ports except the port specified here. Setting this object to 0 blocks the channel on all ports. Not supported value : -1")
nbsRoadmCommittedDropPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 42), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedDropPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedDropPort.setDescription("The Mib2 ifIndex of this channel's Drop port. This channel will be blocked on all Drop ports except the port specified here. Setting this object to 0 blocks the channel on all ports. Not supported value : -1")
nbsRoadmCommittedSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 43), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedSecondaryPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedSecondaryPort.setDescription("The Mib2 ifIndex of this channel's Secondary Add port. This channel will be blocked from all Add ports except the port specified here. Setting this object to 0 removes the secondary.")
nbsRoadmCommittedSecondAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 44), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedSecondAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedSecondAttenu.setDescription('Attenuation actually being applied to the secondary port, in millidecibels (mdB).')
nbsRoadmCommittedAddAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 51), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedAddAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedAddAttenu.setDescription('Attenuation actually being applied to Add channel, in millidecibels (mdB).')
nbsRoadmCommittedDropAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 52), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedDropAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedDropAttenu.setDescription('Attenuation actually being applied to Drop channel, in millidecibels (mdB).')
nbsRoadmCommittedItuName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 31, 2, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmCommittedItuName.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmCommittedItuName.setDescription("If this channel's centerline and bandwidth match a channel specified in the ITU grid DWDM standard, the name of that ITU channel will be shown here. The naming convention for 100GHz channels will be the two digit ITU channel number. For 50GHz channels, the convention will be to specify either the C or H band, followed by the two digit ITU channel number. For user-defined channels that don't match an ITU channel, this object will report 'N/A'.")
nbsRoadmRedundantTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 235, 32, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantTableSize.setDescription('The number of entries in nbsRoadmRedundantTable')
nbsRoadmRedundantTable = MibTable((1, 3, 6, 1, 4, 1, 629, 235, 32, 2), )
if mibBuilder.loadTexts: nbsRoadmRedundantTable.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantTable.setDescription('Current wss redundancy configuration')
nbsRoadmRedundantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1), ).setIndexNames((0, "NBS-ROADM-MIB", "nbsRoadmRedundantIfIndex"), (0, "NBS-ROADM-MIB", "nbsRoadmRedundantCenterline"))
if mibBuilder.loadTexts: nbsRoadmRedundantEntry.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantEntry.setDescription('')
nbsRoadmRedundantIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantIfIndex.setDescription("The Mib2 ifIndex of the channel's Common port.")
nbsRoadmRedundantCenterline = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 2), NbsTcMHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantCenterline.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantCenterline.setDescription('The center frequency of this channel, in MHz')
nbsRoadmRedundantItuName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantItuName.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantItuName.setDescription("If this channel's centerline and bandwidth match a channel specified in the ITU grid DWDM standard, the name of that ITU channel will be shown here. The naming convention for 100GHz channels will be the two digit ITU channel number. For 50GHz channels, the convention will be to specify either the C or H band, followed by the two digit ITU channel number. For user-defined channels that don't match an ITU channel, this object will report 'N/A'.")
nbsRoadmRedundantChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantChannelName.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantChannelName.setDescription('User-assigned name for this channel. The assigned name must be unique within this agent system. This object is equivalent to nbsWdmChannelCustomName.')
nbsRoadmRedundantMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 29), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantMapPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantMapPort.setDescription("The Mib2 ifIndex of the current channel's map port.")
nbsRoadmRedundantSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 30), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantSecondaryPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantSecondaryPort.setDescription("The Mib2 ifIndex of the current channel's Secondary port.")
nbsRoadmRedundantCurPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 40), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantCurPort.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantCurPort.setDescription("The Mib2 ifIndex of the current channel's Secondary port.")
nbsRoadmRedundantCurAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 41), NbsTcMilliDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantCurAttenu.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantCurAttenu.setDescription('Attenuation actually being applied to the redundant channel, in millidecibels (mdB).')
nbsRoadmRedundantCurState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 235, 32, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switching", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsRoadmRedundantCurState.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmRedundantCurState.setDescription('The state of the current redundant port.')
nbsRoadmEventStageAreaCommitted = NotificationType((1, 3, 6, 1, 4, 1, 629, 235, 100, 0, 10)).setObjects(("NBS-ROADM-MIB", "nbsRoadmCommonIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-ROADM-MIB", "nbsRoadmCommonCommittedGridType"), ("NBS-ROADM-MIB", "nbsRoadmCommonCommittedChannels"))
if mibBuilder.loadTexts: nbsRoadmEventStageAreaCommitted.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmEventStageAreaCommitted.setDescription('Sent after an nbsRoadmCommonStagingCommit request is fulfilled. This Notification is of severity ERROR, which means it should be emitted unless disabled or nbsCmmcSysTrapTblEntLevel is set to a severity worse than error(3).')
nbsRoadmEventRedundancyTriggered = NotificationType((1, 3, 6, 1, 4, 1, 629, 235, 100, 0, 20)).setObjects(("NBS-ROADM-MIB", "nbsRoadmRedundantIfIndex"), ("NBS-ROADM-MIB", "nbsRoadmRedundantCenterline"))
if mibBuilder.loadTexts: nbsRoadmEventRedundancyTriggered.setStatus('current')
if mibBuilder.loadTexts: nbsRoadmEventRedundancyTriggered.setDescription('Sent after an channel redundancy takes effect. This Notification is of severity ERROR, which means it should be emitted unless disabled or nbsCmmcSysTrapTblEntLevel is set to a severity worse than error(3).')
mibBuilder.exportSymbols("NBS-ROADM-MIB", nbsRoadmCommonStagingCommit=nbsRoadmCommonStagingCommit, nbsRoadmCommonEntry=nbsRoadmCommonEntry, nbsRoadmFlexgridTable=nbsRoadmFlexgridTable, nbsRoadmStagingEntry=nbsRoadmStagingEntry, nbsRoadmCommittedTable=nbsRoadmCommittedTable, nbsRoadmCommonCommittedGridType=nbsRoadmCommonCommittedGridType, nbsRoadmCommittedDropPort=nbsRoadmCommittedDropPort, nbsRoadmRedundantCurState=nbsRoadmRedundantCurState, nbsRoadmRedundantEntry=nbsRoadmRedundantEntry, nbsRoadmStagingTableSize=nbsRoadmStagingTableSize, nbsRoadmStagingCenterline=nbsRoadmStagingCenterline, nbsRoadmCommonCommittedChannels=nbsRoadmCommonCommittedChannels, nbsRoadmCommittedDropAttenu=nbsRoadmCommittedDropAttenu, PYSNMP_MODULE_ID=nbsRoadmMib, nbsRoadmRedundantGrp=nbsRoadmRedundantGrp, nbsRoadmStagingItuName=nbsRoadmStagingItuName, nbsRoadmCommittedIfIndex=nbsRoadmCommittedIfIndex, nbsRoadmCommonIfIndex=nbsRoadmCommonIfIndex, nbsRoadmStagingIfIndex=nbsRoadmStagingIfIndex, nbsRoadmRedundantIfIndex=nbsRoadmRedundantIfIndex, nbsRoadmStagingRowStatus=nbsRoadmStagingRowStatus, nbsRoadmStagingAddAttenu=nbsRoadmStagingAddAttenu, nbsRoadmFlexgridBandwidthMax=nbsRoadmFlexgridBandwidthMax, nbsRoadmCommittedAddPort=nbsRoadmCommittedAddPort, nbsRoadmCommittedSecondaryPort=nbsRoadmCommittedSecondaryPort, nbsRoadmCommittedAddAttenu=nbsRoadmCommittedAddAttenu, nbsRoadmRedundantItuName=nbsRoadmRedundantItuName, nbsRoadmStagingSecondaryPort=nbsRoadmStagingSecondaryPort, nbsRoadmRedundantCenterline=nbsRoadmRedundantCenterline, nbsRoadmRedundantChannelName=nbsRoadmRedundantChannelName, nbsRoadmRedundantSecondaryPort=nbsRoadmRedundantSecondaryPort, nbsRoadmCommonStagingDropCaps=nbsRoadmCommonStagingDropCaps, nbsRoadmFlexgridIfIndex=nbsRoadmFlexgridIfIndex, nbsRoadmStagingTable=nbsRoadmStagingTable, nbsRoadmStagingAddPort=nbsRoadmStagingAddPort, nbsRoadmEventRedundancyTriggered=nbsRoadmEventRedundancyTriggered, nbsRoadmCommonStagingQuickCfg=nbsRoadmCommonStagingQuickCfg, nbsRoadmFlexgridBandwidthMin=nbsRoadmFlexgridBandwidthMin, nbsRoadmCommittedEntry=nbsRoadmCommittedEntry, nbsRoadmFlexgridGrp=nbsRoadmFlexgridGrp, nbsRoadmEvent=nbsRoadmEvent, nbsRoadmFlexgridCenterlineMin=nbsRoadmFlexgridCenterlineMin, nbsRoadmFlexgridTableSize=nbsRoadmFlexgridTableSize, nbsRoadmFlexgridCenterlineMax=nbsRoadmFlexgridCenterlineMax, nbsRoadmStagingDropPort=nbsRoadmStagingDropPort, nbsRoadmRedundantCurPort=nbsRoadmRedundantCurPort, nbsRoadmCommittedTableSize=nbsRoadmCommittedTableSize, nbsRoadmCommittedItuName=nbsRoadmCommittedItuName, nbsRoadmCommittedCenterline=nbsRoadmCommittedCenterline, nbsRoadmCommonTable=nbsRoadmCommonTable, nbsRoadmRedundantTable=nbsRoadmRedundantTable, nbsRoadmCommonStagingAddCaps=nbsRoadmCommonStagingAddCaps, nbsRoadmRedundantMapPort=nbsRoadmRedundantMapPort, nbsRoadmCommittedGrp=nbsRoadmCommittedGrp, nbsRoadmTraps=nbsRoadmTraps, nbsRoadmRedundantCurAttenu=nbsRoadmRedundantCurAttenu, nbsRoadmStagingGrp=nbsRoadmStagingGrp, nbsRoadmFlexgridBandwidthIncr=nbsRoadmFlexgridBandwidthIncr, nbsRoadmMib=nbsRoadmMib, nbsRoadmEventStageAreaCommitted=nbsRoadmEventStageAreaCommitted, nbsRoadmStagingBandwidth=nbsRoadmStagingBandwidth, nbsRoadmStagingChannelName=nbsRoadmStagingChannelName, nbsRoadmCommonGrp=nbsRoadmCommonGrp, nbsRoadmCommonTableSize=nbsRoadmCommonTableSize, nbsRoadmStagingDropAttenu=nbsRoadmStagingDropAttenu, nbsRoadmRedundantTableSize=nbsRoadmRedundantTableSize, nbsRoadmFlexgridCenterlineIncr=nbsRoadmFlexgridCenterlineIncr, nbsRoadmCommittedBandwidth=nbsRoadmCommittedBandwidth, nbsRoadmCommittedSecondAttenu=nbsRoadmCommittedSecondAttenu, nbsRoadmCommittedChannelName=nbsRoadmCommittedChannelName, nbsRoadmStagingSecondAttenu=nbsRoadmStagingSecondAttenu, nbsRoadmFlexgridEntry=nbsRoadmFlexgridEntry)
