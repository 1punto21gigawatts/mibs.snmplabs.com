#
# PySNMP MIB module CHIPTRNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPTRNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, IpAddress, NotificationType, Integer32, Gauge32, Unsigned32, Bits, ModuleIdentity, MibIdentifier, enterprises, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "IpAddress", "NotificationType", "Integer32", "Gauge32", "Unsigned32", "Bits", "ModuleIdentity", "MibIdentifier", "enterprises", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
olTRnetMapState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapState.setDescription('The state of the inter-module token ring map. If the map is being updated, then the state of the map is changing.')
olTRnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2), )
if mibBuilder.loadTexts: olTRnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTable.setDescription('A list of Token Ring statistics entries counted for each network.')
olTRnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRnetStatsNetID"))
if mibBuilder.loadTexts: olTRnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsEntry.setDescription('A collection of statistics kept for a particular Token Ring interface.')
olTRnetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRnetStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLineErrors.setDescription('The total number of line errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsBurstErrors.setDescription('The total number of burst errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsACErrors.setDescription('The total number of AC (Address Copied) errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLostFrameErrors.setDescription('The total number of lost frame errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsCongestionErrors.setDescription('The total number of receive congestion errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsFrameCopiedErrors.setDescription('The total number of frame copied errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTokenErrors.setDescription('The total number of token errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsDuplicateAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsDuplicateAddresses.setDescription('The total number of token errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsBeaconEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsBeaconEvents.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsBeaconEvents.setDescription('The total number of times that the ring enters the beaconing state.')
olTRnetStatsLastBeaconSender = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconSender.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconSender.setDescription('The address of the sender of the last beacon frame received on this ring. If no beacon frames have been received, this object will be six zero octets.')
olTRnetStatsLastBeaconNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconNAUN.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconNAUN.setDescription('The address of the NAUN in the last beacon frame received on this ring. If no beacon frames have been received, this object will be six zero octets.')
olTRnetStatsLastBeaconTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconTime.setDescription('The time in in hundredths of a second since the last beacon event occurred. For example, if the time is 500 ticks, then this event was seen 5 seconds ago. If no beacon events have occurred, then this will be equal to the sysUpTime.')
olTRnetStatsLastBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("portDisable", 2), ("trunkDisable", 3), ("moduleIsolate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconAction.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconAction.setDescription('The action (if any) taken to correct the last beacon event on the ring.')
olTRnetStatsTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTotalStations.setDescription('The number of stations currently participating in the 802.5 MAC protocol on the ring.')
olTRnetStatsConcStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsConcStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsConcStations.setDescription('The number of stations currently participating in the 802.5 MAC protocol on the ring which are connected to ports in this concentrator.')
olTRnetStatsTotalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTotalPorts.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTotalPorts.setDescription('The total number of ports within this concentrator and on this ring regardless of their admin state or status.')
olTRnetStatsEnabledPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsEnabledPorts.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsEnabledPorts.setDescription('The number of ports within this concentrator and on this ring which have olPortAdminState set to enabled.')
olTRnetStatsActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsActivePorts.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsActivePorts.setDescription('The number of ports within this concentrator and on this ring which have olPortAdminState set to enabled and whose olPortStatus has a status of okay.')
olTRnetStatsStationTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3), )
if mibBuilder.loadTexts: olTRnetStatsStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationTable.setDescription('A list of ring statistics entries.')
olTRnetStatsStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRnetStatsStationNetID"), (0, "CHIPTRNET-MIB", "olTRnetStatsStationAddr"))
if mibBuilder.loadTexts: olTRnetStatsStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationEntry.setDescription('A collection of statistics for a particular station that has been discovered on a a ring monitored by this device.')
olTRnetStatsStationNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRnetStatsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationAddr.setDescription('The physical address of this station.')
olTRnetStatsStationSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationSlotIndex.setDescription('The slot number of the station with this address. Addresses with a slot value of external(255) are not in this concentrator.')
olTRnetStatsStationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationPortIndex.setDescription("The port number within olTRnetStatsStationSlotIndex's slot that received this address. If olTRnetStatsStationSlotIndex has a value of external(255), then the port address will be 255.")
olTRnetStatsStationNAUNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationNAUNAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationNAUNAddress.setDescription('The physical address of the nearest active upstream neighbor of this station.')
olTRnetStatsStationLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationLineErrors.setDescription('The total number of Line Errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationBurstErrors.setDescription('The total number of burst errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationACErrors.setDescription('The total number of AC (Address Copied) errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationLostFrameErrors.setDescription('The total number of lost frame errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationCongestionErrors.setDescription('The total number of congestion errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationFrameCopiedErrors.setDescription('The total number of frame copied errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationTokenErrors.setDescription('The total number of token errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationDuplicateAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationDuplicateAddresses.setDescription('The number of times this station experienced a duplicate address error.')
olTRnetStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4), )
if mibBuilder.loadTexts: olTRnetStatsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortTable.setDescription('A list of statistic entries, for ports within the concentrator.')
olTRnetStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRnetStatsPortSlotIndex"), (0, "CHIPTRNET-MIB", "olTRnetStatsPortIndex"))
if mibBuilder.loadTexts: olTRnetStatsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortEntry.setDescription('A collection of statistics for a particular station that has been discovered on a a ring monitored by this device.')
olTRnetStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortSlotIndex.setDescription('The port slot number.')
olTRnetStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortIndex.setDescription("The port number within olTRnetStatsPortSlotIndex's slot.")
olTRnetStatsPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRnetStatsPortTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortTotalStations.setDescription('The total number of stations attached to this port.')
olTRnetStatsPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortAddress.setDescription('The mac address of the station connected to this If there are multiple mac addresses for this port, then this object will contain the last mac address.')
olTRnetStatsPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortLineErrors.setDescription('The total number of Line Errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortBurstErrors.setDescription('The total number of burst errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortACErrors.setDescription('The total number of AC (Address Copied) errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortLostFrameErrors.setDescription('The total number of lost frame errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortCongestionErrors.setDescription('The total number of congestion errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortFrameCopiedErrors.setDescription('The total number of frame copied errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortTokenErrors.setDescription('The total number of token errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortDuplicateAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortDuplicateAddresses.setDescription('The number of times this port experienced a duplicate address error.')
olTRnetMapSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5))
olTRnetMapSummaryLogicalState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalState.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalState.setDescription('The state of the token ring summary table. If the summary is being updated, then the state of the summary is changing.')
olTRnetMapSummaryLogicalLock = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalLock.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalLock.setDescription('A semaphore for locking the token ring summary table. When locked, updates to the summary will pend until the semaphore is unlocked, so that a valid summary can be read. This cannot be set to unlock if olTRnetSummaryLogicalState is changing. For complete accuracy, this should be read after being set to ensure that the map was not changing when the lock was attempted. After the summary information has been recorded, the semaphore should be set to unlock to allow changes to occur.')
olTRnetMapSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3), )
if mibBuilder.loadTexts: olTRnetMapSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryTable.setDescription("A logical map of the token ring network, starting from the agent's specified token ring interface. Each station on the map is represented by it's MAC address, slot number and port number (8 octets per station). If the port is external to the concentrator, the slot number will be 255 and the port number will be 0. The map is ordered in the same direction as the token flow. The MAC addresses are concatonated into groups of up to 32 addresses per entry. The last entry has all-zero MAC addresses padded on the end of the entry. All entries before the last one have 32 valid addresses. This table supports up to 256 stations.")
olTRnetMapSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRnetMapSummaryNetID"), (0, "CHIPTRNET-MIB", "olTRnetMapSummaryIndex"))
if mibBuilder.loadTexts: olTRnetMapSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryEntry.setDescription('A group of MAC addresses associated with a Token Ring map.')
olTRnetMapSummaryNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryNetID.setDescription('The network index that uniquely identifies this network. It can be isolated from the backplane, or on one of seven possible backplane token ring networks.')
olTRnetMapSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryIndex.setDescription('The index into the map array. Possible values are 1 through 8. The MAC address of this agent is the first MAC address in olTRnetMapSummary32Stations indexed by a 1 in this entry.')
olTRnetMapSummary32Stations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummary32Stations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummary32Stations.setDescription('A concatonated group of MAC addresses and their associated slot and port of stations on the ring. Each entry has the eight octets. The first six octets are the MAC address. The seventh octet is the slot ID (or 255 if it is external to the concentrator). The eighth is the port ID (or 255 if it is external to the concentrator). The MAC addresses are in the same order as the token flow.')
olTRTrafTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6), )
if mibBuilder.loadTexts: olTRTrafTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTable.setDescription('A list of Token Ring network traffic (non-error) statistics entries. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRTrafNetID"))
if mibBuilder.loadTexts: olTRTrafEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafEntry.setDescription('A collection of statistics kept for a particular Token Ring interface. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafTokenRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTokenRotationTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTokenRotationTime.setDescription('An estimate of the time (in microseconds) that it takes for the token to complete a single rotation around the ring.')
olTRTrafDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafDropEvents.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafDropEvents.setDescription('The total number of events in which frames were dropped by the TRMM due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
olTRTrafOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafOctets.setDescription('The total number of octets of data received on the network.')
olTRTrafFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames.setDescription('The total number of frames received.')
olTRTrafMacOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMacOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafMacOctets.setDescription('The total number of octets of data in MAC frames received on the network.')
olTRTrafMacFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMacFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafMacFrames.setDescription('The total number of MAC frames received.')
olTRTrafBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafBroadcastFrames.setDescription('The total number of non-MAC frames received that were directed to a broadcast address (0xFFFFFFFFFFFF or 0xC000FFFFFFFF).')
olTRTrafMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafMulticastFrames.setDescription('The total number of non-MAC frames received that were directed to a local or global multicast or functional address. Note that this number does not include frames directed to a broadcast address.')
olTRTrafFrames18to63Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames18to63Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames18to63Octets.setDescription('The total number of non-MAC frames received that were between 18 and 63 octets in length inclusive.')
olTRTrafFrames64to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames64to127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames64to127Octets.setDescription('The total number of non-MAC frames received that were between 64 and 127 octets in length inclusive.')
olTRTrafFrames128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames128to255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames128to255Octets.setDescription('The total number of non-MAC frames received that were between 128 and 255 octets in length inclusive.')
olTRTrafFrames256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames256to511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames256to511Octets.setDescription('The total number of non-MAC frames received that were between 256 and 511 octets in length inclusive.')
olTRTrafFrames512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames512to1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames512to1023Octets.setDescription('The total number of non-MAC frames received that were between 512 and 1023 octets in length inclusive.')
olTRTrafFrames1024to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames1024to2047Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames1024to2047Octets.setDescription('The total number of non-MAC frames received that were between 1024 and 2047 octets in length inclusive.')
olTRTrafFrames2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames2048to4095Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames2048to4095Octets.setDescription('The total number of non-MAC frames received that were between 2048 and 4095 octets in length inclusive.')
olTRTrafFrames4096to8191Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames4096to8191Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames4096to8191Octets.setDescription('The total number of non-MAC frames received that were between 4096 and 8191 octets in length inclusive.')
olTRTrafFrames8192to18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames8192to18000Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames8192to18000Octets.setDescription('The total number of non-MAC frames received that were between 8192 and 18000 octets in length inclusive.')
olTRTrafFramesGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFramesGreaterThan18000Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFramesGreaterThan18000Octets.setDescription('The total number of non-MAC frames received that were greater than or equal to 18000 octets in length.')
olTRTrafControlTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7), )
if mibBuilder.loadTexts: olTRTrafControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTable.setDescription('A list entries containing information about olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable')
olTRTrafControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRTrafControlNetID"))
if mibBuilder.loadTexts: olTRTrafControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlEntry.setDescription('A collection of information about olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable')
olTRTrafControlNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafControlLogicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlLogicalState.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlLogicalState.setDescription('The state of the token ring station traffic tables: olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable and olTRTrafTopNSummaryTable. If any of the tables associated with this olTRTrafControlEntry are being updated, then the state is changing(1).')
olTRTrafControlLogicalLock = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlLogicalLock.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlLogicalLock.setDescription('A semaphore for locking the token ring station traffic tables: olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable. When the semaphore is locked, adds, deletes, and re-sorting the traffic tables associated with this olTRTrafControlEntry will pend until the semaphore is unlocked, so that a valid set of entries can be read. Note that the normal incrementing of the traffic counters are not affected by the setting of this semaphore. This cannot be set to unlock if olTRTrafControlLogicalState is changing. For complete accuracy, this semaphore should be read after being set to ensure that the tables were not changing when the lock was attempted. After the table information has been recorded, the semaphore should be set to unlock to allow changes to occur.')
olTRTrafControlClear = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlClear.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlClear.setDescription('When the value of this object is set to clear, all entries in the token ring station traffic tables (olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable) are cleared.')
olTRTrafControlLastClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlLastClearTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlLastClearTime.setDescription('The value of sysUpTime when the token ring station traffic tables (olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable and olTRTrafTopNSummaryTable) were cleared. If never cleared, this value shall be zero (and the token ring station traffic tables will contain information collected since the XMM was started up).')
olTRTrafControlTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTotalStations.setDescription('The number of stations in the portion of the olTRTrafStationTable associated with this olTRTrafControlEntry.')
olTRTrafControlStationLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlStationLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlStationLastChangeTime.setDescription('The value of sysUpTime when the last entry was added to or deleted (or re-sorted) from the portion of the olTRTrafStationTable associated with this olTRTrafControlEntry. If no additions or deletions have occurred, this value shall be zero.')
olTRTrafControlPortTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlPortTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlPortTotalStations.setDescription('The number of stations in the portion of the olTRTrafPortTable associated with this olTRTrafControlEntry.')
olTRTrafControlPortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlPortLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlPortLastChangeTime.setDescription('The value of sysUpTime when the last entry was added to or deleted (or re-sorted) from the portion of the olTRTrafPortTable associated with this olTRTrafControlEntry. If no additions or deletions have occurred, this value shall be zero.')
olTRTrafControlTopNMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlTopNMaxStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNMaxStations.setDescription('Specifies a maximum value for olTRTrafControlTopNTotalStations in this olTRTrafControlEntry. If this value is zero then no maximum value for olTRTrafControlTopNTotalStations is specified.')
olTRTrafControlTopNTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTopNTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNTotalStations.setDescription('The number of stations (for each statistic) in the portion of the olTRTrafTopNTable and olTRTrafTopNSummaryTable associated with this olTRTrafControlEntry. If olTRTrafControlTopNMaxStations is zero or is not less than olTRTrafControlTotalStations then olTRTrafControlTopNTotalStations will have the same value as olTRTrafControlTotalStations. Otherwise olTRTrafControlTopNTotalStations will have the same value as olTRTrafControlTopNMaxStations.')
olTRTrafControlTopNLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTopNLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNLastChangeTime.setDescription('The value of sysUpTime when the last entry was added to or deleted (or re-sorted) from the portion of the olTRTrafTopNTable and olTRTrafTopNSummaryTable associated with this olTRTrafControlEntry. This is equivalent to the time when the last TopN data collection period ended. If no additions or deletions have occurred, this value shall be zero.')
olTRTrafControlTopNInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlTopNInterval.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNInterval.setDescription('Specifies the length of the TopN data collection period in seconds. Minimum length is 5 seconds; maximum is 86400 seconds (24 hours). When this value is modified, all associated entries in olTRTrafTopNTable and olTRTrafTopNSummaryTable are deleted and a new TopN data collection period is started.')
olTRTrafStationTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8), )
if mibBuilder.loadTexts: olTRTrafStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationTable.setDescription('A list of Token Ring station traffic statistics entries indexed by Network ID and MAC address. The table has olTRTrafTotalStations entries. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRTrafStationNetID"), (0, "CHIPTRNET-MIB", "olTRTrafStationAddress"))
if mibBuilder.loadTexts: olTRTrafStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationEntry.setDescription('A collection of station statistics for a particular station that has been discovered on an interface of this device. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafStationNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationAddress.setDescription('The physical address of this station.')
olTRTrafStationSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("remote-ring", 254), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationSlotIndex.setDescription('The slot number of the station with this address. Addresses with a slot value of remote-ring(254) are not in this ring. Addresses with a slot value of external(255) are not in this concentrator.')
olTRTrafStationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationPortIndex.setDescription("The port number within olTRTrafSlotIndex's slot that received this address. If olTRTrafSlotIndex has a value of remote-ring(254), then the port address will be 254. If olTRTrafSlotIndex has a value of external(255), then the port address will be 255.")
olTRTrafStationInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationInFrames.setDescription('The number of frames transmitted to this address since it was added to this table.')
olTRTrafStationOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutFrames.setDescription('The number of frames transmitted by this address since it was added to this table.')
olTRTrafStationInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationInOctets.setDescription('The number of octets transmitted to this address since it was added to this table.')
olTRTrafStationOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutOctets.setDescription('The number of octets transmitted by this address since it was added to this table.')
olTRTrafStationOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutErrors.setDescription('The number of error frames transmitted by this address since it was added to this table. Only isolating errors (LineErrors, BurstErrors, ACErrors, InternalErrors, and AbortErrors) and CongestionErrors are counted.')
olTRTrafStationOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutBroadcastFrames.setDescription('The number of frames transmitted by this address that were directed to the broadcast address since it was added to this table.')
olTRTrafStationOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutMulticastFrames.setDescription('The number of frames transmitted by this address that were directed to a multicast address since it was added to this table. Note that this number does not include frames directed to the broadcast address.')
olTRTrafPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9), )
if mibBuilder.loadTexts: olTRTrafPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortTable.setDescription('A list of Token Ring station traffic statistics entries indexed by slot number, and port number. Note that stations external to this concentrator or on another ring are excluded from this table. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRTrafPortSlotIndex"), (0, "CHIPTRNET-MIB", "olTRTrafPortPortIndex"))
if mibBuilder.loadTexts: olTRTrafPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortEntry.setDescription('A collection of station statistics for a particular station that has been discovered on an interface of this device. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets. include error frames; all octet counters exclude framing bits but include FCS octets.')
olTRTrafPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortSlotIndex.setDescription('The slot number of the station with this address.')
olTRTrafPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortPortIndex.setDescription("The port number within olTRTrafPortSlotIndex's slot that received this address.")
olTRTrafPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortAddress.setDescription('The physical address of this station.')
olTRTrafPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortInFrames.setDescription('The number of frames transmitted to this address since it was added to this table.')
olTRTrafPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutFrames.setDescription('The number of frames transmitted by this address since it was added to this table.')
olTRTrafPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortInOctets.setDescription('The number of octets transmitted to this address since it was added to this table.')
olTRTrafPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutOctets.setDescription('The number of octets transmitted by this address since it was added to this table.')
olTRTrafPortOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutErrors.setDescription('The number of error frames transmitted by this address since it was added to this table. Only isolating errors (LineErrors, BurstErrors, ACErrors, InternalErrors, and AbortErrors) and CongestionErrors are counted.')
olTRTrafPortOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutBroadcastFrames.setDescription('The number of frames transmitted by this address that were directed to the broadcast address since it was added to this table.')
olTRTrafPortOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutMulticastFrames.setDescription('The number of frames transmitted by this address that were directed to a multicast address since it was added to this table. Note that this number does not include frames directed to the broadcast address.')
olTRTrafTopNTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10), )
if mibBuilder.loadTexts: olTRTrafTopNTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNTable.setDescription('A list of Token Ring station traffic statistics entries indexed by olTRTrafTopNNetID, olTRTrafTopNStatistic, and olTRTrafTopNIndex. For each Network, the list contains 7 logical sublists - one for each statistic. Each of the sublists has olTRTrafControlTopNTotalStations entries. For eack Network, the table has 7 times olTRTrafTopNControlTotalStations entries. All of the counters in this table reflect activity during the last completed TopN data collection period (olTRTrafControlTopNInterval seconds). Note that this table will contain no entries if a TopN data collection period has not yet completed since olTRTrafControlTopNInterval was modified or since startup. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafTopNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRTrafTopNNetID"), (0, "CHIPTRNET-MIB", "olTRTrafTopNStatistic"), (0, "CHIPTRNET-MIB", "olTRTrafTopNIndex"))
if mibBuilder.loadTexts: olTRTrafTopNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNEntry.setDescription('A collection of station statistics for a particular station that has been discovered on an interface of this device. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafTopNNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafTopNStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("olTRTrafTopNInFrames", 1), ("olTRTrafTopNOutFrames", 2), ("olTRTrafTopNInOctets", 3), ("olTRTrafTopNOutOctets", 4), ("olTRTrafTopNOutErrors", 5), ("olTRTrafTopNOutBroadcastFrames", 6), ("olTRTrafTopNOutMulticastFrames", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafTopNStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNStatistic.setDescription('The object representing the statistic for each station that this portion of the olTRTrafTopNTable is sorted on.')
olTRTrafTopNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNIndex.setDescription('An index that uniquely identifies an entry in the olTRTrafTopN table among those in the same network and for the same olTRTrafTopNStatistic. This index is between 1 and N, where N is the value of olTRTrafControlTopNTotalStations. Increasing values of olTRTrafTopNIndex shall be assigned to entries with decreasing values of the object referenced by olTRTrafTopNStatistic.')
olTRTrafTopNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNAddress.setDescription('The physical address of this station.')
olTRTrafTopNSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("remote-ring", 254), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSlotIndex.setDescription('The slot number of the station with this address. Addresses with a slot value of remote-ring(254) are not in this ring. Addresses with a slot value of external(255) are not in this concentrator.')
olTRTrafTopNPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNPortIndex.setDescription("The port number within olTRTrafTopNSlotIndex's slot that received this address. If olTRTrafTopNSlotIndex has a value of remote-ring(254), then the port address will be 254. If olTRTrafTopNSlotIndex has a value of external(255), then the port address will be 255.")
olTRTrafTopNInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNInFrames.setDescription('The number of frames transmitted to this address during the last TopN data collection period.')
olTRTrafTopNOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutFrames.setDescription('The number of frames transmitted by this address during the last TopN data collection period.')
olTRTrafTopNInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNInOctets.setDescription('The number of octets transmitted to this address during the last TopN data collection period.')
olTRTrafTopNOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutOctets.setDescription('The number of octets transmitted by this address during the last TopN data collection period.')
olTRTrafTopNOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutErrors.setDescription('The number of error frames transmitted by this address during the last TopN data collection period. Only isolating errors (LineErrors, BurstErrors, ACErrors, InternalErrors, and AbortErrors) and CongestionErrors are counted.')
olTRTrafTopNOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutBroadcastFrames.setDescription('The number of frames transmitted by this address that were directed to the broadcast address during the last TopN data collection period.')
olTRTrafTopNOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutMulticastFrames.setDescription('The number of frames transmitted by this address that were directed to a multicast address during the last TopN data collection period. Note that this number does not include frames directed to the broadcast address.')
olTRTrafTopNSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11), )
if mibBuilder.loadTexts: olTRTrafTopNSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryTable.setDescription('A list containing information from olTRTrafTopNTable provided for the convenience of network management stations that wish to obtain this information in condensed form.')
olTRTrafTopNSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1), ).setIndexNames((0, "CHIPTRNET-MIB", "olTRTrafTopNSummaryNetID"), (0, "CHIPTRNET-MIB", "olTRTrafTopNSummaryStatistic"), (0, "CHIPTRNET-MIB", "olTRTrafTopNSummaryIndex"))
if mibBuilder.loadTexts: olTRTrafTopNSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryEntry.setDescription('A segment of the Top N list for a particular statistic.')
olTRTrafTopNSummaryNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafTopNSummaryStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("olTRTrafTopNSummaryInFrames", 1), ("olTRTrafTopNSummaryOutFrames", 2), ("olTRTrafTopNSummaryInOctets", 3), ("olTRTrafTopNSummaryOutOctets", 4), ("olTRTrafTopNSummaryOutErrors", 5), ("olTRTrafTopNSummaryOutBroadcastFrames", 6), ("olTRTrafTopNSummaryOutMulticastFrames", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafTopNSummaryStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryStatistic.setDescription('The object representing the statistic for each station that this portion of the olTRTrafTopNSummaryTable is sorted on.')
olTRTrafTopNSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryIndex.setDescription('An index that uniquely identifies an entry in the olTRTrafTopNSummary table among those in the same network and for the same olTRTrafTopNSummaryStatistic. The number of entries for this portion of olTRTrafTopNSummaryTable is number of entries for the corresponding portion of olTRTrafTopNTable divided by 12 (rounded up to the next integer).')
olTRTrafTopNSummaryStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryStations.setDescription('A concatonated list of (up to 12) MAC addresses, their associated slot and port, and a statistic value for traffic associated with stations on the ring. Each entry has 36 octets. The first 6 octets are the MAC address. The 7th octet is the slot ID (or 255 if it is external to the concentrator or 254 if it is on a remote ring). The 8th is the port ID (or 255 if it is external to the concentrator or 254 if it is on a remote ring). The 9th through 36th octets contain the values of the statistics olTRTrafTopNInFrames, olTRTrafTopNOutFrames, olTRTrafTopNInOctets, olTRTrafTopNOutOctets, olTRTrafTopNOutErrors, olTRTrafTopNOutBroadcastFrames, and olTRTrafTopNOutMulticastFrames. Each statistic is represented in 4 octets, most significant octet first. The stations are in order of decreasing values of the statistic referenced by olTRTrafTopNStatistic.')
mibBuilder.exportSymbols("CHIPTRNET-MIB", olTRTrafFrames18to63Octets=olTRTrafFrames18to63Octets, dot1dBridge=dot1dBridge, olTRnetStatsPortLineErrors=olTRnetStatsPortLineErrors, ol53nnMSTP=ol53nnMSTP, olTRnetMapSummaryTable=olTRnetMapSummaryTable, olTRTrafPortOutErrors=olTRTrafPortOutErrors, olTRTrafOctets=olTRTrafOctets, olTRnetStatsPortTokenErrors=olTRnetStatsPortTokenErrors, olTRTrafStationInFrames=olTRTrafStationInFrames, olTRTrafTopNSummaryTable=olTRTrafTopNSummaryTable, olTRTrafTopNInOctets=olTRTrafTopNInOctets, olTRTrafStationOutErrors=olTRTrafStationOutErrors, olThreshControl=olThreshControl, chipTFTP=chipTFTP, softwareGroup=softwareGroup, ol51nnMFL=ol51nnMFL, olTRnetStatsNetID=olTRnetStatsNetID, chipDownload=chipDownload, olTRnetMapSummaryNetID=olTRnetMapSummaryNetID, olTRTrafStationOutFrames=olTRTrafStationOutFrames, olTRnetStatsPortTable=olTRnetStatsPortTable, olTRnetStatsPortFrameCopiedErrors=olTRnetStatsPortFrameCopiedErrors, ol51nnMTPPL=ol51nnMTPPL, olTRnetStatsStationLineErrors=olTRnetStatsStationLineErrors, ol53nnMMGT=ol53nnMMGT, olTRnetStatsStationEntry=olTRnetStatsStationEntry, chipBridge=chipBridge, olTRTrafPortNetID=olTRTrafPortNetID, olTRTrafTopNNetID=olTRTrafTopNNetID, olTRTrafControlLogicalState=olTRTrafControlLogicalState, olTRnetStatsLostFrameErrors=olTRnetStatsLostFrameErrors, ol51nnMFP=ol51nnMFP, olModules=olModules, ol51nnMTP=ol51nnMTP, ol51nnBEE=ol51nnBEE, olTRTrafTopNSummaryStatistic=olTRTrafTopNSummaryStatistic, chipTTY=chipTTY, chipmib02=chipmib02, olTRnetMapSummaryIndex=olTRnetMapSummaryIndex, olTRTrafFrames4096to8191Octets=olTRTrafFrames4096to8191Octets, olTRTrafControlTotalStations=olTRTrafControlTotalStations, olTRnetStatsBeaconEvents=olTRnetStatsBeaconEvents, olTRTrafPortEntry=olTRTrafPortEntry, olTRnetStatsTotalStations=olTRnetStatsTotalStations, olTRTrafTopNIndex=olTRTrafTopNIndex, ol53nnMFIBST=ol53nnMFIBST, ol51nnMTS=ol51nnMTS, olTRnetStatsStationPortIndex=olTRnetStatsStationPortIndex, ol51nnMAUIM=ol51nnMAUIM, oeim=oeim, olGroups=olGroups, olTRTrafTopNPortIndex=olTRTrafTopNPortIndex, olTRnetStatsPortACErrors=olTRnetStatsPortACErrors, olTRTrafFrames512to1023Octets=olTRTrafFrames512to1023Octets, olTRnetStatsTable=olTRnetStatsTable, focus1=focus1, olTRnetStatsLastBeaconTime=olTRnetStatsLastBeaconTime, olTRTrafPortOutFrames=olTRTrafPortOutFrames, olTRTrafDropEvents=olTRTrafDropEvents, olTRTrafTable=olTRTrafTable, olTRnetMapSummary=olTRnetMapSummary, olTRTrafEntry=olTRTrafEntry, olTRTrafFrames=olTRTrafFrames, olTRTrafPortOutOctets=olTRTrafPortOutOctets, ol50nnMRCTL=ol50nnMRCTL, ol53nnMFBMIC=ol53nnMFBMIC, olTRTrafFrames1024to2047Octets=olTRTrafFrames1024to2047Octets, olTRTrafFrames256to511Octets=olTRTrafFrames256to511Octets, olTRnetStatsActivePorts=olTRnetStatsActivePorts, olTRnetStatsPortLostFrameErrors=olTRnetStatsPortLostFrameErrors, olTRnetStatsLastBeaconNAUN=olTRnetStatsLastBeaconNAUN, ol51nnRES=ol51nnRES, olTRnetStatsConcStations=olTRnetStatsConcStations, olTRnetStatsStationFrameCopiedErrors=olTRnetStatsStationFrameCopiedErrors, olTRnetStatsPortIndex=olTRnetStatsPortIndex, olTRTrafPortInFrames=olTRTrafPortInFrames, ol51nnMMGT=ol51nnMMGT, chipProducts=chipProducts, olTRTrafTopNSummaryStations=olTRTrafTopNSummaryStations, olTRnetStatsPortCongestionErrors=olTRnetStatsPortCongestionErrors, ol51nnMFBP=ol51nnMFBP, olTRTrafStationOutOctets=olTRTrafStationOutOctets, olTRnetStatsPortBurstErrors=olTRnetStatsPortBurstErrors, fmm=fmm, olTRTrafControlTopNLastChangeTime=olTRTrafControlTopNLastChangeTime, olTRnetStatsStationNAUNAddress=olTRnetStatsStationNAUNAddress, olTRTrafControlEntry=olTRTrafControlEntry, olTRTrafTopNStatistic=olTRTrafTopNStatistic, olTRTrafTopNOutFrames=olTRTrafTopNOutFrames, olTRTrafTopNInFrames=olTRTrafTopNInFrames, olTRTrafTokenRotationTime=olTRTrafTokenRotationTime, olTRnetStatsStationAddr=olTRnetStatsStationAddr, olConc=olConc, olTRTrafFrames8192to18000Octets=olTRTrafFrames8192to18000Octets, chipExperiment=chipExperiment, olTRTrafControlStationLastChangeTime=olTRTrafControlStationLastChangeTime, oebm=oebm, olTRTrafStationPortIndex=olTRTrafStationPortIndex, olTRTrafTopNTable=olTRTrafTopNTable, olTRnetStatsPortDuplicateAddresses=olTRnetStatsPortDuplicateAddresses, olTRTrafStationOutMulticastFrames=olTRTrafStationOutMulticastFrames, olTRTrafTopNSummaryEntry=olTRTrafTopNSummaryEntry, olTRTrafStationEntry=olTRTrafStationEntry, olTRTrafPortAddress=olTRTrafPortAddress, online=online, olTRTrafControlLogicalLock=olTRTrafControlLogicalLock, portGroup=portGroup, olTRTrafPortOutBroadcastFrames=olTRTrafPortOutBroadcastFrames, olTRTrafTopNOutBroadcastFrames=olTRTrafTopNOutBroadcastFrames, ol5208MTP=ol5208MTP, olTRnetStatsPortNetID=olTRnetStatsPortNetID, olAgents=olAgents, olTRTrafPortTable=olTRTrafPortTable, olTRTrafNetID=olTRTrafNetID, olTRTrafControlNetID=olTRTrafControlNetID, ol52nnMMGT=ol52nnMMGT, chipEcho=chipEcho, olTRnet=olTRnet, olTRTrafStationTable=olTRTrafStationTable, olTRTrafTopNOutErrors=olTRTrafTopNOutErrors, olTRnetStatsStationCongestionErrors=olTRnetStatsStationCongestionErrors, ol52nnMFR=ol52nnMFR, ol51nnMBNC=ol51nnMBNC, olTRTrafPortPortIndex=olTRTrafPortPortIndex, olTRTrafMacFrames=olTRTrafMacFrames, olTRTrafBroadcastFrames=olTRTrafBroadcastFrames, olTRnetStatsPortTotalStations=olTRnetStatsPortTotalStations, olTRTrafTopNSummaryNetID=olTRTrafTopNSummaryNetID, hardwareGroup=hardwareGroup, olTRnetStatsEnabledPorts=olTRnetStatsEnabledPorts, olTRnetStatsStationACErrors=olTRnetStatsStationACErrors, olTRTrafControlPortTotalStations=olTRTrafControlPortTotalStations, ol51nnMFB=ol51nnMFB, olTRnetStatsTotalPorts=olTRnetStatsTotalPorts, olTRnetMapSummary32Stations=olTRnetMapSummary32Stations, olTRTrafControlLastClearTime=olTRTrafControlLastClearTime, ol51nnMTPL=ol51nnMTPL, olTRnetStatsDuplicateAddresses=olTRnetStatsDuplicateAddresses, ol51nnMTPCL=ol51nnMTPCL, olTRnetStatsStationLostFrameErrors=olTRnetStatsStationLostFrameErrors, olTRnetStatsLastBeaconAction=olTRnetStatsLastBeaconAction, olFDDInet=olFDDInet, trmm=trmm, olTRTrafControlTopNMaxStations=olTRTrafControlTopNMaxStations, olTRTrafStationOutBroadcastFrames=olTRTrafStationOutBroadcastFrames, ol51nnREE=ol51nnREE, olTRTrafPortInOctets=olTRTrafPortInOctets, olTRTrafTopNEntry=olTRTrafTopNEntry, olTRnetMapSummaryEntry=olTRnetMapSummaryEntry, olTRTrafControlTable=olTRTrafControlTable, olAlarm=olAlarm, olTRTrafControlClear=olTRTrafControlClear, olTRnetStatsEntry=olTRnetStatsEntry, olTRTrafMulticastFrames=olTRTrafMulticastFrames, olTRTrafTopNOutOctets=olTRTrafTopNOutOctets, olTRTrafControlTopNTotalStations=olTRTrafControlTopNTotalStations, ol51nnMUTP=ol51nnMUTP, olTRTrafPortSlotIndex=olTRTrafPortSlotIndex, olTRTrafControlPortLastChangeTime=olTRTrafControlPortLastChangeTime, olTRTrafStationSlotIndex=olTRTrafStationSlotIndex, olTRnetStatsPortSlotIndex=olTRnetStatsPortSlotIndex, midnight=midnight, olTRnetStatsStationTable=olTRnetStatsStationTable, ol52nnBTT=ol52nnBTT, ol50nnMCTL=ol50nnMCTL, olTRTrafStationInOctets=olTRTrafStationInOctets, olNet=olNet, olTRnetStatsStationDuplicateAddresses=olTRnetStatsStationDuplicateAddresses, ol51nnMFIB=ol51nnMFIB, hubSysGroup=hubSysGroup, olTRnetMapSummaryLogicalLock=olTRnetMapSummaryLogicalLock, chipExpTokenRing=chipExpTokenRing, ol51nnIx=ol51nnIx, boardGroup=boardGroup, dot5=dot5, olTRnetStatsBurstErrors=olTRnetStatsBurstErrors, olTRnetStatsCongestionErrors=olTRnetStatsCongestionErrors, olTRTrafTopNSlotIndex=olTRTrafTopNSlotIndex, olTRTrafFrames2048to4095Octets=olTRTrafFrames2048to4095Octets, olThresh=olThresh, olTRnetMapSummaryLogicalState=olTRnetMapSummaryLogicalState, emm=emm, olSpecMods=olSpecMods, olEnet=olEnet, ol51nnMAUIF=ol51nnMAUIF, olTRTrafFramesGreaterThan18000Octets=olTRTrafFramesGreaterThan18000Octets, olTRTrafMacOctets=olTRTrafMacOctets, olEnv=olEnv, olTRnetStatsPortAddress=olTRnetStatsPortAddress, ol52nnMTP=ol52nnMTP, hubGroup=hubGroup, olTRnetStatsStationNetID=olTRnetStatsStationNetID, olTRnetStatsTokenErrors=olTRnetStatsTokenErrors, olTRnetStatsStationSlotIndex=olTRnetStatsStationSlotIndex, olTRnetMapState=olTRnetMapState, chipcom=chipcom, olNets=olNets, ol50nnMHCTL=ol50nnMHCTL, chipGen=chipGen, olTRnetStatsStationTokenErrors=olTRnetStatsStationTokenErrors, workGroupHub=workGroupHub, olTRnetStatsLastBeaconSender=olTRnetStatsLastBeaconSender, alarmGroup=alarmGroup, olTRTrafTopNOutMulticastFrames=olTRTrafTopNOutMulticastFrames, olTRTrafFrames64to127Octets=olTRTrafFrames64to127Octets, olTRTrafStationAddress=olTRTrafStationAddress, olTRTrafPortOutMulticastFrames=olTRTrafPortOutMulticastFrames, olTRnetStatsLineErrors=olTRnetStatsLineErrors, olTRnetStatsACErrors=olTRnetStatsACErrors, olTRTrafFrames128to255Octets=olTRTrafFrames128to255Octets, olTRTrafControlTopNInterval=olTRTrafControlTopNInterval, olTRnetStatsPortEntry=olTRnetStatsPortEntry, olTRnetStatsFrameCopiedErrors=olTRnetStatsFrameCopiedErrors, MacAddress=MacAddress, olTRTrafStationNetID=olTRTrafStationNetID, olTRTrafTopNSummaryIndex=olTRTrafTopNSummaryIndex, olTRTrafTopNAddress=olTRTrafTopNAddress, olTRnetStatsStationBurstErrors=olTRnetStatsStationBurstErrors)
