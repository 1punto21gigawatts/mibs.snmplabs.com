#
# PySNMP MIB module AISLCANALOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLCANALOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, MibIdentifier, Counter64, NotificationType, Unsigned32, enterprises, ObjectIdentity, ModuleIdentity, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "MibIdentifier", "Counter64", "NotificationType", "Unsigned32", "enterprises", "ObjectIdentity", "ModuleIdentity", "Bits", "Integer32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLCAnalog = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 28))
if mibBuilder.loadTexts: aiSLCAnalog.setLastUpdated('0002181700Z')
if mibBuilder.loadTexts: aiSLCAnalog.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiSLCAnalog.setContactInfo('Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, Ohio 43017-3271 Tel: 614-798-2000 Fax: 614-798-1770 Email: snmp@aiinet.com')
if mibBuilder.loadTexts: aiSLCAnalog.setDescription('MIB module for SLCs with analog input points.')
aiSLCAnalogInputTable = MibTable((1, 3, 6, 1, 4, 1, 539, 28, 1), )
if mibBuilder.loadTexts: aiSLCAnalogInputTable.setStatus('current')
if mibBuilder.loadTexts: aiSLCAnalogInputTable.setDescription('Table of analog inputs points indexed by point number. Includes description, configuration and status information.')
aiSLCAnalogInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 28, 1, 1), ).setIndexNames((0, "AISLCANALOG-MIB", "aislcainPointNumber"))
if mibBuilder.loadTexts: aiSLCAnalogInputEntry.setStatus('current')
if mibBuilder.loadTexts: aiSLCAnalogInputEntry.setDescription('Entry of aiSLCAnalogInputTable.')
aislcainPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainPointNumber.setStatus('current')
if mibBuilder.loadTexts: aislcainPointNumber.setDescription('Input point number to which this table row applies.')
aislcainScanningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainScanningEnabled.setStatus('current')
if mibBuilder.loadTexts: aislcainScanningEnabled.setDescription('Enable or disable scanning of the input.')
aislcainDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainDescription.setStatus('current')
if mibBuilder.loadTexts: aislcainDescription.setDescription('Textual description of the point. Maximum length is 80 characters.')
aislcainTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainTrapEnable.setStatus('current')
if mibBuilder.loadTexts: aislcainTrapEnable.setDescription('Enable or disable alarm traps.')
aislcainNormalStateTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainNormalStateTrap.setStatus('current')
if mibBuilder.loadTexts: aislcainNormalStateTrap.setDescription('If enabled, transitions from an alarm state to the normal state will generate an SNMP trap or TL1 message.')
aislcainHighAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: aislcainHighAlarmSeverity.setDescription("Severity of the point's alarm state, or notReported(5) if the point does not generate an alarm.")
aislcainHighAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmStateText.setStatus('current')
if mibBuilder.loadTexts: aislcainHighAlarmStateText.setDescription("Textual description of the point's alarm state. Maximum length is 80 characters.")
aislcainLowAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: aislcainLowAlarmSeverity.setDescription("Severity of the point's alarm state, or notReported(5) if the point does not generate an alarm.")
aislcainLowAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmStateText.setStatus('current')
if mibBuilder.loadTexts: aislcainLowAlarmStateText.setDescription("Textual description of the point's alarm state. Maximum length is 80 characters.")
aislcainNormalStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainNormalStateText.setStatus('current')
if mibBuilder.loadTexts: aislcainNormalStateText.setDescription("Textual description of the point's normal state. Maximum length is 80 characters.")
aislcainUserUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainUserUnits.setStatus('current')
if mibBuilder.loadTexts: aislcainUserUnits.setDescription('The user-defined units for this input (e.g. degC, degF, etc.).')
aislcainMinInputmA = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMinInputmA.setStatus('current')
if mibBuilder.loadTexts: aislcainMinInputmA.setDescription('The current in mA corresponding to the minimum input in user-defined units.')
aislcainMinInputuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMinInputuu.setStatus('current')
if mibBuilder.loadTexts: aislcainMinInputuu.setDescription('The minimum value in user-defined units corresponding to the minimum input in mA.')
aislcainMaxInputmA = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMaxInputmA.setStatus('current')
if mibBuilder.loadTexts: aislcainMaxInputmA.setDescription('The current in mA corresponding to the maximum input in user-defined units.')
aislcainMaxInputuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMaxInputuu.setStatus('current')
if mibBuilder.loadTexts: aislcainMaxInputuu.setDescription('The maximum value in user-defined units corresponding to the maximum input in mA.')
aislcainHighLimitScan = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighLimitScan.setStatus('current')
if mibBuilder.loadTexts: aislcainHighLimitScan.setDescription('If enabled, the high limit threshold will be checked when the input is scanned.')
aislcainHighAlarmThresholduu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmThresholduu.setStatus('current')
if mibBuilder.loadTexts: aislcainHighAlarmThresholduu.setDescription('The high alarm level in user-defined units.')
aislcainHighAlarmThresholdIntervaluu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmThresholdIntervaluu.setStatus('current')
if mibBuilder.loadTexts: aislcainHighAlarmThresholdIntervaluu.setDescription('The high alarm level threshold interval in user-defined units. When the high alarm is active, each time the input rises another interval higher, a new alarm is sent.')
aislcainHighAlarmMinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmMinPeriod.setStatus('current')
if mibBuilder.loadTexts: aislcainHighAlarmMinPeriod.setDescription('The minimum number of seconds the input(s) should be energized when the input exceeds the high alarm threshold.')
aislcainHighAlarmHysteresisuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmHysteresisuu.setStatus('current')
if mibBuilder.loadTexts: aislcainHighAlarmHysteresisuu.setDescription('The amount by which the input must drop below the High Alarm Threshold before the High Alarm will be cleared.')
aislcainLowLimitScan = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowLimitScan.setStatus('current')
if mibBuilder.loadTexts: aislcainLowLimitScan.setDescription('If enabled, the low limit threshold will be checked when the input is scanned.')
aislcainLowAlarmThresholduu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmThresholduu.setStatus('current')
if mibBuilder.loadTexts: aislcainLowAlarmThresholduu.setDescription('The low alarm level in user-defined units.')
aislcainLowAlarmThresholdIntervaluu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmThresholdIntervaluu.setStatus('current')
if mibBuilder.loadTexts: aislcainLowAlarmThresholdIntervaluu.setDescription('The low alarm level threshold interval in user-defined units. When the low alarm is active, each time the input drops another interval lower, a new alarm is sent.')
aislcainLowAlarmMinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmMinPeriod.setStatus('current')
if mibBuilder.loadTexts: aislcainLowAlarmMinPeriod.setDescription('The minimum number of seconds the input(s) should be energized when the input falls below the low alarm threshold.')
aislcainLowAlarmHysteresisuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmHysteresisuu.setStatus('current')
if mibBuilder.loadTexts: aislcainLowAlarmHysteresisuu.setDescription('The amount by which the input must rise above the Low Alarm Threshold before the Low Alarm will be cleared.')
aislcainCurrentValueuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainCurrentValueuu.setStatus('current')
if mibBuilder.loadTexts: aislcainCurrentValueuu.setDescription('The current input value in user-defined units.')
aislcainCurrentValuemA = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainCurrentValuemA.setStatus('current')
if mibBuilder.loadTexts: aislcainCurrentValuemA.setDescription('The current input value in mA.')
aislcainLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: aislcainLastChangeTime.setDescription('Textural representation of the time of the most recent output change. 24-hour format YYYY-MM-DD HH:MM:SS.')
aislcaintl1AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1AccessID.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1AccessID.setDescription('Unique TL1 access identifier for this point. Maximum length is 22 characters.')
aislcaintl1Provisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1Provisioned.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1Provisioned.setDescription('Enable TL1 management of this point.')
aislcaintl1AccessIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equipment", 1), ("environmental", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1AccessIDType.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1AccessIDType.setDescription('Identifies the point as either an equipment(1) alarm condition or an environmental(2) alarm.')
aislcaintl1HighAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmType.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1HighAlarmType.setDescription('String indicating the type of alarm, used only when aislcaintl1AccessIDType is environmental(2). Maximum length is 10 characters.')
aislcaintl1HighAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1HighAlarmMessage.setDescription('Textual description of the alarm, used only when aislcaintl1AccessIDType is environmental(2). Maximum length is 40 characters.')
aislcaintl1LowAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmType.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1LowAlarmType.setDescription('String indicating the type of alarm, used only when aislcaintl1AccessIDType is environmental(2). Maximum length is 10 characters.')
aislcaintl1LowAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1LowAlarmMessage.setDescription('Textual description of the alarm, used only when aislcaintl1AccessIDType is environmental(2). Maximum length is 40 characters.')
aislcaintl1HighAlarmNotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmNotificationCode.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1HighAlarmNotificationCode.setDescription("Severity of the point's alarm state.")
aislcaintl1HighAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffecting", 1), ("notServiceAffecting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1HighAlarmServiceAffecting.setDescription('Indicates whether or not the alarm affects the functioning of the equipment. This is only meaningful when aislcaintl1AccessIDType is equipment(1).')
aislcaintl1HighAlarmConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmConditionType.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1HighAlarmConditionType.setDescription('String indicating the type of alarm condition, used only when aislcaintl1AccessIDType is equipment(1). Maximum length is 20 characters.')
aislcaintl1HighAlarmConditionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmConditionDesc.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1HighAlarmConditionDesc.setDescription('Textual description of the alarm condition, used only when aislcaintl1AccessIDType is equipment(1). Maximum length is 64 characters.')
aislcaintl1LowAlarmNotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmNotificationCode.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1LowAlarmNotificationCode.setDescription("Severity of the point's alarm state.")
aislcaintl1LowAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffecting", 1), ("notServiceAffecting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1LowAlarmServiceAffecting.setDescription('Indicates whether or not the alarm affects the functioning of the equipment. This is only meaningful when aislcaintl1AccessIDType is equipment(1).')
aislcaintl1LowAlarmConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmConditionType.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1LowAlarmConditionType.setDescription('String indicating the type of alarm condition, used only when aislcaintl1AccessIDType is equipment(1). Maximum length is 20 characters.')
aislcaintl1LowAlarmConditionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmConditionDesc.setStatus('current')
if mibBuilder.loadTexts: aislcaintl1LowAlarmConditionDesc.setDescription('Textual description of the alarm condition, used only when aislcaintl1AccessIDType is equipment(1). Maximum length is 64 characters.')
aislcainAnalogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("highLimitExceeded", 2), ("lowLimitExceeded", 3), ("lossOfSignal", 4), ("saturated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainAnalogStatus.setStatus('current')
if mibBuilder.loadTexts: aislcainAnalogStatus.setDescription('The current alarm status of the analog input.')
aislcainCurrentStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainCurrentStateText.setStatus('current')
if mibBuilder.loadTexts: aislcainCurrentStateText.setDescription("Textual description of the point's current state. This is either aislcainNormalStateText or aislcainAlarmStateText.")
aislcainAnalogAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainAnalogAlarmState.setStatus('current')
if mibBuilder.loadTexts: aislcainAnalogAlarmState.setDescription("The point's current alarm state, or normal(5).")
mibBuilder.exportSymbols("AISLCANALOG-MIB", aislcaintl1Provisioned=aislcaintl1Provisioned, aii=aii, aislcainLowAlarmThresholdIntervaluu=aislcainLowAlarmThresholdIntervaluu, aislcainPointNumber=aislcainPointNumber, aislcaintl1HighAlarmConditionDesc=aislcaintl1HighAlarmConditionDesc, aislcainHighAlarmStateText=aislcainHighAlarmStateText, aislcainUserUnits=aislcainUserUnits, aislcainNormalStateText=aislcainNormalStateText, aislcainHighAlarmMinPeriod=aislcainHighAlarmMinPeriod, aislcaintl1AccessIDType=aislcaintl1AccessIDType, aislcaintl1LowAlarmMessage=aislcaintl1LowAlarmMessage, aislcainHighAlarmThresholduu=aislcainHighAlarmThresholduu, aislcainNormalStateTrap=aislcainNormalStateTrap, aislcainLowAlarmMinPeriod=aislcainLowAlarmMinPeriod, aislcainTrapEnable=aislcainTrapEnable, aislcaintl1LowAlarmNotificationCode=aislcaintl1LowAlarmNotificationCode, aislcainAnalogAlarmState=aislcainAnalogAlarmState, aislcaintl1LowAlarmConditionType=aislcaintl1LowAlarmConditionType, aislcaintl1LowAlarmConditionDesc=aislcaintl1LowAlarmConditionDesc, PositiveInteger=PositiveInteger, NonNegativeInteger=NonNegativeInteger, aislcainMinInputmA=aislcainMinInputmA, aislcainCurrentStateText=aislcainCurrentStateText, aislcainDescription=aislcainDescription, aislcainHighAlarmThresholdIntervaluu=aislcainHighAlarmThresholdIntervaluu, aiSLCAnalogInputTable=aiSLCAnalogInputTable, aislcaintl1LowAlarmServiceAffecting=aislcaintl1LowAlarmServiceAffecting, aislcaintl1AccessID=aislcaintl1AccessID, aislcaintl1HighAlarmConditionType=aislcaintl1HighAlarmConditionType, aislcainLowAlarmThresholduu=aislcainLowAlarmThresholduu, aislcainMaxInputuu=aislcainMaxInputuu, aislcaintl1HighAlarmNotificationCode=aislcaintl1HighAlarmNotificationCode, aislcainCurrentValuemA=aislcainCurrentValuemA, aislcainScanningEnabled=aislcainScanningEnabled, aislcainHighAlarmHysteresisuu=aislcainHighAlarmHysteresisuu, aislcainHighAlarmSeverity=aislcainHighAlarmSeverity, aislcainLowLimitScan=aislcainLowLimitScan, aislcainAnalogStatus=aislcainAnalogStatus, aislcainLastChangeTime=aislcainLastChangeTime, aislcaintl1HighAlarmServiceAffecting=aislcaintl1HighAlarmServiceAffecting, PYSNMP_MODULE_ID=aiSLCAnalog, aislcaintl1LowAlarmType=aislcaintl1LowAlarmType, aislcainCurrentValueuu=aislcainCurrentValueuu, aislcaintl1HighAlarmType=aislcaintl1HighAlarmType, aiSLCAnalog=aiSLCAnalog, aislcainLowAlarmStateText=aislcainLowAlarmStateText, aislcaintl1HighAlarmMessage=aislcaintl1HighAlarmMessage, aislcainLowAlarmHysteresisuu=aislcainLowAlarmHysteresisuu, aislcainLowAlarmSeverity=aislcainLowAlarmSeverity, aislcainMinInputuu=aislcainMinInputuu, aiSLCAnalogInputEntry=aiSLCAnalogInputEntry, aislcainMaxInputmA=aislcainMaxInputmA, aislcainHighLimitScan=aislcainHighLimitScan)
