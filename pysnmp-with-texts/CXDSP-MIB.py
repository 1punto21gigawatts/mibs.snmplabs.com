#
# PySNMP MIB module CXDSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXDSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
Alias, SapIndex, cxDsp = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "SapIndex", "cxDsp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Counter32, ModuleIdentity, IpAddress, Counter64, Integer32, TimeTicks, Bits, ObjectIdentity, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Counter32", "ModuleIdentity", "IpAddress", "Counter64", "Integer32", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class X25Address(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class DspCuAddress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 254)

class DspDevAddress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 254)

class DspRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("invalid", 1), ("valid", 2))

class DspCircuitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("singusr-noreqcirc", 1), ("singusr-reqcirc", 2), ("multuser-reqcirc", 3), ("mes-usr-reqcirc", 4))

class DspOperationalMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("offline", 1), ("online", 2))

class DspPartner(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("terminal-terminal", 1), ("host-terminal", 2))

class PacketSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bytes16", 4), ("bytes32", 5), ("bytes64", 6), ("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10), ("bytes2048", 11), ("bytes4096", 12))

class ThruputClass(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("bps75", 3), ("bps150", 4), ("bps300", 5), ("bps600", 6), ("bps1200", 7), ("bps2400", 8), ("bps4800", 9), ("bps9600", 10), ("bps19200", 11), ("bps38400", 12), ("bps64000", 13))

dspSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1), )
if mibBuilder.loadTexts: dspSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapTable.setDescription('A table containing configuration information about all the service access point.')
dspSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1), ).setIndexNames((0, "CXDSP-MIB", "dspSapNumber"))
if mibBuilder.loadTexts: dspSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapEntry.setDescription('The parameters for a particular service access point.')
dspSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapNumber.setDescription('Identifies the service access point by a numerical value. This value is used as a index in the saps table. Values are unique per service access point.')
dspSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 2), DspRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapRowStatus.setDescription("Indicates whether the particular service access point is configured within the MIB Service access point entries (rows) may be created by setting this object value to 'valid', or deleted by changing this object value to 'invalid'. Whether or not the row actually disappears is left to the implementation so this object may actually read as 'invalid' for some arbitrary length of time.")
dspSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2))).clone('lower')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapType.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapType.setDescription("Identifies the service access point by type:'lower' identifies a SAP leading to a physical X25 port. 'Upper' identifies a SAP acting as an internal inter-layer logical port.")
dspSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapAlias.setDescription('Identifies the service access point by a textual name. Names are unique per service access point.')
dspSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapCompanionAlias.setDescription("Identifies the `lower' service access point that will communicate with this service access point by a textual name. Names are unique per service access point. Used to bind the DSP Sap with the X25 sap.")
dspSapSnalcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapSnalcRef.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapSnalcRef.setDescription('Identifies which upper sap is associated to the lower sap within the DSP module. Applies only to lower DSP saps (X25 sap).')
dspSapEbcdicAsciiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encdicMode", 1), ("asciiMode", 2))).clone('encdicMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapEbcdicAsciiMode.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapEbcdicAsciiMode.setDescription('Indicates the character set used by the device defined for this association. The character set could be a EBCDIC or ASCII.')
dspSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dspSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapControl.setDescription('Control associated with the specified service access point.')
dspSapOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 30), DspOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspSapOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: dspSapOperationalMode.setDescription('Identifies the service access point as being active or non-active with the new configuration.')
dspCuTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2), )
if mibBuilder.loadTexts: dspCuTable.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuTable.setDescription('A table containing configuration information about all the 3270 controller units.')
dspCuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1), ).setIndexNames((0, "CXDSP-MIB", "dspCuSapNumber"), (0, "CXDSP-MIB", "dspCuAddress"))
if mibBuilder.loadTexts: dspCuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuEntry.setDescription('The parameters for a particular controller unit.')
dspCuSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuSapNumber.setDescription('Identifies the sap associated with this controller unit. Each controller unit has an address and the address has to be unique with one sap. However, the address is not required to be unique between saps This object is an index in the sap Table. Values are unique.')
dspCuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 2), DspCuAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuAddress.setDescription('Identifies the address of this controller unit. The address has to be unique for a specified sap.')
dspCuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 3), DspRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuRowStatus.setDescription("Indicates whether the particular service access point is configured within the MIB. Controller unit entries (rows) may be created by setting this object value to 'valid', or deleted by changing this object value to 'invalid'. Whether or not the row actually disappears is left to the implementation so this object may actually read as 'invalid' for some arbitrary length of time.")
dspCuType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("termInterfaceUnit", 1), ("hostInterfaceUnit", 2))).clone('termInterfaceUnit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuType.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuType.setDescription('Identifies the type of controller: either TIU or HIU.')
dspCuCallingX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 5), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuCallingX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuCallingX25Address.setDescription('Identifies the X25 address of this sap. This address is unique for all devices attached to this sap, TIU side')
dspCuCalledX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 6), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuCalledX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuCalledX25Address.setDescription('Identifies the X25 address of the remote device.')
dspCuDSPCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 8), DspCircuitType().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuDSPCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuDSPCircuitType.setDescription('Identifies the connection as being either only one connection or multiple DSP connections per X.25 virtual circuit The valid values follow: singUsr-NoReq Circ - single user per X25 svc, no circuit request. The LCN is 0. singUsr-ReqCirc - single user per X25 svc, circuit request. The LCN is negociated during the connection establishment. multUser-ReqCirc - multiple user per X25 svc. Each user has a LCN and the LCN is negociated individually. MES-Usr-ReqCirc - Modified Bisync single user per X25 svc, circuit request. The LCN is negociated during the connection establishment.')
dspCuWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuWindow.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuWindow.setDescription("Defines the receive window size used for packets. At the source side, it defines the window for packets received from the source interface. At the destination side, it defines the window for packets transmitted to the the source side, it defines the window for packets transmitted to the source interface. At the destination side, it defines the window for packets received from the destination interface. Allowable value are '1'-'7' for modulo 8.")
dspCuUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuUserData.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuUserData.setDescription('The user data put in the call user data field of call request packets.')
dspCuFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuFacility.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuFacility.setDescription('Specifies the facility codes and facility parameters put in the facilities field of the call call request packet during call set-up. The maximum number of facility codes and parameters that may be specified is 20.')
dspCuApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuApplicationId.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuApplicationId.setDescription('Indicates an application running on the host associated with the controller unit/device.')
dspCuReqMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixedClassCrm", 1), ("specificClassCrm", 2), ("nonSpecificClassCrm", 3), ("associateDeviceCrm", 4))).clone('fixedClassCrm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuReqMode.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuReqMode.setDescription("Identifies the connection request mode. The following modes are available : Fixed Class Crm : destination is selected automatically Specific Class Crm : select a destination by cu/dev addresses. Non-Specific Class Crm : select a destination by address and application ID. Associated Device Crm : associate a device with an existing connection. The terminal DSP uese the Only the 'fixedClassCrm' could be supported by this implementation.")
dspCuPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 14), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuPacketSize.setDescription('The receive and transmit packet size.')
dspCuThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 15), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuThroughput.setDescription('The receive and transmit throughput class across the line. ')
dspCuPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 16), DspPartner().clone('terminal-terminal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuPartner.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuPartner.setDescription("This object identifies the knowledge DSP has about its BSC partner layer and applies to the controllers acting as Terminal Interface. In normal conditions, the DSP and BSC layers are configured both having the same interface type (HIU or TIU). This is the default configuration and it enables the controller the be the initiator of the X25 connection. The host can't establish an X25 connection in this configuration. When the Host is the call establishment initiator, this object could be configured as Host (HIU) type and the local BSC as (TIU), meaning that the DSP will behave as a HIU during the call establishment. This object is used just during the call establishment. There are the following options available: terminal-terminal DSP and BSC layers are configured as hosts. host-terminal DSP is configured as host and behaves as a terminal. BSC is configured as a terminal.")
dspCuControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dspCuControl.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuControl.setDescription('Control associated with the specified service access point.')
dspCuState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("x25-connecting", 2), ("x25-wait-endtoend", 3), ("x25-connected", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuState.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuState.setDescription('Control associated with the specified service access point.')
dspCuOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 31), DspOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuOperationalMode.setDescription('Identifies the controller unit as being active or non-active with the new configuration.')
dspCuX25CallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuX25CallRequest.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuX25CallRequest.setDescription('Identifies the number of X25 Call Request packets received by this controller.')
dspCuX25CallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuX25CallAccept.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuX25CallAccept.setDescription('Identifies the number of X25 Call Accept packets received by this controller.')
dspCuClears = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuClears.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuClears.setDescription('Identifies the number of Clear Request received from the SNALC layer.')
dspCuClearsInd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuClearsInd.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuClearsInd.setDescription('Identifies the number of Clear Indications sent to the SNALC layer.')
dspCuInvToClear = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuInvToClear.setStatus('mandatory')
if mibBuilder.loadTexts: dspCuInvToClear.setDescription('Identifies the number of INVITATION TO CLEAR packets received by this controller.')
dspDevTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3), )
if mibBuilder.loadTexts: dspDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevTable.setDescription('A table containing configuration information about all the devices controlled by this module. ')
dspDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1), ).setIndexNames((0, "CXDSP-MIB", "dspDevSapNumber"), (0, "CXDSP-MIB", "dspDevCuAddress"), (0, "CXDSP-MIB", "dspDevAddress"))
if mibBuilder.loadTexts: dspDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevEntry.setDescription('The parameters for a particular controller unit.')
dspDevSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevSapNumber.setDescription('Identifies the sap to which this device is attached to. ')
dspDevCuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 2), DspCuAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCuAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCuAddress.setDescription('Identifies the address of the controller unit to which this device is attached. ')
dspDevAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 3), DspDevAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevAddress.setDescription('Identifies the address of this device. The address has to be unique for a specified for a controller unit.')
dspDevRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevRowStatus.setDescription("Indicates whether the particular service access point is configured within the MIB. Controller unit entries (rows) may be created by setting this object value to 'valid', or deleted by changing this object value to 'invalid'. Whether or not the row actually disappears is left to the implementation so this object may actually read as 'invalid' for some arbitrary length of time.")
dspDevUCN = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevUCN.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevUCN.setDescription('Identifies a specific connection. ')
dspDevRemoteCuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 6), DspCuAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevRemoteCuAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevRemoteCuAddress.setDescription(' Identifies the address of remote controller unit to which this device is connected. This object is set to 0 if no connection is established. ')
dspDevRemoteDevAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 7), DspDevAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevRemoteDevAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevRemoteDevAddress.setDescription(' Identifies the address of remote controller unit to which this device is connected. This object is set to 0 if no connection is established. ')
dspDevFormatSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("char480", 1), ("char960", 2), ("char1920", 3), ("char2560", 4), ("char3440", 5), ("char3564", 6), ("charReserved1", 7), ("charReserved2", 8))).clone('char3440')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevFormatSize.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevFormatSize.setDescription('Describes the number of characters suported by the device.')
dspDevAttPrnt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPrinterAttached", 1), ("printerAttached", 2))).clone('noPrinterAttached')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevAttPrnt.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevAttPrnt.setDescription('Identifies wheather the device has a printer attached. The device could be a display in order to have a printer attached.')
dspDevCharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneCharSet", 1), ("aplCharSet", 2), ("textCharSet", 3), ("aplTextCharSet", 4))).clone('textCharSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevCharSet.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCharSet.setDescription('Identifies the support of different character sets. ')
dspDevColour = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("colourSuport", 1), ("noColourSuport", 2))).clone('noColourSuport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevColour.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevColour.setDescription('Identifies wheather the device supports colours. ')
dspDevTTextSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparentText", 1), ("nonTransparentText", 2))).clone('nonTransparentText')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevTTextSupport.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevTTextSupport.setDescription('Identifies whether it the device supports transparent text.')
dspDevDPmode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("display", 1), ("printer", 2))).clone('display')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevDPmode.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevDPmode.setDescription('Identifies wheather the device is a display or printer.')
dspDevControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dspDevControl.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevControl.setDescription('Control associated with the specified service access point.')
dspDevOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 30), DspOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevOperationalMode.setDescription('Identifies the controller unit as being active or non-active with the new configuration.')
dspDevState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("x25-connected", 2), ("wait-circuit-request", 3), ("wait-circuit-enabled", 4), ("wait-status", 5), ("connected", 6), ("disconnecting", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevState.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevState.setDescription("Indicates the state of the conection. The state 'invalid' means there is no connection. The state 'conected' means the connection is established.")
dspDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevStatus.setDescription("This object contains the 'Status' byte, defined by the BSC protocol for 3270 controller unit family. This object and the 'bscDevSense ' contain the result of the last operations performed on the device. The controller unit is responsable to set properly this byte.")
dspDevSense = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevSense.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevSense.setDescription("This object contains the 'Sense' byte, defined by the BSC protocol for 3270 controller unit family. This object and the 'bscDevSense ' contain the result of the last operations performed on the device. The controller unit is responsable to set properly this byte.")
dspDevCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCommand.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCommand.setDescription('Identifies the number of COMAMND packets sent/received by the device. Only the host sends the COMMAND packets. The host DSP counts the number of packets sent. The terminal DSP counts the number of packets received.')
dspDevResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevResponse.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevResponse.setDescription('Identifies the number of RESPONSE packets sent/received by the device. Only the termianl sends RESPONSE packets. The host DSP counts the number of packets received. The terminal DSP counts the number of packets sent.')
dspDevCmdRspUndel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspUndel.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCmdRspUndel.setDescription("Identifies the number of COMAMND/RESPONSE UNDELIVERED packets. This object notifies how many packets were rejected by this device. The host DSP counts the number of COMMAND ABORTED packets received. The terminal DSP counts the number of RESPONSE ABORTED packets received.. The error code of the last received packet (COMMAND/REPONSE) is kept by the object 'dspDevCmdRspUndelReason'. ")
dspDevCmdRspUndelReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("eot", 1), ("rvi", 2), ("ff", 3), ("timeout", 4), ("nak", 5), ("wack", 6), ("reserved", 7), ("invalid", 8), ("ur", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspUndelReason.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCmdRspUndelReason.setDescription("This object keeps the error code of the last COMAMND/RESPONSE UNDELIVERED packet received. When conected to another Memotec device, only the 'wack' reason code could be received. All other error codes are managed locally by BSC.")
dspDevCmdRspAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspAbort.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCmdRspAbort.setDescription('Identifies the number of COMAMND/RESPONSE ABORTED packets. This object notifies how many packets were aborted by this device. The host DSP counts the number of COMMAND ABORTED packets received. The terminal DSP counts the number of RESPONSE ABORTED packets received.. The error code of the last received packet (COMMAND/REPONSE) is kept by the object dspDevCmdRspAbortReason. ')
dspDevCmdRspAbortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 10))).clone(namedValues=NamedValues(("ff", 3), ("timeout", 4), ("nak", 5), ("ste", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspAbortReason.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCmdRspAbortReason.setDescription('This object keeps the error code of the last COMAMND/RESPONSE ABORTED packet received. When conected to another Memotec device, all the abort cases are managed locally by BSC.')
dspDevStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevStatStatus.setDescription('Identifies the number of STATUS packets sent/received. Only the terminal sends this packet. The terminal DSP counts the number of packets sent. The host DSP counts the number of packets received.')
dspDevAck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevAck.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevAck.setDescription('Identifies the number of ACK packets sent by the device. Both host and terminal DSPs can sent ACK packets.')
dspDevInvToClear = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevInvToClear.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevInvToClear.setDescription('Identifies the number of INVITATION TO CLEAR packets received by the device.')
dspDevInvClearReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 18, 19, 32, 33))).clone(namedValues=NamedValues(("userInitiated", 1), ("unidentPkt", 16), ("invStateTrans", 17), ("invDqFormat", 18), ("invDataFormat", 19), ("timeout", 32), ("facility", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevInvClearReason.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevInvClearReason.setDescription('This object keeps the error code of the last COMAMND/RESPONSE ABORTED packet received.')
dspDevReset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevReset.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevReset.setDescription('Identifies the number of RESET packets received by the device.')
dspDevResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19))).clone(namedValues=NamedValues(("unidentDqPkt", 16), ("seqErr", 17), ("invDqFormat", 18), ("invDataFormat", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevResetReason.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevResetReason.setDescription('This object keeps the error code of the last RESET packet received..')
dspDevCircuitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCircuitEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCircuitEnabled.setDescription('Identifies the number of CIRCUIT ENABLED packets received by the device.')
dspDevCircuitRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCircuitRequest.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCircuitRequest.setDescription('Identifies the number of CIRCUIT REQUEST packets received by the device.')
dspDevCircuitDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCircuitDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: dspDevCircuitDisconnect.setDescription('Identifies the number of DISCONNECT packets received by the device.')
mibBuilder.exportSymbols("CXDSP-MIB", dspDevCommand=dspDevCommand, dspDevCmdRspUndelReason=dspDevCmdRspUndelReason, dspDevCircuitDisconnect=dspDevCircuitDisconnect, dspSapTable=dspSapTable, dspDevResetReason=dspDevResetReason, dspDevInvToClear=dspDevInvToClear, dspCuFacility=dspCuFacility, dspCuClears=dspCuClears, dspDevRemoteDevAddress=dspDevRemoteDevAddress, dspDevControl=dspDevControl, dspCuType=dspCuType, dspDevCmdRspUndel=dspDevCmdRspUndel, dspDevTable=dspDevTable, DspOperationalMode=DspOperationalMode, dspCuInvToClear=dspCuInvToClear, dspCuPartner=dspCuPartner, dspDevRowStatus=dspDevRowStatus, dspDevStatus=dspDevStatus, dspCuRowStatus=dspCuRowStatus, dspDevDPmode=dspDevDPmode, dspDevCircuitRequest=dspDevCircuitRequest, dspCuReqMode=dspCuReqMode, dspCuThroughput=dspCuThroughput, dspCuTable=dspCuTable, DspPartner=DspPartner, dspDevColour=dspDevColour, dspSapNumber=dspSapNumber, dspCuSapNumber=dspCuSapNumber, dspCuWindow=dspCuWindow, dspDevReset=dspDevReset, dspCuUserData=dspCuUserData, dspDevUCN=dspDevUCN, dspCuOperationalMode=dspCuOperationalMode, dspSapType=dspSapType, dspCuX25CallAccept=dspCuX25CallAccept, dspDevCmdRspAbortReason=dspDevCmdRspAbortReason, dspDevCmdRspAbort=dspDevCmdRspAbort, dspDevOperationalMode=dspDevOperationalMode, dspSapEbcdicAsciiMode=dspSapEbcdicAsciiMode, dspDevSapNumber=dspDevSapNumber, dspDevAck=dspDevAck, dspDevCharSet=dspDevCharSet, dspDevStatStatus=dspDevStatStatus, dspDevSense=dspDevSense, dspSapAlias=dspSapAlias, dspCuDSPCircuitType=dspCuDSPCircuitType, dspCuCallingX25Address=dspCuCallingX25Address, dspCuControl=dspCuControl, dspCuEntry=dspCuEntry, dspSapControl=dspSapControl, dspCuAddress=dspCuAddress, dspDevResponse=dspDevResponse, DspCuAddress=DspCuAddress, dspCuState=dspCuState, dspDevCuAddress=dspDevCuAddress, dspSapCompanionAlias=dspSapCompanionAlias, DspCircuitType=DspCircuitType, dspDevAddress=dspDevAddress, dspDevTTextSupport=dspDevTTextSupport, X25Address=X25Address, dspDevRemoteCuAddress=dspDevRemoteCuAddress, dspSapSnalcRef=dspSapSnalcRef, dspSapEntry=dspSapEntry, DspRowStatus=DspRowStatus, ThruputClass=ThruputClass, dspCuPacketSize=dspCuPacketSize, dspDevState=dspDevState, PacketSize=PacketSize, dspDevInvClearReason=dspDevInvClearReason, dspSapOperationalMode=dspSapOperationalMode, dspDevAttPrnt=dspDevAttPrnt, dspCuX25CallRequest=dspCuX25CallRequest, dspDevFormatSize=dspDevFormatSize, DspDevAddress=DspDevAddress, dspSapRowStatus=dspSapRowStatus, dspCuCalledX25Address=dspCuCalledX25Address, dspDevEntry=dspDevEntry, dspCuClearsInd=dspCuClearsInd, dspDevCircuitEnabled=dspDevCircuitEnabled, dspCuApplicationId=dspCuApplicationId)
