#
# PySNMP MIB module Wellfleet-RFWALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-RFWALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, ObjectIdentity, IpAddress, Unsigned32, Gauge32, TimeTicks, Bits, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Unsigned32", "Gauge32", "TimeTicks", "Bits", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfFwallGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFwallGroup")
wfRFwallGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2))
wfRFwallDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallDelete.setDescription('Create/Delete parameter')
wfRFwallDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallDisable.setDescription('Enable/Disable parameter')
wfRFwallState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRFwallState.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallState.setDescription('State parameter')
wfRFwallLogHostIp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogHostIp.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallLogHostIp.setDescription('Primary Log Machine IP address ip notation')
wfRFwallLogHostIpInt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogHostIpInt.setStatus('obsolete')
if mibBuilder.loadTexts: wfRFwallLogHostIpInt.setDescription('Primary Log Machine IP address decimal value: NOT IN USE')
wfRFwallLocalHostIp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLocalHostIp.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallLocalHostIp.setDescription('Local host IP address ip notation')
wfRFwallLocalHostIpInt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLocalHostIpInt.setStatus('obsolete')
if mibBuilder.loadTexts: wfRFwallLocalHostIpInt.setDescription('Local host IP address decimal value: NOT IN USE')
wfRFwallVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallVersion.setDescription('Version parameter - FireWall Protocol Version Number')
wfRFwallHmemMin = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 9), Integer32().clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallHmemMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallHmemMin.setDescription('Memory allocator initialization parameter: Min Value')
wfRFwallHmemMax = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 10), Integer32().clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallHmemMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallHmemMax.setDescription('Memory allocator initialization parameter: Max Value')
wfRFwallLogHostIpBkp1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogHostIpBkp1.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallLogHostIpBkp1.setDescription('Secondary Log Machine IP address ip notation')
wfRFwallLogHostIpIntBkp1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogHostIpIntBkp1.setStatus('obsolete')
if mibBuilder.loadTexts: wfRFwallLogHostIpIntBkp1.setDescription('Secondary Log Machine IP address decimal value: NOT IN USE')
wfRFwallLogHostIpBkp2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogHostIpBkp2.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallLogHostIpBkp2.setDescription('Tertiary Log Machine IP address ip notation')
wfRFwallLogHostIpIntBkp2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogHostIpIntBkp2.setStatus('obsolete')
if mibBuilder.loadTexts: wfRFwallLogHostIpIntBkp2.setDescription('Tertiary Log Machine IP address decimal value: NOT IN USE')
wfRFwallFastPathDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallFastPathDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallFastPathDisable.setDescription('Fast Path optimization Enable/Disable parameter')
wfRFwallFilterTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 180)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallFilterTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallFilterTimer.setDescription('This timer value specified in seconds, is the time interval between the attempts to download the filter from the backup management station if the download is not successful from the current management station.')
wfRFwallLogTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 180)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallLogTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallLogTimer.setDescription('This timer value specified in seconds, is the time interval between the attempts to log to the backup management hosts if the logging is not successful to the current management station.')
wfRFwallKeepaliveTimerIdle = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallKeepaliveTimerIdle.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallKeepaliveTimerIdle.setDescription('Idle session timeout period, in seconds. If an established TCP connection remains inactive for this interval, KEEPALIVE messages will be sent to the peer (if the Keepalive Timer is non-zero). Setting the Idle Timer to zero disables the keepalive feature.')
wfRFwallKeepaliveTimerRetryTmo = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallKeepaliveTimerRetryTmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallKeepaliveTimerRetryTmo.setDescription('KEEPALIVE retransmit timeout period, in seconds. This is the interval at which unacknowledged KEEPALIVE messages will be retransmitted. If the Idle Timer is set to zero, this timer ignored. If the Idle Timer is non-zero and this timer IS zero, no KEEPALIVEs are sent and the session is terminated upon expiration of the Idle Timer.')
wfRFwallKeepaliveTimerRetries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRFwallKeepaliveTimerRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfRFwallKeepaliveTimerRetries.setDescription('Number of unacknowledged KEEPALIVE messages retransmitted before the TCP session is terminated. If this count is set to zero, only one KEEPALIVE message will be sent.')
mibBuilder.exportSymbols("Wellfleet-RFWALL-MIB", wfRFwallDisable=wfRFwallDisable, wfRFwallLogHostIpIntBkp2=wfRFwallLogHostIpIntBkp2, wfRFwallLogHostIp=wfRFwallLogHostIp, wfRFwallLogHostIpBkp2=wfRFwallLogHostIpBkp2, wfRFwallLogHostIpBkp1=wfRFwallLogHostIpBkp1, wfRFwallKeepaliveTimerRetryTmo=wfRFwallKeepaliveTimerRetryTmo, wfRFwallKeepaliveTimerIdle=wfRFwallKeepaliveTimerIdle, wfRFwallState=wfRFwallState, wfRFwallLogHostIpInt=wfRFwallLogHostIpInt, wfRFwallGroup=wfRFwallGroup, wfRFwallLogTimer=wfRFwallLogTimer, wfRFwallLocalHostIpInt=wfRFwallLocalHostIpInt, wfRFwallKeepaliveTimerRetries=wfRFwallKeepaliveTimerRetries, wfRFwallDelete=wfRFwallDelete, wfRFwallHmemMin=wfRFwallHmemMin, wfRFwallFastPathDisable=wfRFwallFastPathDisable, wfRFwallLocalHostIp=wfRFwallLocalHostIp, wfRFwallFilterTimer=wfRFwallFilterTimer, wfRFwallVersion=wfRFwallVersion, wfRFwallLogHostIpIntBkp1=wfRFwallLogHostIpIntBkp1, wfRFwallHmemMax=wfRFwallHmemMax)
