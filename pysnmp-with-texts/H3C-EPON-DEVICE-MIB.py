#
# PySNMP MIB module H3C-EPON-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-EPON-DEVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:22:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
h3cEpon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cEpon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Bits, Gauge32, Counter64, Counter32, iso, ObjectIdentity, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Integer32, IpAddress, NotificationType, Unsigned32, zeroDotZero = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Gauge32", "Counter64", "Counter32", "iso", "ObjectIdentity", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Integer32", "IpAddress", "NotificationType", "Unsigned32", "zeroDotZero")
RowStatus, DateAndTime, TruthValue, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "TruthValue", "DisplayString", "TextualConvention", "MacAddress")
h3cEponDeviceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4))
h3cEponDeviceMIB.setRevisions(('2004-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cEponDeviceMIB.setRevisionsDescriptions(('Initial version, published as RFC XXXX.',))
if mibBuilder.loadTexts: h3cEponDeviceMIB.setLastUpdated('200409210000Z')
if mibBuilder.loadTexts: h3cEponDeviceMIB.setOrganization('IETF Ethernet Interfaces and Hub MIB Working Group')
if mibBuilder.loadTexts: h3cEponDeviceMIB.setContactInfo('WG charter: http://www.ietf.org/html.charters/hubmib-charter.html Mailing Lists: General Discussion: hubmib@ietf.org To Subscribe: hubmib-request@ietf.org In Body: subscribe your_email_address Chair: Dan Romascanu Postal: Avaya Inc. Atidim Technology Park, Bldg. 3 Tel Aviv 61131 Israel Tel: +972-3-645-8414 E-mail: dromasca@avaya.com Editor: Lior Khermosh Postal: Passave Technologies Inc. Ackerstein Towers, Tower A, 6th floor, 9 Hamenofim St. Hertzliya Pituach 46725, ISRAEL P.O.Box 2089 Hertzliya Pituach 46120 Israel Tel: +972-9-9717600 Ext: 7181 E-mail: lior.khermosh@passave.com')
if mibBuilder.loadTexts: h3cEponDeviceMIB.setDescription("The objects in this MIB module are used to manage Ethernet Passive Optical Network (EPON) devices which are based on the Ethernet in the First Mile (EFM) PON as defined in IEEE Draft P802.3ah/D3.0 clause 60,64,65. This mib is excerpted from the draft files directly,only changed the object name,added the h3c as prefix. The following reference is used throughout this MIB module: [802.3ah] refers to: IEEE Draft P802.3ah/D3.3: 'Draft amendment to - Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific requirements - Part 3: Carrier sense multiple access with collision detection (CSMA/CD) access method and physical layer specifications - Media Access Control Parameters, Physical Layers and Management Parameters for subscriber access networks', 22 April 2004. Of particular interest are Clause 64(MPCP) 65(P2mP RS) and 60 (PON PMDs). Clause 30, 'Management', and Clause 45,'Management Data Input/Output (MDIO) Interface'. Copyright (C) The Internet Society (2004). This version of this MIB module is part of XXXX see the RFC itself for full legal notices.")
h3cEponDeviceObjectMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1))
h3cEponDeviceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1))
h3cEponDeviceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2))
h3cEponDeviceControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1))
h3cEponDeviceStatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2))
h3cEponDeviceEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3))
h3cEponDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1), )
if mibBuilder.loadTexts: h3cEponDeviceControlTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceControlTable.setDescription('Table for EPON device MIB modules.')
h3cEponDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponDeviceControlEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceControlEntry.setDescription('An entry in the EPON device Control table.')
h3cEponDeviceObjectReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("reset", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceObjectReset.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectReset.setDescription('This variable is used to reset the EPON device. The interface may be unavailable while the reset occurs and data may be lost. During reading operation it returns the state of the EPON device. running(1) indicates and operates normal operation, reset(2) indicates and operates reset mode. Writing can be done all the time.')
h3cEponDeviceObjectModes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("olt", 1), ("onu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceObjectModes.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectModes.setDescription('This variable defines the mode of the EPON device. When an olt(1) it is an Optical Line Terminal device (server) and when an onu(2) and Optical Network Unit device (client)')
h3cEponDeviceObjectFecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noFecEnabled", 1), ("fecTxEnabled", 2), ("fecRxEnabled", 3), ("fecTxRxEnabled", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceObjectFecEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectFecEnabled.setDescription('This variable defines and provides information whether the EPON device uses FEC as defined in the [802.3ah] clause 65.2 for EPON. When noFECEnabled(1) the device does not support FEC mode When fecTxEnabled(2) the device supports the FEC transmission mode. When fecRxEnabled(3) the device supports the FEC Receive mode. When fecTxRxEnabled(4) the device supports the FEC transmission and receive mode. Writing can be done all the time. This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceObjectOamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOam", 1), ("oamServer", 2), ("oamclient", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceObjectOamMode.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectOamMode.setDescription('This variable defines and provides information on the Operation Administration and Maintenance (OAM) mode of an EPON device as defined by the [802.3ah] clause 57. When noOam(1) the device does not supports the OAM mode. When oamServer(2) the device supports the OAM mode as a server unit. When oamClient(3) the device supports the OAM mode as a client unit. Writing can be done during initialization, h3cEponDeviceObjectDeviceReadyMode is in notReady(1) or inProcess(2). This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceObjectDeviceReadyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notReady", 1), ("inProcess", 2), ("ready", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceObjectDeviceReadyMode.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectDeviceReadyMode.setDescription('This variable defines the mode of an EPON device and provides information on the mode in initialization - ready for registration as defined by the [802.3ah] clause 64. When notReady(1) the device is not ready for operation. When inProcess(2) the device is in initialization process. When ready(3) the device is ready for registration. Writing can be done all the time. This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceObjectPowerDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceObjectPowerDown.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectPowerDown.setDescription('Setting this variable to True(1) will cause Device to be entered into Power down mode where no registration is allowed and only receiving data from the link. Writing can be done all the time. This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceObjectNumberOfLLIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceObjectNumberOfLLIDs.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectNumberOfLLIDs.setDescription('A read only variable which defines the number of registered LLIDs (as defined by the [802.3ah] clause 65) in a EPON network for an OLT and an ONU. Initialization value is 0. This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceObjectReportThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 9), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceObjectReportThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceObjectReportThreshold.setDescription('A set of 8 integers, for each LLID, that defines the threshold reporting for each Queue in the REPORT message, as defined in [802.3ah] 64. First Queue set reporting will provide information on the queue occupancy of frames below this Threshold. The value returned shall be in Time quanta (TQ) which is 16nsec or 2 octets increments. Writing can be done all the time. This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceRemoteMACAddressLLIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("resetLog", 2), ("useDefaultReporting", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDControl.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDControl.setDescription('Indicates and controls the resetting of the LLID MAC address log. Setting this object to none(1) has no action resetLog(2) empties the LLID MAC address log. All data is deleted. Setting it to useDefaultReporting(3) returns all entries priorities to their factory-default reporting. Reading this object always returns useDefaultReporting(3).')
h3cEponDeviceRemoteMACAddressLLIDTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2), )
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDTable.setDescription('A table of read-only value that identifies the source_address and LLIDs parameter of the remote devices in the network. This MacAddress value, as defined in [802.3ah], 30.3.5.1.5, is updated on reception of a valid frame with a unicast destination Field or (1) a destination Field equal to the reserved multicast address for MAC Control specified in [802.3ah] Annex 31A, (2) lengthOrType field value equal to the reserved Type for MAC Control as specified in [802.3ah] Annex 31A. (3)an MPCP subtype value equal to the subtype reserved for MPCP as specified in [802.3ah] Annex 31A, and an LLID as allocated by the OLT. The table is defined as Remote MAC address - LLID (RMadL) The table is relevant only for an OLT device, and is equivalent from a bridge emulation to the bridge port-MAC address table where the LLIDs are equivalent to virtual bridge ports.')
h3cEponDeviceRemoteMACAddressLLIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDEntry.setDescription('A group of entries. Applications create and delete entries using h3cEponDeviceRMadlEntryStatus. When adding objects to an LLID they are added in the persistent order of their index in this table.')
h3cEponDeviceRemoteMACAddressLLIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDName.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRemoteMACAddressLLIDName.setDescription('A locally-unique, administratively assigned name for a group of entries.')
h3cEponDeviceRMadlLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRMadlLLID.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRMadlLLID.setDescription('An arbitrary integer for the purpose of identifying the LLID. Writing can be done all the time.')
h3cEponDeviceRMadlLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 3), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRMadlLogID.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRMadlLogID.setDescription('The object identifier of a MIB module object to add to an entry, indicating the entry ID in the table. Writing can be done all the time.')
h3cEponDeviceRMadlRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRMadlRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRMadlRemoteAddress.setDescription('The remote MAC address of the LLID. Writing can be done all the time.')
h3cEponDeviceRMadlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRegister", 1), ("registered", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRMadlType.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRMadlType.setDescription('A list of types for entries - LLIDs. Indicates and defines the state of registration. notRegister(1) marks a non registered LID, registered(2) marks a registered LLID. Writing can be done all the time.')
h3cEponDeviceRMadlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("register", 2), ("deregister", 3), ("reregister", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRMadlAction.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRMadlAction.setDescription('A list of actions for an entry - LLID. Indicates and defines the state of registration for the remote device. none(1) marks no action, register(2) marks to register an LLID, deregister(3) marks to deregister an LLID, reregister(4) marks reregistered LLID. Writing can be done all the time.')
h3cEponDeviceRMadlEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceRMadlEntryStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceRMadlEntryStatus.setDescription('The control that allows creation and deletion of entries. Once made active an entry MAY not be modified except to delete it.')
h3cEponDeviceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1), )
if mibBuilder.loadTexts: h3cEponDeviceStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTable.setDescription('This table defines the list of statistics counters of EPON devices. The attributes are relevant for an OLT and an ONU.')
h3cEponDeviceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponDeviceStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatEntry.setDescription('Table entries for Table of statistics counters of EPON devices.')
h3cEponDeviceStatTxFramesQueue0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue0.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue0.setDescription('A count of the number of times a -Queue-0- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-0-. The -Queue-0- marking matched the REPORT MPCP message Queue-0 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue1.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue1.setDescription('A count of the number of times a -Queue-1- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-1-. The -Queue-1- marking matched the REPORT MPCP message Queue-1 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue2.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue2.setDescription('A count of the number of times a -Queue-2- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-2-. The -Queue-2- marking matched the REPORT MPCP message Queue-2 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue3.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue3.setDescription('A count of the number of times a -Queue-3- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-3-. The -Queue-3- marking matched the REPORT MPCP message Queue-3 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue4.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue4.setDescription('A count of the number of times a -Queue-4- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-4-. The -Queue-4- marking matched the REPORT MPCP message Queue-4 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue5.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue5.setDescription('A count of the number of times a -Queue-5- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-5-. The -Queue-5- marking matched the REPORT MPCP message Queue-5 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue6.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue6.setDescription('A count of the number of times a -Queue-6- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-6-. The -Queue-6- marking matched the REPORT MPCP message Queue-6 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatTxFramesQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue7.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatTxFramesQueue7.setDescription('A count of the number of times a -Queue-7- frames transmission occurs. Increment the counter by one for each frame transmitted which is an output of -Queue-7-. The -Queue-7- marking matched the REPORT MPCP message Queue-7 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatRxFramesQueue0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue0.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue0.setDescription('A count of the number of times a -Queue-0- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-0-. The -Queue-0- marking matched the REPORT MPCP message Queue-0 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue1.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue1.setDescription('A count of the number of times a -Queue-1- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-1-. The -Queue-1- marking matched the REPORT MPCP message Queue-1 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue2.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue2.setDescription('A count of the number of times a -Queue-2- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-2-. The -Queue-2- marking matched the REPORT MPCP message Queue-2 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue3.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue3.setDescription('A count of the number of times a -Queue-3- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-3-. The -Queue-3- marking matched the REPORT MPCP message Queue-3 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue4.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue4.setDescription('A count of the number of times a -Queue-4- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-4-. The -Queue-4- marking matched the REPORT MPCP message Queue-4 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue5.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue5.setDescription('A count of the number of times a -Queue-5- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-5-. The -Queue-5- marking matched the REPORT MPCP message Queue-5 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue6.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue6.setDescription('A count of the number of times a -Queue-6- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-6-. The -Queue-6- marking matched the REPORT MPCP message Queue-6 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatRxFramesQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 16), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue7.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatRxFramesQueue7.setDescription('A count of the number of times a -Queue-7- frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each frame received for each LLID, which is an output of -Queue-7-. The -Queue-7- marking matched the REPORT MPCP message Queue-7 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and an OLT.')
h3cEponDeviceStatDroppedFramesQueue0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 17), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue0.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue0.setDescription('A count of the number of times a -Queue-0- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-0-. The -Queue-0- marking matched the REPORT MPCP message Queue-0 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 18), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue1.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue1.setDescription('A count of the number of times a -Queue-1- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-1-. The -Queue-1- marking matched the REPORT MPCP message Queue-1 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 19), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue2.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue2.setDescription('A count of the number of times a -Queue-2- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-2-. The -Queue-2- marking matched the REPORT MPCP message Queue-2 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 20), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue3.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue3.setDescription('A count of the number of times a -Queue-3- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-3-. The -Queue-3- marking matched the REPORT MPCP message Queue-3 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 21), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue4.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue4.setDescription('A count of the number of times a -Queue-4- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-4-. The -Queue-4- marking matched the REPORT MPCP message Queue-4 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 22), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue5.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue5.setDescription('A count of the number of times a -Queue-5- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-5-. The -Queue-5- marking matched the REPORT MPCP message Queue-5 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 23), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue6.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue6.setDescription('A count of the number of times a -Queue-6- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-6-. The -Queue-6- marking matched the REPORT MPCP message Queue-6 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceStatDroppedFramesQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 2, 1, 1, 24), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue7.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceStatDroppedFramesQueue7.setDescription('A count of the number of times a -Queue-7- frames drops occurs. Increment the counter by one for each frame dropped from -Queue-7-. The -Queue-7- marking matched the REPORT MPCP message Queue-7 field, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU.')
h3cEponDeviceEventObjectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: h3cEponDeviceEventObjectTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventObjectTable.setDescription('This table defines the Event Objects for EPON devices. The attributes are relevant for an OLT and an ONU.')
h3cEponDeviceEventObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponDeviceEventObjectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventObjectEntry.setDescription('Table entries for Table of Event objects for EPON devices.')
h3cEponDeviceSampleMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceSampleMinimum.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceSampleMinimum.setDescription("The minimum Frequency of events this system will accept. A system may use the larger values of this minimum to lessen the impact of constant sampling. For larger sampling intervals the system samples less often and suffers less overhead. Unless explicitly resource limited, a system's value for this object SHOULD be 1, allowing as small as a 1 second interval for ongoing trigger sampling. Writing of the value can be done all the time.")
h3cEponDeviceDyingGaspAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceDyingGaspAlarmState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceDyingGaspAlarmState.setDescription('A read-only variable, which defines the state of the Dying Gasp indication of the OAM alarm indications as described in the [802.3ah] clause 57. When true the device has a dying gasp alarm asserted. When false the dying gasp alarm is reset ')
h3cEponDeviceDyingGaspAlarmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceDyingGaspAlarmEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceDyingGaspAlarmEnabled.setDescription('A control to allow DyingGaspAlarm event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceCriticalEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceCriticalEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceCriticalEventState.setDescription('A read-only variable, which defines the state of the Critical Event indication of the OAM alarm indications as described in the [802.3ah] clause 57. When true the device has a Critical Event asserted. When false the Critical Event is reset.')
h3cEponDeviceCriticalEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceCriticalEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceCriticalEventEnabled.setDescription('A control to allow CriticalEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceLocalLinkFaultAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceLocalLinkFaultAlarmState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceLocalLinkFaultAlarmState.setDescription('A read-only variable, which defines the state of the Local Link Fault indication of the OAM alarm indications as described in the [802.3ah] clause 57. When true the device has a Local Link Fault alarm asserted. When false the Local Link Fault alarm is reset.')
h3cEponDeviceLocalLinkFaultAlarmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceLocalLinkFaultAlarmEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceLocalLinkFaultAlarmEnabled.setDescription('A control to allow LocalLinkFaultAlarm event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceTemperatureEventIndicationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceTemperatureEventIndicationState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceTemperatureEventIndicationState.setDescription('A read-only variable, which defines the state of the Temperature Event indication of an EPON device. When condition of box temperature is above the threshold defined the alarm is asserted. When the condition is below that threshold the alarm is de-asserted. When true the device has a Temperature Event Indication asserted. When false the Temperature Event Indication is reset.')
h3cEponDeviceTemperatureEventIndicationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceTemperatureEventIndicationEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceTemperatureEventIndicationEnabled.setDescription('A control to allow TemperatureEventIndication event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDevicePowerVoltageEventIndicationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDevicePowerVoltageEventIndicationState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDevicePowerVoltageEventIndicationState.setDescription('A read-only variable, which defines the state of the Power/Voltage Event Indication of an EPON device. When condition of box Power/voltage is above the threshold defined the alarm is asserted. When the condition is below that threshold the alarm is de-asserted. When true the device has a Power/Voltage Event Indication asserted. When false the Power/Voltage Event Indication is reset. ')
h3cEponDevicePowerVoltageEventIndicationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDevicePowerVoltageEventIndicationEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDevicePowerVoltageEventIndicationEnabled.setDescription('A control to allow PowerVoltageEventIndication event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceGlobalEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceGlobalEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGlobalEventState.setDescription('A read-only variable, which defines the state of the Global Event indication of an EPON device. When the indication of the event input occurs the event is asserted. When the input is removed that event is de-asserted. When true the device has a Global Event asserted. When false the Global Event Indication is reset.')
h3cEponDeviceGlobalEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceGlobalEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGlobalEventEnabled.setDescription('A control to allow GlobalEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceErroredSymbolPeriodEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceErroredSymbolPeriodEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredSymbolPeriodEventState.setDescription('A read-only variable, which defines the state of the Errored Symbol Period Event indication of the OAM alarm TLV indications as described in the [802.3ah] clause 57.5.3. When true the device has an Errored Symbol Period Event asserted. When false the Errored Symbol Period Event is reset.')
h3cEponDeviceErroredSymbolPeriodEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceErroredSymbolPeriodEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredSymbolPeriodEventEnabled.setDescription('A control to allow ErroredSymbolPeriodEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceErroredFrameEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameEventState.setDescription('A read-only variable, which defines the state of the Errored Frame Event indication of the OAM alarm TLV indications as described in the [802.3ah] clause 57.5.3. When true the device has an Errored Frame Event asserted. When false the Errored Frame Event is reset.')
h3cEponDeviceErroredFrameEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameEventEnabled.setDescription('A control to allow ErroredFrameEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceErroredFramePeriodEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceErroredFramePeriodEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredFramePeriodEventState.setDescription('A read-only variable, which defines the state of the Errored Frame Period Event indication of the OAM alarm TLV indications as described in the [802.3ah] clause 57.5.3. When true the device has an Errored Frame Period Event asserted. When false the Errored Frame Period Event is reset.')
h3cEponDeviceErroredFramePeriodEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceErroredFramePeriodEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredFramePeriodEventEnabled.setDescription('A control to allow ErroredFramePeriodEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceErroredFrameSecondsSummaryEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameSecondsSummaryEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameSecondsSummaryEventState.setDescription('A read-only variable, which defines the state of the Errored Frame Seconds Summary Event indication of the OAM alarm TLV indications as described in the [802.3ah] clause 57.5.3. When true the device has an Errored Frame Seconds Summary Event asserted. When false the Errored Frame Seconds Summary Event is reset.')
h3cEponDeviceErroredFrameSecondsSummaryEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameSecondsSummaryEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceErroredFrameSecondsSummaryEventEnabled.setDescription('A control to allow ErroredFrameSecondsSummaryEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceOrganizationSpecificEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceOrganizationSpecificEventState.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceOrganizationSpecificEventState.setDescription('A read-only variable, which defines the state of the Organization Specific Event indication of the OAM alarm TLV indications as described in the [802.3ah] clause 57.5.3. When true the device has an Organization Specific Event asserted. When false the Organization Specific Event is reset.')
h3cEponDeviceOrganizationSpecificEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceOrganizationSpecificEventEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceOrganizationSpecificEventEnabled.setDescription('A control to allow OrganizationSpecificEvent event to be used. When the value is true the event is sampled. When the value is false the event is not sampled. Writing can be done all the time.')
h3cEponDeviceEventControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("resetLog", 2), ("useDefaultReporting", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDeviceEventControl.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventControl.setDescription('Indicates and controls the resetting of the Event log. Setting this object to none(1) has no action resetLog(2) empties the event log. All data is deleted. Setting it to useDefaultReporting(3) returns all event priorities to their factory-default reporting. Reading this object always returns useDefaultReporting(3).')
h3cEponDeviceEventsLogTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2), )
if mibBuilder.loadTexts: h3cEponDeviceEventsLogTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogTable.setDescription('A table of objects provides a log of notification based on the event as pointed to by entries in those tables. The intent is a MAC level event log (set of events to when they happened). This attribute is relevant for an OLT and an ONU.')
h3cEponDeviceEventsLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1), ).setIndexNames((0, "H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogName"), (0, "H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogIndex"))
if mibBuilder.loadTexts: h3cEponDeviceEventsLogEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogEntry.setDescription('A group of Events. Applications create and delete entries using h3cEponDeviceEventsEntryStatus. When adding objects to a notification they are added in the lexical order of their index in this table.')
h3cEponDeviceEventsLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cEponDeviceEventsLogName.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogName.setDescription('A locally-unique, administratively assigned name for a group of Events.')
h3cEponDeviceEventsLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: h3cEponDeviceEventsLogIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogIndex.setDescription('An arbitrary integer for the purpose of identifying individual Events within a h3cEponDeviceEventsLogName group. Events within a group are placed in the notification in the numerical order of this index.')
h3cEponDeviceEventsLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 3), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceEventsLogID.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogID.setDescription('The object identifier of a MIB module object to add to a Notification that results from the event. Writing can be done all the time.')
h3cEponDeviceEventsLogFirstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceEventsLogFirstTime.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogFirstTime.setDescription('The time that an entry was created.')
h3cEponDeviceEventsLogLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceEventsLogLastTime.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogLastTime.setDescription('If multiple events are reported via the same entry, the time that the last event for this entry occurred, otherwise this should have the same value as h3cEponDeviceEventsLogFirstTime.')
h3cEponDeviceEventsLogCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceEventsLogCounts.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogCounts.setDescription('The number of consecutive event instances reported by this entry. This starts at 1 with the creation of this row and increments by 1 for each subsequent duplicate event.')
h3cEponDeviceEventsLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("h3cEponDeviceDyingGaspAlarmState", 1), ("h3cEponDeviceCriticalEventState", 2), ("h3cEponDeviceLocalLinkFaultAlarmState", 3), ("h3cEponDeviceTemperatureEventIndicationState", 4), ("h3cEponDevicePowerVoltageEventIndicationState", 5), ("h3cEponDeviceGlobalEventState", 6), ("h3cEponDeviceErroredSymbolPeriodEventState", 7), ("h3cEponDeviceErroredFrameEventState", 8), ("h3cEponDeviceErroredFramePeriodEventState", 9), ("h3cEponDeviceErroredFrameSecondsSummaryEventState", 10), ("h3cEponDeviceOrganizationSpecificEventState", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponDeviceEventsLogType.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogType.setDescription('A list of types for Events. Events are ordered according to their significance where 1 is the highest severity. h3cEponDeviceDyingGaspAlarmState(1) indicates a Dying Gasp Alarm State, h3cEponDeviceCriticalEventState(2) indicates a Critical Event State, h3cEponDeviceLocalLinkFaultAlarmState(3) indicates a Local Link Fault Alarm State, h3cEponDeviceTemperatureEventIndicationState(4) indicates a Temperature Event Indication State, h3cEponDevicePowerVoltageEventIndicationState(5) indicates a Power Voltage Event Indication State, h3cEponDeviceGlobalEventState(6) indicates a Global Event State, h3cEponDeviceErroredSymbolPeriodEventState(7) indicates an Errored Symbol Period Event State, h3cEponDeviceErroredFrameEventState(8) indicates an Errored Frame Event State, h3cEponDeviceErroredFramePeriodEventState(9) indicates an Errored Frame Period Event State, h3cEponDeviceErroredFrameSecondsSummaryEventState(10) indicates an Errored Frame Seconds Summary Event State, h3cEponDeviceOrganizationSpecificEventState(11) indicates an Organization Specific Event State. ')
h3cEponDeviceEventsLogEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponDeviceEventsLogEntryStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceEventsLogEntryStatus.setDescription('The control that allows creation and deletion of entries. Once made active an entry MAY not be modified except to delete it.')
h3cEponDeviceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 1))
h3cEponDeviceGroupControl = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 1, 1)).setObjects(("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectReset"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectModes"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectFecEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectOamMode"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectDeviceReadyMode"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectPowerDown"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectNumberOfLLIDs"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceObjectReportThreshold"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRemoteMACAddressLLIDControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cEponDeviceGroupControl = h3cEponDeviceGroupControl.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGroupControl.setDescription('A collection of objects of h3cEponDevice control definition.')
h3cEponDeviceGroupRMadLTable = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 1, 2)).setObjects(("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRMadlLLID"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRMadlLogID"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRMadlRemoteAddress"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRMadlType"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRMadlAction"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceRMadlEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cEponDeviceGroupRMadLTable = h3cEponDeviceGroupRMadLTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGroupRMadLTable.setDescription('A collection of objects of h3cEponDevice remote Mac address to LLID table.')
h3cEponDeviceGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 1, 3)).setObjects(("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue0"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue1"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue2"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue3"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue4"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue5"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue6"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatTxFramesQueue7"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue0"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue1"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue2"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue3"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue4"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue5"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue6"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatRxFramesQueue7"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue0"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue1"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue2"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue3"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue4"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue5"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue6"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceStatDroppedFramesQueue7"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cEponDeviceGroupStat = h3cEponDeviceGroupStat.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGroupStat.setDescription('A collection of objects of EPON device Statistics')
h3cEponDeviceGroupEvent = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 1, 4)).setObjects(("H3C-EPON-DEVICE-MIB", "h3cEponDeviceSampleMinimum"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceDyingGaspAlarmState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceDyingGaspAlarmEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceCriticalEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceCriticalEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceLocalLinkFaultAlarmState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceLocalLinkFaultAlarmEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceTemperatureEventIndicationState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceTemperatureEventIndicationEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDevicePowerVoltageEventIndicationState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDevicePowerVoltageEventIndicationEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGlobalEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGlobalEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredSymbolPeriodEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredSymbolPeriodEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredFrameEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredFrameEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredFramePeriodEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredFramePeriodEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredFrameSecondsSummaryEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceErroredFrameSecondsSummaryEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceOrganizationSpecificEventState"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceOrganizationSpecificEventEnabled"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cEponDeviceGroupEvent = h3cEponDeviceGroupEvent.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGroupEvent.setDescription('A collection of objects for EPON device Events')
h3cEponDeviceGroupEventLog = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 1, 5)).setObjects(("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogID"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogFirstTime"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogLastTime"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogCounts"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogType"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceEventsLogEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cEponDeviceGroupEventLog = h3cEponDeviceGroupEventLog.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceGroupEventLog.setDescription('A collection of objects for EPON device Events log')
h3cEponDeviceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 2))
h3cEponDeviceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 4, 1, 2, 2, 1)).setObjects(("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGroupControl"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGroupRMadLTable"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGroupStat"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGroupEvent"), ("H3C-EPON-DEVICE-MIB", "h3cEponDeviceGroupEventLog"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cEponDeviceCompliance = h3cEponDeviceCompliance.setStatus('current')
if mibBuilder.loadTexts: h3cEponDeviceCompliance.setDescription('The compliance statement for EPON Devices.')
mibBuilder.exportSymbols("H3C-EPON-DEVICE-MIB", h3cEponDeviceStatTxFramesQueue2=h3cEponDeviceStatTxFramesQueue2, h3cEponDeviceRMadlAction=h3cEponDeviceRMadlAction, h3cEponDeviceLocalLinkFaultAlarmState=h3cEponDeviceLocalLinkFaultAlarmState, h3cEponDeviceEventObjectEntry=h3cEponDeviceEventObjectEntry, h3cEponDeviceRMadlEntryStatus=h3cEponDeviceRMadlEntryStatus, h3cEponDeviceEventsLogEntry=h3cEponDeviceEventsLogEntry, h3cEponDeviceStatTxFramesQueue5=h3cEponDeviceStatTxFramesQueue5, h3cEponDeviceCriticalEventState=h3cEponDeviceCriticalEventState, h3cEponDeviceTemperatureEventIndicationState=h3cEponDeviceTemperatureEventIndicationState, h3cEponDeviceEventsLogFirstTime=h3cEponDeviceEventsLogFirstTime, h3cEponDeviceStatDroppedFramesQueue3=h3cEponDeviceStatDroppedFramesQueue3, h3cEponDeviceErroredFramePeriodEventEnabled=h3cEponDeviceErroredFramePeriodEventEnabled, h3cEponDeviceLocalLinkFaultAlarmEnabled=h3cEponDeviceLocalLinkFaultAlarmEnabled, h3cEponDeviceStatTxFramesQueue1=h3cEponDeviceStatTxFramesQueue1, h3cEponDeviceStatRxFramesQueue5=h3cEponDeviceStatRxFramesQueue5, h3cEponDeviceStatTxFramesQueue0=h3cEponDeviceStatTxFramesQueue0, h3cEponDeviceControlEntry=h3cEponDeviceControlEntry, h3cEponDeviceStatTxFramesQueue3=h3cEponDeviceStatTxFramesQueue3, h3cEponDeviceStatDroppedFramesQueue4=h3cEponDeviceStatDroppedFramesQueue4, h3cEponDevicePowerVoltageEventIndicationEnabled=h3cEponDevicePowerVoltageEventIndicationEnabled, h3cEponDeviceGroupControl=h3cEponDeviceGroupControl, h3cEponDeviceGroups=h3cEponDeviceGroups, h3cEponDeviceRemoteMACAddressLLIDControl=h3cEponDeviceRemoteMACAddressLLIDControl, h3cEponDeviceErroredFrameEventState=h3cEponDeviceErroredFrameEventState, h3cEponDeviceObjects=h3cEponDeviceObjects, h3cEponDeviceObjectModes=h3cEponDeviceObjectModes, h3cEponDeviceRMadlRemoteAddress=h3cEponDeviceRMadlRemoteAddress, h3cEponDeviceSampleMinimum=h3cEponDeviceSampleMinimum, h3cEponDeviceEventsLogID=h3cEponDeviceEventsLogID, h3cEponDeviceStatDroppedFramesQueue7=h3cEponDeviceStatDroppedFramesQueue7, h3cEponDeviceEventsLogTable=h3cEponDeviceEventsLogTable, h3cEponDeviceStatEntry=h3cEponDeviceStatEntry, h3cEponDeviceStatTxFramesQueue7=h3cEponDeviceStatTxFramesQueue7, h3cEponDeviceGroupStat=h3cEponDeviceGroupStat, h3cEponDeviceGroupEventLog=h3cEponDeviceGroupEventLog, h3cEponDeviceObjectReset=h3cEponDeviceObjectReset, h3cEponDeviceStatDroppedFramesQueue5=h3cEponDeviceStatDroppedFramesQueue5, h3cEponDeviceErroredSymbolPeriodEventEnabled=h3cEponDeviceErroredSymbolPeriodEventEnabled, h3cEponDeviceErroredFrameSecondsSummaryEventState=h3cEponDeviceErroredFrameSecondsSummaryEventState, h3cEponDeviceDyingGaspAlarmEnabled=h3cEponDeviceDyingGaspAlarmEnabled, h3cEponDeviceEventObjects=h3cEponDeviceEventObjects, h3cEponDeviceEventsLogEntryStatus=h3cEponDeviceEventsLogEntryStatus, h3cEponDeviceGroupEvent=h3cEponDeviceGroupEvent, h3cEponDeviceStatRxFramesQueue6=h3cEponDeviceStatRxFramesQueue6, h3cEponDeviceStatTxFramesQueue6=h3cEponDeviceStatTxFramesQueue6, h3cEponDeviceGlobalEventEnabled=h3cEponDeviceGlobalEventEnabled, h3cEponDeviceControlTable=h3cEponDeviceControlTable, PYSNMP_MODULE_ID=h3cEponDeviceMIB, h3cEponDeviceErroredFramePeriodEventState=h3cEponDeviceErroredFramePeriodEventState, h3cEponDeviceStatTable=h3cEponDeviceStatTable, h3cEponDeviceRemoteMACAddressLLIDTable=h3cEponDeviceRemoteMACAddressLLIDTable, h3cEponDeviceEventControl=h3cEponDeviceEventControl, h3cEponDeviceEventsLogType=h3cEponDeviceEventsLogType, h3cEponDeviceGlobalEventState=h3cEponDeviceGlobalEventState, h3cEponDeviceObjectNumberOfLLIDs=h3cEponDeviceObjectNumberOfLLIDs, h3cEponDeviceControlObjects=h3cEponDeviceControlObjects, h3cEponDeviceObjectFecEnabled=h3cEponDeviceObjectFecEnabled, h3cEponDeviceRMadlType=h3cEponDeviceRMadlType, h3cEponDeviceStatRxFramesQueue0=h3cEponDeviceStatRxFramesQueue0, h3cEponDeviceOrganizationSpecificEventEnabled=h3cEponDeviceOrganizationSpecificEventEnabled, h3cEponDeviceGroupRMadLTable=h3cEponDeviceGroupRMadLTable, h3cEponDeviceRemoteMACAddressLLIDName=h3cEponDeviceRemoteMACAddressLLIDName, h3cEponDeviceCompliance=h3cEponDeviceCompliance, h3cEponDeviceCriticalEventEnabled=h3cEponDeviceCriticalEventEnabled, h3cEponDeviceStatDroppedFramesQueue6=h3cEponDeviceStatDroppedFramesQueue6, h3cEponDeviceEventsLogName=h3cEponDeviceEventsLogName, h3cEponDeviceRMadlLogID=h3cEponDeviceRMadlLogID, h3cEponDeviceTemperatureEventIndicationEnabled=h3cEponDeviceTemperatureEventIndicationEnabled, h3cEponDeviceRemoteMACAddressLLIDEntry=h3cEponDeviceRemoteMACAddressLLIDEntry, h3cEponDeviceConformance=h3cEponDeviceConformance, h3cEponDeviceEventsLogIndex=h3cEponDeviceEventsLogIndex, h3cEponDeviceObjectMIB=h3cEponDeviceObjectMIB, h3cEponDeviceStatObjects=h3cEponDeviceStatObjects, h3cEponDeviceStatDroppedFramesQueue2=h3cEponDeviceStatDroppedFramesQueue2, h3cEponDeviceMIB=h3cEponDeviceMIB, h3cEponDeviceStatDroppedFramesQueue0=h3cEponDeviceStatDroppedFramesQueue0, h3cEponDeviceCompliances=h3cEponDeviceCompliances, h3cEponDeviceStatRxFramesQueue2=h3cEponDeviceStatRxFramesQueue2, h3cEponDeviceStatDroppedFramesQueue1=h3cEponDeviceStatDroppedFramesQueue1, h3cEponDeviceObjectOamMode=h3cEponDeviceObjectOamMode, h3cEponDeviceObjectPowerDown=h3cEponDeviceObjectPowerDown, h3cEponDeviceDyingGaspAlarmState=h3cEponDeviceDyingGaspAlarmState, h3cEponDeviceEventsLogLastTime=h3cEponDeviceEventsLogLastTime, h3cEponDeviceRMadlLLID=h3cEponDeviceRMadlLLID, h3cEponDeviceStatRxFramesQueue1=h3cEponDeviceStatRxFramesQueue1, h3cEponDeviceObjectDeviceReadyMode=h3cEponDeviceObjectDeviceReadyMode, h3cEponDeviceStatRxFramesQueue4=h3cEponDeviceStatRxFramesQueue4, h3cEponDeviceEventsLogCounts=h3cEponDeviceEventsLogCounts, h3cEponDeviceStatRxFramesQueue3=h3cEponDeviceStatRxFramesQueue3, h3cEponDeviceErroredFrameEventEnabled=h3cEponDeviceErroredFrameEventEnabled, h3cEponDeviceObjectReportThreshold=h3cEponDeviceObjectReportThreshold, h3cEponDeviceEventObjectTable=h3cEponDeviceEventObjectTable, h3cEponDeviceOrganizationSpecificEventState=h3cEponDeviceOrganizationSpecificEventState, h3cEponDeviceErroredSymbolPeriodEventState=h3cEponDeviceErroredSymbolPeriodEventState, h3cEponDevicePowerVoltageEventIndicationState=h3cEponDevicePowerVoltageEventIndicationState, h3cEponDeviceStatRxFramesQueue7=h3cEponDeviceStatRxFramesQueue7, h3cEponDeviceStatTxFramesQueue4=h3cEponDeviceStatTxFramesQueue4, h3cEponDeviceErroredFrameSecondsSummaryEventEnabled=h3cEponDeviceErroredFrameSecondsSummaryEventEnabled)
