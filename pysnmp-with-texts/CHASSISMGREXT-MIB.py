#
# PySNMP MIB module CHASSISMGREXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHASSISMGREXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
chassisMgrExt, = mibBuilder.importSymbols("APENT-MIB", "chassisMgrExt")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Gauge32, TimeTicks, ObjectIdentity, IpAddress, ModuleIdentity, MibIdentifier, Integer32, Unsigned32, Counter64, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "TimeTicks", "ObjectIdentity", "IpAddress", "ModuleIdentity", "MibIdentifier", "Integer32", "Unsigned32", "Counter64", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chassisMgrExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 34, 1))
if mibBuilder.loadTexts: chassisMgrExtMib.setLastUpdated('9707202000Z')
if mibBuilder.loadTexts: chassisMgrExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: chassisMgrExtMib.setContactInfo(' Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: chassisMgrExtMib.setDescription('This MIB module describes the ArrowPoint Communications enterprise MIB for the High Speed Serial Interface (HSSI) module.')
apChassisMgrExtChassisType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ws100", 0), ("ws800", 1), ("ws150", 2), ("ws50", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtChassisType.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtChassisType.setDescription('This object specifies the type of chassis.')
apChassisMgrExtChassisName = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtChassisName.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtChassisName.setDescription('This object specifies the name of the chassis.')
apChassisMgrExtChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtChassisSerialNumber.setDescription('This object specifies the serial number of the chassis.')
apChassisMgrExtNumberSlots = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberSlots.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtNumberSlots.setDescription('This object specifies the number of slots in the chassis.')
apChassisMgrExtNumberModules = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberModules.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtNumberModules.setDescription('This object specifies the number of modules in the chassis.')
apChassisMgrExtNumberPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtNumberPowerSupplies.setDescription('This object specifies the number of power supplies in the chassis.')
apChassisMgrExtNumberFans = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberFans.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtNumberFans.setDescription('This object specifies the number of fans in the chassis.')
apChassisMgrExtSoftwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSoftwareVersionNumber.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSoftwareVersionNumber.setDescription('This object specifies the version number of the running software in the chassis.')
apChassisMgrExtBootpState = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bootp-disabled", 0), ("bootp-enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtBootpState.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtBootpState.setDescription('This object specifies the state of the BOOTP services at chassis boot time.')
apChassisMgrExtMgmtPortIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtMgmtPortIpAddress.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtMgmtPortIpAddress.setDescription('This object specifies the Ip Address of the management port on the chassis.')
apChassisMgrExtBaseEthernetAddress = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtBaseEthernetAddress.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtBaseEthernetAddress.setDescription('This object specifies the base ethernet address the unit.')
apChassisMgrExtCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtCpuUtilization.setDescription('This object has been DEPRECATED. Use: apChassisMgrExtSubModuleCPUInstantaneous or apChassisMgrExtSubModuleCPUAverage')
apChassisMgrExtMajorHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtMajorHwVersion.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtMajorHwVersion.setDescription('This object specifies the major hardware version of the chassis.')
apChassisMgrExtMinorHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtMinorHwVersion.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtMinorHwVersion.setDescription('This object specifies the minor hardware version of the chassis.')
apChassisMgrExtModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16), )
if mibBuilder.loadTexts: apChassisMgrExtModuleTable.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleTable.setDescription('The Module Table for a given slot in the chassis.')
apChassisMgrExtModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1), ).setIndexNames((0, "CHASSISMGREXT-MIB", "apChassisMgrExtModuleSlotNumber"))
if mibBuilder.loadTexts: apChassisMgrExtModuleEntry.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleEntry.setDescription('An entry in the Chassis Module Table.')
apChassisMgrExtModuleSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleSlotNumber.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleSlotNumber.setDescription('This object specifies slot number of this module within the chassis.')
apChassisMgrExtModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("scm", 0), ("sfm", 1), ("scfm", 2), ("fem-t1", 3), ("dual-hssi", 4), ("fem", 5), ("fenic", 6), ("genic", 7), ("gem", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleType.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleType.setDescription('This object specifies module type within the chassis.')
apChassisMgrExtModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleName.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleName.setDescription('This object specifies module name within the chassis.')
apChassisMgrExtModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleSerialNumber.setDescription('This object specifies the serial number of the module within the chassis.')
apChassisMgrExtModuleOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powered-off", 0), ("powered-on", 1), ("primary", 2), ("backup", 3), ("bad", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleOpStatus.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleOpStatus.setDescription("This object specifies the module's operational status within the chassis.")
apChassisMgrExtModuleNumSubModules = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleNumSubModules.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleNumSubModules.setDescription('This object specifies the number of sub-modules on this module within the chassis.')
apChassisMgrExtModuleMajorHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleMajorHwVersion.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleMajorHwVersion.setDescription('This object specifies the hardware major version of the module within the chassis.')
apChassisMgrExtModuleMinorHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleMinorHwVersion.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtModuleMinorHwVersion.setDescription('This object specifies the minor hardware version of the module within the chassis.')
apChassisMgrExtSubModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17), )
if mibBuilder.loadTexts: apChassisMgrExtSubModuleTable.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleTable.setDescription('The table describes sub-module(s) associated with a module in a slot in the chassis.')
apChassisMgrExtSubModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1), ).setIndexNames((0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleSlot"), (0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleSubSlot"))
if mibBuilder.loadTexts: apChassisMgrExtSubModuleEntry.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleEntry.setDescription('An entry in the sub-module table.')
apChassisMgrExtSubModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSlot.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSlot.setDescription('This object specifies the slot number associated with this sub-module within the chassis.')
apChassisMgrExtSubModuleSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSubSlot.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSubSlot.setDescription('This object specifies sub-slot associated with this sub-module within the chassis.')
apChassisMgrExtSubModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("scm-submodule", 0), ("sfm-submodule", 1), ("scfm-submodule", 2), ("t1-submodule", 3), ("hssi-submodule", 4), ("epif-submodule", 5), ("v35-submodule", 6), ("xpif-submodule", 7), ("sfm2-submodule", 8), ("scfm2-submodule", 9), ("genic-2port-submodule", 10), ("genic-1port-submodule", 11), ("unknown-submodule", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleType.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleType.setDescription('This object specifies the type of sub-module.')
apChassisMgrExtSubModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleName.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleName.setDescription('This object specifies the name of the sub-module.')
apChassisMgrExtSubModuleOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("offline-ok", 0), ("offline-bad", 1), ("online", 2), ("bad", 3), ("going-online", 4), ("going-offline", 5), ("inserted", 6), ("post", 7), ("post-ok", 8), ("post-fail", 9), ("post-bad-comm", 10), ("any", 11), ("unknown-state", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleOpStatus.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleOpStatus.setDescription("This object specifies the sub-module's operational status within the chassis.")
apChassisMgrExtSubModuleSsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hifen-t1", 0), ("hifen-hssi", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSsCardType.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSsCardType.setDescription('This object specifies the type of Special Services card for this sub-module within the chassis.')
apChassisMgrExtSubModuleSsCardOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("offline-ok", 0), ("offline-bad", 1), ("online", 2), ("unknown-state", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSsCardOpStatus.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSsCardOpStatus.setDescription('This object specifies the operational status of the Special Services card for this sub-module within the chassis.')
apChassisMgrExtSubModulePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModulePortName.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModulePortName.setDescription('This object specifies the user visible port name.')
apChassisMgrExtSubModulePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModulePortNumber.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModulePortNumber.setDescription('This object specifies the external port number of this sub-slot associated with this sub-module within the chassis.')
apChassisMgrExtSubModuleSystemHeapFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSystemHeapFree.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSystemHeapFree.setDescription('This object identifes the amount of available system heap memory.')
apChassisMgrExtSubModuleSystemHeapChainDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSystemHeapChainDepth.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSystemHeapChainDepth.setDescription('This object specifies the chain depth of the system heap.')
apChassisMgrExtSubModuleInstalledMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleInstalledMemory.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleInstalledMemory.setDescription('This object specifies the amount of memory present on the submodule.')
apChassisMgrExtSubModuleCPUInstantaneous = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleCPUInstantaneous.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleCPUInstantaneous.setDescription('This object specifies the instantaneous CPU utilization')
apChassisMgrExtSubModuleCPUAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleCPUAverage.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleCPUAverage.setDescription('This object specifies the average CPU utilization')
apChassisMgrExtSubModuleBufferTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18), )
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferTable.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferTable.setDescription('The table describes buffers for sub-module(s) associated with a module in a slot in the chassis.')
apChassisMgrExtSubModuleBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1), ).setIndexNames((0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleBufferPool"), (0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleBufferSlot"), (0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleBufferSubSlot"))
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferEntry.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferEntry.setDescription('An entry in the sub-module buffer table.')
apChassisMgrExtSubModuleBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferPool.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferPool.setDescription('This object specifies buffer pool associated with this sub-module within the chassis.')
apChassisMgrExtSubModuleBufferSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSlot.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSlot.setDescription('This object specifies the slot number associated with this sub-module within the chassis.')
apChassisMgrExtSubModuleBufferSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSubSlot.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSubSlot.setDescription('This object specifies sub-slot associated with this sub-module within the chassis.')
apChassisMgrExtSubModuleBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSize.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSize.setDescription('This object specifies the buffer pool size.')
apChassisMgrExtSubModuleBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferCount.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferCount.setDescription('This object specifies the buffer pool count.')
apChassisMgrExtSubModuleBufferAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferAvailable.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferAvailable.setDescription('This object specifies the number of available buffers in the buffer pool.')
apChassisMgrExtSubModuleBufferFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferFailures.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferFailures.setDescription('This object specifies the number of buffer pool failures.')
apChassisMgrExtSubModuleBufferLowBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferLowBufferCount.setStatus('current')
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferLowBufferCount.setDescription('This object specifies the buffer low threshold count.')
mibBuilder.exportSymbols("CHASSISMGREXT-MIB", apChassisMgrExtSubModuleOpStatus=apChassisMgrExtSubModuleOpStatus, apChassisMgrExtBaseEthernetAddress=apChassisMgrExtBaseEthernetAddress, apChassisMgrExtSubModuleSystemHeapFree=apChassisMgrExtSubModuleSystemHeapFree, apChassisMgrExtSubModuleBufferEntry=apChassisMgrExtSubModuleBufferEntry, apChassisMgrExtModuleSerialNumber=apChassisMgrExtModuleSerialNumber, apChassisMgrExtMgmtPortIpAddress=apChassisMgrExtMgmtPortIpAddress, apChassisMgrExtModuleSlotNumber=apChassisMgrExtModuleSlotNumber, apChassisMgrExtSubModuleTable=apChassisMgrExtSubModuleTable, apChassisMgrExtBootpState=apChassisMgrExtBootpState, PYSNMP_MODULE_ID=chassisMgrExtMib, apChassisMgrExtModuleOpStatus=apChassisMgrExtModuleOpStatus, apChassisMgrExtSubModuleBufferTable=apChassisMgrExtSubModuleBufferTable, apChassisMgrExtChassisName=apChassisMgrExtChassisName, chassisMgrExtMib=chassisMgrExtMib, apChassisMgrExtSubModuleBufferFailures=apChassisMgrExtSubModuleBufferFailures, apChassisMgrExtModuleName=apChassisMgrExtModuleName, apChassisMgrExtSubModuleBufferSize=apChassisMgrExtSubModuleBufferSize, apChassisMgrExtSubModuleBufferLowBufferCount=apChassisMgrExtSubModuleBufferLowBufferCount, apChassisMgrExtModuleNumSubModules=apChassisMgrExtModuleNumSubModules, apChassisMgrExtNumberPowerSupplies=apChassisMgrExtNumberPowerSupplies, apChassisMgrExtSubModuleName=apChassisMgrExtSubModuleName, apChassisMgrExtSubModuleSlot=apChassisMgrExtSubModuleSlot, apChassisMgrExtNumberFans=apChassisMgrExtNumberFans, apChassisMgrExtSubModuleInstalledMemory=apChassisMgrExtSubModuleInstalledMemory, apChassisMgrExtSubModuleCPUInstantaneous=apChassisMgrExtSubModuleCPUInstantaneous, apChassisMgrExtSubModuleBufferSubSlot=apChassisMgrExtSubModuleBufferSubSlot, apChassisMgrExtNumberModules=apChassisMgrExtNumberModules, apChassisMgrExtSubModuleSystemHeapChainDepth=apChassisMgrExtSubModuleSystemHeapChainDepth, apChassisMgrExtSubModuleBufferPool=apChassisMgrExtSubModuleBufferPool, apChassisMgrExtSubModuleBufferAvailable=apChassisMgrExtSubModuleBufferAvailable, apChassisMgrExtMinorHwVersion=apChassisMgrExtMinorHwVersion, apChassisMgrExtSubModuleEntry=apChassisMgrExtSubModuleEntry, apChassisMgrExtSubModuleBufferSlot=apChassisMgrExtSubModuleBufferSlot, apChassisMgrExtSubModuleCPUAverage=apChassisMgrExtSubModuleCPUAverage, apChassisMgrExtSubModulePortNumber=apChassisMgrExtSubModulePortNumber, apChassisMgrExtNumberSlots=apChassisMgrExtNumberSlots, apChassisMgrExtModuleTable=apChassisMgrExtModuleTable, apChassisMgrExtSubModuleType=apChassisMgrExtSubModuleType, apChassisMgrExtSubModuleBufferCount=apChassisMgrExtSubModuleBufferCount, apChassisMgrExtModuleType=apChassisMgrExtModuleType, apChassisMgrExtCpuUtilization=apChassisMgrExtCpuUtilization, apChassisMgrExtMajorHwVersion=apChassisMgrExtMajorHwVersion, apChassisMgrExtSubModuleSubSlot=apChassisMgrExtSubModuleSubSlot, apChassisMgrExtChassisSerialNumber=apChassisMgrExtChassisSerialNumber, apChassisMgrExtModuleMinorHwVersion=apChassisMgrExtModuleMinorHwVersion, apChassisMgrExtSoftwareVersionNumber=apChassisMgrExtSoftwareVersionNumber, apChassisMgrExtSubModuleSsCardType=apChassisMgrExtSubModuleSsCardType, apChassisMgrExtModuleMajorHwVersion=apChassisMgrExtModuleMajorHwVersion, apChassisMgrExtModuleEntry=apChassisMgrExtModuleEntry, apChassisMgrExtSubModuleSsCardOpStatus=apChassisMgrExtSubModuleSsCardOpStatus, apChassisMgrExtChassisType=apChassisMgrExtChassisType, apChassisMgrExtSubModulePortName=apChassisMgrExtSubModulePortName)
