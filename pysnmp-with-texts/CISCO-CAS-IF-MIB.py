#
# PySNMP MIB module CISCO-CAS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CAS-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CountryCode, = mibBuilder.importSymbols("CISCO-TC", "CountryCode")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, TimeTicks, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, Bits, Counter32, Unsigned32, iso, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Bits", "Counter32", "Unsigned32", "iso", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoCasIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 85))
ciscoCasIfMIB.setRevisions(('2004-10-13 00:00', '2004-09-30 00:00', '2004-01-15 00:00', '2003-04-18 00:00', '2002-10-02 00:00', '1999-01-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCasIfMIB.setRevisionsDescriptions(('Extend CcasGrpEMTmEntry to include ccasGrpEMTmPttXmt ccasGrpEMTmPttRcv ccasGrpEMTmDelayVoice Extend CcasGrpEMCfgEntry to include ccasGrpEMCfgAutoGainControl add ccasEMGroupRev2 add ccasIfMIBComplianceRev3 ', 'Extend ccasGrpCfgServiceType to include xgcp (11)', 'Deprecated ccasEMGroup Add ccasEMGroupRev1 Extend ccasGrpCfgType to include emLmr (27) Extend CcasGrpEMCfgEntry to include ccasGrpEMCfgLmrMCap & ccasGrpEMCfgLmrECap Extend CcasGrpEMTmEntry to include ccasGrpEMTmVoiceHangover & ccasGrpEMTmLmrTeardown ', 'Extend ccasGrpCfgServiceType to include h248 (9) and ds0xconn (10)', 'Extend ccasGrpCfgServiceType to include trunkingService(8).', 'Add ccasXgcpCfgTable to configure continuity test (COT) tone frequencies. Add object ccasGrpCfgServiceType for displaying service type. Extend ccsaGrpCfgType to include fgdOS, fgdEANA and nullSignaling',))
if mibBuilder.loadTexts: ciscoCasIfMIB.setLastUpdated('200410130000Z')
if mibBuilder.loadTexts: ciscoCasIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCasIfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoCasIfMIB.setDescription('Channel Associated Signal Interface MIB module. This MIB manages the generic CAS (Channel Associated Signal)or DS0 clear channel Interfaces in the router. ')
ccasIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1))
ccasDS1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1))
ccasGrpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2))
ccasChannelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3))
ccasVoiceCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4))
ccasXgcpCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5))
ccasGrpGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1))
ccasGrpEMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2))
ccasGrpLineObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3))
ccasGrpStaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4))
ccasGrpABCDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5))
ccasDs1IfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1, 1), )
if mibBuilder.loadTexts: ccasDs1IfCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasDs1IfCfgTable.setDescription('The CAS/DS0 General Configuration Table for T1/E1. It contains the CAS/DS0 related standard configuration information for T1/E1. ')
ccasDs1IfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ccasDs1IfCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasDs1IfCfgEntry.setDescription('An entry in the configuration table for each T1/E1. The entry is created when a T1/E1 hardware is detected. ')
ccasDs1IfCfgDs0ChannelsConfigurable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasDs1IfCfgDs0ChannelsConfigurable.setStatus('current')
if mibBuilder.loadTexts: ccasDs1IfCfgDs0ChannelsConfigurable.setDescription("This object contains the bit map of the available DS0 channel in the DS1. The MSB (most significant bit) is DS0 channel number 1. The missing bytes is default to a value of 0. A 1-bit indicates the channel is available for configuration and a 0-bit indicates it isn't. The length of this object is either 3 octets (for T1) or 4 octets (for E1). The most significant bit is transmitted first. ")
ccasGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1), )
if mibBuilder.loadTexts: ccasGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgTable.setDescription('The CAS/DS0 Group Standard Configuration Table. It contains the general configuration information for the CAS/DS0 group of T1/E1 interfaces. ')
ccasGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgEntry.setDescription('A CAS/DS0 group entry. Each entry consists of the CAS group type and the CAS/DS0 group associated DS0 channels in a T1/E1. The value of ccasGrpCfgDs0Channels must be specified with at least one available DS0 channel in the CAS group associated T1/E1 before a new row in this table can become active(1). The entry of this table can only be created if the CAS/DS0 group associated DS1 ifEntry already exists. ')
ccasGrpCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: ccasGrpCfgIndex.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgIndex.setDescription('An arbitrary index that uniquely identifies a DS0 group in a T1/E1. ')
ccasGrpCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("emWinkStart", 1), ("emWinkStartFgd", 2), ("emImmedStart", 3), ("emDelayDial", 4), ("fxsLoopStart", 5), ("fxsGroundStart", 6), ("sasLoopStart", 7), ("sasGroundStart", 8), ("r2Analog", 9), ("r2Digital", 10), ("r2Pulse", 11), ("p7", 12), ("fxoLoopStart", 13), ("fxoGroundStart", 14), ("fgdOS", 15), ("nullSignaling", 16), ("r1Itu", 17), ("r1Modified", 18), ("r1Turkey", 19), ("fgdEANA", 20), ("emMelImmedStart", 21), ("emMelWink", 22), ("emMelDelayDial", 23), ("fxsMelcas", 24), ("fxoMelcas", 25), ("extsig", 26), ("emLmr", 27))).clone('emWinkStart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgType.setReference('EIA/TIA-464B, chapter 6.2.1.1 Signaling Interface Types. ITU-T Q411 - Specifications of signalling system R2 line signalling, analogue version. ITU-T Q421 - Specifications of signalling system R2 line signalling, digital version. ITU-T R2 Supplement 7 - Specifications of signalling system R2 line signalling, pulsed version. Bellcore, TR-NPL-000258 - Feature Group D section 3.4 for Exchange Access North American section 3.6 for Operator Services Signaling ')
if mibBuilder.loadTexts: ccasGrpCfgType.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgType.setDescription('The Signaling type of the DS0 group. emWinkStart - CAS E&M Wink Start. emWinkStartFgd - CAS E&M Wink Start with Feature group D. emImmedStart - CAS E&M Immediate Start. emDelayDial - CAS E&M Delay Dial. fxsLoopStart - CAS FXS Loop Start. fxsGroundStart - CAS FXS Ground Start. sasLoopStart - CAS SAS Loop Start. sasGroundStart - CAS SAS Ground Start. r2Analog - R2 ITU Q411. r2Digital - R2 ITU Q421. r2Pulse - R2 ITU Supplement 7. p7 - P7 switch. fgdOS - Bellcore Feature Group D : Operator Services Signaling nullSignaling - 64k clear channel r1Itu - R1 ITU. r1Modified - R1 Modified. r1Turkey - R1 Turkey. fgdEANA - FGD Exchange Access North American. emMelImmedStart - CAS E&M Melcas Immediate Start emMelWink - CAS E&M Melcas Wink Start emMelDelayDial - CAS E&M Melcas Delay Dial fxsMelcas - CAS FXS Melcas fxoMelcas - CAS FXO Melcas extsig - External Signal emLmr - CAS E&M Land Mobil Radio(LMR) interface ')
ccasGrpCfgDs0Channels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgDs0Channels.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgDs0Channels.setDescription("This object contains the bit map of the selected DS0 channels to be added into this group. The MSB (most significant bit) is DS0 channel number 1. For T1, only higher 24 bits are used to specify the the CAS channels for the CAS group. A 1-bit indicates the channel to be added into group and a 0-bit indicates it isn't. ")
ccasGrpCfgServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("casServSw56", 2), ("casServModem", 3), ("casServAuto", 4), ("sgcp", 5), ("mgcp", 6), ("other", 7), ("trunkingService", 8), ("h248", 9), ("ds0xconn", 10), ("xgcp", 11))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgServiceType.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgServiceType.setDescription('Specify the Service type of the CAS/DS0 group. none - no service type casServSw56 - sw56 service for CAS casServModme - modem service for CAS casServAuto - auto service for CAS sgcp - Simple Gateway Control Protocol (SGCP) service. Used when DS0 is configured for null signaling. mgcp - Media Gateway Control Protocol (MGCP) service. Used when DS0 is configured for null signaling. other - none of the above and the below. trunkingService - This DS0 group is handled by trunking service application. h248 - ITU H.248 Media Gateway Control service. Used when DS0 is configured for null signaling. ds0xconn - Used for DS0 cross connection. xgcp - Media Gateway Control Protocol (MGCP) extension service including TGCP (Trunking Gateway Control Protocol) profiles feature. Used when DS0 is configured for null signaling. ')
ccasGrpCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccasGrpCfgRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The corresponding instance of ccasGrpCfgType can not be modified while this object has the value 'active'. ")
ccasGrpEMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ccasGrpEMCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgTable.setDescription('The CAS Group E&M Standard Configuration Table. It contains the CAS E&M group standard configuration information of T1/E1. ')
ccasGrpEMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpEMCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgEntry.setDescription("An entry in the configuration table for each CAS E&M Group in the T1/E1. The entry is created when the ccasGrpCfgType is configured as 'em' on a T1/E1 via configuration command. The entry is deleted when the CAS Group is de-configured from T1/E1. ")
ccasGrpEMCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2), ("mf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgDialType.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgDialType.setDescription('Specify the addressing type of the CAS group. dtmf - Dual Tone Multi-Frequency (DTMF) digit. pulse - dial pulse. mf - Multi-Frequency (MF) digit. The default value of this object is dtmf(1). ')
ccasGrpEMCfgDnisAni = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("incomingDnis", 0), ("incomingAni", 1), ("outgoingDnis", 2), ("outgoingAni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgDnisAni.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgDnisAni.setDescription("Specify the type of Destination Number Identification Service (DNIS) and Automatic Number Identification (ANI) support. MF tone supports both ANI and DNIS services. The DTMF tone only supports both incoming and outgoing DNIS. incomingDnis - support incoming DNIS feature. incomingAni - support incoming ANI feature. outgoingDnis - support outgoing DNIS feature. outgoingAni - support outgoing ANI feature. The default value of this object is '00'H. ")
ccasGrpEMCfgLmrMCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inact", 1), ("audio", 2), ("dial", 3))).clone('inact')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgLmrMCap.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgLmrMCap.setDescription('The M lead behavior of E&M LMR interface. inact - The m-lead status should be ignored. audio - The m-lead status is used to control generating voice packet. dial - The first m-lead off to on status indicates call setup request. The following m-lead status change during the call should be ignored. ')
ccasGrpEMCfgLmrECap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("seize", 4), ("voice", 5), ("inactive", 6))).clone('seize')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgLmrECap.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgLmrECap.setDescription('The E lead behavior of E&M LMR interface. seize - The e-lead used as seize signal. voice - The e-lead status is used to indicate voice packet received or not. inactive -- e-lead is inactive. ')
ccasGrpEMCfgAutoGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgAutoGainControl.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMCfgAutoGainControl.setDescription('This object is used to enabling or disabling automatic gain control on this interface. AGC allows dsp to adjust the input voice volume and avoid rapid voice volume change. ')
ccasGrpEMTmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2), )
if mibBuilder.loadTexts: ccasGrpEMTmTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmTable.setDescription('The E&M interface Timing Parameters table. It contains the configuration of the various E&M signaling protocol timing parameters. ')
ccasGrpEMTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1), )
ccasGrpEMCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasGrpEMTmEntry"))
ccasGrpEMTmEntry.setIndexNames(*ccasGrpEMCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasGrpEMTmEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmEntry.setDescription('An entry in the E&M Timing Parameters Table for each E&M interface.')
ccasGrpEMTmClearWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmClearWaitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmClearWaitDuration.setDescription('Time of Inactive incoming seizure signal to declare call cleared. This object is relevant to the interfaces in the CAS group if the ccasGrpCfgType object is emWinkStart(1) or emWinkStartFgd(2). The default value of this object is 400 milliseconds.')
ccasGrpEMTmMaxWinkWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMaxWinkWaitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmMaxWinkWaitDuration.setDescription('Maximum wink wait duration for sending out wink start signaling. This object is relevant to the interfaces in the CAS group if the ccasGrpCfgType object is emWinkStart(1) or emWinkStartFgd(2). The default value of this object is 200 milliseconds.')
ccasGrpEMTmMaxWinkDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMaxWinkDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmMaxWinkDuration.setDescription('Maximum wink duration for sending out wink start signaling. This object is relevant to the interfaces in the CAS group if the ccasGrpCfgType object is emWinkStart(1) or emWinkStartFgd(2). The default value of this object is 200 milliseconds.')
ccasGrpEMTmDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmDelayStart.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmDelayStart.setDescription('Timing of generation of outgoing delayed start signal from detection of incoming seizure. This object is relevant to the interfaces of the CAS group if the ccasGrpCfgType object is emDelayDial(4). The default value of this object is 300 milliseconds.')
ccasGrpEMTmMaxDelayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMaxDelayDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmMaxDelayDuration.setDescription('Maximum delay signal duration for sending out delay dial signaling. This object is relevant to the interfaces in the CAS group if the ccasGrpCfgType object is emDelayDial(4). The default value of this object is 2000 milliseconds.')
ccasGrpEMTmMinDelayPulseWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(140, 5000), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMinDelayPulseWidth.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmMinDelayPulseWidth.setDescription('Minimum delay-dial pulse duration for incoming call. If the value of this object is 0, then no delay-dial is sent to the far end for the incoming call. This object is relevant to the interfaces in the CAS group if the ccasGrpCfgType object is emDelayDial(4). The default value of this object is 140 milliseconds.')
ccasGrpEMTmDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmDigitDuration.setDescription('Outgoing DTMF/MF digit duration in milliseconds. This object is not relevant to the addressing timing of the interfaces in the CAS group if ccasGrpCfgDialType is dtmf or R2 tone. The default value of this object is 100 milliseconds. ')
ccasGrpEMTmInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmInterDigitDuration.setDescription('Outgoing DTMF/MF inter-digit duration in milliseconds. This object is not relevant to the addressing timing of the interfaces in the CAS group if ccasGrpCfgDialType is dtmf or R2 tone. The default value of this object is 100 milliseconds. ')
ccasGrpEMTmPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPulseRate.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmPulseRate.setDescription('Outgoing Pulse dialing rate in pulses per second (pps). This object is relevant to the addressing timing of the interfaces in the CAS group only if ccasGrpCfgDialType is pulse. The default value of this object is 10 pps. ')
ccasGrpEMTmPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPulseInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmPulseInterDigitDuration.setDescription('Outgoing Pulse dialing inter-digit timing in milliseconds. This object is relevant to the addressing timing of the interfaces in the CAS group only if ccasGrpCfgDialType is pulse. The default value of this object is 500 milliseconds. ')
ccasGrpEMTmVoiceHangover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmVoiceHangover.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmVoiceHangover.setDescription('The hangover time used to determine there is no more voice packet arrived. The default value of this object is 250 milliseconds. ')
ccasGrpEMTmLmrTeardown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(5, 60000), )).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmLmrTeardown.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmLmrTeardown.setDescription("LMR port tear down timeout. This object is relevant to the waiting time of teardown call on LMR port. If the value of this object is '-1', then the timeout is disable. ")
ccasGrpEMTmPttXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPttXmt.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmPttXmt.setDescription('This object signifies LMR port maximum transmit time. This object is relevant to how long LMR port can continue transmit voice packet without pause. ')
ccasGrpEMTmPttRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPttRcv.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmPttRcv.setDescription('This object signifies LMR port maximum receive time. This object is relevant to how long LMR port can continue receive voice packet without pause. ')
ccasGrpEMTmDelayVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasGrpEMTmDelayVoice.setStatus('current')
if mibBuilder.loadTexts: ccasGrpEMTmDelayVoice.setDescription('This object is relevant to how long LMR will delay sending the voice packet to the LMR port. ')
ccasGrpLineCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1), )
if mibBuilder.loadTexts: ccasGrpLineCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineCfgTable.setDescription('The CAS Group FXS/SAS Standard Configuration Table. It contains the CAS FXS/SAS group standard configuration information of T1/E1. ')
ccasGrpLineCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpLineCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineCfgEntry.setDescription("An entry in the configuration table for each CAS FXS/SAS Group in the T1/E1. The entry is created when the ccasGrpCfgType is configured as 'fxs' or 'sas' on a T1/E1 via configuration command. The entry is deleted when the CAS Group is de-configured from T1/E1. ")
ccasGrpLineCfgNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('rings').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineCfgNumberRings.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineCfgNumberRings.setDescription("The number of rings detected before closing loop. If the value of this object is 0, then the managed system answers immediately after the interface detects a incoming seizure if the ccasGrpCfgType is 'fxsGroundStart' or 'sasGroundStart'. The default value of this object is 1 ring. ")
ccasGrpLineCfgSupDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineCfgSupDisconnect.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineCfgSupDisconnect.setDescription(" Specifies whether a supervisory disconnect signal will be presented to the interface when the connected party at the interface hangs up. this object is only relevant to the ccasGrpCfgType is fxsLoopStart or sasLoopStart. The default value of this object is 'true'. ")
ccasGrpLineCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineCfgDialType.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineCfgDialType.setDescription('Specify the addressing type of the CAS group. dtmf - Dual Tone Multi-Frequency (DTMF) digit. pulse - dial pulse. The default value of this object is dtmf(1). ')
ccasGrpLineTmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2), )
if mibBuilder.loadTexts: ccasGrpLineTmTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineTmTable.setDescription('The FXS/SAS interface Timing Parameters table. It contains the configuration of the various FXS/SAS signaling protocol timing parameters. ')
ccasGrpLineTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1), )
ccasGrpLineCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasGrpLineTmEntry"))
ccasGrpLineTmEntry.setIndexNames(*ccasGrpLineCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasGrpLineTmEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineTmEntry.setDescription('An entry in the FXS/SAS Timing Parameters Table for each FXS/SAS interface.')
ccasGrpLineTmDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineTmDigitDuration.setDescription('Outgoing DTMF digit duration in milliseconds. This object is not relevant to the addressing timing of the interfaces in the CAS group if ccasGrpLineCfgDialType is dtmf. The default value of this object is 100 milliseconds. ')
ccasGrpLineTmInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineTmInterDigitDuration.setDescription('Outgoing DTMF inter-digit duration in milliseconds. This object is not relevant to the addressing timing of the interfaces in the CAS group if ccasGrpLineCfgDialType is dtmf. The default value of this object is 100 milliseconds. ')
ccasGrpLineTmPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmPulseRate.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineTmPulseRate.setDescription('Outgoing Pulse dialing rate in pulses per second (pps). This object is relevant to the addressing timing of the interfaces in the CAS group only if ccasGrpStaCfgDialType is pulse. The default value of this object is 10 pps. ')
ccasGrpLineTmPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmPulseInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpLineTmPulseInterDigitDuration.setDescription('Outgoing Pulse dialing inter-digit timing in milliseconds. This object is relevant to the addressing timing of the interfaces in the CAS group only if ccasGrpStaCfgDialType is pulse. The default value of this object is 500 milliseconds. ')
ccasGrpStaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1), )
if mibBuilder.loadTexts: ccasGrpStaCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaCfgTable.setDescription('The FXO/SAO standard configuration table. It contains FXO/SAO configuration parameters, one entry per FXO/SAO interface. The configuration information of this table is set by its default setting when the CAS group is created by the configuration commands. ')
ccasGrpStaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpStaCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaCfgEntry.setDescription("An entry in the standard configuration table for each FXO/SAO Group. The entry is created when the ccasGrpCfgType is configured as 'fxo' or 'sao' on a T1/E1 via configuration command. The entry is deleted when the CAS Group is de-configured from T1/E1. ")
ccasGrpStaCfgNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('rings').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaCfgNumberRings.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaCfgNumberRings.setDescription('The number of rings sent before sending reorder to the originator and releasing resources. If the value of this object is 0, then sending reorder to the originator is disabled. The default value of this object is 20 rings. ')
ccasGrpStaCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaCfgDialType.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaCfgDialType.setDescription('Specify the addressing type of the CAS group. dtmf - Dual Tone Multi-Frequency (DTMF) digit. pulse - dial pulse. The default value of this object is dtmf(1). ')
ccasGrpStaTmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2), )
if mibBuilder.loadTexts: ccasGrpStaTmTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaTmTable.setDescription('The FXO/SAO interface Timing Parameters table. It contains the configuration of the various FXO/SAO signaling protocol timing parameters. ')
ccasGrpStaTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1), )
ccasGrpStaCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasGrpStaTmEntry"))
ccasGrpStaTmEntry.setIndexNames(*ccasGrpStaCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasGrpStaTmEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaTmEntry.setDescription('An entry in the FXO/SAO Timing Parameters Table for each FXO/SAO interface.')
ccasGrpStaTmDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaTmDigitDuration.setDescription('Outgoing DTMF digit duration in milliseconds. This object is not relevant to the addressing timing of the interfaces in the CAS group if ccasGrpStaCfgDialType is dtmf. The default value of this object is 100 milliseconds. ')
ccasGrpStaTmInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaTmInterDigitDuration.setDescription('Outgoing DTMF inter-digit duration in milliseconds. This object is not relevant to the addressing timing of the interfaces in the CAS group if ccasGrpStaCfgDialType is dtmf. The default value of this object is 100 milliseconds. ')
ccasGrpStaTmPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmPulseRate.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaTmPulseRate.setDescription('Outgoing Pulse dialing rate in pulses per second (pps). This object is relevant to the addressing timing of the interfaces in the CAS group only if ccasGrpStaCfgDialType is pulse. The default value of this object is 10 pps. ')
ccasGrpStaTmPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmPulseInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: ccasGrpStaTmPulseInterDigitDuration.setDescription('Outgoing Pulse dialing inter-digit timing in milliseconds. This object is relevant to the addressing timing of the interfaces in the CAS group only if ccasGrpStaCfgDialType is pulse. The default value of this object is 500 milliseconds. ')
ccasGrpABCDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1), )
if mibBuilder.loadTexts: ccasGrpABCDCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasGrpABCDCfgTable.setDescription('The CAS group custom ABCD bits configuration table for E1. It contains A/B/C/D bits handling objects, one entry per CAS group on an E1 interface. ')
ccasGrpABCDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpABCDCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasGrpABCDCfgEntry.setDescription('An entry in the custom ABCD configuration table for each CAS Group on an E1 interface. The entry is created when a CAS group is configured on a E1. The entry is deleted when the CAS Group is de-configured from E1. ')
ccasGrpABCDCfgInvertBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1, 1, 1), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpABCDCfgInvertBits.setStatus('current')
if mibBuilder.loadTexts: ccasGrpABCDCfgInvertBits.setDescription("Specify the A/B/C/D bit mask to invert the A/B/C/D bits value before the A/B/C/D bits are sent or after the A/B/C/D bits are received. 1-bit - enable bit inversion. 0-bit - disable bit inversion. The default value of this object is '00'H. ")
ccasGrpABCDCfgUnusedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1, 1, 2), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpABCDCfgUnusedBits.setStatus('current')
if mibBuilder.loadTexts: ccasGrpABCDCfgUnusedBits.setDescription("Specify the Unused A/B/C/D bit values to transmit. If any A/B/C/D bit is unused, the bit values in this object will be used to transmit for the unused A/B/C/D bits. The default value of this object is '00'H ")
ccasChannelCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1), )
if mibBuilder.loadTexts: ccasChannelCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasChannelCfgTable.setDescription('The CAS channel Standard Configuration Table. It contains the standard configuration information of CAS channel of T1/E1. ')
ccasChannelCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ccasChannelCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasChannelCfgEntry.setDescription('An entry in the configuration table for each CAS channel. The entry is created when a CAS channel is configured on a T1/E1 via configuration command. The entry is deleted when the CAS channel is de-configured from T1/E1. ')
ccasChannelCfgDS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelCfgDS1IfIndex.setStatus('current')
if mibBuilder.loadTexts: ccasChannelCfgDS1IfIndex.setDescription('the ifIndex of this CAS channel associated T1/E1. ')
ccasChannelCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccasChannelCfgGroup.setDescription('The CAS channel associated CAS group number. ')
ccasChannelCfgTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelCfgTimeSlot.setStatus('current')
if mibBuilder.loadTexts: ccasChannelCfgTimeSlot.setDescription('The CAS channel associated T1/E1 timeslot.')
ccasChannelCfgBusyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasChannelCfgBusyOut.setStatus('current')
if mibBuilder.loadTexts: ccasChannelCfgBusyOut.setDescription("The CAS channel busyout configuration. true - the CAS channel is busied out. false - the CAS is normal. The default value for this object is 'false'. ")
ccasChannelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2), )
if mibBuilder.loadTexts: ccasChannelStatusTable.setStatus('current')
if mibBuilder.loadTexts: ccasChannelStatusTable.setDescription('The CAS channel Status Table. It contains general information about the status of CAS channel. ')
ccasChannelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1), )
ccasChannelCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasChannelStatusEntry"))
ccasChannelStatusEntry.setIndexNames(*ccasChannelCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasChannelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ccasChannelStatusEntry.setDescription('An entry in the status table for each CAS channel. ')
ccasChannelStatusRecvSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 1), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusRecvSignalBits.setReference('EIA/TIA-464B, chapter 6.2 Digital Signaling and Supervision ')
if mibBuilder.loadTexts: ccasChannelStatusRecvSignalBits.setStatus('current')
if mibBuilder.loadTexts: ccasChannelStatusRecvSignalBits.setDescription('The receive ABCD signaling bits for the CAS channel. aBit - the signaling bit in the 6th frame bBit - the signaling bit in the 12th frame cBit - the signaling bit in the 18th frame dBit - the signaling bit in the 24th frame the cBit and dBit are only valid for E1 or T1 interface is operating in extended superframe (ESF) mode. ')
ccasChannelStatusBusyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusBusyOut.setStatus('current')
if mibBuilder.loadTexts: ccasChannelStatusBusyOut.setDescription('The CAS channel busyout state. true - the CAS channel is busied out. false - the CAS is normal. ')
ccasChannelStatusInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("data56", 3), ("audio31", 4), ("audio7", 5), ("video", 6), ("fax", 7), ("modem", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusInfoType.setReference('Q.931 [8], chapter 4.5.5, octet 3 of bearer capability information element, combined with the User Rate (as defined in octets 5 and 5a to 5d), if rate adoption is being used.')
if mibBuilder.loadTexts: ccasChannelStatusInfoType.setStatus('current')
if mibBuilder.loadTexts: ccasChannelStatusInfoType.setDescription("The Information Transfer Capability for the current or last call. unknown - If since system startup there has been no call on this interface, this object has a value of unknown(1). speech - refers to a non-data connection data56 - 56k data. audio31 - audio 3.1 kHz; refers to data mode connections audio7 - audio 7 kHz; refer to data mode connections; 'Unrestricted digital information with tones/ announcements'. video - as defined in Q.931 fax - Facsimile modem - V.3x modem ")
ccasChannelStatusXmitSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 4), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusXmitSignalBits.setReference('EIA/TIA-464B, chapter 6.2 Digital Signaling and Supervision ')
if mibBuilder.loadTexts: ccasChannelStatusXmitSignalBits.setStatus('current')
if mibBuilder.loadTexts: ccasChannelStatusXmitSignalBits.setDescription('The transmit ABCD signaling bits for the CAS channel. aBit - the signaling bit in the 6th frame bBit - the signaling bit in the 12th frame cBit - the signaling bit in the 18th frame dBit - the signaling bit in the 24th frame the cBit and dBit are only valid for E1 or T1 interface is operating in extended superframe (ESF) mode. ')
ccasVoiceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1), )
if mibBuilder.loadTexts: ccasVoiceCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgTable.setDescription('The voice specific configuration Table. It contains information about the voice related configuration parameters for a CAS group. ')
ccasVoiceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasVoiceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgEntry.setDescription('An entry in the voice specific configuration table for each CAS/DS0 group of a DS1. The entry is created if the associated CAS/DS0 group is created and the voice hardware is detected to support the voice capability for the CAS/DS0 group in the managed system. The entry is deleted when its associated CAS/DS0 group is deleted. ')
ccasVoiceCfgNoiseRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgNoiseRegEnable.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgNoiseRegEnable.setDescription("The object indicates whether or not the background noise should be played to fill silence gaps if VAD is activated. The default value of this object is 'true'. ")
ccasVoiceCfgNonLinearProcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgNonLinearProcEnable.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgNonLinearProcEnable.setDescription("The object indicates whether or not the Nonlinear Processing is enabled for the interface. The default value of this object is 'true'. ")
ccasVoiceCfgMusicOnHoldThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgMusicOnHoldThreshold.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgMusicOnHoldThreshold.setDescription('The object specifies the Music On Hold Threshold for the interface. The default value of this object is -38 dBm. ')
ccasVoiceCfgInGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 14))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgInGain.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgInGain.setDescription('This object contains the amount of gain inserted at the receiver side of the interface. The input gain settings only define a gain/loss relative to the 0 dB setting. The absolute loss at the 0 dB setting could be implementation dependent based on the desired network loss plan. The default value of this object is 0 dB (decibel). ')
ccasVoiceCfgOutAttn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgOutAttn.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgOutAttn.setDescription('This object contains the amount of attenuation inserted at the transmit side of the interface. The output attenuation settings only define a loss relative to the 0 dB setting. The absolute loss at the 0 dB setting could be implementation dependent based on the desired network loss plan. The default value of this object is 0 dB (decibel). ')
ccasVoiceCfgEchoCancelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgEchoCancelEnable.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgEchoCancelEnable.setDescription("The object specifies whether or not the Echo Cancellation is enabled for the interface. The default value of this object is 'true'. ")
ccasVoiceCfgEchoCancelCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("echoCanceller8ms", 1), ("echoCanceller16ms", 2), ("echoCanceller24ms", 3), ("echoCanceller32ms", 4), ("echoCanceller64ms", 5), ("echoCanceller128ms", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgEchoCancelCoverage.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgEchoCancelCoverage.setDescription("The object specifies the Echo Canceller coverage for the interface. This object is valid if the ccasVoiceCfgEchoCancelEnable object is 'true'. echoCanceller8ms - 8 milliseconds echo canceller coverage. echoCanceller16ms - 16 milliseconds echo canceller coverage. echoCanceller24ms - 24 milliseconds echo canceller coverage. echoCanceller32ms - 32 milliseconds echo canceller coverage. echoCanceller64ms - 64 milliseconds echo canceller coverage. echoCanceller128ms- 128 milliseconds echo canceller coverage. The default value of this object is echoCanceller8ms. ")
ccasVoiceCfgConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("trunk", 2), ("plar", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgConnectionMode.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgConnectionMode.setDescription('The object indicates the connection mode of the interface. normal - the interface acts normally to handle incoming and outgoing call. trunk - the interface acts in trunking mode. trunking mode causes two interfaces (on either the same or different routers) to be always conferenced together, and for telephony signaling to be passed transparently through the VoIP system rather than trapped and interpreted by the session application on the router(s). plar - the interface acts in PLAR (private line automatic ringdown) mode. PLAR is handled by associating a peer directly with an interface such that when the interface goes off-hook, that peer is used to setup the second call leg and conference them together without the caller having to dial any digits. ')
ccasVoiceCfgConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgConnectionNumber.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgConnectionNumber.setDescription("This is the E.164 phone number that is used to establish connection with trunking mode or PLAR mode. If the ccasVoiceCfgConnectionMode is 'normal', then this object will be a zero length string. ")
ccasVoiceCfgInitialDigitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgInitialDigitTimeOut.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgInitialDigitTimeOut.setDescription('This is the initial digit timeout that indicates the amount of time the managed system waits for an initial input digit from the caller. The timer is activated when the call is accepted and is deactivated upon digit input. If the timer expires, the caller is signaled through the appropriate tone and the call is abandoned. The value of zero disables the timer. The default value of this object is 10 seconds. ')
ccasVoiceCfgInterDigitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgInterDigitTimeOut.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgInterDigitTimeOut.setDescription('This is the inter-digit timeout that indicates the amount of time the managed system waits for a subsequent input digit from the caller. The timer is started upon receipt of an input digit and restarted as each digit is received until the destination address is identified. If the timer expires and no destination address is identified, the caller is signaled through the appropriate tone and the call is abandoned. The value of zero disables the timer. The default value of this object is 10 seconds. ')
ccasVoiceCfgRegionalTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 12), CountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgRegionalTone.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceCfgRegionalTone.setDescription('This object contains the current regional setting for the call progress tone to be used by this CAS group. ')
ccasXgcpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1), )
if mibBuilder.loadTexts: ccasXgcpCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccasXgcpCfgTable.setDescription('The XGCP configuration Table contains information about DS0 usage by XGCP(SGCP/MGCP). XGCP is meant to represent both Simple Gateway Control Protocol (SGCP) and Media Gateway Control Protocol (MGCP). ')
ccasXgcpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasXgcpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ccasXgcpCfgEntry.setDescription('An entry in the configuration table for each DS0 group of a DS1. The entry is created if the DS0 group is configured as null-signaling and ccasGrpCfgServiceType is configured as either sgcp or mgcp. The entry is deleted when the signaling type is configured as non null-signaling. ')
ccasXgcpCfgCotToneCo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(280, 3800))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo1.setReference('Bellcore GR-317-CORE spec, Rev 3, Nov. 1996, section 3.1.1.3. ')
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo1.setStatus('current')
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo1.setDescription('This object specifies the continuity test tone frequencies for co1. Co1 is the COT tone frequency from the terminating switch in transponder mode and is from the originating switch in loopback mode. ')
ccasXgcpCfgCotToneCo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(280, 3800))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo2.setReference('Bellcore GR-317-CORE spec, Rev 3, Nov. 1996, section 3.1.1.3. ')
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo2.setStatus('current')
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo2.setDescription('This object specifies the continuity test tone frequencies for co2. Co2 is the COT tone frequency from the originating switch only in transponder mode. ')
ccasIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 3))
ccasIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1))
ccasIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2))
ccasIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 1)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasEMGroup"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBCompliance = ccasIfMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ccasIfMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Voice Digital interface MIB')
ccasIfMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 2)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasEMGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBComplianceRev1 = ccasIfMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ccasIfMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Voice Digital interface MIB')
ccasIfMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 3)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasEMGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBComplianceRev2 = ccasIfMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ccasIfMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Voice Digital interface MIB')
ccasIfMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 4)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasEMGroupRev2"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBComplianceRev3 = ccasIfMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ccasIfMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco Voice Digital interface MIB')
ccasIfDS1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 1)).setObjects(("CISCO-CAS-IF-MIB", "ccasDs1IfCfgDs0ChannelsConfigurable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfDS1Group = ccasIfDS1Group.setStatus('current')
if mibBuilder.loadTexts: ccasIfDS1Group.setDescription('The collection of objects providing CAS/DS0 related T1/E1 information. ')
ccasGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 2)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpCfgType"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgDs0Channels"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgRowStatus"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgDS1IfIndex"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgTimeSlot"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusRecvSignalBits"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusInfoType"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusXmitSignalBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasGeneralInfoGroup = ccasGeneralInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccasGeneralInfoGroup.setDescription('A collection of objects providing general information applicable to Channel Associated Signaling interfaces. ')
ccasEMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 3)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDnisAni"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmClearWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayStart"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxDelayDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMinDelayPulseWidth"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasEMGroup = ccasEMGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ccasEMGroup.setDescription('A collection of objects providing information applicable to the CAS E&M signal interfaces. ')
ccasLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 4)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpLineCfgNumberRings"), ("CISCO-CAS-IF-MIB", "ccasGrpLineCfgSupDisconnect"), ("CISCO-CAS-IF-MIB", "ccasGrpLineCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasLineGroup = ccasLineGroup.setStatus('current')
if mibBuilder.loadTexts: ccasLineGroup.setDescription('A collection of objects providing information applicable to the CAS FXS/SAS signal interfaces. ')
ccasStaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 5)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpStaCfgNumberRings"), ("CISCO-CAS-IF-MIB", "ccasGrpStaCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasStaGroup = ccasStaGroup.setStatus('current')
if mibBuilder.loadTexts: ccasStaGroup.setDescription('A collection of objects providing information applicable to the CAS FXO/SAO signal interfaces. ')
ccasCustomABCDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 6)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpABCDCfgInvertBits"), ("CISCO-CAS-IF-MIB", "ccasGrpABCDCfgUnusedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasCustomABCDGroup = ccasCustomABCDGroup.setStatus('current')
if mibBuilder.loadTexts: ccasCustomABCDGroup.setDescription('A collection of objects providing ABCD bits configuration information applicable to the CAS group on E1 interface. ')
ccasVoiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 7)).setObjects(("CISCO-CAS-IF-MIB", "ccasVoiceCfgNoiseRegEnable"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgNonLinearProcEnable"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgMusicOnHoldThreshold"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgInGain"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgOutAttn"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgEchoCancelEnable"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgEchoCancelCoverage"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgConnectionMode"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgConnectionNumber"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgInitialDigitTimeOut"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgInterDigitTimeOut"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgRegionalTone"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasVoiceGroup = ccasVoiceGroup.setStatus('current')
if mibBuilder.loadTexts: ccasVoiceGroup.setDescription('A collection of objects providing information applicable to the CAS/DS0 group that supports voice capability. ')
ccasGeneralInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 8)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpCfgType"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgDs0Channels"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgServiceType"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasGeneralInfoGroupRev1 = ccasGeneralInfoGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ccasGeneralInfoGroupRev1.setDescription('A collection of objects providing general information applicable to CAS/DS0 interfaces. ')
ccasChannelInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 9)).setObjects(("CISCO-CAS-IF-MIB", "ccasChannelCfgDS1IfIndex"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgTimeSlot"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusRecvSignalBits"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusInfoType"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusXmitSignalBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasChannelInfoGroup = ccasChannelInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ccasChannelInfoGroup.setDescription('A collection of objects providing channel signaling information applicable to Channel Associated Signaling interfaces. ')
ccasXgcpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 10)).setObjects(("CISCO-CAS-IF-MIB", "ccasXgcpCfgCotToneCo1"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgCotToneCo2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasXgcpCfgGroup = ccasXgcpCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccasXgcpCfgGroup.setDescription('A collection of objects providing XGCP specific information applicable to DS0. ')
ccasEMGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 11)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDnisAni"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmClearWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayStart"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxDelayDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMinDelayPulseWidth"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrMCap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrECap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmVoiceHangover"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmLmrTeardown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasEMGroupRev1 = ccasEMGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ccasEMGroupRev1.setDescription('A collection of objects providing information applicable to the CAS E&M signal interfaces. ')
ccasEMGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 12)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDnisAni"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmClearWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayStart"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxDelayDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMinDelayPulseWidth"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrMCap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrECap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmVoiceHangover"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmLmrTeardown"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgAutoGainControl"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPttXmt"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPttRcv"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayVoice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasEMGroupRev2 = ccasEMGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ccasEMGroupRev2.setDescription('A collection of objects providing information applicable to the CAS E&M signal interfaces. ')
mibBuilder.exportSymbols("CISCO-CAS-IF-MIB", ccasGrpStaObjects=ccasGrpStaObjects, ccasGrpStaTmTable=ccasGrpStaTmTable, ccasGrpCfgRowStatus=ccasGrpCfgRowStatus, ccasGrpObjects=ccasGrpObjects, ccasVoiceCfgMusicOnHoldThreshold=ccasVoiceCfgMusicOnHoldThreshold, ccasGrpEMTmMaxWinkDuration=ccasGrpEMTmMaxWinkDuration, ccasDS1Objects=ccasDS1Objects, ccasDs1IfCfgEntry=ccasDs1IfCfgEntry, ccasVoiceCfgOutAttn=ccasVoiceCfgOutAttn, ccasGrpEMCfgDnisAni=ccasGrpEMCfgDnisAni, ccasGrpCfgIndex=ccasGrpCfgIndex, ccasGrpEMTmPulseRate=ccasGrpEMTmPulseRate, ccasGrpEMTmDelayVoice=ccasGrpEMTmDelayVoice, ccasGrpCfgDs0Channels=ccasGrpCfgDs0Channels, ccasGrpStaTmDigitDuration=ccasGrpStaTmDigitDuration, ccasXgcpCfgCotToneCo1=ccasXgcpCfgCotToneCo1, ccasVoiceCfgConnectionNumber=ccasVoiceCfgConnectionNumber, ccasGrpEMCfgTable=ccasGrpEMCfgTable, ccasGrpEMTmPttXmt=ccasGrpEMTmPttXmt, ccasGrpEMTmLmrTeardown=ccasGrpEMTmLmrTeardown, ccasGrpEMTmPttRcv=ccasGrpEMTmPttRcv, ccasGrpLineTmPulseRate=ccasGrpLineTmPulseRate, ccasGrpABCDCfgTable=ccasGrpABCDCfgTable, ccasChannelCfgDS1IfIndex=ccasChannelCfgDS1IfIndex, ccasGrpStaCfgTable=ccasGrpStaCfgTable, ccasGrpLineCfgEntry=ccasGrpLineCfgEntry, ccasGrpEMCfgLmrMCap=ccasGrpEMCfgLmrMCap, ccasGrpEMTmClearWaitDuration=ccasGrpEMTmClearWaitDuration, ccasVoiceGroup=ccasVoiceGroup, ccasGrpLineCfgDialType=ccasGrpLineCfgDialType, ccasIfMIBComplianceRev3=ccasIfMIBComplianceRev3, ccasGrpEMObjects=ccasGrpEMObjects, PYSNMP_MODULE_ID=ciscoCasIfMIB, ccasXgcpCfgGroup=ccasXgcpCfgGroup, ccasGrpGeneralObjects=ccasGrpGeneralObjects, ccasGrpEMTmMaxDelayDuration=ccasGrpEMTmMaxDelayDuration, ccasGrpStaCfgDialType=ccasGrpStaCfgDialType, ccasGrpLineObjects=ccasGrpLineObjects, ccasGrpEMTmInterDigitDuration=ccasGrpEMTmInterDigitDuration, ccasChannelStatusTable=ccasChannelStatusTable, ccasGeneralInfoGroupRev1=ccasGeneralInfoGroupRev1, ccasChannelCfgBusyOut=ccasChannelCfgBusyOut, ccasChannelCfgGroup=ccasChannelCfgGroup, ccasIfDS1Group=ccasIfDS1Group, ccasIfObjects=ccasIfObjects, ccasGrpLineCfgSupDisconnect=ccasGrpLineCfgSupDisconnect, ccasGrpCfgType=ccasGrpCfgType, ccasGrpStaCfgNumberRings=ccasGrpStaCfgNumberRings, ccasChannelStatusRecvSignalBits=ccasChannelStatusRecvSignalBits, ccasLineGroup=ccasLineGroup, ccasGrpEMCfgLmrECap=ccasGrpEMCfgLmrECap, ccasGrpABCDCfgInvertBits=ccasGrpABCDCfgInvertBits, ccasVoiceCfgConnectionMode=ccasVoiceCfgConnectionMode, ciscoCasIfMIB=ciscoCasIfMIB, ccasXgcpCfgCotToneCo2=ccasXgcpCfgCotToneCo2, ccasGrpEMCfgAutoGainControl=ccasGrpEMCfgAutoGainControl, ccasVoiceCfgNonLinearProcEnable=ccasVoiceCfgNonLinearProcEnable, ccasGrpLineCfgTable=ccasGrpLineCfgTable, ccasChannelObjects=ccasChannelObjects, ccasChannelStatusBusyOut=ccasChannelStatusBusyOut, ccasGrpABCDCfgEntry=ccasGrpABCDCfgEntry, ccasGrpEMTmMaxWinkWaitDuration=ccasGrpEMTmMaxWinkWaitDuration, ccasVoiceCfgEchoCancelEnable=ccasVoiceCfgEchoCancelEnable, ccasGrpLineTmInterDigitDuration=ccasGrpLineTmInterDigitDuration, ccasVoiceCfgTable=ccasVoiceCfgTable, ccasIfMIBComplianceRev1=ccasIfMIBComplianceRev1, ccasEMGroupRev1=ccasEMGroupRev1, ccasXgcpCfgTable=ccasXgcpCfgTable, ccasIfMIBCompliance=ccasIfMIBCompliance, ccasIfMIBCompliances=ccasIfMIBCompliances, ccasVoiceCfgRegionalTone=ccasVoiceCfgRegionalTone, ccasGrpLineCfgNumberRings=ccasGrpLineCfgNumberRings, ccasVoiceCfgInGain=ccasVoiceCfgInGain, ccasEMGroupRev2=ccasEMGroupRev2, ccasGrpEMTmPulseInterDigitDuration=ccasGrpEMTmPulseInterDigitDuration, ccasGrpEMTmVoiceHangover=ccasGrpEMTmVoiceHangover, ccasIfMIBComplianceRev2=ccasIfMIBComplianceRev2, ccasXgcpCfgEntry=ccasXgcpCfgEntry, ccasChannelStatusEntry=ccasChannelStatusEntry, ccasVoiceCfgNoiseRegEnable=ccasVoiceCfgNoiseRegEnable, ccasVoiceCfgEchoCancelCoverage=ccasVoiceCfgEchoCancelCoverage, ccasDs1IfCfgDs0ChannelsConfigurable=ccasDs1IfCfgDs0ChannelsConfigurable, ccasGrpCfgTable=ccasGrpCfgTable, ccasGrpEMTmDelayStart=ccasGrpEMTmDelayStart, ccasGrpStaTmEntry=ccasGrpStaTmEntry, ccasGrpABCDCfgUnusedBits=ccasGrpABCDCfgUnusedBits, ccasGrpLineTmTable=ccasGrpLineTmTable, ccasGrpStaCfgEntry=ccasGrpStaCfgEntry, ccasGeneralInfoGroup=ccasGeneralInfoGroup, ccasGrpStaTmPulseInterDigitDuration=ccasGrpStaTmPulseInterDigitDuration, ccasGrpLineTmEntry=ccasGrpLineTmEntry, ccasVoiceCfgObjects=ccasVoiceCfgObjects, ccasGrpEMTmEntry=ccasGrpEMTmEntry, ccasChannelStatusInfoType=ccasChannelStatusInfoType, ccasChannelStatusXmitSignalBits=ccasChannelStatusXmitSignalBits, ccasStaGroup=ccasStaGroup, ccasVoiceCfgEntry=ccasVoiceCfgEntry, ccasGrpABCDObjects=ccasGrpABCDObjects, ccasGrpEMCfgEntry=ccasGrpEMCfgEntry, ccasCustomABCDGroup=ccasCustomABCDGroup, ccasVoiceCfgInitialDigitTimeOut=ccasVoiceCfgInitialDigitTimeOut, ccasGrpStaTmInterDigitDuration=ccasGrpStaTmInterDigitDuration, ccasChannelCfgTable=ccasChannelCfgTable, ccasEMGroup=ccasEMGroup, ccasGrpEMTmDigitDuration=ccasGrpEMTmDigitDuration, ccasGrpEMCfgDialType=ccasGrpEMCfgDialType, ccasChannelCfgTimeSlot=ccasChannelCfgTimeSlot, ccasGrpLineTmPulseInterDigitDuration=ccasGrpLineTmPulseInterDigitDuration, ccasChannelInfoGroup=ccasChannelInfoGroup, ccasChannelCfgEntry=ccasChannelCfgEntry, ccasGrpStaTmPulseRate=ccasGrpStaTmPulseRate, ccasGrpEMTmTable=ccasGrpEMTmTable, ccasIfMIBGroups=ccasIfMIBGroups, ccasGrpEMTmMinDelayPulseWidth=ccasGrpEMTmMinDelayPulseWidth, ccasXgcpCfgObjects=ccasXgcpCfgObjects, ccasGrpLineTmDigitDuration=ccasGrpLineTmDigitDuration, ccasVoiceCfgInterDigitTimeOut=ccasVoiceCfgInterDigitTimeOut, ccasIfMIBConformance=ccasIfMIBConformance, ccasGrpCfgEntry=ccasGrpCfgEntry, ccasDs1IfCfgTable=ccasDs1IfCfgTable, ccasGrpCfgServiceType=ccasGrpCfgServiceType)
