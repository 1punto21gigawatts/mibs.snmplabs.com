#
# PySNMP MIB module ZYXEL-STACKING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-STACKING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, Bits, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ObjectIdentity, Integer32, IpAddress, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Bits", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ObjectIdentity", "Integer32", "IpAddress", "MibIdentifier", "NotificationType", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelStacking = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97))
if mibBuilder.loadTexts: zyxelStacking.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelStacking.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelStacking.setContactInfo('')
if mibBuilder.loadTexts: zyxelStacking.setDescription('The subtree for stacking')
zyxelStackingSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1))
zyxelStackingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2))
zyxelStackingTrapInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 3))
zyxelStackingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4))
zyStackingPriority = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyStackingPriority.setStatus('current')
if mibBuilder.loadTexts: zyStackingPriority.setDescription('Set the priority of the stacking system.')
zyStackingForceMasterModeState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyStackingForceMasterModeState.setStatus('current')
if mibBuilder.loadTexts: zyStackingForceMasterModeState.setDescription('Enable/Disable force master mode.')
zyxelStackingSlotTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 3), )
if mibBuilder.loadTexts: zyxelStackingSlotTable.setStatus('current')
if mibBuilder.loadTexts: zyxelStackingSlotTable.setDescription('The table contains stacking slot configuration.')
zyxelStackingSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 3, 1), ).setIndexNames((0, "ZYXEL-STACKING-MIB", "zyStackingSlotCurrentSlotId"))
if mibBuilder.loadTexts: zyxelStackingSlotEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelStackingSlotEntry.setDescription('An entry contains stacking slot configuration.')
zyStackingSlotCurrentSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: zyStackingSlotCurrentSlotId.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotCurrentSlotId.setDescription('The slot number device, which is the current slot id.')
zyStackingSlotActiveSlotIdAfterReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 0), ("slotId1", 1), ("slotId2", 2), ("slotId3", 3), ("slotId4", 4), ("slotId5", 5), ("slotId6", 6), ("slotId7", 7), ("slotId8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyStackingSlotActiveSlotIdAfterReboot.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotActiveSlotIdAfterReboot.setDescription('Indicates the slot id that will be after reboot.')
zyStackingSlotIdFreeze = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyStackingSlotIdFreeze.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotIdFreeze.setDescription('This entry is used to freeze the slot id of each device at stack system to be its current slot id.')
zyxelStackingSlotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1), )
if mibBuilder.loadTexts: zyxelStackingSlotInfoTable.setStatus('current')
if mibBuilder.loadTexts: zyxelStackingSlotInfoTable.setDescription('The table contains stacking slot information.')
zyxelStackingSlotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1), ).setIndexNames((0, "ZYXEL-STACKING-MIB", "zyStackingSlotInfoSlot"))
if mibBuilder.loadTexts: zyxelStackingSlotInfoEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelStackingSlotInfoEntry.setDescription('An entry contains stacking slot information.')
zyStackingSlotInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: zyStackingSlotInfoSlot.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoSlot.setDescription('Stacking slot ID.')
zyStackingSlotInfoStackingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("init", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoStackingStatus.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoStackingStatus.setDescription('Stacking status Of the stacking slot.')
zyStackingSlotInfoForceMasterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 3), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoForceMasterMode.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoForceMasterMode.setDescription('The mode is enabled, it will get highest priority to be Master.')
zyStackingSlotInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoPriority.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoPriority.setDescription('Stacking priority of the stacking slot.')
zyStackingSlotInfoRole = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("master", 1), ("backup", 2), ("linecard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoRole.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoRole.setDescription('The role of the stacking slot')
zyStackingSlotInfoMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoMacAddress.setDescription('CPU mac address of the stacking slot.')
zyStackingSlotInfoUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoUptime.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoUptime.setDescription('Uptime of the stacking slot')
zyStackingSlotInfoFirmwareVersionRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoFirmwareVersionRunning.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoFirmwareVersionRunning.setDescription('current running firmware version of the stacking slot.')
zyStackingSlotInfoFirmwareVersionFlash1 = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoFirmwareVersionFlash1.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoFirmwareVersionFlash1.setDescription('Firmware version in flash1 of the stacking slot.')
zyStackingSlotInfoFirmwareVersionFlash2 = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotInfoFirmwareVersionFlash2.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInfoFirmwareVersionFlash2.setDescription('Firmware version in flash2 of the stacking slot.')
zyxelStackingSlotChannelInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2), )
if mibBuilder.loadTexts: zyxelStackingSlotChannelInfoTable.setStatus('current')
if mibBuilder.loadTexts: zyxelStackingSlotChannelInfoTable.setDescription('The table contains stacking the channel information of the stacking slot.')
zyxelStackingSlotChannelInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1), ).setIndexNames((0, "ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"), (0, "ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoChannnel"))
if mibBuilder.loadTexts: zyxelStackingSlotChannelInfoEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelStackingSlotChannelInfoEntry.setDescription('An entry contains the stacking channel information of the stacking slot.')
zyStackingSlotChannelInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyStackingSlotChannelInfoSlot.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChannelInfoSlot.setDescription('Stacking slot ID.')
zyStackingSlotChannelInfoChannnel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: zyStackingSlotChannelInfoChannnel.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChannelInfoChannnel.setDescription('Stacking channel ID')
zyStackingSlotChannelInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotChannelInfoStatus.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChannelInfoStatus.setDescription('The stacking channel status.')
zyStackingSlotChannelInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotChannelInfoPorts.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChannelInfoPorts.setDescription('Port list in the stacking channel.')
zyStackingSlotChannelInfoNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotChannelInfoNeighbor.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChannelInfoNeighbor.setDescription('neighbor slot id connected by stacking channel.')
zyStackingSlotChannelInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("speed_10G", 1), ("speed_12G", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingSlotChannelInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChannelInfoSpeed.setDescription('neighbor slot id connected by stacking channel.')
zyStackingTopology = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chain", 1), ("ring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStackingTopology.setStatus('current')
if mibBuilder.loadTexts: zyStackingTopology.setDescription('get current stacking topology')
zyStackingTrapInfoMsg = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 3, 1), OctetString())
if mibBuilder.loadTexts: zyStackingTrapInfoMsg.setStatus('current')
if mibBuilder.loadTexts: zyStackingTrapInfoMsg.setDescription('There is the message of stacking trap.')
zyStackingChannelUp = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 1)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"), ("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoChannnel"))
if mibBuilder.loadTexts: zyStackingChannelUp.setStatus('current')
if mibBuilder.loadTexts: zyStackingChannelUp.setDescription('Stacking channel up.')
zyStackingChannelDown = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 2)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"), ("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoChannnel"))
if mibBuilder.loadTexts: zyStackingChannelDown.setStatus('current')
if mibBuilder.loadTexts: zyStackingChannelDown.setDescription('Stacking channel down.')
zyStackingSlotAttach = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 3)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingSlotAttach.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotAttach.setDescription('Stacking slot attached success.')
zyStackingSlotDetach = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 4)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingSlotDetach.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotDetach.setDescription('Stacking slot detach.')
zyStackingNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 5)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingNewMaster.setStatus('current')
if mibBuilder.loadTexts: zyStackingNewMaster.setDescription('New master with correspond slot ID.')
zyStackingUpgradeFirmwareFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 6)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingUpgradeFirmwareFail.setStatus('current')
if mibBuilder.loadTexts: zyStackingUpgradeFirmwareFail.setDescription('Upgrade firmware fail with correspond slot ID')
zyStackingNewBackup = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 7)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingNewBackup.setStatus('current')
if mibBuilder.loadTexts: zyStackingNewBackup.setDescription('New Backup with correspond slot ID.')
zyStackingBackupTakeover = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 8)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingBackupTakeover.setStatus('current')
if mibBuilder.loadTexts: zyStackingBackupTakeover.setDescription('Replaced master with correspond slot ID.')
zyStackingNewMasterFromTakeover = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 9)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingNewMasterFromTakeover.setStatus('current')
if mibBuilder.loadTexts: zyStackingNewMasterFromTakeover.setDescription('New master from taking over with correspond slot ID.')
zyStackingSyncConfFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 10)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingSyncConfFail.setStatus('current')
if mibBuilder.loadTexts: zyStackingSyncConfFail.setDescription('Sync. configuration fail with correspond slot ID.')
zyStackingSysRestoreConfFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 11)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingSlotChannelInfoSlot"))
if mibBuilder.loadTexts: zyStackingSysRestoreConfFail.setStatus('current')
if mibBuilder.loadTexts: zyStackingSysRestoreConfFail.setDescription('Stacking backup takeover resotre configuration fail.')
zyStackingSlotInitFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 12)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingTrapInfoMsg"))
if mibBuilder.loadTexts: zyStackingSlotInitFail.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotInitFail.setDescription('Stacking Slot init fail.')
zyStackingSlotChangeIndex = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 13)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingTrapInfoMsg"))
if mibBuilder.loadTexts: zyStackingSlotChangeIndex.setStatus('current')
if mibBuilder.loadTexts: zyStackingSlotChangeIndex.setDescription('Stacking change slot index.')
zyStackingPriorityChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 14)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingTrapInfoMsg"))
if mibBuilder.loadTexts: zyStackingPriorityChange.setStatus('current')
if mibBuilder.loadTexts: zyStackingPriorityChange.setDescription('Staking prority change.')
zyStackingTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 97, 4, 15)).setObjects(("ZYXEL-STACKING-MIB", "zyStackingTrapInfoMsg"))
if mibBuilder.loadTexts: zyStackingTopologyChange.setStatus('current')
if mibBuilder.loadTexts: zyStackingTopologyChange.setDescription('Staking topology change.')
mibBuilder.exportSymbols("ZYXEL-STACKING-MIB", zyStackingSlotChangeIndex=zyStackingSlotChangeIndex, PYSNMP_MODULE_ID=zyxelStacking, zyxelStackingNotifications=zyxelStackingNotifications, zyStackingSlotChannelInfoSlot=zyStackingSlotChannelInfoSlot, zyStackingSlotChannelInfoNeighbor=zyStackingSlotChannelInfoNeighbor, zyStackingUpgradeFirmwareFail=zyStackingUpgradeFirmwareFail, zyStackingPriorityChange=zyStackingPriorityChange, zyStackingSlotInfoFirmwareVersionFlash2=zyStackingSlotInfoFirmwareVersionFlash2, zyStackingSlotChannelInfoStatus=zyStackingSlotChannelInfoStatus, zyStackingSlotAttach=zyStackingSlotAttach, zyStackingNewMasterFromTakeover=zyStackingNewMasterFromTakeover, zyStackingSlotInfoFirmwareVersionRunning=zyStackingSlotInfoFirmwareVersionRunning, zyStackingNewMaster=zyStackingNewMaster, zyxelStackingSlotInfoTable=zyxelStackingSlotInfoTable, zyStackingSlotActiveSlotIdAfterReboot=zyStackingSlotActiveSlotIdAfterReboot, zyStackingSyncConfFail=zyStackingSyncConfFail, zyStackingPriority=zyStackingPriority, zyxelStackingSlotTable=zyxelStackingSlotTable, zyxelStackingTrapInfoObjects=zyxelStackingTrapInfoObjects, zyStackingChannelDown=zyStackingChannelDown, zyStackingChannelUp=zyStackingChannelUp, zyxelStackingSetup=zyxelStackingSetup, zyxelStackingStatus=zyxelStackingStatus, zyStackingSlotInfoStackingStatus=zyStackingSlotInfoStackingStatus, zyStackingTopology=zyStackingTopology, zyStackingNewBackup=zyStackingNewBackup, zyStackingSlotInfoFirmwareVersionFlash1=zyStackingSlotInfoFirmwareVersionFlash1, zyxelStacking=zyxelStacking, zyStackingSysRestoreConfFail=zyStackingSysRestoreConfFail, zyStackingSlotInfoRole=zyStackingSlotInfoRole, zyStackingSlotInfoForceMasterMode=zyStackingSlotInfoForceMasterMode, zyStackingSlotChannelInfoSpeed=zyStackingSlotChannelInfoSpeed, zyStackingBackupTakeover=zyStackingBackupTakeover, zyStackingSlotInitFail=zyStackingSlotInitFail, zyStackingSlotInfoUptime=zyStackingSlotInfoUptime, zyStackingTopologyChange=zyStackingTopologyChange, zyStackingTrapInfoMsg=zyStackingTrapInfoMsg, zyStackingSlotInfoMacAddress=zyStackingSlotInfoMacAddress, zyStackingSlotDetach=zyStackingSlotDetach, zyStackingSlotIdFreeze=zyStackingSlotIdFreeze, zyxelStackingSlotEntry=zyxelStackingSlotEntry, zyStackingSlotCurrentSlotId=zyStackingSlotCurrentSlotId, zyxelStackingSlotChannelInfoEntry=zyxelStackingSlotChannelInfoEntry, zyStackingSlotChannelInfoPorts=zyStackingSlotChannelInfoPorts, zyStackingSlotChannelInfoChannnel=zyStackingSlotChannelInfoChannnel, zyStackingForceMasterModeState=zyStackingForceMasterModeState, zyxelStackingSlotInfoEntry=zyxelStackingSlotInfoEntry, zyxelStackingSlotChannelInfoTable=zyxelStackingSlotChannelInfoTable, zyStackingSlotInfoSlot=zyStackingSlotInfoSlot, zyStackingSlotInfoPriority=zyStackingSlotInfoPriority)
