#
# PySNMP MIB module Unisphere-Data-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-DS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Counter32, Integer32, NotificationType, Unsigned32, iso, IpAddress, MibIdentifier, Gauge32, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Integer32", "NotificationType", "Unsigned32", "iso", "IpAddress", "MibIdentifier", "Gauge32", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdTimeSlotMap, UsdNextIfIndex = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdTimeSlotMap", "UsdNextIfIndex")
usdDs1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5))
usdDs1MIB.setRevisions(('2002-05-13 16:01', '2001-07-31 18:25', '2001-04-04 18:05', '1999-06-17 00:00', '1998-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdDs1MIB.setRevisionsDescriptions(('Added support for FDL.', 'Change access on usdDsx1Ds1ChannelNumber.', 'Added dynamic DS1 interface support.', 'Updated version of this MIB module.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdDs1MIB.setLastUpdated('200205131601Z')
if mibBuilder.loadTexts: usdDs1MIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdDs1MIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdDs1MIB.setDescription('The DS1/E1 MIB for the Unisphere enterprise. This MIB contains managed objects to supplement those found in RFC1406 DS1/E1 MIB.')
usdDs1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1))
usdDsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: usdDsx1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdDsx1ConfigTable.setDescription('This table contains entries for DS1/E1 interfaces present in the system.')
usdDsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdDsx1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdDsx1ConfigEntry.setDescription('Each entry describes the characteristics of an DS1/E1 interface.')
usdDsx1TimeSlotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 1), UsdTimeSlotMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDsx1TimeSlotMap.setStatus('current')
if mibBuilder.loadTexts: usdDsx1TimeSlotMap.setDescription('A bitmap representing the timeslots on the DS1/E1 interface that have been allocated for service. For channelized DS1/E1, set bits reflect the union of timeslot allocations across all fractional arrangements operating over this DS1/E1 interface. For unchannelized DS1/E1, all relevant timeslot bits will be set.')
usdDsx1Ds1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1Ds1ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: usdDsx1Ds1ChannelNumber.setDescription('This variable represents the channel number of the DS1/E1 on its parent DS3/E3. A value of 0 indicates this DS1/E1 does not have a parent DS3/E3.')
usdDsx1Capabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDsx1Capabilities.setStatus('current')
if mibBuilder.loadTexts: usdDsx1Capabilities.setDescription('A value which indicates the set of capabilities of the DS1/E1 interface. The value is a sum. This sum initially takes the value zero. Then, for each capability, C, in the range 1 through 3, that this interface supports, 2 raised to (C - 1) is added to the sum. For example, an interface which is only E1 capable would have a value of 2 (2^(2-1)). In contrast, an interface which is both T1 and J1 capable would have a value of 5 (2^(1-1) + 2^(3-1)). The values for DS1/E1 interface capabilities are as follows: capability function 1 T1 2 E1 3 J1 ')
usdDsx1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2), ("j1", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1Mode.setStatus('current')
if mibBuilder.loadTexts: usdDsx1Mode.setDescription('This variable represents the DS1/E1 interface mode. The value of the usdDsx1Capabilities object for the DS1/E1 interface indicates the valid set of values for this object.')
usdDsx1LineBuildOutCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDsx1LineBuildOutCapabilities.setStatus('current')
if mibBuilder.loadTexts: usdDsx1LineBuildOutCapabilities.setDescription('A value which indicates the set of line build out capabilities of the DS1/E1 interface. The value is a sum. This sum initially takes the value zero. Then, for each line build out capability, C, in the range 1 or 2, that this interface supports, 2 raised to (C - 1) is added to the sum. For example, an interface which is only short haul capable would have a value of 2 (2^(2-1)). In contrast, an interface which is both short haul and long haul capable would have a value of 3 (2^(1-1) + 2^(2-1)). The values for DS1/E1 interface line build out capabilities are as follows: line build out capability function 1 short haul 2 long haul')
usdDsx1LineBuildOutType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shortHaul", 1), ("longHaul", 2), ("notSupported", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1LineBuildOutType.setStatus('current')
if mibBuilder.loadTexts: usdDsx1LineBuildOutType.setDescription('This variable represents the configured line build out type of the DS1/E1 interface. The value of the usdDsx1LineBuildOutCapabilities object for the DS1/E1 interface indicates the valid set of values for this object.')
usdDsx1LineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("db0", 1), ("dbMinus7Point5", 2), ("dbMinus15", 3), ("dbMinus22Point5", 4), ("notSupported", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1LineAttenuation.setStatus('current')
if mibBuilder.loadTexts: usdDsx1LineAttenuation.setDescription('This variable represents the configured line attenuation of the DS1/E1 interface. Note that the value of this object only takes effect when the value of the usdDsx1LineBuildOutType for the DS1/E1 interface is set to longHaul(2).')
usdDsx1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1LineLength.setStatus('current')
if mibBuilder.loadTexts: usdDsx1LineLength.setDescription('This variable represents the length of the DS1/E1 line in meters. Note that the value of this object only takes effect when the value of the usdDsx1LineBuildOutType for the DS1/E1 interface is set to shortHaul(1).')
usdDsx1LowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1LowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDsx1LowerIfIndex.setDescription('The ifIndex of the interface over which this Dsx1 interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
usdDsx1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1RowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDsx1RowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdDsx1RowStatus usdDsx1LowerIfIndex In addition, when creating an entry the following conditions must hold: A value for ifIndex must have been determined previously, by reading usdDsx1NextIfIndex. The interface identified by usdDsx1hLowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/usdIfTable is created/destroyed as a result of creating/destroying an entry in this table.')
usdDsx1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("sendInbandLineCode", 1), ("sendBellcoreLineCode", 2), ("sendBellcoreInbandLineCode", 3), ("sendQRSPattern", 4), ("sendAllZerosPattern", 5), ("sendAllOnesPattern", 6), ("sendAltZeroOnePattern", 7), ("sendTwo11Pattern", 8), ("sendTwo15Pattern", 9), ("sendTwo20Pattern", 10), ("sendTwo23Pattern", 11), ("sendUnfrQRSPattern", 12), ("sendUnfrAllZerosPattern", 13), ("sendUnfrAllOnesPattern", 14), ("sendUnfrAltZeroOnePattern", 15), ("sendUnfrTwo11Pattern", 16), ("sendUnfrTwo15Pattern", 17), ("sendUnfrTwo20Pattern", 18), ("sendUnfrTwo23Pattern", 19), ("otherPattern", 20))).clone('otherPattern')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1SendCode.setStatus('current')
if mibBuilder.loadTexts: usdDsx1SendCode.setDescription('This variable indicates what type of code is being sent across the DS1 interface by the device.')
usdDsx1YellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("generate", 1), ("detect", 2), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1YellowAlarm.setStatus('current')
if mibBuilder.loadTexts: usdDsx1YellowAlarm.setDescription('This bitmap indicates the yellow alarm settings, and is the sum of the capabilities.')
usdDsx1RemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1RemoteLoopback.setStatus('current')
if mibBuilder.loadTexts: usdDsx1RemoteLoopback.setDescription('This variable indicates the remote loopback setting.')
usdDsx1FdlCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlCarrier.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlCarrier.setDescription('Specifies the interface is used in carrier environment.')
usdDsx1FdlEic = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlEic.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlEic.setDescription('This is the equipment identification code.')
usdDsx1FdlLic = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlLic.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlLic.setDescription('This is the location identification code.')
usdDsx1FdlFic = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlFic.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlFic.setDescription('This is the frame identification code.')
usdDsx1FdlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlUnit.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlUnit.setDescription('This is the unit identification code.')
usdDsx1FdlPfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlPfi.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlPfi.setDescription('This is the facility identification code.')
usdDsx1FdlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlPort.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlPort.setDescription('This is the equipment port number.')
usdDsx1FdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx1FdlGenerator.setStatus('current')
if mibBuilder.loadTexts: usdDsx1FdlGenerator.setDescription('This is the generator number.')
usdDs1NextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 1, 2), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDs1NextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDs1NextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdDsx1ConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdDs1Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4))
usdDs1Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 1))
usdDs1Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 2))
usdDs1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 1, 1)).setObjects(("Unisphere-Data-DS1-MIB", "usdDs1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Compliance = usdDs1Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs1Compliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS1/E1 MIB. This statement became obsolete when new objects were added.')
usdDs1Compliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 1, 2)).setObjects(("Unisphere-Data-DS1-MIB", "usdDs1Group1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Compliance1 = usdDs1Compliance1.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs1Compliance1.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS1/E1 MIB. This statement became obsolete when dynamic DS1 interface support was added.')
usdDs1Compliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 1, 3)).setObjects(("Unisphere-Data-DS1-MIB", "usdDs1Group2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Compliance2 = usdDs1Compliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs1Compliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS1/E1 MIB. This statement became obsolete when FDL support was added.')
usdDs1Compliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 1, 4)).setObjects(("Unisphere-Data-DS1-MIB", "usdDs1Group3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Compliance3 = usdDs1Compliance3.setStatus('current')
if mibBuilder.loadTexts: usdDs1Compliance3.setDescription('The compliance statement for entities which implement the Unisphere DS1/E1 MIB.')
usdDs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 2, 1)).setObjects(("Unisphere-Data-DS1-MIB", "usdDsx1TimeSlotMap"), ("Unisphere-Data-DS1-MIB", "usdDsx1Ds1ChannelNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Group = usdDs1Group.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs1Group.setDescription('Obsolete collection of objects providing management of DS1/E1 interfaces in a Unisphere product. This group became obsolete when new objects where added to the MIB.')
usdDs1Group1 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 2, 2)).setObjects(("Unisphere-Data-DS1-MIB", "usdDsx1TimeSlotMap"), ("Unisphere-Data-DS1-MIB", "usdDsx1Ds1ChannelNumber"), ("Unisphere-Data-DS1-MIB", "usdDsx1Capabilities"), ("Unisphere-Data-DS1-MIB", "usdDsx1Mode"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineBuildOutCapabilities"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineBuildOutType"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineAttenuation"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Group1 = usdDs1Group1.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs1Group1.setDescription('Obsolete collection of objects providing management of DS1/E1 interfaces in a Unisphere product. This group became obsolete when dynamic DS1 interface support was added.')
usdDs1Group2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 2, 3)).setObjects(("Unisphere-Data-DS1-MIB", "usdDsx1TimeSlotMap"), ("Unisphere-Data-DS1-MIB", "usdDsx1Ds1ChannelNumber"), ("Unisphere-Data-DS1-MIB", "usdDsx1Capabilities"), ("Unisphere-Data-DS1-MIB", "usdDsx1Mode"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineBuildOutCapabilities"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineBuildOutType"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineAttenuation"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineLength"), ("Unisphere-Data-DS1-MIB", "usdDsx1LowerIfIndex"), ("Unisphere-Data-DS1-MIB", "usdDsx1RowStatus"), ("Unisphere-Data-DS1-MIB", "usdDs1NextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Group2 = usdDs1Group2.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs1Group2.setDescription('Obsolete collection of objects providing management of DS1/E1 interfaces in a Unisphere product. This group became obsolete when FDL support was added.')
usdDs1Group3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 5, 4, 2, 4)).setObjects(("Unisphere-Data-DS1-MIB", "usdDsx1TimeSlotMap"), ("Unisphere-Data-DS1-MIB", "usdDsx1Ds1ChannelNumber"), ("Unisphere-Data-DS1-MIB", "usdDsx1Capabilities"), ("Unisphere-Data-DS1-MIB", "usdDsx1Mode"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineBuildOutCapabilities"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineBuildOutType"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineAttenuation"), ("Unisphere-Data-DS1-MIB", "usdDsx1LineLength"), ("Unisphere-Data-DS1-MIB", "usdDsx1LowerIfIndex"), ("Unisphere-Data-DS1-MIB", "usdDsx1RowStatus"), ("Unisphere-Data-DS1-MIB", "usdDsx1SendCode"), ("Unisphere-Data-DS1-MIB", "usdDsx1YellowAlarm"), ("Unisphere-Data-DS1-MIB", "usdDsx1RemoteLoopback"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlCarrier"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlEic"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlLic"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlFic"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlUnit"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlPfi"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlPort"), ("Unisphere-Data-DS1-MIB", "usdDsx1FdlGenerator"), ("Unisphere-Data-DS1-MIB", "usdDs1NextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs1Group3 = usdDs1Group3.setStatus('current')
if mibBuilder.loadTexts: usdDs1Group3.setDescription('A collection of objects providing management of DS1/E1 interfaces in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-DS1-MIB", usdDsx1FdlPfi=usdDsx1FdlPfi, usdDsx1LowerIfIndex=usdDsx1LowerIfIndex, usdDsx1LineBuildOutCapabilities=usdDsx1LineBuildOutCapabilities, usdDsx1Mode=usdDsx1Mode, usdDsx1FdlCarrier=usdDsx1FdlCarrier, usdDs1NextIfIndex=usdDs1NextIfIndex, usdDs1Groups=usdDs1Groups, usdDs1Group=usdDs1Group, usdDsx1ConfigTable=usdDsx1ConfigTable, usdDsx1YellowAlarm=usdDsx1YellowAlarm, usdDsx1ConfigEntry=usdDsx1ConfigEntry, usdDsx1TimeSlotMap=usdDsx1TimeSlotMap, usdDsx1RowStatus=usdDsx1RowStatus, usdDsx1LineLength=usdDsx1LineLength, usdDs1Compliance1=usdDs1Compliance1, usdDsx1LineBuildOutType=usdDsx1LineBuildOutType, usdDsx1RemoteLoopback=usdDsx1RemoteLoopback, usdDsx1FdlEic=usdDsx1FdlEic, usdDs1Compliance3=usdDs1Compliance3, usdDs1Objects=usdDs1Objects, usdDsx1FdlGenerator=usdDsx1FdlGenerator, usdDsx1LineAttenuation=usdDsx1LineAttenuation, usdDsx1FdlPort=usdDsx1FdlPort, usdDs1Compliance=usdDs1Compliance, usdDsx1Capabilities=usdDsx1Capabilities, usdDs1Conformance=usdDs1Conformance, PYSNMP_MODULE_ID=usdDs1MIB, usdDsx1FdlLic=usdDsx1FdlLic, usdDs1Compliances=usdDs1Compliances, usdDsx1FdlUnit=usdDsx1FdlUnit, usdDs1Group2=usdDs1Group2, usdDsx1FdlFic=usdDsx1FdlFic, usdDs1Compliance2=usdDs1Compliance2, usdDs1Group3=usdDs1Group3, usdDsx1Ds1ChannelNumber=usdDsx1Ds1ChannelNumber, usdDs1MIB=usdDs1MIB, usdDsx1SendCode=usdDsx1SendCode, usdDs1Group1=usdDs1Group1)
