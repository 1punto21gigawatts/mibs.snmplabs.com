#
# PySNMP MIB module Juniper-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
Ipv6AddressPrefix, Ipv6AddressIfIdentifier, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6AddressIfIdentifier", "Ipv6Address")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
juniRouterIndex, = mibBuilder.importSymbols("Juniper-ROUTER-MIB", "juniRouterIndex")
JuniInterfaceLocationType, JuniEnable, JuniVrfGroupName, JuniName, JuniInterfaceLocationValue = mibBuilder.importSymbols("Juniper-TC", "JuniInterfaceLocationType", "JuniEnable", "JuniVrfGroupName", "JuniName", "JuniInterfaceLocationValue")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Integer32, iso, ObjectIdentity, IpAddress, Counter32, Gauge32, Bits, MibIdentifier, NotificationType, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "iso", "ObjectIdentity", "IpAddress", "Counter32", "Gauge32", "Bits", "MibIdentifier", "NotificationType", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
juniAaaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20))
juniAaaMIB.setRevisions(('2008-10-24 09:16', '2008-09-04 10:34', '2008-06-11 05:33', '2007-12-27 09:44', '2007-10-04 01:33', '2007-07-31 19:34', '2006-08-02 18:34', '2006-07-11 13:05', '2006-08-02 13:33', '2006-02-21 15:54', '2005-01-31 22:01', '2004-12-03 22:12', '2004-05-20 21:33', '2004-07-26 17:02', '2003-05-07 18:07', '2003-05-05 20:25', '2003-04-29 14:09', '2003-04-25 16:03', '2002-08-01 19:50', '2001-10-05 13:25', '2001-10-03 19:05', '2001-03-01 17:03', '2001-02-12 19:54', '2000-05-18 00:00', '1999-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniAaaMIB.setRevisionsDescriptions(('Added juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix and juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix to the juniAaaAssignGeneral object.', 'Modified juniAaaAssignTunnelCallingNumberFormat and juniAaaAssignTunnelCallingNumberFormatFallback of juniAaaAssignGeneral to include the fixed-adapter-embedded and fixed-adapter-new-field formats. Added juniAaaAssignDomainBackupPoolName to the juniAaaAssignDomain object.', 'Modified juniAaaAssignTunnelCallingNumberFormat of juniAaaAssignGeneral to include the SVLAN ID. Added juniAaaMonitorIngressTrafficOnly to the juniAaaTimeoutGeneral object.', 'Increased maximum juniAaaIdleTimeout value to 24Hr. Added juniAaaAssignDomainTunnelSubscriberAuthentication for enable or disable suberscriber to authenticate with configured authentication server when there are tunnel configurations under the domain', 'Added juniAaaAssignDomainAuthRouterName, juniAaaAssignDomainIpRouterName, juniAaaAssignDomainRouterName is deprecated and becomes read-only.', 'Added juniAaaServiceAcctInterval for the default service accounting interval; added juniAaaUserAcctInterval for the default user accounting interval; changed juniAaaAcctInterval to set both juniAaaServiceAcctInterval, and juniAaaUserAcctInterval; get of juniAaaAcctInterval only returns the juniAaaUserAcctInterval value', 'Added new values to juniAaaAssignTunnelCallingNumberFormat. Added juniAaaAssignTunnelCallingNumberFormatFallback ', 'Added juniAaaAssignQosDownstreamRate.', 'Added juniAaaAssignDomainTunnelFailoverResync, juniAaaTunnelGroupTunnelFailoverResync. Added juniAaaSubscriberInterfaceSummaryTable, juniAaaSubscriberInterfaceSummaryEntry, juniAaaSubscriberInterfaceSummaryIndex, juniAaaSubscriberSubInterfaceSummaryIndex, juniAaaSubscriberInterfaceSummaryCount, juniAaaSubscriberInterfaceTable, juniAaaSubscriberInterfaceEntry, juniAaaSubscriberInterfaceEntry, juniAaaSubscriberInterfaceIndex, juniAaaSubscriberSubInterfaceIndex, juniAaaSubscriberInterfaceHandle, juniAaaSubscriberInterfaceRowStatus, juniAaaSubscriberSlotSummaryTable, juniAaaSubscriberSlotSummaryEntry, juniAaaSubscriberSlotSummarySlotIndex, juniAaaSubscriberSlotSummaryCount, juniAaaSubscriberSlotTable, juniAaaSubscriberSlotSummaryEntry, juniAaaSubscriberSlotIndex, juniAaaSubscriberSlotHandle, juniAaaSubscriberSlotRowStatus. Added juniAaaAssignDomainTunnelPeerResyncMechanism and juniAaaTunnelGroupTunnelPeerResyncMechanism, juniAaaTunnelGroupTunnelFailoverResync, juniAaaAssignDomainTunnelTxConnectSpeedMethod, juniAaaTunnelGroupTunnelTxConnectSpeedMethod, juniAaaTunnelTxConnectSpeedMethod.', 'Added juniAaaAssignAccountingStatisticsType support. Added juniAaaSubscriberExt table support. Added l2tp tunnel switch profile support. Added juniAaaTunnelSwitchProfile. Added IPsec client support.', 'Added juniAaaTunnelGroup support. Added new values to juniAaaAssignTunnelCallingNumberFormat.', 'Added juniAaaLocalAuthUser, juniAaaLocalAuthUserDb, and juniAaaLocalAuthUserDbAssoc groups to support local authentication Added broadcast accounting support: juniAaaAcctBcastServerGroupTable, juniAaaAcctBcastServerGroupName, juniAaaOutgoingBcastAcctRequests and juniAaaIncomingBcastAcctResponses.', 'Added second generation E-series platform support: Imported JuniInterfaceLocationType and JuniInterfaceLocationValue from Juniper-TC to replace JuniSubscriberLocationType and JuniSubscriberLocationValue textual conventions, respectively. Increase range for juniAaaSessionTimeout. Added support for juniAaaInterfaceAdapterFormat.', 'Added new states to JuniSubscriberState. Added realm and domain parse direction. Added juniAaaAuthMethodsTable and juniAaaAcctMethodsTable. Added juniAaaAcctSendImmediateAcctUpdate to control the sending of immediate interim accounting updates.', 'Added support for juniAaaAssignTunnelCallingNumberFormat. Added support for juniAaaInterfaceIdFormat. Added support for IPv6.', 'Replaced Unisphere names with Juniper names. Added juniAaaArssignDomainPoolName. Extend range of juniAaaAcctInterval to 24 hours. Added support for PPPoE active discovery network (PADN).', 'Added protocolTacacaPlus and protoctolEnable to JuniAaaAuthenticationMethods. Added juniAaaAssignDomainPoolName. Added juniAaaAssignDomainTunnelMaxSessions.', 'Added support for additional AAA objects: juniAaaAssignSubscriberLimit, juniAaaAcctSendStopOnAaaDeny, juniAaaAcctSendStopOnAaaReject, juniAaaTunnelIgnoreNasPort, juniAaaTunnelIgnoreNasPortType, juniAaaTunnelAssignmentIdFormat, juniAaaSubscriberPseudoCount, juniAaaSubscriberPseudoPeakCount. Removed L2F support from juniAaaAssignDomainTunnelType.', 'Added interface location-relative subscriber management attributes under juniAaaSubscribers. Increase ranges for juniAaaSessionTimeout and juniAaaAcctInterval.', 'Added subscriber management attributes under juniAaaSubscribers, capabilities management attributes under juniAaaCapabilities.', 'Added assignment delimiter attributes: juniAaaAssignDomainDelimiters juniAaaAssignRealmDelimiters juniAaaAssignDomainParseOrder juniAaaTunnelClientName juniAaaTunnelPassword juniAaaTunnelNasPortMethod; also, resized: juniAaaAssignDomainTunnelHostName juniAaaAssignDomainTunnelServerName ', 'Added juniAaaAssignDomainStripDomain', 'Added parameters to the juniAaaAssignDomainTunnelTable: juniAaaAssignDomainTunnelServerName juniAaaAssignDomainTunnelClientAddress Added juniAaaDupAddrCheck, juniAaaIdleTimeout and juniAaaSessionTimeout parameters.', "Added ATM traffic shaping parameters to juniAaaAssignDomainTable. Added juniAaaAssignDomainTunnelTable. Added 'dhcp' as an option for juniAaaAddrAddrPoolDefault; use of the value 'none' has been discontinued. Added statistics to track the performance of AAA.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniAaaMIB.setLastUpdated('200810240916Z')
if mibBuilder.loadTexts: juniAaaMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniAaaMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniAaaMIB.setDescription('The Authentication, Authorization and Accounting (AAA) MIB for the Juniper Networks enterprise.')
class JuniAaaDomainName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'The name of an internet domain. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '63a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 63)

class JuniAaaTunnelGroupName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'The name of a tunnel group. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '63a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 63)

class JuniAaaTunnelSwitchProfileName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'The name of a tunnel switch profile. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '64a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class JuniAaaAuthenticationMethods(TextualConvention, Integer32):
    description = 'The set of configurable authentication choices. The maximum enumerated type will never be greater than 255.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7))
    namedValues = NamedValues(("protocolRadius", 1), ("protocolNone", 4), ("protocolLine", 5), ("protocolTacacsPlus", 6), ("protocolEnable", 7))

class JuniAaaAccountingMethods(TextualConvention, Integer32):
    description = 'The set of configurable accounting choices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4))
    namedValues = NamedValues(("protocolRadius", 1), ("protocolNone", 4))

class JuniAddressAssignType(TextualConvention, Integer32):
    description = 'The set of possible AAA address assignment sources.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("radius", 1), ("localPool", 2), ("dhcp", 3), ("user", 4), ("application", 5), ("localAuthenticationServer", 6), ("notSet", 7))

class JuniSubscriberState(TextualConvention, Bits):
    description = 'The set of possible AAA subscriber states, expressed as a bit map: init Initial state (transient) pending Auth/Acct or Addr Request is pending established Subscriber is authenticated deleting Deletion of subscriber is pending tunneling Subscriber is being tunneled tunnelAcct Tunnel accounting is enabled terminated Subscriber has been terminated counted Subscriber has been counted in statistics clientHandleSet Client handle is assigned to user profile sentAcctStart Start accounting record is requested More than one state bit can be active simultaneously. If no bits are set, the subscriber is in a transient initial state.'
    status = 'current'
    namedValues = NamedValues(("pending", 0), ("established", 1), ("deleting", 2), ("tunneling", 3), ("tunnelAcct", 4), ("terminated", 5), ("counted", 6), ("clientHandleSet", 7), ("sentAcctStart", 8))

class JuniSubscriberClientType(TextualConvention, Integer32):
    description = 'The set of possible AAA subscriber client types: ppp PPP client login Command line interface or SSH ip IP-based application config Locally configured client identity tunnel Tunnel e.g. L2TP other Unspecified client type '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("ppp", 0), ("login", 1), ("ip", 2), ("config", 3), ("tunnel", 4), ("other", 5))

class JuniSubscriberLocationType(TextualConvention, Integer32):
    description = 'Obsolete description of the platform-dependent interpretation of a JuniAtmLocationValue object. This textual convention has been relpaced by Juniper-TC.JuniInterfaceLocationType.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unknown", 0), ("slotPort", 1))

class JuniSubscriberLocationValue(TextualConvention, OctetString):
    description = "Obsolete value of a platform-dependent interface location, represented as an OCTET STRING. A corresponding JuniAtmLocationType object identified the mapping of octets to location elements, e.g. 'slot.port'. This textual convention has been replaced by Juniper-TC.JuniInterfaceLocationValue."
    status = 'obsolete'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class JuniSubscriberInterfaceValue(TextualConvention, OctetString):
    description = 'Value of the sub-interface, represented as an OCTET STRING.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class JuniAaaAuthenticationSubscriberTypes(TextualConvention, Integer32):
    description = 'The set of authentication subscriber types. The maximum enumerated type will never be greater than 255.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ppp", 1), ("atm1483", 2), ("ip", 3), ("tunnel", 4), ("radiusRelay", 5), ("ipsec", 6))

class JuniAaaAccountingSubscriberTypes(TextualConvention, Integer32):
    description = 'The set of accounting subscriber types. The maximum enumerated type will never be greater than 255.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ppp", 1), ("atm1483", 2), ("ip", 3), ("tunnel", 4), ("radiusRelay", 5), ("ipsec", 6))

juniAaaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1))
juniAaaAssignment = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1))
juniAaaAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2))
juniAaaAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3))
juniAaaAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4))
juniAaaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5))
juniAaaTimeout = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6))
juniAaaTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7))
juniAaaSubscribers = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8))
juniAaaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9))
juniAaaAssignGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1))
juniAaaAssignBrasLicense = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignBrasLicense.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignBrasLicense.setDescription('The license string that determines the system-wide maximum number of remote user connections allowed. A zero-length string (no license) prohibits remote user connections.')
juniAaaAssignBrasLicensedUsers = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAssignBrasLicensedUsers.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignBrasLicensedUsers.setDescription('The system-wide maximum number of remote user connections allowed by the currently configured license string.')
juniAaaAssignDomainDelimiters = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignDomainDelimiters.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainDelimiters.setDescription("The list of delimiters used to separate the user's name from the user's domain in the username field. The default is '@'.")
juniAaaAssignRealmDelimiters = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignRealmDelimiters.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignRealmDelimiters.setDescription("The list of delimiters used to separate the user's name from the user's realm in the username field. The realm is treated like the domain in the ERX. The default is none.")
juniAaaAssignDomainParseOrder = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("domainFirst", 1), ("realmFirst", 2))).clone('realmFirst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignDomainParseOrder.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainParseOrder.setDescription("The order in which the user's name is parsed: either search for domain first or realm first in the form (realm/user@domain.com). The default is domain first.")
juniAaaAssignSubscriberLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('users').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignSubscriberLimit.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignSubscriberLimit.setDescription("The maximum number of subscribers permitted in this VR context. The value '0' means no limit.")
juniAaaAssignDomainMaxPadnPerDomain = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAssignDomainMaxPadnPerDomain.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainMaxPadnPerDomain.setDescription('The maximum number of PPPoE active discovery network (PADN) entries permitted in a domain entry.')
juniAaaInterfaceIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("includeSubIntf", 1), ("excludeSubIntf", 2))).clone('includeSubIntf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaInterfaceIdFormat.setStatus('current')
if mibBuilder.loadTexts: juniAaaInterfaceIdFormat.setDescription('The interface ID format: include or exclude sub-interface per VR. The sub-interface is included or excluded at the time of the initial AAA request for the user and remains for the duration of the login.')
juniAaaAssignTunnelCallingNumberFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("descriptive", 1), ("fixed", 2), ("descriptiveIncludeAgentCircuitId", 3), ("descriptiveIncludeAgentRemoteId", 4), ("descriptiveIncludeAgentCircuitIdAndAgentRemoteId", 5), ("agentCircuitId", 6), ("agentRemoteId", 7), ("agentCircuitIdIncludeAgentRemoteId", 8), ("fixedIncludeSvlanId", 9), ("fixedAdapterEmbedded", 10), ("fixedAdapterNewField", 11), ("fixedAdapterEmbeddedIncludeSvlanId", 12), ("fixedAdapterNewFieldIncludeSvlanId", 13))).clone('descriptive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignTunnelCallingNumberFormat.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignTunnelCallingNumberFormat.setDescription('The format of the interface identifier passed to L2TP during an authentication request. L2TP uses this identifier as the calling-number (type 22) attribute value. Note: if selected components of the calling number format are not available (i.e. PPPoE Agent Circuit Id and Agent Remote Id), then the juniAaaAssignTunnelCallingNumberFallbackFormat will be used. Optionally the SVLAN ID inclusion can be enabled')
juniAaaAssignDomainParseDirection = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rightToLeft", 1), ("leftToRight", 2))).clone('rightToLeft')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignDomainParseDirection.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainParseDirection.setDescription("The direction in which the user's name is parsed: either search for domain delimiter from left to right or right to left; first delimiter marks boundry. The default is right to left.")
juniAaaAssignRealmParseDirection = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rightToLeft", 1), ("leftToRight", 2))).clone('leftToRight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignRealmParseDirection.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignRealmParseDirection.setDescription("The direction in which the user's name is parsed: either search for realm delimiter from left to right or right to left; first delimiter marks boundry. The default is left to right.")
juniAaaInterfaceAdapterFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("includeAdapter", 1), ("excludeAdapter", 2))).clone('includeAdapter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaInterfaceAdapterFormat.setStatus('current')
if mibBuilder.loadTexts: juniAaaInterfaceAdapterFormat.setDescription('The interface adapter format: include or exclude the adapter if present field per VR. The adapter field is included or excluded at the time of the initial AAA request for the user and remains for the duration of the login.')
juniAaaAssignAccountingStatisticsType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("uptime", 1))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignAccountingStatisticsType.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignAccountingStatisticsType.setDescription("The method for collecting AAA acounting statistics. When value is 'full', collect a full set of statistics for AAA accounting. When the value is 'uptime', collect only uptime value for AAA accounting.")
juniAaaAssignQosDownstreamRate = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 14), JuniEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignQosDownstreamRate.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignQosDownstreamRate.setDescription('Enables/disables the reporting of the dsl downstream rate information to Qos.')
juniAaaAssignTunnelCallingNumberFormatFallback = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("descriptive", 1), ("fixed", 2), ("fixedIncludeSvlanId", 3), ("fixedAdapterEmbedded", 4), ("fixedAdapterNewField", 5), ("fixedAdapterEmbeddedIncludeSvlanId", 6), ("fixedAdapterNewFieldIncludeSvlanId", 7))).clone('descriptive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAssignTunnelCallingNumberFormatFallback.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignTunnelCallingNumberFormatFallback.setDescription('The fallback format of the interface identifier passed to L2TP during an authentication request. L2TP uses this identifier as the calling-number (type 22) attribute value.')
juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix.setStatus('current')
if mibBuilder.loadTexts: juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix.setDescription('Enables/disables the use of framed-ipv6-prefix RADIUS attribute for IPv6 ND router advertisement.')
juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix.setStatus('current')
if mibBuilder.loadTexts: juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix.setDescription('Enables/disables the use of delegated-ipv6-prefix RADIUS attribute for DHCPv6 prefix delegation.')
juniAaaAssignDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2))
juniAaaAssignDomainTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1), )
if mibBuilder.loadTexts: juniAaaAssignDomainTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTable.setDescription("The entries in this table specify the assignment of a remote access user to a virtual router, based on the user's domain.")
juniAaaAssignDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1), ).setIndexNames((1, "Juniper-AAA-MIB", "juniAaaAssignDomainName"))
if mibBuilder.loadTexts: juniAaaAssignDomainEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainEntry.setDescription('A specification of the virtual router to which users on a specified domain should be assigned.')
juniAaaAssignDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 1), JuniAaaDomainName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAssignDomainName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainName.setDescription('The domain name uniquely identifying this entry.')
juniAaaAssignDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
juniAaaAssignDomainRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 3), JuniName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAssignDomainRouterName.setStatus('deprecated')
if mibBuilder.loadTexts: juniAaaAssignDomainRouterName.setDescription('This variable is replaced by juniAaaAssignDomainAuthRouterName and juniAaaAssignDomainIpRouterName. It returns same value as juniAaaAssignDomainAuthRouterName.')
juniAaaAssignDomainLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32000)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAssignDomainLoopback.setDescription("The number of the loopback interface, associated with the specified virtual router, whose IP address is used as the source address when transmitting IP packets on unnumbered remote access user links. For example, if the associated loopback interface for this domain/router was configured via the console as 'loopback 2', this object would contain the integer value 2. A value of -1 indicates the loopback interface is unspecified.")
juniAaaAssignDomainIpHint = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainIpHint.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainIpHint.setDescription('Enables/disables the IP hint feature, which causes the system to allocate an IP address before going to RADIUS for authentication.')
juniAaaAssignDomainAtmServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("ubr", 1), ("ubrPcr", 2), ("nrtVbr", 3), ("cbr", 4), ("rtVbr", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainAtmServiceLevel.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainAtmServiceLevel.setDescription('The Service category for this circuit: ubr Unspecified bit rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-realtime Variable Bit Rate. cbr Constant bit rate. rtVbr Realtime Variable Bit Rate. Set the service level in combination of the traffic attributes PCR/SCR/MBS in the following matrix for successfull configurations. ServiceLevel PCR SCR MBS ------------------------------------------ ubr omit omit omit ubrPcr must omit omit nrtVbr must must must cbr must omit omit rtVbr must must must ')
juniAaaAssignDomainAtmPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainAtmPcr.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainAtmPcr.setDescription('Peak Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when juniAaaAssignDomainAtmServiceLevel is configured to have one of the following values: ubrPcr nrtVbr cbr ')
juniAaaAssignDomainAtmScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainAtmScr.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainAtmScr.setDescription('Sustained Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when juniAaaAssignDomainAtmServiceLevel is configured to have one of the following values: nrtVbr ')
juniAaaAssignDomainAtmMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainAtmMbs.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainAtmMbs.setDescription('Maximum Burst Size, in cells, of this circuit. This parameter is only required when juniAaaAssugbDomainAtmServiceLevel is configured to have one of the following values: nrtVbr ')
juniAaaAssignDomainOverrideUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainOverrideUserName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainOverrideUserName.setDescription('The override user name associated with this entry. This object is used to override the user name of the remote client.')
juniAaaAssignDomainOverridePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainOverridePassword.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainOverridePassword.setDescription('The override password for the user name defined by juniAaaAssignDomainOverrideUserName. This object is used to override the password part of the username/password pair of the remote client. This value returns a string length of 0 on reads for security reasons.')
juniAaaAssignDomainStripDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainStripDomain.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainStripDomain.setDescription('Enables/disables the domain name stripping feature, which causes the system to strip the domain name before sending the access-request to RADIUS for authentication.')
juniAaaAssignDomainPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainPoolName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPoolName.setDescription('The name of the local address pool from which to allocate an IP address for the subscriber when none is returned from the authentication server.')
juniAaaAssignDomainLocalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainLocalInterface.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainLocalInterface.setDescription('The local interface, associated with the specified virtual router, whose IP address is used as the source address when transmitting IP packets on remote access user links.')
juniAaaAssignDomainIpv6RouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 15), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainIpv6RouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainIpv6RouterName.setDescription('The name of the virtual router to which remote access users within this domain are assigned for IPv6 interfaces.')
juniAaaAssignDomainIpv6LocalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainIpv6LocalInterface.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainIpv6LocalInterface.setDescription('The local interface, associated with the specified virtual router, whose IPv6 address is used as the source address when transmitting IPv6 packets on remote access user links.')
juniAaaAssignDomainTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 17), JuniAaaTunnelGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelGroup.setDescription('The tunnel group assigned to this domain map. Non default configuration of this object cannot coexist with matching tunnel entries in juniAaaAssignDomainTunnelTable. ')
juniAaaAssignDomainAuthRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 18), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainAuthRouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainAuthRouterName.setDescription('The name of the virtual router where remote access users within this domain will be authenticated.')
juniAaaAssignDomainIpRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 19), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainIpRouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainIpRouterName.setDescription('The name of the virtual router to which remote access users within this domain are assigned for IP interfaces.')
juniAaaAssignDomainTunnelSubscriberAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelSubscriberAuthentication.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelSubscriberAuthentication.setDescription('When there are tunnel configurations under this domain, enable or disable subscribers of this domain authenticate with configured authentication server.')
juniAaaAssignDomainBackupPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainBackupPoolName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainBackupPoolName.setDescription('The name of the backup local address pool from which to allocate an IP address for the subscriber when the primary address pool is 100% allocated')
juniAaaAssignDomainTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2), )
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelTable.setDescription('The entries in this table specify the tunnels associated with a domain.')
juniAaaAssignDomainTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), (0, "Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"))
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelEntry.setDescription('A specification of the tunnels associated with a domain.')
juniAaaAssignDomainTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 1), JuniAaaDomainName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelName.setDescription('The domain name associated with this entry.')
juniAaaAssignDomainTunnelTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelTag.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelTag.setDescription('The tunnel tag value associated with this entry.')
juniAaaAssignDomainTunnelPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelPreference.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelPreference.setDescription("The tunnel's preference value associated with this entry. The value 0 is the highest preference.")
juniAaaAssignDomainTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tunnelL2tp", 1), ("tunnelUnknown", 2), ("tunnelL2f", 3))).clone('tunnelL2tp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelType.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelType.setDescription('The tunnel type associated with this entry. Attempts to set this object to tunnelUnknown(2) and tunnelL2f(3) will fail (wrongValue).')
juniAaaAssignDomainTunnelMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnelMediumIPv4", 1), ("tunnelMediumUnknown", 2))).clone('tunnelMediumIPv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelMedium.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelMedium.setDescription('The tunnel medium associated with this entry. The medium dictates the format of the tunnel address. Attempts to set this object to tunnelMediumUnknown(2) will fail (wrongValue).')
juniAaaAssignDomainTunnelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelAddress.setDescription('The tunnel server address associated with this entry. The juniAaaAssignDomainTunnelMedium object defines the format of the address. MEDIUM EXAMPLE FORMAT tunnelMedium_IPv4 xyz.xyz.xyz.xyz ')
juniAaaAssignDomainTunnelPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelPassword.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelPassword.setDescription('The tunnel password associated with this entry. The object returns a null length string on reads due to security concerns.')
juniAaaAssignDomainTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelId.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelId.setDescription('The tunnel identifier associated with this entry. The tunnel identifier is used to distinguish between multiple tunnels to the same juniAaaAssignDomainTunnelAddress.')
juniAaaAssignDomainTunnelHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelHostName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelHostName.setDescription('The tunnel client hostname associated with this entry. This object is analogous to the RADIUS attribute Tunnel-Client-Auth-ID. When a tunnel is established with a peer, this object can be used to distinguish groups of tunnels.')
juniAaaAssignDomainTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
juniAaaAssignDomainTunnelServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelServerName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelServerName.setDescription('The tunnel server hostname associated with this entry. This object is analogous to the RADIUS attribute Tunnel-Server-Auth-ID. When a tunnel is established with a peer, this object can be used to distinguish groups of tunnels.')
juniAaaAssignDomainTunnelClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelClientAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelClientAddress.setDescription('The tunnel client address associated with this entry. The juniAaaAssignDomainTunnelMedium object defines the format of the address. MEDIUM EXAMPLE FORMAT tunnelMedium_IPv4 xyz.xyz.xyz.xyz ')
juniAaaAssignDomainTunnelMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 13), Unsigned32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelMaxSessions.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelMaxSessions.setDescription("The tunnel's max-session value associated with this entry. The value 0 indicates no maximum session value.")
juniAaaAssignDomainTunnelReceiveWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelReceiveWindowSize.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelReceiveWindowSize.setDescription("For an L2TP tunnel this object represents the receive window size. A value of 0 indicates that this object has no effect on the tunnel's receive window size.")
juniAaaAssignDomainTunnelFailoverResync = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("failoverProtocol", 1), ("silentFailover", 2), ("failoverProtocolFallbackToSilentFailover", 3), ("notConfigured", 4))).clone('notConfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelFailoverResync.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelFailoverResync.setDescription('For an L2TP tunnel this object represents the failover resync mechanism: disable(0) - Disable failover resync failoverProtocol(1) - Use the L2TP Failover Protocol silentFailover(2) - Use the JUNOSe Silent Failover Mechanism failoverProtocolFallbackToSilentFailover(3) - (Default) Use the L2TP Failover Protocol and fall back to Silent Failover.')
juniAaaAssignDomainTunnelSwitchProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 16), JuniAaaTunnelSwitchProfileName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelSwitchProfile.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelSwitchProfile.setDescription('The name of the L2TP tunnel switch profile to apply in tunnel switching scenarios.')
juniAaaAssignDomainTunnelTxConnectSpeedMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 0), ("staticLayer2", 1), ("dynamicLayer2", 2), ("qos", 3), ("actual", 4))).clone('notSet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelTxConnectSpeedMethod.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainTunnelTxConnectSpeedMethod.setDescription('For an L2TP tunnel this object represents the tx connect speed method mechanism at the LAC: notSet(0) - this parameter has not been configured staticLayer2(1) - use static layer 2 settings dynamicLayer2(2) - use layer 2 settings including dynamic speeds qos(3) - use qos speed actual(4) - minimum of dynamicLayer2 and qos')
juniAaaAssignDomainPadnTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 3), )
if mibBuilder.loadTexts: juniAaaAssignDomainPadnTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPadnTable.setDescription('The entries in this table specify the PPPoE active discovery network (PADN) parameters associated with a domain.')
juniAaaAssignDomainPadnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 3, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaAssignDomainName"), (0, "Juniper-AAA-MIB", "juniAaaAssignDomainPadnIpAddress"), (0, "Juniper-AAA-MIB", "juniAaaAssignDomainPadnIpMask"))
if mibBuilder.loadTexts: juniAaaAssignDomainPadnEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPadnEntry.setDescription('A specification of the PPPoE active discovery network parameters associated with a domain.')
juniAaaAssignDomainPadnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniAaaAssignDomainPadnIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPadnIpAddress.setDescription('The IP address of this entry.')
juniAaaAssignDomainPadnIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: juniAaaAssignDomainPadnIpMask.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPadnIpMask.setDescription('The IP mask of this entry.')
juniAaaAssignDomainPadnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainPadnRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPadnRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
juniAaaAssignDomainPadnDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaAssignDomainPadnDistance.setStatus('current')
if mibBuilder.loadTexts: juniAaaAssignDomainPadnDistance.setDescription('The administrative distance metric of this entry.')
juniAaaTunnelGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2))
juniAaaTunnelGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 1), )
if mibBuilder.loadTexts: juniAaaTunnelGroupTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTable.setDescription('The entries in this table specify tunnel attributes sufficient tunnel establishment.')
juniAaaTunnelGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 1, 1), ).setIndexNames((1, "Juniper-AAA-MIB", "juniAaaTunnelGroupName"))
if mibBuilder.loadTexts: juniAaaTunnelGroupEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupEntry.setDescription('An entry in the tunnel group table.')
juniAaaTunnelGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 1, 1, 1), JuniAaaTunnelGroupName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaTunnelGroupName.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupName.setDescription('The tunnel group name uniquely identifying this entry.')
juniAaaTunnelGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
juniAaaTunnelGroupTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2), )
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelTable.setDescription('The entries in this table specify the tunnels associated with a tunnel group.')
juniAaaTunnelGroupTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelName"), (0, "Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelTag"))
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelEntry.setDescription('A specification of the tunnels associated with a tunnel group.')
juniAaaTunnelGroupTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 1), JuniAaaTunnelGroupName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelName.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelName.setDescription('The tunnel group name associated with this entry.')
juniAaaTunnelGroupTunnelTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelTag.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelTag.setDescription('The tunnel tag value associated with this entry.')
juniAaaTunnelGroupTunnelPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelPreference.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelPreference.setDescription("The tunnel's preference value associated with this entry. The value 0 is the highest preference.")
juniAaaTunnelGroupTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tunnelL2tp", 1))).clone('tunnelL2tp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelType.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelType.setDescription('The tunnel type associated with this entry.')
juniAaaTunnelGroupTunnelMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnelMediumIPv4", 1), ("tunnelMediumUnknown", 2))).clone('tunnelMediumIPv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelMedium.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelMedium.setDescription('The tunnel medium associated with this entry. The medium dictates the format of the tunnel address. Attempts to set this object to tunnelMediumUnknown(2) will fail (wrongValue).')
juniAaaTunnelGroupTunnelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelAddress.setDescription('The tunnel server address associated with this entry. The juniAaaTunnelGroupTunnelMedium object defines the format of the address. MEDIUM EXAMPLE FORMAT tunnelMedium_IPv4 xyz.xyz.xyz.xyz ')
juniAaaTunnelGroupTunnelPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelPassword.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelPassword.setDescription('The tunnel password associated with this entry. The object returns a null length string on reads due to security concerns.')
juniAaaTunnelGroupTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelId.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelId.setDescription('The tunnel identifier associated with this entry. The tunnel identifier is used to distinguish between multiple tunnels to the same juniAaaTunnelGroupTunnelAddress.')
juniAaaTunnelGroupTunnelHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelHostName.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelHostName.setDescription('The tunnel client hostname associated with this entry. This object is analogous to the RADIUS attribute Tunnel-Client-Auth-ID. When a tunnel is established with a peer, this object can be used to distinguish groups of tunnels.')
juniAaaTunnelGroupTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
juniAaaTunnelGroupTunnelServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelServerName.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelServerName.setDescription('The tunnel server hostname associated with this entry. This object is analogous to the RADIUS attribute Tunnel-Server-Auth-ID. When a tunnel is established with a peer, this object can be used to distinguish groups of tunnels.')
juniAaaTunnelGroupTunnelClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelClientAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelClientAddress.setDescription('The tunnel client address associated with this entry. The juniAaaTunnelGroupTunnelMedium object defines the format of the address. MEDIUM EXAMPLE FORMAT tunnelMedium_IPv4 xyz.xyz.xyz.xyz ')
juniAaaTunnelGroupTunnelMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 13), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelMaxSessions.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelMaxSessions.setDescription("The tunnel's max-session value associated with this entry. The value 0 indicates no maximum session value.")
juniAaaTunnelGroupTunnelReceiveWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelReceiveWindowSize.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelReceiveWindowSize.setDescription("For an L2TP tunnel this object represents the receive window size. A value of 0 indicates that this object has no effect on the tunnel's receive window size.")
juniAaaTunnelGroupTunnelRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 15), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelRouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelRouterName.setDescription('The name of the virtual router to which remote access users within this tunnel are assigned.')
juniAaaTunnelGroupTunnelFailoverResync = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("failoverProtocol", 1), ("silentFailover", 2), ("failoverProtocolFallbackToSilentFailover", 3), ("notConfigured", 4))).clone('notConfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelFailoverResync.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelFailoverResync.setDescription('For an L2TP tunnel this object represents the failover resync mechanism: disable(0) - Disable failover resync failoverProtocol(1) - Use the L2TP Failover Protocol silentFailover(2) - Use the JUNOSe Silent Failover Mechanism failoverProtocolFallbackToSilentFailover(3) - (Default) Use the L2TP Failover Protocol and fall back to Silent Failover.')
juniAaaTunnelGroupTunnelSwitchProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 17), JuniAaaTunnelSwitchProfileName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelSwitchProfile.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelSwitchProfile.setDescription('The name of the L2TP tunnel switch profile to apply in tunnel switching scenarios.')
juniAaaTunnelGroupTunnelTxConnectSpeedMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 0), ("staticLayer2", 1), ("dynamicLayer2", 2), ("qos", 3), ("actual", 4))).clone('notSet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelTxConnectSpeedMethod.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroupTunnelTxConnectSpeedMethod.setDescription('For an L2TP tunnel this object represents the tx connect speed method mechanism at the LAC: notSet(0) - this parameter has not been configured staticLayer2(1) - use static layer 2 settings dynamicLayer2(2) - use layer 2 settings including dynamic speeds qos(3) - use qos speed actual(4) - minimum of dynamicLayer2 and qos')
juniAaaAuthGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1))
juniAaaLocalAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2))
juniAaaLocalAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1))
juniAaaLocalAuthUserDb = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 2))
juniAaaLocalAuthUserDbAssoc = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 3))
juniAaaAuthMethods = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAuthMethods.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAuthMethods.setDescription('The set of authentication protocols configured on this system. Each octet in this object contains one of the values defined in the JuniAaaAuthenticationMethods TEXTUAL-CONVENTION. The system will sequence through each octet of this object starting at octet 1 and attempt to use the corresponding authentication protocol defined by JuniAaaAuthenticationMethods. Note that if the octet is set to: protocolNone(4) Then authentication does not take place. If an authentication protocol is configured and attempts to reach the authentication server fail, the system will move to the next octet in this object and retry the authentication in the form dictated by the corresponding authentication protocoltype. The process of sequencing thru each octet will stop if the authentication server is successfully contacted, or there are no more configured octets in this object.')
juniAaaAuthMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1, 2), )
if mibBuilder.loadTexts: juniAaaAuthMethodsTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaAuthMethodsTable.setDescription('The entries in this table specify the assignment of authentication methods for a particular subscriber type.')
juniAaaAuthMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1, 2, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaAuthMethodsSubscriberType"))
if mibBuilder.loadTexts: juniAaaAuthMethodsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaAuthMethodsEntry.setDescription('A specification of the authentication methods for a particular subscriber type.')
juniAaaAuthMethodsSubscriberType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1, 2, 1, 1), JuniAaaAuthenticationSubscriberTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAuthMethodsSubscriberType.setStatus('current')
if mibBuilder.loadTexts: juniAaaAuthMethodsSubscriberType.setDescription('The subscriber type.')
juniAaaAuthMethodsAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAuthMethodsAuthentication.setStatus('current')
if mibBuilder.loadTexts: juniAaaAuthMethodsAuthentication.setDescription('The set of authentication protocols configured on this system. Each octet in this object contains one of the values defined in the JuniAaaAuthenticationMethods TEXTUAL-CONVENTION. The system will sequence through each octet of this object starting at octet 1 and attempt to use the corresponding authentication protocol defined by JuniAaaAuthenticationMethods. Note that if the octet is set to: protocolNone(4) Then authentication does not take place. If an authentication protocol is configured and attempts to reach the authentication server fail, the system will move to the next octet in this object and retry the authentication in the form dictated by the corresponding authentication protocoltype. The process of sequencing thru each octet will stop if the authentication server is successfully contacted, or there are no more configured octets in this object.')
juniAaaLocalAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: juniAaaLocalAuthUserTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserTable.setDescription('This table contains entries for users present in the local user databases.')
juniAaaLocalAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaLocalAuthUserDbName"), (1, "Juniper-AAA-MIB", "juniAaaLocalAuthUserName"))
if mibBuilder.loadTexts: juniAaaLocalAuthUserEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserEntry.setDescription('Each entry in this table represents a single user in a local user database.')
juniAaaLocalAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: juniAaaLocalAuthUserName.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserName.setDescription('The name of the user.')
juniAaaLocalAuthUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserRowStatus.setDescription("Controls creation/deletion of entries in this table. Only 'createAndGo' and 'destroy' enumeration values are supported.")
juniAaaLocalAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserPassword.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserPassword.setDescription('The password for this user. If the juniAaaLocalAuthUserEncrypted object is not set with this object, the password value is assumed to be unencrypted. When set, any existing password is overwritten. Setting a zero length OCTET STRING removes the password. Reading this object always results in a zero length OCTET STRING.')
juniAaaLocalAuthUserEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 8))).clone(namedValues=NamedValues(("encryptionNone", 0), ("encryptionSecret", 5), ("encryptionPassword", 8))).clone('encryptionNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserEncryption.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserEncryption.setDescription('The encryption type of the password value being set with the juniAaaLocalAuthUserPassword object. Reading this object always results in a value of encryptionNone. encyptionNone - The password is unencrypted (i.e. in plain text.) encyptionSecret - The password has been generated using a one-way MD5 encryption mechanism, algorithm 5. encyptionPassword - The password has been generated using a two-way encryption mechanism, algorithm 8.')
juniAaaLocalAuthUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserIpAddress.setDescription('The IP address this user is to be assigned, once authenticated. This object corresponds to the Framed-IP-Address attribute in RADIUS authentication servers.')
juniAaaLocalAuthUserIpAddressPool = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserIpAddressPool.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserIpAddressPool.setDescription('The name of the local address pool this user is to be allocated an IP address from, once authenticated. This object corresponds to the Framed-Pool attribute in RADIUS authentication servers.')
juniAaaLocalAuthUserRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 1, 1, 1, 7), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserRouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserRouterName.setDescription('The name of the router this user is to be assigned to, once authenticated. This object corresponds to the Unispher-Virtual-Router attribute in RADIUS authentication servers.')
juniAaaLocalAuthUserDbTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbTable.setDescription('This table contains entries for local user databases.')
juniAaaLocalAuthUserDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 2, 1, 1), ).setIndexNames((1, "Juniper-AAA-MIB", "juniAaaLocalAuthUserDbName"))
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbEntry.setDescription('Each entry in this table represents a single local user database.')
juniAaaLocalAuthUserDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbName.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbName.setDescription('The name of this local user database.')
juniAaaLocalAuthUserDbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbRowStatus.setDescription("Controls creation/deletion of entries in this table. Only 'createAndGo' and 'destroy' enumeration values are supported.")
juniAaaLocalAuthUserDbAssocTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 3, 1), )
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocTable.setDescription('This table contains entries that identify the local user database that is associated with each virtual router.')
juniAaaLocalAuthUserDbAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 3, 1, 1), ).setIndexNames((0, "Juniper-ROUTER-MIB", "juniRouterIndex"))
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocEntry.setDescription('Each entry in this table represents a single association between a virtual router and local user database. The same database can be referenced by multiple virtual routers; however, a virtual router can reference only one database. No entries are displayed for virtual routers that reference the default local user database.')
juniAaaLocalAuthUserDbAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocRowStatus.setDescription("Controls creation/deletion of entries in this table. Only 'createAndGo' and 'destroy' enumeration values are supported. When a virtual router is deleted, its corresponding entries in this table will be deleted as well.")
juniAaaLocalAuthUserDbAssocDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocDbName.setStatus('current')
if mibBuilder.loadTexts: juniAaaLocalAuthUserDbAssocDbName.setDescription("The name of local user database associated with this virtual router. Setting the name to the default local user database, 'default', will delete this entry, as this is the default association for all virtual routers.")
juniAaaAcctGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1))
juniAaaAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 86400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctInterval.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctInterval.setDescription('The interval that must elapse between generation of accounting reports, ranging from 10 minutes to 24 hours, or disabled if set to zero. The set of this object affects both the juniAaaServiceAcctInterval and juniAaaUserAcctInterval values; the get of this object returns only the juniAaaUserAcctInterval value.')
juniAaaAcctDupServerRouterName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 2), JuniName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctDupServerRouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctDupServerRouterName.setDescription('The name of another router on this system to which accounting reports should be sent, in addition to or instead of sending accounting reports to the accounting service (if any) configured on the current router (i.e., the router context within which this object instance exists). A zero-length name disables this mechanism.')
juniAaaAcctMethods = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctMethods.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAcctMethods.setDescription('The set of accounting protocols configured on this system. Each octet in this object contains one of the values defined in the JuniAaaAccountingMethods TEXTUAL CONVENTION. The system will sequence through each octet of this object starting at octet 1 and attempt to use the corresponding accounting protocol defined by JuniAaaAccountingMethods. Note that if the octet is set to: protocolNone(4) Then accounting is disabled. If an accounting protocol is configured and reports are not successfully generated, the system will move to the next octet in this object and repeat the attempt to generate an accounting report in the form dictated by the corresponding accounting protocol type. The process of sequencing thru each octet will stop if accounting reports are either successfully generated, or there are no more configured octets in this object.')
juniAaaAcctSendStopOnAaaDeny = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctSendStopOnAaaDeny.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctSendStopOnAaaDeny.setDescription('Enables/disables the accounting stop message sent to the accounting server when authentication server grants access, but AAA denies access.')
juniAaaAcctSendStopOnAaaReject = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctSendStopOnAaaReject.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctSendStopOnAaaReject.setDescription('Enables/disables the accounting stop message sent to the accounting server when authentication server denies access.')
juniAaaAcctSendImmediateAcctUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctSendImmediateAcctUpdate.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctSendImmediateAcctUpdate.setDescription("Enables/disables the sending of an accounting update with the client's IP address upon receipt of accounting start response.")
juniAaaAcctMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 7), )
if mibBuilder.loadTexts: juniAaaAcctMethodsTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctMethodsTable.setDescription('The entries in this table specify the assignment of accounting methods for a particular subscriber type.')
juniAaaAcctMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 7, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaAcctMethodsSubscriberType"))
if mibBuilder.loadTexts: juniAaaAcctMethodsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctMethodsEntry.setDescription('A specification of the accounting methods for a particular subscriber type.')
juniAaaAcctMethodsSubscriberType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 7, 1, 1), JuniAaaAccountingSubscriberTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAcctMethodsSubscriberType.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctMethodsSubscriberType.setDescription('The subscriber type.')
juniAaaAcctMethodsAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctMethodsAccounting.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctMethodsAccounting.setDescription('The set of accounting protocols configured on this system. Each octet in this object contains one of the values defined in the JuniAaaAccountingMethods TEXTUAL CONVENTION. The system will sequence through each octet of this object starting at octet 1 and attempt to use the corresponding accounting protocol defined by JuniAaaAccountingMethods. Note that if the octet is set to: protocolNone(4) Then accounting is disabled. If an accounting protocol is configured and reports are not successfully generated, the system will move to the next octet in this object and repeat the attempt to generate an accounting report in the form dictated by the corresponding accounting protocol type. The process of sequencing thru each octet will stop if accounting reports are either successfully generated, or there are no more configured octets in this object.')
juniAaaAcctBcastServerGroupName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 8), JuniVrfGroupName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupName.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupName.setDescription('The name of a group of other routers on this system to which accounting reports should be sent, for every subsriber who has this router assigned as an operational router. A zero-length name disables this mechanism.')
juniAaaUserAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 86400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaUserAcctInterval.setStatus('current')
if mibBuilder.loadTexts: juniAaaUserAcctInterval.setDescription('The interval that must elapse between generation of user accounting reports, ranging from 10 minutes to 24 hours, or disabled if set to zero.')
juniAaaServiceAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 86400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaServiceAcctInterval.setStatus('current')
if mibBuilder.loadTexts: juniAaaServiceAcctInterval.setDescription('The interval that must elapse between generation of service accounting reports, ranging from 10 minutes to 24 hours, or disabled if set to zero.')
juniAaaAcctBcastConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2))
juniAaaAcctBcastServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1), )
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupTable.setDescription('The entries in this table specify broadcast accounting routers of the named group. In addition to row status operations if juniAaaAcctBrasServerGroupRouter1, juniAaaAcctBrasServerGroupRouter2, juniAaaAcctBrasServerGroupRouter3 and juniAaaAcctBrasServerGroupRouter4 are all set zero length strings, the entry will be deleted. At least one non zero length string router is required to successfully create and entry. All non zero length string routers have to be unique within the group.')
juniAaaAcctBcastServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaAcctBcastServerGroup"))
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupEntry.setDescription('A specification of the accounting servers for a particular group.')
juniAaaAcctBcastServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1, 1), JuniVrfGroupName())
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroup.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroup.setDescription('The group name.')
juniAaaAcctBcastServerGroupRouter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1, 2), JuniName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter1.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter1.setDescription('The name of the first router in the group.')
juniAaaAcctBcastServerGroupRouter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1, 3), JuniName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter2.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter2.setDescription('The name of the second router in the group.')
juniAaaAcctBcastServerGroupRouter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1, 4), JuniName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter3.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter3.setDescription('The name of the third router in the group.')
juniAaaAcctBcastServerGroupRouter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1, 5), JuniName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter4.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRouter4.setDescription('The name of the third router in the group.')
juniAaaAcctBcastServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 2, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaAcctBcastServerGroupRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET. In addition to row status operations if juniAaaAcctBrasServerGroupRouter1, juniAaaAcctBrasServerGroupRouter2, juniAaaAcctBrasServerGroupRouter3 and juniAaaAcctBrasServerGroupRouter4 are all set zero length strings, the entry will be deleted. At least one non zero length string router is required to successfully create and entry.")
juniAaaAddrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 1))
juniAaaAddrPoolDefault = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrPoolDefault.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrPoolDefault.setDescription("Identifies the default source of IP address allocation for remote access links: none No address source is specified. Using this setting allows the remote PPP subscriber (client) to set it's own address. local Use the local address pool named 'default'. dhcp Use DHCP service.")
juniAaaDupAddrCheck = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaDupAddrCheck.setStatus('current')
if mibBuilder.loadTexts: juniAaaDupAddrCheck.setDescription("Enables/disables the duplicate IP address checking which causes the system to check the route table for the PPP user's dynamic IP address is provided to PPP (from AAA).")
juniAaaAddrNameServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2))
juniAaaAddrDns = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1))
juniAaaAddrWins = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 2))
juniAaaAddrDnsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrDnsPrimary.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrDnsPrimary.setDescription('The IP address of the primary DNS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
juniAaaAddrDnsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrDnsSecondary.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrDnsSecondary.setDescription('The IP address of the secondary DNS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
juniAaaAddrIpv6DnsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrIpv6DnsPrimary.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrIpv6DnsPrimary.setDescription('The IPv6 address of the primary IPv6 DNS server to be used by remote access clients. A value of ::0 indicates no server is configured.')
juniAaaAddrIpv6DnsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrIpv6DnsSecondary.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrIpv6DnsSecondary.setDescription('The IPv6 address of the secondary IPv6 DNS server to be used by remote access clients. A value of ::0 indicates no server is configured.')
juniAaaAddrWinsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrWinsPrimary.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrWinsPrimary.setDescription('The IP address of the primary WINS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
juniAaaAddrWinsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaAddrWinsSecondary.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddrWinsSecondary.setDescription('The IP address of the secondary WINS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
juniAaaTimeoutGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1))
juniAaaIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 86400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: juniAaaIdleTimeout.setDescription('The maximum number of seconds that a user session can be idle before system disconnects the user, ranging from 300 to 86400 seconds, 0 disables idle timeout.')
juniAaaSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 31622400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: juniAaaSessionTimeout.setDescription('The maximum number of seconds that a user session can be established before system disconnects the user, ranging from 60 to 31622400 seconds. 0 specifies that a default value should be used, according to the rules of the implementing interface.')
juniAaaMonitorIngressTrafficOnly = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1, 3), JuniEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaMonitorIngressTrafficOnly.setStatus('current')
if mibBuilder.loadTexts: juniAaaMonitorIngressTrafficOnly.setDescription('Enables/disables the monitoring of ingress traffic. Inactive sessions are disconnected after a period, specified in juniAaaIdleTimeout. Inactivity is determined by both inbound and outbound traffic. If this option is enabled, only ingress traffic is monitored for determining session inactivity.')
juniAaaTunnelGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1))
juniAaaTunnelClientName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelClientName.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelClientName.setDescription('The default tunnel client hostname associated with this virtual router. This object is used when no tunnel client name (client auth ID) is supplied in the authentication response.')
juniAaaTunnelPassword = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelPassword.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelPassword.setDescription('The default tunnel password associated with this virtual router. This object is used when no tunnel password is supplied in the authentication response. The object returns a null length string on reads due to security concerns.')
juniAaaTunnelNasPortMethod = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("ciscoAvp", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelNasPortMethod.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelNasPortMethod.setDescription("The default tunnel NAS-port method associated with this virtual router. This object is used to specify the LAC's NAS-port method. This provides limit compatiability to Cisco LNS for the NAS-port method AVP.")
juniAaaTunnelIgnoreNasPort = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelIgnoreNasPort.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelIgnoreNasPort.setDescription('Enables/disables the use of the NAS-port value that is passed in from the tunnel application.')
juniAaaTunnelIgnoreNasPortType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelIgnoreNasPortType.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelIgnoreNasPortType.setDescription('Enables/disables the use of the NAS-port-type value that is passed in from the tunnel application.')
juniAaaTunnelAssignmentIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("assignmentId", 0), ("clientServerId", 1))).clone('assignmentId')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelAssignmentIdFormat.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelAssignmentIdFormat.setDescription('The tunnel assignment ID format for distinguishing tunnel definitions. This object is used to specify the tunnel assigment ID format passed to the LAC. The value assignmentId(0) indicates that the original tunnel assignment ID value is to be used; clientServerId(1) indicates that the concatenated value from client-auth-name, server-auth-name, and assignment-id is to be used.')
juniAaaTunnelSwitchProfile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 7), JuniAaaTunnelSwitchProfileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelSwitchProfile.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelSwitchProfile.setDescription('The default tunnel switch profile associated with this virtual router. This object is used when no tunnel switch profile is supplied in the authentication response.')
juniAaaTunnelTxConnectSpeedMethod = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 0), ("staticLayer2", 1), ("dynamicLayer2", 2), ("qos", 3), ("actual", 4))).clone('notSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaTunnelTxConnectSpeedMethod.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelTxConnectSpeedMethod.setDescription("The default tunnel tx connect speed method associated with this virtual router. This object is used to specify the LAC's tx connect speed method.")
juniAaaIncomingInitiateRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingInitiateRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingInitiateRequests.setDescription('The number of AAA incoming initiate requests')
juniAaaIncomingTerminateRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingTerminateRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingTerminateRequests.setDescription('The number of AAA incomining termination requests')
juniAaaOutgoingTunnelGrantResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingTunnelGrantResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingTunnelGrantResponses.setDescription('The number of AAA outgoing tunnel grant responses')
juniAaaOutgoingGrantResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingGrantResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingGrantResponses.setDescription('The number of AAA outgoing grant responses')
juniAaaOutgoingDenyResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingDenyResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingDenyResponses.setDescription('The number of AAA outgoing deny responses')
juniAaaOutgoingErrorResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingErrorResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingErrorResponses.setDescription('The number of AAA outgoing error responses')
juniAaaOutgoingAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingAuthRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingAuthRequests.setDescription('The number of AAA outgoing authentication requests')
juniAaaIncomingAuthResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingAuthResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingAuthResponses.setDescription('The number of AAA incoming authentication responses')
juniAaaOutgoingReAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingReAuthRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingReAuthRequests.setDescription('The number of AAA outgoing re-authentication requests')
juniAaaIncomingReAuthResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingReAuthResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingReAuthResponses.setDescription('The number of AAA incoming re-authentication responses')
juniAaaOutgoingAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingAcctRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingAcctRequests.setDescription('The number of AAA outgoing accounting requests')
juniAaaIncomingAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingAcctResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingAcctResponses.setDescription('The number of AAA incoming accounting responses')
juniAaaOutgoingDupAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingDupAcctRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingDupAcctRequests.setDescription('The number of AAA outgoing duplicate accounting requests')
juniAaaIncomingDupAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingDupAcctResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingDupAcctResponses.setDescription('The number of AAA incoing duplication accounting responses')
juniAaaOutgoingAddrRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingAddrRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingAddrRequests.setDescription('The number of AAA outgoing address requests')
juniAaaIncomingAddrResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingAddrResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingAddrResponses.setDescription('The number of AAA incoming address responses')
juniAaaOutgoingBcastAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaOutgoingBcastAcctRequests.setStatus('current')
if mibBuilder.loadTexts: juniAaaOutgoingBcastAcctRequests.setDescription('The number of AAA outgoing broadcast accounting requests')
juniAaaIncomingBcastAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaIncomingBcastAcctResponses.setStatus('current')
if mibBuilder.loadTexts: juniAaaIncomingBcastAcctResponses.setDescription('The number of AAA incoing broadcast accounting responses')
juniAaaSubscriberMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberMaxCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberMaxCount.setDescription('The configuration setting for the maximum number of subscribers. There is a grace number of subscribers above this limit, which when reached will cause authentication requests to be denied.')
juniAaaSubscriberPeakCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberPeakCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberPeakCount.setDescription('The peak number of subscribers. The peak count includes successfully authenticated subscribers as well as those subscribers in the process of being authenticated.')
juniAaaSubscriberCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberCount.setDescription('The current number of subscribers. The subscriber count includes successfully authenticated subscribers as well as those subscribers in the process of being authenticated.')
juniAaaSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4), )
if mibBuilder.loadTexts: juniAaaSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberTable.setDescription('The entries in this table represent subscribers by subscriber handle value.')
juniAaaSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberHandle"))
if mibBuilder.loadTexts: juniAaaSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberEntry.setDescription('A specification of subscribers by subscriber handle.')
juniAaaSubscriberHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberHandle.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberHandle.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotomically increasing integer.')
juniAaaSubscriberUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberUserName.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberUserName.setDescription('The RADIUS userName associated with this subscriber.')
juniAaaSubscriberRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 3), JuniName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberRouterName.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterName.setDescription('The virtual router assigned to this subscriber.')
juniAaaSubscriberRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterIndex.setDescription('The router index that identifies the virtual router associated with this subscriber. The value of this object can be used to index the router in the juniRouterTable.')
juniAaaSubscriberLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberLoginTime.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLoginTime.setDescription('The time this subscriber logged in to RADIUS server.')
juniAaaSubscriberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpAddress.setDescription('The client IP Address assigned to this subscriber.')
juniAaaSubscriberIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpAddressMask.setDescription('The client IP Address Mask assigned to this subscriber.')
juniAaaSubscriberAddrAssignType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 8), JuniAddressAssignType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberAddrAssignType.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberAddrAssignType.setDescription('The address assignment type for this subscriber.')
juniAaaSubscriberInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceId.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceId.setDescription("A text string describing the local interface associated with this subscriber. Types/formats/examples for this string include: ERX: <portLocation> == <slot>/<port>; E320: <portLocation> == <slot>/<adapter>/<port>; ATM Virtual Circuit atm <portLocation>:<vpi>.<vci> 'atm 3/2:0.100' (ERX) 'atm 3/0/2:0.100' (E320) Ethernet { fastEthernet | gigabitEthernet } <portLocation> 'fastEthernet 3/2' (ERX) 'gigabitEthernet 3/2' (ERX) 'gigabitEthernet 3/0/2' (E320) 'tenGigabitEthernet 3/0/2' (E320) Ethernet VLAN { fastEthernet | gigabitEthernet } <portLocation>:<vlanID> 'fastEthernet 3/2:1000' (ERX) 'gigabitEthernet 3/2:1000' (ERX) 'gigabitEthernet 3/0/2:1000' (E320) 'tenGigabitEthernet 3/0/2:1000' (E320) Channelized Serial serial <portLocation>:<channelSpecifier>[/<channelSpecifier>]* 'serial 3/2:4' (ERX T1/E1) 'serial 3/2:2/4' (ERX T3/E3) 'serial 3/2:2/1/1/4' (ERX OC3/OC12 - channelized DS3) 'serial 3/2:2/1/1/1/4' (ERX OC3/OC12 - virtual tributaries) 'serial 3/0/2:2/1/1/4' (E320 OC3/OC12 - channelized DS3) 'serial 3/0/2:2/1/1/1/4' (E320 OC3/OC12 - virtual tributaries) L2TP over IP ip:<localIpAddr>:<peerIpAddr>:<localTunnelID>:<peerTunnelID>: <localSessionID>:<peerSessionID>:<callSerialNumber> 'ip:10.10.0.1:20.20.0.2:1234:5678:9abc:def0:6789abcd' (Note: tunnelIDs, sessionIDs, and callSerialNumber are in hexadecimal.) Other formats may be supported over time.")
juniAaaSubscriberState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 10), JuniSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberState.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberState.setDescription('The state of this subscriber.')
juniAaaSubscriberClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 11), JuniSubscriberClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberClientType.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberClientType.setDescription("The client type for this subscriber. Certain client types (e.g., 'other') might be suppressed from representation in this table.")
juniAaaSubscriberIngressPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIngressPolicyName.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIngressPolicyName.setDescription('The Ingress Policy Name associated with this subscriber.')
juniAaaSubscriberEgressPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberEgressPolicyName.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberEgressPolicyName.setDescription('The Egress Policy Name associated with this subscriber.')
juniAaaSubscriberQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberQosProfileName.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberQosProfileName.setDescription('The QoS Profile Name associated with this subscriber.')
juniAaaSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAaaSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRowStatus.setDescription("Controls the deletion of the subscriber from this table. Deletion of the subscriber is analogous to logging the subscriber out of the network. Note: only 'destroy' is supported for SNMP SET operations.")
juniAaaSubscriberIpv6RouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIpv6RouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpv6RouterIndex.setDescription("The router index that identifies the virtual router associated with this subscriber's IPv6 interface. The value of this object can be used to index the router in the juniRouterTable.")
juniAaaSubscriberIpv6AddrIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 17), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrIfIdentifier.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrIfIdentifier.setDescription('The client IPv6 Address Interface Identifier assigned to this subscriber.')
juniAaaSubscriberRouterSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5), )
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryTable.setDescription('The entries in this table report number of subscribers per router.')
juniAaaSubscriberRouterSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberRouterSummaryRouterIndex"))
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryEntry.setDescription('A specification of subscribers for a router.')
juniAaaSubscriberRouterSummaryRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryRouterIndex.setReference('Juniper-ROUTER-MIB')
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryRouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router mib.')
juniAaaSubscriberRouterSummaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterSummaryCount.setDescription('The number of subscribers on this router.')
juniAaaSubscriberRouterTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6), )
if mibBuilder.loadTexts: juniAaaSubscriberRouterTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterTable.setDescription('The entries in this table sort subscribers by router ID.')
juniAaaSubscriberRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberRouterRouterIndex"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberRouterHandle"))
if mibBuilder.loadTexts: juniAaaSubscriberRouterEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterEntry.setDescription('A specification of subscribers by router ID.')
juniAaaSubscriberRouterRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberRouterRouterIndex.setReference('Juniper-ROUTER-MIB')
if mibBuilder.loadTexts: juniAaaSubscriberRouterRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterRouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router MIB.')
juniAaaSubscriberRouterHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberRouterHandle.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterHandle.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing integer.')
juniAaaSubscriberRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberRouterRowStatus.setDescription("Always has value 'active'.")
juniAaaSubscriberLocationType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 7), JuniInterfaceLocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberLocationType.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationType.setDescription("Describes the interpretation of JuniInterfaceLocationValue object values into platform-dependent interface location components, e.g., 'slot.port' on an ERX.")
juniAaaSubscriberLocationSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8), )
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryTable.setDescription('The entries in this table report number of subscribers per interface location.')
juniAaaSubscriberLocationSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberLocationSummaryLocationIndex"))
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryEntry.setDescription('A specification of subscribers on an interface location.')
juniAaaSubscriberLocationSummaryLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8, 1, 1), JuniInterfaceLocationValue())
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryLocationIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryLocationIndex.setDescription('The value of a platform interface location.')
juniAaaSubscriberLocationSummaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationSummaryCount.setDescription('The number of subscribers associated with this interface location.')
juniAaaSubscriberLocationTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9), )
if mibBuilder.loadTexts: juniAaaSubscriberLocationTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationTable.setDescription('The entries in this table sort subscribers by interface location.')
juniAaaSubscriberLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberLocationLocationIndex"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberLocationHandle"))
if mibBuilder.loadTexts: juniAaaSubscriberLocationEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationEntry.setDescription('An association of a subscriber to an interface location.')
juniAaaSubscriberLocationLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1, 1), JuniInterfaceLocationValue())
if mibBuilder.loadTexts: juniAaaSubscriberLocationLocationIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationLocationIndex.setDescription('The value of a platform interface location.')
juniAaaSubscriberLocationHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberLocationHandle.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationHandle.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing integer.')
juniAaaSubscriberLocationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberLocationRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberLocationRowStatus.setDescription("Always has value 'active'.")
juniAaaSubscriberPseudoPeakCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberPseudoPeakCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberPseudoPeakCount.setDescription('The peak number of pseudo-subscribers. The peak count includes successfully authenticated pseudo-subscribers as well as those pseudo-subscribers in the process of being authenticated. Pseudo-subscribers are those whose identities are locally configured on a dynamic link (e.g. an ATM subinterface) via the (imprecisely named) Juniper-SUBSCRIBER-MIB. Some links (e.g. IPoA) provide no link protocol with which to query the identity of a remote user. In such a case, a locally configured pseudo-subscriber can be used to conduct AAA authentication-based configuration of the dynamic link when it becomes active. Pseudo-subscribers are understood to be intended more for dynamic configuration than for actually identifying the remote user. Consequently, the pseudo-subscribers are not reflected in any of the subscriber tables defined in this MIB.')
juniAaaSubscriberPseudoCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberPseudoCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberPseudoCount.setDescription('The current number of pseudo-subscribers. The pseudo-subscriber count includes successfully authenticated subscribers as well as those subscribers in the process of being authenticated. Pseudo-subscribers are those whose identities are locally configured on a dynamic link (e.g. an ATM subinterface) via the (imprecisely named) Juniper-SUBSCRIBER-MIB. Some links (e.g. IPoA) provide no link protocol with which to query the identity of a remote user. In such a case, a locally configured pseudo-subscriber can be used to conduct AAA authentication-based configuration of the dynamic link when it becomes active. Pseudo-subscribers are understood to be intended more for dynamic configuration than for actually identifying the remote user. Consequently, the pseudo-subscribers are not reflected in any of the subscriber tables defined in this MIB.')
juniAaaSubscriberIpv6AddrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 12), )
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefixTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefixTable.setDescription('The entries in this table represent IPv6 Address Prefixes by subscriber handle value.')
juniAaaSubscriberIpv6AddrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 12, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberHandle"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrPrefix"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrPrefixSize"))
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefixEntry.setDescription('A specification of IPv6 Address Prefixes by subscriber handle.')
juniAaaSubscriberIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 12, 1, 1), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefix.setDescription('The client IPv6 Address Prefix assigned to this subscriber.')
juniAaaSubscriberIpv6AddrPrefixSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefixSize.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberIpv6AddrPrefixSize.setDescription('The size of the client IPv6 Address Prefix assigned to this subscriber.')
juniAaaSubscriberExtTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13), )
if mibBuilder.loadTexts: juniAaaSubscriberExtTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtTable.setDescription('The entries in this table represent subscribers extension attributes by subscriber handle value.')
juniAaaSubscriberInterfaceSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 14), )
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryTable.setDescription('The entries in this table report number of subscribers per subscriber interface which includes the port type (1 = atm; 2 = ethernet), slot, port and sub-interface.')
juniAaaSubscriberInterfaceSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 14, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberInterfaceSummaryIndex"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberSubInterfaceSummaryIndex"))
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryEntry.setDescription('A specification of subscribers on an subscriber interface.')
juniAaaSubscriberInterfaceSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 14, 1, 1), JuniSubscriberInterfaceValue())
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryIndex.setDescription('The value of a subscriber interface.')
juniAaaSubscriberSubInterfaceSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 14, 1, 2), Integer32())
if mibBuilder.loadTexts: juniAaaSubscriberSubInterfaceSummaryIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSubInterfaceSummaryIndex.setDescription('The value of a subscriber sub-interface.')
juniAaaSubscriberInterfaceSummaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceSummaryCount.setDescription('The number of subscribers associated with this subscriber interface.')
juniAaaSubscriberInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 15), )
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceTable.setDescription('The subscriber entries in this table sorted by subscriber interface.')
juniAaaSubscriberInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 15, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberInterfaceIndex"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberSubInterfaceIndex"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberInterfaceHandle"))
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceEntry.setDescription('An association of a subscriber to a subscriber interface.')
juniAaaSubscriberInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 15, 1, 1), JuniSubscriberInterfaceValue())
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceIndex.setDescription('The value of a subscriber interface. This includes the port type (1 = ATM; 2 = Ethernet), slot, port, and sub-interface.')
juniAaaSubscriberSubInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 15, 1, 2), Integer32())
if mibBuilder.loadTexts: juniAaaSubscriberSubInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSubInterfaceIndex.setDescription('The value of a subscriber sub-interface.')
juniAaaSubscriberInterfaceHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceHandle.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceHandle.setDescription('The subscriber handle associated with this subscriber interface. A subscriber handle is a monotonically increasing integer.')
juniAaaSubscriberInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 15, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberInterfaceRowStatus.setDescription("Always has value 'active'.")
juniAaaSubscriberSlotSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 16), )
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummaryTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummaryTable.setDescription('The entries in this table report number of subscribers per slot.')
juniAaaSubscriberSlotSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 16, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberSlotSummarySlotIndex"))
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummaryEntry.setDescription('A specification of subscribers for a slot.')
juniAaaSubscriberSlotSummarySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummarySlotIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummarySlotIndex.setDescription('The index of the slot.')
juniAaaSubscriberSlotSummaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummaryCount.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotSummaryCount.setDescription('The number of subscribers on this slot.')
juniAaaSubscriberSlotTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 17), )
if mibBuilder.loadTexts: juniAaaSubscriberSlotTable.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotTable.setDescription('The subscriber in this table sorted by slot.')
juniAaaSubscriberSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 17, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberSlotIndex"), (0, "Juniper-AAA-MIB", "juniAaaSubscriberSlotHandle"))
if mibBuilder.loadTexts: juniAaaSubscriberSlotEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotEntry.setDescription('A specification of subscribers by slot.')
juniAaaSubscriberSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberSlotIndex.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotIndex.setDescription('The index of the slot.')
juniAaaSubscriberSlotHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniAaaSubscriberSlotHandle.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotHandle.setDescription('The subscriber handle associated with this slot. The subscriber handle is a monotonically increasing integer.')
juniAaaSubscriberSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 17, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberSlotRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberSlotRowStatus.setDescription("Always has value 'active'.")
juniAaaSubscriberExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1), ).setIndexNames((0, "Juniper-AAA-MIB", "juniAaaSubscriberHandle"))
if mibBuilder.loadTexts: juniAaaSubscriberExtEntry.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtEntry.setDescription('A specification of subscribers extension attributes by subscriber handle.')
juniAaaSubscriberExtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtUserName.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtUserName.setDescription('The user name associated with this subscriber.')
juniAaaSubscriberExtLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtLoginTime.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtLoginTime.setDescription('The time this subscriber logged in using AAA protocol.')
juniAaaSubscriberExtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtIpAddress.setDescription('The client IP Address assigned to this subscriber.')
juniAaaSubscriberExtIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtIpAddressMask.setDescription('The client IP Address Mask assigned to this subscriber.')
juniAaaSubscriberExtAddrAssignType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 5), JuniAddressAssignType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtAddrAssignType.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtAddrAssignType.setDescription('The address assignment type for this subscriber.')
juniAaaSubscriberExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 6), JuniSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtState.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtState.setDescription('The state of this subscriber.')
juniAaaSubscriberExtClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 7), JuniSubscriberClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtClientType.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtClientType.setDescription("The client type for this subscriber. Certain client types (e.g., 'other') might be suppressed from representation in this table.")
juniAaaSubscriberExtAcctSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtAcctSessionId.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtAcctSessionId.setDescription('Account session ID associated with this subscriber. The value and encoding of this attribute depends on the way AAA protocol is configured. For example it is attribute 44 for RADIUS.')
juniAaaSubscriberExtClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtClass.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtClass.setDescription('Classification attribute associated with this subscriber. The value and encoding of this attribute depends on the way AAA protocol is configured. For example it is attribute 25 for RADIUS.')
juniAaaSubscriberExtNasPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtNasPort.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtNasPort.setDescription('Associated NAS port with this subscriber. The value and encoding of this attribute depends on the way AAA protocol is configured. For example it is attribute 5 for RADIUS.')
juniAaaSubscriberExtNasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtNasPortType.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtNasPortType.setDescription('Associated NAS port type attribute associated with this subscriber. The value and encoding of this attribute depends on the way AAA protocol is configured. For example it is attribute 61 for RADIUS.')
juniAaaSubscriberExtCalledStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtCalledStationId.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtCalledStationId.setDescription('Called ID associated with this subscriber. The value and encoding of this attribute depends on the way AAA protocol is configured. For example it is attribute 30 for RADIUS.')
juniAaaSubscriberExtCallingStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtCallingStationId.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtCallingStationId.setDescription('Calling ID associated with this subscriber. The value and encoding of this attribute depends on the way AAA protocol is configured. For example it is attribute 31 for RADIUS.')
juniAaaSubscriberExtL2tpTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaSubscriberExtL2tpTunnelId.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberExtL2tpTunnelId.setDescription('L2TP Tunnel ID associated with this subscriber of concerned LNS. A value 0 for this attribute indicates the terminated subscriber.')
juniAaaAccountingCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAccountingCapability.setStatus('current')
if mibBuilder.loadTexts: juniAaaAccountingCapability.setDescription('Indicates whether this system supports AAA Accounting. The value true(1) indicate that it does, false(2) indicates that it does not.')
juniAaaAddressAssignmentCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaAddressAssignmentCapability.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddressAssignmentCapability.setDescription('Indicates whether this system supports AAA address assignment. The value true(1) indicates that it does, false(2) indicates that it does not.')
juniAaaBrasCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaBrasCapability.setStatus('current')
if mibBuilder.loadTexts: juniAaaBrasCapability.setDescription('Indicates whether this system supports AAA BRAS functionality. The value true(1) indicates that it does, false(2) indicates that it does not.')
juniAaaTunnelingCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAaaTunnelingCapability.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelingCapability.setDescription('Indicates whether this system supports AAA tunneling. The value true(1) indicates that it does, false(2) indicates that it does not.')
juniAaaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4))
juniAaaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1))
juniAaaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2))
juniAaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 1)).setObjects(("Juniper-AAA-MIB", "juniAaaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance = juniAaaCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added.')
juniAaaCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 2)).setObjects(("Juniper-AAA-MIB", "juniAaaGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance2 = juniAaaCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance2.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added and new groupings were defined.')
juniAaaCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 3)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance3 = juniAaaCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance3.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when the juniAaaAssignDomainStripDomain object was added to the B-RAS group.')
juniAaaCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 4)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup2"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance4 = juniAaaCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance4.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new assignment delimiter objects were added to the B-RAS group.')
juniAaaCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 5)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup3"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance5 = juniAaaCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance5.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when the subscriber and capabilities groups were added.')
juniAaaCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 6)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup3"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance6 = juniAaaCompliance6.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance6.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when support was added for subscriber information by interface location.')
juniAaaCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 7)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup3"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup2"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance7 = juniAaaCompliance7.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance7.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when several new objects were added.')
juniAaaCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 8)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup4"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup3"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup2"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance8 = juniAaaCompliance8.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance8.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added to the B-RAS and tunnel groups.')
juniAaaCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 9)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup5"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup3"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup2"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup2"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance9 = juniAaaCompliance9.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance9.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added to the B-RAS group.')
juniAaaCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 10)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup6"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup3"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup2"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup2"), ("Juniper-AAA-MIB", "juniAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance10 = juniAaaCompliance10.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance10.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added to the B-RAS, Subscriber and Address groups.')
juniAaaCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 11)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup7"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup4"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup2"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup2"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance11 = juniAaaCompliance11.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance11.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 12)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup8"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup4"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup2"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup2"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup3"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance12 = juniAaaCompliance12.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance12.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 13)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup9"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup4"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup3"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup2"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup3"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance13 = juniAaaCompliance13.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance13.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 14)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup9"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup4"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup3"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup4"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance14 = juniAaaCompliance14.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance14.setDescription('The compliance statement for systems supporting AAA.')
juniAaaCompliance15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 15)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup9"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup4"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup4"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup4"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance15 = juniAaaCompliance15.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance15.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance16 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 16)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup9"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup4"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup4"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance16 = juniAaaCompliance16.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance16.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance17 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 17)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup10"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup4"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup4"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance17 = juniAaaCompliance17.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance17.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance18 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 18)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup10"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup4"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance18 = juniAaaCompliance18.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance18.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance19 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 19)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup11"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup4"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance19 = juniAaaCompliance19.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance19.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance20 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 20)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup11"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup5"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance20 = juniAaaCompliance20.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance20.setDescription('Obsolete compliance statement for systems supporting AAA.')
juniAaaCompliance21 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 21)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup12"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup5"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance21 = juniAaaCompliance21.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance21.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when the juniAaaMonitorIngressTrafficOnly object was added to the B-RAS group.')
juniAaaCompliance22 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 22)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup13"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup5"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance22 = juniAaaCompliance22.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance22.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when the juniAaaAssignDomainBackupPoolName object was added to the B-RAS group.')
juniAaaCompliance23 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 23)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup14"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup5"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance23 = juniAaaCompliance23.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaCompliance23.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix and juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix objects were added to the B-RAS group.')
juniAaaCompliance24 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 24)).setObjects(("Juniper-AAA-MIB", "juniAaaBasicGroup"), ("Juniper-AAA-MIB", "juniAaaCapabilitiesGroup"), ("Juniper-AAA-MIB", "juniAaaBrasGroup15"), ("Juniper-AAA-MIB", "juniAaaSubscriberGroup5"), ("Juniper-AAA-MIB", "juniAaaTunnelGroup5"), ("Juniper-AAA-MIB", "juniAaaAuthenticationGroup3"), ("Juniper-AAA-MIB", "juniAaaAccountingGroup5"), ("Juniper-AAA-MIB", "juniAaaAddressGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCompliance24 = juniAaaCompliance24.setStatus('current')
if mibBuilder.loadTexts: juniAaaCompliance24.setDescription('The compliance statement for systems supporting AAA.')
juniAaaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 1)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAddrPoolDefault"), ("Juniper-AAA-MIB", "juniAaaAddrDnsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrDnsSecondary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaGroup = juniAaaGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaGroup.setDescription('Obsolete collection of objects providing management of AAA functionality in a Juniper product. This group became obsolete when new objects were added.')
juniAaaGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 2)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAddrPoolDefault"), ("Juniper-AAA-MIB", "juniAaaAddrDnsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrDnsSecondary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsSecondary"), ("Juniper-AAA-MIB", "juniAaaIncomingInitiateRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingTerminateRequests"), ("Juniper-AAA-MIB", "juniAaaOutgoingTunnelGrantResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingGrantResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDenyResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingErrorResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAuthResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingReAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingReAuthResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDupAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingDupAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingAddrRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAddrResponses"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelType"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelId"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaGroup2 = juniAaaGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaGroup2.setDescription('Obsolete collection of objects providing management of AAA functionality in a Juniper product. This group became obsolete when new objects were added and new groupings were defined.')
juniAaaBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 3)).setObjects(("Juniper-AAA-MIB", "juniAaaIncomingInitiateRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingTerminateRequests"), ("Juniper-AAA-MIB", "juniAaaOutgoingGrantResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDenyResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingErrorResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBasicGroup = juniAaaBasicGroup.setStatus('current')
if mibBuilder.loadTexts: juniAaaBasicGroup.setDescription('The basic collection of objects providing management of AAA functionality in a Juniper product.')
juniAaaBrasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 4)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup = juniAaaBrasGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product. This group became obsolete when the juniAaaAssignDomainStripDomain object was added.')
juniAaaTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 5)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelType"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelId"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaOutgoingTunnelGrantResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaTunnelGroup = juniAaaTunnelGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaTunnelGroup.setDescription('Obsolete collection of objects providing management of AAA tunneling functionality in a Juniper product. This group became obsolete when the maximum sessions object was added.')
juniAaaAuthenticationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 6)).setObjects(("Juniper-AAA-MIB", "juniAaaAuthMethods"), ("Juniper-AAA-MIB", "juniAaaOutgoingAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAuthResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingReAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingReAuthResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAuthenticationGroup = juniAaaAuthenticationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAuthenticationGroup.setDescription('Obsolete collection of objects providing management of AAA authentication functionality in a Juniper product. This group became obsolete when the authentication methods table was added.')
juniAaaAccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 7)).setObjects(("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAcctMethods"), ("Juniper-AAA-MIB", "juniAaaOutgoingAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDupAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingDupAcctResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAccountingGroup = juniAaaAccountingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAccountingGroup.setDescription('Obsolete collection of objects providing management of AAA accounting functionality in a Juniper product. This group became obsolete when the juniAaaAcctSendStopOnAaaDeny object was added.')
juniAaaAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 8)).setObjects(("Juniper-AAA-MIB", "juniAaaAddrPoolDefault"), ("Juniper-AAA-MIB", "juniAaaDupAddrCheck"), ("Juniper-AAA-MIB", "juniAaaAddrDnsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrDnsSecondary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsSecondary"), ("Juniper-AAA-MIB", "juniAaaOutgoingAddrRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAddrResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAddressGroup = juniAaaAddressGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAddressGroup.setDescription('Obsolete collection of objects providing management of AAA address assignment functionality in a Juniper product. This group became obsolete when IPv6 support was added.')
juniAaaBrasGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 9)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup2 = juniAaaBrasGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup2.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product. This group became obsolete when new assignment delimiter objects were added.')
juniAaaBrasGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 10)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup3 = juniAaaBrasGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup3.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product. This group became obsolete when new objects were added.')
juniAaaSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 11)).setObjects(("Juniper-AAA-MIB", "juniAaaSubscriberMaxCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberUserName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberLoginTime"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddress"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddressMask"), ("Juniper-AAA-MIB", "juniAaaSubscriberAddrAssignType"), ("Juniper-AAA-MIB", "juniAaaSubscriberInterfaceId"), ("Juniper-AAA-MIB", "juniAaaSubscriberState"), ("Juniper-AAA-MIB", "juniAaaSubscriberClientType"), ("Juniper-AAA-MIB", "juniAaaSubscriberIngressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberEgressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberQosProfileName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaSubscriberGroup = juniAaaSubscriberGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaSubscriberGroup.setDescription('Obsolete collection of objects providing management of AAA B-RAS Subscriber functionality in a Juniper product. This group became obsolete when support was added for monitoring subscriber information by interface location.')
juniAaaCapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 12)).setObjects(("Juniper-AAA-MIB", "juniAaaAccountingCapability"), ("Juniper-AAA-MIB", "juniAaaAddressAssignmentCapability"), ("Juniper-AAA-MIB", "juniAaaBrasCapability"), ("Juniper-AAA-MIB", "juniAaaTunnelingCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaCapabilitiesGroup = juniAaaCapabilitiesGroup.setStatus('current')
if mibBuilder.loadTexts: juniAaaCapabilitiesGroup.setDescription('The collection of objects providing management of AAA Capabilities functionality in a Juniper product.')
juniAaaSubscriberGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 13)).setObjects(("Juniper-AAA-MIB", "juniAaaSubscriberMaxCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberUserName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberLoginTime"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddress"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddressMask"), ("Juniper-AAA-MIB", "juniAaaSubscriberAddrAssignType"), ("Juniper-AAA-MIB", "juniAaaSubscriberInterfaceId"), ("Juniper-AAA-MIB", "juniAaaSubscriberState"), ("Juniper-AAA-MIB", "juniAaaSubscriberClientType"), ("Juniper-AAA-MIB", "juniAaaSubscriberIngressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberEgressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberQosProfileName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationType"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaSubscriberGroup2 = juniAaaSubscriberGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaSubscriberGroup2.setDescription('Obsolete collection of objects providing management of AAA B-RAS Subscriber functionality in a Juniper product. This group became obsolete when the pseudo-subscriber meters were added.')
juniAaaAccountingGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 14)).setObjects(("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAcctMethods"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaDeny"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaReject"), ("Juniper-AAA-MIB", "juniAaaOutgoingAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDupAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingDupAcctResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAccountingGroup2 = juniAaaAccountingGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAccountingGroup2.setDescription('Obsolete collection of objects providing management of AAA accounting functionality in a Juniper product. This group became obsolete when the accounting methods table was added.')
juniAaaBrasGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 15)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup4 = juniAaaBrasGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup4.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product. This group became obsolete when assign domain pool name was added.')
juniAaaSubscriberGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 16)).setObjects(("Juniper-AAA-MIB", "juniAaaSubscriberMaxCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberUserName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberLoginTime"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddress"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddressMask"), ("Juniper-AAA-MIB", "juniAaaSubscriberAddrAssignType"), ("Juniper-AAA-MIB", "juniAaaSubscriberInterfaceId"), ("Juniper-AAA-MIB", "juniAaaSubscriberState"), ("Juniper-AAA-MIB", "juniAaaSubscriberClientType"), ("Juniper-AAA-MIB", "juniAaaSubscriberIngressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberEgressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberQosProfileName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationType"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberPseudoPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPseudoCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaSubscriberGroup3 = juniAaaSubscriberGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaSubscriberGroup3.setDescription('Obsoleted collection of objects providing management of AAA B-RAS Subscriber functionality in a Juniper product. This group became obsolete when IPv6 support was added.')
juniAaaBrasGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 17)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLoopback"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup5 = juniAaaBrasGroup5.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup5.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product. This group became obsolete when PADN support was added.')
juniAaaTunnelGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 18)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelType"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelId"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMaxSessions"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaOutgoingTunnelGrantResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaTunnelGroup2 = juniAaaTunnelGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaTunnelGroup2.setDescription('Obsolete collection of objects providing management of AAA tunneling functionality in a Juniper product.')
juniAaaBrasGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 19)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup6 = juniAaaBrasGroup6.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup6.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product. This group became obsolete when IPv6 support was added.')
juniAaaBrasGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 20)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup7 = juniAaaBrasGroup7.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup7.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaAddressGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 21)).setObjects(("Juniper-AAA-MIB", "juniAaaAddrPoolDefault"), ("Juniper-AAA-MIB", "juniAaaDupAddrCheck"), ("Juniper-AAA-MIB", "juniAaaAddrDnsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrDnsSecondary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrWinsSecondary"), ("Juniper-AAA-MIB", "juniAaaAddrIpv6DnsPrimary"), ("Juniper-AAA-MIB", "juniAaaAddrIpv6DnsSecondary"), ("Juniper-AAA-MIB", "juniAaaOutgoingAddrRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAddrResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAddressGroup2 = juniAaaAddressGroup2.setStatus('current')
if mibBuilder.loadTexts: juniAaaAddressGroup2.setDescription('The collection of objects providing management of AAA address assignment functionality in a Juniper product.')
juniAaaSubscriberGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 22)).setObjects(("Juniper-AAA-MIB", "juniAaaSubscriberMaxCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberUserName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberLoginTime"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddress"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddressMask"), ("Juniper-AAA-MIB", "juniAaaSubscriberAddrAssignType"), ("Juniper-AAA-MIB", "juniAaaSubscriberInterfaceId"), ("Juniper-AAA-MIB", "juniAaaSubscriberState"), ("Juniper-AAA-MIB", "juniAaaSubscriberClientType"), ("Juniper-AAA-MIB", "juniAaaSubscriberIngressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberEgressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberQosProfileName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6RouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrIfIdentifier"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrPrefix"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrPrefixSize"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationType"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberPseudoPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPseudoCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaSubscriberGroup4 = juniAaaSubscriberGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaSubscriberGroup4.setDescription('Obsolete collection of objects providing management of AAA B-RAS Subscriber functionality in a Juniper product.')
juniAaaSubscriberGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 31)).setObjects(("Juniper-AAA-MIB", "juniAaaSubscriberMaxCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberUserName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberLoginTime"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddress"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpAddressMask"), ("Juniper-AAA-MIB", "juniAaaSubscriberAddrAssignType"), ("Juniper-AAA-MIB", "juniAaaSubscriberInterfaceId"), ("Juniper-AAA-MIB", "juniAaaSubscriberState"), ("Juniper-AAA-MIB", "juniAaaSubscriberClientType"), ("Juniper-AAA-MIB", "juniAaaSubscriberIngressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberEgressPolicyName"), ("Juniper-AAA-MIB", "juniAaaSubscriberQosProfileName"), ("Juniper-AAA-MIB", "juniAaaSubscriberRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6RouterIndex"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrIfIdentifier"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrPrefix"), ("Juniper-AAA-MIB", "juniAaaSubscriberIpv6AddrPrefixSize"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberRouterRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationType"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationSummaryCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberLocationRowStatus"), ("Juniper-AAA-MIB", "juniAaaSubscriberPseudoPeakCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberPseudoCount"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtUserName"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtLoginTime"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtIpAddress"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtIpAddressMask"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtAddrAssignType"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtState"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtClientType"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtAcctSessionId"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtClass"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtNasPort"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtNasPortType"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtCalledStationId"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtCallingStationId"), ("Juniper-AAA-MIB", "juniAaaSubscriberExtL2tpTunnelId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaSubscriberGroup5 = juniAaaSubscriberGroup5.setStatus('current')
if mibBuilder.loadTexts: juniAaaSubscriberGroup5.setDescription('The collection of objects providing management of AAA B-RAS Subscriber functionality in a Juniper product.')
juniAaaBrasGroup8 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 23)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup8 = juniAaaBrasGroup8.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup8.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaBrasGroup9 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 24)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup9 = juniAaaBrasGroup9.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup9.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaTunnelGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 25)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelType"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelId"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMaxSessions"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelReceiveWindowSize"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaOutgoingTunnelGrantResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaTunnelGroup3 = juniAaaTunnelGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaTunnelGroup3.setDescription('Obsolete collection of objects providing management of AAA tunneling functionality in a Juniper product.')
juniAaaAccountingGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 26)).setObjects(("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaDeny"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaReject"), ("Juniper-AAA-MIB", "juniAaaAcctSendImmediateAcctUpdate"), ("Juniper-AAA-MIB", "juniAaaOutgoingAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDupAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingDupAcctResponses"), ("Juniper-AAA-MIB", "juniAaaAcctMethodsSubscriberType"), ("Juniper-AAA-MIB", "juniAaaAcctMethodsAccounting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAccountingGroup3 = juniAaaAccountingGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAccountingGroup3.setDescription('Obsolete collection of objects providing management of AAA accounting functionality in a Juniper product.')
juniAaaAuthenticationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 27)).setObjects(("Juniper-AAA-MIB", "juniAaaOutgoingAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAuthResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingReAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingReAuthResponses"), ("Juniper-AAA-MIB", "juniAaaAuthMethodsSubscriberType"), ("Juniper-AAA-MIB", "juniAaaAuthMethodsAuthentication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAuthenticationGroup2 = juniAaaAuthenticationGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAuthenticationGroup2.setDescription('Obsolete collection of objects providing management of AAA authentication functionality in a Juniper product.')
juniAaaAuthenticationGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 28)).setObjects(("Juniper-AAA-MIB", "juniAaaOutgoingAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAuthResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingReAuthRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingReAuthResponses"), ("Juniper-AAA-MIB", "juniAaaAuthMethodsSubscriberType"), ("Juniper-AAA-MIB", "juniAaaAuthMethodsAuthentication"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserRowStatus"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserPassword"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserEncryption"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserIpAddress"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserIpAddressPool"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserRouterName"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserDbRowStatus"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserDbAssocRowStatus"), ("Juniper-AAA-MIB", "juniAaaLocalAuthUserDbAssocDbName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAuthenticationGroup3 = juniAaaAuthenticationGroup3.setStatus('current')
if mibBuilder.loadTexts: juniAaaAuthenticationGroup3.setDescription('The collection of objects providing management of AAA authentication functionality in a Juniper product.')
juniAaaAccountingGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 29)).setObjects(("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupName"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter1"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter2"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter3"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter4"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRowStatus"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaDeny"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaReject"), ("Juniper-AAA-MIB", "juniAaaAcctSendImmediateAcctUpdate"), ("Juniper-AAA-MIB", "juniAaaOutgoingAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDupAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingDupAcctResponses"), ("Juniper-AAA-MIB", "juniAaaAcctMethodsSubscriberType"), ("Juniper-AAA-MIB", "juniAaaAcctMethodsAccounting"), ("Juniper-AAA-MIB", "juniAaaOutgoingBcastAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingBcastAcctResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAccountingGroup4 = juniAaaAccountingGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaAccountingGroup4.setDescription('The collection of objects providing management of AAA accounting functionality in a Juniper product.')
juniAaaTunnelGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 30)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelType"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelId"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMaxSessions"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelReceiveWindowSize"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelSwitchProfile"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelTag"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelType"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelId"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelMaxSessions"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelReceiveWindowSize"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelRouterName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelSwitchProfile"), ("Juniper-AAA-MIB", "juniAaaOutgoingTunnelGrantResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaTunnelGroup4 = juniAaaTunnelGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaTunnelGroup4.setDescription('Obsolete collection of objects providing management of AAA tunneling functionality in a Juniper product.')
juniAaaBrasGroup10 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 32)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAuthRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"), ("Juniper-AAA-MIB", "juniAaaAssignAccountingStatisticsType"), ("Juniper-AAA-MIB", "juniAaaAssignQosDownstreamRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup10 = juniAaaBrasGroup10.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup10.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaTunnelGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 33)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTag"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelType"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelId"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelMaxSessions"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelReceiveWindowSize"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelFailoverResync"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelSwitchProfile"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelTxConnectSpeedMethod"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelGroup"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelTag"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelPreference"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelType"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelMedium"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelAddress"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelId"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelHostName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelRowStatus"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelServerName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelClientAddress"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelMaxSessions"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelReceiveWindowSize"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelRouterName"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelFailoverResync"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelSwitchProfile"), ("Juniper-AAA-MIB", "juniAaaTunnelGroupTunnelTxConnectSpeedMethod"), ("Juniper-AAA-MIB", "juniAaaOutgoingTunnelGrantResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaTunnelGroup5 = juniAaaTunnelGroup5.setStatus('current')
if mibBuilder.loadTexts: juniAaaTunnelGroup5.setDescription('The collection of collection of objects providing management of AAA tunneling functionality in a Juniper product.')
juniAaaBrasGroup11 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 34)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAuthRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"), ("Juniper-AAA-MIB", "juniAaaAssignAccountingStatisticsType"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormatFallback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup11 = juniAaaBrasGroup11.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup11.setDescription('The obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaAccountingGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 35)).setObjects(("Juniper-AAA-MIB", "juniAaaAcctInterval"), ("Juniper-AAA-MIB", "juniAaaAcctDupServerRouterName"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupName"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter1"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter2"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter3"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRouter4"), ("Juniper-AAA-MIB", "juniAaaAcctBcastServerGroupRowStatus"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaDeny"), ("Juniper-AAA-MIB", "juniAaaAcctSendStopOnAaaReject"), ("Juniper-AAA-MIB", "juniAaaAcctSendImmediateAcctUpdate"), ("Juniper-AAA-MIB", "juniAaaOutgoingAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingAcctResponses"), ("Juniper-AAA-MIB", "juniAaaOutgoingDupAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingDupAcctResponses"), ("Juniper-AAA-MIB", "juniAaaAcctMethodsSubscriberType"), ("Juniper-AAA-MIB", "juniAaaAcctMethodsAccounting"), ("Juniper-AAA-MIB", "juniAaaOutgoingBcastAcctRequests"), ("Juniper-AAA-MIB", "juniAaaIncomingBcastAcctResponses"), ("Juniper-AAA-MIB", "juniAaaUserAcctInterval"), ("Juniper-AAA-MIB", "juniAaaServiceAcctInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaAccountingGroup5 = juniAaaAccountingGroup5.setStatus('current')
if mibBuilder.loadTexts: juniAaaAccountingGroup5.setDescription('The collection of objects providing management of AAA accounting functionality in a Juniper product.')
juniAaaBrasGroup12 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 36)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAuthRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelSubscriberAuthentication"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"), ("Juniper-AAA-MIB", "juniAaaAssignAccountingStatisticsType"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormatFallback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup12 = juniAaaBrasGroup12.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup12.setDescription('The obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaBrasGroup13 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 37)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaMonitorIngressTrafficOnly"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAuthRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelSubscriberAuthentication"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"), ("Juniper-AAA-MIB", "juniAaaAssignAccountingStatisticsType"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormatFallback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup13 = juniAaaBrasGroup13.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup13.setDescription('The obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaBrasGroup14 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 38)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaMonitorIngressTrafficOnly"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAuthRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelSubscriberAuthentication"), ("Juniper-AAA-MIB", "juniAaaAssignDomainBackupPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"), ("Juniper-AAA-MIB", "juniAaaAssignAccountingStatisticsType"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormatFallback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup14 = juniAaaBrasGroup14.setStatus('obsolete')
if mibBuilder.loadTexts: juniAaaBrasGroup14.setDescription('The obsolete collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
juniAaaBrasGroup15 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 39)).setObjects(("Juniper-AAA-MIB", "juniAaaAssignBrasLicense"), ("Juniper-AAA-MIB", "juniAaaAssignBrasLicensedUsers"), ("Juniper-AAA-MIB", "juniAaaAssignDomainDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignRealmDelimiters"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseOrder"), ("Juniper-AAA-MIB", "juniAaaAssignSubscriberLimit"), ("Juniper-AAA-MIB", "juniAaaIdleTimeout"), ("Juniper-AAA-MIB", "juniAaaSessionTimeout"), ("Juniper-AAA-MIB", "juniAaaMonitorIngressTrafficOnly"), ("Juniper-AAA-MIB", "juniAaaTunnelClientName"), ("Juniper-AAA-MIB", "juniAaaTunnelPassword"), ("Juniper-AAA-MIB", "juniAaaTunnelNasPortMethod"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPort"), ("Juniper-AAA-MIB", "juniAaaTunnelIgnoreNasPortType"), ("Juniper-AAA-MIB", "juniAaaTunnelAssignmentIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpHint"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmServiceLevel"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmPcr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmScr"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAtmMbs"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverrideUserName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainOverridePassword"), ("Juniper-AAA-MIB", "juniAaaAssignDomainStripDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainLocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6RouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpv6LocalInterface"), ("Juniper-AAA-MIB", "juniAaaAssignDomainAuthRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainIpRouterName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainTunnelSubscriberAuthentication"), ("Juniper-AAA-MIB", "juniAaaAssignDomainBackupPoolName"), ("Juniper-AAA-MIB", "juniAaaAssignDomainMaxPadnPerDomain"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnRowStatus"), ("Juniper-AAA-MIB", "juniAaaAssignDomainPadnDistance"), ("Juniper-AAA-MIB", "juniAaaInterfaceIdFormat"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormat"), ("Juniper-AAA-MIB", "juniAaaAssignDomainParseDirection"), ("Juniper-AAA-MIB", "juniAaaAssignRealmParseDirection"), ("Juniper-AAA-MIB", "juniAaaInterfaceAdapterFormat"), ("Juniper-AAA-MIB", "juniAaaAssignAccountingStatisticsType"), ("Juniper-AAA-MIB", "juniAaaAssignTunnelCallingNumberFormatFallback"), ("Juniper-AAA-MIB", "juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix"), ("Juniper-AAA-MIB", "juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAaaBrasGroup15 = juniAaaBrasGroup15.setStatus('current')
if mibBuilder.loadTexts: juniAaaBrasGroup15.setDescription('The collection of objects providing management of AAA B-RAS functionality in a Juniper product.')
mibBuilder.exportSymbols("Juniper-AAA-MIB", juniAaaSubscriberLocationEntry=juniAaaSubscriberLocationEntry, JuniSubscriberInterfaceValue=JuniSubscriberInterfaceValue, juniAaaAcctMethods=juniAaaAcctMethods, juniAaaSubscriberGroup5=juniAaaSubscriberGroup5, juniAaaTunnelGroups=juniAaaTunnelGroups, juniAaaAssignDomainAtmMbs=juniAaaAssignDomainAtmMbs, juniAaaTunnelGroupName=juniAaaTunnelGroupName, juniAaaSubscriberExtAddrAssignType=juniAaaSubscriberExtAddrAssignType, juniAaaAccountingCapability=juniAaaAccountingCapability, juniAaaAssignDomainTunnelFailoverResync=juniAaaAssignDomainTunnelFailoverResync, juniAaaBrasGroup3=juniAaaBrasGroup3, juniAaaAssignDomainTunnelMaxSessions=juniAaaAssignDomainTunnelMaxSessions, juniAaaAssignDomainPadnDistance=juniAaaAssignDomainPadnDistance, juniAaaAssignDomainMaxPadnPerDomain=juniAaaAssignDomainMaxPadnPerDomain, juniAaaIncomingAuthResponses=juniAaaIncomingAuthResponses, juniAaaAssignDomainIpRouterName=juniAaaAssignDomainIpRouterName, juniAaaBrasGroup14=juniAaaBrasGroup14, juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix=juniAaaDelegatedIpv6PrefixAsDhcpv6DelegatedPrefix, juniAaaSubscriberExtL2tpTunnelId=juniAaaSubscriberExtL2tpTunnelId, juniAaaTunnelGroupTunnelHostName=juniAaaTunnelGroupTunnelHostName, juniAaaIncomingTerminateRequests=juniAaaIncomingTerminateRequests, juniAaaAssignDomainOverridePassword=juniAaaAssignDomainOverridePassword, juniAaaAssignDomainOverrideUserName=juniAaaAssignDomainOverrideUserName, juniAaaSubscriberInterfaceSummaryIndex=juniAaaSubscriberInterfaceSummaryIndex, juniAaaBrasCapability=juniAaaBrasCapability, juniAaaCompliance24=juniAaaCompliance24, juniAaaAssignBrasLicensedUsers=juniAaaAssignBrasLicensedUsers, juniAaaAssignDomainTunnelType=juniAaaAssignDomainTunnelType, juniAaaTunnelGroupTunnelRowStatus=juniAaaTunnelGroupTunnelRowStatus, juniAaaTunnelGroupTunnelTable=juniAaaTunnelGroupTunnelTable, juniAaaBrasGroup8=juniAaaBrasGroup8, juniAaaAuthMethods=juniAaaAuthMethods, juniAaaBrasGroup5=juniAaaBrasGroup5, juniAaaAcctBcastServerGroupRouter1=juniAaaAcctBcastServerGroupRouter1, juniAaaAuthMethodsAuthentication=juniAaaAuthMethodsAuthentication, juniAaaCompliance10=juniAaaCompliance10, juniAaaCompliance23=juniAaaCompliance23, juniAaaAcctSendStopOnAaaDeny=juniAaaAcctSendStopOnAaaDeny, juniAaaSubscriberLocationSummaryTable=juniAaaSubscriberLocationSummaryTable, juniAaaLocalAuth=juniAaaLocalAuth, juniAaaAssignDomainTunnelMedium=juniAaaAssignDomainTunnelMedium, juniAaaSubscriberAddrAssignType=juniAaaSubscriberAddrAssignType, juniAaaAcctGeneral=juniAaaAcctGeneral, juniAaaUserAcctInterval=juniAaaUserAcctInterval, juniAaaAssignDomainIpv6LocalInterface=juniAaaAssignDomainIpv6LocalInterface, juniAaaTunnelGroupTunnelTag=juniAaaTunnelGroupTunnelTag, juniAaaTunnelClientName=juniAaaTunnelClientName, juniAaaLocalAuthUserDbTable=juniAaaLocalAuthUserDbTable, juniAaaSubscriberExtCallingStationId=juniAaaSubscriberExtCallingStationId, juniAaaSubscriberExtIpAddressMask=juniAaaSubscriberExtIpAddressMask, JuniSubscriberState=JuniSubscriberState, juniAaaTunnelIgnoreNasPortType=juniAaaTunnelIgnoreNasPortType, juniAaaGroup2=juniAaaGroup2, juniAaaGroup=juniAaaGroup, juniAaaAssignGeneral=juniAaaAssignGeneral, juniAaaAcctBcastServerGroupRouter2=juniAaaAcctBcastServerGroupRouter2, juniAaaSubscriberRouterHandle=juniAaaSubscriberRouterHandle, juniAaaSubscriberRouterRouterIndex=juniAaaSubscriberRouterRouterIndex, juniAaaAssignDomainTunnelSwitchProfile=juniAaaAssignDomainTunnelSwitchProfile, juniAaaObjects=juniAaaObjects, juniAaaAcctInterval=juniAaaAcctInterval, juniAaaAddressGroup=juniAaaAddressGroup, juniAaaTunnelNasPortMethod=juniAaaTunnelNasPortMethod, juniAaaTunnelGroupTunnelServerName=juniAaaTunnelGroupTunnelServerName, juniAaaSubscriberInterfaceIndex=juniAaaSubscriberInterfaceIndex, juniAaaOutgoingDenyResponses=juniAaaOutgoingDenyResponses, juniAaaSubscriberIpAddressMask=juniAaaSubscriberIpAddressMask, juniAaaIncomingAddrResponses=juniAaaIncomingAddrResponses, juniAaaSubscriberExtIpAddress=juniAaaSubscriberExtIpAddress, juniAaaAssignDomainPadnRowStatus=juniAaaAssignDomainPadnRowStatus, juniAaaSubscriberIpv6AddrPrefix=juniAaaSubscriberIpv6AddrPrefix, juniAaaAcctBcastServerGroupRowStatus=juniAaaAcctBcastServerGroupRowStatus, juniAaaLocalAuthUserDbAssocDbName=juniAaaLocalAuthUserDbAssocDbName, juniAaaTunnelGroupTunnelType=juniAaaTunnelGroupTunnelType, juniAaaSubscriberRouterTable=juniAaaSubscriberRouterTable, juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix=juniAaaFramedIpv6PrefixAsIpv6NdRaPrefix, juniAaaLocalAuthUserDbAssocRowStatus=juniAaaLocalAuthUserDbAssocRowStatus, juniAaaSubscriberIpv6AddrPrefixEntry=juniAaaSubscriberIpv6AddrPrefixEntry, juniAaaSubscriberState=juniAaaSubscriberState, juniAaaSubscriberPeakCount=juniAaaSubscriberPeakCount, juniAaaLocalAuthUserRouterName=juniAaaLocalAuthUserRouterName, juniAaaAcctBcastServerGroupTable=juniAaaAcctBcastServerGroupTable, juniAaaSubscriberIpv6AddrIfIdentifier=juniAaaSubscriberIpv6AddrIfIdentifier, juniAaaTunnelGroupTunnelEntry=juniAaaTunnelGroupTunnelEntry, juniAaaMonitorIngressTrafficOnly=juniAaaMonitorIngressTrafficOnly, juniAaaServiceAcctInterval=juniAaaServiceAcctInterval, juniAaaDupAddrCheck=juniAaaDupAddrCheck, juniAaaOutgoingErrorResponses=juniAaaOutgoingErrorResponses, juniAaaSubscriberRouterSummaryRouterIndex=juniAaaSubscriberRouterSummaryRouterIndex, juniAaaOutgoingBcastAcctRequests=juniAaaOutgoingBcastAcctRequests, juniAaaSubscriberGroup2=juniAaaSubscriberGroup2, juniAaaSubscriberLocationSummaryLocationIndex=juniAaaSubscriberLocationSummaryLocationIndex, juniAaaAddress=juniAaaAddress, juniAaaSubscriberSlotTable=juniAaaSubscriberSlotTable, juniAaaLocalAuthUserDbName=juniAaaLocalAuthUserDbName, juniAaaOutgoingReAuthRequests=juniAaaOutgoingReAuthRequests, juniAaaSubscriberSubInterfaceIndex=juniAaaSubscriberSubInterfaceIndex, JuniAaaTunnelGroupName=JuniAaaTunnelGroupName, juniAaaSubscribers=juniAaaSubscribers, juniAaaSubscriberMaxCount=juniAaaSubscriberMaxCount, juniAaaTunnelGroupTunnelId=juniAaaTunnelGroupTunnelId, juniAaaAddrIpv6DnsSecondary=juniAaaAddrIpv6DnsSecondary, juniAaaSubscriberIpAddress=juniAaaSubscriberIpAddress, juniAaaTunnelGroup3=juniAaaTunnelGroup3, juniAaaMIBGroups=juniAaaMIBGroups, juniAaaBrasGroup6=juniAaaBrasGroup6, juniAaaAssignDomainTunnelId=juniAaaAssignDomainTunnelId, JuniAaaAuthenticationMethods=JuniAaaAuthenticationMethods, juniAaaMIBConformance=juniAaaMIBConformance, juniAaaSubscriberRouterRowStatus=juniAaaSubscriberRouterRowStatus, juniAaaLocalAuthUserTable=juniAaaLocalAuthUserTable, juniAaaTunnelGroup4=juniAaaTunnelGroup4, juniAaaSubscriberRouterEntry=juniAaaSubscriberRouterEntry, juniAaaAddrWins=juniAaaAddrWins, juniAaaTunnelGroupTunnelTxConnectSpeedMethod=juniAaaTunnelGroupTunnelTxConnectSpeedMethod, juniAaaTunnel=juniAaaTunnel, juniAaaBrasGroup2=juniAaaBrasGroup2, juniAaaSubscriberLocationTable=juniAaaSubscriberLocationTable, juniAaaSubscriberHandle=juniAaaSubscriberHandle, juniAaaIncomingReAuthResponses=juniAaaIncomingReAuthResponses, juniAaaSubscriberSlotSummaryCount=juniAaaSubscriberSlotSummaryCount, juniAaaAcctBcastServerGroupRouter4=juniAaaAcctBcastServerGroupRouter4, juniAaaInterfaceIdFormat=juniAaaInterfaceIdFormat, JuniAaaAccountingMethods=JuniAaaAccountingMethods, juniAaaAssignDomainAtmScr=juniAaaAssignDomainAtmScr, juniAaaSubscriberExtUserName=juniAaaSubscriberExtUserName, juniAaaSubscriberInterfaceSummaryTable=juniAaaSubscriberInterfaceSummaryTable, juniAaaCompliance5=juniAaaCompliance5, juniAaaAssignDomainAtmServiceLevel=juniAaaAssignDomainAtmServiceLevel, juniAaaBrasGroup11=juniAaaBrasGroup11, juniAaaSubscriberRouterSummaryEntry=juniAaaSubscriberRouterSummaryEntry, juniAaaAssignDomainTunnelRowStatus=juniAaaAssignDomainTunnelRowStatus, juniAaaCompliance18=juniAaaCompliance18, juniAaaSubscriberInterfaceId=juniAaaSubscriberInterfaceId, juniAaaTunnelGroupTunnelPreference=juniAaaTunnelGroupTunnelPreference, juniAaaAssignTunnelCallingNumberFormatFallback=juniAaaAssignTunnelCallingNumberFormatFallback, juniAaaAssignDomainAuthRouterName=juniAaaAssignDomainAuthRouterName, juniAaaCompliance20=juniAaaCompliance20, JuniSubscriberLocationType=JuniSubscriberLocationType, juniAaaTunnelPassword=juniAaaTunnelPassword, juniAaaAddrGeneral=juniAaaAddrGeneral, juniAaaCompliance19=juniAaaCompliance19, juniAaaAssignDomainParseDirection=juniAaaAssignDomainParseDirection, juniAaaAssignDomainTunnelName=juniAaaAssignDomainTunnelName, juniAaaTunnelAssignmentIdFormat=juniAaaTunnelAssignmentIdFormat, juniAaaBrasGroup10=juniAaaBrasGroup10, juniAaaAddrPoolDefault=juniAaaAddrPoolDefault, JuniAaaAccountingSubscriberTypes=JuniAaaAccountingSubscriberTypes, juniAaaAuthMethodsSubscriberType=juniAaaAuthMethodsSubscriberType, juniAaaSessionTimeout=juniAaaSessionTimeout, juniAaaAcctBcastServerGroupRouter3=juniAaaAcctBcastServerGroupRouter3, juniAaaAssignDomainTunnelReceiveWindowSize=juniAaaAssignDomainTunnelReceiveWindowSize, juniAaaAssignDomainTunnelClientAddress=juniAaaAssignDomainTunnelClientAddress, juniAaaTunnelingCapability=juniAaaTunnelingCapability, juniAaaAssignDomainTunnelTable=juniAaaAssignDomainTunnelTable, juniAaaCompliance11=juniAaaCompliance11, juniAaaLocalAuthUserDbRowStatus=juniAaaLocalAuthUserDbRowStatus, juniAaaAssignQosDownstreamRate=juniAaaAssignQosDownstreamRate, juniAaaAccountingGroup4=juniAaaAccountingGroup4, juniAaaSubscriberExtTable=juniAaaSubscriberExtTable, juniAaaTunnelGroupTunnelRouterName=juniAaaTunnelGroupTunnelRouterName, juniAaaAuthMethodsTable=juniAaaAuthMethodsTable, juniAaaAssignBrasLicense=juniAaaAssignBrasLicense, juniAaaBrasGroup9=juniAaaBrasGroup9, juniAaaLocalAuthUserPassword=juniAaaLocalAuthUserPassword, juniAaaTunnelGroupTunnelClientAddress=juniAaaTunnelGroupTunnelClientAddress, juniAaaCompliance7=juniAaaCompliance7, juniAaaSubscriberSlotEntry=juniAaaSubscriberSlotEntry, JuniAaaTunnelSwitchProfileName=JuniAaaTunnelSwitchProfileName, juniAaaAcctMethodsSubscriberType=juniAaaAcctMethodsSubscriberType, juniAaaAssignDomainPadnEntry=juniAaaAssignDomainPadnEntry, juniAaaSubscriberEntry=juniAaaSubscriberEntry, juniAaaAcctMethodsAccounting=juniAaaAcctMethodsAccounting, juniAaaCompliance22=juniAaaCompliance22, juniAaaAssignDomainIpv6RouterName=juniAaaAssignDomainIpv6RouterName, juniAaaSubscriberRouterSummaryTable=juniAaaSubscriberRouterSummaryTable, juniAaaSubscriberIpv6RouterIndex=juniAaaSubscriberIpv6RouterIndex, juniAaaAddrWinsPrimary=juniAaaAddrWinsPrimary, juniAaaAssignDomain=juniAaaAssignDomain, juniAaaTimeoutGeneral=juniAaaTimeoutGeneral, juniAaaTunnelGroupEntry=juniAaaTunnelGroupEntry, juniAaaAssignDomainTunnelPassword=juniAaaAssignDomainTunnelPassword, juniAaaAssignDomainRouterName=juniAaaAssignDomainRouterName, juniAaaAddressAssignmentCapability=juniAaaAddressAssignmentCapability, juniAaaCompliance=juniAaaCompliance, juniAaaAssignDomainPoolName=juniAaaAssignDomainPoolName, juniAaaAccountingGroup2=juniAaaAccountingGroup2, juniAaaSubscriberPseudoPeakCount=juniAaaSubscriberPseudoPeakCount, juniAaaTunnelGeneral=juniAaaTunnelGeneral, juniAaaTunnelGroupTunnelAddress=juniAaaTunnelGroupTunnelAddress, juniAaaLocalAuthUserRowStatus=juniAaaLocalAuthUserRowStatus, juniAaaBrasGroup13=juniAaaBrasGroup13, juniAaaAssignDomainTunnelPreference=juniAaaAssignDomainTunnelPreference, juniAaaAssignDomainTunnelHostName=juniAaaAssignDomainTunnelHostName, juniAaaIncomingInitiateRequests=juniAaaIncomingInitiateRequests, juniAaaCompliance2=juniAaaCompliance2, juniAaaBrasGroup=juniAaaBrasGroup, juniAaaMIB=juniAaaMIB, juniAaaAuthentication=juniAaaAuthentication, juniAaaTunnelGroup5=juniAaaTunnelGroup5, juniAaaAssignDomainParseOrder=juniAaaAssignDomainParseOrder, juniAaaAssignDomainLoopback=juniAaaAssignDomainLoopback, juniAaaOutgoingGrantResponses=juniAaaOutgoingGrantResponses, juniAaaSubscriberSlotSummarySlotIndex=juniAaaSubscriberSlotSummarySlotIndex, juniAaaTunnelTxConnectSpeedMethod=juniAaaTunnelTxConnectSpeedMethod, juniAaaOutgoingAcctRequests=juniAaaOutgoingAcctRequests, juniAaaCompliance14=juniAaaCompliance14, juniAaaAuthMethodsEntry=juniAaaAuthMethodsEntry, juniAaaTunnelGroupTunnelFailoverResync=juniAaaTunnelGroupTunnelFailoverResync, juniAaaSubscriberInterfaceEntry=juniAaaSubscriberInterfaceEntry, juniAaaSubscriberExtAcctSessionId=juniAaaSubscriberExtAcctSessionId, juniAaaSubscriberQosProfileName=juniAaaSubscriberQosProfileName, juniAaaSubscriberInterfaceSummaryEntry=juniAaaSubscriberInterfaceSummaryEntry, juniAaaBasicGroup=juniAaaBasicGroup, juniAaaBrasGroup12=juniAaaBrasGroup12, juniAaaSubscriberLocationHandle=juniAaaSubscriberLocationHandle, juniAaaBrasGroup7=juniAaaBrasGroup7, juniAaaCompliance16=juniAaaCompliance16, juniAaaAcctBcastServerGroup=juniAaaAcctBcastServerGroup, juniAaaAddressGroup2=juniAaaAddressGroup2, juniAaaAssignSubscriberLimit=juniAaaAssignSubscriberLimit, juniAaaAssignment=juniAaaAssignment, juniAaaSubscriberRowStatus=juniAaaSubscriberRowStatus, juniAaaSubscriberUserName=juniAaaSubscriberUserName, juniAaaAcctMethodsEntry=juniAaaAcctMethodsEntry, juniAaaOutgoingAuthRequests=juniAaaOutgoingAuthRequests, juniAaaSubscriberInterfaceHandle=juniAaaSubscriberInterfaceHandle, juniAaaLocalAuthUserName=juniAaaLocalAuthUserName, juniAaaSubscriberIpv6AddrPrefixSize=juniAaaSubscriberIpv6AddrPrefixSize, juniAaaSubscriberTable=juniAaaSubscriberTable, juniAaaSubscriberGroup4=juniAaaSubscriberGroup4, juniAaaSubscriberExtCalledStationId=juniAaaSubscriberExtCalledStationId, juniAaaAssignDomainTunnelEntry=juniAaaAssignDomainTunnelEntry, juniAaaTunnelSwitchProfile=juniAaaTunnelSwitchProfile, juniAaaTunnelGroupTunnelMedium=juniAaaTunnelGroupTunnelMedium, juniAaaBrasGroup4=juniAaaBrasGroup4, juniAaaAcctBcastServerGroupEntry=juniAaaAcctBcastServerGroupEntry, juniAaaAssignRealmParseDirection=juniAaaAssignRealmParseDirection, juniAaaCompliance13=juniAaaCompliance13, juniAaaAssignDomainBackupPoolName=juniAaaAssignDomainBackupPoolName, juniAaaInterfaceAdapterFormat=juniAaaInterfaceAdapterFormat, juniAaaLocalAuthUserIpAddress=juniAaaLocalAuthUserIpAddress, juniAaaOutgoingDupAcctRequests=juniAaaOutgoingDupAcctRequests, juniAaaAddrWinsSecondary=juniAaaAddrWinsSecondary, juniAaaAssignDomainAtmPcr=juniAaaAssignDomainAtmPcr, juniAaaAcctMethodsTable=juniAaaAcctMethodsTable, juniAaaBrasGroup15=juniAaaBrasGroup15, juniAaaSubscriberPseudoCount=juniAaaSubscriberPseudoCount, juniAaaSubscriberInterfaceTable=juniAaaSubscriberInterfaceTable, juniAaaLocalAuthUserEntry=juniAaaLocalAuthUserEntry, juniAaaAssignDomainPadnIpMask=juniAaaAssignDomainPadnIpMask, juniAaaIdleTimeout=juniAaaIdleTimeout, juniAaaTunnelGroupTunnelMaxSessions=juniAaaTunnelGroupTunnelMaxSessions, juniAaaSubscriberClientType=juniAaaSubscriberClientType)
mibBuilder.exportSymbols("Juniper-AAA-MIB", juniAaaLocalAuthUserDbAssocTable=juniAaaLocalAuthUserDbAssocTable, juniAaaSubscriberSlotSummaryTable=juniAaaSubscriberSlotSummaryTable, juniAaaAssignDomainEntry=juniAaaAssignDomainEntry, juniAaaCompliance8=juniAaaCompliance8, juniAaaCompliance15=juniAaaCompliance15, juniAaaAssignDomainRowStatus=juniAaaAssignDomainRowStatus, juniAaaAddrIpv6DnsPrimary=juniAaaAddrIpv6DnsPrimary, juniAaaSubscriberExtLoginTime=juniAaaSubscriberExtLoginTime, juniAaaSubscriberSlotIndex=juniAaaSubscriberSlotIndex, juniAaaTunnelGroup=juniAaaTunnelGroup, juniAaaAssignDomainTable=juniAaaAssignDomainTable, juniAaaLocalAuthUserDbAssoc=juniAaaLocalAuthUserDbAssoc, juniAaaCompliance6=juniAaaCompliance6, juniAaaAssignDomainLocalInterface=juniAaaAssignDomainLocalInterface, juniAaaAcctSendStopOnAaaReject=juniAaaAcctSendStopOnAaaReject, juniAaaIncomingAcctResponses=juniAaaIncomingAcctResponses, juniAaaAssignDomainTunnelGroup=juniAaaAssignDomainTunnelGroup, juniAaaAcctSendImmediateAcctUpdate=juniAaaAcctSendImmediateAcctUpdate, juniAaaSubscriberInterfaceSummaryCount=juniAaaSubscriberInterfaceSummaryCount, juniAaaAccounting=juniAaaAccounting, juniAaaLocalAuthUserDbAssocEntry=juniAaaLocalAuthUserDbAssocEntry, juniAaaAddrDnsPrimary=juniAaaAddrDnsPrimary, juniAaaAccountingGroup=juniAaaAccountingGroup, juniAaaSubscriberLoginTime=juniAaaSubscriberLoginTime, juniAaaSubscriberIngressPolicyName=juniAaaSubscriberIngressPolicyName, JuniSubscriberLocationValue=JuniSubscriberLocationValue, juniAaaAssignDomainTunnelTag=juniAaaAssignDomainTunnelTag, juniAaaTimeout=juniAaaTimeout, juniAaaAuthGeneral=juniAaaAuthGeneral, juniAaaAcctBcastConfig=juniAaaAcctBcastConfig, juniAaaTunnelGroupRowStatus=juniAaaTunnelGroupRowStatus, juniAaaLocalAuthUserEncryption=juniAaaLocalAuthUserEncryption, juniAaaCompliance3=juniAaaCompliance3, juniAaaSubscriberCount=juniAaaSubscriberCount, juniAaaAuthenticationGroup3=juniAaaAuthenticationGroup3, juniAaaAcctDupServerRouterName=juniAaaAcctDupServerRouterName, juniAaaTunnelGroup2=juniAaaTunnelGroup2, juniAaaAssignDomainIpHint=juniAaaAssignDomainIpHint, juniAaaAccountingGroup5=juniAaaAccountingGroup5, juniAaaOutgoingTunnelGrantResponses=juniAaaOutgoingTunnelGrantResponses, juniAaaAssignDomainDelimiters=juniAaaAssignDomainDelimiters, juniAaaAuthenticationGroup=juniAaaAuthenticationGroup, juniAaaAssignTunnelCallingNumberFormat=juniAaaAssignTunnelCallingNumberFormat, juniAaaSubscriberLocationSummaryCount=juniAaaSubscriberLocationSummaryCount, juniAaaTunnelGroupTunnelReceiveWindowSize=juniAaaTunnelGroupTunnelReceiveWindowSize, juniAaaSubscriberSubInterfaceSummaryIndex=juniAaaSubscriberSubInterfaceSummaryIndex, JuniSubscriberClientType=JuniSubscriberClientType, juniAaaAuthenticationGroup2=juniAaaAuthenticationGroup2, juniAaaCompliance4=juniAaaCompliance4, juniAaaAssignDomainTunnelTxConnectSpeedMethod=juniAaaAssignDomainTunnelTxConnectSpeedMethod, JuniAaaAuthenticationSubscriberTypes=JuniAaaAuthenticationSubscriberTypes, juniAaaCapabilities=juniAaaCapabilities, juniAaaCompliance12=juniAaaCompliance12, juniAaaLocalAuthUserIpAddressPool=juniAaaLocalAuthUserIpAddressPool, juniAaaAssignDomainPadnIpAddress=juniAaaAssignDomainPadnIpAddress, JuniAaaDomainName=JuniAaaDomainName, juniAaaAssignDomainTunnelAddress=juniAaaAssignDomainTunnelAddress, juniAaaSubscriberSlotHandle=juniAaaSubscriberSlotHandle, juniAaaLocalAuthUserDbEntry=juniAaaLocalAuthUserDbEntry, juniAaaSubscriberSlotRowStatus=juniAaaSubscriberSlotRowStatus, juniAaaSubscriberExtClass=juniAaaSubscriberExtClass, juniAaaAddrDnsSecondary=juniAaaAddrDnsSecondary, juniAaaAssignDomainTunnelSubscriberAuthentication=juniAaaAssignDomainTunnelSubscriberAuthentication, juniAaaSubscriberExtNasPortType=juniAaaSubscriberExtNasPortType, juniAaaTunnelGroupTunnelSwitchProfile=juniAaaTunnelGroupTunnelSwitchProfile, juniAaaAssignDomainName=juniAaaAssignDomainName, juniAaaAddrNameServer=juniAaaAddrNameServer, juniAaaCompliance17=juniAaaCompliance17, juniAaaTunnelIgnoreNasPort=juniAaaTunnelIgnoreNasPort, juniAaaSubscriberEgressPolicyName=juniAaaSubscriberEgressPolicyName, juniAaaSubscriberRouterIndex=juniAaaSubscriberRouterIndex, juniAaaSubscriberLocationType=juniAaaSubscriberLocationType, juniAaaTunnelGroupTunnelName=juniAaaTunnelGroupTunnelName, juniAaaSubscriberExtState=juniAaaSubscriberExtState, juniAaaSubscriberRouterSummaryCount=juniAaaSubscriberRouterSummaryCount, juniAaaAssignDomainTunnelServerName=juniAaaAssignDomainTunnelServerName, juniAaaAccountingGroup3=juniAaaAccountingGroup3, juniAaaSubscriberExtEntry=juniAaaSubscriberExtEntry, juniAaaIncomingBcastAcctResponses=juniAaaIncomingBcastAcctResponses, juniAaaSubscriberExtNasPort=juniAaaSubscriberExtNasPort, PYSNMP_MODULE_ID=juniAaaMIB, juniAaaSubscriberRouterName=juniAaaSubscriberRouterName, juniAaaCompliance9=juniAaaCompliance9, juniAaaStatistics=juniAaaStatistics, juniAaaAssignRealmDelimiters=juniAaaAssignRealmDelimiters, juniAaaAddrDns=juniAaaAddrDns, juniAaaSubscriberGroup3=juniAaaSubscriberGroup3, juniAaaTunnelGroupTunnelPassword=juniAaaTunnelGroupTunnelPassword, juniAaaSubscriberSlotSummaryEntry=juniAaaSubscriberSlotSummaryEntry, juniAaaAssignDomainStripDomain=juniAaaAssignDomainStripDomain, juniAaaMIBCompliances=juniAaaMIBCompliances, juniAaaAssignAccountingStatisticsType=juniAaaAssignAccountingStatisticsType, juniAaaSubscriberLocationRowStatus=juniAaaSubscriberLocationRowStatus, juniAaaCompliance21=juniAaaCompliance21, juniAaaAssignDomainPadnTable=juniAaaAssignDomainPadnTable, juniAaaTunnelGroupTable=juniAaaTunnelGroupTable, juniAaaSubscriberLocationLocationIndex=juniAaaSubscriberLocationLocationIndex, juniAaaSubscriberGroup=juniAaaSubscriberGroup, juniAaaIncomingDupAcctResponses=juniAaaIncomingDupAcctResponses, juniAaaLocalAuthUser=juniAaaLocalAuthUser, juniAaaSubscriberExtClientType=juniAaaSubscriberExtClientType, juniAaaSubscriberIpv6AddrPrefixTable=juniAaaSubscriberIpv6AddrPrefixTable, JuniAddressAssignType=JuniAddressAssignType, juniAaaCapabilitiesGroup=juniAaaCapabilitiesGroup, juniAaaSubscriberInterfaceRowStatus=juniAaaSubscriberInterfaceRowStatus, juniAaaAcctBcastServerGroupName=juniAaaAcctBcastServerGroupName, juniAaaSubscriberLocationSummaryEntry=juniAaaSubscriberLocationSummaryEntry, juniAaaOutgoingAddrRequests=juniAaaOutgoingAddrRequests, juniAaaLocalAuthUserDb=juniAaaLocalAuthUserDb)
