#
# PySNMP MIB module Fore-frs-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-frs-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
frameInternetworking, = mibBuilder.importSymbols("Fore-Common-MIB", "frameInternetworking")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, Counter32, TimeTicks, MibIdentifier, ModuleIdentity, Bits, ObjectIdentity, Unsigned32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Bits", "ObjectIdentity", "Unsigned32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
foreFrameRelayModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 16, 1))
if mibBuilder.loadTexts: foreFrameRelayModule.setLastUpdated('9705011044-0400')
if mibBuilder.loadTexts: foreFrameRelayModule.setOrganization('FORE')
if mibBuilder.loadTexts: foreFrameRelayModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreFrameRelayModule.setDescription(' This MIB is considered as being required in addition to the standard mibs RFC1604 and RFC1315. It provides configuration and statistics information at frame relay service and connection level.')
frextDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1), )
if mibBuilder.loadTexts: frextDlcmiTable.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface corresponding to any given ifEntry. These parameters are logical extensions to those in contained within the object frDlcmiTable in RFC1315.')
frextDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1), ).setIndexNames((0, "Fore-frs-MIB", "frextDlcmiServiceIfIndex"))
if mibBuilder.loadTexts: frextDlcmiEntry.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiEntry.setDescription('The Parameters for the Data Link Connection Management Interface.')
frextDlcmiServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiServiceIfIndex.setDescription('The Service/FR-UNI identifier ifIndex value of the corresponding ifEntry.')
frextDlcmiProfileLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextDlcmiProfileLmiIndex.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiProfileLmiIndex.setDescription('Index for the LMI profile for this FR service.')
frextDlcmiProfileServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextDlcmiProfileServiceIndex.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiProfileServiceIndex.setDescription('Index of the Service profile for this FR service.')
frextDlcmiStatsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextDlcmiStatsMonitor.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiStatsMonitor.setDescription('This object specifies whether statistics are to be counted at a service level, this includes service and connection statistics. When the state changes from enabled to disabled all the related statistics will be frozen at their current value. When the state changes from disabled to enabled then all related statistics will be reset (zeroised). Note that this Monitor is overriden by the netmod level nmFramStatsMonitor. Refer to fore-fram.mib for more details.')
frextDlcmiStatsEnabledTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiStatsEnabledTimeStamp.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiStatsEnabledTimeStamp.setDescription('This object reflects the point in time, with reference to sysUpTime, either when frextDlcmiStatsMonitor is set to enabled or when nmFramStatsMonitor is set to enabled. The time will reflect the last StatsMonitor to be enabled. The timestamp provides a starting timestamp for the current statistics that are being counted.')
frextDlcmiLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiDlci.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiDlci.setDescription(' the dlci upon which LMI traffic will be broadcast. If Q933-AnnexA=0, otherwise STRATACOM=1023.')
frextDlcmiLmiFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextDlcmiLmiFlowControl.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiFlowControl.setDescription('Specifies whether STRATACOM LMI based (R-bit) notification performs flow control for the Circuits on this interface.')
frextDlcmiRAControl = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextDlcmiRAControl.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRAControl.setDescription('Specifies whether Rate Adaptation-RA performs flow control for the Circuits on this interface.')
frextDlcmiLmiBandwidthControl = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextDlcmiLmiBandwidthControl.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiBandwidthControl.setDescription('Specifies whether STRATACOM LMI based CIR notification affects the CIR flow control parameters for the connections on this interface.')
frextDlcmiRxAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiRxAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRxAbortedFrames.setDescription('The number of aborted frames received on this Frame Relay logical interface.A frame is considered aborted after receiving 7 or more continuous ones.')
frextDlcmiRcvCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiRcvCrcErrors.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRcvCrcErrors.setDescription('Specifies the number of frames receive with CRC errors on this interface.')
frextDlcmiRcvShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiRcvShortFrames.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRcvShortFrames.setDescription('The number of frames containing less than 5 octets received on this interface.')
frextDlcmiRcvLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiRcvLongFrames.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRcvLongFrames.setDescription('The number of frames containing greater than 8191 octets received on this interface.')
frextDlcmiRcvInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiRcvInvalidDLCI.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRcvInvalidDLCI.setDescription('The number of frames with an invalid DLCI received on this interface.')
frextDlcmiRcvUnknownErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiRcvUnknownErrs.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiRcvUnknownErrs.setDescription('The number of frames with other errors received on this interface.')
frextDlcmiLmiTxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiTxStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiTxStatusResponses.setDescription('Number of STATUS messages transmited on this interface.')
frextDlcmiLmiTxFullStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiTxFullStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiTxFullStatusResponses.setDescription('Number of STATUS messages with full status IE transmited on this interface.')
frextDlcmiLmiTxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiTxStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiTxStatusEnquiries.setDescription('Number of STATUS ENQUIRY messages transmited on this interface.')
frextDlcmiLmiTxFullStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiTxFullStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiTxFullStatusEnquiries.setDescription('Number of STATUS ENQUIRY messages with full status IE transmited on this interface.')
frextDlcmiLmiRxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiRxStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiRxStatusResponses.setDescription('Number of STATUS messages received on this interface.')
frextDlcmiLmiRxFullStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiRxFullStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiRxFullStatusResponses.setDescription(' Number of STATUS messages with full status IE received on this interface.')
frextDlcmiLmiRxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiRxStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiRxStatusEnquiries.setDescription('Number of STATUS messages received on this interface.')
frextDlcmiLmiRxFullStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiRxFullStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiRxFullStatusEnquiries.setDescription(' Number of STATUS ENQUIRY messages with full status IE (Information Element) receive on this interface.')
frextDlcmiLmiUnknownMessagesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiUnknownMessagesRcvd.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiUnknownMessagesRcvd.setDescription('Number of Unknown LMI messages received on this interface.')
frextDlcmiLmiStatusLostSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiStatusLostSequences.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiStatusLostSequences.setDescription('The total number of times a loss of sequencing in received STATUS messages was detected on this interface.')
frextDlcmiLmiStatusEnqLostSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiStatusEnqLostSequences.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiStatusEnqLostSequences.setDescription('The total number of times a loss of sequencing in received STATUS ENQUIRY messages was detected on this interface.')
frextDlcmiLmiMissingStatEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiMissingStatEnquiries.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiMissingStatEnquiries.setDescription('The number of times an expected STATUS ENQUIRY message was not received within the expected time on this interface.')
frextDlcmiLmiUnexpectedPVCStatMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiUnexpectedPVCStatMsg.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiUnexpectedPVCStatMsg.setDescription('The number of LMI messages that were received with unexpected PVC STATUS IE on this interface.')
frextDlcmiLmiUnexpectedDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiUnexpectedDLCI.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiUnexpectedDLCI.setDescription('The number of STATUS messages received with unconfigured DLCI')
frextDlcmiLmiStatEnqRatePlus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiStatEnqRatePlus.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiStatEnqRatePlus.setDescription('The number of times the STATUS ENQUIRY message was received more frequently than expected. For STRATACOM only')
frextDlcmiLmiInvInfoFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiInvInfoFrame.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiInvInfoFrame.setDescription('The number of times an LMI message was received with information type not equal to unnumbered information type.')
frextDlcmiLmiInvFrameHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiInvFrameHdr.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiInvFrameHdr.setDescription('The number of LMI frames received with error in the header bits.')
frextDlcmiLmiNoIERepType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiNoIERepType.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiNoIERepType.setDescription('The number of times an LMI frame was received with missing Report Type IE')
frextDlcmiLmiNoIEKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiNoIEKeepAlive.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiNoIEKeepAlive.setDescription('The number of times an LMI frame was received with missing Link Integrity Verification IE.')
frextDlcmiLmiMissingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiMissingResponses.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiMissingResponses.setDescription('The total number of times a timeout occurred without receiving a response to an LMI request by this interface.')
frextDlcmiLmiUnsuppIERcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiLmiUnsuppIERcvd.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiLmiUnsuppIERcvd.setDescription('The number of LMI messages received with unknown Information Element.')
frextDlcmiPvccs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextDlcmiPvccs.setStatus('current')
if mibBuilder.loadTexts: frextDlcmiPvccs.setDescription('The number of permanent VCCs established on this Frame Relay logical interface')
frextCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2), )
if mibBuilder.loadTexts: frextCircuitTable.setStatus('current')
if mibBuilder.loadTexts: frextCircuitTable.setDescription('A table containing information about specific Data Link Connection Identifiers and corresponding connections.')
frextCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1), ).setIndexNames((0, "Fore-frs-MIB", "frextCircuitServiceIfIndex"), (0, "Fore-frs-MIB", "frextCircuitDlci"))
if mibBuilder.loadTexts: frextCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: frextCircuitEntry.setDescription('The information regarding a single Data Link Connection Identifier.')
frextCircuitServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frextCircuitServiceIfIndex.setDescription('IfIndex of the Frame Relay Interface,UNI, to which data received from ATM is forwarded.The index generated by the agent for Frame Relay service identification. This index is volatile over power down ')
frextCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitDlci.setStatus('current')
if mibBuilder.loadTexts: frextCircuitDlci.setDescription("The connections' Frame Relay DLCI.")
frextCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextCircuitName.setStatus('current')
if mibBuilder.loadTexts: frextCircuitName.setDescription('The user-defined name for the connection.')
frextCircuitProfileFrRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextCircuitProfileFrRateIndex.setStatus('current')
if mibBuilder.loadTexts: frextCircuitProfileFrRateIndex.setDescription('Index of the ProfileFRRateTable (rate enforcement/rate adaptation configuration for this FR/ATM interworking connection')
frextCircuitREMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("standard", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frextCircuitREMonitor.setStatus('current')
if mibBuilder.loadTexts: frextCircuitREMonitor.setDescription('This object enables or disables the monitoring of Bc, Be and CIR on the Rx side of the connection, called Rate Enforcement.If set to none, no monitoring will be performed. If set to standard, Rx monitoring will drop any frames received in excess of Be, and will tag frames received in between Bc and Be')
frextCircuitRateFallbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRateFallbacks.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRateFallbacks.setDescription('The number of times that the insertion rate was lowered (due to network congestion reports) since the connection was created.')
frextCircuitRateFallforwards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRateFallforwards.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRateFallforwards.setDescription('The number of times that the insertion rate was increased (due to lack of network congestion reports) since the connection was created.')
frextCircuitEgFramesDroppedQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitEgFramesDroppedQueueFull.setStatus('current')
if mibBuilder.loadTexts: frextCircuitEgFramesDroppedQueueFull.setDescription('Number of frames which were dropped on this connection because the hold queue was full.')
frextCircuitNormalSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitNormalSentFrames.setStatus('current')
if mibBuilder.loadTexts: frextCircuitNormalSentFrames.setDescription('Number of frames sent on this connection within the Commited Information Rate since the connection was created.')
frextCircuitNormalSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitNormalSentOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitNormalSentOctets.setDescription('Number of octets sent on this connection within the Commited Information Rate since the connection was created.')
frextCircuitExcessSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitExcessSentOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitExcessSentOctets.setDescription('Number of octets sent on this connection above the Commited Information Rate, but below the Excess Information Rate since the connection was created.')
frextCircuitHeldBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitHeldBuffers.setStatus('current')
if mibBuilder.loadTexts: frextCircuitHeldBuffers.setDescription('Number of buffers which were used by the connection for enqueueing frames in preference to exceeding the allowed burst rate on this connection since the connection was created.')
frextCircuitOctetsOnQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitOctetsOnQueue.setStatus('current')
if mibBuilder.loadTexts: frextCircuitOctetsOnQueue.setDescription('Number of octets currently being used for enqueueing frames in order to be transmited.')
frextCircuitBuffersOnQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitBuffersOnQueue.setStatus('current')
if mibBuilder.loadTexts: frextCircuitBuffersOnQueue.setDescription('Number of buffers currently being used for enqueueing frames in order to be transmited.')
frextCircuitRxMonNormalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonNormalFrames.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonNormalFrames.setDescription('The number of frames received on the connection within the committed burst (Bc).')
frextCircuitRxMonNormalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonNormalOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonNormalOctets.setDescription('The number of octets received on the connection within the committed burst (Bc).')
frextCircuitRxMonExcessOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonExcessOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonExcessOctets.setDescription('The number of octets received on the connection within the excess burst (Be).')
frextCircuitRxMonDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonDroppedOctets.setDescription('The number of octets received on the connection that were dropped because they were in excess Bc+Be.')
frextCircuitRxMonDroppedDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonDroppedDEFrames.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonDroppedDEFrames.setDescription('The number of frames with the DE bit set received on the connection that were dropped.')
frextCircuitRxMonDroppedDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonDroppedDEOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonDroppedDEOctets.setDescription('The number of octets in frames with the DE bit set received on the connection that were dropped.')
frextCircuitRxMonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonDEOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonDEOctets.setDescription('The number of octets with the DE bit set that were received on the connection.')
frextCircuitRxMonSetDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonSetDEFrames.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonSetDEFrames.setDescription('The number of frames received on the connection in which the Rx monitor set the DE bit.')
frextCircuitRxMonSetDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRxMonSetDEOctets.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRxMonSetDEOctets.setDescription('The number of octets in frames received on the connection in which the Rx monitor set the DE bit.')
frextCircuitRecvdBECNS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRecvdBECNS.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRecvdBECNS.setDescription('Number of frames received from the network in- dicating forward congestion since the connection was created. This object is defined in this table to provide the same object as defined in RFC 1315, while the interface is defined as a DCE.')
frextCircuitRecvdFECNS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frextCircuitRecvdFECNS.setStatus('current')
if mibBuilder.loadTexts: frextCircuitRecvdFECNS.setDescription('Number of frames received from the network in- dicating backward congestion since the connection was created.This object is defined in this table to provide the same object as defined in RFC 1315, while the interface is defined as a DCE.')
frsOamF5Table = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3), )
if mibBuilder.loadTexts: frsOamF5Table.setStatus('current')
if mibBuilder.loadTexts: frsOamF5Table.setDescription('The OAM statistics table on a VCC basis')
frsOamF5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1), ).setIndexNames((0, "Fore-frs-MIB", "frsOamF5AtmIf"), (0, "Fore-frs-MIB", "frsOamF5AtmVpi"), (0, "Fore-frs-MIB", "frsOamF5AtmVci"))
if mibBuilder.loadTexts: frsOamF5Entry.setStatus('current')
if mibBuilder.loadTexts: frsOamF5Entry.setDescription('An Entry in the OAM F5 statistics table on a VCC basis')
frsOamF5AtmIf = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5AtmIf.setStatus('current')
if mibBuilder.loadTexts: frsOamF5AtmIf.setDescription('The Atm interface index corresponds to the port. This is also the index of the portTable.')
frsOamF5AtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5AtmVpi.setStatus('current')
if mibBuilder.loadTexts: frsOamF5AtmVpi.setDescription('VPI of the ATM VCC on which FR DLCI maps onto')
frsOamF5AtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5AtmVci.setStatus('current')
if mibBuilder.loadTexts: frsOamF5AtmVci.setDescription('VCI of the ATM VCC on which FR DLCI maps onto')
frsOamF5AISRxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5AISRxCounter.setStatus('current')
if mibBuilder.loadTexts: frsOamF5AISRxCounter.setDescription('Number of VC-AIS cells received since the PVC was brought into service.')
frsOamF5AISTxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5AISTxCounter.setStatus('current')
if mibBuilder.loadTexts: frsOamF5AISTxCounter.setDescription('Number of VC-AIS cells transmited since the PVC was brought into service.')
frsOamF5RDIRxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5RDIRxCounter.setStatus('current')
if mibBuilder.loadTexts: frsOamF5RDIRxCounter.setDescription('Number of VC-RDI cells received since the PVC was brought into service.')
frsOamF5RDITxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOamF5RDITxCounter.setStatus('current')
if mibBuilder.loadTexts: frsOamF5RDITxCounter.setDescription('Number of VC-RDI cells transmited since the PVC was brought into service.')
mibBuilder.exportSymbols("Fore-frs-MIB", frextDlcmiRAControl=frextDlcmiRAControl, frsOamF5AtmIf=frsOamF5AtmIf, frextCircuitRxMonNormalOctets=frextCircuitRxMonNormalOctets, frextDlcmiRcvLongFrames=frextDlcmiRcvLongFrames, frextDlcmiLmiRxStatusEnquiries=frextDlcmiLmiRxStatusEnquiries, frextCircuitDlci=frextCircuitDlci, frextDlcmiLmiUnknownMessagesRcvd=frextDlcmiLmiUnknownMessagesRcvd, frextDlcmiLmiUnsuppIERcvd=frextDlcmiLmiUnsuppIERcvd, frextCircuitRecvdBECNS=frextCircuitRecvdBECNS, frextCircuitRecvdFECNS=frextCircuitRecvdFECNS, frextDlcmiRcvShortFrames=frextDlcmiRcvShortFrames, frextDlcmiRcvUnknownErrs=frextDlcmiRcvUnknownErrs, frextCircuitProfileFrRateIndex=frextCircuitProfileFrRateIndex, frextDlcmiLmiStatusLostSequences=frextDlcmiLmiStatusLostSequences, frextDlcmiPvccs=frextDlcmiPvccs, frextCircuitServiceIfIndex=frextCircuitServiceIfIndex, frextCircuitExcessSentOctets=frextCircuitExcessSentOctets, frextDlcmiServiceIfIndex=frextDlcmiServiceIfIndex, frextDlcmiLmiRxFullStatusResponses=frextDlcmiLmiRxFullStatusResponses, frextDlcmiLmiRxFullStatusEnquiries=frextDlcmiLmiRxFullStatusEnquiries, frextCircuitRateFallbacks=frextCircuitRateFallbacks, frextCircuitHeldBuffers=frextCircuitHeldBuffers, frextDlcmiEntry=frextDlcmiEntry, frextDlcmiLmiRxStatusResponses=frextDlcmiLmiRxStatusResponses, frextCircuitREMonitor=frextCircuitREMonitor, frextCircuitNormalSentFrames=frextCircuitNormalSentFrames, frextDlcmiStatsMonitor=frextDlcmiStatsMonitor, frextCircuitOctetsOnQueue=frextCircuitOctetsOnQueue, frsOamF5RDIRxCounter=frsOamF5RDIRxCounter, frextDlcmiLmiNoIEKeepAlive=frextDlcmiLmiNoIEKeepAlive, frextCircuitEntry=frextCircuitEntry, frextCircuitRxMonSetDEOctets=frextCircuitRxMonSetDEOctets, frsOamF5Table=frsOamF5Table, frextDlcmiLmiStatEnqRatePlus=frextDlcmiLmiStatEnqRatePlus, frsOamF5RDITxCounter=frsOamF5RDITxCounter, frsOamF5Entry=frsOamF5Entry, frextDlcmiLmiStatusEnqLostSequences=frextDlcmiLmiStatusEnqLostSequences, frextCircuitRxMonDEOctets=frextCircuitRxMonDEOctets, frextCircuitRxMonDroppedOctets=frextCircuitRxMonDroppedOctets, frextDlcmiRcvInvalidDLCI=frextDlcmiRcvInvalidDLCI, frextDlcmiLmiInvInfoFrame=frextDlcmiLmiInvInfoFrame, frextDlcmiTable=frextDlcmiTable, frextDlcmiRxAbortedFrames=frextDlcmiRxAbortedFrames, frextCircuitEgFramesDroppedQueueFull=frextCircuitEgFramesDroppedQueueFull, frextCircuitRxMonDroppedDEFrames=frextCircuitRxMonDroppedDEFrames, frextDlcmiProfileLmiIndex=frextDlcmiProfileLmiIndex, frextDlcmiLmiTxFullStatusResponses=frextDlcmiLmiTxFullStatusResponses, frextDlcmiLmiUnexpectedDLCI=frextDlcmiLmiUnexpectedDLCI, frextCircuitRxMonExcessOctets=frextCircuitRxMonExcessOctets, frsOamF5AISRxCounter=frsOamF5AISRxCounter, frextDlcmiLmiDlci=frextDlcmiLmiDlci, frextDlcmiLmiTxStatusResponses=frextDlcmiLmiTxStatusResponses, foreFrameRelayModule=foreFrameRelayModule, frextDlcmiLmiTxFullStatusEnquiries=frextDlcmiLmiTxFullStatusEnquiries, frextDlcmiLmiTxStatusEnquiries=frextDlcmiLmiTxStatusEnquiries, frextDlcmiProfileServiceIndex=frextDlcmiProfileServiceIndex, PYSNMP_MODULE_ID=foreFrameRelayModule, frextCircuitRxMonDroppedDEOctets=frextCircuitRxMonDroppedDEOctets, frextDlcmiLmiMissingStatEnquiries=frextDlcmiLmiMissingStatEnquiries, frextCircuitTable=frextCircuitTable, frextCircuitBuffersOnQueue=frextCircuitBuffersOnQueue, frextDlcmiLmiInvFrameHdr=frextDlcmiLmiInvFrameHdr, frextCircuitRxMonNormalFrames=frextCircuitRxMonNormalFrames, frextCircuitRateFallforwards=frextCircuitRateFallforwards, frsOamF5AtmVpi=frsOamF5AtmVpi, frsOamF5AISTxCounter=frsOamF5AISTxCounter, frextDlcmiLmiFlowControl=frextDlcmiLmiFlowControl, frextCircuitNormalSentOctets=frextCircuitNormalSentOctets, frextDlcmiLmiBandwidthControl=frextDlcmiLmiBandwidthControl, frextDlcmiRcvCrcErrors=frextDlcmiRcvCrcErrors, frextDlcmiStatsEnabledTimeStamp=frextDlcmiStatsEnabledTimeStamp, frextDlcmiLmiNoIERepType=frextDlcmiLmiNoIERepType, frextCircuitName=frextCircuitName, frsOamF5AtmVci=frsOamF5AtmVci, frextDlcmiLmiUnexpectedPVCStatMsg=frextDlcmiLmiUnexpectedPVCStatMsg, frextCircuitRxMonSetDEFrames=frextCircuitRxMonSetDEFrames, frextDlcmiLmiMissingResponses=frextDlcmiLmiMissingResponses)
