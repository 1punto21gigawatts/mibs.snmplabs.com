#
# PySNMP MIB module BRCD-DOT1X-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BRCD-DOT1X-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, iso, Gauge32, Counter64, NotificationType, IpAddress, ObjectIdentity, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "iso", "Gauge32", "Counter64", "NotificationType", "IpAddress", "ObjectIdentity", "Unsigned32", "Counter32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
brcdDot1xAuth = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38))
brcdDot1xAuth.setRevisions(('2010-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: brcdDot1xAuth.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: brcdDot1xAuth.setLastUpdated('201009300000Z')
if mibBuilder.loadTexts: brcdDot1xAuth.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: brcdDot1xAuth.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: brcdDot1xAuth.setDescription("Management Information for configuration /querying of 802.1x authentication It is grouped into five MIBs - 1. Global level configurable admin /status 802.1x information 2. Port level EAPOL statistics information 3. Port level configuration information 4. Different Port state information and 5. 802.1x mac session information Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

brcdDot1xAuthGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1))
brcdDot1xAuthPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2))
brcdDot1xAuthPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 3))
brcdDot1xAuthPortState = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4))
brcdDot1xAuthMacSession = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5))
brcdDot1xAuthGlobalAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 6))
brcdDot1xAuthGlobalConfigQuietperiod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigQuietperiod.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigQuietperiod.setDescription('When the Brocade device is unable to authenticate a Client, the amount of time the Brocade device waits before trying again.. The allowed range is from 1 to 4294967294')
brcdDot1xAuthGlobalConfigTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigTxPeriod.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigTxPeriod.setDescription('When a Client does not send back an EAP(Extensible Authentication Protocol)-response/identity frame, the amount of time the Brocade device waits before retransmitting the EAP-request/identity frame to a Client The allowed range is from 1 to 4294967294')
brcdDot1xAuthGlobalConfigSuppTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigSuppTimeOut.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigSuppTimeOut.setDescription('When a supplicant (Client) does not respond to an EAP-request frame, the amount of time before the Brocade device retransmits the frame The allowed range is from 1 to 4294967294')
brcdDot1xAuthGlobalConfigAuthServerTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigAuthServerTimeOut.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigAuthServerTimeOut.setDescription('When the Authentication Server (RADIUS) does not respond to a message sent from the Client, the amount of time before the Brocade device retransmits the message. The allowed range is from 1 to 4294967294')
brcdDot1xAuthGlobalConfigMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 5), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigMaxReq.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigMaxReq.setDescription('The number of times the Brocade device retransmits an EAP-request/identity request frame if it does not receive an EAP-response/identity response frame from a Client')
brcdDot1xAuthGlobalConfigReAuthMax = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 6), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigReAuthMax.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigReAuthMax.setDescription('The number of re-authentication attempts that are permitted before the port becomes Unauthorized')
brcdDot1xAuthGlobalConfigReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigReAuthPeriod.setDescription('How often the device automatically re-authenticates clients when periodic re-authentication is enabled The allowed range is from 1 to 4294967294')
brcdDot1xAuthGlobalConfigProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigProtocolVersion.setDescription('The EAP protocol version')
brcdDot1xAuthGlobalConfigTotalPortsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigTotalPortsEnabled.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigTotalPortsEnabled.setDescription('The total number of ports that have 802.1x enabled')
brcdDot1xAuthGlobalConfigReauthStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 10), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigReauthStatus.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigReauthStatus.setDescription('Used to enable / disable Reauthentication globally')
brcdDot1xAuthGlobalConfigMacSessionMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigMacSessionMaxAge.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigMacSessionMaxAge.setDescription('The Max-Age of the 802.1x mac session- A value between 0 and 65535')
brcdDot1xAuthGlobalConfigNoAgingDeniedSessions = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 12), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigNoAgingDeniedSessions.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigNoAgingDeniedSessions.setDescription('Enable / Disable Mac-Session-No Aging for Denied sessions')
brcdDot1xAuthGlobalConfigNoAgingPermittedSessions = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 13), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigNoAgingPermittedSessions.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigNoAgingPermittedSessions.setDescription('Enable / Disable Mac-Session-No Aging for Permitted sessions')
brcdDot1xAuthGlobalConfigAuthFailAction = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blockTraffic", 1), ("restrictedVlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigAuthFailAction.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalConfigAuthFailAction.setDescription('To Configure the action to take when the authentication fails')
brcdDot1xAuthPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1), )
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTable.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTable.setDescription('A table that contains port EAP(Extensible Authentication Protocol) frames statistics for 802.1x authentication')
brcdDot1xAuthPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: brcdDot1xAuthPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatEntry.setDescription('An entry of EAP frames statistics indexed by ifIndex')
brcdDot1xAuthPortStatRxEAPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPFrames.setDescription('The total number of EAPOL frames received on the port It includes EAP frames - ')
brcdDot1xAuthPortStatTxEAPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTxEAPFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTxEAPFrames.setDescription('The no of EAPOL frames transmitted on the port')
brcdDot1xAuthPortStatRxEAPStartFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPStartFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPStartFrames.setDescription('The number of EAPOL-Start frames received on the port')
brcdDot1xAuthPortStatRxEAPLogOffFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPLogOffFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPLogOffFrames.setDescription('The number of EAPOL-Logoff frames received on the port')
brcdDot1xAuthPortStatRxEAPRespIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPRespIdFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPRespIdFrames.setDescription('The number of EAP frames other than Response/Identity frames received on the port')
brcdDot1xAuthPortStatTxEAPReqIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTxEAPReqIdFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTxEAPReqIdFrames.setDescription('The number of EAP-Request/Identity frames transmitted on the port')
brcdDot1xAuthPortStatRxEAPInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPInvalidFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPInvalidFrames.setDescription('The number of invalid EAPOL frames received on the port')
brcdDot1xAuthPortStatEAPLastFrameVersionRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatEAPLastFrameVersionRx.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatEAPLastFrameVersionRx.setDescription('The version of last EAP frame received')
brcdDot1xAuthPortStatRxEAPRespOrIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPRespOrIdFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxEAPRespOrIdFrames.setDescription('The number of received EAP response or Id frames on the port')
brcdDot1xAuthPortStatRxLengthErrorFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxLengthErrorFrame.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatRxLengthErrorFrame.setDescription('The received EAP Length Error frame')
brcdDot1xAuthPortStatTxRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTxRequestFrames.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatTxRequestFrames.setDescription('The number of transmitted EAP request frames on the port')
brcdDot1xAuthPortStatLastEAPFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 2, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatLastEAPFrameSource.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatLastEAPFrameSource.setDescription('The MAC address of the source from which the last EAP frame came')
brcdDot1xAuthPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1), )
if mibBuilder.loadTexts: brcdDot1xAuthPortStateTable.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateTable.setDescription('A table that contains entries of port dot1x values')
brcdDot1xAuthPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: brcdDot1xAuthPortStateEntry.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateEntry.setDescription('An entry of 802.1x config values indexed by ifIndex to be able to have port values')
brcdDot1xAuthPortStateMacSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStateMacSessions.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateMacSessions.setDescription('Number of 802.1x MAC sessions per port')
brcdDot1xAuthPortStateAuthMacSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStateAuthMacSessions.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateAuthMacSessions.setDescription('Number of Authorized MAC sessions per port')
brcdDot1xAuthPortStateOriginalPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStateOriginalPVID.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateOriginalPVID.setDescription("Originally configured(not dynamically assigned) PVID(port's default VLAN ID) for the port")
brcdDot1xAuthPortStatePVIDMacTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePVIDMacTotal.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePVIDMacTotal.setDescription("The number of devices transmitting untagged traffic on the port's PVID")
brcdDot1xAuthPortStatePVIDMacAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePVIDMacAuthorized.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePVIDMacAuthorized.setDescription("The number of devices transmitting untagged traffic on the port's PVID as a result of dynamic VLAN assignment")
brcdDot1xAuthPortStatePortVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("restricted", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePortVlanState.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePortVlanState.setDescription("The Current Vlan state the port is in, which can be RADIUS -The port's PVID was dynamically assigned by a RADIUS server Restricted - The port's PVID is the restricted VLAN Normal - The port's PVID is not set by a RADIUS server, nor is it the restricted VLAN")
brcdDot1xAuthPortStatePVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePVID.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStatePVID.setDescription('The Dot1x Authentication default Port VLAN Id')
brcdDot1xAuthPortStateRestrictPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStateRestrictPVID.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateRestrictPVID.setDescription('Restrict PVID')
brcdDot1xAuthPortStateRadiusAssignPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthPortStateRadiusAssignPVID.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortStateRadiusAssignPVID.setDescription('RADIUS assign PVID')
brcdDot1xAuthPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 3, 1), )
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigTable.setDescription('A table that allows configuration of dot1x values for a given port')
brcdDot1xAuthPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigEntry.setDescription('An entry of 802.1x config values')
brcdDot1xAuthPortConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("controlauto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigPortControl.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigPortControl.setDescription("The configured port control type for the interface which can be 1. force-unauthorized - port's controlled port is placed unconditionally in the unauthorized state 2. control-auto - the controlled port is unauthorized until authentication takes place between client and RADIUS 3. force-authorized - the port's controlled port is placed unconditionally in the authorized state")
brcdDot1xAuthPortConfigFilterStrictSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigFilterStrictSec.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigFilterStrictSec.setDescription('To configure filter strict security on the interface - enable(1) or disable(0)')
brcdDot1xAuthPortConfigDot1xOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 3, 1, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigDot1xOnPort.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthPortConfigDot1xOnPort.setDescription('To Configure (enable / disable) 802.1x on an interface level')
brcdDot1xAuthMacSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1), )
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionTable.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionTable.setDescription('A table that contains 802.1x MAC sessions')
brcdDot1xAuthMacSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "BRCD-DOT1X-MIB", "brcdDot1xAuthMacSessionAuthMac"))
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionEntry.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionEntry.setDescription('An entry containing information applicable to a particular interface and client MAC ie., dot1x-mac-session ')
brcdDot1xAuthMacSessionAuthMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAuthMac.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAuthMac.setDescription('Mac address of the client - which basically represents the username used for RADIUS authentication')
brcdDot1xAuthMacSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionUserName.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionUserName.setDescription('User name of the 802.1x mac session')
brcdDot1xAuthMacSessionIncomingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionIncomingVlanId.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionIncomingVlanId.setDescription('Incoming VLAN ID')
brcdDot1xAuthMacSessionCurrentVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 4), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionCurrentVlanId.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionCurrentVlanId.setDescription('The VLAN to which the port is currently assigned')
brcdDot1xAuthMacSessionAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permit", 1), ("blocked", 2), ("restrict", 3), ("init", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAccessStatus.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAccessStatus.setDescription('The authentication state of the dot1x-mac-session - which can be permitted, denied, restricted or in the Init state')
brcdDot1xAuthMacSessionMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionMaxAge.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionMaxAge.setDescription('MAX Age of the mac session in which the MAC address is authenticated.')
brcdDot1xAuthMacSessionAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAddrType.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAddrType.setDescription('Client(supplicant) IP address Type. Supported address types are ipv4(1) and ipv6(2)')
brcdDot1xAuthMacSessionIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionIpAddr.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionIpAddr.setDescription('The IP Address of the client')
brcdDot1xAuthMacSessionAging = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("ena", 3), ("notapplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAging.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthMacSessionAging.setDescription("The age's type - Hardware or Software aging, Ena in which case the aging hasn't started, or notapplicable when there is a fake 802.1x mac session")
brcdDot1xAuthGlobalAdminConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 38, 6, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdDot1xAuthGlobalAdminConfigStatus.setStatus('current')
if mibBuilder.loadTexts: brcdDot1xAuthGlobalAdminConfigStatus.setDescription('Used to enable /disable 802.1x authentication globally')
mibBuilder.exportSymbols("BRCD-DOT1X-MIB", brcdDot1xAuthPortStatePVIDMacAuthorized=brcdDot1xAuthPortStatePVIDMacAuthorized, brcdDot1xAuthPortStatistics=brcdDot1xAuthPortStatistics, brcdDot1xAuthGlobalConfigTxPeriod=brcdDot1xAuthGlobalConfigTxPeriod, VlanId=VlanId, brcdDot1xAuthPortStatRxEAPInvalidFrames=brcdDot1xAuthPortStatRxEAPInvalidFrames, brcdDot1xAuthPortStatRxEAPRespOrIdFrames=brcdDot1xAuthPortStatRxEAPRespOrIdFrames, brcdDot1xAuthPortStatTxRequestFrames=brcdDot1xAuthPortStatTxRequestFrames, brcdDot1xAuthPortStateAuthMacSessions=brcdDot1xAuthPortStateAuthMacSessions, brcdDot1xAuthMacSessionCurrentVlanId=brcdDot1xAuthMacSessionCurrentVlanId, brcdDot1xAuthGlobalConfigNoAgingPermittedSessions=brcdDot1xAuthGlobalConfigNoAgingPermittedSessions, brcdDot1xAuthPortConfigTable=brcdDot1xAuthPortConfigTable, brcdDot1xAuthMacSessionIncomingVlanId=brcdDot1xAuthMacSessionIncomingVlanId, brcdDot1xAuthPortStatTable=brcdDot1xAuthPortStatTable, brcdDot1xAuthMacSessionAuthMac=brcdDot1xAuthMacSessionAuthMac, brcdDot1xAuthGlobalConfigReAuthPeriod=brcdDot1xAuthGlobalConfigReAuthPeriod, brcdDot1xAuthGlobalConfigQuietperiod=brcdDot1xAuthGlobalConfigQuietperiod, brcdDot1xAuthMacSessionTable=brcdDot1xAuthMacSessionTable, brcdDot1xAuthPortStateMacSessions=brcdDot1xAuthPortStateMacSessions, brcdDot1xAuthPortStatePVIDMacTotal=brcdDot1xAuthPortStatePVIDMacTotal, brcdDot1xAuthPortState=brcdDot1xAuthPortState, brcdDot1xAuthPortStatEAPLastFrameVersionRx=brcdDot1xAuthPortStatEAPLastFrameVersionRx, brcdDot1xAuthPortStateRadiusAssignPVID=brcdDot1xAuthPortStateRadiusAssignPVID, brcdDot1xAuthPortStatLastEAPFrameSource=brcdDot1xAuthPortStatLastEAPFrameSource, brcdDot1xAuthGlobalConfigSuppTimeOut=brcdDot1xAuthGlobalConfigSuppTimeOut, brcdDot1xAuthPortConfigDot1xOnPort=brcdDot1xAuthPortConfigDot1xOnPort, PYSNMP_MODULE_ID=brcdDot1xAuth, brcdDot1xAuthPortStatRxEAPRespIdFrames=brcdDot1xAuthPortStatRxEAPRespIdFrames, brcdDot1xAuthMacSessionUserName=brcdDot1xAuthMacSessionUserName, brcdDot1xAuthPortStateTable=brcdDot1xAuthPortStateTable, brcdDot1xAuthGlobalAdminGroup=brcdDot1xAuthGlobalAdminGroup, brcdDot1xAuthMacSessionAging=brcdDot1xAuthMacSessionAging, brcdDot1xAuthGlobalAdminConfigStatus=brcdDot1xAuthGlobalAdminConfigStatus, brcdDot1xAuthPortConfigPortControl=brcdDot1xAuthPortConfigPortControl, brcdDot1xAuthPortConfigEntry=brcdDot1xAuthPortConfigEntry, brcdDot1xAuth=brcdDot1xAuth, brcdDot1xAuthPortStatePortVlanState=brcdDot1xAuthPortStatePortVlanState, brcdDot1xAuthMacSessionMaxAge=brcdDot1xAuthMacSessionMaxAge, brcdDot1xAuthPortStatePVID=brcdDot1xAuthPortStatePVID, brcdDot1xAuthGlobalConfigGroup=brcdDot1xAuthGlobalConfigGroup, brcdDot1xAuthPortConfig=brcdDot1xAuthPortConfig, brcdDot1xAuthGlobalConfigMaxReq=brcdDot1xAuthGlobalConfigMaxReq, brcdDot1xAuthGlobalConfigNoAgingDeniedSessions=brcdDot1xAuthGlobalConfigNoAgingDeniedSessions, brcdDot1xAuthPortStatRxEAPStartFrames=brcdDot1xAuthPortStatRxEAPStartFrames, brcdDot1xAuthMacSessionIpAddr=brcdDot1xAuthMacSessionIpAddr, brcdDot1xAuthMacSessionAddrType=brcdDot1xAuthMacSessionAddrType, brcdDot1xAuthPortStateEntry=brcdDot1xAuthPortStateEntry, brcdDot1xAuthGlobalConfigAuthServerTimeOut=brcdDot1xAuthGlobalConfigAuthServerTimeOut, brcdDot1xAuthPortStateRestrictPVID=brcdDot1xAuthPortStateRestrictPVID, brcdDot1xAuthMacSessionEntry=brcdDot1xAuthMacSessionEntry, brcdDot1xAuthGlobalConfigTotalPortsEnabled=brcdDot1xAuthGlobalConfigTotalPortsEnabled, brcdDot1xAuthPortStatRxLengthErrorFrame=brcdDot1xAuthPortStatRxLengthErrorFrame, brcdDot1xAuthMacSessionAccessStatus=brcdDot1xAuthMacSessionAccessStatus, brcdDot1xAuthMacSession=brcdDot1xAuthMacSession, brcdDot1xAuthGlobalConfigProtocolVersion=brcdDot1xAuthGlobalConfigProtocolVersion, brcdDot1xAuthPortConfigFilterStrictSec=brcdDot1xAuthPortConfigFilterStrictSec, brcdDot1xAuthGlobalConfigReAuthMax=brcdDot1xAuthGlobalConfigReAuthMax, brcdDot1xAuthPortStateOriginalPVID=brcdDot1xAuthPortStateOriginalPVID, brcdDot1xAuthPortStatTxEAPReqIdFrames=brcdDot1xAuthPortStatTxEAPReqIdFrames, brcdDot1xAuthGlobalConfigAuthFailAction=brcdDot1xAuthGlobalConfigAuthFailAction, brcdDot1xAuthPortStatRxEAPLogOffFrames=brcdDot1xAuthPortStatRxEAPLogOffFrames, brcdDot1xAuthPortStatTxEAPFrames=brcdDot1xAuthPortStatTxEAPFrames, brcdDot1xAuthPortStatRxEAPFrames=brcdDot1xAuthPortStatRxEAPFrames, brcdDot1xAuthGlobalConfigReauthStatus=brcdDot1xAuthGlobalConfigReauthStatus, brcdDot1xAuthGlobalConfigMacSessionMaxAge=brcdDot1xAuthGlobalConfigMacSessionMaxAge, brcdDot1xAuthPortStatEntry=brcdDot1xAuthPortStatEntry)
