#
# PySNMP MIB module A3COM-HUAWEI-POWER-ETH-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-POWER-ETH-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
pethMainPseGroupIndex, pethPsePortGroupIndex, pethPsePortIndex, pethPsePortDetectionStatus = mibBuilder.importSymbols("POWER-ETHERNET-MIB", "pethMainPseGroupIndex", "pethPsePortGroupIndex", "pethPsePortIndex", "pethPsePortDetectionStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, IpAddress, ObjectIdentity, Unsigned32, Bits, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, NotificationType, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "IpAddress", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "NotificationType", "ModuleIdentity", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
h3cPowerEthernetExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14))
if mibBuilder.loadTexts: h3cPowerEthernetExt.setLastUpdated('200407261023Z')
if mibBuilder.loadTexts: h3cPowerEthernetExt.setOrganization('Organization.')
if mibBuilder.loadTexts: h3cPowerEthernetExt.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: h3cPowerEthernetExt.setDescription('Description.')
h3cPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1), )
if mibBuilder.loadTexts: h3cPsePortTable.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortTable.setDescription('The indexing scheme is taken form that used by the IETF Power MIB. The same indexing scheme is used to give continuity in behaviour between that standard and this extensions definitioin.')
h3cPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1), ).setIndexNames((0, "POWER-ETHERNET-MIB", "pethPsePortGroupIndex"), (0, "POWER-ETHERNET-MIB", "pethPsePortIndex"))
if mibBuilder.loadTexts: h3cPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortEntry.setDescription('The pethPsePortGroupIndex is imported from the IETF Power MIB and uniquely identifies the group containing the port to which power ethernet PSE is connected. Group means (box in the stack, module in a rack). The pethPsePortPowerIndex is imported from the IETF Power MIB and uniquely identifies the power ethernet PSE port within group pethPseGroupIndex to which the power Ethernet PSE entry is connected. This value will match the local port number on a switch.')
h3cPsePortFaultDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePortFaultDescription.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortFaultDescription.setDescription("The object supports the fault category of the IETF Power MIB [1] pethPsePortDetectionStatus object. A textual description containing more information about the nature of this fault is provided by this object. Typically this will detail the precise PoE hardware state which is causing the pethPsePortDetectionStatus object to be in the 'fault' state. It is a DisplayString of up to 255 characters.")
h3cPsePortPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePortPeakPower.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortPeakPower.setDescription('The object specifies the peak power which has been consumed by the port. It is defined as the highest measured value of power in milliWatts that has been consumed by the port. Its value is only reset when link is lost, the port is PoE disabled or when it is manually reset by the user asspecified below. It is a read/write integer value with units of milliWatts. Writing a value of zero to this object resets its value to zero. Writing any other value to this object has no effect on its value and an error is returned.')
h3cPsePortAveragePower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePortAveragePower.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortAveragePower.setDescription('The object specifies the average power which has been consumed by the port. This object is a read/write integer value with units of milliWatts. Writing a value of zero to this object resets its value to zero. Writing any other value to this object has no effect on its value and an error is returned.')
h3cPsePortCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPsePortCurrentPower.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortCurrentPower.setDescription('The object specifies the power currently being consumed by the port. It is a read only integer value with units of milliWatts.')
h3cPsePortPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePortPowerLimit.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortPowerLimit.setDescription('The object specifies the power limit set for this port. The PSE will not supply more than this level of power to the specified port. It is a read/write integer value with units of milliWatts.')
h3cPsePortProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePortProfileIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortProfileIndex.setDescription('Indicates the power profile which is currently associated with this port. This object references the corresponding h3cPseProfileIndex object in the power profiles table. A value of zero is a special case and indicates that no power profile is currently associated with this port. When h3cPseProfileIndex is set to an index of existent profile, pethPsePortPowerPairs, pethPsePortPowerPriority, pethPsePortAdminEnable and h3cPsePortPowerLimit will be set to the same as corresponding value. PethPsePortPowerPairs, pethPsePortPowerPriority and pethPsePortAdminEnable are objects of rfc3621-Power-Ethernet.mib.')
h3cMainPseTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2), )
if mibBuilder.loadTexts: h3cMainPseTable.setStatus('current')
if mibBuilder.loadTexts: h3cMainPseTable.setDescription('Description.')
h3cMainPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1), ).setIndexNames((0, "POWER-ETHERNET-MIB", "pethMainPseGroupIndex"))
if mibBuilder.loadTexts: h3cMainPseEntry.setStatus('current')
if mibBuilder.loadTexts: h3cMainPseEntry.setDescription('The pethMainPseGroupIndex is imported from the IETF Power MIB and uniquely identifies the group containing the port to which power ethernet PSE is connected. Group means (box in the stack, module in a rack) and the value 1 MUST be used for non-modular devices.')
h3cMainPsePowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMainPsePowerLimit.setStatus('current')
if mibBuilder.loadTexts: h3cMainPsePowerLimit.setDescription('The object specifies the power limit set for the unit as a whole. The PoE unit will already have a nominal power defined by the IETF Power MIB [1] pethMainPsePower object. This OPTIONAL object specifies a further limit to this nominal power value. This may be useful to control the thermals of the unit, or for internal testing purposes. One possible use for this object may be to lower the power consumption of the unit if one or more of the internal fans have broken. It is a read/write integer value with units of Watts (note - Watts is chosen instead of milliWatts here since the IETF Power MIB [1] measures unit based parameters, such as the pethMainPsePower object, in units of Watts).')
h3cMainPseAveragePower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMainPseAveragePower.setStatus('current')
if mibBuilder.loadTexts: h3cMainPseAveragePower.setDescription('The object specifies the average power which has been consumed by the port. It is a read/write integer value with units of Watts (note - Watts is chosen instead of milliWatts here since the IETF Power MIB [1] measures unit based parameters, such as the pethMainPsePower object, in units of Watts). Writing a value of zero to this object resets its value to zero. Writing any other value to this object has no effect on its value and an error is returned.')
h3cMainPsePeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMainPsePeakPower.setStatus('current')
if mibBuilder.loadTexts: h3cMainPsePeakPower.setDescription('The object specifies the peak power which has been consumed for PoE. It is defined as the highest measured value of power in milliWatts that has been consumed at any one point in time by the sum of the PoE ports. Its value is only reset when the unit is powered on or when it is manually reset by the user as specifiedbelow. It is a read/write integer value with units of Watts (note - Watts is chosen instead of milliWatts here since the IETF Power MIB [1] measures unit based parameters, such as the pethMainPsePower object, in units of Watts). Writing a value of zero to this object resets its value to zero. Writing any other value to this object has noeffect on its value and an error is returned.')
h3cMainGuaranteedPowerRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMainGuaranteedPowerRemaining.setStatus('current')
if mibBuilder.loadTexts: h3cMainGuaranteedPowerRemaining.setDescription('The object specifies the amount of power remaining in the guaranteed power pool. Each time a port is placed into guaranteed mode it reserves a set amount of power out of the total guaranteed power pool for the system. This intention of this object is to give the client of this MIB (whether that be the CLI or the Web interface or the end user) an indication of how many ports can still be placed into guaranteed mode. It is a read only integer value with units of Watts(note - Watts is chosen instead of milliWatts here since the IETF Power MIB [1] measures unit based parameters,such as the pethMainPsePower object, in units of Watts).')
h3cMainPsePriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnection", 0), ("non-disconnection", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMainPsePriorityMode.setStatus('current')
if mibBuilder.loadTexts: h3cMainPsePriorityMode.setDescription('Describes or controls the priority mode on slot which must be enabled firstly. When a new board is inserted, and the power is over-load, a value of disconnection(0) means that the power will stop supply to the low priority slot ; A value of non-disconnection(1) means that the slot still supply when a new board is inserted, and the power is over-load too.')
h3cMainPseLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMainPseLegacy.setStatus('current')
if mibBuilder.loadTexts: h3cMainPseLegacy.setDescription('Describes or controls the legacy mode on slot which must be enabled firstly. Legacy mode: standard or nonstandard PD detection mode.')
h3cMainPsePowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMainPsePowerPriority.setStatus('current')
if mibBuilder.loadTexts: h3cMainPsePowerPriority.setDescription('Describes or controls the priority of the PSE. The priority will be used by the PSE policy to prevent from power overloading. If the priority of PSE is set to critical, the PSE will turn into guaranteed mode. The priority could be used by a control mechanism that prevents power overloading by disconnecting PSEs with lower power priority. PSEs that connect devices critical to the application should be set to higher priority.')
h3cPseProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7), )
if mibBuilder.loadTexts: h3cPseProfilesTable.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilesTable.setDescription('A table of objects representing a set of power profiles. Power profiles can be applied to PoE ports, which have the effect of automatically setting the priority, power limit and PoE enable MIB objects to the values specified in the power profile.')
h3cPseProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfileIndex"))
if mibBuilder.loadTexts: h3cPseProfilesEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilesEntry.setDescription('A set of objects that display and control the Main power of a PSE.')
h3cPseProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: h3cPseProfileIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfileIndex.setDescription('The index of the profile. This uniquely allow the profile to be identified.')
h3cPseProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPseProfileName.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfileName.setDescription("Assigns the profile a name with which the settings can be assiciated with. For example, 'NBX Phone'.")
h3cPseProfilePowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerDisabled", 1), ("powerEnabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPseProfilePowerMode.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilePowerMode.setDescription('The power mode associated with this power profile. There are two possible power modes as follows: powerDisabled, powerEnabled. When a power profile is applied to a PSE port, this value dictates the settings of the ports pethPsePortPowerPriority and pethPsePortAdminEnable objects.')
h3cPseProfilePowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPseProfilePowerLimit.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilePowerLimit.setDescription('The power limit to be applied to the ports h3cPsePortPowerLimit object when the profile is applied to the PSE port. Expressed in milliWatts.')
h3cPseProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPseProfilePriority.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilePriority.setDescription('This object controls the priority of the port from the point of view of a power management algorithm. The priority that is set by this variable could be used by a control mechanism that prevents over current situations by disconnecting first ports with lower power priority. Ports that connect devices critical to the operation of the network - like the E911 telephones ports - should be set to higher priority.')
h3cPseProfilePairs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("spare", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPseProfilePairs.setReference('IEEE Std 802.3af Section 30.9.1.1.4 aPSEPowerPairs')
if mibBuilder.loadTexts: h3cPseProfilePairs.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilePairs.setDescription('Describes or controls the pairs in use. If the value of pethPsePortPowerPairsControl is true, this object is writable. A value of signal(1) means that the signal pairs only are in use. A value of spare(2) means that the spare pairs only are in use.')
h3cPseProfileApplyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPseProfileApplyNum.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfileApplyNum.setDescription("The number of this profile which has been applied. If h3cPseProfileApplyNum is not zero, user can't change the current line.")
h3cPseProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPseProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfileRowStatus.setDescription("The status of this classifier. If h3cPseProfileApplyNum is not zero, user can't delete the current line.")
h3cPseAutoDetectActive = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPseAutoDetectActive.setStatus('current')
if mibBuilder.loadTexts: h3cPseAutoDetectActive.setDescription('The object specifies whether the device auto-detection feature is active. If this object is set to Active, and a known powered device is detected, then the port will automatically switch to Auto-Guaranteed mode. This is a stackwide object (ie. it is not referenced by group index).')
h3cPsePowerMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePowerMaxValue.setStatus('current')
if mibBuilder.loadTexts: h3cPsePowerMaxValue.setDescription('The object specifies the max poe power for lanswitch. The value should between the power currently and the max power.')
h3cPsePolicyMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPsePolicyMode.setStatus('current')
if mibBuilder.loadTexts: h3cPsePolicyMode.setDescription('The PSE policy only applies to the situation that when a new board (PSE) is inserted, and the power is overload. A value of priority(2) means that the power will stop supplying to the low priority PSE. About PSE priority, please refer to h3cMainPsePowerPriority. A value of disabled(1) means that the power will stop supplying to the new inserted PSE. The default value of this object is disabled(1).')
h3cPDPolicyMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPDPolicyMode.setStatus('current')
if mibBuilder.loadTexts: h3cPDPolicyMode.setDescription('The PD policy only applies to the situation that when a new PD is inserted, and the power of PSE is overload. A value of priority(2) means that the power will stop supplying to the low priority port PD. About port priority, please refer to pethPsePortPowerPriority. A value of disabled(1) means that the slot stop supplying to the new inserted PD. The default value of this object is disabled(1).')
h3cpseportNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6))
h3cpsePDChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 1)).setObjects(("POWER-ETHERNET-MIB", "pethPsePortDetectionStatus"))
if mibBuilder.loadTexts: h3cpsePDChangeNotification.setStatus('current')
if mibBuilder.loadTexts: h3cpsePDChangeNotification.setDescription('This notification indicates if PD has been inserted or pulled out.')
h3cPOEDisconnectNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 2)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleDisconnect"))
if mibBuilder.loadTexts: h3cPOEDisconnectNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDisconnectNotification.setDescription('This notification indicates the POE power module does not disconnect.')
h3cPOEInputErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 3)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleInputError"))
if mibBuilder.loadTexts: h3cPOEInputErrorNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEInputErrorNotification.setDescription('This notification indicates the POE power module input error.')
h3cPOEOutputErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 4)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleOutputError"))
if mibBuilder.loadTexts: h3cPOEOutputErrorNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEOutputErrorNotification.setDescription('This notification indicates the POE power module output error.')
h3cPOEOverVoltageNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 5)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleOverVoltage"))
if mibBuilder.loadTexts: h3cPOEOverVoltageNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEOverVoltageNotification.setDescription('This notification indicates the POE power module overruns the voltage limit.')
h3cPOEOverTempNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 6)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleOverTemp"))
if mibBuilder.loadTexts: h3cPOEOverTempNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEOverTempNotification.setDescription('This notification indicates the POE power module overruns the temperature limit.')
h3cPOEFanErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 7)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleFanError"))
if mibBuilder.loadTexts: h3cPOEFanErrorNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEFanErrorNotification.setDescription('This notification indicates the POE power module fan error.')
h3cPOEModuleShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 8)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleShutdown"))
if mibBuilder.loadTexts: h3cPOEModuleShutdownNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleShutdownNotification.setDescription('This notification indicates the POE power module is closed.')
h3cPOECurRestrictedNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 9)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleCurRestricted"))
if mibBuilder.loadTexts: h3cPOECurRestrictedNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOECurRestrictedNotification.setDescription('This notification indicates the POE power module current is restricted.')
h3cPOEACSwitchNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 10)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEACSwitchStateIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEACSwitchState"))
if mibBuilder.loadTexts: h3cPOEACSwitchNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchNotification.setDescription('This notification indicates the AC input switch alarm of this POE power.')
h3cPOEACInCurANotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 11)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurAState"))
if mibBuilder.loadTexts: h3cPOEACInCurANotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACInCurANotification.setDescription('This notification indicates the AC input current A alarm state of this POE power.')
h3cPOEACInCurBNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 12)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurBState"))
if mibBuilder.loadTexts: h3cPOEACInCurBNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACInCurBNotification.setDescription('This notification indicates the AC input current B alarm state of this POE power.')
h3cPOEACInCurCNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 13)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurCState"))
if mibBuilder.loadTexts: h3cPOEACInCurCNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACInCurCNotification.setDescription('This notification indicates the AC input current C alarm state of this POE power.')
h3cPOEACSwitchVolABNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 14)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateVolExIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateInVolAB"))
if mibBuilder.loadTexts: h3cPOEACSwitchVolABNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchVolABNotification.setDescription('This notification indicates the AC input voltage AB alarm state of this POE power.')
h3cPOEACSwitchVolBCNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 15)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateVolExIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateInVolBC"))
if mibBuilder.loadTexts: h3cPOEACSwitchVolBCNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchVolBCNotification.setDescription('This notification indicates the AC input voltage BC alarm state of this POE power.')
h3cPOEACSwitchVolCANotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 16)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateVolExIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateInVolCA"))
if mibBuilder.loadTexts: h3cPOEACSwitchVolCANotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchVolCANotification.setDescription('This notification indicates the AC input voltage CA alarm state of this POE power.')
h3cPOEDCOutVolNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 17)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEDCOutStateIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEDCOutDCVolAlarm"))
if mibBuilder.loadTexts: h3cPOEDCOutVolNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutVolNotification.setDescription('This notification indicates the DC output alarm of this POE power.')
h3cPOEShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 6, 18))
if mibBuilder.loadTexts: h3cPOEShutdownNotification.setStatus('current')
if mibBuilder.loadTexts: h3cPOEShutdownNotification.setDescription('This notification indicates the whole POE power has been shutdown.')
h3cPseComformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4))
h3cPseCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 1))
h3cPseCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 1, 1)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortGroup"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cMainPseGroup"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseScalarGroup"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePDNotificationGroup"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfilesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPseCompliance = h3cPseCompliance.setStatus('current')
if mibBuilder.loadTexts: h3cPseCompliance.setDescription('Description.')
h3cPseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2))
h3cPsePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 1)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortProfileIndex"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortPowerLimit"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortCurrentPower"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortAveragePower"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortPeakPower"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePortFaultDescription"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cMainPsePriorityMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPsePortGroup = h3cPsePortGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPsePortGroup.setDescription('A collection of objects should be supported at the same time.')
h3cMainPseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 2)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cMainPsePowerLimit"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cMainPseAveragePower"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cMainPsePeakPower"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cMainGuaranteedPowerRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cMainPseGroup = h3cMainPseGroup.setStatus('current')
if mibBuilder.loadTexts: h3cMainPseGroup.setDescription('A collection of objects should be supported at the same time.')
h3cPseScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 3)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseAutoDetectActive"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePowerMaxValue"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPsePolicyMode"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPDPolicyMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPseScalarGroup = h3cPseScalarGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPseScalarGroup.setDescription('A collection of scalar objects supported.')
h3cPsePDNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 4)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cpsePDChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPsePDNotificationGroup = h3cPsePDNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPsePDNotificationGroup.setDescription('PD Change Notification.')
h3cPseProfilesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 5)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfileName"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfilePowerMode"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfilePowerLimit"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfilePriority"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfilePairs"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfileApplyNum"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPseProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPseProfilesGroup = h3cPseProfilesGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPseProfilesGroup.setDescription('A collection of objects should be supported at the same time.')
h3cPOEPowerThresholdLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 6)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEThresholdACMimimum"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEThresholdACMaximum"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEThresholdDCMinimum"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEThresholdDCMaximum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerThresholdLimitGroup = h3cPOEPowerThresholdLimitGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerThresholdLimitGroup.setDescription('Power threshold limits group.')
h3cPOEPowerSupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 7)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEPowerType"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEPowerModuleNum"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESupervisionModuleName"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESMMajorVersion"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESMMinorVersion"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESMFactorName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerSupInfoGroup = h3cPOEPowerSupInfoGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerSupInfoGroup.setDescription('The basic Power information group.')
h3cPOEPowerDCOutStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 8)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEDCOutStateModuleNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerDCOutStateGroup = h3cPOEPowerDCOutStateGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerDCOutStateGroup.setDescription('The DC out power state group.')
h3cPOEPowerDCOutInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 9)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEDCOutCurNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerDCOutInfoGroup = h3cPOEPowerDCOutInfoGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerDCOutInfoGroup.setDescription('The power AC input switch information group')
h3cPOEPowerACSwitchStateModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 10)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEACSwitchStateModuleNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerACSwitchStateModuleGroup = h3cPOEPowerACSwitchStateModuleGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerACSwitchStateModuleGroup.setDescription('PD Change Notification.')
h3cPOEPowerInCurStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 11)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurStateModuleNum"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurAState"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurBState"), ("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEInCurCState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerInCurStateGroup = h3cPOEPowerInCurStateGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerInCurStateGroup.setDescription('PD Change Notification.')
h3cPOEPowerAlarmStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 4, 2, 12)).setObjects(("A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmStateModuleNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cPOEPowerAlarmStateGroup = h3cPOEPowerAlarmStateGroup.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerAlarmStateGroup.setDescription('PD Change Notification.')
class ACAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("normal", 1), ("underLimit", 2), ("aboveLimit", 3), ("lackPhrase", 4), ("fuseBroken", 5), ("switchOff", 6), ("otherError", 7))

class DCAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("normal", 1), ("underLimit", 2), ("aboveLimit", 3), ("fuseBroken", 4), ("switchOff", 5), ("otherError", 6))

class SwitchState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("on", 1), ("off", 2), ("highVoltInput", 3), ("lowVoltInput", 4))

class ModuleAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("alarm", 2))

h3cPOEPowerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8))
h3cPOEThresholdLimitObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 1))
h3cPOEThresholdACMimimum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPOEThresholdACMimimum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEThresholdACMimimum.setDescription("Input threshold AC minimum. It is a read-write node. The value of this node is 'OCTET STRING', it is used to describe a float value. So this string should fit the following rule: 1. This string should be terminated by '\\0'; 2. Every characters should be number or radix point; 3. The radix point should occur only once, and it should not be the first or the last character of the string. The value of this node should be smaller than 264.0V and larger than 90.0V. And it should be smaller than the h3cPOEThresholdACMaximum.")
h3cPOEThresholdACMaximum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPOEThresholdACMaximum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEThresholdACMaximum.setDescription("Input threshold AC maximum. It is a read-write node. The value of this node is 'OCTET STRING', it is used to describe a float value. So this string should fit the following rule: 1. This string should be terminated by '\\0'; 2. Every characters should be number or radix point; 3. The radix point should occur only once, and it should not be the first or the last character of the string. It should be smaller than 264.0V and larger than 90.0V. And it should be larger than the h3cPOEThresholdACMinimum.")
h3cPOEThresholdDCMinimum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPOEThresholdDCMinimum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEThresholdDCMinimum.setDescription("Input threshold DC minimum. It is a read-write node. The value of this node is 'OCTET STRING', it is used to describe a float value. So this string should fit the following rule: 1. This string should be terminated by '\\0'; 2. Every characters should be number or radix point; 3. The radix point should occur only once, and it should not be the first or the last character of the string. It should be smaller than 47.0V and larger than 45.0V.")
h3cPOEThresholdDCMaximum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPOEThresholdDCMaximum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEThresholdDCMaximum.setDescription("Input threshold DC maximum. It is a read-write node. The value of this node is 'OCTET STRING', it is used to describe a float value. So this string should fit the following rule: 1. This string should be terminated by '\\0'; 2. Every characters should be number or radix point; 3. The radix point should occur only once, and it should not be the first or the last character of the string. It should be smaller than 57.0V and larger than 55.0V.")
h3cPOESupModuleInfoObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2))
h3cPOEPowerType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEPowerType.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerType.setDescription('The type of the power.')
h3cPOEPowerModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEPowerModuleNum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEPowerModuleNum.setDescription('The number of the power modules.')
h3cPOESupervisionModuleName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESupervisionModuleName.setStatus('current')
if mibBuilder.loadTexts: h3cPOESupervisionModuleName.setDescription('The object specifies the Supervision Module name on this POE power.')
h3cPOESMMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESMMajorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cPOESMMajorVersion.setDescription('The object specifies the high byte of the monitor module version.')
h3cPOESMMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESMMinorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cPOESMMinorVersion.setDescription('The object specifies the low byte of the monitor module version.')
h3cPOESMFactorName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESMFactorName.setStatus('current')
if mibBuilder.loadTexts: h3cPOESMFactorName.setDescription('The object specifies the name of the manufactor.')
h3cPOEModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 7), )
if mibBuilder.loadTexts: h3cPOEModuleInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleInfoTable.setDescription('The table of the module information on this POE power.')
h3cPOEModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEModuleIndex"))
if mibBuilder.loadTexts: h3cPOEModuleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleInfoEntry.setDescription('The entry of the module information on this POE power.')
h3cPOEModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPOEModuleIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleIndex.setDescription('The index of the current module on this POE power. It is also the index of h3cPOEModuleInfoTable. The range of this node is from 1 to h3cPOEPowerModuleNum.')
h3cPOEModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleID.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleID.setDescription('The ID of the current module on this POE power.')
h3cPOEModuleInfoPower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleInfoPower.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleInfoPower.setDescription('The power of the current module on this POE power.')
h3cPOEModuleHardVerInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleHardVerInfo.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleHardVerInfo.setDescription('The hardware version information of the current module on this POE power.')
h3cPOEDCOutStateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 3))
h3cPOEDCOutStateModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEDCOutStateModuleNum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutStateModuleNum.setDescription('The module number on this POE power. It is the maximum of the h3cPOEDCOutStateIndex.')
h3cPOEDCOutStateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 3, 2), )
if mibBuilder.loadTexts: h3cPOEDCOutStateTable.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutStateTable.setDescription('The table of DC output power state on this POE power.')
h3cPOEDCOutStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEDCOutStateIndex"))
if mibBuilder.loadTexts: h3cPOEDCOutStateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutStateEntry.setDescription('The entry of the DC output power state on this POE power.')
h3cPOEDCOutStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPOEDCOutStateIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutStateIndex.setDescription('The index of the DC output power state on this POE power. The range of this node is from 1 to h3cPOEDCOutStateModuleNum.')
h3cPOEDCOutDCVolAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 3, 2, 1, 2), DCAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEDCOutDCVolAlarm.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutDCVolAlarm.setDescription('The DC output alarm of the DC output power state on this POE power. The value of this node will be the following values: normal (1), underLimit (2), aboveLimit (3), fuseBroken (4), switchOff (5), otherError (6).')
h3cPOEDCOutInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4))
h3cPOEDCOutCurNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEDCOutCurNum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutCurNum.setDescription('The number of DC output current on this POE power. It is the maximum of h3cPOEDCOutInfoIndex.')
h3cPOEDCOutInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4, 2), )
if mibBuilder.loadTexts: h3cPOEDCOutInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutInfoTable.setDescription('The table of the DC output information on this POE power.')
h3cPOEDCOutInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEDCOutInfoIndex"))
if mibBuilder.loadTexts: h3cPOEDCOutInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutInfoEntry.setDescription('The entry of the DC output information on this POE power.')
h3cPOEDCOutInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPOEDCOutInfoIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutInfoIndex.setDescription('The index of the DC output information on this POE POWER. The range of this node is from 1 to h3cPOEDCOutCurNum.')
h3cPOEDCOutVol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEDCOutVol.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutVol.setDescription('The DC output voltage of the current DC output on this POE power.')
h3cPOEDCOutInfoLoadCur = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEDCOutInfoLoadCur.setStatus('current')
if mibBuilder.loadTexts: h3cPOEDCOutInfoLoadCur.setDescription('The total load current of the current DC output on this POE power.')
h3cPOEACSwitchStateModuleObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 5))
h3cPOEACSwitchStateModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEACSwitchStateModuleNum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchStateModuleNum.setDescription('The number of the AC swtich state module on this POE power. It is the maximum of h3cPOEACSwitchStateIndex.')
h3cPOEACSwitchStateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 5, 2), )
if mibBuilder.loadTexts: h3cPOEACSwitchStateTable.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchStateTable.setDescription('The table of the AC switch state on this POE power.')
h3cPOEACSwitchStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 5, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEACSwitchStateIndex"))
if mibBuilder.loadTexts: h3cPOEACSwitchStateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchStateEntry.setDescription('The entry of the AC switch state on this POE power.')
h3cPOEACSwitchStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPOEACSwitchStateIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchStateIndex.setDescription('The index of the AC switch state on this POE power. The range of this node is from 1 to h3cPOEACSwitchStateModuleNum.')
h3cPOEACSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 5, 2, 1, 2), SwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEACSwitchState.setStatus('current')
if mibBuilder.loadTexts: h3cPOEACSwitchState.setDescription('The AC switch state on this POE power. The value of this node will be one of the following values: on (1), off (2), highVoltInput (3), lowVoltInput (4)')
h3cPOEInCurStateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6))
h3cPOEInCurStateModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEInCurStateModuleNum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEInCurStateModuleNum.setDescription('The DC input current state of the module on this POE power. It is the maximum of the h3cPOESwitchStateVolExIndex.')
h3cPOEInCurAState = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 2), ACAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEInCurAState.setStatus('current')
if mibBuilder.loadTexts: h3cPOEInCurAState.setDescription('The current A state in the DC input on this POE power. normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOEInCurBState = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 3), ACAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEInCurBState.setStatus('current')
if mibBuilder.loadTexts: h3cPOEInCurBState.setDescription('The current B state in the DC input on this POE power. The value of this node will be one of the following values: normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOEInCurCState = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 4), ACAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEInCurCState.setStatus('current')
if mibBuilder.loadTexts: h3cPOEInCurCState.setDescription('The current C state in the DC input on this POE power. The value of this node will be one of the following values: normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOESwitchStateVolExTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 5), )
if mibBuilder.loadTexts: h3cPOESwitchStateVolExTable.setStatus('current')
if mibBuilder.loadTexts: h3cPOESwitchStateVolExTable.setDescription('All alarm status of the VOL status. The value of this node will be one of the following values: normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOESwitchStateVolExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOESwitchStateVolExIndex"))
if mibBuilder.loadTexts: h3cPOESwitchStateVolExEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPOESwitchStateVolExEntry.setDescription('The h3cPOESwitchStateVolExIndex will match the number of the VOL status.')
h3cPOESwitchStateVolExIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPOESwitchStateVolExIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPOESwitchStateVolExIndex.setDescription('The object species the index of the VOL status. The range of this node is from 1 to h3cPOEInCurStateModuleNum.')
h3cPOESwitchStateInVolAB = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 5, 1, 2), ACAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESwitchStateInVolAB.setStatus('current')
if mibBuilder.loadTexts: h3cPOESwitchStateInVolAB.setDescription('The object specifies the VOL AB alarm in each VOL status. The value of this node will be one of the following values: normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOESwitchStateInVolBC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 5, 1, 3), ACAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESwitchStateInVolBC.setStatus('current')
if mibBuilder.loadTexts: h3cPOESwitchStateInVolBC.setDescription('The object specifies the VOL BC alarm in each VOL status. The value of this node will be one of the following values: normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOESwitchStateInVolCA = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 6, 5, 1, 4), ACAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOESwitchStateInVolCA.setStatus('current')
if mibBuilder.loadTexts: h3cPOESwitchStateInVolCA.setDescription('The object specifies the VOL CA alarm in each VOL status. The value of this node will be one of the following values: normal (1), underLimit (2), aboveLimit (3), lackPhrase (4), fuseBroken (5), switchOff (6), otherError (7).')
h3cPOEAlarmStateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7))
h3cPOEAlarmStateModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEAlarmStateModuleNum.setStatus('current')
if mibBuilder.loadTexts: h3cPOEAlarmStateModuleNum.setDescription('The object specifies the number of the power modules in alarm state.')
h3cPOEAlarmStateInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2), )
if mibBuilder.loadTexts: h3cPOEAlarmStateInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cPOEAlarmStateInfoTable.setDescription('All alarm states in the POE power modules.')
h3cPOEAlarmStateInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-POWER-ETH-EXT-MIB", "h3cPOEAlarmModuleInfoIndex"))
if mibBuilder.loadTexts: h3cPOEAlarmStateInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPOEAlarmStateInfoEntry.setDescription('The h3cPOEAlarmModuleInfoIndex will match the number of the power module.')
h3cPOEAlarmModuleInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPOEAlarmModuleInfoIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPOEAlarmModuleInfoIndex.setDescription('The index specifies the index of the H3cPOEAlarmStateInfoEntry table. The range of this node is from 1 to h3cPOEAlarmStateModuleNum.')
h3cPOEModuleDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 2), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleDisconnect.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleDisconnect.setDescription('The node specifies the alarm state: The module does not link. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleInputError = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 3), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleInputError.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleInputError.setDescription('The node specifies the alarm state: Input error. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleOutputError = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 4), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleOutputError.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleOutputError.setDescription('The node specifies the alarm state: Output error. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleOverVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 5), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleOverVoltage.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleOverVoltage.setDescription('The node specifies the alarm state: The voltage is too high. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleOverTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 6), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleOverTemp.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleOverTemp.setDescription('The node specifies the alarm state: The temperature is too high. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleFanError = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 7), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleFanError.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleFanError.setDescription('The node specifies the alarm state: The fan error. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 8), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleShutdown.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleShutdown.setDescription('The node specifies the alarm state: The module is shutdown. The value of this node is one of the following values: normal (1), alarm (2).')
h3cPOEModuleCurRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 14, 8, 7, 2, 1, 9), ModuleAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPOEModuleCurRestricted.setStatus('current')
if mibBuilder.loadTexts: h3cPOEModuleCurRestricted.setDescription('The node specifies the alarm state: The module limit the current. The value of this node is one of the following values: normal (1), alarm (2).')
mibBuilder.exportSymbols("A3COM-HUAWEI-POWER-ETH-EXT-MIB", h3cPOEDCOutInfoEntry=h3cPOEDCOutInfoEntry, h3cMainPsePriorityMode=h3cMainPsePriorityMode, h3cMainPseEntry=h3cMainPseEntry, h3cPOEDCOutStateTable=h3cPOEDCOutStateTable, h3cPseProfileApplyNum=h3cPseProfileApplyNum, h3cPsePowerMaxValue=h3cPsePowerMaxValue, h3cPOEThresholdACMimimum=h3cPOEThresholdACMimimum, h3cPsePortPeakPower=h3cPsePortPeakPower, h3cPOEModuleIndex=h3cPOEModuleIndex, h3cPOEThresholdLimitObjs=h3cPOEThresholdLimitObjs, h3cPsePolicyMode=h3cPsePolicyMode, h3cPOESwitchStateVolExTable=h3cPOESwitchStateVolExTable, h3cPseScalarGroup=h3cPseScalarGroup, h3cPOEDisconnectNotification=h3cPOEDisconnectNotification, h3cPOEACSwitchStateIndex=h3cPOEACSwitchStateIndex, h3cPOEInCurAState=h3cPOEInCurAState, h3cPOEInCurStateObjects=h3cPOEInCurStateObjects, h3cPseProfilesTable=h3cPseProfilesTable, h3cPOEDCOutVolNotification=h3cPOEDCOutVolNotification, h3cPOEModuleCurRestricted=h3cPOEModuleCurRestricted, h3cPOEDCOutStateIndex=h3cPOEDCOutStateIndex, h3cPOEACSwitchState=h3cPOEACSwitchState, h3cPOEACSwitchStateModuleObjs=h3cPOEACSwitchStateModuleObjs, h3cPOEDCOutInfoLoadCur=h3cPOEDCOutInfoLoadCur, h3cPOESwitchStateVolExEntry=h3cPOESwitchStateVolExEntry, h3cPOEDCOutStateEntry=h3cPOEDCOutStateEntry, h3cPOEShutdownNotification=h3cPOEShutdownNotification, h3cPOEModuleHardVerInfo=h3cPOEModuleHardVerInfo, h3cMainPsePeakPower=h3cMainPsePeakPower, h3cPsePortCurrentPower=h3cPsePortCurrentPower, h3cPOEInputErrorNotification=h3cPOEInputErrorNotification, h3cPOEModuleInputError=h3cPOEModuleInputError, h3cPowerEthernetExt=h3cPowerEthernetExt, h3cPOESupervisionModuleName=h3cPOESupervisionModuleName, h3cPOEModuleOverVoltage=h3cPOEModuleOverVoltage, h3cPOEPowerAlarmStateGroup=h3cPOEPowerAlarmStateGroup, h3cPOEACSwitchVolBCNotification=h3cPOEACSwitchVolBCNotification, DCAlarmState=DCAlarmState, h3cPOEModuleShutdownNotification=h3cPOEModuleShutdownNotification, h3cPOEModuleID=h3cPOEModuleID, h3cPOEACSwitchStateTable=h3cPOEACSwitchStateTable, h3cPOECurRestrictedNotification=h3cPOECurRestrictedNotification, h3cMainPseGroup=h3cMainPseGroup, h3cPOEPowerObjects=h3cPOEPowerObjects, SwitchState=SwitchState, h3cMainPseTable=h3cMainPseTable, h3cPseProfilesGroup=h3cPseProfilesGroup, h3cPOEDCOutStateModuleNum=h3cPOEDCOutStateModuleNum, h3cPOEAlarmModuleInfoIndex=h3cPOEAlarmModuleInfoIndex, h3cPOEPowerDCOutInfoGroup=h3cPOEPowerDCOutInfoGroup, h3cPOEModuleDisconnect=h3cPOEModuleDisconnect, h3cPOESupModuleInfoObjs=h3cPOESupModuleInfoObjs, h3cPOESwitchStateInVolBC=h3cPOESwitchStateInVolBC, h3cPDPolicyMode=h3cPDPolicyMode, h3cPOEFanErrorNotification=h3cPOEFanErrorNotification, h3cPOEAlarmStateObjects=h3cPOEAlarmStateObjects, PYSNMP_MODULE_ID=h3cPowerEthernetExt, h3cPseProfilePowerMode=h3cPseProfilePowerMode, h3cPOEInCurBState=h3cPOEInCurBState, ACAlarmState=ACAlarmState, h3cPseComformance=h3cPseComformance, h3cPseCompliance=h3cPseCompliance, h3cPOEDCOutVol=h3cPOEDCOutVol, h3cPOEDCOutStateObjects=h3cPOEDCOutStateObjects, h3cPOEDCOutDCVolAlarm=h3cPOEDCOutDCVolAlarm, h3cMainPseLegacy=h3cMainPseLegacy, h3cPOEDCOutInfoObjects=h3cPOEDCOutInfoObjects, h3cPOEPowerModuleNum=h3cPOEPowerModuleNum, h3cPOEACSwitchNotification=h3cPOEACSwitchNotification, h3cPOEModuleShutdown=h3cPOEModuleShutdown, h3cPOEAlarmStateInfoEntry=h3cPOEAlarmStateInfoEntry, h3cPOEPowerThresholdLimitGroup=h3cPOEPowerThresholdLimitGroup, h3cPOEOverTempNotification=h3cPOEOverTempNotification, h3cPsePortFaultDescription=h3cPsePortFaultDescription, h3cPOEModuleInfoPower=h3cPOEModuleInfoPower, h3cPsePortPowerLimit=h3cPsePortPowerLimit, h3cPOEPowerACSwitchStateModuleGroup=h3cPOEPowerACSwitchStateModuleGroup, h3cPOEPowerDCOutStateGroup=h3cPOEPowerDCOutStateGroup, h3cPOEThresholdDCMinimum=h3cPOEThresholdDCMinimum, h3cPOEPowerInCurStateGroup=h3cPOEPowerInCurStateGroup, h3cpseportNotification=h3cpseportNotification, h3cPOEModuleOverTemp=h3cPOEModuleOverTemp, h3cPseProfilePowerLimit=h3cPseProfilePowerLimit, h3cPsePortTable=h3cPsePortTable, h3cPOEACSwitchVolABNotification=h3cPOEACSwitchVolABNotification, h3cPOEACSwitchVolCANotification=h3cPOEACSwitchVolCANotification, h3cPOESMMinorVersion=h3cPOESMMinorVersion, h3cPseProfileRowStatus=h3cPseProfileRowStatus, h3cPOESwitchStateInVolCA=h3cPOESwitchStateInVolCA, h3cPOEDCOutInfoIndex=h3cPOEDCOutInfoIndex, h3cPseGroup=h3cPseGroup, h3cPsePortProfileIndex=h3cPsePortProfileIndex, h3cMainGuaranteedPowerRemaining=h3cMainGuaranteedPowerRemaining, h3cMainPsePowerPriority=h3cMainPsePowerPriority, h3cPsePortGroup=h3cPsePortGroup, h3cPOESwitchStateInVolAB=h3cPOESwitchStateInVolAB, h3cPOESwitchStateVolExIndex=h3cPOESwitchStateVolExIndex, h3cPOEDCOutInfoTable=h3cPOEDCOutInfoTable, h3cPseProfileIndex=h3cPseProfileIndex, h3cPOEThresholdDCMaximum=h3cPOEThresholdDCMaximum, h3cPOEModuleInfoTable=h3cPOEModuleInfoTable, h3cPseCompliances=h3cPseCompliances, h3cPOEPowerType=h3cPOEPowerType, h3cPsePortEntry=h3cPsePortEntry, h3cPseProfilesEntry=h3cPseProfilesEntry, h3cPOEDCOutCurNum=h3cPOEDCOutCurNum, h3cPOEAlarmStateInfoTable=h3cPOEAlarmStateInfoTable, h3cPOEAlarmStateModuleNum=h3cPOEAlarmStateModuleNum, h3cPOEModuleFanError=h3cPOEModuleFanError, h3cPOEOverVoltageNotification=h3cPOEOverVoltageNotification, h3cPOEThresholdACMaximum=h3cPOEThresholdACMaximum, h3cPOEACSwitchStateEntry=h3cPOEACSwitchStateEntry, h3cPOEACInCurANotification=h3cPOEACInCurANotification, h3cPOEModuleOutputError=h3cPOEModuleOutputError, h3cpsePDChangeNotification=h3cpsePDChangeNotification, h3cPOESMMajorVersion=h3cPOESMMajorVersion, h3cPseProfileName=h3cPseProfileName, h3cPOEOutputErrorNotification=h3cPOEOutputErrorNotification, ModuleAlarmState=ModuleAlarmState, h3cPOESMFactorName=h3cPOESMFactorName, h3cPsePDNotificationGroup=h3cPsePDNotificationGroup, h3cPOEModuleInfoEntry=h3cPOEModuleInfoEntry, h3cPOEACSwitchStateModuleNum=h3cPOEACSwitchStateModuleNum, h3cPOEACInCurCNotification=h3cPOEACInCurCNotification, h3cPOEInCurCState=h3cPOEInCurCState, h3cPseAutoDetectActive=h3cPseAutoDetectActive, h3cPOEACInCurBNotification=h3cPOEACInCurBNotification, h3cPseProfilePriority=h3cPseProfilePriority, h3cPseProfilePairs=h3cPseProfilePairs, h3cPsePortAveragePower=h3cPsePortAveragePower, h3cMainPseAveragePower=h3cMainPseAveragePower, h3cMainPsePowerLimit=h3cMainPsePowerLimit, h3cPOEInCurStateModuleNum=h3cPOEInCurStateModuleNum, h3cPOEPowerSupInfoGroup=h3cPOEPowerSupInfoGroup)
