#
# PySNMP MIB module HH3C-DOT11-LIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DOT11-LIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hh3cDot11, = mibBuilder.importSymbols("HH3C-DOT11-REF-MIB", "hh3cDot11")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, Counter32, Unsigned32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ModuleIdentity, Counter64, ObjectIdentity, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Counter32", "Unsigned32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ModuleIdentity", "Counter64", "ObjectIdentity", "Gauge32", "Integer32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hh3cDot11LIC = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14))
hh3cDot11LIC.setRevisions(('2012-04-25 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cDot11LIC.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hh3cDot11LIC.setLastUpdated('201204251800Z')
if mibBuilder.loadTexts: hh3cDot11LIC.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cDot11LIC.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: hh3cDot11LIC.setDescription('This MIB provides information for WLAN license configuration in AC. GLOSSARY IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Access control (AC) To control and manage multi-APs, it will bridge wireless and wired network. Fit AP Applied in the enterprise environment, it will work under the control and management from AC. Control And Provisioning of Wireless Access Points Protocol The short name of protocol is CAPWAP. AC will control and manage AP by CAPWAP tunnel protocol defined by IETF. Also, a data tunnel will be set up between AC and AP. Basic Service Set The IEEE 802.11 BSS of an AP comprises of the stations directly associating with the AP. It will be identified by BSSID.')
hh3cDot11LICConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 1))
hh3cDot11LICApNumGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2))
hh3cDot11LICFeatureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3))
hh3cDot11LICSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICSerialNumber.setDescription('The device serial number.')
hh3cDot11LicApNumGroupSupport = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LicApNumGroupSupport.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LicApNumGroupSupport.setDescription("Represents support hh3cDot11LicApNumGroup 'ture': device spport hh3cDot11LicApNumGroup. 'false': device not spport hh3cDot11LicApNumGroupp.")
hh3cDot11LICApNumAttrTable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 1))
hh3cDot11LICDefautAPNumPermit = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICDefautAPNumPermit.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICDefautAPNumPermit.setDescription('Represents the number of AP connection permitted for one AC without license.')
hh3cDot11LICCurrentAPNumPermit = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICCurrentAPNumPermit.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICCurrentAPNumPermit.setDescription('Represents the total number of AP connection permitted for one AC, include default number and the licenses that installed.')
hh3cDot11LICMaxAPNumPermit = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICMaxAPNumPermit.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICMaxAPNumPermit.setDescription('Represents the maximum number of AP to support connection permitted for one AC, include default number and full licenses.')
hh3cDot11LICApNumLicTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 2), )
if mibBuilder.loadTexts: hh3cDot11LICApNumLicTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICApNumLicTable.setDescription('Each entry contains license information of ap number.')
hh3cDot11LICApNumLicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 2, 1), ).setIndexNames((0, "HH3C-DOT11-LIC-MIB", "hh3cDot11LICLicenseKeyIndex"))
if mibBuilder.loadTexts: hh3cDot11LICApNumLicEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICApNumLicEntry.setDescription('Each entry contains association information of each station.')
hh3cDot11LICLicenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICLicenseKeyIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICLicenseKeyIndex.setDescription('Licensed key index value.')
hh3cDot11LICLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICLicenseKey.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICLicenseKey.setDescription('Specifies a certain license key.')
hh3cDot11LICActivationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICActivationKey.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICActivationKey.setDescription('Specifies a certain activation key.')
hh3cDot11LICApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICApNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICApNum.setDescription('Represents support connect ap number of the license.')
hh3cDot11LICFeatureAttrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 1), )
if mibBuilder.loadTexts: hh3cDot11LICFeatureAttrTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICFeatureAttrTable.setDescription('Each entry contains attribute information of wlan feature.')
hh3cDot11LICFeatureAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 1, 1), ).setIndexNames((0, "HH3C-DOT11-LIC-MIB", "hh3cDot11LICAttrIndex"))
if mibBuilder.loadTexts: hh3cDot11LICFeatureAttrEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICFeatureAttrEntry.setDescription('Each entry contains feature attribute information of licensetypename.')
hh3cDot11LICAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICAttrIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICAttrIndex.setDescription('Attribute index value.')
hh3cDot11LICAttrTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICAttrTypeName.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICAttrTypeName.setDescription('Represents attribute type name')
hh3cDot11LICAttrDefVal = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICAttrDefVal.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICAttrDefVal.setDescription('Represents the default value of the license type.')
hh3cDot11LICAttrMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICAttrMaxVal.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICAttrMaxVal.setDescription('Represents the maximum value of the license type.')
hh3cDot11LICFeatureLicTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2), )
if mibBuilder.loadTexts: hh3cDot11LICFeatureLicTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICFeatureLicTable.setDescription('Each entry contains license information of wlan feature.')
hh3cDot11LICFeatureLicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2, 1), ).setIndexNames((0, "HH3C-DOT11-LIC-MIB", "hh3cDot11LICKeyIndex"))
if mibBuilder.loadTexts: hh3cDot11LICFeatureLicEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICFeatureLicEntry.setDescription('Each entry contains wlan feature information of license.')
hh3cDot11LICKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICKeyIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICKeyIndex.setDescription('Licensed key index value.')
hh3cDot11LICTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICTypeName.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICTypeName.setDescription('Represents the type name of the license entry.')
hh3cDot11LICKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICKey.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICKey.setDescription('Specifies a certain license key.')
hh3cDot11LICTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICTimeLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICTimeLimit.setDescription('Represents available time left of the license entry.')
hh3cDot11LICValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 14, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11LICValue.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LICValue.setDescription("Represents the value of the license entry. If hh3cDot11LICFeatureTypeName is 'AP', this meaning of ap number, and so no.")
mibBuilder.exportSymbols("HH3C-DOT11-LIC-MIB", hh3cDot11LICFeatureGroup=hh3cDot11LICFeatureGroup, hh3cDot11LICMaxAPNumPermit=hh3cDot11LICMaxAPNumPermit, hh3cDot11LICKey=hh3cDot11LICKey, hh3cDot11LICConfigGroup=hh3cDot11LICConfigGroup, hh3cDot11LICSerialNumber=hh3cDot11LICSerialNumber, PYSNMP_MODULE_ID=hh3cDot11LIC, hh3cDot11LICKeyIndex=hh3cDot11LICKeyIndex, hh3cDot11LICFeatureLicTable=hh3cDot11LICFeatureLicTable, hh3cDot11LICLicenseKeyIndex=hh3cDot11LICLicenseKeyIndex, hh3cDot11LICAttrMaxVal=hh3cDot11LICAttrMaxVal, hh3cDot11LICActivationKey=hh3cDot11LICActivationKey, hh3cDot11LIC=hh3cDot11LIC, hh3cDot11LICLicenseKey=hh3cDot11LICLicenseKey, hh3cDot11LICCurrentAPNumPermit=hh3cDot11LICCurrentAPNumPermit, hh3cDot11LICAttrDefVal=hh3cDot11LICAttrDefVal, hh3cDot11LICFeatureLicEntry=hh3cDot11LICFeatureLicEntry, hh3cDot11LICDefautAPNumPermit=hh3cDot11LICDefautAPNumPermit, hh3cDot11LICTypeName=hh3cDot11LICTypeName, hh3cDot11LicApNumGroupSupport=hh3cDot11LicApNumGroupSupport, hh3cDot11LICApNumGroup=hh3cDot11LICApNumGroup, hh3cDot11LICFeatureAttrEntry=hh3cDot11LICFeatureAttrEntry, hh3cDot11LICAttrIndex=hh3cDot11LICAttrIndex, hh3cDot11LICValue=hh3cDot11LICValue, hh3cDot11LICApNum=hh3cDot11LICApNum, hh3cDot11LICTimeLimit=hh3cDot11LICTimeLimit, hh3cDot11LICApNumLicEntry=hh3cDot11LICApNumLicEntry, hh3cDot11LICFeatureAttrTable=hh3cDot11LICFeatureAttrTable, hh3cDot11LICApNumAttrTable=hh3cDot11LICApNumAttrTable, hh3cDot11LICAttrTypeName=hh3cDot11LICAttrTypeName, hh3cDot11LICApNumLicTable=hh3cDot11LICApNumLicTable)
