#
# PySNMP MIB module EtherWAN-sw72000 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EtherWAN-sw72000
# Produced by pysmi-0.3.4 at Wed May  1 13:11:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, Unsigned32, IpAddress, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Gauge32, NotificationType, ObjectIdentity, Counter64, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Unsigned32", "IpAddress", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Gauge32", "NotificationType", "ObjectIdentity", "Counter64", "MibIdentifier", "enterprises")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
lanSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 2736, 1))
lanSwitch.setRevisions(('2009-02-18 00:00', '2008-12-30 00:00', '2006-10-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lanSwitch.setRevisionsDescriptions(('Change mib Entry name', 'Convert to SMIv2 format and validated at www.simpleweb.org', 'EtherWAN SW72000 Private MIB File.',))
if mibBuilder.loadTexts: lanSwitch.setLastUpdated('200902180000Z')
if mibBuilder.loadTexts: lanSwitch.setOrganization('EtherWAN System Inc.')
if mibBuilder.loadTexts: lanSwitch.setContactInfo(' EtherWAN System Inc. Phone: +886 26629 8986 Email: mars@etherwan.com.tw')
if mibBuilder.loadTexts: lanSwitch.setDescription('The Switch MIB module for managing EtherWAN Swtich private MIBs')
etherwan = MibIdentifier((1, 3, 6, 1, 4, 1, 2736))
sw72000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1))
ewnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1))
ewnPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2))
ewnMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3))
ewnTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4))
ewnLACP = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5))
ewnBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 6))
ewnIGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7))
ewnVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8))
ewnQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9))
ewnSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10))
ewnSDB = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11))
ewnRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 12))
ewnDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 13))
ewnSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 14))
ewnLACP1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1))
ewnLACP2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2))
ewnSystemFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnSystemFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: ewnSystemFirmwareRev.setDescription('Firmware Revision')
ewnSystemConfigOperation = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("loadDefault", 1), ("saveCurrent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemConfigOperation.setStatus('current')
if mibBuilder.loadTexts: ewnSystemConfigOperation.setDescription('System Configuration operations. This is a write-only variable. On read, it will always return none(0). On loadDefault(1) write, it will restore to default and reboot the system.')
ewnSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemReboot.setStatus('current')
if mibBuilder.loadTexts: ewnSystemReboot.setDescription('System Warm Reboot Functionality')
ewnSystemRebootRequired = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rebootNotRequired", 0), ("rebootRequired", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnSystemRebootRequired.setStatus('current')
if mibBuilder.loadTexts: ewnSystemRebootRequired.setDescription('System Warm Reboot Functionality')
ewnSystemTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 5))
ewnSystemTFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 51))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemTFTPFilename.setStatus('current')
if mibBuilder.loadTexts: ewnSystemTFTPFilename.setDescription('Filename for TFTP download')
ewnSystemTFTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemTFTPIpAddress.setStatus('current')
if mibBuilder.loadTexts: ewnSystemTFTPIpAddress.setDescription('IPAddress of TFTP server')
ewnSystemTFTPAction = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installConfiguration", 1), ("backupConfiguration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemTFTPAction.setStatus('current')
if mibBuilder.loadTexts: ewnSystemTFTPAction.setDescription('Action of the current TFTP session')
ewnSystemTFTPState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("start", 1), ("inProgress", 2), ("done", 3), ("error", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemTFTPState.setStatus('current')
if mibBuilder.loadTexts: ewnSystemTFTPState.setDescription('State of the current TFTP session')
ewnSystemProductModel = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnSystemProductModel.setStatus('current')
if mibBuilder.loadTexts: ewnSystemProductModel.setDescription('Product Model Number')
ewnSystemHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnSystemHardwareRev.setStatus('current')
if mibBuilder.loadTexts: ewnSystemHardwareRev.setDescription('Hardware Revision')
ewnSystemGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemGatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: ewnSystemGatewayIpAddress.setDescription('Default Gateway IP Address for this device')
ewnSystemMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnSystemMacAddr.setStatus('current')
if mibBuilder.loadTexts: ewnSystemMacAddr.setDescription('MAC Address of the switch.')
ewnSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemPassword.setStatus('current')
if mibBuilder.loadTexts: ewnSystemPassword.setDescription('Login password')
ewnSystemPasswordEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: ewnSystemPasswordEncrypted.setDescription('Login password with encryption')
ewnSystemAutoSaveState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemAutoSaveState.setStatus('current')
if mibBuilder.loadTexts: ewnSystemAutoSaveState.setDescription('Auto save system configuration')
ewnSystemAutoSaveDelay = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSystemAutoSaveDelay.setStatus('current')
if mibBuilder.loadTexts: ewnSystemAutoSaveDelay.setDescription('Delay time in seconds for auto save system configuration ')
ewnPortCount = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortCount.setStatus('current')
if mibBuilder.loadTexts: ewnPortCount.setDescription('Port count')
ewnPortTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ewnPortTable.setStatus('current')
if mibBuilder.loadTexts: ewnPortTable.setDescription('Port table')
ewnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnPortNo"))
if mibBuilder.loadTexts: ewnPortEntry.setStatus('current')
if mibBuilder.loadTexts: ewnPortEntry.setDescription('Port entry')
ewnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortNo.setStatus('current')
if mibBuilder.loadTexts: ewnPortNo.setDescription('Port Number')
ewnPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortString.setStatus('current')
if mibBuilder.loadTexts: ewnPortString.setDescription('Port String')
ewnPortHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("type10M", 1), ("type100M", 2), ("typeMII", 3), ("type1G", 4), ("type1GFx", 5), ("type100MFX", 6), ("typeUnknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortHardwareType.setStatus('current')
if mibBuilder.loadTexts: ewnPortHardwareType.setDescription('Port hardware type')
ewnPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ewnPortLinkStatus.setDescription('Port Link Status')
ewnPortLinkConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortLinkConfig.setStatus('current')
if mibBuilder.loadTexts: ewnPortLinkConfig.setDescription('Port Administrative Link Status identical to ifAdminStatus')
ewnPortSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("speed10M", 0), ("speed100M", 1), ("speed1G", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: ewnPortSpeedStatus.setDescription('Port Speed Status')
ewnPortSpeedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10M", 0), ("speed100M", 1), ("speed1G", 2), ("speedAuto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortSpeedConfig.setStatus('current')
if mibBuilder.loadTexts: ewnPortSpeedConfig.setDescription('Port Speed Configuration')
ewnPortDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortDupStatus.setStatus('current')
if mibBuilder.loadTexts: ewnPortDupStatus.setDescription('Port Duplexity Status')
ewnPortDupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortDupConfig.setStatus('current')
if mibBuilder.loadTexts: ewnPortDupConfig.setDescription('Port Duplexity Configuration')
ewnPortFlowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("txRxOn", 1), ("txOnOnly", 2), ("rxOnOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnPortFlowStatus.setStatus('current')
if mibBuilder.loadTexts: ewnPortFlowStatus.setDescription('Port Flow Control Status')
ewnPortFlowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortFlowConfig.setStatus('current')
if mibBuilder.loadTexts: ewnPortFlowConfig.setDescription('Port Flow Control Configuration')
ewnPortBroadcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortBroadcastLimit.setStatus('current')
if mibBuilder.loadTexts: ewnPortBroadcastLimit.setDescription('Switch Broadcast rate limit type.')
ewnPortDlfMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortDlfMulticastLimit.setStatus('current')
if mibBuilder.loadTexts: ewnPortDlfMulticastLimit.setDescription('Switch DLF and Multicast rate limit type.')
ewnPortLimitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortLimitLevel.setStatus('current')
if mibBuilder.loadTexts: ewnPortLimitLevel.setDescription('Switch rate limit level.')
ewnPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortPriority.setStatus('current')
if mibBuilder.loadTexts: ewnPortPriority.setDescription('Default priority for untagged frames received by this port')
ewnPortSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("max-ACCESS", 1), ("hybrid", 2), ("trunk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortSwitchMode.setStatus('current')
if mibBuilder.loadTexts: ewnPortSwitchMode.setDescription('VLAN switch port mode.')
ewnPortPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortPVID.setStatus('current')
if mibBuilder.loadTexts: ewnPortPVID.setDescription('Port VLAN ID (1..4094).')
ewnPortResetRMONCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortResetRMONCount.setStatus('current')
if mibBuilder.loadTexts: ewnPortResetRMONCount.setDescription('reset RMON counters on this port.')
ewnPortAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 2, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnPortAliasName.setStatus('current')
if mibBuilder.loadTexts: ewnPortAliasName.setDescription('Port alias name')
ewnMirrorAvailablePortMap = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnMirrorAvailablePortMap.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorAvailablePortMap.setDescription('Available mirror port map')
ewnMirrorCount = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnMirrorCount.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorCount.setDescription('Available mirror entry count')
ewnMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 3), )
if mibBuilder.loadTexts: ewnMirrorTable.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorTable.setDescription('Port Mirroring table')
ewnMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 3, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnMirrorIndex"))
if mibBuilder.loadTexts: ewnMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorEntry.setDescription('Mirror Entry')
ewnMirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnMirrorIndex.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorIndex.setDescription('Mirror index')
ewnMirrorToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnMirrorToPort.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorToPort.setDescription('Mirror to port')
ewnMirrorFromPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnMirrorFromPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorFromPortMap.setDescription('Mirror from port map')
ewnMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2), ("receiveandtransmit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnMirrorMode.setStatus('current')
if mibBuilder.loadTexts: ewnMirrorMode.setDescription('Mirror mode')
ewnTrunkCount = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnTrunkCount.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkCount.setDescription('Trunk count')
ewnTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 2), )
if mibBuilder.loadTexts: ewnTrunkTable.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkTable.setDescription('Port Trunking table')
ewnTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 2, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnTrunkIndex"))
if mibBuilder.loadTexts: ewnTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkEntry.setDescription('Trunk Entry')
ewnTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkIndex.setDescription('Trunk index')
ewnTrunkPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnTrunkPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkPortMap.setDescription('Trunk port map')
ewnTrunkAvailPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnTrunkAvailPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkAvailPortMap.setDescription('Available trunk port map')
ewnTrunkMaxNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnTrunkMaxNumOfPorts.setStatus('current')
if mibBuilder.loadTexts: ewnTrunkMaxNumOfPorts.setDescription('Maximum number of ports per trunk group.')
ewnLACPSYSPriority = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnLACPSYSPriority.setStatus('current')
if mibBuilder.loadTexts: ewnLACPSYSPriority.setDescription('LACP SYSTEM Priority')
ewnLACPTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: ewnLACPTable.setStatus('current')
if mibBuilder.loadTexts: ewnLACPTable.setDescription('LACP table')
ewnLACPCONFENTRY = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnLACPPortIndex"))
if mibBuilder.loadTexts: ewnLACPCONFENTRY.setStatus('current')
if mibBuilder.loadTexts: ewnLACPCONFENTRY.setDescription('LACP CONF ENTRY')
ewnLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnLACPPortIndex.setStatus('current')
if mibBuilder.loadTexts: ewnLACPPortIndex.setDescription('LACP Index')
ewnLACPPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnLACPPortName.setStatus('current')
if mibBuilder.loadTexts: ewnLACPPortName.setDescription('LACP Port String')
ewnLACPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("short", 0), ("long", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnLACPTimeout.setStatus('current')
if mibBuilder.loadTexts: ewnLACPTimeout.setDescription('LACP Port Timeout')
ewnLACPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnLACPPriority.setStatus('current')
if mibBuilder.loadTexts: ewnLACPPriority.setDescription('LACP Port Priority')
ewnLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: ewnLACPPortTable.setStatus('current')
if mibBuilder.loadTexts: ewnLACPPortTable.setDescription('Port LACP table')
ewnLACPAGGENTRY = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnLACPIndex"))
if mibBuilder.loadTexts: ewnLACPAGGENTRY.setStatus('current')
if mibBuilder.loadTexts: ewnLACPAGGENTRY.setDescription('LACP Entry')
ewnLACPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnLACPIndex.setStatus('current')
if mibBuilder.loadTexts: ewnLACPIndex.setDescription('LACP Index')
ewnLACPPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnLACPPortString.setStatus('current')
if mibBuilder.loadTexts: ewnLACPPortString.setDescription('LACP Port String')
ewnLACPAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("group1", 1), ("group2", 2), ("group3", 3), ("statictrunk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnLACPAdminKey.setStatus('current')
if mibBuilder.loadTexts: ewnLACPAdminKey.setDescription('LACP Admin Key')
ewnLACPPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("passive", 0), ("active", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnLACPPortMode.setStatus('current')
if mibBuilder.loadTexts: ewnLACPPortMode.setDescription('LACP Port Mode')
ewnBridgeSTPState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnBridgeSTPState.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSTPState.setDescription('Spanning Tree Protocol functionality')
ewnBridgeAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnBridgeAgingTime.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeAgingTime.setDescription('Bridge aging time 0 not allowed')
ewnIGMPState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnIGMPState.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPState.setDescription('Internet Group Management Protocol functionality')
ewnIGMPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2), )
if mibBuilder.loadTexts: ewnIGMPCfgTable.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgTable.setDescription('IGMP configuration table, an entry per VLAN')
ewnIGMPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnIGMPCfgIndex"))
if mibBuilder.loadTexts: ewnIGMPCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgEntry.setDescription('IGMP configuration entry')
ewnIGMPCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPCfgIndex.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgIndex.setDescription('IGMP configuration entry index')
ewnIGMPCfgVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPCfgVlanID.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgVlanID.setDescription("IGMP configuration entry's VLAN ID")
ewnIGMPCfgIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnIGMPCfgIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgIGMPVersion.setDescription('IGMP Version')
ewnIGMPCfgFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnIGMPCfgFastLeave.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgFastLeave.setDescription('IGMP Fast-leave function')
ewnIGMPCfgQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnIGMPCfgQueryInterval.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgQueryInterval.setDescription('IGMP Querrier Interval for active mode')
ewnIGMPCfgMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnIGMPCfgMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgMaxResponseTime.setDescription('IGMP Max Response Time for active mode')
ewnIGMPCfgReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnIGMPCfgReportSuppression.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPCfgReportSuppression.setDescription('IGMP Report Suppression function')
ewnIGMPRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3), )
if mibBuilder.loadTexts: ewnIGMPRecordTable.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordTable.setDescription('IGMP record database table')
ewnIGMPRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnIGMPRecordIndex"))
if mibBuilder.loadTexts: ewnIGMPRecordEntry.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordEntry.setDescription('IGMP entry')
ewnIGMPRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPRecordIndex.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordIndex.setDescription('IGMP Group index')
ewnIGMPRecordGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPRecordGroupAddress.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordGroupAddress.setDescription('IGMP group address')
ewnIGMPRecordInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPRecordInterface.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordInterface.setDescription('IGMP group member interface')
ewnIGMPRecordUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPRecordUpTime.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordUpTime.setDescription('IGMP group up time')
ewnIGMPRecordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPRecordExpireTime.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordExpireTime.setDescription('IGMP group expire time')
ewnIGMPRecordLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 7, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnIGMPRecordLastReporter.setStatus('current')
if mibBuilder.loadTexts: ewnIGMPRecordLastReporter.setDescription('IGMP group last reporter')
ewnVLANGVRPState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANGVRPState.setStatus('current')
if mibBuilder.loadTexts: ewnVLANGVRPState.setDescription('GARP VLAN Registration Protocol functionality')
ewnVLANTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2), )
if mibBuilder.loadTexts: ewnVLANTable.setStatus('current')
if mibBuilder.loadTexts: ewnVLANTable.setDescription('VLAN Settings Table')
ewnVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnVLANIndex"))
if mibBuilder.loadTexts: ewnVLANEntry.setStatus('current')
if mibBuilder.loadTexts: ewnVLANEntry.setDescription('VLAN Settings Entry')
ewnVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnVLANIndex.setStatus('current')
if mibBuilder.loadTexts: ewnVLANIndex.setDescription('VLAN index')
ewnVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANID.setStatus('current')
if mibBuilder.loadTexts: ewnVLANID.setDescription('VLAN ID (valid values 1-4094)')
ewnVLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANName.setStatus('current')
if mibBuilder.loadTexts: ewnVLANName.setDescription('VLAN Name. This can only be set during creation of VLAN. It cannot be modified in a later time.')
ewnVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("disabled", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnVLANState.setStatus('current')
if mibBuilder.loadTexts: ewnVLANState.setDescription('The VLAN state.')
ewnVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnVLANType.setStatus('current')
if mibBuilder.loadTexts: ewnVLANType.setDescription('The VLAN type.')
ewnVLANStaticPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANStaticPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnVLANStaticPortMap.setDescription('Ports that always belong to the VLAN.')
ewnVLANStaticUntaggedPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANStaticUntaggedPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnVLANStaticUntaggedPortMap.setDescription('Untagged ports of the VLAN.')
ewnVLANCurrentPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnVLANCurrentPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnVLANCurrentPortMap.setDescription('Ports currently belonging to the VLAN.')
ewnVLANCurrentUntaggedPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnVLANCurrentUntaggedPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnVLANCurrentUntaggedPortMap.setDescription('Untagged ports currently belonging to the VLAN.')
ewnVLANCurrentRegisteredPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnVLANCurrentRegisteredPortMap.setStatus('current')
if mibBuilder.loadTexts: ewnVLANCurrentRegisteredPortMap.setDescription('Registered ports currently belonging to the VLAN.')
ewnVLANIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANIPAddress.setStatus('current')
if mibBuilder.loadTexts: ewnVLANIPAddress.setDescription('VLAN IP address / mask')
ewnVLANAddVlan = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANAddVlan.setStatus('current')
if mibBuilder.loadTexts: ewnVLANAddVlan.setDescription('Add a new VLAN to ewnVLANTable')
ewnVLANDeleteVlan = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnVLANDeleteVlan.setStatus('current')
if mibBuilder.loadTexts: ewnVLANDeleteVlan.setDescription('Delete a VLAN from ewnVLANTable')
ewnQoSState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnQoSState.setStatus('current')
if mibBuilder.loadTexts: ewnQoSState.setDescription('QoS state')
ewnQoSTrust = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("cos", 1), ("dscp", 2), ("cosanddscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnQoSTrust.setStatus('current')
if mibBuilder.loadTexts: ewnQoSTrust.setDescription('QoS trust mode')
ewnQoSPriorityQueueOut = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnQoSPriorityQueueOut.setStatus('current')
if mibBuilder.loadTexts: ewnQoSPriorityQueueOut.setDescription('QoS priority queue out mode')
ewnQoSWRRqueueTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4), )
if mibBuilder.loadTexts: ewnQoSWRRqueueTable.setStatus('current')
if mibBuilder.loadTexts: ewnQoSWRRqueueTable.setDescription('QoS WRR queue table')
ewnQoSWRRqueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnQoSQueueIndex"))
if mibBuilder.loadTexts: ewnQoSWRRqueueEntry.setStatus('current')
if mibBuilder.loadTexts: ewnQoSWRRqueueEntry.setDescription('QoS WRR queue table entry')
ewnQoSQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnQoSQueueIndex.setStatus('current')
if mibBuilder.loadTexts: ewnQoSQueueIndex.setDescription('QoS Queue Index')
ewnQoSWRRqueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnQoSWRRqueueID.setStatus('current')
if mibBuilder.loadTexts: ewnQoSWRRqueueID.setDescription('QoS WRR queue ID')
ewnQoSWRRqueueCoSmap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnQoSWRRqueueCoSmap.setStatus('current')
if mibBuilder.loadTexts: ewnQoSWRRqueueCoSmap.setDescription('QoS WRR queue CoS mapping')
ewnQoSWRRqueueDSCPmap = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnQoSWRRqueueDSCPmap.setStatus('current')
if mibBuilder.loadTexts: ewnQoSWRRqueueDSCPmap.setDescription('QoS WRR queue DSCP mapping')
ewnQoSWRRqueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnQoSWRRqueueBandwidth.setStatus('current')
if mibBuilder.loadTexts: ewnQoSWRRqueueBandwidth.setDescription('QoS WRR queue bandwidth')
ewnSNMPState = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPState.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPState.setDescription('SNMP state')
ewnSNMPCommunitySet = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPCommunitySet.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPCommunitySet.setDescription('Set community string currently active for this device')
ewnSNMPCommunityGet = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPCommunityGet.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPCommunityGet.setDescription('Get community string currently active for this device')
ewnSNMPTrapCommunity1 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapCommunity1.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapCommunity1.setDescription('Trap community string 1 for this device')
ewnSNMPTrapCommunity2 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapCommunity2.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapCommunity2.setDescription('Trap community string 2 for this device')
ewnSNMPTrapCommunity3 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapCommunity3.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapCommunity3.setDescription('Trap community string 3 for this device')
ewnSNMPTrapCommunity4 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapCommunity4.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapCommunity4.setDescription('Trap community string 4 for this device')
ewnSNMPTrapCommunity5 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapCommunity5.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapCommunity5.setDescription('Trap community string 5 for this device')
ewnSNMPTrapIpAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress1.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress1.setDescription('Trap IP Address 1 for this device')
ewnSNMPTrapIpAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress2.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress2.setDescription('Trap IP Address 2 for this device')
ewnSNMPTrapIpAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress3.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress3.setDescription('Trap IP Address 3 for this device')
ewnSNMPTrapIpAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress4.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress4.setDescription('Trap IP Address 4 for this device')
ewnSNMPTrapIpAddress5 = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress5.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapIpAddress5.setDescription('Trap IP Address 5 for this device')
ewnSNMPTrapLinkDown = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapLinkDown.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapLinkDown.setDescription('Link Down Trap functionality')
ewnSNMPTrapLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPTrapLinkUp.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPTrapLinkUp.setDescription('Link Up Trap functionality')
ewnSNMPResetNeed = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnSNMPResetNeed.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPResetNeed.setDescription('Indicate need to reset SNMP process for SNMP entry changed.')
ewnSNMPResetSNMP = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPResetSNMP.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPResetSNMP.setDescription('Reset SNMP process for enable SNMP new setting.')
ewnSNMPResetRMONCount = MibScalar((1, 3, 6, 1, 4, 1, 2736, 1, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ewnSNMPResetRMONCount.setStatus('current')
if mibBuilder.loadTexts: ewnSNMPResetRMONCount.setDescription('Reset RMON counters on all the ports. Please refer to ewnPortEntry group to reset specific port.')
ewnBridgeSDBTable = MibTable((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11, 1), )
if mibBuilder.loadTexts: ewnBridgeSDBTable.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSDBTable.setDescription('Switching Database table')
ewnBridgeSDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11, 1, 1), ).setIndexNames((0, "EtherWAN-sw72000", "ewnBridgeSDBIndex"))
if mibBuilder.loadTexts: ewnBridgeSDBEntry.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSDBEntry.setDescription('SDB Entry')
ewnBridgeSDBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnBridgeSDBIndex.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSDBIndex.setDescription('Switching Database Index')
ewnBridgeSDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnBridgeSDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSDBMacAddress.setDescription('Switching Database MAC address')
ewnBridgeSDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnBridgeSDBVlanId.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSDBVlanId.setDescription('Switching Database VLAN ID')
ewnBridgeSDBPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2736, 1, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ewnBridgeSDBPortNo.setStatus('current')
if mibBuilder.loadTexts: ewnBridgeSDBPortNo.setDescription('Switching Database port number')
mibBuilder.exportSymbols("EtherWAN-sw72000", ewnLACPAdminKey=ewnLACPAdminKey, ewnMirrorFromPortMap=ewnMirrorFromPortMap, ewnIGMPRecordExpireTime=ewnIGMPRecordExpireTime, ewnIGMPRecordGroupAddress=ewnIGMPRecordGroupAddress, ewnSNMPTrapCommunity3=ewnSNMPTrapCommunity3, ewnIGMPRecordEntry=ewnIGMPRecordEntry, ewnVLANState=ewnVLANState, ewnSystem=ewnSystem, ewnMirrorEntry=ewnMirrorEntry, ewnSystemProductModel=ewnSystemProductModel, ewnTrunkIndex=ewnTrunkIndex, ewnLACPCONFENTRY=ewnLACPCONFENTRY, ewnQoSWRRqueueID=ewnQoSWRRqueueID, ewnIGMP=ewnIGMP, ewnQoSState=ewnQoSState, ewnPortDupStatus=ewnPortDupStatus, ewnPort=ewnPort, ewnSystemTFTPIpAddress=ewnSystemTFTPIpAddress, ewnPortLinkConfig=ewnPortLinkConfig, ewnQoSWRRqueueDSCPmap=ewnQoSWRRqueueDSCPmap, ewnLACPPortMode=ewnLACPPortMode, ewnVLANCurrentUntaggedPortMap=ewnVLANCurrentUntaggedPortMap, ewnQoSWRRqueueEntry=ewnQoSWRRqueueEntry, ewnIGMPCfgIGMPVersion=ewnIGMPCfgIGMPVersion, ewnSNMPTrapCommunity4=ewnSNMPTrapCommunity4, ewnTrunkEntry=ewnTrunkEntry, ewnBridgeSDBVlanId=ewnBridgeSDBVlanId, ewnSystemTFTPState=ewnSystemTFTPState, ewnSystemConfigOperation=ewnSystemConfigOperation, ewnMirrorCount=ewnMirrorCount, ewnPortAliasName=ewnPortAliasName, ewnIGMPRecordUpTime=ewnIGMPRecordUpTime, ewnSystemPassword=ewnSystemPassword, ewnPortTable=ewnPortTable, ewnBridgeSDBTable=ewnBridgeSDBTable, ewnMirror=ewnMirror, ewnIGMPRecordLastReporter=ewnIGMPRecordLastReporter, ewnLACPAGGENTRY=ewnLACPAGGENTRY, ewnPortPVID=ewnPortPVID, ewnBridge=ewnBridge, ewnSNMPCommunitySet=ewnSNMPCommunitySet, ewnQoSQueueIndex=ewnQoSQueueIndex, lanSwitch=lanSwitch, ewnIGMPCfgVlanID=ewnIGMPCfgVlanID, ewnMirrorTable=ewnMirrorTable, ewnBridgeSDBEntry=ewnBridgeSDBEntry, etherwan=etherwan, ewnIGMPCfgReportSuppression=ewnIGMPCfgReportSuppression, ewnIGMPCfgEntry=ewnIGMPCfgEntry, ewnIGMPCfgMaxResponseTime=ewnIGMPCfgMaxResponseTime, ewnPortDlfMulticastLimit=ewnPortDlfMulticastLimit, ewnPortNo=ewnPortNo, ewnSNMPResetRMONCount=ewnSNMPResetRMONCount, ewnSNMPTrapIpAddress3=ewnSNMPTrapIpAddress3, ewnPortString=ewnPortString, ewnMirrorIndex=ewnMirrorIndex, ewnSensor=ewnSensor, ewnLACP1=ewnLACP1, ewnLACPIndex=ewnLACPIndex, ewnSNMPState=ewnSNMPState, ewnTrunkCount=ewnTrunkCount, ewnLACPSYSPriority=ewnLACPSYSPriority, ewnLACPPortIndex=ewnLACPPortIndex, ewnSNMPTrapIpAddress4=ewnSNMPTrapIpAddress4, ewnPortResetRMONCount=ewnPortResetRMONCount, ewnPortBroadcastLimit=ewnPortBroadcastLimit, ewnIGMPCfgFastLeave=ewnIGMPCfgFastLeave, ewnVLANName=ewnVLANName, ewnQoSPriorityQueueOut=ewnQoSPriorityQueueOut, ewnBridgeSDBPortNo=ewnBridgeSDBPortNo, ewnSNMPTrapLinkDown=ewnSNMPTrapLinkDown, ewnSystemFirmwareRev=ewnSystemFirmwareRev, ewnBridgeSDBMacAddress=ewnBridgeSDBMacAddress, ewnVLANStaticUntaggedPortMap=ewnVLANStaticUntaggedPortMap, ewnIGMPRecordInterface=ewnIGMPRecordInterface, ewnQoSWRRqueueCoSmap=ewnQoSWRRqueueCoSmap, ewnLACPPortTable=ewnLACPPortTable, ewnSystemPasswordEncrypted=ewnSystemPasswordEncrypted, ewnSNMPResetNeed=ewnSNMPResetNeed, ewnVLANCurrentRegisteredPortMap=ewnVLANCurrentRegisteredPortMap, ewnSNMPTrapCommunity1=ewnSNMPTrapCommunity1, ewnQoS=ewnQoS, ewnMirrorAvailablePortMap=ewnMirrorAvailablePortMap, ewnRadius=ewnRadius, ewnSNMPResetSNMP=ewnSNMPResetSNMP, ewnVLANType=ewnVLANType, ewnVLANEntry=ewnVLANEntry, ewnLACPTable=ewnLACPTable, PYSNMP_MODULE_ID=lanSwitch, ewnTrunk=ewnTrunk, ewnPortSwitchMode=ewnPortSwitchMode, ewnBridgeSDBIndex=ewnBridgeSDBIndex, ewnPortCount=ewnPortCount, ewnPortDupConfig=ewnPortDupConfig, ewnTrunkTable=ewnTrunkTable, ewnVLANCurrentPortMap=ewnVLANCurrentPortMap, ewnVLANIPAddress=ewnVLANIPAddress, ewnLACPPortName=ewnLACPPortName, ewnSystemTFTPAction=ewnSystemTFTPAction, ewnLACP=ewnLACP, ewnPortEntry=ewnPortEntry, ewnSystemReboot=ewnSystemReboot, ewnTrunkMaxNumOfPorts=ewnTrunkMaxNumOfPorts, ewnSDB=ewnSDB, ewnTrunkAvailPortMap=ewnTrunkAvailPortMap, ewnSystemHardwareRev=ewnSystemHardwareRev, ewnIGMPCfgIndex=ewnIGMPCfgIndex, ewnVLAN=ewnVLAN, ewnSystemAutoSaveDelay=ewnSystemAutoSaveDelay, ewnSystemAutoSaveState=ewnSystemAutoSaveState, ewnLACPPortString=ewnLACPPortString, ewnLACP2=ewnLACP2, ewnBridgeSTPState=ewnBridgeSTPState, ewnSNMPCommunityGet=ewnSNMPCommunityGet, ewnSNMPTrapIpAddress5=ewnSNMPTrapIpAddress5, ewnPortFlowConfig=ewnPortFlowConfig, ewnIGMPCfgQueryInterval=ewnIGMPCfgQueryInterval, ewnSystemTFTP=ewnSystemTFTP, ewnSystemMacAddr=ewnSystemMacAddr, ewnVLANDeleteVlan=ewnVLANDeleteVlan, ewnQoSWRRqueueTable=ewnQoSWRRqueueTable, ewnSNMPTrapIpAddress1=ewnSNMPTrapIpAddress1, ewnMirrorMode=ewnMirrorMode, ewnVLANTable=ewnVLANTable, ewnPortLinkStatus=ewnPortLinkStatus, ewnQoSTrust=ewnQoSTrust, ewnSNMP=ewnSNMP, ewnIGMPRecordTable=ewnIGMPRecordTable, ewnVLANStaticPortMap=ewnVLANStaticPortMap, ewnIGMPCfgTable=ewnIGMPCfgTable, ewnSystemTFTPFilename=ewnSystemTFTPFilename, ewnVLANAddVlan=ewnVLANAddVlan, ewnLACPTimeout=ewnLACPTimeout, ewnDHCP=ewnDHCP, ewnPortSpeedStatus=ewnPortSpeedStatus, ewnMirrorToPort=ewnMirrorToPort, ewnLACPPriority=ewnLACPPriority, sw72000=sw72000, ewnSystemRebootRequired=ewnSystemRebootRequired, ewnPortPriority=ewnPortPriority, ewnIGMPRecordIndex=ewnIGMPRecordIndex, ewnSystemGatewayIpAddress=ewnSystemGatewayIpAddress, ewnIGMPState=ewnIGMPState, ewnTrunkPortMap=ewnTrunkPortMap, ewnVLANGVRPState=ewnVLANGVRPState, ewnVLANIndex=ewnVLANIndex, ewnSNMPTrapLinkUp=ewnSNMPTrapLinkUp, ewnVLANID=ewnVLANID, ewnSNMPTrapCommunity5=ewnSNMPTrapCommunity5, ewnPortFlowStatus=ewnPortFlowStatus, ewnBridgeAgingTime=ewnBridgeAgingTime, ewnSNMPTrapCommunity2=ewnSNMPTrapCommunity2, ewnSNMPTrapIpAddress2=ewnSNMPTrapIpAddress2, ewnPortLimitLevel=ewnPortLimitLevel, ewnQoSWRRqueueBandwidth=ewnQoSWRRqueueBandwidth, ewnPortHardwareType=ewnPortHardwareType, ewnPortSpeedConfig=ewnPortSpeedConfig)
