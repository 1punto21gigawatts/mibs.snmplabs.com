#
# PySNMP MIB module WS-INFRA-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WS-INFRA-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, TimeTicks, Counter32, Integer32, ModuleIdentity, Gauge32, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, IpAddress, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter32", "Integer32", "ModuleIdentity", "Gauge32", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier")
DateAndTime, DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
wsInfraCluster, = mibBuilder.importSymbols("WS-INFRA-SMI-MIB", "wsInfraCluster")
DoActionNow, = mibBuilder.importSymbols("WS-TYPE-MIB", "DoActionNow")
wsInfraClusterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1))
wsInfraClusterMIB.setRevisions(('2008-08-08 09:46', '2008-06-17 17:13', '2008-04-29 10:13', '2007-06-26 13:26', '2007-06-26 12:15', '2006-05-24 13:58', '2005-12-27 14:05', '2005-12-16 12:29', '2005-09-12 20:39', '2005-08-17 13:25', '2005-08-15 16:27', '2005-08-15 14:20', '2005-08-11 18:53', '2005-07-07 18:36', '2005-07-07 16:39',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wsInfraClusterMIB.setRevisionsDescriptions(('01a15 Added scalar wsInfraClusterLicensingAlgorithm.', '01a14 Added dynamic AP load balancing objects.', '01a13 Added notes in the description of the following objects: - wsInfraCriticalResourceIp - wsInfraClusterMode - wsInfraClusterId - wsInfraClusterDiscoveryInterval - wsInfraClusterHoldInterval - wsInfraClusterHBInterval - wsInfraClusterAutoRevert - wsInfraClusterAutoRevertDelay - wsInfraClusterDhcpRedundancy', '01a12', '01a11', '01a10', '01a09', '01a08', '01a07', '01a06', '01a05', '01a04', '01a03', '01a02', '01a01',))
if mibBuilder.loadTexts: wsInfraClusterMIB.setLastUpdated('200808080946Z')
if mibBuilder.loadTexts: wsInfraClusterMIB.setOrganization('Symbol Technologies')
if mibBuilder.loadTexts: wsInfraClusterMIB.setContactInfo('Symbol Technologies, Inc. Customer Service Postal: One Symbol Plaza Holtsville, NY 11742-1300 USA Tel: +1. 631.738.6213 E-mail: support@symbol.com Web: http://www.symbol.com/support')
if mibBuilder.loadTexts: wsInfraClusterMIB.setDescription('The Cluster module is responsible for providing a minimal interrupted service to the network in the case of a switch failure by making the other standby switch take over the un-adopted Access ports. The core functionalities of the Cluster module are as listed below: - Manage and process automatic port adoption by switch(es) in the event of network or any switch failure. - Manage the cluster license. - Act as a tunnel between the application modules of CC across the switches. All Cluster related configuration parameters (except of course wsInfraClusterEnable itself) can be modified only if Cluster Protocol is disabled.')
wsInfraClusterSwitchIP = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterSwitchIP.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterSwitchIP.setDescription('The IP Address of the switch in the cluster context.')
wsInfraClusterEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterEnable.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterEnable.setDescription('Enable or disable the Cluster feature.')
wsInfraClusterMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterMode.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterMode.setDescription('Set the mode to either Active or Standby. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterId = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterId.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterId.setDescription('Cluster/Group id. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterDiscoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDiscoveryInterval.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDiscoveryInterval.setDescription('During this time switches try to discover other switches in the cluster. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterHoldInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterHoldInterval.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHoldInterval.setDescription('Time to announce that the neighbour switch is down if no heartbeats received during this period of time. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterHBInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterHBInterval.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHBInterval.setDescription('The frequency in which heartbeats are sent. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterHandleSTP = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterHandleSTP.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHandleSTP.setDescription('Whether the STP convergence time needs to be handled or not.')
wsInfraClusterSwitchState = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("startup", 2), ("discovery", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterSwitchState.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterSwitchState.setDescription('The current state of the switch in the cluster.')
wsInfraClusterLicNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterLicNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterLicNum.setDescription('The cluster license number.')
wsInfraClusterInstalledLicNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterInstalledLicNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterInstalledLicNum.setDescription('Installed license number of the switch.')
wsInfraClusterApCnt = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterApCnt.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterApCnt.setDescription('Total number of APs adopted in the cluster by all the switches.')
wsInfraClusterVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterVersion.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterVersion.setDescription('The version of the Cluster Module.')
wsInfraClusterHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14))
wsInfraClusterHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1), )
if mibBuilder.loadTexts: wsInfraClusterHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryTable.setDescription('List of history entries for the state changes of the switch.')
wsInfraClusterHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1, 1), ).setIndexNames((0, "WS-INFRA-CLUSTER-MIB", "wsInfraClusterHistoryIndex"))
if mibBuilder.loadTexts: wsInfraClusterHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryEntry.setDescription('Defines an entry in the wsInfraClusterHistoryTable.')
wsInfraClusterHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsInfraClusterHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryIndex.setDescription('Simple Index.')
wsInfraClusterHistoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("startup", 2), ("discovery", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterHistoryState.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryState.setDescription('Switch states.')
wsInfraClusterHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterHistoryTime.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryTime.setDescription('The time at which state change happened.')
wsInfraClusterHistoryEventTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("startupDone", 3), ("discoveryDone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterHistoryEventTrigger.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryEventTrigger.setDescription('The event that triggered the state change.')
wsInfraClusterHistoryDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 14, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterHistoryDesc.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterHistoryDesc.setDescription('Description of the event and state change reason.')
wsInfraClusterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15))
wsInfraClusterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1), )
if mibBuilder.loadTexts: wsInfraClusterConfigTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterConfigTable.setDescription("This table is used to configure the IP address of the switches in the cluster including this switch. It can be modified only if Cluster Protocol is disabled i.e. when wsInfraClusterEnable is set to 'disable'.")
wsInfraClusterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1), ).setIndexNames((0, "WS-INFRA-CLUSTER-MIB", "wsInfraClusterConfigIndex"), (0, "WS-INFRA-CLUSTER-MIB", "wsInfraClusterMemberIpAddr"))
if mibBuilder.loadTexts: wsInfraClusterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterConfigEntry.setDescription('Defines an entry in the wsInfraClusterConfigTable.')
wsInfraClusterConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterConfigIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterConfigIndex.setDescription('Description.')
wsInfraClusterMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterMemberIpAddr.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterMemberIpAddr.setDescription('Unique IP address of the switch.')
wsInfraClusterCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsInfraClusterCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterCfgRowStatus.setDescription("SNMP row status about the configured object. The row creation fails with error status as 'Bad Value' if the Cluster Config Table already contains the max number of peers specified by the Cluster Protocol Specification.")
wsInfraClustertNumHBSent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClustertNumHBSent.setStatus('current')
if mibBuilder.loadTexts: wsInfraClustertNumHBSent.setDescription('The number of HeartBeats sent from this switch to a peer switch in the cluster. ')
wsInfraClusterNumHBRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumHBRcvd.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumHBRcvd.setDescription('The number of HeartBeats received from the peer switch in the cluster.')
wsInfraClusterLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterLastSeen.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterLastSeen.setDescription('The time at which the last heartbeat received from the peer switch. ')
wsInfraClusterFirstSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterFirstSeen.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterFirstSeen.setDescription('The time at which the peer switch was first seen.')
wsInfraClusterNumUpdMesgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumUpdMesgSent.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumUpdMesgSent.setDescription('The number of Update Messages sent from this switch to a peer switch in the cluster. ')
wsInfraClusterNumUpdMesgRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumUpdMesgRecd.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumUpdMesgRecd.setDescription('The number of Update Messages received from the peer switch in the cluster.')
wsInfraClusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("peerConfigured", 1), ("peerInvalid", 2), ("peerSeen", 3), ("peerNotSeen", 4), ("peerEstablished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterStatus.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterStatus.setDescription('The status of the peer switch.')
wsInfraClusterAdoptionCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterAdoptionCnt.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterAdoptionCnt.setDescription('Number of APs adopted by the peer switch in cluster.')
wsInfraClusterSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterSwitchMode.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterSwitchMode.setDescription("Whether the Peer Switch's mode is primary or standby.")
wsInfraClusterInstalLicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterInstalLicValue.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterInstalLicValue.setDescription('The value of the Installed License of the peer switch.')
wsInfraClusterUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterUptime.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterUptime.setDescription('Uptime of member switch')
wsInfraClusterNumMusAdopted = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumMusAdopted.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumMusAdopted.setDescription('Number of MUs adopted by the member switch')
wsInfraClusterNumRadiosAdopted = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumRadiosAdopted.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumRadiosAdopted.setDescription('Number of radios adopted by the member switch')
wsInfraClusterNumSelfHealingRadios = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumSelfHealingRadios.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumSelfHealingRadios.setDescription('Number of radios in self healing mode in the member switch')
wsInfraClusterNumRogueAps = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterNumRogueAps.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterNumRogueAps.setDescription('Number of rogue APs detected by the member switch')
wsInfraClusterCfgRunningImgVer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterCfgRunningImgVer.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterCfgRunningImgVer.setDescription('Version of the running image on the member switch')
wsInfraClusterCfgPortAdoptionCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterCfgPortAdoptionCapacity.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterCfgPortAdoptionCapacity.setDescription('Port adoption capacity of the member switch')
wsInfraClusterPeerStatTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 2), )
if mibBuilder.loadTexts: wsInfraClusterPeerStatTable.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraClusterPeerStatTable.setDescription('Statistics about different switches in the cluster.')
wsInfraClusterPeerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 2, 1), ).setIndexNames((0, "WS-INFRA-CLUSTER-MIB", "wsInfraClusterConfigIndex"), (0, "WS-INFRA-CLUSTER-MIB", "wsInfraClusterMemberIpAddr"))
if mibBuilder.loadTexts: wsInfraClusterPeerStatEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraClusterPeerStatEntry.setDescription('Defines an entry in the wsInfraClusterPeerStatTable.')
wsInfraClusterStatNumHBSent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 15, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterStatNumHBSent.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraClusterStatNumHBSent.setDescription('The number of HeartBeats sent from this switch to a peer switch in the cluster. ')
wsInfraClusterUpAndFullyConnected = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterUpAndFullyConnected.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterUpAndFullyConnected.setDescription('Indicates if cluster is up and fully connected')
wsInfraClusterTotalApsAdopted = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterTotalApsAdopted.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterTotalApsAdopted.setDescription('Total number of APs adopted by the cluster')
wsInfraClusterTotalRadiosAdopted = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterTotalRadiosAdopted.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterTotalRadiosAdopted.setDescription('Total number of radios adopted by the cluster')
wsInfraClusterTotalMusAssociated = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterTotalMusAssociated.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterTotalMusAssociated.setDescription('Total number of MUs adopted by the cluster')
wsInfraClusterTotalRogueAps = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterTotalRogueAps.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterTotalRogueAps.setDescription('Total number of rogue APs detected by the cluster')
wsInfraClusterTotalPortAdoptionCapacity = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterTotalPortAdoptionCapacity.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterTotalPortAdoptionCapacity.setDescription('Total port adoption capacity of the cluster')
wsInfraClusterTotalSelfHealingRadios = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterTotalSelfHealingRadios.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterTotalSelfHealingRadios.setDescription('Total number of radios in self healing mode in the cluster')
wsInfraClusterMusAdoptedCnt = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterMusAdoptedCnt.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterMusAdoptedCnt.setDescription('Number of MUs adopted by the switch')
wsInfraClusterRadiosAdoptedCnt = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterRadiosAdoptedCnt.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterRadiosAdoptedCnt.setDescription('Number of radios adopted by the switch')
wsInfraClusterSelfHealingRadioCnt = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterSelfHealingRadioCnt.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterSelfHealingRadioCnt.setDescription('Number of radios in self healing mode in the switch')
wsInfraClusterRogueApCnt = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterRogueApCnt.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterRogueApCnt.setDescription('Number of rogue APs detected by the switch')
wsInfraClusterRunningImgVer = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterRunningImgVer.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterRunningImgVer.setDescription('Version of the running image on the switch')
wsInfraClusterPortAdoptionCapacity = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterPortAdoptionCapacity.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterPortAdoptionCapacity.setDescription('Port adoption capacity of the switch')
wsInfraClusterAutoRevert = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterAutoRevert.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterAutoRevert.setDescription('Enable or disable automatic revert. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterAutoRevertDelay = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterAutoRevertDelay.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterAutoRevertDelay.setDescription('Auto-revert delay (in minutes - ranging from 1 to 1800). This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterManualRevert = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("manualRevertNow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterManualRevert.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterManualRevert.setDescription('Set manual revert')
wsInfraClusterDhcpRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDhcpRedundancy.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDhcpRedundancy.setDescription('Enable or disable the DHCP redundancy feature. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterActiveDhcpServerSwitch = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraClusterActiveDhcpServerSwitch.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterActiveDhcpServerSwitch.setDescription('IP address of the switch running the active DHCP server. Other values this field could take are: NotApplicable - when redundancy is disabled. Unknown - when at any given time if there is no active DHCP server switch or the current switch is not participating in DHCP redundancy.')
wsInfraClusterResetActiveDhcpServer = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetActiveDhcpServer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterResetActiveDhcpServer.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterResetActiveDhcpServer.setDescription('Reset the active DHCP server. If the current switch is running active DHCP server, then the DHCP server will be reset. Otherwise, this action will be ignored.')
wsInfraCriticalResourceIp = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraCriticalResourceIp.setStatus('current')
if mibBuilder.loadTexts: wsInfraCriticalResourceIp.setDescription('IP address of the Critical Resource for the cluster switches. This object can not be set when Cluster feature is enabled. Disable the Cluster feature using wsInfraClusterEnable before setting this object.')
wsInfraClusterDynApLoadBal = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36))
wsInfraClusterDynApLoadBalEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalEnable.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalEnable.setDescription('Enable or disable dynamic AP load balance feature. Default is disabled.')
wsInfraClusterDynApLoadBalApproach = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("schedule", 1), ("runtime", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalApproach.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalApproach.setDescription('This determines whether to the trigger dynamic AP load balance on scheduled time or immediately when AP imbalance is detected.')
wsInfraClusterDynApLoadBalSched = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 3))
wsInfraClusterDynApLoadBalSchedStartTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 3, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalSchedStartTime.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalSchedStartTime.setDescription('If trigger for dynamic AP load balance is scheduled time then this configuration parameter determines the start time to initiate dynamic AP load balance.')
wsInfraClusterDynApLoadBalSchedInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalSchedInterval.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalSchedInterval.setDescription('If trigger for dynamic AP load balance is scheduled time then this configuration parameter determines the interval or frequency at which dynamic AP load balance will be triggered. Default value is 1 day.')
wsInfraClusterDynApLoadBalStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalStart.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalStart.setDescription('Command to initiate dynamic AP load balance.')
wsInfraClusterDynApLoadBalMUThrshld = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 36, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setUnits('MUs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalMUThrshld.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterDynApLoadBalMUThrshld.setDescription('This specifies per AP MU threshold value. If AP associated MU count is equal to or greater than this threshold value then AP will not be reset. It also depends on trigger for dynamic AP load balance. Default value is 32 MUs.')
wsInfraClusterLicensingAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("max", 1), ("aggregation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraClusterLicensingAlgorithm.setStatus('current')
if mibBuilder.loadTexts: wsInfraClusterLicensingAlgorithm.setDescription('Set the redundancy licensing algorithm to either Max or Aggregation. This object can not be set when Redundancy feature is enabled. Disable the Redundancy feature using wsInfraClusterEnable before setting this object.')
wsInfrastructureMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 100))
wsInfrastructureMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 100, 1))
wsInfrastructureMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 100, 1, 1)).setObjects(("WS-INFRA-CLUSTER-MIB", "wsInfrastructureMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfrastructureMIBCompliance = wsInfrastructureMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: wsInfrastructureMIBCompliance.setDescription('Description.')
wsInfrastructureMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 100, 2))
wsInfrastructureMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 100, 2, 1)).setObjects(("WS-INFRA-CLUSTER-MIB", "wsInfraClusterSwitchIP"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterEnable"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterMode"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterId"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHBInterval"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHandleSTP"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterSwitchState"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterLicNum"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterInstalledLicNum"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterApCnt"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterVersion"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHistoryIndex"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHistoryState"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHistoryTime"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHistoryEventTrigger"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHistoryDesc"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterCfgRowStatus"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterMemberIpAddr"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterHoldInterval"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDiscoveryInterval"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterUpAndFullyConnected"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterTotalApsAdopted"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterTotalRadiosAdopted"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterTotalMusAssociated"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterTotalRogueAps"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterTotalPortAdoptionCapacity"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterTotalSelfHealingRadios"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterMusAdoptedCnt"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterRadiosAdoptedCnt"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterSelfHealingRadioCnt"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterRogueApCnt"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterRunningImgVer"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterPortAdoptionCapacity"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterConfigIndex"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterAutoRevert"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterAutoRevertDelay"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterResetActiveDhcpServer"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterActiveDhcpServerSwitch"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDhcpRedundancy"), ("WS-INFRA-CLUSTER-MIB", "wsInfraCriticalResourceIp"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDynApLoadBalEnable"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDynApLoadBalApproach"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDynApLoadBalMUThrshld"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDynApLoadBalStart"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterLicensingAlgorithm"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterManualRevert"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClustertNumHBSent"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumHBRcvd"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterLastSeen"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterFirstSeen"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumUpdMesgSent"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumUpdMesgRecd"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterStatus"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterAdoptionCnt"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterSwitchMode"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterInstalLicValue"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterUptime"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumMusAdopted"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumRadiosAdopted"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumSelfHealingRadios"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterNumRogueAps"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterCfgRunningImgVer"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterCfgPortAdoptionCapacity"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDynApLoadBalSchedStartTime"), ("WS-INFRA-CLUSTER-MIB", "wsInfraClusterDynApLoadBalSchedInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfrastructureMIBGroup = wsInfrastructureMIBGroup.setStatus('current')
if mibBuilder.loadTexts: wsInfrastructureMIBGroup.setDescription('Description.')
wsInfrastructureMIBObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 1, 8, 1, 100, 2, 2)).setObjects(("WS-INFRA-CLUSTER-MIB", "wsInfraClusterStatNumHBSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfrastructureMIBObsoleteGroup = wsInfrastructureMIBObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfrastructureMIBObsoleteGroup.setDescription('Description.')
mibBuilder.exportSymbols("WS-INFRA-CLUSTER-MIB", wsInfrastructureMIBCompliances=wsInfrastructureMIBCompliances, wsInfraClusterMemberIpAddr=wsInfraClusterMemberIpAddr, wsInfraClusterNumRogueAps=wsInfraClusterNumRogueAps, wsInfraClusterTotalRogueAps=wsInfraClusterTotalRogueAps, wsInfraClusterNumRadiosAdopted=wsInfraClusterNumRadiosAdopted, wsInfraClustertNumHBSent=wsInfraClustertNumHBSent, wsInfraClusterAdoptionCnt=wsInfraClusterAdoptionCnt, wsInfraClusterDynApLoadBalApproach=wsInfraClusterDynApLoadBalApproach, wsInfraClusterHistoryIndex=wsInfraClusterHistoryIndex, wsInfraClusterId=wsInfraClusterId, wsInfraClusterHistory=wsInfraClusterHistory, wsInfraClusterConfig=wsInfraClusterConfig, wsInfrastructureMIBGroups=wsInfrastructureMIBGroups, wsInfraClusterRunningImgVer=wsInfraClusterRunningImgVer, wsInfraClusterStatus=wsInfraClusterStatus, wsInfraClusterMIB=wsInfraClusterMIB, wsInfraClusterTotalMusAssociated=wsInfraClusterTotalMusAssociated, wsInfraClusterMode=wsInfraClusterMode, wsInfraClusterDynApLoadBalEnable=wsInfraClusterDynApLoadBalEnable, wsInfraClusterConfigIndex=wsInfraClusterConfigIndex, wsInfraClusterHistoryTime=wsInfraClusterHistoryTime, wsInfraClusterStatNumHBSent=wsInfraClusterStatNumHBSent, wsInfraClusterSwitchIP=wsInfraClusterSwitchIP, wsInfraClusterActiveDhcpServerSwitch=wsInfraClusterActiveDhcpServerSwitch, wsInfrastructureMIBConformance=wsInfrastructureMIBConformance, wsInfraClusterHistoryState=wsInfraClusterHistoryState, wsInfraCriticalResourceIp=wsInfraCriticalResourceIp, wsInfraClusterHistoryEntry=wsInfraClusterHistoryEntry, wsInfraClusterTotalRadiosAdopted=wsInfraClusterTotalRadiosAdopted, wsInfraClusterLastSeen=wsInfraClusterLastSeen, wsInfraClusterLicensingAlgorithm=wsInfraClusterLicensingAlgorithm, wsInfraClusterRadiosAdoptedCnt=wsInfraClusterRadiosAdoptedCnt, wsInfraClusterResetActiveDhcpServer=wsInfraClusterResetActiveDhcpServer, wsInfraClusterPeerStatTable=wsInfraClusterPeerStatTable, wsInfraClusterMusAdoptedCnt=wsInfraClusterMusAdoptedCnt, wsInfraClusterPortAdoptionCapacity=wsInfraClusterPortAdoptionCapacity, wsInfraClusterTotalSelfHealingRadios=wsInfraClusterTotalSelfHealingRadios, wsInfraClusterTotalApsAdopted=wsInfraClusterTotalApsAdopted, wsInfraClusterSwitchMode=wsInfraClusterSwitchMode, wsInfraClusterAutoRevert=wsInfraClusterAutoRevert, wsInfraClusterLicNum=wsInfraClusterLicNum, wsInfraClusterConfigEntry=wsInfraClusterConfigEntry, wsInfraClusterConfigTable=wsInfraClusterConfigTable, wsInfraClusterVersion=wsInfraClusterVersion, wsInfraClusterHistoryDesc=wsInfraClusterHistoryDesc, wsInfraClusterSelfHealingRadioCnt=wsInfraClusterSelfHealingRadioCnt, wsInfraClusterInstalLicValue=wsInfraClusterInstalLicValue, wsInfraClusterNumUpdMesgRecd=wsInfraClusterNumUpdMesgRecd, wsInfraClusterCfgPortAdoptionCapacity=wsInfraClusterCfgPortAdoptionCapacity, wsInfraClusterNumSelfHealingRadios=wsInfraClusterNumSelfHealingRadios, wsInfraClusterHandleSTP=wsInfraClusterHandleSTP, wsInfrastructureMIBGroup=wsInfrastructureMIBGroup, wsInfraClusterDiscoveryInterval=wsInfraClusterDiscoveryInterval, wsInfraClusterCfgRowStatus=wsInfraClusterCfgRowStatus, wsInfraClusterInstalledLicNum=wsInfraClusterInstalledLicNum, wsInfraClusterTotalPortAdoptionCapacity=wsInfraClusterTotalPortAdoptionCapacity, wsInfraClusterHoldInterval=wsInfraClusterHoldInterval, wsInfraClusterDhcpRedundancy=wsInfraClusterDhcpRedundancy, wsInfraClusterSwitchState=wsInfraClusterSwitchState, wsInfraClusterFirstSeen=wsInfraClusterFirstSeen, wsInfraClusterRogueApCnt=wsInfraClusterRogueApCnt, wsInfraClusterPeerStatEntry=wsInfraClusterPeerStatEntry, wsInfraClusterAutoRevertDelay=wsInfraClusterAutoRevertDelay, wsInfraClusterDynApLoadBalSchedStartTime=wsInfraClusterDynApLoadBalSchedStartTime, wsInfraClusterEnable=wsInfraClusterEnable, wsInfraClusterHistoryTable=wsInfraClusterHistoryTable, wsInfraClusterUptime=wsInfraClusterUptime, wsInfraClusterManualRevert=wsInfraClusterManualRevert, wsInfraClusterNumMusAdopted=wsInfraClusterNumMusAdopted, wsInfrastructureMIBObsoleteGroup=wsInfrastructureMIBObsoleteGroup, wsInfraClusterCfgRunningImgVer=wsInfraClusterCfgRunningImgVer, wsInfraClusterNumUpdMesgSent=wsInfraClusterNumUpdMesgSent, wsInfraClusterDynApLoadBalMUThrshld=wsInfraClusterDynApLoadBalMUThrshld, wsInfrastructureMIBCompliance=wsInfrastructureMIBCompliance, wsInfraClusterDynApLoadBal=wsInfraClusterDynApLoadBal, wsInfraClusterHistoryEventTrigger=wsInfraClusterHistoryEventTrigger, wsInfraClusterNumHBRcvd=wsInfraClusterNumHBRcvd, wsInfraClusterDynApLoadBalSchedInterval=wsInfraClusterDynApLoadBalSchedInterval, wsInfraClusterApCnt=wsInfraClusterApCnt, wsInfraClusterHBInterval=wsInfraClusterHBInterval, PYSNMP_MODULE_ID=wsInfraClusterMIB, wsInfraClusterDynApLoadBalStart=wsInfraClusterDynApLoadBalStart, wsInfraClusterDynApLoadBalSched=wsInfraClusterDynApLoadBalSched, wsInfraClusterUpAndFullyConnected=wsInfraClusterUpAndFullyConnected)
