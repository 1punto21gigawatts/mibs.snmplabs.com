#
# PySNMP MIB module HH3C-RAID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RAID-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
Hh3cStorageEnableState, Hh3cStorageOwnerType, hh3cStorageRef, Hh3cRaidIDType, Hh3cStorageActionType = mibBuilder.importSymbols("HH3C-STORAGE-REF-MIB", "Hh3cStorageEnableState", "Hh3cStorageOwnerType", "hh3cStorageRef", "Hh3cRaidIDType", "Hh3cStorageActionType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, Counter64, iso, ModuleIdentity, TimeTicks, ObjectIdentity, Unsigned32, IpAddress, Gauge32, MibIdentifier, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Counter64", "iso", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
hh3cRaid = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 10, 4))
if mibBuilder.loadTexts: hh3cRaid.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: hh3cRaid.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cRaid.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cRaid.setDescription('This MIB describes the general information of raid.')
hh3cRaidMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1))
hh3cRaidCapacityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 1))
hh3cPrimaryRaidCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPrimaryRaidCount.setStatus('current')
if mibBuilder.loadTexts: hh3cPrimaryRaidCount.setDescription('This object identifies the maximal number of primary raids supported.')
hh3cRaidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2), )
if mibBuilder.loadTexts: hh3cRaidTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidTable.setDescription('This table containing some property information of the array.')
hh3cRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidName"))
if mibBuilder.loadTexts: hh3cRaidEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidEntry.setDescription('An entry containing management information applicable to create array resource.')
hh3cRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRaidName.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidName.setDescription('This object identifies the name of the array.')
hh3cRaidId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidId.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidId.setDescription('This object describes the identification of the array.')
hh3cRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 3), Hh3cRaidIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidUuid.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidUuid.setDescription('This object describes the UUID of the array.')
hh3cRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("jbod", 1), ("raid0", 2), ("raid1", 3), ("raid2", 4), ("raid3", 5), ("raid4", 6), ("raid5", 7), ("raid6", 8), ("raid10", 9), ("raid50", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidLevel.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidLevel.setDescription("This object identifies the type of array. The value 'jbod' means just a bunch of disks, the value 'raid0' means RAID Level 0, and so on.")
hh3cRaidTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidTimestamp.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidTimestamp.setDescription('This object identifies the system time when the array is created.')
hh3cRaidDiskList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidDiskList.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidDiskList.setDescription('This object describes a list of the disk composed the array, each two bytes with network-byte order means a single entity index of the disk.')
hh3cRaidOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 7), Hh3cStorageOwnerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidOwner.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidOwner.setDescription('This object identifies the owner of the array.')
hh3cRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidSize.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidSize.setDescription("This object describes the size of array's total space. The units is million bytes.")
hh3cRaidFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 9), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidFreeSize.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidFreeSize.setDescription("This object describes the size of array's vacancy space. The units is million bytes.")
hh3cRaidAutoSync = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidAutoSync.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidAutoSync.setDescription('This object identifies if the raid should be synchro automatically when created.')
hh3cRaidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidRowStatus.setDescription('This object describes the actions to crate or delete an array.')
hh3cRaidManageTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3), )
if mibBuilder.loadTexts: hh3cRaidManageTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidManageTable.setDescription('This table containing some management information of the array.')
hh3cRaidManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidUuid"))
if mibBuilder.loadTexts: hh3cRaidManageEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidManageEntry.setDescription('An entry containing management information applicable to particular array resource.')
hh3cRaidLocationState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 1), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidLocationState.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidLocationState.setDescription('This object identifies if the array can be located.')
hh3cRaidAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("run", 1), ("pause", 2), ("rebuild", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidAction.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidAction.setDescription("This object identifies the actions to operating the array. When read, this object always returns the value 'invalid'.")
hh3cRaidRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("degraded", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidRunState.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidRunState.setDescription("This object identifies the state of the array. The value 'normal' means array works well. The value 'degraded' means array has degraded. The value 'failed' means some disks met failure and array has failed.")
hh3cRaidAutoRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 4), Hh3cStorageEnableState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidAutoRebuild.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidAutoRebuild.setDescription('This object identifies if the array can be auto rebuild.')
hh3cRaidSyncPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidSyncPercentage.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidSyncPercentage.setDescription("This object describes the percentage of progress when the array is synchronizing. The value is equal to '100' when the progress has finished.")
hh3cRaidHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 6), Hh3cStorageEnableState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidHideState.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidHideState.setDescription("This object identifies if the array is hided. When the value of this object is equal to 'enable', the array will be hided and the files on it can not be accessed by any user.")
hh3cRaidLvRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 7), Hh3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidLvRestore.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidLvRestore.setDescription('This object identifies an action to restore all the logic volume resources.')
hh3cRaidType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("virtualDevice", 1), ("directDevice", 2), ("serviceEnabledDevice", 3), ("unassigned", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidType.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidType.setDescription("This object identifies the physical type of an array. The value 'virtualDevice' means if a array is prepared for virtual device, it can be used to create LV, for exampe, it is can be split into a lot of LV, or be a part of LV. The value 'directDevice' means if a array is prepared for direct device, it can be used to create a LV which type is direct. Unlike virtual devices, they cannot be combined or split into multiple logical devices. The value 'serviceEnabledDevice' means if a array is prepared for service-enabled device, it can be used to create a LV which type is service-enabled. Unlike virtual devices, they cannot be combined or split into multiple logical devices. The value 'unassigned' means it is the original status of a array, if a array is unassigned, it can't be used to create LV.")
hh3cRaidCacheTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4), )
if mibBuilder.loadTexts: hh3cRaidCacheTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidCacheTable.setDescription('This table containing some property information and management information of the array cache.')
hh3cRaidCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidUuid"))
if mibBuilder.loadTexts: hh3cRaidCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidCacheEntry.setDescription('An entry containing management information applicable to particular array cache resource.')
hh3cRaidReadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 1), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidReadCache.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidReadCache.setDescription("This object identifies the state of read cache. If the value of this object is set to 'disable', the associated percentage of cache hit may be invalid.")
hh3cRaidReadCacheHitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidReadCacheHitPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidReadCacheHitPeriod.setDescription('This object describes the period during which how often the date matched with the cache when read. The units is minute.')
hh3cRaidReadCacheAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidReadCacheAverageRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidReadCacheAverageRate.setDescription('This object describes the average percentage of cache hit when read.')
hh3cRaidReadCachePhaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidReadCachePhaseRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidReadCachePhaseRate.setDescription('This object describes the percentage of cache hit when read during the period set by the hh3cRaidReadCacheHitPeriod object.')
hh3cRaidWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 5), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidWriteCache.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidWriteCache.setDescription("This object identifies the state of write cache. If the value of this object is set to 'disable', the associated percentage of cache hit may be invalid.")
hh3cRaidWriteCacheHitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidWriteCacheHitPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidWriteCacheHitPeriod.setDescription('This object describes the period during which how often the date matched with the cache when writed. The units is minute.')
hh3cRaidWriteCacheAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidWriteCacheAverageRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidWriteCacheAverageRate.setDescription('This object describes the average percentage of cache hit when writed.')
hh3cRaidWriteCachePhaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidWriteCachePhaseRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidWriteCachePhaseRate.setDescription('This object describes the percentage of cache hit when write during the period set by the hh3cRaidWriteCacheHitPeriod object.')
hh3cRaidWriteCacheFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 9), Hh3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidWriteCacheFlush.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidWriteCacheFlush.setDescription('This object identifies an action to flushing the write cache.')
hh3cRaidSpareDiskTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 5), )
if mibBuilder.loadTexts: hh3cRaidSpareDiskTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidSpareDiskTable.setDescription('This table described the spare hot disk information.')
hh3cRaidSpareDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 5, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidUuid"), (0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hh3cRaidSpareDiskEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidSpareDiskEntry.setDescription('An entry containing management information applicable to a spare hot disk.')
hh3cRaidSpareDiskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidSpareDiskRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRaidSpareDiskRowStatus.setDescription('This object describes the actions to create or delete spare hot disk.')
hh3cFreezeRaidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6), )
if mibBuilder.loadTexts: hh3cFreezeRaidTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFreezeRaidTable.setDescription('This table described the freezed raid management.')
hh3cFreezeRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cFreezeRaidUuid"))
if mibBuilder.loadTexts: hh3cFreezeRaidEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFreezeRaidEntry.setDescription('An entry containing management information applicable to manage the freezed raid.')
hh3cFreezeRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1, 1), Hh3cRaidIDType())
if mibBuilder.loadTexts: hh3cFreezeRaidUuid.setStatus('current')
if mibBuilder.loadTexts: hh3cFreezeRaidUuid.setDescription('This object describes the uuid of the freezed raid.')
hh3cFreezeRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFreezeRaidName.setStatus('current')
if mibBuilder.loadTexts: hh3cFreezeRaidName.setDescription('This object describes the name of the freezed raid.')
hh3cFreezeRaidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFreezeRaidRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFreezeRaidRowStatus.setDescription("This object describes the actions to manage the freezed raid. Only the value 'destroy' is supported.")
hh3c3rdRaidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7), )
if mibBuilder.loadTexts: hh3c3rdRaidTable.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidTable.setDescription('This table described the 3rd raid management.')
hh3c3rdRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3c3rdRaidUuid"))
if mibBuilder.loadTexts: hh3c3rdRaidEntry.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidEntry.setDescription('An entry containing management information applicable to manage the 3rd raid.')
hh3c3rdRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 1), Hh3cRaidIDType())
if mibBuilder.loadTexts: hh3c3rdRaidUuid.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidUuid.setDescription('This object describes the uuid of the 3rd raid.')
hh3c3rdRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3c3rdRaidName.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidName.setDescription('This object describes the name of the 3rd raid.')
hh3c3rdRaidOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3c3rdRaidOwner.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidOwner.setDescription('This object describes the owner of the 3rd raid.')
hh3c3rdRaidImport = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 4), Hh3cStorageOwnerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3c3rdRaidImport.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidImport.setDescription("This object describes the owner for the 3rd raid. When read, the value 'none' will be get. If the action is executed successfully, the 3rd raid will become a primary raid, and this entry will be deleted automatically.")
hh3c3rdRaidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3c3rdRaidRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3c3rdRaidRowStatus.setDescription("This object describes the actions to manage the 3rd raid. Only the value 'destroy' is supported.")
mibBuilder.exportSymbols("HH3C-RAID-MIB", hh3cRaidAutoSync=hh3cRaidAutoSync, hh3cRaidName=hh3cRaidName, hh3c3rdRaidUuid=hh3c3rdRaidUuid, hh3cRaidManageTable=hh3cRaidManageTable, hh3cRaidWriteCachePhaseRate=hh3cRaidWriteCachePhaseRate, hh3cRaidCacheEntry=hh3cRaidCacheEntry, hh3cRaidSize=hh3cRaidSize, hh3cRaidManageEntry=hh3cRaidManageEntry, hh3cRaidWriteCacheAverageRate=hh3cRaidWriteCacheAverageRate, hh3cRaidSpareDiskTable=hh3cRaidSpareDiskTable, hh3cRaidSyncPercentage=hh3cRaidSyncPercentage, hh3cRaidSpareDiskRowStatus=hh3cRaidSpareDiskRowStatus, hh3cFreezeRaidName=hh3cFreezeRaidName, hh3cRaidUuid=hh3cRaidUuid, hh3cRaidReadCacheAverageRate=hh3cRaidReadCacheAverageRate, hh3c3rdRaidRowStatus=hh3c3rdRaidRowStatus, hh3cRaid=hh3cRaid, hh3cRaidRunState=hh3cRaidRunState, hh3cFreezeRaidTable=hh3cFreezeRaidTable, hh3cRaidType=hh3cRaidType, hh3c3rdRaidTable=hh3c3rdRaidTable, hh3cRaidSpareDiskEntry=hh3cRaidSpareDiskEntry, hh3cFreezeRaidEntry=hh3cFreezeRaidEntry, PYSNMP_MODULE_ID=hh3cRaid, hh3cRaidRowStatus=hh3cRaidRowStatus, hh3cRaidLvRestore=hh3cRaidLvRestore, hh3cRaidWriteCacheFlush=hh3cRaidWriteCacheFlush, hh3cPrimaryRaidCount=hh3cPrimaryRaidCount, hh3c3rdRaidImport=hh3c3rdRaidImport, hh3cRaidWriteCacheHitPeriod=hh3cRaidWriteCacheHitPeriod, hh3cRaidHideState=hh3cRaidHideState, hh3cRaidMibObjects=hh3cRaidMibObjects, hh3cRaidEntry=hh3cRaidEntry, hh3cRaidId=hh3cRaidId, hh3cFreezeRaidRowStatus=hh3cFreezeRaidRowStatus, hh3c3rdRaidOwner=hh3c3rdRaidOwner, hh3cRaidCapacityTable=hh3cRaidCapacityTable, hh3cRaidWriteCache=hh3cRaidWriteCache, hh3cRaidLevel=hh3cRaidLevel, hh3cRaidTable=hh3cRaidTable, hh3cRaidLocationState=hh3cRaidLocationState, hh3cRaidDiskList=hh3cRaidDiskList, hh3c3rdRaidName=hh3c3rdRaidName, hh3cRaidOwner=hh3cRaidOwner, hh3cRaidReadCachePhaseRate=hh3cRaidReadCachePhaseRate, hh3cRaidReadCacheHitPeriod=hh3cRaidReadCacheHitPeriod, hh3cRaidReadCache=hh3cRaidReadCache, hh3cRaidAction=hh3cRaidAction, hh3cFreezeRaidUuid=hh3cFreezeRaidUuid, hh3cRaidAutoRebuild=hh3cRaidAutoRebuild, hh3cRaidFreeSize=hh3cRaidFreeSize, hh3cRaidCacheTable=hh3cRaidCacheTable, hh3cRaidTimestamp=hh3cRaidTimestamp, hh3c3rdRaidEntry=hh3c3rdRaidEntry)
