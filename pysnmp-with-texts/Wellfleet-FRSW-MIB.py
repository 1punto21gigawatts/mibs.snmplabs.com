#
# PySNMP MIB module Wellfleet-FRSW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FRSW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, IpAddress, Counter64, Bits, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, iso, NotificationType, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "IpAddress", "Counter64", "Bits", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "iso", "NotificationType", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfFrswGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFrswGroup")
wfFrSwDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1), )
if mibBuilder.loadTexts: wfFrSwDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface corresponding to any interface. Incorporates the Error table.')
wfFrSwDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwDlcmiCircuit"))
if mibBuilder.loadTexts: wfFrSwDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiEntry.setDescription('The parameters for a particular Data Link Connection Management Interface.')
wfFrSwDlcmiDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDelete.setDescription('Indication to delete this frame relay interface.')
wfFrSwDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiState.setDescription('Indicates which state of DLCMI the interface is in')
wfFrSwDlcmiNniEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiNniEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiNniEnable.setDescription('Indicates whether a NNI is enabled for this entry.')
wfFrSwDlcmiCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCircuit.setDescription('Instance identifier; the circuit number of this entry.')
wfFrSwDlcmiManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("t1617d", 3), ("t1617b", 4), ("annexa", 5), ("lmiswitch", 6), ("annexdswitch", 7), ("annexaswitch", 8), ("iwfoamenabled", 9), ("iwfoamdisabled", 10))).clone('t1617d')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiManagementType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiManagementType.setDescription('Indicates the Data Link Connection Management scheme that is active.')
wfFrSwL3NetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwL3NetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwL3NetAddress.setDescription('Indicates level 3 (IP) address of this frame relay interface')
wfFrSwDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("twobyte", 2), ("threebyte", 3), ("fourbyte", 4))).clone('twobyte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiAddressLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiAddressLen.setDescription('Indicates the address length, including the control portion.')
wfFrSwDlcmiControlByteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiControlByteDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiControlByteDisable.setDescription('Indicates inclusion of control byte in q922 format.')
wfFrSwDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiPollingInterval.setDescription('The number of seconds between successive status enquiry messages.')
wfFrSwDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiFullEnquiryInterval.setDescription('Indicates the number of status enquiries before a full status enquiry. (For bidirectional procedures.)')
wfFrSwDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 11), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiErrorThreshold.setDescription('Indicates the number errors monitored before declaring the interface down.')
wfFrSwDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 12), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiMonitoredEvents.setDescription('Indicates the events over which error threshold is kept.')
wfFrSwDlcmiRecoveryCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiRecoveryCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiRecoveryCounts.setDescription('Indicates the number of correct polling cycles during recovery.')
wfFrSwDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiMaxSupportedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiMaxSupportedVCs.setDescription('Indicates the maximum number of VCs allowed.')
wfFrSwDlcmiVCsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiVCsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiVCsInUse.setDescription('Indicates the number of VCs that are currently configured on this interface.')
wfFrSwSwitchHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSwitchHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSwitchHdrErrors.setDescription('Indicates the number of frames dropped because they were received on the remote side with an invalid switch header.')
wfFrSwDlcmiSequenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiSequenceCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiSequenceCount.setDescription("Indicates this switch's sequence counter; value of next to send.")
wfFrSwDlcmiLastReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiLastReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiLastReceived.setDescription('Indicates the sequence number just received from the end station.')
wfFrSwDlcmiActiveSeqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiActiveSeqCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiActiveSeqCount.setDescription("Indicates the switch's sequence counter for sending status enquiry. (For bidirectional procedures.)")
wfFrSwDlcmiActiveReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiActiveReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiActiveReceived.setDescription('Indicates the sequence number just received from the enquiring station. (For bidirectional procedures.)')
wfFrSwDlcmiPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiPolls.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiPolls.setDescription('This is the counter of where we are in the polling cycle.')
wfFrSwDlcmiAlarmTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiAlarmTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiAlarmTimer.setDescription('Counter of 1/2 second timeouts. Indicates when to expect poll.')
wfFrSwErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("reset", 1), ("other", 2), ("short", 3), ("long", 4), ("illegaldlci", 5), ("unknowndlci", 6), ("protoerr", 7), ("unknownie", 8), ("sequenceerr", 9), ("unknownrpt", 10), ("byteerr", 11), ("hdrerr", 12), ("formaterr", 13))).clone('reset')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwErrType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwErrType.setDescription('Indicates the type of the last specific monitored error.')
wfFrSwErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwErrData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwErrData.setDescription('Contains as much of the error packet as possible.')
wfFrSwErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwErrTime.setDescription('Indicates the time the last error occurred.')
wfFrSwBcMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwBcMeasurementInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwBcMeasurementInterval.setDescription('Indicates the Committed Burst sample window interval in msec')
wfFrSwDlcmiMcastNoBufferErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiMcastNoBufferErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiMcastNoBufferErrors.setDescription('Indicates the number of times a multicast failed partially or wholly because there are insufficient buffers available to create multiple copies of a multicast frame')
wfFrSwDlcmiFrameTooShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiFrameTooShortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiFrameTooShortErrors.setDescription('Indicates the number of frames dropped that are too short to be accepted.')
wfFrSwDlcmiFrameTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiFrameTooLongErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiFrameTooLongErrors.setDescription('Indicates the number of frames dropped that are too long to be accepted.')
wfFrSwDlcmiIllegalDlciErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiIllegalDlciErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiIllegalDlciErrors.setDescription('Indicates the number of frames dropped that had an invalid DLCI value.')
wfFrSwDlcmiUnknownDlciErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiUnknownDlciErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiUnknownDlciErrors.setDescription('Indicates the number of frames dropped which had an unknown DLCI value.')
wfFrSwDlcmiProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiProtocolErrors.setDescription('Indicates the number of frames dropped because of a DLCMI protocol violation.')
wfFrSwDlcmiUnknownIEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiUnknownIEErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiUnknownIEErrors.setDescription('Indicates the number of frames dropped that had an unknown information element.')
wfFrSwDlcmiSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiSequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiSequenceErrors.setDescription('Indicates the number of frames dropped because of a DLCMI sequence error.')
wfFrSwDlcmiUnknownRPTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiUnknownRPTErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiUnknownRPTErrors.setDescription('Indicates the number of frames dropped which had an unknown report type.')
wfFrSwDlcmiControlByteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiControlByteErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiControlByteErrors.setDescription('Indicates the number of frames dropped that had an unsupported control byte.')
wfFrSwDlcmiFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiFormatErrors.setDescription('Indicates the number of frames dropped due to a frame format error.')
wfFrSwDlcmiOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiOtherErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiOtherErrors.setDescription('Indicates the number of frames dropped due to unknown or other errors not counted by any error counter.')
wfFrSwDlcmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("recovered", 2), ("fault", 3), ("start", 4))).clone('start')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiStatus.setDescription('Indicates which state of execution the DLCMI gate is in')
wfFrSwDlcmiNewVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiNewVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiNewVCs.setDescription('Indicates the number of newly added PVCs that we have not yet told the CPE about, by means of a full-status message.')
wfFrSwDlcmiDeletedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiDeletedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDeletedVCs.setDescription('Indicates the number of deletedly added PVCs that we have not yet told the CPE about, by means of a full-status message.')
wfFrSwDlcmiFullStatusSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiFullStatusSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiFullStatusSeq.setDescription('Indicates the expected sequence number for the next Status Enquiry message that will prove that the CPE received our last Full Status Message and knows about the deleted PVCs.')
wfFrSwDlcmiBidirect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiBidirect.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiBidirect.setDescription('Indication to delete this frame relay interface.')
wfFrSwDlcmiDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("recovered", 2), ("fault", 3), ("start", 4))).clone('start')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiDteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDteStatus.setDescription('Indicates which state of execution the DLCMI gate is in for bidirectional procedures.')
wfFrSwDlcmiDteSeqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiDteSeqCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDteSeqCount.setDescription("Indicates the switch's sequence counter for sending status enquiry. (For bidirectional procedures.)")
wfFrSwDlcmiDteReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiDteReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDteReceived.setDescription('Indicates the sequence number just received from the enquiring station. (For bidirectional procedures.)')
wfFrSwDlcmiDteLastReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiDteLastReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDteLastReceived.setDescription('Indicates the sequence number just received from the end station.')
wfFrSwDlcmiDtePolls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwDlcmiDtePolls.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDtePolls.setDescription('This is the counter of where we are in the polling cycle.')
wfFrSwDlcmiDtePollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiDtePollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDtePollingInterval.setDescription('The number of seconds between successive status enquiry messages.')
wfFrSwDlcmiDteFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiDteFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDteFullEnquiryInterval.setDescription('Indicates the number of status enquiries before a full status enquiry. (For bidirectional procedures.)')
wfFrSwDlcmiDteErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 51), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiDteErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiDteErrorThreshold.setDescription('Indicates the number errors monitored before declaring the interface down.')
wfFrSwDlcmiCrossNetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetEnable.setDescription('Indication to delete this frame relay interface.')
wfFrSwDlcmiCrossNetPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetPollingInterval.setDescription('The number of seconds between successive status enquiry messages.')
wfFrSwDlcmiCrossNetErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 54), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetErrorThreshold.setDescription('Indicates the number missed heartbeat polls before declaring the cross-net PVC inactive.')
wfFrSwDlcmiCrossNetAsyncUpdateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetAsyncUpdateEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetAsyncUpdateEnable.setDescription('Indicates whether we are to send to the other end of the network, status updates for dlcis as soon as there is a change of status for the dlci.')
wfFrSwDlcmiBcMeasurementEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiBcMeasurementEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiBcMeasurementEnable.setDescription('Indicates whether Committed Burst Measurement is enabled for this interface. If this attribute is set to DISABLE then DE bit setting in Frame Relay frames at this interface is disabled.')
wfFrSwDlcmiAsyncUpdateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiAsyncUpdateEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiAsyncUpdateEnable.setDescription('Indicates whether the link management entity should send an asynchronous single PVC update message when the state of a PVC is changed by a technician or by cross-net polling procedures. ')
wfFrSwDlcmiCrossNetListenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetListenEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCrossNetListenEnable.setDescription("Indicates whether the link management entity should make a judgement of the PVC's status based on Cross Net updates.")
wfFrSwDlcmiSvcDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiSvcDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiSvcDisable.setDescription(' Indicates whether SVC is enabled or disabled for this access channel. ')
wfFrSwDlcmiL2AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e164", 1), ("x121", 2))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiL2AddrType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiL2AddrType.setDescription(' Indicates the address type supported on this access channel. This information is needed when wFrSwDlcmiSVCDisable is enabled. ')
wfFrSwDlcmiEscapeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("ingress", 2), ("egress", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiEscapeMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiEscapeMode.setDescription(' Identifies the Escape mode (none, ingress or egress) to be used for PVCs with wfFrSwVcEscapeMode set to enabled.')
wfFrSwDlcmiEscapeCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiEscapeCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiEscapeCircuit.setDescription('Identifies the FR-DTE circuit number corresponding to an Escape PVC. Applies only to PVCs with wfFrSwVcEscapeEnable set to enabled.')
wfFrSwDlcmiEscapeVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiEscapeVcCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiEscapeVcCount.setDescription(' The number of PVCs on this DLCMI that are configured as Escape VCs')
wfFrSwDlcmiIwfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sdlc2frsw", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiIwfMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiIwfMode.setDescription(' Identifies the interworking mode (none, SDLC-to-FRSW) to be used for PVCs with wfFrSwVcEscapeMode set to enabled.')
wfFrSwDlcmiSvcBillingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiSvcBillingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiSvcBillingEnable.setDescription('Indicates whether the SVC Billing on this access channel set to enable.')
wfFrSwDlcmiSpvcAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cra", 2), ("caa", 3), ("craandcaa", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiSpvcAgent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiSpvcAgent.setDescription(' Indicates if an SPVC Call Request Agent, Call Accept Agent, or both are enabled on this FRSW circuit.')
wfFrSwDlcmiCallAccDlciSelectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("specific", 2))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwDlcmiCallAccDlciSelectionType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwDlcmiCallAccDlciSelectionType.setDescription('Indicates to the Call Accept Agent to accept SPVC Call Setup requests for any available DLCI or for a specific DLCI. Call Setup requests with the wrong selection type will be rejected.')
wfFrSwCctTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2), )
if mibBuilder.loadTexts: wfFrSwCctTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctTable.setDescription('Frame Relay Circuit table gives information about a virtual circuit.')
wfFrSwCctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwCctNumber"), (0, "Wellfleet-FRSW-MIB", "wfFrSwCctDlci"))
if mibBuilder.loadTexts: wfFrSwCctEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctEntry.setDescription('An entry in the Frame Relay (Virtual) Circuit table.')
wfFrSwCctDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2), ("system", 3))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctDelete.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctDelete.setDescription('Indication to delete this frame relay interface.')
wfFrSwCctNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctNumber.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctNumber.setDescription('Instance identifier; the circuit number of this interface.')
wfFrSwCctDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 1007, 1024, 64511, 131072, 8257535))).clone(namedValues=NamedValues(("twobyteminimum", 16), ("twobytemaximum", 1007), ("threebyteminimum", 1024), ("threebytemaximum", 64511), ("fourbyteminimum", 131072), ("fourbytemaximum", 8257535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctDlci.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctDlci.setDescription('Instance identifier; this indicates the virtual circuit identifier')
wfFrSwCctState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3), ("control", 4), ("user", 5))).clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctState.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctState.setDescription('Indicates whether the particular virtual circuit is operational.')
wfFrSwCctMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctMulticast.setDescription('Indicates whether this dlci is used for multicast or single destination.')
wfFrSwCctInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctInBc.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctInBc.setDescription('Indicates the Incoming Committed Burst bits for this virtual circuit.')
wfFrSwCctOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctOutBc.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctOutBc.setDescription('Indicates the Outgoing Committed Burst bits for this virtual circuit.')
wfFrSwCctInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctInBe.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctInBe.setDescription('Indicates the Incoming Excess Burst bits for this virtual circuit.')
wfFrSwCctOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctOutBe.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctOutBe.setDescription('Indicates the Outgoing Excess Burst bits for this virtual circuit.')
wfFrSwCctInThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctInThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctInThroughput.setDescription('Indicates the incoming throughput in bits/sec for this virtual circuit.')
wfFrSwCctOutThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctOutThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctOutThroughput.setDescription('Indicates the outgoing throughput in bits/sec for this virtual circuit.')
wfFrSwCctCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctCreationTime.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctCreationTime.setDescription('Indicates the value of sysUpTime when the VC was created.')
wfFrSwCctLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLastTimeChange.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLastTimeChange.setDescription('Indicates the value of sysUpTime when last there was a change in VC state.')
wfFrSwCctLocalSentNonDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSentNonDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSentNonDEFrames.setDescription('Indicates the number of frames without the DE bit sent on this virtual circuit over the local interface.')
wfFrSwCctLocalSentNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSentNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSentNonDEOctets.setDescription('Indicates the number of octets without DE bit sent on this virtual circuit over the local interface.')
wfFrSwCctLocalSentDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSentDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSentDEFrames.setDescription('Indicates the number of frames with DE bit set sent on this virtual circuit over the local interface.')
wfFrSwCctLocalSentDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSentDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSentDEOctets.setDescription('Indicates the number of octets with DE bit set sent on this virtual circuit over the local interface.')
wfFrSwCctLocalSetFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSetFECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSetFECNFrames.setDescription('Indicates the number of frames sent to the local interface on which this switch set the FECN bit .')
wfFrSwCctLocalSetFECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSetFECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSetFECNOctets.setDescription('Indicates the number of octets in frames sent to the local interface on which this switch set the FECN bit.')
wfFrSwCctLocalSetBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSetBECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSetBECNFrames.setDescription('Indicates the number of frames sent to the local interface on which this switch set the BECN bit.')
wfFrSwCctLocalSetBECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSetBECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSetBECNOctets.setDescription('Indicates the number of octets in frames sent to the local interface on which this switch set the BECN bit.')
wfFrSwCctLocalSetDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSetDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSetDEFrames.setDescription('Indicates the number of frames sent to the local interface on which this switch set the DE bit.')
wfFrSwCctLocalSetDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalSetDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalSetDEOctets.setDescription('Indicates the number of octets in frames sent to the local interface on which this switch set the DE bit.')
wfFrSwCctLocalDropNonDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalDropNonDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalDropNonDEFrames.setDescription('Indicates the number of frames received over the local interface which were discarded, excluding any frames with the DE bit set.')
wfFrSwCctLocalDropNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalDropNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalDropNonDEOctets.setDescription('Indicates the number of octets in frames received over the local interface which were discarded, excluding any frames with the DE bit set.')
wfFrSwCctLocalDropDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalDropDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalDropDEFrames.setDescription('Indicates the number of frames received over the local interface, having the DE bit set, which were discarded.')
wfFrSwCctLocalDropDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalDropDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalDropDEOctets.setDescription('Indicates the number of octets in frames received over the local interface, having the DE bit set, which were discarded.')
wfFrSwCctInactiveVCDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctInactiveVCDropFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctInactiveVCDropFrames.setDescription('Indicates how many frames were discarded because the virtual circuit was inactive.')
wfFrSwCctInactiveVCDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctInactiveVCDropOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctInactiveVCDropOctets.setDescription('Indicates how many Octets were discarded because the virtual circuit was inactive.')
wfFrSwCctLocalRecvNonDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvNonDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvNonDEFrames.setDescription('Indicates the number of frames received on this virtual circuit over the local interface.')
wfFrSwCctLocalRecvNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvNonDEOctets.setDescription('Indicates the number of octets received on this virtual circuit over the local interface.')
wfFrSwCctLocalRecvDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvDEFrames.setDescription('Indicates the number of frames received over the local interface with the DE bit set.')
wfFrSwCctLocalRecvDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvDEOctets.setDescription('Indicates the number of octets in frames received over the local interface with the DE bit set.')
wfFrSwCctLocalRecvFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvFECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvFECNFrames.setDescription('Indicates the number of frames received over the local interface with the FECN bit set.')
wfFrSwCctLocalRecvFECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvFECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvFECNOctets.setDescription('Indicates the number of octets in frames received over the local interface with the FECN bit set.')
wfFrSwCctLocalRecvBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvBECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvBECNFrames.setDescription('Indicates the number of frames received over the local interface with the BECN bit set.')
wfFrSwCctLocalRecvBECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecvBECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecvBECNOctets.setDescription('Indicates the number of octets in frames received over the local interface with the BECN bit set.')
wfFrSwCctLocalRecentNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalRecentNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalRecentNonDEOctets.setDescription('Indicates the number of octets received over the local interface during the most recent sampling period.')
wfFrSwCctRemoteSentNonDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSentNonDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSentNonDEFrames.setDescription('Indicates the number of Non DE set frames sent over the remote interface.')
wfFrSwCctRemoteSentNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSentNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSentNonDEOctets.setDescription('Indicates the number of Non DE set octets sent over the remote interface.')
wfFrSwCctRemoteSentDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSentDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSentDEFrames.setDescription('Indicates the number of DE set frames sent over the remote interface.')
wfFrSwCctRemoteSentDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSentDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSentDEOctets.setDescription('Indicates the number of DE set octets sent over the remote interface.')
wfFrSwCctRemoteSetFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSetFECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSetFECNFrames.setDescription('Indicates the number of frames sent to the remote interface on which this switch set the FECN bit.')
wfFrSwCctRemoteSetFECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSetFECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSetFECNOctets.setDescription('Indicates the number of octets in frames sent to the remote interface that on which this switch set the FECN bit.')
wfFrSwCctRemoteSetBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSetBECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSetBECNFrames.setDescription('Indicates the number of frames sent to the remote interface on which this switch set the BECN bit.')
wfFrSwCctRemoteSetBECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteSetBECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteSetBECNOctets.setDescription('Indicates the number of octets in frames sent to the remote interface on which this switch set the BECN bit.')
wfFrSwCctRemoteDropNonDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteDropNonDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteDropNonDEFrames.setDescription('Indicates the number of frames received over the remote interface which were discarded, excluding any frames with the DE bit set.')
wfFrSwCctRemoteDropNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteDropNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteDropNonDEOctets.setDescription('Indicates the number of octets in frames received over the remote interface which were discarded, excluding any frames with the DE bit set.')
wfFrSwCctRemoteDropDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteDropDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteDropDEFrames.setDescription('Indicates the number of frames received over the remote interface, having the DE bit set, which were discarded.')
wfFrSwCctRemoteDropDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteDropDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteDropDEOctets.setDescription('Indicates the number of octets in frames received over the remote interface, having the DE bit set, which were discarded.')
wfFrSwCctRemoteRecvNonDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvNonDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvNonDEFrames.setDescription('Indicates the number of frames received on this virtual circuit over the remote interface.')
wfFrSwCctRemoteRecvNonDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvNonDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvNonDEOctets.setDescription('Indicates the number of octets received on this virtual circuit over the remote interface.')
wfFrSwCctRemoteRecvDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvDEFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvDEFrames.setDescription('Indicates the number of frames received over the remote interface with the DE bit set.')
wfFrSwCctRemoteRecvDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvDEOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvDEOctets.setDescription('Indicates the number of octets in frames received over the remote interface with the DE bit set.')
wfFrSwCctRemoteRecvFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvFECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvFECNFrames.setDescription('Indicates the number of frames received over the remote interface with the FECN bit set.')
wfFrSwCctRemoteRecvFECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvFECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvFECNOctets.setDescription('Indicates the number of octets in frames received over the remote interface with the FECN bit set.')
wfFrSwCctRemoteRecvBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvBECNFrames.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvBECNFrames.setDescription('Indicates the number of frames received over the remote interface with the BECN bit set.')
wfFrSwCctRemoteRecvBECNOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvBECNOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteRecvBECNOctets.setDescription('Indicates the number of octets in frames received over the remote interface with the BECN bit set.')
wfFrSwCctLocalBecnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalBecnState.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalBecnState.setDescription('Indicates the local BECN state')
wfFrSwCctRemoteBecnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctRemoteBecnState.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctRemoteBecnState.setDescription('Indicates the remote BECN state')
wfFrSwCctLocalOrRemoteConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))).clone('remote')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctLocalOrRemoteConnection.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctLocalOrRemoteConnection.setDescription('Indicates whether this connection is Local to Local Connection or Local to Remote connection.')
wfFrSwCctInBcOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctInBcOctets.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctInBcOctets.setDescription('Indicates the Incoming Committed Burst in octets for this virtual circuit.')
wfFrSwCctStateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCctStateSet.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctStateSet.setDescription('User access for setting the state of a virtual circuit')
wfFrSwCctReportedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acked", 1), ("unacked", 2), ("unreported", 3))).clone('unreported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctReportedStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctReportedStatus.setDescription('Record keeping for circuit status')
wfFrSwCctReceivedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctReceivedStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctReceivedStatus.setDescription('State of a virtual circuit as reported by the network at an NNI')
wfFrSwCctCrossNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctCrossNetStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctCrossNetStatus.setDescription('State of a virtual circuit as reported by the other end of the network under bidirectional signalling.')
wfFrSwCctXNetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsent", 1), ("sent", 2))).clone('unsent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctXNetSent.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctXNetSent.setDescription('Whether we have sent a cross net status message for this VC yet.')
wfFrSwCctXNetReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("recv", 1), ("unrecv", 2))).clone('unrecv')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctXNetReceived.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctXNetReceived.setDescription('Whether we have received a cross net status message for this VC during the current polling interval. ')
wfFrSwCctXNetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCctXNetErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwCctXNetErrors.setDescription('This is the count of the consecutive errors (usually timeouts) against this VC in cross-network heartbeat polling ')
wfFrSwTupleTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3), )
if mibBuilder.loadTexts: wfFrSwTupleTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleTable.setDescription('The Parameters for the Tuple table, identifying the endpoints of virtual circuits as pairs of IP addresses and DLCI.')
wfFrSwTupleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwTupleIpAddrA"), (0, "Wellfleet-FRSW-MIB", "wfFrSwTupleDlciA"), (0, "Wellfleet-FRSW-MIB", "wfFrSwTupleIpAddrB"), (0, "Wellfleet-FRSW-MIB", "wfFrSwTupleDlciB"))
if mibBuilder.loadTexts: wfFrSwTupleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleEntry.setDescription('The parameters for a particular Tuple.')
wfFrSwTupleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwTupleDelete.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleDelete.setDescription('Indication to delete this tuple.')
wfFrSwTupleIpAddrA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwTupleIpAddrA.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleIpAddrA.setDescription("Instance indentifier; indicates the IP address associated with endpoint 'A' of a virtual circuit.")
wfFrSwTupleDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwTupleDlciA.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleDlciA.setDescription("Instance identfier; indicates the DLCI associated with endpoint 'A' of a virtual circuit.")
wfFrSwTupleIpAddrB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwTupleIpAddrB.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleIpAddrB.setDescription("Instance identfier; indicates the IP address associated with endpoint 'B' of a virtual circuit.")
wfFrSwTupleDlciB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwTupleDlciB.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwTupleDlciB.setDescription("Instance identifier; Indicates the DLCI associated with endpoint 'B' of a virtual circuit.")
wfFrSwMcastTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4), )
if mibBuilder.loadTexts: wfFrSwMcastTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastTable.setDescription('The list of multicast addresses')
wfFrSwMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwMcastIndex"))
if mibBuilder.loadTexts: wfFrSwMcastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastEntry.setDescription('The parameters for a particular Multicast address.')
wfFrSwMcastDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwMcastDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastDelete.setDescription('Indication to delete this multicast instance.')
wfFrSwMcastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwMcastIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastIndex.setDescription('Index of this multicast DLCI instance')
wfFrSwMcastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwMcastIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastIpAddr.setDescription('IP address of the interface in which this multicast DLCI is defined.')
wfFrSwMcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwMcastDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastDlci.setDescription('Identifies the multicast DLCI with which the IndividualDlci is associated.')
wfFrSwMcastIndividualDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwMcastIndividualDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwMcastIndividualDlci.setDescription('Indicates the DLCI associated with the above multicast DLCI.')
wfFrSwUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5))
wfFrSwUsageEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageEnable.setDescription('Enable/Disable FRSW billing.')
wfFrSwUsageVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageVolume.setDescription("Indicates the file system volume number to which the billing usage data files will be written. The volume number corresponds to the slot number on which the volume resides. Note: Value 0 has the special meaning that no 'Store' and 'Flush' operations will take place. This translates to no Billing data will be written to the local file system. 'Update' operations will still be performed on each local slot. Full Billing statistics will still be available in the wfFrSwUsageTable MIB.")
wfFrSwUsageVolumeBackup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageVolumeBackup.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageVolumeBackup.setDescription('Indicates the backup volume if wfFrSwUsageVolume becomes inoperative. Note: This feature is not implemented in this release.')
wfFrSwUsageDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageDirectory.setDescription('The name of the directory where the billing usage data files are stored. ')
wfFrSwUsageFilePrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageFilePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageFilePrefix.setDescription('The base name of billing usage data files.')
wfFrSwUsageTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageTimerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageTimerInterval.setDescription('This number determines the timer interval (number of seconds) unit for the Billing process to perform its various timer driven tasks. i.e. updating billing usage data, writing billing usage data to file system and file system management activities.')
wfFrSwUsageUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageUpdateInterval.setDescription('This number specifies the interval (number of minutes) for the Billing process to collect and update billing usage data in the wfFrSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfFrSwUsageTimerInterval.')
wfFrSwUsageStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageStoreInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageStoreInterval.setDescription('This number specifies the interval (number of minutes) for the Billing process to write billing usage data on to the file system from the wfFrSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfFrSwUsageTimerInterval.')
wfFrSwUsageFlushInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageFlushInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageFlushInterval.setDescription('This number specifies the interval (number of minutes) for the Billing process to write billing usage data on to the file system from the wfFrSwUsage MIB follow by zeroing the wfFrSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfFrSwUsageTimerInterval.')
wfFrSwUsageCleanupInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageCleanupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCleanupInterval.setDescription('This is the interval (number of minutes) for the Billing process to check and delete old billing usage data files. Note: When converted to seconds, this must be a multilple of wfFrSwUsageTimerInterval.')
wfFrSwUsageLocalTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLocalTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageLocalTimeZone.setDescription('Indicates local time zone of the switch')
wfFrSwUsageUpdateTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageUpdateTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageUpdateTimeStamp.setDescription('Time stamp of last wfFrSwUsageUpdateInterval timer expiration or the starting time of the current wfFrSwUsageUpdateInterval. This value is number of seconds since midnight Jan 1, 1976 (GMT).')
wfFrSwUsageStoreTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageStoreTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageStoreTimeStamp.setDescription('Time stamp of last wfFrSwUsageStoreInterval timer expiration or the starting time of the current wfFrSwUsageStoreInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT). ')
wfFrSwUsageFlushTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageFlushTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageFlushTimeStamp.setDescription('Time stamp of last wfFrSwUsageFlushInterval timer expiration or the starting time of the current wfFrSwUsageFlushInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT).')
wfFrSwUsageCleanupTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCleanupTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCleanupTimeStamp.setDescription('Time stamp of last wfFrSwUsageCleanupInterval timer expiration or the starting time of the current wfFrSwUsageCleanupInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT).')
wfFrSwUsageUpdateData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageUpdateData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageUpdateData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating of the billing usage data. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwUsageStoreData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageStoreData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageStoreData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating and writing of the billing usage data. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwUsageFlushData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageFlushData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageFlushData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating and writing of the billing usage data and followed by zeroing the wfFrSwBillingUsage MIB. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwUsageFileCleanup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageFileCleanup.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageFileCleanup.setDescription('Setting this attribute to a non-zero value will cause an immediate checking and deleting old billing usage data files. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwUsageState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageState.setDescription('current state FRSW billing.')
wfFrSwUsageCurVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurVolume.setDescription('current file system volume number used. This number is the same as wfFrSwUsageVolume except when the user sets wfFrSwUsageVolume to an invalid number.')
wfFrSwUsageCurVolumeBackup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurVolumeBackup.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurVolumeBackup.setDescription('curent backup file system volume number used. This number is the same as wfFrSwUsageVolumeBackUp except when the user sets wfFrSwUsageVolume to an invalid number. Note: This feature is not implemented in this release.')
wfFrSwUsageCurDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurDirectory.setDescription('current directory name used. This number is the same as wfFrSwUsageDirectory except when the user sets wfFrSwUsageDirectory to an invalid name.')
wfFrSwUsageCurFilePrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurFilePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurFilePrefix.setDescription('current base file name used. This number is the same as wfFrSwUsageFilePrefix except when the user sets wfFrSwUsageFilePrefix to an invalid name.')
wfFrSwUsageCurTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurTimerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurTimerInterval.setDescription('current timer interval number used. This number is the same as wfFrSwUsageTimerInterval except when the user sets wfFrSwUsageTimerInterval to an invalid value.')
wfFrSwUsageCurUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurUpdateInterval.setDescription('current update interval number used. This number is the same as wfFrSwUsageUpdateInterval except when the user sets wfFrSwUsageUpdateInterval to an invalid value.')
wfFrSwUsageCurStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurStoreInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurStoreInterval.setDescription('current store timer interval number used. This number is the same as wfFrSwUsageStoreInterval except when the user sets wfFrSwUsageStoreInterval to an invalid value.')
wfFrSwUsageCurFlushInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurFlushInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurFlushInterval.setDescription('current flush timer interval number used. This number is the same as wfFrSwUsageFlushInterval except when the user sets wfFrSwUsageFlushInterval to an invalid value.')
wfFrSwUsageCurCleanupInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurCleanupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurCleanupInterval.setDescription('current file cleanup timer interval number used. This number is the same as wfFrSwUsageCleanupInterval except when the user sets wfFrSwUsageCleanupInterval to an invalid value.')
wfFrSwUsageDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageDebug.setDescription('Enable/Disable printing of debug edl (trap) messages. NOTE: Do not enable this attribute in operational enviornment as it will likely flood the logging facility. This attribute is reserved for specialized debugging in a controlled lab enviornment.')
wfFrSwUsageCurDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCurDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageCurDebug.setDescription('current debug value used. This value is the same as wfFrSwUsageDebug except when the user sets wfFrSwUsageDeubg to an invalid value.')
wfFrSwUsageSwitchId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSwitchId.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageSwitchId.setDescription('switch id used in the billing usage data file.')
wfFrSwUsageNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageNumEntries.setDescription('number of entries in wfFrSwUsageTable')
wfFrSwSvcUsageEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageEnable.setDescription('Enable/Disable FRSW SVC billing.')
wfFrSwSvcUsageInterimRecordEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageInterimRecordEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageInterimRecordEnable.setDescription('Enable/Disable Writing FRSW SVC billing record while SVC connection is still up.')
wfFrSwSvcUsageVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageVolume.setDescription("Indicates the file system volume number to which the SVC billing usage data files will be written. The volume number corresponds to the slot number on which the volume resides. Note: Value 0 has the special meaning that no 'Store' and 'Flush' operations will take place. This translates to no Billing data will be written to the local file system. 'Update' operations will still be performed on each local slot. Full Billing statistics will still be available in the wfFrSwUsageTable MIB.")
wfFrSwSvcUsageDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageDirectory.setDescription('The name of the directory where the SVC billing usage data files are stored. ')
wfFrSwSvcUsageFilePrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageFilePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageFilePrefix.setDescription('The base name of SVC billing usage data files.')
wfFrSwSvcUsageUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageUpdateInterval.setDescription('This number specifies the interval (number of minutes) for the SVC Billing process to collect and update billing usage data in the wfFrSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfFrSwUsageTimerInterval.')
wfFrSwSvcUsageStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageStoreInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageStoreInterval.setDescription('This number specifies the interval (number of minutes) for the SVC Billing process to write billing usage data on to the file system from the wfFrSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfFrSwUsageTimerInterval.')
wfFrSwSvcUsageFlushInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageFlushInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageFlushInterval.setDescription('This number specifies the interval (number of minutes) for the SVC Billing process to write billing usage data on to the file system from the wfFrSwUsage MIB follow by zeroing the wfFrSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfFrSwUsageTimerInterval.')
wfFrSwSvcUsageCleanupInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageCleanupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCleanupInterval.setDescription('This is the interval (number of minutes) for the SVC Billing process to check and delete old billing usage data files. Note: When converted to seconds, this must be a multilple of wfFrSwUsageTimerInterval.')
wfFrSwSvcUsageUpdateTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 43), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageUpdateTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageUpdateTimeStamp.setDescription('Time stamp of last wfFrSwSvcUsageUpdateInterval timer expiration or the starting time of the current wfFrSwSvcUsageUpdateInterval. This value is number of seconds since midnight Jan 1, 1976 (GMT).')
wfFrSwSvcUsageStoreTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 44), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageStoreTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageStoreTimeStamp.setDescription('Time stamp of last wfFrSwSvcUsageStoreInterval timer expiration or the starting time of the current wfFrSwSvcUsageStoreInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT). ')
wfFrSwSvcUsageFlushTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 45), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageFlushTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageFlushTimeStamp.setDescription('Time stamp of last wfFrSwSvcUsageFlushInterval timer expiration or the starting time of the current wfFrSwSvcUsageFlushInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT).')
wfFrSwSvcUsageCleanupTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCleanupTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCleanupTimeStamp.setDescription('Time stamp of last wfFrSwSvcUsageCleanupInterval timer expiration or the starting time of the current wfFrSwSvcUsageCleanupInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT).')
wfFrSwSvcUsageUpdateData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageUpdateData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageUpdateData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating of the SVC billing usage data. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwSvcUsageStoreData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageStoreData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageStoreData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating and writing of the SVC billing usage data. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwSvcUsageFlushData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageFlushData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageFlushData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating and writing of the SVC billing usage data and followed by zeroing the wfFrSwBillingUsage MIB. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwSvcUsageFileCleanup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSvcUsageFileCleanup.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageFileCleanup.setDescription('Setting this attribute to a non-zero value will cause an immediate checking and deleting old SVC billing usage data files. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfFrSwSvcUsageState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageState.setDescription('current state FRSW SVC billing.')
wfFrSwSvcUsageCurVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurVolume.setDescription('current file system volume number used for SVC Billing. This number is the same as wfFrSwSvcUsageVolume except when the user sets wfFrSwSvcUsageVolume to an invalid number.')
wfFrSwSvcUsageCurDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurDirectory.setDescription('current directory name used for SVC Billing. This number is the same as wfFrSwSvcUsageDirectory except when the user sets wfFrSwSvcUsageDirectory to an invalid name.')
wfFrSwSvcUsageCurFilePrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurFilePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurFilePrefix.setDescription('current base file name used for SVC Billing. This name is the same as wfFrSwSvcUsageFilePrefix except when the user sets wfFrSwSvcUsageFilePrefix to an invalid name.')
wfFrSwSvcUsageCurUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurUpdateInterval.setDescription('current update interval number used. This number is the same as wfFrSwSvcUsageUpdateInterval except when the user sets wfFrSwSvcUsageUpdateInterval to an invalid value.')
wfFrSwSvcUsageCurStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurStoreInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurStoreInterval.setDescription('current store timer interval number used. This number is the same as wfFrSwSvcUsageStoreInterval except when the user sets wfFrSwSvcUsageStoreInterval to an invalid value.')
wfFrSwSvcUsageCurFlushInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurFlushInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurFlushInterval.setDescription('current flush timer interval number used. This number is the same as wfFrSwSvcUsageFlushInterval except when the user sets wfFrSwSvcUsageFlushInterval to an invalid value.')
wfFrSwSvcUsageCurCleanupInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageCurCleanupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageCurCleanupInterval.setDescription('current file cleanup timer interval number used. This number is the same as wfFrSwSvcUsageCleanupInterval except when the user sets wfFrSwSvcUsageCleanupInterval to an invalid value.')
wfFrSwSvcUsageNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageNumEntries.setDescription('number of entries in wfFrSwSvcUsageTable')
wfFrSwSvcUsageVersionId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageVersionId.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageVersionId.setDescription('The Software Version ID field is a two byte, right justified, binary formated value that identifies the particular version number of the software release. High nibble of byte 1 represents the major version number. Low nibble of byte 1 represents the release number. Byte 2 represents the integration number.')
wfFrSwUsageSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwUsageSwitchName.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwUsageSwitchName.setDescription('The Switch name is a 6-bytes, right justified with leading blanks as necessary. It can be combination of letters, numbers and blanks. This ID identifies the particular networks equipment for SVC billing usage data process.')
wfFrSwPvcUsageFileLayout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwPvcUsageFileLayout.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwPvcUsageFileLayout.setDescription('PVC usage file layout version')
wfFrSwSvcUsageFileLayout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 5, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSvcUsageFileLayout.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSvcUsageFileLayout.setDescription('SVC usage file layout version')
wfFrSwUsageTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6), )
if mibBuilder.loadTexts: wfFrSwUsageTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageTable.setDescription('The Billing usage table.')
wfFrSwUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwUsageCircuitNumber"), (0, "Wellfleet-FRSW-MIB", "wfFrSwUsageDlci"))
if mibBuilder.loadTexts: wfFrSwUsageEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageEntry.setDescription('The parameters for Billing Usage.')
wfFrSwUsageDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageDelete.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageDelete.setDescription('Indicates status of this entry. FRSW_USAGE_CREATED is the normal case. FRSW_USAGE_DELETED means the corresponding tuple and vc instances were deleted some time during this collection interval. This billing instance will be deleted at the end of the next wfFrSwUsageFlush period after this billing record is written out to the file system.')
wfFrSwUsageCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageCircuitNumber.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageCircuitNumber.setDescription('Instance identifier; the circuit number of this interface. ')
wfFrSwUsageDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 1007, 1024, 64511, 131072, 8257535))).clone(namedValues=NamedValues(("twobyteminimum", 16), ("twobytemaximum", 1007), ("threebyteminimum", 1024), ("threebytemaximum", 64511), ("fourbyteminimum", 131072), ("fourbytemaximum", 8257535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageDlci.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageDlci.setDescription('Instance identifier; this indicates which virtual circuit. ')
wfFrSwUsageIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageIPAddress.setDescription('(Local) IP address corresponding to wfFrSwUsageCircuitNumber of this virtual circuit. ')
wfFrSwUsageStartTimeStampHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageStartTimeStampHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageStartTimeStampHigh.setDescription('Time stamp of the starting time (the high 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfFrSwUsageStartTimeStampLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageStartTimeStampLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageStartTimeStampLow.setDescription('Time stamp of the starting time (the low 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfFrSwUsageEndTimeStampHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageEndTimeStampHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageEndTimeStampHigh.setDescription('Time stamp of the ending time (the high 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfFrSwUsageEndTimeStampLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageEndTimeStampLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageEndTimeStampLow.setDescription('Time stamp of the ending time (the low 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfFrSwUsageSentNonDEFramesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEFramesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEFramesHigh.setDescription('Number (the high 32 bits) of local frames sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentNonDEFramesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEFramesLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEFramesLow.setDescription('Number (the low 32 bits) of local frames sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentNonDEOctetsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEOctetsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEOctetsHigh.setDescription('Number (the high 32 bits) of local octets sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentNonDEOctetsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEOctetsLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentNonDEOctetsLow.setDescription('Number (the low 32 bits) of local octets sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentDEFramesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentDEFramesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentDEFramesHigh.setDescription('Number (the high 32 bits) of local frames with DE bit sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentDEFramesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentDEFramesLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentDEFramesLow.setDescription('Number (the low 32 bits) of local frames with DE bit sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentDEOctetsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentDEOctetsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentDEOctetsHigh.setDescription('Number (the high 32 bits) of local octets with DE bit sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageSentDEOctetsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageSentDEOctetsLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageSentDEOctetsLow.setDescription('Number (the low 32 bits) of local octets with DE bit sent from this virtual circuit between wfFrSwUsageStartTimeStamp and wfFrSwUsageEndTimeStamp.')
wfFrSwUsageLastNonDEFramesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEFramesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEFramesHigh.setDescription('The (high 32 bits) value of wfFrSwCctLocalSentNonDEFrames value at wfFrSwUsageEndTimeStamp. Note: Since wfFrSwCctLocalSentNonDEFrames is a 32-bit COUNTER, this is really a counter keeping track of number of times wfFrSwCctLocalSentNonDEFrames has wrapped around.')
wfFrSwUsageLastNonDEFramesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEFramesLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEFramesLow.setDescription('The (low 32 bits) value of wfFrSwCctLocalSentNonDEFrames value at wfFrSwUsageEndTimeStamp. ')
wfFrSwUsageLastNonDEOctetsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEOctetsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEOctetsHigh.setDescription('The (high 32 bits) value of wfFrSwCctLocalSentNonDEOctets value at wfFrSwUsageEndTimeStamp. Note: Since wfFrSwCctLocalSentNonDEOctets is a 32-bit COUNTER, this is really a counter keeping track of number of times wfFrSwCctLocalSentNonDEOctets has wrapped around.')
wfFrSwUsageLastNonDEOctetsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEOctetsLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastNonDEOctetsLow.setDescription('The (low 32 bits) value of wfFrSwCctLocalSentNonDEOctets value at wfFrSwUsageEndTimeStamp. ')
wfFrSwUsageLastDEFramesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastDEFramesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastDEFramesHigh.setDescription('The (high 32 bits) value of wfFrSwCctLocalSentDEFrames value at wfFrSwUsageEndTimeStamp. Note: Since wfFrSwCctLocalSentNonDEFrames is a 32-bit COUNTER, this is really a counter keeping track of number of times wfFrSwCctLocalSentDEFrames has wrapped around.')
wfFrSwUsageLastDEFramesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastDEFramesLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastDEFramesLow.setDescription('The (low 32 bits) value of wfFrSwCctLocalSentDEFrames value at wfFrSwUsageEndTimeStamp. ')
wfFrSwUsageLastDEOctetsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastDEOctetsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastDEOctetsHigh.setDescription('The (high 32 bits) value of wfFrSwCctLocalSentDEOctets value at wfFrSwUsageEndTimeStamp. Note: Since wfFrSwCctLocalSentDEOctets is a 32-bit COUNTER, this is really a counter keeping track of number of times wfFrSwCctLocalSentDEOctets has wrapped around.')
wfFrSwUsageLastDEOctetsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageLastDEOctetsLow.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageLastDEOctetsLow.setDescription('The (low 32 bits) value of wfFrSwCctLocalSentDEOctets value at wfFrSwUsageEndTimeStamp. ')
wfFrSwUsageRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageRemoteIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageRemoteIPAddress.setDescription('IP address of the other side (remote) of this PVC endpoint.')
wfFrSwUsageRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 1007, 1024, 64511, 131072, 8257535))).clone(namedValues=NamedValues(("twobyteminimum", 16), ("twobytemaximum", 1007), ("threebyteminimum", 1024), ("threebytemaximum", 64511), ("fourbyteminimum", 131072), ("fourbytemaximum", 8257535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwUsageRemoteDlci.setStatus('obsolete')
if mibBuilder.loadTexts: wfFrSwUsageRemoteDlci.setDescription('DLCI number of the other side (remote) of this PVC endpoint.')
wfFrSwVcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7), )
if mibBuilder.loadTexts: wfFrSwVcTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcTable.setDescription('Frame Relay Virtual Circuit table gives information about a virtual circuit.')
wfFrSwVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwVcCircuit"), (0, "Wellfleet-FRSW-MIB", "wfFrSwVcDlci"))
if mibBuilder.loadTexts: wfFrSwVcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcEntry.setDescription('An entry in the Frame Relay (Virtual) Circuit table.')
wfFrSwVcDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2), ("system", 3), ("svc", 4), ("spvccra", 5), ("spvccaa", 6))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDelete.setDescription('Indication to delete this virtual circuit.')
wfFrSwVcCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCircuit.setDescription('Instance identifier; the circuit number of this interface (logical port).')
wfFrSwVcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDlci.setDescription('Instance identifier; this indicates the virtual circuit identifier')
wfFrSwVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3), ("control", 4), ("user", 5))).clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcState.setDescription('Indicates whether the particular virtual circuit is operational.')
wfFrSwVcStateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcStateSet.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcStateSet.setDescription('User access for setting the state of a virtual circuit')
wfFrSwVcMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcMulticast.setDescription('Indicates whether this dlci is used for multicast or a single destination.')
wfFrSwVcInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 7), Integer32().clone(2147483647)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcInBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInBe.setDescription('Indicates the maximum number Incoming Excess Burst bits that are allowed in a configured time interval (T).')
wfFrSwVcOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcOutBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcOutBe.setDescription('Indicates the Outgoing Excess Burst bits for this virtual circuit.')
wfFrSwVcInThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcInThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInThroughput.setDescription('Indicates the incoming throughput in bits/sec for this virtual circuit.')
wfFrSwVcOutThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcOutThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcOutThroughput.setDescription('Indicates the outgoing throughput in bits/sec for this virtual circuit.')
wfFrSwVcOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcOutBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcOutBc.setDescription('Indicates the Outgoing Committed Burst bits for this virtual circuit.')
wfFrSwVcInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcInBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInBc.setDescription('Indicates the Incoming Committed Burst bits for this virtual circuit.')
wfFrSwVcInBcOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcInBcOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInBcOctets.setDescription('Indicates the Incoming Committed Burst in octets for this virtual circuit.')
wfFrSwVcBecnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcBecnState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcBecnState.setDescription('Indicates the BECN state')
wfFrSwVcReportedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acked", 1), ("unacked", 2), ("unreported", 3))).clone('unreported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcReportedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcReportedStatus.setDescription('Record keeping for circuit status')
wfFrSwVcReceivedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcReceivedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcReceivedStatus.setDescription('State of a virtual circuit as reported by the network at an NNI')
wfFrSwVcCrossNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcCrossNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCrossNetStatus.setDescription('State of a virtual circuit as reported by the other end of the network under bidirectional signalling.')
wfFrSwVcXNetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsent", 1), ("sent", 2))).clone('unsent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcXNetSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcXNetSent.setDescription('Whether we have sent a cross net status message for this VC yet.')
wfFrSwVcXNetReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("recv", 1), ("unrecv", 2))).clone('unrecv')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcXNetReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcXNetReceived.setDescription('Whether we have received a cross net status message for this VC during the current polling interval.')
wfFrSwVcCalledIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCalledIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCalledIpAddr.setDescription('Indicates the IP address associated with destination of a virtual circuit.')
wfFrSwVcCalledDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8257535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCalledDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCalledDlci.setDescription('Indicates the DLCI associated with destination of a virtual circuit.')
wfFrSwVcTrfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 999))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("default", 999))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcTrfPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcTrfPriority.setDescription('Defines the traffic priority level of all the incoming packets on this VC. FRSW_VCPRIORITY_DEFAULT - Set all incoming user traffic packets to the default priority used by the port. FRSW_VCPRIORITY_ONE - Set all incoming packets to priority 1. FRSW_VCPRIORITY_TWO - Set all incoming packets to priority 2. FRSW_VCPRIORITY_THREE - Set all incoming packets to priority 3. Priority 0 is reserved for network critical packets like OSPF, FR LMI and SMDS heartbeat and is not available for user traffic.')
wfFrSwVcCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCreationTime.setDescription('Indicates the value of sysUpTime when the VC was created.')
wfFrSwVcLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcLastTimeChange.setDescription('Indicates the value of sysUpTime when last there was a change in VC state.')
wfFrSwVcTxNonDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcTxNonDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcTxNonDeFrames.setDescription('Indicates the number of frames without the DE bit sent on this virtual circuit over the interface.')
wfFrSwVcTxNonDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcTxNonDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcTxNonDeOctets.setDescription('Indicates the number of octets without DE bit sent on this virtual circuit over the interface.')
wfFrSwVcTxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcTxDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcTxDeFrames.setDescription('Indicates the number of frames with DE bit set sent on this virtual circuit over the interface.')
wfFrSwVcTxDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcTxDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcTxDeOctets.setDescription('Indicates the number of octets with DE bit set sent on this virtual circuit over the interface.')
wfFrSwVcSetFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSetFecnFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSetFecnFrames.setDescription('Indicates the number of frames sent to the interface on which this switch set the FECN bit.')
wfFrSwVcSetFecnOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSetFecnOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSetFecnOctets.setDescription('Indicates the number of octets in frames sent to the interface on which this switch set the FECN bit.')
wfFrSwVcSetBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSetBecnFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSetBecnFrames.setDescription('Indicates the number of frames sent to the interface on which this switch set the BECN bit.')
wfFrSwVcSetBecnOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSetBecnOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSetBecnOctets.setDescription('Indicates the number of octets in frames sent to the interface on which this switch set the BECN bit.')
wfFrSwVcSetDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSetDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSetDeFrames.setDescription('Indicates the number of frames sent to the interface on which this switch set the DE bit.')
wfFrSwVcSetDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSetDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSetDeOctets.setDescription('Indicates the number of octets in frames sent to the interface on which this switch set the DE bit.')
wfFrSwVcDropNonDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDropNonDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDropNonDeFrames.setDescription('Indicates the number of frames received over the interface which were discarded, excluding any frames with the DE bit set.')
wfFrSwVcDropNonDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDropNonDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDropNonDeOctets.setDescription('Indicates the number of octets in frames received over the interface which were discarded, excluding any frames with the DE bit set.')
wfFrSwVcDropDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDropDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDropDeFrames.setDescription('Indicates the number of frames received over the interface, having the DE bit set, which were discarded.')
wfFrSwVcDropDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDropDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDropDeOctets.setDescription('Indicates the number of octets in frames received over the interface, having the DE bit set, which were discarded.')
wfFrSwVcInactiveVcDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcInactiveVcDropFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInactiveVcDropFrames.setDescription('Indicates how many frames were discarded because the virtual circuit was inactive.')
wfFrSwVcInactiveVcDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcInactiveVcDropOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInactiveVcDropOctets.setDescription('Indicates how many Octets were discarded because the virtual circuit was inactive.')
wfFrSwVcRecvNonDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvNonDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvNonDeFrames.setDescription('Indicates the number of frames received on this virtual circuit over the interface.')
wfFrSwVcRecvNonDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvNonDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvNonDeOctets.setDescription('Indicates the number of octets received on this virtual circuit over the interface.')
wfFrSwVcRecvDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvDeFrames.setDescription('Indicates the number of frames received over the interface with the DE bit set.')
wfFrSwVcRecvDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvDeOctets.setDescription('Indicates the number of octets in frames received over the interface with the DE bit set.')
wfFrSwVcRecvFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvFecnFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvFecnFrames.setDescription('Indicates the number of frames received over the interface with the FECN bit set.')
wfFrSwVcRecvFecnOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvFecnOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvFecnOctets.setDescription('Indicates the number of octets in frames received over the interface with the FECN bit set.')
wfFrSwVcRecvBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvBecnFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvBecnFrames.setDescription('Indicates the number of frames received over the interface with the BECN bit set.')
wfFrSwVcRecvBecnOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecvBecnOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecvBecnOctets.setDescription('Indicates the number of octets in frames received over the interface with the BECN bit set.')
wfFrSwVcRecentNonDeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRecentNonDeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRecentNonDeOctets.setDescription('Indicates the number of octets received over the interface during the most recent sampling period.')
wfFrSwVcXNetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcXNetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcXNetErrors.setDescription('This is the count of the consecutive errors (usually timeouts) against this VC in cross-network heartbeat polling.')
wfFrSwVcDropExcessBurstFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDropExcessBurstFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDropExcessBurstFrames.setDescription('Indicates the number of Excess Burst Frames dropped on this virtual circuit.')
wfFrSwVcDropExcessBurstOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcDropExcessBurstOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcDropExcessBurstOctets.setDescription('Indicates the number of Excess Burst Octets dropped on this virtual circuit.')
wfFrSwVcInBeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcInBeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcInBeOctets.setDescription('Indicates the maximum number Incoming Excess Burst bytes that are allowed in a configured time interval (T).')
wfFrSwVcCfgInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 54), Integer32().clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCfgInBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCfgInBe.setDescription('The number of Excess Burst in bits')
wfFrSwVcRedirectAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("redirecttoprimary", 2), ("redirecttobackup", 3), ("switchondemand", 4), ("swondemandtoprimary", 5), ("swondemandtobackup", 6))).clone('redirecttoprimary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcRedirectAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRedirectAction.setDescription("Perform pvc source redirect manually or based on cross-net updates: 'redirecttoprimary(2)' will force to switch to primary; 'redirecttobackup(3)' will force to switch to backup; 'switchondemand(4)' will switch based on cross-net status of the primary to and from primary; 'swondemandtoprimary(5)' will switch to primary from backup iff cross-net of primary became active; 'swondemandtobackup(6)' will switch to backup from primary iff cross-net of primary became inactive.")
wfFrSwVcRedirectType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparent", 1), ("intrusiven", 2), ("intrusivea", 3))).clone('intrusivea')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcRedirectType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRedirectType.setDescription("Type of dte notification at switching time: 'transparent(1)' will not send notification to dte; 'intrusiven(2)' will send async update with NEW bit; 'intrusivea(3)' will send async update with A bit not set.")
wfFrSwVcRedirectState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 12, 13, 21))).clone(namedValues=NamedValues(("backupinactive", 1), ("primaryactive", 2), ("switchtobackup", 3), ("backupactive", 12), ("switchtoprimary", 13), ("holddown", 21))).clone('backupinactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcRedirectState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcRedirectState.setDescription("PVC Source Redirect State: 'backupinactive(1)' - backup is not configured and/or cross-net status is inactive; will allow traffic only through primary. 'primaryactive(2)' - both primary and backup rx'ed 'active' cross-net status, currently primary is active and traffic only through primary. 'switchtobackup(3)' - primary cross-net status is inactive, but can not switch to backup due to manual (or semi-manual) operation of the redirect; will allow traffic only through primary. 'backupactive(12)' - cross-net status is 'inactive' for primary; will allow traffic only through backup. 'switchtoprimary(13)' - cross-net status is 'active' for primary, should by can not switch to primary due to manual (or semi-manual) operation of the redirect; will allow traffic only through backup. 'holddown(21)' - down state used as intermediate state at switching time (for not more then a second); all traffic is dropped.")
wfFrSwVcBackupCalledIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 58), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcBackupCalledIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcBackupCalledIpAddr.setDescription(' Backup Called Ip Address of the remote end of the PVC.')
wfFrSwVcBackupCalledDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8257535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcBackupCalledDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcBackupCalledDlci.setDescription(' Backup Called Dlci of the remote end of the PVC.')
wfFrSwVcBackupCrossNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcBackupCrossNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcBackupCrossNetStatus.setDescription(' Cross net status of the backup remote end of the PVC.')
wfFrSwVcBackupCrossNetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcBackupCrossNetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcBackupCrossNetErrors.setDescription(' Support counter of missed cross net update from backup remote end of the PVC, range: [0, wfFrSwDlcmiCrossNetErrorThreshold].')
wfFrSwVcAtmIwfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atmDisableIwfMode", 1), ("atmServiceIwfTransparentMode", 2), ("atmServiceIwfTranslationMode", 3), ("atmNetworkIwfMode", 4))).clone('atmDisableIwfMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcAtmIwfMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcAtmIwfMode.setDescription('This attribute indicates the mode of FR-ATM interworking over this FR PVC or that FR-ATM interworking is not enabled on it.')
wfFrSwVcAtmIwfVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcAtmIwfVPI.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcAtmIwfVPI.setDescription('This is relevant only when the ATM/FR interworking is enabled for this PVC. This indicates the ATM virtual path identifier associated with the Frame Relay PVC described by this record virtual circuit identifier.')
wfFrSwVcAtmIwfVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcAtmIwfVCI.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcAtmIwfVCI.setDescription('This is relevant only when FR/ATM interworking is enabled for this PVC. This indicates the ATM virtual circuit identifier associated with the Frame Relay PVC described by this record.')
wfFrSwVcAtmIwfLossPriorityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atmiwfmapDe", 1), ("atmiwfsetDe1", 2), ("atmiwfsetDe0", 3))).clone('atmiwfmapDe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcAtmIwfLossPriorityPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcAtmIwfLossPriorityPolicy.setDescription('This is relevant only when FR/ATM interworking is enabled for this FR PVC. This indicates the policy for translating ATM CLP to FR DE on this PVC or simply setting FR DE to a constant value for all frames.')
wfFrSwVcAtmIwfDePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atmiwfmapClp", 1), ("atmiwfsetClp1", 2), ("atmiwfsetClp0", 3))).clone('atmiwfmapClp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcAtmIwfDePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcAtmIwfDePolicy.setDescription('This is relevant only when FR/ATM interworking is enabled for this FR PVC. This indicates the policy on this PVC for translating FR DE to ATM CLP or simply setting CLP to a constant value for all frames.')
wfFrSwVcAtmIwfEfciPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atmiwfmapFecn", 1), ("atmiwfsetFecn1", 2), ("atmiwfsetFecn0", 3))).clone('atmiwfmapFecn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcAtmIwfEfciPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcAtmIwfEfciPolicy.setDescription('This is relevant only when FR/ATM interworking is enabled for this FR PVC. This indicates the policy on this PVC for translating FR FECN to ATM EFCI or simply setting ATM EFCI to a constant value for all frames.')
wfFrSwVcEscapeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcEscapeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcEscapeEnable.setDescription(' Identifies this PVC as either a standard FRSW PVC (escape disabled) or an Escape PVC (escape enabled). The type of Escape PVC (ingress node or egress node) is specified in the wfFrSwDlcmiEntry Object.')
wfFrSwVcSpvcCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("inprogress", 2), ("active", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVcSpvcCallState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcSpvcCallState.setDescription('Indicates to the state of the SPVC call for this DLCI.')
wfFrSwVcCallReqCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 70), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCallReqCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCallReqCalledAddr.setDescription('Called E.164/X.121 Address for an SPVC Call Request Agent. The address type is determined by the wfFrSwDlcmiL2AddrType attribute in wfFrSwDlcmiEntry.')
wfFrSwVcCallReqDlciSelectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("specific", 2))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCallReqDlciSelectionType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCallReqDlciSelectionType.setDescription("Indicates to the Calling End of an SPVC Call Request whether to use any available DLCI, or a specific DLCI. If 'specific' is chosen, the called DLCI value is specified in wfFrSwVcCallReqCalledDlci.")
wfFrSwVcCallReqCalledDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8257535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCallReqCalledDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCallReqCalledDlci.setDescription("Indicates to the Calling End of an SPVC Call Request the DLCI to be used at the destination of a virtual circuit. This value should be specified when 'specific' wfFrSwVcCallReqDlciSelectionType is chosen.")
wfFrSwVcCallReqRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCallReqRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCallReqRetryTimer.setDescription('Indicates the number of minutes the Call Request Agent should wait for an SPVC CONNECT message before declaring a Call Setup request REJECTED.')
wfFrSwVcCallReqMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 7, 1, 74), Integer32().clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVcCallReqMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVcCallReqMaxRetries.setDescription('Indicates the number of times the Call Request Agent should retry failed Call Setup requests before declaring the SPVC invalid.')
wfFrSwIsdnBaseTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 8), )
if mibBuilder.loadTexts: wfFrSwIsdnBaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnBaseTable.setDescription('This is a FRSW over ISDN configuration table. This table specifies whether the Calling Party (ANI) or Called Party (DNIS) ISDN Phone Number should be used to map the ISDN call to a particular FRSW UNI. The table is indexed by the Slot Number where the PRI(s) exist.')
wfFrSwIsdnBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 8, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnBaseSlotNum"))
if mibBuilder.loadTexts: wfFrSwIsdnBaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnBaseEntry.setDescription('Instance Id for this table.')
wfFrSwIsdnBaseDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnBaseDelete.setDescription('Indication to delete this FRSW ISDN interface. ')
wfFrSwIsdnBaseSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnBaseSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnBaseSlotNum.setDescription('This number is the Slot Number for the PRI interface(s) that are being configured for FRSW ISDN. There will be one of these tables for every slot where an FRSW ISDN PRI Interface exists.')
wfFrSwIsdnBaseAssocType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dnis", 1), ("ani", 2))).clone('dnis')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnBaseAssocType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnBaseAssocType.setDescription('Indicates which ISDN Phone Number (ANI or DNIS) to use to do the ISDN call to FRSW UNI mapping.')
wfFrSwIsdnAssocTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9), )
if mibBuilder.loadTexts: wfFrSwIsdnAssocTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocTable.setDescription('This table defines the Association Table to be used for the FRSW over ISDN application. The table contains a list of ISDN Phone Numbers and the associated FRSW UNI Index Number. The table is indexed by the Slot Number and the ISDN Phone Number.')
wfFrSwIsdnAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnAssocSlotNum"), (0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnAssocNum"))
if mibBuilder.loadTexts: wfFrSwIsdnAssocEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocEntry.setDescription('Instance Id for this table.')
wfFrSwIsdnAssocDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnAssocDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocDelete.setDescription('Indication to delete this Association Instance.')
wfFrSwIsdnAssocSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnAssocSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocSlotNum.setDescription('Slot with which this ISDN Phone Number is associated.')
wfFrSwIsdnAssocNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnAssocNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocNum.setDescription('ISDN Phone Number that is used to look up the appropriate FRSW UNI Index. This number is compared with either the Calling Party Number (ANI) Information Element or the Called Party Number (DNIS) Information Element contained in the ISDN Call Setup Message.')
wfFrSwIsdnAssocScrnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnAssocScrnEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocScrnEnable.setDescription('Indicate whether allowed screening should be enabled or disabled for all of the UNIs contained in the FRSW UNI Index.')
wfFrSwIsdnAssocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 9, 1, 5), Integer32().clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnAssocIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnAssocIndex.setDescription('A number that indicates the FRSW UNI Index that is is associated with the ISDN Phone Number. This FRSW UNI Index is used as a key to obtain the UNIs and the Screening information from the wfFrSwIsdnScrnEntry and wfFrSwIsdnUniEntry mibs. The default for the index is 2**31 - 1 = 2147483647 = 0x7FFFFFFF, which represents an unconfigured index number.')
wfFrSwIsdnUniTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 10), )
if mibBuilder.loadTexts: wfFrSwIsdnUniTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnUniTable.setDescription('This table is used by the FRSW over ISDN application. The table defines a list of FRSW UNIs that are to be collected into a hunt group identifiable by an Index Number.')
wfFrSwIsdnUniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 10, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnUniIndex"), (0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnUniNum"))
if mibBuilder.loadTexts: wfFrSwIsdnUniEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnUniEntry.setDescription('Instance Id for this table.')
wfFrSwIsdnUniDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnUniDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnUniDelete.setDescription('Indication to delete this FRSW UNI Index Instance.')
wfFrSwIsdnUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnUniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnUniIndex.setDescription('FRSW UNI Index -- a number that identifies a group of related FRSW UNIs that are collected together as a hunt group. This number ties this entry to an entry in wfFrSwIsdnAssocEntry.')
wfFrSwIsdnUniNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnUniNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnUniNum.setDescription('A FRSW UNI/Circuit.')
wfFrSwIsdnUniState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("inuse", 2))).clone('available')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnUniState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnUniState.setDescription('State of this UNI (available or in-use).')
wfFrSwIsdnScrnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 11), )
if mibBuilder.loadTexts: wfFrSwIsdnScrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnScrnTable.setDescription('This is the incoming call screening table for the FRSW over ISDN application. The table consists of a FRSW UNI Index and a list of allowable ISDN Phone numbers for that FRSW UNI Index. The table is indexed by both the FRSW UNI Index and the ISDN Phone Number. This table is referenced only when the wfFrSwIsdnAssocScrnEnable is set to Enabled for this FRSW UNI Index.')
wfFrSwIsdnScrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 11, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnScrnIndex"), (0, "Wellfleet-FRSW-MIB", "wfFrSwIsdnScrnNum"))
if mibBuilder.loadTexts: wfFrSwIsdnScrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnScrnEntry.setDescription(' Instance Id for this table. ')
wfFrSwIsdnScrnDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwIsdnScrnDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnScrnDelete.setDescription(' Indication to delete this Scrn Instance. ')
wfFrSwIsdnScrnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnScrnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnScrnIndex.setDescription('FRSW UNI Index - A number that ties this entry to an entry in wfFrSwIsdnAssocEntry.')
wfFrSwIsdnScrnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwIsdnScrnNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwIsdnScrnNum.setDescription('ISDN Phone Number of a user authorized to access the UNIs contained in the FRSW UNI Index. ')
wfFrSwSigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12), )
if mibBuilder.loadTexts: wfFrSwSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigTable.setDescription(" The Frame relay signalling table contains frame relay signalling entries indexed by the frame relay access channel circuit number. An instance of wfFrSwSigEntry is required for each frame relay access channel with frame relay signalling enabled. The absence of wfFrSwSigEntry for a given frame relay access channel implies that frame relay signalling is disabled for the circuit. Note that the terms 'incoming' and 'outgoing' refer to the frame mode call with respect to the network side of the interface. The terminology used by CCITT Q.933/Q.931 is different. ")
wfFrSwSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwSigCircuit"))
if mibBuilder.loadTexts: wfFrSwSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigEntry.setDescription(' An entry in the Frame Relay signalling port information table. ')
wfFrSwSigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDelete.setDescription(' Indication to delete this instance ')
wfFrSwSigCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigCircuit.setDescription(' The circuit number for this frame relay access channel ')
wfFrSwSigSvcDlciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigSvcDlciLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigSvcDlciLow.setDescription(' Lowest DLCI to be used for SVC, the default value is for 2 octet frame header ')
wfFrSwSigSvcDlciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(991)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigSvcDlciHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigSvcDlciHigh.setDescription(' Highest DLCI to be used for SVC, the default value is for 2 octet frame header. ')
wfFrSwSigDlciAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("increment", 1), ("decrement", 2))).clone('decrement')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigDlciAssign.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDlciAssign.setDescription(" Determines if DLCI's are assigned starting at wfFrSwSigSvcDlciHigh and working towards wfFrSwSigSvcDlciLow or vice versa. ")
wfFrSwSigMaxNumOfSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigMaxNumOfSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigMaxNumOfSvcs.setDescription(' Indicates the maximum number of simultaneous switched virtual circuits allowed on the logical line. ')
wfFrSwSigNumOfSvcsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigNumOfSvcsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigNumOfSvcsInUse.setDescription(' Indicates the number of switched virtual circuits in use on the logical line. ')
wfFrSwSigDefaultThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigDefaultThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDefaultThroughput.setDescription(' This value is used by the network in the Link Layer Core Parameters IE incoming & outgoing throughput fields when they are not included in the setup message by the user. ')
wfFrSwSigDefaultMinAcceptThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigDefaultMinAcceptThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDefaultMinAcceptThroughput.setDescription(' This value is used by the network in the Link Layer Core Parameters IE incoming & outgoing minimum acceptable throughput fields when they are not included in the setup message by the user. ')
wfFrSwSigDefaultBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigDefaultBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDefaultBc.setDescription(' This value is used by the network in the Link Layer Core Parameters IE incoming & outgoing Bc fields when they are not included in the setup message by the user. ')
wfFrSwSigDefaultBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigDefaultBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDefaultBe.setDescription(' This value is used by the network in the Link Layer Core Parameters IE incoming & outgoing Be fields when they are not included in the setup message by the user. ')
wfFrSwSigMaxInThroughputPerSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigMaxInThroughputPerSvc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigMaxInThroughputPerSvc.setDescription(' This is the maximum incoming throughput that any single SVC may negotiate for a call. Calls requesting in excess of this attribute are rejected. ')
wfFrSwSigMaxOutThroughputPerSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigMaxOutThroughputPerSvc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigMaxOutThroughputPerSvc.setDescription(' This is the maximum outgoing throughput that any single SVC may negotiate for a call. Calls requesting in excess of this attribute are rejected. ')
wfFrSwSigTotalInNegotiableThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigTotalInNegotiableThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigTotalInNegotiableThroughput.setDescription(' This is the total maximum incoming throughput that is available for all frame mode calls on the port. If the sum of the incoming throughput requested by a call and wfFrSwSigTotalInCurrentThroughput is in excess of this value, the call is rejected. ')
wfFrSwSigTotalInCurrentThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigTotalInCurrentThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigTotalInCurrentThroughput.setDescription(" This is the total incoming throughput that has been negotiated for use by all SVC's on the port. ")
wfFrSwSigTotalOutNegotiableThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigTotalOutNegotiableThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigTotalOutNegotiableThroughput.setDescription(' This is the total maximum outgoing throughput that is available for all frame mode calls on the port. If the sum of the outgoing throughput requested by a call and wfFrSwSigTotalOutCurrentThroughput is in excess of this value, the call is rejected. ')
wfFrSwSigTotalOutCurrentThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigTotalOutCurrentThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigTotalOutCurrentThroughput.setDescription(" This is the total incoming throughput that has been negotiated for use by all SVC's on the port. ")
wfFrSwSigXNetClearingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigXNetClearingDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigXNetClearingDisable.setDescription(' If cross-net polling (wfFrSwDlcmiCrossNetEnable) is enabled on this interface, and the error threshold (wfFrSwDlcmiCrossNetErrorThreshold) is exceeded, the network can clear the call. ')
wfFrSwSigCallingPartyIEMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigCallingPartyIEMandatory.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigCallingPartyIEMandatory.setDescription(' Reject the call if the Calling Party IE is absent in the setup message or if the provided Calling Party IE fails address authentication tests againt the configured address(es) on the ingress logical line.')
wfFrSwSigT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigT301.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigT301.setDescription(' Timer number: T301 default time-out: 3 min state of call: call initiated cause for start: incoming setup normal stop: outgoing connect at the first expiry: clear call at the second expiry: timer not restarted ')
wfFrSwSigT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigT303.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigT303.setDescription(' Timer number: T303 default time-out: 4 s state of call: call present cause for start: outgoing setup normal stop: incoming connect/call-proceeding/ release-complete at the first expiry: retransmit setup, restart T303 at the second expiry: clear call ')
wfFrSwSigT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 90)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigT305.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigT305.setDescription(' Timer number: T305 default time-out: 30 s state of call: disconnect ind cause for start: outgoing disconnect normal stop: incoming release/disconnect at the first expiry: outgoing release at the second expiry: timer not restarted ')
wfFrSwSigT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigT308.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigT308.setDescription(' Timer number: T308 default time-out: 4 s state of call: release req cause for start: outgoing release normal stop: incoming release/release-complete at the first expiry: retransmit release, restart T308 at the second expiry: place access channel in maintenance ')
wfFrSwSigT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigT310.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigT310.setDescription(' Timer number: T310 default time-out: 10 s state of call: incoming call proceeding cause for start: incoming call proceeding normal stop: incoming connect/disconnect at the first expiry: clear call at the second expiry: timer not restarted ')
wfFrSwSigT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigT322.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigT322.setDescription(' Timer number: T322 default time-out: 4 s state of call: any call state cause for start: outgoing status enquiry normal stop: incoming status/disconnect/ release/release-complete at the first expiry: retransmit status-enq, restart T322 at the second expiry: resend status enq and restart T322 ')
wfFrSwSigInSetupPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInSetupPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInSetupPkts.setDescription(' number of incoming setup packets ')
wfFrSwSigInCallProceedingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInCallProceedingPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInCallProceedingPkts.setDescription(' number of incoming call proceeding packets ')
wfFrSwSigInConnectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInConnectPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInConnectPkts.setDescription(' number of incoming connect packets ')
wfFrSwSigInDisconnectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInDisconnectPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInDisconnectPkts.setDescription(' number of incoming disconnect packets ')
wfFrSwSigInReleasePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInReleasePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInReleasePkts.setDescription(' number of incoming release packets ')
wfFrSwSigInReleaseCompletePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInReleaseCompletePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInReleaseCompletePkts.setDescription(' number of incoming release complete packets ')
wfFrSwSigInStatusEnquiryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInStatusEnquiryPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInStatusEnquiryPkts.setDescription(' number of incoming status enquiry packets ')
wfFrSwSigInStatusPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInStatusPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInStatusPkts.setDescription(' number of incoming status packets ')
wfFrSwSigInUnknownPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigInUnknownPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigInUnknownPkts.setDescription(' number of incoming unknown packets ')
wfFrSwSigOutSetupPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutSetupPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutSetupPkts.setDescription(' number of outgoing setup packets ')
wfFrSwSigOutCallProceedingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutCallProceedingPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutCallProceedingPkts.setDescription(' number of outgoing call proceeding packets ')
wfFrSwSigOutConnectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutConnectPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutConnectPkts.setDescription(' number of outgoing connect packets ')
wfFrSwSigOutDisconnectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutDisconnectPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutDisconnectPkts.setDescription(' number of outgoing disconnect packets ')
wfFrSwSigOutReleasePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutReleasePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutReleasePkts.setDescription(' number of outgoing release packets ')
wfFrSwSigOutReleaseCompletePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutReleaseCompletePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutReleaseCompletePkts.setDescription(' number of outgoing release packest ')
wfFrSwSigOutStatusEnquiryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutStatusEnquiryPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutStatusEnquiryPkts.setDescription(' number of outgoing status enquiry packets ')
wfFrSwSigOutStatusPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigOutStatusPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigOutStatusPkts.setDescription(' number of outgoing status packets ')
wfFrSwSigRejectedConnRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigRejectedConnRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigRejectedConnRequests.setDescription(' number of connections rejected ')
wfFrSwSigNwrkAbortedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigNwrkAbortedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigNwrkAbortedConnections.setDescription(' number of connections aborted by network ')
wfFrSwSigL2Resets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwSigL2Resets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigL2Resets.setDescription(' number of L2 resets ')
wfFrSwSigDlciIEAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigDlciIEAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigDlciIEAllowed.setDescription(' Reject the call if the Dlci IE is present in the setup message and wfFrSwSigDlciIEAllowed is set to disabled.')
wfFrSwSigX213PriorityIEAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigX213PriorityIEAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigX213PriorityIEAllowed.setDescription(' Reject the call if the X213 Priority IE is present in setup message and wfFrSwSigX213PriorityIEAllowed is set to disabled.')
wfFrSwSigMaximumBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 12, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwSigMaximumBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwSigMaximumBe.setDescription('This value is the maximum allowed Be for a SVC connection')
wfFrSwGlobalE164AddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 13), )
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrTable.setDescription(' wfFrSwGlobalE164AddrTable is used by Directory Services to translate a range of E.164 addresses into an internal IP network address. E.164 ranges must not ever overlap. ')
wfFrSwGlobalE164AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 13, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwGlobalE164AddrLow"), (0, "Wellfleet-FRSW-MIB", "wfFrSwGlobalE164AddrHigh"))
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrEntry.setDescription(' An entry in the Frame Relay Global E.164 Address Table. ')
wfFrSwGlobalE164AddrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrDelete.setDescription(' Indication to delete/create this entry. ')
wfFrSwGlobalE164AddrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrLow.setDescription(' Instance identifier; the low end of the E.164 address range. This is an 8-byte fixed length octet string format, right justified with padded leading zeros as necessary. ')
wfFrSwGlobalE164AddrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrHigh.setDescription(' Instance identifier; the high end of the E.164 address range. This is an 8-byte fixed length octet string format, right justified with padded leading zeros as necessary. ')
wfFrSwGlobalE164AddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 13, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalE164AddrIPAddr.setDescription(' This is the internal IP network address associated with this range of E.164 addresses. ')
wfFrSwGlobalX121AddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 14), )
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrTable.setDescription(' wfFrSwGlobalX121AddrTable is used by Directory Services to translate a range of X.121 addresses into an internal IP network address. X.121 ranges must not ever overlap. ')
wfFrSwGlobalX121AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 14, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwGlobalX121AddrLow"), (0, "Wellfleet-FRSW-MIB", "wfFrSwGlobalX121AddrHigh"))
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrEntry.setDescription(' An entry in the Frame Relay Global X.121 Address Table. ')
wfFrSwGlobalX121AddrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrDelete.setDescription(' Indication to delete/create this entry. ')
wfFrSwGlobalX121AddrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 14, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrLow.setDescription(' Instance identifier; the low end of the X.121 address range. This is an 8-byte fixed length octet string format, right justified with padded leading zeros as necessary. ')
wfFrSwGlobalX121AddrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 14, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrHigh.setDescription(' Instance identifier; the high end of the X.121 address range. This is an 8-byte fixed length octet string format, right justified with padded leading zeros as necessary. ')
wfFrSwGlobalX121AddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 14, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwGlobalX121AddrIPAddr.setDescription(' This is the internal IP network address associated with this range of X.121 addresses. ')
wfFrSwLocalE164AddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15), )
if mibBuilder.loadTexts: wfFrSwLocalE164AddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164AddrTable.setDescription(' wfFrSwLocalE164AddrTable contains E.164 addresses on the local BNX and CUG (Closed User Group) related information. ')
wfFrSwLocalE164AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwLocalE164AddrCct"), (0, "Wellfleet-FRSW-MIB", "wfFrSwLocalE164Address"))
if mibBuilder.loadTexts: wfFrSwLocalE164AddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164AddrEntry.setDescription(' An entry in the Frame Relay Local E.164 Address Table. ')
wfFrSwLocalE164AddrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwLocalE164AddrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164AddrDelete.setDescription(' Indication to delete/create this entry. ')
wfFrSwLocalE164AddrCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwLocalE164AddrCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164AddrCct.setDescription(' Instance identifier; internal CCT number associated with this E.164 address. ')
wfFrSwLocalE164Address = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwLocalE164Address.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164Address.setDescription(' Instance identifier; an E.164 address. This is an 8-byte fixed length octet string format, right justified with padded leading zeros as necessary. ')
wfFrSwLocalE164AddrCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwLocalE164AddrCUG.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164AddrCUG.setDescription(' CUG (Closed User Group) information. The structure of the CUG information consists zero or more groups (number of groups can be derived from the OCTET STRING data type of this MIB attribute) of COI structure information. Each COI structure consists of a COI group number (4-byte integer) and a COI list. Each COI list consists of a length field (4-byte integer) which specifies the number of bytes of COI bit-encoded information belonging to this group and the COI information structure. COI information structure is a bit mask field where each bit from left to right represents whether this E.164 address belongs to a particular COI number within this COI group number. Please note that COI group numbers can not be repeated and that the COI group numbers must be in increasing order in the CUG configuration MIB wfFrSwLocalE164AddrCUG defaults to zero COI groups which means no CUG related information and hence this local wfFrSwLocalE164Address is allowed to communicate with all users. ')
wfFrSwLocalE164AddrLocalFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("nonlocal", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwLocalE164AddrLocalFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalE164AddrLocalFlag.setDescription(' Local/Non-Local Identifier Flag. Used for SPVCs.')
wfFrSwLocalX121AddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16), )
if mibBuilder.loadTexts: wfFrSwLocalX121AddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121AddrTable.setDescription(' wfFrSwLocalX121AddrTable contains X.121 addresses on the local BNX and CUG (Closed User Group) related information. ')
wfFrSwLocalX121AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwLocalX121AddrCct"), (0, "Wellfleet-FRSW-MIB", "wfFrSwLocalX121Address"))
if mibBuilder.loadTexts: wfFrSwLocalX121AddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121AddrEntry.setDescription(' An entry in the Frame Relay Local X.121 Address Table. ')
wfFrSwLocalX121AddrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwLocalX121AddrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121AddrDelete.setDescription(' Indication to delete/create this entry. ')
wfFrSwLocalX121AddrCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwLocalX121AddrCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121AddrCct.setDescription(' Instance identifier; internal CCT number associated with this X.121 address. ')
wfFrSwLocalX121Address = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwLocalX121Address.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121Address.setDescription(' Instance identifier; a X.121 address. This is an 8-byte fixed length octet string format, right justified with padded leading zeros as necessary. ')
wfFrSwLocalX121AddrCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwLocalX121AddrCUG.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121AddrCUG.setDescription(' CUG (Closed User Group) information. The structure of the CUG information consists zero or more groups (number of groups can be derived from the OCTET STRING data type of this MIB attribute) of COI structure information. Each COI structure consists of a COI group number (4-byte integer) and a COI list. Each COI list consists of a length field (4-byte integer) which specifies the number of bytes of COI bit-encoded information belonging to this group and the COI information structure. COI information structure is a bit mask field where each bit from left to right represents whether this X.121 address belongs to a particular COI number within this COI group number. wfFrSwLocalX121AddrCUG defaults to zero COI groups which means no CUG related information and hence this local wfFrSwLocalX121Address is allowed to communicate with all users. ')
wfFrSwLocalX121AddrLocalFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("nonlocal", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwLocalX121AddrLocalFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwLocalX121AddrLocalFlag.setDescription(' Local/Non-Local Identifier Flag. Used for SPVCs.')
wfFrSwBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 17))
wfFrSwBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwBaseDelete.setDescription(' Indication to delete/create this base group ')
wfFrSwBaseIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 17, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwBaseIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwBaseIpAddr.setDescription(" Indicates this BNX's (circuit-less) IP address ")
wfFrSwBaseShutDown = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 17, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwBaseShutDown.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwBaseShutDown.setDescription('Bit mask for slots to shutdown, slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfFrSwCngcMonTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18), )
if mibBuilder.loadTexts: wfFrSwCngcMonTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonTable.setDescription('This table is used by FRSW Congestion Control application. The table is used to Monitor the congestion level of a particular circuit.')
wfFrSwCngcMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwCngcMonCct"))
if mibBuilder.loadTexts: wfFrSwCngcMonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonEntry.setDescription('Instance Id for this table.')
wfFrSwCngcMonReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwCngcMonReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonReset.setDescription('Indication to reset Cngc Monitor Counters.')
wfFrSwCngcMonCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonCct.setDescription('Circuit to be monitored. ')
wfFrSwCngcMonP0Level1Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level1Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level1Percent.setDescription('Percentage of time congestion is at level 1. for Priority 0 Traffic.')
wfFrSwCngcMonP0Level2Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level2Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level2Percent.setDescription('Percentage of time congestion is at level 2. for Priority 0 Traffic.')
wfFrSwCngcMonP0Level3Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level3Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level3Percent.setDescription('Percentage of time congestion is at level 3. for Priority 0 Traffic.')
wfFrSwCngcMonP0Level4Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level4Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP0Level4Percent.setDescription('Percentage of time congestion is at level 4. for Priority 0 Traffic.')
wfFrSwCngcMonP1Level1Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level1Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level1Percent.setDescription('Percentage of time congestion is at level 1. for Priority 1 Traffic.')
wfFrSwCngcMonP1Level2Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level2Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level2Percent.setDescription('Percentage of time congestion is at level 2. for Priority 1 Traffic.')
wfFrSwCngcMonP1Level3Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level3Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level3Percent.setDescription('Percentage of time congestion is at level 3. for Priority 1 Traffic.')
wfFrSwCngcMonP1Level4Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level4Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP1Level4Percent.setDescription('Percentage of time congestion is at level 4. for Priority 1 Traffic.')
wfFrSwCngcMonP2Level1Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level1Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level1Percent.setDescription('Percentage of time congestion is at level 1. for Priority 2 Traffic.')
wfFrSwCngcMonP2Level2Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level2Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level2Percent.setDescription('Percentage of time congestion is at level 2. for Priority 2 Traffic.')
wfFrSwCngcMonP2Level3Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level3Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level3Percent.setDescription('Percentage of time congestion is at level 3. for Priority 2 Traffic.')
wfFrSwCngcMonP2Level4Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level4Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP2Level4Percent.setDescription('Percentage of time congestion is at level 4. for Priority 2 Traffic.')
wfFrSwCngcMonP3Level1Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level1Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level1Percent.setDescription('Percentage of time congestion is at level 1. for Priority 3 Traffic.')
wfFrSwCngcMonP3Level2Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level2Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level2Percent.setDescription('Percentage of time congestion is at level 2. for Priority 3 Traffic.')
wfFrSwCngcMonP3Level3Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level3Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level3Percent.setDescription('Percentage of time congestion is at level 3. for Priority 3 Traffic.')
wfFrSwCngcMonP3Level4Percent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 18, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level4Percent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwCngcMonP3Level4Percent.setDescription('Percentage of time congestion is at level 4. for Priority 3 Traffic.')
wfFrSwVirtualIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 19), )
if mibBuilder.loadTexts: wfFrSwVirtualIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVirtualIntfTable.setDescription("The table is used to create 'virtual' FRSW access lines.")
wfFrSwVirtualIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 19, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwVirtualIntfSlot"), (0, "Wellfleet-FRSW-MIB", "wfFrSwVirtualIntfCct"))
if mibBuilder.loadTexts: wfFrSwVirtualIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVirtualIntfEntry.setDescription('Instance Id for this table.')
wfFrSwVirtualIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwVirtualIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVirtualIntfDelete.setDescription('Indication to delete this virtual interface.')
wfFrSwVirtualIntfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVirtualIntfSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVirtualIntfSlot.setDescription('Instance identifier; the slot number of this interface.')
wfFrSwVirtualIntfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVirtualIntfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVirtualIntfCct.setDescription('Instance identifier; the circuit number of this interface.')
wfFrSwVirtualIntfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwVirtualIntfLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwVirtualIntfLineNum.setDescription('Line number for this virtual interface.')
wfFrSwExtFileSysTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20), )
if mibBuilder.loadTexts: wfFrSwExtFileSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysTable.setDescription('This table is used by FRSW to extend the file system to DRAM device.')
wfFrSwExtFileSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20, 1), ).setIndexNames((0, "Wellfleet-FRSW-MIB", "wfFrSwExtFileSysSlot"))
if mibBuilder.loadTexts: wfFrSwExtFileSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysEntry.setDescription('Instance Id for this table.')
wfFrSwExtFileSysDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwExtFileSysDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysDelete.setDescription(' Indication to delete/create this entry. ')
wfFrSwExtFileSysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwExtFileSysSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysSlot.setDescription('A unique value for each slot. Its value ranges between 1 and 14.')
wfFrSwExtFileSysSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSwExtFileSysSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysSize.setDescription('The memory size of the extended file system in byte unit. The value zero also means that extended file system is disabled. Non-zero value means enabled. Its suggested that the size is in multiple of 128k bytes. Some of the well-known memory sizes and their correspond decimal values are as followed: Mem size Decimal Value ^^^^^^^^ ^^^^^^^^^^^^^ 128K 131072 256K 262144 512K 524288 1M 1048576 2M 2097152 4M 4194304 8M 8388608 ')
wfFrSwExtFileSysActualSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwExtFileSysActualSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysActualSize.setDescription('The actual memory size the system allocated.')
wfFrSwExtFileSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 6, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("fault", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSwExtFileSysState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSwExtFileSysState.setDescription('The status of the extended file system. State up indicates that the requested memory size for the extended file system has been allocated successfully and the extended file system is in operational state. State fault indicates that the requested memory size for the extended file system has NOT been allocated successfully and the extended file system is NOT in operational state. One reason for entering the fault state is insufficient available memory. State init indicates that the system is in the initialization cycle. The extended file system is not operational. State notpresent reflects the size of zero.')
mibBuilder.exportSymbols("Wellfleet-FRSW-MIB", wfFrSwCctLocalSetFECNFrames=wfFrSwCctLocalSetFECNFrames, wfFrSwDlcmiEscapeMode=wfFrSwDlcmiEscapeMode, wfFrSwVcRedirectAction=wfFrSwVcRedirectAction, wfFrSwSigOutDisconnectPkts=wfFrSwSigOutDisconnectPkts, wfFrSwCctLocalSetDEFrames=wfFrSwCctLocalSetDEFrames, wfFrSwSigOutStatusPkts=wfFrSwSigOutStatusPkts, wfFrSwSigTotalInCurrentThroughput=wfFrSwSigTotalInCurrentThroughput, wfFrSwIsdnScrnTable=wfFrSwIsdnScrnTable, wfFrSwVcAtmIwfLossPriorityPolicy=wfFrSwVcAtmIwfLossPriorityPolicy, wfFrSwSigT303=wfFrSwSigT303, wfFrSwUsageCurVolumeBackup=wfFrSwUsageCurVolumeBackup, wfFrSwVcInactiveVcDropFrames=wfFrSwVcInactiveVcDropFrames, wfFrSwL3NetAddress=wfFrSwL3NetAddress, wfFrSwSigInConnectPkts=wfFrSwSigInConnectPkts, wfFrSwLocalE164AddrDelete=wfFrSwLocalE164AddrDelete, wfFrSwUsageUpdateData=wfFrSwUsageUpdateData, wfFrSwExtFileSysDelete=wfFrSwExtFileSysDelete, wfFrSwDlcmiActiveSeqCount=wfFrSwDlcmiActiveSeqCount, wfFrSwUsageCircuitNumber=wfFrSwUsageCircuitNumber, wfFrSwUsageStartTimeStampHigh=wfFrSwUsageStartTimeStampHigh, wfFrSwVcRecvDeOctets=wfFrSwVcRecvDeOctets, wfFrSwIsdnUniDelete=wfFrSwIsdnUniDelete, wfFrSwCngcMonP0Level1Percent=wfFrSwCngcMonP0Level1Percent, wfFrSwCctLocalRecvDEOctets=wfFrSwCctLocalRecvDEOctets, wfFrSwUsageVolumeBackup=wfFrSwUsageVolumeBackup, wfFrSwSigTotalInNegotiableThroughput=wfFrSwSigTotalInNegotiableThroughput, wfFrSwSigOutReleaseCompletePkts=wfFrSwSigOutReleaseCompletePkts, wfFrSwUsageSentDEOctetsHigh=wfFrSwUsageSentDEOctetsHigh, wfFrSwCctOutThroughput=wfFrSwCctOutThroughput, wfFrSwDlcmiDteLastReceived=wfFrSwDlcmiDteLastReceived, wfFrSwCctRemoteSentDEOctets=wfFrSwCctRemoteSentDEOctets, wfFrSwSvcUsageVersionId=wfFrSwSvcUsageVersionId, wfFrSwCctRemoteRecvNonDEOctets=wfFrSwCctRemoteRecvNonDEOctets, wfFrSwCctRemoteRecvDEOctets=wfFrSwCctRemoteRecvDEOctets, wfFrSwSvcUsageUpdateInterval=wfFrSwSvcUsageUpdateInterval, wfFrSwCctRemoteSentNonDEFrames=wfFrSwCctRemoteSentNonDEFrames, wfFrSwVcCallReqRetryTimer=wfFrSwVcCallReqRetryTimer, wfFrSwMcastDlci=wfFrSwMcastDlci, wfFrSwCctLocalBecnState=wfFrSwCctLocalBecnState, wfFrSwVcRecvBecnOctets=wfFrSwVcRecvBecnOctets, wfFrSwGlobalX121AddrDelete=wfFrSwGlobalX121AddrDelete, wfFrSwUsageVolume=wfFrSwUsageVolume, wfFrSwDlcmiCrossNetListenEnable=wfFrSwDlcmiCrossNetListenEnable, wfFrSwSvcUsageNumEntries=wfFrSwSvcUsageNumEntries, wfFrSwVcInBc=wfFrSwVcInBc, wfFrSwDlcmiDteErrorThreshold=wfFrSwDlcmiDteErrorThreshold, wfFrSwUsageState=wfFrSwUsageState, wfFrSwIsdnScrnNum=wfFrSwIsdnScrnNum, wfFrSwVcOutThroughput=wfFrSwVcOutThroughput, wfFrSwUsageStartTimeStampLow=wfFrSwUsageStartTimeStampLow, wfFrSwUsageCurDebug=wfFrSwUsageCurDebug, wfFrSwMcastIndividualDlci=wfFrSwMcastIndividualDlci, wfFrSwVcXNetReceived=wfFrSwVcXNetReceived, wfFrSwSvcUsageFlushData=wfFrSwSvcUsageFlushData, wfFrSwVcSetBecnOctets=wfFrSwVcSetBecnOctets, wfFrSwIsdnUniTable=wfFrSwIsdnUniTable, wfFrSwDlcmiCircuit=wfFrSwDlcmiCircuit, wfFrSwIsdnAssocNum=wfFrSwIsdnAssocNum, wfFrSwVcEscapeEnable=wfFrSwVcEscapeEnable, wfFrSwDlcmiDeletedVCs=wfFrSwDlcmiDeletedVCs, wfFrSwVcOutBe=wfFrSwVcOutBe, wfFrSwCctReceivedStatus=wfFrSwCctReceivedStatus, wfFrSwCctLocalRecvBECNFrames=wfFrSwCctLocalRecvBECNFrames, wfFrSwDlcmiAsyncUpdateEnable=wfFrSwDlcmiAsyncUpdateEnable, wfFrSwIsdnBaseSlotNum=wfFrSwIsdnBaseSlotNum, wfFrSwUsageFilePrefix=wfFrSwUsageFilePrefix, wfFrSwLocalE164AddrTable=wfFrSwLocalE164AddrTable, wfFrSwGlobalX121AddrTable=wfFrSwGlobalX121AddrTable, wfFrSwDlcmiCrossNetErrorThreshold=wfFrSwDlcmiCrossNetErrorThreshold, wfFrSwCctCreationTime=wfFrSwCctCreationTime, wfFrSwCctRemoteBecnState=wfFrSwCctRemoteBecnState, wfFrSwCctOutBe=wfFrSwCctOutBe, wfFrSwGlobalE164AddrLow=wfFrSwGlobalE164AddrLow, wfFrSwLocalX121AddrTable=wfFrSwLocalX121AddrTable, wfFrSwExtFileSysState=wfFrSwExtFileSysState, wfFrSwCctRemoteSetFECNFrames=wfFrSwCctRemoteSetFECNFrames, wfFrSwIsdnUniEntry=wfFrSwIsdnUniEntry, wfFrSwCctRemoteRecvFECNOctets=wfFrSwCctRemoteRecvFECNOctets, wfFrSwExtFileSysActualSize=wfFrSwExtFileSysActualSize, wfFrSwDlcmiDteFullEnquiryInterval=wfFrSwDlcmiDteFullEnquiryInterval, wfFrSwGlobalX121AddrLow=wfFrSwGlobalX121AddrLow, wfFrSwCctOutBc=wfFrSwCctOutBc, wfFrSwDlcmiDteReceived=wfFrSwDlcmiDteReceived, wfFrSwDlcmiSequenceCount=wfFrSwDlcmiSequenceCount, wfFrSwSigDlciIEAllowed=wfFrSwSigDlciIEAllowed, wfFrSwCctTable=wfFrSwCctTable, wfFrSwDlcmiVCsInUse=wfFrSwDlcmiVCsInUse, wfFrSwVcInactiveVcDropOctets=wfFrSwVcInactiveVcDropOctets, wfFrSwUsageEndTimeStampLow=wfFrSwUsageEndTimeStampLow, wfFrSwVcEntry=wfFrSwVcEntry, wfFrSwUsageCurCleanupInterval=wfFrSwUsageCurCleanupInterval, wfFrSwUsageEnable=wfFrSwUsageEnable, wfFrSwSvcUsageCurVolume=wfFrSwSvcUsageCurVolume, wfFrSwDlcmiTable=wfFrSwDlcmiTable, wfFrSwCctRemoteSentDEFrames=wfFrSwCctRemoteSentDEFrames, wfFrSwCctInThroughput=wfFrSwCctInThroughput, wfFrSwVcState=wfFrSwVcState, wfFrSwIsdnAssocIndex=wfFrSwIsdnAssocIndex, wfFrSwUsageSwitchName=wfFrSwUsageSwitchName, wfFrSwIsdnAssocEntry=wfFrSwIsdnAssocEntry, wfFrSwDlcmiState=wfFrSwDlcmiState, wfFrSwUsageTimerInterval=wfFrSwUsageTimerInterval, wfFrSwVcRecvNonDeFrames=wfFrSwVcRecvNonDeFrames, wfFrSwVcRecvFecnOctets=wfFrSwVcRecvFecnOctets, wfFrSwDlcmiDteStatus=wfFrSwDlcmiDteStatus, wfFrSwSvcUsageCurStoreInterval=wfFrSwSvcUsageCurStoreInterval, wfFrSwLocalX121AddrDelete=wfFrSwLocalX121AddrDelete, wfFrSwUsageStoreTimeStamp=wfFrSwUsageStoreTimeStamp, wfFrSwDlcmiManagementType=wfFrSwDlcmiManagementType, wfFrSwSigInStatusPkts=wfFrSwSigInStatusPkts, wfFrSwUsageLastNonDEFramesLow=wfFrSwUsageLastNonDEFramesLow, wfFrSwVcReceivedStatus=wfFrSwVcReceivedStatus, wfFrSwDlcmiControlByteDisable=wfFrSwDlcmiControlByteDisable, wfFrSwVcXNetSent=wfFrSwVcXNetSent, wfFrSwCngcMonP1Level1Percent=wfFrSwCngcMonP1Level1Percent, wfFrSwCngcMonP2Level2Percent=wfFrSwCngcMonP2Level2Percent, wfFrSwUsageUpdateTimeStamp=wfFrSwUsageUpdateTimeStamp, wfFrSwSigMaxNumOfSvcs=wfFrSwSigMaxNumOfSvcs, wfFrSwDlcmiAddressLen=wfFrSwDlcmiAddressLen, wfFrSwSigNwrkAbortedConnections=wfFrSwSigNwrkAbortedConnections, wfFrSwVcReportedStatus=wfFrSwVcReportedStatus, wfFrSwVirtualIntfLineNum=wfFrSwVirtualIntfLineNum, wfFrSwCngcMonTable=wfFrSwCngcMonTable, wfFrSwCctRemoteRecvBECNOctets=wfFrSwCctRemoteRecvBECNOctets, wfFrSwUsageSwitchId=wfFrSwUsageSwitchId, wfFrSwVcBecnState=wfFrSwVcBecnState, wfFrSwIsdnUniNum=wfFrSwIsdnUniNum, wfFrSwSvcUsageState=wfFrSwSvcUsageState, wfFrSwVcTxDeFrames=wfFrSwVcTxDeFrames, wfFrSwCctLocalSentDEOctets=wfFrSwCctLocalSentDEOctets, wfFrSwCctRemoteRecvFECNFrames=wfFrSwCctRemoteRecvFECNFrames, wfFrSwVcBackupCalledDlci=wfFrSwVcBackupCalledDlci, wfFrSwVcCallReqCalledDlci=wfFrSwVcCallReqCalledDlci, wfFrSwCctLocalRecvBECNOctets=wfFrSwCctLocalRecvBECNOctets, wfFrSwIsdnUniState=wfFrSwIsdnUniState, wfFrSwBcMeasurementInterval=wfFrSwBcMeasurementInterval, wfFrSwUsageStoreData=wfFrSwUsageStoreData, wfFrSwCctLocalRecvFECNFrames=wfFrSwCctLocalRecvFECNFrames, wfFrSwCctRemoteRecvBECNFrames=wfFrSwCctRemoteRecvBECNFrames, wfFrSwPvcUsageFileLayout=wfFrSwPvcUsageFileLayout, wfFrSwGlobalX121AddrHigh=wfFrSwGlobalX121AddrHigh, wfFrSwCngcMonP2Level4Percent=wfFrSwCngcMonP2Level4Percent, wfFrSwDlcmiBidirect=wfFrSwDlcmiBidirect, wfFrSwVcSetDeOctets=wfFrSwVcSetDeOctets, wfFrSwUsageSentDEOctetsLow=wfFrSwUsageSentDEOctetsLow, wfFrSwDlcmiUnknownIEErrors=wfFrSwDlcmiUnknownIEErrors, wfFrSwSigSvcDlciLow=wfFrSwSigSvcDlciLow, wfFrSwDlcmiSequenceErrors=wfFrSwDlcmiSequenceErrors, wfFrSwIsdnAssocSlotNum=wfFrSwIsdnAssocSlotNum, wfFrSwExtFileSysTable=wfFrSwExtFileSysTable, wfFrSwDlcmiControlByteErrors=wfFrSwDlcmiControlByteErrors, wfFrSwVirtualIntfSlot=wfFrSwVirtualIntfSlot, wfFrSwDlcmiStatus=wfFrSwDlcmiStatus, wfFrSwVcBackupCrossNetErrors=wfFrSwVcBackupCrossNetErrors, wfFrSwVirtualIntfEntry=wfFrSwVirtualIntfEntry, wfFrSwDlcmiPolls=wfFrSwDlcmiPolls, wfFrSwUsageDirectory=wfFrSwUsageDirectory, wfFrSwSvcUsageStoreTimeStamp=wfFrSwSvcUsageStoreTimeStamp, wfFrSwErrType=wfFrSwErrType, wfFrSwUsageLastNonDEOctetsHigh=wfFrSwUsageLastNonDEOctetsHigh, wfFrSwUsageCurFlushInterval=wfFrSwUsageCurFlushInterval, wfFrSwLocalX121Address=wfFrSwLocalX121Address, wfFrSwCctLocalSentNonDEFrames=wfFrSwCctLocalSentNonDEFrames, wfFrSwSigInDisconnectPkts=wfFrSwSigInDisconnectPkts, wfFrSwVcDropNonDeFrames=wfFrSwVcDropNonDeFrames, wfFrSwIsdnBaseDelete=wfFrSwIsdnBaseDelete, wfFrSwSigOutConnectPkts=wfFrSwSigOutConnectPkts, wfFrSwCngcMonP1Level2Percent=wfFrSwCngcMonP1Level2Percent, wfFrSwUsageUpdateInterval=wfFrSwUsageUpdateInterval, wfFrSwDlcmiCrossNetAsyncUpdateEnable=wfFrSwDlcmiCrossNetAsyncUpdateEnable, wfFrSwVcSetDeFrames=wfFrSwVcSetDeFrames, wfFrSwGlobalE164AddrDelete=wfFrSwGlobalE164AddrDelete, wfFrSwSigNumOfSvcsInUse=wfFrSwSigNumOfSvcsInUse, wfFrSwSigX213PriorityIEAllowed=wfFrSwSigX213PriorityIEAllowed, wfFrSwSvcUsageUpdateData=wfFrSwSvcUsageUpdateData, wfFrSwGlobalX121AddrIPAddr=wfFrSwGlobalX121AddrIPAddr, wfFrSwUsageSentDEFramesHigh=wfFrSwUsageSentDEFramesHigh, wfFrSwDlcmiBcMeasurementEnable=wfFrSwDlcmiBcMeasurementEnable, wfFrSwVcRecvDeFrames=wfFrSwVcRecvDeFrames, wfFrSwVcInBeOctets=wfFrSwVcInBeOctets, wfFrSwSigRejectedConnRequests=wfFrSwSigRejectedConnRequests, wfFrSwSvcUsageFilePrefix=wfFrSwSvcUsageFilePrefix, wfFrSwMcastIpAddr=wfFrSwMcastIpAddr, wfFrSwCngcMonP0Level2Percent=wfFrSwCngcMonP0Level2Percent, wfFrSwSvcUsageStoreInterval=wfFrSwSvcUsageStoreInterval, wfFrSwDlcmiCrossNetEnable=wfFrSwDlcmiCrossNetEnable, wfFrSwVcCalledDlci=wfFrSwVcCalledDlci, wfFrSwSigMaxInThroughputPerSvc=wfFrSwSigMaxInThroughputPerSvc, wfFrSwCctInBcOctets=wfFrSwCctInBcOctets, wfFrSwSigOutReleasePkts=wfFrSwSigOutReleasePkts, wfFrSwCctEntry=wfFrSwCctEntry, wfFrSwCngcMonP1Level3Percent=wfFrSwCngcMonP1Level3Percent, wfFrSwCctXNetSent=wfFrSwCctXNetSent, wfFrSwCctRemoteDropNonDEOctets=wfFrSwCctRemoteDropNonDEOctets, wfFrSwUsageCleanupTimeStamp=wfFrSwUsageCleanupTimeStamp, wfFrSwLocalE164AddrLocalFlag=wfFrSwLocalE164AddrLocalFlag, wfFrSwVirtualIntfCct=wfFrSwVirtualIntfCct, wfFrSwVcDropDeFrames=wfFrSwVcDropDeFrames, wfFrSwCctXNetReceived=wfFrSwCctXNetReceived, wfFrSwLocalE164AddrCUG=wfFrSwLocalE164AddrCUG, wfFrSwCctState=wfFrSwCctState, wfFrSwSvcUsageCurCleanupInterval=wfFrSwSvcUsageCurCleanupInterval, wfFrSwVcTable=wfFrSwVcTable, wfFrSwCctInactiveVCDropFrames=wfFrSwCctInactiveVCDropFrames, wfFrSwGlobalX121AddrEntry=wfFrSwGlobalX121AddrEntry, wfFrSwSvcUsageCurFilePrefix=wfFrSwSvcUsageCurFilePrefix, wfFrSwCngcMonEntry=wfFrSwCngcMonEntry, wfFrSwCctLocalDropNonDEFrames=wfFrSwCctLocalDropNonDEFrames, wfFrSwUsageFlushData=wfFrSwUsageFlushData, wfFrSwVirtualIntfDelete=wfFrSwVirtualIntfDelete, wfFrSwIsdnAssocScrnEnable=wfFrSwIsdnAssocScrnEnable, wfFrSwCngcMonP0Level4Percent=wfFrSwCngcMonP0Level4Percent, wfFrSwIsdnBaseTable=wfFrSwIsdnBaseTable, wfFrSwUsageDlci=wfFrSwUsageDlci, wfFrSwLocalX121AddrCct=wfFrSwLocalX121AddrCct, wfFrSwCctLocalSetDEOctets=wfFrSwCctLocalSetDEOctets, wfFrSwLocalE164AddrCct=wfFrSwLocalE164AddrCct, wfFrSwVcAtmIwfDePolicy=wfFrSwVcAtmIwfDePolicy, wfFrSwCctRemoteDropDEFrames=wfFrSwCctRemoteDropDEFrames, wfFrSwSvcUsageStoreData=wfFrSwSvcUsageStoreData, wfFrSwTupleDlciA=wfFrSwTupleDlciA, wfFrSwBaseShutDown=wfFrSwBaseShutDown, wfFrSwCctLastTimeChange=wfFrSwCctLastTimeChange, wfFrSwUsageTable=wfFrSwUsageTable, wfFrSwVcCreationTime=wfFrSwVcCreationTime, wfFrSwVcLastTimeChange=wfFrSwVcLastTimeChange, wfFrSwCctInBc=wfFrSwCctInBc, wfFrSwUsageCurDirectory=wfFrSwUsageCurDirectory, wfFrSwCctMulticast=wfFrSwCctMulticast, wfFrSwVcInBe=wfFrSwVcInBe, wfFrSwSigT301=wfFrSwSigT301, wfFrSwCctRemoteSentNonDEOctets=wfFrSwCctRemoteSentNonDEOctets, wfFrSwUsageFlushTimeStamp=wfFrSwUsageFlushTimeStamp, wfFrSwCctRemoteSetBECNOctets=wfFrSwCctRemoteSetBECNOctets, wfFrSwVcBackupCalledIpAddr=wfFrSwVcBackupCalledIpAddr, wfFrSwVcAtmIwfVPI=wfFrSwVcAtmIwfVPI, wfFrSwSigInReleaseCompletePkts=wfFrSwSigInReleaseCompletePkts, wfFrSwLocalX121AddrEntry=wfFrSwLocalX121AddrEntry, wfFrSwCctCrossNetStatus=wfFrSwCctCrossNetStatus, wfFrSwSvcUsageFileLayout=wfFrSwSvcUsageFileLayout, wfFrSwDlcmiFullStatusSeq=wfFrSwDlcmiFullStatusSeq, wfFrSwDlcmiSvcDisable=wfFrSwDlcmiSvcDisable, wfFrSwVcCallReqDlciSelectionType=wfFrSwVcCallReqDlciSelectionType, wfFrSwSigOutStatusEnquiryPkts=wfFrSwSigOutStatusEnquiryPkts, wfFrSwUsageSentNonDEFramesLow=wfFrSwUsageSentNonDEFramesLow, wfFrSwLocalE164AddrEntry=wfFrSwLocalE164AddrEntry, wfFrSwDlcmiDteSeqCount=wfFrSwDlcmiDteSeqCount, wfFrSwUsageFileCleanup=wfFrSwUsageFileCleanup, wfFrSwBaseDelete=wfFrSwBaseDelete, wfFrSwSvcUsageFlushInterval=wfFrSwSvcUsageFlushInterval, wfFrSwUsageLastDEFramesHigh=wfFrSwUsageLastDEFramesHigh, wfFrSwVcRedirectState=wfFrSwVcRedirectState, wfFrSwDlcmiAlarmTimer=wfFrSwDlcmiAlarmTimer, wfFrSwCctLocalOrRemoteConnection=wfFrSwCctLocalOrRemoteConnection)
mibBuilder.exportSymbols("Wellfleet-FRSW-MIB", wfFrSwSigOutCallProceedingPkts=wfFrSwSigOutCallProceedingPkts, wfFrSwDlcmiMaxSupportedVCs=wfFrSwDlcmiMaxSupportedVCs, wfFrSwDlcmiSpvcAgent=wfFrSwDlcmiSpvcAgent, wfFrSwCctRemoteDropNonDEFrames=wfFrSwCctRemoteDropNonDEFrames, wfFrSwVcCallReqMaxRetries=wfFrSwVcCallReqMaxRetries, wfFrSwSwitchHdrErrors=wfFrSwSwitchHdrErrors, wfFrSwDlcmiEscapeVcCount=wfFrSwDlcmiEscapeVcCount, wfFrSwVcCalledIpAddr=wfFrSwVcCalledIpAddr, wfFrSwUsageSentNonDEOctetsHigh=wfFrSwUsageSentNonDEOctetsHigh, wfFrSwBase=wfFrSwBase, wfFrSwDlcmiDtePolls=wfFrSwDlcmiDtePolls, wfFrSwCctRemoteSetBECNFrames=wfFrSwCctRemoteSetBECNFrames, wfFrSwVcTxNonDeOctets=wfFrSwVcTxNonDeOctets, wfFrSwDlcmiMcastNoBufferErrors=wfFrSwDlcmiMcastNoBufferErrors, wfFrSwSigCallingPartyIEMandatory=wfFrSwSigCallingPartyIEMandatory, wfFrSwUsageCurStoreInterval=wfFrSwUsageCurStoreInterval, wfFrSwDlcmiFrameTooLongErrors=wfFrSwDlcmiFrameTooLongErrors, wfFrSwSvcUsageFlushTimeStamp=wfFrSwSvcUsageFlushTimeStamp, wfFrSwCngcMonP1Level4Percent=wfFrSwCngcMonP1Level4Percent, wfFrSwVcBackupCrossNetStatus=wfFrSwVcBackupCrossNetStatus, wfFrSwSigXNetClearingDisable=wfFrSwSigXNetClearingDisable, wfFrSwSigTable=wfFrSwSigTable, wfFrSwCngcMonP3Level4Percent=wfFrSwCngcMonP3Level4Percent, wfFrSwCctLocalDropNonDEOctets=wfFrSwCctLocalDropNonDEOctets, wfFrSwCngcMonCct=wfFrSwCngcMonCct, wfFrSwVcDropExcessBurstFrames=wfFrSwVcDropExcessBurstFrames, wfFrSwUsageNumEntries=wfFrSwUsageNumEntries, wfFrSwTupleIpAddrB=wfFrSwTupleIpAddrB, wfFrSwSvcUsageUpdateTimeStamp=wfFrSwSvcUsageUpdateTimeStamp, wfFrSwSvcUsageCurUpdateInterval=wfFrSwSvcUsageCurUpdateInterval, wfFrSwDlcmiNniEnable=wfFrSwDlcmiNniEnable, wfFrSwSigDefaultMinAcceptThroughput=wfFrSwSigDefaultMinAcceptThroughput, wfFrSwUsageEntry=wfFrSwUsageEntry, wfFrSwCngcMonP2Level3Percent=wfFrSwCngcMonP2Level3Percent, wfFrSwCctDlci=wfFrSwCctDlci, wfFrSwUsageLastDEFramesLow=wfFrSwUsageLastDEFramesLow, wfFrSwSigDelete=wfFrSwSigDelete, wfFrSwUsageCurVolume=wfFrSwUsageCurVolume, wfFrSwCngcMonP3Level3Percent=wfFrSwCngcMonP3Level3Percent, wfFrSwSigInReleasePkts=wfFrSwSigInReleasePkts, wfFrSwCctReportedStatus=wfFrSwCctReportedStatus, wfFrSwDlcmiSvcBillingEnable=wfFrSwDlcmiSvcBillingEnable, wfFrSwDlcmiMonitoredEvents=wfFrSwDlcmiMonitoredEvents, wfFrSwVcCallReqCalledAddr=wfFrSwVcCallReqCalledAddr, wfFrSwSigT308=wfFrSwSigT308, wfFrSwVcCircuit=wfFrSwVcCircuit, wfFrSwBaseIpAddr=wfFrSwBaseIpAddr, wfFrSwVcDlci=wfFrSwVcDlci, wfFrSwDlcmiPollingInterval=wfFrSwDlcmiPollingInterval, wfFrSwGlobalE164AddrTable=wfFrSwGlobalE164AddrTable, wfFrSwCngcMonP3Level1Percent=wfFrSwCngcMonP3Level1Percent, wfFrSwUsageCurFilePrefix=wfFrSwUsageCurFilePrefix, wfFrSwCctLocalDropDEOctets=wfFrSwCctLocalDropDEOctets, wfFrSwUsageLocalTimeZone=wfFrSwUsageLocalTimeZone, wfFrSwVcOutBc=wfFrSwVcOutBc, wfFrSwVcAtmIwfVCI=wfFrSwVcAtmIwfVCI, wfFrSwVcCfgInBe=wfFrSwVcCfgInBe, wfFrSwVcDropNonDeOctets=wfFrSwVcDropNonDeOctets, wfFrSwVcInBcOctets=wfFrSwVcInBcOctets, wfFrSwSigCircuit=wfFrSwSigCircuit, wfFrSwVcRecentNonDeOctets=wfFrSwVcRecentNonDeOctets, wfFrSwVcCrossNetStatus=wfFrSwVcCrossNetStatus, wfFrSwTupleEntry=wfFrSwTupleEntry, wfFrSwExtFileSysSlot=wfFrSwExtFileSysSlot, wfFrSwSvcUsageCurDirectory=wfFrSwSvcUsageCurDirectory, wfFrSwUsage=wfFrSwUsage, wfFrSwTupleDlciB=wfFrSwTupleDlciB, wfFrSwUsageDebug=wfFrSwUsageDebug, wfFrSwLocalX121AddrCUG=wfFrSwLocalX121AddrCUG, wfFrSwIsdnUniIndex=wfFrSwIsdnUniIndex, wfFrSwCctLocalSentDEFrames=wfFrSwCctLocalSentDEFrames, wfFrSwSvcUsageDirectory=wfFrSwSvcUsageDirectory, wfFrSwDlcmiErrorThreshold=wfFrSwDlcmiErrorThreshold, wfFrSwDlcmiFormatErrors=wfFrSwDlcmiFormatErrors, wfFrSwDlcmiDtePollingInterval=wfFrSwDlcmiDtePollingInterval, wfFrSwCctLocalRecvNonDEOctets=wfFrSwCctLocalRecvNonDEOctets, wfFrSwSigMaxOutThroughputPerSvc=wfFrSwSigMaxOutThroughputPerSvc, wfFrSwVcInThroughput=wfFrSwVcInThroughput, wfFrSwCctXNetErrors=wfFrSwCctXNetErrors, wfFrSwMcastEntry=wfFrSwMcastEntry, wfFrSwCctStateSet=wfFrSwCctStateSet, wfFrSwCctLocalSetBECNOctets=wfFrSwCctLocalSetBECNOctets, wfFrSwCctLocalRecvNonDEFrames=wfFrSwCctLocalRecvNonDEFrames, wfFrSwVcTxDeOctets=wfFrSwVcTxDeOctets, wfFrSwSvcUsageCleanupInterval=wfFrSwSvcUsageCleanupInterval, wfFrSwUsageEndTimeStampHigh=wfFrSwUsageEndTimeStampHigh, wfFrSwSigDefaultBe=wfFrSwSigDefaultBe, wfFrSwVcSpvcCallState=wfFrSwVcSpvcCallState, wfFrSwVcDropExcessBurstOctets=wfFrSwVcDropExcessBurstOctets, wfFrSwGlobalE164AddrHigh=wfFrSwGlobalE164AddrHigh, wfFrSwTupleDelete=wfFrSwTupleDelete, wfFrSwCctRemoteDropDEOctets=wfFrSwCctRemoteDropDEOctets, wfFrSwSigOutSetupPkts=wfFrSwSigOutSetupPkts, wfFrSwIsdnScrnIndex=wfFrSwIsdnScrnIndex, wfFrSwCctRemoteRecvDEFrames=wfFrSwCctRemoteRecvDEFrames, wfFrSwTupleTable=wfFrSwTupleTable, wfFrSwUsageLastDEOctetsLow=wfFrSwUsageLastDEOctetsLow, wfFrSwIsdnBaseAssocType=wfFrSwIsdnBaseAssocType, wfFrSwLocalX121AddrLocalFlag=wfFrSwLocalX121AddrLocalFlag, wfFrSwVcDropDeOctets=wfFrSwVcDropDeOctets, wfFrSwCctDelete=wfFrSwCctDelete, wfFrSwDlcmiFullEnquiryInterval=wfFrSwDlcmiFullEnquiryInterval, wfFrSwIsdnScrnDelete=wfFrSwIsdnScrnDelete, wfFrSwIsdnBaseEntry=wfFrSwIsdnBaseEntry, wfFrSwVcAtmIwfEfciPolicy=wfFrSwVcAtmIwfEfciPolicy, wfFrSwVcStateSet=wfFrSwVcStateSet, wfFrSwDlcmiEntry=wfFrSwDlcmiEntry, wfFrSwVcTrfPriority=wfFrSwVcTrfPriority, wfFrSwDlcmiActiveReceived=wfFrSwDlcmiActiveReceived, wfFrSwDlcmiProtocolErrors=wfFrSwDlcmiProtocolErrors, wfFrSwSigDlciAssign=wfFrSwSigDlciAssign, wfFrSwExtFileSysSize=wfFrSwExtFileSysSize, wfFrSwSvcUsageInterimRecordEnable=wfFrSwSvcUsageInterimRecordEnable, wfFrSwDlcmiNewVCs=wfFrSwDlcmiNewVCs, wfFrSwUsageLastNonDEOctetsLow=wfFrSwUsageLastNonDEOctetsLow, wfFrSwDlcmiDelete=wfFrSwDlcmiDelete, wfFrSwUsageCurUpdateInterval=wfFrSwUsageCurUpdateInterval, wfFrSwCngcMonP0Level3Percent=wfFrSwCngcMonP0Level3Percent, wfFrSwVcSetBecnFrames=wfFrSwVcSetBecnFrames, wfFrSwUsageRemoteDlci=wfFrSwUsageRemoteDlci, wfFrSwUsageCurTimerInterval=wfFrSwUsageCurTimerInterval, wfFrSwIsdnAssocDelete=wfFrSwIsdnAssocDelete, wfFrSwSigTotalOutCurrentThroughput=wfFrSwSigTotalOutCurrentThroughput, wfFrSwDlcmiIwfMode=wfFrSwDlcmiIwfMode, wfFrSwSigDefaultBc=wfFrSwSigDefaultBc, wfFrSwDlcmiRecoveryCounts=wfFrSwDlcmiRecoveryCounts, wfFrSwUsageLastDEOctetsHigh=wfFrSwUsageLastDEOctetsHigh, wfFrSwVcSetFecnOctets=wfFrSwVcSetFecnOctets, wfFrSwVcDelete=wfFrSwVcDelete, wfFrSwVcRecvBecnFrames=wfFrSwVcRecvBecnFrames, wfFrSwExtFileSysEntry=wfFrSwExtFileSysEntry, wfFrSwCngcMonReset=wfFrSwCngcMonReset, wfFrSwSigMaximumBe=wfFrSwSigMaximumBe, wfFrSwSigT305=wfFrSwSigT305, wfFrSwSvcUsageEnable=wfFrSwSvcUsageEnable, wfFrSwSigT322=wfFrSwSigT322, wfFrSwSvcUsageVolume=wfFrSwSvcUsageVolume, wfFrSwDlcmiIllegalDlciErrors=wfFrSwDlcmiIllegalDlciErrors, wfFrSwIsdnAssocTable=wfFrSwIsdnAssocTable, wfFrSwCctRemoteRecvNonDEFrames=wfFrSwCctRemoteRecvNonDEFrames, wfFrSwDlcmiCrossNetPollingInterval=wfFrSwDlcmiCrossNetPollingInterval, wfFrSwLocalE164Address=wfFrSwLocalE164Address, wfFrSwUsageStoreInterval=wfFrSwUsageStoreInterval, wfFrSwSigInSetupPkts=wfFrSwSigInSetupPkts, wfFrSwUsageSentNonDEOctetsLow=wfFrSwUsageSentNonDEOctetsLow, wfFrSwSigSvcDlciHigh=wfFrSwSigSvcDlciHigh, wfFrSwDlcmiL2AddrType=wfFrSwDlcmiL2AddrType, wfFrSwMcastIndex=wfFrSwMcastIndex, wfFrSwDlcmiUnknownRPTErrors=wfFrSwDlcmiUnknownRPTErrors, wfFrSwUsageSentNonDEFramesHigh=wfFrSwUsageSentNonDEFramesHigh, wfFrSwDlcmiLastReceived=wfFrSwDlcmiLastReceived, wfFrSwCctLocalSentNonDEOctets=wfFrSwCctLocalSentNonDEOctets, wfFrSwSigInCallProceedingPkts=wfFrSwSigInCallProceedingPkts, wfFrSwSvcUsageFileCleanup=wfFrSwSvcUsageFileCleanup, wfFrSwSigEntry=wfFrSwSigEntry, wfFrSwMcastTable=wfFrSwMcastTable, wfFrSwSigL2Resets=wfFrSwSigL2Resets, wfFrSwDlcmiOtherErrors=wfFrSwDlcmiOtherErrors, wfFrSwErrTime=wfFrSwErrTime, wfFrSwUsageFlushInterval=wfFrSwUsageFlushInterval, wfFrSwVcTxNonDeFrames=wfFrSwVcTxNonDeFrames, wfFrSwUsageCleanupInterval=wfFrSwUsageCleanupInterval, wfFrSwIsdnScrnEntry=wfFrSwIsdnScrnEntry, wfFrSwUsageRemoteIPAddress=wfFrSwUsageRemoteIPAddress, wfFrSwSigInStatusEnquiryPkts=wfFrSwSigInStatusEnquiryPkts, wfFrSwVirtualIntfTable=wfFrSwVirtualIntfTable, wfFrSwCngcMonP3Level2Percent=wfFrSwCngcMonP3Level2Percent, wfFrSwUsageLastNonDEFramesHigh=wfFrSwUsageLastNonDEFramesHigh, wfFrSwCctLocalSetFECNOctets=wfFrSwCctLocalSetFECNOctets, wfFrSwVcAtmIwfMode=wfFrSwVcAtmIwfMode, wfFrSwVcRedirectType=wfFrSwVcRedirectType, wfFrSwSigT310=wfFrSwSigT310, wfFrSwCctLocalRecvFECNOctets=wfFrSwCctLocalRecvFECNOctets, wfFrSwGlobalE164AddrIPAddr=wfFrSwGlobalE164AddrIPAddr, wfFrSwDlcmiFrameTooShortErrors=wfFrSwDlcmiFrameTooShortErrors, wfFrSwVcMulticast=wfFrSwVcMulticast, wfFrSwUsageIPAddress=wfFrSwUsageIPAddress, wfFrSwSigDefaultThroughput=wfFrSwSigDefaultThroughput, wfFrSwCctLocalRecentNonDEOctets=wfFrSwCctLocalRecentNonDEOctets, wfFrSwUsageSentDEFramesLow=wfFrSwUsageSentDEFramesLow, wfFrSwSvcUsageCleanupTimeStamp=wfFrSwSvcUsageCleanupTimeStamp, wfFrSwSigInUnknownPkts=wfFrSwSigInUnknownPkts, wfFrSwCctInactiveVCDropOctets=wfFrSwCctInactiveVCDropOctets, wfFrSwDlcmiEscapeCircuit=wfFrSwDlcmiEscapeCircuit, wfFrSwUsageDelete=wfFrSwUsageDelete, wfFrSwCctNumber=wfFrSwCctNumber, wfFrSwMcastDelete=wfFrSwMcastDelete, wfFrSwSigTotalOutNegotiableThroughput=wfFrSwSigTotalOutNegotiableThroughput, wfFrSwVcRecvNonDeOctets=wfFrSwVcRecvNonDeOctets, wfFrSwCngcMonP2Level1Percent=wfFrSwCngcMonP2Level1Percent, wfFrSwVcRecvFecnFrames=wfFrSwVcRecvFecnFrames, wfFrSwCctInBe=wfFrSwCctInBe, wfFrSwCctLocalDropDEFrames=wfFrSwCctLocalDropDEFrames, wfFrSwCctLocalSetBECNFrames=wfFrSwCctLocalSetBECNFrames, wfFrSwDlcmiUnknownDlciErrors=wfFrSwDlcmiUnknownDlciErrors, wfFrSwCctLocalRecvDEFrames=wfFrSwCctLocalRecvDEFrames, wfFrSwSvcUsageCurFlushInterval=wfFrSwSvcUsageCurFlushInterval, wfFrSwGlobalE164AddrEntry=wfFrSwGlobalE164AddrEntry, wfFrSwErrData=wfFrSwErrData, wfFrSwVcSetFecnFrames=wfFrSwVcSetFecnFrames, wfFrSwDlcmiCallAccDlciSelectionType=wfFrSwDlcmiCallAccDlciSelectionType, wfFrSwTupleIpAddrA=wfFrSwTupleIpAddrA, wfFrSwCctRemoteSetFECNOctets=wfFrSwCctRemoteSetFECNOctets, wfFrSwVcXNetErrors=wfFrSwVcXNetErrors)
