#
# PySNMP MIB module MICOM-TRAFFIC-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-TRAFFIC-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ModuleIdentity, IpAddress, NotificationType, ObjectIdentity, iso, MibIdentifier, Counter64, Counter32, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ModuleIdentity", "IpAddress", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "Counter64", "Counter32", "Integer32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_2tm = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27)).setLabel("micom-2tm")
tm2_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1)).setLabel("tm2-configuration")
tm2_status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2)).setLabel("tm2-status")
tm2_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3)).setLabel("tm2-statistics")
tm2_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4)).setLabel("tm2-control")
mcmTMclassParamTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1), )
if mibBuilder.loadTexts: mcmTMclassParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamTable.setDescription('NAME = ; DESC = The Traffic Management Class Parameters \\ configuration table.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcmTMclassParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1), ).setIndexNames((0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassParamSccNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassParamFRDlciNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassParamMPANLDlciNum"))
if mibBuilder.loadTexts: mcmTMclassParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamEntry.setDescription('NAME = ; DESC = An entry in the Traffic Management Class \\ Parameters configuration table.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamSccNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamSccNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamSccNum.setDescription('NAME = ; DESC = The WAN physical port number. Used as index to \\ TM Class Parameters configuration table.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamFRDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamFRDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamFRDlciNum.setDescription('NAME = ; DESC = The DLCI of the tunneling PVC. Used as index \\ to TM Class Parameters configuration table.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamMPANLDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(65535, 65535), ValueRangeConstraint(0, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamMPANLDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamMPANLDlciNum.setDescription('NAME = ; DESC = The MPANL DLCI identifying the virtual connection. \\ Used as index to TM Class Parameters configuration \\ table. A value of 65535 indicates that the DLCI number \\ does not exist or is not being used.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamPriority.setDescription('NAME = ; DESC = The emission priority of the class.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamCIR.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamCIR.setDescription('NAME = ; DESC = The committed information rate of the class \\ (in bits/sec). Range is 0 to max bw of the link.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamExcessInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamExcessInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamExcessInfoRate.setDescription('NAME = ; DESC = The excess information rate of the class \\ (in bits/sec). The excess bw required to \\ accommodate momentary bursts of traffic.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamMaxBurstBytesSz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamMaxBurstBytesSz.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamMaxBurstBytesSz.setDescription('NAME = ; DESC = The maximum burst allowed for this class \\ (in bytes).; HELP = ; CAPABILITIES = ;')
mcmTMclassParamMaxBurstFrmSz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamMaxBurstFrmSz.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamMaxBurstFrmSz.setDescription('NAME = ; DESC = The maximum burst allowed for this class \\ (in frames).; HELP = ; CAPABILITIES = ;')
mcmTMclassParamAvgPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamAvgPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamAvgPacketSize.setDescription('NAME = ; DESC = The average packet size that will be transmitted by \\ this class (in bytes).; HELP = ; CAPABILITIES = ;')
mcmTMclassParamMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamMaxPacketSize.setDescription('NAME = ; DESC = The maximum packet size that will be transmitted by \\ this class (in bytes).; HELP = ; CAPABILITIES = ;')
mcmTMclassParamDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamDelta.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamDelta.setDescription('NAME = ; DESC = The delta time used for FECN bit management. \\ Counts of frames received with the FECN bit set \\ and cleared are maintained for this amount of time \\ and are used to increase or decrease throughput \\ rate as per Q.922 Appendix I.; HELP = ; CAPABILITIES = ;')
mcmTMclassParamSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassParamSFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassParamSFrames.setDescription('NAME = ; DESC = The S variable value. This variable, computed as \\ per Q.922 Appendix I, section 1.2.2.1.1, holds the \\ number of consecutive frames received with the \\ BECN bit set which causes a transmit rate reduction. \\ Any range may be specified by the LMI user at the \\ time of the DCLI assignment.; HELP = ; CAPABILITIES = ;')
mcmTMGlobalParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 2))
mcmTmRateEnforcement = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTmRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTmRateEnforcement.setDescription('NAME = ; DESC = Rate Enforcement is either enabled or disabled.; HELP = Is Rate Enforcement enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmTmLineEfficiency = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTmLineEfficiency.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTmLineEfficiency.setDescription('NAME = ; DESC = Line efficiency is either enabled or disabled. \\ If it is enabled, subscribed class will be \\ allowed to send data if no other class has data \\ to transmite and total LINE CIR is not exceeded; HELP = Is Line Efficiency enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmTmWeightedRoundRobin = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTmWeightedRoundRobin.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTmWeightedRoundRobin.setDescription('NAME = ; DESC = Weighted round robin is either enabled or \\ disabled. If it is disabled the packet round \\ robin is used; HELP = Is WRR enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmTMGlobalParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 3))
nvmTmRateEnforcement = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmTmRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTmRateEnforcement.setDescription('NAME = ; DESC = Rate Enforcement is either enabled or disabled.; HELP = Is Rate Enforcement enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmTmLineEfficiency = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmTmLineEfficiency.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTmLineEfficiency.setDescription('NAME = ; DESC = Line efficiency is either enabled or disabled. \\ If it is enabled, subscribed class will be \\ allowed to send data if no other class has data \\ to transmite and total LINE CIR is not exceeded; HELP = Is Line Efficiency enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmTmWeightedRoundRobin = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmTmWeightedRoundRobin.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTmWeightedRoundRobin.setDescription('NAME = ; DESC = Weighted round robin is either enabled or \\ disabled. If it is disabled the packet round \\ robin is used; HELP = Is WRR enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmTMclassStateTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1), )
if mibBuilder.loadTexts: mcmTMclassStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateTable.setDescription('NAME = ; DESC = The Traffic Management Class State \\ table.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcmTMclassStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1), ).setIndexNames((0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassStateSccNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassStateFRDlciNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassStateMPANLDlciNum"))
if mibBuilder.loadTexts: mcmTMclassStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateEntry.setDescription('NAME = ; DESC = An entry in the Traffic Management Class \\ state table.; HELP = ; CAPABILITIES = ;')
mcmTMclassStateSccNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateSccNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateSccNum.setDescription('NAME = ; DESC = The WAN physical port number. Used as index to \\ TM Class state table.; HELP = ; CAPABILITIES = ;')
mcmTMclassStateFRDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateFRDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateFRDlciNum.setDescription('NAME = ; DESC = The DLCI of the tunneling PVC. Used as index \\ to TM Class state table.; HELP = ; CAPABILITIES = ;')
mcmTMclassStateMPANLDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(65535, 65535), ValueRangeConstraint(0, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateMPANLDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateMPANLDlciNum.setDescription('NAME = ; DESC = The MPANL DLCI identifying the virtual connection. \\ Used as index to TM Class state table. \\ A value of 65535 indicates that the DLCI number \\ does not exist or is not being used.; HELP = ; CAPABILITIES = ;')
mcmTMclassStateCurrentInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateCurrentInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateCurrentInfoRate.setDescription('NAME = ; DESC = The current information rate of the class.; HELP = CIR for this VC at this time.; CAPABILITIES = ;')
mcmTMclassStateMinInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateMinInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateMinInfoRate.setDescription('NAME = ; DESC = The minimum information rate of the class.; HELP = Minimum value of CIR for this VC.; CAPABILITIES = ;')
mcmTMclassStateAvgTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateAvgTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateAvgTxRate.setDescription('NAME = ; DESC = The average transmit rate of the class.; HELP = Avg rate of data transmitted in bps on this VC.; CAPABILITIES = ;')
mcmTMclassStateBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateBytesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateBytesQueued.setDescription('NAME = ; DESC = The number of bytes in transmit queue of the class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStateFramesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStateFramesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStateFramesQueued.setDescription('NAME = ; DESC = The number of frames in transmit queue of the class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1), )
if mibBuilder.loadTexts: mcmTMclassStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTable.setDescription('NAME = ; DESC = The Traffic Management Class Statistics \\ table.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcmTMclassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1), ).setIndexNames((0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassStatsSccNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassStatsFRDlciNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMclassStatsMPANLDlciNum"))
if mibBuilder.loadTexts: mcmTMclassStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsEntry.setDescription('NAME = ; DESC = An entry in the Traffic Management Class \\ statistics table.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsSccNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsSccNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsSccNum.setDescription('NAME = ; DESC = The WAN physical port number. Used as index to \\ TM Class statistics table.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsFRDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsFRDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsFRDlciNum.setDescription('NAME = ; DESC = The DLCI of the tunneling PVC. Used as index \\ to TM Class statistics table.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsMPANLDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(65535, 65535), ValueRangeConstraint(0, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsMPANLDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsMPANLDlciNum.setDescription('NAME = ; DESC = The MPANL DLCI identifying the virtual connection. \\ Used as index to TM Class statistics table. \\ A value of 65535 indicates that the DLCI number \\ does not exist or is not being used.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalBytesTx.setDescription('NAME = ; DESC = The total number of bytes transmitted by this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalFramesTx.setDescription('NAME = ; DESC = The total number of frames transmitted by this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalFragsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalFragsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalFragsTx.setDescription('NAME = ; DESC = The total number of fragments transmitted by this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalBytesRx.setDescription('NAME = ; DESC = The total number of bytes received by this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalFramesRx.setDescription('NAME = ; DESC = The total number of frames received by this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalFragsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalFragsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalFragsRx.setDescription('NAME = ; DESC = The total number of fragments received by this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsPktsDiscQueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscQueFull.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscQueFull.setDescription('NAME = ; DESC = The number of packets discarded because the \\ traffic shaping queue was full.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsPktsDiscQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscQueOverflow.setDescription('NAME = ; DESC = The number of packets discarded because the \\ traffic shaping queue was overflown.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsPktsDiscEmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscEmitFail.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscEmitFail.setDescription('NAME = ; DESC = The number of packets discarded because the \\ packet submission to emission queue failed.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsPktsDiscEmitQueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscEmitQueFull.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsPktsDiscEmitQueFull.setDescription('NAME = ; DESC = The number of times an attempt was made to submit \\ the frame to emission queue by TM but the emission \\ queue was found full.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalFecnClearRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalFecnClearRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalFecnClearRcvd.setDescription('NAME = ; DESC = The total number of frames received with FECN bit \\ off for this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalFecnSetRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalFecnSetRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalFecnSetRcvd.setDescription('NAME = ; DESC = The total number of frames received with FECN bit \\ set for this class.; HELP = ; CAPABILITIES = ;')
mcmTMclassStatsTotalBecnRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMclassStatsTotalBecnRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTMclassStatsTotalBecnRcvd.setDescription('NAME = ; DESC = The total number of frames received with BECN bit \\ set for this class.; HELP = ; CAPABILITIES = ;')
mcmTMcntlCounterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4, 1), )
if mibBuilder.loadTexts: mcmTMcntlCounterTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmTMcntlCounterTable.setDescription('NAME = ; DESC = The Traffic Management Control - Counter \\ Reset table.; HELP = This table is used to reset counters in the TM \\ Class Statistics table.; CAPABILITIES = NET_OPER, VPN_OPER ;')
mcmTMcntlCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4, 1, 1), ).setIndexNames((0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMcntlCounterSccNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMcntlCounterFRDlciNum"), (0, "MICOM-TRAFFIC-MGMT-MIB", "mcmTMcntlCounterMPANLDlciNum"))
if mibBuilder.loadTexts: mcmTMcntlCounterEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmTMcntlCounterEntry.setDescription('NAME = ; DESC = An entry (specified by port ID and class ID) in the \\ Traffic Management Control - Counter Reset table.; HELP = ; CAPABILITIES = ;')
mcmTMcntlCounterSccNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMcntlCounterSccNum.setStatus('obsolete')
if mibBuilder.loadTexts: mcmTMcntlCounterSccNum.setDescription('NAME = ; DESC = The WAN physical port number. Used as index to \\ TM Control - counter reset table.; HELP = ; CAPABILITIES = ;')
mcmTMcntlCounterFRDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMcntlCounterFRDlciNum.setStatus('obsolete')
if mibBuilder.loadTexts: mcmTMcntlCounterFRDlciNum.setDescription('NAME = ; DESC = The DLCI of the tunneling PVC. Used as index \\ to TM Control - counter reset table.; HELP = ; CAPABILITIES = ;')
mcmTMcntlCounterMPANLDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTMcntlCounterMPANLDlciNum.setStatus('obsolete')
if mibBuilder.loadTexts: mcmTMcntlCounterMPANLDlciNum.setDescription('NAME = ; DESC = The MPANL DLCI identifying the virtual connection. \\ Used as index to TM Control - counter reset table.; HELP = ; CAPABILITIES = ;')
mcmTMcntlCounterClassStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 27, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmTMcntlCounterClassStatsReset.setStatus('obsolete')
if mibBuilder.loadTexts: mcmTMcntlCounterClassStatsReset.setDescription('NAME = ; DESC = The TM Control - Class Statistics counter reset \\ action command.; HELP = When set to reset (1), the corresponding indexed \\ row of counters in the mcmTMclassStatsTable \\ will be zeroed.; CAPABILITIES = ;')
mibBuilder.exportSymbols("MICOM-TRAFFIC-MGMT-MIB", mcmTMclassParamMaxBurstBytesSz=mcmTMclassParamMaxBurstBytesSz, micom_2tm=micom_2tm, mcmTMclassParamSccNum=mcmTMclassParamSccNum, mcmTMclassStateCurrentInfoRate=mcmTMclassStateCurrentInfoRate, mcmTMclassStateMinInfoRate=mcmTMclassStateMinInfoRate, mcmTMclassParamFRDlciNum=mcmTMclassParamFRDlciNum, tm2_status=tm2_status, mcmTMclassStatsPktsDiscQueOverflow=mcmTMclassStatsPktsDiscQueOverflow, mcmTMclassParamMaxBurstFrmSz=mcmTMclassParamMaxBurstFrmSz, mcmTMclassStateFramesQueued=mcmTMclassStateFramesQueued, mcmTMclassStatsSccNum=mcmTMclassStatsSccNum, mcmTMclassStateMPANLDlciNum=mcmTMclassStateMPANLDlciNum, mcmTMcntlCounterSccNum=mcmTMcntlCounterSccNum, mcmTMcntlCounterFRDlciNum=mcmTMcntlCounterFRDlciNum, mcmTMclassParamEntry=mcmTMclassParamEntry, mcmTMclassStatsTotalFecnClearRcvd=mcmTMclassStatsTotalFecnClearRcvd, mcmTMcntlCounterMPANLDlciNum=mcmTMcntlCounterMPANLDlciNum, mcmTMclassStateSccNum=mcmTMclassStateSccNum, mcmTMclassStatsTable=mcmTMclassStatsTable, mcmTMcntlCounterEntry=mcmTMcntlCounterEntry, nvmTmRateEnforcement=nvmTmRateEnforcement, mcmTMclassStatsEntry=mcmTMclassStatsEntry, mcmTMclassStatsTotalBytesRx=mcmTMclassStatsTotalBytesRx, mcmTMclassStatsTotalFragsRx=mcmTMclassStatsTotalFragsRx, mcmTMclassParamPriority=mcmTMclassParamPriority, mcmTMclassStatsTotalFragsTx=mcmTMclassStatsTotalFragsTx, mcmTMclassStateFRDlciNum=mcmTMclassStateFRDlciNum, mcmTMclassStatsMPANLDlciNum=mcmTMclassStatsMPANLDlciNum, mcmTmWeightedRoundRobin=mcmTmWeightedRoundRobin, mcmTMclassStatsTotalBytesTx=mcmTMclassStatsTotalBytesTx, mcmTMclassStatsPktsDiscEmitQueFull=mcmTMclassStatsPktsDiscEmitQueFull, mcmTMclassStateTable=mcmTMclassStateTable, mcmTMclassParamCIR=mcmTMclassParamCIR, mcmTMclassParamAvgPacketSize=mcmTMclassParamAvgPacketSize, mcmTmRateEnforcement=mcmTmRateEnforcement, mcmTMclassStatsPktsDiscQueFull=mcmTMclassStatsPktsDiscQueFull, mcmTMclassStateEntry=mcmTMclassStateEntry, mcmTMclassStateAvgTxRate=mcmTMclassStateAvgTxRate, mcmTMclassStatsTotalFramesTx=mcmTMclassStatsTotalFramesTx, mcmTMclassParamTable=mcmTMclassParamTable, tm2_configuration=tm2_configuration, mcmTMclassParamSFrames=mcmTMclassParamSFrames, mcmTMclassStatsTotalFramesRx=mcmTMclassStatsTotalFramesRx, tm2_control=tm2_control, mcmTMclassStatsFRDlciNum=mcmTMclassStatsFRDlciNum, mcmTMGlobalParamGroup=mcmTMGlobalParamGroup, nvmTmLineEfficiency=nvmTmLineEfficiency, mcmTMclassParamMaxPacketSize=mcmTMclassParamMaxPacketSize, mcmTMclassStatsTotalFecnSetRcvd=mcmTMclassStatsTotalFecnSetRcvd, mcmTMclassStatsTotalBecnRcvd=mcmTMclassStatsTotalBecnRcvd, mcmTmLineEfficiency=mcmTmLineEfficiency, mcmTMclassStateBytesQueued=mcmTMclassStateBytesQueued, mcmTMclassStatsPktsDiscEmitFail=mcmTMclassStatsPktsDiscEmitFail, nvmTMGlobalParamGroup=nvmTMGlobalParamGroup, nvmTmWeightedRoundRobin=nvmTmWeightedRoundRobin, mcmTMclassParamMPANLDlciNum=mcmTMclassParamMPANLDlciNum, tm2_statistics=tm2_statistics, mcmTMcntlCounterTable=mcmTMcntlCounterTable, mcmTMcntlCounterClassStatsReset=mcmTMcntlCounterClassStatsReset, mcmTMclassParamDelta=mcmTMclassParamDelta, mcmTMclassParamExcessInfoRate=mcmTMclassParamExcessInfoRate)
