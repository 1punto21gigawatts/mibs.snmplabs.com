#
# PySNMP MIB module WWP-PORT-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-PORT-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, TimeTicks, IpAddress, NotificationType, Integer32, ModuleIdentity, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "TimeTicks", "IpAddress", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Gauge32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpPortStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 16))
wwpPortStatsMIB.setRevisions(('2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpPortStatsMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpPortStatsMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpPortStatsMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpPortStatsMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpPortStatsMIB.setDescription('The MIB module for the WWP Port ether Stats.')
wwpPortStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1))
wwpPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1))
wwpPortStatsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 2))
wwpPortStatsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 2, 0))
wwpPortStatsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 3))
wwpPortStatsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 3, 1))
wwpPortStatsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 16, 3, 2))
wwpPortStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpPortStatsReset.setStatus('deprecated')
if mibBuilder.loadTexts: wwpPortStatsReset.setDescription("To reset the counters related to this port. A read on this object will always return the 'none'.")
wwpPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2), )
if mibBuilder.loadTexts: wwpPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTable.setDescription('The table specifying the stats for the ports.')
wwpPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1), ).setIndexNames((0, "WWP-PORT-STATS-MIB", "wwpPortStatsPortId"))
if mibBuilder.loadTexts: wwpPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsEntry.setDescription('An entry in the port stats table.')
wwpPortStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortId.setDescription('The Id of the port for which this entry contains the stats.')
wwpPortStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsRxBytes.setDescription('The number of bytes received by this port.')
wwpPortStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsRxPkts.setDescription('The number of packets received by this port.')
wwpPortStatsRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsRxCrcErrorPkts.setDescription('The number of packets received with CRC errors by this port.')
wwpPortStatsRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsRxBcastPkts.setDescription('The number of Broadcast packets received by this port.')
wwpPortStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsUndersizePkts.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpPortStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsOversizePkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpPortStatsFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsFragmentPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsFragmentPkts.setDescription('The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpPortStatsJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsJabberPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsJabberPkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpPortStats64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStats64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStats64BytePkts.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets).')
wwpPortStats65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStats65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStats65To127BytePkts.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpPortStats128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStats128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStats128To255BytePkts.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpPortStats256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStats256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStats256To511BytePkts.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpPortStats512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStats512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStats512To1023BytePkts.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpPortStats1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStats1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStats1024To1518BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpPortStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxBytes.setDescription('The number of Octets transmitted for this port.')
wwpPortStatsTxTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxTBytes.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxTBytes.setDescription('The total number of Octets transmitted for this port.')
wwpPortStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxPkts.setDescription('The total number of packets transmitted for this port.')
wwpPortStatsTxExDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxExDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxExDeferPkts.setDescription('The transmit excessive defer packet count for a port.')
wwpPortStatsTxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxGiantPkts.setDescription('The transmit too big packet count for a port.')
wwpPortStatsTxUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxUnderRunPkts.setDescription('The transmit underrun packet count for a port.')
wwpPortStatsTxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxCrcErrorPkts.setDescription('The transmit CRC error packet count for a port.')
wwpPortStatsTxLCheckErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxLCheckErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxLCheckErrorPkts.setDescription('The transmit length check error packet count for a port.')
wwpPortStatsTxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxLOutRangePkts.setDescription('The transmit length out of range packet count for a port.')
wwpPortStatsTxLateCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxLateCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxLateCollPkts.setDescription('The transmit late collision packet count for a port.')
wwpPortStatsTxExCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxExCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxExCollPkts.setDescription('The transmit excessive collision packet count for a port.')
wwpPortStatsTxSingleCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxSingleCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxSingleCollPkts.setDescription('The transmit single collision packet count for a port.')
wwpPortStatsTxCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsTxCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsTxCollPkts.setDescription('The transmit collision packet count for a port.')
wwpPortStatsXTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 3), )
if mibBuilder.loadTexts: wwpPortStatsXTable.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsXTable.setDescription('The table extending the stats for the ports to 64 bits.')
wwpPortStatsXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 3, 1), ).setIndexNames((0, "WWP-PORT-STATS-MIB", "wwpPortStatsPortId"))
if mibBuilder.loadTexts: wwpPortStatsXEntry.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsXEntry.setDescription('An entry in the port stats extension table.')
wwpPortStatsXRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsXRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsXRxBytes.setDescription('The number of bytes received by this port.')
wwpPortStatsXRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsXRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsXRxPkts.setDescription('The number of packets received by this port.')
wwpPortStatsXTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsXTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsXTxBytes.setDescription('The total number of Bytes transmitted for this port.')
wwpPortStatsXTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsXTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsXTxPkts.setDescription('The total number of packets transmitted for this port.')
wwpPortStatsPortalTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4), )
if mibBuilder.loadTexts: wwpPortStatsPortalTable.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalTable.setDescription('The table extending the statistic counters for the ports to 64 bits.')
wwpPortStatsPortalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1), ).setIndexNames((0, "WWP-PORT-STATS-MIB", "wwpPortStatsPortalPortId"))
if mibBuilder.loadTexts: wwpPortStatsPortalEntry.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalEntry.setDescription('An entry in the port stats extension table.')
wwpPortStatsPortalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalPortId.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalPortId.setDescription('The Id of the port for which this entry contains the stats.')
wwpPortStatsPortalBytesSentHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalBytesSentHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalBytesSentHi.setDescription('The number of bytes sent from this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalBytesSentLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalBytesSentLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalBytesSentLo.setDescription('The number of bytes sent from this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalFlowControlHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlHi.setDescription('The number of Flow Control frames sent from this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalFlowControlLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlLo.setDescription('The number of Flow Control frames sent from this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalUnicastFramesSentHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalUnicastFramesSentHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalUnicastFramesSentHi.setDescription('The number of Unicast Frames sent from this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalUnicastFramesSentLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalUnicastFramesSentLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalUnicastFramesSentLo.setDescription('The number of Unicast Frames sent from this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalAlignmentErrorHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalAlignmentErrorHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalAlignmentErrorHi.setDescription('A count of frames that are not an integral number of octets in length and do not pass the FCS check. This counter is incremented when the Receive-Status is reported as Alignment-Error. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalAlignmentErrorLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalAlignmentErrorLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalAlignmentErrorLo.setDescription('The number of frames that are not an integral number of octets in length and do not pass the FCS check. This counter is incremented when the Receive-Status is reported as Alignment-Error. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalNonUnicastFramesSentHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalNonUnicastFramesSentHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalNonUnicastFramesSentHi.setDescription('The number of non-unicast frames sent from this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalNonUnicastFramesSentLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalNonUnicastFramesSentLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalNonUnicastFramesSentLo.setDescription('The number of non-unicast frames sent from this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalTotalBytesRecievedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalTotalBytesRecievedHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalTotalBytesRecievedHi.setDescription('The total number of bytes recieved on this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalTotalBytesRecievedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalTotalBytesRecievedLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalTotalBytesRecievedLo.setDescription('The total number of bytes recieved on this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalFlowControlFramesRecievedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlFramesRecievedHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlFramesRecievedHi.setDescription('The number of flow control frames recieved. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalFlowControlFramesRecievedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlFramesRecievedLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFlowControlFramesRecievedLo.setDescription('The number of flow control frames recieved. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalTotalFramesRecievedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalTotalFramesRecievedHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalTotalFramesRecievedHi.setDescription('The total number of frames recieved on this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalTotalFramesRecievedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalTotalFramesRecievedLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalTotalFramesRecievedLo.setDescription('The total number of frames recieved on this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalBroadcastFramesRecievedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalBroadcastFramesRecievedHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalBroadcastFramesRecievedHi.setDescription('The number of broadcast frames recieved on this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalBroadcastFramesRecievedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalBroadcastFramesRecievedLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalBroadcastFramesRecievedLo.setDescription('The number of broadcast frames recieved on this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalMulticastFramesRecievedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalMulticastFramesRecievedHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalMulticastFramesRecievedHi.setDescription('The number of multicast frames recieved on this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalMulticastFramesRecievedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalMulticastFramesRecievedLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalMulticastFramesRecievedLo.setDescription('The number of multicast frames recieved on this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalJabberFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalJabberFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalJabberFramesHi.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalJabberFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalJabberFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalJabberFramesLo.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortal64ByteFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal64ByteFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal64ByteFramesHi.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets). This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortal64ByteFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal64ByteFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal64ByteFramesLo.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets). This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalOversizeFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalOversizeFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalOversizeFramesHi.setDescription('')
wwpPortStatsPortalOversizeFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalOversizeFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalOversizeFramesLo.setDescription('')
wwpPortStatsPortal65To127ByteFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal65To127ByteFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal65To127ByteFramesHi.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortal65To127ByteFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal65To127ByteFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal65To127ByteFramesLo.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortal256To511ByteFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal256To511ByteFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal256To511ByteFramesHi.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortal256To511ByteFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal256To511ByteFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal256To511ByteFramesLo.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortal128To255ByteFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal128To255ByteFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal128To255ByteFramesHi.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortal128To255ByteFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal128To255ByteFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal128To255ByteFramesLo.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortal1024To1528ByteFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal1024To1528ByteFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal1024To1528ByteFramesHi.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1528 octets in length inclusive (excluding framing bits but including FCS octets) This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortal1024To1528ByteFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal1024To1528ByteFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal1024To1528ByteFramesLo.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1528 octets in length inclusive (excluding framing bits but including FCS octets) This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortal512To1023ByteFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal512To1023ByteFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal512To1023ByteFramesHi.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortal512To1023ByteFrameslo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortal512To1023ByteFrameslo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortal512To1023ByteFrameslo.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets). This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalFragmentHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFragmentHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFragmentHi.setDescription('The number of fragmented frames recieved by this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalFragmentLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFragmentLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFragmentLo.setDescription('The number of fragmented frames recieved by this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalUndersizeFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalUndersizeFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalUndersizeFramesHi.setDescription('The number of undersized frames recieved by this port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalUndersizeFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalUndersizeFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalUndersizeFramesLo.setDescription('The number of undersized frames recieved by this port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalShortEventHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalShortEventHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalShortEventHi.setDescription('Short event counter. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalShortEventLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalShortEventLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalShortEventLo.setDescription('Short event counter. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalCRCHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalCRCHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalCRCHi.setDescription('The number of CRC error frames recieved by a given port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalCRCLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalCRCLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalCRCLo.setDescription('The number of CRC error frames recieved by a given port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalDroppedFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalDroppedFramesHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalDroppedFramesHi.setDescription('The number of frames dropped by a given port. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalDroppedFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalDroppedFramesLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalDroppedFramesLo.setDescription('The number of frames dropped by a given port. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalCollisionHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalCollisionHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalCollisionHi.setDescription('The number of frames that are involved in a collision. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalCollisionLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalCollisionLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalCollisionLo.setDescription('The number of frames that are involved in a collision. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalLateCollisionHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalLateCollisionHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalLateCollisionHi.setDescription('A count of the times that a collision has been detected later than 512 bit times into the transmitted packet. A late collision is counted twice, i.e., both as a collision and as a late-collision. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalLateCollisionLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalLateCollisionLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalLateCollisionLo.setDescription('A count of the times that a collision has been detected later than 512 bit times into the transmitted packet. A late collision is counted twice, i.e., both as a collision and as a late-collision. This element represents the lower 32-bits of a 64-bit counter.')
wwpPortStatsPortalFilteringCounterHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFilteringCounterHi.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFilteringCounterHi.setDescription('Filtering counter. This element represents the upper 32-bits of a 64-bit counter.')
wwpPortStatsPortalFilteringCounterLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 16, 1, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPortStatsPortalFilteringCounterLo.setStatus('current')
if mibBuilder.loadTexts: wwpPortStatsPortalFilteringCounterLo.setDescription('Filtering counter. This element represents the lower 32-bits of a 64-bit counter.')
mibBuilder.exportSymbols("WWP-PORT-STATS-MIB", wwpPortStatsPortalNonUnicastFramesSentHi=wwpPortStatsPortalNonUnicastFramesSentHi, wwpPortStatsPortalMulticastFramesRecievedLo=wwpPortStatsPortalMulticastFramesRecievedLo, wwpPortStatsPortalTotalBytesRecievedHi=wwpPortStatsPortalTotalBytesRecievedHi, wwpPortStatsReset=wwpPortStatsReset, wwpPortStatsPortalUnicastFramesSentLo=wwpPortStatsPortalUnicastFramesSentLo, wwpPortStatsXRxBytes=wwpPortStatsXRxBytes, wwpPortStats64BytePkts=wwpPortStats64BytePkts, wwpPortStatsTxExCollPkts=wwpPortStatsTxExCollPkts, wwpPortStatsPortal64ByteFramesLo=wwpPortStatsPortal64ByteFramesLo, wwpPortStatsTxExDeferPkts=wwpPortStatsTxExDeferPkts, wwpPortStatsTxBytes=wwpPortStatsTxBytes, wwpPortStatsPortal512To1023ByteFramesHi=wwpPortStatsPortal512To1023ByteFramesHi, wwpPortStatsMIBCompliances=wwpPortStatsMIBCompliances, wwpPortStatsTxCollPkts=wwpPortStatsTxCollPkts, wwpPortStatsPortalCRCHi=wwpPortStatsPortalCRCHi, wwpPortStatsXTable=wwpPortStatsXTable, wwpPortStatsPortalLateCollisionHi=wwpPortStatsPortalLateCollisionHi, wwpPortStatsPortalTotalBytesRecievedLo=wwpPortStatsPortalTotalBytesRecievedLo, wwpPortStats128To255BytePkts=wwpPortStats128To255BytePkts, wwpPortStatsTxTBytes=wwpPortStatsTxTBytes, wwpPortStatsMIBNotificationPrefix=wwpPortStatsMIBNotificationPrefix, wwpPortStatsPortalFlowControlHi=wwpPortStatsPortalFlowControlHi, wwpPortStatsXEntry=wwpPortStatsXEntry, wwpPortStatsPortalCollisionHi=wwpPortStatsPortalCollisionHi, wwpPortStatsPortalAlignmentErrorLo=wwpPortStatsPortalAlignmentErrorLo, wwpPortStatsPortalFragmentHi=wwpPortStatsPortalFragmentHi, wwpPortStatsMIBNotifications=wwpPortStatsMIBNotifications, wwpPortStats512To1023BytePkts=wwpPortStats512To1023BytePkts, wwpPortStatsPortalUndersizeFramesLo=wwpPortStatsPortalUndersizeFramesLo, wwpPortStatsPortalUnicastFramesSentHi=wwpPortStatsPortalUnicastFramesSentHi, wwpPortStatsRxCrcErrorPkts=wwpPortStatsRxCrcErrorPkts, wwpPortStats256To511BytePkts=wwpPortStats256To511BytePkts, wwpPortStatsTable=wwpPortStatsTable, wwpPortStatsPortalFragmentLo=wwpPortStatsPortalFragmentLo, wwpPortStatsPortal64ByteFramesHi=wwpPortStatsPortal64ByteFramesHi, wwpPortStatsPortalNonUnicastFramesSentLo=wwpPortStatsPortalNonUnicastFramesSentLo, wwpPortStatsPortalJabberFramesLo=wwpPortStatsPortalJabberFramesLo, wwpPortStatsPortalFilteringCounterLo=wwpPortStatsPortalFilteringCounterLo, wwpPortStatsFragmentPkts=wwpPortStatsFragmentPkts, wwpPortStatsPortalMulticastFramesRecievedHi=wwpPortStatsPortalMulticastFramesRecievedHi, wwpPortStatsPortal128To255ByteFramesLo=wwpPortStatsPortal128To255ByteFramesLo, wwpPortStatsPortalFlowControlLo=wwpPortStatsPortalFlowControlLo, wwpPortStatsOversizePkts=wwpPortStatsOversizePkts, wwpPortStatsPortalEntry=wwpPortStatsPortalEntry, wwpPortStatsPortalCollisionLo=wwpPortStatsPortalCollisionLo, wwpPortStatsTxSingleCollPkts=wwpPortStatsTxSingleCollPkts, wwpPortStatsPortalFlowControlFramesRecievedLo=wwpPortStatsPortalFlowControlFramesRecievedLo, wwpPortStatsXRxPkts=wwpPortStatsXRxPkts, wwpPortStatsPortalDroppedFramesLo=wwpPortStatsPortalDroppedFramesLo, wwpPortStatsXTxBytes=wwpPortStatsXTxBytes, wwpPortStatsPortal256To511ByteFramesHi=wwpPortStatsPortal256To511ByteFramesHi, wwpPortStatsPortalUndersizeFramesHi=wwpPortStatsPortalUndersizeFramesHi, wwpPortStatsPortalBroadcastFramesRecievedHi=wwpPortStatsPortalBroadcastFramesRecievedHi, wwpPortStatsTxLCheckErrorPkts=wwpPortStatsTxLCheckErrorPkts, wwpPortStats=wwpPortStats, wwpPortStatsPortal1024To1528ByteFramesHi=wwpPortStatsPortal1024To1528ByteFramesHi, wwpPortStatsMIB=wwpPortStatsMIB, wwpPortStatsPortalFilteringCounterHi=wwpPortStatsPortalFilteringCounterHi, wwpPortStatsTxGiantPkts=wwpPortStatsTxGiantPkts, wwpPortStatsPortalFlowControlFramesRecievedHi=wwpPortStatsPortalFlowControlFramesRecievedHi, wwpPortStatsPortalOversizeFramesHi=wwpPortStatsPortalOversizeFramesHi, wwpPortStatsTxCrcErrorPkts=wwpPortStatsTxCrcErrorPkts, wwpPortStatsJabberPkts=wwpPortStatsJabberPkts, wwpPortStatsUndersizePkts=wwpPortStatsUndersizePkts, wwpPortStatsPortal65To127ByteFramesHi=wwpPortStatsPortal65To127ByteFramesHi, wwpPortStatsPortal1024To1528ByteFramesLo=wwpPortStatsPortal1024To1528ByteFramesLo, wwpPortStatsRxBytes=wwpPortStatsRxBytes, wwpPortStatsPortalDroppedFramesHi=wwpPortStatsPortalDroppedFramesHi, wwpPortStatsTxLateCollPkts=wwpPortStatsTxLateCollPkts, wwpPortStatsPortal256To511ByteFramesLo=wwpPortStatsPortal256To511ByteFramesLo, wwpPortStatsPortalOversizeFramesLo=wwpPortStatsPortalOversizeFramesLo, PYSNMP_MODULE_ID=wwpPortStatsMIB, wwpPortStatsPortalTotalFramesRecievedLo=wwpPortStatsPortalTotalFramesRecievedLo, wwpPortStatsMIBConformance=wwpPortStatsMIBConformance, wwpPortStatsPortalLateCollisionLo=wwpPortStatsPortalLateCollisionLo, wwpPortStatsMIBObjects=wwpPortStatsMIBObjects, wwpPortStatsPortalBytesSentLo=wwpPortStatsPortalBytesSentLo, wwpPortStatsRxPkts=wwpPortStatsRxPkts, wwpPortStatsPortal512To1023ByteFrameslo=wwpPortStatsPortal512To1023ByteFrameslo, wwpPortStatsEntry=wwpPortStatsEntry, wwpPortStatsMIBGroups=wwpPortStatsMIBGroups, wwpPortStatsPortalShortEventLo=wwpPortStatsPortalShortEventLo, wwpPortStatsPortalTable=wwpPortStatsPortalTable, wwpPortStatsPortalBytesSentHi=wwpPortStatsPortalBytesSentHi, wwpPortStatsPortal128To255ByteFramesHi=wwpPortStatsPortal128To255ByteFramesHi, wwpPortStatsPortal65To127ByteFramesLo=wwpPortStatsPortal65To127ByteFramesLo, wwpPortStats65To127BytePkts=wwpPortStats65To127BytePkts, wwpPortStatsPortalAlignmentErrorHi=wwpPortStatsPortalAlignmentErrorHi, wwpPortStatsTxLOutRangePkts=wwpPortStatsTxLOutRangePkts, wwpPortStatsPortalShortEventHi=wwpPortStatsPortalShortEventHi, wwpPortStatsTxPkts=wwpPortStatsTxPkts, wwpPortStatsPortalJabberFramesHi=wwpPortStatsPortalJabberFramesHi, wwpPortStatsPortalCRCLo=wwpPortStatsPortalCRCLo, wwpPortStatsXTxPkts=wwpPortStatsXTxPkts, wwpPortStatsPortId=wwpPortStatsPortId, wwpPortStatsPortalPortId=wwpPortStatsPortalPortId, wwpPortStats1024To1518BytePkts=wwpPortStats1024To1518BytePkts, wwpPortStatsPortalTotalFramesRecievedHi=wwpPortStatsPortalTotalFramesRecievedHi, wwpPortStatsPortalBroadcastFramesRecievedLo=wwpPortStatsPortalBroadcastFramesRecievedLo, wwpPortStatsTxUnderRunPkts=wwpPortStatsTxUnderRunPkts, wwpPortStatsRxBcastPkts=wwpPortStatsRxBcastPkts)
