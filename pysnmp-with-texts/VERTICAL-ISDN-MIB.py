#
# PySNMP MIB module VERTICAL-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERTICAL-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EntryStatus, = mibBuilder.importSymbols("RFC1271-MIB", "EntryStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Bits, Counter32, iso, ObjectIdentity, NotificationType, transmission, Gauge32, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Bits", "Counter32", "iso", "ObjectIdentity", "NotificationType", "transmission", "Gauge32", "TimeTicks", "Integer32")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
vertical, = mibBuilder.importSymbols("VERTICALT1-E1-MIB", "vertical")
class IsdnSignalingProtocol(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 10, 263))
    namedValues = NamedValues(("other", 1), ("ess4", 5), ("ess5", 6), ("dms100", 7), ("ni2", 10), ("dms100s100", 263))

class TestAndIncr(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

visdnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 5))
visdnBearerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 5, 2))
visdnBearerTable = MibTable((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1), )
if mibBuilder.loadTexts: visdnBearerTable.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerTable.setDescription('This table defines port specific operational, statistics and active call data for ISDN B channels. Each entry in this table describes one B (bearer) channel.')
visdnBearerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: visdnBearerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerEntry.setDescription('Operational and statistics information relating to one port. A port is a single B channel.')
visdnBearerChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialup", 1), ("leased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerChannelType.setDescription('The B channel type. If the B channel is connected to a dialup line, this object has a value of dialup(1). In this case, it is controlled by an associated signaling channel. If the B channel is connected to a leased line, this object has a value of leased(2). For leased line B channels, there is no signaling channel control available.')
visdnBearerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("connected", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerOperStatus.setDescription('The current call control state for this port. idle(1): The B channel is idle. No call or call attempt is going on. connecting(2): A connection attempt (outgoing call) is being made on this interface. connected(3): An incoming call is in the process of validation. active(4): A call is active on this interface.')
visdnBearerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerChannelNumber.setDescription('The identifier being used by a signaling protocol to identify this B channel, also referred to as B channel number. If the Agent also supports the DS0 MIB, the values of visdnBearerChannelNumber and dsx0Ds0Number must be identical for a given B channel.')
visdnBearerPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerPeerAddress.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: visdnBearerPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerPeerAddress.setDescription("The ISDN address the current or last call is or was connected to. In some cases, the format of this information can not be predicted, since it largely depends on the type of switch or PBX the device is connected to. Therefore, the detailed format of this information is not specified and is implementation dependent. If possible, the agent should supply this information using the E.164 format. In this case, the number must start with '+'. Otherwise, IA5 number digits must be used. If the peer ISDN address is not available, this object has a length of zero.")
visdnBearerPeerSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerPeerSubAddress.setReference('ITU-T I.330, Q.931 chapter 4.5.11')
if mibBuilder.loadTexts: visdnBearerPeerSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerPeerSubAddress.setDescription('The ISDN subaddress the current or last call is or was connected to. The subaddress is an user supplied string of up to 20 IA5 characters and is transmitted transparently through the network. If the peer subaddress is not available, this object has a length of zero.')
visdnBearerCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("originate", 2), ("answer", 3), ("callback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerCallOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerCallOrigin.setDescription('The call origin for the current or last call. If since system startup there was no call on this interface, this object has a value of unknown(1).')
visdnBearerInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerInfoType.setReference('Q.931 [8], chapter 4.5.5, octet 3 of bearer capability information element, combined with the User Rate (as defined in octets 5 and 5a to 5d), if rate adaption is being used.')
if mibBuilder.loadTexts: visdnBearerInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerInfoType.setDescription("The Information Transfer Capability for the current or last call. speech(2) refers to a non-data connection, whereas audio31(6) and audio7(7) refer to data mode connections. Note that Q.931, chapter 4.5.5, originally defined audio7(7) as '7 kHz audio' and now defines it as 'Unrestricted digital information with tones/ announcements'. If since system startup there has been no call on this interface, this object has a value of unknown(1).")
visdnBearerMultirate = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerMultirate.setReference('Q.931 [8], chapter 4.5.5.')
if mibBuilder.loadTexts: visdnBearerMultirate.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerMultirate.setDescription('This flag indicates if the current or last call used multirate. The actual information transfer rate, in detail specified in octet 4.1 (rate multiplier), is the sum of all B channel ifSpeed values for the hyperchannel. If since system startup there was no call on this interface, this object has a value of false(2).')
visdnBearerCallSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerCallSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerCallSetupTime.setDescription('The value of sysUpTime when the ISDN setup message for the current or last call was sent or received. If since system startup there has been no call on this interface, this object has a value of zero.')
visdnBearerCallConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerCallConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerCallConnectTime.setDescription('The value of sysUpTime when the ISDN connect message for the current or last call was sent or received. If since system startup there has been no call on this interface, this object has a value of zero.')
visdnBearerChargedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnBearerChargedUnits.setStatus('mandatory')
if mibBuilder.loadTexts: visdnBearerChargedUnits.setDescription('The number of charged units for the current or last connection. For incoming calls or if charging information is not supplied by the switch, the value of this object is zero.')
visdnSignalingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 5, 3))
visdnSignalingGetIndex = MibScalar((1, 3, 6, 1, 4, 1, 2338, 5, 3, 1), TestAndIncr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingGetIndex.setReference('RFC1903, TestAndIncr textual convention.')
if mibBuilder.loadTexts: visdnSignalingGetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingGetIndex.setDescription('The recommended procedure for selecting a new index for visdnSignalingTable row creation is to GET the value of this object, and then to SET the object with the same value. If the SET operation succeeds, the manager can use this value as an index to create a new row in this table.')
visdnSignalingTable = MibTable((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2), )
if mibBuilder.loadTexts: visdnSignalingTable.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingTable.setDescription('ISDN signaling table containing configuration and operational parameters for all ISDN signaling channels on this managed device.')
visdnSignalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1), ).setIndexNames((0, "VERTICAL-ISDN-MIB", "visdnSignalingIndex"))
if mibBuilder.loadTexts: visdnSignalingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingEntry.setDescription('An entry in the ISDN Signaling Table. To create a new entry, only visdnSignalingProtocol needs to be specified before visdnSignalingStatus can become valid(1).')
visdnSignalingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: visdnSignalingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingIndex.setDescription('The index value which uniquely identifies an entry in the visdnSignalingTable.')
visdnSignalingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingIfIndex.setDescription('The ifIndex value of the interface associated with this signaling channel.')
visdnSignalingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 3), IsdnSignalingProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingProtocol.setDescription('The particular protocol type supported by the switch providing access to the ISDN network to which this signaling channel is connected.')
visdnSignalingCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingCallingAddress.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: visdnSignalingCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingCallingAddress.setDescription("The ISDN Address to be assigned to this signaling channel. More specifically, this is the 'Calling Address information element' as being passed to the switch in outgoing call setup messages. It can be an EAZ (1TR6), a calling number (DSS1, ETSI) or any other number necessary to identify a signaling interface. If there is no such number defined or required, this is a zero length string. It is represented in DisplayString form. Incoming calls can also be identified by this number. If the Directory Number, i.e. the Called Number in incoming calls, is different to this number, the visdnDirectoryTable has to be used to specify all possible Directory Numbers. The format of this information largely depends on the type of switch or PBX the device is connected to. Therefore, the detailed format of this information is not specified and is implementation dependent. If possible, the agent should implement this information using the E.164 number format. In this case, the number must start with '+'. Otherwise, IA5 number digits must be used.")
visdnSignalingSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingSubAddress.setReference('ITU-T I.330, Q.931 chapter 4.5.11')
if mibBuilder.loadTexts: visdnSignalingSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingSubAddress.setDescription('Supplementary information to the ISDN address assigned to this signaling channel. Usually, this is the subaddress as defined in Q.931. If there is no such number defined or required, this is a zero length string. The subaddress is used for incoming calls as well as for outgoing calls. The subaddress is an user supplied string of up to 20 IA5 characters and is transmitted transparently through the network.')
visdnSignalingBchannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingBchannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingBchannelCount.setDescription('The total number of B channels (bearer channels) managed by this signaling channel. The default value of this object depends on the physical interface type and is either 2 for Basic Rate interfaces or 24 (30) for Primary Rate interfaces.')
visdnSignalingInfoTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingInfoTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingInfoTrapEnable.setDescription('Indicates whether visdnMibCallInformation traps should be generated for calls on this signaling channel.')
visdnSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 2, 1, 8), EntryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSignalingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingStatus.setDescription('This object is used to create and delete rows in the visdnSignalingTable.')
visdnSignalingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3), )
if mibBuilder.loadTexts: visdnSignalingStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingStatsTable.setDescription('ISDN signaling table containing statistics information for all ISDN signaling channels on this managed device. Only statistical information which is not already being counted in the ifTable is being defined in this table.')
visdnSignalingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3, 1), ).setIndexNames((0, "VERTICAL-ISDN-MIB", "visdnSignalingIndex"))
if mibBuilder.loadTexts: visdnSignalingStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSignalingStatsEntry.setDescription('An entry in the ISDN Signaling statistics Table.')
visdnSigStatsInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSigStatsInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSigStatsInCalls.setDescription('The number of incoming calls on this interface.')
visdnSigStatsInConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSigStatsInConnected.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSigStatsInConnected.setDescription('The number of incoming calls on this interface which were actually connected.')
visdnSigStatsOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSigStatsOutCalls.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSigStatsOutCalls.setDescription('The number of outgoing calls on this interface.')
visdnSigStatsOutConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSigStatsOutConnected.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSigStatsOutConnected.setDescription('The number of outgoing calls on this interface which were actually connected.')
visdnSigStatsChargedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnSigStatsChargedUnits.setStatus('mandatory')
if mibBuilder.loadTexts: visdnSigStatsChargedUnits.setDescription("The number of charging units on this interface since system startup. Only the charging units applying to the local interface, i.e. for originated calls or for calls with 'Reverse charging' being active, are counted here.")
visdnLapdTable = MibTable((1, 3, 6, 1, 4, 1, 2338, 5, 3, 4), )
if mibBuilder.loadTexts: visdnLapdTable.setStatus('mandatory')
if mibBuilder.loadTexts: visdnLapdTable.setDescription('Table containing configuration and statistics information for all LAPD (D channel Data Link) interfaces on this managed device. Only statistical information which is not already being counted in the ifTable is being defined in this table.')
visdnLapdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2338, 5, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: visdnLapdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: visdnLapdEntry.setDescription('An entry in the LAPD Table.')
visdnLapdPrimaryChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnLapdPrimaryChannel.setReference('Q.931 [8], Annex F, D channel backup procedures.')
if mibBuilder.loadTexts: visdnLapdPrimaryChannel.setStatus('mandatory')
if mibBuilder.loadTexts: visdnLapdPrimaryChannel.setDescription('If set to true(1), this D channel is the designated primary D channel if D channel backup is active. There must be exactly one primary D channel configured. If D channel backup is not used, this object has a value of true(1).')
visdnLapdOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("l1Active", 2), ("l2Active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnLapdOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: visdnLapdOperStatus.setDescription('The operational status of this interface: inactive all layers are inactive l1Active layer 1 is activated, layer 2 datalink not established l2Active layer 1 is activated, layer 2 datalink established.')
visdnLapdPeerSabme = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnLapdPeerSabme.setStatus('mandatory')
if mibBuilder.loadTexts: visdnLapdPeerSabme.setDescription('The number of peer SABME frames received on this interface. This is the number of peer-initiated new connections on this interface.')
visdnLapdRecvdFrmr = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: visdnLapdRecvdFrmr.setStatus('mandatory')
if mibBuilder.loadTexts: visdnLapdRecvdFrmr.setDescription('The number of LAPD FRMR response frames received. This is the number of framing errors on this interface.')
mibBuilder.exportSymbols("VERTICAL-ISDN-MIB", visdnLapdEntry=visdnLapdEntry, visdnBearerEntry=visdnBearerEntry, visdnSignalingGetIndex=visdnSignalingGetIndex, visdnSigStatsInConnected=visdnSigStatsInConnected, visdnSigStatsOutConnected=visdnSigStatsOutConnected, visdnSignalingStatsTable=visdnSignalingStatsTable, visdnSignalingInfoTrapEnable=visdnSignalingInfoTrapEnable, visdnBearerCallConnectTime=visdnBearerCallConnectTime, visdnLapdPrimaryChannel=visdnLapdPrimaryChannel, visdnBearerPeerAddress=visdnBearerPeerAddress, visdnSigStatsInCalls=visdnSigStatsInCalls, visdnBearerTable=visdnBearerTable, visdnBearerChargedUnits=visdnBearerChargedUnits, visdnSignalingIndex=visdnSignalingIndex, visdnSignalingProtocol=visdnSignalingProtocol, visdnLapdRecvdFrmr=visdnLapdRecvdFrmr, TruthValue=TruthValue, visdnSignalingIfIndex=visdnSignalingIfIndex, visdnBearerMultirate=visdnBearerMultirate, visdnBearerCallSetupTime=visdnBearerCallSetupTime, visdnSigStatsOutCalls=visdnSigStatsOutCalls, visdnSigStatsChargedUnits=visdnSigStatsChargedUnits, visdnBearerPeerSubAddress=visdnBearerPeerSubAddress, visdnBearerOperStatus=visdnBearerOperStatus, visdnSignalingBchannelCount=visdnSignalingBchannelCount, TestAndIncr=TestAndIncr, visdnBearerInfoType=visdnBearerInfoType, visdnLapdPeerSabme=visdnLapdPeerSabme, visdnSignalingSubAddress=visdnSignalingSubAddress, visdnSignalingCallingAddress=visdnSignalingCallingAddress, visdnSignalingGroup=visdnSignalingGroup, visdnSignalingStatus=visdnSignalingStatus, visdnBearerCallOrigin=visdnBearerCallOrigin, visdnBearerChannelNumber=visdnBearerChannelNumber, IsdnSignalingProtocol=IsdnSignalingProtocol, visdnSignalingTable=visdnSignalingTable, visdnBearerChannelType=visdnBearerChannelType, visdnSignalingStatsEntry=visdnSignalingStatsEntry, visdnLapdOperStatus=visdnLapdOperStatus, visdnSignalingEntry=visdnSignalingEntry, visdnBearerGroup=visdnBearerGroup, visdnLapdTable=visdnLapdTable, visdnMibObjects=visdnMibObjects)
