#
# PySNMP MIB module OPTIX-SONET-PATH-MIB-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPTIX-SONET-PATH-MIB-V2
# Produced by pysmi-0.3.4 at Wed May  1 14:35:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
optixProvisionSonet, = mibBuilder.importSymbols("OPTIX-OID-MIB", "optixProvisionSonet")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, IpAddress, Bits, Counter64, Counter32, iso, NotificationType, Integer32, Unsigned32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "IpAddress", "Bits", "Counter64", "Counter32", "iso", "NotificationType", "Integer32", "Unsigned32", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
optixsonetPathAttrib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5))
if mibBuilder.loadTexts: optixsonetPathAttrib.setLastUpdated('200605261729Z')
if mibBuilder.loadTexts: optixsonetPathAttrib.setOrganization('Your organization')
if mibBuilder.loadTexts: optixsonetPathAttrib.setContactInfo('Your contact info')
if mibBuilder.loadTexts: optixsonetPathAttrib.setDescription('Enter the description for this MIB module.')
class C2Value(TextualConvention, Integer32):
    description = 'Enter the description for the C2Value TEXTUAL-CONVENTION converted from type assignment.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 18, 19, 20, 21, 22, 24, 27, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 65534))
    namedValues = NamedValues(("eqpd", 1), ("vt-sts1", 2), ("lock-vt", 3), ("ds3", 4), ("ds4na", 18), ("atm", 19), ("dqdb", 20), ("fddi", 21), ("hdlc-over-sonet", 22), ("laps", 24), ("gfp", 27), ("pdi-1", 225), ("pdi-2", 226), ("pdi-3", 227), ("pdi-4", 228), ("pdi-5", 229), ("pdi-6", 230), ("pdi-7", 231), ("pdi-8", 232), ("pdi-9", 233), ("pdi-10", 234), ("pdi-11", 235), ("pdi-12", 236), ("pdi-13", 237), ("pdi-14", 238), ("pdi-15", 239), ("pdi-16", 240), ("pdi-17", 241), ("pdi-18", 242), ("pdi-19", 243), ("pdi-20", 244), ("pdi-21", 245), ("pdi-22", 246), ("pdi-23", 247), ("pdi-24", 248), ("pdi-29", 249), ("pdi-26", 250), ("pdi-27", 251), ("pdi-28", 252), ("uneq", 253), ("o-181", 254), ("invalid", 65534))

class LpbkType(TextualConvention, Integer32):
    description = 'Enter the description for the LpbkType TEXTUAL-CONVENTION converted from type assignment.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))
    namedValues = NamedValues(("terminal", 1), ("facility", 2), ("crs", 3), ("ds1feac", 4), ("ds3feac", 5), ("fac2ni", 6), ("noloop", 255))

optixsonetStsPathTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1), )
if mibBuilder.loadTexts: optixsonetStsPathTable.setStatus('current')
if mibBuilder.loadTexts: optixsonetStsPathTable.setDescription('This table describes the STS path management interface of Huawei SONET transmit platform ')
optixsonetStsPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1), ).setIndexNames((0, "OPTIX-SONET-PATH-MIB-V2", "stsPathLevel"), (0, "OPTIX-SONET-PATH-MIB-V2", "stsPathBid"), (0, "OPTIX-SONET-PATH-MIB-V2", "stsPathPid"), (0, "OPTIX-SONET-PATH-MIB-V2", "stsPathStsId"))
if mibBuilder.loadTexts: optixsonetStsPathEntry.setStatus('current')
if mibBuilder.loadTexts: optixsonetStsPathEntry.setDescription('The STS path management entry ')
stsPathLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("levelSTS1", 9), ("levelSTS3c", 10), ("levelSTS6c", 11), ("levelSTS9c", 12), ("levelSTS12c", 13), ("levelSTS15c", 14), ("levelSTS24c", 15), ("levelSTS48c", 16), ("levelSTS192c", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathLevel.setStatus('current')
if mibBuilder.loadTexts: stsPathLevel.setDescription('The path level that identifies the type of STS path.')
stsPathBid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathBid.setStatus('current')
if mibBuilder.loadTexts: stsPathBid.setDescription('Slot number. This will indicate what is the slot of the object.')
stsPathPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathPid.setStatus('current')
if mibBuilder.loadTexts: stsPathPid.setDescription('Port Number. This will indicate what is the Port of the object. ')
stsPathStsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathStsId.setStatus('current')
if mibBuilder.loadTexts: stsPathStsId.setDescription('Sts Number. This will indicate what is the Sts of the object.')
stsPathRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("null", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: stsPathRevertiveMode.setDescription('A revertive mode. It only applies to UPSR.Valid values are shown below. Value Description Y Revertive mode. N No-revertive mode. ')
stsPathRevertiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathRevertiveTime.setStatus('current')
if mibBuilder.loadTexts: stsPathRevertiveTime.setDescription('Revertive time. It only applies to UPSR.Valid values are shown below. Value Description 5 to 12 Revertive time of UPSR, ranging from 5 to 12 minutes, default is 5 minutes, in increments of 1 minute. ')
stsPathSwitchConditon = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("null", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathSwitchConditon.setStatus('current')
if mibBuilder.loadTexts: stsPathSwitchConditon.setDescription('Optional switching condition. Valid value is Y (switch when existing PDI-P) or N (do not switch when existing PDI-P).Default value is N.')
stsPathDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathDelayTime.setStatus('current')
if mibBuilder.loadTexts: stsPathDelayTime.setDescription('Delay time is hold-off time. It is an integer. Valid value ranges from 0 to 255. Unit is 100 ms. Default value is 0.Delay times are useful for interworking of protection schemes. For example, an optical port is configured for both UPSR and BLSR simultaneously. After the delay time is set, when a defect condition is declared on the port, the UPSR switching is not initiated. When the timer expires, the UPSR switching is initiated if the defect condition is still present at this point. When only one kind of protection UPSR is configured, just use the default value. ')
stsPathSFBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("sf1E-3", 3), ("sf1E-4", 4), ("sf1E-5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathSFBER.setStatus('current')
if mibBuilder.loadTexts: stsPathSFBER.setDescription('Threshold of path (B3) SFBER on a facility. Valid values are shown below. Value Description 1E-3 to 1E-5 SFBER ranges from 1E-3 to 1E-5, Default threshold is 1E-4. 1E-5 to 1E-9 SDBER ranges from 1E-5 to 1E-9, Default threshold is 1E-6. ')
stsPathSDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sd1E-5", 5), ("sd1E-6", 6), ("sd1E-7", 7), ("sd1E-8", 8), ("sd1E-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathSDBER.setStatus('current')
if mibBuilder.loadTexts: stsPathSDBER.setDescription('Threshold of path (B3) SDBER on a facility. Valid values are shown below. Value Description 1E-3 to 1E-5 SFBER ranges from 1E-3 to 1E-5, Default threshold is 1E-4. 1E-5 to 1E-9 SDBER ranges from 1E-5 to 1E-9, Default threshold is 1E-6.')
stsPathJ1TRCMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("off", 3), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathJ1TRCMODE.setStatus('current')
if mibBuilder.loadTexts: stsPathJ1TRCMODE.setDescription("Path trace mode. Valid values are shown below. Value Description MANUAL Performs the comparison of the received string with the user-entered expected string. AUTO Performs the comparison of the present received string with an expected string set to a previously received string. If there is a mismatch, TIM-P alarm is raised. OFF Don't perform the comparison. Default value is OFF. ")
stsPathTRCJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathTRCJ1.setStatus('current')
if mibBuilder.loadTexts: stsPathTRCJ1.setDescription('The path trace message contents (J1) to be transmitted.')
stsPathEXPTRCJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathEXPTRCJ1.setStatus('current')
if mibBuilder.loadTexts: stsPathEXPTRCJ1.setDescription('The expected path traces message (J1) contents.')
stsPathINCTRCJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathINCTRCJ1.setStatus('current')
if mibBuilder.loadTexts: stsPathINCTRCJ1.setDescription('The path trace message received. It can not include escape characters except \\ and . ')
stsPathTRCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 15), C2Value()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathTRCC2.setStatus('current')
if mibBuilder.loadTexts: stsPathTRCC2.setDescription('The C2 byte hex code to be transmitted. Valid values are shown below. Value Description UNEQ 0x00 The C2 content to be transmitted is unloaded. EQPD (default) 0x01 The C2 content to be transmitted is loaded with normal SPE. VT-STS1 0x02 The C2 content to be transmitted: STS-1 SPE of VT structure. Default value for C2 in DS1 unit LOCK-VT 0x03 The C2 content to be transmitted: lock VT mode. DS3 0x04 The C2 content to be transmitted: DS3 asynchronous mapping. Default value for C2 in DS3 port. DS4NA 0x12 The C2 content to be transmitted: DS4NA asynchronous mapping. ATM 0x13 The C2 content to be transmitted: ATM mapping. DQDB 0x14 The C2 content to be transmitted: DQDB mapping. FDDI 0x15 The C2 content to be transmitted: FDDI asynchronous mapping. HDLC-OVER-SONET 0x16 The C2 content to be transmitted: HDLC-OVER-SONET mapping. LAPS 0x18 GFP 0x1b O.181 0xfe The C2 content to be transmitted: O.181 testing signal. Other byte Hex code Non standard C2. ')
stsPathEXPTRCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 16), C2Value()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathEXPTRCC2.setStatus('current')
if mibBuilder.loadTexts: stsPathEXPTRCC2.setDescription('The expected C2 byte hex code. Valid values are shown below. Value Description UNEQ 0x00 The C2 content to be transmitted is unloaded. EQPD (default) 0x01 The C2 content to be transmitted is loaded with normal SPE. VT-STS1 0x02 The C2 content to be transmitted: STS-1 SPE of VT structure. Default value for C2 in DS1 unit LOCK-VT 0x03 The C2 content to be transmitted: lock VT mode. DS3 0x04 The C2 content to be transmitted: DS3 asynchronous mapping. Default value for C2 in DS3 port. DS4NA 0x12 The C2 content to be transmitted: DS4NA asynchronous mapping. ATM 0x13 The C2 content to be transmitted: ATM mapping. DQDB 0x14 The C2 content to be transmitted: DQDB mapping. FDDI 0x15 The C2 content to be transmitted: FDDI asynchronous mapping. HDLC-OVER-SONET 0x16 The C2 content to be transmitted: HDLC-OVER-SONET mapping. LAPS 0x18 GFP 0x1b O.181 0xfe The C2 content to be transmitted: O.181 testing signal. Other byte Hex code Non standard C2. ')
stsPathINCTRCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 17), C2Value()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathINCTRCC2.setStatus('current')
if mibBuilder.loadTexts: stsPathINCTRCC2.setDescription('The C2 byte hex code received. Valid values are shown below. Value Description UNEQ 0x00 The C2 content to be transmitted is unloaded. EQPD (default) 0x01 The C2 content to be transmitted is loaded with normal SPE. VT-STS1 0x02 The C2 content to be transmitted: STS-1 SPE of VT structure. Default value for C2 in DS1 unit LOCK-VT 0x03 The C2 content to be transmitted: lock VT mode. DS3 0x04 The C2 content to be transmitted: DS3 asynchronous mapping. Default value for C2 in DS3 port. DS4NA 0x12 The C2 content to be transmitted: DS4NA asynchronous mapping. ATM 0x13 The C2 content to be transmitted: ATM mapping. DQDB 0x14 The C2 content to be transmitted: DQDB mapping. FDDI 0x15 The C2 content to be transmitted: FDDI asynchronous mapping. HDLC-OVER-SONET 0x16 The C2 content to be transmitted: HDLC-OVER-SONET mapping. LAPS 0x18 GFP 0x1b O.181 0xfe The C2 content to be transmitted: O.181 testing signal. Other byte Hex code Non standard C2. ')
stsPathSQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("invalid", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathSQL.setStatus('current')
if mibBuilder.loadTexts: stsPathSQL.setDescription('The flag of squelch. This parameter only supplies for BLSR. Valid value is Y or N.')
stsPathSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 253, 254))).clone(namedValues=NamedValues(("wtr", 1), ("autosw", 2), ("manPtoW", 3), ("manWtoP", 4), ("frcPtoW", 5), ("frcWtoP", 6), ("lockout", 7), ("clear", 8), ("idle", 253), ("invalid", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsPathSwitchState.setStatus('current')
if mibBuilder.loadTexts: stsPathSwitchState.setDescription('It is only valid when the port is in the UPSR protection group. Valid values are shown below. Value Description IDLE Idle WTR Wait to restore AUTOSW Automatic switch MANPtoW Manually switch to the working unit MANWtoP Manually switch to the protecting unit FRCPtoW Forced switch to the working unit FRCWtoP Forced switch to the protecting unit LOCKOUT Lock to the working unit CLEAR Clear INVALID Invalid ')
stsPathPST = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathPST.setStatus('current')
if mibBuilder.loadTexts: stsPathPST.setDescription('<PST> means the primary state of the entity. Valid values are IS-NR, OOS-AU, OOS-MA and OOS-AUMA.')
stsPathSST = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathSST.setStatus('current')
if mibBuilder.loadTexts: stsPathSST.setDescription('<SST> means the secondary state of the entity. Valid values are MT, LPBK, SGEO and FAF,')
stsPathLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 1, 1, 22), LpbkType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsPathLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: stsPathLoopbackStatus.setDescription('This variable represents the current state of the loopback on the sts path. ')
optixsonetPathAttribConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 2))
optixsonetPathAttribGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 2, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 2, 1, 1)).setObjects(("OPTIX-SONET-PATH-MIB-V2", "stsPathLevel"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathBid"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathPid"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathStsId"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathRevertiveMode"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathRevertiveTime"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathSwitchConditon"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathDelayTime"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathSFBER"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathSDBER"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathJ1TRCMODE"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathTRCJ1"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathEXPTRCJ1"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathINCTRCJ1"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathTRCC2"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathEXPTRCC2"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathINCTRCC2"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathSQL"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathSwitchState"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathPST"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathSST"), ("OPTIX-SONET-PATH-MIB-V2", "stsPathLoopbackStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: currentObjectGroup.setDescription('Enter the description of the created OBJECT-GROUP.')
optixsonetPathAttribCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 2, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 5, 2, 2, 1)).setObjects(("OPTIX-SONET-PATH-MIB-V2", "currentObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('Enter the description of the created MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("OPTIX-SONET-PATH-MIB-V2", stsPathSwitchConditon=stsPathSwitchConditon, stsPathRevertiveTime=stsPathRevertiveTime, stsPathEXPTRCJ1=stsPathEXPTRCJ1, stsPathDelayTime=stsPathDelayTime, optixsonetPathAttribGroups=optixsonetPathAttribGroups, currentObjectGroup=currentObjectGroup, stsPathTRCC2=stsPathTRCC2, stsPathSQL=stsPathSQL, stsPathSST=stsPathSST, optixsonetPathAttribCompliances=optixsonetPathAttribCompliances, optixsonetPathAttrib=optixsonetPathAttrib, basicCompliance=basicCompliance, stsPathTRCJ1=stsPathTRCJ1, stsPathStsId=stsPathStsId, stsPathSFBER=stsPathSFBER, stsPathLevel=stsPathLevel, stsPathSwitchState=stsPathSwitchState, stsPathLoopbackStatus=stsPathLoopbackStatus, stsPathSDBER=stsPathSDBER, optixsonetPathAttribConformance=optixsonetPathAttribConformance, stsPathEXPTRCC2=stsPathEXPTRCC2, stsPathINCTRCC2=stsPathINCTRCC2, stsPathPST=stsPathPST, LpbkType=LpbkType, stsPathBid=stsPathBid, optixsonetStsPathTable=optixsonetStsPathTable, stsPathJ1TRCMODE=stsPathJ1TRCMODE, stsPathRevertiveMode=stsPathRevertiveMode, C2Value=C2Value, PYSNMP_MODULE_ID=optixsonetPathAttrib, stsPathINCTRCJ1=stsPathINCTRCJ1, stsPathPid=stsPathPid, optixsonetStsPathEntry=optixsonetStsPathEntry)
