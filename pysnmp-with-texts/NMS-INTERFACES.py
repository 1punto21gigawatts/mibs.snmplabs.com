#
# PySNMP MIB module NMS-INTERFACES (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-INTERFACES
# Produced by pysmi-0.3.4 at Wed May  1 14:22:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, Counter32, Bits, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter64, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Counter32", "Bits", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nmslinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2))
nmslifTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1), )
if mibBuilder.loadTexts: nmslifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmslifTable.setDescription('A list of interface entries.')
nmslifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nmslifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmslifEntry.setDescription('A collection of additional objects in the NMS interface.')
nmslocIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfHardType.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfHardType.setDescription('Returns the type of interface.')
nmslocIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfLineProt.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfLineProt.setDescription('Boolean whether interface line protocol is up or not.')
nmslocIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfLastIn.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfLastIn.setDescription('Elapsed time in milliseconds since last line protocol input packet was received.')
nmslocIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfLastOut.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfLastOut.setDescription('Elapsed time in milliseconds since last line protocol output packet was transmitted.')
nmslocIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfLastOutHang.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfLastOutHang.setDescription('Elapsed time in milliseconds since last line protocol output packet could not be successfully transmitted.')
nmslocIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInBitsSec.setDescription('Five minute exponentially-decayed moving average of input bits per second.')
nmslocIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInPktsSec.setDescription('Five minute exponentially-decayed moving average of input packets per second.')
nmslocIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfOutBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfOutBitsSec.setDescription('Five minute exponentially-decayed moving average of output bits per second.')
nmslocIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfOutPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfOutPktsSec.setDescription('Five minute exponentially-decayed moving average of output packets per second.')
nmslocIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInRunts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInRunts.setDescription('Number of packets input which were smaller then the allowable physical media permitted.')
nmslocIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInGiants.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInGiants.setDescription('Number of input packets which were larger then the physical media permitted.')
nmslocIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInCRC.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInCRC.setDescription('Number of input packets which had cyclic redundancy checksum errors.')
nmslocIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInFrame.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInFrame.setDescription('Number of input packet which were misaligned.')
nmslocIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInOverrun.setDescription('Count of input which arrived too quickly for the to hardware receive.')
nmslocIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInIgnored.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInIgnored.setDescription('Number of input packets which were simply ignored by this interface.')
nmslocIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInAbort.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInAbort.setDescription('Number of input packets which were aborted.')
nmslocIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfResets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfResets.setDescription('Number of times the interface internally reset.')
nmslocIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfRestarts.setDescription('Number of times interface needed to be completely restarted.')
nmslocIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfKeep.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfKeep.setDescription('Boolean whether keepalives are enabled on this interface.')
nmslocIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfReason.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfReason.setDescription('Reason for interface last status change.')
nmslocIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfCarTrans.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfCarTrans.setDescription('Number of times interface saw the carrier signal transition.')
nmslocIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfReliab.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfReliab.setDescription('The reliability of the interface. Used by IGRP.')
nmslocIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfDelay.setDescription('The amount of delay in microseconds of the interface. Used by IGRP.')
nmslocIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfLoad.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfLoad.setDescription('The loading factor of the interface. Used by IGRP.')
nmslocIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfCollisions.setDescription('The number of output collisions detected on this interface.')
nmslocIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfInputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfInputQueueDrops.setDescription('The number of packets dropped because the input queue was full.')
nmslocIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfOutputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfOutputQueueDrops.setDescription('The number of packets dropped because the output queue was full.')
nmslocIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmslocIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfDescr.setDescription('User configurable interface description.')
nmslocIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfSlowInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfSlowInPkts.setDescription('Packet count for Inbound traffic routed with slow switching')
nmslocIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfSlowOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfSlowOutPkts.setDescription('Packet count for Outbound traffic routed with slow switching')
nmslocIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfSlowInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfSlowInOctets.setDescription('Octet count for Inbound traffic routed with slow switching')
nmslocIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfSlowOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfSlowOutOctets.setDescription('Octet count for Outbound traffic routed with slow switching')
nmslocIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFastInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFastInPkts.setDescription('Packet count for Inbound traffic routed with fast switching')
nmslocIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFastOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFastOutPkts.setDescription('Packet count for Outbound traffic routed with fast switching')
nmslocIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFastInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFastInOctets.setDescription('Octet count for Inbound traffic routed with fast switching')
nmslocIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFastOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFastOutOctets.setDescription('Octet count for Outbound traffic routed with fast switching')
nmslocIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfotherInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfotherInPkts.setDescription('Other protocol input packet count')
nmslocIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfotherOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfotherOutPkts.setDescription('Other protocol output packet count')
nmslocIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfotherInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfotherInOctets.setDescription('Other protocol input octet count')
nmslocIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfotherOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfotherOutOctets.setDescription('Other protocol output octet count')
nmslocIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfipInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfipInPkts.setDescription('ip protocol input packet count')
nmslocIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfipOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfipOutPkts.setDescription('ip protocol output packet count')
nmslocIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfipInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfipInOctets.setDescription('ip protocol input octet count')
nmslocIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfipOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfipOutOctets.setDescription('ip protocol output octet count')
nmslocIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfdecnetInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfdecnetInPkts.setDescription('Decnet protocol input packet count')
nmslocIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfdecnetOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfdecnetOutPkts.setDescription('Decnet protocol output packet count')
nmslocIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfdecnetInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfdecnetInOctets.setDescription('Decnet protocol input byte count')
nmslocIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfdecnetOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfdecnetOutOctets.setDescription('Decnet protocol output byte count')
nmslocIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfxnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfxnsInPkts.setDescription('XNS protocol input packet count')
nmslocIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfxnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfxnsOutPkts.setDescription('XNS protocol output packet count')
nmslocIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfxnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfxnsInOctets.setDescription('XNS protocol input byte count')
nmslocIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfxnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfxnsOutOctets.setDescription('XNS protocol output byte count')
nmslocIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfclnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfclnsInPkts.setDescription('CLNS protocol input packet count')
nmslocIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfclnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfclnsOutPkts.setDescription('CLNS protocol output packet count')
nmslocIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfclnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfclnsInOctets.setDescription('CLNS protocol input byte count')
nmslocIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfclnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfclnsOutOctets.setDescription('CLNS protocol output byte count')
nmslocIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfappletalkInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfappletalkInPkts.setDescription('Appletalk protocol input packet count')
nmslocIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfappletalkOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfappletalkOutPkts.setDescription('Appletalk protocol output packet count')
nmslocIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfappletalkInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfappletalkInOctets.setDescription('Appletalk protocol input octet count')
nmslocIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfappletalkOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfappletalkOutOctets.setDescription('Appletalk protocol output octet count')
nmslocIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfnovellInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfnovellInPkts.setDescription('Novell protocol input packet count')
nmslocIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfnovellOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfnovellOutPkts.setDescription('Novell protocol output packet count')
nmslocIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfnovellInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfnovellInOctets.setDescription('Novell protocol input octet count')
nmslocIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfnovellOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfnovellOutOctets.setDescription('Novell protocol output octet count')
nmslocIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfapolloInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfapolloInPkts.setDescription('Apollo protocol input packet count')
nmslocIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfapolloOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfapolloOutPkts.setDescription('Apollo protocol output packet count')
nmslocIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfapolloInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfapolloInOctets.setDescription('Apollo protocol input octet count')
nmslocIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfapolloOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfapolloOutOctets.setDescription('Apollo protocol output octet count')
nmslocIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfvinesInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfvinesInPkts.setDescription('Vines protocol input packet count')
nmslocIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfvinesOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfvinesOutPkts.setDescription('Vines protocol output packet count')
nmslocIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfvinesInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfvinesInOctets.setDescription('Vines protocol input octet count')
nmslocIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfvinesOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfvinesOutOctets.setDescription('Vines protocol output octet count')
nmslocIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfbridgedInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfbridgedInPkts.setDescription('Bridged protocol input packet count')
nmslocIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfbridgedOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfbridgedOutPkts.setDescription('Bridged protocol output packet count')
nmslocIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfbridgedInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfbridgedInOctets.setDescription('Bridged protocol input octet count')
nmslocIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfbridgedOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfbridgedOutOctets.setDescription('Bridged protocol output octet count')
nmslocIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfsrbInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfsrbInPkts.setDescription('SRB protocol input packet count')
nmslocIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfsrbOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfsrbOutPkts.setDescription('SRB protocol output packet count')
nmslocIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfsrbInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfsrbInOctets.setDescription('SRB protocol input octet count')
nmslocIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfsrbOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfsrbOutOctets.setDescription('SRB protocol output octet count')
nmslocIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfchaosInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfchaosInPkts.setDescription('Choas protocol input packet count')
nmslocIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfchaosOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfchaosOutPkts.setDescription('Choas protocol output packet count')
nmslocIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfchaosInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfchaosInOctets.setDescription('Choas protocol input octet count')
nmslocIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfchaosOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfchaosOutOctets.setDescription('Choas protocol output octet count')
nmslocIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfpupInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfpupInPkts.setDescription('PUP protocol input packet count')
nmslocIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfpupOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfpupOutPkts.setDescription('PUP protocol output packet count')
nmslocIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfpupInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfpupInOctets.setDescription('PUP protocol input octet count')
nmslocIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfpupOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfpupOutOctets.setDescription('PUP protocol output octet count')
nmslocIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfmopInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfmopInPkts.setDescription('MOP protocol input packet count')
nmslocIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfmopOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfmopOutPkts.setDescription('MOP protocol output packet count')
nmslocIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfmopInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfmopInOctets.setDescription('MOP protocol input octet count')
nmslocIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfmopOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfmopOutOctets.setDescription('MOP protocol output octet count')
nmslocIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIflanmanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIflanmanInPkts.setDescription('LanMan protocol input packet count')
nmslocIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIflanmanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIflanmanOutPkts.setDescription('LanMan protocol output packet count')
nmslocIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIflanmanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIflanmanInOctets.setDescription('LanMan protocol input octet count')
nmslocIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIflanmanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIflanmanOutOctets.setDescription('LanMan protocol output octet count')
nmslocIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfstunInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfstunInPkts.setDescription('STUN protocol input packet count')
nmslocIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfstunOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfstunOutPkts.setDescription('STUN protocol output packet count')
nmslocIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfstunInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfstunInOctets.setDescription('STUN protocol input octet count')
nmslocIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfstunOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfstunOutOctets.setDescription('STUN protocol output octet count')
nmslocIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfspanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfspanInPkts.setDescription('Spanning tree input protocol packet count')
nmslocIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfspanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfspanOutPkts.setDescription('Spanning tree output protocol packet count')
nmslocIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfspanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfspanInOctets.setDescription('Spanning tree input octet packet count')
nmslocIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfspanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfspanOutOctets.setDescription('Spanning tree output octet packet count')
nmslocIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfarpInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfarpInPkts.setDescription('Arp protocol input packet count')
nmslocIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfarpOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfarpOutPkts.setDescription('Arp protocol output packet count')
nmslocIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfarpInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfarpInOctets.setDescription('Arp protocol input octet count')
nmslocIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfarpOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfarpOutOctets.setDescription('Arp protocol output octet count')
nmslocIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfprobeInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfprobeInPkts.setDescription('Probe protocol input packet count')
nmslocIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfprobeOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfprobeOutPkts.setDescription('Probe protocol output packet count')
nmslocIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfprobeInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfprobeInOctets.setDescription('Probe protocol input octet count')
nmslocIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfprobeOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfprobeOutOctets.setDescription('Probe protocol output octet count')
nmslocIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfDribbleInputs.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfDribbleInputs.setDescription('The number of good packets received with the dribble condition present')
nmslFSIPTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2), )
if mibBuilder.loadTexts: nmslFSIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmslFSIPTable.setDescription('A list of card entries for 4T, HSSI, Mx serial or FSIP.')
nmslFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1), ).setIndexNames((0, "NMS-INTERFACES", "nmslocIfFSIPIndex"))
if mibBuilder.loadTexts: nmslFSIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmslFSIPEntry.setDescription('A collection of objects specific to 4T, HSSI, Mx serial or FSIP.')
nmslocIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPIndex.setDescription('Interface index of this card corresponding to its ifIndex')
nmslocIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPtype.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPtype.setDescription('Is this FSIP line DCE or DTE')
nmslocIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPrts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPrts.setDescription('Is the RTS signal up or down')
nmslocIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPcts.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPcts.setDescription('Is the CTS signal up or down')
nmslocIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPdtr.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPdtr.setDescription('Is the DTR signal up or down')
nmslocIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPdcd.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPdcd.setDescription('Is the DCD signal up or down')
nmslocIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPdsr.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPdsr.setDescription('Is the DSR signal up or down')
nmslocIfFSIPrxClockrate = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPrxClockrate.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPrxClockrate.setDescription('Received clock rate')
nmslocIfFSIPrxClockrateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPrxClockrateHi.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPrxClockrateHi.setDescription('Use when received clock rate is greater than 2^32 (gigabits).')
nmslocIfFSIPportType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noCable", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6), ("rs449", 7), ("rs530", 8), ("hssi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmslocIfFSIPportType.setStatus('mandatory')
if mibBuilder.loadTexts: nmslocIfFSIPportType.setDescription('Cable Type of 4T, HSSI, Mx serial or FSIP')
mibBuilder.exportSymbols("NMS-INTERFACES", nmslocIfstunOutPkts=nmslocIfstunOutPkts, nmslocIfInAbort=nmslocIfInAbort, nmslocIfarpInOctets=nmslocIfarpInOctets, nmslocIfnovellOutOctets=nmslocIfnovellOutOctets, nmslocIfappletalkOutOctets=nmslocIfappletalkOutOctets, nmslocIfResets=nmslocIfResets, nmslocIfDescr=nmslocIfDescr, nmslocIfspanOutPkts=nmslocIfspanOutPkts, nmslocIfInGiants=nmslocIfInGiants, nmslocIfipOutOctets=nmslocIfipOutOctets, nmslocIfSlowOutPkts=nmslocIfSlowOutPkts, nmslocIfchaosOutOctets=nmslocIfchaosOutOctets, nmslocIfxnsInOctets=nmslocIfxnsInOctets, nmslocIfvinesOutOctets=nmslocIfvinesOutOctets, nmslocIfRestarts=nmslocIfRestarts, nmslocIfFSIPIndex=nmslocIfFSIPIndex, nmslocIfbridgedOutOctets=nmslocIfbridgedOutOctets, nmslocIfInPktsSec=nmslocIfInPktsSec, nmslocIfnovellInOctets=nmslocIfnovellInOctets, nmslocIfpupOutOctets=nmslocIfpupOutOctets, nmslocIfprobeInPkts=nmslocIfprobeInPkts, nmslocIfsrbInOctets=nmslocIfsrbInOctets, nmslocIfKeep=nmslocIfKeep, nmslocIfOutputQueueDrops=nmslocIfOutputQueueDrops, nmslocIfpupOutPkts=nmslocIfpupOutPkts, nmslocIfstunInOctets=nmslocIfstunInOctets, nmslifTable=nmslifTable, nmslocIfclnsInPkts=nmslocIfclnsInPkts, nmslocIfOutBitsSec=nmslocIfOutBitsSec, nmslocIfbridgedInOctets=nmslocIfbridgedInOctets, nmslocIfstunOutOctets=nmslocIfstunOutOctets, nmslocIfipInOctets=nmslocIfipInOctets, nmslocIfDelay=nmslocIfDelay, nmslocIfFastInPkts=nmslocIfFastInPkts, nmslocIfSlowOutOctets=nmslocIfSlowOutOctets, nmslocIfpupInOctets=nmslocIfpupInOctets, nmslocIfLineProt=nmslocIfLineProt, nmslocIfprobeOutOctets=nmslocIfprobeOutOctets, nmslocIfotherOutOctets=nmslocIfotherOutOctets, nmslocIfpupInPkts=nmslocIfpupInPkts, nmslocIfSlowInOctets=nmslocIfSlowInOctets, nmslocIfclnsOutOctets=nmslocIfclnsOutOctets, nmslocIfchaosInPkts=nmslocIfchaosInPkts, nmslocIfprobeOutPkts=nmslocIfprobeOutPkts, nmslocIfspanInOctets=nmslocIfspanInOctets, nmslocIfHardType=nmslocIfHardType, nmslocIfSlowInPkts=nmslocIfSlowInPkts, nmslocIfmopOutPkts=nmslocIfmopOutPkts, nmslocIfmopInOctets=nmslocIfmopInOctets, nmslocIfapolloOutPkts=nmslocIfapolloOutPkts, nmslocIfFastOutOctets=nmslocIfFastOutOctets, nmslocIfotherInPkts=nmslocIfotherInPkts, nmslocIfFSIPtype=nmslocIfFSIPtype, nmslocIfFastOutPkts=nmslocIfFastOutPkts, nmslocIfstunInPkts=nmslocIfstunInPkts, nmslocIfDribbleInputs=nmslocIfDribbleInputs, nmslocIfxnsOutPkts=nmslocIfxnsOutPkts, nmslocIfLastIn=nmslocIfLastIn, nmslocIfappletalkInOctets=nmslocIfappletalkInOctets, nmslocIfotherOutPkts=nmslocIfotherOutPkts, nmslocIfFSIPdcd=nmslocIfFSIPdcd, nmslocIfnovellInPkts=nmslocIfnovellInPkts, nmslocIfFSIPrts=nmslocIfFSIPrts, nmslocIfvinesInOctets=nmslocIfvinesInOctets, nmslocIfclnsInOctets=nmslocIfclnsInOctets, nmslocIfbridgedInPkts=nmslocIfbridgedInPkts, nmslocIfFSIPrxClockrate=nmslocIfFSIPrxClockrate, nmslocIfclnsOutPkts=nmslocIfclnsOutPkts, nmslocIfsrbOutPkts=nmslocIfsrbOutPkts, nmslocIfLastOutHang=nmslocIfLastOutHang, nmslocIfOutPktsSec=nmslocIfOutPktsSec, nmslinterfaces=nmslinterfaces, nmslocIflanmanInPkts=nmslocIflanmanInPkts, nmslocIfxnsInPkts=nmslocIfxnsInPkts, nmslocIfFSIPdtr=nmslocIfFSIPdtr, nmslocIfFSIPportType=nmslocIfFSIPportType, nmslocIflanmanOutOctets=nmslocIflanmanOutOctets, nmslocIfdecnetInPkts=nmslocIfdecnetInPkts, nmslocIfInputQueueDrops=nmslocIfInputQueueDrops, nmslocIfarpOutPkts=nmslocIfarpOutPkts, nmslocIfLoad=nmslocIfLoad, nmslocIfFSIPrxClockrateHi=nmslocIfFSIPrxClockrateHi, nmslocIfLastOut=nmslocIfLastOut, nmslifEntry=nmslifEntry, nmslocIfReliab=nmslocIfReliab, nmslocIfchaosInOctets=nmslocIfchaosInOctets, nmslocIfInIgnored=nmslocIfInIgnored, nmslocIfdecnetInOctets=nmslocIfdecnetInOctets, nmslocIfsrbInPkts=nmslocIfsrbInPkts, nmslocIfarpInPkts=nmslocIfarpInPkts, nmslocIfInBitsSec=nmslocIfInBitsSec, nmslocIfarpOutOctets=nmslocIfarpOutOctets, nmslocIfInCRC=nmslocIfInCRC, nmslocIflanmanInOctets=nmslocIflanmanInOctets, nmslocIfdecnetOutPkts=nmslocIfdecnetOutPkts, nmslocIfmopOutOctets=nmslocIfmopOutOctets, nmslocIfInOverrun=nmslocIfInOverrun, nmslocIfCarTrans=nmslocIfCarTrans, nmslocIfappletalkInPkts=nmslocIfappletalkInPkts, nmslocIfipInPkts=nmslocIfipInPkts, nmslocIfappletalkOutPkts=nmslocIfappletalkOutPkts, nmslocIfbridgedOutPkts=nmslocIfbridgedOutPkts, nmslocIfFSIPdsr=nmslocIfFSIPdsr, nmslocIfCollisions=nmslocIfCollisions, nmslocIfInFrame=nmslocIfInFrame, nmslocIfvinesOutPkts=nmslocIfvinesOutPkts, nmslocIfvinesInPkts=nmslocIfvinesInPkts, nmslocIfFSIPcts=nmslocIfFSIPcts, nmslocIfotherInOctets=nmslocIfotherInOctets, nmslocIfipOutPkts=nmslocIfipOutPkts, nmslocIfapolloInOctets=nmslocIfapolloInOctets, nmslocIfspanInPkts=nmslocIfspanInPkts, nmslocIfxnsOutOctets=nmslocIfxnsOutOctets, nmslocIfapolloInPkts=nmslocIfapolloInPkts, nmslFSIPEntry=nmslFSIPEntry, nmslocIfspanOutOctets=nmslocIfspanOutOctets, nmslocIfmopInPkts=nmslocIfmopInPkts, nmslFSIPTable=nmslFSIPTable, nmslocIfapolloOutOctets=nmslocIfapolloOutOctets, nmslocIfchaosOutPkts=nmslocIfchaosOutPkts, nmslocIfInRunts=nmslocIfInRunts, nmslocIflanmanOutPkts=nmslocIflanmanOutPkts, nmslocIfprobeInOctets=nmslocIfprobeInOctets, nmslocIfReason=nmslocIfReason, nmslocIfnovellOutPkts=nmslocIfnovellOutPkts, nmslocIfdecnetOutOctets=nmslocIfdecnetOutOctets, nmslocIfsrbOutOctets=nmslocIfsrbOutOctets, nmslocIfFastInOctets=nmslocIfFastInOctets)
