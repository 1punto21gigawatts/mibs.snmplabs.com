#
# PySNMP MIB module CISCO-CABLE-WIDEBAND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CABLE-WIDEBAND-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
docsIfCmtsCmStatusIndex, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusIndex")
entPhysicalName, PhysicalIndexOrZero, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "PhysicalIndexOrZero", "entPhysicalIndex")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, ModuleIdentity, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Counter32, IpAddress, MibIdentifier, Counter64, Bits, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Counter32", "IpAddress", "MibIdentifier", "Counter64", "Bits", "Integer32", "Unsigned32")
RowStatus, MacAddress, TruthValue, StorageType, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TruthValue", "StorageType", "TextualConvention", "DisplayString")
ciscoCableWidebandMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 479))
ciscoCableWidebandMIB.setRevisions(('2011-01-05 00:00', '2010-07-15 00:00', '2008-12-03 00:00', '2006-06-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCableWidebandMIB.setRevisionsDescriptions(('Added ccwbWidebandObjGroupSup2 and ccwbWidebandNotifGroup.', 'Added ccwbWidebandObjGroupRev1. Deprecated ccwbWidebandObjGroup.', 'Added ccwbRFChannelUtilization and ccwbRFChanUtilInterval.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCableWidebandMIB.setLastUpdated('201101050000Z')
if mibBuilder.loadTexts: ciscoCableWidebandMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCableWidebandMIB.setContactInfo('Cisco Systems Customer Service Postal: Cisco Systems 170 West Tasman Drive San Jose, CA 95134 U.S.A. Phone: +1 800 553-NETS E-mail: cs-ubr@cisco.com')
if mibBuilder.loadTexts: ciscoCableWidebandMIB.setDescription('This is the MIB module for the support of Channel Bonding Protocol for the Cable Modem Termination System (CMTS). Wideband DOCSIS is a method of increasing downstream bandwidth by simultaneously transmitting DOCSIS data over multiple RF channels. This DOCSIS data is organized as a sequence of 188-byte MPEG-TS data packets. A Wideband CMTS (WCMTS) is a CMTS that also transmits Wideband MPEG-TS packets. An Edge QAM (Quadrature Amplitude Modulation) device is one which provides the QAM and used to couple the Wideband MPEG-TS packet onto the HFC plant. A Wideband Cable Modem (WCM) is a CableModem (CM) that is able to receive Wideband MPEG-TS packets. A wideband channel or Bonded Group (BG) is a logical grouping of one or more physical RF channels over which MPEG-TS packets are carried. Wideband channel carries DOCSIS bonded packets encapsulated in MPEG-TS packets from a WCMTS to one or more WCMs. Packets outgoing from WCMTS to the WCM are formatted with the DOCSIS Header. The DOCSIS packets are then formatted into MPEG-TS data packets. These are 188 byte MPEG packets containing the DOCSIS information. Within DOCSIS Header of the WB Channel there is an extended header called, DOCSIS Bonding Extended Header, the format of which is shown below: -------------------------------------------------------- | ---------------------------------------------------- | | | TYPE | LEN | BSID | SEQ | | ---------------------------------------------------- | | | byte 0 | byte 1-2 | byte 3-4 | |--------------------------------------------------------| DOCSIS Bonding Extended Header BSID is the Bonding Service IDentifier, it defines a sequence number for a Wideband channel. It is used by the WCM to re-sequence packets received over downstream channels to maintain packet order. SEQ is per service flow sequence number. Whereas TYPE is the type of the Bonding Extended Header and LEN specifies its length. A Narrowband Channel is a standard DOCSIS downstream channel which contains exactly one RF channel. The wideband protocol utilizes the existing narrowband downstream channel for carrying the MAC management and signaling messages and the associated narrowband upstream for return data traffic and signaling. The channel bonding protocol supports multiple wideband bonded groups. This will allow the WCM to listen to multiple bonded groups at the same time. This would support (for example) multicast video being sent to a CPE device on the LAN side of the WCM in addition to standard DOCSIS data. Channel Bonding allows two types of Bonding Group (BG) interfaces. These are Secondary BG interface and non-Secondary BG interface. The Secondary BG interfaces will carry the multicast traffic, whereas, the non-Secondary BG interface will carry the non-multicast traffic. This MIB also allows for configuration of the RF channels on the WCMTS, as well as the association between the RF and narrowband downstream channels with the BG channel. Fiber Node is an optical node which terminates the fiber based downstream signal as an electrical signal onto a coaxial RF cable. DEPI: Downstream external physical interface. TSID: MPEG2 Transport Stream ID. SFP: Small Form-Factor Pluggable.')
ciscoCableWidebandMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 479, 0))
ciscoCableWidebandMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 479, 1))
ciscoCableWidebandMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 479, 2))
ccwbRFChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1), )
if mibBuilder.loadTexts: ccwbRFChannelTable.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelTable.setDescription('This table contains attributes of the physical RF channels. MPEG-TS packets are sent across RF channels within a wideband channel. These physical RF channels might be present on a different system but the WCMTS entity requires the knowledge of that system for its operation.')
ccwbRFChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelNum"))
if mibBuilder.loadTexts: ccwbRFChannelEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelEntry.setDescription('An entry provides a list of attributes for a single downstream RF channel per WCMTS entity. An entry in this table exists for each configured RF channel on the WCMTS entity that provides the wideband DOCSIS functionality. The index, entPhysicalIndex, used here is the physical index of the wideband controller card. Since RF channels are considered part of the Wideband controller card, hence entPhysicalIndex is used for associating RF channels.')
ccwbRFChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: ccwbRFChannelNum.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelNum.setDescription('The WCMTS identification of the RF channel. The range of this object is limited to 0-18 in the case of annex A/256qam, and 0-23 for Annex B and C.')
ccwbRFChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelFrequency.setReference('DOCSIS-RFI-SPEC: SP-RFIv1.1-I05-000714, Tables 4-1, 6-14.')
if mibBuilder.loadTexts: ccwbRFChannelFrequency.setStatus('deprecated')
if mibBuilder.loadTexts: ccwbRFChannelFrequency.setDescription('The center of the downstream frequency associated with this RF channel. The final downstream RF frequency may be provided by an edge QAM device or the CMTS itself. See the associated compliance object for a description of valid frequencies that may be written to this object. If the downstream frequency associated with this RF channel is greater than the maximum value reportable by this object then this object should report its maximum value (1,000,000,000) and ccwbRFChannelFrequencyRev1 must be used to report the downstream frequency. This object is deprecated and replaced by ccwbRFChannelFrequencyRev1.')
ccwbRFChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000000))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelWidth.setReference('DOCSIS-RFI-SPEC: SP-RFIv1.1-I05-000714, Table 6-14.')
if mibBuilder.loadTexts: ccwbRFChannelWidth.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelWidth.setDescription('The bandwidth of this downstream RF channel. Most implementations are expected to support a channel width of 6 MHz (North America) and/or 8 MHz (Europe). See the associated compliance object for a description of the valid channel widths for this object.')
ccwbRFChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qam64", 1), ("qam256", 2), ("qam1024", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelModulation.setReference('DOCSIS-RFI-SPEC: SP-RFIv1.1-I05-000714, Table 6-14.')
if mibBuilder.loadTexts: ccwbRFChannelModulation.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelModulation.setDescription('The modulation type associated with this downstream RF channel. See the associated conformance object for write conditions an limitations. See the DOCSIS specification for specifics on the modulation profiles implied by qam64 qam256 and qam1024. qam64, qam256 and qam1024 are various modulation schemes often used in digital cable and cable modem applications. The numbers 64/256/1024 in qam represent constellation points, which is the measurement of qam transmission capability, the higher the number, higher the bits that can be transmitted.')
ccwbRFChannelAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annexA", 1), ("annexB", 2), ("annexC", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelAnnex.setReference('DOCSIS-RFI-SPEC: SP-RFIv1.1-I05-000714, Section 2.2.')
if mibBuilder.loadTexts: ccwbRFChannelAnnex.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelAnnex.setDescription('The value of this object indicates the conformance of the implementation to important regional cable standards. annexA : Annex A from ITU-J83 is used. annexB : Annex B from ITU-J83 is used. annexC : Annex C from ITU-J83 is used.')
ccwbRFChannelMpegPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccwbRFChannelMpegPkts.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelMpegPkts.setDescription('The number of MPEG packets transmitted on this RF channel.')
ccwbRFChannelStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelStorageType.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelStorageType.setDescription('The storage type for this conceptual row.')
ccwbRFChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelRowStatus.setDescription('Controls and reflects the status of rows in this table. It can be used for creating and deleting entries in this table. The ccwbRFChannelAnnex and ccwbRFChannelModulation must be valid for a row to be created.')
ccwbRFChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccwbRFChannelUtilization.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelUtilization.setDescription('The calculated and truncated utilization for this RF channel over the previous complete measuring interval. The configured duration of the measurement intervals is defined in the ccwbRFChanUtilInterval object. The utilization index is a percentage expressing the ratio between bytes used to transmit data versus the total number of bytes transmitted in the raw bandwidth of the RF channel.')
ccwbRFChannelFrequencyRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(55000000, 1050000000))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChannelFrequencyRev1.setReference('DOCSIS-RFI-SPEC: SP-RFIv1.1-I05-000714, Tables 4-1, 6-14.')
if mibBuilder.loadTexts: ccwbRFChannelFrequencyRev1.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelFrequencyRev1.setDescription('The center of the downstream frequency associated with this RF channel. The final downstream RF frequency may be provided by an edge QAM device or the CMTS itself. See the associated compliance object for a description of valid frequencies that may be written to this object.')
ccwbRFChannelQamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2), )
if mibBuilder.loadTexts: ccwbRFChannelQamTable.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelQamTable.setDescription('This table contains information of the external edge QAM which provide the physical RF channels which are available to the wideband channels.')
ccwbRFChannelQamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1), )
ccwbRFChannelEntry.registerAugmentions(("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelQamEntry"))
ccwbRFChannelQamEntry.setIndexNames(*ccwbRFChannelEntry.getIndexNames())
if mibBuilder.loadTexts: ccwbRFChannelQamEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChannelQamEntry.setDescription('An entry provides a list of attributes for a single RF channel which can be physically present on an external edge QAM device. An entry in this table exists for each configured RF channel on the WCMTS module that provides the wideband DOCSIS functionality.')
ccwbRFChanQamIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 1), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamIPAddressType.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamIPAddressType.setDescription('The type of internet address. This object identifies the internet address type specified by ccwbRFChanQamIPAddress object.')
ccwbRFChanQamIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamIPAddress.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamIPAddress.setDescription('The IP address of the edge QAM device or the CMTS cable interface which provides the physical RF channel. The IP address will be of the type represented by object ccwbRFChanQamIPAddressType.')
ccwbRFChanQamMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamMacAddress.setDescription('The MAC address of the edge QAM device or next hop router which might be present between the WCMTS and the edge QAM.')
ccwbRFChanQamUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamUdpPort.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamUdpPort.setDescription('The port number on the edge QAM associated with this RF channel.')
ccwbRFChanQamTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamTos.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamTos.setDescription('The value of the TOS field in the IP header for all Ethernet frames destined for the given RF channel.')
ccwbRFChanQamVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamVlanId.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamVlanId.setDescription('The VLAN ID to be inserted in the Ethernet frames when using 802.1q frames instead of normal 802.1 frames for the given RF channel. The value of 0 indicates that 802.1 frames are being used and is not supported in setting this object.')
ccwbRFChanQamPriorityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamPriorityBits.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamPriorityBits.setDescription('The priority bits used when inserting Ethernet 802.1q VLAN tags into the Ethernet frames destined for a given RF channel. Priority Bits (0=Best effort, 1=background, 2=spare, 3=excellent effort, 4=controlled load, 5=video, 6=voice, 7=network control).')
ccwbRFChanQamDepiRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamDepiRemoteId.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamDepiRemoteId.setDescription('The DEPI remote ID on edge QAM associated with this RF channel.')
ccwbRFChanQamDepiTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamDepiTunnel.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamDepiTunnel.setDescription('This object specifies the name of the DEPI tunnel which determines the DEPI data session configuration associated with this RF channel.')
ccwbRFChanQamTsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbRFChanQamTsid.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanQamTsid.setDescription('This object specifies the MPEG2 transport stream ID which is associated with this RF channel.')
ccwbWBtoRFMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 3), )
if mibBuilder.loadTexts: ccwbWBtoRFMappingTable.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoRFMappingTable.setDescription('A wideband channel is a logical grouping of one or more physical RF channels over which Wideband MPEG-TS packets are carried. This table contains association information of the wideband channels to the RF channels that are available for the WCMTS.')
ccwbWBtoRFMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelNum"))
if mibBuilder.loadTexts: ccwbWBtoRFMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoRFMappingEntry.setDescription('An entry provides a list of attributes for a single association between a wideband channel and a RF channel. An entry in this table exists for each association between a wideband channel and RF channel on the WCMTS. It is indexed by the ifIndex of the wideband channel and entPhysicalIndex and ccwbRFChannelNum which represents the RF channel. This object may be modified or deleted once they are already created.')
ccwbWBtoRFBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 3, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbWBtoRFBandwidth.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoRFBandwidth.setDescription('The percentage of the RF channel bandwidth allocated for this wideband channel.')
ccwbWBtoRFStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 3, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbWBtoRFStorageType.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoRFStorageType.setDescription('The storage type for this conceptual row.')
ccwbWBtoRFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbWBtoRFRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoRFRowStatus.setDescription("Controls and reflects the status of rows in this table. It can be used for creating and deleting entries in this table. The ccwbWBtoRFBandwidth must be valid for a row to be created. When ccwbWBtoRFRowStatus is 'active', the object ccwbWBtoRFBandwidth can be modified.")
ccwbWBtoNBMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 4), )
if mibBuilder.loadTexts: ccwbWBtoNBMappingTable.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoNBMappingTable.setDescription('This table contains information of the mapping of the wideband channels to the Narrowband channels that are available on the WCMTS. The wideband protocol utilizes the existing narrowband downstream channel for carrying the MAC management and signaling messages and the associated narrowband upstream for return data traffic and signaling.')
ccwbWBtoNBMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoNBifIndexForNB"))
if mibBuilder.loadTexts: ccwbWBtoNBMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoNBMappingEntry.setDescription('An entry provides a list of attributes for a association between a wideband channel and a narrowband channel. An entry in this table exists for each association between a wideband channel and narrowband channel on the WCMTS. The valid ifType for the ifIndex used here is, ciscoDocsCableWBDownstream(224).')
ccwbWBtoNBifIndexForNB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ccwbWBtoNBifIndexForNB.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoNBifIndexForNB.setDescription('The ifIndex of the narrowband cable interface associated with this wideband channel.')
ccwbWBtoNBStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 4, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbWBtoNBStorageType.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoNBStorageType.setDescription('The storage type for this conceptual row.')
ccwbWBtoNBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbWBtoNBRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccwbWBtoNBRowStatus.setDescription('Controls and reflects the status of rows in this table. It can be used for creating and deleting entries in this table. The object ccwbWBtoNBifIndexForNB must be valid in order for row to be created.')
ccwbWBBondGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 5), )
if mibBuilder.loadTexts: ccwbWBBondGrpTable.setStatus('current')
if mibBuilder.loadTexts: ccwbWBBondGrpTable.setDescription('This table provides information about a Wideband BG interface, whether its configured to carry multicast or non-multicast traffic. For multicast the BG interface type is Secondary and for non-multicast its non-Secondary. Other objects could be added to this later in the future.')
ccwbWBBondGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ccwbWBBondGrpEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbWBBondGrpEntry.setDescription('An entry in this table provides information about each Wideband BG interface whose ifType is ciscoDocsCableWBDownstream(224).')
ccwbWBBondGrpSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 5, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccwbWBBondGrpSecondary.setStatus('current')
if mibBuilder.loadTexts: ccwbWBBondGrpSecondary.setDescription("This object has the value 'true(1)' if the WB interface(BG) is Seconday and the value 'false(2)' for non-Secondary.")
ccwbWBCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 6), )
if mibBuilder.loadTexts: ccwbWBCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmStatusTable.setDescription('This table contains Wideband Cable Modem(WCM) connectivity state. A WCM connectivity state can be associated with multiple Wideband interfaces.')
ccwbWBCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 6, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmStatusIndex"))
if mibBuilder.loadTexts: ccwbWBCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmStatusEntry.setDescription('Status information for a single Wideband Cable Modem. An entry in this table exists for each Wideband Cable Modem that is connected to the WCMTS.')
ccwbWBCmStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("offline", 1), ("others", 2), ("initRangingRcvd", 3), ("initDhcpReqRcvd", 4), ("onlineNetAccessDisabled", 5), ("onlineKekAssigned", 6), ("onlineTekAssigned", 7), ("rejectBadMic", 8), ("rejectBadCos", 9), ("kekRejected", 10), ("tekRejected", 11), ("online", 12), ("initTftpPacketRcvd", 13), ("initTodRequestRcvd", 14), ("reset", 15), ("rangingInProgress", 16), ("dhcpGotIpAddr", 17), ("rejStaleConfig", 18), ("rejIpSpoof", 19), ("rejClassFail", 20), ("rejRegNack", 21), ("bpiKekExpired", 22), ("bpiTekExpired", 23), ("shutdown", 24), ("channelChgInitRangingRcvd", 25), ("channelChgRangingInProgress", 26), ("wbOnline", 27), ("wbOnlinePrivacy", 28), ("wbOnlineKekAssigned", 29), ("wbOnlineTekAssigned", 30), ("wbOnlineNetAccessDis", 31), ("wbKekReject", 32), ("wbTekReject", 33), ("wbNetAccessDisReject", 34), ("wbPrivacyEnabReject", 35), ("wbKekExpire", 36), ("wbTekExpire", 37), ("wbNetAccessDisExpire", 38), ("wbPrivacyEnabExpire", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccwbWBCmStatusValue.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmStatusValue.setDescription('Current WB Cable Modem connectivity state, as specified in the RF Interface Specification. Returned status information is the WCM status as assumed by the WCMTS, and indicates the following events: The enumerations are: offline(1) : modem considered offline. others(2) : states is in ccwbWBCmStatusValue. initRangingRcvd(3) : modem sent initial ranging. initDhcpReqRcvd(4) : dhcp request received. onlineNetAccessDisabled(5): modem registered, but network access for the WCM is disabled. onlineKekAssigned(6) : modem registered, BPI enabled and KEK assigned. onlineTekAssigned(7) : modem registered, BPI enabled and TEK assigned. rejectBadMic(8) : modem did attempt to register but registration was refused due to bad mic. rejectBadCos(9) : modem did attempt to register but registration was refused due to bad COS. kekRejected(10) : KEK modem key assignment rejected. tekRejected(11) : TEK modem key assignment rejected. online(12) : modem registered, enabled for data. initTftpPacketRcvd(13) : tftp packet received and option file transfer started. initTodRquestRcvd(14) : Time of the Day (TOD) request received. reset(15) : modem is resetting. rangingInProgress(16) : initial ranging is in progress. dhcpGotIpAddr(17) : modem has got an IP address rejStaleConfig(18) : modem did attempt to register but registration was refused due to stale Config. rejIpSpoof(19) : modem did attempt to register but registration was refused due to IP Spoof. rejClassFail(20) : modem did attempt to register but registration was refused due to Class failure. rejRegNack(21) : modem did attempt to register but no acknowledgement was received. bpiKekExpired(22) : KEK modem key assignment expired. bpiTekExpired(23) : TEK modem key assignment expired. shutdown(24) : modem is in shutdown state. channelChgInitRangingRcvd(25) : modem sent initial ranging during channel change. channelChgRangingInProgress(26) : initial ranging is in progress during channel change. wbOnline(27) : Wideband modem is online. wbOnlinePrivacy(28) : Wideband modem is online Privacy enabled. wbOnlineKekAssigned(29) : Wideband modem is online and KEK assigned. wbOnlineTekAssigned(30) : Wideband modem is online and TEK assigned. wbOnlineNetAccessDis(31) : Wideband modem registered but Network access disabled. wbKekReject(32) : KEK wideband modem key assignment rejected. wbTekReject(33) : TEK wideband modem key assignment rejected. wbNetAccessDisReject(34) : wideband modem rejected - Net access disabled. wbPrivacyEnabReject(35) : wideband modem rejected Privacy enabled. wbKekExpire(36) : KEK Wideband modem key assignment expired. wbTekExpire(37) : TEK wideband modem key assignment rejected. wbNetAccessDisExpire(38) : wideband modem expire - Network access disabled. wbPrivacyEnabExpire(39) : wideband modem expire - Privacy enabled. This ccwbWBCmStatusValue could return initRangingRcvd(3) or rangingInProgress(16) when the ccwbWBCmStatusValue is ranging(2). This ccwbWBCmStatusValue will return others(2) when the ccwbWBCmStatusValue states is either rangingAborted(3), rangingComplete(4), and ipComplete(5). This ccwbWBCmStatusValue could return wbonline(27), or onlineNetAccessDisabled(5) for WCM with BPI disabled, or onlineNetAccessDisabled(5) or onlineTekAssigned(7) for WCM with BPI enabled, when the ccwbWBCmStatusValue is registrationComplete(6). This ccwbWBCmStatusValue could return either rejectBadMic(8), rejectBadCos(9) rejStaleConfig(19) or rejRegNack(22) when the ccwbWBCmStatusValue is accessDenied(7) for possible reasons of cable modem registration abort. This ccwbWBCmStatusValue could return either onlineKekAssigned(6), kekRejected(10), tekRejected(11), or online(12) for the WCM with BPI enabled when the ccwbWBCmStatusValue is registeredBPIInitializing(9). The state rejectBadCos(9) is not applicable for DOCSIS1.1 modems. The WCMTS only needs to report states it is able to detect.')
ccwbWBCmStatusExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 7), )
if mibBuilder.loadTexts: ccwbWBCmStatusExtTable.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmStatusExtTable.setDescription('An entry in this table exists for each Wideband Cable Modem which links to one or more WB interface.')
ccwbWBCmStatusExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 7, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmStatusIndex"), (0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbWBCmStatusExtIndex"))
if mibBuilder.loadTexts: ccwbWBCmStatusExtEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmStatusExtEntry.setDescription('This entry exists for each Wideband Cable Modem(WCM) which links to one or more WB interface.')
ccwbWBCmStatusExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ccwbWBCmStatusExtIndex.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmStatusExtIndex.setDescription('The value of this object uniquely identifies an association between a WCM and a BG.')
ccwbWBCmWBIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccwbWBCmWBIfindex.setStatus('current')
if mibBuilder.loadTexts: ccwbWBCmWBIfindex.setDescription('ifIndex of the wideband channel associated with the WCM.')
ccwbFiberNodeDescrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 8), )
if mibBuilder.loadTexts: ccwbFiberNodeDescrTable.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeDescrTable.setDescription('This table contains the description of a Fiber Node on a CMTS. An entry in this table exists for each FiberNode ID.')
ccwbFiberNodeDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 8, 1), ).setIndexNames((0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeID"))
if mibBuilder.loadTexts: ccwbFiberNodeDescrEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeDescrEntry.setDescription('This entry provides the description of each fiber node on the CMTS and it is part of the Fiber node configuration.')
ccwbFiberNodeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeDescription.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeDescription.setDescription('This object contains the user configured description string of the fiber node.')
ccwbFiberNodeDescrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 8, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeDescrStorageType.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeDescrStorageType.setDescription('The storage type for this conceptual row.')
ccwbFiberNodeDescrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeDescrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeDescrRowStatus.setDescription('Controls and reflects the status of rows in this table. It can be used for creating and deleting entries in this table. ccwbFiberNodeDescription must not be null in order for row to be created.')
ccwbFiberNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9), )
if mibBuilder.loadTexts: ccwbFiberNodeTable.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeTable.setDescription('This table provides configuration information of each Fiber node. It will provide topology information of each Fiber node, which includes information such as, Narrowband and Wideband QAMs.')
ccwbFiberNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1), ).setIndexNames((0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeID"), (0, "CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeGlobRFID"))
if mibBuilder.loadTexts: ccwbFiberNodeEntry.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeEntry.setDescription('An entry in this table exists for each FiberNode ID that is in use. It uses two indices, i.e. ccwbFiberNodeID which is the Fiber node ID, and ccwbFiberNodeGlobRFID, which is the combined bit mask of Narrowband RF channels and Wideband rf-ports(rf-channels).')
ccwbFiberNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: ccwbFiberNodeID.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeID.setDescription('This object represents the Fiber node ID. Each Fiber node configuration on the CMTS is assigned a unique Fiber node ID.')
ccwbFiberNodeGlobRFID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: ccwbFiberNodeGlobRFID.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeGlobRFID.setDescription('This is the RF ID of both Narrowband and Wideband QAMs(rf-channels) combined.')
ccwbFiberNodeNBIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeNBIfIndx.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeNBIfIndx.setDescription('This object represents the Narrowband Ifindex of the RF downstream channel which is part of the Fiber node configuation.')
ccwbFiberNodeWBContlrPhyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 4), PhysicalIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeWBContlrPhyIndx.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeWBContlrPhyIndx.setDescription('This object represents the entity physical index of Wideband controller card. This card contains the RF port which is part of the ccwbFiberNodeGlobRFID bit mask. A value of zero means the index is invalid. ccwbFiberNodeWBRFPort and ccwbFiberNodeWBContlrPhyIndx are mutually inclusive.')
ccwbFiberNodeWBRFPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeWBRFPort.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeWBRFPort.setDescription('This object represents the RF downstream channel IDs (rf-ports) of the wideband controller card. Each Wideband controller can have 24 RF channels. ccwbFiberNodeWBRFPort and ccwbFiberNodeWBContlrPhyIndx are mutually inclusive.')
ccwbFiberNodeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 6), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeStorageType.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeStorageType.setDescription('The storage type for this conceptual row.')
ccwbFiberNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 9, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccwbFiberNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccwbFiberNodeRowStatus.setDescription('Controls and reflects the status of rows in this table. It can be used for creating and deleting entries in this table.')
ccwbRFChanUtilInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccwbRFChanUtilInterval.setStatus('current')
if mibBuilder.loadTexts: ccwbRFChanUtilInterval.setDescription('The time interval in seconds over which the RF channels utilization index is calculated. All RF channels use the same interval. Setting a value of zero disables utilization reporting. This value should be persisted accross CMTS reinitializations.')
ccwbSFPLinkTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 479, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccwbSFPLinkTrapEnable.setStatus('current')
if mibBuilder.loadTexts: ccwbSFPLinkTrapEnable.setDescription('This object specifies whether ccwbSFPLinkDownNotification and ccwbSFPLinkUpNotification are generated.')
ciscoCableWidebandMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 1))
ciscoCableWidebandMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 2))
ccwbSFPLinkDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 479, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: ccwbSFPLinkDownNotification.setStatus('current')
if mibBuilder.loadTexts: ccwbSFPLinkDownNotification.setDescription('This notification is generated when link of SFP port is lost. entPhysicalName identifies the SFP port.')
ccwbSFPLinkUpNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 479, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: ccwbSFPLinkUpNotification.setStatus('current')
if mibBuilder.loadTexts: ccwbSFPLinkUpNotification.setDescription('This notification is generated when link of SFP port is up. entPhysicalName identifies the SFP port.')
ciscoCableWidebandMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 1, 1)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableWidebandMIBCompliance = ciscoCableWidebandMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCableWidebandMIBCompliance.setDescription('The compliance statement for WCMTS devices that implement the Wideband DOCSIS feature.')
ciscoCableWidebandMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 1, 2)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroup"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableWidebandMIBComplianceRev1 = ciscoCableWidebandMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCableWidebandMIBComplianceRev1.setDescription('The compliance statement for WCMTS devices that implement the Wideband DOCSIS feature.')
ciscoCableWidebandMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 1, 3)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroupRev1"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableWidebandMIBComplianceRev2 = ciscoCableWidebandMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCableWidebandMIBComplianceRev2.setDescription('The compliance statement for WCMTS devices that implement the Wideband DOCSIS feature.')
ciscoCableWidebandMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 1, 4)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroupRev1"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroupSup1"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandObjGroupSup2"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWidebandNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableWidebandMIBComplianceRev3 = ciscoCableWidebandMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoCableWidebandMIBComplianceRev3.setDescription('The compliance statement for WCMTS devices that implement the Wideband DOCSIS feature.')
ccwbWidebandObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 2, 1)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelFrequency"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelWidth"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelModulation"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelAnnex"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelMpegPkts"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamIPAddressType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamIPAddress"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamMacAddress"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamUdpPort"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamTos"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamVlanId"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamPriorityBits"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoRFBandwidth"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoRFStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoRFRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoNBStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoNBRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBBondGrpSecondary"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBCmStatusValue"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBCmWBIfindex"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeDescription"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeDescrStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeDescrRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeNBIfIndx"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeWBContlrPhyIndx"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeWBRFPort"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccwbWidebandObjGroup = ccwbWidebandObjGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ccwbWidebandObjGroup.setDescription('Group of objects implemented in WCMTS providing for Wideband DOCSIS feature.')
ccwbWidebandObjGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 2, 2)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelUtilization"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanUtilInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccwbWidebandObjGroupSup1 = ccwbWidebandObjGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ccwbWidebandObjGroupSup1.setDescription('Group of objects implemented in WCMTS for RF channel utilization calculation.')
ccwbWidebandObjGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 2, 3)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelFrequencyRev1"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelWidth"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelModulation"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelAnnex"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChannelMpegPkts"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamIPAddressType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamIPAddress"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamMacAddress"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamUdpPort"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamTos"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamVlanId"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamPriorityBits"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamDepiRemoteId"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoRFBandwidth"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoRFStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoRFRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoNBStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBtoNBRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBBondGrpSecondary"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBCmStatusValue"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbWBCmWBIfindex"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeDescription"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeDescrStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeDescrRowStatus"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeNBIfIndx"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeWBContlrPhyIndx"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeWBRFPort"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeStorageType"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbFiberNodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccwbWidebandObjGroupRev1 = ccwbWidebandObjGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ccwbWidebandObjGroupRev1.setDescription('Group of objects implemented in WCMTS providing for Wideband DOCSIS feature.')
ccwbWidebandObjGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 2, 4)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamDepiTunnel"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbRFChanQamTsid"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbSFPLinkTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccwbWidebandObjGroupSup2 = ccwbWidebandObjGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ccwbWidebandObjGroupSup2.setDescription('Group of objects implemented in WCMTS for SFP Port information.')
ccwbWidebandNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 479, 2, 2, 5)).setObjects(("CISCO-CABLE-WIDEBAND-MIB", "ccwbSFPLinkDownNotification"), ("CISCO-CABLE-WIDEBAND-MIB", "ccwbSFPLinkUpNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccwbWidebandNotifGroup = ccwbWidebandNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ccwbWidebandNotifGroup.setDescription('A collection of notifications which provides SFP linkup/linkdown state.')
mibBuilder.exportSymbols("CISCO-CABLE-WIDEBAND-MIB", ccwbRFChanQamVlanId=ccwbRFChanQamVlanId, ccwbWBBondGrpEntry=ccwbWBBondGrpEntry, ccwbFiberNodeDescrStorageType=ccwbFiberNodeDescrStorageType, ciscoCableWidebandMIBCompliance=ciscoCableWidebandMIBCompliance, ccwbRFChanQamIPAddressType=ccwbRFChanQamIPAddressType, ccwbWBCmStatusExtIndex=ccwbWBCmStatusExtIndex, ccwbRFChannelEntry=ccwbRFChannelEntry, ccwbRFChanQamTos=ccwbRFChanQamTos, ccwbWBtoRFMappingTable=ccwbWBtoRFMappingTable, ccwbWidebandObjGroupRev1=ccwbWidebandObjGroupRev1, ccwbSFPLinkUpNotification=ccwbSFPLinkUpNotification, ccwbRFChannelAnnex=ccwbRFChannelAnnex, ccwbWBtoNBStorageType=ccwbWBtoNBStorageType, ccwbRFChannelTable=ccwbRFChannelTable, ccwbRFChanQamUdpPort=ccwbRFChanQamUdpPort, ccwbRFChannelStorageType=ccwbRFChannelStorageType, ccwbWBBondGrpTable=ccwbWBBondGrpTable, ciscoCableWidebandMIBComplianceRev3=ciscoCableWidebandMIBComplianceRev3, ccwbSFPLinkTrapEnable=ccwbSFPLinkTrapEnable, ccwbFiberNodeDescrEntry=ccwbFiberNodeDescrEntry, ccwbRFChanQamTsid=ccwbRFChanQamTsid, ccwbFiberNodeRowStatus=ccwbFiberNodeRowStatus, ciscoCableWidebandMIBComplianceRev1=ciscoCableWidebandMIBComplianceRev1, ciscoCableWidebandMIBComplianceRev2=ciscoCableWidebandMIBComplianceRev2, ccwbWBtoNBifIndexForNB=ccwbWBtoNBifIndexForNB, ccwbRFChanUtilInterval=ccwbRFChanUtilInterval, ccwbRFChannelRowStatus=ccwbRFChannelRowStatus, ccwbFiberNodeWBRFPort=ccwbFiberNodeWBRFPort, ccwbRFChannelMpegPkts=ccwbRFChannelMpegPkts, ccwbRFChanQamDepiRemoteId=ccwbRFChanQamDepiRemoteId, ciscoCableWidebandMIBConform=ciscoCableWidebandMIBConform, ciscoCableWidebandMIB=ciscoCableWidebandMIB, ccwbRFChannelNum=ccwbRFChannelNum, ccwbRFChannelUtilization=ccwbRFChannelUtilization, ccwbSFPLinkDownNotification=ccwbSFPLinkDownNotification, ccwbRFChannelQamTable=ccwbRFChannelQamTable, PYSNMP_MODULE_ID=ciscoCableWidebandMIB, ciscoCableWidebandMIBObjects=ciscoCableWidebandMIBObjects, ccwbWBCmWBIfindex=ccwbWBCmWBIfindex, ccwbRFChannelModulation=ccwbRFChannelModulation, ccwbWBCmStatusTable=ccwbWBCmStatusTable, ccwbWidebandNotifGroup=ccwbWidebandNotifGroup, ccwbWBtoNBMappingTable=ccwbWBtoNBMappingTable, ccwbWidebandObjGroupSup2=ccwbWidebandObjGroupSup2, ccwbWidebandObjGroupSup1=ccwbWidebandObjGroupSup1, ccwbFiberNodeTable=ccwbFiberNodeTable, ccwbWBtoRFMappingEntry=ccwbWBtoRFMappingEntry, ccwbWBtoNBMappingEntry=ccwbWBtoNBMappingEntry, ccwbWidebandObjGroup=ccwbWidebandObjGroup, ccwbFiberNodeGlobRFID=ccwbFiberNodeGlobRFID, ccwbFiberNodeID=ccwbFiberNodeID, ciscoCableWidebandMIBGroups=ciscoCableWidebandMIBGroups, ccwbWBCmStatusExtEntry=ccwbWBCmStatusExtEntry, ccwbFiberNodeDescrTable=ccwbFiberNodeDescrTable, ciscoCableWidebandMIBCompliances=ciscoCableWidebandMIBCompliances, ccwbWBBondGrpSecondary=ccwbWBBondGrpSecondary, ccwbRFChannelFrequencyRev1=ccwbRFChannelFrequencyRev1, ccwbRFChanQamPriorityBits=ccwbRFChanQamPriorityBits, ccwbFiberNodeEntry=ccwbFiberNodeEntry, ccwbRFChanQamDepiTunnel=ccwbRFChanQamDepiTunnel, ccwbFiberNodeDescrRowStatus=ccwbFiberNodeDescrRowStatus, ccwbRFChannelWidth=ccwbRFChannelWidth, ccwbWBtoRFBandwidth=ccwbWBtoRFBandwidth, ccwbRFChannelQamEntry=ccwbRFChannelQamEntry, ccwbRFChannelFrequency=ccwbRFChannelFrequency, ccwbWBCmStatusExtTable=ccwbWBCmStatusExtTable, ccwbFiberNodeNBIfIndx=ccwbFiberNodeNBIfIndx, ccwbWBtoRFRowStatus=ccwbWBtoRFRowStatus, ccwbFiberNodeStorageType=ccwbFiberNodeStorageType, ccwbWBCmStatusEntry=ccwbWBCmStatusEntry, ccwbWBCmStatusValue=ccwbWBCmStatusValue, ccwbRFChanQamIPAddress=ccwbRFChanQamIPAddress, ccwbFiberNodeDescription=ccwbFiberNodeDescription, ccwbWBtoRFStorageType=ccwbWBtoRFStorageType, ccwbFiberNodeWBContlrPhyIndx=ccwbFiberNodeWBContlrPhyIndx, ciscoCableWidebandMIBNotifs=ciscoCableWidebandMIBNotifs, ccwbRFChanQamMacAddress=ccwbRFChanQamMacAddress, ccwbWBtoNBRowStatus=ccwbWBtoNBRowStatus)
