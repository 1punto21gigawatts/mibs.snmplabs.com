#
# PySNMP MIB module HUAWEI-MP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, MibIdentifier, Unsigned32, NotificationType, Counter32, Bits, ObjectIdentity, ModuleIdentity, TimeTicks, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "MibIdentifier", "Unsigned32", "NotificationType", "Counter32", "Bits", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hwMultilinkPPP = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33))
if mibBuilder.loadTexts: hwMultilinkPPP.setLastUpdated('200405180000Z')
if mibBuilder.loadTexts: hwMultilinkPPP.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwMultilinkPPP.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwMultilinkPPP.setDescription('The HUAWEI-MP-MIB provides read access to MP(Multilink PPP) link status information. The information available through this MIB includes: the father channel, the bundled son channel, the slot on which MP bundled, the number of son channels, the bundle name, the statistic of lost fragments, reordered packets, unassigned packets, interleaved packets, and the received/sent sequence, etc. ')
hwMpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1))
hwMpMultilinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1), )
if mibBuilder.loadTexts: hwMpMultilinkTable.setStatus('current')
if mibBuilder.loadTexts: hwMpMultilinkTable.setDescription('This table describes the information of MP link. The index of this table is the interface index of MP group or VT(Virtual Template).')
hwMpMultilinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwMpMultilinkEntry.setStatus('current')
if mibBuilder.loadTexts: hwMpMultilinkEntry.setDescription('Each entry in this table describes the information of MP link. The available information includes: the father channel, the slot on which MP bundled, the number of bundled son channels, the statistics of lost fragments, reordered packets, unassigned packets, interleaved packets, and received/sent sequence. ')
hwMpMultilinkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpMultilinkDescr.setStatus('current')
if mibBuilder.loadTexts: hwMpMultilinkDescr.setDescription('The interface name of the father interface on which MP bundled. It is the name of a Virtual Template or a MP group.')
hwMpBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpBundleName.setStatus('current')
if mibBuilder.loadTexts: hwMpBundleName.setDescription('The bundle name of the multilink. when authentication is configured, the bundle name is the authenticated user name; when authentication not configured, the bundle name is multilink. ')
hwMpBundledSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpBundledSlot.setStatus('current')
if mibBuilder.loadTexts: hwMpBundledSlot.setDescription('The slot on which MP bundled. ')
hwMpBundledMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpBundledMemberCnt.setStatus('current')
if mibBuilder.loadTexts: hwMpBundledMemberCnt.setDescription('The number of the bundled son channel of the MP link. ')
hwMpLostFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpLostFragments.setStatus('current')
if mibBuilder.loadTexts: hwMpLostFragments.setDescription('The number of fragments of the MP link discarded because bad fragments received, or assembling packet failed, etc.')
hwMpReorderedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpReorderedPkts.setStatus('current')
if mibBuilder.loadTexts: hwMpReorderedPkts.setDescription('The number of received packets of the MP link reordered. ')
hwMpUnassignedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpUnassignedPkts.setStatus('current')
if mibBuilder.loadTexts: hwMpUnassignedPkts.setDescription('The number of received packets of the MP link waiting for reordering. ')
hwMpInterleavedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpInterleavedPkts.setStatus('current')
if mibBuilder.loadTexts: hwMpInterleavedPkts.setDescription('The number of received packets of the MP link interleaved by the packets queued in RTPQ(Real-time Transport Protocol Queue) or LLQ(Low Latency Queue). ')
hwMpRcvdSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpRcvdSequence.setStatus('current')
if mibBuilder.loadTexts: hwMpRcvdSequence.setDescription('The current sequence number of the MP link for receiving. ')
hwMpSentSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpSentSequence.setStatus('current')
if mibBuilder.loadTexts: hwMpSentSequence.setDescription('The current sequence number of the MP link for sending. ')
hwMpDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 3600), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMpDetectTime.setStatus('current')
if mibBuilder.loadTexts: hwMpDetectTime.setDescription('The time of detecting the flapping of the son channel of the MP link to determine whether the son channel should be damped. ')
hwMpFlappingCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMpFlappingCnt.setStatus('current')
if mibBuilder.loadTexts: hwMpFlappingCnt.setDescription('The maximum number of the flapping in the detect-time; if the flapping number is more than the maximum number, the son channel will be damped. ')
hwMpDampingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMpDampingTime.setStatus('current')
if mibBuilder.loadTexts: hwMpDampingTime.setDescription('The time of damping the son channel of the MP link. ')
hwMpBundleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMpBundleThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMpBundleThreshold.setDescription('The minimum number of the bundled son channel of the MP link; if the number of the bundled son channel is less than the minimum number, the MP link can not be used. ')
hwMpSequenceReorder = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMpSequenceReorder.setStatus('current')
if mibBuilder.loadTexts: hwMpSequenceReorder.setDescription('It shows the reorder feature on MP interface. 1 shows enable ; 2 shows disable. ')
hwMpMemberlinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 2), )
if mibBuilder.loadTexts: hwMpMemberlinkTable.setStatus('current')
if mibBuilder.loadTexts: hwMpMemberlinkTable.setDescription('This table describes the information of son channels of the MP link. The index of this table is the interface index of MP group or VT(Virtual Template). ')
hwMpMemberlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-MP-MIB", "hwMpMemberlinkSeqNumber"))
if mibBuilder.loadTexts: hwMpMemberlinkEntry.setStatus('current')
if mibBuilder.loadTexts: hwMpMemberlinkEntry.setDescription('Each entry in this table describes the information of the bundled son channels of MP link. The available information includes: the interface index of the son channel, the interface name of the son channel. ')
hwMpMemberlinkSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpMemberlinkSeqNumber.setStatus('current')
if mibBuilder.loadTexts: hwMpMemberlinkSeqNumber.setDescription('The bundled sequence number of the son channels of the MP link. This object is one of the index of the table. ')
hwMpMemberlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpMemberlinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMpMemberlinkIfIndex.setDescription('The interface index of the son channels of the MP link. ')
hwMpMemberlinkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpMemberlinkDescr.setStatus('current')
if mibBuilder.loadTexts: hwMpMemberlinkDescr.setDescription('The interface name of the son channels of the MP link. ')
hwMpMemberlinkMpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMpMemberlinkMpStatus.setStatus('current')
if mibBuilder.loadTexts: hwMpMemberlinkMpStatus.setDescription('The MP status of the son channels of the MP link. 0 shows failed bind; 1 shows successful bind. ')
hwMpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 2))
hwMpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 2, 1))
hwMpSonChannelDampingDetect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 2, 1, 1)).setObjects(("HUAWEI-MP-MIB", "hwMpMemberlinkIfIndex"))
if mibBuilder.loadTexts: hwMpSonChannelDampingDetect.setStatus('current')
if mibBuilder.loadTexts: hwMpSonChannelDampingDetect.setDescription('The son channel of the MP link is damped.')
hwMpSonChannelDampingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 2, 1, 2)).setObjects(("HUAWEI-MP-MIB", "hwMpMemberlinkIfIndex"))
if mibBuilder.loadTexts: hwMpSonChannelDampingResume.setStatus('current')
if mibBuilder.loadTexts: hwMpSonChannelDampingResume.setDescription('The son channel of the MP link is recovered from damping.')
hwMpThresholdControlDetect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 2, 1, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMpThresholdControlDetect.setStatus('current')
if mibBuilder.loadTexts: hwMpThresholdControlDetect.setDescription('The MP link is controlled for threshold.')
hwMpThresholdControlDetectClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 2, 1, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMpThresholdControlDetectClear.setStatus('current')
if mibBuilder.loadTexts: hwMpThresholdControlDetectClear.setDescription('The MP link is recovered from controlling for threshold.')
hwMpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3))
hwMpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3, 1))
hwMpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3, 1, 1)).setObjects(("HUAWEI-MP-MIB", "hwMpMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMpCompliance = hwMpCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMpCompliance.setDescription('The compliance statement for entities which implement the Huawei Multilink PPP mib.')
hwMpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3, 2))
hwMpMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3, 2, 1)).setObjects(("HUAWEI-MP-MIB", "hwMpBundledMemberCnt"), ("HUAWEI-MP-MIB", "hwMpMemberlinkSeqNumber"), ("HUAWEI-MP-MIB", "hwMpMemberlinkIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMpMandatoryGroup = hwMpMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: hwMpMandatoryGroup.setDescription('A collection of objects providing mandatory MP information.')
hwMpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3, 2, 2)).setObjects(("HUAWEI-MP-MIB", "hwMpMultilinkDescr"), ("HUAWEI-MP-MIB", "hwMpBundleName"), ("HUAWEI-MP-MIB", "hwMpBundledSlot"), ("HUAWEI-MP-MIB", "hwMpBundledMemberCnt"), ("HUAWEI-MP-MIB", "hwMpLostFragments"), ("HUAWEI-MP-MIB", "hwMpReorderedPkts"), ("HUAWEI-MP-MIB", "hwMpUnassignedPkts"), ("HUAWEI-MP-MIB", "hwMpInterleavedPkts"), ("HUAWEI-MP-MIB", "hwMpRcvdSequence"), ("HUAWEI-MP-MIB", "hwMpSentSequence"), ("HUAWEI-MP-MIB", "hwMpDetectTime"), ("HUAWEI-MP-MIB", "hwMpFlappingCnt"), ("HUAWEI-MP-MIB", "hwMpDampingTime"), ("HUAWEI-MP-MIB", "hwMpBundleThreshold"), ("HUAWEI-MP-MIB", "hwMpSequenceReorder"), ("HUAWEI-MP-MIB", "hwMpMemberlinkDescr"), ("HUAWEI-MP-MIB", "hwMpMemberlinkMpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMpInfoGroup = hwMpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMpInfoGroup.setDescription('All running information of MP feature.')
hwMpTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 33, 3, 2, 3)).setObjects(("HUAWEI-MP-MIB", "hwMpSonChannelDampingDetect"), ("HUAWEI-MP-MIB", "hwMpSonChannelDampingResume"), ("HUAWEI-MP-MIB", "hwMpThresholdControlDetect"), ("HUAWEI-MP-MIB", "hwMpThresholdControlDetectClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMpTrapGroup = hwMpTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwMpTrapGroup.setDescription('Group for all MP traps.')
mibBuilder.exportSymbols("HUAWEI-MP-MIB", hwMpThresholdControlDetectClear=hwMpThresholdControlDetectClear, hwMpMandatoryGroup=hwMpMandatoryGroup, hwMpBundledSlot=hwMpBundledSlot, hwMpMultilinkDescr=hwMpMultilinkDescr, hwMpConformance=hwMpConformance, hwMpDampingTime=hwMpDampingTime, hwMpSonChannelDampingDetect=hwMpSonChannelDampingDetect, hwMpRcvdSequence=hwMpRcvdSequence, hwMpMemberlinkEntry=hwMpMemberlinkEntry, hwMpUnassignedPkts=hwMpUnassignedPkts, hwMpSonChannelDampingResume=hwMpSonChannelDampingResume, hwMpMultilinkEntry=hwMpMultilinkEntry, hwMpFlappingCnt=hwMpFlappingCnt, hwMpSentSequence=hwMpSentSequence, hwMpReorderedPkts=hwMpReorderedPkts, hwMpBundleName=hwMpBundleName, hwMpDetectTime=hwMpDetectTime, hwMpBundleThreshold=hwMpBundleThreshold, hwMpLostFragments=hwMpLostFragments, hwMpInfoGroup=hwMpInfoGroup, hwMpSequenceReorder=hwMpSequenceReorder, PYSNMP_MODULE_ID=hwMultilinkPPP, hwMpObjects=hwMpObjects, hwMpBundledMemberCnt=hwMpBundledMemberCnt, hwMpInterleavedPkts=hwMpInterleavedPkts, hwMpMemberlinkIfIndex=hwMpMemberlinkIfIndex, hwMpThresholdControlDetect=hwMpThresholdControlDetect, hwMpTraps=hwMpTraps, hwMultilinkPPP=hwMultilinkPPP, hwMpMemberlinkDescr=hwMpMemberlinkDescr, hwMpMemberlinkSeqNumber=hwMpMemberlinkSeqNumber, hwMpMemberlinkMpStatus=hwMpMemberlinkMpStatus, hwMpCompliances=hwMpCompliances, hwMpCompliance=hwMpCompliance, hwMpMemberlinkTable=hwMpMemberlinkTable, hwMpTrapGroup=hwMpTrapGroup, hwMpGroups=hwMpGroups, hwMpMultilinkTable=hwMpMultilinkTable, hwMpNotifications=hwMpNotifications)
