#
# PySNMP MIB module RBN-CARDMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-CARDMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
RbnAlarmServiceAffecting, RbnAlarmPerceivedSeverity, RbnAlarmId, RbnAlarmProbableCause, RbnAlarmType = mibBuilder.importSymbols("RBN-ALARM-TC", "RbnAlarmServiceAffecting", "RbnAlarmPerceivedSeverity", "RbnAlarmId", "RbnAlarmProbableCause", "RbnAlarmType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnSlot, = mibBuilder.importSymbols("RBN-TC", "RbnSlot")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Bits, Gauge32, ObjectIdentity, TimeTicks, ModuleIdentity, iso, MibIdentifier, Unsigned32, Integer32, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Gauge32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "iso", "MibIdentifier", "Unsigned32", "Integer32", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
rbnCardMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 31))
rbnCardMonMIB.setRevisions(('2006-10-02 00:00', '2005-05-09 00:00', '2004-09-27 00:00', '2004-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnCardMonMIB.setRevisionsDescriptions(('Added new MIB objects: rbnCardStatsVplsCircuits rbnCardStatsIpipCircuits rbnCardStatsIpv6v4ManualCircuits rbnCardStatsIpv6v4AutoCircuits ', 'Added rbnCardAlarmServiceAffecting.', 'Added rbnCardStatsTable and updated conformance information.', 'Initial version.',))
if mibBuilder.loadTexts: rbnCardMonMIB.setLastUpdated('200610020000Z')
if mibBuilder.loadTexts: rbnCardMonMIB.setOrganization('RedBack Networks, Inc.')
if mibBuilder.loadTexts: rbnCardMonMIB.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnCardMonMIB.setDescription('The MIB used to manage the Controller, I/O and System Card Monitor functionality on RedBack Networks devices.')
rbnCardMonMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 31, 0))
rbnCardMonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1))
rbnCardMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2))
rbnCardAlarmActiveTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1), )
if mibBuilder.loadTexts: rbnCardAlarmActiveTable.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmActiveTable.setDescription('This table contains the card alarms currently active on the system.')
rbnCardAlarmActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1), ).setIndexNames((0, "RBN-CARDMON-MIB", "rbnCardAlarmSlot"), (0, "RBN-CARDMON-MIB", "rbnCardAlarmActiveIndex"))
if mibBuilder.loadTexts: rbnCardAlarmActiveEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmActiveEntry.setDescription('Entries appear in this table when alarms are raised. They are removed when the alarms are cleared.')
rbnCardAlarmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnCardAlarmSlot.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmSlot.setDescription('The chassis slot number in which the card is present.')
rbnCardAlarmActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnCardAlarmActiveIndex.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmActiveIndex.setDescription('A monotonically increasing integer index. It wraps back to 1 after it reaches its maximum value.')
rbnCardAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 3), RbnAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmId.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmId.setDescription('An identifier for the alarm.')
rbnCardAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 4), RbnAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmType.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmType.setDescription('The type of the alarm.')
rbnCardAlarmDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmDateAndTime.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmDateAndTime.setDescription('The local date and time when the alarm was raised')
rbnCardAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmDescription.setDescription('A text string which conveys additional information about the alarm.')
rbnCardAlarmProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 7), RbnAlarmProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmProbableCause.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmProbableCause.setDescription('The probable cause for this alarm.')
rbnCardAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 8), RbnAlarmPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmSeverity.setDescription('The perceived severity of the alarm.')
rbnCardAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 1, 1, 9), RbnAlarmServiceAffecting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardAlarmServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarmServiceAffecting.setDescription('Indicates whether the alarm is perceived to be service impacting.')
rbnCardStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2), )
if mibBuilder.loadTexts: rbnCardStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsTable.setDescription('This table contains per card statistics for traffic cards. This table also provides an entry for the card that contains the ethernet management port.')
rbnCardStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1), ).setIndexNames((0, "RBN-CARDMON-MIB", "rbnCardStatsSlot"))
if mibBuilder.loadTexts: rbnCardStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsEntry.setDescription('A table providing per card statistics.')
rbnCardStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnCardStatsSlot.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsSlot.setDescription('The chassis slot number in which the card is present.')
rbnCardStatsTotalCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsTotalCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsTotalCircuits.setDescription('The count of all circuits configured on the card.')
rbnCardStatsUpCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsUpCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsUpCircuits.setDescription('The count of circuits in an up state configured on the card.')
rbnCardStatsDownCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsDownCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsDownCircuits.setDescription('The count of circuits in a down state configured on the card.')
rbnCardStatsUnboundCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsUnboundCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsUnboundCircuits.setDescription('The count of circuits not bound to an interface that are configured on the card.')
rbnCardStatsNoBindCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsNoBindCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsNoBindCircuits.setDescription('The count of circuits configured on the card that are not bound to an interface and are not subscriber or clips circuits.')
rbnCardStatsBindTotalCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsBindTotalCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsBindTotalCircuits.setDescription('The count of all circuits bound to an interface that are configured on the card.')
rbnCardStatsBindIfCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsBindIfCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsBindIfCircuits.setDescription('The count of circuits configured on the card that are bound to an interface and are not subscriber circuits.')
rbnCardStatsBindAuthCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsBindAuthCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsBindAuthCircuits.setDescription('The count of subscriber and clips bind authentication circuits configured on the card.')
rbnCardStatsBindSubCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsBindSubCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsBindSubCircuits.setDescription('The count of bind subscriber, including clips, and bind auto-subscriber circuits configured on the card.')
rbnCardStatsAtmCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsAtmCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsAtmCircuits.setDescription('The count of atm circuits configured on the card.')
rbnCardStatsEthCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsEthCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsEthCircuits.setDescription('The count of ethernet circuits configured on the card.')
rbnCardStatsPppCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsPppCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsPppCircuits.setDescription('The count of ppp circuits configured on the card.')
rbnCardStatsPppoeCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsPppoeCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsPppoeCircuits.setDescription('The count of pppoe circuits configured on the card.')
rbnCardStatsDot1qCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsDot1qCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsDot1qCircuits.setDescription('The count of dot1q circuits configured on the card.')
rbnCardStatsFrCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsFrCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsFrCircuits.setDescription('The count of frame relay circuits configured on the card.')
rbnCardStatsChdlcCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsChdlcCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsChdlcCircuits.setDescription('The count of chdlc circuits configured on the card.')
rbnCardStatsGreCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsGreCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsGreCircuits.setDescription('The count of gre circuits configured on the card.')
rbnCardStatsMplsCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsMplsCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsMplsCircuits.setDescription('The count of mpls circuits configured on the card.')
rbnCardStatsClipsCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsClipsCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsClipsCircuits.setDescription('The count of clips circuits configured on the card.')
rbnCardStatsVplsCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsVplsCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsVplsCircuits.setDescription('The count of vpls circuits configured on the card.')
rbnCardStatsIpipCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsIpipCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsIpipCircuits.setDescription('The count of IP-in-IP tunnel circuits configured on the card.')
rbnCardStatsIpv6v4ManualCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsIpv6v4ManualCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsIpv6v4ManualCircuits.setDescription('The count of IPv6v4-manual tunnel circuits configured on the card.')
rbnCardStatsIpv6v4AutoCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 31, 1, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCardStatsIpv6v4AutoCircuits.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsIpv6v4AutoCircuits.setDescription('The count of IPv6v4-auto tunnel circuits configured on the card.')
rbnCardAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 31, 0, 1)).setObjects(("RBN-CARDMON-MIB", "rbnCardAlarmId"), ("RBN-CARDMON-MIB", "rbnCardAlarmType"), ("RBN-CARDMON-MIB", "rbnCardAlarmDateAndTime"), ("RBN-CARDMON-MIB", "rbnCardAlarmDescription"), ("RBN-CARDMON-MIB", "rbnCardAlarmProbableCause"), ("RBN-CARDMON-MIB", "rbnCardAlarmSeverity"))
if mibBuilder.loadTexts: rbnCardAlarm.setStatus('current')
if mibBuilder.loadTexts: rbnCardAlarm.setDescription('An rbnCardAlarm notification signifies that an alarm has been raised/cleared on a controller, system or i/o card.')
rbnCardMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 1))
rbnCardMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 2))
rbnCardMonMIBObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 1, 1)).setObjects(("RBN-CARDMON-MIB", "rbnCardAlarmId"), ("RBN-CARDMON-MIB", "rbnCardAlarmType"), ("RBN-CARDMON-MIB", "rbnCardAlarmDateAndTime"), ("RBN-CARDMON-MIB", "rbnCardAlarmDescription"), ("RBN-CARDMON-MIB", "rbnCardAlarmProbableCause"), ("RBN-CARDMON-MIB", "rbnCardAlarmSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBObjectGroup = rbnCardMonMIBObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBObjectGroup.setDescription('A collection of objects providing card monitor information.')
rbnCardMonMIBObjectGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 1, 4)).setObjects(("RBN-CARDMON-MIB", "rbnCardAlarmId"), ("RBN-CARDMON-MIB", "rbnCardAlarmType"), ("RBN-CARDMON-MIB", "rbnCardAlarmDateAndTime"), ("RBN-CARDMON-MIB", "rbnCardAlarmDescription"), ("RBN-CARDMON-MIB", "rbnCardAlarmProbableCause"), ("RBN-CARDMON-MIB", "rbnCardAlarmSeverity"), ("RBN-CARDMON-MIB", "rbnCardAlarmServiceAffecting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBObjectGroup2 = rbnCardMonMIBObjectGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBObjectGroup2.setDescription('A collection of objects providing card monitor information.')
rbnCardMonMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 1, 2)).setObjects(("RBN-CARDMON-MIB", "rbnCardAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBNotificationGroup = rbnCardMonMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBNotificationGroup.setDescription('A collection of notifications providing card monitor information.')
rbnCardStatsMIBObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 1, 3)).setObjects(("RBN-CARDMON-MIB", "rbnCardStatsTotalCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsUpCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsDownCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsUnboundCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsNoBindCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindTotalCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindIfCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindAuthCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindSubCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsAtmCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsEthCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsPppCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsPppoeCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsDot1qCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsFrCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsChdlcCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsGreCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsMplsCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsClipsCircuits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardStatsMIBObjectGroup = rbnCardStatsMIBObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsMIBObjectGroup.setDescription('A group of objects providing card statistics.')
rbnCardStatsMIBObjectGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 1, 5)).setObjects(("RBN-CARDMON-MIB", "rbnCardStatsTotalCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsUpCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsDownCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsUnboundCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsNoBindCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindTotalCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindIfCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindAuthCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsBindSubCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsAtmCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsEthCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsPppCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsPppoeCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsDot1qCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsFrCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsChdlcCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsGreCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsMplsCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsClipsCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsVplsCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsIpipCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsIpv6v4ManualCircuits"), ("RBN-CARDMON-MIB", "rbnCardStatsIpv6v4AutoCircuits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardStatsMIBObjectGroup2 = rbnCardStatsMIBObjectGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnCardStatsMIBObjectGroup2.setDescription('A group of objects providing card statistics.')
rbnCardMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 2, 1)).setObjects(("RBN-CARDMON-MIB", "rbnCardMonMIBObjectGroup"), ("RBN-CARDMON-MIB", "rbnCardMonMIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBCompliance = rbnCardMonMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBCompliance.setDescription('The compliance statement for the Card Monitor MIB')
rbnCardMonMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 2, 2)).setObjects(("RBN-CARDMON-MIB", "rbnCardMonMIBObjectGroup"), ("RBN-CARDMON-MIB", "rbnCardMonMIBNotificationGroup"), ("RBN-CARDMON-MIB", "rbnCardStatsMIBObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBCompliance2 = rbnCardMonMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBCompliance2.setDescription('The compliance statement for the Card Monitor MIB, including card statistics.')
rbnCardMonMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 2, 3)).setObjects(("RBN-CARDMON-MIB", "rbnCardMonMIBObjectGroup2"), ("RBN-CARDMON-MIB", "rbnCardMonMIBNotificationGroup"), ("RBN-CARDMON-MIB", "rbnCardStatsMIBObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBCompliance3 = rbnCardMonMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBCompliance3.setDescription('The compliance statement for the Card Monitor MIB, including card statistics.')
rbnCardMonMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 31, 2, 2, 4)).setObjects(("RBN-CARDMON-MIB", "rbnCardMonMIBObjectGroup2"), ("RBN-CARDMON-MIB", "rbnCardMonMIBNotificationGroup"), ("RBN-CARDMON-MIB", "rbnCardStatsMIBObjectGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCardMonMIBCompliance4 = rbnCardMonMIBCompliance4.setStatus('current')
if mibBuilder.loadTexts: rbnCardMonMIBCompliance4.setDescription('The compliance statement for the Card Monitor MIB, including card statistics.')
mibBuilder.exportSymbols("RBN-CARDMON-MIB", rbnCardStatsChdlcCircuits=rbnCardStatsChdlcCircuits, rbnCardMonMIBObjects=rbnCardMonMIBObjects, rbnCardMonMIBConformance=rbnCardMonMIBConformance, rbnCardMonMIBNotifications=rbnCardMonMIBNotifications, rbnCardStatsBindSubCircuits=rbnCardStatsBindSubCircuits, rbnCardAlarmDescription=rbnCardAlarmDescription, rbnCardStatsDownCircuits=rbnCardStatsDownCircuits, rbnCardStatsBindIfCircuits=rbnCardStatsBindIfCircuits, rbnCardStatsDot1qCircuits=rbnCardStatsDot1qCircuits, rbnCardMonMIBGroups=rbnCardMonMIBGroups, rbnCardStatsIpv6v4ManualCircuits=rbnCardStatsIpv6v4ManualCircuits, rbnCardMonMIBCompliances=rbnCardMonMIBCompliances, rbnCardStatsBindTotalCircuits=rbnCardStatsBindTotalCircuits, rbnCardStatsClipsCircuits=rbnCardStatsClipsCircuits, rbnCardAlarmDateAndTime=rbnCardAlarmDateAndTime, rbnCardMonMIBNotificationGroup=rbnCardMonMIBNotificationGroup, rbnCardStatsEthCircuits=rbnCardStatsEthCircuits, rbnCardStatsPppoeCircuits=rbnCardStatsPppoeCircuits, rbnCardStatsTable=rbnCardStatsTable, rbnCardAlarmActiveIndex=rbnCardAlarmActiveIndex, rbnCardMonMIBCompliance2=rbnCardMonMIBCompliance2, rbnCardStatsMIBObjectGroup=rbnCardStatsMIBObjectGroup, rbnCardAlarmType=rbnCardAlarmType, rbnCardStatsFrCircuits=rbnCardStatsFrCircuits, rbnCardAlarm=rbnCardAlarm, rbnCardStatsIpipCircuits=rbnCardStatsIpipCircuits, rbnCardStatsPppCircuits=rbnCardStatsPppCircuits, rbnCardAlarmProbableCause=rbnCardAlarmProbableCause, rbnCardStatsAtmCircuits=rbnCardStatsAtmCircuits, rbnCardAlarmId=rbnCardAlarmId, rbnCardMonMIB=rbnCardMonMIB, rbnCardStatsUpCircuits=rbnCardStatsUpCircuits, rbnCardAlarmActiveTable=rbnCardAlarmActiveTable, rbnCardMonMIBCompliance=rbnCardMonMIBCompliance, PYSNMP_MODULE_ID=rbnCardMonMIB, rbnCardStatsUnboundCircuits=rbnCardStatsUnboundCircuits, rbnCardAlarmActiveEntry=rbnCardAlarmActiveEntry, rbnCardStatsMplsCircuits=rbnCardStatsMplsCircuits, rbnCardMonMIBObjectGroup2=rbnCardMonMIBObjectGroup2, rbnCardStatsIpv6v4AutoCircuits=rbnCardStatsIpv6v4AutoCircuits, rbnCardStatsGreCircuits=rbnCardStatsGreCircuits, rbnCardMonMIBObjectGroup=rbnCardMonMIBObjectGroup, rbnCardStatsNoBindCircuits=rbnCardStatsNoBindCircuits, rbnCardStatsTotalCircuits=rbnCardStatsTotalCircuits, rbnCardStatsBindAuthCircuits=rbnCardStatsBindAuthCircuits, rbnCardStatsVplsCircuits=rbnCardStatsVplsCircuits, rbnCardAlarmSlot=rbnCardAlarmSlot, rbnCardAlarmSeverity=rbnCardAlarmSeverity, rbnCardMonMIBCompliance3=rbnCardMonMIBCompliance3, rbnCardMonMIBCompliance4=rbnCardMonMIBCompliance4, rbnCardStatsEntry=rbnCardStatsEntry, rbnCardStatsMIBObjectGroup2=rbnCardStatsMIBObjectGroup2, rbnCardAlarmServiceAffecting=rbnCardAlarmServiceAffecting, rbnCardStatsSlot=rbnCardStatsSlot)
