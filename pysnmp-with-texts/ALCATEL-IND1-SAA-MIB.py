#
# PySNMP MIB module ALCATEL-IND1-SAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-SAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:19:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Saa, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Saa")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
Dot1agCfmMaintDomainName, Dot1agCfmMaintAssocName = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMaintDomainName", "Dot1agCfmMaintAssocName")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Unsigned32, Integer32, ModuleIdentity, ObjectIdentity, TimeTicks, MibIdentifier, IpAddress, Counter32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "Integer32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "Counter32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso")
DisplayString, MacAddress, DateAndTime, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "DateAndTime", "TruthValue", "TextualConvention", "RowStatus")
alcatelIND1SaaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1))
alcatelIND1SaaMIB.setRevisions(('2009-07-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1SaaMIB.setRevisionsDescriptions(('The mib for SAA module',))
if mibBuilder.loadTexts: alcatelIND1SaaMIB.setLastUpdated('200907210000Z')
if mibBuilder.loadTexts: alcatelIND1SaaMIB.setOrganization('Alcatel - Architects Of An Internet World')
if mibBuilder.loadTexts: alcatelIND1SaaMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate version of this document is used with the products in question: Alcatel Internetworking, Incorporated (Division 1, Formerly XYLAN Corporation) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://www.ind.alcatel.com File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1SaaMIB.setDescription('This module describes an authoritative enterprise- specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line Service Assurance agent. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2002 Alcatel Internetworking, Incorporated ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1SaaNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0))
if mibBuilder.loadTexts: alcatelIND1SaaNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SaaNotifications.setDescription('Branch for Saa Notifications.')
alcatelIND1SaaMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1))
if mibBuilder.loadTexts: alcatelIND1SaaMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SaaMIBObjects.setDescription('Branch For Saa Objects.')
alcatelIND1SaaMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2))
if mibBuilder.loadTexts: alcatelIND1SaaMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SaaMIBConformance.setDescription('Branch for Saa Module MIB Subsystem Conformance Information.')
alcatelIND1SaaMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1SaaMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SaaMIBGroups.setDescription('Branch for Saa Module MIB Subsystem Units of Conformance.')
alcatelIND1SaaMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1SaaMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SaaMIBCompliances.setDescription('Branch for Saa Module MIB Subsystem Compliance Statements.')
alaSaaCtrlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1))
alaSaaCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaSaaCtrlTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlTable.setDescription('Defines the SAA control table for providing, via SNMP, the capability of performing SAA test operations. ')
alaSaaCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"))
if mibBuilder.loadTexts: alaSaaCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlEntry.setDescription('An entry in the alaSaaCtrlTable table, containing information on the Saa function for a single instance of the Saa. ')
alaSaaCtrlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('USER')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaCtrlOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlOwnerIndex.setDescription('Owner name to identify the responsiblity of the entries in the table.')
alaSaaCtrlTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaCtrlTestIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlTestIndex.setDescription('Unique name to identify the entries in the table. The name is unique across various SNMP users. ')
alaSaaCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlRowStatus.setDescription('This object allows entries to be created and deleted in the table. ')
alaSaaCtrlDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 4), DisplayString().clone('DEFAULT')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlDescr.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlDescr.setDescription('User provided description string for the SAA. ')
alaSaaCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("start", 0), ("stop", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlAdminStatus.setDescription('Indicates wether to start or stop the SAA test. ')
alaSaaCtrlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("ipSaa", 1), ("ethSaa", 2), ("macSaa", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaCtrlTestMode.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlTestMode.setDescription('The type of SAA test to be performed. The undefined value corresponds to the case when an entry is created in the alaSaaCtrlTable table without specifying a value for this object. This value shall be updated when the user creates an entry for the corresponding saa in the alaSaaIpCtrlTable table, alaSaaEthoamCtrlTable table or alaSaaMacCtrlTable table. ')
alaSaaCtrlRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaCtrlRuns.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlRuns.setDescription('Indicates number of times SAA test has been executed. ')
alaSaaCtrlFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaCtrlFailures.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlFailures.setDescription('Indicates the number of times this SAA test has failed. ')
alaSaaCtrlLastRunResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 0), ("success", 1), ("failed", 2), ("aborted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaCtrlLastRunResult.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlLastRunResult.setDescription('The result of the latest SAA test iteration. ')
alaSaaCtrlLastRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaCtrlLastRunTime.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlLastRunTime.setDescription('The time at which the last iteration of the SAA was run. ')
alaSaaCtrlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500)).clone(150)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlInterval.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlInterval.setDescription('Interval, in minutes, between two iterations of the SAA test. Valid values are 1, 2, 5 and 10-1500.')
alaSaaCtrlStartAt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 12), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlStartAt.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlStartAt.setDescription('Specifies the time at which the SAA test is to be started. The deci-seconds specified in DateAndTime has no significance in scheduling SAA. The year in DateAndTime must be in the range from 1970 to 2037. ')
alaSaaCtrlStopAt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 13), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlStopAt.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlStopAt.setDescription('Specifies the time at which the SAA test is to be stopped.Special value for DataAndTime which is 9999-12-31,23:59:59.0 is used to reset the existing configured value of this object, indicating that the SAA test should never stop. The deci-seconds in the DateAndTime has no significance in scheduling SAA.The year in DateAndTime must be in the range from 1970 to 2037. ')
alaSaaCtrlMaxHistoryRows = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 14), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaCtrlMaxHistoryRows.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlMaxHistoryRows.setDescription('Specifies the maximum number of iterations for which history data is maintained. ')
alaSaaCtrlJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('micro-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlJitterThreshold.setDescription('Trap is generated when the Jitter Threshold is crossed. 0 indicates it is diabled.')
alaSaaCtrlRTTThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('micro-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaCtrlRTTThreshold.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlRTTThreshold.setDescription('Trap is generated when the RTT Threshold is crossed. 0 indicates it is diabled.')
alaSaaIpCtrlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2))
alaSaaIpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaSaaIpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTable.setDescription('It defines the ping Control Table for providing the ping capability via SNMP. The results of these tests are stored in the alaSaaIpResultsTable and alaSaaIpHistoryTable. ')
alaSaaIpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTestIndex"))
if mibBuilder.loadTexts: alaSaaIpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlEntry.setDescription('Entry for the alaSaaIpCtrl table. ')
alaSaaIpCtrlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('USER'))
if mibBuilder.loadTexts: alaSaaIpCtrlOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlOwnerIndex.setDescription('Owner name to identify the responsiblity of the entries in the table.')
alaSaaIpCtrlTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaSaaIpCtrlTestIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTestIndex.setDescription('Unique name to identify the entries in the table. This name is unique across various SNMP users. ')
alaSaaIpCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlRowStatus.setDescription('Allows entries to be created and deleted in the table. createAndWait value is not supported for this object. ')
alaSaaIpCtrlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("icmpEcho", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlTestMode.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTestMode.setDescription('Specifies the type of ping test defined by this entry. ')
alaSaaIpCtrlTgtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlTgtAddrType.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTgtAddrType.setDescription('Specifies the InetAddress type of host address to be used as the destination for performing a ping operation. InetAddressIPv4(1) is the only type currently supported. ')
alaSaaIpCtrlTgtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlTgtAddress.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTgtAddress.setDescription('Specifies the IP host address to be used as the destination for performing a ping operation. ')
alaSaaIpCtrlSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlSrcAddrType.setDescription('Specifies the InetAddress type of host address to be used as the source for performing a ping operation. InetAddressIPv4(1) is the only type currently supported. ')
alaSaaIpCtrlSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlSrcAddress.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlSrcAddress.setDescription('Specifies the IP host address to be used as the source for performing a ping operation. The default value of this object is 0.0.0.0 if alaSaaIpCtrlSrcAddrType is set to ipv4. ')
alaSaaIpCtrlPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 1472)).clone(24)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlPayloadSize.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlPayloadSize.setDescription('Specifies the size of the ICMP payload to be used for the ping operation. ')
alaSaaIpCtrlNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlNumPkts.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlNumPkts.setDescription('Specifies the number of packets to be sent in one ping iteration.Configuration of number of packets and inter packet delay should be such that total execution time remains less then 10s. ')
alaSaaIpCtrlInterPktDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlInterPktDelay.setDescription('Specifies the delay between two consecutive packets transmitted during a ping iteration.The value specified should be a multiple of 100. ')
alaSaaIpCtrlTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlTypeOfService.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTypeOfService.setDescription('Specifies the type of service ')
alaSaaIpCtrlVRFId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaIpCtrlVRFId.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlVRFId.setDescription("Specifies the VRF ID. Only the value '0' is currently supported. ")
alaSaaIpCtrlTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTotalPktsSent.setDescription('Specifies the total number of packets sent during all the ping iterations. ')
alaSaaIpCtrlTotalPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlTotalPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTotalPktsRcvd.setDescription('Specifies the total number of packets received during all the ping iterations. ')
alaSaaIpCtrlMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlMinRTT.setDescription('Specifies the minimum round trip time among all the iterations of the SAA. ')
alaSaaIpCtrlAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlAvgRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlAvgRTT.setDescription('Specifies the average round trip time of all the iterations of the SAA. ')
alaSaaIpCtrlMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlMaxRTT.setDescription('Specifies the maximum round trip time among all the iterations of the SAA. ')
alaSaaIpCtrlMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlMinJitter.setDescription('Specifies the minimum jitter among all the iterations of the SAA. ')
alaSaaIpCtrlAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlAvgJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlAvgJitter.setDescription('Specifies the average jitter of all the iterations of the SAA. ')
alaSaaIpCtrlMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlMaxJitter.setDescription('Specifies the maximum jitter among all the iterations of the SAA. ')
alaSaaIpCtrlTSMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlTSMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTSMinRTT.setDescription('Specifies the timestamp of the iteration that gave the minimum packet delay. ')
alaSaaIpCtrlTSMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlTSMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTSMaxRTT.setDescription('Specifies the timestamp of the iteration that gave the maximum packet delay. ')
alaSaaIpCtrlTSMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlTSMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTSMinJitter.setDescription('Specifies the timestamp of the iteration that gave the minimum packet jitter. ')
alaSaaIpCtrlTSMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 2, 1, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpCtrlTSMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlTSMaxJitter.setDescription('Specifies the timestamp of the iteration that gave the maximum packet jitter. ')
alaSaaIpResults = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3))
alaSaaIpResultsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaSaaIpResultsTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsTable.setDescription('Defines the IP Results Table for providing the capability of performing IP Ping operations. The results of these operations are stored in the alaSaaIpResultsTable and the alaSaaIpHistoryTable. An entry is removed from the alaSaaIpResultsTable when its corresponding alaSaaCtrlEntry is deleted. ')
alaSaaIpResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsTestRunIndex"))
if mibBuilder.loadTexts: alaSaaIpResultsEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsEntry.setDescription('Entry for the alaSaaResults table. An entry in this table summarizes results from multiple invocations of the test configured by the corresponding entry in alaSaaIpCtrlTable. ')
alaSaaIpResultsTestRunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaIpResultsTestRunIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsTestRunIndex.setDescription('The value of alaSaaIpResultsTestRunIndex identifies the row entry that reports results for a single OAM test run. The value of this object starts from 1 and can go upto a maximum of alaSaaCtrlMaxHistoryRows. ')
alaSaaIpResultsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsPktsSent.setDescription('Specifies the number of packets sent during a single ping iteration. ')
alaSaaIpResultsPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsPktsRcvd.setDescription('Specifies the number of packets received during a single ping iteration. ')
alaSaaIpResultsInterPktDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsInterPktDelay.setDescription('Specifies the inter-packet-delay with which the packets were sent in the iteration. ')
alaSaaIpResultsRunResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 0), ("success", 1), ("failed", 2), ("aborted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsRunResult.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsRunResult.setDescription('The result of the iteration. ')
alaSaaIpResultsRunResultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsRunResultReason.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsRunResultReason.setDescription("If the iteration fails, this field indicates the reason for failure. If the reason for failure cannot be determined the value of this field is the string Unknown. For successful iterations, the value of this field is the string 'Iteration successful'. ")
alaSaaIpResultsRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsRunTime.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsRunTime.setDescription('The date and time at which the iteraton was run. ')
alaSaaIpResultsMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsMinRTT.setDescription('The minimum round trip time. ')
alaSaaIpResultsAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsAvgRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsAvgRTT.setDescription('The average round trip time. ')
alaSaaIpResultsMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsMaxRTT.setDescription('The maximum round trip time. ')
alaSaaIpResultsMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsMinJitter.setDescription('Minumum jitter value. ')
alaSaaIpResultsAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsAvgJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsAvgJitter.setDescription('Average jitter value. ')
alaSaaIpResultsMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpResultsMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsMaxJitter.setDescription('Maximum jitter value ')
alaSaaIpHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 4))
alaSaaIpHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaSaaIpHistoryTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpHistoryTable.setDescription('It is the table for storing the results of a ping operation. An entry in this table is created when a ping operation is performed. Entries are removed from this table when its corresponding alaSaaCtrlEntry is deleted. ')
alaSaaIpHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsTestRunIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaIpHistoryIndex"))
if mibBuilder.loadTexts: alaSaaIpHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpHistoryEntry.setDescription('Entry of the alaSaaIpHistory table. ')
alaSaaIpHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaSaaIpHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpHistoryIndex.setDescription('An entry in this table is created when the result of a ping iteration is determined. The initial 2 instance identifier index values identify the alaSaaIpPingCtrlEntry that a ping iteration result (alaSaaIpHistoryEntry) belongs to. The alaSaaIpHistoryIndex element selects a single ping iteration result. The value of this object starts from 1 and can go up to 20,history of first 20 packets will be stored. ')
alaSaaIpHistoryPktRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpHistoryPktRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpHistoryPktRTT.setDescription('The round trip time taken by a single packet in an iteration. ')
alaSaaIpHistoryPktJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaIpHistoryPktJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpHistoryPktJitter.setDescription('The jitter value for a single packet in an iteration. ')
alaSaaEthoamCtrlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5))
alaSaaEthoamCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaSaaEthoamCtrlTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTable.setDescription('Defines the table for providing, via SNMP, the capability of performing Ethernet Loopback and DMM test operations. The results of these tests are stored in the alaSaaEthoamResultsTable and the alaSaaEthoamHistoryTable.')
alaSaaEthoamCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTestIndex"))
if mibBuilder.loadTexts: alaSaaEthoamCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlEntry.setDescription('Defines an entry in the alaSaaEthoamCtrlTable. ')
alaSaaEthoamCtrlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 1), SnmpAdminString().clone('USER'))
if mibBuilder.loadTexts: alaSaaEthoamCtrlOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlOwnerIndex.setDescription('Owner name to identify the responsiblity of the entries in the table.')
alaSaaEthoamCtrlTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: alaSaaEthoamCtrlTestIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTestIndex.setDescription('Unique name to identify the entries in the table. This name is unique across various SNMP users. ')
alaSaaEthoamCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlRowStatus.setDescription('This object allows entries to be created and deleted in the alaSaaEthoamCtrlTable. Deletion of an entry in this table results in all corresponding (same alaSaaEthoamCtrlOwnerIndex and alaSaaEthoamCtrlTestIndex index values) alaSaaEthoamResultsTable and alaSaaEthoamHistoryTable entries being deleted.')
alaSaaEthoamCtrlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernetLoopback", 1), ("ethernetDmm", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTestMode.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTestMode.setDescription('Specifies the type of Ethernet OAM test defined by this entry. ethernetLoopback - tests connectivity and round trip time by sending loopback requests. ethernetDmm - tests connectivity and round trip time by sending timestamped packets. ')
alaSaaEthoamCtrlTgtMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTgtMepId.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTgtMepId.setDescription('The Mep-Id of the destination to which the Ethernet Loopback or DMM message is to be sent. Either alaSaaEthoamCtrlTgtMepId or alaSaaEthoamCtrlTgtMAC should be specified while configuring an alaSaaEthoamCtrlEntry. ')
alaSaaEthoamCtrlTgtMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTgtMAC.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTgtMAC.setDescription('The Target MAC Address of the destination to which the Ethernet Loopback or DMM message is to be sent: A unicast destination MAC address. Either alaSaaEthoamCtrlTgtMepId or alaSaaEthoamCtrlTgtMAC should be specified while configuring an alaSaaEthoamCtrlEntry. ')
alaSaaEthoamCtrlSrcMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlSrcMepId.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlSrcMepId.setDescription('The Mep-Id of the source node initiating the Ethernet Loopback or DMM message.')
alaSaaEthoamCtrlDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 8), Dot1agCfmMaintDomainName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlDomainName.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlDomainName.setDescription('The name of the domain to which the source Mep belongs. ')
alaSaaEthoamCtrlAssociationName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 9), Dot1agCfmMaintAssocName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlAssociationName.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlAssociationName.setDescription('The name of the association in the domain (specified by alaSaaEthoamCtrlDomainName) to which the source Mep belongs. ')
alaSaaEthoamCtrlPktTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 10), Integer32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlPktTimeOut.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlPktTimeOut.setDescription('The maximum time to wait for the reply of the transmitted packet. ')
alaSaaEthoamCtrlNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlNumPkts.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlNumPkts.setDescription('The number of packets to be sent in one iteration of Eth-LB/DMM test.Configuration of number of packets and inter packet delay should be such that total execution time remains less then 10s. ')
alaSaaEthoamCtrlInterPktDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milli-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlInterPktDelay.setDescription('Specifies the delay between two consecutive packets transmitted during an iteration. The value specified should be a multiple of 100. ')
alaSaaEthoamCtrlPktData = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlPktData.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlPktData.setDescription('An arbitrary amount of data to be included in the Data TLV, if the Data TLV is selected to be sent.')
alaSaaEthoamCtrlVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlVlanPriority.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlVlanPriority.setDescription('Priority. 3 bit value to be used in the VLAN tag, if present in the transmitted frame. ')
alaSaaEthoamCtrlDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaEthoamCtrlDropEligible.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlDropEligible.setDescription('Drop Enable bit value to be used in the VLAN tag, if present in the transmitted frame.')
alaSaaEthoamCtrlTotalPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTotalPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTotalPktsRcvd.setDescription('Specifies the total number of packets received during all the Eth-LB/DMM iterations.')
alaSaaEthoamCtrlTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTotalPktsSent.setDescription('Specifies the total number of packets sent during all the Eth-LB/DMM iterations.')
alaSaaEthoamCtrlMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlMinRTT.setDescription('Specifies the minimum round trip time among all the iterations of the SAA. ')
alaSaaEthoamCtrlAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlAvgRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlAvgRTT.setDescription('Specifies the average round trip time of all the iterations of the SAA. ')
alaSaaEthoamCtrlMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlMaxRTT.setDescription('Specifies the maximum round trip time among all the iterations of the SAA. ')
alaSaaEthoamCtrlMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlMinJitter.setDescription('Specifies the minimum jitter among all the iterations of the SAA. ')
alaSaaEthoamCtrlAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlAvgJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlAvgJitter.setDescription('Specifies the average jitter of all the iterations of the SAA. ')
alaSaaEthoamCtrlMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlMaxJitter.setDescription('Specifies the maximum jitter among all the iterations of the SAA. ')
alaSaaEthoamCtrlTSMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMinRTT.setDescription('The timestamp of the iteration that gave the minimum packet delay.')
alaSaaEthoamCtrlTSMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMaxRTT.setDescription('The timestamp of the iteration that gave the maximum packet delay.')
alaSaaEthoamCtrlTSMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMinJitter.setDescription('The timestamp of the iteration that gave the minimum packet jitter.')
alaSaaEthoamCtrlTSMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 5, 1, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlTSMaxJitter.setDescription('The timestamp of the iteration that gave the maximum packet jitter.')
alaSaaEthoamResults = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6))
alaSaaEthoamResultsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaSaaEthoamResultsTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsTable.setDescription('Defines the Ethoam Results Table for providing the capability of performing Eth-LB/DMM operations. The results of these operations are stored in the alaSaaEthoamResultsTable and the alaSaaEthoamHistoryTable. An entry is removed from the alaSaaEthoamResultsTable when its corresponding alaSaaCtrlEntry is deleted.')
alaSaaEthoamResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsTestRunIndex"))
if mibBuilder.loadTexts: alaSaaEthoamResultsEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsEntry.setDescription('Defines an entry in the alaSaaEthoamResultsTable. The alaSaaEthoamResultsTable has the same indexing as the alaSaaEthoamCtrlTable in order for a alaSaaEthoamResultsEntry to correspond to the alaSaaEthoamCtrlEntry that caused it to be created. An entry in this table summarizes results from multiple invocations of the test configured by the corresponding entry in alaSaaEthoamCtrlTable.')
alaSaaEthoamResultsTestRunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaEthoamResultsTestRunIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsTestRunIndex.setDescription('The value of alaSaaEthoamResultsTestRunIndex identifies the row entry that reports results for a single Eth-LB/DMM test run. The value of this object starts from 1 and can go upto a maximum of alaSaaCtrlMaxHistoryRows.')
alaSaaEthoamResultsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsPktsSent.setDescription('Specifies the number of packets sent during a single Eth-LB/DMM iteration.')
alaSaaEthoamResultsPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsPktsRcvd.setDescription('Specifies the number of packets received during a single Eth-LB/DMM iteration')
alaSaaEthoamResultsInterPktDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsInterPktDelay.setDescription('Specifies the inter-packet-delay with which the packets were sent in the iteration. ')
alaSaaEthoamResultsRunResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 0), ("success", 1), ("failed", 2), ("aborted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsRunResult.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsRunResult.setDescription('The result of the Eth-LB/DMM iteration.')
alaSaaEthoamResultsRunResultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsRunResultReason.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsRunResultReason.setDescription("If the iteration fails, this field indicates the reason for failure. If the reason for failure cannot be determined the value of this field is the string Unknown. For successful iterations, the value of this field is the string 'Iteration successful'. ")
alaSaaEthoamResultsRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsRunTime.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsRunTime.setDescription('The date and time at which the iteraton was run. ')
alaSaaEthoamResultsMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsMinRTT.setDescription('The minimum round trip time.')
alaSaaEthoamResultsAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsAvgRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsAvgRTT.setDescription('The average round trip time. ')
alaSaaEthoamResultsMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsMaxRTT.setDescription('The maximum round trip time. ')
alaSaaEthoamResultsMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsMinJitter.setDescription('The minimum jitter value. ')
alaSaaEthoamResultsAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsAvgJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsAvgJitter.setDescription('The average jitter value. ')
alaSaaEthoamResultsMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamResultsMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsMaxJitter.setDescription('The maximum jitter value. ')
alaSaaEthoamHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 7))
alaSaaEthoamHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaSaaEthoamHistoryTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamHistoryTable.setDescription('Defines a table for storing the results of an Eth-LB/DMM iteration. The number of entries in this table for a configured test are limited by the value of the corresponding alaSaaCtrlMaxHistoryRows object. An entry in this table is created when the result of an Eth-LB/DMM test is determined. An entry is removed from this table when its corresponding alaSaaEthoamCtrlEntry is deleted. The agent removes the oldest entry for a test in the alaSaaEthoamHistoryTable to allow the addition of a new entry for that test once the number of rows in the alaSaaEthoamHistoryTable reaches the value specified by alaSaaCtrlMaxHistoryRows.')
alaSaaEthoamHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsTestRunIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaEthoamHistoryIndex"))
if mibBuilder.loadTexts: alaSaaEthoamHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamHistoryEntry.setDescription('')
alaSaaEthoamHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaSaaEthoamHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamHistoryIndex.setDescription('An entry in this table is created when the result of an Eth-LB/DMM iteration is determined. The initial 2 instance identifier index values identify the alaSaaEthoamCtrlEntry that an Eth-LB/DMM iteration result (alaSaaEthoamHistoryEntry) belongs to. The alaSaaEthoamHistoryIndex element selects a single ping iteration result. The value of this object starts from 1 and can go up to 20,history of first 20 packets will be stored.')
alaSaaEthoamHistoryPktRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamHistoryPktRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamHistoryPktRTT.setDescription('The round trip time taken by a single packet in an iteration. ')
alaSaaEthoamHistoryPktJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaEthoamHistoryPktJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamHistoryPktJitter.setDescription('The jitter value for a single packet in an iteration. ')
alaSaaMacCtrlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8))
alaSaaMacCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaSaaMacCtrlTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTable.setDescription('It defines the MAC-Ping Control Table for providing the ping capability via SNMP. The results of these tests are stored in the alaSaaMacResultsTable and alaSaaMacHistoryTable. ')
alaSaaMacCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTestIndex"))
if mibBuilder.loadTexts: alaSaaMacCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlEntry.setDescription('Entry for the alaSaaMacCtrl table. ')
alaSaaMacCtrlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('USER'))
if mibBuilder.loadTexts: alaSaaMacCtrlOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlOwnerIndex.setDescription('Owner name to identify the responsiblity of the entries in the table.')
alaSaaMacCtrlTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaSaaMacCtrlTestIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTestIndex.setDescription('Unique name to identify the entries in the table. This name is unique across various SNMP users. ')
alaSaaMacCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlRowStatus.setDescription('Allows entries to be created and deleted in the table. createAndWait value is not supported for this object. ')
alaSaaMacCtrlDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlDstAddress.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlDstAddress.setDescription('Specifies the mac address to be used as the destination for performing a MAC-Ping operation. ')
alaSaaMacCtrlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlVlan.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlVlan.setDescription('The 12 bit Vlan value to be used in the VLAN tag, in the transmitted frame. ')
alaSaaMacCtrlVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlVlanPriority.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlVlanPriority.setDescription('Priority. 3 bit value to be used in the VLAN tag, if present in the transmitted frame. ')
alaSaaMacCtrlIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlIsid.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlIsid.setDescription('The i-domain Service Indentifier (I-SID) which identifies the service instance in a PBB network on a BEB switch. For a customer packet flowing toward the b-domain, the I-SID is derived from the VFI and inserted into the packet. For a packet arrived from the b-domain, the I-SID is used to identify the VFI for the i-domain processing. From the service MIB. ')
alaSaaMacCtrlPktData = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlPktData.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlPktData.setDescription('An arbitrary amount of data to be included in the Data TLV, if the Data TLV is selected to be sent.')
alaSaaMacCtrlDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlDropEligible.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlDropEligible.setDescription('Drop Enable bit value to be used in the VLAN tag, if present in the transmitted frame.')
alaSaaMacCtrlPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 1500)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlPayloadSize.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlPayloadSize.setDescription('Specifies the size of the MAC-Ping payload to be used for the MAC-Ping operation. ')
alaSaaMacCtrlNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlNumPkts.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlNumPkts.setDescription('Specifies the number of packets to be sent in one MAC-Ping iteration.Configuration of number of packets and inter packet delay should be such that total execution time remains less then 10s. ')
alaSaaMacCtrlInterPktDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaMacCtrlInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlInterPktDelay.setDescription('Specifies the delay between two consecutive packets transmitted during a MAC-Ping iteration.The value specified should be a multiple of 100. ')
alaSaaMacCtrlTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTotalPktsSent.setDescription('Specifies the total number of packets sent during all the ping iterations. ')
alaSaaMacCtrlTotalPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlTotalPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTotalPktsRcvd.setDescription('Specifies the total number of packets received during all the ping iterations. ')
alaSaaMacCtrlMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlMinRTT.setDescription('Specifies the minimum round trip time among all the iterations of the SAA. ')
alaSaaMacCtrlAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlAvgRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlAvgRTT.setDescription('Specifies the average round trip time of all the iterations of the SAA. ')
alaSaaMacCtrlMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlMaxRTT.setDescription('Specifies the maximum round trip time among all the iterations of the SAA. ')
alaSaaMacCtrlMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlMinJitter.setDescription('Specifies the minimum jitter among all the iterations of the SAA. ')
alaSaaMacCtrlAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlAvgJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlAvgJitter.setDescription('Specifies the average jitter of all the iterations of the SAA. ')
alaSaaMacCtrlMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlMaxJitter.setDescription('Specifies the maximum jitter among all the iterations of the SAA. ')
alaSaaMacCtrlTSMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlTSMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTSMinRTT.setDescription('Specifies the timestamp of the iteration that gave the minimum packet delay. ')
alaSaaMacCtrlTSMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlTSMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTSMaxRTT.setDescription('Specifies the timestamp of the iteration that gave the maximum packet delay. ')
alaSaaMacCtrlTSMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlTSMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTSMinJitter.setDescription('Specifies the timestamp of the iteration that gave the minimum packet jitter. ')
alaSaaMacCtrlTSMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 8, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacCtrlTSMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlTSMaxJitter.setDescription('Specifies the timestamp of the iteration that gave the maximum packet jitter. ')
alaSaaMacResults = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9))
alaSaaMacResultsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaSaaMacResultsTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsTable.setDescription('Defines the MAC-Ping Results Table for providing the capability of performing MAC-Ping operations. The results of these operations are stored in the alaSaaMacResultsTable and the alaSaaMacHistoryTable. An entry is removed from the alaSaaMacResultsTable when its corresponding alaSaaCtrlEntry is deleted.')
alaSaaMacResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsTestRunIndex"))
if mibBuilder.loadTexts: alaSaaMacResultsEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsEntry.setDescription('Defines an entry in the alaSaaMacResultsTable. The alaSaaMacResultsTable has the same indexing as the alaSaaMacCtrlTable in order for a alaSaaMacResultsEntry to correspond to the alaSaaMacCtrlEntry that caused it to be created. An entry in this table summarizes results from multiple invocations of the test configured by the corresponding entry in alaSaaMacCtrlTable.')
alaSaaMacResultsTestRunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaMacResultsTestRunIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsTestRunIndex.setDescription('The value of alaSaaMacResultsTestRunIndex identifies the row entry that reports results for a single test run. The value of this object starts from 1 and can go upto a maximum of alaSaaCtrlMaxHistoryRows.')
alaSaaMacResultsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPktsSent.setDescription('Specifies the number of packets sent during a single MAC-Ping iteration.')
alaSaaMacResultsPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPktsRcvd.setDescription('Specifies the number of packets received during a single MAC-Ping iteration')
alaSaaMacResultsInterPktDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsInterPktDelay.setDescription('Specifies the inter-packet-delay with which the packets were sent in the iteration. ')
alaSaaMacResultsRunResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 0), ("success", 1), ("failed", 2), ("aborted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsRunResult.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsRunResult.setDescription('The result of the MAC-Ping iteration.')
alaSaaMacResultsRunResultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsRunResultReason.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsRunResultReason.setDescription("If the iteration fails, this field indicates the reason for failure. If the reason for failure cannot be determined the value of this field is the string Unknown. For successful iterations, the value of this field is the string 'Iteration successful'. ")
alaSaaMacResultsRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsRunTime.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsRunTime.setDescription('The date and time at which the iteraton was run. ')
alaSaaMacResultsMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsMinRTT.setDescription('The minimum round trip time.')
alaSaaMacResultsAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsAvgRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsAvgRTT.setDescription('The average round trip time. ')
alaSaaMacResultsMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsMaxRTT.setDescription('The maximum round trip time. ')
alaSaaMacResultsMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsMinJitter.setDescription('The minimum jitter value. ')
alaSaaMacResultsAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsAvgJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsAvgJitter.setDescription('The average jitter value. ')
alaSaaMacResultsMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsMaxJitter.setDescription('The maximum jitter value. ')
alaSaaMacHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 10))
alaSaaMacHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 10, 1), )
if mibBuilder.loadTexts: alaSaaMacHistoryTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacHistoryTable.setDescription('Defines a table for storing the results of a MAC-Ping iteration. The number of entries in this table for a configured test are limited by the value of the corresponding alaSaaCtrlMaxHistoryRows object. An entry in this table is created when the result of an MAC-Ping test is determined. An entry is removed from this table when its corresponding alaSaaMacCtrlEntry is deleted. The agent removes the oldest entry for a test in the alaSaaMacHistoryTable to allow the addition of a new entry for that test once the number of rows in the alaSaaMacHistoryTable reaches the value specified by alaSaaCtrlMaxHistoryRows.')
alaSaaMacHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsTestRunIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacHistoryIndex"))
if mibBuilder.loadTexts: alaSaaMacHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacHistoryEntry.setDescription('')
alaSaaMacHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaSaaMacHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacHistoryIndex.setDescription('An entry in this table is created when the result of an MAC-ping iteration is determined. The initial 2 instance identifier index values identify the alaSaaMacCtrlEntry that an MAC-ping iteration result (alaSaaMacHistoryEntry) belongs to. The alaSaaMacHistoryIndex element selects a single ping iteration result. The value of this object starts from 1 and can go up to 20,history of first 20 packets will be stored.')
alaSaaMacHistoryPktRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacHistoryPktRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacHistoryPktRTT.setDescription('The round trip time taken by a single packet in an iteration. ')
alaSaaMacHistoryPktJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacHistoryPktJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacHistoryPktJitter.setDescription('The jitter value for a single packet in an iteration. ')
alaSaaMacResultsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11))
alaSaaMacResultsPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1), )
if mibBuilder.loadTexts: alaSaaMacResultsPortTable.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortTable.setDescription('Defines a table for storing the results of ports for a MAC-Ping iteration. It only holds results from the last iteration.')
alaSaaMacResultsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlOwnerIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTestIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsTestRunIndex"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortChassis"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortSlot"), (0, "ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortPort"))
if mibBuilder.loadTexts: alaSaaMacResultsPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortEntry.setDescription('')
alaSaaMacResultsPortChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaMacResultsPortChassis.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortChassis.setDescription('The chassis number of the entry. ')
alaSaaMacResultsPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaMacResultsPortSlot.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortSlot.setDescription('The slot number of the entry. ')
alaSaaMacResultsPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSaaMacResultsPortPort.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortPort.setDescription('The port number of the entry. ')
alaSaaMacResultsPortPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortPktsSent.setDescription('The number of transmit packets. ')
alaSaaMacResultsPortPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortPktsRcvd.setDescription('The number of receive packets. ')
alaSaaMacResultsPortRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortRTT.setDescription('The round trip time taken by a single packet in an iteration. ')
alaSaaMacResultsPortMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortMinRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortMinRTT.setDescription('The minimum round trip time taken by a single packet for the port. ')
alaSaaMacResultsPortMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortMaxRTT.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortMaxRTT.setDescription('The maximum round trip time taken by a single for the port. ')
alaSaaMacResultsPortJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortJitter.setDescription('The jitter value for a single packet in an iteration. ')
alaSaaMacResultsPortMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortMinJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortMinJitter.setDescription('The minimum jitter value for a single packet for the port. ')
alaSaaMacResultsPortMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSaaMacResultsPortMaxJitter.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortMaxJitter.setDescription('The maximum jitter value for a single packet for the port. ')
alaSaaXmlFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 13))
alaSaaXmlStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaXmlStatus.setStatus('current')
if mibBuilder.loadTexts: alaSaaXmlStatus.setDescription('Enables the XML file feature.')
alaSaaXmlFilename = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 13, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaXmlFilename.setStatus('current')
if mibBuilder.loadTexts: alaSaaXmlFilename.setDescription('Save file location.')
alaSaaXmlInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15000)).clone(20)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSaaXmlInterval.setStatus('current')
if mibBuilder.loadTexts: alaSaaXmlInterval.setDescription('Interval where SAA will save the file. The value is in minutes.')
alaSaaSpbFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14))
alaSaaSpbAutoCreate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbAutoCreate.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbAutoCreate.setDescription('Determines if the SPB VLANs are automatically configured.')
alaSaaSpbAutoStart = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbAutoStart.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbAutoStart.setDescription('Determines if the SPB VLANs are automatically started.')
alaSaaSpbInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500)).clone(150)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbInterval.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbInterval.setDescription('Interval, in minutes, between two iterations of the SAA test. Valid values are 1, 2, 5 and 10-1500.')
alaSaaSpbNumPkts = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbNumPkts.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbNumPkts.setDescription('The number of packets to be sent in one iteration of Eth-LB/DMM test. ')
alaSaaSpbInterPktDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbInterPktDelay.setDescription('Specifies the delay between two consecutive packets transmitted during an iteration. The value specified should be a multiple of 100. ')
alaSaaSpbPayloadSize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 1500)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbPayloadSize.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbPayloadSize.setDescription('Specifies the size of the MAC-Ping payload to be used for the MAC-Ping operation. ')
alaSaaSpbVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbVlanPriority.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbVlanPriority.setDescription('Priority. 3 bit value to be used in the VLAN tag, if present in the transmitted frame. ')
alaSaaSpbDropEligible = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbDropEligible.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbDropEligible.setDescription('Drop Enable bit value to be used in the VLAN tag, if present in the transmitted frame.')
alaSaaSpbPktData = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbPktData.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbPktData.setDescription('An arbitrary amount of data to be included in the Data TLV, if the Data TLV is selected to be sent.')
alaSaaSpbJitterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('micro-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbJitterThreshold.setDescription('Trap is generated when the Jitter Threshold is crossed. 0 indicates it is diabled.')
alaSaaSpbRTTThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('micro-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbRTTThreshold.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbRTTThreshold.setDescription('Trap is generated when the RTT Threshold is crossed. 0 indicates it is diabled.')
alaSaaSpbReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbReset.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbReset.setDescription('When set TRUE, will set the alaSaaSpbFeature variables to the defualts.')
alaSaaSpbKeep = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbKeep.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbKeep.setDescription('When set on, SPB sessions will not be deallocated when SPB indicates a MAC or VLAN went away.')
alaSaaSpbFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 14, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSaaSpbFlush.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbFlush.setDescription('When set TRUE, SPB sessions will be flushed and reallocated with the current SPB MACs and VLANs.')
saaTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 1, 15))
alaSaaIPIterationCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 1)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsTestRunIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"))
if mibBuilder.loadTexts: alaSaaIPIterationCompleteTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaIPIterationCompleteTrap.setDescription('A alaSaaIPIterationCompleteTrap notification is sent when a IP SAA iteration is completed.')
alaSaaEthIterationCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 2)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsTestRunIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"))
if mibBuilder.loadTexts: alaSaaEthIterationCompleteTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthIterationCompleteTrap.setDescription('A alaSaaEthIterationCompleteTrap notification is sent when a Eth-LB or Eth-DMM SAA iteration is completed.')
alaSaaMacIterationCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 3)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsTestRunIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"))
if mibBuilder.loadTexts: alaSaaMacIterationCompleteTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacIterationCompleteTrap.setDescription('A alaSaaIPIterationCompleteTrap notification is sent when a IP SAA iteration is completed.')
alaSaaPacketLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 4)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPktsRcvd"))
if mibBuilder.loadTexts: alaSaaPacketLossTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaPacketLossTrap.setDescription('A alaSaaPacketLossTrap notification is sent when a packet is lost during a test.')
alaSaaJitterThresholdYellowTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 5)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlJitterThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsAvgJitter"))
if mibBuilder.loadTexts: alaSaaJitterThresholdYellowTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaJitterThresholdYellowTrap.setDescription('A alaSaaJitterThresholdTrap notification is sent when 90% of the Jitter Threshold is crossed.')
alaSaaRTTThresholdYellowTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 6)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlRTTThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsAvgRTT"))
if mibBuilder.loadTexts: alaSaaRTTThresholdYellowTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaRTTThresholdYellowTrap.setDescription('A alaSaaRTTThresholdYellowTrap notification is sent when 90% of the RTT Threshold is crossed.')
alaSaaJitterThresholdRedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 7)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlJitterThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsAvgJitter"))
if mibBuilder.loadTexts: alaSaaJitterThresholdRedTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaJitterThresholdRedTrap.setDescription('A alaSaaJitterThresholdTrap notification is sent when the Jitter Threshold is crossed.')
alaSaaRTTThresholdRedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 0, 8)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlRTTThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsAvgRTT"))
if mibBuilder.loadTexts: alaSaaRTTThresholdRedTrap.setStatus('current')
if mibBuilder.loadTexts: alaSaaRTTThresholdRedTrap.setDescription('A alaSaaRTTThresholdRedTrap notification is sent when the RTT Threshold is crossed.')
alcatelIND1SaaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlConfigGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlConfigGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpHistoryGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlConfigGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamHistoryGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlConfigGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacHistoryGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaXmlGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbGroup"), ("ALCATEL-IND1-SAA-MIB", "alaSaaNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1SaaMIBCompliance = alcatelIND1SaaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SaaMIBCompliance.setDescription('Compliance statement for Saa.')
alaSaaCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlOwnerIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlRowStatus"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlDescr"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlAdminStatus"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlTestMode"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlRuns"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlFailures"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlLastRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlInterval"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlStartAt"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlStopAt"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlMaxHistoryRows"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlJitterThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaCtrlRTTThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaCtrlConfigGroup = alaSaaCtrlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaCtrlConfigGroup.setDescription('Collection of objects for management of Saa control Group.')
alaSaaIpCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlRowStatus"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTestMode"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTgtAddrType"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTgtAddress"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlSrcAddrType"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlSrcAddress"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlPayloadSize"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlNumPkts"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTypeOfService"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlVRFId"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTotalPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTotalPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlAvgRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlAvgJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlMaxJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTSMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTSMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTSMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpCtrlTSMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaIpCtrlConfigGroup = alaSaaIpCtrlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpCtrlConfigGroup.setDescription('Collection of objects for management of Saa Ip Configuration Table.')
alaSaaIpResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsTestRunIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsRunResultReason"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsAvgRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsAvgJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpResultsMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaIpResultsGroup = alaSaaIpResultsGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpResultsGroup.setDescription('Collection of objects for management of Saa Ip Results Table.')
alaSaaIpHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaIpHistoryPktRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaIpHistoryPktJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaIpHistoryGroup = alaSaaIpHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaIpHistoryGroup.setDescription('Collection of objects for management of Saa Ip history table.')
alaSaaEthoamCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlRowStatus"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTestMode"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTgtMepId"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTgtMAC"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlSrcMepId"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlDomainName"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlAssociationName"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlPktTimeOut"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlNumPkts"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlPktData"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlVlanPriority"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlDropEligible"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTotalPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTotalPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlAvgRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlAvgJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlMaxJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTSMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTSMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTSMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamCtrlTSMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaEthoamCtrlConfigGroup = alaSaaEthoamCtrlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamCtrlConfigGroup.setDescription('Collection of objects for management of Saa Ethoam Configuration Table.')
alaSaaEthoamResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsTestRunIndex"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsRunResultReason"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsAvgRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsAvgJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamResultsMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaEthoamResultsGroup = alaSaaEthoamResultsGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamResultsGroup.setDescription('Collection of objects for management of Saa Ethoam Results Table.')
alaSaaEthoamHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamHistoryPktRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthoamHistoryPktJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaEthoamHistoryGroup = alaSaaEthoamHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaEthoamHistoryGroup.setDescription('Collection of objects for management of Saa Ethoam history table.')
alaSaaMacCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlRowStatus"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlDstAddress"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlVlan"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlVlanPriority"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlIsid"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlPktData"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlDropEligible"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlPayloadSize"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlNumPkts"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTotalPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTotalPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlAvgRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlAvgJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlMaxJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTSMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTSMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTSMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacCtrlTSMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaMacCtrlConfigGroup = alaSaaMacCtrlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacCtrlConfigGroup.setDescription('Collection of objects for management of Saa MAC-Ping Configuration Table.')
alaSaaMacResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsRunResult"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsRunResultReason"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsRunTime"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsAvgRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsAvgJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaMacResultsGroup = alaSaaMacResultsGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsGroup.setDescription('Collection of objects for management of Saa MAC-Ping Results Table.')
alaSaaMacHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaMacHistoryPktRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacHistoryPktJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsTestRunIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaMacHistoryGroup = alaSaaMacHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacHistoryGroup.setDescription('Collection of objects for management of Saa Mac-Ping History table.')
alaSaaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaIPIterationCompleteTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaEthIterationCompleteTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacIterationCompleteTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaPacketLossTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaJitterThresholdYellowTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaRTTThresholdYellowTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaJitterThresholdRedTrap"), ("ALCATEL-IND1-SAA-MIB", "alaSaaRTTThresholdRedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaNotificationsGroup = alaSaaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaNotificationsGroup.setDescription('A collection of notifications used by SAA to signal to a management entity that SAA iteration has completed.')
alaSaaMacResultsPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortChassis"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortSlot"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortPort"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortPktsSent"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortPktsRcvd"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortMinRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortMaxRTT"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortMinJitter"), ("ALCATEL-IND1-SAA-MIB", "alaSaaMacResultsPortMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaMacResultsPortGroup = alaSaaMacResultsPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaMacResultsPortGroup.setDescription('Collection of objects for management of Saa Mac-Ping Port table.')
alaSaaXmlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaXmlStatus"), ("ALCATEL-IND1-SAA-MIB", "alaSaaXmlFilename"), ("ALCATEL-IND1-SAA-MIB", "alaSaaXmlInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaXmlGroup = alaSaaXmlGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaXmlGroup.setDescription('Collection of objects for management of profile bindings.')
alaSaaSpbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 56, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-SAA-MIB", "alaSaaSpbAutoCreate"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbAutoStart"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbInterval"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbNumPkts"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbInterPktDelay"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbPayloadSize"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbVlanPriority"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbDropEligible"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbPktData"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbJitterThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbRTTThreshold"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbReset"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbKeep"), ("ALCATEL-IND1-SAA-MIB", "alaSaaSpbFlush"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSaaSpbGroup = alaSaaSpbGroup.setStatus('current')
if mibBuilder.loadTexts: alaSaaSpbGroup.setDescription('Collection of objects for management of profile bindings.')
mibBuilder.exportSymbols("ALCATEL-IND1-SAA-MIB", alaSaaEthoamCtrlSrcMepId=alaSaaEthoamCtrlSrcMepId, alaSaaMacResultsPortPktsSent=alaSaaMacResultsPortPktsSent, alaSaaCtrlDescr=alaSaaCtrlDescr, alaSaaIpResultsTestRunIndex=alaSaaIpResultsTestRunIndex, alaSaaIpHistoryGroup=alaSaaIpHistoryGroup, alaSaaIpCtrlAvgJitter=alaSaaIpCtrlAvgJitter, alaSaaSpbGroup=alaSaaSpbGroup, alaSaaIpCtrlMaxRTT=alaSaaIpCtrlMaxRTT, alaSaaSpbKeep=alaSaaSpbKeep, alaSaaEthoamResults=alaSaaEthoamResults, alaSaaXmlInterval=alaSaaXmlInterval, alcatelIND1SaaMIBObjects=alcatelIND1SaaMIBObjects, alaSaaEthoamResultsInterPktDelay=alaSaaEthoamResultsInterPktDelay, alaSaaMacHistoryPktRTT=alaSaaMacHistoryPktRTT, alaSaaIpResultsTable=alaSaaIpResultsTable, alaSaaCtrlInterval=alaSaaCtrlInterval, alaSaaIpCtrlTSMaxJitter=alaSaaIpCtrlTSMaxJitter, alaSaaMacHistory=alaSaaMacHistory, alaSaaMacCtrlAvgJitter=alaSaaMacCtrlAvgJitter, alaSaaEthoamCtrlConfigGroup=alaSaaEthoamCtrlConfigGroup, alaSaaIpResultsAvgJitter=alaSaaIpResultsAvgJitter, alaSaaIpCtrlConfig=alaSaaIpCtrlConfig, alaSaaEthoamHistoryEntry=alaSaaEthoamHistoryEntry, alaSaaSpbReset=alaSaaSpbReset, alaSaaCtrlRuns=alaSaaCtrlRuns, alaSaaMacResultsTestRunIndex=alaSaaMacResultsTestRunIndex, alaSaaMacCtrlVlan=alaSaaMacCtrlVlan, alaSaaEthoamCtrlPktData=alaSaaEthoamCtrlPktData, alaSaaEthoamHistoryIndex=alaSaaEthoamHistoryIndex, PYSNMP_MODULE_ID=alcatelIND1SaaMIB, alaSaaMacCtrlRowStatus=alaSaaMacCtrlRowStatus, alaSaaEthoamCtrlTestIndex=alaSaaEthoamCtrlTestIndex, alaSaaEthoamCtrlInterPktDelay=alaSaaEthoamCtrlInterPktDelay, alaSaaMacHistoryPktJitter=alaSaaMacHistoryPktJitter, alaSaaSpbJitterThreshold=alaSaaSpbJitterThreshold, alaSaaIpResults=alaSaaIpResults, saaTrapsObj=saaTrapsObj, alaSaaEthoamCtrlEntry=alaSaaEthoamCtrlEntry, alaSaaMacCtrlTSMaxRTT=alaSaaMacCtrlTSMaxRTT, alaSaaIpResultsMinRTT=alaSaaIpResultsMinRTT, alaSaaMacCtrlTotalPktsRcvd=alaSaaMacCtrlTotalPktsRcvd, alcatelIND1SaaMIB=alcatelIND1SaaMIB, alaSaaEthoamCtrlMinJitter=alaSaaEthoamCtrlMinJitter, alaSaaIpResultsEntry=alaSaaIpResultsEntry, alaSaaSpbFeature=alaSaaSpbFeature, alaSaaIpResultsAvgRTT=alaSaaIpResultsAvgRTT, alaSaaEthoamResultsPktsRcvd=alaSaaEthoamResultsPktsRcvd, alaSaaNotificationsGroup=alaSaaNotificationsGroup, alaSaaIpHistoryTable=alaSaaIpHistoryTable, alaSaaEthoamResultsTestRunIndex=alaSaaEthoamResultsTestRunIndex, alaSaaEthoamCtrlTSMinRTT=alaSaaEthoamCtrlTSMinRTT, alaSaaEthoamCtrlAvgJitter=alaSaaEthoamCtrlAvgJitter, alaSaaSpbInterPktDelay=alaSaaSpbInterPktDelay, alaSaaMacResultsRunTime=alaSaaMacResultsRunTime, alaSaaIpResultsPktsRcvd=alaSaaIpResultsPktsRcvd, alaSaaCtrlStopAt=alaSaaCtrlStopAt, alaSaaCtrlRowStatus=alaSaaCtrlRowStatus, alaSaaEthoamResultsAvgRTT=alaSaaEthoamResultsAvgRTT, alaSaaMacCtrlTSMaxJitter=alaSaaMacCtrlTSMaxJitter, alaSaaIpCtrlConfigGroup=alaSaaIpCtrlConfigGroup, alaSaaMacResultsInterPktDelay=alaSaaMacResultsInterPktDelay, alaSaaMacResultsPortEntry=alaSaaMacResultsPortEntry, alaSaaMacCtrlMinJitter=alaSaaMacCtrlMinJitter, alaSaaSpbPayloadSize=alaSaaSpbPayloadSize, alaSaaCtrlEntry=alaSaaCtrlEntry, alaSaaEthoamResultsRunResultReason=alaSaaEthoamResultsRunResultReason, alaSaaIpCtrlPayloadSize=alaSaaIpCtrlPayloadSize, alcatelIND1SaaMIBCompliances=alcatelIND1SaaMIBCompliances, alaSaaIpCtrlNumPkts=alaSaaIpCtrlNumPkts, alaSaaMacResultsPortGroup=alaSaaMacResultsPortGroup, alaSaaMacResultsPortTable=alaSaaMacResultsPortTable, alaSaaMacResultsMaxJitter=alaSaaMacResultsMaxJitter, alaSaaEthoamCtrlAvgRTT=alaSaaEthoamCtrlAvgRTT, alaSaaMacResultsAvgJitter=alaSaaMacResultsAvgJitter, alaSaaIpCtrlTSMinRTT=alaSaaIpCtrlTSMinRTT, alaSaaMacResultsPortChassis=alaSaaMacResultsPortChassis, alaSaaEthoamCtrlTSMaxJitter=alaSaaEthoamCtrlTSMaxJitter, alaSaaIpCtrlAvgRTT=alaSaaIpCtrlAvgRTT, alaSaaIpCtrlTestIndex=alaSaaIpCtrlTestIndex, alaSaaMacResultsPortSlot=alaSaaMacResultsPortSlot, alaSaaEthoamCtrlVlanPriority=alaSaaEthoamCtrlVlanPriority, alaSaaEthoamHistoryPktJitter=alaSaaEthoamHistoryPktJitter, alaSaaEthoamCtrlTgtMepId=alaSaaEthoamCtrlTgtMepId, alaSaaIpCtrlTSMaxRTT=alaSaaIpCtrlTSMaxRTT, alaSaaMacCtrlPayloadSize=alaSaaMacCtrlPayloadSize, alaSaaMacCtrlDstAddress=alaSaaMacCtrlDstAddress, alaSaaCtrlTestMode=alaSaaCtrlTestMode, alaSaaXmlFilename=alaSaaXmlFilename, alaSaaIpCtrlInterPktDelay=alaSaaIpCtrlInterPktDelay, alaSaaCtrlAdminStatus=alaSaaCtrlAdminStatus, alaSaaMacCtrlAvgRTT=alaSaaMacCtrlAvgRTT, alaSaaIpHistory=alaSaaIpHistory, alaSaaEthoamResultsMaxRTT=alaSaaEthoamResultsMaxRTT, alaSaaMacHistoryGroup=alaSaaMacHistoryGroup, alaSaaCtrlJitterThreshold=alaSaaCtrlJitterThreshold, alaSaaMacCtrlTSMinRTT=alaSaaMacCtrlTSMinRTT, alaSaaCtrlLastRunTime=alaSaaCtrlLastRunTime, alaSaaEthoamCtrlTgtMAC=alaSaaEthoamCtrlTgtMAC, alaSaaEthoamHistoryGroup=alaSaaEthoamHistoryGroup, alaSaaEthoamCtrlMinRTT=alaSaaEthoamCtrlMinRTT, alaSaaEthoamCtrlTotalPktsSent=alaSaaEthoamCtrlTotalPktsSent, alaSaaEthoamResultsMinJitter=alaSaaEthoamResultsMinJitter, alaSaaMacResultsGroup=alaSaaMacResultsGroup, alaSaaSpbNumPkts=alaSaaSpbNumPkts, alaSaaMacResultsAvgRTT=alaSaaMacResultsAvgRTT, alaSaaIpCtrlSrcAddrType=alaSaaIpCtrlSrcAddrType, alaSaaMacCtrlOwnerIndex=alaSaaMacCtrlOwnerIndex, alaSaaMacResults=alaSaaMacResults, alaSaaMacResultsPktsRcvd=alaSaaMacResultsPktsRcvd, alaSaaIpCtrlTestMode=alaSaaIpCtrlTestMode, alaSaaMacResultsTable=alaSaaMacResultsTable, alaSaaIpResultsRunResultReason=alaSaaIpResultsRunResultReason, alaSaaMacIterationCompleteTrap=alaSaaMacIterationCompleteTrap, alaSaaMacCtrlInterPktDelay=alaSaaMacCtrlInterPktDelay, alaSaaCtrlConfigGroup=alaSaaCtrlConfigGroup, alaSaaIpCtrlTgtAddrType=alaSaaIpCtrlTgtAddrType, alaSaaIpHistoryEntry=alaSaaIpHistoryEntry, alaSaaMacResultsPortMaxRTT=alaSaaMacResultsPortMaxRTT, alaSaaMacResultsMaxRTT=alaSaaMacResultsMaxRTT, alaSaaMacResultsPortMaxJitter=alaSaaMacResultsPortMaxJitter, alaSaaIpResultsRunResult=alaSaaIpResultsRunResult, alaSaaCtrlFailures=alaSaaCtrlFailures, alaSaaIpCtrlMinRTT=alaSaaIpCtrlMinRTT, alaSaaEthoamCtrlMaxJitter=alaSaaEthoamCtrlMaxJitter, alaSaaMacCtrlPktData=alaSaaMacCtrlPktData, alaSaaMacResultsEntry=alaSaaMacResultsEntry, alaSaaMacResultsRunResult=alaSaaMacResultsRunResult, alaSaaIpCtrlVRFId=alaSaaIpCtrlVRFId, alaSaaSpbInterval=alaSaaSpbInterval, alaSaaEthoamCtrlTestMode=alaSaaEthoamCtrlTestMode, alaSaaJitterThresholdYellowTrap=alaSaaJitterThresholdYellowTrap, alaSaaEthoamCtrlOwnerIndex=alaSaaEthoamCtrlOwnerIndex, alaSaaEthoamResultsMinRTT=alaSaaEthoamResultsMinRTT, alaSaaMacCtrlMaxJitter=alaSaaMacCtrlMaxJitter, alaSaaEthoamResultsAvgJitter=alaSaaEthoamResultsAvgJitter, alaSaaMacCtrlMaxRTT=alaSaaMacCtrlMaxRTT, alaSaaEthoamCtrlConfig=alaSaaEthoamCtrlConfig, alaSaaEthoamResultsRunResult=alaSaaEthoamResultsRunResult, alaSaaMacResultsPktsSent=alaSaaMacResultsPktsSent, alaSaaIpResultsInterPktDelay=alaSaaIpResultsInterPktDelay, alaSaaSpbAutoCreate=alaSaaSpbAutoCreate, alaSaaRTTThresholdYellowTrap=alaSaaRTTThresholdYellowTrap, alaSaaMacResultsMinJitter=alaSaaMacResultsMinJitter, alaSaaIpCtrlMaxJitter=alaSaaIpCtrlMaxJitter, alaSaaEthoamHistory=alaSaaEthoamHistory, alaSaaIpCtrlTable=alaSaaIpCtrlTable, alaSaaIpResultsMaxRTT=alaSaaIpResultsMaxRTT, alaSaaMacResultsPortRTT=alaSaaMacResultsPortRTT, alaSaaJitterThresholdRedTrap=alaSaaJitterThresholdRedTrap, alaSaaEthoamCtrlDropEligible=alaSaaEthoamCtrlDropEligible, alaSaaEthoamCtrlRowStatus=alaSaaEthoamCtrlRowStatus, alaSaaCtrlTestIndex=alaSaaCtrlTestIndex, alaSaaRTTThresholdRedTrap=alaSaaRTTThresholdRedTrap, alaSaaIpCtrlEntry=alaSaaIpCtrlEntry, alaSaaMacHistoryTable=alaSaaMacHistoryTable, alaSaaIpHistoryIndex=alaSaaIpHistoryIndex, alaSaaMacCtrlDropEligible=alaSaaMacCtrlDropEligible, alaSaaMacCtrlNumPkts=alaSaaMacCtrlNumPkts, alaSaaIpResultsPktsSent=alaSaaIpResultsPktsSent, alaSaaEthoamHistoryPktRTT=alaSaaEthoamHistoryPktRTT, alaSaaEthoamResultsPktsSent=alaSaaEthoamResultsPktsSent, alaSaaCtrlMaxHistoryRows=alaSaaCtrlMaxHistoryRows, alaSaaEthoamResultsGroup=alaSaaEthoamResultsGroup, alaSaaCtrlTable=alaSaaCtrlTable, alaSaaCtrlLastRunResult=alaSaaCtrlLastRunResult, alaSaaCtrlOwnerIndex=alaSaaCtrlOwnerIndex, alaSaaMacResultsPort=alaSaaMacResultsPort, alaSaaMacCtrlConfigGroup=alaSaaMacCtrlConfigGroup, alaSaaMacResultsRunResultReason=alaSaaMacResultsRunResultReason, alaSaaMacCtrlIsid=alaSaaMacCtrlIsid, alaSaaMacHistoryEntry=alaSaaMacHistoryEntry, alaSaaCtrlRTTThreshold=alaSaaCtrlRTTThreshold, alaSaaSpbVlanPriority=alaSaaSpbVlanPriority, alaSaaMacCtrlTSMinJitter=alaSaaMacCtrlTSMinJitter, alaSaaSpbRTTThreshold=alaSaaSpbRTTThreshold, alcatelIND1SaaMIBCompliance=alcatelIND1SaaMIBCompliance, alaSaaPacketLossTrap=alaSaaPacketLossTrap, alaSaaMacHistoryIndex=alaSaaMacHistoryIndex, alaSaaEthoamCtrlTotalPktsRcvd=alaSaaEthoamCtrlTotalPktsRcvd, alaSaaEthoamHistoryTable=alaSaaEthoamHistoryTable, alaSaaSpbFlush=alaSaaSpbFlush, alaSaaEthoamResultsTable=alaSaaEthoamResultsTable, alaSaaEthoamResultsRunTime=alaSaaEthoamResultsRunTime, alaSaaEthoamCtrlNumPkts=alaSaaEthoamCtrlNumPkts, alaSaaMacResultsPortMinRTT=alaSaaMacResultsPortMinRTT, alaSaaEthoamCtrlTSMinJitter=alaSaaEthoamCtrlTSMinJitter, alaSaaMacCtrlTotalPktsSent=alaSaaMacCtrlTotalPktsSent, alaSaaEthoamCtrlAssociationName=alaSaaEthoamCtrlAssociationName, alaSaaMacResultsPortPort=alaSaaMacResultsPortPort, alaSaaMacResultsPortJitter=alaSaaMacResultsPortJitter, alaSaaMacCtrlTable=alaSaaMacCtrlTable, alaSaaIpResultsRunTime=alaSaaIpResultsRunTime, alaSaaIpCtrlTypeOfService=alaSaaIpCtrlTypeOfService, alaSaaIpResultsGroup=alaSaaIpResultsGroup, alaSaaEthoamCtrlTSMaxRTT=alaSaaEthoamCtrlTSMaxRTT, alaSaaIpResultsMaxJitter=alaSaaIpResultsMaxJitter, alaSaaMacCtrlEntry=alaSaaMacCtrlEntry, alcatelIND1SaaMIBGroups=alcatelIND1SaaMIBGroups, alcatelIND1SaaNotifications=alcatelIND1SaaNotifications, alaSaaEthoamCtrlDomainName=alaSaaEthoamCtrlDomainName, alaSaaIPIterationCompleteTrap=alaSaaIPIterationCompleteTrap, alaSaaSpbPktData=alaSaaSpbPktData, alaSaaIpCtrlSrcAddress=alaSaaIpCtrlSrcAddress, alaSaaMacCtrlMinRTT=alaSaaMacCtrlMinRTT, alaSaaMacResultsMinRTT=alaSaaMacResultsMinRTT, alaSaaIpCtrlTgtAddress=alaSaaIpCtrlTgtAddress, alaSaaEthoamCtrlTable=alaSaaEthoamCtrlTable, alaSaaMacCtrlConfig=alaSaaMacCtrlConfig, alaSaaEthoamCtrlMaxRTT=alaSaaEthoamCtrlMaxRTT, alaSaaIpHistoryPktRTT=alaSaaIpHistoryPktRTT, alaSaaSpbDropEligible=alaSaaSpbDropEligible, alcatelIND1SaaMIBConformance=alcatelIND1SaaMIBConformance, alaSaaIpCtrlTotalPktsRcvd=alaSaaIpCtrlTotalPktsRcvd, alaSaaIpResultsMinJitter=alaSaaIpResultsMinJitter, alaSaaMacResultsPortPktsRcvd=alaSaaMacResultsPortPktsRcvd, alaSaaMacResultsPortMinJitter=alaSaaMacResultsPortMinJitter, alaSaaEthIterationCompleteTrap=alaSaaEthIterationCompleteTrap, alaSaaXmlGroup=alaSaaXmlGroup, alaSaaIpCtrlOwnerIndex=alaSaaIpCtrlOwnerIndex, alaSaaEthoamResultsEntry=alaSaaEthoamResultsEntry, alaSaaEthoamResultsMaxJitter=alaSaaEthoamResultsMaxJitter, alaSaaSpbAutoStart=alaSaaSpbAutoStart, alaSaaXmlFeature=alaSaaXmlFeature, alaSaaMacCtrlTestIndex=alaSaaMacCtrlTestIndex, alaSaaIpCtrlTSMinJitter=alaSaaIpCtrlTSMinJitter, alaSaaIpCtrlRowStatus=alaSaaIpCtrlRowStatus, alaSaaXmlStatus=alaSaaXmlStatus, alaSaaCtrlStartAt=alaSaaCtrlStartAt, alaSaaIpCtrlMinJitter=alaSaaIpCtrlMinJitter, alaSaaEthoamCtrlPktTimeOut=alaSaaEthoamCtrlPktTimeOut, alaSaaIpHistoryPktJitter=alaSaaIpHistoryPktJitter, alaSaaIpCtrlTotalPktsSent=alaSaaIpCtrlTotalPktsSent, alaSaaMacCtrlVlanPriority=alaSaaMacCtrlVlanPriority, alaSaaCtrlConfig=alaSaaCtrlConfig)
