#
# PySNMP MIB module H3C-WIPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-WIPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:24:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, ModuleIdentity, Counter64, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, iso, ObjectIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "ModuleIdentity", "Counter64", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "iso", "ObjectIdentity", "Integer32", "MibIdentifier")
RowStatus, DisplayString, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "MacAddress", "TextualConvention")
h3cWIPS = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118))
h3cWIPS.setRevisions(('2011-12-29 14:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cWIPS.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cWIPS.setLastUpdated('201112291450Z')
if mibBuilder.loadTexts: h3cWIPS.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cWIPS.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: h3cWIPS.setDescription('This MIB provides information about WIPS feature. Wireless Intrusion Prevention System (WIPS) WIPS is designed to be employed in an area that is serviced by an existing wireless network. It aids in the early detection of malicious outsider attacks and intrusions via wireless networks, and takes corresponding measures in order to guarantee the wireless environment security. ')
class H3cWIPSRadioType(TextualConvention, Integer32):
    description = 'Represents AP 802.11 radio type of 802.11a/b/g/n as per the standard. The following values are supported: dot11a - 802.11a dot11b - 802.11b dot11g - 802.11g dot11n - 802.11n dot11gn - 802.11gn dot11an - 802.11an'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))
    namedValues = NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 4), ("dot11n", 8), ("dot11gn", 16), ("dot11an", 32))

class H3cWIPSDevStatus(TextualConvention, Integer32):
    description = 'Represents the status of devices detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class H3cWIPSDevCategoryWay(TextualConvention, Integer32):
    description = "Represents by which way the device is categorized. 'manual': the device is categorized by user. 'autoByNMS': the device is automatically categorized by NMS(Network Management System). 'autoByDev': the device is automatically categorized by WIPS."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("manual", 1), ("autoByNMS", 2), ("autoByDev", 3))

class H3cWIPSAPCategoryType(TextualConvention, Integer32):
    description = 'Represents the categorized type of AP detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("adhoc", 1), ("authorized", 2), ("rogue", 3), ("misconfigured", 4), ("external", 5), ("potentialAuthorized", 6), ("potentialRogue", 7), ("potentialExternal", 8), ("uncategorized", 9))

class H3cWIPSClientCategoryType(TextualConvention, Integer32):
    description = 'Represents the categorized type of Client detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("authorized", 1), ("unauthorized", 2), ("misassociated", 3), ("uncategorized", 4))

class H3cWIPSChannel(TextualConvention, Integer32):
    description = 'Represents the channel number.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 224)

class H3cWIPSEncryptMethod(TextualConvention, Unsigned32):
    description = 'Represents the frame encryption cipher types for frames on IEEE 802.11 radio interfaces. The MIB defines TC by referring to the 802.11i protocol. The following values are supported: none(1) - clear text or no cipher method is configure, wep(2) - WEP key, tkip(4) - WPA Temporal Key encryption, ccmp(8) - WPA AES CCMP encryption'
    status = 'current'
    displayHint = 'd'

class H3cWIPSAuthMethod(TextualConvention, Integer32):
    description = 'Represents the key management mode defined by 802.11i. The following values are supported: none - No key management mode configured, psk - pre-shared key authentication, dot1x - 802.1x authentication. other - other authentication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("psk", 2), ("dot1x", 3), ("other", 4))

class H3cWIPSAPClassifyType(TextualConvention, Integer32):
    description = "Represents the classify type of AP. 'other' - represents undo operation."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("authorized", 2), ("external", 3), ("misconfigured", 4), ("rogue", 5))

class H3cWIPSAPSecurityType(TextualConvention, Unsigned32):
    description = 'Represents the AP security type. clear 0x01 wpa2 0x02 wpa 0x04 wep 0x08'
    status = 'current'
    displayHint = 'd'

h3cWIPSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1))
h3cWIPSGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1))
h3cWIPSEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSEnable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSEnable.setDescription("Represents whether the WIPS feature is enabled or not. 'true': enable the WIPS feature. 'false': disable the WIPS feature. WIPS and WIDS feature can not be enabled at the same time.")
h3cWIPSSensorLicenseNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSSensorLicenseNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorLicenseNum.setDescription('Represents the number of sensor license.')
h3cWIPSBlocklistAction = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("unblock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSBlocklistAction.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSBlocklistAction.setDescription("Represents whether the block list feature is enabled or not. 'block' : Enable the block list feature to filter unwanted devices. 'unblock' : Disable the block list feature.")
h3cWIPSAPInactiveTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSAPInactiveTime.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPInactiveTime.setDescription('Represents the time for AP getting inactive.')
h3cWIPSSTAInactiveTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 1200)).clone(600)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSSTAInactiveTime.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSTAInactiveTime.setDescription('Represents the time for STA getting inactive.')
h3cWIPSDevAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2592000)).clone(86400)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDevAgingTime.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevAgingTime.setDescription('Represents the time for device getting aged.')
h3cWIPSStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSStatisticPeriod.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStatisticPeriod.setDescription('Represents the period of WIPS reporting the statistic.')
h3cWIPSReclassificationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(600)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSReclassificationPeriod.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSReclassificationPeriod.setDescription('Represents the period of WIPS reclassifying devices.')
h3cWIPSResetAllTrustList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSResetAllTrustList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSResetAllTrustList.setDescription('This object is used to remove all entries from the static trust list. It will return false for get operation.')
h3cWIPSResetAllBlockList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSResetAllBlockList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSResetAllBlockList.setDescription('This object is used to remove all entries from the static block list. It will return false for get operation.')
h3cWIPSResetAllIgnoreList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSResetAllIgnoreList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSResetAllIgnoreList.setDescription('This object is used to remove all entries from the ignore list. It will return false for get operation..')
h3cWIPSResetAllCtmList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSResetAllCtmList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSResetAllCtmList.setDescription('This object is used to remove all entries from the static countermeasure list. It will return false for get operation.')
h3cWIPSPermitChlBitMap = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSPermitChlBitMap.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSPermitChlBitMap.setDescription('Represents the permit channel number by bitmap.')
h3cWIPSVsdConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2))
h3cWIPSVsdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 1), )
if mibBuilder.loadTexts: h3cWIPSVsdTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSVsdTable.setDescription('The table provides the list of virtual security domain.')
h3cWIPSVsdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 1, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSVsdNameCfg"))
if mibBuilder.loadTexts: h3cWIPSVsdEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSVsdEntry.setDescription('Each entry contains information of each VSD.')
h3cWIPSVsdNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSVsdNameCfg.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSVsdNameCfg.setDescription('Represents the name of virtual security domain.')
h3cWIPSVsdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSVsdRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSVsdRowStatus.setDescription('The status of this table entry.')
h3cWIPSVsdAtkDctPolicyNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSVsdAtkDctPolicyNameCfg.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSVsdAtkDctPolicyNameCfg.setDescription('Represents the name of attack detect policy attached to the VSD.')
h3cWIPSRule2VsdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 2), )
if mibBuilder.loadTexts: h3cWIPSRule2VsdTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSRule2VsdTable.setDescription('The table defines the AP classification rules been attached to the VSD. ')
h3cWIPSRule2VsdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 2, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSVsdNameCfg"), (0, "H3C-WIPS-MIB", "h3cWIPSRule2VsdAPClaRuleNameCfg"))
if mibBuilder.loadTexts: h3cWIPSRule2VsdEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSRule2VsdEntry.setDescription('Each entry contains information of each AP classification rule in each VSD. ')
h3cWIPSRule2VsdAPClaRuleNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSRule2VsdAPClaRuleNameCfg.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSRule2VsdAPClaRuleNameCfg.setDescription('Represents the name of AP classification rule attached to the VSD.')
h3cWIPSRule2VsdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSRule2VsdRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSRule2VsdRowStatus.setDescription('The status of this table entry.')
h3cWIPSRule2VsdPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSRule2VsdPrecedence.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSRule2VsdPrecedence.setDescription('Represents the precedence of AP classification rule attached to the VSD.')
h3cWIPSSensor2VsdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 3), )
if mibBuilder.loadTexts: h3cWIPSSensor2VsdTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensor2VsdTable.setDescription('The table defines the sensor been attached to the VSD. ')
h3cWIPSSensor2VsdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 3, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSVsdNameCfg"), (0, "H3C-WIPS-MIB", "h3cWIPSSensorNameCfg"))
if mibBuilder.loadTexts: h3cWIPSSensor2VsdEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensor2VsdEntry.setDescription('Each entry contains information of each sensor in each VSD.')
h3cWIPSSensorNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSSensorNameCfg.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorNameCfg.setDescription('Represents the name of sensor attached to the VSD.')
h3cWIPSSensor2VsdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSSensor2VsdRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensor2VsdRowStatus.setDescription('The status of this table entry.')
h3cWIPSSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("idle", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSSensorState.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorState.setDescription('Represents the running state of the sensor. It will return false for set operation.')
h3cWIPSSensorRadioTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 4), )
if mibBuilder.loadTexts: h3cWIPSSensorRadioTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorRadioTable.setDescription('The table represents the list of sensor radio information.')
h3cWIPSSensorRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 4, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSVsdNameCfg"), (0, "H3C-WIPS-MIB", "h3cWIPSSensorNameCfg"), (0, "H3C-WIPS-MIB", "h3cWIPSSensorRadioRadioId"))
if mibBuilder.loadTexts: h3cWIPSSensorRadioEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorRadioEntry.setDescription('Each entry contains information of a radio of a sensor.')
h3cWIPSSensorRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: h3cWIPSSensorRadioRadioId.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorRadioRadioId.setDescription('Represents the radio identifier of the sensor.')
h3cWIPSSensorRadioScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessFirst", 1), ("detectFirst", 2), ("middle", 3), ("detectOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSSensorRadioScanMode.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSensorRadioScanMode.setDescription('Represents the scanning mode configured to the radio.')
h3cWIPSAPClaRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3), )
if mibBuilder.loadTexts: h3cWIPSAPClaRuleTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaRuleTable.setDescription('The table defines the parameters for WIPS AP classification rule. One rule could be assigned to different VSDs. ')
h3cWIPSAPClaRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSAPClaRuleName"))
if mibBuilder.loadTexts: h3cWIPSAPClaRuleEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaRuleEntry.setDescription('Each entry contains information of each AP classification rule. ')
h3cWIPSAPClaRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSAPClaRuleName.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaRuleName.setDescription('Represents the name of AP classification rule.')
h3cWIPSAPClaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaRowStatus.setDescription('The status of this table entry.')
h3cWIPSAPClaSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 3), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaSeverityLevel.setDescription('Represents the severity level of the AP classification rule. Available value limits from 0 to 100.')
h3cWIPSAPClaRuleMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaRuleMatchAll.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaRuleMatchAll.setDescription('Represents whether match all the AP classification sub-rules which have been configured.')
h3cWIPSAPClaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 5), H3cWIPSAPClassifyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaType.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaType.setDescription('Represents the type of AP classification.')
h3cWIPSAPClaSubRuleSSIDOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("include", 1), ("notinclude", 2), ("equal", 3), ("notequal", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaSubRuleSSIDOperator.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaSubRuleSSIDOperator.setDescription('Represents the compare way of the SSID in the sub rule, including include/not include/equal/not equal.')
h3cWIPSAPClaSubRuleSSIDCase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaSubRuleSSIDCase.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaSubRuleSSIDCase.setDescription("Represents the case sensitive or not for the SSID match. 'true': Case insensitive. 'false': Case sensitive.")
h3cWIPSAPClaSubRuleSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPClaSubRuleSSID.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPClaSubRuleSSID.setDescription('Represents the SSID match template in the ap classification rule.')
h3cWIPSSecurityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 9), H3cWIPSAPSecurityType().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSSecurityType.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSecurityType.setDescription('Represents the security type of active AP. ')
h3cWIPSSecurityTypeMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equal", 1), ("include", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSSecurityTypeMatch.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSSecurityTypeMatch.setDescription('Represents match way of the security type of active AP. ')
h3cWIPSAPAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("psk", 2), ("dot1x", 3), ("other", 4), ("undo", 5))).clone('undo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAPAuthType.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAPAuthType.setDescription('Represents the authentication type of the AP. undo - represents undo operation')
h3cWIPSMaxRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 12), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMaxRSSIValue.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMaxRSSIValue.setDescription('Represents the high-limit of the RSSI of AP. Available value limits from 1 to 90.')
h3cWIPSMinRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 13), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMinRSSIValue.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMinRSSIValue.setDescription('Represents the low-limit of the RSSI of AP. Available value limits from 0 to 89.')
h3cWIPSMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 14), Unsigned32().clone(4294967295)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMaxDuration.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMaxDuration.setDescription('Represents the high-limit of the duration of AP. Available value limits from 1 to 2592000.')
h3cWIPSMinDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 15), Unsigned32().clone(4294967295)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMinDuration.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMinDuration.setDescription('Represents the low-limit of the duration of AP. Available value limits from 0 to 2591999.')
h3cWIPSMaxAPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 16), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMaxAPNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMaxAPNum.setDescription('Represents the high-limit of the number of AP. Available value limits from 1 to 128.')
h3cWIPSMinAPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 17), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMinAPNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMinAPNum.setDescription('Represents the low-limit of the number of AP. Available value limits from 0 to 127.')
h3cWIPSMaxClientNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 18), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMaxClientNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMaxClientNum.setDescription('Represents the high-limit of the number of client. Available value limits from 1 to 128.')
h3cWIPSMinClientNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 3, 1, 19), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSMinClientNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSMinClientNum.setDescription('Represents the low-limit of the number of client. Available value limits from 0 to 127.')
h3cWIPSAtkDctPolicyCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4))
h3cWIPSAtkDctPolicyCfgSupportSet = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgSupportSet.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgSupportSet.setDescription('Represents the bit string of supported attack detect policy. The specific attack detect policy is supported if its corresponding bit is set to 1; otherwise its corresponding bit is set to 0. bit0: adhoc bit1: ap-spoof bit2: client-spoof bit3: prohibited channel')
h3cWIPSAtkDctPolicyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4, 2), )
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgTable.setDescription('The table defines the parameters for WIPS attack detect policy.')
h3cWIPSAtkDctPolicyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4, 2, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSAtkDctPolicyName"))
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgEntry.setDescription('Each entry contains information of each attack detect policy.')
h3cWIPSAtkDctPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyName.setDescription('Represents the name of attack detect policy.')
h3cWIPSAtkDctPolicyCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyCfgRowStatus.setDescription('The status of this table entry.')
h3cWIPSAtkDctPolicyBitString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyBitString.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSAtkDctPolicyBitString.setDescription('Represents the bit string of attack detect policy configuration. The specific attack detect policy is enabled if its corresponding bit is set to 1; disabled if its corresponding bit is set to 0. bit0: adhoc bit1: ap-spoof bit2: client-spoof bit3: prohibited channel')
h3cWIPSStaticCtmListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 5), )
if mibBuilder.loadTexts: h3cWIPSStaticCtmListCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticCtmListCfgTable.setDescription('The table provides the MAC address list of devices in the static countermeasure list.')
h3cWIPSStaticCtmListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 5, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSStaticCtmListMAC"))
if mibBuilder.loadTexts: h3cWIPSStaticCtmListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticCtmListCfgEntry.setDescription('Each entry contains information of each MAC address in the static countermeasure list. ')
h3cWIPSStaticCtmListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSStaticCtmListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticCtmListMAC.setDescription('Represents the MAC address in static countermeasure list.')
h3cWIPSStaticCtmListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSStaticCtmListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticCtmListRowStatus.setDescription('The status of this table entry.')
h3cWIPSStaticBlockListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 6), )
if mibBuilder.loadTexts: h3cWIPSStaticBlockListCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticBlockListCfgTable.setDescription('The table provides the MAC address list of devices in the static block list. WIPS will ignore the frames from the devices in the list, and take the devices as rogue devices.')
h3cWIPSStaticBlockListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 6, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSStaticBlockListMAC"))
if mibBuilder.loadTexts: h3cWIPSStaticBlockListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticBlockListCfgEntry.setDescription('Each entry contains information of each MAC address in the static block list. ')
h3cWIPSStaticBlockListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSStaticBlockListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticBlockListMAC.setDescription('Represents the MAC address in static block list.')
h3cWIPSStaticBlockListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSStaticBlockListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticBlockListRowStatus.setDescription('The status of this table entry.')
h3cWIPSStaticTrustListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 7), )
if mibBuilder.loadTexts: h3cWIPSStaticTrustListCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticTrustListCfgTable.setDescription('The table provides the MAC address list of devices in the static trust list. WIPS will take the devices in the list as authorized devices.')
h3cWIPSStaticTrustListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 7, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSStaticTrustListMAC"))
if mibBuilder.loadTexts: h3cWIPSStaticTrustListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticTrustListCfgEntry.setDescription('Each entry contains information of each MAC address in the static trust list. ')
h3cWIPSStaticTrustListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSStaticTrustListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticTrustListMAC.setDescription('Represents the MAC address in static trust list.')
h3cWIPSStaticTrustListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSStaticTrustListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSStaticTrustListRowStatus.setDescription('The status of this table entry.')
h3cWIPSIgnoreListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 8), )
if mibBuilder.loadTexts: h3cWIPSIgnoreListCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListCfgTable.setDescription('The table provides the MAC address list of devices in the ignore list. WIPS will ignore the events caused by the device in the list.')
h3cWIPSIgnoreListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 8, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSIgnoreListMAC"))
if mibBuilder.loadTexts: h3cWIPSIgnoreListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListCfgEntry.setDescription('Each entry contains information of each MAC address in the ignore list. ')
h3cWIPSIgnoreListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSIgnoreListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListMAC.setDescription('Represents the MAC address in ignore list.')
h3cWIPSIgnoreListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSIgnoreListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListRowStatus.setDescription('The status of this table entry.')
h3cWIPSDctModeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 9), )
if mibBuilder.loadTexts: h3cWIPSDctModeTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctModeTable.setDescription('The table represents the list of AP scanning mode configuration on radio.')
h3cWIPSDctModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 9, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctModeAPName"), (0, "H3C-WIPS-MIB", "h3cWIPSDctModeRadio"))
if mibBuilder.loadTexts: h3cWIPSDctModeEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctModeEntry.setDescription('Each entry contains information of WIPS scanning mode on radio.')
h3cWIPSDctModeAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctModeAPName.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctModeAPName.setDescription('Represents the name of AP.')
h3cWIPSDctModeRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: h3cWIPSDctModeRadio.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctModeRadio.setDescription('Represents the radio of AP.')
h3cWIPSDctModeScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessFirst", 1), ("detectFirst", 2), ("middle", 3), ("detectOnly", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSDctModeScanMode.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctModeScanMode.setDescription('Represents the scanning mode. The radio enable-disable status must be disabled before WIPS scanning mode is configured on this radio. The mesh feature must be disabled before any WIPS scanning mode is set on radio. This radio can not apply any service template before the detectOnly scanning mode is set on the radio. ')
h3cWIPSDctModeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cWIPSDctModeRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctModeRowStatus.setDescription('The status of this table entry.')
h3cWIPSDetectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2))
h3cWIPSDctAPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1), )
if mibBuilder.loadTexts: h3cWIPSDctAPTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPTable.setDescription('The table represents the list of possible BSS information for APs detected by the WIPS.')
h3cWIPSDctAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctAPVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctAPBSSID"))
if mibBuilder.loadTexts: h3cWIPSDctAPEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPEntry.setDescription('Each entry contains possible BSS information of each AP detected by WIPS.')
h3cWIPSDctAPVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctAPVSD.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPVSD.setDescription('Represents the virtual security domain where the BSS was detected.')
h3cWIPSDctAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: h3cWIPSDctAPBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPBSSID.setDescription('Represents the Basic Service Set.')
h3cWIPSDctAPRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPRunningTime.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRunningTime.setDescription('Represents the time since AP started to work, which is got from beacon/probe response frame.')
h3cWIPSDctAPRunTmLastUpdateTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPRunTmLastUpdateTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRunTmLastUpdateTm.setDescription('Represents the time update h3cWIPSDctAPRunningTime since system is up.')
h3cWIPSDctAPIsCountered = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPIsCountered.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPIsCountered.setDescription('Represents whether the detected AP is countered by WIPS.')
h3cWIPSDctAPWorkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 6), H3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPWorkChannel.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPWorkChannel.setDescription('Represents the radio channel which the detected AP work on.')
h3cWIPSDctAPRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 7), H3cWIPSRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPRadioType.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRadioType.setDescription('Represents the radio type used by the detected AP.')
h3cWIPSDctAPAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 8), H3cWIPSAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPAuthMethod.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAuthMethod.setDescription('Represents the authentication method used by the detected AP. none(1) - No key management mode configured, psk(2) - pre-shared key authentication, dot1x(3) - 802.1x authentication. other(4) - other authentication.')
h3cWIPSDctAPEncryptMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 9), H3cWIPSEncryptMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPEncryptMethod.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPEncryptMethod.setDescription('Represents the encrypt method used by the detected AP. none(1) - clear text or no cipher method is configure, wep(2) - WEP key, tkip(4) - WPA Temporal Key encryption, ccmp(8) - WPA AES CCMP encryption')
h3cWIPSDctAPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 10), H3cWIPSAPSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPSecurity.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPSecurity.setDescription('Represents the security suites of the detected AP. clear 0x01 wpa2 0x02 wpa 0x04 wep 0x08')
h3cWIPSDctAPSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPSeverityLevel.setDescription('Represents the severity level of the detected AP.')
h3cWIPSDctAPLastDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPLastDctTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPLastDctTm.setDescription('Represents the time that AP was detected for the last time since system is up.')
h3cWIPSDctAPFirstDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPFirstDctTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPFirstDctTm.setDescription('Represents the time that AP was detected for the first time since system is up.')
h3cWIPSDctAPAdd2BlackList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2BlackList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2BlackList.setDescription('Represents whether the AP will be taken as a rogue AP. If the value is true, the MAC address will be automatically added into h3cWIPSBlockListTable and the category of the AP will be taken as rogue. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctAPAdd2WhiteList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2WhiteList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2WhiteList.setDescription('Represents whether the AP will be taken as an authorized AP. If the value is true, the MAC address will be automatically added into h3cWIPSTrustListTable. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctAPAdd2IgnoreList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2IgnoreList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2IgnoreList.setDescription('Represents whether the AP will be taken as an ignored AP. If the value is true, the MAC address will be automatically added into h3cWIPSIgnoreListTable. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctAPAdd2CtmList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2CtmList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAdd2CtmList.setDescription('Represents whether the AP will be taken as a countered AP. If the value is true, the MAC address will be automatically added into h3cWIPSCountermeasureListTable. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctAPCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 18), H3cWIPSAPCategoryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctAPCategory.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPCategory.setDescription('Represents the categorized result of the AP. For set operation, only the following values are valid: authorized(2),rogue(3),misconfigured(4),external(5)')
h3cWIPSDctAPCategoryWay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 19), H3cWIPSDevCategoryWay().clone('autoByDev')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctAPCategoryWay.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPCategoryWay.setDescription('Represents by which way the AP is categorized. manual(1) -categorized by user autoByNMS(2) -categorized by NMS(Network Management System) autoByDev(3) -categorized by WIPS')
h3cWIPSDctAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 20), H3cWIPSDevStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPStatus.setDescription('Represents the status of the AP detected by WIPS.')
h3cWIPSDctAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPSSID.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPSSID.setDescription('Represents the SSID broadcasted by AP.')
h3cWIPSDctAPAttachStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaNum.setDescription('Represents the number of clients associated with the detected AP.')
h3cWIPSDctAPRptSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorNum.setDescription('Represents the number of sensors detecting the AP.')
h3cWIPSDctAPAttachStaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 2), )
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaTable.setDescription('The table represents the list of station associated with APs detected by the WIPS.')
h3cWIPSDctAPAttachStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 2, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctAPVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctAPBSSID"), (0, "H3C-WIPS-MIB", "h3cWIPSDctAPAttachStaMac"))
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaEntry.setDescription('Each entry contains possible station information detected by WIPS.')
h3cWIPSDctAPAttachStaMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaMac.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaMac.setDescription('Represents the MAC address of station associated with AP.')
h3cWIPSDctAPAttachStaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPAttachStaRowStatus.setDescription('The status of this table entry. It will return false for set operation.')
h3cWIPSDctAPRptSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 3), )
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorTable.setDescription('The table represents the list of sensors.')
h3cWIPSDctAPRptSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 3, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctAPVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctAPBSSID"), (0, "H3C-WIPS-MIB", "h3cWIPSDctAPRptSensorName"))
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorEntry.setDescription('Each entry contains possible sensor information of WIPS.')
h3cWIPSDctAPRptSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorName.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorName.setDescription('Represents the name of sensor.')
h3cWIPSDctAPRptSensorRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorRadioId.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRptSensorRadioId.setDescription('Represents on which radio the sensor AP detected the AP.')
h3cWIPSDctAPRptRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPRptRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPRptRSSI.setDescription('Represents the current value of signal strength that WIPS sensor AP received from the AP.')
h3cWIPSDctAPLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctAPLastRptTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctAPLastRptTm.setDescription('Represents the time that AP was detected by this sensor for the last time since system is up.')
h3cWIPSDctStaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4), )
if mibBuilder.loadTexts: h3cWIPSDctStaTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaTable.setDescription('The table represents the list of possible information for stations detected by the WIPS.')
h3cWIPSDctStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctStaVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctStaMac"))
if mibBuilder.loadTexts: h3cWIPSDctStaEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaEntry.setDescription('Each entry contains possible station information of each station detected by WIPS.')
h3cWIPSDctStaVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctStaVSD.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaVSD.setDescription('Represents the virtual security domain in which the station was detected.')
h3cWIPSDctStaMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: h3cWIPSDctStaMac.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaMac.setDescription('Represents the MAC address of station.')
h3cWIPSDctStaAssocBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaAssocBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaAssocBSSID.setDescription('Represents the BSSID which station associates with.')
h3cWIPSDctStaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 4), H3cWIPSDevStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaStatus.setDescription('Represents the status of this station detected by WIPS.')
h3cWIPSDctStaCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 5), H3cWIPSClientCategoryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaCategory.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaCategory.setDescription('Represents the categorized result of the station.')
h3cWIPSDctStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 6), H3cWIPSRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaRadioType.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRadioType.setDescription('Represents the radio type used by the detected station.')
h3cWIPSDctStaWorkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 7), H3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaWorkChannel.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaWorkChannel.setDescription('Represents on which radio channel that WIPS sensor AP detected the station.')
h3cWIPSDctStaIsCountered = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaIsCountered.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaIsCountered.setDescription('Represents whether the detected station is countered by WIPS.')
h3cWIPSDctStaAdd2BlackList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2BlackList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2BlackList.setDescription('Represents whether the station will be taken as a rogue station. If the value is true, the MAC address will be automatically added into h3cWIPSBlockListTable and the category of the station will be taken as rogue. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctStaAdd2WhiteList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2WhiteList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2WhiteList.setDescription('Represents whether the station will be taken as an authorized station. If the value is true, the MAC address will be automatically added into h3cWIPSTrustListTable. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctStaAdd2IgnoreList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2IgnoreList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2IgnoreList.setDescription('Represents whether the station will be taken as an ignored station. If the value is true, the MAC address will be automatically added into h3cWIPSIgnoreListTable. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctStaAdd2CtmList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2CtmList.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaAdd2CtmList.setDescription('Represents whether the station will be taken as a countered station. If the value is true, the MAC address will be automatically added into h3cWIPSCountermeasureListTable. If the value is false, nothing will be done. It will return false for get operation.')
h3cWIPSDctStaFirstDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaFirstDctTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaFirstDctTm.setDescription('Represents the time that station was detected for the first time since system is up.')
h3cWIPSDctStaLastDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaLastDctTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaLastDctTm.setDescription('Represents the time that station was detected for the last time since system is up.')
h3cWIPSDctStaRptSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorNum.setDescription('Represents the number of sensors detecting the station.')
h3cWIPSDctStaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("authentication", 1), ("association", 2), ("eapSuccess", 3), ("eapLogoff", 4), ("disassociation", 5), ("deauthentication", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaState.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaState.setDescription('Represents the authentication state of station with AP.')
h3cWIPSDctStaRptSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 5), )
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorTable.setDescription('The table represents the list of sensors detecting the station.')
h3cWIPSDctStaRptSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 5, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctStaVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctStaMac"), (0, "H3C-WIPS-MIB", "h3cWIPSDctStaRtpSensorName"))
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorEntry.setDescription('Each entry contains possible sensor information of WIPS.')
h3cWIPSDctStaRtpSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctStaRtpSensorName.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRtpSensorName.setDescription('Represents the name of sensor.')
h3cWIPSDctStaRptSensorRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorRadioId.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRptSensorRadioId.setDescription('Represents on which radio the sensor AP detected the station.')
h3cWIPSDctStaRptRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaRptRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaRptRSSI.setDescription('Represents the current value of signal strength that WIPS sensor AP received from the station.')
h3cWIPSDctStaLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctStaLastRptTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctStaLastRptTm.setDescription('Represents the time that station was detected by this sensor for the last time since system is up.')
h3cWIPSDctSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6), )
if mibBuilder.loadTexts: h3cWIPSDctSSIDTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctSSIDTable.setDescription('The table represents the list of possible ESS information for networks detected by WIPS.')
h3cWIPSDctSSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkSSID"), (0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkCfg"))
if mibBuilder.loadTexts: h3cWIPSDctSSIDEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctSSIDEntry.setDescription('Each entry contains possible ESS information of each ESS detected by WIPS.')
h3cWIPSDctNetworkVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctNetworkVSD.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkVSD.setDescription('Represents the virtual security domain in which the ESS was detected.')
h3cWIPSDctNetworkSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cWIPSDctNetworkSSID.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkSSID.setDescription("Represents the service set identifier for the ESS. Using the ASCII value '1' represents that the SSID is not advertised in the beacon frames.")
h3cWIPSDctNetworkCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 3), Unsigned32())
if mibBuilder.loadTexts: h3cWIPSDctNetworkCfg.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkCfg.setDescription('Represents the encrypt method, security suite and authentication method which are used by the detected ESS. The lowest 8 bits mean encrypt method. The higher 8 bits mean security suite. The third 8 bits stand for authentication method. The higerest 8 bits are reserved. The meaning is shown as follows: 31 23 15 7 0 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + | reserved | auth method | security suite|encryptmethod| + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + For encrypt method, the following values are supported: 1: none - clear text or no cipher method is configure, 2: wep - WEP key, 4: tkip - WPA Temporal Key encryption, 8: ccmp - WPA AES CCMP encryption For security suite, the following values are supported: 0x01: clear 0x02: wpa2 0x04: wpa 0x08: wep For authentication method, the following values are supported: 1: none - No key management mode configured, 2: psk - pre-shared key authentication, 3: dot1x - 802.1x authentication. 4: other - other authentication')
h3cWIPSDctNetworkFirstRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkFirstRptTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkFirstRptTm.setDescription('Represents the time that ESS was detected for the first time since system is up.')
h3cWIPSDctNetworkLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkLastRptTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkLastRptTm.setDescription('Represents the time that ESS was detected for the last time since system is up.')
h3cWIPSDctNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 6), H3cWIPSDevStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkStatus.setDescription('Represents the status of this ESS detected by WIPS.')
h3cWIPSDctNetworkSSIDHide = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkSSIDHide.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkSSIDHide.setDescription('Represents whether the ESS broadcasted its SSID.')
h3cWIPSDctNetworkBSSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSNum.setDescription('Represents the number of APs using the same SSID in the ESS.')
h3cWIPSDctSSIDBSSTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 7), )
if mibBuilder.loadTexts: h3cWIPSDctSSIDBSSTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctSSIDBSSTable.setDescription('The table represents the list of APs using the same SSID in the ESS.')
h3cWIPSDctSSIDBSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 7, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkVSD"), (0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkSSID"), (0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkCfg"), (0, "H3C-WIPS-MIB", "h3cWIPSDctNetworkBSSID"))
if mibBuilder.loadTexts: h3cWIPSDctSSIDBSSEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctSSIDBSSEntry.setDescription('Each entry contains possible BSS information of each AP detected by WIPS.')
h3cWIPSDctNetworkBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSID.setDescription('Represents the Basic Service Set.')
h3cWIPSDctNetworkBSSWorkChl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 7, 1, 2), H3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSWorkChl.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSWorkChl.setDescription('Represents on which radio channel that WIPS sensor AP detected the BSS.')
h3cWIPSDctNetworkBSSStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSStaNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDctNetworkBSSStaNum.setDescription('Represents the number of clients associated with the detected BSS.')
h3cWIPSBlockListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 8), )
if mibBuilder.loadTexts: h3cWIPSBlockListTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSBlockListTable.setDescription('The table represents the list of block device MAC address.')
h3cWIPSBlockListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 8, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSBlockListMacAddress"))
if mibBuilder.loadTexts: h3cWIPSBlockListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSBlockListEntry.setDescription('Each entry contains block device MAC address information.')
h3cWIPSBlockListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSBlockListMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSBlockListMacAddress.setDescription('Represents the MAC address of block device.')
h3cWIPSBlockListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSBlockListStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSBlockListStatus.setDescription('Represents the status of block device.')
h3cWIPSChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 9), )
if mibBuilder.loadTexts: h3cWIPSChannelTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChannelTable.setDescription('The table represents the list of channel information.')
h3cWIPSChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 9, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSChannelNum"))
if mibBuilder.loadTexts: h3cWIPSChannelEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChannelEntry.setDescription('Each entry contains channel information.')
h3cWIPSChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 9, 1, 1), H3cWIPSChannel())
if mibBuilder.loadTexts: h3cWIPSChannelNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChannelNum.setDescription('Represents the channel number.')
h3cWIPSChannelRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 9, 1, 2), H3cWIPSRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChannelRadioType.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChannelRadioType.setDescription('Represents the radio type used in the specific channel.')
h3cWIPSChannelIsPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChannelIsPermitted.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChannelIsPermitted.setDescription('Represents whether the channel is permitted.')
h3cWIPSChannelLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 9, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChannelLastRptTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChannelLastRptTm.setDescription('Represents the latest time that detecting the channel is active.')
h3cWIPSCountermeasureListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10), )
if mibBuilder.loadTexts: h3cWIPSCountermeasureListTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCountermeasureListTable.setDescription('The table represents the list of countermeasure device information.')
h3cWIPSCountermeasureListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSCtmListMacAddress"))
if mibBuilder.loadTexts: h3cWIPSCountermeasureListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCountermeasureListEntry.setDescription('Each entry contains countermeasure device information.')
h3cWIPSCtmListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSCtmListMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCtmListMacAddress.setDescription('Represents the MAC address of the countered device.')
h3cWIPSCtmListLastestWorkChl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1, 2), H3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSCtmListLastestWorkChl.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCtmListLastestWorkChl.setDescription('Represents the channel on which the countermeasure device was working.')
h3cWIPSCtmListFirstTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSCtmListFirstTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCtmListFirstTm.setDescription('Represents the first time that the device was countered since system is up.')
h3cWIPSCtmListLastTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSCtmListLastTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCtmListLastTm.setDescription('Represents the last time that the device was countered since system is up.')
h3cWIPSCtmListQurCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSCtmListQurCnt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCtmListQurCnt.setDescription('Represents how many times that the device was countered. ')
h3cWIPSCtmListSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSCtmListSensorNum.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSCtmListSensorNum.setDescription('Represents the number of sensors detecting the device.')
h3cWIPSIgnoreListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 11), )
if mibBuilder.loadTexts: h3cWIPSIgnoreListTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListTable.setDescription('The table represents the list of ignored device information.')
h3cWIPSIgnoreListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 11, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSIgnoreListMacAddress"))
if mibBuilder.loadTexts: h3cWIPSIgnoreListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListEntry.setDescription('Each entry contains ignored device information.')
h3cWIPSIgnoreListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSIgnoreListMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListMacAddress.setDescription('Represents the MAC address of the ignored device.')
h3cWIPSIgnoreListFirstIgnoreTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 11, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSIgnoreListFirstIgnoreTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListFirstIgnoreTm.setDescription('Represents the first time when the event caused by the device was ignored since system is up.')
h3cWIPSIgnoreListLastIgnoreTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 11, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSIgnoreListLastIgnoreTm.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListLastIgnoreTm.setDescription('Represents the last time when the event caused by the device was ignored since system is up.')
h3cWIPSIgnoreListIgnoreCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSIgnoreListIgnoreCnt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSIgnoreListIgnoreCnt.setDescription('Represents the number of times of the event caused by device has been ignored.')
h3cWIPSTrustListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 12), )
if mibBuilder.loadTexts: h3cWIPSTrustListTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSTrustListTable.setDescription('The table represents the list of trust device information.')
h3cWIPSTrustListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 12, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSTrustListMacAddress"))
if mibBuilder.loadTexts: h3cWIPSTrustListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSTrustListEntry.setDescription('Each entry contains information of a trust device.')
h3cWIPSTrustListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 12, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSTrustListMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSTrustListMacAddress.setDescription('Represents the MAC address of the trust device.')
h3cWIPSTrustListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSTrustListStatus.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSTrustListStatus.setDescription('Represents the status of the trust device.')
h3cWIPSChlStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13), )
if mibBuilder.loadTexts: h3cWIPSChlStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatTable.setDescription('The table represents the list of channel statistics information.')
h3cWIPSChlStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSChlStatSensorMacAddr"), (0, "H3C-WIPS-MIB", "h3cWIPSChlStatChannel"))
if mibBuilder.loadTexts: h3cWIPSChlStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatEntry.setDescription('Each entry contains information of channel statistics.')
h3cWIPSChlStatSensorMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSChlStatSensorMacAddr.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatSensorMacAddr.setDescription('Represents the MAC address of sensor.')
h3cWIPSChlStatChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 2), H3cWIPSChannel())
if mibBuilder.loadTexts: h3cWIPSChlStatChannel.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatChannel.setDescription('Represents the statistics channel.')
h3cWIPSChlStatTotalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatTotalPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatTotalPkt.setDescription('Represents the count of total frames in the channel.')
h3cWIPSChlStatTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatTotalByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatTotalByte.setDescription('Represents the length of total frames in the channel.')
h3cWIPSChlStatBmcastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatBmcastPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatBmcastPkt.setDescription('Represents the count of broadcast and multicast frames in the channel.')
h3cWIPSChlStatBmcastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatBmcastByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatBmcastByte.setDescription('Represents the total length of broadcast and multicast frames in the channel.')
h3cWIPSChlStatUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastPkt.setDescription('Represents the count of unicast frames in the channel.')
h3cWIPSChlStatUnicastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastByte.setDescription('Represents the total length of unicast frames in the channel.')
h3cWIPSChlStatManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatManagement.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatManagement.setDescription('Represents the count of management frames in the channel.')
h3cWIPSChlStatControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatControl.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatControl.setDescription('Represents the count of control frames in the channel.')
h3cWIPSChlStatData = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatData.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatData.setDescription('Represents the count of data frames in the channel.')
h3cWIPSChlStatBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatBeacon.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatBeacon.setDescription('Represents the count of beacon frames in the channel.')
h3cWIPSChlStatRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatRTS.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatRTS.setDescription('Represents the count of RTS frames in the channel.')
h3cWIPSChlStatCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatCTS.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatCTS.setDescription('Represents the count of CTS frames in the channel.')
h3cWIPSChlStatProbeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatProbeRequest.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatProbeRequest.setDescription('Represents the count of probe request frames in the channel.')
h3cWIPSChlStatProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatProbeResponse.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatProbeResponse.setDescription('Represents the count of probe response frames in the channel.')
h3cWIPSChlStatFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatFragment.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatFragment.setDescription('Represents the count of fragment frames in the channel.')
h3cWIPSChlStatRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatRetry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatRetry.setDescription('Represents the count of retry frames in the channel.')
h3cWIPSChlStatEapSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatEapSuccess.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatEapSuccess.setDescription('Represents the count of EAP-Success frames in the channel.')
h3cWIPSChlStatEapFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatEapFailure.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatEapFailure.setDescription('Represents the count of EAP-Failure frames in the channel.')
h3cWIPSChlStatEapolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatEapolStart.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatEapolStart.setDescription('Represents the count of EAPOL-Start frames in the channel.')
h3cWIPSChlStatEapolLogoff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatEapolLogoff.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatEapolLogoff.setDescription('Represents the count of EAPOL-Logoff frames in the channel.')
h3cWIPSChlStatAssocRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatAssocRequest.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatAssocRequest.setDescription('Represents the count of association request frames in the channel.')
h3cWIPSChlStatAssocResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatAssocResponse.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatAssocResponse.setDescription('Represents the count of association response frames in the channel.')
h3cWIPSChlStatUnicastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastDisassoc.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastDisassoc.setDescription('Represents the count of unicast disassociation frames in the channel.')
h3cWIPSChlStatBroadcastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatBroadcastDisassoc.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatBroadcastDisassoc.setDescription('Represents the count of broadcast disassociation frames in the channel.')
h3cWIPSChlStatAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatAuthentication.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatAuthentication.setDescription('Represents the count of authentication frames in the channel.')
h3cWIPSChlStatUnicastDeauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastDeauthen.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatUnicastDeauthen.setDescription('Represents the count of unicast deauthentication frames in the channel.')
h3cWIPSChlStatBroadcastDeauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatBroadcastDeauthen.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatBroadcastDeauthen.setDescription('Represents the count of broadcast deauthentication frames in the channel.')
h3cWIPSChlStatMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 13, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSChlStatMalformed.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSChlStatMalformed.setDescription('Represents the count of malformed frames in the channel.')
h3cWIPSDevStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14), )
if mibBuilder.loadTexts: h3cWIPSDevStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTable.setDescription('The table represents the list of device statistics information.')
h3cWIPSDevStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1), ).setIndexNames((0, "H3C-WIPS-MIB", "h3cWIPSDevStatSensorMacAddr"), (0, "H3C-WIPS-MIB", "h3cWIPSDevStatDevMacAddress"), (0, "H3C-WIPS-MIB", "h3cWIPSDevStatChannel"))
if mibBuilder.loadTexts: h3cWIPSDevStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatEntry.setDescription('Each entry contains information of device statistics.')
h3cWIPSDevStatSensorMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cWIPSDevStatSensorMacAddr.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatSensorMacAddr.setDescription('Represents the MAC address of sensor.')
h3cWIPSDevStatDevMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 2), MacAddress())
if mibBuilder.loadTexts: h3cWIPSDevStatDevMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatDevMacAddress.setDescription('Represents the MAC address of the device detected by the sensor.')
h3cWIPSDevStatChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 3), H3cWIPSChannel())
if mibBuilder.loadTexts: h3cWIPSDevStatChannel.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatChannel.setDescription('Represents the device working channel.')
h3cWIPSDevStatTxTotalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxTotalPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxTotalPkt.setDescription('Represents the count of total frames transmitted by the device in one channel.')
h3cWIPSDevStatTxTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxTotalByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxTotalByte.setDescription('Represents the length of total frames transmitted by the device in one channel.')
h3cWIPSDevStatTxBMcastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxBMcastPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxBMcastPkt.setDescription('Represents the count of broadcast and multicast frames transmitted by the device in one channel.')
h3cWIPSDevStatTxBMcastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxBMcastByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxBMcastByte.setDescription('Represents the length of broadcast and multicast frames transmitted by the device in one channel.')
h3cWIPSDevStatTxUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastPkt.setDescription('Represents the count of unicast frames transmitted by the device in one channel.')
h3cWIPSDevStatTxUnicastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastByte.setDescription('Represents the length of unicast frames transmitted by the device in one channel.')
h3cWIPSDevStatTxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxMgmt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxMgmt.setDescription('Represents the count of management frames transmitted by the device in one channel.')
h3cWIPSDevStatTxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxCtrl.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxCtrl.setDescription('Represents the count of control frames transmitted by the device in one channel.')
h3cWIPSDevStatTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxData.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxData.setDescription('Represents the count of data frames transmitted by the device in one channel.')
h3cWIPSDevStatTxBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxBeacon.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxBeacon.setDescription('Represents the count of beacon frames transmitted by the device in one channel.')
h3cWIPSDevStatTxRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxRTS.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxRTS.setDescription('Represents the count of RTS frames transmitted by the device in one channel.')
h3cWIPSDevStatTxProbeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxProbeRequest.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxProbeRequest.setDescription('Represents the count of probe frames transmitted by the device in one channel.')
h3cWIPSDevStatTxProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxProbeResponse.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxProbeResponse.setDescription('Represents the count of probe response frames transmitted by the device in one channel.')
h3cWIPSDevStatTxFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxFragment.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxFragment.setDescription('Represents the count of fragment frames transmitted by the device in one channel.')
h3cWIPSDevStatTxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxRetry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxRetry.setDescription('Represents the count of retry frames transmitted by the device in one channel.')
h3cWIPSDevStatTxAssocRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxAssocRequest.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxAssocRequest.setDescription('Represents the count of association request frames transmitted by the device in one channel.')
h3cWIPSDevStatTxAssocResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxAssocResponse.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxAssocResponse.setDescription('Represents the count of association response frames transmitted by the device in one channel.')
h3cWIPSDevStatTxUnicastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastDisassoc.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastDisassoc.setDescription('Represents the count of unicast disassociation frames transmitted by the device in one channel.')
h3cWIPSDevStatTxBcastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxBcastDisassoc.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxBcastDisassoc.setDescription('Represents the count of broadcast disassociation frames transmitted by the device in one channel.')
h3cWIPSDevStatTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxAuth.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxAuth.setDescription('Represents the count of authentication frames transmitted by the device in one channel.')
h3cWIPSDevStatTxUnicastDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastDeauth.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxUnicastDeauth.setDescription('Represents the count of unicast deauthentication frames transmitted by the device in one channel.')
h3cWIPSDevStatTxBcastDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxBcastDeauth.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxBcastDeauth.setDescription('Represents the count of broadcast deauthentication frames transmitted by the device in one channel.')
h3cWIPSDevStatTxEAPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPSuccess.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPSuccess.setDescription('Represents the count of EAP-Success frames transmitted by the device in one channel.')
h3cWIPSDevStatTxEAPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPFailure.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPFailure.setDescription('Represents the count of EAP-Failure frames transmitted by the device in one channel.')
h3cWIPSDevStatTxEAPOLStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPOLStart.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPOLStart.setDescription('Represents the count of EAPOL-Start frames transmitted by the device in one channel.')
h3cWIPSDevStatTxEAPOLLogOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPOLLogOff.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxEAPOLLogOff.setDescription('Represents the count of EAPOL-Logoff frames transmitted by the device in one channel.')
h3cWIPSDevStatTxMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatTxMalformed.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatTxMalformed.setDescription('Represents the count of malformed frames transmitted by the device in one channel.')
h3cWIPSDevStatRxTotalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxTotalPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxTotalPkt.setDescription('Represents the count of total frames received by the device in one channel.')
h3cWIPSDevStatRxTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxTotalByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxTotalByte.setDescription('Represents the length of total frames received by the device in one channel.')
h3cWIPSDevStatRxUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxUnicastPkt.setDescription('Represents the count of unicast frames received by the device in one channel.')
h3cWIPSDevStatRxUnicastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxUnicastByte.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxUnicastByte.setDescription('Represents the length of unicast frames received by the device in one channel.')
h3cWIPSDevStatRxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxMgmt.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxMgmt.setDescription('Represents the count of management frames received by the device in one channel.')
h3cWIPSDevStatRxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxCtrl.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxCtrl.setDescription('Represents the count of control frames received by the device in one channel.')
h3cWIPSDevStatRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxData.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxData.setDescription('Represents the count of data frames received by the device in one channel.')
h3cWIPSDevStatRxRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxRTS.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxRTS.setDescription('Represents the count of RTS frames recieved by the device in one channel.')
h3cWIPSDevStatRxCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxCTS.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxCTS.setDescription('Represents the count of CTS frames recieved by the device in one channel.')
h3cWIPSDevStatRxProbeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxProbeRequest.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxProbeRequest.setDescription('Represents the count of probe request frames received by the device in one channel.')
h3cWIPSDevStatRxProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxProbeResponse.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxProbeResponse.setDescription('Represents the count of probe response frames received by the device in one channel.')
h3cWIPSDevStatRxFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxFragment.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxFragment.setDescription('Represents the count of fragment frames received by the device in one channel.')
h3cWIPSDevStatRxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxRetry.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxRetry.setDescription('Represents the count of retry frames received by the device in one channel.')
h3cWIPSDevStatRxAssoRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxAssoRequest.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxAssoRequest.setDescription('Represents the count of association request frames received by the device in one channel.')
h3cWIPSDevStatRxAssoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxAssoResponse.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxAssoResponse.setDescription('Represents the count of association response frames received by the device in one channel.')
h3cWIPSDevStatRxDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxDisassoc.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxDisassoc.setDescription('Represents the count of disassociation frames received by the device in one channel.')
h3cWIPSDevStatRxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxAuth.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxAuth.setDescription('Represents the count of authentication frames received by the device in one channel.')
h3cWIPSDevStatRxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxDeauth.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxDeauth.setDescription('Represents the count of deauthentication frames received by the device in one channel.')
h3cWIPSDevStatRxEAPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPSuccess.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPSuccess.setDescription('Represents the count of EAP-Success frames received by the device in one channel.')
h3cWIPSDevStatRxEAPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPFailure.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPFailure.setDescription('Represents the count of EAP-Failure frames received by the device in one channel.')
h3cWIPSDevStatRxEAPOLStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPOLStart.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPOLStart.setDescription('Represents the count of EAPOL-Start frames received by the device in one channel.')
h3cWIPSDevStatRxEAPOLLogoff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPOLLogoff.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxEAPOLLogoff.setDescription('Represents the count of EAPOL-Logoff frames received by the device in one channel.')
h3cWIPSDevStatRxMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 2, 14, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cWIPSDevStatRxMalformed.setStatus('current')
if mibBuilder.loadTexts: h3cWIPSDevStatRxMalformed.setDescription('Represents the count of malformed frames received by the device in one channel.')
h3cWIPSNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 118, 3))
mibBuilder.exportSymbols("H3C-WIPS-MIB", h3cWIPSDevStatRxUnicastPkt=h3cWIPSDevStatRxUnicastPkt, h3cWIPSIgnoreListMAC=h3cWIPSIgnoreListMAC, h3cWIPSDevStatTxBMcastByte=h3cWIPSDevStatTxBMcastByte, h3cWIPSDctStaFirstDctTm=h3cWIPSDctStaFirstDctTm, h3cWIPSDctNetworkStatus=h3cWIPSDctNetworkStatus, h3cWIPSSensorRadioScanMode=h3cWIPSSensorRadioScanMode, h3cWIPSDctNetworkSSID=h3cWIPSDctNetworkSSID, h3cWIPSChlStatUnicastDisassoc=h3cWIPSChlStatUnicastDisassoc, h3cWIPSDctAPRadioType=h3cWIPSDctAPRadioType, h3cWIPSDevStatRxEAPOLStart=h3cWIPSDevStatRxEAPOLStart, h3cWIPSDevStatTxBcastDisassoc=h3cWIPSDevStatTxBcastDisassoc, h3cWIPSChlStatTable=h3cWIPSChlStatTable, h3cWIPSMaxAPNum=h3cWIPSMaxAPNum, h3cWIPSDctStaVSD=h3cWIPSDctStaVSD, h3cWIPSChlStatTotalPkt=h3cWIPSChlStatTotalPkt, h3cWIPSDevStatTxEAPOLStart=h3cWIPSDevStatTxEAPOLStart, h3cWIPSSensor2VsdTable=h3cWIPSSensor2VsdTable, h3cWIPSDevStatRxFragment=h3cWIPSDevStatRxFragment, h3cWIPSDevStatTxBeacon=h3cWIPSDevStatTxBeacon, h3cWIPSSecurityTypeMatch=h3cWIPSSecurityTypeMatch, h3cWIPSDctAPWorkChannel=h3cWIPSDctAPWorkChannel, h3cWIPSDevStatEntry=h3cWIPSDevStatEntry, h3cWIPSCtmListQurCnt=h3cWIPSCtmListQurCnt, h3cWIPSDevStatTxBMcastPkt=h3cWIPSDevStatTxBMcastPkt, h3cWIPSChannelEntry=h3cWIPSChannelEntry, h3cWIPSChlStatManagement=h3cWIPSChlStatManagement, H3cWIPSAPCategoryType=H3cWIPSAPCategoryType, h3cWIPSDevStatRxAssoResponse=h3cWIPSDevStatRxAssoResponse, h3cWIPSRule2VsdTable=h3cWIPSRule2VsdTable, h3cWIPSDctAPBSSID=h3cWIPSDctAPBSSID, h3cWIPSDctAPFirstDctTm=h3cWIPSDctAPFirstDctTm, h3cWIPSDctAPAuthMethod=h3cWIPSDctAPAuthMethod, h3cWIPSDctAPAdd2WhiteList=h3cWIPSDctAPAdd2WhiteList, h3cWIPSDctSSIDEntry=h3cWIPSDctSSIDEntry, h3cWIPSCtmListLastTm=h3cWIPSCtmListLastTm, h3cWIPSDctStaLastDctTm=h3cWIPSDctStaLastDctTm, h3cWIPSMinDuration=h3cWIPSMinDuration, h3cWIPSChlStatChannel=h3cWIPSChlStatChannel, H3cWIPSAuthMethod=H3cWIPSAuthMethod, h3cWIPSRule2VsdRowStatus=h3cWIPSRule2VsdRowStatus, h3cWIPSAtkDctPolicyCfgSupportSet=h3cWIPSAtkDctPolicyCfgSupportSet, h3cWIPSDctAPAdd2IgnoreList=h3cWIPSDctAPAdd2IgnoreList, h3cWIPSDctStaIsCountered=h3cWIPSDctStaIsCountered, h3cWIPSDctStaRtpSensorName=h3cWIPSDctStaRtpSensorName, h3cWIPSDevStatRxEAPSuccess=h3cWIPSDevStatRxEAPSuccess, h3cWIPSPermitChlBitMap=h3cWIPSPermitChlBitMap, h3cWIPSDctStaRptSensorEntry=h3cWIPSDctStaRptSensorEntry, h3cWIPSMinClientNum=h3cWIPSMinClientNum, h3cWIPSAPClaRuleTable=h3cWIPSAPClaRuleTable, h3cWIPSDctNetworkFirstRptTm=h3cWIPSDctNetworkFirstRptTm, h3cWIPSChlStatAssocResponse=h3cWIPSChlStatAssocResponse, H3cWIPSEncryptMethod=H3cWIPSEncryptMethod, h3cWIPSDctNetworkLastRptTm=h3cWIPSDctNetworkLastRptTm, h3cWIPSSTAInactiveTime=h3cWIPSSTAInactiveTime, h3cWIPSDevStatRxRetry=h3cWIPSDevStatRxRetry, h3cWIPSIgnoreListRowStatus=h3cWIPSIgnoreListRowStatus, h3cWIPSVsdEntry=h3cWIPSVsdEntry, h3cWIPSDevStatTxMalformed=h3cWIPSDevStatTxMalformed, h3cWIPSDctAPAdd2BlackList=h3cWIPSDctAPAdd2BlackList, h3cWIPSDetectGroup=h3cWIPSDetectGroup, h3cWIPSDctStaMac=h3cWIPSDctStaMac, h3cWIPSDevStatRxMalformed=h3cWIPSDevStatRxMalformed, h3cWIPSVsdNameCfg=h3cWIPSVsdNameCfg, h3cWIPSDctAPEncryptMethod=h3cWIPSDctAPEncryptMethod, h3cWIPSDctModeTable=h3cWIPSDctModeTable, h3cWIPSDctStaAdd2WhiteList=h3cWIPSDctStaAdd2WhiteList, h3cWIPSDctNetworkBSSNum=h3cWIPSDctNetworkBSSNum, H3cWIPSDevCategoryWay=H3cWIPSDevCategoryWay, h3cWIPSStaticCtmListMAC=h3cWIPSStaticCtmListMAC, h3cWIPSDctAPSeverityLevel=h3cWIPSDctAPSeverityLevel, h3cWIPSChlStatProbeResponse=h3cWIPSChlStatProbeResponse, h3cWIPSDevStatDevMacAddress=h3cWIPSDevStatDevMacAddress, h3cWIPSChlStatUnicastByte=h3cWIPSChlStatUnicastByte, h3cWIPSSensorRadioTable=h3cWIPSSensorRadioTable, h3cWIPSDctStaAdd2CtmList=h3cWIPSDctStaAdd2CtmList, h3cWIPSStaticTrustListMAC=h3cWIPSStaticTrustListMAC, h3cWIPSChlStatBroadcastDeauthen=h3cWIPSChlStatBroadcastDeauthen, h3cWIPSChlStatBroadcastDisassoc=h3cWIPSChlStatBroadcastDisassoc, h3cWIPSSensorRadioRadioId=h3cWIPSSensorRadioRadioId, h3cWIPSDctAPCategoryWay=h3cWIPSDctAPCategoryWay, h3cWIPSDctStaAdd2BlackList=h3cWIPSDctStaAdd2BlackList, h3cWIPSDctAPAttachStaEntry=h3cWIPSDctAPAttachStaEntry, h3cWIPSDevStatTxUnicastDisassoc=h3cWIPSDevStatTxUnicastDisassoc, h3cWIPSDevStatTxMgmt=h3cWIPSDevStatTxMgmt, h3cWIPSStatisticPeriod=h3cWIPSStatisticPeriod, h3cWIPSChlStatEapFailure=h3cWIPSChlStatEapFailure, h3cWIPSChlStatFragment=h3cWIPSChlStatFragment, h3cWIPSDctStaAssocBSSID=h3cWIPSDctStaAssocBSSID, h3cWIPSChlStatUnicastPkt=h3cWIPSChlStatUnicastPkt, h3cWIPSIgnoreListLastIgnoreTm=h3cWIPSIgnoreListLastIgnoreTm, h3cWIPSCtmListSensorNum=h3cWIPSCtmListSensorNum, h3cWIPSDevStatTxData=h3cWIPSDevStatTxData, H3cWIPSAPSecurityType=H3cWIPSAPSecurityType, h3cWIPSSensor2VsdEntry=h3cWIPSSensor2VsdEntry, h3cWIPSAtkDctPolicyName=h3cWIPSAtkDctPolicyName, h3cWIPSSensorRadioEntry=h3cWIPSSensorRadioEntry, h3cWIPSAtkDctPolicyCfgGroup=h3cWIPSAtkDctPolicyCfgGroup, h3cWIPSIgnoreListCfgEntry=h3cWIPSIgnoreListCfgEntry, h3cWIPSChlStatRTS=h3cWIPSChlStatRTS, h3cWIPSDctStaWorkChannel=h3cWIPSDctStaWorkChannel, h3cWIPSDctStaRptRSSI=h3cWIPSDctStaRptRSSI, h3cWIPSDevStatTxUnicastByte=h3cWIPSDevStatTxUnicastByte, h3cWIPSChannelRadioType=h3cWIPSChannelRadioType, h3cWIPSDevStatTxProbeResponse=h3cWIPSDevStatTxProbeResponse, h3cWIPSDctAPAttachStaNum=h3cWIPSDctAPAttachStaNum, h3cWIPSMaxRSSIValue=h3cWIPSMaxRSSIValue, h3cWIPSMinAPNum=h3cWIPSMinAPNum, h3cWIPSIgnoreListCfgTable=h3cWIPSIgnoreListCfgTable, h3cWIPSChannelTable=h3cWIPSChannelTable, h3cWIPSDevStatTxBcastDeauth=h3cWIPSDevStatTxBcastDeauth, h3cWIPSAtkDctPolicyCfgEntry=h3cWIPSAtkDctPolicyCfgEntry, h3cWIPSDctAPVSD=h3cWIPSDctAPVSD, h3cWIPSAPClaRuleMatchAll=h3cWIPSAPClaRuleMatchAll, h3cWIPSDctNetworkVSD=h3cWIPSDctNetworkVSD, h3cWIPSStaticBlockListCfgTable=h3cWIPSStaticBlockListCfgTable, h3cWIPSDctAPStatus=h3cWIPSDctAPStatus, h3cWIPSChlStatMalformed=h3cWIPSChlStatMalformed, H3cWIPSChannel=H3cWIPSChannel, h3cWIPSDctAPTable=h3cWIPSDctAPTable, h3cWIPSStaticBlockListRowStatus=h3cWIPSStaticBlockListRowStatus, h3cWIPSStaticCtmListCfgTable=h3cWIPSStaticCtmListCfgTable, h3cWIPSChlStatEapolStart=h3cWIPSChlStatEapolStart, h3cWIPSDevStatTxTotalByte=h3cWIPSDevStatTxTotalByte, h3cWIPSDevStatTxAssocRequest=h3cWIPSDevStatTxAssocRequest, h3cWIPSVsdTable=h3cWIPSVsdTable, h3cWIPSChannelLastRptTm=h3cWIPSChannelLastRptTm, h3cWIPSStaticTrustListRowStatus=h3cWIPSStaticTrustListRowStatus, h3cWIPSDctAPAttachStaTable=h3cWIPSDctAPAttachStaTable, h3cWIPSVsdConfigGroup=h3cWIPSVsdConfigGroup, h3cWIPSDctNetworkBSSID=h3cWIPSDctNetworkBSSID, h3cWIPSChlStatCTS=h3cWIPSChlStatCTS, h3cWIPSChlStatEapolLogoff=h3cWIPSChlStatEapolLogoff, h3cWIPSSensor2VsdRowStatus=h3cWIPSSensor2VsdRowStatus, h3cWIPSCtmListMacAddress=h3cWIPSCtmListMacAddress, h3cWIPSDevStatTxRetry=h3cWIPSDevStatTxRetry, h3cWIPSDctModeAPName=h3cWIPSDctModeAPName, h3cWIPSChlStatControl=h3cWIPSChlStatControl, h3cWIPSDevStatTable=h3cWIPSDevStatTable, h3cWIPSDctStaTable=h3cWIPSDctStaTable, h3cWIPSDctStaAdd2IgnoreList=h3cWIPSDctStaAdd2IgnoreList, h3cWIPSDevStatTxRTS=h3cWIPSDevStatTxRTS, h3cWIPSVsdAtkDctPolicyNameCfg=h3cWIPSVsdAtkDctPolicyNameCfg, h3cWIPSAPClaRuleName=h3cWIPSAPClaRuleName, h3cWIPSDctStaRadioType=h3cWIPSDctStaRadioType, h3cWIPS=h3cWIPS, h3cWIPSDevStatRxCTS=h3cWIPSDevStatRxCTS, h3cWIPSAPClaSubRuleSSIDCase=h3cWIPSAPClaSubRuleSSIDCase, h3cWIPSDctAPRptSensorName=h3cWIPSDctAPRptSensorName, h3cWIPSDctStaRptSensorTable=h3cWIPSDctStaRptSensorTable, h3cWIPSDctAPRptSensorRadioId=h3cWIPSDctAPRptSensorRadioId, h3cWIPSAtkDctPolicyCfgRowStatus=h3cWIPSAtkDctPolicyCfgRowStatus, h3cWIPSDctSSIDTable=h3cWIPSDctSSIDTable, h3cWIPSBlockListStatus=h3cWIPSBlockListStatus, h3cWIPSCtmListLastestWorkChl=h3cWIPSCtmListLastestWorkChl, h3cWIPSStaticTrustListCfgTable=h3cWIPSStaticTrustListCfgTable, h3cWIPSChlStatData=h3cWIPSChlStatData, h3cWIPSDctModeEntry=h3cWIPSDctModeEntry, h3cWIPSDctStaRptSensorNum=h3cWIPSDctStaRptSensorNum, h3cWIPSDevStatChannel=h3cWIPSDevStatChannel, H3cWIPSRadioType=H3cWIPSRadioType, h3cWIPSDevStatRxUnicastByte=h3cWIPSDevStatRxUnicastByte, h3cWIPSChlStatAuthentication=h3cWIPSChlStatAuthentication, h3cWIPSTrustListTable=h3cWIPSTrustListTable, h3cWIPSDevStatRxRTS=h3cWIPSDevStatRxRTS, h3cWIPSResetAllCtmList=h3cWIPSResetAllCtmList, h3cWIPSVsdRowStatus=h3cWIPSVsdRowStatus, h3cWIPSDevStatTxAssocResponse=h3cWIPSDevStatTxAssocResponse, h3cWIPSDctSSIDBSSEntry=h3cWIPSDctSSIDBSSEntry, h3cWIPSReclassificationPeriod=h3cWIPSReclassificationPeriod, H3cWIPSClientCategoryType=H3cWIPSClientCategoryType, h3cWIPSDctStaLastRptTm=h3cWIPSDctStaLastRptTm, h3cWIPSDevStatRxEAPFailure=h3cWIPSDevStatRxEAPFailure, h3cWIPSRule2VsdPrecedence=h3cWIPSRule2VsdPrecedence, h3cWIPSDevStatRxData=h3cWIPSDevStatRxData, h3cWIPSDevStatRxProbeResponse=h3cWIPSDevStatRxProbeResponse, h3cWIPSDevStatRxAuth=h3cWIPSDevStatRxAuth, h3cWIPSDevStatRxDisassoc=h3cWIPSDevStatRxDisassoc, h3cWIPSAPClaType=h3cWIPSAPClaType, h3cWIPSDctAPCategory=h3cWIPSDctAPCategory, h3cWIPSDevStatRxCtrl=h3cWIPSDevStatRxCtrl, h3cWIPSDctNetworkBSSStaNum=h3cWIPSDctNetworkBSSStaNum, h3cWIPSDctAPRunTmLastUpdateTm=h3cWIPSDctAPRunTmLastUpdateTm, h3cWIPSIgnoreListIgnoreCnt=h3cWIPSIgnoreListIgnoreCnt, h3cWIPSMaxClientNum=h3cWIPSMaxClientNum, h3cWIPSChlStatProbeRequest=h3cWIPSChlStatProbeRequest, h3cWIPSChlStatBmcastPkt=h3cWIPSChlStatBmcastPkt, h3cWIPSDevStatTxTotalPkt=h3cWIPSDevStatTxTotalPkt, h3cWIPSStaticTrustListCfgEntry=h3cWIPSStaticTrustListCfgEntry, h3cWIPSDctSSIDBSSTable=h3cWIPSDctSSIDBSSTable, h3cWIPSCtmListFirstTm=h3cWIPSCtmListFirstTm, h3cWIPSChlStatEapSuccess=h3cWIPSChlStatEapSuccess, H3cWIPSDevStatus=H3cWIPSDevStatus, h3cWIPSDctNetworkSSIDHide=h3cWIPSDctNetworkSSIDHide, h3cWIPSAPClaRowStatus=h3cWIPSAPClaRowStatus, h3cWIPSDctAPAdd2CtmList=h3cWIPSDctAPAdd2CtmList, h3cWIPSStaticCtmListRowStatus=h3cWIPSStaticCtmListRowStatus, h3cWIPSCountermeasureListTable=h3cWIPSCountermeasureListTable, h3cWIPSChannelIsPermitted=h3cWIPSChannelIsPermitted, h3cWIPSDevStatTxUnicastDeauth=h3cWIPSDevStatTxUnicastDeauth, h3cWIPSDctAPLastRptTm=h3cWIPSDctAPLastRptTm, h3cWIPSDevStatTxEAPOLLogOff=h3cWIPSDevStatTxEAPOLLogOff, h3cWIPSTrustListStatus=h3cWIPSTrustListStatus, h3cWIPSDevStatTxFragment=h3cWIPSDevStatTxFragment, h3cWIPSDctAPAttachStaMac=h3cWIPSDctAPAttachStaMac, h3cWIPSDevStatTxUnicastPkt=h3cWIPSDevStatTxUnicastPkt, h3cWIPSDevStatTxCtrl=h3cWIPSDevStatTxCtrl, h3cWIPSDctAPEntry=h3cWIPSDctAPEntry, h3cWIPSRule2VsdAPClaRuleNameCfg=h3cWIPSRule2VsdAPClaRuleNameCfg, h3cWIPSIgnoreListTable=h3cWIPSIgnoreListTable, h3cWIPSResetAllBlockList=h3cWIPSResetAllBlockList, h3cWIPSDctAPSecurity=h3cWIPSDctAPSecurity, h3cWIPSAPClaRuleEntry=h3cWIPSAPClaRuleEntry, h3cWIPSTrustListMacAddress=h3cWIPSTrustListMacAddress, h3cWIPSSensorNameCfg=h3cWIPSSensorNameCfg, h3cWIPSDctAPRptSensorEntry=h3cWIPSDctAPRptSensorEntry, h3cWIPSDctAPAttachStaRowStatus=h3cWIPSDctAPAttachStaRowStatus, h3cWIPSDctAPSSID=h3cWIPSDctAPSSID, h3cWIPSChlStatEntry=h3cWIPSChlStatEntry, h3cWIPSStaticBlockListCfgEntry=h3cWIPSStaticBlockListCfgEntry, h3cWIPSChlStatSensorMacAddr=h3cWIPSChlStatSensorMacAddr, h3cWIPSDctAPRptSensorTable=h3cWIPSDctAPRptSensorTable, h3cWIPSChlStatTotalByte=h3cWIPSChlStatTotalByte, h3cWIPSSensorState=h3cWIPSSensorState, h3cWIPSAtkDctPolicyBitString=h3cWIPSAtkDctPolicyBitString, h3cWIPSChlStatRetry=h3cWIPSChlStatRetry, h3cWIPSDevStatRxTotalPkt=h3cWIPSDevStatRxTotalPkt, h3cWIPSStaticCtmListCfgEntry=h3cWIPSStaticCtmListCfgEntry, h3cWIPSDevStatRxTotalByte=h3cWIPSDevStatRxTotalByte, h3cWIPSResetAllIgnoreList=h3cWIPSResetAllIgnoreList, h3cWIPSDctModeRowStatus=h3cWIPSDctModeRowStatus, h3cWIPSAPClaSubRuleSSIDOperator=h3cWIPSAPClaSubRuleSSIDOperator, h3cWIPSDctAPRptRSSI=h3cWIPSDctAPRptRSSI, h3cWIPSDctStaRptSensorRadioId=h3cWIPSDctStaRptSensorRadioId, h3cWIPSDctAPLastDctTm=h3cWIPSDctAPLastDctTm, h3cWIPSChlStatBmcastByte=h3cWIPSChlStatBmcastByte, h3cWIPSChannelNum=h3cWIPSChannelNum, h3cWIPSAPClaSeverityLevel=h3cWIPSAPClaSeverityLevel, h3cWIPSSensorLicenseNum=h3cWIPSSensorLicenseNum, h3cWIPSAPAuthType=h3cWIPSAPAuthType, h3cWIPSDevStatRxDeauth=h3cWIPSDevStatRxDeauth, h3cWIPSDctStaState=h3cWIPSDctStaState, h3cWIPSIgnoreListFirstIgnoreTm=h3cWIPSIgnoreListFirstIgnoreTm, h3cWIPSDctStaEntry=h3cWIPSDctStaEntry, h3cWIPSDevStatSensorMacAddr=h3cWIPSDevStatSensorMacAddr, h3cWIPSBlocklistAction=h3cWIPSBlocklistAction, h3cWIPSDevAgingTime=h3cWIPSDevAgingTime, h3cWIPSAPInactiveTime=h3cWIPSAPInactiveTime, h3cWIPSRule2VsdEntry=h3cWIPSRule2VsdEntry, h3cWIPSSecurityType=h3cWIPSSecurityType, h3cWIPSDevStatTxEAPSuccess=h3cWIPSDevStatTxEAPSuccess, h3cWIPSResetAllTrustList=h3cWIPSResetAllTrustList, h3cWIPSDevStatRxAssoRequest=h3cWIPSDevStatRxAssoRequest, h3cWIPSDevStatRxMgmt=h3cWIPSDevStatRxMgmt, h3cWIPSDctStaCategory=h3cWIPSDctStaCategory)
mibBuilder.exportSymbols("H3C-WIPS-MIB", h3cWIPSMinRSSIValue=h3cWIPSMinRSSIValue, h3cWIPSBlockListEntry=h3cWIPSBlockListEntry, h3cWIPSDctModeScanMode=h3cWIPSDctModeScanMode, h3cWIPSDctNetworkCfg=h3cWIPSDctNetworkCfg, h3cWIPSBlockListTable=h3cWIPSBlockListTable, h3cWIPSIgnoreListMacAddress=h3cWIPSIgnoreListMacAddress, h3cWIPSChlStatAssocRequest=h3cWIPSChlStatAssocRequest, h3cWIPSDevStatRxProbeRequest=h3cWIPSDevStatRxProbeRequest, h3cWIPSStaticBlockListMAC=h3cWIPSStaticBlockListMAC, h3cWIPSDevStatTxAuth=h3cWIPSDevStatTxAuth, h3cWIPSBlockListMacAddress=h3cWIPSBlockListMacAddress, h3cWIPSConfigGroup=h3cWIPSConfigGroup, h3cWIPSCountermeasureListEntry=h3cWIPSCountermeasureListEntry, h3cWIPSNotifyGroup=h3cWIPSNotifyGroup, h3cWIPSDctNetworkBSSWorkChl=h3cWIPSDctNetworkBSSWorkChl, h3cWIPSDctAPRptSensorNum=h3cWIPSDctAPRptSensorNum, h3cWIPSDctAPRunningTime=h3cWIPSDctAPRunningTime, h3cWIPSChlStatUnicastDeauthen=h3cWIPSChlStatUnicastDeauthen, H3cWIPSAPClassifyType=H3cWIPSAPClassifyType, h3cWIPSEnable=h3cWIPSEnable, h3cWIPSDevStatRxEAPOLLogoff=h3cWIPSDevStatRxEAPOLLogoff, h3cWIPSGlobalConfigGroup=h3cWIPSGlobalConfigGroup, h3cWIPSAPClaSubRuleSSID=h3cWIPSAPClaSubRuleSSID, h3cWIPSAtkDctPolicyCfgTable=h3cWIPSAtkDctPolicyCfgTable, h3cWIPSDevStatTxEAPFailure=h3cWIPSDevStatTxEAPFailure, h3cWIPSTrustListEntry=h3cWIPSTrustListEntry, h3cWIPSMaxDuration=h3cWIPSMaxDuration, h3cWIPSChlStatBeacon=h3cWIPSChlStatBeacon, PYSNMP_MODULE_ID=h3cWIPS, h3cWIPSDctAPIsCountered=h3cWIPSDctAPIsCountered, h3cWIPSIgnoreListEntry=h3cWIPSIgnoreListEntry, h3cWIPSDctModeRadio=h3cWIPSDctModeRadio, h3cWIPSDevStatTxProbeRequest=h3cWIPSDevStatTxProbeRequest, h3cWIPSDctStaStatus=h3cWIPSDctStaStatus)
