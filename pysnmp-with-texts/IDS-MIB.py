#
# PySNMP MIB module IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ipAddrEntry, = mibBuilder.importSymbols("IP-MIB", "ipAddrEntry")
rsIDS, = mibBuilder.importSymbols("RADWARE-MIB", "rsIDS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, NotificationType, enterprises, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, IpAddress, MibIdentifier, Counter32, iso, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "NotificationType", "enterprises", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "Counter32", "iso", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rsIDSTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1), )
if mibBuilder.loadTexts: rsIDSTrackingTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTrackingTable.setDescription('Table containing the parameters that are needed to detect intrusions')
rsIDStrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1), ).setIndexNames((0, "IDS-MIB", "rsIDSFilterGroupName"))
if mibBuilder.loadTexts: rsIDStrackingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDStrackingEntry.setDescription('The row definition for this table.')
rsIDSFilterGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSFilterGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSFilterGroupName.setDescription('The Name for the filter/group must be unique. that name should be the same as the name of the appropriate filter/group')
rsIDSTrackingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 2), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTrackingTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTrackingTime.setDescription('This variable indicates the time interval, in miliseconds, to track a detection')
rsIDSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 3), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSThreshold.setDescription('This variable indicates the threshold ')
rsIDSFilterGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("group", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSFilterGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSFilterGroupType.setDescription('This variable indicates the object type- whether it is a filter or group ')
rsIDSTrackingType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("drop", 0), ("reset", 1), ("ncps", 2), ("ncpd", 3), ("ncpsd", 4), ("ncpf", 5), ("winnuke", 6), ("landattack", 7), ("synattackack", 8), ("tcpsyn", 9), ("tcpack", 10), ("tcpsynack", 11), ("tcprst", 12), ("tcpfin", 13), ("tcpelse", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTrackingType.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTrackingType.setDescription('This variable indicates how to count ')
rsIDSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSStatus.setDescription('This variable indicates the administrative status of this entry. Used to delete an entry of this table.')
rsIDSDummy1 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSDummy1.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSDummy1.setDescription('Dummy variable for stopping getnext.')
rsIDSMechanismStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSMechanismStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSMechanismStatus.setDescription('the IDS trigger')
rsIDSTCPAgingTimeFreq = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTCPAgingTimeFreq.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTCPAgingTimeFreq.setDescription('the TCP table aging time frequency')
rsIDSNCPsAgingTimeFreq = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPsAgingTimeFreq.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCPsAgingTimeFreq.setDescription("the NCP's tables aging time frequency")
rsIDSStatsAgingTimeFreq = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSStatsAgingTimeFreq.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSStatsAgingTimeFreq.setDescription('the statistics table aging time frequency')
rsIDSNCPSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPSTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCPSTableSize.setDescription('the NCPS table size')
rsIDSNCPDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPDTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCPDTableSize.setDescription('the NCPD table size')
rsIDSNCPSDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPSDTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCPSDTableSize.setDescription('the NCPSD table size')
rsIDSTCPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTCPTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTCPTableSize.setDescription('the TCP table size')
rsIDSSTATSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSSTATSTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSSTATSTableSize.setDescription('the statistics table size')
rsIDSBasic = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSBasic.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSBasic.setDescription('the basic protection rule trigger')
rsIDSAllServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSAllServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAllServers.setDescription('the All servers rule trigger')
rsIDSUNIXServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSUNIXServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSUNIXServers.setDescription('the unix servers rule trigger')
rsIDSLotusServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSLotusServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSLotusServers.setDescription('the Lotus servers rule trigger')
rsIDSMSIISServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSMSIISServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSMSIISServers.setDescription('the MS_IIS servers rule trigger')
rsIDSMSFrontPageServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSMSFrontPageServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSMSFrontPageServers.setDescription('the MS front page servers rule trigger')
rsIDSApacheServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSApacheServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSApacheServers.setDescription('the Apache servers rule trigger')
rsIDSNetscapeWebServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNetscapeWebServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNetscapeWebServers.setDescription('the Netscape_Web servers rule trigger')
rsIDSNovellServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNovellServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNovellServers.setDescription('the Novell servers rule trigger')
rsIDSOracleServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSOracleServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSOracleServers.setDescription('the Oracle servers rule trigger')
rsIDSOmniHTTPDServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSOmniHTTPDServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSOmniHTTPDServers.setDescription('the OmniHTTPD servers rule trigger')
rsIDSWebSiteServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSWebSiteServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSWebSiteServers.setDescription('the WebSite_WebSitePro servers rule trigger')
rsIDSColdfusionServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSColdfusionServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSColdfusionServers.setDescription('the Allaire_Coldfusion servers rule trigger')
rsIDSIRIXServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSIRIXServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSIRIXServers.setDescription('the IRIX servers rule trigger')
rsIDSNCSAServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCSAServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCSAServers.setDescription('the NCSA servers rule trigger')
rsIDSCompaqServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSCompaqServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSCompaqServers.setDescription('the Compaq_Web_Servers servers rule trigger')
rsIDSbackdoors = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSbackdoors.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSbackdoors.setDescription('the backdoors rule trigger')
rsIDSTraps = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTraps.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTraps.setDescription('the traps sending mechanism trigger')
rsIDSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29), )
if mibBuilder.loadTexts: rsIDSStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSStatsTable.setDescription('Table containing the intrusion detection statistics')
rsIDSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1), ).setIndexNames((0, "IDS-MIB", "rsIDSAttackIndex"))
if mibBuilder.loadTexts: rsIDSStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSStatsEntry.setDescription('The row definition for this table.')
rsIDSAttackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAttackIndex.setDescription('The index of the attack that was detected')
rsIDSAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackName.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAttackName.setDescription('The Name for the attack')
rsIDSAttackSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAttackSrcAddr.setDescription('The src address of the attack')
rsIDSAttackDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAttackDstAddr.setDescription('The dest address of the attack')
rsIDSAttackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAttackStatus.setDescription('The status of the attack(started/terminated/occured)')
rsIDSAttacktime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttacktime.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSAttacktime.setDescription('The time of the attack')
rsIDSStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSStatsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSStatsStatus.setDescription('This variable indicates the administrative status of this entry. Used to delete an entry of this table.')
rsIDSDummy2 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSDummy2.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSDummy2.setDescription('Dummy variable for stopping getnext.')
rsIDSNCPDTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPDTableSizeAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCPDTableSizeAfterReset.setDescription('the NCPD after-reset table size')
rsIDSNCPSDTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPSDTableSizeAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSNCPSDTableSizeAfterReset.setDescription('the NCPS after-reset table size')
rsIDSTCPTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTCPTableSizeAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSTCPTableSizeAfterReset.setDescription('the NCPS after-reset table size')
rsIDSSTATSTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSSTATSTableSizeAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsIDSSTATSTableSizeAfterReset.setDescription('the NCPS after-reset table size')
mibBuilder.exportSymbols("IDS-MIB", RowStatus=RowStatus, rsIDSApacheServers=rsIDSApacheServers, rsIDSNCPsAgingTimeFreq=rsIDSNCPsAgingTimeFreq, rsIDSWebSiteServers=rsIDSWebSiteServers, rsIDSTrackingTime=rsIDSTrackingTime, rsIDSIRIXServers=rsIDSIRIXServers, rsIDSSTATSTableSizeAfterReset=rsIDSSTATSTableSizeAfterReset, rsIDSNetscapeWebServers=rsIDSNetscapeWebServers, rsIDSTCPTableSize=rsIDSTCPTableSize, rsIDStrackingEntry=rsIDStrackingEntry, rsIDSAllServers=rsIDSAllServers, rsIDSAttackDstAddr=rsIDSAttackDstAddr, rsIDSOracleServers=rsIDSOracleServers, rsIDSStatsStatus=rsIDSStatsStatus, rsIDSDummy1=rsIDSDummy1, rsIDSFilterGroupType=rsIDSFilterGroupType, rsIDSNCPSTableSize=rsIDSNCPSTableSize, rsIDSStatsEntry=rsIDSStatsEntry, rsIDSAttackStatus=rsIDSAttackStatus, rsIDSCompaqServers=rsIDSCompaqServers, NetNumber=NetNumber, rsIDSStatsAgingTimeFreq=rsIDSStatsAgingTimeFreq, rsIDSNCPDTableSize=rsIDSNCPDTableSize, rsIDSNovellServers=rsIDSNovellServers, rsIDSStatus=rsIDSStatus, rsIDSColdfusionServers=rsIDSColdfusionServers, rsIDSOmniHTTPDServers=rsIDSOmniHTTPDServers, rsIDSMSFrontPageServers=rsIDSMSFrontPageServers, rsIDSNCPSDTableSizeAfterReset=rsIDSNCPSDTableSizeAfterReset, rsIDSTraps=rsIDSTraps, rsIDSMSIISServers=rsIDSMSIISServers, rsIDSAttackName=rsIDSAttackName, rsIDSAttackSrcAddr=rsIDSAttackSrcAddr, rsIDSNCPDTableSizeAfterReset=rsIDSNCPDTableSizeAfterReset, rsIDSMechanismStatus=rsIDSMechanismStatus, rsIDSThreshold=rsIDSThreshold, rsIDSLotusServers=rsIDSLotusServers, TruthValue=TruthValue, rsIDSDummy2=rsIDSDummy2, rsIDSTrackingType=rsIDSTrackingType, rsIDSTCPAgingTimeFreq=rsIDSTCPAgingTimeFreq, rsIDSAttackIndex=rsIDSAttackIndex, rsIDSAttacktime=rsIDSAttacktime, rsIDSbackdoors=rsIDSbackdoors, rsIDSNCPSDTableSize=rsIDSNCPSDTableSize, rsIDSTCPTableSizeAfterReset=rsIDSTCPTableSizeAfterReset, rsIDSTrackingTable=rsIDSTrackingTable, rsIDSUNIXServers=rsIDSUNIXServers, rsIDSNCSAServers=rsIDSNCSAServers, rsIDSStatsTable=rsIDSStatsTable, rsIDSBasic=rsIDSBasic, rsIDSSTATSTableSize=rsIDSSTATSTableSize, rsIDSFilterGroupName=rsIDSFilterGroupName)
