#
# PySNMP MIB module CISCO-ITP-RT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-RT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
CItpTcQos, CItpTcLinksetId, CItpTcRouteTableName, CItpTcTableLoadStatus, CItpTcPointCode = mibBuilder.importSymbols("CISCO-ITP-TC-MIB", "CItpTcQos", "CItpTcLinksetId", "CItpTcRouteTableName", "CItpTcTableLoadStatus", "CItpTcPointCode")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ModuleIdentity, iso, Unsigned32, Integer32, Counter64, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ModuleIdentity", "iso", "Unsigned32", "Integer32", "Counter64", "ObjectIdentity", "Bits")
TimeStamp, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue")
ciscoItpRtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 228))
ciscoItpRtMIB.setRevisions(('2003-07-10 00:00', '2002-01-07 00:00', '2001-08-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoItpRtMIB.setRevisionsDescriptions(('Updated description to provide overview and additional information. The ability to allow multiple instances of Signalling Points to run in the same device has introduce a new index structure. All objects in this MIB will be deprecated and replaced by objects in the CISCO-ITP-GACT-MIB.my MIB.', 'The following objects were added to provide information on time and status of route table loads using the file format. cItpRtConfigLoad cItpRtConfigLoadStatus The following objects were added to provide information on route state changes. cItpRtStateChangeCount cItpRtStateChangeNotifEnabled cItpRtMaxDynamicRoutes cItpRtChangeNotifWindowTime cItpRtChangeNotifMaxPerWindow cItpRtNotifInfoSuppressedFlag cItpRtNotifInfoStateChanges cItpRouteStateChange', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoItpRtMIB.setLastUpdated('200307100000Z')
if mibBuilder.loadTexts: ciscoItpRtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoItpRtMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7s@cisco.com')
if mibBuilder.loadTexts: ciscoItpRtMIB.setDescription("This MIB is for managing information required to route messages transported over Signalling System No. 7 (SS7) Network via Cisco IP Transfer Point. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides the functions necessary to act as a SS7 signalling point. Each signalling point is connected to other signalling point using IP based or traditional TDM links. The relevant ITU documents describing this technology are the ITU Q series, including ITU Q.700: Introduction to CCITT Signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signalling System No. 7. Definitions and overview: Route: A route consists of one or more linksets used to transport MTP3 Message Signal Units(MSU) between signalling points. A route is an association between a destination point code(DPC) and a linkset, i.e., a linkset that can be used to send an MSU to the given DPC. Routeset: A routeset is a set of routes to a given DPC. Each route within a routeset is on a possible path toward the DPC. Each route within the routeset has associated with it a route priority. In the following simple configuration, two routes exist that can be used to transport MSUs from STP1 to STP4. --------- STP1-STP2 --------- - STP1 ----------------------------- STP2 - --------- --------- | | | STP1-STP3 STP2-STP4 | | | --------- STP3-STP4 --------- - STP3 ----------------------------- STP4 - --------- --------- Routeset on STP1 for DPC = STP4: STP1-STP2, STP1-STP3 Linkset: A linkset is a set of signalling links connecting two signalling points. Combined Linkset: Two linksets with equal number of links and capacity that form routes of equal priority to a given DPC are called Combined Linksets. It is primarily used for load sharing and redundancy. In the following, example, linksets 'SSP1-STP1' and 'SSP1-STP2' form a combined linsket. SSP1-STP1 --------- |------------------------- STP1 - | --------- - - - - - SSP1 - - - - - | SSP1-STP2 --------- |------------------------ STP2 - --------- Routing: The routing of SS7 Message signalling Units(MSU) is based on the DPC. Message Signalling Units are sent from an originating point code(OPC) to DPC. Each MSU will traverse one or more linksets as it is routed to its final destination. When an MSU arrives at a signalling point and the DPC does not match the signalling point's point code the MSU must be directed toward the DPC. Each signalling point has enough routing information to determine which linkset should be used to transmit the MSU toward its final destination. Route statement: Each ITP Signalling Point has route statements needed to determine which linkset should be used to transmit message signalling units to destinations. Each route statement consists of a destination, a priority and a linkset name. The destination is specified as a combination of DPC and mask. The priority, also know as cost, is used to define the order in which the routes are selected. The linkset name specifies which linkset to use to reach the destination. Route table: Each ITP Signalling Point has a table of routes. These route entries are used to determine which linkset should be selected to transmit message signalling units to a given destination. There are two basic type of routing. The first type is fully-qualified and uses all bits of the target DPC. The other type is summary routing that uses a subset of the bits in the target DPC and is used to represent groups of point codes rather than a single point code. Example of route table entries. Example 1: variant = ITU DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.5/14 3 STP1-STP2 5.5.5/14 7 STP1-STP3 Description: Two route table entries that define a primary route using linkset 'STP1-STP2' and an alternate route using linkset 'STP1-STP3' to point-code 5.5.5. Example 2: variant = ITU DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.5/14 3 STP1-STP2 5.5.5/14 3 STP1-STP3 5.5.5/14 7 STP1-STP4 Description: Two route table entrys that define a combined linkset consisting of linkset 'STP1-STP2' and 'STP1-STP3' to point code 5.5.5. An alternate route is also defined using linkset 'STP1-STP4'. Example 3: variant = ANSI DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.0/16 3 STP1-STP2 Description: A route table entry that defines routing to a cluster. The cluster represents all point codes in the range from 5.5.0-5.5.255. Example 4: variant = ANSI DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.0/16 3 STP1-STP3 5.5.5/24 3 STP1-STP2 Description: The mixing of fully-qualified and summary route table entrys allow for different routes to be defined for certain DPC in a cluster. In this configuration, the fully-qualified route will be the primary and the summary route will act as a backup. Route table: A group of route table entrys used to route MSU for a particular instance of a signalling point. A sample route table. DPC/MASK Priority Linkset-name -------- -------- ----------------------- 0.0.0/0 7 STP1-STP4 5.5.0/16 3 STP1-STP3 5.5.5/24 3 STP1-STP2 . . 122.5.5 5 STP1-STP2 . . 243.200.1 6 STP1-STP3 ")
cItpRouteNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 0))
cItpRtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 1))
cItpRtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 2))
cItpRtScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1))
cItpRtTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2))
cItpRtNotificationsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 3))
cItpRtConfigLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRtConfigLastChanged.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtConfigLastChanged.setDescription('The value of sysUpTime at the time of the last creation or deletion of an entry in the cItpRouteTable. If the local network management subsystem is re-initialization, then this object contains the sysUpTime at the time when this occurred. This value can be used to prevent unnecessary walks of the cItpRouteTable.')
cItpRtConfigLoad = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRtConfigLoad.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtConfigLoad.setDescription('The value of sysUpTime at the time of the last load of the route table using file format.')
cItpRtConfigLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 3), CItpTcTableLoadStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRtConfigLoadStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtConfigLoadStatus.setDescription('The status of the current load or status from the prior load operation. This object will have a value of loadInProgress while the load operation is in progress. The cItpRtConfigLoad contains a timestamp indicating when the load operation completed.')
cItpRtStateChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRtStateChangeCount.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtStateChangeCount.setDescription('A count of the number of routes that have changed states. This value is incremented whenever the destination state of a route changes. This value is used to provide an indicator of the stability of the routing table information.')
cItpRtStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpRtStateChangeNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtStateChangeNotifEnabled.setDescription("A control to enable or disable cItpRouteStateChange notifications as follows: 'true' Indicates that the cItpRouteStateChange notification should be generated when the state of any route changes. That is, the notification generation is enabled. 'false' Indicates that cItpRouteStateChange notification generation is disabled.")
cItpRtChangeNotifDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpRtChangeNotifDelayTime.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtChangeNotifDelayTime.setDescription("This object specifies the maximum amount of time to delay before generating the cItpRouteStateChange notification. The delay is introduced to allow multiple route state changes to be bundled into a single notification. If the value of this object is equal to 0, the device will generate cItpRouteStateChange notification as each route changes states. If the value of this object is greater than 0, the device will not generate notifications as routes change state. As routes changes state they are accumulated until the time specified in cItpRtChangeNotifDelayTime has elapsed or enough state changes have been accumulated to fill up the cItprtNotifInfoStateChanges object. This object is ignored by the agent when the cItpRtStateChangeNotifEnabled object is set to the 'false' value.")
cItpRtMaxDynamicRoutes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpRtMaxDynamicRoutes.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtMaxDynamicRoutes.setDescription('The maximum number of dynamic SS7 routes. This object is used to limit the size of the route table by preventing unbounded growth of dynamic entries. Dynamic entries are created when certain MTP3 management messages are received or sent. The removal of dynamic routes is performed periodically and the older dynamic routes are removed until the specified number is reached.')
cItpRtChangeNotifWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 900)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpRtChangeNotifWindowTime.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtChangeNotifWindowTime.setDescription('This object specifies the time interval used to monitor the rate of route state changes notifications. This object in combination with cItpRtChangeNotifMaxPerWindow are used to determine the notification transit rate and suppress route state notifications.')
cItpRtChangeNotifMaxPerWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 9000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpRtChangeNotifMaxPerWindow.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtChangeNotifMaxPerWindow.setDescription('This object specifies the maximum number of route state changes that can occur in the time interval specified in the cItpRtChangeNotifMaxPerWindow object. If additional state changes can occur in the specified time interval the notifications are suppressed.')
cItpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1), )
if mibBuilder.loadTexts: cItpRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteTable.setDescription('The route table for determining the linkset that a packet must traverse to arrive at its destination node given by the destination point code.')
cItpRouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-RT-MIB", "cItpRouteTableName"), (0, "CISCO-ITP-RT-MIB", "cItpRouteDpc"), (0, "CISCO-ITP-RT-MIB", "cItpRouteMask"), (0, "CISCO-ITP-RT-MIB", "cItpRouteDestLsCost"), (0, "CISCO-ITP-RT-MIB", "cItpRouteDestLinkset"))
if mibBuilder.loadTexts: cItpRouteTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteTableEntry.setDescription('Each table entry represents a configured route statement.')
cItpRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 1), CItpTcRouteTableName())
if mibBuilder.loadTexts: cItpRouteTableName.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteTableName.setDescription('The configured name for this route table.')
cItpRouteDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 2), CItpTcPointCode())
if mibBuilder.loadTexts: cItpRouteDpc.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteDpc.setDescription('The destination point code.')
cItpRouteDestLsCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: cItpRouteDestLsCost.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteDestLsCost.setDescription('The cost assigned to this linkset matching this route. Higher numbers represent higher cost.')
cItpRouteDestLinkset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 4), CItpTcLinksetId())
if mibBuilder.loadTexts: cItpRouteDestLinkset.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteDestLinkset.setDescription('The linkset that the packet is to be forwarded to on matching this route.')
cItpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: cItpRouteMask.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteMask.setDescription('The mask used to define which part of cItpRouteDpc is significant when comparing the cItpRouteDpc to the destination code point in the packet to be routed.')
cItpRouteQos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 6), CItpTcQos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRouteQos.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteQos.setDescription('The quality of service classification to be assigned to the ip packets used to transport the SS7 messages. The value to specify for packets when they will be transported on SCTP/IP based linkset.')
cItpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("restricted", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRouteStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteStatus.setDescription("List of the possible route status values. 'unknown' : Status can not be determined. 'available' : Route is available. 'restricted' : Traffic is restricted on route. 'unavailable' : Route is unable to service traffic.")
cItpRouteNonAdjStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("allowed", 2), ("restricted", 3), ("prohibited", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRouteNonAdjStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteNonAdjStatus.setDescription("List of the possible non-adjacent status values. 'unknown' : Status can not be determined. 'allowed' : traffic is allowed. 'restricted' : Traffic is restricted on route. 'prohibited' : Route is prohibited from providing traffic.")
cItpRtNotifInfoSuppressedFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 3, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRtNotifInfoSuppressedFlag.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtNotifInfoSuppressedFlag.setDescription("A flag to indicate whether cItpRouteStateChange notifications have been suppressed in the current time interval specified by the cItpRtChangeNotifWindowTime object. 'true' Indicates that the device has suppressed the sending of cItpRouteStateChange notifications for the remainder of the time interval. 'false' Indicates that the device has not suppressed the sending of cItpRouteStateChange notifications in the current time interval.")
cItpRtNotifInfoStateChanges = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 228, 1, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 480))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpRtNotifInfoStateChanges.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtNotifInfoStateChanges.setDescription("This object contains a list of route state changes accumulated until the list is full or the time time interval specified in cItpRtChangeNotifDelayTime has passed. It consists of one or more tuples packed together in the format of '<tuple1><tuple2>...<tuple15>'. Each tuple consist of 32 octets in the following format. '<cItpRouteTableName> 20 octets null padded <cItpRouteDpc> 4 octets <cItpRouteMask> 4 octets destination status 1 octet 1 - unknown state 2 - route is accessible 3 - route is inaccessible 4 - route is restricted' reserved1 1 octet(set to null) reserved2 1 octet(set to null) reserved3 1 octet(set to null) The maximum number of tuples is 15.")
cItpRouteStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 228, 0, 1)).setObjects(("CISCO-ITP-RT-MIB", "cItpRtStateChangeCount"), ("CISCO-ITP-RT-MIB", "cItpRtNotifInfoSuppressedFlag"), ("CISCO-ITP-RT-MIB", "cItpRtNotifInfoStateChanges"))
if mibBuilder.loadTexts: cItpRouteStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteStateChange.setDescription('This notification is generated whenever one or more route destination status changes states and includes the count of all route state changes. This notification contains a list of route state changes in the cItpRtNotifInfoStateChanges object. State changes are accumulated until the cItpRtNotifInfoStateChanges is full or the maximum delay time is reached. The delay time is specified by the cItpRtChangeNotifDelayTime object. It may be necessary to suppress the sending of notification when a large number route change state, due the failure of some common resource. The number of notifications can be controlled by specifying values for cItpRtChangeNotifWindowTime and cItpRtChangeNotifMaxPerWindow objects. When the number of route state changes exceed the specified value the last notification will indicate that notifications are suppressed for the remainder of the window.')
cItpRtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 1))
cItpRtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 2))
cItpRtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 1, 1)).setObjects(("CISCO-ITP-RT-MIB", "cItpRtScalarGroup"), ("CISCO-ITP-RT-MIB", "cItpRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpRtMIBCompliance = cItpRtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco CISCO-ITP-RT-MIB.my MIB')
cItpRtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 1, 2)).setObjects(("CISCO-ITP-RT-MIB", "cItpRtScalarGroup"), ("CISCO-ITP-RT-MIB", "cItpRouteGroup"), ("CISCO-ITP-RT-MIB", "cItpRtNotificationsGroup"), ("CISCO-ITP-RT-MIB", "cItpRtScalarGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpRtMIBComplianceRev1 = cItpRtMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco CISCO-ITP-RT-MIB.my MIB')
cItpRtScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 2, 1)).setObjects(("CISCO-ITP-RT-MIB", "cItpRtConfigLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpRtScalarGroup = cItpRtScalarGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtScalarGroup.setDescription('Route scalars Group.')
cItpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 2, 2)).setObjects(("CISCO-ITP-RT-MIB", "cItpRouteQos"), ("CISCO-ITP-RT-MIB", "cItpRouteStatus"), ("CISCO-ITP-RT-MIB", "cItpRouteNonAdjStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpRouteGroup = cItpRouteGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRouteGroup.setDescription('Route table group.')
cItpRtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 2, 3)).setObjects(("CISCO-ITP-RT-MIB", "cItpRouteStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpRtNotificationsGroup = cItpRtNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtNotificationsGroup.setDescription('Route notification objects.')
cItpRtScalarGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 228, 2, 2, 4)).setObjects(("CISCO-ITP-RT-MIB", "cItpRtConfigLoad"), ("CISCO-ITP-RT-MIB", "cItpRtConfigLoadStatus"), ("CISCO-ITP-RT-MIB", "cItpRtStateChangeCount"), ("CISCO-ITP-RT-MIB", "cItpRtStateChangeNotifEnabled"), ("CISCO-ITP-RT-MIB", "cItpRtChangeNotifDelayTime"), ("CISCO-ITP-RT-MIB", "cItpRtMaxDynamicRoutes"), ("CISCO-ITP-RT-MIB", "cItpRtChangeNotifWindowTime"), ("CISCO-ITP-RT-MIB", "cItpRtChangeNotifMaxPerWindow"), ("CISCO-ITP-RT-MIB", "cItpRtNotifInfoSuppressedFlag"), ("CISCO-ITP-RT-MIB", "cItpRtNotifInfoStateChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpRtScalarGroupRev1 = cItpRtScalarGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpRtScalarGroupRev1.setDescription('Route revision one scalars group.')
mibBuilder.exportSymbols("CISCO-ITP-RT-MIB", cItpRouteStatus=cItpRouteStatus, cItpRtTables=cItpRtTables, cItpRouteDestLinkset=cItpRouteDestLinkset, cItpRouteDpc=cItpRouteDpc, cItpRtChangeNotifDelayTime=cItpRtChangeNotifDelayTime, cItpRtMIBGroups=cItpRtMIBGroups, cItpRouteGroup=cItpRouteGroup, cItpRtMIBObjects=cItpRtMIBObjects, cItpRtConfigLastChanged=cItpRtConfigLastChanged, cItpRtScalarGroup=cItpRtScalarGroup, cItpRtStateChangeCount=cItpRtStateChangeCount, cItpRouteQos=cItpRouteQos, cItpRtChangeNotifWindowTime=cItpRtChangeNotifWindowTime, cItpRtConfigLoadStatus=cItpRtConfigLoadStatus, cItpRouteDestLsCost=cItpRouteDestLsCost, cItpRtMIBCompliance=cItpRtMIBCompliance, cItpRtMIBCompliances=cItpRtMIBCompliances, cItpRtNotifInfoSuppressedFlag=cItpRtNotifInfoSuppressedFlag, cItpRtScalars=cItpRtScalars, cItpRtChangeNotifMaxPerWindow=cItpRtChangeNotifMaxPerWindow, cItpRtMaxDynamicRoutes=cItpRtMaxDynamicRoutes, cItpRouteMask=cItpRouteMask, cItpRtNotificationsInfo=cItpRtNotificationsInfo, cItpRouteTableName=cItpRouteTableName, cItpRtMIBComplianceRev1=cItpRtMIBComplianceRev1, cItpRouteNonAdjStatus=cItpRouteNonAdjStatus, cItpRtStateChangeNotifEnabled=cItpRtStateChangeNotifEnabled, cItpRouteTableEntry=cItpRouteTableEntry, cItpRouteTable=cItpRouteTable, cItpRouteNotifications=cItpRouteNotifications, cItpRtConfigLoad=cItpRtConfigLoad, cItpRouteStateChange=cItpRouteStateChange, cItpRtNotificationsGroup=cItpRtNotificationsGroup, cItpRtScalarGroupRev1=cItpRtScalarGroupRev1, ciscoItpRtMIB=ciscoItpRtMIB, cItpRtMIBConformance=cItpRtMIBConformance, cItpRtNotifInfoStateChanges=cItpRtNotifInfoStateChanges, PYSNMP_MODULE_ID=ciscoItpRtMIB)
