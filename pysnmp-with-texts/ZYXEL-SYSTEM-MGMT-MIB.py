#
# PySNMP MIB module ZYXEL-SYSTEM-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-SYSTEM-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, Counter32, ModuleIdentity, NotificationType, Bits, Unsigned32, TimeTicks, Integer32, IpAddress, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter32", "ModuleIdentity", "NotificationType", "Bits", "Unsigned32", "TimeTicks", "Integer32", "IpAddress", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelManagement = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49))
if mibBuilder.loadTexts: zyxelManagement.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelManagement.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelManagement.setContactInfo('')
if mibBuilder.loadTexts: zyxelManagement.setDescription('The subtree for management')
zyxelSysMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1))
zyxelSysMgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 2))
zySysMgmtConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtConfigSave.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtConfigSave.setDescription('According setting value, running-config will be written to the assigned configuration file. If not, running-config will be written to the booting configuration file. Note: This action can access all configuration includes user account and AA configuration.')
zySysMgmtBootupConfig = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtBootupConfig.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtBootupConfig.setDescription('The setting value (read index) will be written into non-volatile memory. While rebooting, the variable write index is equal to read index initially. ')
zySysMgmtReboot = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtReboot.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtReboot.setDescription('Reboot switch from SNMP. 1:Reboot, 0:Nothing')
zySysMgmtDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("resetToDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtDefaultConfig.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtDefaultConfig.setDescription('Erase running config and reset to default. Note: This action can access all configuration includes user account and AA configuration.')
zySysMgmtLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySysMgmtLastActionStatus.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtLastActionStatus.setDescription('Display status of last managment action.')
zySysMgmtSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 6), Bits().clone(namedValues=NamedValues(("sysAlarmDetected", 0), ("sysTemperatureError", 1), ("sysFanRPMError", 2), ("sysVoltageRangeError", 3), ("sysNoDefect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySysMgmtSysStatus.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtSysStatus.setDescription('This variable indicates the status of the system. The zyxelSysMgmtSysStatus is a bit map represented a sum, therefore, it can represent multiple defects simultaneously. The sysNoDefect should be set if and only if no other flag is set. The various bit positions are: 0 sysAlarmDetected 1 sysTemperatureError 2 sysFanRPMError 3 sysVoltageRangeError 4 sysNoDefect')
zySysMgmtCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySysMgmtCPUUsage.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtCPUUsage.setDescription("Show device CPU load in %, it's the snapshot of CPU load when getting the values.")
zySysMgmtBootupImage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("image1", 1), ("image2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtBootupImage.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtBootupImage.setDescription('The setting value (read index) will be written into non-volatile memory. When rebooting, the selected image will be used.')
zySysMgmtCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtCounterReset.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtCounterReset.setDescription('Reset all port counters.')
zyxelSysMgmtTftpServiceSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10))
zySysMgmtTftpServiceServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtTftpServiceServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtTftpServiceServerIpAddress.setDescription(' IP address of TFTP server')
zySysMgmtTftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtTftpRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtTftpRemoteFileName.setDescription('The file name that you want to backup to or restore from TFTP server')
zySysMgmtTftpConfigIndex = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtTftpConfigIndex.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtTftpConfigIndex.setDescription('Index of system configuration which you want to restore.')
zySysMgmtTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("backupConfig", 1), ("restoreConfig", 2), ("mergeConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtTftpAction.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtTftpAction.setDescription(' Action of tftp service. 1: Backup running-config to tftp server, 2: Restore config from tftp server, 3: Merge config from tftp server. Note: This action can access all configuration includes user account and AA configuration.')
zySysMgmtTftpActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("underAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySysMgmtTftpActionStatus.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtTftpActionStatus.setDescription('Display status of management action.')
zySysMgmtTftpActionPrivilege13 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 10, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("backupConfig", 1), ("restoreConfig", 2), ("mergeConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtTftpActionPrivilege13.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtTftpActionPrivilege13.setDescription(' Action of tftp service. 1: Backup running-config to tftp server, 2: Restore config from tftp server, 3: Merge config from tftp server. Note: This action can access configuration with privilege 13.')
zySysMgmtReloadFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reloadFactoryDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtReloadFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtReloadFactoryDefault.setDescription('Restore system to factory default settings and reboot.')
zySysMgmtReloadStackingDefault = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reloadStackingDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtReloadStackingDefault.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtReloadStackingDefault.setDescription('Restore system to stacking default settings and reboot.')
zySysMgmtConfigSavePrivilege13 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtConfigSavePrivilege13.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtConfigSavePrivilege13.setDescription('If setting value is given, the variable write index will be set and running-config will be written to the assigned configuration file. If not, running-config will be written to the booting one. Note: This action can access configuration with privilege 13.')
zySysMgmtDefaultConfigPrivilege13 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 1, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("resetToDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySysMgmtDefaultConfigPrivilege13.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtDefaultConfigPrivilege13.setDescription('Erase running config and reset to default. Note: This action can access configuration with privilege 13.')
zySysMgmtUncontrolledSystemReset = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 2, 1))
if mibBuilder.loadTexts: zySysMgmtUncontrolledSystemReset.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtUncontrolledSystemReset.setDescription('Network element has reset without management command.')
zySysMgmtControlledSystemReset = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 2, 2))
if mibBuilder.loadTexts: zySysMgmtControlledSystemReset.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtControlledSystemReset.setDescription('Nework element has reset due to a management command. ')
zySysMgmtBootImageInconsistence = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 49, 2, 3))
if mibBuilder.loadTexts: zySysMgmtBootImageInconsistence.setStatus('current')
if mibBuilder.loadTexts: zySysMgmtBootImageInconsistence.setDescription('The configured image index is defferent from the current booted up image index.')
mibBuilder.exportSymbols("ZYXEL-SYSTEM-MGMT-MIB", zySysMgmtReboot=zySysMgmtReboot, zySysMgmtDefaultConfigPrivilege13=zySysMgmtDefaultConfigPrivilege13, zySysMgmtTftpActionStatus=zySysMgmtTftpActionStatus, zyxelSysMgmt=zyxelSysMgmt, zySysMgmtBootupImage=zySysMgmtBootupImage, zySysMgmtLastActionStatus=zySysMgmtLastActionStatus, zySysMgmtTftpAction=zySysMgmtTftpAction, zySysMgmtReloadStackingDefault=zySysMgmtReloadStackingDefault, zySysMgmtConfigSavePrivilege13=zySysMgmtConfigSavePrivilege13, zyxelManagement=zyxelManagement, zySysMgmtConfigSave=zySysMgmtConfigSave, zySysMgmtBootupConfig=zySysMgmtBootupConfig, zySysMgmtCPUUsage=zySysMgmtCPUUsage, zySysMgmtTftpConfigIndex=zySysMgmtTftpConfigIndex, zySysMgmtDefaultConfig=zySysMgmtDefaultConfig, zyxelSysMgmtNotifications=zyxelSysMgmtNotifications, zyxelSysMgmtTftpServiceSetup=zyxelSysMgmtTftpServiceSetup, zySysMgmtReloadFactoryDefault=zySysMgmtReloadFactoryDefault, zySysMgmtUncontrolledSystemReset=zySysMgmtUncontrolledSystemReset, zySysMgmtCounterReset=zySysMgmtCounterReset, zySysMgmtSysStatus=zySysMgmtSysStatus, PYSNMP_MODULE_ID=zyxelManagement, zySysMgmtBootImageInconsistence=zySysMgmtBootImageInconsistence, zySysMgmtTftpServiceServerIpAddress=zySysMgmtTftpServiceServerIpAddress, zySysMgmtTftpRemoteFileName=zySysMgmtTftpRemoteFileName, zySysMgmtControlledSystemReset=zySysMgmtControlledSystemReset, zySysMgmtTftpActionPrivilege13=zySysMgmtTftpActionPrivilege13)
