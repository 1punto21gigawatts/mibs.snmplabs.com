#
# PySNMP MIB module HM2-L2MCAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-L2MCAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
hm2ConfigurationMibs, = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PortList, dot1qVlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "dot1qVlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, IpAddress, Counter64, NotificationType, iso, Counter32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "IpAddress", "Counter64", "NotificationType", "iso", "Counter32", "MibIdentifier", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2L2McastMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 33))
hm2L2McastMib.setRevisions(('2012-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2L2McastMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2L2McastMib.setLastUpdated('201201100000Z')
if mibBuilder.loadTexts: hm2L2McastMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2L2McastMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2L2McastMib.setDescription('Hirschmann L2 Multicast MIB. Copyright (C) 2012. All Rights Reserved.')
hm2L2McastMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 0))
hm2L2McastMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1))
hm2L2McastSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 3))
hm2L2McastSnoopingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1))
hm2L2McastFilteringObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 2))
hm2L2McastSnoopingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3))
hm2L2McastSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1))
hm2L2McastSnoopingQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hm2L2McastSnoopingQuerierTable.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingQuerierTable.setDescription('A table for displaying and configuring the IGMP query ports.')
hm2L2McastSnoopingQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: hm2L2McastSnoopingQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingQuerierEntry.setDescription('A table for displaying and configuring the IGMP query ports. An entry appears in this table for all VLANs that are currently instantiated.')
hm2L2McastSnoopingQueryPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 1, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryPorts.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryPorts.setDescription('This read-only object displays the set of ports that have received IGMP query PDUs for this VLAN as determined by the snooping task.')
hm2L2McastSnoopingQueryStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryStaticPorts.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryStaticPorts.setDescription('The set of ports explicitly configured by management to be IGMP query ports for this VLAN.')
hm2L2McastSnoopingQueryPortsAutoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryPortsAutoPorts.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryPortsAutoPorts.setDescription('The set of ports that are automatically learned by LLDP protocol to be IGMP query ports for this VLAN.')
hm2L2McastSnoopingQueryPortsAutoPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryPortsAutoPortsState.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingQueryPortsAutoPortsState.setDescription('The set of ports that are allowed to be learned automatically by LLDP protocol to be IGMP query ports for this VLAN.')
hm2L2McastSnoopingForwardAllTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hm2L2McastSnoopingForwardAllTable.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingForwardAllTable.setDescription('A table containing forwarding information for each VLAN, specifying the set of ports to which forwarding of all multicasts applies, which are dynamically learnt.')
hm2L2McastSnoopingForwardAllEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: hm2L2McastSnoopingForwardAllEntry.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingForwardAllEntry.setDescription('Forwarding information for a VLAN, specifying the set of ports to which all multicasts should be forwarded, which are dynamically learnt. An entry appears in this table for all VLANs that are currently instantiated.')
hm2L2McastSnoopingForwardAllStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 1, 1, 2, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2L2McastSnoopingForwardAllStaticPorts.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingForwardAllStaticPorts.setDescription('The set of ports configured by management in this VLAN to which all dyamically learnt multicast group-addressed frames are to be forwarded.')
hm2L2McastFilteringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 2, 1))
hm2L2McastFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hm2L2McastFilteringTable.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastFilteringTable.setDescription('A table for configuring the filtering behaviour for known multicast group-addressed frames.')
hm2L2McastFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 2, 1, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: hm2L2McastFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastFilteringEntry.setDescription('A table for configuring the filtering behaviour for known multicast group-addressed frames. An entry appears in this table for all VLANs that are currently instantiated.')
hm2L2McastFilteringKnownMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("query-and-registered-ports", 1), ("registered-ports-only", 2))).clone('registered-ports-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2L2McastFilteringKnownMode.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastFilteringKnownMode.setDescription('Sets the mode how known multicast packets will be treated. The default value is registered-ports-only(2).')
hm2L2McastFilteringUnknownMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("flood", 2), ("query-ports", 3))).clone('flood')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2L2McastFilteringUnknownMode.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastFilteringUnknownMode.setDescription('Sets the mode how unknown multicast packets will be treated. The default value is flood(2).')
hm2L2McastSnoopingStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1))
hm2L2McastSnoopingIgmpReportsFramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpReportsFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpReportsFramesProcessed.setDescription('IGMP reports, joins or leaves processed by CPU. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIgmpQueriesV1FramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpQueriesV1FramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpQueriesV1FramesProcessed.setDescription('IGMP queries version 1 processed by CPU. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIgmpQueriesV2FramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpQueriesV2FramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpQueriesV2FramesProcessed.setDescription('IGMP queries version 2 processed by CPU. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIgmpQueriesV3FramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpQueriesV3FramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpQueriesV3FramesProcessed.setDescription('IGMP queries version 3 processed by CPU. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIgmpWrongVersionQueries = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpWrongVersionQueries.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIgmpWrongVersionQueries.setDescription('The number of general queries received whose IGMP version does not match the equivalent hm2AgentSwitchSnoopingQuerierVersion.')
hm2L2McastSnoopingPimDvmrpFramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingPimDvmrpFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingPimDvmrpFramesProcessed.setDescription('PIM or DVMRP frames processed by CPU. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10), )
if mibBuilder.loadTexts: hm2L2McastSnoopingStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingStatisticsTable.setDescription('A table for multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2L2McastSnoopingStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingStatisticsEntry.setDescription('A table for multicast control frames that have been processed by the CPU. An entry appears in this table for any physical interfaces.')
hm2L2McastSnoopingIntfIgmpReportsFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpReportsFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpReportsFramesProcessed.setDescription('IGMP reports, joins or leaves processed by CPU and received on the interface. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIntfIgmpQueriesV1FramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpQueriesV1FramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpQueriesV1FramesProcessed.setDescription('IGMP queries version 1 processed by CPU and received on the interface. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIntfIgmpQueriesV2FramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpQueriesV2FramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpQueriesV2FramesProcessed.setDescription('IGMP queries version 2 processed by CPU and received on the interface. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIntfIgmpQueriesV3FramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpQueriesV3FramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpQueriesV3FramesProcessed.setDescription('IGMP queries version 3 processed by CPU and received on the interface. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastSnoopingIntfIgmpWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpWrongVersionQueries.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfIgmpWrongVersionQueries.setDescription('The number of general queries received whose IGMP version does not match the equivalent hm2AgentSwitchSnoopingQuerierVersion.')
hm2L2McastSnoopingIntfPimDvmrpFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 33, 1, 3, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfPimDvmrpFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastSnoopingIntfPimDvmrpFramesProcessed.setDescription('PIM or DVMRP frames processed by CPU and received on the interface. The number of multicast control frames that have been processed by the CPU.')
hm2L2McastGroupMembershipErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 33, 3, 1))
if mibBuilder.loadTexts: hm2L2McastGroupMembershipErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2L2McastGroupMembershipErrorReturn.setDescription('Indicates that Max Response Time is greater than the Group Membership Interval')
mibBuilder.exportSymbols("HM2-L2MCAST-MIB", hm2L2McastSnoopingQueryPorts=hm2L2McastSnoopingQueryPorts, hm2L2McastSnoopingIntfIgmpQueriesV3FramesProcessed=hm2L2McastSnoopingIntfIgmpQueriesV3FramesProcessed, hm2L2McastSnoopingQueryStaticPorts=hm2L2McastSnoopingQueryStaticPorts, hm2L2McastFilteringTable=hm2L2McastFilteringTable, hm2L2McastSnoopingPimDvmrpFramesProcessed=hm2L2McastSnoopingPimDvmrpFramesProcessed, hm2L2McastSnoopingGroup=hm2L2McastSnoopingGroup, hm2L2McastFilteringObjects=hm2L2McastFilteringObjects, hm2L2McastSnoopingQueryPortsAutoPortsState=hm2L2McastSnoopingQueryPortsAutoPortsState, hm2L2McastSnoopingQuerierTable=hm2L2McastSnoopingQuerierTable, hm2L2McastFilteringEntry=hm2L2McastFilteringEntry, hm2L2McastFilteringGroup=hm2L2McastFilteringGroup, hm2L2McastSnoopingQuerierEntry=hm2L2McastSnoopingQuerierEntry, hm2L2McastSnoopingForwardAllEntry=hm2L2McastSnoopingForwardAllEntry, hm2L2McastSnoopingIgmpQueriesV1FramesProcessed=hm2L2McastSnoopingIgmpQueriesV1FramesProcessed, hm2L2McastMibObjects=hm2L2McastMibObjects, hm2L2McastSnoopingForwardAllTable=hm2L2McastSnoopingForwardAllTable, hm2L2McastSnoopingIntfIgmpQueriesV2FramesProcessed=hm2L2McastSnoopingIntfIgmpQueriesV2FramesProcessed, hm2L2McastFilteringUnknownMode=hm2L2McastFilteringUnknownMode, hm2L2McastSnoopingIgmpQueriesV2FramesProcessed=hm2L2McastSnoopingIgmpQueriesV2FramesProcessed, hm2L2McastSnoopingIntfIgmpReportsFramesProcessed=hm2L2McastSnoopingIntfIgmpReportsFramesProcessed, hm2L2McastSnoopingIgmpQueriesV3FramesProcessed=hm2L2McastSnoopingIgmpQueriesV3FramesProcessed, hm2L2McastMibNotifications=hm2L2McastMibNotifications, hm2L2McastSnoopingIntfIgmpQueriesV1FramesProcessed=hm2L2McastSnoopingIntfIgmpQueriesV1FramesProcessed, hm2L2McastSnoopingIgmpReportsFramesProcessed=hm2L2McastSnoopingIgmpReportsFramesProcessed, hm2L2McastSnoopingIntfPimDvmrpFramesProcessed=hm2L2McastSnoopingIntfPimDvmrpFramesProcessed, hm2L2McastSnoopingStatistics=hm2L2McastSnoopingStatistics, hm2L2McastSnoopingForwardAllStaticPorts=hm2L2McastSnoopingForwardAllStaticPorts, hm2L2McastMib=hm2L2McastMib, hm2L2McastSNMPExtensionGroup=hm2L2McastSNMPExtensionGroup, hm2L2McastSnoopingIgmpWrongVersionQueries=hm2L2McastSnoopingIgmpWrongVersionQueries, hm2L2McastFilteringKnownMode=hm2L2McastFilteringKnownMode, hm2L2McastSnoopingIntfIgmpWrongVersionQueries=hm2L2McastSnoopingIntfIgmpWrongVersionQueries, hm2L2McastSnoopingQueryPortsAutoPorts=hm2L2McastSnoopingQueryPortsAutoPorts, hm2L2McastSnoopingStatisticsTable=hm2L2McastSnoopingStatisticsTable, hm2L2McastSnoopingObjects=hm2L2McastSnoopingObjects, hm2L2McastSnoopingStatisticsEntry=hm2L2McastSnoopingStatisticsEntry, PYSNMP_MODULE_ID=hm2L2McastMib, hm2L2McastSnoopingStatisticsGroup=hm2L2McastSnoopingStatisticsGroup, hm2L2McastGroupMembershipErrorReturn=hm2L2McastGroupMembershipErrorReturn)
