#
# PySNMP MIB module CISCO-CIPLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CIPLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, ModuleIdentity, Counter64, iso, ObjectIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Bits, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter64", "iso", "ObjectIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Bits", "IpAddress", "NotificationType")
RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
ciscoCipLanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 34))
ciscoCipLanMIB.setRevisions(('1998-01-06 00:00', '1995-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCipLanMIB.setRevisionsDescriptions(("With the addition of Cisco's new Channel Port Adapter cards, all the references to CIP in the MIB description and object descriptions are changed to CMCC (Cisco Mainframe Channel Connection). The object names in the form of cip... or cipCard... will remain the same, but will be valid objects for the Channel Port Adapter cards.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCipLanMIB.setLastUpdated('9504280000Z')
if mibBuilder.loadTexts: ciscoCipLanMIB.setOrganization('cisco IBM engineering Working Group')
if mibBuilder.loadTexts: ciscoCipLanMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoCipLanMIB.setDescription("This is the Management Information Base (MIB) module for objects used to manage the cisco internal LAN support in Cisco Mainframe Channel Connection (CMCC) environments. 1) LAN 2) Adapter The following example configuration of a router that shows the entities managed by the CIPLAN MIB. Router A ----------------------------------------- | ------------------------------------- | | | | | | | ------------------- | | | | | Adapter | -- | | | | | 400000000401 | / \\ | | | | | ADAPNO 0 |---| Ring | | | | | ------------------- | |----| | | | | Adapter |---| 1000 | | | | | | 400000000402 | \\ / | | | | | ADAPNO 1 | -- | | | | ------------------- | | | | Token Ring | | | | LAN 0 | | | | | | | | -- | | | | ------------------- / \\ | | | | | Adapter |---| Ring | | | | | | 400000000401 | | |----| | | | | ADAPNO 3 |---| 1001 | | | | | ------------------- \\ / | | | | -- | | | | | | | | Token Ring | | | | LAN 1 | | | | | | | | | | | | ------------------- | | | | | Adapter | | | | | | | 0200000000C1 |---------------| | | | | ADAPNO 4 | | | | | | ------------------- | | | | Ethernet | | | | LAN 0 | | | | | | | | | | | | ------------------- = | | | | | Adapter | / \\ | | | | | 400000000001 |===| |=====| | | | | ADAPNO 5 | \\ / | | | | ------------------- = | | | | | | | | FDDI | | | | LAN 0 | | | | | | | | CMCC CARD 6 | | | ------------------------------------- | | | ----------------------------------------- NOTE: A special ifIndex has been created to address internal LAN objects that are on the CMCC card. Physically the CMCC card would have two ifIndex's of type `other` for each CMCC Slot/Daughter Board. The additional ifIndex is made looks like the physical with the Daughter Board being replaced with a simple integer. For example: If the CMCC is in slot/bay 6; The first daughter board would have the ifIndex of 6/0. The second daughter board would have the ifIndex of 6/1. The internal objects on this CMCC card would have the ifIndex of 6/2. The ifIndex is an INTEGER to which the values will be translated to agent specific number by the agent itself. The first table is the LAN Admin table. Each entry created in this table will represent a internal CIP LAN that will be used by MAC adapters to bridge data to and from the host. The indices of the table are: * The special ifIndex that addresses the virtual objects on a CMCC card * The LAN type (token-ring, ethernet, fddi) * The unique LAN identifier NOTE: This value is used to uniquely identify each and every LAN based on LAN type and on a single CMCC card. The fields included in this table represent: * The LAN type used as on index * The unique LAN identifier used as an index * The bridging type * For Source Route Bridging, the local ring number * For Source Route Bridging, the next bridge number * For Source Route Bridging, the target ring number * For Transparent Bridging, the bridge group * The row control variable In the example above, four entries would exist. The first entry would be: - ifIndex is created by the agent - LAN type of token ring - LAN identifier of 0 - bridging type of Source Route - local ring number 1000 - next bridge number is unknown - target ring number is unknown - transparent bridge group has no meaning The second entry would be: - ifIndex is created by the agent - LAN type of token ring - LAN identifier of 1 - bridging type of Source Route - local ring number 1001 - next bridge number is unknown - target ring number is unknown - transparent bridge group has no meaning The third entry would be: - ifIndex is created by the agent - LAN type of ethernet - LAN identifier of 0 - bridging type of transparent - local ring number has no meaning - next bridge number has no meaning - target ring number has no meaning - transparent bridge group is unknown The fourth entry would be: - ifIndex is created by the agent - LAN type of fddi - LAN identifier of 0 - bridging type of transparent - local ring number has no meaning - next bridge number has no meaning - target ring number has no meaning - transparent bridge group is unknown The last table is the CIP LAN Adapter Admin table. Each entry created in this table will represent a LAN adapter on one of the CMCC internal LAN's defined in the first table. The indices of the table are: * The special ifIndex that addresses the virtual objects on a CMCC card * The LAN type (token-ring, ethernet, fddi) * The unique LAN identifier from the first table * The unique Adapter Number for this LAN type NOTE: When multiple LANs of the same type exist, this number must be kept unique by the agent. (The LAN type is defined by the Virtual LAN Admin table.) The fields included in this table represent: * The unique Adapter Number for this LAN type as defined by the LAN Admin Entry corresponding the the first two indices in this table * The MAC Address for this Adapter; this MAC Address is unique for all Adapters define on this LAN, but does not need to be unique across LANs for redundancy * The Adapter name * The row control variable In the example above, five entries would exist. The first entry would be: - ifIndex is created by the agent - the LAN type from the first table - the LAN identifier from the first table = 0 - adapter number of 0 - Mac Address of 400000000401 - Configured Name The second entry would be: - ifIndex is created by the agent - the LAN type from the first table - the LAN identifier from the first table = 0 - adapter number of 1 - Mac Address of 400000000402 - Configured Name The first entry would be: - ifIndex is created by the agent - the LAN type from the first table - the LAN identifier from the first table = 1 - adapter number of 2 - Mac Address of 400000000401 - Configured Name The first entry would be: - ifIndex is created by the agent - the LAN type from the first table - the LAN identifier from the first table = 0 - adapter number of 3 - Mac Address of 0200000000C1 - Configured Name The first entry would be: - ifIndex is created by the agent - the LAN type from the first table - the LAN identifier from the first table = 0 - adapter number of 4 - Mac Address of 400000000001 - Configured Name ")
cipLanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 34, 1))
cipLan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1))
cipCardLanAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1), )
if mibBuilder.loadTexts: cipCardLanAdminTable.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminTable.setDescription('This table contains configuration information for the LAN feature on the CMCC card.')
cipCardLanAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CIPLAN-MIB", "cipCardLanAdminLanType"), (0, "CISCO-CIPLAN-MIB", "cipCardLanAdminLanId"))
if mibBuilder.loadTexts: cipCardLanAdminEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminEntry.setDescription('A list of CMCC LAN configuration values.')
cipCardLanAdminLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iso88023csmacd", 1), ("iso88025tokenRing", 2), ("fddi", 3))))
if mibBuilder.loadTexts: cipCardLanAdminLanType.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminLanType.setDescription('The type of Emulation applied to this CMCC LAN.')
cipCardLanAdminLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: cipCardLanAdminLanId.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminLanId.setDescription('The index value used with the ifIndex to uniquely identify a CMCC LAN. This is just an identifier and has no relationship to the bridging protocols.')
cipCardLanAdminBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparentOnly", 1), ("sourcerouteOnly", 2), ("transpAndSourceRoute", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdminBridgeType.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminBridgeType.setDescription('The bridging type supported by this CMCC LAN. The value of transparentOnly (1) is valid for all LAN types. The value of sourcerouteOnly (2) is only valid for iso88025tokenRing and fddi LAN types. The value of transpAndSourceRoute (3) is valid for all iso88025tokenRing and fddi LAN types.')
cipCardLanAdminSrbLocalRing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdminSrbLocalRing.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminSrbLocalRing.setDescription('The local Segment (Ring) number that uniquely identify this CIP LAN. This variable is only valid when cipCardLanAdminBridgeType is sourcerouteOnly (2) or transpAndSourceRoute (3).')
cipCardLanAdminSrbBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdminSrbBridgeNum.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminSrbBridgeNum.setDescription("The Bridge number that represents this routers' bridge number. This variable is only valid when cipCardLanAdminBridgeType is sourcerouteOnly (2) or transpAndSourceRoute (3).")
cipCardLanAdminSrbTargetRing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdminSrbTargetRing.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminSrbTargetRing.setDescription('The target Segment (Ring) number that is the next hop from this segment. This variable is only valid when cipCardLanAdminBridgeType is sourcerouteOnly (2) or transpAndSourceRoute (3).')
cipCardLanAdminTbBridgeGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdminTbBridgeGrp.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminTbBridgeGrp.setDescription('The transparent bridge group that this CIP LAN is a member. This variable is only valid when cipCardLanAdminBridgeType is transparentOnly (1) or transpAndSourceRoute (3).')
cipCardLanAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdminRowStatus.setDescription('This object is used by a Management Station to create or delete the row entry in the cipCardLanAdminTable following the the RowStatus textual convention.')
cipCardLanAdaptAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 2), )
if mibBuilder.loadTexts: cipCardLanAdaptAdminTable.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdaptAdminTable.setDescription('This table contains configuration information for the LAN Adapter feature on the CMCC card.')
cipCardLanAdaptAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CIPLAN-MIB", "cipCardLanAdminLanType"), (0, "CISCO-CIPLAN-MIB", "cipCardLanAdminLanId"), (0, "CISCO-CIPLAN-MIB", "cipCardLanAdaptAdminAdaptNo"))
if mibBuilder.loadTexts: cipCardLanAdaptAdminEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdaptAdminEntry.setDescription('A list of CMCC LAN Adapter configuration values.')
cipCardLanAdaptAdminAdaptNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: cipCardLanAdaptAdminAdaptNo.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdaptAdminAdaptNo.setDescription("The Adapter Number used when creating a CMCC LAN Adapter. This value is given by the instance value when this row is being created. This number corresponds to the 'ADAPNO' value used VTAM XCA node definition. This number uniquely identify this Adapter from all other Adapters for the LAN type, which is identified in the associated CMCC LAN Adapter Table.")
cipCardLanAdaptAdminMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdaptAdminMacAddress.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdaptAdminMacAddress.setDescription("The Adapter MAC Address is assigned by the router administrator. It is a unique number used by protocols to address this Adapter on the CMCC LAN identified by the second index (cipCardLanAdminLanId). NOTE: In order to have duplicate MAC Addresses, they must be on different Source Route Bridge LAN's.")
cipCardLanAdaptAdminAdaptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdaptAdminAdaptName.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdaptAdminAdaptName.setDescription('This name is assigned by the router administrator and must be unique per router. Every interface of the router can be named by the router administrator. This object provides a means of naming the CMCC LAN adapter interfaces. The Adapter Name is used in the Hierarchy Resource List when creating a Systems Network Architecture Generic Alert for the purpose of identify the CMCC LAN adapter which generated the alert.')
cipCardLanAdaptAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 34, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardLanAdaptAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipCardLanAdaptAdminRowStatus.setDescription('This object is used by a Management Station to create or delete the row entry in the cipCardCsnaAdminTable following the the RowStatus textual convention.')
ciscoCipLanMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 34, 2))
ciscoCipLanMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 34, 2, 1))
ciscoCipLanMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 34, 2, 2))
ciscoCipLanMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 34, 2, 1, 1)).setObjects(("CISCO-CIPLAN-MIB", "ciscoLanGroup"), ("CISCO-CIPLAN-MIB", "ciscoLanAdaptGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipLanMibCompliance = ciscoCipLanMibCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCipLanMibCompliance.setDescription('The compliance statement for the CMCC LAN Support.')
ciscoLanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 34, 2, 2, 1)).setObjects(("CISCO-CIPLAN-MIB", "cipCardLanAdminBridgeType"), ("CISCO-CIPLAN-MIB", "cipCardLanAdminSrbLocalRing"), ("CISCO-CIPLAN-MIB", "cipCardLanAdminSrbBridgeNum"), ("CISCO-CIPLAN-MIB", "cipCardLanAdminSrbTargetRing"), ("CISCO-CIPLAN-MIB", "cipCardLanAdminTbBridgeGrp"), ("CISCO-CIPLAN-MIB", "cipCardLanAdminRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLanGroup = ciscoLanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLanGroup.setDescription('A collection of objects providing CMCC LAN Administration.')
ciscoLanAdaptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 34, 2, 2, 2)).setObjects(("CISCO-CIPLAN-MIB", "cipCardLanAdaptAdminMacAddress"), ("CISCO-CIPLAN-MIB", "cipCardLanAdaptAdminAdaptName"), ("CISCO-CIPLAN-MIB", "cipCardLanAdaptAdminRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLanAdaptGroup = ciscoLanAdaptGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLanAdaptGroup.setDescription('A collection of objects providing CMCC LAN Adapter Administration.')
mibBuilder.exportSymbols("CISCO-CIPLAN-MIB", cipCardLanAdaptAdminMacAddress=cipCardLanAdaptAdminMacAddress, cipCardLanAdminLanId=cipCardLanAdminLanId, ciscoCipLanMibCompliances=ciscoCipLanMibCompliances, cipCardLanAdminSrbTargetRing=cipCardLanAdminSrbTargetRing, cipCardLanAdminTbBridgeGrp=cipCardLanAdminTbBridgeGrp, ciscoLanAdaptGroup=ciscoLanAdaptGroup, cipLan=cipLan, cipCardLanAdminLanType=cipCardLanAdminLanType, cipCardLanAdminRowStatus=cipCardLanAdminRowStatus, cipCardLanAdaptAdminAdaptNo=cipCardLanAdaptAdminAdaptNo, cipCardLanAdminSrbBridgeNum=cipCardLanAdminSrbBridgeNum, cipCardLanAdaptAdminTable=cipCardLanAdaptAdminTable, cipCardLanAdaptAdminEntry=cipCardLanAdaptAdminEntry, cipLanObjects=cipLanObjects, ciscoCipLanMibCompliance=ciscoCipLanMibCompliance, cipCardLanAdminTable=cipCardLanAdminTable, ciscoCipLanMibConformance=ciscoCipLanMibConformance, PYSNMP_MODULE_ID=ciscoCipLanMIB, cipCardLanAdminEntry=cipCardLanAdminEntry, cipCardLanAdaptAdminAdaptName=cipCardLanAdaptAdminAdaptName, ciscoLanGroup=ciscoLanGroup, ciscoCipLanMIB=ciscoCipLanMIB, ciscoCipLanMibGroups=ciscoCipLanMibGroups, cipCardLanAdaptAdminRowStatus=cipCardLanAdaptAdminRowStatus, cipCardLanAdminBridgeType=cipCardLanAdminBridgeType, cipCardLanAdminSrbLocalRing=cipCardLanAdminSrbLocalRing)
