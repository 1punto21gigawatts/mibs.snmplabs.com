#
# PySNMP MIB module NETBOTZ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETBOTZ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter64, Gauge32, Bits, Integer32, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Counter32, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "Gauge32", "Bits", "Integer32", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Counter32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netBotz = MibIdentifier((1, 3, 6, 1, 4, 1, 5528))
netBotz_reg = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 10)).setLabel("netBotz-reg")
netBotz_generic = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 20)).setLabel("netBotz-generic")
netBotz_products = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30)).setLabel("netBotz-products")
netBotz_metric = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 32)).setLabel("netBotz-metric")
netBotz_snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 40)).setLabel("netBotz-snmp")
netBotz_device = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 50)).setLabel("netBotz-device")
netBotz_addonapp = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 60)).setLabel("netBotz-addonapp")
netBotz_addonapp_trap = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 61)).setLabel("netBotz-addonapp-trap")
vendor_netBotz = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 60, 5528)).setLabel("vendor-netBotz")
device_crawlers_trap = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2)).setLabel("device-crawlers-trap")
branch_checker_trap = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 3)).setLabel("branch-checker-trap")
device_crawlers_trap_attrib = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 61, 2)).setLabel("device-crawlers-trap-attrib")
branch_checker_trap_attrib = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 61, 3)).setLabel("branch-checker-trap-attrib")
device_crawlers_trap_target_index = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 60, 2)).setLabel("device-crawlers-trap-target-index")
branch_checker_trap_target_index = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 60, 3)).setLabel("branch-checker-trap-target-index")
netBotz_prd_bot = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 10)).setLabel("netBotz-prd-bot")
netBotz_metric_onboard = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 32, 10)).setLabel("netBotz-metric-onboard")
netBotz_prd_crawlers = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 20)).setLabel("netBotz-prd-crawlers")
netBotz_prd_crltrap = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 21)).setLabel("netBotz-prd-crltrap")
netBotz_prd_WallBotz_300 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1000)).setLabel("netBotz-prd-WallBotz-300")
netBotz_prd_RackBotz_300 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1001)).setLabel("netBotz-prd-RackBotz-300")
netBotz_prd_RackBotz_300U = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1002)).setLabel("netBotz-prd-RackBotz-300U")
netBotz_prd_WallBotz_400 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1003)).setLabel("netBotz-prd-WallBotz-400")
netBotz_prd_RackBotz_400 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1004)).setLabel("netBotz-prd-RackBotz-400")
netBotz_prd_RackBotz_303 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1006)).setLabel("netBotz-prd-RackBotz-303")
netBotz_prd_WallBotz_310 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1007)).setLabel("netBotz-prd-WallBotz-310")
netBotz_prd_RackBotz_310 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1008)).setLabel("netBotz-prd-RackBotz-310")
netBotz_prd_WallBotz_300B = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1009)).setLabel("netBotz-prd-WallBotz-300B")
netBotz_prd_WallBotz_300C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1100)).setLabel("netBotz-prd-WallBotz-300C")
netBotz_prd_RackBotz_300C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1101)).setLabel("netBotz-prd-RackBotz-300C")
netBotz_prd_RackBotz_300UC = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1102)).setLabel("netBotz-prd-RackBotz-300UC")
netBotz_prd_WallBotz_400C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1103)).setLabel("netBotz-prd-WallBotz-400C")
netBotz_prd_RackBotz_400C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1104)).setLabel("netBotz-prd-RackBotz-400C")
netBotz_prd_RackBotz_303C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1106)).setLabel("netBotz-prd-RackBotz-303C")
netBotz_prd_WallBotz_310C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1107)).setLabel("netBotz-prd-WallBotz-310C")
netBotz_prd_RackBotz_310C = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1108)).setLabel("netBotz-prd-RackBotz-310C")
netBotz_prd_WallBotz_300BC = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1109)).setLabel("netBotz-prd-WallBotz-300BC")
netBotz_prd_WallBotz_300E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1200)).setLabel("netBotz-prd-WallBotz-300E")
netBotz_prd_RackBotz_300E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1201)).setLabel("netBotz-prd-RackBotz-300E")
netBotz_prd_RackBotz_300UE = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1202)).setLabel("netBotz-prd-RackBotz-300UE")
netBotz_prd_WallBotz_400E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1203)).setLabel("netBotz-prd-WallBotz-400E")
netBotz_prd_RackBotz_400E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1204)).setLabel("netBotz-prd-RackBotz-400E")
netBotz_prd_RackBotz_303E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1206)).setLabel("netBotz-prd-RackBotz-303E")
netBotz_prd_WallBotz_310E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1207)).setLabel("netBotz-prd-WallBotz-310E")
netBotz_prd_RackBotz_310E = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1208)).setLabel("netBotz-prd-RackBotz-310E")
netBotz_prd_WallBotz_300BE = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 1209)).setLabel("netBotz-prd-WallBotz-300BE")
netBotz_dev_host = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 1), DisplayString()).setLabel("netBotz-dev-host").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_host.setReference('NetBotz Host')
if mibBuilder.loadTexts: netBotz_dev_host.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_host.setDescription("NetBotz device's host name.")
netBotz_dev_domain = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 2), DisplayString()).setLabel("netBotz-dev-domain").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_domain.setReference('NetBotz Domain')
if mibBuilder.loadTexts: netBotz_dev_domain.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_domain.setDescription("NetBotz device's default DNS domain.")
netBotz_dev_ip = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 3), IpAddress()).setLabel("netBotz-dev-ip").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_ip.setReference('NetBotz IP address')
if mibBuilder.loadTexts: netBotz_dev_ip.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_ip.setDescription("NetBotz device's IP address.")
netBotz_dev_netmask = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 4), IpAddress()).setLabel("netBotz-dev-netmask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_netmask.setReference('NetBotz Device Netmask')
if mibBuilder.loadTexts: netBotz_dev_netmask.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_netmask.setDescription("NetBotz device's netmask.")
netBotz_dev_gateway = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 5), IpAddress()).setLabel("netBotz-dev-gateway").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_gateway.setReference('NetBotz Device Gateway')
if mibBuilder.loadTexts: netBotz_dev_gateway.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_gateway.setDescription("NetBotz device's default gateway/router. 0.0.0.0 if not defined.")
netBotz_dev_primarydns = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 6), IpAddress()).setLabel("netBotz-dev-primarydns").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_primarydns.setReference('Primary DNS')
if mibBuilder.loadTexts: netBotz_dev_primarydns.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_primarydns.setDescription('Primary Domain Name Server. 0.0.0.0 if not defined.')
netBotz_dev_secondarydns = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 7), IpAddress()).setLabel("netBotz-dev-secondarydns").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_secondarydns.setReference('Secondary DNS')
if mibBuilder.loadTexts: netBotz_dev_secondarydns.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_secondarydns.setDescription('Secondary Domain Name Server. 0.0.0.0 if not defined.')
netBotz_dev_smtp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 8), DisplayString()).setLabel("netBotz-dev-smtp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_smtp.setReference('SMTP')
if mibBuilder.loadTexts: netBotz_dev_smtp.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_smtp.setDescription('SMTP server address. This is the mail server used for sending alert e-mails.')
netBotz_dev_smtpport = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 9), Integer32()).setLabel("netBotz-dev-smtpport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_smtpport.setReference('SMTP Port')
if mibBuilder.loadTexts: netBotz_dev_smtpport.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_smtpport.setDescription('SMTP port. Port number of SMTP server used for sending alert e-mails.')
netBotz_dev_popport = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 10), Integer32()).setLabel("netBotz-dev-popport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_popport.setReference('POP Port')
if mibBuilder.loadTexts: netBotz_dev_popport.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_popport.setDescription('POP port. Currently, not used.')
netBotz_dev_loglevel = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 11), Integer32()).setLabel("netBotz-dev-loglevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_loglevel.setReference('Log Level')
if mibBuilder.loadTexts: netBotz_dev_loglevel.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_loglevel.setDescription('This field contains the log level of the NetBotz device. Log messages will be filtered, so that only same or lower-level messages will be passed. The default log level is 5, for warnings and lower levels. The log levels are the following: 1 - emergency 2 - alert 3 - critical 4 - error 5 - warning 6 - notice 7 - info 8 - trace')
netBotz_dev_primaryemail = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 14), DisplayString()).setLabel("netBotz-dev-primaryemail").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_primaryemail.setReference('Primary Email')
if mibBuilder.loadTexts: netBotz_dev_primaryemail.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_primaryemail.setDescription('The primary email addresses for alerts and messages (list separated by commas for multiple addresses).')
netBotz_dev_secondaryemail = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 15), DisplayString()).setLabel("netBotz-dev-secondaryemail").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_secondaryemail.setReference('Secondary Email')
if mibBuilder.loadTexts: netBotz_dev_secondaryemail.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_secondaryemail.setDescription('The secondary email address for alerts and messages (list separated by commas for multiple addresses).')
netBotz_dev_serialno = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 17), DisplayString()).setLabel("netBotz-dev-serialno").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_dev_serialno.setReference('Serial Number')
if mibBuilder.loadTexts: netBotz_dev_serialno.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_serialno.setDescription('The serial number of the NetBotz device.')
netBotz_dev_pop = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 18), DisplayString()).setLabel("netBotz-dev-pop").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_pop.setReference('POP')
if mibBuilder.loadTexts: netBotz_dev_pop.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_pop.setDescription('POP server name. Currently, not used.')
netBotz_dev_version = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 19), DisplayString()).setLabel("netBotz-dev-version").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_dev_version.setReference('Firmware Version')
if mibBuilder.loadTexts: netBotz_dev_version.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_version.setDescription('The current NetBotz device firmware version.')
netBotz_dev_registered = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 20), Integer32()).setLabel("netBotz-dev-registered").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_dev_registered.setReference('Device Registered')
if mibBuilder.loadTexts: netBotz_dev_registered.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_registered.setDescription('Indicates if the device has been registered with NetBotz, Inc. 1=registered, 0=not registered.')
netBotz_default_applet = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 21), Integer32()).setLabel("netBotz-default-applet").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_default_applet.setReference('Default Applet')
if mibBuilder.loadTexts: netBotz_default_applet.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_default_applet.setDescription('Setting to control if default web page should launch applet by default(1) or the HTML status page(0).')
netBotz_guibar_color = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 22), Integer32()).setLabel("netBotz-guibar-color").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_guibar_color.setReference('GUI Bar Color')
if mibBuilder.loadTexts: netBotz_guibar_color.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_guibar_color.setDescription('Setting for color of GUI bar (RGB). Value = 0xRRGGBB.')
netBotz_locale = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 23), DisplayString()).setLabel("netBotz-locale").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_locale.setReference('Locale')
if mibBuilder.loadTexts: netBotz_locale.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_locale.setDescription('The locale ID of the NetBotz device. Format is ISO 639 language (lower case), an underscore, and ISO 3166 country (upper case). Some locales are just the ISO 639 language code.')
netBotz_timezone = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 24), DisplayString()).setLabel("netBotz-timezone").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_timezone.setReference('TimeZone')
if mibBuilder.loadTexts: netBotz_timezone.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_timezone.setDescription('The timezone ID of the NetBotz device.')
netBotz_24hourpreferred = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 25), Integer32()).setLabel("netBotz-24hourpreferred").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_24hourpreferred.setReference('24 hour format')
if mibBuilder.loadTexts: netBotz_24hourpreferred.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_24hourpreferred.setDescription('Indicates if 24-hour(1) versus 12-hour(0) time format is preferred.')
netBotz_utc_clock = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 26), Integer32()).setLabel("netBotz-utc-clock").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_utc_clock.setReference('UTC Clock')
if mibBuilder.loadTexts: netBotz_utc_clock.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_utc_clock.setDescription('Current time of clock on NetBotz device, in UTC seconds (seconds since 1/1/1970 12:00am GMT).')
netBotz_ismetric = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 27), Integer32()).setLabel("netBotz-ismetric").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_ismetric.setReference('Metric Units')
if mibBuilder.loadTexts: netBotz_ismetric.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_ismetric.setDescription('Units are metric (1) or U.S. (0). Applies to temperature and airflow rate.')
netBotz_alert_url = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 28), DisplayString()).setLabel("netBotz-alert-url").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_url.setReference('Alert URL')
if mibBuilder.loadTexts: netBotz_alert_url.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_url.setDescription('The URL, if defined, to which non-picture alerts are HTTP POSTed')
netBotz_picture_alert_url = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 29), DisplayString()).setLabel("netBotz-picture-alert-url").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_picture_alert_url.setReference('Picture Alert URL')
if mibBuilder.loadTexts: netBotz_picture_alert_url.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_picture_alert_url.setDescription('The URL, if defined, to which picture alerts are HTTP POSTed, using multipart/form-data encoding.')
netBotz_sensor_data_url = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 30), DisplayString()).setLabel("netBotz-sensor-data-url").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url.setReference('Sensor Data URL')
if mibBuilder.loadTexts: netBotz_sensor_data_url.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url.setDescription('The URL, if defined, to which sensor data is periodically HTTP POSTed.')
netBotz_alert_url_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 31), DisplayString()).setLabel("netBotz-alert-url-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_url_logon.setReference('Alert URL Logon')
if mibBuilder.loadTexts: netBotz_alert_url_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_url_logon.setDescription('The user ID and password, if defined, used for POSTing non-picture alerts. Field is write-only, and formatted /')
netBotz_picture_alert_url_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 32), DisplayString()).setLabel("netBotz-picture-alert-url-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_picture_alert_url_logon.setReference('Picture Alert URL Logon')
if mibBuilder.loadTexts: netBotz_picture_alert_url_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_picture_alert_url_logon.setDescription('The user ID and password, if defined, used for POSTing picture alerts. Field is write-only, and formatted /')
netBotz_sensor_data_url_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 33), DisplayString()).setLabel("netBotz-sensor-data-url-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url_logon.setReference('Sensor Data URL Logon')
if mibBuilder.loadTexts: netBotz_sensor_data_url_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url_logon.setDescription('The user ID and password, if defined, used for POSTing sensor data. Field is write-only, and formatted /')
netBotz_sensor_data_url_period = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 34), Integer32()).setLabel("netBotz-sensor-data-url-period").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url_period.setReference('Sensor Data URL Period')
if mibBuilder.loadTexts: netBotz_sensor_data_url_period.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url_period.setDescription('Default number of minutes between periodic sensor data HTTP POSTs.')
netBotz_sensor_data_url_flags = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 35), Integer32()).setLabel("netBotz-sensor-data-url-flags").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url_flags.setReference('Sensor Data URL Flags')
if mibBuilder.loadTexts: netBotz_sensor_data_url_flags.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url_flags.setDescription('Option flags for data POSTs of sensor data. Bit 0=1 if current picture should be included. Bits 1-31 are reserved.')
netBotz_dev_backup_smtp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 36), DisplayString()).setLabel("netBotz-dev-backup-smtp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_backup_smtp.setReference('Backup SMTP')
if mibBuilder.loadTexts: netBotz_dev_backup_smtp.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_backup_smtp.setDescription('Backup SMTP server address. This is the backup mail server used for sending alert e-mails.')
netBotz_dev_tertiarydns = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 37), IpAddress()).setLabel("netBotz-dev-tertiarydns").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_tertiarydns.setReference('Tertiary DNS')
if mibBuilder.loadTexts: netBotz_dev_tertiarydns.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_tertiarydns.setDescription('Tertiary Domain Name Server. 0.0.0.0 if not defined.')
netBotz_dev_ntp_server = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 38), DisplayString()).setLabel("netBotz-dev-ntp-server").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_ntp_server.setReference('NTP Server')
if mibBuilder.loadTexts: netBotz_dev_ntp_server.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_ntp_server.setDescription('NTP (Network Time Protocol) Server configured for appliance.')
netBotz_dev_ntp_period = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 39), Integer32()).setLabel("netBotz-dev-ntp-period").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_ntp_period.setReference('NTP refresh period')
if mibBuilder.loadTexts: netBotz_dev_ntp_period.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_ntp_period.setDescription('Hours between automatic refreshes of the appliance clock using the NTP server.')
netBotz_dev_socks_server = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 40), DisplayString()).setLabel("netBotz-dev-socks-server").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_socks_server.setReference('Socks V4/V5 Proxy Server')
if mibBuilder.loadTexts: netBotz_dev_socks_server.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_socks_server.setDescription('Socks V4 or V5 proxy server configured for appliance.')
netBotz_dev_socks_portnum = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 41), Integer32()).setLabel("netBotz-dev-socks-portnum").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_socks_portnum.setReference('Socks V4/V5 Proxy Port')
if mibBuilder.loadTexts: netBotz_dev_socks_portnum.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_socks_portnum.setDescription('Port number of Socks Proxy.')
netBotz_dev_socks_user_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 42), DisplayString()).setLabel("netBotz-dev-socks-user-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_socks_user_id.setReference('Socks V4/V5 Proxy Server User ID')
if mibBuilder.loadTexts: netBotz_dev_socks_user_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_socks_user_id.setDescription('User ID for Socks V4 or V5 proxy server configured for appliance.')
netBotz_dev_socks_password = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 43), DisplayString()).setLabel("netBotz-dev-socks-password").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_socks_password.setReference('Socks V4/V5 Proxy Server Password')
if mibBuilder.loadTexts: netBotz_dev_socks_password.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_socks_password.setDescription('Password for Socks V4 or V5 proxy server configured for appliance.')
netBotz_alert_ftp_site = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 44), DisplayString()).setLabel("netBotz-alert-ftp-site").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_ftp_site.setReference('Alert FTP Site')
if mibBuilder.loadTexts: netBotz_alert_ftp_site.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_ftp_site.setDescription('The hostname or dotted-decimal IP address of the FTP server to deliver alerts to')
netBotz_alert_ftp_path = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 45), DisplayString()).setLabel("netBotz-alert-ftp-path").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_ftp_path.setReference('Alert FTP Path')
if mibBuilder.loadTexts: netBotz_alert_ftp_path.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_ftp_path.setDescription('The directory on the FTP server to store alerts in.')
netBotz_alert_ftp_filename = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 46), DisplayString()).setLabel("netBotz-alert-ftp-filename").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_ftp_filename.setReference('Alert FTP Filename')
if mibBuilder.loadTexts: netBotz_alert_ftp_filename.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_ftp_filename.setDescription('The base filename for the files on the FTP server to store alerts in.')
netBotz_alert_ftp_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 47), DisplayString()).setLabel("netBotz-alert-ftp-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_ftp_logon.setReference('Alert FTP Logon')
if mibBuilder.loadTexts: netBotz_alert_ftp_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_ftp_logon.setDescription('The user-id and password on the FTP server to store alerts in. Field is write-only, and formatted /')
netBotz_sensor_ftp_site = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 48), DisplayString()).setLabel("netBotz-sensor-ftp-site").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_ftp_site.setReference('Sensor FTP Site')
if mibBuilder.loadTexts: netBotz_sensor_ftp_site.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_ftp_site.setDescription('The hostname or dotted-decimal IP address of the FTP server to deliver periodic sensor reports to')
netBotz_sensor_ftp_path = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 49), DisplayString()).setLabel("netBotz-sensor-ftp-path").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_ftp_path.setReference('Sensor FTP Path')
if mibBuilder.loadTexts: netBotz_sensor_ftp_path.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_ftp_path.setDescription('The directory on the FTP server to store periodic sensor reports in.')
netBotz_sensor_ftp_filename = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 50), DisplayString()).setLabel("netBotz-sensor-ftp-filename").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_ftp_filename.setReference('Sensor FTP Filename')
if mibBuilder.loadTexts: netBotz_sensor_ftp_filename.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_ftp_filename.setDescription('The base filename for the files on the FTP server to store periodic sensor reports in.')
netBotz_sensor_ftp_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 51), DisplayString()).setLabel("netBotz-sensor-ftp-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_ftp_logon.setReference('Sensor FTP Logon')
if mibBuilder.loadTexts: netBotz_sensor_ftp_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_ftp_logon.setDescription('The user-id and password on the FTP server to store sensor reports in. Field is write-only, and formatted /')
netBotz_sensor_ftp_period = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 52), Integer32()).setLabel("netBotz-sensor-ftp-period").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_ftp_period.setReference('Sensor FTP Period')
if mibBuilder.loadTexts: netBotz_sensor_ftp_period.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_ftp_period.setDescription('The period, in minutes, between delivery of sensor data reports.')
netBotz_use_syslog = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 53), Integer32()).setLabel("netBotz-use-syslog").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_use_syslog.setReference('Syslog enable')
if mibBuilder.loadTexts: netBotz_use_syslog.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_use_syslog.setDescription('Enable syslog')
netBotz_syslog_address = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 54), DisplayString()).setLabel("netBotz-syslog-address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_syslog_address.setReference('Syslog Host Address')
if mibBuilder.loadTexts: netBotz_syslog_address.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_syslog_address.setDescription('Host address to use for syslogging')
netBotz_syslog_facility = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 55), Integer32()).setLabel("netBotz-syslog-facility").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_syslog_facility.setReference('Syslog facility code')
if mibBuilder.loadTexts: netBotz_syslog_facility.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_syslog_facility.setDescription('Syslog facility code')
netBotz_color_balance = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 56), DisplayString()).setLabel("netBotz-color-balance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_color_balance.setReference('Color Balance')
if mibBuilder.loadTexts: netBotz_color_balance.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_color_balance.setDescription('Color balance for color camera. AUTO=automatic, FLUOR=fluorescent, DAY=daylight, INCAND=incandescent, x/y=Custom (scale red by x/64, scale blue by y/64)')
netBotz_metric_onboard_model = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 1), DisplayString()).setLabel("netBotz-metric-onboard-model").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_model.setReference('NetBotz Metric Model')
if mibBuilder.loadTexts: netBotz_metric_onboard_model.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_model.setDescription('The model description of the appliance.')
netBotz_metric_onboard_temp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 2), Integer32()).setLabel("netBotz-metric-onboard-temp").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_temp.setReference('NetBotz Metric Temperature Probe')
if mibBuilder.loadTexts: netBotz_metric_onboard_temp.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_temp.setDescription('The reading of the built-in temperature probe, in tenths of a degree C.')
netBotz_metric_onboard_humidity = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 3), Integer32()).setLabel("netBotz-metric-onboard-humidity").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity.setReference('NetBotz Metric Humidity Probe')
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity.setDescription('The reading of the built-in humidity probe, in percent.')
netBotz_metric_onboard_airflow = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 4), Integer32()).setLabel("netBotz-metric-onboard-airflow").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow.setReference('NetBotz Metric Airflow Probe')
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow.setDescription('The reading of the built-in airflow probe, in meters/minute.')
netBotz_metric_onboard_audio = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 5), Integer32()).setLabel("netBotz-metric-onboard-audio").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_audio.setReference('NetBotz Metric Audio Probe')
if mibBuilder.loadTexts: netBotz_metric_onboard_audio.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_audio.setDescription('The reading of the built-in audio alarm probe on/off.')
netBotz_metric_onboard_doorajar = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 6), Integer32()).setLabel("netBotz-metric-onboard-doorajar").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_doorajar.setReference('NetBotz Metric Door Switch Probe')
if mibBuilder.loadTexts: netBotz_metric_onboard_doorajar.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_doorajar.setDescription('The reading of the door switch probe open(1) or closed(0).')
netBotz_metric_onboard_temp_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 7), Integer32()).setLabel("netBotz-metric-onboard-temp-min").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_temp_min.setReference('NetBotz Metric Temperature Probe Minimum')
if mibBuilder.loadTexts: netBotz_metric_onboard_temp_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_temp_min.setDescription('The temperature probe minimum, from 1 to 50 degrees C in tenths of a degree C.')
netBotz_metric_onboard_temp_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 8), Integer32()).setLabel("netBotz-metric-onboard-temp-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_temp_max.setReference('NetBotz Metric Temperature Probe Maximum')
if mibBuilder.loadTexts: netBotz_metric_onboard_temp_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_temp_max.setDescription('The temperature probe maximum, from 1 to 50 degrees C in tenths of a degree C.')
netBotz_metric_onboard_humidity_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 9), Integer32()).setLabel("netBotz-metric-onboard-humidity-min").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity_min.setReference('NetBotz Metric Humidity Probe Minimum')
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity_min.setDescription('The humidity probe minimum, from 10 to 90 percent.')
netBotz_metric_onboard_humidity_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 10), Integer32()).setLabel("netBotz-metric-onboard-humidity-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity_max.setReference('NetBotz Metric Humidity Probe Maximum')
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_humidity_max.setDescription('The humidity probe maximum, from 10 to 90 percent.')
netBotz_metric_onboard_airflow_mins = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 11), Integer32()).setLabel("netBotz-metric-onboard-airflow-mins").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow_mins.setReference('NetBotz Metric Airflow Minutes')
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow_mins.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow_mins.setDescription('Minutes without airflow before alarm set.')
netBotz_metric_onboard_audio_secs = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 12), Integer32()).setLabel("netBotz-metric-onboard-audio-secs").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_audio_secs.setReference('NetBotz Metric Audio Seconds')
if mibBuilder.loadTexts: netBotz_metric_onboard_audio_secs.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_audio_secs.setDescription('Seconds of alarm audio before alarm set.')
netBotz_metric_onboard_switch_state = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 13), Integer32()).setLabel("netBotz-metric-onboard-switch-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_switch_state.setReference('NetBotz Metric Switch state setting')
if mibBuilder.loadTexts: netBotz_metric_onboard_switch_state.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_switch_state.setDescription('Switch state setting. The state controls which condition of the door switch indicates an alarm. If set to 0, alarm is set when the switch is closed. If set to 1, alarm is set when the switch is open.')
netBotz_metric_onboard_audio_level = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 14), Integer32()).setLabel("netBotz-metric-onboard-audio-level").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_audio_level.setReference('NetBotz Metric Audio Level')
if mibBuilder.loadTexts: netBotz_metric_onboard_audio_level.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_audio_level.setDescription('Audio level setting, this is the relative audio level, from 0-11, above which an alarm will be sent.')
netBotz_metric_onboard_airflow_level = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 15), Integer32()).setLabel("netBotz-metric-onboard-airflow-level").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow_level.setReference('NetBotz Metric Airflow Level')
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow_level.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_airflow_level.setDescription('Airflow alert level. This is the level, in meters per second, below which an alarm will be sent.')
netBotz_metric_onboard_cam_motion = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 16), Integer32()).setLabel("netBotz-metric-onboard-cam-motion").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_cam_motion.setReference('NetBotz Metric Camera Motion')
if mibBuilder.loadTexts: netBotz_metric_onboard_cam_motion.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_cam_motion.setDescription('The current motion reading for the camera motion sensor (0=none, 1=motion detected, -1=not licensed).')
netBotz_metric_onboard_cam_motion_sensitivity = MibScalar((1, 3, 6, 1, 4, 1, 5528, 32, 10, 17), Integer32()).setLabel("netBotz-metric-onboard-cam-motion-sensitivity").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_metric_onboard_cam_motion_sensitivity.setReference('NetBotz Metric Camera Motion Sensor Sensitivity')
if mibBuilder.loadTexts: netBotz_metric_onboard_cam_motion_sensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_metric_onboard_cam_motion_sensitivity.setDescription('Camera motion sensor sensitivity: 1=max, 15=min, 0=disabled.')
netBotz_prd_bot_temp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 1), Integer32()).setLabel("netBotz-prd-bot-temp").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_temp.setReference('NetBotz Temperature Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_temp.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp.setDescription('The reading of the temperature probe, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_humidity = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 2), Integer32()).setLabel("netBotz-prd-bot-humidity").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_humidity.setReference('NetBotz Humidity Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity.setDescription('The reading of the humidity probe, in percent.')
netBotz_prd_bot_airflow = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 3), Integer32()).setLabel("netBotz-prd-bot-airflow").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_airflow.setReference('NetBotz Airflow Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow.setDescription('The reading of the airflow probe. Each unit represents approximately 40 feet/minute or 13 meters/minute of airflow velocity.')
netBotz_prd_bot_audio = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 4), Integer32()).setLabel("netBotz-prd-bot-audio").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_audio.setReference('NetBotz Audio Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_audio.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio.setDescription('The reading of the audio alarm probe on/off.')
netBotz_prd_bot_doorajar = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 5), Integer32()).setLabel("netBotz-prd-bot-doorajar").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_doorajar.setReference('NetBotz Door Switch Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_doorajar.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_doorajar.setDescription('The reading of the door switch probe open(1) or closed(0).')
netBotz_prd_bot_temp_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 6), Integer32()).setLabel("netBotz-prd-bot-temp-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_temp_min.setReference('NetBotz Temperature Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_min.setDescription('The temperature probe minimum, from 35 to 120 degrees F, or 1 to 50 degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_temp_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 7), Integer32()).setLabel("netBotz-prd-bot-temp-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_temp_max.setReference('NetBotz Temperature Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_max.setDescription('The temperature probe maximum, from 35 to 120 degrees F, or 1 to 50 degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_humidity_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 8), Integer32()).setLabel("netBotz-prd-bot-humidity-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_min.setReference('NetBotz Humidity Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_min.setDescription('The humidity probe minimum, from 10 to 90 percent.')
netBotz_prd_bot_humidity_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 9), Integer32()).setLabel("netBotz-prd-bot-humidity-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_max.setReference('NetBotz Humidity Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_max.setDescription('The humidity probe maximum, from 10 to 90 percent.')
netBotz_prd_bot_airflow_mins = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 10), Integer32()).setLabel("netBotz-prd-bot-airflow-mins").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_mins.setReference('NetBotz|Airflow minutes')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_mins.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_mins.setDescription('Minutes without airflow before alarm set.')
netBotz_prd_bot_audio_secs = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 11), Integer32()).setLabel("netBotz-prd-bot-audio-secs").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_audio_secs.setReference('NetBotz|Audio seconds')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_secs.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_secs.setDescription('Seconds of alarm audio before alarm set.')
netBotz_prd_bot_temp_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 12), Integer32()).setLabel("netBotz-prd-bot-temp-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_temp_enabled.setReference('NetBotz|Temperature Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_enabled.setDescription('Temperature probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_hum_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 13), Integer32()).setLabel("netBotz-prd-bot-hum-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_hum_enabled.setReference('NetBotz|Humidity Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_hum_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_hum_enabled.setDescription('Humidity probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_air_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 14), Integer32()).setLabel("netBotz-prd-bot-air-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_air_enabled.setReference('NetBotz|Airflow Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_air_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_air_enabled.setDescription('Airflow probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_audio_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 15), Integer32()).setLabel("netBotz-prd-bot-audio-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_audio_enabled.setReference('NetBotz|Audio Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_enabled.setDescription('Audio probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_switch_state = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 16), Integer32()).setLabel("netBotz-prd-bot-switch-state").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_switch_state.setReference('NetBotz|Switch state setting')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_state.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_state.setDescription('Switch state setting. The state controls which condition of the door switch indicates an alarm. If set to 0, alarm is set when the switch is closed. If set to 1, alarm is set when the switch is open.')
netBotz_prd_bot_switch_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 17), Integer32()).setLabel("netBotz-prd-bot-switch-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_switch_enabled.setReference('NetBotz|Door Switch Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_enabled.setDescription('Door switch enabled(1) or disabled(0).')
netBotz_prd_bot_audio_level = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 18), Integer32()).setLabel("netBotz-prd-bot-audio-level").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_audio_level.setReference('NetBotz|Audio Level')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_level.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_level.setDescription('Audio level setting. This is the relative audio level, from 0-11, above which an alarm will be sent.')
netBotz_prd_bot_trap_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 20), Integer32()).setLabel("netBotz-prd-bot-trap-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_index.setReference('NetBotz Last Trap Index')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_index.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_index.setDescription('The crawler ID of the last trap.')
netBotz_prd_bot_trap_address = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 21), IpAddress()).setLabel("netBotz-prd-bot-trap-address").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_address.setReference('NetBotz Last Trap Address')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_address.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_address.setDescription('The IP address of the last trap.')
netBotz_prd_bot_trap_oid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 22), ObjectIdentifier()).setLabel("netBotz-prd-bot-trap-oid").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_oid.setReference('NetBotz Last Trap OID')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_oid.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_oid.setDescription('The object id of the last trap.')
netBotz_prd_bot_trap_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 23), Integer32()).setLabel("netBotz-prd-bot-trap-value").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_value.setReference('NetBotz Last Trap Value')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_value.setDescription('The value of the last object trap.')
netBotz_prd_bot_trap_date = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 24), Integer32()).setLabel("netBotz-prd-bot-trap-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_date.setReference('NetBotz Trap Date')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_date.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_date.setDescription('The date and time of a specific trap. This field contains the number of seconds elapsed since midnight (00:00:00), January 1, 1970')
netBotz_prd_bot_refresh = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 26), Integer32()).setLabel("netBotz-prd-bot-refresh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_refresh.setReference('NetBotz|Web Refresh')
if mibBuilder.loadTexts: netBotz_prd_bot_refresh.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_refresh.setDescription('Rate of web page refresh, in seconds. This must be greater than 5 seconds.')
netBotz_prd_bot_airflow_level = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 27), Integer32()).setLabel("netBotz-prd-bot-airflow-level").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_level.setReference('NetBotz|Airflow Alert Level')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_level.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_level.setDescription('Airflow alert level. This is the relative level of airflow below which an alarm will be sent. The range is 1-11. Each unit is approximately 40 feet/second or 13 meters/second of airflow velocity.')
netBotz_prd_bot_doorpic_count = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 28), Integer32()).setLabel("netBotz-prd-bot-doorpic-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_count.setReference('NetBotz|Door Picture Count')
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_count.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_count.setDescription('Number of pictures to take when door activated. These pictures will be sent as attachments to the door alert e-mail. The range is from 0 to 5 pictures.')
netBotz_prd_bot_amps1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 29), Integer32()).setLabel("netBotz-prd-bot-amps1").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1.setReference('NetBotz Amperage[1] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1.setDescription('The reading of the first amperage probe, in milliamps.')
netBotz_prd_bot_amps1_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 30), Integer32()).setLabel("netBotz-prd-bot-amps1-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_enabled.setReference('NetBotz|Amperage[1] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_enabled.setDescription('Amperage[1] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps1_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 31), Integer32()).setLabel("netBotz-prd-bot-amps1-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_min.setReference('NetBotz Amperage[1] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_min.setDescription('The amperage[1] probe minimum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps1_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 32), Integer32()).setLabel("netBotz-prd-bot-amps1-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max.setReference('NetBotz Amperage[1] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max.setDescription('The amperage[1] probe maximum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 34), Integer32()).setLabel("netBotz-prd-bot-amps2").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2.setReference('NetBotz Amperage[2] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2.setDescription('The reading of the second amperage probe, in milliamps.')
netBotz_prd_bot_amps2_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 35), Integer32()).setLabel("netBotz-prd-bot-amps2-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_enabled.setReference('NetBotz|Amperage[2] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_enabled.setDescription('Amperage[2] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps2_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 36), Integer32()).setLabel("netBotz-prd-bot-amps2-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_min.setReference('NetBotz Amperage[2] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_min.setDescription('The amperage[2] probe minimum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps2_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 37), Integer32()).setLabel("netBotz-prd-bot-amps2-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max.setReference('NetBotz Amperage[2] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max.setDescription('The amperage[2] probe maximum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 39), Integer32()).setLabel("netBotz-prd-bot-amps3").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3.setReference('NetBotz Amperage[3] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3.setDescription('The reading of the third amperage probe, in milliamps.')
netBotz_prd_bot_amps3_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 40), Integer32()).setLabel("netBotz-prd-bot-amps3-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_enabled.setReference('NetBotz|Amperage[3] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_enabled.setDescription('Amperage[3] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps3_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 41), Integer32()).setLabel("netBotz-prd-bot-amps3-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_min.setReference('NetBotz Amperage[3] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_min.setDescription('The amperage[3] probe minimum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps3_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 42), Integer32()).setLabel("netBotz-prd-bot-amps3-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max.setReference('NetBotz Amperage[3] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max.setDescription('The amperage[3] probe maximum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps_total = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 44), Integer32()).setLabel("netBotz-prd-bot-amps-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total.setReference('NetBotz Total Amperage Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total.setDescription('The total of the readings of all amperage probes, in milliamps.')
netBotz_prd_bot_amps_total_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 45), Integer32()).setLabel("netBotz-prd-bot-amps-total-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_enabled.setReference('NetBotz|Total Amperage Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_enabled.setDescription('Total amperage alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps_total_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 46), Integer32()).setLabel("netBotz-prd-bot-amps-total-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_min.setReference('NetBotz Total Amperage Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_min.setDescription('The total amperage minimum, from 0 to 90000 milliamps.')
netBotz_prd_bot_amps_total_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 47), Integer32()).setLabel("netBotz-prd-bot-amps-total-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_max.setReference('NetBotz Total Amperage Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_max.setDescription('The total amperage maximum, from 0 to 90000 milliamps.')
netBotz_prd_bot_amps_total_support_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 48), DisplayString()).setLabel("netBotz-prd-bot-amps-total-support-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_support_enabled.setReference('NetBotz|Total Amperage Support Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_support_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_support_enabled.setDescription('Total Amperage Support enabled(Y) or disabled(N).')
netBotz_prd_bot_amps1_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 49), Integer32()).setLabel("netBotz-prd-bot-amps1-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_uV_per_10mA.setReference('NetBotz uVolts To 10 mAmps 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_uV_per_10mA.setDescription('The scaling factor used for the first amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps2_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 50), Integer32()).setLabel("netBotz-prd-bot-amps2-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_uV_per_10mA.setReference('NetBotz uVolts To 10 mAmps 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_uV_per_10mA.setDescription('The scaling factor used for the second amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps3_uV_per_mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 51), Integer32()).setLabel("netBotz-prd-bot-amps3-uV-per-mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_uV_per_mA.setReference('NetBotz uVolts To 10 mAmps 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_uV_per_mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_uV_per_mA.setDescription('The scaling factor used for the third amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps1_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 52), Integer32()).setLabel("netBotz-prd-bot-amps1-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max_range.setReference('NetBotz Max milliAmps 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max_range.setDescription('The maximum RMS milliamps measureable by the first Amp Detect.')
netBotz_prd_bot_amps2_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 53), Integer32()).setLabel("netBotz-prd-bot-amps2-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max_range.setReference('NetBotz Max milliAmps 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max_range.setDescription('The maximum RMS milliamps measureable by the second Amp Detect.')
netBotz_prd_bot_amps3_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 54), Integer32()).setLabel("netBotz-prd-bot-amps3-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max_range.setReference('NetBotz Max milliAmps 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max_range.setDescription('The maximum RMS milliamps measureable by the third Amp Detect.')
netBotz_prd_bot_amps4 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 55), Integer32()).setLabel("netBotz-prd-bot-amps4").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4.setReference('NetBotz Amperage[4] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4.setDescription('The reading of the fourth amperage probe, in milliamps.')
netBotz_prd_bot_amps4_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 56), Integer32()).setLabel("netBotz-prd-bot-amps4-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_enabled.setReference('NetBotz|Amperage[4] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_enabled.setDescription('Amperage[4] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps4_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 57), Integer32()).setLabel("netBotz-prd-bot-amps4-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_min.setReference('NetBotz Amperage[4] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_min.setDescription('The amperage[4] probe minimum, in milliamps.')
netBotz_prd_bot_amps4_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 58), Integer32()).setLabel("netBotz-prd-bot-amps4-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max.setReference('NetBotz Amperage[4] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max.setDescription('The amperage[4] probe maximum, in milliamps.')
netBotz_prd_bot_amps4_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 60), Integer32()).setLabel("netBotz-prd-bot-amps4-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_uV_per_10mA.setReference('NetBotz uVolts To 10 mAmps 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_uV_per_10mA.setDescription('The scaling factor used for the fourth amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps4_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 61), Integer32()).setLabel("netBotz-prd-bot-amps4-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max_range.setReference('NetBotz Max milliAmps 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max_range.setDescription('The maximum RMS milliamps measureable by the fourth Amp Detect.')
netBotz_prd_bot_ext_temp1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 62), Integer32()).setLabel("netBotz-prd-bot-ext-temp1").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1.setReference('NetBotz External Temperature Probe 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1.setDescription('The reading of the external temperature probe on port 1, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 63), Integer32()).setLabel("netBotz-prd-bot-ext-temp2").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2.setReference('NetBotz External Temperature Probe 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2.setDescription('The reading of the external temperature probe on port 2, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 64), Integer32()).setLabel("netBotz-prd-bot-ext-temp3").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3.setReference('NetBotz External Temperature Probe 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3.setDescription('The reading of the external temperature probe on port 3, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp1_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 66), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_enabled.setReference('NetBotz|Ext Temp[1] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_enabled.setDescription('External temperature probe on port 1 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp1_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 67), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min.setReference('NetBotz Ext Temp[1] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min.setDescription('The external temperature probe on port 1 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp1_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 68), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max.setReference('NetBotz Ext Temp[1] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max.setDescription('The external temperature probe on port 1 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp2_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 69), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_enabled.setReference('NetBotz|Ext Temp[2] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_enabled.setDescription('External temperature probe on port 2 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp2_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 70), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min.setReference('NetBotz Ext Temp[2] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min.setDescription('The external temperature probe on port 2 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp2_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 71), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max.setReference('NetBotz Ext Temp[2] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max.setDescription('The external temperature probe on port 2 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp3_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 72), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_enabled.setReference('NetBotz|Ext Temp[3] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_enabled.setDescription('External temperature probe on port 3 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp3_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 73), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min.setReference('NetBotz Ext Temp[3] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min.setDescription('The external temperature probe on port 3 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp3_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 74), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max.setReference('NetBotz Ext Temp[3] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max.setDescription('The external temperature probe on port 3 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp1_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 78), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 1 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp1_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 79), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 1 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp1_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 81), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max_range.setReference('NetBotz Max temperature supported - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 1, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp1_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 80), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min_range.setReference('NetBotz min temperature supported - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 1, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 82), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 2 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 83), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 2 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 85), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max_range.setReference('NetBotz Max temperature supported - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 2, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 84), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min_range.setReference('NetBotz min temperature supported - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 2, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 86), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 3 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 87), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 3 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 89), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max_range.setReference('NetBotz Max temperature supported - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 3, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 88), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min_range.setReference('NetBotz min temperature supported - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 3, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_port1_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 94), DisplayString()).setLabel("netBotz-prd-bot-ext-port1-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_id.setReference('NetBotz module ID port 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_id.setDescription('The module ID of the sensor module installed on port 1. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port1_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 95), DisplayString()).setLabel("netBotz-prd-bot-ext-port1-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_type.setReference('NetBotz module type port 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_type.setDescription('The type of sensor module installed on port 1. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_ext_port2_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 96), DisplayString()).setLabel("netBotz-prd-bot-ext-port2-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_id.setReference('NetBotz module ID port 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_id.setDescription('The module ID of the sensor module installed on port 2. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port2_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 97), DisplayString()).setLabel("netBotz-prd-bot-ext-port2-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_type.setReference('NetBotz module type port 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_type.setDescription('The type of sensor module installed on port 2. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_ext_port3_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 98), DisplayString()).setLabel("netBotz-prd-bot-ext-port3-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_id.setReference('NetBotz module ID port 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_id.setDescription('The module ID of the sensor module installed on port 3. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port3_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 99), DisplayString()).setLabel("netBotz-prd-bot-ext-port3-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_type.setReference('NetBotz module type port 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_type.setDescription('The type of sensor module installed on port 3. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_amp1_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 102), Integer32()).setLabel("netBotz-prd-bot-amp1-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 1.')
netBotz_prd_bot_amp1_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 103), Integer32()).setLabel("netBotz-prd-bot-amp1-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 1. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amp2_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 104), Integer32()).setLabel("netBotz-prd-bot-amp2-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 2.')
netBotz_prd_bot_amp2_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 105), Integer32()).setLabel("netBotz-prd-bot-amp2-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 2. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amp3_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 106), Integer32()).setLabel("netBotz-prd-bot-amp3-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 3.')
netBotz_prd_bot_amp3_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 107), Integer32()).setLabel("netBotz-prd-bot-amp3-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 3. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amp4_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 108), Integer32()).setLabel("netBotz-prd-bot-amp4-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 4.')
netBotz_prd_bot_amp4_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 109), Integer32()).setLabel("netBotz-prd-bot-amp4-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 4. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amptotal_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 110), Integer32()).setLabel("netBotz-prd-bot-amptotal-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - total')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the total of all AmpDetects.')
netBotz_prd_bot_amptotal_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 111), Integer32()).setLabel("netBotz-prd-bot-amptotal-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - total')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds for all AmpDetects. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_ext_dry1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 112), Integer32()).setLabel("netBotz-prd-bot-ext-dry1").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1.setReference('NetBotz Ext Dry 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1.setDescription('The current value of the external dry contact sensor on Ext1: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 113), Integer32()).setLabel("netBotz-prd-bot-ext-dry2").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2.setReference('NetBotz Ext Dry 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2.setDescription('The current value of the external dry contact sensor on Ext2: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 114), Integer32()).setLabel("netBotz-prd-bot-ext-dry3").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3.setReference('NetBotz Ext Dry 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3.setDescription('The current value of the external dry contact sensor on Ext3: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry4 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 115), Integer32()).setLabel("netBotz-prd-bot-ext-dry4").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4.setReference('NetBotz Ext Dry 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4.setDescription('The current value of the external dry contact sensor on Ext4: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry1_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 116), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_alarm_value.setReference('NetBotz Ext Dry 1 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext1: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry1_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 117), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_enabled.setReference('NetBotz Ext Dry 1 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_enabled.setDescription('External dry contact sensor on Ext1 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry2_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 118), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_alarm_value.setReference('NetBotz Ext Dry 2 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext2: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry2_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 119), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_enabled.setReference('NetBotz Ext Dry 2 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_enabled.setDescription('External dry contact sensor on Ext2 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry3_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 120), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_alarm_value.setReference('NetBotz Ext Dry 3 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext3: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry3_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 121), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_enabled.setReference('NetBotz Ext Dry 3 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_enabled.setDescription('External dry contact sensor on Ext3 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry4_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 122), Integer32()).setLabel("netBotz-prd-bot-ext-dry4-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_alarm_value.setReference('NetBotz Ext Dry 4 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext4: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry4_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 123), Integer32()).setLabel("netBotz-prd-bot-ext-dry4-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_enabled.setReference('NetBotz Ext Dry 4 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_enabled.setDescription('External dry contact sensor on Ext4 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry1_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 124), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_label.setReference('NetBotz Ext Dry 1 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_label.setDescription('The sensor name/label for the dry contact sensor on Ext1')
netBotz_prd_bot_ext_dry1_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 125), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_label.setReference('NetBotz Ext Dry 1 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext1')
netBotz_prd_bot_ext_dry1_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 126), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_closed_label.setReference('NetBotz Ext Dry 1 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext1')
netBotz_prd_bot_ext_dry1_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 127), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_to_close_millis.setReference('NetBotz Ext Dry 1 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext1 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry1_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 128), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_close_to_open_millis.setReference('NetBotz Ext Dry 1 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext1 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry1_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 129), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_response.setReference('NetBotz Ext Dry 1 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_response.setDescription('The type of alert response for the dry contact sensor on Ext1: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_ext_dry2_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 130), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_label.setReference('NetBotz Ext Dry 2 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_label.setDescription('The sensor name/label for the dry contact sensor on Ext2')
netBotz_prd_bot_ext_dry2_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 131), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_label.setReference('NetBotz Ext Dry 2 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext2')
netBotz_prd_bot_ext_dry2_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 132), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_closed_label.setReference('NetBotz Ext Dry 2 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext2')
netBotz_prd_bot_ext_dry2_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 133), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_to_close_millis.setReference('NetBotz Ext Dry 2 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext2 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry2_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 134), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_close_to_open_millis.setReference('NetBotz Ext Dry 2 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext2 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry2_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 135), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_response.setReference('NetBotz Ext Dry 2 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_response.setDescription('The type of alert response for the dry contact sensor on Ext2: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_ext_dry3_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 136), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_label.setReference('NetBotz Ext Dry 3 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_label.setDescription('The sensor name/label for the dry contact sensor on Ext3')
netBotz_prd_bot_ext_dry3_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 137), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_label.setReference('NetBotz Ext Dry 3 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext3')
netBotz_prd_bot_ext_dry3_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 138), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_closed_label.setReference('NetBotz Ext Dry 3 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext3')
netBotz_prd_bot_ext_dry3_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 139), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_to_close_millis.setReference('NetBotz Ext Dry 3 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext3 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry3_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 140), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_close_to_open_millis.setReference('NetBotz Ext Dry 3 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext3 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry3_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 141), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_response.setReference('NetBotz Ext Dry 3 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_response.setDescription('The type of alert response for the dry contact sensor on Ext3: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_cam_motion = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 148), Integer32()).setLabel("netBotz-prd-bot-cam-motion").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion.setReference('NetBotz Camera Motion')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion.setDescription('The current motion reading for the camera motion sensor (0=none, 1=motion detected)')
netBotz_prd_bot_cam_motion_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 149), Integer32()).setLabel("netBotz-prd-bot-cam-motion-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_enabled.setReference('NetBotz Camera Motion Sensor Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_enabled.setDescription('Camera motion sensor alarm enabled(1) or disabled(0).')
netBotz_prd_bot_cam_motion_sensitivity = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 150), Integer32()).setLabel("netBotz-prd-bot-cam-motion-sensitivity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_sensitivity.setReference('NetBotz Camera Motion Sensor Sensitivity')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_sensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_sensitivity.setDescription('Camera motion sensor sensitivity: 1=max, 15=min, 0=disabled.')
netBotz_prd_bot_cam_motion_delay = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 151), Integer32()).setLabel("netBotz-prd-bot-cam-motion-delay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_delay.setReference('NetBotz Camera Motion Sensor Delay')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_delay.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_delay.setDescription('Camera motion sensor delay. This is the minimum number of milliseconds of detected motion required before the alarm is triggered.')
netBotz_prd_bot_camera_event_autocycle = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 152), Integer32()).setLabel("netBotz-prd-bot-camera-event-autocycle").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_camera_event_autocycle.setReference('Auto-cycle camera event response')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_event_autocycle.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_event_autocycle.setDescription('Enables (1) or disables (0) the option to have the camera-based responses to alarm conditions automatically cycle as long as the condition persists.')
netBotz_prd_bot_num_pix_before_alarm = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 153), Integer32()).setLabel("netBotz-prd-bot-num-pix-before-alarm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_num_pix_before_alarm.setReference('Pre-Event Alarm Pictures')
if mibBuilder.loadTexts: netBotz_prd_bot_num_pix_before_alarm.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_num_pix_before_alarm.setDescription('Controls the number of pictures to be captured before any triggered alarm.')
netBotz_prd_bot_delay_before_event_pix = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 154), Integer32()).setLabel("netBotz-prd-bot-delay-before-event-pix").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_delay_before_event_pix.setReference('Alarm Picture Delay')
if mibBuilder.loadTexts: netBotz_prd_bot_delay_before_event_pix.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_delay_before_event_pix.setDescription('Controls the number of milliseconds before the first picture is captured after any triggered alarm.')
netBotz_prd_bot_delay_between_event_pix = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 155), Integer32()).setLabel("netBotz-prd-bot-delay-between-event-pix").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_delay_between_event_pix.setReference('Alarm Picture Interval')
if mibBuilder.loadTexts: netBotz_prd_bot_delay_between_event_pix.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_delay_between_event_pix.setDescription('Controls the number of milliseconds between pictures captured after any triggered alarm.')
netBotz_prd_bot_cam_motion_area_of_motion = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 156), Integer32()).setLabel("netBotz-prd-bot-cam-motion-area-of-motion").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_area_of_motion.setReference('NetBotz Camera Motion Sensor Area of Motion')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_area_of_motion.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_motion_area_of_motion.setDescription('Camera motion sensor area of motion: 1=max, 15=min, 0=disabled.')
netBotz_prd_bot_cam_pix_for_duration_of_alerts = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 157), Integer32()).setLabel("netBotz-prd-bot-cam-pix-for-duration-of-alerts").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_cam_pix_for_duration_of_alerts.setReference('NetBotz Camera Images For Duration of Alert')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_pix_for_duration_of_alerts.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_cam_pix_for_duration_of_alerts.setDescription('Camera images gathered for duration of camera related alert: 0=no, 1=yes.')
netBotz_prd_bot_camera_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 158), Integer32()).setLabel("netBotz-prd-bot-camera-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_camera_enabled.setReference('NetBotz Camera Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_enabled.setDescription('Controls whether the camera is enabled or not: 0=no, 1=yes. Changing this will reboot the appliance.')
netBotz_prd_bot_camera_is_flipped = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 159), Integer32()).setLabel("netBotz-prd-bot-camera-is-flipped").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_camera_is_flipped.setReference('NetBotz Camera Flipped')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_is_flipped.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_is_flipped.setDescription('Controls whether the camera image is flipped 180 degress or not: 0=no, 1=yes. Changing this will reboot the appliance.')
netBotz_prd_bot_camera_brightness = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 160), Integer32()).setLabel("netBotz-prd-bot-camera-brightness").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_camera_brightness.setReference('NetBotz Camera Brightness')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_brightness.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_brightness.setDescription('Sets the brightness on the camera, from 20 to 180 (20 is low, 180 is high).')
netBotz_prd_bot_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100)).setLabel("netBotz-prd-bot-traps")
netBotz_prd_bot_temperature_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1)).setLabel("netBotz-prd-bot-temperature-traps")
netBotz_prd_bot_humidity_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2)).setLabel("netBotz-prd-bot-humidity-traps")
netBotz_prd_bot_airflow_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 3)).setLabel("netBotz-prd-bot-airflow-traps")
netBotz_prd_bot_audio_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 4)).setLabel("netBotz-prd-bot-audio-traps")
netBotz_prd_bot_door_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 5)).setLabel("netBotz-prd-bot-door-traps")
netBotz_prd_bot_amp1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6)).setLabel("netBotz-prd-bot-amp1-traps")
netBotz_prd_bot_amp2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7)).setLabel("netBotz-prd-bot-amp2-traps")
netBotz_prd_bot_amp3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8)).setLabel("netBotz-prd-bot-amp3-traps")
netBotz_prd_bot_amp4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9)).setLabel("netBotz-prd-bot-amp4-traps")
netBotz_prd_bot_amp_total_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10)).setLabel("netBotz-prd-bot-amp-total-traps")
netBotz_prd_bot_ext_temp1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11)).setLabel("netBotz-prd-bot-ext-temp1-traps")
netBotz_prd_bot_ext_temp2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12)).setLabel("netBotz-prd-bot-ext-temp2-traps")
netBotz_prd_bot_ext_temp3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13)).setLabel("netBotz-prd-bot-ext-temp3-traps")
netBotz_prd_bot_ext_temp4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14)).setLabel("netBotz-prd-bot-ext-temp4-traps")
netBotz_prd_bot_ext_dry1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 15)).setLabel("netBotz-prd-bot-ext-dry1-traps")
netBotz_prd_bot_ext_dry2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 16)).setLabel("netBotz-prd-bot-ext-dry2-traps")
netBotz_prd_bot_ext_dry3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 17)).setLabel("netBotz-prd-bot-ext-dry3-traps")
netBotz_prd_bot_ext_dry4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 18)).setLabel("netBotz-prd-bot-ext-dry4-traps")
netBotz_prd_bot_amp5_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 19)).setLabel("netBotz-prd-bot-amp5-traps")
netBotz_prd_bot_amp6_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 20)).setLabel("netBotz-prd-bot-amp6-traps")
netBotz_prd_bot_amp7_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 21)).setLabel("netBotz-prd-bot-amp7-traps")
netBotz_prd_bot_ext_temp5_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 22)).setLabel("netBotz-prd-bot-ext-temp5-traps")
netBotz_prd_bot_ext_temp6_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 23)).setLabel("netBotz-prd-bot-ext-temp6-traps")
netBotz_prd_bot_ext_temp7_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 24)).setLabel("netBotz-prd-bot-ext-temp7-traps")
netBotz_prd_bot_ext_dry5_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 25)).setLabel("netBotz-prd-bot-ext-dry5-traps")
netBotz_prd_bot_ext_dry6_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 26)).setLabel("netBotz-prd-bot-ext-dry6-traps")
netBotz_prd_bot_ext_dry7_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 27)).setLabel("netBotz-prd-bot-ext-dry7-traps")
netBotz_prd_bot_camera_motion_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 28)).setLabel("netBotz-prd-bot-camera-motion-traps")
netBotz_prd_bot_ext_humi1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 29)).setLabel("netBotz-prd-bot-ext-humi1-traps")
netBotz_prd_bot_ext_humi2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 30)).setLabel("netBotz-prd-bot-ext-humi2-traps")
netBotz_prd_bot_ext_humi3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 31)).setLabel("netBotz-prd-bot-ext-humi3-traps")
netBotz_prd_bot_ext_humi4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 32)).setLabel("netBotz-prd-bot-ext-humi4-traps")
netBotz_prd_bot_ext_humi5_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 33)).setLabel("netBotz-prd-bot-ext-humi5-traps")
netBotz_prd_bot_ext_humi6_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 34)).setLabel("netBotz-prd-bot-ext-humi6-traps")
netBotz_prd_bot_ext_humi7_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 35)).setLabel("netBotz-prd-bot-ext-humi7-traps")
netBotz_prd_bot_temperature_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1) + (0,1)).setLabel("netBotz-prd-bot-temperature-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_low_trap.setDescription('NetBotz Temperature Low Trap. This trap indicates that the lower limit for temperature has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_low_trap.setReference('NetBotz Temperature Low Trap')
netBotz_prd_bot_temperature_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1) + (0,2)).setLabel("netBotz-prd-bot-temperature-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_high_trap.setDescription('NetBotz Temperature High Trap. This trap indicates that the upper limit for temperature has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_high_trap.setReference('NetBotz Temperature High Trap')
netBotz_prd_bot_temperature_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1) + (0,3)).setLabel("netBotz-prd-bot-temperature-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_trap_clear.setDescription('NetBotz Temperature Cleared Trap. The trap has been cleared because the temperature value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_trap_clear.setReference('NetBotz Temperature Cleared Trap')
netBotz_prd_bot_humidity_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2) + (0,1)).setLabel("netBotz-prd-bot-humidity-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_low_trap.setDescription('NetBotz Humidity Low Trap. This trap indicates that the lower limit for humidity has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_low_trap.setReference('NetBotz Humidity Low Trap')
netBotz_prd_bot_humidity_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2) + (0,2)).setLabel("netBotz-prd-bot-humidity-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_high_trap.setDescription('NetBotz Humidity High Trap. This trap indicates that the upper limit for humidity has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_high_trap.setReference('NetBotz Humidity High Trap')
netBotz_prd_bot_humidity_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2) + (0,3)).setLabel("netBotz-prd-bot-humidity-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_trap_clear.setDescription('NetBotz Humidity Cleared Trap. The trap has been cleared because the humidity value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_trap_clear.setReference('NetBotz Humidity Cleared Trap')
netBotz_prd_bot_airflow_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 3) + (0,1)).setLabel("netBotz-prd-bot-airflow-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_low_trap.setDescription('NetBotz Airflow Low Trap. This trap indicates that the lower limit for airflow has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_low_trap.setReference('NetBotz Airflow Low Trap')
netBotz_prd_bot_airflow_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 3) + (0,3)).setLabel("netBotz-prd-bot-airflow-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_trap_clear.setDescription('NetBotz Airflow Cleared Trap. The trap has been cleared because the airflow value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_trap_clear.setReference('NetBotz Airflow Cleared Trap')
netBotz_prd_bot_audio_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 4) + (0,2)).setLabel("netBotz-prd-bot-audio-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_audio_high_trap.setDescription('NetBotz Audio High Trap. This trap indicates that the upper limit for audio has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_high_trap.setReference('NetBotz Audio High Trap')
netBotz_prd_bot_audio_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 4) + (0,3)).setLabel("netBotz-prd-bot-audio-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_audio_trap_clear.setDescription('NetBotz Audio Cleared Trap. The trap has been cleared because the audio value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_trap_clear.setReference('NetBotz Audio Cleared Trap')
netBotz_prd_bot_door_trap_tripped = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 5) + (0,2)).setLabel("netBotz-prd-bot-door-trap-tripped").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_tripped.setDescription('NetBotz Door Sensor Tripped Trap. This trap indicates that the door sensor has been triggered (i.e. opened, if the thresdhold has been set to trip on open, closed if otherwise).')
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_tripped.setReference('NetBotz Door Tripped Trap')
netBotz_prd_bot_door_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 5) + (0,3)).setLabel("netBotz-prd-bot-door-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_clear.setDescription('NetBotz Door Cleared Trap. The trap has been cleared because the door sensor has returned to normal (i.e. been closed, if the threshold has been set to trip on open).')
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_clear.setReference('NetBotz Door Cleared Trap')
netBotz_prd_bot_amp1_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,1)).setLabel("netBotz-prd-bot-amp1-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_low_trap.setDescription('NetBotz Amp1 Low Trap. This trap indicates that the lower limit for the first amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_low_trap.setReference('NetBotz Amp1 Low Trap')
netBotz_prd_bot_amp1_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,2)).setLabel("netBotz-prd-bot-amp1-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_high_trap.setDescription('NetBotz Amp1 High Trap. This trap indicates that the upper limit for the first amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_high_trap.setReference('NetBotz Amp1 High Trap')
netBotz_prd_bot_amp1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,3)).setLabel("netBotz-prd-bot-amp1-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_trap_clear.setDescription('NetBotz Amp1 Cleared Trap. The trap has been cleared because the first amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_trap_clear.setReference('NetBotz Amp1 Cleared Trap')
netBotz_prd_bot_amp1_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,6)).setLabel("netBotz-prd-bot-amp1-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_unplugged.setDescription('NetBotz Amp 1 Sensor Unplugged Trap. The sensor for the first AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_unplugged.setReference('NetBotz Amp 1 Unplugged Trap')
netBotz_prd_bot_amp1_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,7)).setLabel("netBotz-prd-bot-amp1-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_replugged.setDescription('NetBotz Amp 1 Sensor Replugged Trap. The sensor for the first AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_replugged.setReference('NetBotz Amp 1 Replugged Trap')
netBotz_prd_bot_amp2_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,1)).setLabel("netBotz-prd-bot-amp2-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_low_trap.setDescription('NetBotz Amp2 Low Trap. This trap indicates that the lower limit for the second amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_low_trap.setReference('NetBotz Amp2 Low Trap')
netBotz_prd_bot_amp2_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,2)).setLabel("netBotz-prd-bot-amp2-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_high_trap.setDescription('NetBotz Amp2 High Trap. This trap indicates that the upper limit for the second amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_high_trap.setReference('NetBotz Amp2 High Trap')
netBotz_prd_bot_amp2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,3)).setLabel("netBotz-prd-bot-amp2-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_trap_clear.setDescription('NetBotz Amp2 Cleared Trap. The trap has been cleared because the second amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_trap_clear.setReference('NetBotz Amp2 Cleared Trap')
netBotz_prd_bot_amp2_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,6)).setLabel("netBotz-prd-bot-amp2-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_unplugged.setDescription('NetBotz Amp 2 Sensor Unplugged Trap. The sensor for the second AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_unplugged.setReference('NetBotz Amp 2 Unplugged Trap')
netBotz_prd_bot_amp2_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,7)).setLabel("netBotz-prd-bot-amp2-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_replugged.setDescription('NetBotz Amp 2 Sensor Replugged Trap. The sensor for the second AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_replugged.setReference('NetBotz Amp 2 Replugged Trap')
netBotz_prd_bot_amp3_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,1)).setLabel("netBotz-prd-bot-amp3-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_low_trap.setDescription('NetBotz Amp3 Low Trap. This trap indicates that the lower limit for the third amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_low_trap.setReference('NetBotz Amp3 Low Trap')
netBotz_prd_bot_amp3_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,2)).setLabel("netBotz-prd-bot-amp3-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_high_trap.setDescription('NetBotz Amp3 High Trap. This trap indicates that the upper limit for the third amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_high_trap.setReference('NetBotz Amp3 High Trap')
netBotz_prd_bot_amp3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,3)).setLabel("netBotz-prd-bot-amp3-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_trap_clear.setDescription('NetBotz Amp3 Cleared Trap. The trap has been cleared because the third amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_trap_clear.setReference('NetBotz Amp3 Cleared Trap')
netBotz_prd_bot_amp3_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,6)).setLabel("netBotz-prd-bot-amp3-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_unplugged.setDescription('NetBotz Amp 3 Sensor Unplugged Trap. The sensor for the third AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_unplugged.setReference('NetBotz Amp 3 Unplugged Trap')
netBotz_prd_bot_amp3_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,7)).setLabel("netBotz-prd-bot-amp3-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_replugged.setDescription('NetBotz Amp 3 Sensor Replugged Trap. The sensor for the third AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_replugged.setReference('NetBotz Amp 3 Replugged Trap')
netBotz_prd_bot_amp4_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,1)).setLabel("netBotz-prd-bot-amp4-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_low_trap.setDescription('NetBotz Amp4 Low Trap. This trap indicates that the lower limit for the fourth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_low_trap.setReference('NetBotz Amp4 Low Trap')
netBotz_prd_bot_amp4_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,2)).setLabel("netBotz-prd-bot-amp4-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_high_trap.setDescription('NetBotz Amp4 High Trap. This trap indicates that the upper limit for the fourth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_high_trap.setReference('NetBotz Amp4 High Trap')
netBotz_prd_bot_amp4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,3)).setLabel("netBotz-prd-bot-amp4-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_trap_clear.setDescription('NetBotz Amp4 Cleared Trap. The trap has been cleared because the fourth amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_trap_clear.setReference('NetBotz Amp4 Cleared Trap')
netBotz_prd_bot_amp4_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,6)).setLabel("netBotz-prd-bot-amp4-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_unplugged.setDescription('NetBotz Amp 4 Sensor Unplugged Trap. The sensor for the fourth AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_unplugged.setReference('NetBotz Amp 4 Unplugged Trap')
netBotz_prd_bot_amp4_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,7)).setLabel("netBotz-prd-bot-amp4-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_replugged.setDescription('NetBotz Amp 4 Sensor Replugged Trap. The sensor for the fourth AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_replugged.setReference('NetBotz Amp 4 Replugged Trap')
netBotz_prd_bot_amp5_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 19) + (0,1)).setLabel("netBotz-prd-bot-amp5-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_low_trap.setDescription('NetBotz Amp 5 Low Trap. This trap indicates that the lower limit for the fifth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_low_trap.setReference('NetBotz Amp 5 Low Trap')
netBotz_prd_bot_amp5_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 19) + (0,2)).setLabel("netBotz-prd-bot-amp5-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_high_trap.setDescription('NetBotz Amp 5 High Trap. This trap indicates that the upper limit for the fifth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_high_trap.setReference('NetBotz Amp 5 High Trap')
netBotz_prd_bot_amp5_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 19) + (0,3)).setLabel("netBotz-prd-bot-amp5-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_trap_clear.setDescription('NetBotz Amp 5 Cleared Trap. The trap has been cleared because the fifth amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_trap_clear.setReference('NetBotz Amp 5 Cleared Trap')
netBotz_prd_bot_amp5_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 19) + (0,6)).setLabel("netBotz-prd-bot-amp5-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_sensor_unplugged.setDescription('NetBotz Amp 5 Sensor Unplugged Trap. The sensor for the fifth AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_sensor_unplugged.setReference('NetBotz Amp 5 Unplugged Trap')
netBotz_prd_bot_amp5_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 19) + (0,7)).setLabel("netBotz-prd-bot-amp5-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_sensor_replugged.setDescription('NetBotz Amp 5 Sensor Replugged Trap. The sensor for the fifth AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp5_sensor_replugged.setReference('NetBotz Amp 5 Replugged Trap')
netBotz_prd_bot_amp6_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 20) + (0,1)).setLabel("netBotz-prd-bot-amp6-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_low_trap.setDescription('NetBotz Amp 6 Low Trap. This trap indicates that the lower limit for the sixth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_low_trap.setReference('NetBotz Amp 6 Low Trap')
netBotz_prd_bot_amp6_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 20) + (0,2)).setLabel("netBotz-prd-bot-amp6-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_high_trap.setDescription('NetBotz Amp 6 High Trap. This trap indicates that the upper limit for the sixth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_high_trap.setReference('NetBotz Amp 6 High Trap')
netBotz_prd_bot_amp6_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 20) + (0,3)).setLabel("netBotz-prd-bot-amp6-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_trap_clear.setDescription('NetBotz Amp 6 Cleared Trap. The trap has been cleared because the sixth amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_trap_clear.setReference('NetBotz Amp 6 Cleared Trap')
netBotz_prd_bot_amp6_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 20) + (0,6)).setLabel("netBotz-prd-bot-amp6-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_sensor_unplugged.setDescription('NetBotz Amp 6 Sensor Unplugged Trap. The sensor for the sixth AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_sensor_unplugged.setReference('NetBotz Amp 6 Unplugged Trap')
netBotz_prd_bot_amp6_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 20) + (0,7)).setLabel("netBotz-prd-bot-amp6-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_sensor_replugged.setDescription('NetBotz Amp 6 Sensor Replugged Trap. The sensor for the sixth AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp6_sensor_replugged.setReference('NetBotz Amp 6 Replugged Trap')
netBotz_prd_bot_amp7_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 21) + (0,1)).setLabel("netBotz-prd-bot-amp7-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_low_trap.setDescription('NetBotz Amp 7 Low Trap. This trap indicates that the lower limit for the seventh amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_low_trap.setReference('NetBotz Amp 7 Low Trap')
netBotz_prd_bot_amp7_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 21) + (0,2)).setLabel("netBotz-prd-bot-amp7-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_high_trap.setDescription('NetBotz Amp 7 High Trap. This trap indicates that the upper limit for the seventh amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_high_trap.setReference('NetBotz Amp 7 High Trap')
netBotz_prd_bot_amp7_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 21) + (0,3)).setLabel("netBotz-prd-bot-amp7-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_trap_clear.setDescription('NetBotz Amp 7 Cleared Trap. The trap has been cleared because the seventh amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_trap_clear.setReference('NetBotz Amp 7 Cleared Trap')
netBotz_prd_bot_amp7_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 21) + (0,6)).setLabel("netBotz-prd-bot-amp7-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_sensor_unplugged.setDescription('NetBotz Amp 7 Sensor Unplugged Trap. The sensor for the seventh AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_sensor_unplugged.setReference('NetBotz Amp 7 Unplugged Trap')
netBotz_prd_bot_amp7_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 21) + (0,7)).setLabel("netBotz-prd-bot-amp7-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_sensor_replugged.setDescription('NetBotz Amp 7 Sensor Replugged Trap. The sensor for the seventh AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp7_sensor_replugged.setReference('NetBotz Amp 7 Replugged Trap')
netBotz_prd_bot_amp_total_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10) + (0,1)).setLabel("netBotz-prd-bot-amp-total-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_low_trap.setDescription('NetBotz Total Amps Low Trap. This trap indicates that the lower limit for the total amperage has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_low_trap.setReference('NetBotz Total Amps Low Trap')
netBotz_prd_bot_amp_total_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10) + (0,2)).setLabel("netBotz-prd-bot-amp-total-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_high_trap.setDescription('NetBotz Total Amps High Trap. This trap indicates that the upper limit for the total amperage has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_high_trap.setReference('NetBotz Total Amps High Trap')
netBotz_prd_bot_amp_total_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10) + (0,3)).setLabel("netBotz-prd-bot-amp-total-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_trap_clear.setDescription('NetBotz Total Amps Cleared Trap. The trap has been cleared because the total amperage value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_trap_clear.setReference('NetBotz Total Amps Cleared Trap')
netBotz_prd_bot_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,1)).setLabel("netBotz-prd-bot-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_low_trap.setDescription('NetBotz Low Trap. This trap indicates that a lower limit has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_low_trap.setReference('NetBotz Low Trap')
netBotz_prd_bot_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,2)).setLabel("netBotz-prd-bot-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_high_trap.setDescription('NetBotz High Trap. This trap indicates that an upper limit has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_high_trap.setReference('NetBotz High Trap')
netBotz_prd_bot_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,3)).setLabel("netBotz-prd-bot-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_trap_clear.setDescription('NetBotz Cleared Trap. The trap has been cleared because the value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_clear.setReference('NetBotz Cleared Trap')
netBotz_prd_bot_offline_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,4)).setLabel("netBotz-prd-bot-offline-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_offline_trap.setDescription('NetBotz Device Offline Trap. This trap indicates that a device or function has been determined to be offline.')
if mibBuilder.loadTexts: netBotz_prd_bot_offline_trap.setReference('NetBotz Offline Trap')
netBotz_prd_bot_online_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,5)).setLabel("netBotz-prd-bot-online-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_online_trap.setDescription('NetBotz Device Online Trap. This trap indicates that a device or function has been determined to be online.')
if mibBuilder.loadTexts: netBotz_prd_bot_online_trap.setReference('NetBotz Online Trap')
netBotz_prd_bot_ext_temp1_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,1)).setLabel("netBotz-prd-bot-ext-temp1-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_low_trap.setDescription('NetBotz External Temperature 1 Low Trap. This trap indicates that the lower limit for external temperature probe on port 1 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_low_trap.setReference('NetBotz Ext Temperature 1 Low Trap')
netBotz_prd_bot_ext_temp1_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,2)).setLabel("netBotz-prd-bot-ext-temp1-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_high_trap.setDescription('NetBotz External Temperature 1 High Trap. This trap indicates that the upper limit for external temperature probe on port 1 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_high_trap.setReference('NetBotz Ext Temperature 1 High Trap')
netBotz_prd_bot_ext_temp1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,3)).setLabel("netBotz-prd-bot-ext-temp1-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_trap_clear.setDescription('NetBotz External Temperature 1 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 1 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_trap_clear.setReference('NetBotz Ext Temperature 1 Cleared Trap')
netBotz_prd_bot_ext_temp1_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,6)).setLabel("netBotz-prd-bot-ext-temp1-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_unplugged.setDescription('NetBotz External Temperature 1 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_unplugged.setReference('NetBotz Ext Temperature 1 Unplugged Trap')
netBotz_prd_bot_ext_temp1_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,7)).setLabel("netBotz-prd-bot-ext-temp1-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_replugged.setDescription('NetBotz External Temperature 1 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_replugged.setReference('NetBotz Ext Temperature 1 Replugged Trap')
netBotz_prd_bot_ext_temp2_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,1)).setLabel("netBotz-prd-bot-ext-temp2-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_low_trap.setDescription('NetBotz External Temperature 2 Low Trap. This trap indicates that the lower limit for external temperature probe on port 2 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_low_trap.setReference('NetBotz Ext Temperature 2 Low Trap')
netBotz_prd_bot_ext_temp2_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,2)).setLabel("netBotz-prd-bot-ext-temp2-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_high_trap.setDescription('NetBotz External Temperature 2 High Trap. This trap indicates that the upper limit for external temperature probe on port 2 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_high_trap.setReference('NetBotz Ext Temperature 2 High Trap')
netBotz_prd_bot_ext_temp2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,3)).setLabel("netBotz-prd-bot-ext-temp2-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_trap_clear.setDescription('NetBotz External Temperature 2 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 2 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_trap_clear.setReference('NetBotz Ext Temperature 2 Cleared Trap')
netBotz_prd_bot_ext_temp2_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,6)).setLabel("netBotz-prd-bot-ext-temp2-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_unplugged.setDescription('NetBotz External Temperature 2 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_unplugged.setReference('NetBotz Ext Temperature 2 Unplugged Trap')
netBotz_prd_bot_ext_temp2_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,7)).setLabel("netBotz-prd-bot-ext-temp2-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_replugged.setDescription('NetBotz External Temperature 2 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_replugged.setReference('NetBotz Ext Temperature 2 Replugged Trap')
netBotz_prd_bot_ext_temp3_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,1)).setLabel("netBotz-prd-bot-ext-temp3-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_low_trap.setDescription('NetBotz External Temperature 3 Low Trap. This trap indicates that the lower limit for external temperature probe on port 3 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_low_trap.setReference('NetBotz Ext Temperature 3 Low Trap')
netBotz_prd_bot_ext_temp3_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,2)).setLabel("netBotz-prd-bot-ext-temp3-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_high_trap.setDescription('NetBotz External Temperature 3 High Trap. This trap indicates that the upper limit for external temperature probe on port 3 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_high_trap.setReference('NetBotz Ext Temperature 3 High Trap')
netBotz_prd_bot_ext_temp3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,3)).setLabel("netBotz-prd-bot-ext-temp3-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_trap_clear.setDescription('NetBotz External Temperature 3 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 3 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_trap_clear.setReference('NetBotz Ext Temperature 3 Cleared Trap')
netBotz_prd_bot_ext_temp3_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,6)).setLabel("netBotz-prd-bot-ext-temp3-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_unplugged.setDescription('NetBotz External Temperature 3 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_unplugged.setReference('NetBotz Ext Temperature 3 Unplugged Trap')
netBotz_prd_bot_ext_temp3_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,7)).setLabel("netBotz-prd-bot-ext-temp3-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_replugged.setDescription('NetBotz External Temperature 3 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_replugged.setReference('NetBotz Ext Temperature 3 Replugged Trap')
netBotz_prd_bot_ext_temp4_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,1)).setLabel("netBotz-prd-bot-ext-temp4-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_low_trap.setDescription('NetBotz External Temperature 4 Low Trap. This trap indicates that the lower limit for external temperature probe on port 4 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_low_trap.setReference('NetBotz Ext Temperature 4 Low Trap')
netBotz_prd_bot_ext_temp4_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,2)).setLabel("netBotz-prd-bot-ext-temp4-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_high_trap.setDescription('NetBotz External Temperature 4 High Trap. This trap indicates that the upper limit for external temperature probe on port 4 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_high_trap.setReference('NetBotz Ext Temperature 4 High Trap')
netBotz_prd_bot_ext_temp4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,3)).setLabel("netBotz-prd-bot-ext-temp4-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_trap_clear.setDescription('NetBotz External Temperature 4 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 4 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_trap_clear.setReference('NetBotz Ext Temperature 4 Cleared Trap')
netBotz_prd_bot_ext_temp4_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,6)).setLabel("netBotz-prd-bot-ext-temp4-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_unplugged.setDescription('NetBotz External Temperature 4 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_unplugged.setReference('NetBotz Ext Temperature 4 Unplugged Trap')
netBotz_prd_bot_ext_temp4_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,7)).setLabel("netBotz-prd-bot-ext-temp4-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_replugged.setDescription('NetBotz External Temperature 4 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_replugged.setReference('NetBotz Ext Temperature 4 Replugged Trap')
netBotz_prd_bot_ext_temp5_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 22) + (0,1)).setLabel("netBotz-prd-bot-ext-temp5-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_low_trap.setDescription('NetBotz External Temperature 5 Low Trap. This trap indicates that the lower limit for external temperature probe on port 5 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_low_trap.setReference('NetBotz Ext Temperature 5 Low Trap')
netBotz_prd_bot_ext_temp5_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 22) + (0,2)).setLabel("netBotz-prd-bot-ext-temp5-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_high_trap.setDescription('NetBotz External Temperature 5 High Trap. This trap indicates that the upper limit for external temperature probe on port 5 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_high_trap.setReference('NetBotz Ext Temperature 5 High Trap')
netBotz_prd_bot_ext_temp5_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 22) + (0,3)).setLabel("netBotz-prd-bot-ext-temp5-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_trap_clear.setDescription('NetBotz External Temperature 5 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 5 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_trap_clear.setReference('NetBotz Ext Temperature 5 Cleared Trap')
netBotz_prd_bot_ext_temp5_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 22) + (0,6)).setLabel("netBotz-prd-bot-ext-temp5-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_sensor_unplugged.setDescription('NetBotz External Temperature 5 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_sensor_unplugged.setReference('NetBotz Ext Temperature 5 Unplugged Trap')
netBotz_prd_bot_ext_temp5_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 22) + (0,7)).setLabel("netBotz-prd-bot-ext-temp5-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_sensor_replugged.setDescription('NetBotz External Temperature 5 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp5_sensor_replugged.setReference('NetBotz Ext Temperature 5 Replugged Trap')
netBotz_prd_bot_ext_temp6_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 23) + (0,1)).setLabel("netBotz-prd-bot-ext-temp6-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_low_trap.setDescription('NetBotz External Temperature 6 Low Trap. This trap indicates that the lower limit for external temperature probe on port 6 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_low_trap.setReference('NetBotz Ext Temperature 6 Low Trap')
netBotz_prd_bot_ext_temp6_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 23) + (0,2)).setLabel("netBotz-prd-bot-ext-temp6-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_high_trap.setDescription('NetBotz External Temperature 6 High Trap. This trap indicates that the upper limit for external temperature probe on port 6 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_high_trap.setReference('NetBotz Ext Temperature 6 High Trap')
netBotz_prd_bot_ext_temp6_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 23) + (0,3)).setLabel("netBotz-prd-bot-ext-temp6-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_trap_clear.setDescription('NetBotz External Temperature 6 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 6 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_trap_clear.setReference('NetBotz Ext Temperature 6 Cleared Trap')
netBotz_prd_bot_ext_temp6_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 23) + (0,6)).setLabel("netBotz-prd-bot-ext-temp6-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_sensor_unplugged.setDescription('NetBotz External Temperature 6 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_sensor_unplugged.setReference('NetBotz Ext Temperature 6 Unplugged Trap')
netBotz_prd_bot_ext_temp6_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 23) + (0,7)).setLabel("netBotz-prd-bot-ext-temp6-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_sensor_replugged.setDescription('NetBotz External Temperature 6 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp6_sensor_replugged.setReference('NetBotz Ext Temperature 6 Replugged Trap')
netBotz_prd_bot_ext_temp7_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 24) + (0,1)).setLabel("netBotz-prd-bot-ext-temp7-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_low_trap.setDescription('NetBotz External Temperature 7 Low Trap. This trap indicates that the lower limit for external temperature probe on port 7 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_low_trap.setReference('NetBotz Ext Temperature 7 Low Trap')
netBotz_prd_bot_ext_temp7_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 24) + (0,2)).setLabel("netBotz-prd-bot-ext-temp7-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_high_trap.setDescription('NetBotz External Temperature 7 High Trap. This trap indicates that the upper limit for external temperature probe on port 7 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_high_trap.setReference('NetBotz Ext Temperature 7 High Trap')
netBotz_prd_bot_ext_temp7_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 24) + (0,3)).setLabel("netBotz-prd-bot-ext-temp7-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_trap_clear.setDescription('NetBotz External Temperature 7 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 7 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_trap_clear.setReference('NetBotz Ext Temperature 7 Cleared Trap')
netBotz_prd_bot_ext_temp7_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 24) + (0,6)).setLabel("netBotz-prd-bot-ext-temp7-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_sensor_unplugged.setDescription('NetBotz External Temperature 7 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_sensor_unplugged.setReference('NetBotz Ext Temperature 7 Unplugged Trap')
netBotz_prd_bot_ext_temp7_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 24) + (0,7)).setLabel("netBotz-prd-bot-ext-temp7-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_sensor_replugged.setDescription('NetBotz External Temperature 7 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp7_sensor_replugged.setReference('NetBotz Ext Temperature 7 Replugged Trap')
netBotz_prd_bot_ext_dry1_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 15) + (0,2)).setLabel("netBotz-prd-bot-ext-dry1-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_triggered_trap.setDescription('NetBotz External Dry Contact 1 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext1 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_triggered_trap.setReference('NetBotz Ext Dry 1 Triggered Trap')
netBotz_prd_bot_ext_dry1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 15) + (0,3)).setLabel("netBotz-prd-bot-ext-dry1-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_trap_clear.setDescription('NetBotz External Dry Contact 1 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext1 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_trap_clear.setReference('NetBotz Ext Dry 1 Cleared Trap')
netBotz_prd_bot_ext_dry2_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 16) + (0,2)).setLabel("netBotz-prd-bot-ext-dry2-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_triggered_trap.setDescription('NetBotz External Dry Contact 2 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext2 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_triggered_trap.setReference('NetBotz Ext Dry 2 Triggered Trap')
netBotz_prd_bot_ext_dry2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 16) + (0,3)).setLabel("netBotz-prd-bot-ext-dry2-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_trap_clear.setDescription('NetBotz External Dry Contact 2 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext2 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_trap_clear.setReference('NetBotz Ext Dry 2 Cleared Trap')
netBotz_prd_bot_ext_dry3_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 17) + (0,2)).setLabel("netBotz-prd-bot-ext-dry3-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_triggered_trap.setDescription('NetBotz External Dry Contact 3 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext3 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_triggered_trap.setReference('NetBotz Ext Dry 3 Triggered Trap')
netBotz_prd_bot_ext_dry3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 17) + (0,3)).setLabel("netBotz-prd-bot-ext-dry3-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_trap_clear.setDescription('NetBotz External Dry Contact 3 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext3 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_trap_clear.setReference('NetBotz Ext Dry 3 Cleared Trap')
netBotz_prd_bot_ext_dry4_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 18) + (0,2)).setLabel("netBotz-prd-bot-ext-dry4-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_triggered_trap.setDescription('NetBotz External Dry Contact 4 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext4 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_triggered_trap.setReference('NetBotz Ext Dry 4 Triggered Trap')
netBotz_prd_bot_ext_dry4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 18) + (0,3)).setLabel("netBotz-prd-bot-ext-dry4-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_trap_clear.setDescription('NetBotz External Dry Contact 4 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext4 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_trap_clear.setReference('NetBotz Ext Dry 4 Cleared Trap')
netBotz_prd_bot_ext_dry5_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 25) + (0,2)).setLabel("netBotz-prd-bot-ext-dry5-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry5_triggered_trap.setDescription('NetBotz External Dry Contact 5 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext5 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry5_triggered_trap.setReference('NetBotz Ext Dry 5 Triggered Trap')
netBotz_prd_bot_ext_dry5_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 25) + (0,3)).setLabel("netBotz-prd-bot-ext-dry5-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry5_trap_clear.setDescription('NetBotz External Dry Contact 5 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext5 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry5_trap_clear.setReference('NetBotz Ext Dry 5 Cleared Trap')
netBotz_prd_bot_ext_dry6_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 26) + (0,2)).setLabel("netBotz-prd-bot-ext-dry6-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry6_triggered_trap.setDescription('NetBotz External Dry Contact 6 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext6 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry6_triggered_trap.setReference('NetBotz Ext Dry 6 Triggered Trap')
netBotz_prd_bot_ext_dry6_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 26) + (0,3)).setLabel("netBotz-prd-bot-ext-dry6-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry6_trap_clear.setDescription('NetBotz External Dry Contact 6 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext6 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry6_trap_clear.setReference('NetBotz Ext Dry 6 Cleared Trap')
netBotz_prd_bot_ext_dry7_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 27) + (0,2)).setLabel("netBotz-prd-bot-ext-dry7-triggered-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry7_triggered_trap.setDescription('NetBotz External Dry Contact 7 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext7 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry7_triggered_trap.setReference('NetBotz Ext Dry 7 Triggered Trap')
netBotz_prd_bot_ext_dry7_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 27) + (0,3)).setLabel("netBotz-prd-bot-ext-dry7-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry7_trap_clear.setDescription('NetBotz External Dry Contact 7 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext7 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry7_trap_clear.setReference('NetBotz Ext Dry 7 Cleared Trap')
netBotz_prd_bot_camera_motion_trap_tripped = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 28) + (0,2)).setLabel("netBotz-prd-bot-camera-motion-trap-tripped").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_camera_motion_trap_tripped.setDescription('NetBotz Camera Motion Sensor Tripped Trap. This trap indicates that the camera motion sensor has been triggered (motion has been detected).')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_motion_trap_tripped.setReference('NetBotz Camera Motion Tripped Trap')
netBotz_prd_bot_camera_motion_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 28) + (0,3)).setLabel("netBotz-prd-bot-camera-motion-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_camera_motion_trap_clear.setDescription('NetBotz Camera Motion Cleared Trap. The trap has been cleared because the camera motion sensor has returned to normal (no longer is detecting motion).')
if mibBuilder.loadTexts: netBotz_prd_bot_camera_motion_trap_clear.setReference('NetBotz Camera Motion Cleared Trap')
netBotz_prd_bot_ext_humi1_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 29) + (0,1)).setLabel("netBotz-prd-bot-ext-humi1-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_low_trap.setDescription('NetBotz External Humidity 1 Low Trap. This trap indicates that the lower limit for external humidity probe on port 1 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_low_trap.setReference('NetBotz Ext Humidity 1 Low Trap')
netBotz_prd_bot_ext_humi1_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 29) + (0,2)).setLabel("netBotz-prd-bot-ext-humi1-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_high_trap.setDescription('NetBotz External Humidity 1 High Trap. This trap indicates that the upper limit for external humidity probe on port 1 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_high_trap.setReference('NetBotz Ext Humidity 1 High Trap')
netBotz_prd_bot_ext_humi1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 29) + (0,3)).setLabel("netBotz-prd-bot-ext-humi1-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_trap_clear.setDescription('NetBotz External Humidity 1 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 1 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_trap_clear.setReference('NetBotz Ext Humidity 1 Cleared Trap')
netBotz_prd_bot_ext_humi1_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 29) + (0,6)).setLabel("netBotz-prd-bot-ext-humi1-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_sensor_unplugged.setDescription('NetBotz External Humidity 1 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_sensor_unplugged.setReference('NetBotz Ext Humidity 1 Unplugged Trap')
netBotz_prd_bot_ext_humi1_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 29) + (0,7)).setLabel("netBotz-prd-bot-ext-humi1-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_sensor_replugged.setDescription('NetBotz External Humidity 1 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi1_sensor_replugged.setReference('NetBotz Ext Humidity 1 Replugged Trap')
netBotz_prd_bot_ext_humi2_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 30) + (0,1)).setLabel("netBotz-prd-bot-ext-humi2-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_low_trap.setDescription('NetBotz External Humidity 2 Low Trap. This trap indicates that the lower limit for external humidity probe on port 2 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_low_trap.setReference('NetBotz Ext Humidity 2 Low Trap')
netBotz_prd_bot_ext_humi2_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 30) + (0,2)).setLabel("netBotz-prd-bot-ext-humi2-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_high_trap.setDescription('NetBotz External Humidity 2 High Trap. This trap indicates that the upper limit for external humidity probe on port 2 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_high_trap.setReference('NetBotz Ext Humidity 2 High Trap')
netBotz_prd_bot_ext_humi2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 30) + (0,3)).setLabel("netBotz-prd-bot-ext-humi2-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_trap_clear.setDescription('NetBotz External Humidity 2 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 2 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_trap_clear.setReference('NetBotz Ext Humidity 2 Cleared Trap')
netBotz_prd_bot_ext_humi2_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 30) + (0,6)).setLabel("netBotz-prd-bot-ext-humi2-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_sensor_unplugged.setDescription('NetBotz External Humidity 2 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_sensor_unplugged.setReference('NetBotz Ext Humidity 2 Unplugged Trap')
netBotz_prd_bot_ext_humi2_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 30) + (0,7)).setLabel("netBotz-prd-bot-ext-humi2-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_sensor_replugged.setDescription('NetBotz External Humidity 2 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi2_sensor_replugged.setReference('NetBotz Ext Humidity 2 Replugged Trap')
netBotz_prd_bot_ext_humi3_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 31) + (0,1)).setLabel("netBotz-prd-bot-ext-humi3-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_low_trap.setDescription('NetBotz External Humidity 3 Low Trap. This trap indicates that the lower limit for external humidity probe on port 3 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_low_trap.setReference('NetBotz Ext Humidity 3 Low Trap')
netBotz_prd_bot_ext_humi3_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 31) + (0,2)).setLabel("netBotz-prd-bot-ext-humi3-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_high_trap.setDescription('NetBotz External Humidity 3 High Trap. This trap indicates that the upper limit for external humidity probe on port 3 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_high_trap.setReference('NetBotz Ext Humidity 3 High Trap')
netBotz_prd_bot_ext_humi3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 31) + (0,3)).setLabel("netBotz-prd-bot-ext-humi3-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_trap_clear.setDescription('NetBotz External Humidity 3 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 3 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_trap_clear.setReference('NetBotz Ext Humidity 3 Cleared Trap')
netBotz_prd_bot_ext_humi3_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 31) + (0,6)).setLabel("netBotz-prd-bot-ext-humi3-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_sensor_unplugged.setDescription('NetBotz External Humidity 3 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_sensor_unplugged.setReference('NetBotz Ext Humidity 3 Unplugged Trap')
netBotz_prd_bot_ext_humi3_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 31) + (0,7)).setLabel("netBotz-prd-bot-ext-humi3-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_sensor_replugged.setDescription('NetBotz External Humidity 3 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi3_sensor_replugged.setReference('NetBotz Ext Humidity 3 Replugged Trap')
netBotz_prd_bot_ext_humi4_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 32) + (0,1)).setLabel("netBotz-prd-bot-ext-humi4-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_low_trap.setDescription('NetBotz External Humidity 4 Low Trap. This trap indicates that the lower limit for external humidity probe on port 4 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_low_trap.setReference('NetBotz Ext Humidity 4 Low Trap')
netBotz_prd_bot_ext_humi4_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 32) + (0,2)).setLabel("netBotz-prd-bot-ext-humi4-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_high_trap.setDescription('NetBotz External Humidity 4 High Trap. This trap indicates that the upper limit for external humidity probe on port 4 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_high_trap.setReference('NetBotz Ext Humidity 4 High Trap')
netBotz_prd_bot_ext_humi4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 32) + (0,3)).setLabel("netBotz-prd-bot-ext-humi4-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_trap_clear.setDescription('NetBotz External Humidity 4 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 4 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_trap_clear.setReference('NetBotz Ext Humidity 4 Cleared Trap')
netBotz_prd_bot_ext_humi4_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 32) + (0,6)).setLabel("netBotz-prd-bot-ext-humi4-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_sensor_unplugged.setDescription('NetBotz External Humidity 4 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_sensor_unplugged.setReference('NetBotz Ext Humidity 4 Unplugged Trap')
netBotz_prd_bot_ext_humi4_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 32) + (0,7)).setLabel("netBotz-prd-bot-ext-humi4-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_sensor_replugged.setDescription('NetBotz External Humidity 4 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi4_sensor_replugged.setReference('NetBotz Ext Humidity 4 Replugged Trap')
netBotz_prd_bot_ext_humi5_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 33) + (0,1)).setLabel("netBotz-prd-bot-ext-humi5-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_low_trap.setDescription('NetBotz External Humidity 5 Low Trap. This trap indicates that the lower limit for external humidity probe on port 5 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_low_trap.setReference('NetBotz Ext Humidity 5 Low Trap')
netBotz_prd_bot_ext_humi5_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 33) + (0,2)).setLabel("netBotz-prd-bot-ext-humi5-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_high_trap.setDescription('NetBotz External Humidity 5 High Trap. This trap indicates that the upper limit for external humidity probe on port 5 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_high_trap.setReference('NetBotz Ext Humidity 5 High Trap')
netBotz_prd_bot_ext_humi5_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 33) + (0,3)).setLabel("netBotz-prd-bot-ext-humi5-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_trap_clear.setDescription('NetBotz External Humidity 5 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 5 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_trap_clear.setReference('NetBotz Ext Humidity 5 Cleared Trap')
netBotz_prd_bot_ext_humi5_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 33) + (0,6)).setLabel("netBotz-prd-bot-ext-humi5-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_sensor_unplugged.setDescription('NetBotz External Humidity 5 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_sensor_unplugged.setReference('NetBotz Ext Humidity 5 Unplugged Trap')
netBotz_prd_bot_ext_humi5_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 33) + (0,7)).setLabel("netBotz-prd-bot-ext-humi5-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_sensor_replugged.setDescription('NetBotz External Humidity 5 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi5_sensor_replugged.setReference('NetBotz Ext Humidity 5 Replugged Trap')
netBotz_prd_bot_ext_humi6_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 34) + (0,1)).setLabel("netBotz-prd-bot-ext-humi6-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_low_trap.setDescription('NetBotz External Humidity 6 Low Trap. This trap indicates that the lower limit for external humidity probe on port 6 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_low_trap.setReference('NetBotz Ext Humidity 6 Low Trap')
netBotz_prd_bot_ext_humi6_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 34) + (0,2)).setLabel("netBotz-prd-bot-ext-humi6-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_high_trap.setDescription('NetBotz External Humidity 6 High Trap. This trap indicates that the upper limit for external humidity probe on port 6 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_high_trap.setReference('NetBotz Ext Humidity 6 High Trap')
netBotz_prd_bot_ext_humi6_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 34) + (0,3)).setLabel("netBotz-prd-bot-ext-humi6-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_trap_clear.setDescription('NetBotz External Humidity 6 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 6 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_trap_clear.setReference('NetBotz Ext Humidity 6 Cleared Trap')
netBotz_prd_bot_ext_humi6_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 34) + (0,6)).setLabel("netBotz-prd-bot-ext-humi6-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_sensor_unplugged.setDescription('NetBotz External Humidity 6 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_sensor_unplugged.setReference('NetBotz Ext Humidity 6 Unplugged Trap')
netBotz_prd_bot_ext_humi6_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 34) + (0,7)).setLabel("netBotz-prd-bot-ext-humi6-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_sensor_replugged.setDescription('NetBotz External Humidity 6 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi6_sensor_replugged.setReference('NetBotz Ext Humidity 6 Replugged Trap')
netBotz_prd_bot_ext_humi7_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 35) + (0,1)).setLabel("netBotz-prd-bot-ext-humi7-low-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_low_trap.setDescription('NetBotz External Humidity 7 Low Trap. This trap indicates that the lower limit for external humidity probe on port 7 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_low_trap.setReference('NetBotz Ext Humidity 7 Low Trap')
netBotz_prd_bot_ext_humi7_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 35) + (0,2)).setLabel("netBotz-prd-bot-ext-humi7-high-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_high_trap.setDescription('NetBotz External Humidity 7 High Trap. This trap indicates that the upper limit for external humidity probe on port 7 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_high_trap.setReference('NetBotz Ext Humidity 7 High Trap')
netBotz_prd_bot_ext_humi7_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 35) + (0,3)).setLabel("netBotz-prd-bot-ext-humi7-trap-clear").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_trap_clear.setDescription('NetBotz External Humidity 7 Cleared Trap. The trap has been cleared because the humidity value for the humidity probe on port 7 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_trap_clear.setReference('NetBotz Ext Humidity 7 Cleared Trap')
netBotz_prd_bot_ext_humi7_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 35) + (0,6)).setLabel("netBotz-prd-bot-ext-humi7-sensor-unplugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_sensor_unplugged.setDescription('NetBotz External Humidity 7 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_sensor_unplugged.setReference('NetBotz Ext Humidity 7 Unplugged Trap')
netBotz_prd_bot_ext_humi7_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 35) + (0,7)).setLabel("netBotz-prd-bot-ext-humi7-sensor-replugged").setObjects(("NETBOTZ-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_sensor_replugged.setDescription('NetBotz External Humidity 7 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_humi7_sensor_replugged.setReference('NetBotz Ext Humidity 7 Replugged Trap')
expPortTable = MibTable((1, 3, 6, 1, 4, 1, 5528, 31), )
if mibBuilder.loadTexts: expPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: expPortTable.setDescription('A list of expansion port entries.')
expPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5528, 31, 1), )
if mibBuilder.loadTexts: expPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expPortEntry.setDescription('An expansion port entry for a single port')
expPort_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 1), DisplayString()).setLabel("expPort-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_module_id.setDescription('The module ID of the sensor module installed. Blank string indicates that no module is installed.')
expPort_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 2), DisplayString()).setLabel("expPort-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_module_type.setDescription('The type of sensor module installed. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
expPort_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 3), DisplayString()).setLabel("expPort-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_label.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_label.setDescription("The label for the expansion port. Ports default to the label 'Extn', for port n.")
expPort_amps = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 20), Integer32()).setLabel("expPort-amps").setMaxAccess("readonly")
if mibBuilder.loadTexts: expPort_amps.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_amps.setDescription('The reading of the amperage probe, in milliamps.')
expPort_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 21), Integer32()).setLabel("expPort-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: expPort_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect.')
expPort_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 22), Integer32()).setLabel("expPort-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
expPort_amps_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 23), Integer32()).setLabel("expPort-amps-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_amps_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_amps_enabled.setDescription('Amperage probe alarm enabled(1) or disabled(0).')
expPort_amps_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 24), Integer32()).setLabel("expPort-amps-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_amps_min.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_amps_min.setDescription('The amperage probe minimum, from 0 to 30000 milliamps.')
expPort_amps_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 25), Integer32()).setLabel("expPort-amps-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_amps_max.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_amps_max.setDescription('The amperage probe maximum, from 0 to 30000 milliamps.')
expPort_amps_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 26), Integer32()).setLabel("expPort-amps-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_amps_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_amps_uV_per_10mA.setDescription('The scaling factor used for the amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
expPort_amps_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 27), Integer32()).setLabel("expPort-amps-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_amps_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_amps_max_range.setDescription('The maximum RMS milliamps measureable by the AmpDetect.')
expPort_ext_temp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 40), Integer32()).setLabel("expPort-ext-temp").setMaxAccess("readonly")
if mibBuilder.loadTexts: expPort_ext_temp.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp.setDescription('The reading of the external temperature probe, in degrees F or degrees C (depends on netBotz-ismetric).')
expPort_ext_temp_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 41), Integer32()).setLabel("expPort-ext-temp-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_enabled.setDescription('External temperature probe alarm enabled(1) or disabled(0).')
expPort_ext_temp_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 42), Integer32()).setLabel("expPort-ext-temp-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_min.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_min.setDescription('The external temperature probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
expPort_ext_temp_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 43), Integer32()).setLabel("expPort-ext-temp-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_max.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_max.setDescription('The external temperature probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
expPort_ext_temp_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 44), Integer32()).setLabel("expPort-ext-temp-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
expPort_ext_temp_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 45), Integer32()).setLabel("expPort-ext-temp-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
expPort_ext_temp_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 46), Integer32()).setLabel("expPort-ext-temp-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_min_range.setDescription('The minimum temperature measureable by the temperature sensor, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
expPort_ext_temp_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 47), Integer32()).setLabel("expPort-ext-temp-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_temp_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_temp_max_range.setDescription('The maximum temperature measureable by the temperature sensor, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
expPort_ext_dry = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 60), Integer32()).setLabel("expPort-ext-dry").setMaxAccess("readonly")
if mibBuilder.loadTexts: expPort_ext_dry.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry.setDescription('The current value of the external dry contact sensor: 0=Open, 1=Closed, -1=N/A')
expPort_ext_dry_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 61), Integer32()).setLabel("expPort-ext-dry-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor: 0=Open, 1=Closed')
expPort_ext_dry_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 62), Integer32()).setLabel("expPort-ext-dry-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_enabled.setDescription('External dry contact sensor alarm enabled(1) or disabled(0).')
expPort_ext_dry_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 63), DisplayString()).setLabel("expPort-ext-dry-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_label.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_label.setDescription('The sensor name/label for the dry contact sensor')
expPort_ext_dry_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 64), DisplayString()).setLabel("expPort-ext-dry-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor')
expPort_ext_dry_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 65), DisplayString()).setLabel("expPort-ext-dry-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor')
expPort_ext_dry_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 66), Integer32()).setLabel("expPort-ext-dry-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor must read closed before the state is changed from open to closed.')
expPort_ext_dry_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 67), Integer32()).setLabel("expPort-ext-dry-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor must read openbefore the state is changed from closed to open.')
expPort_ext_dry_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 68), DisplayString()).setLabel("expPort-ext-dry-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_dry_response.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_dry_response.setDescription('The type of alert response for the dry contact sensor: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
expPort_ext_humi = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 80), Integer32()).setLabel("expPort-ext-humi").setMaxAccess("readonly")
if mibBuilder.loadTexts: expPort_ext_humi.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi.setDescription('The reading of the external humidity probe, in percent.')
expPort_ext_humi_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 81), Integer32()).setLabel("expPort-ext-humi-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_enabled.setDescription('External humidity probe alarm enabled(1) or disabled(0).')
expPort_ext_humi_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 82), Integer32()).setLabel("expPort-ext-humi-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_min.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_min.setDescription('The external humidity probe minimum, in percent.')
expPort_ext_humi_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 83), Integer32()).setLabel("expPort-ext-humi-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_max.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_max.setDescription('The external humidity probe maximum, in percent.')
expPort_ext_humi_uV_per_percent = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 84), Integer32()).setLabel("expPort-ext-humi-uV-per-percent").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_uV_per_percent.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_uV_per_percent.setDescription('The scaling factor used for the external humidity probe to convert microvolts measured from the humidity sensor into percent. Needs to be set based on the type of humidity sensor module installed.')
expPort_ext_humi_uV_at_0_percent = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 85), Integer32()).setLabel("expPort-ext-humi-uV-at-0-percent").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_uV_at_0_percent.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_uV_at_0_percent.setDescription('The offset used for the external humidity probe of microvolts measured from the humidity sensor at zero percent. Needs to be set based on the type of humidity sensor module installed.')
expPort_ext_humi_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 86), Integer32()).setLabel("expPort-ext-humi-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_min_range.setDescription('The minimum humidity measureable by the humidity sensor, in percent. Needs to be set based on the type of humidity sensor module installed.')
expPort_ext_humi_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 31, 1, 87), Integer32()).setLabel("expPort-ext-humi-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: expPort_ext_humi_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: expPort_ext_humi_max_range.setDescription('The maximum humidity measureable by the humidity sensor, in percent. Needs to be set based on the type of humidity sensor module installed.')
netbotz_crawlers = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528)).setLabel("netbotz-crawlers")
netBotz_prd_crl_mib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1)).setLabel("netBotz-prd-crl-mib2")
netBotz_prd_crl_mib2if = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 2)).setLabel("netBotz-prd-crl-mib2if")
netBotz_prd_crl_mib2_ping = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 3), Integer32()).setLabel("netBotz-prd-crl-mib2-ping").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_ping.setReference('NetBotz Device Ping')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_ping.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_ping.setDescription('NetBotz device ping. This object indicates the status of a ping on a device monitored by a NetBotz device.')
netBotz_prd_crl_mib2_uptime = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 8), TimeTicks()).setLabel("netBotz-prd-crl-mib2-uptime").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_uptime.setReference('NetBotz Uptime')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_uptime.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_uptime.setDescription('The uptime of a device monitored by a NetBotz device.')
netBotz_prd_crl_mib2_snmpstatus = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 9), DisplayString()).setLabel("netBotz-prd-crl-mib2-snmpstatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_snmpstatus.setReference('NetBotz SNMP Status')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_snmpstatus.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2_snmpstatus.setDescription('The SNMP status of a device monitored by a NetBotz device.')
netBotz_prd_crl_mib2if_opstatus = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 2, 6), Integer32()).setLabel("netBotz-prd-crl-mib2if-opstatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_mib2if_opstatus.setReference('NetBotz Operational Status')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2if_opstatus.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_mib2if_opstatus.setDescription('The operational status of a device monitored by a NetBotz device.')
netBotz_prd_crl_trap_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 20), Integer32()).setLabel("netBotz-prd-crl-trap-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_index.setReference('NetBotz Last Trap ID')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_index.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_index.setDescription('The ID of the crawler which sent the last trap.')
netBotz_prd_crl_trap_address = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 21), IpAddress()).setLabel("netBotz-prd-crl-trap-address").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_address.setReference('NetBotz Last Trap Address')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_address.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_address.setDescription('The IP address of the last trap.')
netBotz_prd_crl_trap_oid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 22), ObjectIdentifier()).setLabel("netBotz-prd-crl-trap-oid").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_oid.setReference('NetBotz Target Trap Attribute OID')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_oid.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_oid.setDescription('The object id of the attribute on the target device which is the concern of the last trap.')
netBotz_prd_crl_trap_botoid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 23), ObjectIdentifier()).setLabel("netBotz-prd-crl-trap-botoid").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_botoid.setReference('NetBotz Botz Trap Attribute OID')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_botoid.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_botoid.setDescription('The object id of the attribute on the NetBotz device which is the concern of the last trap.')
netBotz_prd_crl_trap_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 24), Integer32()).setLabel("netBotz-prd-crl-trap-value").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_value.setReference('NetBotz Trap Attribute Value')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_value.setDescription('The value of the attribute associated with the last trap.')
netBotz_prd_crl_trap_date = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 25), Integer32()).setLabel("netBotz-prd-crl-trap-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_date.setReference('NetBotz Trap Date')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_date.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_date.setDescription('The date and time of a specific trap. This field contains the number of seconds elapsed since midnight (00:00:00), January 1, 1970')
netBotz_prd_crl_trap_attrib = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 26), Integer32()).setLabel("netBotz-prd-crl-trap-attrib").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_attrib.setReference('NetBotz Trap Attribute ID Number')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_attrib.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_attrib.setDescription('The identification number of the attribute in error')
netBotz_prd_crl_trap_desc = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 21, 27), DisplayString()).setLabel("netBotz-prd-crl-trap-desc").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_crl_trap_desc.setReference('NetBotz Trap Attribute Description')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_desc.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_crl_trap_desc.setDescription('Description or name of the attribute in error')
netBotz_prd_crl_ping_offline_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 3) + (0,4)).setLabel("netBotz-prd-crl-ping-offline-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_ping_offline_trap.setDescription('NetBotz Ping Trap. This trap indicates that replies to a set of pings were not received from a monitored IP address.')
if mibBuilder.loadTexts: netBotz_prd_crl_ping_offline_trap.setReference('NetBotz Ping Offline Trap')
netBotz_prd_crl_ping_online_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 3) + (0,5)).setLabel("netBotz-prd-crl-ping-online-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_ping_online_trap.setDescription('NetBotz Ping Trap. This trap indicates that replies to a set of pings were received from a monitored IP address after a period when no replies had been received.')
if mibBuilder.loadTexts: netBotz_prd_crl_ping_online_trap.setReference('NetBotz Ping Online Trap')
netBotz_prd_crl_snmp_offline_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 9) + (0,4)).setLabel("netBotz-prd-crl-snmp-offline-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_snmp_offline_trap.setDescription('NetBotz SNMP Offline Trap. This trap indicates that an SNMP request was not possible on an IP address.')
if mibBuilder.loadTexts: netBotz_prd_crl_snmp_offline_trap.setReference('NetBotz SNMP Offline Trap')
netBotz_prd_crl_snmp_online_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 9) + (0,5)).setLabel("netBotz-prd-crl-snmp-online-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_snmp_online_trap.setDescription('NetBotz SNMP Online Trap. This trap indicates that an SNMP request succeeded on an IP address where it had previously failed.')
if mibBuilder.loadTexts: netBotz_prd_crl_snmp_online_trap.setReference('NetBotz SNMP Online Trap')
netBotz_prd_crl_uptime_online_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 1, 8) + (0,5)).setLabel("netBotz-prd-crl-uptime-online-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_uptime_online_trap.setDescription('NetBotz Uptime Trap. This trap indicates that a device restart has been detected due to the uptime of the device being reported as less than the previously reported reading.')
if mibBuilder.loadTexts: netBotz_prd_crl_uptime_online_trap.setReference('NetBotz Ping Uptime Trap')
netBotz_prd_crl_opstatus_offline_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 2, 6) + (0,4)).setLabel("netBotz-prd-crl-opstatus-offline-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_opstatus_offline_trap.setDescription('NetBotz Interface Offline Trap. This trap indicates that an interface on a device did not respond to an SNMP query on the ifAdminStatus or ifOperStatus objects.')
if mibBuilder.loadTexts: netBotz_prd_crl_opstatus_offline_trap.setReference('NetBotz Opstatus Offline Trap')
netBotz_prd_crl_opstatus_mismatch_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 2, 6) + (0,1)).setLabel("netBotz-prd-crl-opstatus-mismatch-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_opstatus_mismatch_trap.setDescription('NetBotz Interface Status Mismatch Trap. This trap indicates that the operational status of a device interface does not match the administrative status.')
if mibBuilder.loadTexts: netBotz_prd_crl_opstatus_mismatch_trap.setReference('NetBotz Interface Mismatch Trap')
netBotz_prd_crl_opstatus_match_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 20, 5528, 2, 6) + (0,2)).setLabel("netBotz-prd-crl-opstatus-match-trap").setObjects(("NETBOTZ-MIB", "netBotz_prd_crl_trap_index"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_address"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_oid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_botoid"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_value"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_date"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_attrib"), ("NETBOTZ-MIB", "netBotz_prd_crl_trap_desc"), ("NETBOTZ-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_crl_opstatus_match_trap.setDescription('NetBotz Interface Status Match Trap. This trap indicates that the operational status of a device interface now matches the administrative status. This trap indicates a transition from a state in which the administrative and operational status did not match.')
if mibBuilder.loadTexts: netBotz_prd_crl_opstatus_match_trap.setReference('NetBotz Interface Match Trap')
netBotz_snmp_traptarget = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 1), IpAddress()).setLabel("netBotz-snmp-traptarget").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_snmp_traptarget.setReference('NetBotz Trap Target')
if mibBuilder.loadTexts: netBotz_snmp_traptarget.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_snmp_traptarget.setDescription('Target of traps from the NetBotz device. This field contains the IP address where NetBotz traps are to be sent.')
netBotz_snmp_community = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 2), DisplayString()).setLabel("netBotz-snmp-community").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_snmp_community.setReference('Read/Write Community')
if mibBuilder.loadTexts: netBotz_snmp_community.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_snmp_community.setDescription('The read/write community of the NetBotz device.')
netBotz_snmp_timeout = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 3), Integer32()).setLabel("netBotz-snmp-timeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_snmp_timeout.setReference('SNMP Timeout')
if mibBuilder.loadTexts: netBotz_snmp_timeout.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_snmp_timeout.setDescription('SNMP Timeout period.')
netBotz_snmp_retries = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 4), Integer32()).setLabel("netBotz-snmp-retries").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_snmp_retries.setReference('SNMP Retries')
if mibBuilder.loadTexts: netBotz_snmp_retries.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_snmp_retries.setDescription('SNMP Retry count.')
netBotz_userid_1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 5), DisplayString()).setLabel("netBotz-userid-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_userid_1.setReference('UserID 1')
if mibBuilder.loadTexts: netBotz_userid_1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_userid_1.setDescription('The userID of the supervisor account (write-only).')
netBotz_password_1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 6), DisplayString()).setLabel("netBotz-password-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_password_1.setReference('Password 1')
if mibBuilder.loadTexts: netBotz_password_1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_password_1.setDescription('The password of the supervisor account (write-only).')
netBotz_userid_2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 7), DisplayString()).setLabel("netBotz-userid-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_userid_2.setReference('UserID 2')
if mibBuilder.loadTexts: netBotz_userid_2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_userid_2.setDescription('The userID of the full read access account (write-only).')
netBotz_password_2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 8), DisplayString()).setLabel("netBotz-password-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_password_2.setReference('Password 2')
if mibBuilder.loadTexts: netBotz_password_2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_password_2.setDescription('The password of the full read access account (write-only).')
netBotz_userid_3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 9), DisplayString()).setLabel("netBotz-userid-3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_userid_3.setReference('UserID 3')
if mibBuilder.loadTexts: netBotz_userid_3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_userid_3.setDescription('The userID of the minimum read access account (write-only).')
netBotz_password_3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 10), DisplayString()).setLabel("netBotz-password-3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_password_3.setReference('Password 3')
if mibBuilder.loadTexts: netBotz_password_3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_password_3.setDescription('The password of the minimum read access account (write-only).')
netBotz_snmp_traptarget2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 11), IpAddress()).setLabel("netBotz-snmp-traptarget2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_snmp_traptarget2.setReference('NetBotz Trap Target 2')
if mibBuilder.loadTexts: netBotz_snmp_traptarget2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_snmp_traptarget2.setDescription('Second target of traps from the NetBotz device. This field contains an additional IP address where NetBotz traps are to be sent.')
netBotz_snmp_read_community = MibScalar((1, 3, 6, 1, 4, 1, 5528, 40, 12), DisplayString()).setLabel("netBotz-snmp-read-community").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_snmp_read_community.setReference('Read-only Community')
if mibBuilder.loadTexts: netBotz_snmp_read_community.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_snmp_read_community.setDescription('The read-only community of the NetBotz device.')
device_crawlers_trap_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 20), Integer32()).setLabel("device-crawlers-trap-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_index.setReference('NetBotz Device Crawlers Last Trap ID')
if mibBuilder.loadTexts: device_crawlers_trap_index.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_index.setDescription('The ID of the device crawler which sent the last trap.')
device_crawlers_trap_address = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 21), IpAddress()).setLabel("device-crawlers-trap-address").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_address.setReference('NetBotz Device Crawlers Last Trap Address')
if mibBuilder.loadTexts: device_crawlers_trap_address.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_address.setDescription('The IP address of the appliance actually creating the last trap.')
device_crawlers_trap_oid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 22), ObjectIdentifier()).setLabel("device-crawlers-trap-oid").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_oid.setReference('NetBotz Device Crawlers Target Trap Attribute OID')
if mibBuilder.loadTexts: device_crawlers_trap_oid.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_oid.setDescription('The object id of the attribute on the device crawlers target device which is the concern of the last trap. The second to last element indicates the index of the source of the problem (1=ICMP Ping, 2=SNMP Agent Status, 256-10239=Network Interfaces 1-9984, 10240 and above, indicates Advanced crawlers data). The last element is the decimal representation of the IP address of the source of the problem.')
device_crawlers_trap_botoid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 23), ObjectIdentifier()).setLabel("device-crawlers-trap-botoid").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_botoid.setReference('NetBotz Device Crawlers Botz Trap Attribute OID')
if mibBuilder.loadTexts: device_crawlers_trap_botoid.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_botoid.setDescription('The object id of the device crawlers attribute on the NetBotz device which is the concern of the last trap.')
device_crawlers_trap_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 24), Integer32()).setLabel("device-crawlers-trap-value").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_value.setReference('NetBotz Device Crawlers Attribute Value')
if mibBuilder.loadTexts: device_crawlers_trap_value.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_value.setDescription('The integer value of the device crawlers attribute associated with the last trap.')
device_crawlers_trap_stringvalue = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 25), DisplayString()).setLabel("device-crawlers-trap-stringvalue").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_stringvalue.setReference('NetBotz Device Crawlers Attribute String Value')
if mibBuilder.loadTexts: device_crawlers_trap_stringvalue.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_stringvalue.setDescription('The string representation of the value of the device crawlers attribute associated with the last trap.')
device_crawlers_trap_date = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 26), Integer32()).setLabel("device-crawlers-trap-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_date.setReference('NetBotz Device Crawlers Trap Date')
if mibBuilder.loadTexts: device_crawlers_trap_date.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_date.setDescription('The date and time of a specific device crawlers trap. This field contains the number of seconds elapsed since midnight (00:00:00), January 1, 1970')
device_crawlers_trap_attrib_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 27), Integer32()).setLabel("device-crawlers-trap-attrib-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_trap_attrib_index.setReference('NetBotz Device Crawlers Trap Attribute ID Number')
if mibBuilder.loadTexts: device_crawlers_trap_attrib_index.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_trap_attrib_index.setDescription('The identification number of the device crawlers attribute in error')
device_crawlers_crawlers_trap_desc = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 2, 28), DisplayString()).setLabel("device-crawlers-crawlers-trap-desc").setMaxAccess("readonly")
if mibBuilder.loadTexts: device_crawlers_crawlers_trap_desc.setReference('NetBotz Device Crawlers Trap Attribute Description')
if mibBuilder.loadTexts: device_crawlers_crawlers_trap_desc.setStatus('mandatory')
if mibBuilder.loadTexts: device_crawlers_crawlers_trap_desc.setDescription('Description of the Device Crawlers Trap Attribute')
netBotz_device_crawlers_value_low_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2) + (0,1)).setLabel("netBotz-device-crawlers-value-low-alert-trap").setObjects(("NETBOTZ-MIB", "device_crawlers_trap_index"), ("NETBOTZ-MIB", "device_crawlers_trap_address"), ("NETBOTZ-MIB", "device_crawlers_trap_oid"), ("NETBOTZ-MIB", "device_crawlers_trap_botoid"), ("NETBOTZ-MIB", "device_crawlers_trap_value"), ("NETBOTZ-MIB", "device_crawlers_trap_stringvalue"), ("NETBOTZ-MIB", "device_crawlers_trap_date"), ("NETBOTZ-MIB", "device_crawlers_trap_attrib"), ("NETBOTZ-MIB", "device_crawlers_trap_desc"))
if mibBuilder.loadTexts: netBotz_device_crawlers_value_low_alert_trap.setDescription('NetBotz Device Crawlers Value Low Trap. This trap indicates that the lower limit on a monitored value has been exceeded.')
if mibBuilder.loadTexts: netBotz_device_crawlers_value_low_alert_trap.setReference('NetBotz Device Crawlers Value Low Trap')
netBotz_device_crawlers_value_high_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2) + (0,2)).setLabel("netBotz-device-crawlers-value-high-alert-trap").setObjects(("NETBOTZ-MIB", "device_crawlers_trap_index"), ("NETBOTZ-MIB", "device_crawlers_trap_address"), ("NETBOTZ-MIB", "device_crawlers_trap_oid"), ("NETBOTZ-MIB", "device_crawlers_trap_botoid"), ("NETBOTZ-MIB", "device_crawlers_trap_value"), ("NETBOTZ-MIB", "device_crawlers_trap_stringvalue"), ("NETBOTZ-MIB", "device_crawlers_trap_date"), ("NETBOTZ-MIB", "device_crawlers_trap_attrib"), ("NETBOTZ-MIB", "device_crawlers_trap_desc"))
if mibBuilder.loadTexts: netBotz_device_crawlers_value_high_alert_trap.setDescription('NetBotz Device Crawlers Value High Trap. This trap indicates that the upper limit on a monitored value has been exceeded.')
if mibBuilder.loadTexts: netBotz_device_crawlers_value_high_alert_trap.setReference('NetBotz Device Crawlers Value High Trap')
netBotz_device_crawlers_clear_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2) + (0,3)).setLabel("netBotz-device-crawlers-clear-alert-trap").setObjects(("NETBOTZ-MIB", "device_crawlers_trap_index"), ("NETBOTZ-MIB", "device_crawlers_trap_address"), ("NETBOTZ-MIB", "device_crawlers_trap_oid"), ("NETBOTZ-MIB", "device_crawlers_trap_botoid"), ("NETBOTZ-MIB", "device_crawlers_trap_value"), ("NETBOTZ-MIB", "device_crawlers_trap_stringvalue"), ("NETBOTZ-MIB", "device_crawlers_trap_date"), ("NETBOTZ-MIB", "device_crawlers_trap_attrib"), ("NETBOTZ-MIB", "device_crawlers_trap_desc"))
if mibBuilder.loadTexts: netBotz_device_crawlers_clear_alert_trap.setDescription('NetBotz Device Crawlers Clear Trap. This trap indicates that the previous alert condition has been cleared.')
if mibBuilder.loadTexts: netBotz_device_crawlers_clear_alert_trap.setReference('NetBotz Device Crawlers Clear Trap')
netBotz_device_crawlers_offline_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2) + (0,4)).setLabel("netBotz-device-crawlers-offline-alert-trap").setObjects(("NETBOTZ-MIB", "device_crawlers_trap_index"), ("NETBOTZ-MIB", "device_crawlers_trap_address"), ("NETBOTZ-MIB", "device_crawlers_trap_oid"), ("NETBOTZ-MIB", "device_crawlers_trap_botoid"), ("NETBOTZ-MIB", "device_crawlers_trap_value"), ("NETBOTZ-MIB", "device_crawlers_trap_stringvalue"), ("NETBOTZ-MIB", "device_crawlers_trap_date"), ("NETBOTZ-MIB", "device_crawlers_trap_attrib"), ("NETBOTZ-MIB", "device_crawlers_trap_desc"))
if mibBuilder.loadTexts: netBotz_device_crawlers_offline_alert_trap.setDescription('NetBotz Device Crawlers Offline Trap. This trap indicates that a monitored target could not be contacted.')
if mibBuilder.loadTexts: netBotz_device_crawlers_offline_alert_trap.setReference('NetBotz Device Crawlers Offline Trap')
netBotz_device_crawlers_online_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2) + (0,5)).setLabel("netBotz-device-crawlers-online-alert-trap").setObjects(("NETBOTZ-MIB", "device_crawlers_trap_index"), ("NETBOTZ-MIB", "device_crawlers_trap_address"), ("NETBOTZ-MIB", "device_crawlers_trap_oid"), ("NETBOTZ-MIB", "device_crawlers_trap_botoid"), ("NETBOTZ-MIB", "device_crawlers_trap_value"), ("NETBOTZ-MIB", "device_crawlers_trap_stringvalue"), ("NETBOTZ-MIB", "device_crawlers_trap_date"), ("NETBOTZ-MIB", "device_crawlers_trap_attrib"), ("NETBOTZ-MIB", "device_crawlers_trap_desc"))
if mibBuilder.loadTexts: netBotz_device_crawlers_online_alert_trap.setDescription('NetBotz Device Crawlers Online Trap. This trap indicates that a monitored target that previously could not be contacted has now been contacted successfully.')
if mibBuilder.loadTexts: netBotz_device_crawlers_online_alert_trap.setReference('NetBotz Device Crawlers Online Trap')
netBotz_device_crawlers_ifopstatus_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 2) + (0,8)).setLabel("netBotz-device-crawlers-ifopstatus-alert-trap").setObjects(("NETBOTZ-MIB", "device_crawlers_trap_index"), ("NETBOTZ-MIB", "device_crawlers_trap_address"), ("NETBOTZ-MIB", "device_crawlers_trap_oid"), ("NETBOTZ-MIB", "device_crawlers_trap_botoid"), ("NETBOTZ-MIB", "device_crawlers_trap_value"), ("NETBOTZ-MIB", "device_crawlers_trap_stringvalue"), ("NETBOTZ-MIB", "device_crawlers_trap_date"), ("NETBOTZ-MIB", "device_crawlers_trap_attrib"), ("NETBOTZ-MIB", "device_crawlers_trap_desc"))
if mibBuilder.loadTexts: netBotz_device_crawlers_ifopstatus_alert_trap.setDescription("NetBotz Device Crawlers Interface Operational Status Trap. This trap indicates that one or more of a monitored target's network interfaces operational status is not equal to the desired status.")
if mibBuilder.loadTexts: netBotz_device_crawlers_ifopstatus_alert_trap.setReference('NetBotz Device Crawlers Interface Operational Status Trap')
branch_checker_trap_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 20), Integer32()).setLabel("branch-checker-trap-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_index.setReference('NetBotz Branch Checker Last Trap ID')
if mibBuilder.loadTexts: branch_checker_trap_index.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_index.setDescription('The ID of the branch checker which sent the last trap.')
branch_checker_trap_address = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 21), IpAddress()).setLabel("branch-checker-trap-address").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_address.setReference('NetBotz Branch Checker Last Trap Address')
if mibBuilder.loadTexts: branch_checker_trap_address.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_address.setDescription('The IP address of the appliance actually creating the last trap.')
branch_checker_trap_oid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 22), ObjectIdentifier()).setLabel("branch-checker-trap-oid").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_oid.setReference('NetBotz Branch Checker Target Trap Attribute OID')
if mibBuilder.loadTexts: branch_checker_trap_oid.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_oid.setDescription('The object id of the attribute on the branch checker target device which is the concern of the last trap The second to last element is the index of the source of the problem (256-260=SMTP Server, 1024-1026=DNS Server, 1536-1538=Web Server, 2048-2052=Generic Server). The last element is the decimal representation of the IP address of the source of the problem.')
branch_checker_trap_botoid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 23), ObjectIdentifier()).setLabel("branch-checker-trap-botoid").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_botoid.setReference('NetBotz Branch Checker Botz Trap Attribute OID')
if mibBuilder.loadTexts: branch_checker_trap_botoid.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_botoid.setDescription('The object id of the branch checker attribute on the NetBotz device which is the concern of the last trap. The second to last element is the index of the source of the problem (256-260=SMTP Server, 1024-1026=DNS Server, 1536-1538=Web Server, 2048-2052=Generic Server). The last element is the decimal representation of the IP address of the source of the problem.')
branch_checker_trap_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 24), Integer32()).setLabel("branch-checker-trap-value").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_value.setReference('NetBotz Branch Checker Attribute Value')
if mibBuilder.loadTexts: branch_checker_trap_value.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_value.setDescription('The integer value of the branch checker attribute associated with the last trap.')
branch_checker_trap_stringvalue = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 25), DisplayString()).setLabel("branch-checker-trap-stringvalue").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_stringvalue.setReference('NetBotz Branch Checker Attribute String Value')
if mibBuilder.loadTexts: branch_checker_trap_stringvalue.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_stringvalue.setDescription('The string representation of the value of the branch checker attribute associated with the last trap.')
branch_checker_trap_date = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 26), Integer32()).setLabel("branch-checker-trap-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_date.setReference('NetBotz Branch Checker Trap Date')
if mibBuilder.loadTexts: branch_checker_trap_date.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_date.setDescription('The date and time of a specific branch checker trap. This field contains the number of seconds elapsed since midnight (00:00:00), January 1, 1970')
branch_checker_trap_attrib_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 27), Integer32()).setLabel("branch-checker-trap-attrib-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_attrib_index.setReference('NetBotz Branch Checker Trap Attribute ID Number')
if mibBuilder.loadTexts: branch_checker_trap_attrib_index.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_attrib_index.setDescription('The identification number of the branch checker attribute in error')
branch_checker_trap_desc = MibScalar((1, 3, 6, 1, 4, 1, 5528, 61, 3, 28), DisplayString()).setLabel("branch-checker-trap-desc").setMaxAccess("readonly")
if mibBuilder.loadTexts: branch_checker_trap_desc.setReference('NetBotz Branch Checker Trap Attribute Description')
if mibBuilder.loadTexts: branch_checker_trap_desc.setStatus('mandatory')
if mibBuilder.loadTexts: branch_checker_trap_desc.setDescription('Description of the Branch Checker Trap Attribute')
netBotz_branch_checker_clear_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 3) + (0,3)).setLabel("netBotz-branch-checker-clear-alert-trap").setObjects(("NETBOTZ-MIB", "branch_checker_trap_index"), ("NETBOTZ-MIB", "branch_checker_trap_address"), ("NETBOTZ-MIB", "branch_checker_trap_oid"), ("NETBOTZ-MIB", "branch_checker_trap_botoid"), ("NETBOTZ-MIB", "branch_checker_trap_value"), ("NETBOTZ-MIB", "branch_checker_trap_stringvalue"), ("NETBOTZ-MIB", "branch_checker_trap_date"), ("NETBOTZ-MIB", "branch_checker_trap_attrib"), ("NETBOTZ-MIB", "branch_checker_trap_desc"))
if mibBuilder.loadTexts: netBotz_branch_checker_clear_alert_trap.setDescription('NetBotz Branch Checker Clear Trap. This trap indicates that the previous alert condition has been cleared.')
if mibBuilder.loadTexts: netBotz_branch_checker_clear_alert_trap.setReference('NetBotz Branch Checker Clear Trap')
netBotz_branch_checker_offline_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 3) + (0,4)).setLabel("netBotz-branch-checker-offline-alert-trap").setObjects(("NETBOTZ-MIB", "branch_checker_trap_index"), ("NETBOTZ-MIB", "branch_checker_trap_address"), ("NETBOTZ-MIB", "branch_checker_trap_oid"), ("NETBOTZ-MIB", "branch_checker_trap_botoid"), ("NETBOTZ-MIB", "branch_checker_trap_value"), ("NETBOTZ-MIB", "branch_checker_trap_stringvalue"), ("NETBOTZ-MIB", "branch_checker_trap_date"), ("NETBOTZ-MIB", "branch_checker_trap_attrib"), ("NETBOTZ-MIB", "branch_checker_trap_desc"))
if mibBuilder.loadTexts: netBotz_branch_checker_offline_alert_trap.setDescription('NetBotz Branch Checker Offline Trap. This trap indicates that a monitored target could not be contacted.')
if mibBuilder.loadTexts: netBotz_branch_checker_offline_alert_trap.setReference('NetBotz Branch Checker Offline Trap')
netBotz_branch_checker_online_alert_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 3) + (0,5)).setLabel("netBotz-branch-checker-online-alert-trap").setObjects(("NETBOTZ-MIB", "branch_checker_trap_index"), ("NETBOTZ-MIB", "branch_checker_trap_address"), ("NETBOTZ-MIB", "branch_checker_trap_oid"), ("NETBOTZ-MIB", "branch_checker_trap_botoid"), ("NETBOTZ-MIB", "branch_checker_trap_value"), ("NETBOTZ-MIB", "branch_checker_trap_stringvalue"), ("NETBOTZ-MIB", "branch_checker_trap_date"), ("NETBOTZ-MIB", "branch_checker_trap_attrib"), ("NETBOTZ-MIB", "branch_checker_trap_desc"))
if mibBuilder.loadTexts: netBotz_branch_checker_online_alert_trap.setDescription('NetBotz Branch Checker Online Trap. This trap indicates that a monitored target that previously could not be contacted has now been contacted successfully.')
if mibBuilder.loadTexts: netBotz_branch_checker_online_alert_trap.setReference('NetBotz Branch Checker Online Trap')
netBotz_branch_checker_target_error_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 60, 5528, 3) + (0,12)).setLabel("netBotz-branch-checker-target-error-trap").setObjects(("NETBOTZ-MIB", "branch_checker_trap_index"), ("NETBOTZ-MIB", "branch_checker_trap_address"), ("NETBOTZ-MIB", "branch_checker_trap_oid"), ("NETBOTZ-MIB", "branch_checker_trap_botoid"), ("NETBOTZ-MIB", "branch_checker_trap_value"), ("NETBOTZ-MIB", "branch_checker_trap_stringvalue"), ("NETBOTZ-MIB", "branch_checker_trap_date"), ("NETBOTZ-MIB", "branch_checker_trap_attrib"), ("NETBOTZ-MIB", "branch_checker_trap_desc"))
if mibBuilder.loadTexts: netBotz_branch_checker_target_error_trap.setDescription('NetBotz Branch Target Error Trap. This trap indicates that a monitored target could be contacted, but not withing the timeout period specified.')
if mibBuilder.loadTexts: netBotz_branch_checker_target_error_trap.setReference('NetBotz Branch Target Error Trap')
mibBuilder.exportSymbols("NETBOTZ-MIB", netBotz_prd_bot_ext_temp6_low_trap=netBotz_prd_bot_ext_temp6_low_trap, netBotz_prd_crltrap=netBotz_prd_crltrap, branch_checker_trap_attrib=branch_checker_trap_attrib, netBotz_prd_bot_audio_traps=netBotz_prd_bot_audio_traps, netBotz_prd_bot_amps1_min=netBotz_prd_bot_amps1_min, expPort_ext_humi_max=expPort_ext_humi_max, netBotz_prd_bot_camera_motion_traps=netBotz_prd_bot_camera_motion_traps, netBotz_prd_bot_ext_humi2_traps=netBotz_prd_bot_ext_humi2_traps, netBotz_prd_bot_amps3_max=netBotz_prd_bot_amps3_max, netBotz_prd_bot_ext_humi1_low_trap=netBotz_prd_bot_ext_humi1_low_trap, expPort_ext_temp_uV_at_0_degreeC=expPort_ext_temp_uV_at_0_degreeC, netBotz_dev_host=netBotz_dev_host, netBotz_prd_bot_ext_humi1_sensor_replugged=netBotz_prd_bot_ext_humi1_sensor_replugged, netBotz_prd_bot_ext_temp3_min=netBotz_prd_bot_ext_temp3_min, netBotz_password_1=netBotz_password_1, netBotz_prd_bot_amp2_total_amp_seconds=netBotz_prd_bot_amp2_total_amp_seconds, netBotz_prd_bot_humidity_min=netBotz_prd_bot_humidity_min, netBotz_prd_bot_ext_humi2_high_trap=netBotz_prd_bot_ext_humi2_high_trap, netBotz_prd_bot_trap_oid=netBotz_prd_bot_trap_oid, netBotz_guibar_color=netBotz_guibar_color, netBotz_prd_bot_ext_temp5_low_trap=netBotz_prd_bot_ext_temp5_low_trap, netBotz_prd_bot_humidity=netBotz_prd_bot_humidity, netBotz_prd_bot_ext_temp2_sensor_unplugged=netBotz_prd_bot_ext_temp2_sensor_unplugged, netBotz_sensor_ftp_site=netBotz_sensor_ftp_site, netBotz_dev_secondaryemail=netBotz_dev_secondaryemail, netBotz_prd_bot_amps2_max_range=netBotz_prd_bot_amps2_max_range, netBotz_prd_bot_ext_port2_module_type=netBotz_prd_bot_ext_port2_module_type, netBotz_prd_bot_ext_temp3_enabled=netBotz_prd_bot_ext_temp3_enabled, netBotz_prd_bot_ext_humi7_trap_clear=netBotz_prd_bot_ext_humi7_trap_clear, netBotz_snmp_read_community=netBotz_snmp_read_community, netBotz_prd_bot_ext_humi2_sensor_replugged=netBotz_prd_bot_ext_humi2_sensor_replugged, netBotz_snmp_community=netBotz_snmp_community, netBotz_prd_bot_ext_dry2_triggered_trap=netBotz_prd_bot_ext_dry2_triggered_trap, netBotz_prd_bot_cam_pix_for_duration_of_alerts=netBotz_prd_bot_cam_pix_for_duration_of_alerts, netBotz_prd_bot_amp3_sensor_unplugged=netBotz_prd_bot_amp3_sensor_unplugged, netBotz_prd_bot_amps1_uV_per_10mA=netBotz_prd_bot_amps1_uV_per_10mA, netBotz_prd_bot_ext_temp2_high_trap=netBotz_prd_bot_ext_temp2_high_trap, netBotz_prd_bot_amps1_enabled=netBotz_prd_bot_amps1_enabled, netBotz_dev_version=netBotz_dev_version, netBotz_prd_bot_ext_dry6_triggered_trap=netBotz_prd_bot_ext_dry6_triggered_trap, netBotz_prd_bot_amps2_uV_per_10mA=netBotz_prd_bot_amps2_uV_per_10mA, netBotz_prd_bot_ext_humi4_high_trap=netBotz_prd_bot_ext_humi4_high_trap, netBotz_metric_onboard_audio_secs=netBotz_metric_onboard_audio_secs, branch_checker_trap=branch_checker_trap, netBotz_prd_bot_ext_temp5_high_trap=netBotz_prd_bot_ext_temp5_high_trap, netBotz_prd_bot_amp_total_high_trap=netBotz_prd_bot_amp_total_high_trap, netBotz_prd_bot_ext_dry4_trap_clear=netBotz_prd_bot_ext_dry4_trap_clear, device_crawlers_crawlers_trap_desc=device_crawlers_crawlers_trap_desc, netBotz_metric_onboard=netBotz_metric_onboard, netBotz_prd_bot_ext_temp1_min_range=netBotz_prd_bot_ext_temp1_min_range, netBotz_prd_bot_ext_temp3_uV_per_degreeC=netBotz_prd_bot_ext_temp3_uV_per_degreeC, netBotz_prd_WallBotz_300C=netBotz_prd_WallBotz_300C, netBotz_prd_crl_trap_desc=netBotz_prd_crl_trap_desc, netBotz_prd_crl_uptime_online_trap=netBotz_prd_crl_uptime_online_trap, netBotz_prd_RackBotz_400=netBotz_prd_RackBotz_400, netBotz_prd_bot_amp1_sensor_replugged=netBotz_prd_bot_amp1_sensor_replugged, netBotz_snmp_traptarget=netBotz_snmp_traptarget, netBotz_prd_bot_amps2=netBotz_prd_bot_amps2, netBotz_prd_bot_ext_humi1_trap_clear=netBotz_prd_bot_ext_humi1_trap_clear, expPort_ext_humi_min_range=expPort_ext_humi_min_range, netBotz_prd_bot_cam_motion_sensitivity=netBotz_prd_bot_cam_motion_sensitivity, netBotz_device_crawlers_offline_alert_trap=netBotz_device_crawlers_offline_alert_trap, netBotz_prd_bot_ext_dry1_alarm_value=netBotz_prd_bot_ext_dry1_alarm_value, device_crawlers_trap_attrib=device_crawlers_trap_attrib, netBotz_sensor_data_url=netBotz_sensor_data_url, netBotz_dev_registered=netBotz_dev_registered, netBotz_prd_bot_doorajar=netBotz_prd_bot_doorajar, netBotz_prd_bot_amp6_low_trap=netBotz_prd_bot_amp6_low_trap, netBotz_prd_bot_amp5_traps=netBotz_prd_bot_amp5_traps, netBotz_prd_bot_audio_trap_clear=netBotz_prd_bot_audio_trap_clear, netBotz_prd_crl_opstatus_match_trap=netBotz_prd_crl_opstatus_match_trap, netBotz_metric_onboard_audio=netBotz_metric_onboard_audio, netBotz_prd_bot_amp7_high_trap=netBotz_prd_bot_amp7_high_trap, expPort_amps_min=expPort_amps_min, netBotz_prd_bot_ext_dry3_traps=netBotz_prd_bot_ext_dry3_traps, netBotz_alert_url=netBotz_alert_url, netBotz_prd_bot_amps_total_min=netBotz_prd_bot_amps_total_min, netBotz_prd_bot_ext_temp7_traps=netBotz_prd_bot_ext_temp7_traps, netBotz_prd_bot_ext_dry1_trap_clear=netBotz_prd_bot_ext_dry1_trap_clear, netbotz_crawlers=netbotz_crawlers, netBotz_prd_crl_trap_address=netBotz_prd_crl_trap_address, netBotz_dev_gateway=netBotz_dev_gateway, netBotz_device=netBotz_device, netBotz_alert_ftp_logon=netBotz_alert_ftp_logon, netBotz_prd_bot_doorpic_count=netBotz_prd_bot_doorpic_count, netBotz_picture_alert_url_logon=netBotz_picture_alert_url_logon, netBotz_prd_bot_ext_temp4_high_trap=netBotz_prd_bot_ext_temp4_high_trap, netBotz_products=netBotz_products, netBotz_dev_socks_password=netBotz_dev_socks_password, netBotz_metric_onboard_cam_motion_sensitivity=netBotz_metric_onboard_cam_motion_sensitivity, expPort_ext_humi_uV_per_percent=expPort_ext_humi_uV_per_percent, netBotz_sensor_ftp_filename=netBotz_sensor_ftp_filename, expPort_ext_dry_alarm_value=expPort_ext_dry_alarm_value, netBotz_prd_bot_cam_motion=netBotz_prd_bot_cam_motion, netBotz_prd_bot_ext_temp2_uV_per_degreeC=netBotz_prd_bot_ext_temp2_uV_per_degreeC, netBotz_prd_crl_snmp_offline_trap=netBotz_prd_crl_snmp_offline_trap, netBotz_prd_bot_ext_temp7_low_trap=netBotz_prd_bot_ext_temp7_low_trap, netBotz_metric_onboard_switch_state=netBotz_metric_onboard_switch_state, netBotz_timezone=netBotz_timezone, netBotz_prd_bot_amp7_traps=netBotz_prd_bot_amp7_traps, netBotz_prd_bot_ext_dry3_close_to_open_millis=netBotz_prd_bot_ext_dry3_close_to_open_millis, netBotz_dev_domain=netBotz_dev_domain, netBotz_prd_WallBotz_310C=netBotz_prd_WallBotz_310C, netBotz_dev_loglevel=netBotz_dev_loglevel, netBotz_prd_bot_camera_motion_trap_clear=netBotz_prd_bot_camera_motion_trap_clear, netBotz_prd_RackBotz_300U=netBotz_prd_RackBotz_300U, expPort_ext_dry_open_to_close_millis=expPort_ext_dry_open_to_close_millis, netBotz_prd_bot_amp4_total_amp_seconds_since_time=netBotz_prd_bot_amp4_total_amp_seconds_since_time, netBotz_dev_tertiarydns=netBotz_dev_tertiarydns, netBotz_prd_bot_trap_date=netBotz_prd_bot_trap_date, netBotz_prd_bot_ext_temp1_sensor_unplugged=netBotz_prd_bot_ext_temp1_sensor_unplugged, netBotz_dev_netmask=netBotz_dev_netmask, netBotz_prd_bot_ext_humi7_sensor_replugged=netBotz_prd_bot_ext_humi7_sensor_replugged, netBotz_prd_bot_ext_dry1_enabled=netBotz_prd_bot_ext_dry1_enabled, netBotz_prd_bot_amp1_sensor_unplugged=netBotz_prd_bot_amp1_sensor_unplugged, netBotz_prd_bot_ext_dry3_trap_clear=netBotz_prd_bot_ext_dry3_trap_clear, netBotz_prd_bot_ext_temp7_high_trap=netBotz_prd_bot_ext_temp7_high_trap, netBotz_prd_bot_ext_temp4_low_trap=netBotz_prd_bot_ext_temp4_low_trap, netBotz_branch_checker_target_error_trap=netBotz_branch_checker_target_error_trap, netBotz_prd_bot_ext_humi1_high_trap=netBotz_prd_bot_ext_humi1_high_trap, expPort_ext_temp_min_range=expPort_ext_temp_min_range, netBotz_prd_bot_amp3_traps=netBotz_prd_bot_amp3_traps, expPort_ext_dry_response=expPort_ext_dry_response, device_crawlers_trap=device_crawlers_trap, netBotz_prd_bot_ext_dry4=netBotz_prd_bot_ext_dry4, netBotz_prd_bot_ext_dry1_triggered_trap=netBotz_prd_bot_ext_dry1_triggered_trap, netBotz_device_crawlers_value_low_alert_trap=netBotz_device_crawlers_value_low_alert_trap, branch_checker_trap_index=branch_checker_trap_index, netBotz_prd_bot_ext_temp1_max_range=netBotz_prd_bot_ext_temp1_max_range, netBotz_metric_onboard_model=netBotz_metric_onboard_model, netBotz_prd_bot_door_trap_tripped=netBotz_prd_bot_door_trap_tripped, branch_checker_trap_oid=branch_checker_trap_oid, netBotz_prd_bot_trap_address=netBotz_prd_bot_trap_address, netBotz_prd_bot_amps3_max_range=netBotz_prd_bot_amps3_max_range, netBotz_prd_crl_trap_date=netBotz_prd_crl_trap_date, expPort_ext_dry_enabled=expPort_ext_dry_enabled, netBotz_prd_bot_ext_dry2_response=netBotz_prd_bot_ext_dry2_response, netBotz_prd_bot_ext_temp4_sensor_unplugged=netBotz_prd_bot_ext_temp4_sensor_unplugged, netBotz_prd_bot_amp4_traps=netBotz_prd_bot_amp4_traps, netBotz_prd_bot_ext_dry2_close_to_open_millis=netBotz_prd_bot_ext_dry2_close_to_open_millis, netBotz_prd_bot_audio_secs=netBotz_prd_bot_audio_secs, netBotz_prd_bot_offline_trap=netBotz_prd_bot_offline_trap, netBotz_prd_bot_amps_total_enabled=netBotz_prd_bot_amps_total_enabled, netBotz_prd_bot_amp3_trap_clear=netBotz_prd_bot_amp3_trap_clear, netBotz_prd_bot_ext_temp5_trap_clear=netBotz_prd_bot_ext_temp5_trap_clear, netBotz_prd_bot_amp_total_traps=netBotz_prd_bot_amp_total_traps, netBotz_dev_primaryemail=netBotz_dev_primaryemail, netBotz_prd_bot_amp_total_low_trap=netBotz_prd_bot_amp_total_low_trap, netBotz_prd_bot_audio=netBotz_prd_bot_audio, netBotz_reg=netBotz_reg, netBotz_device_crawlers_ifopstatus_alert_trap=netBotz_device_crawlers_ifopstatus_alert_trap, netBotz_prd_bot_temperature_high_trap=netBotz_prd_bot_temperature_high_trap, netBotz_prd_bot_airflow_mins=netBotz_prd_bot_airflow_mins, netBotz_metric_onboard_temp_min=netBotz_metric_onboard_temp_min, netBotz_prd_bot_temperature_low_trap=netBotz_prd_bot_temperature_low_trap, netBotz_prd_bot_ext_dry2_trap_clear=netBotz_prd_bot_ext_dry2_trap_clear, netBotz_branch_checker_online_alert_trap=netBotz_branch_checker_online_alert_trap, netBotz_prd_bot_ext_dry3_alarm_value=netBotz_prd_bot_ext_dry3_alarm_value, expPort_module_type=expPort_module_type, netBotz_prd_bot_ext_humi5_high_trap=netBotz_prd_bot_ext_humi5_high_trap, netBotz_prd_bot_switch_state=netBotz_prd_bot_switch_state, netBotz_sensor_data_url_flags=netBotz_sensor_data_url_flags, netBotz_prd_bot_ext_humi4_traps=netBotz_prd_bot_ext_humi4_traps, netBotz_ismetric=netBotz_ismetric, netBotz_prd_bot_temp_enabled=netBotz_prd_bot_temp_enabled, netBotz_prd_bot_ext_temp2_traps=netBotz_prd_bot_ext_temp2_traps, netBotz_prd_bot_ext_temp3_uV_at_0_degreeC=netBotz_prd_bot_ext_temp3_uV_at_0_degreeC, netBotz_prd_bot_ext_humi7_sensor_unplugged=netBotz_prd_bot_ext_humi7_sensor_unplugged, netBotz_prd_WallBotz_300B=netBotz_prd_WallBotz_300B, netBotz_prd_bot_ext_temp5_traps=netBotz_prd_bot_ext_temp5_traps, netBotz_color_balance=netBotz_color_balance, netBotz_prd_bot_humidity_high_trap=netBotz_prd_bot_humidity_high_trap, netBotz_prd_bot_amps1=netBotz_prd_bot_amps1, netBotz_prd_bot_trap_clear=netBotz_prd_bot_trap_clear, netBotz_prd_bot_ext_humi3_sensor_replugged=netBotz_prd_bot_ext_humi3_sensor_replugged, expPort_ext_dry=expPort_ext_dry, netBotz_prd_bot_amp5_sensor_unplugged=netBotz_prd_bot_amp5_sensor_unplugged, netBotz_prd_RackBotz_300=netBotz_prd_RackBotz_300, netBotz_prd_bot_ext_dry7_triggered_trap=netBotz_prd_bot_ext_dry7_triggered_trap, netBotz_prd_bot_ext_temp5_sensor_unplugged=netBotz_prd_bot_ext_temp5_sensor_unplugged, netBotz_prd_WallBotz_300=netBotz_prd_WallBotz_300, device_crawlers_trap_attrib_index=device_crawlers_trap_attrib_index, netBotz_prd_bot_ext_temp6_sensor_replugged=netBotz_prd_bot_ext_temp6_sensor_replugged, netBotz_prd_bot_ext_dry2_label=netBotz_prd_bot_ext_dry2_label, netBotz_locale=netBotz_locale, netBotz_prd_bot_ext_humi7_low_trap=netBotz_prd_bot_ext_humi7_low_trap, netBotz_prd_bot_ext_dry1_open_to_close_millis=netBotz_prd_bot_ext_dry1_open_to_close_millis, netBotz_prd_bot_ext_temp4_traps=netBotz_prd_bot_ext_temp4_traps, netBotz_prd_bot_ext_dry3_response=netBotz_prd_bot_ext_dry3_response, netBotz_prd_bot_ext_temp2_sensor_replugged=netBotz_prd_bot_ext_temp2_sensor_replugged, netBotz_prd_bot_air_enabled=netBotz_prd_bot_air_enabled, netBotz_prd_bot_ext_temp1_uV_per_degreeC=netBotz_prd_bot_ext_temp1_uV_per_degreeC, netBotz_userid_3=netBotz_userid_3, netBotz_prd_bot_temperature_traps=netBotz_prd_bot_temperature_traps, netBotz_prd_bot_audio_level=netBotz_prd_bot_audio_level, netBotz_sensor_ftp_period=netBotz_sensor_ftp_period, netBotz_prd_bot_temp_max=netBotz_prd_bot_temp_max, netBotz_metric=netBotz_metric, expPort_ext_temp_min=expPort_ext_temp_min, netBotz_prd_WallBotz_400C=netBotz_prd_WallBotz_400C, netBotz_use_syslog=netBotz_use_syslog, netBotz_prd_bot_ext_dry4_enabled=netBotz_prd_bot_ext_dry4_enabled, netBotz_prd_bot_ext_dry1_close_to_open_millis=netBotz_prd_bot_ext_dry1_close_to_open_millis, expPortTable=expPortTable, netBotz_metric_onboard_airflow=netBotz_metric_onboard_airflow, netBotz_prd_crl_snmp_online_trap=netBotz_prd_crl_snmp_online_trap, netBotz_prd_bot_ext_dry5_triggered_trap=netBotz_prd_bot_ext_dry5_triggered_trap, expPortEntry=expPortEntry, netBotz_prd_bot_ext_temp3_max_range=netBotz_prd_bot_ext_temp3_max_range, netBotz_prd_WallBotz_300BC=netBotz_prd_WallBotz_300BC, netBotz_prd_RackBotz_300UC=netBotz_prd_RackBotz_300UC, netBotz_prd_bot_ext_dry1=netBotz_prd_bot_ext_dry1, netBotz_userid_2=netBotz_userid_2, netBotz_prd_RackBotz_310C=netBotz_prd_RackBotz_310C, netBotz_prd_bot_amp6_traps=netBotz_prd_bot_amp6_traps, netBotz_alert_ftp_site=netBotz_alert_ftp_site, netBotz_prd_bot_camera_motion_trap_tripped=netBotz_prd_bot_camera_motion_trap_tripped, netBotz_prd_bot_ext_dry4_alarm_value=netBotz_prd_bot_ext_dry4_alarm_value, netBotz_prd_bot_ext_humi3_high_trap=netBotz_prd_bot_ext_humi3_high_trap, netBotz_prd_bot_amp7_low_trap=netBotz_prd_bot_amp7_low_trap, device_crawlers_trap_address=device_crawlers_trap_address, netBotz_prd_bot_amp1_trap_clear=netBotz_prd_bot_amp1_trap_clear, netBotz_prd_bot_traps=netBotz_prd_bot_traps, netBotz_prd_bot_ext_dry2_closed_label=netBotz_prd_bot_ext_dry2_closed_label, netBotz_prd_bot_ext_temp3_traps=netBotz_prd_bot_ext_temp3_traps, expPort_ext_temp_max=expPort_ext_temp_max, netBotz_prd_bot_door_traps=netBotz_prd_bot_door_traps, netBotz_prd_bot_ext_temp1_sensor_replugged=netBotz_prd_bot_ext_temp1_sensor_replugged, netBotz_prd_bot_temp=netBotz_prd_bot_temp, netBotz_alert_ftp_path=netBotz_alert_ftp_path, netBotz_device_crawlers_value_high_alert_trap=netBotz_device_crawlers_value_high_alert_trap, netBotz_prd_bot_high_trap=netBotz_prd_bot_high_trap, netBotz_prd_bot_ext_humi6_high_trap=netBotz_prd_bot_ext_humi6_high_trap, netBotz_prd_bot_amp1_total_amp_seconds=netBotz_prd_bot_amp1_total_amp_seconds, netBotz_password_2=netBotz_password_2, netBotz_prd_bot_amp_total_trap_clear=netBotz_prd_bot_amp_total_trap_clear, netBotz_prd_bot_amps2_min=netBotz_prd_bot_amps2_min, netBotz_prd_bot_ext_dry3_enabled=netBotz_prd_bot_ext_dry3_enabled, netBotz_prd_RackBotz_310=netBotz_prd_RackBotz_310, netBotz_prd_bot_camera_event_autocycle=netBotz_prd_bot_camera_event_autocycle, netBotz_prd_bot_ext_temp3_sensor_replugged=netBotz_prd_bot_ext_temp3_sensor_replugged, netBotz_prd_bot_amp5_trap_clear=netBotz_prd_bot_amp5_trap_clear, netBotz_prd_bot_ext_dry5_traps=netBotz_prd_bot_ext_dry5_traps, netBotz_prd_bot_trap_value=netBotz_prd_bot_trap_value, netBotz_prd_bot_ext_temp3_max=netBotz_prd_bot_ext_temp3_max, netBotz_prd_bot_ext_temp6_trap_clear=netBotz_prd_bot_ext_temp6_trap_clear, netBotz_prd_bot_ext_humi1_traps=netBotz_prd_bot_ext_humi1_traps, netBotz_dev_socks_server=netBotz_dev_socks_server, netBotz_prd_bot_ext_dry6_traps=netBotz_prd_bot_ext_dry6_traps, netBotz_prd_bot_ext_humi5_sensor_unplugged=netBotz_prd_bot_ext_humi5_sensor_unplugged, netBotz_prd_bot_ext_temp2_uV_at_0_degreeC=netBotz_prd_bot_ext_temp2_uV_at_0_degreeC, device_crawlers_trap_target_index=device_crawlers_trap_target_index, netBotz_prd_bot_amps3_min=netBotz_prd_bot_amps3_min, netBotz_dev_smtp=netBotz_dev_smtp)
mibBuilder.exportSymbols("NETBOTZ-MIB", netBotz_prd_RackBotz_300UE=netBotz_prd_RackBotz_300UE, netBotz_prd_bot_ext_dry2_alarm_value=netBotz_prd_bot_ext_dry2_alarm_value, netBotz_prd_bot_airflow=netBotz_prd_bot_airflow, netBotz_prd_bot_ext_humi5_sensor_replugged=netBotz_prd_bot_ext_humi5_sensor_replugged, netBotz_prd_bot_amp6_trap_clear=netBotz_prd_bot_amp6_trap_clear, netBotz_prd_crl_mib2if_opstatus=netBotz_prd_crl_mib2if_opstatus, netBotz_prd_bot_ext_dry3_closed_label=netBotz_prd_bot_ext_dry3_closed_label, netBotz_prd_bot_low_trap=netBotz_prd_bot_low_trap, netBotz_prd_bot_ext_humi2_low_trap=netBotz_prd_bot_ext_humi2_low_trap, netBotz_prd_bot_ext_humi3_trap_clear=netBotz_prd_bot_ext_humi3_trap_clear, netBotz_prd_crl_mib2_uptime=netBotz_prd_crl_mib2_uptime, netBotz_prd_bot_cam_motion_enabled=netBotz_prd_bot_cam_motion_enabled, netBotz_prd_bot_ext_temp2_max_range=netBotz_prd_bot_ext_temp2_max_range, netBotz_prd_bot_amps4_max=netBotz_prd_bot_amps4_max, netBotz_prd_bot_ext_temp2_enabled=netBotz_prd_bot_ext_temp2_enabled, netBotz_prd_crl_opstatus_mismatch_trap=netBotz_prd_crl_opstatus_mismatch_trap, netBotz_prd_bot_ext_humi3_traps=netBotz_prd_bot_ext_humi3_traps, netBotz_prd_WallBotz_310=netBotz_prd_WallBotz_310, netBotz_prd_bot_camera_is_flipped=netBotz_prd_bot_camera_is_flipped, netBotz_alert_ftp_filename=netBotz_alert_ftp_filename, netBotz_prd_bot_ext_humi4_trap_clear=netBotz_prd_bot_ext_humi4_trap_clear, netBotz_prd_bot_ext_temp1_high_trap=netBotz_prd_bot_ext_temp1_high_trap, netBotz_prd_bot_online_trap=netBotz_prd_bot_online_trap, netBotz_dev_backup_smtp=netBotz_dev_backup_smtp, netBotz_prd_bot_amp7_trap_clear=netBotz_prd_bot_amp7_trap_clear, netBotz_syslog_facility=netBotz_syslog_facility, netBotz_prd_bot_amp2_high_trap=netBotz_prd_bot_amp2_high_trap, netBotz_prd_bot_ext_humi4_low_trap=netBotz_prd_bot_ext_humi4_low_trap, expPort_ext_humi_uV_at_0_percent=expPort_ext_humi_uV_at_0_percent, netBotz_prd_bot_amp6_high_trap=netBotz_prd_bot_amp6_high_trap, netBotz_prd_bot_num_pix_before_alarm=netBotz_prd_bot_num_pix_before_alarm, netBotz_prd_bot_amp3_low_trap=netBotz_prd_bot_amp3_low_trap, netBotz_prd_bot_amp2_sensor_replugged=netBotz_prd_bot_amp2_sensor_replugged, netBotz_prd_bot_ext_dry3=netBotz_prd_bot_ext_dry3, netBotz_prd_bot_ext_temp2_min_range=netBotz_prd_bot_ext_temp2_min_range, netBotz_prd_bot_ext_humi3_low_trap=netBotz_prd_bot_ext_humi3_low_trap, netBotz_snmp_timeout=netBotz_snmp_timeout, expPort_total_amp_seconds_since_time=expPort_total_amp_seconds_since_time, device_crawlers_trap_index=device_crawlers_trap_index, netBotz_prd_crl_trap_value=netBotz_prd_crl_trap_value, netBotz_branch_checker_clear_alert_trap=netBotz_branch_checker_clear_alert_trap, netBotz_prd_RackBotz_303=netBotz_prd_RackBotz_303, netBotz_dev_socks_portnum=netBotz_dev_socks_portnum, netBotz_prd_bot_ext_humi7_traps=netBotz_prd_bot_ext_humi7_traps, netBotz_prd_crl_ping_online_trap=netBotz_prd_crl_ping_online_trap, netBotz_prd_WallBotz_400=netBotz_prd_WallBotz_400, netBotz_prd_bot_ext_humi6_low_trap=netBotz_prd_bot_ext_humi6_low_trap, netBotz_prd_bot_ext_temp1_traps=netBotz_prd_bot_ext_temp1_traps, expPort_total_amp_seconds=expPort_total_amp_seconds, netBotz_prd_crl_ping_offline_trap=netBotz_prd_crl_ping_offline_trap, netBotz_prd_RackBotz_300E=netBotz_prd_RackBotz_300E, netBotz_prd_bot_ext_humi5_low_trap=netBotz_prd_bot_ext_humi5_low_trap, netBotz_userid_1=netBotz_userid_1, expPort_ext_humi=expPort_ext_humi, netBotz_prd_bot_amps3=netBotz_prd_bot_amps3, netBotz_prd_bot_amp3_high_trap=netBotz_prd_bot_amp3_high_trap, netBotz_prd_bot_ext_dry2=netBotz_prd_bot_ext_dry2, netBotz_metric_onboard_cam_motion=netBotz_metric_onboard_cam_motion, branch_checker_trap_attrib_index=branch_checker_trap_attrib_index, netBotz_syslog_address=netBotz_syslog_address, netBotz_prd_bot_ext_temp2_max=netBotz_prd_bot_ext_temp2_max, netBotz_prd_bot_ext_temp3_high_trap=netBotz_prd_bot_ext_temp3_high_trap, netBotz_prd_bot_ext_temp1_enabled=netBotz_prd_bot_ext_temp1_enabled, netBotz_picture_alert_url=netBotz_picture_alert_url, netBotz_metric_onboard_humidity_max=netBotz_metric_onboard_humidity_max, expPort_amps_max=expPort_amps_max, netBotz_prd_bot_audio_high_trap=netBotz_prd_bot_audio_high_trap, netBotz_prd_bot_amp1_total_amp_seconds_since_time=netBotz_prd_bot_amp1_total_amp_seconds_since_time, netBotz_prd_bot_amp2_sensor_unplugged=netBotz_prd_bot_amp2_sensor_unplugged, netBotz_prd_bot_amps2_enabled=netBotz_prd_bot_amps2_enabled, netBotz_prd_bot_humidity_traps=netBotz_prd_bot_humidity_traps, netBotz_device_crawlers_online_alert_trap=netBotz_device_crawlers_online_alert_trap, branch_checker_trap_botoid=branch_checker_trap_botoid, netBotz_prd_WallBotz_400E=netBotz_prd_WallBotz_400E, netBotz_prd_RackBotz_303C=netBotz_prd_RackBotz_303C, netBotz_sensor_data_url_logon=netBotz_sensor_data_url_logon, netBotz_prd_bot_amps_total_max=netBotz_prd_bot_amps_total_max, expPort_amps_enabled=expPort_amps_enabled, netBotz_prd_crl_mib2=netBotz_prd_crl_mib2, netBotz_prd_WallBotz_300E=netBotz_prd_WallBotz_300E, device_crawlers_trap_oid=device_crawlers_trap_oid, netBotz_prd_bot_amps1_max=netBotz_prd_bot_amps1_max, netBotz_prd_bot_amptotal_total_amp_seconds_since_time=netBotz_prd_bot_amptotal_total_amp_seconds_since_time, netBotz_prd_bot_ext_humi3_sensor_unplugged=netBotz_prd_bot_ext_humi3_sensor_unplugged, netBotz_dev_popport=netBotz_dev_popport, netBotz_prd_bot_ext_dry4_triggered_trap=netBotz_prd_bot_ext_dry4_triggered_trap, netBotz_24hourpreferred=netBotz_24hourpreferred, expPort_ext_temp_enabled=expPort_ext_temp_enabled, netBotz_prd_bot_ext_temp1_uV_at_0_degreeC=netBotz_prd_bot_ext_temp1_uV_at_0_degreeC, netBotz_prd_bot_amp4_trap_clear=netBotz_prd_bot_amp4_trap_clear, branch_checker_trap_desc=branch_checker_trap_desc, netBotz_prd_bot_airflow_level=netBotz_prd_bot_airflow_level, netBotz_prd_bot_ext_humi7_high_trap=netBotz_prd_bot_ext_humi7_high_trap, netBotz_prd_bot_ext_temp2_min=netBotz_prd_bot_ext_temp2_min, netBotz_prd_bot_humidity_low_trap=netBotz_prd_bot_humidity_low_trap, netBotz_addonapp=netBotz_addonapp, netBotz_prd_bot_ext_temp3_min_range=netBotz_prd_bot_ext_temp3_min_range, netBotz_prd_bot_ext_humi6_sensor_unplugged=netBotz_prd_bot_ext_humi6_sensor_unplugged, netBotz_prd_crl_mib2if=netBotz_prd_crl_mib2if, expPort_ext_temp=expPort_ext_temp, netBotz_prd_crl_opstatus_offline_trap=netBotz_prd_crl_opstatus_offline_trap, netBotz_prd_bot_ext_dry2_traps=netBotz_prd_bot_ext_dry2_traps, netBotz_prd_bot_amp3_sensor_replugged=netBotz_prd_bot_amp3_sensor_replugged, netBotz_prd_bot_ext_temp3_sensor_unplugged=netBotz_prd_bot_ext_temp3_sensor_unplugged, netBotz_prd_crl_trap_attrib=netBotz_prd_crl_trap_attrib, netBotz_prd_bot_ext_temp7_trap_clear=netBotz_prd_bot_ext_temp7_trap_clear, netBotz_prd_bot_ext_humi6_trap_clear=netBotz_prd_bot_ext_humi6_trap_clear, expPort_ext_temp_uV_per_degreeC=expPort_ext_temp_uV_per_degreeC, expPort_ext_humi_enabled=expPort_ext_humi_enabled, netBotz=netBotz, netBotz_prd_bot_ext_temp4_trap_clear=netBotz_prd_bot_ext_temp4_trap_clear, netBotz_prd_bot_amp2_total_amp_seconds_since_time=netBotz_prd_bot_amp2_total_amp_seconds_since_time, netBotz_prd_bot_amp5_sensor_replugged=netBotz_prd_bot_amp5_sensor_replugged, netBotz_prd_bot_hum_enabled=netBotz_prd_bot_hum_enabled, expPort_amps_max_range=expPort_amps_max_range, netBotz_snmp=netBotz_snmp, vendor_netBotz=vendor_netBotz, netBotz_prd_bot_ext_dry3_label=netBotz_prd_bot_ext_dry3_label, netBotz_prd_bot_ext_humi2_trap_clear=netBotz_prd_bot_ext_humi2_trap_clear, branch_checker_trap_address=branch_checker_trap_address, netBotz_prd_bot_amps3_uV_per_mA=netBotz_prd_bot_amps3_uV_per_mA, branch_checker_trap_date=branch_checker_trap_date, netBotz_prd_bot_ext_temp1_trap_clear=netBotz_prd_bot_ext_temp1_trap_clear, netBotz_utc_clock=netBotz_utc_clock, netBotz_prd_bot_ext_temp3_low_trap=netBotz_prd_bot_ext_temp3_low_trap, netBotz_prd_bot_ext_temp3=netBotz_prd_bot_ext_temp3, netBotz_prd_bot_ext_temp2_low_trap=netBotz_prd_bot_ext_temp2_low_trap, netBotz_prd_bot_ext_temp1_max=netBotz_prd_bot_ext_temp1_max, device_crawlers_trap_botoid=device_crawlers_trap_botoid, expPort_ext_dry_close_to_open_millis=expPort_ext_dry_close_to_open_millis, netBotz_prd_bot_ext_dry6_trap_clear=netBotz_prd_bot_ext_dry6_trap_clear, netBotz_prd_crl_trap_botoid=netBotz_prd_crl_trap_botoid, netBotz_prd_RackBotz_300C=netBotz_prd_RackBotz_300C, netBotz_branch_checker_offline_alert_trap=netBotz_branch_checker_offline_alert_trap, netBotz_prd_bot_ext_dry1_open_label=netBotz_prd_bot_ext_dry1_open_label, netBotz_prd_bot_amps4_min=netBotz_prd_bot_amps4_min, netBotz_prd_bot_humidity_max=netBotz_prd_bot_humidity_max, netBotz_prd_bot_humidity_trap_clear=netBotz_prd_bot_humidity_trap_clear, branch_checker_trap_value=branch_checker_trap_value, netBotz_addonapp_trap=netBotz_addonapp_trap, netBotz_prd_bot_ext_dry1_response=netBotz_prd_bot_ext_dry1_response, netBotz_prd_bot_amp1_high_trap=netBotz_prd_bot_amp1_high_trap, netBotz_metric_onboard_humidity_min=netBotz_metric_onboard_humidity_min, expPort_ext_dry_open_label=expPort_ext_dry_open_label, netBotz_prd_RackBotz_400C=netBotz_prd_RackBotz_400C, netBotz_prd_bot_ext_port1_module_id=netBotz_prd_bot_ext_port1_module_id, netBotz_prd_bot_ext_temp2_trap_clear=netBotz_prd_bot_ext_temp2_trap_clear, netBotz_device_crawlers_clear_alert_trap=netBotz_device_crawlers_clear_alert_trap, netBotz_password_3=netBotz_password_3, netBotz_prd_bot_ext_dry3_open_to_close_millis=netBotz_prd_bot_ext_dry3_open_to_close_millis, netBotz_prd_bot_amps2_max=netBotz_prd_bot_amps2_max, netBotz_prd_bot_door_trap_clear=netBotz_prd_bot_door_trap_clear, netBotz_prd_crl_trap_oid=netBotz_prd_crl_trap_oid, netBotz_sensor_ftp_logon=netBotz_sensor_ftp_logon, netBotz_prd_bot_amp5_high_trap=netBotz_prd_bot_amp5_high_trap, netBotz_prd_bot_temp_min=netBotz_prd_bot_temp_min, netBotz_prd_bot_amps1_max_range=netBotz_prd_bot_amps1_max_range, netBotz_prd_bot_amps4_enabled=netBotz_prd_bot_amps4_enabled, netBotz_prd_bot_airflow_trap_clear=netBotz_prd_bot_airflow_trap_clear, netBotz_prd_bot_amp4_high_trap=netBotz_prd_bot_amp4_high_trap, netBotz_prd_bot_ext_temp2=netBotz_prd_bot_ext_temp2, netBotz_prd_bot_amp4_sensor_replugged=netBotz_prd_bot_amp4_sensor_replugged, netBotz_dev_pop=netBotz_dev_pop, netBotz_prd_bot_ext_temp6_traps=netBotz_prd_bot_ext_temp6_traps, netBotz_prd_bot_trap_index=netBotz_prd_bot_trap_index, netBotz_prd_bot_amp2_low_trap=netBotz_prd_bot_amp2_low_trap, netBotz_prd_bot_ext_humi5_traps=netBotz_prd_bot_ext_humi5_traps, netBotz_prd_bot_ext_temp5_sensor_replugged=netBotz_prd_bot_ext_temp5_sensor_replugged, netBotz_prd_bot_amp6_sensor_replugged=netBotz_prd_bot_amp6_sensor_replugged, netBotz_prd_bot_ext_port3_module_id=netBotz_prd_bot_ext_port3_module_id, netBotz_prd_bot_ext_humi6_traps=netBotz_prd_bot_ext_humi6_traps, netBotz_prd_bot_temperature_trap_clear=netBotz_prd_bot_temperature_trap_clear, netBotz_prd_bot_ext_temp1=netBotz_prd_bot_ext_temp1, netBotz_metric_onboard_temp=netBotz_metric_onboard_temp, netBotz_prd_WallBotz_300BE=netBotz_prd_WallBotz_300BE, netBotz_sensor_data_url_period=netBotz_sensor_data_url_period, netBotz_prd_bot_ext_dry5_trap_clear=netBotz_prd_bot_ext_dry5_trap_clear, netBotz_prd_bot_ext_dry2_enabled=netBotz_prd_bot_ext_dry2_enabled, device_crawlers_trap_stringvalue=device_crawlers_trap_stringvalue, netBotz_prd_bot_amp1_low_trap=netBotz_prd_bot_amp1_low_trap, netBotz_prd_bot_ext_dry2_open_label=netBotz_prd_bot_ext_dry2_open_label, netBotz_prd_bot_amp2_trap_clear=netBotz_prd_bot_amp2_trap_clear, netBotz_prd_bot_ext_dry7_trap_clear=netBotz_prd_bot_ext_dry7_trap_clear, expPort_ext_humi_max_range=expPort_ext_humi_max_range, netBotz_prd_bot_amp3_total_amp_seconds=netBotz_prd_bot_amp3_total_amp_seconds, netBotz_prd_bot_ext_humi6_sensor_replugged=netBotz_prd_bot_ext_humi6_sensor_replugged, netBotz_dev_socks_user_id=netBotz_dev_socks_user_id, netBotz_prd_bot_airflow_low_trap=netBotz_prd_bot_airflow_low_trap, netBotz_metric_onboard_humidity=netBotz_metric_onboard_humidity, netBotz_dev_ip=netBotz_dev_ip, netBotz_prd_bot_ext_dry3_open_label=netBotz_prd_bot_ext_dry3_open_label, netBotz_prd_bot_ext_temp1_low_trap=netBotz_prd_bot_ext_temp1_low_trap, netBotz_prd_bot_ext_humi4_sensor_replugged=netBotz_prd_bot_ext_humi4_sensor_replugged, netBotz_prd_bot_ext_temp6_high_trap=netBotz_prd_bot_ext_temp6_high_trap, netBotz_prd_bot_camera_brightness=netBotz_prd_bot_camera_brightness, netBotz_metric_onboard_airflow_mins=netBotz_metric_onboard_airflow_mins, netBotz_prd_RackBotz_310E=netBotz_prd_RackBotz_310E, netBotz_prd_bot_ext_temp4_sensor_replugged=netBotz_prd_bot_ext_temp4_sensor_replugged, device_crawlers_trap_date=device_crawlers_trap_date, netBotz_dev_serialno=netBotz_dev_serialno, branch_checker_trap_target_index=branch_checker_trap_target_index, netBotz_prd_bot_cam_motion_delay=netBotz_prd_bot_cam_motion_delay, netBotz_prd_bot_amp4_sensor_unplugged=netBotz_prd_bot_amp4_sensor_unplugged, netBotz_alert_url_logon=netBotz_alert_url_logon, netBotz_prd_bot_amps4=netBotz_prd_bot_amps4, netBotz_prd_bot_ext_temp3_trap_clear=netBotz_prd_bot_ext_temp3_trap_clear, netBotz_prd_bot_switch_enabled=netBotz_prd_bot_switch_enabled, device_crawlers_trap_value=device_crawlers_trap_value, netBotz_metric_onboard_doorajar=netBotz_metric_onboard_doorajar, netBotz_prd_crl_mib2_ping=netBotz_prd_crl_mib2_ping, netBotz_prd_bot_ext_port2_module_id=netBotz_prd_bot_ext_port2_module_id, netBotz_prd_bot_cam_motion_area_of_motion=netBotz_prd_bot_cam_motion_area_of_motion, netBotz_prd_bot_ext_humi2_sensor_unplugged=netBotz_prd_bot_ext_humi2_sensor_unplugged, netBotz_prd_bot_amps4_uV_per_10mA=netBotz_prd_bot_amps4_uV_per_10mA, netBotz_prd_bot_delay_between_event_pix=netBotz_prd_bot_delay_between_event_pix, netBotz_prd_bot_ext_dry1_label=netBotz_prd_bot_ext_dry1_label, netBotz_prd_bot_ext_dry4_traps=netBotz_prd_bot_ext_dry4_traps, netBotz_prd_bot_amptotal_total_amp_seconds=netBotz_prd_bot_amptotal_total_amp_seconds, netBotz_metric_onboard_temp_max=netBotz_metric_onboard_temp_max, netBotz_prd_bot_ext_temp6_sensor_unplugged=netBotz_prd_bot_ext_temp6_sensor_unplugged, netBotz_prd_bot_ext_humi1_sensor_unplugged=netBotz_prd_bot_ext_humi1_sensor_unplugged, netBotz_prd_bot_amp5_low_trap=netBotz_prd_bot_amp5_low_trap, netBotz_prd_bot_amps_total_support_enabled=netBotz_prd_bot_amps_total_support_enabled, netBotz_prd_bot_ext_humi4_sensor_unplugged=netBotz_prd_bot_ext_humi4_sensor_unplugged, netBotz_prd_bot_ext_dry7_traps=netBotz_prd_bot_ext_dry7_traps, netBotz_prd_bot_delay_before_event_pix=netBotz_prd_bot_delay_before_event_pix, netBotz_prd_bot_amps_total=netBotz_prd_bot_amps_total, expPort_amps_uV_per_10mA=expPort_amps_uV_per_10mA, netBotz_metric_onboard_airflow_level=netBotz_metric_onboard_airflow_level, netBotz_prd_bot_ext_humi5_trap_clear=netBotz_prd_bot_ext_humi5_trap_clear, expPort_ext_dry_closed_label=expPort_ext_dry_closed_label, netBotz_prd_bot_ext_temp1_min=netBotz_prd_bot_ext_temp1_min, netBotz_prd_bot_camera_enabled=netBotz_prd_bot_camera_enabled, expPort_amps=expPort_amps, netBotz_default_applet=netBotz_default_applet, netBotz_snmp_retries=netBotz_snmp_retries, netBotz_prd_bot_ext_dry2_open_to_close_millis=netBotz_prd_bot_ext_dry2_open_to_close_millis, netBotz_sensor_ftp_path=netBotz_sensor_ftp_path, netBotz_dev_ntp_server=netBotz_dev_ntp_server, netBotz_snmp_traptarget2=netBotz_snmp_traptarget2, netBotz_prd_bot_audio_enabled=netBotz_prd_bot_audio_enabled, netBotz_prd_bot_amp3_total_amp_seconds_since_time=netBotz_prd_bot_amp3_total_amp_seconds_since_time, netBotz_prd_WallBotz_310E=netBotz_prd_WallBotz_310E, netBotz_prd_bot_amp7_sensor_replugged=netBotz_prd_bot_amp7_sensor_replugged, netBotz_metric_onboard_audio_level=netBotz_metric_onboard_audio_level, expPort_module_id=expPort_module_id, netBotz_prd_bot=netBotz_prd_bot, netBotz_prd_bot_amp7_sensor_unplugged=netBotz_prd_bot_amp7_sensor_unplugged, netBotz_generic=netBotz_generic, expPort_ext_temp_max_range=expPort_ext_temp_max_range, netBotz_prd_bot_amps4_max_range=netBotz_prd_bot_amps4_max_range, netBotz_prd_RackBotz_303E=netBotz_prd_RackBotz_303E, netBotz_prd_bot_ext_dry1_closed_label=netBotz_prd_bot_ext_dry1_closed_label, expPort_ext_humi_min=expPort_ext_humi_min)
mibBuilder.exportSymbols("NETBOTZ-MIB", netBotz_prd_bot_refresh=netBotz_prd_bot_refresh, netBotz_prd_crl_trap_index=netBotz_prd_crl_trap_index, netBotz_dev_secondarydns=netBotz_dev_secondarydns, netBotz_prd_RackBotz_400E=netBotz_prd_RackBotz_400E, netBotz_prd_bot_ext_dry1_traps=netBotz_prd_bot_ext_dry1_traps, netBotz_prd_bot_ext_dry3_triggered_trap=netBotz_prd_bot_ext_dry3_triggered_trap, expPort_ext_dry_label=expPort_ext_dry_label, netBotz_dev_primarydns=netBotz_dev_primarydns, netBotz_prd_bot_airflow_traps=netBotz_prd_bot_airflow_traps, netBotz_prd_crawlers=netBotz_prd_crawlers, netBotz_prd_bot_amp6_sensor_unplugged=netBotz_prd_bot_amp6_sensor_unplugged, netBotz_prd_bot_amp2_traps=netBotz_prd_bot_amp2_traps, netBotz_prd_bot_ext_temp7_sensor_unplugged=netBotz_prd_bot_ext_temp7_sensor_unplugged, netBotz_prd_bot_amp4_total_amp_seconds=netBotz_prd_bot_amp4_total_amp_seconds, netBotz_prd_bot_amp1_traps=netBotz_prd_bot_amp1_traps, netBotz_dev_ntp_period=netBotz_dev_ntp_period, expPort_label=expPort_label, netBotz_prd_bot_ext_temp7_sensor_replugged=netBotz_prd_bot_ext_temp7_sensor_replugged, netBotz_prd_bot_amp4_low_trap=netBotz_prd_bot_amp4_low_trap, branch_checker_trap_stringvalue=branch_checker_trap_stringvalue, netBotz_prd_bot_ext_port1_module_type=netBotz_prd_bot_ext_port1_module_type, netBotz_dev_smtpport=netBotz_dev_smtpport, netBotz_prd_bot_ext_port3_module_type=netBotz_prd_bot_ext_port3_module_type, netBotz_prd_crl_mib2_snmpstatus=netBotz_prd_crl_mib2_snmpstatus, netBotz_prd_bot_amps3_enabled=netBotz_prd_bot_amps3_enabled)
