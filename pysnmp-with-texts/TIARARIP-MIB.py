#
# PySNMP MIB module TIARARIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIARARIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, MibIdentifier, Counter32, Gauge32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, TimeTicks, Counter64, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibIdentifier", "Counter32", "Gauge32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "TimeTicks", "Counter64", "Unsigned32", "Integer32")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
tiaraMgmt, = mibBuilder.importSymbols("TIARA-NETWORKS-SMI", "tiaraMgmt")
tiaraRipMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3174, 2, 110))
if mibBuilder.loadTexts: tiaraRipMib.setLastUpdated('9407272253Z')
if mibBuilder.loadTexts: tiaraRipMib.setOrganization('Tiara Networks Inc.')
if mibBuilder.loadTexts: tiaraRipMib.setContactInfo(' Tiara Networks Customer Service Postal: 525 Race Street, Suite 100, San Jose, CA 95126 USA Tel: +1 408-216-4700 Fax: +1 408-216-4701 E-mail: support@tiaranetworks.com')
if mibBuilder.loadTexts: tiaraRipMib.setDescription("This file contains Tiara's enterprise specific MIB module for RIP implementation")
tiaraRipGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 110, 1))
tiaraRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 110, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraRoutingEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRoutingEnable.setDescription(' This variable is used to globally enable/disable Routing. DEFVAL { false}')
tiaraRipGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 110, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraRipGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipGlobalEnable.setDescription(' This variable is used to globally enable/disable RIP. The per- interface enable/disable override the setting of this variable')
tiaraRipGlobalUseTrustedNeighbour = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 110, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraRipGlobalUseTrustedNeighbour.setStatus('current')
if mibBuilder.loadTexts: tiaraRipGlobalUseTrustedNeighbour.setDescription(' This variable is used to enable/disable the use of Trusted Neighbour')
tiaraRipGlobalValidateSrcIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 110, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraRipGlobalValidateSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: tiaraRipGlobalValidateSrcIpAddr.setDescription(' enable/disable validating source IP address')
tiaraRipGlobalVersion = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 110, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraRipGlobalVersion.setStatus('current')
if mibBuilder.loadTexts: tiaraRipGlobalVersion.setDescription('version of RIP to be used. per-interface send and receive versions override the setting of this variable')
tiaraRipIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2), )
if mibBuilder.loadTexts: tiaraRipIfConfTable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfTable.setDescription('A list of RIP interfaces and Per-Interface RIP Configuration Table')
tiaraRipIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1), ).setIndexNames((0, "TIARARIP-MIB", "tiaraRipIfConfIpAddr"))
if mibBuilder.loadTexts: tiaraRipIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfEntry.setDescription('A single RIP interface and its configuration parameters')
tiaraRipIfConfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: tiaraRipIfConfIpAddr.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfIpAddr.setDescription(' The IP Address assigned to the given RIP interface. This variable is also used to index into the table')
tiaraRipIfConfAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfAuthString.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfAuthString.setDescription(' The string to be used as the authentication key Setting this string to NULL value has the effect of disabling authentication. Setting this string to a non-value has the effect enabling authentication, with the value of the string used as authentication string. By default, the value of the string is null and hence authentication is disabled')
tiaraRipIfConfAutoSummaryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfAutoSummaryEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfAutoSummaryEnable.setDescription(' Used to enable/disable route summarization')
tiaraRipIfConfDefaultAnnounceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfDefaultAnnounceEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfDefaultAnnounceEnable.setDescription(' Used to enable/disable announcing RIP default route')
tiaraRipIfConfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfEnable.setDescription(' enable/disable RIP for this interface. The value of this variable overrides the value of the Global variable, tiaraRipGlobalEnable')
tiaraRipIfConfAnnounceHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfAnnounceHostEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfAnnounceHostEnable.setDescription(' enable/disable announcing IP host routes')
tiaraRipIfConfPassiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfPassiveEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfPassiveEnable.setDescription(' suppress/do not suppress sending of routing updates')
tiaraRipIfConfReceiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version1and2", 3))).clone('version1and2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfReceiveVersion.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfReceiveVersion.setDescription('configuration variable for RIP receive version for this interface')
tiaraRipIfConfSendVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version1and2", 3), ("version1compatible", 4))).clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfSendVersion.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfSendVersion.setDescription('configuration variable for RIP send version for this interface')
tiaraRipIfConfSplitHorizonEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfSplitHorizonEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfSplitHorizonEnable.setDescription('enable/disable split horizon')
tiaraRipIfConfStaticAnnounceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfStaticAnnounceEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfStaticAnnounceEnable.setDescription('enable/disable announcing static IP routes')
tiaraRipIfConfUpdateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfUpdateTimer.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfUpdateTimer.setDescription('The value of the Update Timer')
tiaraRipIfConfHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 13), Integer32().clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfHoldDownTimer.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfHoldDownTimer.setDescription('The value of the hold-down timer')
tiaraRipIfConfFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 14), Integer32().clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfFlushTimer.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfFlushTimer.setDescription('The value of the Flush Timer')
tiaraRipIfConfInvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 15), Integer32().clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfInvTimer.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfInvTimer.setDescription('The value of the invalid timer')
tiaraRipIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipIfConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tiaraRipIfConfRowStatus.setDescription('This variable is used to create/delete rows in the configuration table')
tiaraRipStatTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3), )
if mibBuilder.loadTexts: tiaraRipStatTable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatTable.setDescription('A list of RIP interfaces for which the statistics are maintained')
tiaraRipStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1), ).setIndexNames((0, "TIARARIP-MIB", "tiaraRipIfConfIpAddr"))
if mibBuilder.loadTexts: tiaraRipStatEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatEntry.setDescription('per-interface statistics')
tiaraRipStatRequestPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatRequestPktsSent.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatRequestPktsSent.setDescription('Number of request packets sent on this interface')
tiaraRipStatResponsePktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatResponsePktsSent.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatResponsePktsSent.setDescription('Number of response packets received on this interface')
tiaraRipStatPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatPktsReceived.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatPktsReceived.setDescription('Total number of packets received on this interface')
tiaraRipStatRequestPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatRequestPktsReceived.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatRequestPktsReceived.setDescription('Number of request packets received on this interface')
tiaraRipStatResponsePktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatResponsePktsReceived.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatResponsePktsReceived.setDescription('Number of response packets received on this interface')
tiaraRipStatUnrecognizedPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatUnrecognizedPktsReceived.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatUnrecognizedPktsReceived.setDescription('Number of unrecognised packets received on this interface')
tiaraRipStatBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatBadVersions.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatBadVersions.setDescription('Number of invalid version packets received on this interface')
tiaraRipStatBadAddrFamilies = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatBadAddrFamilies.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatBadAddrFamilies.setDescription('Number of invalid address family packets received on this interface')
tiaraRipStatBadRequestFormats = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatBadRequestFormats.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatBadRequestFormats.setDescription('Number of invalid address format packets received on this interface')
tiaraRipStatBadMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatBadMetrics.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatBadMetrics.setDescription('Tiara-fill')
tiaraRipStatBadResponseFormats = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatBadResponseFormats.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatBadResponseFormats.setDescription('Tiara-fill')
tiaraRipStatResponsesNotFromRipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatResponsesNotFromRipPort.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatResponsesNotFromRipPort.setDescription('Tiara-fill')
tiaraRipStatResponsesRecdFromLoopBackIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatResponsesRecdFromLoopBackIf.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatResponsesRecdFromLoopBackIf.setDescription('Number of responses received from loopback interface')
tiaraRipStatPktsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tiaraRipStatPktsRejected.setStatus('current')
if mibBuilder.loadTexts: tiaraRipStatPktsRejected.setDescription('Number of packets rejected on this interface')
tiaraRipRejectAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 110, 4), )
if mibBuilder.loadTexts: tiaraRipRejectAddrTable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipRejectAddrTable.setDescription('List of Reject IP addresses along with the interfaces they correspond to')
tiaraRipRejectAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 110, 4, 1), ).setIndexNames((0, "TIARARIP-MIB", "tiaraRipIfConfIpAddr"), (0, "TIARARIP-MIB", "tiaraRipRejectIpAddr"))
if mibBuilder.loadTexts: tiaraRipRejectAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraRipRejectAddrEntry.setDescription('A single Reject IP address along with the interface that it corresponds to')
tiaraRipRejectIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: tiaraRipRejectIpAddr.setStatus('current')
if mibBuilder.loadTexts: tiaraRipRejectIpAddr.setDescription('The reject IpAddress for this interface')
tiaraRipRejectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipRejectRowStatus.setStatus('current')
if mibBuilder.loadTexts: tiaraRipRejectRowStatus.setDescription('Row Status variable used to create/delete rows in this table')
tiaraRipAdvertiseAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 110, 5), )
if mibBuilder.loadTexts: tiaraRipAdvertiseAddrTable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipAdvertiseAddrTable.setDescription('List of Advertise IP addresses along with the interfaces they correspond to')
tiaraRipAdvertiseAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 110, 5, 1), ).setIndexNames((0, "TIARARIP-MIB", "tiaraRipIfConfIpAddr"), (0, "TIARARIP-MIB", "tiaraRipAdvertiseIpAddr"))
if mibBuilder.loadTexts: tiaraRipAdvertiseAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraRipAdvertiseAddrEntry.setDescription('A single advertise IP address along with the interface it corresponds to')
tiaraRipAdvertiseIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: tiaraRipAdvertiseIpAddr.setStatus('current')
if mibBuilder.loadTexts: tiaraRipAdvertiseIpAddr.setDescription('One Advertise IpAddress for this interface')
tiaraRipAdvertiseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipAdvertiseRowStatus.setStatus('current')
if mibBuilder.loadTexts: tiaraRipAdvertiseRowStatus.setDescription('Row Status variable used to create/delete rows in this table')
tiaraRipNeighbourAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 110, 6), )
if mibBuilder.loadTexts: tiaraRipNeighbourAddrTable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipNeighbourAddrTable.setDescription('List of neighbour IP addresses along with the interfaces they correspond to')
tiaraRipNeighbourAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 110, 6, 1), ).setIndexNames((0, "TIARARIP-MIB", "tiaraRipIfConfIpAddr"), (0, "TIARARIP-MIB", "tiaraRipNeighbourIpAddr"))
if mibBuilder.loadTexts: tiaraRipNeighbourAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraRipNeighbourAddrEntry.setDescription('A single neighbour IP address along with the interface it corresponds to')
tiaraRipNeighbourIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: tiaraRipNeighbourIpAddr.setStatus('current')
if mibBuilder.loadTexts: tiaraRipNeighbourIpAddr.setDescription('One neighbour IP address for this interface')
tiaraRipNeighbourRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipNeighbourRowStatus.setStatus('current')
if mibBuilder.loadTexts: tiaraRipNeighbourRowStatus.setDescription('Row Status variable used to create/delete rows in this table')
tiaraRipTrustedNeighbourAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 110, 7), )
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourAddrTable.setStatus('current')
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourAddrTable.setDescription('List of trusted neighbour IP addresses along with the interfaces they correspond to')
tiaraRipTrustedNeighbourAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 110, 7, 1), ).setIndexNames((0, "TIARARIP-MIB", "tiaraRipTrustedNeighbourAddr"))
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourAddrEntry.setDescription('A single trusted neighbour IP address along with the interface it corresponds to')
tiaraRipTrustedNeighbourAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourAddr.setStatus('current')
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourAddr.setDescription('One Trusted Neighbour IP address for this interface')
tiaraRipTrustedNeighbourRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 110, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourRowStatus.setStatus('current')
if mibBuilder.loadTexts: tiaraRipTrustedNeighbourRowStatus.setDescription('Row Status variable used to create/delete rows in this table')
mibBuilder.exportSymbols("TIARARIP-MIB", tiaraRipStatBadRequestFormats=tiaraRipStatBadRequestFormats, tiaraRipRejectAddrTable=tiaraRipRejectAddrTable, tiaraRipMib=tiaraRipMib, tiaraRipIfConfTable=tiaraRipIfConfTable, tiaraRipIfConfFlushTimer=tiaraRipIfConfFlushTimer, tiaraRipStatResponsePktsReceived=tiaraRipStatResponsePktsReceived, tiaraRipIfConfReceiveVersion=tiaraRipIfConfReceiveVersion, tiaraRipTrustedNeighbourAddrTable=tiaraRipTrustedNeighbourAddrTable, tiaraRipGlobalEnable=tiaraRipGlobalEnable, tiaraRipIfConfPassiveEnable=tiaraRipIfConfPassiveEnable, tiaraRipIfConfAuthString=tiaraRipIfConfAuthString, tiaraRipGlobalUseTrustedNeighbour=tiaraRipGlobalUseTrustedNeighbour, tiaraRipIfConfSplitHorizonEnable=tiaraRipIfConfSplitHorizonEnable, tiaraRipGlobalVersion=tiaraRipGlobalVersion, tiaraRipAdvertiseAddrTable=tiaraRipAdvertiseAddrTable, tiaraRipIfConfUpdateTimer=tiaraRipIfConfUpdateTimer, tiaraRipStatPktsRejected=tiaraRipStatPktsRejected, tiaraRipTrustedNeighbourAddr=tiaraRipTrustedNeighbourAddr, tiaraRipIfConfInvTimer=tiaraRipIfConfInvTimer, tiaraRoutingEnable=tiaraRoutingEnable, tiaraRipIfConfEntry=tiaraRipIfConfEntry, tiaraRipAdvertiseRowStatus=tiaraRipAdvertiseRowStatus, tiaraRipIfConfDefaultAnnounceEnable=tiaraRipIfConfDefaultAnnounceEnable, tiaraRipStatBadAddrFamilies=tiaraRipStatBadAddrFamilies, tiaraRipIfConfEnable=tiaraRipIfConfEnable, tiaraRipIfConfStaticAnnounceEnable=tiaraRipIfConfStaticAnnounceEnable, tiaraRipStatPktsReceived=tiaraRipStatPktsReceived, tiaraRipRejectIpAddr=tiaraRipRejectIpAddr, tiaraRipIfConfRowStatus=tiaraRipIfConfRowStatus, tiaraRipRejectAddrEntry=tiaraRipRejectAddrEntry, tiaraRipTrustedNeighbourAddrEntry=tiaraRipTrustedNeighbourAddrEntry, tiaraRipStatResponsePktsSent=tiaraRipStatResponsePktsSent, tiaraRipStatBadVersions=tiaraRipStatBadVersions, tiaraRipAdvertiseIpAddr=tiaraRipAdvertiseIpAddr, tiaraRipStatResponsesNotFromRipPort=tiaraRipStatResponsesNotFromRipPort, tiaraRipStatResponsesRecdFromLoopBackIf=tiaraRipStatResponsesRecdFromLoopBackIf, tiaraRipStatEntry=tiaraRipStatEntry, tiaraRipStatTable=tiaraRipStatTable, tiaraRipNeighbourRowStatus=tiaraRipNeighbourRowStatus, tiaraRipIfConfAnnounceHostEnable=tiaraRipIfConfAnnounceHostEnable, tiaraRipAdvertiseAddrEntry=tiaraRipAdvertiseAddrEntry, PYSNMP_MODULE_ID=tiaraRipMib, tiaraRipNeighbourAddrEntry=tiaraRipNeighbourAddrEntry, tiaraRipGlobalValidateSrcIpAddr=tiaraRipGlobalValidateSrcIpAddr, tiaraRipIfConfAutoSummaryEnable=tiaraRipIfConfAutoSummaryEnable, tiaraRipIfConfIpAddr=tiaraRipIfConfIpAddr, tiaraRipStatBadResponseFormats=tiaraRipStatBadResponseFormats, tiaraRipNeighbourIpAddr=tiaraRipNeighbourIpAddr, tiaraRipNeighbourAddrTable=tiaraRipNeighbourAddrTable, tiaraRipIfConfSendVersion=tiaraRipIfConfSendVersion, tiaraRipStatUnrecognizedPktsReceived=tiaraRipStatUnrecognizedPktsReceived, tiaraRipGlobals=tiaraRipGlobals, tiaraRipStatRequestPktsReceived=tiaraRipStatRequestPktsReceived, tiaraRipRejectRowStatus=tiaraRipRejectRowStatus, tiaraRipStatBadMetrics=tiaraRipStatBadMetrics, tiaraRipIfConfHoldDownTimer=tiaraRipIfConfHoldDownTimer, tiaraRipTrustedNeighbourRowStatus=tiaraRipTrustedNeighbourRowStatus, tiaraRipStatRequestPktsSent=tiaraRipStatRequestPktsSent)
