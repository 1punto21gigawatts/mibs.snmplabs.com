#
# PySNMP MIB module MX25-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MX25-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Bits, Unsigned32, NotificationType, MibIdentifier, Integer32, Counter64, IpAddress, enterprises, iso, ModuleIdentity, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Bits", "Unsigned32", "NotificationType", "MibIdentifier", "Integer32", "Counter64", "IpAddress", "enterprises", "iso", "ModuleIdentity", "TimeTicks", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContMX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6))
class DisplayString(OctetString):
    pass

cdx6500PPCTMX25PortTables = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4))
cdx6500PPCTMX25PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cdx6500PPCTMX25PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTMX25PortTable.setDescription('All of the common configuration parameters relevant to the MX.25 port table.')
cdx6500PPCTMX25PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25pCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTMX25PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTMX25PortEntry.setDescription('A row of MX.25 Port configuration parameters.')
cdx6500mx25pCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pCfgPortNum.setDescription('MX25 Port Number.')
cdx6500mx25pSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("newvalMaster", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pSubType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pSubType.setDescription("This is the mode in which this MX25 port will run. newvalMaster : same functionality as 'master', new enumeration added for RFC1155 compatibility.")
cdx6500PPCTMX25MPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cdx6500PPCTMX25MPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTMX25MPortTable.setDescription('All of the configuration parameters relevant to the MX.25 Master port table.')
cdx6500PPCTMX25MPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25mpCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTMX25MPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTMX25MPortEntry.setDescription('A row of MX.25 Master Port configuration parameters.')
cdx6500mx25mpCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpCfgPortNum.setDescription('MX25 Port Number.')
cdx6500mx25mpSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 50))).clone(namedValues=NamedValues(("master", 0), ("newvalMaster", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpSubType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpSubType.setDescription("This is the mode in which this MX25 port will run. newvalMaster : same functionality as 'master', new enumeration added for RFC1155 compatibility.")
cdx6500mx25mpClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpClockSource.setDescription("int - internal clock source. ext - external clock source. newvalInt - same functionality as 'int', new enumeration added for RFc1155 compatibility.")
cdx6500mx25mpClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking.')
cdx6500mx25mpStationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpStationCnt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpStationCnt.setDescription('The number of slave stations on the MX25 line.')
cdx6500mx25mpPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpPollTimer.setDescription('Worst case delay for a slave to respond to a poll frame sent by the master, including modem turn around time, etc. Value in 10ths of second ( 30 = 3.0 seconds ).')
cdx6500mx25mpPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpPollPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpPollPeriod.setDescription('Time in milliseconds between polls when no data is exchanged.')
cdx6500mx25mpTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpTries.setDescription('Maximum number of attempts to complete a transmission.')
cdx6500mx25mpRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpRestartTimer.setDescription('Restart-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500mx25mpResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpResetTimer.setDescription('Reset-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500mx25mpCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpCallTimer.setDescription('Call-Request timeout timer in seconds. If timer expires, call is cleared.')
cdx6500mx25mpClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpClearTimer.setDescription('Clear-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500mx25mpPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpPortControl.setDescription('Specify any of the following port control options: NONE - no option specified. MB - raise Pin 22 when the port becomes disabled.')
cdx6500mx25mpTXEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpTXEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpTXEncoding.setDescription("This is the data encoding used on the MX25 link. nrz - Non Return to Zero. nrzi - Non Return to Zero Inverted. newvalNrz : same functionality as 'nrz', new enumeration added for RFC1155 compatibility.")
cdx6500mx25mpElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500mx25mpV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500mx25mpHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25mpHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPCTMX25SPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cdx6500PPCTMX25SPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTMX25SPortTable.setDescription('All of the configuration parameters relevant to the MX.25 Slave port table.')
cdx6500PPCTMX25SPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25spCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTMX25SPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTMX25SPortEntry.setDescription('A row of MX.25 Slave Port configuration parameters.')
cdx6500mx25spCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spCfgPortNum.setDescription('MX25 Port Number.')
cdx6500mx25spSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spSubType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spSubType.setDescription('This is the mode in which this MX25 port will run.')
cdx6500mx25spClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spClockSource.setDescription("int - internal clock source. ext - external clock source. newvalInt - same functionality as 'int', new enumeration added for RFC1155 compatibility.")
cdx6500mx25spClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking.')
cdx6500mx25spStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spStationAddress.setDescription('The station address on the multidrop line.')
cdx6500mx25spPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spPVCChannels.setDescription('Number of logical channels used for Permanent Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs. PVC connections must be configured in the PVC Table.')
cdx6500mx25spStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spStartingPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spStartingPVC.setDescription('This is the starting logical channel number for the Permanent Virtual Circuits on this link. Not used if the number of PVCs = 0.')
cdx6500mx25spSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spSVCChannels.setDescription('Number of logical channels used in Switched Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs.')
cdx6500mx25spStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spStartingSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spStartingSVC.setDescription('This is the starting logical channel number for the Switched Virtual Circuits on this link. Not used if the number of SVCs = 0.')
cdx6500mx25spPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spPollTimer.setDescription('Worst case delay for a slave to respond to a poll frame sent by the master, including modem turn around time, etc. Value in 10ths of second ( 30 = 3.0 seconds ).')
cdx6500mx25spTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spTries.setDescription('Maximum number of attempts to complete a transmission.')
cdx6500mx25spFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spFrameWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spFrameWinSize.setDescription('Frame level window size must be set to the same value in devices at each end of the link.')
cdx6500mx25spPacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPacketWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spPacketWinSize.setDescription('Packet level window size must be set to the same value in devices at each end of the link.')
cdx6500mx25spRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spRestartTimer.setDescription('Restart-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500mx25spResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spResetTimer.setDescription('Reset-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500mx25spCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spCallTimer.setDescription('Call-Request timeout timer in seconds. If timer expires, call is cleared.')
cdx6500mx25spClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spClearTimer.setDescription('Clear-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500mx25spMX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spMX25Options.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spMX25Options.setDescription('Select options on this MX.25 port as follows: NONE - no option specified. HOLD - hold calls over link restart. CUG - check closed user group; otherwise, CUG passes transparently. INL - inter-node link. Link goes to another 6500 device. INLA - set with INL option when an MX.25 link connection is to a 6500 node using 2.12.04 or earlier. DELAY - enable Delay and Path trace on this link (link must connected to Rel. 4.xx node) Any combination of the above specified by summing (e.g. HOLD+CUG+. . .).')
cdx6500mx25spRCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spRCDestination.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spRCDestination.setDescription('All calls entering this port will be routed to the destination specified in this parameter, irrespective of route selection table entries. For example, to route calls to port 1, use P1. To route calls to port 2, station 4, use P2S4. Blank this field to disable this function.')
cdx6500mx25spCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spCUG.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spCUG.setDescription('The port may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number (except --) and separated by a comma. (e.g. 12,34,56,09,02,03 ). -- - No CUG Membership 00-99 - CUG Membership')
cdx6500mx25spBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spBillingRecords.setDescription("This controls whether billing (accounting) records will be created for calls on this port. newvalOff - same functionality as 'off', new enumeration added for RFC1155 compatibility.")
cdx6500mx25spPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spPortControl.setDescription('Specify any of the following port control options: NONE - no option specified. MB - raise Pin 22 when the port becomes disabled.')
cdx6500mx25spTXEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spTXEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spTXEncoding.setDescription("This is the data encoding used on the MX25 link. nrz - Non Return to Zero. nrzi - Non Return to Zero Inverted. newvalNrz - same functionality as 'nrz', new enumeration added for RFC1155 compatibility.")
cdx6500mx25spUpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spUpperQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spUpperQueue.setDescription('This is the maximum number of data packets a channel on this port will queue for transmission before invoking flow control to the attached channel.')
cdx6500mx25spLowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spLowerQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spLowerQueue.setDescription('This is the number of data packets a channel on this port will have queued for transmission when it releases flow control to the attached channel.')
cdx6500mx25spElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500mx25spV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500mx25spHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25spHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTMX25PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: cdx6500PPSTMX25PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTMX25PortTable.setDescription('All of the statistics parameters relevant to the MX25 Port table.')
cdx6500PPSTMX25PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25pStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTMX25PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTMX25PortEntry.setDescription('A row of MX25 Port statistics parameters.')
cdx6500mx25pStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pStatsPortNum.setDescription('Number of the port.')
cdx6500mx25pPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pPortStatus.setDescription('Status of this port : Up - Port is active. Down - Port Is inactive. Disabled - An operator has disabled the port. Busy Out - an operator has busied out the port.')
cdx6500mx25pPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pPortSpeed.setDescription('This is the speed of the port when Clock=Int; this is the detected clock speed if Clock=Ext. If Port Speed is 0, Clock=Ext but clocking is not being received from attached device.')
cdx6500mx25pCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pCharInTotal.setDescription('Number of characters received by the port since the last node, port, or statistics reset.')
cdx6500mx25pCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pCharOutTotal.setDescription('Number of characters sent by the port since the last node, port, or statistics reset.')
cdx6500mx25pCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pCharsInPerSec.setDescription('Summary of the characters being received over the port.')
cdx6500mx25pCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pCharsOutPerSec.setDescription('Summary of the characters being sent over the port.')
cdx6500mx25pFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pFrameInTotal.setDescription('Number of frames received by the port since the last node, port, or statistics reset.')
cdx6500mx25pFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pFrameOutTotal.setDescription('Number of frames sent by the port since the last node, port, or statistics reset.')
cdx6500mx25pFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pFramesInPerSec.setDescription('Summary of the frames being received over the port.')
cdx6500mx25pFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25pFramesOutPerSec.setDescription('Summary of the frames being sent over the port.')
cdx6500SPCTMX25StationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: cdx6500SPCTMX25StationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTMX25StationTable.setDescription('All of the configuration parameters relevant to the MX.25 station table.')
cdx6500SPCTMX25StationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25sCfgPortNum"), (0, "MX25-OPT-MIB", "cdx6500mx25sCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTMX25StationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTMX25StationEntry.setDescription('A row of MX.25 station configuration parameters.')
cdx6500mx25sCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCfgPortNum.setDescription('MX25 Port Number.')
cdx6500mx25sCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCfgStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCfgStationNum.setDescription('The number of the controller on the multidrop line. Also used for routing purposes.')
cdx6500mx25sStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sStationAddress.setDescription('The station address on the multidrop line.')
cdx6500mx25sPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sPVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sPVCChannels.setDescription('Number of logical channels used for Permanent Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs. PVC connections must be configured in the PVC Table.')
cdx6500mx25sStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStartingPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sStartingPVC.setDescription('This is the starting logical channel number for the Permanent Virtual Circuits on this link. Not used if the number of PVCs = 0.')
cdx6500mx25sSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sSVCChannels.setDescription('Number of logical channels used in Switched Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs.')
cdx6500mx25sStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStartingSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sStartingSVC.setDescription('This is the starting logical channel number for the Switched Virtual Circuits on this link. Not used if the number of SVCs = 0.')
cdx6500mx25sFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFrameWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sFrameWinSize.setDescription('Frame level window size must be set to the same value in devices at each end of the link.')
cdx6500mx25sPacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sPacketWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sPacketWinSize.setDescription('Packet level window size must be set to the same value in devices at each end of the link.')
cdx6500mx25sMX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sMX25Options.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sMX25Options.setDescription('Select options on this MX.25 port as follows: NONE - no option specified HOLD - hold calls over link restart CUG - check closed user group; otherwise, CUG passes transparently INL - inter-node link. Link goes to another 6500 device INLA - set with INL option when an MX.25 link connection is to a 6500 node using 2.12.04 or earlier Any combination of the above specified by summing (e.g. HOLD+CUG+. . .).')
cdx6500mx25sRCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sRCDestination.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sRCDestination.setDescription('All calls entering this port will be routed to the destination specified in this parameter, irrespective of route selection table entries. For example, to route calls to port 1, use P1. To route calls to port 2, station 4, use P2S4. Blank this field to disable this function.')
cdx6500mx25sCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCUG.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCUG.setDescription('The port may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number (except --) and separated by a comma. (e.g. 12,34,56,09,02,03). -- - No CUG Membership 00-99 - CUG Membership')
cdx6500mx25sBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sBillingRecords.setDescription("This controls whether billing (accounting) records will be created for calls on this port. newvalOff - same functionality as 'off', new enumeration added for RFc1155 compatibility.")
cdx6500mx25sUpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sUpperQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sUpperQueue.setDescription('This is the maximum number of data packets a channel on this port will queue for transmission before invoking flow control to the attached channel.')
cdx6500mx25sLowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sLowerQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sLowerQueue.setDescription('This is the number of data packets a channel on this port will have queued for transmission when it releases flow control to the attached channel.')
cdx6500SPSTMX25StationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: cdx6500SPSTMX25StationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTMX25StationTable.setDescription('All of the statistics parameters relevant to the MX25 Station table.')
cdx6500SPSTMX25StationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25sStatsPortNum"), (0, "MX25-OPT-MIB", "cdx6500mx25sStatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTMX25StationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTMX25StationEntry.setDescription('A row of MX25 Station statistics parameters.')
cdx6500mx25sStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sStatsPortNum.setDescription('Number of the port.')
cdx6500mx25sStatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStatsStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sStatsStationNum.setDescription('Station reference number.')
cdx6500mx25sStatsStnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStatsStnAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sStatsStnAddr.setDescription('Configured station address.')
cdx6500mx25sCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCharInTotal.setDescription('Number of characters received by the port since the last node, port, or statistics reset')
cdx6500mx25sCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCharOutTotal.setDescription('Number of characters sent by the port since the last node, port, or statistics reset')
cdx6500mx25sCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCharsInPerSec.setDescription('Summary of the characters being received over the port.')
cdx6500mx25sCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCharsOutPerSec.setDescription('Summary of the characters being sent over the port.')
cdx6500mx25sFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sFrameInTotal.setDescription('Number of frames received by the port since the last node, port, or statistics reset.')
cdx6500mx25sFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sFrameOutTotal.setDescription('Number of frames sent by the port since the last node, port, or statistics reset.')
cdx6500mx25sFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sFramesInPerSec.setDescription('Summary of the frames being received over the port.')
cdx6500mx25sFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sFramesOutPerSec.setDescription('Summary of the frames being sent over the port.')
cdx6500mx25sCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCallCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sCallCount.setDescription('Current number of calls.')
cdx6500ContMX25StationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1), )
if mibBuilder.loadTexts: cdx6500ContMX25StationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContMX25StationTable.setDescription('All of the control parameters relevant to the MX25 Station table.')
cdx6500ContMX25StationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25sContPortNum"), (0, "MX25-OPT-MIB", "cdx6500mx25sContStationNum"))
if mibBuilder.loadTexts: cdx6500ContMX25StationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContMX25StationEntry.setDescription('A row of MX25 Station Control parameters.')
cdx6500mx25sContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500mx25sContPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContPortNum.setDescription('MX25 Port Number.')
cdx6500mx25sContStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cdx6500mx25sContStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContStationNum.setDescription('MX25 Station Number.')
cdx6500mx25sContBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContBootStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContBootStation.setDescription('Boots the specified MX25 station. boot - Boot Station. noBoot - Do not boot Station.')
cdx6500mx25sContDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContDisableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContDisableStation.setDescription('Disables the specified MX25 station. disable - Disable Station. noDisable - Do not disable Station.')
cdx6500mx25sContEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContEnableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContEnableStation.setDescription('Enables the specified MX25 station. enable - Enable Station. noEnable - Do not enable Station.')
cdx6500mx25sContBusyOutStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busyOut", 1), ("noBusyOut", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContBusyOutStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContBusyOutStation.setDescription('Busy outs the specified MX25 station. busyOut - Busyout Station. noBusyOut - Do not busyout Station.')
cdx6500mx25sContResetStnStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContResetStnStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500mx25sContResetStnStats.setDescription('Busy outs the specified MX25 station. reset - Reset Station Statistics. noReset - Do not reset Station Statistics.')
mibBuilder.exportSymbols("MX25-OPT-MIB", cdx6500mx25sCUG=cdx6500mx25sCUG, cdx6500mx25spStartingPVC=cdx6500mx25spStartingPVC, cdx6500mx25mpSubType=cdx6500mx25mpSubType, cdx6500mx25sContStationNum=cdx6500mx25sContStationNum, cdx6500PPCTMX25PortEntry=cdx6500PPCTMX25PortEntry, cdx6500mx25spClockSource=cdx6500mx25spClockSource, cdx6500mx25spTries=cdx6500mx25spTries, cdx6500SPSTMX25StationTable=cdx6500SPSTMX25StationTable, cdx6500mx25pPortStatus=cdx6500mx25pPortStatus, cdx6500mx25sContPortNum=cdx6500mx25sContPortNum, cdx6500PPCTMX25SPortEntry=cdx6500PPCTMX25SPortEntry, cdx6500PPSTMX25PortTable=cdx6500PPSTMX25PortTable, cdx6500PPCTMX25PortTable=cdx6500PPCTMX25PortTable, cdx6500mx25spHighSpeedElectricalInterfaceOption=cdx6500mx25spHighSpeedElectricalInterfaceOption, cdx6500mx25mpRestartTimer=cdx6500mx25mpRestartTimer, cdx6500mx25mpPortControl=cdx6500mx25mpPortControl, cdx6500mx25pFramesOutPerSec=cdx6500mx25pFramesOutPerSec, cdx6500Statistics=cdx6500Statistics, cdx6500mx25spSVCChannels=cdx6500mx25spSVCChannels, cdx6500ContMX25StationTable=cdx6500ContMX25StationTable, cdx6500mx25mpPollPeriod=cdx6500mx25mpPollPeriod, cdx6500mx25spCUG=cdx6500mx25spCUG, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500mx25sContBusyOutStation=cdx6500mx25sContBusyOutStation, cdx6500mx25sContResetStnStats=cdx6500mx25sContResetStnStats, cdx6500mx25spUpperQueue=cdx6500mx25spUpperQueue, cdx6500mx25pPortSpeed=cdx6500mx25pPortSpeed, cdx6500mx25sPVCChannels=cdx6500mx25sPVCChannels, cdx6500mx25sContDisableStation=cdx6500mx25sContDisableStation, cdxProductSpecific=cdxProductSpecific, cdx6500mx25spStartingSVC=cdx6500mx25spStartingSVC, cdx6500mx25mpClearTimer=cdx6500mx25mpClearTimer, cdx6500mx25pCharsInPerSec=cdx6500mx25pCharsInPerSec, cdx6500mx25mpTXEncoding=cdx6500mx25mpTXEncoding, cdx6500mx25sFramesInPerSec=cdx6500mx25sFramesInPerSec, cdx6500mx25sCharOutTotal=cdx6500mx25sCharOutTotal, cdx6500mx25sFrameInTotal=cdx6500mx25sFrameInTotal, cdx6500mx25spFrameWinSize=cdx6500mx25spFrameWinSize, cdx6500mx25mpStationCnt=cdx6500mx25mpStationCnt, cdx6500mx25pCfgPortNum=cdx6500mx25pCfgPortNum, cdx6500mx25spRCDestination=cdx6500mx25spRCDestination, cdx6500mx25spLowerQueue=cdx6500mx25spLowerQueue, cdx6500mx25sCfgPortNum=cdx6500mx25sCfgPortNum, cdx6500mx25sStartingSVC=cdx6500mx25sStartingSVC, cdx6500PPCTMX25MPortTable=cdx6500PPCTMX25MPortTable, cdx6500ContMX25=cdx6500ContMX25, cdx6500mx25spCallTimer=cdx6500mx25spCallTimer, cdx6500mx25pCharOutTotal=cdx6500mx25pCharOutTotal, cdx6500mx25pFrameOutTotal=cdx6500mx25pFrameOutTotal, cdx6500mx25sCharInTotal=cdx6500mx25sCharInTotal, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500PPCTMX25SPortTable=cdx6500PPCTMX25SPortTable, cdx6500Configuration=cdx6500Configuration, cdx6500mx25sPacketWinSize=cdx6500mx25sPacketWinSize, cdx6500PPCTMX25PortTables=cdx6500PPCTMX25PortTables, cdx6500mx25sFramesOutPerSec=cdx6500mx25sFramesOutPerSec, cdx6500mx25sStartingPVC=cdx6500mx25sStartingPVC, cdx6500=cdx6500, cdx6500mx25mpTries=cdx6500mx25mpTries, cdx6500mx25mpHighSpeedElectricalInterfaceOption=cdx6500mx25mpHighSpeedElectricalInterfaceOption, DisplayString=DisplayString, cdx6500mx25sSVCChannels=cdx6500mx25sSVCChannels, cdx6500mx25sContBootStation=cdx6500mx25sContBootStation, cdx6500mx25sCharsOutPerSec=cdx6500mx25sCharsOutPerSec, cdx6500PPSTMX25PortEntry=cdx6500PPSTMX25PortEntry, cdx6500mx25pSubType=cdx6500mx25pSubType, cdx6500mx25spStationAddress=cdx6500mx25spStationAddress, cdx6500mx25mpClockSpeed=cdx6500mx25mpClockSpeed, cdx6500mx25sCallCount=cdx6500mx25sCallCount, cdx6500mx25sRCDestination=cdx6500mx25sRCDestination, cdx6500mx25spPollTimer=cdx6500mx25spPollTimer, cdx6500mx25mpPollTimer=cdx6500mx25mpPollTimer, cdx6500mx25mpV24ElectricalInterfaceOption=cdx6500mx25mpV24ElectricalInterfaceOption, cdx6500mx25spTXEncoding=cdx6500mx25spTXEncoding, cdx6500mx25spPacketWinSize=cdx6500mx25spPacketWinSize, cdx6500mx25mpResetTimer=cdx6500mx25mpResetTimer, cdx6500mx25sLowerQueue=cdx6500mx25sLowerQueue, cdx6500mx25sCharsInPerSec=cdx6500mx25sCharsInPerSec, cdx6500mx25sContEnableStation=cdx6500mx25sContEnableStation, cdx6500mx25sFrameOutTotal=cdx6500mx25sFrameOutTotal, cdx6500mx25mpElectricalInterfaceType=cdx6500mx25mpElectricalInterfaceType, cdx6500mx25sStatsPortNum=cdx6500mx25sStatsPortNum, cdx6500mx25pCharsOutPerSec=cdx6500mx25pCharsOutPerSec, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500mx25sStatsStnAddr=cdx6500mx25sStatsStnAddr, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500mx25spSubType=cdx6500mx25spSubType, cdx6500mx25spCfgPortNum=cdx6500mx25spCfgPortNum, cdx6500mx25spClockSpeed=cdx6500mx25spClockSpeed, cdx6500SPCTMX25StationTable=cdx6500SPCTMX25StationTable, codex=codex, cdx6500mx25pFramesInPerSec=cdx6500mx25pFramesInPerSec, cdx6500PPCTMX25MPortEntry=cdx6500PPCTMX25MPortEntry, cdx6500mx25spElectricalInterfaceType=cdx6500mx25spElectricalInterfaceType, cdx6500mx25sMX25Options=cdx6500mx25sMX25Options, cdx6500mx25spBillingRecords=cdx6500mx25spBillingRecords, cdx6500SPCTMX25StationEntry=cdx6500SPCTMX25StationEntry, cdx6500mx25sStationAddress=cdx6500mx25sStationAddress, cdx6500mx25sBillingRecords=cdx6500mx25sBillingRecords, cdx6500ContMX25StationEntry=cdx6500ContMX25StationEntry, cdx6500mx25spResetTimer=cdx6500mx25spResetTimer, cdx6500mx25mpCallTimer=cdx6500mx25mpCallTimer, cdx6500mx25spClearTimer=cdx6500mx25spClearTimer, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500mx25pStatsPortNum=cdx6500mx25pStatsPortNum, cdx6500mx25sStatsStationNum=cdx6500mx25sStatsStationNum, cdx6500mx25pCharInTotal=cdx6500mx25pCharInTotal, cdx6500SPSTMX25StationEntry=cdx6500SPSTMX25StationEntry, cdx6500mx25sFrameWinSize=cdx6500mx25sFrameWinSize, cdx6500mx25mpClockSource=cdx6500mx25mpClockSource, cdx6500mx25spMX25Options=cdx6500mx25spMX25Options, cdx6500mx25spPortControl=cdx6500mx25spPortControl, cdx6500mx25spPVCChannels=cdx6500mx25spPVCChannels, cdx6500mx25spRestartTimer=cdx6500mx25spRestartTimer, cdx6500mx25spV24ElectricalInterfaceOption=cdx6500mx25spV24ElectricalInterfaceOption, cdx6500mx25sUpperQueue=cdx6500mx25sUpperQueue, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500Controls=cdx6500Controls, cdx6500mx25pFrameInTotal=cdx6500mx25pFrameInTotal, cdx6500mx25mpCfgPortNum=cdx6500mx25mpCfgPortNum, cdx6500mx25sCfgStationNum=cdx6500mx25sCfgStationNum)
