#
# PySNMP MIB module CISCO-TRANSACTION-CONNECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TRANSACTION-CONNECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, iso, NotificationType, Counter64, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, MibIdentifier, Unsigned32, ObjectIdentity, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "NotificationType", "Counter64", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Integer32", "Bits")
DisplayString, TimeInterval, DateAndTime, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "DateAndTime", "TextualConvention", "TruthValue")
ciscoTransactionConnectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 144))
ciscoTransactionConnectionMIB.setRevisions(('2005-12-22 00:00', '1999-08-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setRevisionsDescriptions(('Imported Unsigned32 from SNMPv2-SMI instead of CISCO-TC.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setLastUpdated('200512220000Z')
if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: ctrc-dev@external.cisco.com')
if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setDescription('The MIB module for retrieving Cisco Transaction Connection configuration and status. Cisco Transaction Connection routes transactions between IBM CICS (Customer Information Control System) hosts and clients using the ISC (Inter-System Communication) protocol.')
ciscoTransConnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 1))
ctcLicense = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1))
if mibBuilder.loadTexts: ctcLicense.setStatus('current')
if mibBuilder.loadTexts: ctcLicense.setDescription('An object containing a Cisco Transaction Connection license.')
ctcLicenseState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unconfigured", 1), ("notValidatedYet", 2), ("badKey", 3), ("licenseOK", 4), ("expired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseState.setStatus('current')
if mibBuilder.loadTexts: ctcLicenseState.setDescription('The state of the Transaction Connection license. unconfigured : A license key has not been provided. notValidatedYet : A license key has been provided, but it cannot be validated until a server is created. When the first server is created, the license key is validated, changing the license state to one of the following. badKey : The content of ctcLicenseKey is not a valid license key. licenseOK : The license has been validated. expired : The expiration date of the license has passed.')
ctcLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseKey.setStatus('current')
if mibBuilder.loadTexts: ctcLicenseKey.setDescription('A Transaction Connection license key. The field must be exactly 32 hexadecimal characters in length.')
ctcLicenseMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseMaxConn.setStatus('current')
if mibBuilder.loadTexts: ctcLicenseMaxConn.setDescription('The maximum number of connections allowed by the license. This field contains zero if the license is for an unlimited number of connections or if the ctcLicenseState is not licenseOK.')
ctcLicenseCurrConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseCurrConn.setStatus('current')
if mibBuilder.loadTexts: ctcLicenseCurrConn.setDescription('Current number of connections in use. Normally, the value of this field should be less then or equal to the value in ctcLicenseMaxConn if it is not zero. However, when a license key is changed to decrease the maximum number ofconnections, the value of this field may temporarily exceed the limit. When this occurs, existing connections will not be deleted automatically to meet the new, smaller limit. New connections will be denied until the existing connections voluntarily disconnect.')
ctcLicenseExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseExpiration.setStatus('current')
if mibBuilder.loadTexts: ctcLicenseExpiration.setDescription('The expiration date of the Transaction Connection license. This object contains a valid expiration date only if the license is not permanent.')
ctcDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2), )
if mibBuilder.loadTexts: ctcDestinationTable.setStatus('current')
if mibBuilder.loadTexts: ctcDestinationTable.setDescription('A table containing Cisco Transaction Connection destination configurations.')
ctcDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1), ).setIndexNames((0, "CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationName"))
if mibBuilder.loadTexts: ctcDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: ctcDestinationEntry.setDescription('A row containing a Cisco Transaction Connection destination configuration.')
ctcDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationName.setStatus('current')
if mibBuilder.loadTexts: ctcDestinationName.setDescription('The destination name.')
ctcDestinationRemoteLUName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationRemoteLUName.setStatus('current')
if mibBuilder.loadTexts: ctcDestinationRemoteLUName.setDescription('The Remote LU (Logical Unit) name of the destination target.')
ctcDestinationModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationModeName.setStatus('current')
if mibBuilder.loadTexts: ctcDestinationModeName.setDescription('The mode name of the destination target. In SNA, a mode name is the name used by the initiator of a session to designate the characteristics desired for that session, such as traffic pacing values, message length limits, and the class of service within the transport network.')
ctcDestinationNumHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationNumHits.setStatus('current')
if mibBuilder.loadTexts: ctcDestinationNumHits.setDescription('The number of hits the destination target has received. A hit is registered each time a route is looked up. This means that every time a connection is established, one destination target of the route has its hit count incremented.')
ctcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3), )
if mibBuilder.loadTexts: ctcRouteTable.setStatus('current')
if mibBuilder.loadTexts: ctcRouteTable.setDescription('A table containing Cisco Transaction Connection route configurations.')
ctcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctcRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ctcRouteEntry.setDescription('A row containing a Cisco Transaction Connection destination configuration.')
ctcRouteOwningServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcRouteOwningServer.setStatus('current')
if mibBuilder.loadTexts: ctcRouteOwningServer.setDescription('The ctcServerIndex of the server that owns this route.')
ctcRouteTransactionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcRouteTransactionID.setStatus('current')
if mibBuilder.loadTexts: ctcRouteTransactionID.setDescription('The transaction ID that this route handles.')
ctcRouteDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcRouteDestinationName.setStatus('current')
if mibBuilder.loadTexts: ctcRouteDestinationName.setDescription("The name of this route's destination.")
ctcServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4), )
if mibBuilder.loadTexts: ctcServerTable.setStatus('current')
if mibBuilder.loadTexts: ctcServerTable.setDescription('A table containing Transaction Connection servers.')
ctcServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1), ).setIndexNames((0, "CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerIndex"))
if mibBuilder.loadTexts: ctcServerEntry.setStatus('current')
if mibBuilder.loadTexts: ctcServerEntry.setDescription('A row containing a Transaction Connection server. This server routes APPC (Advanced Program-to-Program Communcations) data streams between TCP/IP clients and CICS hosts. Each server will have a unique IP address and port.')
ctcServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerIndex.setStatus('current')
if mibBuilder.loadTexts: ctcServerIndex.setDescription('The index of this server in the server list.')
ctcServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerName.setStatus('current')
if mibBuilder.loadTexts: ctcServerName.setDescription('The name of the server.')
ctcServerListening = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerListening.setStatus('current')
if mibBuilder.loadTexts: ctcServerListening.setDescription("This object reflects whether or not the server is listening for connections. A return value of 'true' means the server is actively listening.")
ctcServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: ctcServerIPAddr.setDescription('This object reflects the IP address for which the server is listening for connections. If it is set to 0.0.0.0, then the server is listening on all IP addresses.')
ctcServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1435)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerPort.setStatus('current')
if mibBuilder.loadTexts: ctcServerPort.setDescription('The port on which the server is listening for connections.')
ctcServerDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerDestinationName.setStatus('current')
if mibBuilder.loadTexts: ctcServerDestinationName.setDescription("This object reflects the name of this server's default destination.")
ctcServerClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerClientTimeout.setStatus('current')
if mibBuilder.loadTexts: ctcServerClientTimeout.setDescription('This object reflects the period of time that a client end connection can remain idle before being dropped by a server. The maximum time is 24 hours. If set to 0, the server will never drop the connection due to a timeout event.')
ctcServerHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerHostTimeout.setStatus('current')
if mibBuilder.loadTexts: ctcServerHostTimeout.setDescription('This object reflects the period of time that a host end connection can remain idle before being dropped by a server. The maximum time is 24 hours. If set to 0, the server will never drop the connection due to a timeout event.')
ctcServerWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 9), Unsigned32().clone(4096)).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerWindowSize.setStatus('current')
if mibBuilder.loadTexts: ctcServerWindowSize.setDescription('TCP window size for each connection of the Transaction Connection server.')
ctcServerConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ctcServerConnectionCount.setDescription('The number of connections on this server at this moment.')
ctcServerProgNameUpperCase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerProgNameUpperCase.setStatus('current')
if mibBuilder.loadTexts: ctcServerProgNameUpperCase.setDescription("This object reflects whether or not the server will convert CICS program names to upper case. A return value of 'true' means the server will convert such names to upper case.")
ctcConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5), )
if mibBuilder.loadTexts: ctcConnectionTable.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionTable.setDescription('A table containing connection information. Each row reflects a client connection that is active at this moment.')
ctcConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctcConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionEntry.setDescription('A row containing connection information.')
ctcConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionId.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionId.setDescription('The ID of the connection object.')
ctcConnectionServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionServer.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionServer.setDescription('The ctcServerIndex of the server that owns this connection.')
ctcConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("closing", 2), ("halt", 3), ("receiving", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionState.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionState.setDescription('The state of a connection object. reset : the connection is ready to process data closing : the connection is in the process of closing halt : the connection has halted due to an error condition receiving : the connection is receive normal data')
ctcConnectionSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionSessionCount.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionSessionCount.setDescription('The number of sessions currently in use for the connection.')
ctcConnectionClientIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionClientIPAddr.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionClientIPAddr.setDescription('IP address of client machine using this connection.')
ctcConnectionClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionClientPort.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionClientPort.setDescription('Port number used on client machine for this connection.')
ctcConnectionTotalConversations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionTotalConversations.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionTotalConversations.setDescription('The number of conversations that have been processed by the connection.')
ctcConnectionConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionConnectTime.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionConnectTime.setDescription('The moment when the connection was established.')
ctcConnectionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionIdleTime.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionIdleTime.setDescription('Amount of time the connection has gone without activity.')
ctcConnectionTotalBytesRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionTotalBytesRecvd.setStatus('current')
if mibBuilder.loadTexts: ctcConnectionTotalBytesRecvd.setDescription('The total number of bytes received from client.')
ctcTransactionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6), )
if mibBuilder.loadTexts: ctcTransactionTable.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionTable.setDescription('A table containing transaction information. Each row reflects a host transaction that is active at this moment.')
ctcTransactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctcTransactionEntry.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionEntry.setDescription('A row containing transaction information.')
ctcTransactionSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionSessionId.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionSessionId.setDescription('The ID of the transaction session object.')
ctcTransactionServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionServer.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionServer.setDescription('The ctcServerIndex of the server that owns this transaction.')
ctcTransactionConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionConnectionId.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionConnectionId.setDescription("The ID of the transaction session object's connection.")
ctcTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reset", 1), ("opening", 2), ("sending", 3), ("receiving", 4), ("exception", 5), ("exceptionresponse", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionState.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionState.setDescription('The state of a connection object. reset : the transaction is ready to process data opening : the transaction is opening a connection sending : the transaction is sending data receiving : the transaction is receiving data exception : the transaction has encountered an error exceptionresponse : the transaction is awaiting an error response closing : the transaction is in the process of closing')
ctcTransactionTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionTPName.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionTPName.setDescription('The transaction program name of the transaction. This is sometimes referred to as the TRANID in CICS.')
ctcTransactionUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionUserId.setStatus('current')
if mibBuilder.loadTexts: ctcTransactionUserId.setDescription('The user ID that was used to initiate the transaction.')
ciscoTransConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 3))
ciscoTransConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 1))
ciscoTransConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2))
ciscoTransConnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 1, 1)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnLicenseGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnDestinationGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnRouteGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnServerGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnConnectionGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnTransactionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnMIBCompliance = ciscoTransConnMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Transaction Connection MIB')
ciscoTransConnLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 1)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseState"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseKey"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseMaxConn"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseCurrConn"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseExpiration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnLicenseGroup = ciscoTransConnLicenseGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnLicenseGroup.setDescription('A collection of objects providing Transaction Connection license monitoring.')
ciscoTransConnDestinationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 2)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationRemoteLUName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationModeName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationNumHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnDestinationGroup = ciscoTransConnDestinationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnDestinationGroup.setDescription('A collection of objects providing Transaction Connection destination monitoring.')
ciscoTransConnRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 3)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcRouteOwningServer"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcRouteTransactionID"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcRouteDestinationName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnRouteGroup = ciscoTransConnRouteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnRouteGroup.setDescription('A collection of objects providing Transaction Connection route monitoring.')
ciscoTransConnServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 4)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerIndex"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerListening"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerIPAddr"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerPort"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerDestinationName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerClientTimeout"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerHostTimeout"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerWindowSize"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerConnectionCount"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerProgNameUpperCase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnServerGroup = ciscoTransConnServerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnServerGroup.setDescription('A collection of objects providing Transaction Connection server monitoring.')
ciscoTransConnConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 5)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionId"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionServer"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionState"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionSessionCount"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionClientIPAddr"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionClientPort"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionTotalConversations"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionConnectTime"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionIdleTime"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionTotalBytesRecvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnConnectionGroup = ciscoTransConnConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnConnectionGroup.setDescription('A collection of objects providing Transaction Connection monitoring.')
ciscoTransConnTransactionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 6)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionSessionId"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionServer"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionConnectionId"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionState"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionTPName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionUserId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnTransactionGroup = ciscoTransConnTransactionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTransConnTransactionGroup.setDescription('A collection of objects providing Transaction Connection transaction monitoring.')
mibBuilder.exportSymbols("CISCO-TRANSACTION-CONNECTION-MIB", ctcConnectionId=ctcConnectionId, PYSNMP_MODULE_ID=ciscoTransactionConnectionMIB, ctcConnectionTotalConversations=ctcConnectionTotalConversations, ctcRouteTransactionID=ctcRouteTransactionID, ciscoTransConnConnectionGroup=ciscoTransConnConnectionGroup, ciscoTransactionConnectionMIB=ciscoTransactionConnectionMIB, ctcConnectionTable=ctcConnectionTable, ciscoTransConnTransactionGroup=ciscoTransConnTransactionGroup, ctcServerConnectionCount=ctcServerConnectionCount, ctcServerTable=ctcServerTable, ctcServerPort=ctcServerPort, ctcDestinationNumHits=ctcDestinationNumHits, ctcServerWindowSize=ctcServerWindowSize, ctcTransactionTPName=ctcTransactionTPName, ctcTransactionServer=ctcTransactionServer, ctcLicenseKey=ctcLicenseKey, ctcDestinationEntry=ctcDestinationEntry, ctcTransactionSessionId=ctcTransactionSessionId, ciscoTransConnRouteGroup=ciscoTransConnRouteGroup, ctcLicenseState=ctcLicenseState, ctcServerEntry=ctcServerEntry, ctcServerName=ctcServerName, ciscoTransConnServerGroup=ciscoTransConnServerGroup, ciscoTransConnLicenseGroup=ciscoTransConnLicenseGroup, ctcTransactionUserId=ctcTransactionUserId, ciscoTransConnMIBConformance=ciscoTransConnMIBConformance, ctcServerProgNameUpperCase=ctcServerProgNameUpperCase, ctcConnectionServer=ctcConnectionServer, ctcConnectionState=ctcConnectionState, ctcTransactionEntry=ctcTransactionEntry, ctcServerClientTimeout=ctcServerClientTimeout, ciscoTransConnDestinationGroup=ciscoTransConnDestinationGroup, ctcTransactionState=ctcTransactionState, ciscoTransConnMIBCompliance=ciscoTransConnMIBCompliance, ctcConnectionClientIPAddr=ctcConnectionClientIPAddr, ctcRouteOwningServer=ctcRouteOwningServer, ciscoTransConnMIBGroups=ciscoTransConnMIBGroups, ciscoTransConnMIBObjects=ciscoTransConnMIBObjects, ctcConnectionSessionCount=ctcConnectionSessionCount, ctcDestinationTable=ctcDestinationTable, ctcLicenseExpiration=ctcLicenseExpiration, ctcLicense=ctcLicense, ctcRouteEntry=ctcRouteEntry, ctcServerListening=ctcServerListening, ctcLicenseCurrConn=ctcLicenseCurrConn, ciscoTransConnMIBCompliances=ciscoTransConnMIBCompliances, ctcConnectionConnectTime=ctcConnectionConnectTime, ctcConnectionEntry=ctcConnectionEntry, ctcDestinationName=ctcDestinationName, ctcServerIPAddr=ctcServerIPAddr, ctcLicenseMaxConn=ctcLicenseMaxConn, ctcServerHostTimeout=ctcServerHostTimeout, ctcConnectionClientPort=ctcConnectionClientPort, ctcRouteTable=ctcRouteTable, ctcConnectionIdleTime=ctcConnectionIdleTime, ctcServerIndex=ctcServerIndex, ctcTransactionConnectionId=ctcTransactionConnectionId, ctcDestinationModeName=ctcDestinationModeName, ctcServerDestinationName=ctcServerDestinationName, ctcTransactionTable=ctcTransactionTable, ctcRouteDestinationName=ctcRouteDestinationName, ctcConnectionTotalBytesRecvd=ctcConnectionTotalBytesRecvd, ctcDestinationRemoteLUName=ctcDestinationRemoteLUName)
