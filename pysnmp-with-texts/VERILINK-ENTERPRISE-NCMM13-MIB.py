#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMM13-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMM13-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Counter64, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Gauge32, ObjectIdentity, IpAddress, iso, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter64", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Gauge32", "ObjectIdentity", "IpAddress", "iso", "NotificationType", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_m13, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-m13")
ncmm13DS3PortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000), )
if mibBuilder.loadTexts: ncmm13DS3PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3PortTable.setDescription('The m13 DS3 Port table.')
ncmm13DS3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13DS3PortNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13DS3PortIndex"))
if mibBuilder.loadTexts: ncmm13DS3PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3PortEntry.setDescription('An entry in the m13 information table.')
ncmm13DS3PortNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3PortNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3PortNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13DS3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3PortIndex.setDescription('The index value which uniquely identifies the DS3 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
ncmm13DS3ModeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("m23-bit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3ModeControl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3ModeControl.setDescription('The Mode Control Bit for M13.')
ncmm13DS3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bi-polar", 1), ("uni-polar", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LineType.setDescription('The Line Type for M13.')
ncmm13DS3PerfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3PerfControl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3PerfControl.setDescription('Performance Control Enabled/Disabled for M13.')
ncmm13DS3AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3AlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3AlarmControl.setDescription('Alarm Control Enabled/Disabled for M13.')
ncmm13DS3FarEndControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3FarEndControl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3FarEndControl.setDescription('Far End Control Enabled/Disabled for M13.')
ncmm13DS3BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bus", 1), ("a-bus", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3BusType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3BusType.setDescription('Inband Control Enabled/Disabled for M13.')
ncmm13DS3InbandControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3InbandControl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3InbandControl.setDescription('Inband Control Enabled/Disabled for M13.')
ncmm13DS3CableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3CableLength.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3CableLength.setDescription('Cable length for M13.')
ncmm13DS3EquipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3EquipCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3EquipCode.setDescription('This is the Far End Equipment Identification code that describes the specific piece of equipment. It is sent within the Path Identification Message.')
ncmm13DS3LocationIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3LocationIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LocationIDCode.setDescription('This is the Far End Location Identification code that describes the specific location of the equipment. It is sent within the Path Identification Message.')
ncmm13DS3FrameIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3FrameIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3FrameIDCode.setDescription('This is the Far End Frame Identification code that identifies where the equipment is located within a building at a given location. It is sent within the Path Identification Message.')
ncmm13DS3UnitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3UnitCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3UnitCode.setDescription('This is the Far End code that identifies the equipment location within a bay. It is sent within the Path Identification Message.')
ncmm13DS3FacilityIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3FacilityIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3FacilityIDCode.setDescription('This code identifies a specific Far End DS3 path. It is sent within the Path Identification Message.')
ncmm13DS3PortIdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3PortIdCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3PortIdCode.setDescription('Port ID.')
ncmm13DS3GenIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14000, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3GenIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3GenIDCode.setDescription('Test Signal Generator ID.')
ncmm13StatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001), )
if mibBuilder.loadTexts: ncmm13StatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatTable.setDescription('The m13 Stats.')
ncmm13StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13StatNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13StatIndex"))
if mibBuilder.loadTexts: ncmm13StatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatEntry.setDescription('An entry in the m13 stats table.')
ncmm13StatNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
ncmm13StatAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatAIS.setDescription('Port Status m13 AIS off/on.')
ncmm13StatIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatIdle.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatIdle.setDescription('port Status m13 Idle off/on.')
ncmm13StatYellowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatYellowAlm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatYellowAlm.setDescription('Port Status m13 Yellow Alarm off/on.')
ncmm13StatOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatOOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatOOF.setDescription('port status m13 off/on.')
ncmm13StatLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13StatLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13StatLOS.setDescription('Port Status m13 LOS off/on.')
ncmm13DS3NearEndLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3NearEndLocalLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3NearEndLocalLoopback.setDescription('Port Status m13 Ds3 Local Loopback off/on.')
ncmm13DS3NearEndLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3NearEndLineLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3NearEndLineLoopback.setDescription('Port Status m13 ds3 near end Line loopback off/on.')
ncmm13DS3FarEndLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3FarEndLineLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3FarEndLineLoopback.setDescription('Port Status m13 ds3 far end line loopback off/on.')
ncmm13T1NearEndLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1NearEndLineLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1NearEndLineLoopback.setDescription('Port Status m13 T1 near end line loopback.')
ncmm13T1FarEndLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1FarEndLineLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1FarEndLineLoopback.setDescription('Port Status m13 T1 Far end line loopback.')
ncmm13FarEndAllT1LineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13FarEndAllT1LineLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13FarEndAllT1LineLoopback.setDescription('Port Status m13 T1 Far End All T1 Line Loopback.')
ncmm13T1LocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14001, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1LocalLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LocalLoopback.setDescription('Port Status m13 T1 Local loopback.')
ncmm13CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002), )
if mibBuilder.loadTexts: ncmm13CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentTable.setDescription('The m13 Current table.')
ncmm13CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13CurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13CurrentIndex"))
if mibBuilder.loadTexts: ncmm13CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentEntry.setDescription('An entry in the m13 Current table.')
ncmm13CurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentIndex.setDescription('The index value which uniquely identifies the m13 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmm13CurrentCRCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentCRCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentCRCStatus.setDescription('Current CRC4 Status.')
ncmm13CurrentTimeStampSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentTimeStampSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentTimeStampSecs.setDescription('Current Time in seconds.')
ncmm13CurrentTimeStampMSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentTimeStampMSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentTimeStampMSecs.setDescription('Current Time in milliseconds.')
ncmm13CurrentIntervalSecsElaps = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentIntervalSecsElaps.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentIntervalSecsElaps.setDescription('Seconds elapsed in the current interval.')
ncmm13CurrentFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentFarEndCCV.setDescription('The counter associated with the number of Far End C-bit Code Violations, in the current 15 minute interval.')
ncmm13CurrentFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentFarEndCES.setDescription('The counter associated with the number of Far End C-bit Errored Seconds, in the current 15 minute interval.')
ncmm13CurrentFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentFarEndCSES.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmm13CurrentFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentFarEndLUAS.setDescription('Far End Line Unavailable Seconds. The counter associated with the number of Seconds the Far End m13 interface was Out Of Service in the current 15 minute interval.')
ncmm13CurrentLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentLCV.setDescription('The counter associated with the number of Line Code Violations, a bipolar or excesive zero violation, in the current 15 minute interval.')
ncmm13CurrentLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentLES.setDescription('Line Errored Second Total. The counter associated with the number of Seconds of in which one or more LCV occurred in the current 15 minute interval.')
ncmm13CurrentLSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentLSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentLSES.setDescription('The counter associated with the number of Line Severely Errored Seconds (LSES) in the current 15 minute interval.')
ncmm13CurrentPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentPCV.setDescription('The counter associated with the number of Parity Code Violations (locally calculated P-bits disagree with those received), in the current 15 minute interval.')
ncmm13CurrentPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentPES.setDescription('The counter associated with the number of Seconds having at least one Parity Code Violation, in the current 15 minute interval.')
ncmm13CurrentPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentPSES.setDescription('The counter associated with the number of Seconds having 44 or more Parity Code Violations, in the current 15 minute interval.')
ncmm13CurrentCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentCCV.setDescription('The counter associated with the number of C-bit Code Violations, in the current 15 minute interval.')
ncmm13CurrentCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentCES.setDescription('The counter associated with the number of C-bit Errored Seconds, in the current 15 minute interval.')
ncmm13CurrentCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentCSES.setDescription('The counter associated with the number of C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmm13CurrentSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentSEFS.setDescription('The counter associated with the number of seconds in which one or more Out of Frame occurred in the current 15 minute interval.')
ncmm13CurrentAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentAISS.setDescription('The counter associated with the number of Seconds in which one or more incoming AISS was detected in the current 15 minute interval.')
ncmm13CurrentLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentLUAS.setDescription('The counter associated with the number of Seconds in which one or more incoming LUAS was detected in the current 15 minute interval.')
ncmm13CurrentLOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentLOOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentLOOS.setDescription('The counter associated with the number of Seconds the m13 interface was Out Of Service in the current 15 minute interval.')
ncmm13CurrentLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14002, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13CurrentLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13CurrentLOFS.setDescription('The counter associated with the number of Seconds Of system Loss Of Signal (LOS) in the current 15 minute interval.')
ncmm13IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003), )
if mibBuilder.loadTexts: ncmm13IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalTable.setDescription('The DS3/E3 Interval table.')
ncmm13IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13IntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13IntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13IntervalNumber"))
if mibBuilder.loadTexts: ncmm13IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalEntry.setDescription('An entry in the m13 Interval table.')
ncmm13IntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalIndex.setDescription('The index value which uniquely identifies the m13 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmm13IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmm13IntervalFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalFarEndCCV.setDescription('The counter associated with the number of Far End C-bit Code Violations, in the previous 15 minute interval.')
ncmm13IntervalFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalFarEndCES.setDescription('The counter associated with the number of Far End C-bit Errored Seconds, in the current 15 minute interval.')
ncmm13IntervalFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalFarEndCSES.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmm13IntervalFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalFarEndLUAS.setDescription('Far End Line Unavailable Seconds. The counter associated with the number of Seconds the Far End m13 interface was Out Of Service in the current 15 minute interval.')
ncmm13IntervalLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalLCV.setDescription('The counter associated with the number of Line Code Violations, a bipolar or excesive zero violation, in the current 15 minute interval.')
ncmm13IntervalLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalLES.setDescription('Line Errored Second Total. The counter associated with the number of Seconds of in which one or more LCV occurred in the current 15 minute interval.')
ncmm13IntervalLSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalLSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalLSES.setDescription('The counter associated with the number of Line Severely Errored Seconds (LSES) in the current 15 minute interval.')
ncmm13IntervalPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalPCV.setDescription('The counter associated with the number of Parity Code Violations (locally calculated P-bits disagree with those received), in the current 15 minute interval.')
ncmm13IntervalPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalPES.setDescription('The counter associated with the number of Seconds having at least one Parity Code Violation, in the current 15 minute interval.')
ncmm13IntervalPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalPSES.setDescription('The counter associated with the number of Seconds having 44 or more Parity Code Violations, in the current 15 minute interval.')
ncmm13IntervalCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalCCV.setDescription('The counter associated with the number of C-bit Code Violations, in the current 15 minute interval.')
ncmm13IntervalCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalCES.setDescription('The counter associated with the number of C-bit Errored Seconds, in the current 15 minute interval.')
ncmm13IntervalCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalCSES.setDescription('The counter associated with the number of C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmm13IntervalSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalSEFS.setDescription('The counter associated with the number of seconds in which one or more Out of Frame occurred in the current 15 minute interval.')
ncmm13IntervalAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalAISS.setDescription('The counter associated with the number of Seconds in which one or more incoming AIS was detected in the current 15 minute interval.')
ncmm13IntervalLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalLUAS.setDescription('The counter associated with the number of Seconds the m13 interface was Out Of Service in the current 15 minute interval.')
ncmm13IntervalLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalLOSS.setDescription('The counter associated with the number of Seconds Of system Loss Of Signal (LOS) in the current 15 minute interval.')
ncmm13IntervalLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14003, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13IntervalLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13IntervalLOFS.setDescription('The counter associated with the number of Seconds Of system Loss Of Frame (LOF) in the current 15 minute interval.')
ncmm13TotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004), )
if mibBuilder.loadTexts: ncmm13TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalTable.setDescription('The m13 Total table.')
ncmm13TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TotalIndex"))
if mibBuilder.loadTexts: ncmm13TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalEntry.setDescription('An entry in the m13 Total table.')
ncmm13TotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalIndex.setDescription('The index value which uniquely identifies the m13 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmm13TotalCRCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalCRCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalCRCStatus.setDescription('CRC4 Status.')
ncmm13TotalValidInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalValidInterv.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalValidInterv.setDescription('The number of valid intervals.')
ncmm13TotalFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalFarEndCCV.setDescription('The counter associated with the number of Far End C-bit Code Violations, in the last 24 hour interval.')
ncmm13TotalFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalFarEndCES.setDescription('The counter associated with the number of Far End C-bit Errored Seconds, in the last 24 hour interval.')
ncmm13TotalFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalFarEndCSES.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds, in the last 24 hour interval.')
ncmm13TotalFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalFarEndLUAS.setDescription('Far End Line Unavailable Seconds. The counter associated with the number of Seconds the Far End m13 interface was Out Of Service in the last 24 hour interval.')
ncmm13TotalLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalLCV.setDescription('The counter associated with the number of Line Code Violations, a bipolar or excesive zero violation, in the last 24 hour interval.')
ncmm13TotalLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalLES.setDescription('Line Errored Second Total. The counter associated with the number of Seconds of in which one or more LCV occurred in the last 24 hour interval.')
ncmm13TotalLSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalLSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalLSES.setDescription('The counter associated with the number of Seconds Of Line Severely Errored Seconds (LSES) in the last 24 hour interval.')
ncmm13TotalPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalPCV.setDescription('The counter associated with the number of Parity Code Violations (locally calculated P-bits disagree with those received), in the last 24 hour interval.')
ncmm13TotalPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalPES.setDescription('The counter associated with the number of Seconds having at least one Parity Code Violation, in the last 24 hour interval.')
ncmm13TotalPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalPSES.setDescription('The counter associated with the number of Seconds having 44 or more Parity Code Violations, in the last 24 hour interval.')
ncmm13TotalCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalCCV.setDescription('The counter associated with the number of C-bit Code Violations, in the last 24 hour interval.')
ncmm13TotalCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalCES.setDescription('The counter associated with the number of C-bit Errored Seconds, in the last 24 hour interval.')
ncmm13TotalCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalCSES.setDescription('The counter associated with the number of C-bit Severely Errored Seconds, in the last 24 hour interval.')
ncmm13TotalSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalSEFS.setDescription('The counter associated with the number of seconds in which one or more Out of Frame occurred in the last 24 hour interval.')
ncmm13TotalAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalAISS.setDescription('The counter associated with the number of Seconds in which one or more incoming AIS was detected in the last 24 hour interval.')
ncmm13TotalLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalLUAS.setDescription('The counter associated with the number of Seconds the m13 interface was Out Of Service in the last 24 hour interval.')
ncmm13TotalLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalLOSS.setDescription('The counter associated with the number of Seconds Of system Loss Of Signal (LOS) in the last 24 hour interval.')
ncmm13TotalLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14004, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TotalLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TotalLOFS.setDescription('The counter associated with the number of Seconds Of system Loss Of Frame (LOF) in the last 24 hour interval.')
ncmm13PerformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005), )
if mibBuilder.loadTexts: ncmm13PerformanceSnapShotTable.setStatus('mandatory')
ncmm13PerformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13SnapShotIndex"))
if mibBuilder.loadTexts: ncmm13PerformanceSnapShotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13PerformanceSnapShotEntry.setDescription('An entry in the m13 Performance Snap Shot Entry table.')
ncmm13SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13SnapShotNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13SnapShotNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmm13SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13SnapShotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13SnapShotIndex.setDescription('The index value which uniquely identifies the m13 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmm13SnapShotCRCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13SnapShotCRCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13SnapShotCRCStatus.setDescription('CRC4 Status.')
ncmm13SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13SnapShot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13SnapShot.setDescription('The variable specifies the option to initiate snap shot command.')
ncmm13TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TimeStampSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TimeStampSec.setDescription('The variable specifies the Time Stamp in Seconds .')
ncmm13TimeStampMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TimeStampMilliSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TimeStampMilliSec.setDescription('The variable specifies the Time Stamp in milli Seconds .')
ncmm13SnapShotSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13SnapShotSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13SnapShotSecs.setDescription('The variable specifies number of seconds in the current interval.')
ncmm13ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14005, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13ResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13ResetPerfReg.setDescription('Reset Performance Monitoring registers.')
ncmm13TCAQtrTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006), )
if mibBuilder.loadTexts: ncmm13TCAQtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrTable.setDescription('The quarter hour Alert Threshold Table.')
ncmm13TCAQtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TCAQtrNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TCAQtrIndex"))
if mibBuilder.loadTexts: ncmm13TCAQtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrEntry.setDescription('An entry in the m13 table.')
ncmm13TCAQtrNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TCAQtrNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13TCAQtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TCAQtrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrIndex.setDescription('The index value which uniquely identifies the alert crossing threshold interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an plcpLineIndex object instance.')
ncmm13TCAQtrFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndCCV.setDescription('The performance alert threshold for m13 layer Far End C-bit Code Violation in 1/4 hour boundary.')
ncmm13TCAQtrFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndCES.setDescription('The performance alert threshold for m13 Far End C-bit Errored Seconds, in 1/4 hour boundary.')
ncmm13TCAQtrFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndCSES.setDescription('The performance alert threshold for m13 Far End C-bit Severely Errored Seconds, in 1/4 hour boundary.')
ncmm13TCAQtrFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrFarEndLUAS.setDescription('The performance alert threshold for m13 layer Far End Line Unavailable Seconds in 1/4 hour boundary.')
ncmm13TCAQtrLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrLCV.setDescription('The performance alert threshold for m13 layer Line code Violation in 1/4 hour boundary.')
ncmm13TCAQtrLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrLES.setDescription('The performance alert threshold for m13 layer Line Errored Second in 1/4 hour boundary.')
ncmm13TCAQtrLSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrLSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrLSES.setDescription('The performance alert threshold for m13 layer Line Severely Errored Second in 1/4 hour boundary.')
ncmm13TCAQtrPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrPCV.setDescription('The performance alert threshold for m13 layer Parity Code Violation in 1/4 hour boundary.')
ncmm13TCAQtrPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrPES.setDescription('The performance alert threshold for m13 layer Parity Errored Second in 1/4 hour boundary.')
ncmm13TCAQtrPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrPSES.setDescription('The performance alert threshold for m13 layer Parity Severely Errored Second in 1/4 hour boundary.')
ncmm13TCAQtrCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrCCV.setDescription('The performance alert threshold for m13 layer C-bit Code Violation in 1/4 hour boundary.')
ncmm13TCAQtrCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrCES.setDescription('The performance alert threshold for m13 Far End C-bit Errored Seconds, layer Errored Second in 1/4 hour boundary.')
ncmm13TCAQtrCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrCSES.setDescription('The performance alert threshold for m13 layer C-bit Severely Errored Second in 1/4 hour boundary.')
ncmm13TCAQtrSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrSEFS.setDescription('The performance alert threshold for m13 layer Severely Errored Framing Seconds in 1/4 hour boundary.')
ncmm13TCAQtrAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrAISS.setDescription('The performance alert threshold for m13 layer Alarm Indication Signal Second in 1/4 hour boundary.')
ncmm13TCAQtrLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrLUAS.setDescription('The performance alert threshold for m13 layer Unavailable Second in 1/4 hour boundary.')
ncmm13TCAQtrLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrLOSS.setDescription('The performance alert threshold for m13 Loss of Signal (LOS) Seconds in 1/4 hour boundary.')
ncmm13TCAQtrLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14006, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCAQtrLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCAQtrLOFS.setDescription('The performance alert threshold for m13 Loss of Frame (LOF) Seconds in 1/4 hour boundary.')
ncmm13TCADayTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007), )
if mibBuilder.loadTexts: ncmm13TCADayTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayTable.setDescription('The 24 hour m13 Alert Threshold Table.')
ncmm13TCADayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TCADayNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TCADayIndex"))
if mibBuilder.loadTexts: ncmm13TCADayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayEntry.setDescription('An entry in the 24 hour m13 Alert Threshold Table.')
ncmm13TCADayNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TCADayNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13TCADayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TCADayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayIndex.setDescription('The index value which uniquely identifies the alert crossing threshold interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an plcpLineIndex object instance.')
ncmm13TCADayFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayFarEndCCV.setDescription('The performance alert threshold for m13 layer Far End C-bit Code Violation in 24 hour boundary.')
ncmm13TCADayFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayFarEndCES.setDescription('The performance alert threshold for m13 Far End C-bit Errored Seconds, in 24 hour boundary.')
ncmm13TCADayFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayFarEndCSES.setDescription('The performance alert threshold for m13 Far End C-bit Severely Errored Seconds, in 24 hour boundary.')
ncmm13TCADayFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayFarEndLUAS.setDescription('The performance alert threshold for m13 layer Far End Line Unavailable Seconds in 24 hour boundary.')
ncmm13TCADayLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayLCV.setDescription('The performance alert threshold for m13 layer Line code Violation in 24 hour boundary.')
ncmm13TCADayLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayLES.setDescription('The performance alert threshold for m13 layer Line Errored Second in 24 hour boundary.')
ncmm13TCADayLSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayLSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayLSES.setDescription('The performance alert threshold for m13 layer Line Severely Errored Second in 24 hour boundary.')
ncmm13TCADayPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayPCV.setDescription('The performance alert threshold for m13 layer Parity Code Violation in 24 hour boundary.')
ncmm13TCADayPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayPES.setDescription('The performance alert threshold for m13 layer Parity Errored Second in 24 hour boundary.')
ncmm13TCADayPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayPSES.setDescription('The performance alert threshold form 13 layer Parity Severely Errored Second in 24 hour boundary.')
ncmm13TCADayCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayCCV.setDescription('The performance alert threshold for m13 layer C-bit Code Violation in 24 hour boundary.')
ncmm13TCADayCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayCES.setDescription('The performance alert threshold for m13 C-bit Errored Seconds, in 24 hour boundary.')
ncmm13TCADayCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayCSES.setDescription('The performance alert threshold for DS3 C-bit Severely Errored Seconds, in 24 hour boundary.')
ncmm13TCADaySEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADaySEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADaySEFS.setDescription('The performance alert threshold for m13 layer Severely Errored Framing Seconds in 24 hour boundary.')
ncmm13TCADayAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayAISS.setDescription('The performance alert threshold for m13 layer Alarm Indication Signal Second in 24 hour boundary.')
ncmm13TCADayLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayLUAS.setDescription('The performance alert threshold for m13 layer Unavailable Second in 24 hour boundary.')
ncmm13TCADayLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayLOSS.setDescription('The performance alert threshold for m13 Loss of Signal (LOS) Seconds in 24 hour boundary.')
ncmm13TCADayLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14007, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TCADayLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TCADayLOFS.setDescription('The performance alert threshold for m13 Loss of Frame (LOF) Seconds in 24 hour boundary.')
ncmm13TxAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008), )
if mibBuilder.loadTexts: ncmm13TxAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxAlarmTable.setDescription('m13 Transmit alarm Table.')
ncmm13TxAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TxAlarmNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13TxAlarmIndex"))
if mibBuilder.loadTexts: ncmm13TxAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxAlarmEntry.setDescription('An entry in the m13 Transmit Alarm table.')
ncmm13TxAlarmNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TxAlarmNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxAlarmNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13TxAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13TxAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxAlarmIndex.setDescription('The index value which uniquely identifies the Transmit Alarm interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an m13 LineIndex object instance.')
ncmm13TxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxYellowAlarm.setDescription('Transmit the near-end yellow alarm for m13.')
ncmm13TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxAIS.setDescription('Transmit the near-end AIS alarm for m13.')
ncmm13TxIdleSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TxIdleSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxIdleSignal.setDescription('Transmit the near-end Idle alarm for m13.')
ncmm13TxFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TxFEBE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxFEBE.setDescription('Near end unit transmits the FEBE alarm for m13.')
ncmm13TxFEACAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14008, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("no-FEAC-Alarm-enabled", 1), ("eqpt-FailureSA-Alarm", 2), ("los-HBER-Alarm", 3), ("oof-Alarm", 4), ("ais-Received-Alarm", 5), ("idle-Received-Alarm", 6), ("eqpt-NSA-Alarm", 7), ("common-Eqpt-NSA-Alarm", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13TxFEACAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13TxFEACAlarm.setDescription('This object describes which, if any, FEAC Alarm is enabled. ')
ncmm13DS3LPBKTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14009), )
if mibBuilder.loadTexts: ncmm13DS3LPBKTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LPBKTable.setDescription('The m13 DS3 Loopback table.')
ncmm13DS3LPBKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13DS3LPBKNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13DS3LPBKIndex"))
if mibBuilder.loadTexts: ncmm13DS3LPBKEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LPBKEntry.setDescription('An entry in the m13 Loopback table.')
ncmm13DS3LPBKNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3LPBKNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LPBKNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13DS3LPBKIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13DS3LPBKIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LPBKIndex.setDescription('The index value which uniquely identifies the m13 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmm13LineIndex object instance.')
ncmm13DS3LPBKAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("no-Loopback", 1), ("m13-DS3-Activate-Local", 2), ("m13-DS3-Activate-Line", 3), ("m13-DS3-Activate-FEAC-Far-End", 4), ("m13-DS3-Activate-Inband-Far-End", 5), ("m13-DS3-DeActivate-Local", 6), ("m13-DS3-DeActivate-Line", 7), ("m13-DS3-DeActivate-FEAC-Far-End", 8), ("m13-DS3-DeActivate-Inband-Far-End", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13DS3LPBKAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13DS3LPBKAction.setDescription('m13 DS3 Loopback Activation/Deactivation.')
ncmm13T1LPBKTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14010), )
if mibBuilder.loadTexts: ncmm13T1LPBKTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LPBKTable.setDescription('The m13 Loopback table.')
ncmm13T1LPBKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13T1LPBKNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13T1LPBKIndex"))
if mibBuilder.loadTexts: ncmm13T1LPBKEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LPBKEntry.setDescription('An entry in the m13 Loopback table.')
ncmm13T1LPBKNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1LPBKNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LPBKNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmm13T1LPBKIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1LPBKIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LPBKIndex.setDescription('The index value which uniquely identifies the m13 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmm13LineIndex object instance.')
ncmm13T1LPBKAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("no-Loopback", 1), ("m13-Activate-1-28-T1-Line", 10), ("m13-Activate-All-T1-Line", 11), ("m13-Activate-1-28-T1-Far-End", 12), ("m13-Activate-All-T1-Far-End", 13), ("m13-Activate-1-28-T1-Local", 14), ("m13-Activate-All-T1-Local", 15), ("m13-DeActivate-1-28-T1-Line", 16), ("m13-DeActivate-All-T1-Line", 17), ("m13-DeActivate-1-28-T1-Far-End", 18), ("m13-DeActivate-All-T1-Far-End", 19), ("m13-DeActivate-1-28-T1-Local", 20), ("m13-DeActivate-All-T1-Local", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13T1LPBKAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LPBKAction.setDescription('m13 Loopback Activate if Line Type = 0 (DS3 Loopback) 1 No Active 2 Local Loopback 3 Line Loopback 4 FEAC Far End 5 Inband Far End if Line Type = 1 (T1 Line Command) 6 1-28 T1 Line Loopback if Line Type = 2(T1 Far End Line) 7 1-28 T1 Far End Loopback if Line Type = 3(T1 Local Loopback ) 8 1-28 T1 Local Loopback m13 Loopback DeActivate if Line Type = 0 (DS3 Loopback) 1 No Active 9 Local Loopback 10 Line Loopback 11 FEAC Far End 12 Inband Far End if Line Type = 1 (T1 Line Command) 13 1-28 T1 Line Loopback if Line Type = 2(T1 Far End Line) 14 1-28 T1 Far End Loopback if Line Type = 3(T1 Local Loopback ) 15 1-28 T1 Local Loopback.')
ncmm13T1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011), )
if mibBuilder.loadTexts: ncmm13T1ConfigTable.setStatus('mandatory')
ncmm13T1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13T1ConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMM13-MIB", "ncmm13T1LineIndex"))
if mibBuilder.loadTexts: ncmm13T1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1ConfigEntry.setDescription('An entry in the ncm m13 T1 Configuration table.')
ncmm13T1ConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1ConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1ConfigNIDIndex.setDescription('This object is the identifier of the node id index.')
ncmm13T1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmm13T1LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LineIndex.setDescription('This object is the identifier of a Inter- f on a managed device. If there is an ifEn- try that is directly associated with this and only this m13 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmm13T1FramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sF", 1), ("eSF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13T1FramingFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1FramingFormat.setDescription('This variable indicates the variety of Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: ESF Extended SuperFrame DS1 SF Super Frame')
ncmm13T1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("b8ZS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13T1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1LineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. B8ZS refers to the use of a specified pat- tern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data.')
ncmm13T1EnableNetOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13T1EnableNetOnesDensity.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1EnableNetOnesDensity.setDescription("The variable specifies the Disable/Enable of the Network One's Density.")
ncmm13T1DensityPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d80Zeros", 1), ("d15Zeros", 2), ("d12d5c80Zero", 3), ("tR-62411", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13T1DensityPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1DensityPattern.setDescription("This variable indicates what type of density network is being sent on the port or line by the device. The values mean : 'Disabled' refers to no network ones density exist. 'D80Zeros' refers to send a request for network one's density of 80 zeroes density pattern. 'D15Zeros' refers to send a request for network one's density of 15 zeroes density pattern. 'D12d5c80Zero'refers to send a request for 12.5% and 80 zeroes network one's density pattern. 'TR-62411' refers to sending a request for TR6241 network density pattern. 'Other' refers to sending a network's density pattern other than those described by this object[pvt]**.")
ncmm13T1PortService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3037, 14011, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmm13T1PortService.setStatus('mandatory')
if mibBuilder.loadTexts: ncmm13T1PortService.setDescription('The variable specifies whether port state is in service or not.')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMM13-MIB", ncmm13DS3UnitCode=ncmm13DS3UnitCode, ncmm13DS3LPBKIndex=ncmm13DS3LPBKIndex, ncmm13CurrentCRCStatus=ncmm13CurrentCRCStatus, ncmm13IntervalCES=ncmm13IntervalCES, ncmm13T1FramingFormat=ncmm13T1FramingFormat, ncmm13DS3PerfControl=ncmm13DS3PerfControl, ncmm13IntervalLES=ncmm13IntervalLES, ncmm13T1ConfigTable=ncmm13T1ConfigTable, ncmm13CurrentFarEndCES=ncmm13CurrentFarEndCES, ncmm13TCAQtrSEFS=ncmm13TCAQtrSEFS, ncmm13StatEntry=ncmm13StatEntry, ncmm13TotalLCV=ncmm13TotalLCV, ncmm13TotalPES=ncmm13TotalPES, ncmm13DS3FarEndControl=ncmm13DS3FarEndControl, ncmm13T1LPBKNIDIndex=ncmm13T1LPBKNIDIndex, ncmm13T1LPBKEntry=ncmm13T1LPBKEntry, ncmm13TCAQtrNIDIndex=ncmm13TCAQtrNIDIndex, ncmm13CurrentTimeStampMSecs=ncmm13CurrentTimeStampMSecs, ncmm13T1LineIndex=ncmm13T1LineIndex, ncmm13TxFEACAlarm=ncmm13TxFEACAlarm, ncmm13CurrentTable=ncmm13CurrentTable, ncmm13TotalPCV=ncmm13TotalPCV, ncmm13TimeStampMilliSec=ncmm13TimeStampMilliSec, ncmm13IntervalEntry=ncmm13IntervalEntry, ncmm13TCADayEntry=ncmm13TCADayEntry, ncmm13StatTable=ncmm13StatTable, ncmm13T1LPBKIndex=ncmm13T1LPBKIndex, ncmm13SnapShotCRCStatus=ncmm13SnapShotCRCStatus, ncmm13ResetPerfReg=ncmm13ResetPerfReg, ncmm13SnapShot=ncmm13SnapShot, ncmm13TCAQtrLCV=ncmm13TCAQtrLCV, ncmm13T1NearEndLineLoopback=ncmm13T1NearEndLineLoopback, ncmm13DS3NearEndLineLoopback=ncmm13DS3NearEndLineLoopback, ncmm13TxFEBE=ncmm13TxFEBE, ncmm13StatYellowAlm=ncmm13StatYellowAlm, ncmm13CurrentPES=ncmm13CurrentPES, ncmm13TCAQtrCES=ncmm13TCAQtrCES, ncmm13TCADayLUAS=ncmm13TCADayLUAS, ncmm13CurrentLSES=ncmm13CurrentLSES, ncmm13TxAlarmNIDIndex=ncmm13TxAlarmNIDIndex, ncmm13TotalLUAS=ncmm13TotalLUAS, ncmm13DS3LPBKNIDIndex=ncmm13DS3LPBKNIDIndex, ncmm13TCAQtrLES=ncmm13TCAQtrLES, ncmm13TotalCSES=ncmm13TotalCSES, ncmm13TxAlarmIndex=ncmm13TxAlarmIndex, ncmm13TotalNIDIndex=ncmm13TotalNIDIndex, ncmm13T1ConfigNIDIndex=ncmm13T1ConfigNIDIndex, ncmm13TotalLOSS=ncmm13TotalLOSS, ncmm13TxYellowAlarm=ncmm13TxYellowAlarm, ncmm13IntervalSEFS=ncmm13IntervalSEFS, ncmm13TCAQtrLOSS=ncmm13TCAQtrLOSS, ncmm13DS3LPBKEntry=ncmm13DS3LPBKEntry, ncmm13T1LPBKAction=ncmm13T1LPBKAction, ncmm13TotalEntry=ncmm13TotalEntry, ncmm13IntervalLOFS=ncmm13IntervalLOFS, ncmm13CurrentCSES=ncmm13CurrentCSES, ncmm13CurrentSEFS=ncmm13CurrentSEFS, ncmm13CurrentTimeStampSecs=ncmm13CurrentTimeStampSecs, ncmm13T1DensityPattern=ncmm13T1DensityPattern, ncmm13TCADayTable=ncmm13TCADayTable, ncmm13TCADayPSES=ncmm13TCADayPSES, ncmm13DS3FacilityIDCode=ncmm13DS3FacilityIDCode, ncmm13TCADayLOSS=ncmm13TCADayLOSS, ncmm13T1EnableNetOnesDensity=ncmm13T1EnableNetOnesDensity, ncmm13TotalFarEndLUAS=ncmm13TotalFarEndLUAS, ncmm13TimeStampSec=ncmm13TimeStampSec, ncmm13T1FarEndLineLoopback=ncmm13T1FarEndLineLoopback, ncmm13DS3BusType=ncmm13DS3BusType, ncmm13T1LocalLoopback=ncmm13T1LocalLoopback, ncmm13DS3NearEndLocalLoopback=ncmm13DS3NearEndLocalLoopback, ncmm13TCADayCES=ncmm13TCADayCES, ncmm13CurrentCCV=ncmm13CurrentCCV, ncmm13TotalLES=ncmm13TotalLES, ncmm13TotalLSES=ncmm13TotalLSES, ncmm13TotalSEFS=ncmm13TotalSEFS, ncmm13CurrentPSES=ncmm13CurrentPSES, ncmm13TCADayLOFS=ncmm13TCADayLOFS, ncmm13CurrentLES=ncmm13CurrentLES, ncmm13TotalFarEndCSES=ncmm13TotalFarEndCSES, ncmm13StatIndex=ncmm13StatIndex, ncmm13StatNIDIndex=ncmm13StatNIDIndex, ncmm13StatAIS=ncmm13StatAIS, ncmm13DS3PortEntry=ncmm13DS3PortEntry, ncmm13CurrentEntry=ncmm13CurrentEntry, ncmm13T1PortService=ncmm13T1PortService, ncmm13DS3FrameIDCode=ncmm13DS3FrameIDCode, ncmm13IntervalCSES=ncmm13IntervalCSES, ncmm13IntervalFarEndLUAS=ncmm13IntervalFarEndLUAS, ncmm13TotalCCV=ncmm13TotalCCV, ncmm13TCADayNIDIndex=ncmm13TCADayNIDIndex, ncmm13DS3PortIndex=ncmm13DS3PortIndex, ncmm13IntervalAISS=ncmm13IntervalAISS, ncmm13TotalTable=ncmm13TotalTable, ncmm13TCAQtrPCV=ncmm13TCAQtrPCV, ncmm13CurrentPCV=ncmm13CurrentPCV, ncmm13PerformanceSnapShotTable=ncmm13PerformanceSnapShotTable, ncmm13CurrentNIDIndex=ncmm13CurrentNIDIndex, ncmm13SnapShotSecs=ncmm13SnapShotSecs, ncmm13DS3LocationIDCode=ncmm13DS3LocationIDCode, ncmm13CurrentFarEndCSES=ncmm13CurrentFarEndCSES, ncmm13TotalCRCStatus=ncmm13TotalCRCStatus, ncmm13TCADayFarEndLUAS=ncmm13TCADayFarEndLUAS, ncmm13TCADayFarEndCCV=ncmm13TCADayFarEndCCV, ncmm13StatIdle=ncmm13StatIdle, ncmm13CurrentLOFS=ncmm13CurrentLOFS, ncmm13TCAQtrAISS=ncmm13TCAQtrAISS, ncmm13SnapShotIndex=ncmm13SnapShotIndex, ncmm13T1LPBKTable=ncmm13T1LPBKTable, ncmm13TCADayFarEndCSES=ncmm13TCADayFarEndCSES, ncmm13TCAQtrPES=ncmm13TCAQtrPES, ncmm13CurrentFarEndLUAS=ncmm13CurrentFarEndLUAS, ncmm13DS3PortTable=ncmm13DS3PortTable, ncmm13DS3AlarmControl=ncmm13DS3AlarmControl, ncmm13IntervalCCV=ncmm13IntervalCCV, ncmm13TCADayPES=ncmm13TCADayPES, ncmm13TotalLOFS=ncmm13TotalLOFS, ncmm13TCAQtrLUAS=ncmm13TCAQtrLUAS, ncmm13TotalAISS=ncmm13TotalAISS, ncmm13StatOOF=ncmm13StatOOF, ncmm13TCAQtrCSES=ncmm13TCAQtrCSES, ncmm13TCADayAISS=ncmm13TCADayAISS, ncmm13TCAQtrFarEndCSES=ncmm13TCAQtrFarEndCSES, ncmm13TCADayLSES=ncmm13TCADayLSES, ncmm13TCADaySEFS=ncmm13TCADaySEFS, ncmm13TotalCES=ncmm13TotalCES, ncmm13TCADayCSES=ncmm13TCADayCSES, ncmm13TCAQtrCCV=ncmm13TCAQtrCCV, ncmm13TCAQtrPSES=ncmm13TCAQtrPSES, ncmm13CurrentCES=ncmm13CurrentCES, ncmm13TCAQtrLSES=ncmm13TCAQtrLSES, ncmm13IntervalFarEndCSES=ncmm13IntervalFarEndCSES, ncmm13IntervalIndex=ncmm13IntervalIndex, ncmm13T1ConfigEntry=ncmm13T1ConfigEntry, ncmm13DS3GenIDCode=ncmm13DS3GenIDCode, ncmm13TCAQtrLOFS=ncmm13TCAQtrLOFS, ncmm13TxAIS=ncmm13TxAIS, ncmm13IntervalFarEndCES=ncmm13IntervalFarEndCES, ncmm13DS3PortIdCode=ncmm13DS3PortIdCode, ncmm13TotalPSES=ncmm13TotalPSES, ncmm13DS3ModeControl=ncmm13DS3ModeControl, ncmm13TCAQtrIndex=ncmm13TCAQtrIndex, ncmm13TCADayLES=ncmm13TCADayLES, ncmm13TCAQtrEntry=ncmm13TCAQtrEntry, ncmm13DS3LPBKAction=ncmm13DS3LPBKAction, ncmm13FarEndAllT1LineLoopback=ncmm13FarEndAllT1LineLoopback, ncmm13SnapShotNIDIndex=ncmm13SnapShotNIDIndex, ncmm13DS3EquipCode=ncmm13DS3EquipCode, ncmm13TCADayPCV=ncmm13TCADayPCV, ncmm13PerformanceSnapShotEntry=ncmm13PerformanceSnapShotEntry, ncmm13DS3PortNIDIndex=ncmm13DS3PortNIDIndex, ncmm13CurrentIntervalSecsElaps=ncmm13CurrentIntervalSecsElaps, ncmm13CurrentAISS=ncmm13CurrentAISS, ncmm13TxIdleSignal=ncmm13TxIdleSignal, ncmm13CurrentIndex=ncmm13CurrentIndex, ncmm13CurrentLCV=ncmm13CurrentLCV, ncmm13TCADayCCV=ncmm13TCADayCCV, ncmm13IntervalNIDIndex=ncmm13IntervalNIDIndex, ncmm13TxAlarmTable=ncmm13TxAlarmTable, ncmm13TCAQtrTable=ncmm13TCAQtrTable, ncmm13TCAQtrFarEndCES=ncmm13TCAQtrFarEndCES, ncmm13IntervalLOSS=ncmm13IntervalLOSS, ncmm13IntervalPCV=ncmm13IntervalPCV, ncmm13TotalValidInterv=ncmm13TotalValidInterv, ncmm13IntervalTable=ncmm13IntervalTable, ncmm13DS3InbandControl=ncmm13DS3InbandControl, ncmm13CurrentLOOS=ncmm13CurrentLOOS, ncmm13TxAlarmEntry=ncmm13TxAlarmEntry, ncmm13DS3FarEndLineLoopback=ncmm13DS3FarEndLineLoopback, ncmm13IntervalFarEndCCV=ncmm13IntervalFarEndCCV, ncmm13IntervalPSES=ncmm13IntervalPSES, ncmm13TCAQtrFarEndLUAS=ncmm13TCAQtrFarEndLUAS, ncmm13IntervalLCV=ncmm13IntervalLCV, ncmm13DS3LPBKTable=ncmm13DS3LPBKTable, ncmm13TotalFarEndCCV=ncmm13TotalFarEndCCV, ncmm13TCAQtrFarEndCCV=ncmm13TCAQtrFarEndCCV, ncmm13IntervalLUAS=ncmm13IntervalLUAS, ncmm13DS3LineType=ncmm13DS3LineType, ncmm13DS3CableLength=ncmm13DS3CableLength, ncmm13IntervalPES=ncmm13IntervalPES, ncmm13TCADayIndex=ncmm13TCADayIndex, ncmm13TotalIndex=ncmm13TotalIndex, ncmm13IntervalNumber=ncmm13IntervalNumber, ncmm13StatLOS=ncmm13StatLOS, ncmm13TotalFarEndCES=ncmm13TotalFarEndCES, ncmm13T1LineCoding=ncmm13T1LineCoding, ncmm13TCADayLCV=ncmm13TCADayLCV, ncmm13CurrentLUAS=ncmm13CurrentLUAS, ncmm13TCADayFarEndCES=ncmm13TCADayFarEndCES, ncmm13CurrentFarEndCCV=ncmm13CurrentFarEndCCV, ncmm13IntervalLSES=ncmm13IntervalLSES)
