#
# PySNMP MIB module INFORMANT-ADV (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-ADV
# Produced by pysmi-0.3.4 at Wed May  1 13:53:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, ObjectIdentity, Bits, Gauge32, ModuleIdentity, Counter64, TimeTicks, MibIdentifier, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "ObjectIdentity", "Bits", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "MibIdentifier", "IpAddress", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
informant, InstanceName = mibBuilder.importSymbols("WTCS", "informant", "InstanceName")
advanced = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2))
advanced.setRevisions(('2008-07-11 23:51', '2008-04-18 23:58', '2008-03-21 23:39', '2008-02-25 18:35', '2007-07-08 05:43', '2007-04-12 11:05', '2006-06-12 22:58', '2005-06-18 23:15', '2004-02-29 07:03', '2004-01-20 08:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: advanced.setRevisionsDescriptions(('Multiplied lDiskAvgDiskSecPerRead, lDiskAvgDiskSecPerTransfer, lDiskAvgDiskSecPerWrite, pDiskAvgDiskSecPerRead, pDiskAvgDiskSecPerTransfer, and pDiskAvgDiskSecPerWrite by 1000000 since these values are commonly fractional (less than 1).', 'Added additional entries which are available in Windows Server 2008.', 'Updated the description fields based on the description in Microsoft Windows Server 2008.', 'Added memoryCommitLimitKBytes and memoryCommitLimitMBytes to support greater than 32-bit memoryCommitLimits.', 'Multiplied lDiskAvgDiskQueueLength, lDiskAvgDiskReadQueueLength, lDiskAvgDiskWriteQueueLength, lDiskAvgDiskSecPerRead, lDiskAvgDiskSecPerTransfer, lDiskAvgDiskSecPerWrite, pDiskAvgDiskQueueLength, pDiskAvgDiskReadQueueLength, pDiskAvgDiskWriteQueueLength, pDiskAvgDiskSecPerRead, pDiskAvgDiskSecPerTransfer, and pDiskAvgDiskSecPerWrite by 1000 since these values are commonly fractional (less than 1).', 'Added new performance counters which are in Windows Vista.', '.NET CLR Data is an instance type counter. Changed dotNETCLRData to a SNMP table.', '.NET CLR Networking is an instance type counter. Changed dotNETCLRNetworking to a SNMP table.', 'Changed the syntax of the datapoints from integer to gauge.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: advanced.setLastUpdated('200807112351Z')
if mibBuilder.loadTexts: advanced.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: advanced.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: advanced.setDescription('The MIB module for SNMP Informant Advanced performance counter entries.')
acsPerRsvpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1), )
if mibBuilder.loadTexts: acsPerRsvpServiceTable.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpServiceTable.setDescription('The ACS/RSVP Service performance object counters report statistics about Resource Reservation Protocol (RSVP) and Quality of Service (QoS) Admission Control (ACS) activity, flow, bandwidth, RSVP messages sent, and so on. The ACS/RSVP Service object is available if QoS Admission Control is installed, even if the service is not running.')
acsPerRsvpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1), ).setIndexNames((0, "INFORMANT-ADV", "acsPerRsvpSvcInstance"))
if mibBuilder.loadTexts: acsPerRsvpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpServiceEntry.setDescription("Performance information for one particular instance of 'ACS/RSVP Service' object.")
acsPerRsvpSvcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcInstance.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcInstance.setDescription('Instance name.')
acsPerRsvpSvcBytesInQoSNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcBytesInQoSNotify.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcBytesInQoSNotify.setDescription('A running total of the number of bytes delivered in QoS Notifications to QoS-enabled applications.')
acsPerRsvpSvcFailedQoSRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcFailedQoSRequests.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcFailedQoSRequests.setDescription('The number of QoS requests generated by QoS-enabled applications that have been rejected by the ACS/RSVP service. Failed QoS requests can be caused by invalid QoS requests.')
acsPerRsvpSvcFailedQoSSends = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcFailedQoSSends.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcFailedQoSSends.setDescription('The number of QoS notifications the ACS/RSVP service that could not be sent to the QoS applications. Failed QoS sends can be caused by terminated applications.')
acsPerRsvpSvcNetworkInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcNetworkInterfaces.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcNetworkInterfaces.setDescription('The number of local network interfaces visible to, and used by the RSVP service.')
acsPerRsvpSvcNetworkSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcNetworkSockets.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcNetworkSockets.setDescription('The total number of raw sockets opened for the purpose of RSVP signaling.')
acsPerRsvpSvcQoSNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcQoSNotifications.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcQoSNotifications.setDescription('The number of QoS notifications delivered to QoS-enabled applications by the QoS RSVP service.')
acsPerRsvpSvcQoSSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcQoSSockets.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcQoSSockets.setDescription('The number of sockets that are currently QoS enabled.')
acsPerRsvpSvcQoSEnabledReceivers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcQoSEnabledReceivers.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcQoSEnabledReceivers.setDescription('Indicates the number of RESV messages sent for QoS-enabled receivers. This number increments each time a RESV is refreshed.')
acsPerRsvpSvcQoSEnabledSenders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcQoSEnabledSenders.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcQoSEnabledSenders.setDescription('Indicates the number of PATH messages sent for QoS-enabled senders. This number increments each time a PATH is refreshed.')
acsPerRsvpSvcRSVPSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcRSVPSessions.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcRSVPSessions.setDescription('The current number of active RSVP sessions on the ACS/RSVP service.')
acsPerRsvpSvcTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPerRsvpSvcTimers.setStatus('current')
if mibBuilder.loadTexts: acsPerRsvpSvcTimers.setDescription('The number of timer events scheduled to take place. Shows the activity level of the ACS/RSVP service.')
activeServerPages = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2))
if mibBuilder.loadTexts: activeServerPages.setStatus('current')
if mibBuilder.loadTexts: activeServerPages.setDescription('The Active Server Pages performance object monitors errors, requests, sessions, or other data generated from Active Server Pages (ASP) applications.')
aspDebuggingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspDebuggingRequests.setStatus('current')
if mibBuilder.loadTexts: aspDebuggingRequests.setDescription('Number of debugging document requests.')
aspEngineFlushNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspEngineFlushNotifications.setStatus('current')
if mibBuilder.loadTexts: aspEngineFlushNotifications.setDescription('The number of engines invalidated in the cache due to change notification.')
aspErrorsDuringScriptRuntime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspErrorsDuringScriptRuntime.setStatus('current')
if mibBuilder.loadTexts: aspErrorsDuringScriptRuntime.setDescription('Number of requests failed due to runtime errors.')
aspErrorsFromASPPreprocessor = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspErrorsFromASPPreprocessor.setStatus('current')
if mibBuilder.loadTexts: aspErrorsFromASPPreprocessor.setDescription('Number of requests failed due to preprocessor errors.')
aspErrorsFromScriptCompilers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspErrorsFromScriptCompilers.setStatus('current')
if mibBuilder.loadTexts: aspErrorsFromScriptCompilers.setDescription('Number of requests failed due to script compilation errors.')
aspErrorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: aspErrorsPerSec.setDescription('The number of errors per second.')
aspInMemoryTemplateCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspInMemoryTemplateCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: aspInMemoryTemplateCacheHitRate.setDescription('Percent of requests found in cached in memory.')
aspInMemoryTemplatesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspInMemoryTemplatesCached.setStatus('current')
if mibBuilder.loadTexts: aspInMemoryTemplatesCached.setDescription('The number of compiled templates cached in memory.')
aspRequestBytesInTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestBytesInTotal.setStatus('current')
if mibBuilder.loadTexts: aspRequestBytesInTotal.setDescription('The total size, in bytes, of all requests.')
aspRequestBytesOutTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestBytesOutTotal.setStatus('current')
if mibBuilder.loadTexts: aspRequestBytesOutTotal.setDescription('The total size, in bytes, of responses sent to clients. This does not include standard HTTP response headers.')
aspRequestExecutionTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestExecutionTime.setStatus('current')
if mibBuilder.loadTexts: aspRequestExecutionTime.setDescription('The number of milliseconds that it took to execute the most recent request.')
aspRequestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestWaitTime.setStatus('current')
if mibBuilder.loadTexts: aspRequestWaitTime.setDescription('The number of milliseconds the most recent request was waiting in the queue.')
aspRequestsDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsDisconnected.setStatus('current')
if mibBuilder.loadTexts: aspRequestsDisconnected.setDescription('The number of requests that were disconnected due to communication failure.')
aspRequestsExecuting = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsExecuting.setStatus('current')
if mibBuilder.loadTexts: aspRequestsExecuting.setDescription('The number of requests currently executing.')
aspRequestsFailedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsFailedTotal.setStatus('current')
if mibBuilder.loadTexts: aspRequestsFailedTotal.setDescription('The total number of requests failed due to errors, authorization failure, and rejections.')
aspRequestsNotAuthorized = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: aspRequestsNotAuthorized.setDescription('Number of requests failed due to insufficient access rights.')
aspRequestsNotFound = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsNotFound.setStatus('current')
if mibBuilder.loadTexts: aspRequestsNotFound.setDescription('The number of requests for files that were no found.')
aspRequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsQueued.setStatus('current')
if mibBuilder.loadTexts: aspRequestsQueued.setDescription('The number of requests waiting for service from the queue.')
aspRequestsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsRejected.setStatus('current')
if mibBuilder.loadTexts: aspRequestsRejected.setDescription('The total number of requests not executed because there were insufficient resources to process them.')
aspRequestsSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsSucceeded.setStatus('current')
if mibBuilder.loadTexts: aspRequestsSucceeded.setDescription('The number of requests that executed successfully.')
aspRequestsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsTimedOut.setStatus('current')
if mibBuilder.loadTexts: aspRequestsTimedOut.setDescription('The number of requests that timed out.')
aspRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: aspRequestsTotal.setDescription('The total number of requests since the service was started.')
aspRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: aspRequestsPerSec.setDescription('The number of requests executed per second.')
aspScriptEngineCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspScriptEngineCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: aspScriptEngineCacheHitRate.setDescription('Percent of requests found in script engine cache.')
aspScriptEnginesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspScriptEnginesCached.setStatus('current')
if mibBuilder.loadTexts: aspScriptEnginesCached.setDescription('The number of script engines in cache.')
aspSessionDuration = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionDuration.setStatus('current')
if mibBuilder.loadTexts: aspSessionDuration.setDescription('The number of milliseconds that the most recent session persisted.')
aspSessionsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionsCurrent.setStatus('current')
if mibBuilder.loadTexts: aspSessionsCurrent.setDescription('The current number of sessions being serviced.')
aspSessionsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: aspSessionsTimedOut.setDescription('The number of sessions timed out.')
aspSessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: aspSessionsTotal.setDescription('The total number of sessions since the service was started.')
aspTemplateCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTemplateCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: aspTemplateCacheHitRate.setDescription('Percent of requests found in template cache.')
aspTemplateNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTemplateNotifications.setStatus('current')
if mibBuilder.loadTexts: aspTemplateNotifications.setDescription('The number of templates invalidated in the cache due to change notification.')
aspTemplatesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTemplatesCached.setStatus('current')
if mibBuilder.loadTexts: aspTemplatesCached.setDescription('The number of templates currently cached.')
aspTransactionsAborted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTransactionsAborted.setStatus('current')
if mibBuilder.loadTexts: aspTransactionsAborted.setDescription('The number of transactions aborted.')
aspTransactionsCommitted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTransactionsCommitted.setStatus('current')
if mibBuilder.loadTexts: aspTransactionsCommitted.setDescription('The number of transactions committed.')
aspTransactionsPending = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTransactionsPending.setStatus('current')
if mibBuilder.loadTexts: aspTransactionsPending.setDescription('Number of transactions in progress.')
aspTransactionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTransactionsTotal.setStatus('current')
if mibBuilder.loadTexts: aspTransactionsTotal.setDescription('The total number of transactions since the service was started.')
aspTransactionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 2, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: aspTransactionsPerSec.setDescription('Transactions started per second.')
appleTalkTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3), )
if mibBuilder.loadTexts: appleTalkTable.setStatus('current')
if mibBuilder.loadTexts: appleTalkTable.setDescription('The AppleTalk performance object consists of counters that monitor traffic on the AppleTalk network.')
appleTalkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1), ).setIndexNames((0, "INFORMANT-ADV", "atInstance"))
if mibBuilder.loadTexts: appleTalkEntry.setStatus('current')
if mibBuilder.loadTexts: appleTalkEntry.setDescription("Performance information for one particular instance of 'AppleTalk' object.")
atInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInstance.setStatus('current')
if mibBuilder.loadTexts: atInstance.setDescription('Instance name.')
atAARPPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAARPPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: atAARPPacketsPerSec.setDescription('Number of AARP packets per second received by Appletalk on this port.')
atATPALOResponsePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPALOResponsePerSec.setStatus('current')
if mibBuilder.loadTexts: atATPALOResponsePerSec.setDescription('Number of ATP At-least-once transaction responses per second on this port.')
atATPPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: atATPPacketsPerSec.setDescription('Number of ATP packets per second received by Appletalk on this port.')
atATPRecvdReleasePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPRecvdReleasePerSec.setStatus('current')
if mibBuilder.loadTexts: atATPRecvdReleasePerSec.setDescription('Number of ATP transaction release packets per second received on this port.')
atATPResponseTimouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPResponseTimouts.setStatus('current')
if mibBuilder.loadTexts: atATPResponseTimouts.setDescription('Number of ATP release timers that have expired on this port.')
atATPRetriesLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPRetriesLocal.setStatus('current')
if mibBuilder.loadTexts: atATPRetriesLocal.setDescription('Number of ATP requests retransmitted on this port.')
atATPRetriesRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPRetriesRemote.setStatus('current')
if mibBuilder.loadTexts: atATPRetriesRemote.setDescription('Number of ATP requests retransmitted to this port.')
atATPXOResponsePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atATPXOResponsePerSec.setStatus('current')
if mibBuilder.loadTexts: atATPXOResponsePerSec.setDescription('Number of ATP Exactly-once transaction responses per second on this port.')
atAverageTimePerAARPPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAverageTimePerAARPPacket.setStatus('current')
if mibBuilder.loadTexts: atAverageTimePerAARPPacket.setDescription('Average time in milliseconds to process an AARP packet on this port.')
atAverageTimePerATPPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAverageTimePerATPPacket.setStatus('current')
if mibBuilder.loadTexts: atAverageTimePerATPPacket.setDescription('Average time in milliseconds to process an ATP packet on this port.')
atAverageTimePerDDPPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAverageTimePerDDPPacket.setStatus('current')
if mibBuilder.loadTexts: atAverageTimePerDDPPacket.setDescription('Average time in milliseconds to process a DDP packet on this port.')
atAverageTimePerNBPPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAverageTimePerNBPPacket.setStatus('current')
if mibBuilder.loadTexts: atAverageTimePerNBPPacket.setDescription('Average time in milliseconds to process an NBP packet on this port.')
atAverageTimePerRTMPPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAverageTimePerRTMPPacket.setStatus('current')
if mibBuilder.loadTexts: atAverageTimePerRTMPPacket.setDescription('Average time in milliseconds to process an RTMP packet on this port.')
atAverageTimePerZIPPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAverageTimePerZIPPacket.setStatus('current')
if mibBuilder.loadTexts: atAverageTimePerZIPPacket.setDescription('Average time in milliseconds to process a ZIP packet on this port.')
atBytesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBytesInPerSec.setStatus('current')
if mibBuilder.loadTexts: atBytesInPerSec.setDescription('Number of bytes received per second by Appletalk on this port.')
atBytesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBytesOutPerSec.setStatus('current')
if mibBuilder.loadTexts: atBytesOutPerSec.setDescription('Number of bytes sent per second by Appletalk on this port.')
atCurrentNonPagedPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atCurrentNonPagedPool.setStatus('current')
if mibBuilder.loadTexts: atCurrentNonPagedPool.setDescription('The current amount of nonpaged memory resources used by AppleTalk.')
atDDPPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDDPPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: atDDPPacketsPerSec.setDescription('Number of DDP packets per second received by Appletalk on this port.')
atNBPPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNBPPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: atNBPPacketsPerSec.setDescription('Number of NBP packets per second received by Appletalk on this port.')
atPacketsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPacketsInPerSec.setStatus('current')
if mibBuilder.loadTexts: atPacketsInPerSec.setDescription('Number of packets received per second by Appletalk on this port.')
atPacketsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPacketsOutPerSec.setStatus('current')
if mibBuilder.loadTexts: atPacketsOutPerSec.setDescription('Number of packets sent per second by Appletalk on this port.')
atPacketsRoutedInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPacketsRoutedInPerSec.setStatus('current')
if mibBuilder.loadTexts: atPacketsRoutedInPerSec.setDescription('Number of packets routed in on this port.')
atPacketsRoutedOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPacketsRoutedOutPerSec.setStatus('current')
if mibBuilder.loadTexts: atPacketsRoutedOutPerSec.setDescription('Number of packets routed out on this port.')
atPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: atPacketsDropped.setDescription('Number of packets dropped due to resource limitations on this port.')
atRTMPPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRTMPPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: atRTMPPacketsPerSec.setDescription('Number of RTMP packets per second received by Appletalk on this port.')
atZIPPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 3, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZIPPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: atZIPPacketsPerSec.setDescription('Number of ZIP packets per second received by Appletalk on this port.')
aspDotNET = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4))
if mibBuilder.loadTexts: aspDotNET.setStatus('current')
if mibBuilder.loadTexts: aspDotNET.setDescription('ASP.NET supports the following ASP.NET system performance counters. These aggregate information for all ASP.NET applications on a Web server computer, or they apply generally to a system of ASP.NET servers running the same applications. These can include Web farms and Web gardens.')
adnApplicationRestarts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplicationRestarts.setStatus('current')
if mibBuilder.loadTexts: adnApplicationRestarts.setDescription("Number of times the application has been restarted during the web server's lifetime.")
adnApplicationsRunning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplicationsRunning.setStatus('current')
if mibBuilder.loadTexts: adnApplicationsRunning.setDescription('Number of currently running web applications.')
adnRequestExecutionTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestExecutionTime.setStatus('current')
if mibBuilder.loadTexts: adnRequestExecutionTime.setDescription('The number of milliseconds that it took to execute the most recent request.')
adnRequestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestWaitTime.setStatus('current')
if mibBuilder.loadTexts: adnRequestWaitTime.setDescription('The number of milliseconds the most recent request was waiting in the queue.')
adnRequestsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestsCurrent.setStatus('current')
if mibBuilder.loadTexts: adnRequestsCurrent.setDescription('The current number of requests, including those that are queued, currently executing, or waiting to be written to the client. Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.')
adnRequestsDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestsDisconnected.setStatus('current')
if mibBuilder.loadTexts: adnRequestsDisconnected.setDescription('The number of requests disconnected due to communication errors or user terminated.')
adnRequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestsQueued.setStatus('current')
if mibBuilder.loadTexts: adnRequestsQueued.setDescription('The number of requests waiting to be processed.')
adnRequestsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestsRejected.setStatus('current')
if mibBuilder.loadTexts: adnRequestsRejected.setDescription('The number of requests rejected because the request queue was full.')
adnStateServerSessionsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnStateServerSessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adnStateServerSessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adnStateServerSessionsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnStateServerSessionsActive.setStatus('current')
if mibBuilder.loadTexts: adnStateServerSessionsActive.setDescription('The current number of sessions currently active.')
adnStateServerSessionsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnStateServerSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnStateServerSessionsTimedOut.setDescription('The number of sessions timed out.')
adnStateServerSessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnStateServerSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnStateServerSessionsTotal.setDescription('The number of sessions total.')
adnWorkerProcessRestarts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnWorkerProcessRestarts.setStatus('current')
if mibBuilder.loadTexts: adnWorkerProcessRestarts.setDescription('Number of times a worker process has restarted on the machine.')
adnWorkerProcessesRunning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnWorkerProcessesRunning.setStatus('current')
if mibBuilder.loadTexts: adnWorkerProcessesRunning.setDescription('Number of worker processes running on the machine.')
adnAuditFailureEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAuditFailureEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAuditFailureEventsRaised.setDescription('Number of audit failures in the application since it was started.')
adnAuditSuccessEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAuditSuccessEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAuditSuccessEventsRaised.setDescription('Number of audit successes in the application since it was started.')
adnErrorEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnErrorEventsRaised.setDescription('Number of error events raised since the application was started.')
adnInfrastructErrorEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnInfrastructErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnInfrastructErrorEventsRaised.setDescription('Number of HTTP error events raised since the application was started.')
adnRequestErrorEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 4, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnRequestErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnRequestErrorEventsRaised.setDescription('Number of runtime error events raised since the application was started.')
aspDotNETApplicationsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5), )
if mibBuilder.loadTexts: aspDotNETApplicationsTable.setStatus('current')
if mibBuilder.loadTexts: aspDotNETApplicationsTable.setDescription('ASP.NET supports the following application performance counters, which you can use to monitor the performance of a single instance of an ASP.NET application. A unique instance appears for these counters, named __Total__, which aggregates counters for all applications on a Web server (similar to the global counters described in the first section of this topic). The __Total__ instance is always available. The counters will display zero when no applications are present on the server.')
aspDotNETApplicationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1), ).setIndexNames((0, "INFORMANT-ADV", "adnApplInstance"))
if mibBuilder.loadTexts: aspDotNETApplicationsEntry.setStatus('current')
if mibBuilder.loadTexts: aspDotNETApplicationsEntry.setDescription("Performance information for one particular instance of 'ASP.NET Applications' object.")
adnApplInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplInstance.setStatus('current')
if mibBuilder.loadTexts: adnApplInstance.setDescription('Instance name.')
adnApplAnonymousRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplAnonymousRequests.setStatus('current')
if mibBuilder.loadTexts: adnApplAnonymousRequests.setDescription('Number of requests utilizing anonymous authentication.')
adnApplAnonymousRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplAnonymousRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplAnonymousRequestsPerSec.setDescription('Number of Authentication Anonymous Requests/Sec')
adnApplCacheAPIEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheAPIEntries.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheAPIEntries.setDescription('Total number of entries within the cache added by the user.')
adnApplCacheAPIHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheAPIHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheAPIHitRatio.setDescription('Ratio of hits called from user code.')
adnApplCacheAPIHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheAPIHits.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheAPIHits.setDescription('Number of cache hits from user code.')
adnApplCacheAPIMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheAPIMisses.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheAPIMisses.setDescription('Number of cache misses called from user code.')
adnApplCacheAPITurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheAPITurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheAPITurnoverRate.setDescription('Number of additions and removals to the API cache per second.')
adnApplCacheTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheTotalEntries.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheTotalEntries.setDescription('Total number of entries within the cache (both internal and user added)')
adnApplCacheTotalHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheTotalHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheTotalHitRatio.setDescription('Ratio of hits from all cache calls.')
adnApplCacheTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheTotalHits.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheTotalHits.setDescription('Total number of hits from the cache.')
adnApplCacheTotalMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheTotalMisses.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheTotalMisses.setDescription('Total number of cache misses.')
adnApplCacheTotalTurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheTotalTurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheTotalTurnoverRate.setDescription('Number of additions and removals to the total cache per second.')
adnApplCompilationsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCompilationsTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplCompilationsTotal.setDescription('Number of .asax, .ascx, .ashx, .asmx, or .aspx source files dynamically compiled.')
adnApplDebuggingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplDebuggingRequests.setStatus('current')
if mibBuilder.loadTexts: adnApplDebuggingRequests.setDescription('Number of debugging requests processed.')
adnApplErrorsCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsCompilation.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsCompilation.setDescription('Number of errors that have occurred during compilation.')
adnApplErrorsExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsExecution.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsExecution.setDescription('Number of errors that have occurred during the processing of a request.')
adnApplErrorsPreprocessing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsPreprocessing.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsPreprocessing.setDescription('Number of errors that have occurred during parsing and configuration.')
adnApplErrorsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsTotal.setDescription('Total number of errors occurred.')
adnApplErrorsTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsTotalPerSec.setDescription('Rate of errors occurred.')
adnApplErrorsUnhandledExec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsUnhandledExec.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsUnhandledExec.setDescription('Number of errors not handled by user code, but by the default error handler.')
adnApplErrorsUnhandledExecPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorsUnhandledExecPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorsUnhandledExecPerSec.setDescription('Rate of unhandled errors.')
adnApplOutputCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplOutputCacheEntries.setStatus('current')
if mibBuilder.loadTexts: adnApplOutputCacheEntries.setDescription('Current number of entries in the output cache.')
adnApplOutputCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplOutputCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnApplOutputCacheHitRatio.setDescription('Ratio of hits to requests for output cacheable requests.')
adnApplOutputCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplOutputCacheHits.setStatus('current')
if mibBuilder.loadTexts: adnApplOutputCacheHits.setDescription('Total number of output cacheable requests served from the output cache.')
adnApplOutputCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplOutputCacheMisses.setStatus('current')
if mibBuilder.loadTexts: adnApplOutputCacheMisses.setDescription('Total number of output cacheable requests not served from the output cache.')
adnApplOutputCacheTurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplOutputCacheTurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnApplOutputCacheTurnoverRate.setDescription('Number of additions and removals to the output cache per second.')
adnApplPipelineInstanceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplPipelineInstanceCount.setStatus('current')
if mibBuilder.loadTexts: adnApplPipelineInstanceCount.setDescription('Number of active pipeline instances.')
adnApplRequestBytesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestBytesInTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestBytesInTotal.setDescription('The total size, in bytes, of all requests.')
adnApplRequestBytesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestBytesOutTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestBytesOutTotal.setDescription('The total size, in bytes, of responses sent to a client. This does not include standard HTTP response headers.')
adnApplRequestsExecuting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsExecuting.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsExecuting.setDescription('The number of requests currently executing.')
adnApplRequestsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsFailed.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsFailed.setDescription('Total number of failed requests.')
adnApplRequestsInApplQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsInApplQueue.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsInApplQueue.setDescription('The number of requests in the application request queue.')
adnApplRequestsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsNotAuthorized.setDescription('Number of requests failed due to unauthorized access.')
adnApplRequestsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsNotFound.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsNotFound.setDescription('The number of requests for resources that were not found.')
adnApplRequestsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsSucceeded.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsSucceeded.setDescription('The number of requests that executed successfully.')
adnApplRequestsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsTimedOut.setDescription('The number of requests that timed out.')
adnApplRequestsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsTotal.setDescription('The total number of requests since the application was started.')
adnApplRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsPerSec.setDescription('The number of requests executed per second.')
adnApplSessionSQLSrvrConnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplSessionSQLSrvrConnTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplSessionSQLSrvrConnTotal.setDescription('The total number of connections to the SQL Server used by session state.')
adnApplSessionStateSrvrConnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplSessionStateSrvrConnTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplSessionStateSrvrConnTotal.setDescription('The total number of connections to the State Server used by session state.')
adnApplSessionsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplSessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adnApplSessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adnApplSessionsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplSessionsActive.setStatus('current')
if mibBuilder.loadTexts: adnApplSessionsActive.setDescription('The current number of sessions currently active.')
adnApplSessionsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnApplSessionsTimedOut.setDescription('The number of sessions timed out.')
adnApplSessionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplSessionsTotal.setDescription('Total number of sessions since the application was started.')
adnApplTransactionsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplTransactionsAborted.setStatus('current')
if mibBuilder.loadTexts: adnApplTransactionsAborted.setDescription('The number of transactions aborted.')
adnApplTransactionsCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplTransactionsCommitted.setStatus('current')
if mibBuilder.loadTexts: adnApplTransactionsCommitted.setDescription('The number of transactions committed.')
adnApplTransactionsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplTransactionsPending.setStatus('current')
if mibBuilder.loadTexts: adnApplTransactionsPending.setDescription('Number of transactions in progress.')
adnApplTransactionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplTransactionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnApplTransactionsTotal.setDescription('The total number of transactions since the application was started.')
adnApplTransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplTransactionsPerSec.setDescription('Transactions started per second.')
adnApplApplicationLifetimeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplApplicationLifetimeEvents.setStatus('current')
if mibBuilder.loadTexts: adnApplApplicationLifetimeEvents.setDescription('Number of application events raised since the application was started.')
adnApplApplLifetimeEventsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplApplLifetimeEventsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplApplLifetimeEventsPerSec.setDescription('Number of application events raised per second.')
adnApplAuditFailureEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplAuditFailureEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplAuditFailureEventsRaised.setDescription('Number of audit failures in the application since it was started.')
adnApplAuditSuccessEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplAuditSuccessEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplAuditSuccessEventsRaised.setDescription('Number of audit successes in the application since it was started.')
adnApplErrorEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorEventsRaised.setDescription('Number of error events raised since the application was started.')
adnApplErrorEventsRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplErrorEventsRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplErrorEventsRaisedPerSec.setDescription('Number of error events per second.')
adnApplEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplEventsRaised.setDescription('Total number of instrumentation events raised since the application was started.')
adnApplEventsRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplEventsRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplEventsRaisedPerSec.setDescription('Total number of instrumentation events per second.')
adnApplFormAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplFormAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: adnApplFormAuthenticationFailure.setDescription('Number of failed forms authentication ticket validations since the application was started.')
adnApplFormAuthenticationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplFormAuthenticationSuccess.setStatus('current')
if mibBuilder.loadTexts: adnApplFormAuthenticationSuccess.setDescription('Number of successful forms authentication ticket validations since the application was started.')
adnApplInfraErrEventRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplInfraErrEventRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplInfraErrEventRaised.setDescription('Number of HTTP error events raised since the application was started.')
adnApplInfraErrEventRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplInfraErrEventRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplInfraErrEventRaisedPerSec.setDescription('Number of HTTP error events raised per second.')
adnApplMembershipAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplMembershipAuthFailure.setStatus('current')
if mibBuilder.loadTexts: adnApplMembershipAuthFailure.setDescription('Number of failed membership credential validations since the application was started.')
adnApplMembershipAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplMembershipAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: adnApplMembershipAuthSuccess.setDescription('Number of successful membership credential validations since the application was started.')
adnApplReqErrorEventRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplReqErrorEventRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplReqErrorEventRaised.setDescription('Number of runtime error events raised since the application was started.')
adnApplReqErrorEventRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplReqErrorEventRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplReqErrorEventRaisedPerSec.setDescription('Number of runtime error events per second.')
adnApplRequestEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestEventsRaised.setDescription('Number of request events raised since the application was started')
adnApplRequestEventsRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestEventsRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestEventsRaisedPerSec.setDescription('Number of request events raised per second.')
adnApplRequestExecutionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestExecutionTime.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestExecutionTime.setDescription('The number of milliseconds that it took to execute the most recent request.')
adnApplRequestWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestWaitTime.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestWaitTime.setDescription('The number of milliseconds the most recent request was waiting in the queue.')
adnApplRequestsDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsDisconnected.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsDisconnected.setDescription('The number of requests disconnected due to communication errors or user terminated.')
adnApplRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplRequestsRejected.setStatus('current')
if mibBuilder.loadTexts: adnApplRequestsRejected.setDescription('The number of requests rejected because the application request queue was full.')
adnApplViewstateMACValidFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplViewstateMACValidFailure.setStatus('current')
if mibBuilder.loadTexts: adnApplViewstateMACValidFailure.setDescription('Number of viewstate MAC validations that failed since the application was started.')
adnApplCachePrcntMchneMemLimUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCachePrcntMchneMemLimUsed.setStatus('current')
if mibBuilder.loadTexts: adnApplCachePrcntMchneMemLimUsed.setDescription('The amount of physical memory used by the machine divided by the physical memory limit for the cache, as a percentage. When this reaches 100%, half of the cache entries will be forcibly removed. The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.')
adnApplCachePrcntPrcMemLimitUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCachePrcntPrcMemLimitUsed.setStatus('current')
if mibBuilder.loadTexts: adnApplCachePrcntPrcMemLimitUsed.setDescription('The value of private bytes for the worker process divided by the private bytes memory limit for the cache, as a percentage. When this reaches 100%, half of the cache entries will be forcibly removed. The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.')
adnApplCacheAPITrims = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheAPITrims.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheAPITrims.setDescription('Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache using one of the public cache APIs.')
adnApplCacheTotalTrims = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplCacheTotalTrims.setStatus('current')
if mibBuilder.loadTexts: adnApplCacheTotalTrims.setDescription('Total number of entries forcibly removed from the cache due to memory pressure.')
adnApplOutputCacheTrims = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 5, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnApplOutputCacheTrims.setStatus('current')
if mibBuilder.loadTexts: adnApplOutputCacheTrims.setDescription('Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache by the output cache feature.')
browser = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6))
if mibBuilder.loadTexts: browser.setStatus('current')
if mibBuilder.loadTexts: browser.setDescription('The Browser performance object consists of counters that measure the rates of announcements, enumerations, and other browser transmissions.')
browserAnnouncementsDomainPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserAnnouncementsDomainPerSec.setStatus('current')
if mibBuilder.loadTexts: browserAnnouncementsDomainPerSec.setDescription('Announcements Domain/sec is the rate at which a domain has announced itself to the network.')
browserAnnouncementsServerPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserAnnouncementsServerPerSec.setStatus('current')
if mibBuilder.loadTexts: browserAnnouncementsServerPerSec.setDescription('Announcements Server/sec is the rate at which the servers in this domain have announced themselves to this server.')
browserAnnouncementsTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserAnnouncementsTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: browserAnnouncementsTotalPerSec.setDescription('Announcements Total/sec is the sum of Announcements Server/sec and Announcements Domain/sec.')
browserDuplicateMasterAnnounce = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserDuplicateMasterAnnounce.setStatus('current')
if mibBuilder.loadTexts: browserDuplicateMasterAnnounce.setDescription('Duplicate Master Announcements indicates the number of times that the master browser has detected another master browser on the same domain.')
browserElectionPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserElectionPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: browserElectionPacketsPerSec.setDescription('Election Packets/sec is the rate at which browser election packets have been received by this workstation.')
browserEnumerationsDomainPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserEnumerationsDomainPerSec.setStatus('current')
if mibBuilder.loadTexts: browserEnumerationsDomainPerSec.setDescription('Enumerations Domain/sec is the rate at which domain browse requests have been processed by this workstation.')
browserEnumerationsOtherPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserEnumerationsOtherPerSec.setStatus('current')
if mibBuilder.loadTexts: browserEnumerationsOtherPerSec.setDescription('Enumerations Other/sec is the rate at which browse requests processed by this workstation are not domain or server browse requests.')
browserEnumerationsServerPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserEnumerationsServerPerSec.setStatus('current')
if mibBuilder.loadTexts: browserEnumerationsServerPerSec.setDescription('Enumerations Server/sec is the rate at which server browse requests have been processed by this workstation.')
browserEnumerationsTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserEnumerationsTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: browserEnumerationsTotalPerSec.setDescription('Enumerations Total/sec is the rate at which browse requests have been processed by this workstation. This is the sum of Enumerations Server/sec, Enumerations Domain/sec, and Enumerations Other/sec.')
browserIllegalDatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserIllegalDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: browserIllegalDatagramsPerSec.setDescription('Illegal Datagrams/sec is the rate at which incorrectly formatted datagrams have been received by the workstation.')
browserMailslotAllocationsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMailslotAllocationsFailed.setStatus('current')
if mibBuilder.loadTexts: browserMailslotAllocationsFailed.setDescription('Mailslot Allocations Failed is the number of times the datagram receiver has failed to allocate a buffer to hold a user mailslot write.')
browserMailslotOpensFailedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMailslotOpensFailedPerSec.setStatus('current')
if mibBuilder.loadTexts: browserMailslotOpensFailedPerSec.setDescription('Mailslot Opens Failed/sec indicates the rate at which mailslot messages to be delivered to mailslots that are not present are received by this workstation.')
browserMailslotReceivesFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMailslotReceivesFailed.setStatus('current')
if mibBuilder.loadTexts: browserMailslotReceivesFailed.setDescription('Mailslot Receives Failed indicates the number of mailslot messages that could not be received due to transport failures.')
browserMailslotWritesFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMailslotWritesFailed.setStatus('current')
if mibBuilder.loadTexts: browserMailslotWritesFailed.setDescription('Mailslot Writes Failed is the total number of mailslot messages that have been successfully received, but that could not be written to the mailslot.')
browserMailslotWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMailslotWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: browserMailslotWritesPerSec.setDescription('Mailslot Writes/sec is the rate at which mailslot messages have been successfully received.')
browserMissedMailslotDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMissedMailslotDatagrams.setStatus('current')
if mibBuilder.loadTexts: browserMissedMailslotDatagrams.setDescription('Missed Mailslot Datagrams is the number of Mailslot Datagrams that have been discarded due to configuration or allocation limits.')
browserMissedServerAnnouncements = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMissedServerAnnouncements.setStatus('current')
if mibBuilder.loadTexts: browserMissedServerAnnouncements.setDescription('Missed Server Announcements is the number of server announcements that have been missed due to configuration or allocation limits.')
browserMissedServerListRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserMissedServerListRequests.setStatus('current')
if mibBuilder.loadTexts: browserMissedServerListRequests.setDescription('Missed Server List Requests is the number of requests to retrieve a list of browser servers that were received by this workstation, but could not be processed.')
browserServerAllocFailedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserServerAllocFailedPerSec.setStatus('current')
if mibBuilder.loadTexts: browserServerAllocFailedPerSec.setDescription('Server Announce Allocations Failed/sec is the rate at which server (or domain) announcements have failed due to lack of memory.')
browserServerListRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 6, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: browserServerListRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: browserServerListRequestsPerSec.setDescription('Server List Requests/sec is the rate at which requests to retrieve a list of browser servers have been processed by this workstation.')
cache = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7))
if mibBuilder.loadTexts: cache.setStatus('current')
if mibBuilder.loadTexts: cache.setDescription('The Cache performance object consists of counters that monitor the file system cache, an area of physical memory that stores recently used data as long as possible to permit access to the data without having to read from the disk. Because applications typically use the cache, the cache is monitored as an indicator of application input/output (I/O) operations. When memory is plentiful, the cache can grow, but when memory is scarce, the cache can become too small to be effective.')
cacheAsyncCopyReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncCopyReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheAsyncCopyReadsPerSec.setDescription("Async Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The application will regain control immediately even if the disk must be accessed to retrieve the page.")
cacheAsyncDataMapsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncDataMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheAsyncDataMapsPerSec.setDescription('Async Data Maps/sec is the frequency that an application using a file system, such as NTFS, to map a page of a file into the file system cache to read the page, and does not wait for the page to be retrieved if it is not in main memory.')
cacheAsyncFastReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncFastReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheAsyncFastReadsPerSec.setDescription('Async Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache. Normally, file I/O requests will invoke the appropriate file system to retrieve data from a file, but this path permits data to be retrieved from the cache directly (without file system involvement) if the data is in the cache. Even if the data is not in the cache, one invocation of the file system is avoided. If the data is not in the cache, the request (application program call) will not wait until the data has been retrieved from disk, but will get control immediately.')
cacheAsyncMDLReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncMDLReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheAsyncMDLReadsPerSec.setDescription('Async MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the pages. The MDL contains the physical address of each page in the transfer, thus permitting Direct Memory Access (DMA) of the pages. If the accessed page(s) are not in main memory, the calling application program will not wait for the pages to fault in from disk.')
cacheAsyncPinReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncPinReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheAsyncPinReadsPerSec.setDescription("Async Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk. Pages read in this fashion are pinned in memory at the completion of the read. The file system will regain control immediately even if the disk must be accessed to retrieve the page. While pinned, a page's physical address will not be altered.")
cacheCopyReadHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCopyReadHitsPercent.setStatus('current')
if mibBuilder.loadTexts: cacheCopyReadHitsPercent.setDescription("Copy Read Hits is the percentage of cache copy read requests that hit the cache, that is, they did not require a disk read in order to provide access to the page in the cache. A copy read is a file read operation that is satisfied by a memory copy from a page in the cache to the application's buffer. The LAN Redirector uses this method for retrieving information from the cache, as does the LAN Server for small transfers. This is a method used by the disk file systems as well.")
cacheCopyReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCopyReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheCopyReadsPerSec.setDescription("Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The LAN Redirector uses this method for retrieving information from the file system cache, as does the LAN Server for small transfers. This is a method used by the disk file systems as well.")
cacheDataFlushPagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDataFlushPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDataFlushPagesPerSec.setDescription('Data Flush Pages/sec is the number of pages the file system cache has flushed to disk as a result of a request to flush or to satisfy a write-through file write request. More than one page can be transferred on each flush operation.')
cacheDataFlushesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDataFlushesPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDataFlushesPerSec.setDescription('Data Flushes/sec is the rate at which the file system cache has flushed its contents to disk as the result of a request to flush or to satisfy a write-through file write request. More than one page can be transferred on each flush operation.')
cacheDataMapHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDataMapHitsPercent.setStatus('current')
if mibBuilder.loadTexts: cacheDataMapHitsPercent.setDescription('Data Map Hits is the percentage of data maps in the file system cache that could be resolved without having to retrieve a page from the disk, because the page was already in physical memory.')
cacheDataMapPinsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDataMapPinsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDataMapPinsPerSec.setDescription("Data Map Pins/sec is the frequency of data maps in the file system cache that resulted in pinning a page in main memory, an action usually preparatory to writing to the file on disk. While pinned, a page's physical address in main memory and virtual address in the file system cache will not be altered.")
cacheDataMapsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDataMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDataMapsPerSec.setDescription('Data Maps/sec is the frequency that a file system such as NTFS, maps a page of a file into the file system cache to read the page.')
cacheFastReadNotPossiblesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFastReadNotPossiblesPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheFastReadNotPossiblesPerSec.setDescription('Fast Read Not Possibles/sec is the frequency of attempts by an Application Program Interface (API) function call to bypass the file system to get to data in the file system cache that could not be honored without invoking the file system.')
cacheFastReadResourceMissPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFastReadResourceMissPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheFastReadResourceMissPerSec.setDescription('Fast Read Resource Misses/sec is the frequency of cache misses necessitated by the lack of available resources to satisfy the request.')
cacheFastReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFastReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheFastReadsPerSec.setDescription('Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache. Normally, file I/O requests invoke the appropriate file system to retrieve data from a file, but this path permits direct retrieval of data from the cache without file system involvement if the data is in the cache. Even if the data is not in the cache, one invocation of the file system is avoided.')
cacheLazyWriteFlushesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLazyWriteFlushesPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheLazyWriteFlushesPerSec.setDescription('Lazy Write Flushes/sec is the rate at which the Lazy Writer thread has written to disk. Lazy Writing is the process of updating the disk after the page has been changed in memory, so that the application that changed the file does not have to wait for the disk write to be complete before proceeding. More than one page can be transferred by each write operation.')
cacheLazyWritePagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLazyWritePagesPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheLazyWritePagesPerSec.setDescription('Lazy Write Pages/sec is the rate at which the Lazy Writer thread has written to disk. Lazy Writing is the process of updating the disk after the page has been changed in memory, so that the application that changed the file does not have to wait for the disk write to be complete before proceeding. More than one page can be transferred on a single disk write operation.')
cacheMDLReadHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMDLReadHitsPercent.setStatus('current')
if mibBuilder.loadTexts: cacheMDLReadHitsPercent.setDescription('MDL Read Hits is the percentage of Memory Descriptor List (MDL) Read requests to the file system cache that hit the cache, i.e., did not require disk accesses in order to provide memory access to the page(s) in the cache.')
cacheMDLReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMDLReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheMDLReadsPerSec.setDescription('MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the data. The MDL contains the physical address of each page involved in the transfer, and thus can employ a hardware Direct Memory Access (DMA) device to effect the copy. The LAN Server uses this method for large transfers out of the server.')
cachePinReadHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePinReadHitsPercent.setStatus('current')
if mibBuilder.loadTexts: cachePinReadHitsPercent.setDescription("Pin Read Hits is the percentage of pin read requests that hit the file system cache, i.e., did not require a disk read in order to provide access to the page in the file system cache. While pinned, a page's physical address in the file system cache will not be altered. The LAN Redirector uses this method for retrieving data from the cache, as does the LAN Server for small transfers. This is usually the method used by the disk file systems as well.")
cachePinReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePinReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cachePinReadsPerSec.setDescription("Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk. Pages read in this fashion are pinned in memory at the completion of the read. While pinned, a page's physical address in the file system cache will not be altered.")
cacheReadAheadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheReadAheadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheReadAheadsPerSec.setDescription('Read Aheads/sec is the frequency of reads from the file system cache in which the Cache detects sequential access to a file. The read aheads permit the data to be transferred in larger blocks than those being requested by the application, reducing the overhead per access.')
cacheSyncCopyReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSyncCopyReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheSyncCopyReadsPerSec.setDescription("Sync Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The file system will not regain control until the copy operation is complete, even if the disk must be accessed to retrieve the page.")
cacheSyncDataMapsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSyncDataMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheSyncDataMapsPerSec.setDescription('Sync Data Maps/sec counts the frequency that a file system, such as NTFS, maps a page of a file into the file system cache to read the page, and wishes to wait for the page to be retrieved if it is not in main memory.')
cacheSyncFastReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSyncFastReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheSyncFastReadsPerSec.setDescription('Sync Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache. Normally, file I/O requests invoke the appropriate file system to retrieve data from a file, but this path permits direct retrieval of data from the cache without file system involvement if the data is in the cache. Even if the data is not in the cache, one invocation of the file system is avoided. If the data is not in the cache, the request (application program call) will wait until the data has been retrieved from disk.')
cacheSyncMDLReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSyncMDLReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheSyncMDLReadsPerSec.setDescription('Sync MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the pages. The MDL contains the physical address of each page in the transfer, thus permitting Direct Memory Access (DMA) of the pages. If the accessed page(s) are not in main memory, the caller will wait for the pages to fault in from the disk.')
cacheSyncPinReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 7, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSyncPinReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheSyncPinReadsPerSec.setDescription("Sync Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk. Pages read in this fashion are pinned in memory at the completion of the read. The file system will not regain control until the page is pinned in the file system cache, in particular if the disk must be accessed to retrieve the page. While pinned, a page's physical address in the file system cache will not be altered.")
dhcpServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8))
if mibBuilder.loadTexts: dhcpServer.setStatus('current')
if mibBuilder.loadTexts: dhcpServer.setDescription('The DHCP Server performance object provides counters for monitoring DHCP service activity. The DHCP service enables the server to perform as a DHCP server and configure DHCP-enabled client computers on your network as described in the DHCP standard. This object is available when the service is running. The following table describes the counters provided by the DHCP Server object and how to interpret the values when monitoring DHCP service performance.')
dhcpSrvAcksPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvAcksPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvAcksPerSec.setDescription('Rate of DHCP Acks sent by the DHCP server.')
dhcpSrvActiveQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvActiveQueueLength.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvActiveQueueLength.setDescription('The Number of packets in the processing queue of the DHCP server.')
dhcpSrvConflictCheckQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvConflictCheckQueueLength.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvConflictCheckQueueLength.setDescription('The Number of packets in the DHCP server queue waiting on conflict detection (ping).')
dhcpSrvDeclinesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvDeclinesPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvDeclinesPerSec.setDescription('Rate of DHCP Declines received by the DHCP server.')
dhcpSrvDiscoversPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvDiscoversPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvDiscoversPerSec.setDescription('Rate of DHCP Discovers received by the DHCP server.')
dhcpSrvDuplicatesDroppedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvDuplicatesDroppedPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvDuplicatesDroppedPerSec.setDescription('Duplicates Dropped/sec is the rate at which the DHCP server received duplicate packets.')
dhcpSrvInformsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvInformsPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvInformsPerSec.setDescription('Rate of DHCP Informs received by the DHCP server.')
dhcpSrvMillisecondsPerPacketAvg = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvMillisecondsPerPacketAvg.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvMillisecondsPerPacketAvg.setDescription('The average time per packet taken by the DHCP server to send a response.')
dhcpSrvNacksPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvNacksPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvNacksPerSec.setDescription('Rate of DHCP Nacks sent by the DHCP server.')
dhcpSrvOffersPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvOffersPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvOffersPerSec.setDescription('Rate of DHCP Offers sent out by the DHCP server.')
dhcpSrvPacketsExpiredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvPacketsExpiredPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvPacketsExpiredPerSec.setDescription('Packets Expired/sec is the rate at which packets get expired in the DHCP server message queue.')
dhcpSrvPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which packets are received by the DHCP server.')
dhcpSrvReleasesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvReleasesPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvReleasesPerSec.setDescription('Rate of DHCP Releases received by the DHCP server.')
dhcpSrvRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 8, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSrvRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: dhcpSrvRequestsPerSec.setDescription('Rate of DHCP Requests received by the DHCP server.')
distributeTransactionCoordinator = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9))
if mibBuilder.loadTexts: distributeTransactionCoordinator.setStatus('current')
if mibBuilder.loadTexts: distributeTransactionCoordinator.setDescription('The Distributed Transaction Coordinator performance object provides statistics about Distributed Transaction Coordinator (MS DTC), part of Component Services (formerly known as Transaction Server) that coordinates external, or two-phase transactions. Among other things, MS DTC is used to coordinate two-phase transactions by Message Queuing.')
dtcAbortedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcAbortedTransactions.setStatus('current')
if mibBuilder.loadTexts: dtcAbortedTransactions.setDescription('Number of aborted transactions')
dtcAbortedTransactionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcAbortedTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcAbortedTransactionsPerSec.setDescription('Transactions aborted per second')
dtcActiveTransactions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcActiveTransactions.setStatus('current')
if mibBuilder.loadTexts: dtcActiveTransactions.setDescription('Number of currently active transactions')
dtcActiveTransactionsMaximum = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcActiveTransactionsMaximum.setStatus('current')
if mibBuilder.loadTexts: dtcActiveTransactionsMaximum.setDescription('Maximum number of transactions ever concurrently active')
dtcCommittedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcCommittedTransactions.setStatus('current')
if mibBuilder.loadTexts: dtcCommittedTransactions.setDescription('Number of committed transactions')
dtcCommittedTransactionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcCommittedTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcCommittedTransactionsPerSec.setDescription('Transactions committed per second')
dtcForceAbortedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcForceAbortedTransactions.setStatus('current')
if mibBuilder.loadTexts: dtcForceAbortedTransactions.setDescription('Number of transactions aborted by the system administrator')
dtcForceCommittedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcForceCommittedTransactions.setStatus('current')
if mibBuilder.loadTexts: dtcForceCommittedTransactions.setDescription('Number of transactions committed by the system administrator')
dtcInDoubtTransactions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcInDoubtTransactions.setStatus('current')
if mibBuilder.loadTexts: dtcInDoubtTransactions.setDescription('Number of in doubt transactions')
dtcResponseTimeAverage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcResponseTimeAverage.setStatus('current')
if mibBuilder.loadTexts: dtcResponseTimeAverage.setDescription('Average time delta between transaction begin and commit')
dtcResponseTimeMaximum = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcResponseTimeMaximum.setStatus('current')
if mibBuilder.loadTexts: dtcResponseTimeMaximum.setDescription('Maximum time delta between transaction begin and commit')
dtcResponseTimeMinimum = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcResponseTimeMinimum.setStatus('current')
if mibBuilder.loadTexts: dtcResponseTimeMinimum.setDescription('Minimum time delta between transaction begin and commit')
dtcTransactionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 9, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcTransactionsPerSec.setDescription('Transactions performed per second')
dns = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10))
if mibBuilder.loadTexts: dns.setStatus('current')
if mibBuilder.loadTexts: dns.setDescription('The DNS performance object provides counters for monitoring various areas of performance of the DNS service that enables client computers on your network to register and resolve DNS domain names. These names are used to find and access resources offered by other computers on your network or other networks, such as the Internet. The data reported by the DNS object includes the number of overall queries and responses processed by a DNS server, the number of DNS queries and responses processed using either the User Datagram Protocol (UDP) or the Transmission Control Protocol (TCP), the number of queries and responses that used recursion to look up and fully resolve DNS names on behalf of requesting clients, and the number of queries and responses made to servers using the WINS lookup integration features of the DNS service.')
dnsAXFRRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAXFRRequestReceived.setStatus('current')
if mibBuilder.loadTexts: dnsAXFRRequestReceived.setDescription('AXFR Request Received is the total number of full zone transfer requests received by the master DNS server.')
dnsAXFRRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAXFRRequestSent.setStatus('current')
if mibBuilder.loadTexts: dnsAXFRRequestSent.setDescription('AXFR Request Sent is the total number of full zone transfer requests sent by the secondary DNS server.')
dnsAXFRResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAXFRResponseReceived.setStatus('current')
if mibBuilder.loadTexts: dnsAXFRResponseReceived.setDescription('AXFR Response Received is the total number of full zone transfer responses received by the secondary DNS server.')
dnsAXFRSuccessReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAXFRSuccessReceived.setStatus('current')
if mibBuilder.loadTexts: dnsAXFRSuccessReceived.setDescription('AXFR Success Received is the total number of successful full zone transfers received by the secondary DNS server.')
dnsAXFRSuccessSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAXFRSuccessSent.setStatus('current')
if mibBuilder.loadTexts: dnsAXFRSuccessSent.setDescription('AXFR Success Sent is the total number of successful full zone transfers of the master DNS server.')
dnsCachingMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCachingMemory.setStatus('current')
if mibBuilder.loadTexts: dnsCachingMemory.setDescription('Caching Memory is the total caching memory used by DNS server.')
dnsDatabaseNodeMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDatabaseNodeMemory.setStatus('current')
if mibBuilder.loadTexts: dnsDatabaseNodeMemory.setDescription('Database Node Memory is the total database node memory used by DNS server.')
dnsDynamicUpdateNoOperation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateNoOperation.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateNoOperation.setDescription('Dynamic Update NoOperation is the total number of No-operation/Empty dynamic update requests received by the DNS server.')
dnsDynamicUpdateNoOpPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateNoOpPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateNoOpPerSec.setDescription('Dynamic Update NoOperation/sec is the average number of No-operation/Empty dynamic update requests received by the DNS server in each second.')
dnsDynamicUpdateQueued = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateQueued.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateQueued.setDescription('Dynamic Update Queued is the total number of dynamic updates queued by the DNS server.')
dnsDynamicUpdateReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateReceived.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateReceived.setDescription('Dynamic Update Received is the total number of dynamic update requests received by the DNS server.')
dnsDynamicUpdateReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateReceivedPerSec.setDescription('Dynamic Update Received/sec is the average number of dynamic update requests received by the DNS server in each second.')
dnsDynamicUpdateRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateRejected.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateRejected.setDescription('Dynamic Update Rejected is the total number of dynamic updates rejected by the DNS server.')
dnsDynamicUpdateTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateTimeOuts.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateTimeOuts.setDescription('Dynamic Update TimeOuts is the total number of dynamic update timeouts of the DNS server.')
dnsDynamicUpdateWriteToDB = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateWriteToDB.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateWriteToDB.setDescription('Dynamic Update Written to Database is the total number of dynamic updates written to the database by the DNS server.')
dnsDynamicUpdateWriteToDBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynamicUpdateWriteToDBPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsDynamicUpdateWriteToDBPerSec.setDescription('Dynamic Update Written to Database/sec is the average number of dynamic updates written to the database by the DNS server in each second.')
dnsIXFRRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRRequestReceived.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRRequestReceived.setDescription('IXFR Request Received is the total number of incremental zone transfer requests received by the master DNS server.')
dnsIXFRRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRRequestSent.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRRequestSent.setDescription('IXFR Request Sent is the total number of incremental zone transfer requests sent by the secondary DNS server.')
dnsIXFRResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRResponseReceived.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRResponseReceived.setDescription('IXFR Response Received is the total number of incrementalzone transfer responses received by the secondary DNS server.')
dnsIXFRSuccessReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRSuccessReceived.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRSuccessReceived.setDescription('IXFR Success Received is the total number of successful incremental zone transfers received by the secondary DNS server.')
dnsIXFRSuccessSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRSuccessSent.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRSuccessSent.setDescription('IXFR Success Sent is the total number of successful incremental zone transfers of the master DNS server.')
dnsIXFRTCPSuccessReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRTCPSuccessReceived.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRTCPSuccessReceived.setDescription('IXFR TCP Success Received is the total number of successful TCP incremental zone transfers received by the secondary DNS server.')
dnsIXFRUDPSuccessReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIXFRUDPSuccessReceived.setStatus('current')
if mibBuilder.loadTexts: dnsIXFRUDPSuccessReceived.setDescription('IXFR UDP Success Received is the total number of successful UDP incremental zone transfers received by the secondary DNS server.')
dnsNbstatMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsNbstatMemory.setStatus('current')
if mibBuilder.loadTexts: dnsNbstatMemory.setDescription('Nbstat Memory is the total Nbstat memory used by DNS server.')
dnsNotifyReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsNotifyReceived.setStatus('current')
if mibBuilder.loadTexts: dnsNotifyReceived.setDescription('Notify Received is the total number of notifies received by the secondary DNS server.')
dnsNotifySent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsNotifySent.setStatus('current')
if mibBuilder.loadTexts: dnsNotifySent.setDescription('Notify Sent is the total number of notifies sent by the master DNS server.')
dnsRecordFlowMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecordFlowMemory.setStatus('current')
if mibBuilder.loadTexts: dnsRecordFlowMemory.setDescription('Record Flow Memory is the total record flow memory used by DNS server.')
dnsRecursiveQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecursiveQueries.setStatus('current')
if mibBuilder.loadTexts: dnsRecursiveQueries.setDescription('Recursive Queries is the total number of recursive queries received by DNS server.')
dnsRecursiveQueriesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecursiveQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsRecursiveQueriesPerSec.setDescription('Recursive Queries/sec is the average number of recursive queries received by DNS server in each sencond.')
dnsRecursiveQueryFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecursiveQueryFailure.setStatus('current')
if mibBuilder.loadTexts: dnsRecursiveQueryFailure.setDescription('Recursive Query Failure is the total number of recursive query failures.')
dnsRecursiveQueryFailurePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecursiveQueryFailurePerSec.setStatus('current')
if mibBuilder.loadTexts: dnsRecursiveQueryFailurePerSec.setDescription('Recursive Query Failure/sec is the average number of recursive query failures in each second.')
dnsRecursiveSendTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecursiveSendTimeOuts.setStatus('current')
if mibBuilder.loadTexts: dnsRecursiveSendTimeOuts.setDescription('Recursive TimeOuts is the total number of recursive query sending timeouts.')
dnsRecursiveTimeOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecursiveTimeOutPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsRecursiveTimeOutPerSec.setDescription('Recursive TimeOut/sec is the average number of recursive query sending timeouts in each second.')
dnsSecureUpdateFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSecureUpdateFailure.setStatus('current')
if mibBuilder.loadTexts: dnsSecureUpdateFailure.setDescription('Secure Update Failure is the total number of secure updates failed of the DNS server.')
dnsSecureUpdateReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSecureUpdateReceived.setStatus('current')
if mibBuilder.loadTexts: dnsSecureUpdateReceived.setDescription('Secure Update Received is the total number of secure update requests received by the DNS server.')
dnsSecureUpdateReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSecureUpdateReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsSecureUpdateReceivedPerSec.setDescription('Secure Update Received/sec is the average number of secure update requests received by the DNS server in each second.')
dnsTCPMessageMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTCPMessageMemory.setStatus('current')
if mibBuilder.loadTexts: dnsTCPMessageMemory.setDescription('TCP Message Memory is the total TCP message memory used by DNS server.')
dnsTCPQueryReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTCPQueryReceived.setStatus('current')
if mibBuilder.loadTexts: dnsTCPQueryReceived.setDescription('TCP Query Received is the total number of TCP queries received by DNS server.')
dnsTCPQueryReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTCPQueryReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsTCPQueryReceivedPerSec.setDescription('TCP Query Received/sec is the average number of TCP queries received by DNS server in each second.')
dnsTCPResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTCPResponseSent.setStatus('current')
if mibBuilder.loadTexts: dnsTCPResponseSent.setDescription('TCP Response Sent is the total number of TCP reponses sent by DNS server.')
dnsTCPResponseSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTCPResponseSentPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsTCPResponseSentPerSec.setDescription('TCP Response Sent/sec is the average number of TCP reponses sent by DNS server in each second.')
dnsTotalQueryReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalQueryReceived.setStatus('current')
if mibBuilder.loadTexts: dnsTotalQueryReceived.setDescription('Total Query Received is the total number of queries received by DNS server.')
dnsTotalQueryReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalQueryReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsTotalQueryReceivedPerSec.setDescription('Total Query Received/sec is the average number of queries received by DNS server in each second.')
dnsTotalResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalResponseSent.setStatus('current')
if mibBuilder.loadTexts: dnsTotalResponseSent.setDescription('Total Response Sent is the total number of reponses sent by DNS server.')
dnsTotalResponseSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalResponseSentPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsTotalResponseSentPerSec.setDescription('Total Response Sent/sec is the average number of reponses sent by DNS server in each second.')
dnsUDPMessageMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsUDPMessageMemory.setStatus('current')
if mibBuilder.loadTexts: dnsUDPMessageMemory.setDescription('UDP Message Memory is the total UDP message memory used by DNS server.')
dnsUDPQueryReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsUDPQueryReceived.setStatus('current')
if mibBuilder.loadTexts: dnsUDPQueryReceived.setDescription('UDP Query Received is the total number of UDP queries received by DNS server.')
dnsUDPQueryReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsUDPQueryReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsUDPQueryReceivedPerSec.setDescription('UDP Query Received/sec is the average number of UDP queries received by DNS server in each second.')
dnsUDPResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsUDPResponseSent.setStatus('current')
if mibBuilder.loadTexts: dnsUDPResponseSent.setDescription('UDP Response Sent is the total number of UDP reponses sent by DNS server.')
dnsUDPResponseSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsUDPResponseSentPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsUDPResponseSentPerSec.setDescription('UDP Response Sent/sec is the average number of UDP reponses sent by DNS server in each second.')
dnsWINSLookupReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSLookupReceived.setStatus('current')
if mibBuilder.loadTexts: dnsWINSLookupReceived.setDescription('WINS Lookup Received is the total number of WINS lookup requests received by the server.')
dnsWINSLookupReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSLookupReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsWINSLookupReceivedPerSec.setDescription('WINS Lookup Received/sec is the average number of WINS lookup requests received by the server in each second.')
dnsWINSResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSResponseSent.setStatus('current')
if mibBuilder.loadTexts: dnsWINSResponseSent.setDescription('WINS Response Sent is the total number of WINS lookup responses sent by the server.')
dnsWINSResponseSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSResponseSentPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsWINSResponseSentPerSec.setDescription('WINS Response Sent/sec is the average number of WINS lookup responses sent by the server in each second.')
dnsWINSReverseLookupReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSReverseLookupReceived.setStatus('current')
if mibBuilder.loadTexts: dnsWINSReverseLookupReceived.setDescription('WINS Reverse Lookup Received is the total number of WINS reverse lookup requests received by the server.')
dnsWINSReverseLookupRcvPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSReverseLookupRcvPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsWINSReverseLookupRcvPerSec.setDescription('WINS Reverse Lookup Received/sec is the average number of WINS reverse lookup requests received by the server in each second.')
dnsWINSReverseResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSReverseResponseSent.setStatus('current')
if mibBuilder.loadTexts: dnsWINSReverseResponseSent.setDescription('WINS Reverse Response Sent is the total number of WINS Reverse lookup responses sent by the server.')
dnsWINSReverseResponseSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsWINSReverseResponseSentPerSec.setStatus('current')
if mibBuilder.loadTexts: dnsWINSReverseResponseSentPerSec.setDescription('WINS Reverse Response Sent/sec is the average number of WINS Reverse lookup responses sent by the server in each second.')
dnsZoneTransferFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsZoneTransferFailure.setStatus('current')
if mibBuilder.loadTexts: dnsZoneTransferFailure.setDescription('Zone Transfer Failure is the total number of failed zone transfers of the master DNS server.')
dnsZoneTransferRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsZoneTransferRequestReceived.setStatus('current')
if mibBuilder.loadTexts: dnsZoneTransferRequestReceived.setDescription('Zone Transfer Request Received is the total number of zone transfer requests received by the master DNS server.')
dnsZoneTransferSOARequestSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsZoneTransferSOARequestSent.setStatus('current')
if mibBuilder.loadTexts: dnsZoneTransferSOARequestSent.setDescription('Zone Transfer SOA Request Sent is the total number of zone transfer SOA requests sent by the secondary DNS server.')
dnsZoneTransferSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 10, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsZoneTransferSuccess.setStatus('current')
if mibBuilder.loadTexts: dnsZoneTransferSuccess.setDescription('Zone Transfer Success is the total number of successful zone transfers of the master DNS server.')
dotNETCLRDataTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11), )
if mibBuilder.loadTexts: dotNETCLRDataTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRDataTable.setDescription('The Performance console .NET CLR Data category includes counters that provide information about the exceptions thrown by an application.')
dotNETCLRDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncdInstance"))
if mibBuilder.loadTexts: dotNETCLRDataEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRDataEntry.setDescription("Performance information for one particular instance of '.NET CLR Data' object.")
ncdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdInstance.setStatus('current')
if mibBuilder.loadTexts: ncdInstance.setDescription('Instance name.')
ncdSQLClntCurNumConnPools = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdSQLClntCurNumConnPools.setStatus('current')
if mibBuilder.loadTexts: ncdSQLClntCurNumConnPools.setDescription('Current number of pools associated with the process.')
ncdSQLClntCurNumConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdSQLClntCurNumConns.setStatus('current')
if mibBuilder.loadTexts: ncdSQLClntCurNumConns.setDescription('Current number of connections, pooled or not.')
ncdSQLClntCurNumPoolConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdSQLClntCurNumPoolConns.setStatus('current')
if mibBuilder.loadTexts: ncdSQLClntCurNumPoolConns.setDescription('Current number of connections in all pools associated with the process.')
ncdSQLClntPeakNumPoolConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdSQLClntPeakNumPoolConns.setStatus('current')
if mibBuilder.loadTexts: ncdSQLClntPeakNumPoolConns.setDescription('The highest number of connections in all pools since the process started.')
ncdSQLClntTotalNumFailedCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdSQLClntTotalNumFailedCommands.setStatus('current')
if mibBuilder.loadTexts: ncdSQLClntTotalNumFailedCommands.setDescription('The total number of command executes that have failed for any reason.')
ncdSQLClntTotalNumFailedConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncdSQLClntTotalNumFailedConnects.setStatus('current')
if mibBuilder.loadTexts: ncdSQLClntTotalNumFailedConnects.setDescription('The total number of connection open attempts that have failed for any reason.')
dotNETCLRExceptionsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12), )
if mibBuilder.loadTexts: dotNETCLRExceptionsTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRExceptionsTable.setDescription('The Performance console .NET CLR Exceptions category includes counters that provide information about the exceptions thrown by an application.')
dotNETCLRExceptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1), ).setIndexNames((0, "INFORMANT-ADV", "nceInstance"))
if mibBuilder.loadTexts: dotNETCLRExceptionsEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRExceptionsEntry.setDescription("Performance information for one particular instance of '.NET CLR Exceptions' object.")
nceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nceInstance.setStatus('current')
if mibBuilder.loadTexts: nceInstance.setDescription('Instance name.')
nceNumOfExcepsThrown = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nceNumOfExcepsThrown.setStatus('current')
if mibBuilder.loadTexts: nceNumOfExcepsThrown.setDescription('This counter displays the total number of exceptions thrown since the start of the application. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions that are re-thrown would get counted again. Exceptions should only occur in rare situations and not in the normal control flow of the program.')
nceNumOfExcepsThrownPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nceNumOfExcepsThrownPerSec.setStatus('current')
if mibBuilder.loadTexts: nceNumOfExcepsThrownPerSec.setDescription('This counter displays the number of exceptions thrown per second. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions should only occur in rare situations and not in the normal control flow of the program; this counter was designed as an indicator of potential performance problems due to large (>100s) rate of exceptions thrown. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nceNumOfFiltersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nceNumOfFiltersPerSec.setStatus('current')
if mibBuilder.loadTexts: nceNumOfFiltersPerSec.setDescription('This counter displays the number of .NET exception filters executed per second. An exception filter evaluates whether an exception should be handled or not. This counter tracks the rate of exception filters evaluated; irrespective of whether the exception was handled or not. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nceNumOfFinallysPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nceNumOfFinallysPerSec.setStatus('current')
if mibBuilder.loadTexts: nceNumOfFinallysPerSec.setDescription('This counter displays the number of finally blocks executed per second. A finally block is guaranteed to be executed regardless of how the try block was exited. Only the finally blocks that are executed for an exception are counted; finally blocks on normal code paths are not counted by this counter. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nceThrowToCatchDepthPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nceThrowToCatchDepthPerSec.setStatus('current')
if mibBuilder.loadTexts: nceThrowToCatchDepthPerSec.setDescription('This counter displays the number of stack frames traversed from the frame that threw the .NET exception to the frame that handled the exception per second. This counter resets to 0 when an exception handler is entered; so nested exceptions would show the handler to handler stack depth. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
dotNETCLRInteropTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13), )
if mibBuilder.loadTexts: dotNETCLRInteropTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRInteropTable.setDescription("The Performance console .NET CLR Interop category includes counters that provide information about an application's interaction with COM components, COM+ services, and external type libraries.")
dotNETCLRInteropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1), ).setIndexNames((0, "INFORMANT-ADV", "nciInstance"))
if mibBuilder.loadTexts: dotNETCLRInteropEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRInteropEntry.setDescription("Performance information for one particular instance of '.NET CLR Interop' object.")
nciInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nciInstance.setStatus('current')
if mibBuilder.loadTexts: nciInstance.setDescription('Instance name.')
nciNumOfCCWs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nciNumOfCCWs.setStatus('current')
if mibBuilder.loadTexts: nciNumOfCCWs.setDescription('This counter displays the current number of Com-Callable-Wrappers (CCWs). A CCW is a proxy for the .NET managed object being referenced from unmanaged COM client(s). This counter was designed to indicate the number of managed objects being referenced by unmanaged COM code.')
nciNumOfStubs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nciNumOfStubs.setStatus('current')
if mibBuilder.loadTexts: nciNumOfStubs.setDescription('This counter displays the current number of stubs created by the CLR. Stubs are responsible for marshalling arguments and return values from managed to unmanaged code and vice versa; during a COM Interop call or PInvoke call.')
nciNumOfTLBExportsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nciNumOfTLBExportsPerSec.setStatus('current')
if mibBuilder.loadTexts: nciNumOfTLBExportsPerSec.setDescription('Reserved for future use.')
nciNumOfTLBImportsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nciNumOfTLBImportsPerSec.setStatus('current')
if mibBuilder.loadTexts: nciNumOfTLBImportsPerSec.setDescription('Reserved for future use.')
nciNumOfMarshalling = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 13, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nciNumOfMarshalling.setStatus('current')
if mibBuilder.loadTexts: nciNumOfMarshalling.setDescription('This counter displays the total number of times arguments and return values have been marshaled from managed to unmanaged code and vice versa since the start of the application. This counter is not incremented if the stubs are inlined. (Stubs are responsible for marshalling arguments and return values). Stubs usually get inlined if the marshalling overhead is small.')
dotNETCLRJitTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14), )
if mibBuilder.loadTexts: dotNETCLRJitTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRJitTable.setDescription('The Performance console .NET CLR JIT category includes counters that provide information about code that has been JIT-compiled.')
dotNETCLRJitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncjInstance"))
if mibBuilder.loadTexts: dotNETCLRJitEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRJitEntry.setDescription("Performance information for one particular instance of '.NET CLR Jit' object.")
ncjInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjInstance.setStatus('current')
if mibBuilder.loadTexts: ncjInstance.setDescription('Instance name.')
ncjNumOfILBytesJitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjNumOfILBytesJitted.setStatus('current')
if mibBuilder.loadTexts: ncjNumOfILBytesJitted.setDescription("This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the 'Total # of IL Bytes Jitted' counter.")
ncjNumOfMethodsJitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjNumOfMethodsJitted.setStatus('current')
if mibBuilder.loadTexts: ncjNumOfMethodsJitted.setDescription('This counter displays the total number of methods compiled Just-In-Time (JIT) by the CLR JIT compiler since the start of the application. This counter does not include the pre-jitted methods.')
ncjPercentTimeInJit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjPercentTimeInJit.setStatus('current')
if mibBuilder.loadTexts: ncjPercentTimeInJit.setDescription('This counter displays the percentage of elapsed time spent in JIT compilation since the last JIT compilation phase. This counter is updated at the end of every JIT compilation phase. A JIT compilation phase is the phase when a method and its dependencies are being compiled.')
ncjILBytesJittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjILBytesJittedPerSec.setStatus('current')
if mibBuilder.loadTexts: ncjILBytesJittedPerSec.setDescription('This counter displays the rate at which IL bytes are jitted per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncjStandardJitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjStandardJitFailures.setStatus('current')
if mibBuilder.loadTexts: ncjStandardJitFailures.setDescription('This counter displays the peak number of methods the JIT compiler has failed to JIT since the start of the application. This failure can occur if the IL cannot be verified or if there was an internal error in the JIT compiler.')
ncjTotalNumOfILBytesJitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncjTotalNumOfILBytesJitted.setStatus('current')
if mibBuilder.loadTexts: ncjTotalNumOfILBytesJitted.setDescription("This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the '# of IL Bytes Jitted' counter.")
dotNETCLRLoadingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15), )
if mibBuilder.loadTexts: dotNETCLRLoadingTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRLoadingTable.setDescription('The Performance console .NET CLR Loading category includes counters that provide information about assemblies, classes, and application domains that are loaded.')
dotNETCLRLoadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1), ).setIndexNames((0, "INFORMANT-ADV", "nclInstance"))
if mibBuilder.loadTexts: dotNETCLRLoadingEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRLoadingEntry.setDescription("Performance information for one particular instance of '.NET CLR Loading' object.")
nclInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclInstance.setStatus('current')
if mibBuilder.loadTexts: nclInstance.setDescription('Instance name.')
nclPercentTimeLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclPercentTimeLoading.setStatus('current')
if mibBuilder.loadTexts: nclPercentTimeLoading.setDescription('Reserved for future use.')
nclAssemblySearchLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclAssemblySearchLength.setStatus('current')
if mibBuilder.loadTexts: nclAssemblySearchLength.setDescription('Reserved for future use.')
nclBytesInLoaderHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclBytesInLoaderHeap.setStatus('current')
if mibBuilder.loadTexts: nclBytesInLoaderHeap.setDescription('This counter displays the current size (in bytes) of the memory committed by the class loader across all AppDomains. (Committed memory is the physical memory for which space has been reserved on the disk paging file.)')
nclCurrentAssemblies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclCurrentAssemblies.setStatus('current')
if mibBuilder.loadTexts: nclCurrentAssemblies.setDescription('This counter displays the current number of Assemblies loaded across all AppDomains in this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.')
nclCurrentClassesLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclCurrentClassesLoaded.setStatus('current')
if mibBuilder.loadTexts: nclCurrentClassesLoaded.setDescription('This counter displays the current number of classes loaded in all Assemblies.')
nclCurrentAppdomains = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclCurrentAppdomains.setStatus('current')
if mibBuilder.loadTexts: nclCurrentAppdomains.setDescription('This counter displays the current number of AppDomains loaded in this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.')
nclRateOfAssemblies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclRateOfAssemblies.setStatus('current')
if mibBuilder.loadTexts: nclRateOfAssemblies.setDescription('This counter displays the number of Assemblies loaded across all AppDomains per second. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nclRateOfClassesLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclRateOfClassesLoaded.setStatus('current')
if mibBuilder.loadTexts: nclRateOfClassesLoaded.setDescription('This counter displays the number of classes loaded per second in all Assemblies. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nclRateOfLoadFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclRateOfLoadFailures.setStatus('current')
if mibBuilder.loadTexts: nclRateOfLoadFailures.setDescription('This counter displays the number of classes that failed to load per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help.')
nclRateOfAppdomains = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclRateOfAppdomains.setStatus('current')
if mibBuilder.loadTexts: nclRateOfAppdomains.setDescription('This counter displays the number of AppDomains loaded per second. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nclRateOfAppdomainsUnloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclRateOfAppdomainsUnloaded.setStatus('current')
if mibBuilder.loadTexts: nclRateOfAppdomainsUnloaded.setDescription('This counter displays the number of AppDomains unloaded per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
nclTotalNumOfLoadFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclTotalNumOfLoadFailures.setStatus('current')
if mibBuilder.loadTexts: nclTotalNumOfLoadFailures.setDescription('This counter displays the peak number of classes that have failed to load since the start of the application. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help.')
nclTotalAppdomains = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclTotalAppdomains.setStatus('current')
if mibBuilder.loadTexts: nclTotalAppdomains.setDescription('This counter displays the peak number of AppDomains loaded since the start of this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.')
nclTotalAssemblies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclTotalAssemblies.setStatus('current')
if mibBuilder.loadTexts: nclTotalAssemblies.setDescription('This counter displays the total number of Assemblies loaded since the start of this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.')
nclTotalClassesLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclTotalClassesLoaded.setStatus('current')
if mibBuilder.loadTexts: nclTotalClassesLoaded.setDescription('This counter displays the cumulative number of classes loaded in all Assemblies since the start of this application.')
nclTotalAppdomainsUnloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 15, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nclTotalAppdomainsUnloaded.setStatus('current')
if mibBuilder.loadTexts: nclTotalAppdomainsUnloaded.setDescription('This counter displays the total number of AppDomains unloaded since the start of the application. If an AppDomain is loaded and unloaded multiple times this counter would count each of those unloads as separate.')
dotNETCLRLocksAndThreadsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16), )
if mibBuilder.loadTexts: dotNETCLRLocksAndThreadsTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRLocksAndThreadsTable.setDescription('The Performance console .NET CLR LocksAndThreads category includes counters that provide information about managed locks and threads that an application uses.')
dotNETCLRLocksAndThreadsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncltInstance"))
if mibBuilder.loadTexts: dotNETCLRLocksAndThreadsEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRLocksAndThreadsEntry.setDescription("Performance information for one particular instance of '.NET CLR LocksAndThreads' object.")
ncltInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltInstance.setStatus('current')
if mibBuilder.loadTexts: ncltInstance.setDescription('Instance name.')
ncltNumOfCurrentLogicalThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltNumOfCurrentLogicalThread.setStatus('current')
if mibBuilder.loadTexts: ncltNumOfCurrentLogicalThread.setDescription('This counter displays the number of current .NET thread objects in the application. A .NET thread object is created either by new System.Threading.Thread or when an unmanaged thread enters the managed environment. This counters maintains the count of both running and stopped threads. This counter is not an average over time; it just displays the last observed value.')
ncltNumOfCurrentPhysicalThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltNumOfCurrentPhysicalThread.setStatus('current')
if mibBuilder.loadTexts: ncltNumOfCurrentPhysicalThread.setDescription('This counter displays the number of native OS threads created and owned by the CLR to act as underlying threads for .NET thread objects. This counters value does not include the threads used by the CLR in its internal operations; it is a subset of the threads in the OS process.')
ncltNumOfCurrentRecognizedThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltNumOfCurrentRecognizedThread.setStatus('current')
if mibBuilder.loadTexts: ncltNumOfCurrentRecognizedThread.setDescription('This counter displays the number of threads that are currently recognized by the CLR; they have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice.')
ncltNumOfTotalRecognizedThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltNumOfTotalRecognizedThread.setStatus('current')
if mibBuilder.loadTexts: ncltNumOfTotalRecognizedThread.setDescription('This counter displays the total number of threads that have been recognized by the CLR since the start of this application; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice.')
ncltContentionRatePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltContentionRatePerSec.setStatus('current')
if mibBuilder.loadTexts: ncltContentionRatePerSec.setDescription("Rate at which threads in the runtime attempt to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the 'lock' statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.")
ncltCurrentQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltCurrentQueueLength.setStatus('current')
if mibBuilder.loadTexts: ncltCurrentQueueLength.setDescription('This counter displays the total number of threads currently waiting to acquire some managed lock in the application. This counter is not an average over time; it displays the last observed value.')
ncltQueueLengthPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltQueueLengthPerSec.setStatus('current')
if mibBuilder.loadTexts: ncltQueueLengthPerSec.setDescription('This counter displays the number of threads per second waiting to acquire some lock in the application. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncltQueueLengthPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltQueueLengthPeak.setStatus('current')
if mibBuilder.loadTexts: ncltQueueLengthPeak.setDescription('This counter displays the total number of threads that waited to acquire some managed lock since the start of the application.')
ncltTotalNumOfContentions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltTotalNumOfContentions.setStatus('current')
if mibBuilder.loadTexts: ncltTotalNumOfContentions.setDescription("This counter displays the total number of times threads in the CLR have attempted to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the 'lock' statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.")
ncltRateOfRecognizedThreadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 16, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncltRateOfRecognizedThreadPerSec.setStatus('current')
if mibBuilder.loadTexts: ncltRateOfRecognizedThreadPerSec.setDescription('This counter displays the number of threads per second that have been recognized by the CLR; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
dotNETCLRMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17), )
if mibBuilder.loadTexts: dotNETCLRMemoryTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRMemoryTable.setDescription('The Performance console .NET CLR Memory category includes counters that provide information about the garbage collector.')
dotNETCLRMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncmInstance"))
if mibBuilder.loadTexts: dotNETCLRMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRMemoryEntry.setDescription("Performance information for one particular instance of '.NET CLR Memory' object.")
ncmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmInstance.setStatus('current')
if mibBuilder.loadTexts: ncmInstance.setDescription('Instance name.')
ncmNumBytesInAllHeaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumBytesInAllHeaps.setStatus('current')
if mibBuilder.loadTexts: ncmNumBytesInAllHeaps.setDescription('This counter is the sum of four other counters; Gen 0 Heap Size; Gen 1 Heap Size; Gen 2 Heap Size and the Large Object Heap Size. This counter indicates the current memory allocated in bytes on the GC Heaps.')
ncmNumGCHandles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumGCHandles.setStatus('current')
if mibBuilder.loadTexts: ncmNumGCHandles.setDescription('This counter displays the current number of GC Handles in use. GCHandles are handles to resources external to the CLR and the managed environment. Handles occupy small amounts of memory in the GCHeap but potentially expensive unmanaged resources.')
ncmNumGen0Collections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumGen0Collections.setStatus('current')
if mibBuilder.loadTexts: ncmNumGen0Collections.setDescription('This counter displays the number of times the generation 0 objects (youngest; most recently allocated) are garbage collected (Gen 0 GC) since the start of the application. Gen 0 GC occurs when the available memory in generation 0 is not sufficient to satisfy an allocation request. This counter is incremented at the end of a Gen 0 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 1 or Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.')
ncmNumGen1Collections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumGen1Collections.setStatus('current')
if mibBuilder.loadTexts: ncmNumGen1Collections.setDescription('This counter displays the number of times the generation 1 objects are garbage collected since the start of the application. The counter is incremented at the end of a Gen 1 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.')
ncmNumGen2Collections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumGen2Collections.setStatus('current')
if mibBuilder.loadTexts: ncmNumGen2Collections.setDescription('This counter displays the number of times the generation 2 objects (older) are garbage collected since the start of the application. The counter is incremented at the end of a Gen 2 GC (also called full GC). _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.')
ncmNumInducedGC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumInducedGC.setStatus('current')
if mibBuilder.loadTexts: ncmNumInducedGC.setDescription('This counter displays the peak number of times a garbage collection was performed because of an explicit call to GC.Collect. Its a good practice to let the GC tune the frequency of its collections.')
ncmNumTotalCommittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumTotalCommittedBytes.setStatus('current')
if mibBuilder.loadTexts: ncmNumTotalCommittedBytes.setDescription('This counter displays the amount of virtual memory (in bytes) currently committed by the Garbage Collector. (Committed memory is the physical memory for which space has been reserved on the disk paging file).')
ncmNumTotalReservedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumTotalReservedBytes.setStatus('current')
if mibBuilder.loadTexts: ncmNumTotalReservedBytes.setDescription('This counter displays the amount of virtual memory (in bytes) currently reserved by the Garbage Collector. (Reserved memory is the virtual memory space reserved for the application but no disk or main memory pages have been used.)')
ncmNumOfPinnedObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumOfPinnedObjects.setStatus('current')
if mibBuilder.loadTexts: ncmNumOfPinnedObjects.setDescription('This counter displays the number of pinned objects encountered in the last GC. This counter tracks the pinned objects only in the heaps that were garbage collected e.g. a Gen 0 GC would cause enumeration of pinned objects in the generation 0 heap only. A pinned object is one that the Garbage Collector cannot move in memory.')
ncmNumOfSinkBlocksInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumOfSinkBlocksInUse.setStatus('current')
if mibBuilder.loadTexts: ncmNumOfSinkBlocksInUse.setDescription('This counter displays the current number of sync blocks in use. Sync blocks are per-object data structures allocated for storing synchronization information. Sync blocks hold weak references to managed objects and need to be scanned by the Garbage Collector. Sync blocks are not limited to storing synchronization information and can also store COM interop metadata. This counter was designed to indicate performance problems with heavy use of synchronization primitives.')
ncmPercentTimeInGC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPercentTimeInGC.setStatus('current')
if mibBuilder.loadTexts: ncmPercentTimeInGC.setDescription('% Time in GC is the percentage of elapsed time that was spent in performing a garbage collection (GC) since the last GC cycle. This counter is usually an indicator of the work done by the Garbage Collector on behalf of the application to collect and compact memory. This counter is updated only at the end of every GC and the counter value reflects the last observed value; its not an average.')
ncmAllocatedBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAllocatedBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ncmAllocatedBytesPerSec.setDescription('This counter displays the rate of bytes per second allocated on the GC Heap. This counter is updated at the end of every GC; not at each allocation. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncmFinalizationSurvivors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFinalizationSurvivors.setStatus('current')
if mibBuilder.loadTexts: ncmFinalizationSurvivors.setDescription("This counter displays the number of garbage collected objects that survive a collection because they are waiting to be finalized. If these objects hold references to other objects then those objects also survive but are not counted by this counter; the 'Promoted Finalization-Memory from Gen 0' and 'Promoted Finalization-Memory from Gen 1' counters represent all the memory that survived due to finalization. This counter is not a cumulative counter; its updated at the end of every GC with count of the survivors during that particular GC only. This counter was designed to indicate the extra overhead that the application might incur because of finalization.")
ncmGen0PromotedBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGen0PromotedBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ncmGen0PromotedBytesPerSec.setDescription('This counter displays the bytes per second that are promoted from generation 0 (youngest) to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. This counter was designed as an indicator of relatively long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncmGen0HeapSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGen0HeapSize.setStatus('current')
if mibBuilder.loadTexts: ncmGen0HeapSize.setDescription('This counter displays the maximum bytes that can be allocated in generation 0 (Gen 0); its does not indicate the current number of bytes allocated in Gen 0. A Gen 0 GC is triggered when the allocations since the last GC exceed this size. The Gen 0 size is tuned by the Garbage Collector and can change during the execution of the application. At the end of a Gen 0 collection the size of the Gen 0 heap is infact 0 bytes; this counter displays the size (in bytes) of allocations that would trigger the next Gen 0 GC. This counter is updated at the end of a GC; its not updated on every allocation.')
ncmGen1PromotedBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGen1PromotedBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ncmGen1PromotedBytesPerSec.setDescription('This counter displays the bytes per second that are promoted from generation 1 to generation 2 (oldest); objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. Nothing is promoted from generation 2 since it is the oldest. This counter was designed as an indicator of very long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncmGen1HeapSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGen1HeapSize.setStatus('current')
if mibBuilder.loadTexts: ncmGen1HeapSize.setDescription('This counter displays the current number of bytes in generation 1 (Gen 1); this counter does not display the maximum size of Gen 1. Objects are not directly allocated in this generation; they are promoted from previous Gen 0 GCs. This counter is updated at the end of a GC; its not updated on every allocation.')
ncmGen2HeapSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGen2HeapSize.setStatus('current')
if mibBuilder.loadTexts: ncmGen2HeapSize.setDescription('This counter displays the current number of bytes in generation 2 (Gen 2). Objects are not directly allocated in this generation; they are promoted from Gen 1 during previous Gen 1 GCs. This counter is updated at the end of a GC; its not updated on every allocation.')
ncmLargeObjectHeapSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLargeObjectHeapSize.setStatus('current')
if mibBuilder.loadTexts: ncmLargeObjectHeapSize.setDescription('This counter displays the current size of the Large Object Heap in bytes. Objects greater than 20 KBytes are treated as large objects by the Garbage Collector and are directly allocated in a special heap; they are not promoted through the generations. This counter is updated at the end of a GC; its not updated on every allocation.')
ncmPromotFinalizationMemoryGen0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPromotFinalizationMemoryGen0.setStatus('current')
if mibBuilder.loadTexts: ncmPromotFinalizationMemoryGen0.setDescription('This counter displays the bytes of memory that are promoted from generation 0 to generation 1 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter.')
ncmPromotFinalizationMemoryGen1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPromotFinalizationMemoryGen1.setStatus('current')
if mibBuilder.loadTexts: ncmPromotFinalizationMemoryGen1.setDescription('This counter displays the bytes of memory that are promoted from generation 1 to generation 2 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only.')
ncmPromotedMemoryFromGen0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPromotedMemoryFromGen0.setStatus('current')
if mibBuilder.loadTexts: ncmPromotedMemoryFromGen0.setDescription('This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 0 to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter.')
ncmPromotedMemoryFromGen1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPromotedMemoryFromGen1.setStatus('current')
if mibBuilder.loadTexts: ncmPromotedMemoryFromGen1.setDescription('This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 1 to generation 2; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only.')
ncmProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 17, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmProcessID.setStatus('current')
if mibBuilder.loadTexts: ncmProcessID.setDescription('This counter displays the process ID of the CLR process instance being monitored.')
dotNETCLRNetworkingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18), )
if mibBuilder.loadTexts: dotNETCLRNetworkingTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRNetworkingTable.setDescription('The Performance console .NET CLR Networking category includes counters that provide information about data that an application sends and receives over the network.')
dotNETCLRNetworkingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncnInstance"))
if mibBuilder.loadTexts: dotNETCLRNetworkingEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRNetworkingEntry.setDescription("Performance information for one particular instance of '.NET CLR Networking' object.")
ncnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncnInstance.setStatus('current')
if mibBuilder.loadTexts: ncnInstance.setDescription('Instance name.')
ncnBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncnBytesReceived.setStatus('current')
if mibBuilder.loadTexts: ncnBytesReceived.setDescription('The cumulative total number of bytes received over all open socket connections since the process was started. This number includes data and any protocol information that is not defined by the TCP/IP protocol.')
ncnBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncnBytesSent.setStatus('current')
if mibBuilder.loadTexts: ncnBytesSent.setDescription('The cumulative total number of bytes sent over all open socket connections since the process was started. This number includes data and any protocol information that is not defined by the TCP/IP protocol.')
ncnConnectionsEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncnConnectionsEstablished.setStatus('current')
if mibBuilder.loadTexts: ncnConnectionsEstablished.setDescription('The cumulative total number of socket connections established for this process since the process was started.')
ncnDatagramsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncnDatagramsReceived.setStatus('current')
if mibBuilder.loadTexts: ncnDatagramsReceived.setDescription('The cumulative total number of datagram packets received since the process was started.')
ncnDatagramsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 18, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncnDatagramsSent.setStatus('current')
if mibBuilder.loadTexts: ncnDatagramsSent.setDescription('The cumulative total number of datagram packets sent since the process was started.')
dotNETCLRRemotingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19), )
if mibBuilder.loadTexts: dotNETCLRRemotingTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRRemotingTable.setDescription('The Performance console .NET CLR Remoting category includes counters that provide information about the remoted objects that an application uses.')
dotNETCLRRemotingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncrInstance"))
if mibBuilder.loadTexts: dotNETCLRRemotingEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRRemotingEntry.setDescription("Performance information for one particular instance of '.NET CLR Remoting' object.")
ncrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrInstance.setStatus('current')
if mibBuilder.loadTexts: ncrInstance.setDescription('Instance name.')
ncrChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrChannels.setStatus('current')
if mibBuilder.loadTexts: ncrChannels.setDescription('This counter displays the total number of remoting channels registered across all AppDomains since the start of the application. Channels are used to transport messages to and from remote objects.')
ncrContextProxies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrContextProxies.setStatus('current')
if mibBuilder.loadTexts: ncrContextProxies.setDescription('This counter displays the total number of remoting proxy objects created in this process since the start of the process. Proxy object acts as a representative of the remote objects and ensures that all calls made on the proxy are forwarded to the correct remote object instance.')
ncrContextBoundClassesLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrContextBoundClassesLoaded.setStatus('current')
if mibBuilder.loadTexts: ncrContextBoundClassesLoaded.setDescription('This counter displays the current number of context-bound classes loaded. Classes that can be bound to a context are called context-bound classes; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc.')
ncrContextBoundObjsAllocPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrContextBoundObjsAllocPerSec.setStatus('current')
if mibBuilder.loadTexts: ncrContextBoundObjsAllocPerSec.setDescription('This counter displays the number of context-bound objects allocated per second. Instances of classes that can be bound to a context are called context-bound objects; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncrContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrContexts.setStatus('current')
if mibBuilder.loadTexts: ncrContexts.setDescription('This counter displays the current number of remoting contexts in the application. A context is a boundary containing a collection of objects with the same usage rules like synchronization; thread affinity; transactions etc.')
ncrRemoteCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrRemoteCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ncrRemoteCallsPerSec.setDescription('This counter displays the number of remote procedure calls invoked per second. A remote procedure call is a call on any object outside the caller;s AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.')
ncrTotalRemoteCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 19, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncrTotalRemoteCalls.setStatus('current')
if mibBuilder.loadTexts: ncrTotalRemoteCalls.setDescription('This counter displays the total number of remote procedure calls invoked since the start of this application. A remote procedure call is a call on any object outside the caller;s AppDomain.')
dotNETCLRSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20), )
if mibBuilder.loadTexts: dotNETCLRSecurityTable.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRSecurityTable.setDescription('The Performance console .NET CLR Security category includes counters that provide information about the security checks that the common language runtime performs for an application.')
dotNETCLRSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1), ).setIndexNames((0, "INFORMANT-ADV", "ncsInstance"))
if mibBuilder.loadTexts: dotNETCLRSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: dotNETCLRSecurityEntry.setDescription("Performance information for one particular instance of '.NET CLR Security' object.")
ncsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncsInstance.setStatus('current')
if mibBuilder.loadTexts: ncsInstance.setDescription('Instance name.')
ncsNumLinkTimeChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncsNumLinkTimeChecks.setStatus('current')
if mibBuilder.loadTexts: ncsNumLinkTimeChecks.setDescription('This counter displays the total number of linktime Code Access Security (CAS) checks since the start of the application. Linktime CAS checks are performed when a caller makes a call to a callee demanding a particular permission at JIT compile time; linktime check is performed once per caller. This count is not indicative of serious performance issues; its indicative of the security system activity.')
ncsPercentTimeSigAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncsPercentTimeSigAuthenticating.setStatus('current')
if mibBuilder.loadTexts: ncsPercentTimeSigAuthenticating.setDescription('Reserved for future use.')
ncsPercentTimeInRTChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncsPercentTimeInRTChecks.setStatus('current')
if mibBuilder.loadTexts: ncsPercentTimeInRTChecks.setDescription('This counter displays the percentage of elapsed time spent in performing runtime Code Access Security (CAS) checks since the last such check. CAS allows code to be trusted to varying degrees and enforces these varying levels of trust depending on code identity. This counter is updated at the end of a runtime security check; it represents the last observed value; its not an average.')
ncsStackWalkDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncsStackWalkDepth.setStatus('current')
if mibBuilder.loadTexts: ncsStackWalkDepth.setDescription('This counter displays the depth of the stack during that last runtime Code Access Security check. Runtime Code Access Security check is performed by crawling the stack. This counter is not an average; it just displays the last observed value.')
ncsTotalRuntimeChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncsTotalRuntimeChecks.setStatus('current')
if mibBuilder.loadTexts: ncsTotalRuntimeChecks.setDescription("This counter displays the total number of runtime Code Access Security (CAS) checks performed since the start of the application. Runtime CAS checks are performed when a caller makes a call to a callee demanding a particular permission; the runtime check is made on every call by the caller; the check is done by examining the current thread stack of the caller. This counter used together with 'Stack Walk Depth' is indicative of performance penalty for security checks.")
fileReplicaConnTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21), )
if mibBuilder.loadTexts: fileReplicaConnTable.setStatus('current')
if mibBuilder.loadTexts: fileReplicaConnTable.setDescription('The FileReplicaConn performance object displays performance statistics of the REPLICACONN object that defines replica connections to distributed file system (Dfs) roots.')
fileReplicaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1), ).setIndexNames((0, "INFORMANT-ADV", "frcInstance"))
if mibBuilder.loadTexts: fileReplicaConnEntry.setStatus('current')
if mibBuilder.loadTexts: fileReplicaConnEntry.setDescription("Performance information for one particular instance of 'FileReplicaConn' object.")
frcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcInstance.setStatus('current')
if mibBuilder.loadTexts: frcInstance.setDescription('Instance name.')
frcAuthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcAuthentications.setStatus('current')
if mibBuilder.loadTexts: frcAuthentications.setDescription('The number of successful authentication checks made on packets received from the partner associated with this connection.')
frcAuthenticationsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcAuthenticationsInError.setStatus('current')
if mibBuilder.loadTexts: frcAuthenticationsInError.setDescription('The cumulative number of authentication check failures detected on packets received from the partner associated with this connection.')
frcBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcBindings.setStatus('current')
if mibBuilder.loadTexts: frcBindings.setDescription('The number of successful RPC bind requests to the FRS server on the partner associated with this connection.')
frcBindingsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcBindingsInError.setStatus('current')
if mibBuilder.loadTexts: frcBindingsInError.setDescription('The cumulative number of unsuccessful RPC bind requests to the FRS server on the partner associated with this connection.')
frcCommunicationTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcCommunicationTimeouts.setStatus('current')
if mibBuilder.loadTexts: frcCommunicationTimeouts.setDescription('The cumulative number of times a communication request has taken too long to the partner associated with this connection.')
frcFetchBlocksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcFetchBlocksReceived.setStatus('current')
if mibBuilder.loadTexts: frcFetchBlocksReceived.setDescription('The number of blocks of staging file data received from the partner associated with this connection. The underlying transport may break a block into a smaller number of packets on the wire.')
frcFetchBlocksReceivedInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcFetchBlocksReceivedInBytes.setStatus('current')
if mibBuilder.loadTexts: frcFetchBlocksReceivedInBytes.setDescription('The number of bytes of staging file data received from the partner associated with this connection.')
frcFetchBlocksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcFetchBlocksSent.setStatus('current')
if mibBuilder.loadTexts: frcFetchBlocksSent.setDescription('The number of blocks of staging file data sent to the partner associated with this connection. The underlying transport may break a block into a smaller number of packets on the wire.')
frcFetchBlocksSentInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcFetchBlocksSentInBytes.setStatus('current')
if mibBuilder.loadTexts: frcFetchBlocksSentInBytes.setDescription('The number of bytes of staging file data sent to the partner associated with this connection.')
frcFetchRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcFetchRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: frcFetchRequestsReceived.setDescription('The number of staging files received from the partner associated with this connection.')
frcFetchRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcFetchRequestsSent.setStatus('current')
if mibBuilder.loadTexts: frcFetchRequestsSent.setDescription('The number of staging files requested from the partner associated with this connection.')
frcInboundChangeOrdersDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcInboundChangeOrdersDampened.setStatus('current')
if mibBuilder.loadTexts: frcInboundChangeOrdersDampened.setDescription('The number of change orders received from the partner associated with this connection that have been filtered out by the inbound dampening check.')
frcJoinNotificationsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcJoinNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: frcJoinNotificationsReceived.setDescription('The number of partner join notifications received from the partner associated with this connection.')
frcJoinNotificationsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcJoinNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: frcJoinNotificationsSent.setDescription('The number of partner join requests (if this is an inbound connection) or ready-to-join notifications (if this is an outbound connection) sent to the partner associated with this connection.')
frcJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcJoins.setStatus('current')
if mibBuilder.loadTexts: frcJoins.setDescription('The number of successful joins with the partner associated with this connection.')
frcLocalChangeOrdersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcLocalChangeOrdersSent.setStatus('current')
if mibBuilder.loadTexts: frcLocalChangeOrdersSent.setDescription('The number of locally originated replication change orders that have been sent to the partner associated with this connection.')
frcLocalChangeOrdersSentAtJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcLocalChangeOrdersSentAtJoin.setStatus('current')
if mibBuilder.loadTexts: frcLocalChangeOrdersSentAtJoin.setDescription('The number of locally originated replication change orders produced by a partner induced version vector scan that have been sent to the partner associated with this connection.')
frcOutboundChangeOrdersDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcOutboundChangeOrdersDampened.setStatus('current')
if mibBuilder.loadTexts: frcOutboundChangeOrdersDampened.setDescription('The number of change orders sent to the partner associated with this connection that have been filtered out by the outbound dampening check and thus were never sent.')
frcPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcPacketsSent.setStatus('current')
if mibBuilder.loadTexts: frcPacketsSent.setDescription('The total number of FRS data and control packets sent to the partner associated with this connection.')
frcPacketsSentInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcPacketsSentInBytes.setStatus('current')
if mibBuilder.loadTexts: frcPacketsSentInBytes.setDescription('The total number of FRS data and control bytes sent to the partner associated with this connection.')
frcPacketsSentInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcPacketsSentInError.setStatus('current')
if mibBuilder.loadTexts: frcPacketsSentInError.setDescription('The cumulative number of FRS data or control packets not sent because of some error condition associated with this connection.')
frcRemoteChangeOrdersReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcRemoteChangeOrdersReceived.setStatus('current')
if mibBuilder.loadTexts: frcRemoteChangeOrdersReceived.setDescription('The number of change orders received from the partner associated with this connection that have passed the inbound dampening check.')
frcRemoteChangeOrdersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcRemoteChangeOrdersSent.setStatus('current')
if mibBuilder.loadTexts: frcRemoteChangeOrdersSent.setDescription('The number of replication change orders originating upstream from this member (i.e. remote) that have been sent to the partner associated with this connection.')
frcUnjoins = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 21, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frcUnjoins.setStatus('current')
if mibBuilder.loadTexts: frcUnjoins.setDescription('The number of unjoins with the partner associated with this connection.')
fileReplicaSetTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22), )
if mibBuilder.loadTexts: fileReplicaSetTable.setStatus('current')
if mibBuilder.loadTexts: fileReplicaSetTable.setDescription('The FileReplicaSet performance object displays performance statistics of the REPLICASET object that defines a replica set (one or more replicas, shared volumes or directories that store duplicates of the contents of an original share). The object reports statistics for the computer that constitutes the original share. For example, in a bidirectional ring topology of three computers A, B, and C, where computer A and computer C both replicate from computer B, the FileReplicaSet counters would provide data for computer B.')
fileReplicaSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1), ).setIndexNames((0, "INFORMANT-ADV", "frsInstance"))
if mibBuilder.loadTexts: fileReplicaSetEntry.setStatus('current')
if mibBuilder.loadTexts: fileReplicaSetEntry.setDescription("Performance information for one particular instance of 'FileReplicaSet' object.")
frsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsInstance.setStatus('current')
if mibBuilder.loadTexts: frsInstance.setDescription('Instance name.')
frsAuthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsAuthentications.setStatus('current')
if mibBuilder.loadTexts: frsAuthentications.setDescription('The number of successful authentication checks made on packets received from any partner associated with this replica set member.')
frsAuthenticationsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsAuthenticationsInError.setStatus('current')
if mibBuilder.loadTexts: frsAuthenticationsInError.setDescription('The cumulative number of authentication check failures detected on packets received from any partner associated with this replica set member.')
frsBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsBindings.setStatus('current')
if mibBuilder.loadTexts: frsBindings.setDescription('The number of successful RPC bind requests to the FRS server on any partner associated with this replica set member.')
frsBindingsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsBindingsInError.setStatus('current')
if mibBuilder.loadTexts: frsBindingsInError.setDescription('The cumulative number of unsuccessful RPC bind requests to the FRS server on any partner associated with this replica set member.')
frsBytesOfFilesInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsBytesOfFilesInstalled.setStatus('current')
if mibBuilder.loadTexts: frsBytesOfFilesInstalled.setDescription('The total number of bytes of staging file data that have been installed on this replica set member.')
frsBytesOfStagingFetched = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsBytesOfStagingFetched.setStatus('current')
if mibBuilder.loadTexts: frsBytesOfStagingFetched.setDescription('The total number of bytes of staging file data received by this replica set member from its inbound partners.')
frsBytesOfStagingGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsBytesOfStagingGenerated.setStatus('current')
if mibBuilder.loadTexts: frsBytesOfStagingGenerated.setDescription('The total number of bytes of staging file data generated by this replica set member not including the number of bytes produced as part of regeneration.')
frsBytesOfStagingRegenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsBytesOfStagingRegenerated.setStatus('current')
if mibBuilder.loadTexts: frsBytesOfStagingRegenerated.setDescription('The total number of bytes of staging file data regenerated by this replica set member for a specific outbound partner request.')
frsChgOrdersAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersAborted.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersAborted.setDescription('The number of local plus remote file updates that were aborted on this replica set member.')
frsChgOrdersEvaporated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersEvaporated.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersEvaporated.setDescription('The number of local file updates that were never processed because the underlying file was deleted first.')
frsChgOrdersIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersIssued.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersIssued.setDescription('The number of local plus remote file updates initiated on this replica set member.')
frsChgOrdersMorphed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersMorphed.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersMorphed.setDescription('The number of local plus remote file updates that encountered a name space collision on this replica set member.')
frsChgOrdersPropagated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersPropagated.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersPropagated.setDescription('The number of local plus remote file updates that were propagated to the outbound log of this replica set member. The update remains pending in the outbound log until it has been delivered to all outbound partners.')
frsChgOrdersReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersReceived.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersReceived.setDescription('The number of local plus remote file updates that have been received by this replica set member. Note that depending on the replication topology it is possible for the same remote file update to be sent from multiple inbound partners. However, only one will send the actual file data.')
frsChgOrdersRetired = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersRetired.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersRetired.setDescription('The number of local plus remote file updates retired on this replica set member.')
frsChgOrdersRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersRetried.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersRetried.setDescription('The number of local plus remote file updates that were retried for any reason on this replica set member.')
frsChgOrdersRetriedFetch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersRetriedFetch.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersRetriedFetch.setDescription('The number of local plus remote file updates that were retried due to a stage file fetch problem on this replica set member.')
frsChgOrdersRetriedGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersRetriedGenerate.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersRetriedGenerate.setDescription('The number of local plus remote file updates that were retried due to a stage file generation problem on this replica set member.')
frsChgOrdersRetriedInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersRetriedInstall.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersRetriedInstall.setDescription('The number of local plus remote file updates that were retried due to a stage file install problem on this replica set member. Most likely caused by a sharing conflict trying to access the target file or directory.')
frsChgOrdersRetriedRename = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersRetriedRename.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersRetriedRename.setDescription('The number of local plus remote file updates that were retried due to a problem during the final target file rename or delete operation on this replica set member. Most likely caused by a sharing conflict trying to access the target file or directory.')
frsChgOrdersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsChgOrdersSent.setStatus('current')
if mibBuilder.loadTexts: frsChgOrdersSent.setDescription('The number of local plus remote file updates that have been sent to the outbound partners of this replica set member.')
frsCommunicationTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsCommunicationTimeouts.setStatus('current')
if mibBuilder.loadTexts: frsCommunicationTimeouts.setDescription('The cumulative number of FRS data or control packets not sent to an outbound partner because the send request timed out.')
frsDSBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSBindings.setStatus('current')
if mibBuilder.loadTexts: frsDSBindings.setDescription('The number of times FRS has attempted to acquire a binding handle to the active directory.')
frsDSBindingsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSBindingsInError.setStatus('current')
if mibBuilder.loadTexts: frsDSBindingsInError.setDescription('The cumulative number of attempts to acquire a binding handle to the active directory that failed with some error status.')
frsDSObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSObjects.setStatus('current')
if mibBuilder.loadTexts: frsDSObjects.setDescription('The number of FRS configuration Objects retreived from the directory service.')
frsDSObjectsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSObjectsInError.setStatus('current')
if mibBuilder.loadTexts: frsDSObjectsInError.setDescription('The cumulative count of FRS configuration objects retreived from the directory service that were missing either the distinguished name, object GUID or the relative distinguished name attributes.')
frsDSPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSPolls.setStatus('current')
if mibBuilder.loadTexts: frsDSPolls.setDescription('The number of times FRS has polled the active directory for FRS configuration information on this computer.')
frsDSPollsWithChgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSPollsWithChgs.setStatus('current')
if mibBuilder.loadTexts: frsDSPollsWithChgs.setDescription('The number of times FRS has polled the active directory for FRS configuration information and configuration changes were found.')
frsDSPollsWithoutChgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSPollsWithoutChgs.setStatus('current')
if mibBuilder.loadTexts: frsDSPollsWithoutChgs.setDescription('The number of times FRS has polled the active directory for FRS configuration information and no configuration changes were found.')
frsDSSearches = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSSearches.setStatus('current')
if mibBuilder.loadTexts: frsDSSearches.setDescription('The number of times FRS has made a search request to the active directory.')
frsDSSearchesInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsDSSearchesInError.setStatus('current')
if mibBuilder.loadTexts: frsDSSearchesInError.setDescription('The cumulative number of times FRS has made a search request to the active directory and the request returned with an error condition.')
frsFetchBlocksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFetchBlocksReceived.setStatus('current')
if mibBuilder.loadTexts: frsFetchBlocksReceived.setDescription('The number of blocks of staging file data received from all inbound partners associated with this replica set member. The underlying transport may break a block into a smaller number of packets on the wire.')
frsFetchBlocksReceivedInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFetchBlocksReceivedInBytes.setStatus('current')
if mibBuilder.loadTexts: frsFetchBlocksReceivedInBytes.setDescription('The total number of bytes of staging file data received by this replica set member from all inbound partners.')
frsFetchBlocksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFetchBlocksSent.setStatus('current')
if mibBuilder.loadTexts: frsFetchBlocksSent.setDescription('The number of blocks of staging file data sent to any outbound partner associated with this replica set member. The underlying transport may break a block into a smaller number of packets on the wire.')
frsFetchBlocksSentInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFetchBlocksSentInBytes.setStatus('current')
if mibBuilder.loadTexts: frsFetchBlocksSentInBytes.setDescription('The total number of bytes of staging file data sent to the outbound partners of this replica set member.')
frsFetchRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFetchRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: frsFetchRequestsReceived.setDescription('The number of staging files received from all inbound partners associated with this replica set member.')
frsFetchRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFetchRequestsSent.setStatus('current')
if mibBuilder.loadTexts: frsFetchRequestsSent.setDescription('The number of staging files requested from any inbound partner associated with this replica set member.')
frsFilesInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFilesInstalled.setStatus('current')
if mibBuilder.loadTexts: frsFilesInstalled.setDescription('The number of file updates and deletes performed on this replica set member.')
frsFilesInstalledWithError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsFilesInstalledWithError.setStatus('current')
if mibBuilder.loadTexts: frsFilesInstalledWithError.setDescription('The cumulative number of file updates that were aborted because of some non-recoverable error.')
frsInboundChgOrdersDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsInboundChgOrdersDampened.setStatus('current')
if mibBuilder.loadTexts: frsInboundChgOrdersDampened.setDescription('The number of remotely originated file updates that were dampened because the update was already delivered by another member.')
frsJoinNotificationsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsJoinNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: frsJoinNotificationsReceived.setDescription('The number of partner join notifications received from all inbound partners associated with this replica set member.')
frsJoinNotificationsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsJoinNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: frsJoinNotificationsSent.setDescription('The number of inbound partner join requests or outbound partner ready-to-join notifications sent to all partners associated with this replica set member.')
frsJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsJoins.setStatus('current')
if mibBuilder.loadTexts: frsJoins.setDescription('The number of successful joins with any partner associated with this replica set member.')
frsKBOfStagingSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsKBOfStagingSpaceFree.setStatus('current')
if mibBuilder.loadTexts: frsKBOfStagingSpaceFree.setDescription('The amount of staging space (in Kilobyte units) currently available within the staging space limit. Note that there may not actually be this amount of free space left on the staging volume.')
frsKBOfStagingSpaceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsKBOfStagingSpaceInUse.setStatus('current')
if mibBuilder.loadTexts: frsKBOfStagingSpaceInUse.setDescription('The amount of staging space (in Kilobyte units) currently in use.')
frsLocalChgOrdersAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersAborted.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersAborted.setDescription('The number of locally originated file updates that were aborted. Most likely because a file was deleted before a change to it could be propagated so no stage file could be generated.')
frsLocalChgOrdersIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersIssued.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersIssued.setDescription('The number of locally originated file updates initiated on this replica set member.')
frsLocalChgOrdersMorphed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersMorphed.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersMorphed.setDescription('The number of locally originated file updates that encountered a name space collision on this replica set member. Most likely caused by the reanimation of a parent dir.')
frsLocalChgOrdersPropagated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersPropagated.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersPropagated.setDescription('The number of locally originated file updates that were propagated to the outbound log of this replica set member. The update remains pending in the outbound log until it has been delivered to all outbound partners.')
frsLocalChgOrdersRetired = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersRetired.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersRetired.setDescription('The number of locally originated file updates retired on this replica set member.')
frsLocalChgOrdersRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersRetried.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersRetried.setDescription('The number of locally originated file updates that were retried for any reason on this replica set member.')
frsLocalChgOrdersRetriedFetch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedFetch.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedFetch.setDescription('The number of locally originated file updates that were retried due to a stage file fetch problem on this replica set member.')
frsLocalChgOrdersRetriedGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedGenerate.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedGenerate.setDescription('The number of locally originated file updates that were retried due to a stage file generation problem on this replica set member. Most likely caused by a sharing conflict trying to access the target file.')
frsLocalChgOrdersRetriedInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedInstall.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedInstall.setDescription('The number of locally originated file updates that were retried due to a stage file install problem on this replica set member. Most likely caused by a sharing conflict trying to access the target file or directory.')
frsLocalChgOrdersRetriedRename = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedRename.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersRetriedRename.setDescription('The number of locally originated file updates that were retried due to a problem during the final target file rename or delete operation on this replica set member. Most likely caused by a sharing conflict trying to access the target file or directory.')
frsLocalChgOrdersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersSent.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersSent.setDescription('The number of locally originated file updates that have been sent to the outbound partners of this replica set member.')
frsLocalChgOrdersSentJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsLocalChgOrdersSentJoin.setStatus('current')
if mibBuilder.loadTexts: frsLocalChgOrdersSentJoin.setDescription('The number of locally originated file updates which were created by a partner induced version vector scan that have been sent to the outbound partners of this replica set member.')
frsOutboundChgOrdersDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsOutboundChgOrdersDampened.setStatus('current')
if mibBuilder.loadTexts: frsOutboundChgOrdersDampened.setDescription('The number of pending outbound file updates that were dampened because the outbound partner has already received it from another source.')
frsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: frsPacketsReceived.setDescription('The number of FRS data or control packets (RPC calls) received by FRS.')
frsPacketsReceivedInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsPacketsReceivedInBytes.setStatus('current')
if mibBuilder.loadTexts: frsPacketsReceivedInBytes.setDescription('The total number of FRS data and control bytes received by all replica sets on this computer.')
frsPacketsReceivedInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsPacketsReceivedInError.setStatus('current')
if mibBuilder.loadTexts: frsPacketsReceivedInError.setDescription('The cumulative number of FRS data or control packets received that were out of rev or otherwise malformed.')
frsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: frsPacketsSent.setDescription('The number of FRS data and control packets sent to all outbound partners associated with this replica set member.')
frsPacketsSentInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsPacketsSentInBytes.setStatus('current')
if mibBuilder.loadTexts: frsPacketsSentInBytes.setDescription('The total number of FRS data and control bytes sent by this replica set member to other members.')
frsPacketsSentInError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsPacketsSentInError.setStatus('current')
if mibBuilder.loadTexts: frsPacketsSentInError.setDescription('The cumulative number of FRS data or control packets not sent to an outbound partner because of some error condition.')
frsRemoteChgOrdersAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersAborted.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersAborted.setDescription('The number of remotely originated file updates that were aborted. Most likely because of an attempt to fetch a staging file from an inbound partner and the partner no longer has the file because it has been deleted.')
frsRemoteChgOrdersIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersIssued.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersIssued.setDescription('The number of remotely originated file updates initiated on this replica set member.')
frsRemoteChgOrdersMorphed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersMorphed.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersMorphed.setDescription('The number of remotely originated file updates that encountered a name space collision on this replica set member. Most likely caused by simultaneous create of a file or directory with the same name on more than one replica set member.')
frsRemoteChgOrdersPropagated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersPropagated.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersPropagated.setDescription('The number of remotely originated file updates that were propagated to the outbound log of this replica set member. The update remains pending in the outbound log until it has been delivered to all outbound partners.')
frsRemoteChgOrdersReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersReceived.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersReceived.setDescription('The number of remotely originated file updates that have been received by this replica set member. Note that depending on the replication topology it is possible for the same file update to be sent from multiple inbound partners. However, only one will send the actual file data.')
frsRemoteChgOrdersRetired = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersRetired.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersRetired.setDescription('The number of remotely originated file updates retired on this replica set member.')
frsRemoteChgOrdersRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersRetried.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersRetried.setDescription('The number of remotely originated file updates that were retried for any reason on this replica set member.')
frsRemoteChgOrdersRetriedFetch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedFetch.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedFetch.setDescription('The number of remotely originated file updates that were retried due to a stage file fetch problem on this replica set member.')
frsRemoteChgOrdersRetriedGenerat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedGenerat.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedGenerat.setDescription('The number of remotely originated file updates that were retried due to a stage file generation problem on this replica set member.')
frsRemoteChgOrdersRetriedInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedInstall.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedInstall.setDescription('The number of remotely originated file updates that were retried due to a stage file install problem on this replica set member. Most likely caused by a sharing conflict trying to access the target file or directory.')
frsRemoteChgOrdersRetriedRename = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedRename.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersRetriedRename.setDescription('The number of remotely originated file updates that were retried due to a problem during the final target file rename or delete operation on this replica set member. Most likely caused by a sharing conflict trying to access the target file or directory.')
frsRemoteChgOrdersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsRemoteChgOrdersSent.setStatus('current')
if mibBuilder.loadTexts: frsRemoteChgOrdersSent.setDescription('The number of remotely originated file updates that have been sent to the outbound partners of this replica set member.')
frsReplicaSetsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsReplicaSetsCreated.setStatus('current')
if mibBuilder.loadTexts: frsReplicaSetsCreated.setDescription('The cumulative number of replica sets to which this computer has been added as a member.')
frsReplicaSetsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsReplicaSetsDeleted.setStatus('current')
if mibBuilder.loadTexts: frsReplicaSetsDeleted.setDescription("The cumulative number of replica sets from which this computer's membership has been provisionally deleted, but could still be reanimated.")
frsReplicaSetsRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsReplicaSetsRemoved.setStatus('current')
if mibBuilder.loadTexts: frsReplicaSetsRemoved.setDescription("The cumulative number of replica sets from which this computer's membership has been permanently deleted.")
frsReplicaSetsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsReplicaSetsStarted.setStatus('current')
if mibBuilder.loadTexts: frsReplicaSetsStarted.setDescription('The number of replica sets for which processing has been started.')
frsStagingFilesFetched = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsStagingFilesFetched.setStatus('current')
if mibBuilder.loadTexts: frsStagingFilesFetched.setDescription('The number of staging files requested by this replica set member.')
frsStagingFilesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsStagingFilesGenerated.setStatus('current')
if mibBuilder.loadTexts: frsStagingFilesGenerated.setDescription('The number of staging files generated by this replica set member.')
frsStagingFilesGeneratedWithErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsStagingFilesGeneratedWithErr.setStatus('current')
if mibBuilder.loadTexts: frsStagingFilesGeneratedWithErr.setDescription('The cumulative number of staging files generated by this replica set member where an error was detected during generation.')
frsStagingFilesRegenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsStagingFilesRegenerated.setStatus('current')
if mibBuilder.loadTexts: frsStagingFilesRegenerated.setDescription('The number of staging files regenerated by this replica set member for a specific outbound partner request.')
frsThreadsExited = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsThreadsExited.setStatus('current')
if mibBuilder.loadTexts: frsThreadsExited.setDescription('The number of execution threads that have terminated.')
frsThreadsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsThreadsStarted.setStatus('current')
if mibBuilder.loadTexts: frsThreadsStarted.setDescription('The number of new execution threads started.')
frsUnjoins = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsUnjoins.setStatus('current')
if mibBuilder.loadTexts: frsUnjoins.setDescription('The number of unjoins with any partner associated with this replica set member.')
frsUsnReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsUsnReads.setStatus('current')
if mibBuilder.loadTexts: frsUsnReads.setDescription('The number of times FRS has initiated a read on the NTFRS change log. Each volume has its own change log.')
frsUsnRecordsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsUsnRecordsAccepted.setStatus('current')
if mibBuilder.loadTexts: frsUsnRecordsAccepted.setDescription('The number of NTFS change log records accepted by FRS for further processing.')
frsUsnRecordsExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsUsnRecordsExamined.setStatus('current')
if mibBuilder.loadTexts: frsUsnRecordsExamined.setDescription('The number of NTFS change log records examined by FRS.')
frsUsnRecordsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 22, 1, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsUsnRecordsRejected.setStatus('current')
if mibBuilder.loadTexts: frsUsnRecordsRejected.setDescription('The number of NTFS change log records skipped by FRS. Most likely because the change log record was for a file not part of any active replica set.')
ftpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23), )
if mibBuilder.loadTexts: ftpServiceTable.setStatus('current')
if mibBuilder.loadTexts: ftpServiceTable.setDescription('The FTP Service performance object consists of counters that show data about the Internet Information Services FTP service.')
ftpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1), ).setIndexNames((0, "INFORMANT-ADV", "ftpSvcInstance"))
if mibBuilder.loadTexts: ftpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: ftpServiceEntry.setDescription("Performance information for one particular instance of 'FTP Service' object.")
ftpSvcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcInstance.setStatus('current')
if mibBuilder.loadTexts: ftpSvcInstance.setDescription('Instance name.')
ftpSvcBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ftpSvcBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate that data bytes are received by the FTP service.')
ftpSvcBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ftpSvcBytesSentPerSec.setDescription('Bytes Sent/sec is the rate that data bytes are sent by the FTP service.')
ftpSvcBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ftpSvcBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Bytes Sent/sec and Bytes Received/sec. This is the total rate of bytes transferred by the FTP service.')
ftpSvcCurrentAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcCurrentAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ftpSvcCurrentAnonymousUsers.setDescription('Current Anonymous Users is the number of users who currently have an anonymous connection using the FTP service.')
ftpSvcCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: ftpSvcCurrentConnections.setDescription('Current Connections is the current number of connections established with the FTP service.')
ftpSvcCurrentNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcCurrentNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ftpSvcCurrentNonAnonymousUsers.setDescription('Current NonAnonymous Users is the number of users who currently have a non-anonymous connection using the FTP service.')
ftpSvcFTPServiceUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcFTPServiceUptime.setStatus('current')
if mibBuilder.loadTexts: ftpSvcFTPServiceUptime.setDescription('FTP Serive and FTP site uptime in seconds.')
ftpSvcMaximumAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcMaximumAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ftpSvcMaximumAnonymousUsers.setDescription('Maximum Anonymous Users is the maximum number of users who established concurrent anonymous connections using the FTP service (since service startup).')
ftpSvcMaximumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcMaximumConnections.setStatus('current')
if mibBuilder.loadTexts: ftpSvcMaximumConnections.setDescription('Maximum Connections is the maximum number of simultaneous connections established with the FTP service.')
ftpSvcMaximumNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcMaximumNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ftpSvcMaximumNonAnonymousUsers.setDescription('Maximum NonAnonymous Users is the maximum number of users who established concurrent non-anonymous connections using the FTP service (since service startup).')
ftpSvcTotalAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalAnonymousUsers.setDescription('Total Anonymous Users is the total number of users who established an anonymous connection with the FTP service (since service startup).')
ftpSvcTotalConnAttemptsAllInst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalConnAttemptsAllInst.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalConnAttemptsAllInst.setDescription('Total Connection Attempts is the number of connections that have been attempted using the FTP service (since service startup). This counter is for all instances listed.')
ftpSvcTotalFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalFilesReceived.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalFilesReceived.setDescription('Total Files Received is the total number of files received by the FTP service since service startup.')
ftpSvcTotalFilesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalFilesSent.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalFilesSent.setDescription('Total Files Sent is the total number of files sent by the FTP service since service startup.')
ftpSvcTotalFilesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalFilesTransferred.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalFilesTransferred.setDescription('Total Files Transferred is the sum of Files Sent and Files Received. This is the total number of files transferred by the FTP service since service startup.')
ftpSvcTotalLogonAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalLogonAttempts.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalLogonAttempts.setDescription('Total Logon Attempts is the number of logons that have been attempted using the FTP service (since service startup).')
ftpSvcTotalNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 23, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSvcTotalNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ftpSvcTotalNonAnonymousUsers.setDescription('Total NonAnonymous Users is the total number of users who established a non-anonymous connection with the FTP service (since service startup).')
gatewayServiceForNetWare = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24))
if mibBuilder.loadTexts: gatewayServiceForNetWare.setStatus('current')
if mibBuilder.loadTexts: gatewayServiceForNetWare.setDescription('The Gateway for NetWare Service performance object consists of counters that measure packet transmission rates and activity of the Gateway for NetWare service.')
nwBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: nwBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate of bytes coming in to the Redirector from the network. It includes all application data as well as network protocol information (such as packet headers).')
nwBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: nwBytesTotalPerSec.setDescription('Bytes Total/sec is the rate the Redirector is processing data bytes. This includes all application and file data in addition to protocol information such as packet headers.')
nwBytesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: nwBytesTransmittedPerSec.setDescription('Bytes Transmitted/sec is the rate at which bytes are leaving the Redirector to the network. It includes all application data as well as network protocol information (such as packet headers and the like).')
nwConnectNetWare2X = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectNetWare2X.setStatus('current')
if mibBuilder.loadTexts: nwConnectNetWare2X.setDescription('Connect NetWare 2.x counts connections to NetWare 2.x servers.')
nwConnectNetWare3X = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectNetWare3X.setStatus('current')
if mibBuilder.loadTexts: nwConnectNetWare3X.setDescription('Connect NetWare 3.x counts connections to NetWare 3.x servers.')
nwConnectNetWare4X = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectNetWare4X.setStatus('current')
if mibBuilder.loadTexts: nwConnectNetWare4X.setDescription('Connect NetWare 4.x counts connections to NetWare 4.x servers.')
nwFileDataOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileDataOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwFileDataOperationsPerSec.setDescription('File Data Operations/sec is the rate the Redirector is processing data operations. One operation includes (hopefully) many bytes. We say hopefully here because each operation has overhead. You can determine the efficiency of this path by dividing the Bytes/sec by this counter to determine the average number of bytes transferred/operation.')
nwFileReadOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileReadOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwFileReadOperationsPerSec.setDescription('File Read Operations/sec is the rate at which applications are asking the Redirector for data. Each call to a file system or similar Application Program Interface (API) call counts as one operation.')
nwFileWriteOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileWriteOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwFileWriteOperationsPerSec.setDescription('File Write Operations/sec is the rate at which applications are sending data to the Redirector. Each call to a file system or similar Application Program Interface (API) call counts as one operation.')
nwPacketBurstIOPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketBurstIOPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketBurstIOPerSec.setDescription('Packet Burst IO/sec is the sum of Packet Burst Read NCPs/sec and Packet Burst Write NCPs/sec.')
nwPacketBurstReadNCPCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketBurstReadNCPCountPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketBurstReadNCPCountPerSec.setDescription('Packet Burst Read NCP Count/sec is the rate of NetWare Core Protocol requests for Packet Burst Read. Packet Burst is a windowing protocol that improves performance.')
nwPacketBurstReadTimeoutsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketBurstReadTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketBurstReadTimeoutsPerSec.setDescription('Packet Burst Read Timeouts/sec is the rate the NetWare Service needs to retransmit a Burst Read Request because the NetWare server took too long to respond.')
nwPacketBurstWriteNCPCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketBurstWriteNCPCountPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketBurstWriteNCPCountPerSec.setDescription('Packet Burst Write NCP Count/sec is the rate of NetWare Core Protocol requests for Packet Burst Write. Packet Burst is a windowing protocol that improves performance.')
nwPacketBurstWriteTimeoutsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketBurstWriteTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketBurstWriteTimeoutsPerSec.setDescription('Packet Burst Write Timeouts/sec is the rate the NetWare Service needs to retransmit a Burst Write Request because the NetWare server took too long to respond.')
nwPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which the Redirector is receiving packets (also called SMBs or Server Message Blocks). Network transmissions are divided into packets. The average number of bytes received in a packet can be obtained by dividing Bytes Received/sec by this counter. Some packets received might not contain incoming data, for example an acknowledgment to a write made by the Redirector would count as an incoming packet.')
nwPacketsTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketsTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketsTransmittedPerSec.setDescription('Packets Transmitted/sec is the rate at which the Redirector is sending packets (also called SMBs or Server Message Blocks). Network transmissions are divided into packets. The average number of bytes transmitted in a packet can be obtained by dividing Bytes Transmitted/sec by this counter.')
nwPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwPacketsPerSec.setDescription('Packets/sec is the rate the Redirector is processing data packets. One packet includes (hopefully) many bytes. We say hopefully here because each packet has protocol overhead. You can determine the efficiency of this path by dividing the Bytes/sec by this counter to determine the average number of bytes transferred/packet. You can also divide this counter by Operations/sec to determine the average number of packets per operation, another measure of efficiency.')
nwReadOperationsRandomPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwReadOperationsRandomPerSec.setStatus('current')
if mibBuilder.loadTexts: nwReadOperationsRandomPerSec.setDescription('Read Operations Random/sec counts the rate at which, on a file-by-file basis, reads are made that are not sequential. If a read is made using a particular file handle, and then is followed by another read that is not immediately the contiguous next byte, this counter is incremented by one.')
nwReadPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwReadPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwReadPacketsPerSec.setDescription('Read Packets/sec is the rate at which read packets are being placed on the network. Each time a single packet is sent with a request to read data remotely, this counter is incremented by one.')
nwServerDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwServerDisconnects.setStatus('current')
if mibBuilder.loadTexts: nwServerDisconnects.setDescription('Server Disconnects counts the number of times a Server has disconnected your Redirector. See also Server Reconnects.')
nwServerReconnects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwServerReconnects.setStatus('current')
if mibBuilder.loadTexts: nwServerReconnects.setDescription('Server Reconnects counts the number of times your Redirector has had to reconnect to a server in order to complete a new active request. You can be disconnected by the Server if you remain inactive for too long. Locally even if all your remote files are closed, the Redirector will keep your connections intact for (nominally) ten minutes. Such inactive connections are called Dormant Connections. Reconnecting is expensive in time.')
nwServerSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwServerSessions.setStatus('current')
if mibBuilder.loadTexts: nwServerSessions.setDescription('Server Sessions counts the total number of security objects the Redirector has managed. For example, a logon to a server followed by a network access to the same server will establish one connection, but two sessions.')
nwWriteOperationsRandomPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwWriteOperationsRandomPerSec.setStatus('current')
if mibBuilder.loadTexts: nwWriteOperationsRandomPerSec.setDescription('Write Operations Random/sec is the rate at which, on a file-by-file basis, writes are made that are not sequential. If a write is made using a particular file handle, and then is followed by another write that is not immediately the next contiguous byte, this counter is incremented by one.')
nwWritePacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 24, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwWritePacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: nwWritePacketsPerSec.setDescription('Write Packets/sec is the rate at which writes are being sent to the network. Each time a single packet is sent with a request to write remote data, this counter is incremented by one.')
iasAccountingClientsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25), )
if mibBuilder.loadTexts: iasAccountingClientsTable.setStatus('current')
if mibBuilder.loadTexts: iasAccountingClientsTable.setDescription('The IAS Accounting Clients performance object is installed by the Internet Authentication Service (IAS). IAS uses the Remote Authentication Dial-In User Service (RADIUS) protocol to perform remote authentication. IAS performance objects report activity for servers or clients, including user authentication, authorization, and accounting (usage).')
iasAccountingClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1), ).setIndexNames((0, "INFORMANT-ADV", "iccInstance"))
if mibBuilder.loadTexts: iasAccountingClientsEntry.setStatus('current')
if mibBuilder.loadTexts: iasAccountingClientsEntry.setDescription("Performance information for one particular instance of 'IAS Accounting Clients' object.")
iccInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccInstance.setStatus('current')
if mibBuilder.loadTexts: iccInstance.setDescription('Instance name.')
iccAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: iccAccountingRequests.setDescription('Shows the number of packets received from this client on the accounting port.')
iccAccountingRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iccAccountingRequestsPerSec.setDescription('Shows the rate, in seconds, at which packets were received from this client on the accounting port.')
iccAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: iccAccountingResponses.setDescription('Shows the number of RADIUS Accounting-Response packets sent to this client.')
iccAccountingResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: iccAccountingResponsesPerSec.setDescription('Shows the rate in seconds at which duplicate RADIUS Accounting-Request packets were received from this client.')
iccBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: iccBadAuthenticators.setDescription('Shows the number of packets that contained invalid Signature attributes.')
iccBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: iccBadAuthenticatorsPerSec.setDescription('Shows the rate, in seconds, at which packets that contained invalid Signature attributes were received.')
iccDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: iccDroppedPackets.setDescription('Shows the number of incoming packets silently discarded for a reason other than being malformed, bad authenticators, or unknown types.')
iccDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iccDroppedPacketsPerSec.setDescription('Shows the rate in seconds at which incoming packets were silently discarded for a reason other than being malformed, bad authenticators, or unknown types.')
iccDuplicateAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccDuplicateAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: iccDuplicateAccountingRequests.setDescription('Shows the number of duplicate RADIUS Accounting-Request packets received from this client.')
iccDuplicateAccountingRqstPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccDuplicateAccountingRqstPerSec.setStatus('current')
if mibBuilder.loadTexts: iccDuplicateAccountingRqstPerSec.setDescription('Shows the rate, in seconds, at which duplicate RADIUS Accounting-Request packets were received from this client.')
iccMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: iccMalformedPackets.setDescription('Shows the number of malformed packets received. Bad authenticators or unknown types are not included.')
iccMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iccMalformedPacketsPerSec.setDescription('Shows the rate, in seconds, at which malformed packets were received.')
iccNoRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccNoRecord.setStatus('current')
if mibBuilder.loadTexts: iccNoRecord.setDescription('Shows the number of RADIUS Accounting-Request packets that were received and responded to but not recorded.')
iccNoRecordPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccNoRecordPerSec.setStatus('current')
if mibBuilder.loadTexts: iccNoRecordPerSec.setDescription('Shows the rate, in seconds, at which RADIUS Accounting-Request packets were received and responded to but not recorded.')
iccPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: iccPacketsReceived.setDescription('Shows the number of packets received.')
iccPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: iccPacketsReceivedPerSec.setDescription('Shows the rate, in seconds, at which packets were received.')
iccPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccPacketsSent.setStatus('current')
if mibBuilder.loadTexts: iccPacketsSent.setDescription('Shows the number of packets sent.')
iccPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: iccPacketsSentPerSec.setDescription('Shows the rate, in seconds, at which packets were sent.')
iccUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccUnknownType.setStatus('current')
if mibBuilder.loadTexts: iccUnknownType.setDescription('Shows the number of packets of unknown type that were received. An unknown type is a RADIUS packet that contains an unrecognized entry in the Code field, used to identify the packet type. Consequently IAS does not support packets of unknown type.')
iccUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 25, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iccUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: iccUnknownTypePerSec.setDescription('Shows the rate, in seconds, at which packets of unknown type were received.')
iasAccountingProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26))
icpAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: icpAccountingRequests.setDescription('The number of RADIUS Accounting-Request packets received on the accounting port.')
icpAccountingRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: icpAccountingRequestsPerSec.setDescription('The average number of RADIUS Accounting-Request packets sent per second to the accounting port.')
icpAccountingResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: icpAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets received on the accounting port.')
icpAccountingResponsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: icpAccountingResponsesPerSec.setDescription('The average number of RADIUS Accounting-Response packets received per second on the accounting port.')
icpBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: icpBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
icpBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: icpBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
icpDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: icpDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
icpDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: icpDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
icpInvalidAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpInvalidAddresses.setStatus('current')
if mibBuilder.loadTexts: icpInvalidAddresses.setDescription('The number of packets received from unknown addresses.')
icpInvalidAddressesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpInvalidAddressesPerSec.setStatus('current')
if mibBuilder.loadTexts: icpInvalidAddressesPerSec.setDescription('The average number of packets per second received from unknown addresses.')
icpMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: icpMalformedPackets.setDescription('The number of packets containing malformed data received.')
icpMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: icpMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
icpPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: icpPacketsReceived.setDescription('The number of packets received.')
icpPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: icpPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
icpPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpPendingRequests.setStatus('current')
if mibBuilder.loadTexts: icpPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
icpRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: icpRequestTimeouts.setDescription('The number of request timeouts to this server.')
icpRequestTimeoutsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: icpRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
icpRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpRetransmissions.setStatus('current')
if mibBuilder.loadTexts: icpRetransmissions.setDescription('The number of requests retransmitted to this server.')
icpRetransmissionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: icpRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
icpUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpUnknownType.setStatus('current')
if mibBuilder.loadTexts: icpUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
icpUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 26, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icpUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: icpUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
iasAccountingServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27))
if mibBuilder.loadTexts: iasAccountingServer.setStatus('current')
if mibBuilder.loadTexts: iasAccountingServer.setDescription('The IAS Accounting Server performance object is installed by the IAS. IAS uses the RADIUS protocol to perform remote authentication. IAS performance objects report activity for servers or clients, including user authentication, authorization, and accounting (usage).')
icsAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: icsAccountingRequests.setDescription('The number of packets received from this client on the accounting port.')
icsAccountingRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: icsAccountingRequestsPerSec.setDescription('The number of packets per second received from this client on the accounting port.')
icsAccountingResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: icsAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets sent to this client.')
icsAccountingResponsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: icsAccountingResponsesPerSec.setDescription('The number of RADIUS Accounting-Response packets per second sent to this client.')
icsBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: icsBadAuthenticators.setDescription('The number of packets which contained invalid Signature attributes.')
icsBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: icsBadAuthenticatorsPerSec.setDescription('The number of packets per second which contained invalid Signature attributes.')
icsDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: icsDroppedPackets.setDescription('The number of incoming packets silently discarded for a reason other than malformed, bad authenticators, or unknown types.')
icsDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: icsDroppedPacketsPerSec.setDescription('The number of incoming packets per second silently discarded for a reason other than malformed, bad authenticators, or unknown types.')
icsDuplicateAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsDuplicateAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: icsDuplicateAccountingRequests.setDescription('The number of duplicate RADIUS Accounting-Request packets received from this client.')
icsDuplicateAccountingRqstPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsDuplicateAccountingRqstPerSec.setStatus('current')
if mibBuilder.loadTexts: icsDuplicateAccountingRqstPerSec.setDescription('The number of duplicate RADIUS Accounting-Request packets per second received from this client.')
icsInvalidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsInvalidRequests.setStatus('current')
if mibBuilder.loadTexts: icsInvalidRequests.setDescription('The number of packets received from unknown addresses.')
icsInvalidRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsInvalidRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: icsInvalidRequestsPerSec.setDescription('The number of packets received per second from unknown addresses.')
icsMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: icsMalformedPackets.setDescription('The number of malformed packets received. Bad authenticators or unknown types are not included.')
icsMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: icsMalformedPacketsPerSec.setDescription('The number of malformed packets per second received. Bad authenticators or unknown types are not included.')
icsNoRecord = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsNoRecord.setStatus('current')
if mibBuilder.loadTexts: icsNoRecord.setDescription('The number of RADIUS Accounting-Request packets which were received and responded to but not recorded.')
icsNoRecordPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsNoRecordPerSec.setStatus('current')
if mibBuilder.loadTexts: icsNoRecordPerSec.setDescription('The number of RADIUS Accounting-Request packets per second which were received and responded to but not recorded.')
icsPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: icsPacketsReceived.setDescription('The number of packets received.')
icsPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: icsPacketsReceivedPerSec.setDescription('The number of packets per second received.')
icsPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: icsPacketsSent.setDescription('The number of packets sent.')
icsPacketsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: icsPacketsSentPerSec.setDescription('The number of packets sent per second.')
icsServerResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsServerResetTime.setStatus('current')
if mibBuilder.loadTexts: icsServerResetTime.setDescription('The time elapsed (in hundredths of a second) since the server configuration was reset.')
icsServerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsServerUpTime.setStatus('current')
if mibBuilder.loadTexts: icsServerUpTime.setDescription('The time elapsed (in hundredths of a second) since the server process was started.')
icsUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsUnknownType.setStatus('current')
if mibBuilder.loadTexts: icsUnknownType.setDescription('The number of packets of unknown type which were received.')
icsUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 27, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icsUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: icsUnknownTypePerSec.setDescription('The number of packets per second of unknown type which were received.')
iasAuthenticationClientsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28), )
if mibBuilder.loadTexts: iasAuthenticationClientsTable.setStatus('current')
if mibBuilder.loadTexts: iasAuthenticationClientsTable.setDescription('The IAS Authentication Clients performance object is installed by IAS. IAS uses the RADIUS protocol to perform remote authentication. IAS performance objects report activity for servers or clients, including user authentication, authorization, and accounting (usage).')
iasAuthenticationClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1), ).setIndexNames((0, "INFORMANT-ADV", "iucInstance"))
if mibBuilder.loadTexts: iasAuthenticationClientsEntry.setStatus('current')
if mibBuilder.loadTexts: iasAuthenticationClientsEntry.setDescription("Performance information for one particular instance of 'IAS Authentication Clients' object.")
iucInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucInstance.setStatus('current')
if mibBuilder.loadTexts: iucInstance.setDescription('Instance name.')
iucAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: iucAccessAccepts.setDescription('Access-Accepts')
iucAccessAcceptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucAccessAcceptsPerSec.setDescription('Access-Accepts / sec.')
iucAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: iucAccessChallenges.setDescription('Access-Challenges')
iucAccessChallengesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: iucAccessChallengesPerSec.setDescription('Access-Challenges / sec.')
iucAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessRejects.setStatus('current')
if mibBuilder.loadTexts: iucAccessRejects.setDescription('Access-Rejects')
iucAccessRejectsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucAccessRejectsPerSec.setDescription('Access-Rejects / sec.')
iucAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessRequests.setStatus('current')
if mibBuilder.loadTexts: iucAccessRequests.setDescription('Access-Requests')
iucAccessRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucAccessRequestsPerSec.setDescription('Access-Requests / sec.')
iucBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: iucBadAuthenticators.setDescription('Bad Authenticators')
iucBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucBadAuthenticatorsPerSec.setDescription('Bad Authenticators / sec.')
iucDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: iucDroppedPackets.setDescription('Dropped Packets')
iucDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucDroppedPacketsPerSec.setDescription('Dropped Packets / sec.')
iucDuplicateAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucDuplicateAccessRequests.setStatus('current')
if mibBuilder.loadTexts: iucDuplicateAccessRequests.setDescription('Duplicate Access-Requests')
iucDuplicateAccessRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucDuplicateAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucDuplicateAccessRequestsPerSec.setDescription('Duplicate Access-Requests / sec.')
iucMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: iucMalformedPackets.setDescription('Malformed Packets')
iucMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iucMalformedPacketsPerSec.setDescription('Malformed Packets / sec.')
iucPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: iucPacketsReceived.setDescription('Packets Received')
iucPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: iucPacketsReceivedPerSec.setDescription('Packets Received / sec.')
iucPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucPacketsSent.setStatus('current')
if mibBuilder.loadTexts: iucPacketsSent.setDescription('Packets Sent')
iucPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: iucPacketsSentPerSec.setDescription('Packets Sent / sec.')
iucUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucUnknownType.setStatus('current')
if mibBuilder.loadTexts: iucUnknownType.setDescription('Unknown Type')
iucUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 28, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iucUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: iucUnknownTypePerSec.setDescription('Unknown Type / sec.')
iasAuthenticationProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29))
iupAccessAccepts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: iupAccessAccepts.setDescription('The number of RADIUS Access-Accept packets received from this server.')
iupAccessAcceptsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupAccessAcceptsPerSec.setDescription('The average number of RADIUS Access-Accept packets per second received from this server.')
iupAccessChallenges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: iupAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets received from this server.')
iupAccessChallengesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: iupAccessChallengesPerSec.setDescription('The average number of RADIUS Access-Challenge packets per second received from this server.')
iupAccessRejects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessRejects.setStatus('current')
if mibBuilder.loadTexts: iupAccessRejects.setDescription('The number of RADIUS Access-Reject packets received from this server.')
iupAccessRejectsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupAccessRejectsPerSec.setDescription('The average number of RADIUS Access-Reject packets per second received from this server.')
iupAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessRequests.setStatus('current')
if mibBuilder.loadTexts: iupAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server.')
iupAccessRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupAccessRequestsPerSec.setDescription('The average number of RADIUS Access-Request packets per second sent to this server.')
iupBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: iupBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
iupBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
iupDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: iupDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
iupDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
iupInvalidAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupInvalidAddresses.setStatus('current')
if mibBuilder.loadTexts: iupInvalidAddresses.setDescription('The number of packets received from unknown addresses.')
iupInvalidAddressesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupInvalidAddressesPerSec.setStatus('current')
if mibBuilder.loadTexts: iupInvalidAddressesPerSec.setDescription('The average number of packets per second received from unknown addresses.')
iupMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: iupMalformedPackets.setDescription('The number of packets containing malformed data received.')
iupMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
iupPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: iupPacketsReceived.setDescription('The number of packets received.')
iupPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: iupPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
iupPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupPendingRequests.setStatus('current')
if mibBuilder.loadTexts: iupPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
iupRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: iupRequestTimeouts.setDescription('The number of request timeouts to this server.')
iupRequestTimeoutsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
iupRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupRetransmissions.setStatus('current')
if mibBuilder.loadTexts: iupRetransmissions.setDescription('The number of requests retransmitted to this server.')
iupRetransmissionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: iupRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
iupUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupUnknownType.setStatus('current')
if mibBuilder.loadTexts: iupUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
iupUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 29, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iupUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: iupUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
iasAuthenticationServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30))
if mibBuilder.loadTexts: iasAuthenticationServer.setStatus('current')
if mibBuilder.loadTexts: iasAuthenticationServer.setDescription('The IAS Authentication Server performance object is installed by IAS. IAS uses the RADIUS protocol to perform remote authentication. IAS performance objects report activity for servers or clients, including user authentication, authorization, and accounting (usage).')
iusAccessAccepts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: iusAccessAccepts.setDescription('The number of RADIUS Access-Accept packets sent to this client.')
iusAccessAcceptsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusAccessAcceptsPerSec.setDescription('The number of RADIUS Access-Accept packets per second sent to this client.')
iusAccessChallenges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: iusAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets sent to this client.')
iusAccessChallengesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: iusAccessChallengesPerSec.setDescription('The number of RADIUS Access-Challenge packets per second sent to this client.')
iusAccessRejects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessRejects.setStatus('current')
if mibBuilder.loadTexts: iusAccessRejects.setDescription('The number of RADIUS Access-Reject packets sent to this client.')
iusAccessRejectsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusAccessRejectsPerSec.setDescription('The number of RADIUS Access-Reject packets per second sent to this client.')
iusAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessRequests.setStatus('current')
if mibBuilder.loadTexts: iusAccessRequests.setDescription('The number of packets received on the authentication port from this client.')
iusAccessRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusAccessRequestsPerSec.setDescription('The number of packets per second received on the authentication port from this client.')
iusBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: iusBadAuthenticators.setDescription('The number of packets which contained invalid Signature attributes.')
iusBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusBadAuthenticatorsPerSec.setDescription('The number of packets per second which contained invalid Signature attributes.')
iusDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: iusDroppedPackets.setDescription('The number of incoming packets silently discarded for a reason other than malformed, bad authenticators, or unknown types.')
iusDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusDroppedPacketsPerSec.setDescription('The number of incoming packets per second silently discarded for a reason other than malformed, bad authenticators, or unknown types.')
iusDuplicateAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusDuplicateAccessRequests.setStatus('current')
if mibBuilder.loadTexts: iusDuplicateAccessRequests.setDescription('The number of duplicate RADIUS Access-Request packets received from this client.')
iusDuplicateAccessRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusDuplicateAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusDuplicateAccessRequestsPerSec.setDescription('The number of duplicate RADIUS Access-Request packets per second received from this client.')
iusInvalidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusInvalidRequests.setStatus('current')
if mibBuilder.loadTexts: iusInvalidRequests.setDescription('The number of packets received from unknown addresses.')
iusInvalidRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusInvalidRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusInvalidRequestsPerSec.setDescription('The number of packets received per second from unknown addresses.')
iusMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: iusMalformedPackets.setDescription('The number of malformed packets received. Bad authenticators or unknown types are not included.')
iusMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: iusMalformedPacketsPerSec.setDescription('The number of malformed packets per second received. Bad authenticators or unknown types are not included.')
iusPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: iusPacketsReceived.setDescription('The number of packets received.')
iusPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: iusPacketsReceivedPerSec.setDescription('The number of packets per second received.')
iusPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusPacketsSent.setStatus('current')
if mibBuilder.loadTexts: iusPacketsSent.setDescription('The number of packets sent.')
iusPacketsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: iusPacketsSentPerSec.setDescription('The number of packets sent per second.')
iusServerResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusServerResetTime.setStatus('current')
if mibBuilder.loadTexts: iusServerResetTime.setDescription('The time elapsed (in hundredths of a second) since the server configuration was reset.')
iusServerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusServerUpTime.setStatus('current')
if mibBuilder.loadTexts: iusServerUpTime.setDescription('The time elapsed (in hundredths of a second) since the server process was started.')
iusUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusUnknownType.setStatus('current')
if mibBuilder.loadTexts: iusUnknownType.setDescription('The number of packets of unknown type which were received.')
iusUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 30, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iusUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: iusUnknownTypePerSec.setDescription('The number of packets per second of unknown type which were received.')
iasRemoteAccountingServersTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31), )
if mibBuilder.loadTexts: iasRemoteAccountingServersTable.setStatus('current')
if mibBuilder.loadTexts: iasRemoteAccountingServersTable.setDescription("A table containing performance information for instances of 'IAS Remote Accounting Servers' objects.")
iasRemoteAccountingServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1), ).setIndexNames((0, "INFORMANT-ADV", "ircsInstance"))
if mibBuilder.loadTexts: iasRemoteAccountingServersEntry.setStatus('current')
if mibBuilder.loadTexts: iasRemoteAccountingServersEntry.setDescription("Performance information for one particular instance of 'IAS Remote Accounting Servers' object.")
ircsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsInstance.setStatus('current')
if mibBuilder.loadTexts: ircsInstance.setDescription('Instance name.')
ircsAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: ircsAccountingRequests.setDescription('The number of RADIUS Accounting-Request packets received on the accounting port.')
ircsAccountingRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsAccountingRequestsPerSec.setDescription('The average number of RADIUS Accounting-Requests received per second on the accounting port.')
ircsAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: ircsAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets sent from this IAS server.')
ircsAccountingResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsAccountingResponsesPerSec.setDescription('The average number of RADIUS Accounting-Responses sent per second.')
ircsBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: ircsBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
ircsBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
ircsDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: ircsDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
ircsDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
ircsLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsLastRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: ircsLastRoundTripTime.setDescription('The interval (in hundredths of a second) between the most recent request from a remote IAS server and its response.')
ircsMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: ircsMalformedPackets.setDescription('The number of packets containing malformed data received.')
ircsMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
ircsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: ircsPacketsReceived.setDescription('The number of packets received.')
ircsPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
ircsPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsPendingRequests.setStatus('current')
if mibBuilder.loadTexts: ircsPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
ircsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsPortNumber.setStatus('current')
if mibBuilder.loadTexts: ircsPortNumber.setDescription('The UDP port the proxy is using to send requests to this server.')
ircsRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: ircsRequestTimeouts.setDescription('The number of request timeouts to this server.')
ircsRequestTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
ircsRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsRetransmissions.setStatus('current')
if mibBuilder.loadTexts: ircsRetransmissions.setDescription('The number of requests retransmitted to this server.')
ircsRetransmissionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ircsRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
ircsUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsUnknownType.setStatus('current')
if mibBuilder.loadTexts: ircsUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
ircsUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 31, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ircsUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: ircsUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second. ')
iasRemoteAuthenticationSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32), )
if mibBuilder.loadTexts: iasRemoteAuthenticationSrvrTable.setStatus('current')
if mibBuilder.loadTexts: iasRemoteAuthenticationSrvrTable.setDescription("A table containing performance information for instances of 'IAS Remote Authentication Servers' objects.")
iasRemoteAuthenticationSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1), ).setIndexNames((0, "INFORMANT-ADV", "irusInstance"))
if mibBuilder.loadTexts: iasRemoteAuthenticationSrvrEntry.setStatus('current')
if mibBuilder.loadTexts: iasRemoteAuthenticationSrvrEntry.setDescription("Performance information for one particular instance of 'IAS Remote Authentication Servers' object.")
irusInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusInstance.setStatus('current')
if mibBuilder.loadTexts: irusInstance.setDescription('Instance name.')
irusAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: irusAccessAccepts.setDescription('The number of RADIUS Access-Accept packets sent.')
irusAccessAcceptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusAccessAcceptsPerSec.setDescription('The average number of RADIUS Access-Accept packets per second sent.')
irusAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: irusAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets sent.')
irusAccessChallengesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: irusAccessChallengesPerSec.setDescription('The average number of RADIUS Access-Challenge packets per second sent.')
irusAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessRejects.setStatus('current')
if mibBuilder.loadTexts: irusAccessRejects.setDescription('The number of RADIUS Access-Reject packets sent to this client.')
irusAccessRejectsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusAccessRejectsPerSec.setDescription('The average number of RADIUS Access-Reject packets per second sent.')
irusAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessRequests.setStatus('current')
if mibBuilder.loadTexts: irusAccessRequests.setDescription('The number of packets received on the authentication port.')
irusAccessRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusAccessRequestsPerSec.setDescription('The average number of packets per second received on the authentication port.')
irusBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: irusBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
irusBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
irusDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: irusDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
irusDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
irusLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusLastRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: irusLastRoundTripTime.setDescription('The interval (in hundredths of a second) between the most recent request from a remote IAS server and its response.')
irusMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: irusMalformedPackets.setDescription('The number of packets containing malformed data received.')
irusMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
irusPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: irusPacketsReceived.setDescription('The number of packets received.')
irusPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: irusPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
irusPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusPendingRequests.setStatus('current')
if mibBuilder.loadTexts: irusPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
irusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusPortNumber.setStatus('current')
if mibBuilder.loadTexts: irusPortNumber.setDescription('The UDP port the proxy is using to send requests to this server.')
irusRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: irusRequestTimeouts.setDescription('The number of request timeouts to this server.')
irusRequestTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
irusRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusRetransmissions.setStatus('current')
if mibBuilder.loadTexts: irusRetransmissions.setDescription('The number of requests retransmitted to this server.')
irusRetransmissionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: irusRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
irusUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusUnknownType.setStatus('current')
if mibBuilder.loadTexts: irusUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
irusUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 32, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irusUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: irusUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second. ')
icmpV4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33))
if mibBuilder.loadTexts: icmpV4.setStatus('current')
if mibBuilder.loadTexts: icmpV4.setDescription('The ICMP performance object consists of counters that measure the rates at which Internet Control Message Protocol (ICMP) messages are sent and received by using the ICMP protocol. It also includes counters that monitor ICMP protocol errors.')
icmpV4MessagesOutboundErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4MessagesOutboundErrors.setStatus('current')
if mibBuilder.loadTexts: icmpV4MessagesOutboundErrors.setDescription('Messages Outbound Errors is the number of ICMP messages that were not send due to problems within ICMP, such as lack of buffers. This value does not include errors discovered outside the ICMP layer, such as those recording the failure of IP to route the resultant datagram. In some implementations, none of the error types are included in the value of this counter.')
icmpV4MessagesReceivedErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4MessagesReceivedErrors.setStatus('current')
if mibBuilder.loadTexts: icmpV4MessagesReceivedErrors.setDescription('Messages Received Errors is the number of ICMP messages that the entity received but had errors, such as bad ICMP checksums, bad length, etc.')
icmpV4MessagesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4MessagesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4MessagesReceivedPerSec.setDescription('Messages Received/sec is the rate, in incidents per second at which ICMP messages were received. The rate includes messages received in error.')
icmpV4MessagesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4MessagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4MessagesSentPerSec.setDescription('Messages Sent/sec is the rate, in incidents per second, at which the server attempted to send. The rate includes those messages sent in error.')
icmpV4MessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4MessagesPerSec.setDescription('Messages/sec is the total rate, in incidents per second, at which ICMP messages were sent and received by the entity. The rate includes messages received or sent in error.')
icmpV4RcvdAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdAddressMask.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdAddressMask.setDescription('Received Address Mask is the number of ICMP Address Mask Request messages received.')
icmpV4RcvdAddressMaskReply = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdAddressMaskReply.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdAddressMaskReply.setDescription('Received Address Mask Reply is the number of ICMP Address Mask Reply messages received.')
icmpV4RcvdDestUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdDestUnreachable.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdDestUnreachable.setDescription('Received Destination Unreachable is the number of ICMP Destination Unreachable messages received.')
icmpV4RcvdEchoReplyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdEchoReplyPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdEchoReplyPerSec.setDescription('Received Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were received.')
icmpV4RcvdEchoPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdEchoPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdEchoPerSec.setDescription('Received Echo/sec is the rate, in incidents per second, at which ICMP Echo messages were received.')
icmpV4RcvdParameterProblem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdParameterProblem.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdParameterProblem.setDescription('Received Parameter Problem is the number of ICMP Parameter Problem messages received.')
icmpV4RcvdRedirectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdRedirectPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdRedirectPerSec.setDescription('Received Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were received.')
icmpV4RcvdSourceQuench = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdSourceQuench.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdSourceQuench.setDescription('Received Source Quench is the number of ICMP Source Quench messages received.')
icmpV4RcvdTimeExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdTimeExceeded.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdTimeExceeded.setDescription('Received Time Exceeded is the number of ICMP Time Exceeded messages received.')
icmpV4RcvdTimestampReplyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdTimestampReplyPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdTimestampReplyPerSec.setDescription('Received Timestamp Reply/sec is the rate of ICMP Timestamp Reply messages received.')
icmpV4RcvdTimestampPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4RcvdTimestampPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4RcvdTimestampPerSec.setDescription('Received Timestamp/sec is the rate, in incidents per second at which ICMP Timestamp Request messages were received.')
icmpV4SentAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentAddressMask.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentAddressMask.setDescription('Sent Address Mask is the number of ICMP Address Mask Request messages sent.')
icmpV4SentAddressMaskReply = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentAddressMaskReply.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentAddressMaskReply.setDescription('Sent Address Mask Reply is the number of ICMP Address Mask Reply messages sent.')
icmpV4SentDestinationUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentDestinationUnreachable.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentDestinationUnreachable.setDescription('Sent Destination Unreachable is the number of ICMP Destination Unreachable messages sent.')
icmpV4SentEchoReplyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentEchoReplyPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentEchoReplyPerSec.setDescription('Sent Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were sent.')
icmpV4SentEchoPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentEchoPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentEchoPerSec.setDescription('Sent Echo/sec is the rate of ICMP Echo messages sent.')
icmpV4SentParameterProblem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentParameterProblem.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentParameterProblem.setDescription('Sent Parameter Problem is the number of ICMP Parameter Problem messages sent.')
icmpV4SentRedirectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentRedirectPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentRedirectPerSec.setDescription('Sent Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were sent.')
icmpV4SentSourceQuench = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentSourceQuench.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentSourceQuench.setDescription('Sent Source Quench is the number of ICMP Source Quench messages sent.')
icmpV4SentTimeExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentTimeExceeded.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentTimeExceeded.setDescription('Sent Time Exceeded is the number of ICMP Time Exceeded messages sent.')
icmpV4SentTimestampReplyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentTimestampReplyPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentTimestampReplyPerSec.setDescription('Sent Timestamp Reply/sec is the rate, in incidents per second, at which ICMP Timestamp Reply messages were sent.')
icmpV4SentTimestampPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 33, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV4SentTimestampPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV4SentTimestampPerSec.setDescription('Sent Timestamp/sec is the rate, in incidents per second, at which ICMP Timestamp Request messages were sent.')
icmpV6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34))
icmpV6MessagesOutboundErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6MessagesOutboundErrors.setStatus('current')
if mibBuilder.loadTexts: icmpV6MessagesOutboundErrors.setDescription('Messages Outbound Errors is the number of ICMP messages that were not send due to problems within ICMP, such as lack of buffers. This value does not include errors discovered outside the ICMP layer, such as those recording the failure of IP to route the resultant datagram. In some implementations, none of the error types are included in the value of this counter.')
icmpV6MessagesReceivedErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6MessagesReceivedErrors.setStatus('current')
if mibBuilder.loadTexts: icmpV6MessagesReceivedErrors.setDescription('Messages Received Errors is the number of ICMP messages that the entity received but had errors, such as bad ICMP checksums, bad length, etc.')
icmpV6MessagesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6MessagesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6MessagesReceivedPerSec.setDescription('Messages Received/sec is the rate, in incidents per second at which ICMP messages were received. The rate includes messages received in error.')
icmpV6MessagesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6MessagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6MessagesSentPerSec.setDescription('Messages Sent/sec is the rate, in incidents per second, at which the server attempted to send. The rate includes those messages sent in error.')
icmpV6MessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6MessagesPerSec.setDescription('Messages/sec is the total rate, in incidents per second, at which ICMP messages were sent and received by the entity. The rate includes messages received or sent in error.')
icmpV6ReceivedDestUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedDestUnreachable.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedDestUnreachable.setDescription('Received Destination Unreachable is the number of ICMP Destination Unreachable messages received.')
icmpV6ReceivedEchoReplyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedEchoReplyPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedEchoReplyPerSec.setDescription('Received Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were received.')
icmpV6ReceivedEchoPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedEchoPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedEchoPerSec.setDescription('Received Echo/sec is the rate, in incidents per second, at which ICMP Echo messages were received.')
icmpV6ReceivedMembershipQuery = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedMembershipQuery.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedMembershipQuery.setDescription('Received Membership Query is the number of packets received thatquery their membership to a group.')
icmpV6ReceivedMembershipReduct = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedMembershipReduct.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedMembershipReduct.setDescription('Received Membership Reduction is the number of packets received thatcancelled their membership to a group.')
icmpV6ReceivedMembershipReport = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedMembershipReport.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedMembershipReport.setDescription('Received Membership Report is the number of packets received thatreport their membership to a group.')
icmpV6ReceivedNeighborAdvert = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedNeighborAdvert.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedNeighborAdvert.setDescription('Received Neighbor Advert is the number of packets received thatadvert a neighbor.')
icmpV6ReceivedNeighborSolicit = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedNeighborSolicit.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedNeighborSolicit.setDescription('Received Neighbor Solicit is the number of packets received thatsolicit a neighbor.')
icmpV6ReceivedPacketTooBig = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedPacketTooBig.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedPacketTooBig.setDescription('Received Packet Too Big is the number of received packets thatare larger than anticipated.')
icmpV6ReceivedParameterProblem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedParameterProblem.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedParameterProblem.setDescription('Received Parameter Problem is the number of ICMP Parameter Problem messages received.')
icmpV6ReceivedRedirectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedRedirectPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedRedirectPerSec.setDescription('Received Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were received.')
icmpV6ReceivedRouterAdvert = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedRouterAdvert.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedRouterAdvert.setDescription('Received Router Advert is the number of packets received thatadvert the router.')
icmpV6ReceivedRouterSolicit = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedRouterSolicit.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedRouterSolicit.setDescription('Received Router Solicit is the number of packets received thatsolicit the router.')
icmpV6ReceivedTimeExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6ReceivedTimeExceeded.setStatus('current')
if mibBuilder.loadTexts: icmpV6ReceivedTimeExceeded.setDescription('Received Time Exceeded is the number of ICMP Time Exceeded messages received.')
icmpV6SentDestinationUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentDestinationUnreachable.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentDestinationUnreachable.setDescription('Sent Destination Unreachable is the number of ICMP Destination Unreachable messages sent.')
icmpV6SentEchoReplyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentEchoReplyPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentEchoReplyPerSec.setDescription('Sent Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were sent.')
icmpV6SentEchoPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentEchoPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentEchoPerSec.setDescription('Sent Echo/sec is the rate of ICMP Echo messages sent.')
icmpV6SentMembershipQuery = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentMembershipQuery.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentMembershipQuery.setDescription('Sent Membership Query is the number of packets sent thatquery their membership to a group.')
icmpV6SentMembershipReduction = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentMembershipReduction.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentMembershipReduction.setDescription('Sent Membership Reduction is the number of packets sent thatcancelled their membership to a group.')
icmpV6SentMembershipReport = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentMembershipReport.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentMembershipReport.setDescription('Sent Membership Report is the number of packets sent thatreport their membership to a group.')
icmpV6SentNeighborAdvert = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentNeighborAdvert.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentNeighborAdvert.setDescription('Sent Neighbor Advert is the number of packets sent thatadvert a neighbor.')
icmpV6SentNeighborSolicit = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentNeighborSolicit.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentNeighborSolicit.setDescription('Sent Neighbor Solicit is the number of packets sent thatsolicit a neighbor.')
icmpV6SentPacketTooBig = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentPacketTooBig.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentPacketTooBig.setDescription('Sent Packet Too Big is the number of sent packets thatare larger than anticipated.')
icmpV6SentParameterProblem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentParameterProblem.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentParameterProblem.setDescription('Sent Parameter Problem is the number of ICMP Parameter Problem messages sent.')
icmpV6SentRedirectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentRedirectPerSec.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentRedirectPerSec.setDescription('Sent Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were sent.')
icmpV6SentRouterAdvert = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentRouterAdvert.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentRouterAdvert.setDescription('Sent Router Advert is the number of packets sent thatadvert the router.')
icmpV6SentRouterSolicit = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentRouterSolicit.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentRouterSolicit.setDescription('Sent Router Solicit is the number of packets sent thatsolicit the router.')
icmpV6SentTimeExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 34, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpV6SentTimeExceeded.setStatus('current')
if mibBuilder.loadTexts: icmpV6SentTimeExceeded.setDescription('Sent Time Exceeded is the number of ICMP Time Exceeded messages sent.')
indexingServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35), )
if mibBuilder.loadTexts: indexingServiceTable.setStatus('current')
if mibBuilder.loadTexts: indexingServiceTable.setDescription('The Indexing Service performance object counters report statistics pertaining to the creation of indexes and the merging and querying of indexes by Indexing Service.')
indexingServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1), ).setIndexNames((0, "INFORMANT-ADV", "idxSvcInstance"))
if mibBuilder.loadTexts: indexingServiceEntry.setStatus('current')
if mibBuilder.loadTexts: indexingServiceEntry.setDescription("Performance information for one particular instance of 'Indexing Service' object.")
idxSvcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcInstance.setStatus('current')
if mibBuilder.loadTexts: idxSvcInstance.setDescription('Instance name.')
idxSvcNumDocumentsIndexed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcNumDocumentsIndexed.setStatus('current')
if mibBuilder.loadTexts: idxSvcNumDocumentsIndexed.setDescription('Number of documents indexed since the index was mounted.')
idxSvcDeferredForIndexing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcDeferredForIndexing.setStatus('current')
if mibBuilder.loadTexts: idxSvcDeferredForIndexing.setDescription('Number of files not available and deferred for indexing.')
idxSvcFilesToBeIndexed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcFilesToBeIndexed.setStatus('current')
if mibBuilder.loadTexts: idxSvcFilesToBeIndexed.setDescription('Number of files to be filtered and added to the index.')
idxSvcIndexSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcIndexSizeMB.setStatus('current')
if mibBuilder.loadTexts: idxSvcIndexSizeMB.setDescription('Size of the content index (*.ci files only) in megabytes.')
idxSvcMergeProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcMergeProgress.setStatus('current')
if mibBuilder.loadTexts: idxSvcMergeProgress.setDescription('Percent merge complete for the current merge.')
idxSvcRunningQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcRunningQueries.setStatus('current')
if mibBuilder.loadTexts: idxSvcRunningQueries.setDescription('Number of active query client connections.')
idxSvcSavedIndexes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcSavedIndexes.setStatus('current')
if mibBuilder.loadTexts: idxSvcSavedIndexes.setDescription('Number of saved indexes.')
idxSvcTotalNumDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcTotalNumDocuments.setStatus('current')
if mibBuilder.loadTexts: idxSvcTotalNumDocuments.setDescription('Total number of documents in the index.')
idxSvcTotalNumOfQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcTotalNumOfQueries.setStatus('current')
if mibBuilder.loadTexts: idxSvcTotalNumOfQueries.setDescription('Total number of queries since the index was mounted.')
idxSvcUniqueKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcUniqueKeys.setStatus('current')
if mibBuilder.loadTexts: idxSvcUniqueKeys.setDescription('Number of unique keys (words, etc.) in the index.')
idxSvcWordLists = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 35, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcWordLists.setStatus('current')
if mibBuilder.loadTexts: idxSvcWordLists.setDescription('Number of word lists.')
indexingServiceFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 36), )
if mibBuilder.loadTexts: indexingServiceFilterTable.setStatus('current')
if mibBuilder.loadTexts: indexingServiceFilterTable.setDescription('The Index Service Filter object monitors the filtering activity of Indexing Service.')
indexingServiceFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 36, 1), ).setIndexNames((0, "INFORMANT-ADV", "idxSvcFilterInstance"))
if mibBuilder.loadTexts: indexingServiceFilterEntry.setStatus('current')
if mibBuilder.loadTexts: indexingServiceFilterEntry.setDescription("Performance information for one particular instance of 'Indexing Service Filter' object.")
idxSvcFilterInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 36, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcFilterInstance.setStatus('current')
if mibBuilder.loadTexts: idxSvcFilterInstance.setDescription('Instance name.')
idxSvcFilterBindingTimeMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 36, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcFilterBindingTimeMsec.setStatus('current')
if mibBuilder.loadTexts: idxSvcFilterBindingTimeMsec.setDescription('Average time spent binding to indexing filters.')
idxSvcFilterIdxSpeedMBPerHr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 36, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcFilterIdxSpeedMBPerHr.setStatus('current')
if mibBuilder.loadTexts: idxSvcFilterIdxSpeedMBPerHr.setDescription('Speed of indexing contents of files in megabytes per hour.')
idxSvcFilterTotalIdxSpeedMBPerHr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 36, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idxSvcFilterTotalIdxSpeedMBPerHr.setStatus('current')
if mibBuilder.loadTexts: idxSvcFilterTotalIdxSpeedMBPerHr.setDescription('Speed of indexing file contents and properties in megabytes per hour.')
internetInformationServiceGlobal = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37))
if mibBuilder.loadTexts: internetInformationServiceGlobal.setStatus('current')
if mibBuilder.loadTexts: internetInformationServiceGlobal.setDescription('The Internet Information Services Global performance object consists of counters that apply jointly to the Hypertext Transport Protocol (HTTP) service and File Transfer Protocol (FTP) service.')
iisGlobalActiveFlushedEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalActiveFlushedEntries.setStatus('current')
if mibBuilder.loadTexts: iisGlobalActiveFlushedEntries.setDescription('Active Flushed Entries are cached file handles that will be closed when all current transfers complete.')
iisGlobalBLOBCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalBLOBCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: iisGlobalBLOBCacheFlushes.setDescription('BLOB Cache Flushes since server startup.')
iisGlobalBLOBCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalBLOBCacheHits.setStatus('current')
if mibBuilder.loadTexts: iisGlobalBLOBCacheHits.setDescription('Total number of successful lookups in the BLOB cache.')
iisGlobalBLOBCacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalBLOBCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: iisGlobalBLOBCacheHitsPercent.setDescription('The ratio of BLOB Cache Hits to total cache requests.')
iisGlobalBLOBCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalBLOBCacheMisses.setStatus('current')
if mibBuilder.loadTexts: iisGlobalBLOBCacheMisses.setDescription('Total number of unsuccessful lookups in the BLOB cache.')
iisGlobalCurBLOBsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalCurBLOBsCached.setStatus('current')
if mibBuilder.loadTexts: iisGlobalCurBLOBsCached.setDescription('BLOB information blocks currently in the cache for WWW and FTP services.')
iisGlobalCurBlockAsyncIORequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalCurBlockAsyncIORequests.setStatus('current')
if mibBuilder.loadTexts: iisGlobalCurBlockAsyncIORequests.setDescription('Current requests temporarily blocked due to bandwidth throttling settings.')
iisGlobalCurFileCacheMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalCurFileCacheMemUsage.setStatus('current')
if mibBuilder.loadTexts: iisGlobalCurFileCacheMemUsage.setDescription('Current number of bytes used for file cache.')
iisGlobalCurFilesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalCurFilesCached.setStatus('current')
if mibBuilder.loadTexts: iisGlobalCurFilesCached.setDescription('Current number of files whose content is in the cache for WWW and FTP services.')
iisGlobalCurURIsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalCurURIsCached.setStatus('current')
if mibBuilder.loadTexts: iisGlobalCurURIsCached.setDescription('URI information blocks currently in the cache for WWW and FTP services.')
iisGlobalFileCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalFileCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: iisGlobalFileCacheFlushes.setDescription('File Cache Flushes since server startup.')
iisGlobalFileCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalFileCacheHits.setStatus('current')
if mibBuilder.loadTexts: iisGlobalFileCacheHits.setDescription('Total number of successful lookups in the file cache.')
iisGlobalFileCacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalFileCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: iisGlobalFileCacheHitsPercent.setDescription('The ratio of File Cache Hits to total cache requests.')
iisGlobalFileCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalFileCacheMisses.setStatus('current')
if mibBuilder.loadTexts: iisGlobalFileCacheMisses.setDescription('Total number of unsuccessful lookups in the file cache.')
iisGlobalMaxFileCacheMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalMaxFileCacheMemUsage.setStatus('current')
if mibBuilder.loadTexts: iisGlobalMaxFileCacheMemUsage.setDescription('Maximum number of bytes used for file cache.')
iisGlobalMeasuredAsyncIOBwUsage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalMeasuredAsyncIOBwUsage.setStatus('current')
if mibBuilder.loadTexts: iisGlobalMeasuredAsyncIOBwUsage.setDescription('Measured bandwidth of asynchronous I/O averaged over a minute.')
iisGlobalTotalAllowedAsyncIOReqs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalAllowedAsyncIOReqs.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalAllowedAsyncIOReqs.setDescription('Total requests allowed by bandwidth throttling settings (counted since service startup).')
iisGlobalTotalBLOBsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalBLOBsCached.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalBLOBsCached.setDescription('Total number of BLOB information blocks ever added to the cache for WWW and FTP services')
iisGlobalTotalBlockAsyncIOReqs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalBlockAsyncIOReqs.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalBlockAsyncIOReqs.setDescription('Total requests temporarily blocked due to bandwidth throttling settings (counted since service startup).')
iisGlobalTotalFilesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalFilesCached.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalFilesCached.setDescription('Total number of files whose content was ever added to the cache for WWW and FTP services')
iisGlobalTotalFlushedBLOBs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalFlushedBLOBs.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalFlushedBLOBs.setDescription('Total Flushed BLOBs is the number of BLOB information blocks that have been removed from the cache since service start up.')
iisGlobalTotalFlushedFiles = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalFlushedFiles.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalFlushedFiles.setDescription('Total Flushed Files is the number of file handles that have been removed from the cache since service start up.')
iisGlobalTotalFlushedURIs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalFlushedURIs.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalFlushedURIs.setDescription('Total Flushed URIs is the number of URI information blocks that have been removed from the cache since service start up.')
iisGlobalTotalRejectedAsyncIOReq = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalRejectedAsyncIOReq.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalRejectedAsyncIOReq.setDescription('Total requests rejected due to bandwidth throttling settings (counted since service startup).')
iisGlobalTotalURIsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalTotalURIsCached.setStatus('current')
if mibBuilder.loadTexts: iisGlobalTotalURIsCached.setDescription('Total number of URI information blocks ever added to the cache for WWW and FTP services')
iisGlobalURICacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalURICacheFlushes.setStatus('current')
if mibBuilder.loadTexts: iisGlobalURICacheFlushes.setDescription('URI Cache Flushes since server startup.')
iisGlobalURICacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalURICacheHits.setStatus('current')
if mibBuilder.loadTexts: iisGlobalURICacheHits.setDescription('Total number of successful lookups in the URI cache.')
iisGlobalURICacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalURICacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: iisGlobalURICacheHitsPercent.setDescription('The ratio of URI Cache Hits to total cache requests.')
iisGlobalURICacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 37, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iisGlobalURICacheMisses.setStatus('current')
if mibBuilder.loadTexts: iisGlobalURICacheMisses.setDescription('Total number of unsuccessful lookups in the URI cache.')
ipV4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38))
if mibBuilder.loadTexts: ipV4.setStatus('current')
if mibBuilder.loadTexts: ipV4.setDescription('The Internet Protocol (IP) performance object includes counters that describe the rates at which IP datagrams are transmitted by a computer using the IP protocol. It also describes various error counts for the IP protocol.')
ipV4DatagramsForwardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsForwardedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsForwardedPerSec.setDescription('Datagrams Forwarded/sec is the rate, in incidents per second, at which attemps were made to find routes to forward input datagrams their final destination, because the local server was not the final IP destination. In servers that do not act as IP Gateways, this rate includes only packets that were source-routed via this entity, where the source-route option processing was successful.')
ipV4DatagramsOutboundDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsOutboundDiscarded.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsOutboundDiscarded.setDescription('Datagrams Outbound Discarded is the number of output IP datagrams that were discarded even though no problems were encountered to prevent their transmission to their destination (for example, lack of buffer space). This counter includes datagrams counted in Datagrams Forwarded/sec that meet this criterion.')
ipV4DatagramsOutboundNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsOutboundNoRoute.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsOutboundNoRoute.setDescription("Datagrams Outbound No Route is the number of IP datagrams that were discarded because no route could be found to transmit them to their destination. This counter includes any packets counted in Datagrams Forwarded/sec that meet this `no route' criterion.")
ipV4DatagramsRcvdAddressErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsRcvdAddressErrors.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsRcvdAddressErrors.setDescription('Datagrams Received Address Errors is the number of input datagrams that were discarded because the IP address in their IP header destination field was not valid for the computer. This count includes invalid addresses (for example, 0.0. 0.0) and addresses of unsupported Classes (for example, Class E). For entities that are not IP gateways and do not forward datagrams, this counter includes datagrams that were discarded because the destination address was not a local address.')
ipV4DatagramsRcvdDeliveredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsRcvdDeliveredPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsRcvdDeliveredPerSec.setDescription('Datagrams Received Delivered/sec is the rate, in incidents per second, at which input datagrams were successfully delivered to IP user-protocols, including Internet Control Message Protocol (ICMP).')
ipV4DatagramsRcvdDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsRcvdDiscarded.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsRcvdDiscarded.setDescription('Datagrams Received Discarded is the number of input IP datagrams that were discarded even though problems prevented their continued processing (for example, lack of buffer space). This counter does not include any datagrams discarded while awaiting re-assembly.')
ipV4DatagramsRcvdHeaderErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsRcvdHeaderErrors.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsRcvdHeaderErrors.setDescription('Datagrams Received Header Errors is the number of input datagrams that were discarded due to errors in the IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.')
ipV4DatagramsRcvdUnknownProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsRcvdUnknownProtocol.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsRcvdUnknownProtocol.setDescription('Datagrams Received Unknown Protocol is the number of locally-addressed datagrams that were successfully received but were discarded because of an unknown or unsupported protocol.')
ipV4DatagramsRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsRcvdPerSec.setDescription('Datagrams Received/sec is the rate, in incidents per second, at which IP datagrams are received from the interfaces, including those in error. Datagrams Received/sec is a subset of Datagrams/sec.')
ipV4DatagramsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate, in incidents per second, at which IP datagrams were supplied for transmission by local IP user-protocols (including ICMP). This counter does not include any datagrams counted in Datagrams Forwarded/sec. Datagrams Sent/sec is a subset of Datagrams/sec.')
ipV4DatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4DatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4DatagramsPerSec.setDescription('Datagrams/sec is the rate, in incidents per second, at which IP datagrams were received from or sent to the interfaces, including those in error. Forwarded datagrams are not included in this rate.')
ipV4FragmentReassemblyFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4FragmentReassemblyFailures.setStatus('current')
if mibBuilder.loadTexts: ipV4FragmentReassemblyFailures.setDescription('Fragment Re-assembly Failures is the number of failures detected by the IP reassembly algorithm, such as time outs, errors, etc. This is not necessarily a count of discarded IP fragments since some algorithms (notably RFC 815) lose track of the number of fragments by combining them as they are received.')
ipV4FragmentationFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4FragmentationFailures.setStatus('current')
if mibBuilder.loadTexts: ipV4FragmentationFailures.setDescription("Fragmentation Failures is the number of IP datagrams that were discarded because they needed to be fragmented at but could not be (for example, because the `Don't Fragment' flag was set).")
ipV4FragmentedDatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4FragmentedDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4FragmentedDatagramsPerSec.setDescription('Fragmented Datagrams/sec is the rate, in incidents per second, at which datagrams are successfully fragmented.')
ipV4FragmentsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4FragmentsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4FragmentsCreatedPerSec.setDescription('Fragments Created/sec is the rate, in incidents per second, at which IP datagram fragments were generated as a result of fragmentation.')
ipV4FragmentsReassembledPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4FragmentsReassembledPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4FragmentsReassembledPerSec.setDescription('Fragments Re-assembled/sec is the rate, in incidents per second, at which IP fragments were successfully reassembled.')
ipV4FragmentsRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 38, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV4FragmentsRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV4FragmentsRcvdPerSec.setDescription('Fragments Received/sec is the rate, in incidents per second, at which IP fragments that need to be reassembled at this entity are received.')
ipV6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39))
ipV6DatagramsForwardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsForwardedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsForwardedPerSec.setDescription('Datagrams Forwarded/sec is the rate, in incidents per second, at which attemps were made to find routes to forward input datagrams their final destination, because the local server was not the final IP destination. In servers that do not act as IP Gateways, this rate includes only packets that were source-routed via this entity, where the source-route option processing was successful.')
ipV6DatagramsOutboundDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsOutboundDiscarded.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsOutboundDiscarded.setDescription('Datagrams Outbound Discarded is the number of output IP datagrams that were discarded even though no problems were encountered to prevent their transmission to their destination (for example, lack of buffer space). This counter includes datagrams counted in Datagrams Forwarded/sec that meet this criterion.')
ipV6DatagramsOutboundNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsOutboundNoRoute.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsOutboundNoRoute.setDescription("Datagrams Outbound No Route is the number of IP datagrams that were discarded because no route could be found to transmit them to their destination. This counter includes any packets counted in Datagrams Forwarded/sec that meet this `no route' criterion.")
ipV6DatagramsRcvdAddressErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsRcvdAddressErrors.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsRcvdAddressErrors.setDescription('Datagrams Received Address Errors is the number of input datagrams that were discarded because the IP address in their IP header destination field was not valid for the computer. This count includes invalid addresses (for example, 0.0. 0.0) and addresses of unsupported Classes (for example, Class E). For entities that are not IP gateways and do not forward datagrams, this counter includes datagrams that were discarded because the destination address was not a local address.')
ipV6DatagramsRcvdDeliveredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsRcvdDeliveredPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsRcvdDeliveredPerSec.setDescription('Datagrams Received Delivered/sec is the rate, in incidents per second, at which input datagrams were successfully delivered to IP user-protocols, including Internet Control Message Protocol (ICMP).')
ipV6DatagramsRcvdDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsRcvdDiscarded.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsRcvdDiscarded.setDescription('Datagrams Received Discarded is the number of input IP datagrams that were discarded even though problems prevented their continued processing (for example, lack of buffer space). This counter does not include any datagrams discarded while awaiting re-assembly.')
ipV6DatagramsRcvdHeaderErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsRcvdHeaderErrors.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsRcvdHeaderErrors.setDescription('Datagrams Received Header Errors is the number of input datagrams that were discarded due to errors in the IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.')
ipV6DatagramsRcvdUnknownProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsRcvdUnknownProtocol.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsRcvdUnknownProtocol.setDescription('Datagrams Received Unknown Protocol is the number of locally-addressed datagrams that were successfully received but were discarded because of an unknown or unsupported protocol.')
ipV6DatagramsRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsRcvdPerSec.setDescription('Datagrams Received/sec is the rate, in incidents per second, at which IP datagrams are received from the interfaces, including those in error. Datagrams Received/sec is a subset of Datagrams/sec.')
ipV6DatagramsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate, in incidents per second, at which IP datagrams were supplied for transmission by local IP user-protocols (including ICMP). This counter does not include any datagrams counted in Datagrams Forwarded/sec. Datagrams Sent/sec is a subset of Datagrams/sec.')
ipV6DatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6DatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6DatagramsPerSec.setDescription('Datagrams/sec is the rate, in incidents per second, at which IP datagrams were received from or sent to the interfaces, including those in error. Forwarded datagrams are not included in this rate.')
ipV6FragmentReassemblyFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6FragmentReassemblyFailures.setStatus('current')
if mibBuilder.loadTexts: ipV6FragmentReassemblyFailures.setDescription('Fragment Re-assembly Failures is the number of failures detected by the IP reassembly algorithm, such as time outs, errors, etc. This is not necessarily a count of discarded IP fragments since some algorithms (notably RFC 815) lose track of the number of fragments by combining them as they are received.')
ipV6FragmentationFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6FragmentationFailures.setStatus('current')
if mibBuilder.loadTexts: ipV6FragmentationFailures.setDescription("Fragmentation Failures is the number of IP datagrams that were discarded because they needed to be fragmented at but could not be (for example, because the `Don't Fragment' flag was set).")
ipV6FragmentedDatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6FragmentedDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6FragmentedDatagramsPerSec.setDescription('Fragmented Datagrams/sec is the rate, in incidents per second, at which datagrams are successfully fragmented.')
ipV6FragmentsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6FragmentsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6FragmentsCreatedPerSec.setDescription('Fragments Created/sec is the rate, in incidents per second, at which IP datagram fragments were generated as a result of fragmentation.')
ipV6FragmentsReassembledPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6FragmentsReassembledPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6FragmentsReassembledPerSec.setDescription('Fragments Re-assembled/sec is the rate, in incidents per second, at which IP fragments were successfully reassembled.')
ipV6FragmentsRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 39, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipV6FragmentsRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipV6FragmentsRcvdPerSec.setDescription('Fragments Received/sec is the rate, in incidents per second, at which IP fragments that need to be reassembled at this entity are received.')
ipSecV4Driver = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40))
is4dActiveSecurityAssociations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dActiveSecurityAssociations.setStatus('current')
if mibBuilder.loadTexts: is4dActiveSecurityAssociations.setDescription('The number of active IPSec quick mode security associations.')
is4dOffloadedSecurityAssociation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dOffloadedSecurityAssociation.setStatus('current')
if mibBuilder.loadTexts: is4dOffloadedSecurityAssociation.setDescription('The number of active IPSec quick mode security associations offloaded to hardware. Certain network adapters can accelerate IPSec processing by performing hardware offload of IPSec cryptographic functions.')
is4dPendingKeyExchangeOperations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dPendingKeyExchangeOperations.setStatus('current')
if mibBuilder.loadTexts: is4dPendingKeyExchangeOperations.setDescription('The number of IPSec key exchange operations that are in progress but are not yet completed.')
is4dTotalBadSPIPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalBadSPIPackets.setStatus('current')
if mibBuilder.loadTexts: is4dTotalBadSPIPackets.setDescription('The total number of packets for which the Security Parameters Index (SPI) was incorrect since the computer was last started. A large number of packets with bad SPIs within a short amount of time might indicate a packet spoofing attack.')
is4dTotalBytesReceivedInTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalBytesReceivedInTunnels.setStatus('current')
if mibBuilder.loadTexts: is4dTotalBytesReceivedInTunnels.setDescription('The total number of bytes received using IPSec tunnel mode since the computer was last started.')
is4dTotalBytesSentInTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalBytesSentInTunnels.setStatus('current')
if mibBuilder.loadTexts: is4dTotalBytesSentInTunnels.setDescription('The total number of bytes sent using IPSec tunnel mode since the computer was last started.')
is4dTotalOffloadedBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalOffloadedBytesReceived.setStatus('current')
if mibBuilder.loadTexts: is4dTotalOffloadedBytesReceived.setDescription('The total number of bytes received using IPSec hardware offload since the computer was last started. Certain network adapters can accelerate IPSec processing by performing hardware offload of IPSec cryptographic functions.')
is4dTotalOffloadedBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalOffloadedBytesSent.setStatus('current')
if mibBuilder.loadTexts: is4dTotalOffloadedBytesSent.setDescription('The total number of bytes sent using IPSec hardware offload since the computer was last started. Certain network adapters can accelerate IPSec processing by performing hardware offload of IPSec cryptographic functions.')
is4dTotalPktsFailReplayDetection = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalPktsFailReplayDetection.setStatus('current')
if mibBuilder.loadTexts: is4dTotalPktsFailReplayDetection.setDescription('The total number of packets that contained an invalid sequence number since the computer was last started. Increases in this counter might indicate a network problem or replay attack.')
is4dTotalPktsNotAuthenticated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalPktsNotAuthenticated.setStatus('current')
if mibBuilder.loadTexts: is4dTotalPktsNotAuthenticated.setDescription('The total number of packets for which data could not be verified (for which the integrity hash verification failed) since the computer was last started. Increases in this counter might indicate an IPSec packet spoofing or modification attack, or packet corruption by network devices.')
is4dTotalPktsNotDecrypted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalPktsNotDecrypted.setStatus('current')
if mibBuilder.loadTexts: is4dTotalPktsNotDecrypted.setDescription('The total number of packets that could not be decrypted since the computer was last started. A packet might not be decrypted if it fails a validation check.')
is4dTotalSARekeys = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalSARekeys.setStatus('current')
if mibBuilder.loadTexts: is4dTotalSARekeys.setDescription('The total number of successful rekey operations for IPSec quick mode security associations since the computer was last started.')
is4dTotalTransportBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalTransportBytesReceived.setStatus('current')
if mibBuilder.loadTexts: is4dTotalTransportBytesReceived.setDescription('The total number of bytes received using IPSec transport mode since the computer was last started.')
is4dTotalTransportBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 40, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4dTotalTransportBytesSent.setStatus('current')
if mibBuilder.loadTexts: is4dTotalTransportBytesSent.setDescription('The total number of bytes sent using IPSec transport mode since the computer was last started.')
ipSecV4IKE = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41))
if mibBuilder.loadTexts: ipSecV4IKE.setStatus('current')
if mibBuilder.loadTexts: ipSecV4IKE.setDescription('IPsec IKEv4 is the set of Internet Protocol security (IPsec) Internet Key Exchange (IKE) counters that apply to traffic and connections over Internet Protocol version 4.')
is4iAcquireHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iAcquireHeapSize.setStatus('current')
if mibBuilder.loadTexts: is4iAcquireHeapSize.setDescription('The number of entries in the acquire heap. The acquire heap stores successful acquires. Acquires are outbound requests to establish security associations between IPSec peers.')
is4iMainModeSAListEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iMainModeSAListEntries.setStatus('current')
if mibBuilder.loadTexts: is4iMainModeSAListEntries.setDescription('The number of main mode state entries. This counter includes successfully negotiated main modes, main mode negotiations in progress, and main mode negotiations that failed or expired and have not yet been deleted.')
is4iQuickModeSAListEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iQuickModeSAListEntries.setStatus('current')
if mibBuilder.loadTexts: is4iQuickModeSAListEntries.setDescription('The number of quick mode negotiations that are in progress.')
is4iReceiveHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iReceiveHeapSize.setStatus('current')
if mibBuilder.loadTexts: is4iReceiveHeapSize.setDescription('The number of entries in the Internet Key Exchange (IKE) receive buffers. The receive buffers are used to store incoming IKE messages.')
is4iTotalAuthenticationFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iTotalAuthenticationFailures.setStatus('current')
if mibBuilder.loadTexts: is4iTotalAuthenticationFailures.setDescription('The total number of identity authentication (Kerberos, certificate, and preshared key) failures that occurred during main mode negotiation since the IPSec service was last started.')
is4iTotalMainModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iTotalMainModeSAs.setStatus('current')
if mibBuilder.loadTexts: is4iTotalMainModeSAs.setDescription('The total number of successful security associations created during main mode negotiations since the IPSec service was last started.')
is4iTotalNegotiationFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iTotalNegotiationFailures.setStatus('current')
if mibBuilder.loadTexts: is4iTotalNegotiationFailures.setDescription('The total number of negotiation failures that occurred during main mode or quick mode negotiation since the IPSec service was last started.')
is4iTotalQuickModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iTotalQuickModeSAs.setStatus('current')
if mibBuilder.loadTexts: is4iTotalQuickModeSAs.setDescription('The total number of successful security associations created during quick mode negotiations since the IPSec service was last started.')
is4iTotalSoftAssociations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 41, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: is4iTotalSoftAssociations.setStatus('current')
if mibBuilder.loadTexts: is4iTotalSoftAssociations.setDescription('The total number of security associations (SAs) formed with computers that did not respond to main mode negotiation attempts (though IPSec policy allowed communications) since the IPSec service was last started. Packets that match soft SAs are not secured by IPSec.')
jobObjectTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42), )
if mibBuilder.loadTexts: jobObjectTable.setStatus('current')
if mibBuilder.loadTexts: jobObjectTable.setDescription('The Job performance object reports the accounting and processor usage data collected by each active job object. A job object provides a means of managing groups of processes with respect to their processor usage and other factors. For more information about creating and managing job objects, see the Platform SDK link on the Web Resources page at http://windows.microsoft.com/windows2000/reskit /webresources.')
jobObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1), ).setIndexNames((0, "INFORMANT-ADV", "joInstance"))
if mibBuilder.loadTexts: jobObjectEntry.setStatus('current')
if mibBuilder.loadTexts: jobObjectEntry.setDescription("Performance information for one particular instance of 'Job Object' object.")
joInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joInstance.setStatus('current')
if mibBuilder.loadTexts: joInstance.setDescription('Instance name.')
joCurrentPercentKernelModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joCurrentPercentKernelModeTime.setStatus('current')
if mibBuilder.loadTexts: joCurrentPercentKernelModeTime.setDescription('Current % Kernel mode Time shows the percentage of the sample interval that the processes in the Job object spent executing code in kernel or privileged mode.')
joCurrentPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joCurrentPercentProcessorTime.setStatus('current')
if mibBuilder.loadTexts: joCurrentPercentProcessorTime.setDescription('Current % Processor Time shows the percentage of the sample interval that the processes in the Job object spent executing code.')
joCurrentPercentUserModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joCurrentPercentUserModeTime.setStatus('current')
if mibBuilder.loadTexts: joCurrentPercentUserModeTime.setDescription('Current % User mode Time shows the percentage of the sample interval that the processes in the Job object spent executing code in user mode.')
joPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: joPagesPerSec.setDescription('Pages/Sec shows the page fault rate of all the processes in the Job object.')
joProcessCountActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joProcessCountActive.setStatus('current')
if mibBuilder.loadTexts: joProcessCountActive.setDescription('Process Count - Active shows the number of processes that are currently associated with the Job object.')
joProcessCountTerminated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joProcessCountTerminated.setStatus('current')
if mibBuilder.loadTexts: joProcessCountTerminated.setDescription('Process Count - Terminated shows the number of processes that have been terminated because of a limit violation.')
joProcessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joProcessCountTotal.setStatus('current')
if mibBuilder.loadTexts: joProcessCountTotal.setDescription('Process Count - Total shows the number of processes, both active and terminated, that are or have been associated with the Job object.')
joThisPeriodMSecKernelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joThisPeriodMSecKernelMode.setStatus('current')
if mibBuilder.loadTexts: joThisPeriodMSecKernelMode.setDescription('This Period mSec - Kernel mode shows the time, in milliseconds, of kernel mode processor time used by all the processes in the Job object, including those that have terminated or that are no longer associated with the Job object, since a time limit on the Job was established.')
joThisPeriodMSecProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joThisPeriodMSecProcessor.setStatus('current')
if mibBuilder.loadTexts: joThisPeriodMSecProcessor.setDescription('This Period mSec - Processor shows the time, in milliseconds, of processor time used by all the processes in the Job object, including those that have terminated or that are no longer associated with the Job object, since a time limit on the Job was established.')
joThisPeriodMSecUserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joThisPeriodMSecUserMode.setStatus('current')
if mibBuilder.loadTexts: joThisPeriodMSecUserMode.setDescription('This Period mSec - User mode shows the time, in milliseconds, of user mode processor time used by all the processes in the Job object, including those that have terminated or that are no longer associated with the Job object, since a time limit on the Job was established.')
joTotalMSecKernelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joTotalMSecKernelMode.setStatus('current')
if mibBuilder.loadTexts: joTotalMSecKernelMode.setDescription('Total mSec - Kernel mode shows the time, in milliseconds, of kernel mode processor time used by all the processes in the Job object, including those that have terminated or that are no longer associated with the Job object, since the Job object was created.')
joTotalMSecProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joTotalMSecProcessor.setStatus('current')
if mibBuilder.loadTexts: joTotalMSecProcessor.setDescription('Total mSec - Processor shows the time, in milliseconds, of processor time used by all the processes in the Job object, including those that have terminated or that are no longer associated with the Job object, since the Job object was created.')
joTotalMSecUserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 42, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joTotalMSecUserMode.setStatus('current')
if mibBuilder.loadTexts: joTotalMSecUserMode.setDescription('Total mSec - User mode shows the time, in milliseconds, of user mode processor time used by all the processes in the Job object, including those that have terminated or that are no longer associated with the Job object, since the Job object was created.')
jobObjectDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43), )
if mibBuilder.loadTexts: jobObjectDetailsTable.setStatus('current')
if mibBuilder.loadTexts: jobObjectDetailsTable.setDescription('The Job Object Details performance object counters show detailed performance information about the active processes that make up a job object.')
jobObjectDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1), ).setIndexNames((0, "INFORMANT-ADV", "jodInstance"))
if mibBuilder.loadTexts: jobObjectDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: jobObjectDetailsEntry.setDescription("Performance information for one particular instance of 'Job Object Details' object.")
jodInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodInstance.setStatus('current')
if mibBuilder.loadTexts: jodInstance.setDescription('Instance name.')
jodPercentPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPercentPrivilegedTime.setStatus('current')
if mibBuilder.loadTexts: jodPercentPrivilegedTime.setDescription('% Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service is called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
jodPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPercentProcessorTime.setStatus('current')
if mibBuilder.loadTexts: jodPercentProcessorTime.setDescription('% Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.')
jodPercentUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPercentUserTime.setStatus('current')
if mibBuilder.loadTexts: jodPercentUserTime.setDescription('% User Time is the percentage of elapsed time that the process threads spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows executive, kernel, and device drivers. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
jodCreatingProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodCreatingProcessID.setStatus('current')
if mibBuilder.loadTexts: jodCreatingProcessID.setDescription('The Creating Process ID value is the Process ID of the process that created the process. The creating process may have terminated, so this value may no longer identify a running process.')
jodElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jodElapsedTime.setDescription('The total elapsed time, in seconds, that this process has been running.')
jodHandleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodHandleCount.setStatus('current')
if mibBuilder.loadTexts: jodHandleCount.setDescription('The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.')
jodIDProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIDProcess.setStatus('current')
if mibBuilder.loadTexts: jodIDProcess.setDescription('ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.')
jodIODataBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIODataBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIODataBytesPerSec.setDescription('The rate at which the process is reading and writing bytes in I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIODataOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIODataOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIODataOperationsPerSec.setDescription('The rate at which the process is issuing read and write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIOOtherBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIOOtherBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIOOtherBytesPerSec.setDescription('The rate at which the process is issuing bytes to I/O operations that do not involve data such as control operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIOOtherOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIOOtherOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIOOtherOperationsPerSec.setDescription('The rate at which the process is issuing I/O operations that are neither read nor write operations (for example, a control function). This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIOReadBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIOReadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIOReadBytesPerSec.setDescription('The rate at which the process is reading bytes from I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIOReadOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIOReadOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIOReadOperationsPerSec.setDescription('The rate at which the process is issuing read I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIOWriteBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIOWriteBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIOWriteBytesPerSec.setDescription('The rate at which the process is writing bytes to I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodIOWriteOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodIOWriteOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: jodIOWriteOperationsPerSec.setDescription('The rate at which the process is issuing write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
jodPageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: jodPageFaultsPerSec.setDescription('Page Faults/sec is the rate at which page faults by the threads executing in this process are occurring. A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This may not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.')
jodPageFileBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPageFileBytes.setStatus('current')
if mibBuilder.loadTexts: jodPageFileBytes.setDescription('Page File Bytes is the current amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the current amount of virtual memory that the process has reserved for use in physical memory.')
jodPageFileBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPageFileBytesPeak.setStatus('current')
if mibBuilder.loadTexts: jodPageFileBytesPeak.setDescription('Page File Bytes Peak is the maximum amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the maximum amount of virtual memory that the process has reserved for use in physical memory.')
jodPoolNonpagedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPoolNonpagedBytes.setStatus('current')
if mibBuilder.loadTexts: jodPoolNonpagedBytes.setDescription('Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory\\\\Pool Nonpaged Bytes is calculated differently than Process\\\\Pool Nonpaged Bytes, so it might not equal Process\\\\Pool Nonpaged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
jodPoolPagedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPoolPagedBytes.setStatus('current')
if mibBuilder.loadTexts: jodPoolPagedBytes.setDescription('Pool Paged Bytes is the size, in bytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory\\\\Pool Paged Bytes is calculated differently than Process\\\\Pool Paged Bytes, so it might not equal Process\\\\Pool Paged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
jodPriorityBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPriorityBase.setStatus('current')
if mibBuilder.loadTexts: jodPriorityBase.setDescription("The current base priority of this process. Threads within a process can raise and lower their own base priority relative to the process' base priority.")
jodPrivateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodPrivateBytes.setStatus('current')
if mibBuilder.loadTexts: jodPrivateBytes.setDescription('Private Bytes is the current size, in bytes, of memory that this process has allocated that cannot be shared with other processes.')
jodThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodThreadCount.setStatus('current')
if mibBuilder.loadTexts: jodThreadCount.setDescription('The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.')
jodVirtualBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodVirtualBytes.setStatus('current')
if mibBuilder.loadTexts: jodVirtualBytes.setDescription('Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.')
jodVirtualBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodVirtualBytesPeak.setStatus('current')
if mibBuilder.loadTexts: jodVirtualBytesPeak.setDescription('Virtual Bytes Peak is the maximum size, in bytes, of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and the process might limit its ability to load libraries.')
jodWorkingSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodWorkingSet.setStatus('current')
if mibBuilder.loadTexts: jodWorkingSet.setDescription('Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.')
jodWorkingSetPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 43, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jodWorkingSetPeak.setStatus('current')
if mibBuilder.loadTexts: jodWorkingSetPeak.setDescription('Working Set Peak is the maximum size, in bytes, of the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
logicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44), )
if mibBuilder.loadTexts: logicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: logicalDiskTable.setDescription("The Logical Disk performance object consists of counters that monitor logical partitions of hard or fixed disk drives. System Monitor identifies logical disks by their drive letter, such as 'C.' To monitor Logical Disk object counters, you must activate them by typing the following at the command prompt: diskperf -yv")
logicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1), ).setIndexNames((0, "INFORMANT-ADV", "lDiskInstance"))
if mibBuilder.loadTexts: logicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: logicalDiskEntry.setDescription("Performance information for one particular instance of 'LogicalDisk' object.")
lDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskInstance.setStatus('current')
if mibBuilder.loadTexts: lDiskInstance.setDescription('Instance name.')
lDiskPercentDiskReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentDiskReadTime.setStatus('current')
if mibBuilder.loadTexts: lDiskPercentDiskReadTime.setDescription('% Disk Read Time is the percentage of elapsed time that the selected disk drive was busy servicing read requests.')
lDiskPercentDiskTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentDiskTime.setStatus('current')
if mibBuilder.loadTexts: lDiskPercentDiskTime.setDescription('% Disk Time is the percentage of elapsed time that the selected disk drive was busy servicing read or write requests.')
lDiskPercentDiskWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentDiskWriteTime.setStatus('current')
if mibBuilder.loadTexts: lDiskPercentDiskWriteTime.setDescription('% Disk Write Time is the percentage of elapsed time that the selected disk drive was busy servicing write requests.')
lDiskPercentFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentFreeSpace.setStatus('current')
if mibBuilder.loadTexts: lDiskPercentFreeSpace.setDescription('% Free Space is the percentage of total usable space on the selected logical disk drive that was free.')
lDiskPercentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentIdleTime.setStatus('current')
if mibBuilder.loadTexts: lDiskPercentIdleTime.setDescription('% Idle Time reports the percentage of time during the sample interval that the disk was idle.')
lDiskAvgDiskBytesPerRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskBytesPerRead.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskBytesPerRead.setDescription('Avg. Disk Bytes/Read is the average number of bytes transferred from the disk during read operations.')
lDiskAvgDiskBytesPerTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskBytesPerTransfer.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskBytesPerTransfer.setDescription('Avg. Disk Bytes/Transfer is the average number of bytes transferred to or from the disk during write or read operations.')
lDiskAvgDiskBytesPerWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskBytesPerWrite.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskBytesPerWrite.setDescription('Avg. Disk Bytes/Write is the average number of bytes transferred to the disk during write operations.')
lDiskAvgDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskQueueLength.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskQueueLength.setDescription('Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval. Multiplied by 1000 to provide a useful gauge value since it is commonly a fractional value.')
lDiskAvgDiskReadQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskReadQueueLength.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskReadQueueLength.setDescription('Avg. Disk Read Queue Length is the average number of read requests that were queued for the selected disk during the sample interval. Multiplied by 1000 to provide a useful gauge value since it is commonly a fractional value.')
lDiskAvgDiskWriteQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskWriteQueueLength.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskWriteQueueLength.setDescription('Avg. Disk Write Queue Length is the average number of write requests that were queued for the selected disk during the sample interval. Multiplied by 1000 to provide a useful gauge value since it is commonly a fractional value.')
lDiskAvgDiskSecPerRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskSecPerRead.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskSecPerRead.setDescription('Avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk. Multiplied by 1000000 to provide a useful gauge value since it is commonly a fractional value.')
lDiskAvgDiskSecPerTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskSecPerTransfer.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskSecPerTransfer.setDescription('Avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer. Multiplied by 1000000 to provide a useful gauge value since it is commonly a fractional value.')
lDiskAvgDiskSecPerWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskSecPerWrite.setStatus('current')
if mibBuilder.loadTexts: lDiskAvgDiskSecPerWrite.setDescription('Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk. Multiplied by 1000000 to provide a useful gauge value since it is commonly a fractional value.')
lDiskCurrentDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskCurrentDiskQueueLength.setStatus('current')
if mibBuilder.loadTexts: lDiskCurrentDiskQueueLength.setDescription('Current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two.')
lDiskDiskBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskDiskBytesPerSec.setDescription('Disk Bytes/sec is the rate bytes are transferred to or from the disk during write or read operations.')
lDiskDiskReadBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskReadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskDiskReadBytesPerSec.setDescription('Disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations.')
lDiskDiskReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskDiskReadsPerSec.setDescription('Disk Reads/sec is the rate of read operations on the disk.')
lDiskDiskTransfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskTransfersPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskDiskTransfersPerSec.setDescription('Disk Transfers/sec is the rate of read and write operations on the disk.')
lDiskDiskWriteBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskWriteBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskDiskWriteBytesPerSec.setDescription('Disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations.')
lDiskDiskWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskDiskWritesPerSec.setDescription('Disk Writes/sec is the rate of write operations on the disk.')
lDiskFreeMegabytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskFreeMegabytes.setStatus('current')
if mibBuilder.loadTexts: lDiskFreeMegabytes.setDescription('Free Megabytes displays the unallocated space, in megabytes, on the disk drive in megabytes. One megabyte is equal to 1,048,576 bytes.')
lDiskSplitIOPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 44, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskSplitIOPerSec.setStatus('current')
if mibBuilder.loadTexts: lDiskSplitIOPerSec.setDescription('Split IO/Sec reports the rate at which I/Os to the disk were split into multiple I/Os. A split I/O may result from requesting data of a size that is too large to fit into a single I/O or that the disk is fragmented.')
macFileServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45))
if mibBuilder.loadTexts: macFileServer.setStatus('current')
if mibBuilder.loadTexts: macFileServer.setDescription('The MacFile Server performance object provides information about a system running File Server for Macintosh.')
mfsCurrentFilesOpen = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsCurrentFilesOpen.setStatus('current')
if mibBuilder.loadTexts: mfsCurrentFilesOpen.setDescription('The number of internal files currently open in the MacFile server. This count does not include files opened on behalf of Macintosh clients.')
mfsCurrentNonPagedMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsCurrentNonPagedMemory.setStatus('current')
if mibBuilder.loadTexts: mfsCurrentNonPagedMemory.setDescription('The current amount of nonpaged memory resources used by the MacFile Server.')
mfsCurrentPagedMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsCurrentPagedMemory.setStatus('current')
if mibBuilder.loadTexts: mfsCurrentPagedMemory.setDescription('The current amount of paged memory resources used by the MacFile Server.')
mfsCurrentQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsCurrentQueueLength.setStatus('current')
if mibBuilder.loadTexts: mfsCurrentQueueLength.setDescription('The number of outstanding work items waiting to be processed.')
mfsCurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: mfsCurrentSessions.setDescription('The number of sessions currently connected to the MacFile server. Indicates current server activity.')
mfsCurrentThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsCurrentThreads.setStatus('current')
if mibBuilder.loadTexts: mfsCurrentThreads.setDescription('The current number of threads used by MacFile server. Indicates how busy the server is.')
mfsDataReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsDataReadPerSec.setStatus('current')
if mibBuilder.loadTexts: mfsDataReadPerSec.setDescription('The number of bytes read from disk per second.')
mfsDataReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsDataReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: mfsDataReceivedPerSec.setDescription('The number of bytes received from the network per second. Indicates how busy the server is.')
mfsDataTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsDataTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: mfsDataTransmittedPerSec.setDescription('The number of bytes sent on the network per second. Indicates how busy the server is.')
mfsDataWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsDataWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: mfsDataWrittenPerSec.setDescription('The number of bytes written to disk per second.')
mfsFailedLogons = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsFailedLogons.setStatus('current')
if mibBuilder.loadTexts: mfsFailedLogons.setDescription('The number of failed logon attempts to the MacFile server. Can indicate whether password guessing programs are being used to crack the security on the server.')
mfsMaxNonPagedMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsMaxNonPagedMemory.setStatus('current')
if mibBuilder.loadTexts: mfsMaxNonPagedMemory.setDescription('The maximum amount of nonpaged memory resources use by the MacFile Server.')
mfsMaxPagedMemory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsMaxPagedMemory.setStatus('current')
if mibBuilder.loadTexts: mfsMaxPagedMemory.setDescription('The maximum amount of paged memory resources used by the MacFile Server.')
mfsMaximumFilesOpen = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsMaximumFilesOpen.setStatus('current')
if mibBuilder.loadTexts: mfsMaximumFilesOpen.setDescription('The maximum number of internal files open at one time in the MacFile server. This count does not include files opened on behalf of Macintosh clients.')
mfsMaximumQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsMaximumQueueLength.setStatus('current')
if mibBuilder.loadTexts: mfsMaximumQueueLength.setDescription('The maximum number of outstanding work items waiting at one time.')
mfsMaximumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsMaximumSessions.setStatus('current')
if mibBuilder.loadTexts: mfsMaximumSessions.setDescription('The maximum number of sessions connected at one time to the MacFile server. Indicates usage level of server.')
mfsMaximumThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 45, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfsMaximumThreads.setStatus('current')
if mibBuilder.loadTexts: mfsMaximumThreads.setDescription('The maximum number of threads used by MacFile server. Indicates peak usage level of server.')
memory = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46))
if mibBuilder.loadTexts: memory.setStatus('current')
if mibBuilder.loadTexts: memory.setDescription('The Memory performance object consists of counters that describe the behavior of physical and virtual memory on the computer. Physical memory is the amount of random-access memory (RAM) on the computer. Virtual memory consists of space in physical memory and on disk. Many of the memory counters monitor paging, which is the movement of pages of code and data between disk and physical memory. Excessive paging, a symptom of a memory shortage, can cause delays which interfere with all system processes.')
memoryPercentCommittedBytesInUse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPercentCommittedBytesInUse.setStatus('current')
if mibBuilder.loadTexts: memoryPercentCommittedBytesInUse.setDescription('% Committed Bytes In Use is the ratio of Memory\\\\Committed Bytes to the Memory\\\\Commit Limit. Committed memory is the physical memory in use for which space has been reserved in the paging file should it need to be written to disk. The commit limit is determined by the size of the paging file. If the paging file is enlarged, the commit limit increases, and the ratio is reduced). This counter displays the current percentage value only; it is not an average.')
memoryAvailableBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailableBytes.setStatus('current')
if mibBuilder.loadTexts: memoryAvailableBytes.setDescription('Available Bytes is the amount of physical memory, in bytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryAvailableKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailableKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryAvailableKBytes.setDescription('Available KBytes is the amount of physical memory, in Kilobytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryAvailableMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailableMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryAvailableMBytes.setDescription('Available MBytes is the amount of physical memory, in Megabytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryCacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCacheBytes.setDescription('Cache Bytes is the sum of the Memory\\\\System Cache Resident Bytes, Memory\\\\System Driver Resident Bytes, Memory\\\\System Code Resident Bytes, and Memory\\\\Pool Paged Resident Bytes counters. This counter displays the last observed value only; it is not an average.')
memoryCacheBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheBytesPeak.setStatus('current')
if mibBuilder.loadTexts: memoryCacheBytesPeak.setDescription('Cache Bytes Peak is the maximum number of bytes used by the file system cache since the system was last restarted. This might be larger than the current size of the cache. This counter displays the last observed value only; it is not an average.')
memoryCacheFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryCacheFaultsPerSec.setDescription('Cache Faults/sec is the rate at which faults occur when a page sought in the file system cache is not found and must be retrieved from elsewhere in memory (a soft fault) or from disk (a hard fault). The file system cache is an area of physical memory that stores recently used pages of data for applications. Cache activity is a reliable indicator of most application I/O operations. This counter shows the number of faults, without regard for the number of pages faulted in each operation.')
memoryCommitLimit = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommitLimit.setStatus('current')
if mibBuilder.loadTexts: memoryCommitLimit.setDescription('Commit Limit is the amount of virtual memory that can be committed without having to extend the paging file(s). It is measured in bytes. Committed memory is the physical memory which has space reserved on the disk paging files. There can be one paging file on each logical drive). If the paging file(s) are be expanded, this limit increases accordingly. This counter displays the last observed value only; it is not an average.')
memoryCommittedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommittedBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCommittedBytes.setDescription('Committed Bytes is the amount of committed virtual memory, in bytes. Committed memory is the physical memory which has space reserved on the disk paging file(s). There can be one or more paging files on each physical drive. This counter displays the last observed value only; it is not an average.')
memoryDemandZeroFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDemandZeroFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryDemandZeroFaultsPerSec.setDescription('Demand Zero Faults/sec is the rate at which a zeroed page is required to satisfy the fault. Zeroed pages, pages emptied of previously stored data and filled with zeros, are a security feature of Windows that prevent processes from seeing data stored by earlier processes that used the memory space. Windows maintains a list of zeroed pages to accelerate this process. This counter shows the number of faults, without regard to the number of pages retrieved to satisfy the fault. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
memoryFreeSystemPageTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreeSystemPageTableEntries.setStatus('current')
if mibBuilder.loadTexts: memoryFreeSystemPageTableEntries.setDescription('Free System Page Table Entries is the number of page table entries not currently in used by the system. This counter displays the last observed value only; it is not an average.')
memoryPageFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryPageFaultsPerSec.setDescription('Page Faults/sec is the average number of pages faulted per second. It is measured in number of pages faulted per second because only one page is faulted in each fault operation, hence this is also equal to the number of page fault operations. This counter includes both hard faults (those that require disk access) and soft faults (where the faulted page is found elsewhere in physical memory.) Most processors can handle large numbers of soft faults without significant consequence. However, hard faults, which require disk access, can cause significant delays.')
memoryPageReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPageReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryPageReadsPerSec.setDescription('Page Reads/sec is the rate at which the disk was read to resolve hard page faults. It shows the number of reads operations, without regard to the number of pages retrieved in each operation. Hard page faults occur when a process references a page in virtual memory that is not in working set or elsewhere in physical memory, and must be retrieved from disk. This counter is a primary indicator of the kinds of faults that cause system-wide delays. It includes read operations to satisfy faults in the file system cache (usually requested by applications) and in non-cached mapped memory files. Compare the value of Memory\\\\Pages Reads/sec to the value of Memory\\\\Pages Input/sec to determine the average number of pages read during each operation.')
memoryPageWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPageWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryPageWritesPerSec.setDescription('Page Writes/sec is the rate at which pages are written to disk to free up space in physical memory. Pages are written to disk only if they are changed while in physical memory, so they are likely to hold data, not code. This counter shows write operations, without regard to the number of pages written in each operation. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
memoryPagesInputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPagesInputPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryPagesInputPerSec.setDescription('Pages Input/sec is the rate at which pages are read from disk to resolve hard page faults. Hard page faults occur when a process refers to a page in virtual memory that is not in its working set or elsewhere in physical memory, and must be retrieved from disk. When a page is faulted, the system tries to read multiple contiguous pages into memory to maximize the benefit of the read operation. Compare the value of Memory\\\\Pages Input/sec to the value of Memory\\\\Page Reads/sec to determine the average number of pages read into memory during each read operation.')
memoryPagesOutputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPagesOutputPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryPagesOutputPerSec.setDescription('Pages Output/sec is the rate at which pages are written to disk to free up space in physical memory. Pages are written back to disk only if they are changed in physical memory, so they are likely to hold data, not code. A high rate of pages output might indicate a memory shortage. Windows writes more pages back to disk to free up space when physical memory is in short supply. This counter shows the number of pages, and can be compared to other counts of pages, without conversion.')
memoryPagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryPagesPerSec.setDescription('Pages/sec is the rate at which pages are read from or written to disk to resolve hard page faults. This counter is a primary indicator of the kinds of faults that cause system-wide delays. It is the sum of Memory\\\\Pages Input/sec and Memory\\\\Pages Output/sec. It is counted in numbers of pages, so it can be compared to other counts of pages, such as Memory\\\\Page Faults/sec, without conversion. It includes pages retrieved to satisfy faults in the file system cache (usually requested by applications) non-cached mapped memory files.')
memoryPoolNonpagedAllocs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedAllocs.setStatus('current')
if mibBuilder.loadTexts: memoryPoolNonpagedAllocs.setDescription('Pool Nonpaged Allocs is the number of calls to allocate space in the nonpaged pool. The nonpaged pool is an area of system memory area for objects that cannot be written to disk, and must remain in physical memory as long as they are allocated. It is measured in numbers of calls to allocate space, regardless of the amount of space allocated in each call. This counter displays the last observed value only; it is not an average.')
memoryPoolNonpagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolNonpagedBytes.setDescription('Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory\\\\Pool Nonpaged Bytes is calculated differently than Process\\\\Pool Nonpaged Bytes, so it might not equal Process\\\\Pool Nonpaged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedAllocs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedAllocs.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedAllocs.setDescription('Pool Paged Allocs is the number of calls to allocate space in the paged pool. The paged pool is an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. It is measured in numbers of calls to allocate space, regardless of the amount of space allocated in each call. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedBytes.setDescription('Pool Paged Bytes is the size, in bytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory\\\\Pool Paged Bytes is calculated differently than Process\\\\Pool Paged Bytes, so it might not equal Process\\\\Pool Paged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedResidentBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedResidentBytes.setDescription('Pool Paged Resident Bytes is the current size, in bytes, of the paged pool. The paged pool is an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Space used by the paged and nonpaged pools are taken from physical memory, so a pool that is too large denies memory space to processes. This counter displays the last observed value only; it is not an average.')
memorySystemCacheResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCacheResidentBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCacheResidentBytes.setDescription('System Cache Resident Bytes is the size, in bytes, of the pageable operating system code in the file system cache. This value includes only current physical pages and does not include any virtual memory pages not currently resident. It does equal the System Cache value shown in Task Manager. As a result, this value may be smaller than the actual amount of virtual memory in use by the file system cache. This value is a component of Memory\\\\System Code Resident Bytes which represents all pageable operating system code that is currently in physical memory. This counter displays the last observed value only; it is not an average.')
memorySystemCodeResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeResidentBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCodeResidentBytes.setDescription('System Code Resident Bytes is the size, in bytes of the operating system code currently in physical memory that can be written to disk when not in use. This value is a component of Memory\\\\System Code Total Bytes, which also includes operating system code on disk. Memory\\\\System Code Resident Bytes (and Memory\\\\System Code Total Bytes) does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.')
memorySystemCodeTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeTotalBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCodeTotalBytes.setDescription('System Code Total Bytes is the size, in bytes, of the pageable operating system code currently in virtual memory. It is a measure of the amount of physical memory being used by the operating system that can be written to disk when not in use. This value is calculated by summing the bytes in Ntoskrnl.exe, Hal.dll, the boot drivers, and file systems loaded by Ntldr/osloader. This counter does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.')
memorySystemDriverResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverResidentBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemDriverResidentBytes.setDescription('System Driver Resident Bytes is the size, in bytes, of the pageable physical memory being used by device drivers. It is the working set (physical memory area) of the drivers. This value is a component of Memory\\\\System Driver Total Bytes, which also includes driver memory that has been written to disk. Neither Memory\\\\System Driver Resident Bytes nor Memory\\\\System Driver Total Bytes includes memory that cannot be written to disk.')
memorySystemDriverTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverTotalBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemDriverTotalBytes.setDescription('System Driver Total Bytes is the size, in bytes, of the pageable virtual memory currently being used by device drivers. Pageable memory can be written to disk when it is not being used. It includes physical memory (Memory\\\\System Driver Resident Bytes) and code and data paged to disk. It is a component of Memory\\\\System Code Total Bytes. This counter displays the last observed value only; it is not an average.')
memoryTranFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTranFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryTranFaultsPerSec.setDescription('Transition Faults/sec is the rate at which page faults are resolved by recovering pages that were being used by another process sharing the page, or were on the modified page list or the standby list, or were being written to disk at the time of the page fault. The pages were recovered without additional disk activity. Transition faults are counted in numbers of faults; because only one page is faulted in each operation, it is also equal to the number of pages faulted.')
memoryTranPagesRePurposedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTranPagesRePurposedPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryTranPagesRePurposedPerSec.setDescription('Transition Pages RePurposed is the rate at which the number of transition cache pages were reused for a different purpose. These pages would have otherwise remained in the page cache to provide a (fast) soft fault (instead of retrieving it from backing store) in the event the page was accessed in the future. Note these pages can contain private or sharable memory.')
memoryWriteCopiesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryWriteCopiesPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryWriteCopiesPerSec.setDescription('Write Copies/sec is the rate at which page faults are caused by attempts to write that have been satisfied by coping of the page from elsewhere in physical memory. This is an economical way of sharing data since pages are only copied when they are written to; otherwise, the page is shared. This counter shows the number of copies, without regard for the number of pages copied in each operation.')
memoryCacheKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCacheKBytes.setDescription('Cache KiloBytes is the sum of the Memory\\\\System Cache Resident KiloBytes, Memory\\\\System Driver Resident KiloBytes, Memory\\\\System Code Resident KiloBytes, and Memory\\\\Pool Paged Resident KiloBytes counters. This counter displays the last observed value only; it is not an average. ')
memoryCacheKBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheKBytesPeak.setStatus('current')
if mibBuilder.loadTexts: memoryCacheKBytesPeak.setDescription('Cache KiloBytes Peak is the maximum number of kilobytes used by the file system cache since the system was last restarted. This might be larger than the current size of the cache. This counter displays the last observed value only; it is not an average. ')
memoryCommittedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommittedKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCommittedKBytes.setDescription('Committed KiloBytes is the amount of committed virtual memory, in kilobytes. Committed memory is the physical memory which has space reserved on the disk paging file(s). There can be one or more paging files on each physical drive. This counter displays the last observed value only; it is not an average.')
memoryPoolNonpagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolNonpagedKBytes.setDescription('Pool Nonpaged KiloBytes is the size, in kilobytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory\\\\Pool Nonpaged KiloBytes is calculated differently than Process\\\\Pool Nonpaged KiloBytes, so it might not equal Process\\\\Pool Nonpaged KiloBytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedKBytes.setDescription('Pool Paged KiloBytes is the size, in kilobytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory\\\\Pool Paged KiloBytes is calculated differently than Process\\\\Pool Paged KiloBytes, so it might not equal Process\\\\Pool Paged KiloBytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedResidentKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedResidentKBytes.setDescription('Pool Paged Resident KiloBytes is the current size, in kilobytes, of the paged pool. The paged pool is an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Space used by the paged and nonpaged pools are taken from physical memory, so a pool that is too large denies memory space to processes. This counter displays the last observed value only; it is not an average.')
memorySystemCacheResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCacheResidentKBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCacheResidentKBytes.setDescription('System Cache Resident KiloBytes is the size, in kilobytes, of the pageable operating system code in the file system cache. This value includes only current physical pages and does not include any virtual memory pages not currently resident. It does equal the System Cache value shown in Task Manager. As a result, this value may be smaller than the actual amount of virtual memory in use by the file system cache. This value is a component of Memory\\\\System Code Resident KiloBytes which represents all pageable operating system code that is currently in physical memory. This counter displays the last observed value only; it is not an average. ')
memorySystemCodeResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeResidentKBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCodeResidentKBytes.setDescription('System Code Resident KiloBytes is the size, in kilobytes of the operating system code currently in physical memory that can be written to disk when not in use. This value is a component of Memory\\\\System Code Total KiloBytes, which also includes operating system code on disk. Memory\\\\System Code Resident KiloBytes (and Memory\\\\System Code Total KiloBytes) does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.')
memorySystemCodeTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeTotalKBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCodeTotalKBytes.setDescription('System Code Total KiloBytes is the size, in kilobytes, of the pageable operating system code currently in virtual memory. It is a measure of the amount of physical memory being used by the operating system that can be written to disk when not in use. This value is calculated by summing the kilobytes in Ntoskrnl.exe, Hal.dll, the boot drivers, and file systems loaded by Ntldr/osloader. This counter does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.')
memorySystemDriverResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverResidentKBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemDriverResidentKBytes.setDescription('System Driver Resident KiloBytes is the size, in kilobytes, of the pageable physical memory being used by device drivers. It is the working set (physical memory area) of the drivers. This value is a component of Memory\\\\System Driver Total KiloBytes, which also includes driver memory that has been written to disk. Neither Memory\\\\System Driver Resident KiloBytes nor Memory\\\\System Driver Total KiloBytes includes memory that cannot be written to disk.')
memorySystemDriverTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverTotalKBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemDriverTotalKBytes.setDescription('System Driver Total KiloBytes is the size, in kilobytes, of the pageable virtual memory currently being used by device drivers. Pageable memory can be written to disk when it is not being used. It includes physical memory (Memory\\\\System Driver Resident KiloBytes) and code and data paged to disk. It is a component of Memory\\\\System Code Total KiloBytes. This counter displays the last observed value only; it is not an average. ')
memoryCacheMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCacheMBytes.setDescription('Cache MegaBytes is the sum of the Memory\\\\System Cache Resident MegaBytes, Memory\\\\System Driver Resident MegaBytes, Memory\\\\System Code Resident MegaBytes, and Memory\\\\Pool Paged Resident MegaBytes counters. This counter displays the last observed value only; it is not an average. ')
memoryCacheMBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheMBytesPeak.setStatus('current')
if mibBuilder.loadTexts: memoryCacheMBytesPeak.setDescription('Cache MegaBytes Peak is the maximum number of megabytes used by the file system cache since the system was last restarted. This might be larger than the current size of the cache. This counter displays the last observed value only; it is not an average. ')
memoryCommittedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommittedMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCommittedMBytes.setDescription('Committed MegaBytes is the amount of committed virtual memory, in megabytes. Committed memory is the physical memory which has space reserved on the disk paging file(s). There can be one or more paging files on each physical drive. This counter displays the last observed value only; it is not an average.')
memoryPoolNonpagedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolNonpagedMBytes.setDescription('Pool Nonpaged MegaBytes is the size, in megabytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory\\\\Pool Nonpaged MegaBytes is calculated differently than Process\\\\Pool Nonpaged MegaBytes, so it might not equal Process\\\\Pool Nonpaged MegaBytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedMBytes.setDescription('Pool Paged MegaBytes is the size, in megabytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory\\\\Pool Paged MegaBytes is calculated differently than Process\\\\Pool Paged MegaBytes, so it might not equal Process\\\\Pool Paged MegaBytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
memoryPoolPagedResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedResidentMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryPoolPagedResidentMBytes.setDescription('Pool Paged Resident MegaBytes is the current size, in megabytes, of the paged pool. The paged pool is an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Space used by the paged and nonpaged pools are taken from physical memory, so a pool that is too large denies memory space to processes. This counter displays the last observed value only; it is not an average.')
memorySystemCacheResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCacheResidentMBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCacheResidentMBytes.setDescription('System Cache Resident MegaBytes is the size, in megabytes, of the pageable operating system code in the file system cache. This value includes only current physical pages and does not include any virtual memory pages not currently resident. It does equal the System Cache value shown in Task Manager. As a result, this value may be smaller than the actual amount of virtual memory in use by the file system cache. This value is a component of Memory\\\\System Code Resident MegaBytes which represents all pageable operating system code that is currently in physical memory. This counter displays the last observed value only; it is not an average. ')
memorySystemCodeResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeResidentMBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCodeResidentMBytes.setDescription('System Code Resident MegaBytes is the size, in megabytes of the operating system code currently in physical memory that can be written to disk when not in use. This value is a component of Memory\\\\System Code Total MegaBytes, which also includes operating system code on disk. Memory\\\\System Code Resident MegaBytes (and Memory\\\\System Code Total MegaBytes) does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.')
memorySystemCodeTotalMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeTotalMBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemCodeTotalMBytes.setDescription('System Code Total MegaBytes is the size, in megabytes, of the pageable operating system code currently in virtual memory. It is a measure of the amount of physical memory being used by the operating system that can be written to disk when not in use. This value is calculated by summing the megabytes in Ntoskrnl.exe, Hal.dll, the boot drivers, and file systems loaded by Ntldr/osloader. This counter does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.')
memorySystemDriverResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverResidentMBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemDriverResidentMBytes.setDescription('System Driver Resident MegaBytes is the size, in megabytes, of the pageable physical memory being used by device drivers. It is the working set (physical memory area) of the drivers. This value is a component of Memory\\\\System Driver Total MegaBytes, which also includes driver memory that has been written to disk. Neither Memory\\\\System Driver Resident MegaBytes nor Memory\\\\System Driver Total MegaBytes includes memory that cannot be written to disk.')
memorySystemDriverTotalMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverTotalMBytes.setStatus('current')
if mibBuilder.loadTexts: memorySystemDriverTotalMBytes.setDescription('System Driver Total MegaBytes is the size, in megabytes, of the pageable virtual memory currently being used by device drivers. Pageable memory can be written to disk when it is not being used. It includes physical memory (Memory\\\\System Driver Resident MegaBytes) and code and data paged to disk. It is a component of Memory\\\\System Code Total MegaBytes. This counter displays the last observed value only; it is not an average. ')
memoryFreeZeroPageListBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreeZeroPageListBytes.setStatus('current')
if mibBuilder.loadTexts: memoryFreeZeroPageListBytes.setDescription('Free & Zero Page List Bytes is the amount of physical memory, in bytes, that is assigned to the free and zero page lists. This memory does not contain cached data. It is immediately available for allocation to a process or for system use. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryFreeZeroPageListKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreeZeroPageListKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryFreeZeroPageListKBytes.setDescription('Free & Zero Page List KiloBytes is the amount of physical memory, in kilobytes, that is assigned to the free and zero page lists. This memory does not contain cached data. It is immediately available for allocation to a process or for system use. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryFreeZeroPageListMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreeZeroPageListMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryFreeZeroPageListMBytes.setDescription('Free & Zero Page List MegaBytes is the amount of physical memory, in megabytes, that is assigned to the free and zero page lists. This memory does not contain cached data. It is immediately available for allocation to a process or for system use. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryModifiedPageListBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryModifiedPageListBytes.setStatus('current')
if mibBuilder.loadTexts: memoryModifiedPageListBytes.setDescription('Modified Page List Bytes is the amount of physical memory, in bytes, that is assigned to the modified page list. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. This memory needs to be written out before it will be available for allocation to a process or for system use. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryModifiedPageListKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryModifiedPageListKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryModifiedPageListKBytes.setDescription('Modified Page List KiloBytes is the amount of physical memory, in kilobytes, that is assigned to the modified page list. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. This memory needs to be written out before it will be available for allocation to a process or for system use. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryModifiedPageListMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryModifiedPageListMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryModifiedPageListMBytes.setDescription('Modified Page List MegaBytes is the amount of physical memory, in megabytes, that is assigned to the modified page list. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. This memory needs to be written out before it will be available for allocation to a process or for system use. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheCoreBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheCoreBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheCoreBytes.setDescription('Standby Cache Core Bytes is the amount of physical memory, in bytes, that is assigned to the core standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheCoreKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheCoreKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheCoreKBytes.setDescription('Standby Cache Core KiloBytes is the amount of physical memory, in kilobytes, that is assigned to the core standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheCoreMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheCoreMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheCoreMBytes.setDescription('Standby Cache Core MegaBytes is the amount of physical memory, in megabytes, that is assigned to the core standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheNormPriorityBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheNormPriorityBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheNormPriorityBytes.setDescription('Standby Cache Normal Priority Bytes is the amount of physical memory, in bytes, that is assigned to the normal priority standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheNormPriorityKByte = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheNormPriorityKByte.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheNormPriorityKByte.setDescription('Standby Cache Normal Priority KiloBytes is the amount of physical memory, in kilobytes, that is assigned to the normal priority standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheNormPriorityMByte = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheNormPriorityMByte.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheNormPriorityMByte.setDescription('Standby Cache Normal Priority MegaBytes is the amount of physical memory, in megabytes, that is assigned to the normal priority standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheReserveBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheReserveBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheReserveBytes.setDescription('Standby Cache Reserve Bytes is the amount of physical memory, in bytes, that is assigned to the reserve standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheReserveKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheReserveKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheReserveKBytes.setDescription('Standby Cache Reserve KiloBytes is the amount of physical memory, in kilobytes, that is assigned to the reserve standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryStbyCacheReserveMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStbyCacheReserveMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryStbyCacheReserveMBytes.setDescription('Standby Cache Reserve MegaBytes is the amount of physical memory, in megabytes, that is assigned to the reserve standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists. For a full explanation of the memory manager, refer to MSDN and/or the System Performance and Troubleshooting Guide chapter in the Windows Server 2003 Resource Kit.')
memoryTransPagesRePurposedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTransPagesRePurposedPerSec.setStatus('current')
if mibBuilder.loadTexts: memoryTransPagesRePurposedPerSec.setDescription('Transition Pages RePurposed is the rate at which the number of transition cache pages were reused for a different purpose. These pages would have otherwise remained in the page cache to provide a (fast) soft fault (instead of retrieving it from backing store) in the event the page was accessed in the future. Note these pages can contain private or sharable memory.')
memoryCommitLimitKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommitLimitKBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCommitLimitKBytes.setDescription('Commit Limit is the amount of virtual memory that can be committed without having to extend the paging file(s). It is measured in kilobytes. Committed memory is the physical memory which has space reserved on the disk paging files. There can be one paging file on each logical drive). If the paging file(s) are be expanded, this limit increases accordingly. This counter displays the last observed value only; it is not an average.')
memoryCommitLimitMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 46, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommitLimitMBytes.setStatus('current')
if mibBuilder.loadTexts: memoryCommitLimitMBytes.setDescription('Commit Limit is the amount of virtual memory that can be committed without having to extend the paging file(s). It is measured in megabytes. Committed memory is the physical memory which has space reserved on the disk paging files. There can be one paging file on each logical drive). If the paging file(s) are be expanded, this limit increases accordingly. This counter displays the last observed value only; it is not an average.')
msmqQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47), )
if mibBuilder.loadTexts: msmqQueueTable.setStatus('current')
if mibBuilder.loadTexts: msmqQueueTable.setDescription("The MSMQ Queue performance object monitors message statistics for a selected queue. There are instances for each queue on the computer. In addition, if an Message Queuing-based application has a private queue open on another computer, an instance for that queue is also available. The computer queues instance represents the computer's source journal and dead letter queues.")
msmqQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47, 1), ).setIndexNames((0, "INFORMANT-ADV", "msmqInstance"))
if mibBuilder.loadTexts: msmqQueueEntry.setStatus('current')
if mibBuilder.loadTexts: msmqQueueEntry.setDescription("Performance information for one particular instance of 'MSMQ Queue' object.")
msmqInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqInstance.setStatus('current')
if mibBuilder.loadTexts: msmqInstance.setDescription('Instance name.')
msmqBytesInJournalQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqBytesInJournalQueue.setStatus('current')
if mibBuilder.loadTexts: msmqBytesInJournalQueue.setDescription('The total number of bytes that currently reside in the journal queue. For the computer queues instance, this represents the computer journal queue.')
msmqBytesInQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqBytesInQueue.setStatus('current')
if mibBuilder.loadTexts: msmqBytesInQueue.setDescription('The total number of bytes that currently reside in the queue. For the computer queues instance, this represents the dead letter queue.')
msmqMessagesInJournalQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqMessagesInJournalQueue.setStatus('current')
if mibBuilder.loadTexts: msmqMessagesInJournalQueue.setDescription('The total number of messages that currently reside in the journal queue. For the computer queues instance, this represents the computer journal queue.')
msmqMessagesInQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 47, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqMessagesInQueue.setStatus('current')
if mibBuilder.loadTexts: msmqMessagesInQueue.setDescription('The total number of messages that currently reside in the queue. For the computer queues instance, this represents the dead letter queue.')
msmqService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48))
if mibBuilder.loadTexts: msmqService.setStatus('current')
if mibBuilder.loadTexts: msmqService.setDescription('The MSMQ Service performance object monitors session and message statistics for a selected computer that is running Message Queuing.')
msmqSvcIPSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcIPSessions.setStatus('current')
if mibBuilder.loadTexts: msmqSvcIPSessions.setDescription('Number of open IP sessions.')
msmqSvcIPXSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcIPXSessions.setStatus('current')
if mibBuilder.loadTexts: msmqSvcIPXSessions.setDescription('Number of open IPX sessions.')
msmqSvcIncomingMessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcIncomingMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqSvcIncomingMessagesPerSec.setDescription('The rate of incoming MSMQ messages handled by the MSMQ service.')
msmqSvcMSMQIncomingMessages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcMSMQIncomingMessages.setStatus('current')
if mibBuilder.loadTexts: msmqSvcMSMQIncomingMessages.setDescription('The total number of incoming messages handled by the MSMQ service.')
msmqSvcMSMQOutgoingMessages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcMSMQOutgoingMessages.setStatus('current')
if mibBuilder.loadTexts: msmqSvcMSMQOutgoingMessages.setDescription('The total number of outgoing messages handled by the MSMQ service.')
msmqSvcOutgoingMessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcOutgoingMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqSvcOutgoingMessagesPerSec.setDescription('The rate of outgoing MSMQ messages handled by the MSMQ service.')
msmqSvcSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcSessions.setStatus('current')
if mibBuilder.loadTexts: msmqSvcSessions.setDescription('The total number of open network sessions.')
msmqSvcTotalBytesInAllQueues = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcTotalBytesInAllQueues.setStatus('current')
if mibBuilder.loadTexts: msmqSvcTotalBytesInAllQueues.setDescription('The total number of bytes in all active queues under the MSMQ service.')
msmqSvcTotalMessagesInAllQueues = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcTotalMessagesInAllQueues.setStatus('current')
if mibBuilder.loadTexts: msmqSvcTotalMessagesInAllQueues.setDescription('The total number of messages in all active queues under the MSMQ service.')
msmqSvcIncomingMulticastSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcIncomingMulticastSessions.setStatus('current')
if mibBuilder.loadTexts: msmqSvcIncomingMulticastSessions.setDescription('The number of open incoming multicast sessions involving the selected computer.')
msmqSvcOutgoingHTTPSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcOutgoingHTTPSessions.setStatus('current')
if mibBuilder.loadTexts: msmqSvcOutgoingHTTPSessions.setDescription('The number of open outgoing HTTP sessions involving the selected computer.')
msmqSvcOutgoingMulticastSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 48, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqSvcOutgoingMulticastSessions.setStatus('current')
if mibBuilder.loadTexts: msmqSvcOutgoingMulticastSessions.setDescription('The number of open outgoing multicast sessions involving the selected computer.')
nbtConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 49), )
if mibBuilder.loadTexts: nbtConnectionTable.setStatus('current')
if mibBuilder.loadTexts: nbtConnectionTable.setDescription('The NBT Connection performance object consists of counters that measure the rates at which bytes are sent and received over the NetBIOS over TCP/IP (NetBT or NBT) protocol provides NetBIOS support for the TCP/IP protocol. NBT connection between the local computer and a remote computer. The connection is identified by the name of the remote computer.')
nbtConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 49, 1), ).setIndexNames((0, "INFORMANT-ADV", "nbtConnectionInstance"))
if mibBuilder.loadTexts: nbtConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: nbtConnectionEntry.setDescription("Performance information for one particular instance of 'NBT Connection' object.")
nbtConnectionInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 49, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbtConnectionInstance.setStatus('current')
if mibBuilder.loadTexts: nbtConnectionInstance.setDescription('Instance name.')
nbtConnectionBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 49, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbtConnectionBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: nbtConnectionBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate at which bytes are received by the local computer over an NBT connection to some remote computer. All the bytes received by the local computer over the particular NBT connection are counted.')
nbtConnectionBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 49, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbtConnectionBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: nbtConnectionBytesSentPerSec.setDescription('Bytes Sent/sec is the rate at which bytes are sent by the local computer over an NBT connection to some remote computer. All the bytes sent by the local computer over the particular NBT connection are counted.')
nbtConnectionBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 49, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbtConnectionBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: nbtConnectionBytesTotalPerSec.setDescription('Bytes Total/sec is the rate at which bytes are sent or received by the local computer over an NBT connection to some remote computer. All the bytes sent or received by the local computer over the particular NBT connection are counted.')
netBEUITable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50), )
if mibBuilder.loadTexts: netBEUITable.setStatus('current')
if mibBuilder.loadTexts: netBEUITable.setDescription('The NetBEUI performance object consists of counters that measure data transmission for network activity which conforms to the NetBIOS End User Interface (NetBEUI) standard.')
netBEUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1), ).setIndexNames((0, "INFORMANT-ADV", "netBEUIInstance"))
if mibBuilder.loadTexts: netBEUIEntry.setStatus('current')
if mibBuilder.loadTexts: netBEUIEntry.setDescription("Performance information for one particular instance of 'NetBEUI' object.")
netBEUIInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIInstance.setStatus('current')
if mibBuilder.loadTexts: netBEUIInstance.setDescription('Instance name.')
netBEUIBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Frame Bytes/sec and Datagram Bytes/sec. This is the total rate of bytes sent to or received from the network by the protocol, but only counts the bytes in frames (i.e., packets) which carry data.')
netBEUIConnectionSessionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIConnectionSessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: netBEUIConnectionSessionTimeouts.setDescription('Connection Session Timeouts is the number of connections that were dropped due to a session timeout. This number is an accumulator and shows a running total.')
netBEUIConnectionsCanceled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIConnectionsCanceled.setStatus('current')
if mibBuilder.loadTexts: netBEUIConnectionsCanceled.setDescription('Connections Canceled is the number of connections that were canceled. This number is an accumulator and shows a running total.')
netBEUIConnectionsNoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIConnectionsNoRetries.setStatus('current')
if mibBuilder.loadTexts: netBEUIConnectionsNoRetries.setDescription('Connections No Retries is the total count of connections that were successfully made on the first try. This number is an accumulator and shows a running total.')
netBEUIConnectionsOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIConnectionsOpen.setStatus('current')
if mibBuilder.loadTexts: netBEUIConnectionsOpen.setDescription('Connections Open is the number of connections currently open for this protocol. This counter shows the current count only and does not accumulate over time.')
netBEUIConnectionsWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIConnectionsWithRetries.setStatus('current')
if mibBuilder.loadTexts: netBEUIConnectionsWithRetries.setDescription('Connections With Retries is the total count of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed. This number is an accumulator and shows a running total.')
netBEUIDatagramBytesRcvdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDatagramBytesRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIDatagramBytesRcvdPerSec.setDescription('Datagram Bytes Received/sec is the rate at which datagram bytes are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBEUIDatagramBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDatagramBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIDatagramBytesSentPerSec.setDescription('Datagram Bytes Sent/sec is the rate at which datagram bytes are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBEUIDatagramBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDatagramBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIDatagramBytesPerSec.setDescription('Datagram Bytes/sec is the rate at which datagram bytes are processed by the computer. This counter is the sum of datagram bytes that are sent as well as received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
netBEUIDatagramsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDatagramsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIDatagramsReceivedPerSec.setDescription('Datagrams Received/sec is the rate at which datagrams are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBEUIDatagramsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIDatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate at which datagrams are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBEUIDatagramsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIDatagramsPerSec.setDescription('Datagrams/sec is the rate at which datagrams are processed by the computer. This counter displays the sum of datagrams sent and datagrams received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
netBEUIDisconnectsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDisconnectsLocal.setStatus('current')
if mibBuilder.loadTexts: netBEUIDisconnectsLocal.setDescription('Disconnects Local is the number of session disconnections that were initiated by the local computer. This number is an accumulator and shows a running total.')
netBEUIDisconnectsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIDisconnectsRemote.setStatus('current')
if mibBuilder.loadTexts: netBEUIDisconnectsRemote.setDescription('Disconnects Remote is the number of session disconnections that were initiated by the remote computer. This number is an accumulator and shows a running total.')
netBEUIExpirationsAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIExpirationsAck.setStatus('current')
if mibBuilder.loadTexts: netBEUIExpirationsAck.setDescription('Expirations Ack is the count of T2 timer expirations.')
netBEUIExpirationsResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIExpirationsResponse.setStatus('current')
if mibBuilder.loadTexts: netBEUIExpirationsResponse.setDescription('Expirations Response is the count of T1 timer expirations.')
netBEUIFailuresAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFailuresAdapter.setStatus('current')
if mibBuilder.loadTexts: netBEUIFailuresAdapter.setDescription('Failures Adapter is the number of connections that were dropped due to an adapter failure. This number is an accumulator and shows a running total.')
netBEUIFailuresLink = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFailuresLink.setStatus('current')
if mibBuilder.loadTexts: netBEUIFailuresLink.setDescription('Failures Link is the number of connections that were dropped due to a link failure. This number is an accumulator and shows a running total.')
netBEUIFailuresNoListen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFailuresNoListen.setStatus('current')
if mibBuilder.loadTexts: netBEUIFailuresNoListen.setDescription('Failures No Listen is the number of connections that were rejected because the remote computer was not listening for connection requests.')
netBEUIFailuresNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFailuresNotFound.setStatus('current')
if mibBuilder.loadTexts: netBEUIFailuresNotFound.setDescription('Failures Not Found is the number of connection attempts that failed because the remote computer could not be found. This number is an accumulator and shows a running total.')
netBEUIFailuresResourceLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFailuresResourceLocal.setStatus('current')
if mibBuilder.loadTexts: netBEUIFailuresResourceLocal.setDescription('Failures Resource Local is the number of connections that failed because of resource problems or shortages on the local computer. This number is an accumulator and shows a running total.')
netBEUIFailuresResourceRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFailuresResourceRemote.setStatus('current')
if mibBuilder.loadTexts: netBEUIFailuresResourceRemote.setDescription('Failures Resource Remote is the number of connections that failed because of resource problems or shortages on the remote computer. This number is an accumulator and shows a running total.')
netBEUIFrameBytesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFrameBytesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFrameBytesReSentPerSec.setDescription('Frame Bytes Re-Sent/sec is the rate at which data bytes are re-sent by the computer. This counter only counts the bytes in frames that carry data.')
netBEUIFrameBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFrameBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFrameBytesReceivedPerSec.setDescription('Frame Bytes Received/sec is the rate at which data bytes are received by the computer. This counter only counts the frames (packets) that carry data.')
netBEUIFrameBytesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFrameBytesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFrameBytesRejectedPerSec.setDescription('Frame Bytes Rejected/sec is the rate at which data bytes are rejected. This counter only counts the bytes in data frames (packets) that carry data.')
netBEUIFrameBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFrameBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFrameBytesSentPerSec.setDescription('Frame Bytes Sent/sec is the rate at which data bytes are sent by the computer. This counter only counts the bytes in frames (packets) that carry data.')
netBEUIFrameBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFrameBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFrameBytesPerSec.setDescription('Frame Bytes/sec is the rate at which data bytes are processed by the computer. This counter is the sum of data frame bytes sent and received. This counter only counts the byte in frames (packets) that carry data.')
netBEUIFramesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFramesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFramesReSentPerSec.setDescription('Frames Re-Sent/sec is the rate at which data frames (packets) are re-sent by the computer. This counter only counts the frames or packets that carry data.')
netBEUIFramesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFramesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFramesReceivedPerSec.setDescription('Frames Received/sec is the rate at which data frames are received by the computer. This counter only counts the frames (packets) that carry data.')
netBEUIFramesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFramesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFramesRejectedPerSec.setDescription('Frames Rejected/sec is the rate at which data frames are rejected. This counter only counts the frames (packets) that carry data.')
netBEUIFramesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFramesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFramesSentPerSec.setDescription('Frames Sent/sec is the rate at which data frames are sent by the computer. This counter only counts the frames (packets) that carry data.')
netBEUIFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIFramesPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIFramesPerSec.setDescription('Frames/sec is the rate at which data frames (or packets) are processed by the computer. This counter is the sum of data frames sent and data frames received. This counter only counts those frames (packets) that carry data.')
netBEUIPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which packets are received by the computer. This counter counts all packets processed: control as well as data packets.')
netBEUIPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIPacketsSentPerSec.setDescription('Packets Sent/sec is the rate at which packets are sent by the computer. This counter counts all packets sent by the computer, i.e. control as well as data packets.')
netBEUIPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIPacketsPerSec.setDescription('Packets/sec is the rate at which packets are processed by the computer. This count is the sum of Packets Sent and Packets Received per second. This counter includes all packets processed: control as well as data packets.')
netBEUIPiggybackAckQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIPiggybackAckQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBEUIPiggybackAckQueuedPerSec.setDescription('Piggyback Ack Queued/sec is the rate at which piggybacked acknowledgments are queued. Piggyback acknowledgments are acknowledgments to received packets that are to be included in the next outgoing packet to the remote computer.')
netBEUIPiggybackAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIPiggybackAckTimeouts.setStatus('current')
if mibBuilder.loadTexts: netBEUIPiggybackAckTimeouts.setDescription('Piggyback Ack Timeouts is the number of times that a piggyback acknowledgment could not be sent because there was no outgoing packet to the remote on which to piggyback. A piggyback ack is an acknowledgment to a received packet that is sent along in an outgoing data packet to the remote computer. If no outgoing packet is sent within the timeout period, then an ack packet is sent and this counter is incremented.')
netBEUIWindowSendAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIWindowSendAverage.setStatus('current')
if mibBuilder.loadTexts: netBEUIWindowSendAverage.setDescription('Window Send Average is the running average number of data bytes that were sent before waiting for an acknowledgment from the remote computer.')
netBEUIWindowSendMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 50, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIWindowSendMaximum.setStatus('current')
if mibBuilder.loadTexts: netBEUIWindowSendMaximum.setDescription('Window Send Maximum is the maximum number of bytes of data that will be sent before waiting for an acknowledgment from the remote computer.')
netBEUIResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 51), )
if mibBuilder.loadTexts: netBEUIResourceTable.setStatus('current')
if mibBuilder.loadTexts: netBEUIResourceTable.setDescription('The NetBEUI Resource performance object consists of counters that track the use of buffers by the NetBEUI protocol.')
netBEUIResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 51, 1), ).setIndexNames((0, "INFORMANT-ADV", "netBEUIResourceInstance"))
if mibBuilder.loadTexts: netBEUIResourceEntry.setStatus('current')
if mibBuilder.loadTexts: netBEUIResourceEntry.setDescription("Performance information for one particular instance of 'NetBEUI Resource' object.")
netBEUIResourceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 51, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIResourceInstance.setStatus('current')
if mibBuilder.loadTexts: netBEUIResourceInstance.setDescription('Instance name.')
netBEUIResourceTimesExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 51, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIResourceTimesExhausted.setStatus('current')
if mibBuilder.loadTexts: netBEUIResourceTimesExhausted.setDescription('Times Exhausted is the number of times all the resources (buffers) were in use. The number in parentheses following the resource name is used to identify the resource in Event Log messages.')
netBEUIResourceUsedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 51, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIResourceUsedAverage.setStatus('current')
if mibBuilder.loadTexts: netBEUIResourceUsedAverage.setDescription('Used Average is the current number of resources (buffers) in use at this time. The number in parentheses following the resource name is used to identify the resource in Event Log messages.')
netBEUIResourceUsedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 51, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBEUIResourceUsedMaximum.setStatus('current')
if mibBuilder.loadTexts: netBEUIResourceUsedMaximum.setDescription('Used Maximum is the maximum number of NetBEUI resources (buffers) in use at any point in time. This value is useful in sizing the maximum resources provided. The number in parentheses following the resource name is used to identify the resource in Event Log messages.')
networkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52), )
if mibBuilder.loadTexts: networkInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: networkInterfaceTable.setDescription('The Network Interface performance object consists of counters that measure the rates at which bytes and packets are sent and received over a TCP/IP connection. It includes counters that monitor connection errors. The Network Interface counters display data about the network adapters on the server computer. The first instance of the Network Interface object (Instance 1) that you see in System Monitor represents the loopback. The loopback is a local path through the protocol driver and the network adapter. All other instances represent installed network adapters.')
networkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1), ).setIndexNames((0, "INFORMANT-ADV", "netInstance"))
if mibBuilder.loadTexts: networkInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: networkInterfaceEntry.setDescription("Performance information for one particular instance of 'Network Interface' object.")
netInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netInstance.setStatus('current')
if mibBuilder.loadTexts: netInstance.setDescription('Instance name.')
netBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters. Network Interface\\Bytes Received/sec is a subset of Network Interface\\Bytes Total/sec.')
netBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBytesSentPerSec.setDescription('Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters. Network Interface\\Bytes Sent/sec is a subset of Network Interface\\Bytes Total/sec.')
netBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: netBytesTotalPerSec.setDescription('Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters. Network Interface\\Bytes Total/sec is a sum of Network Interface\\Bytes Received/sec and Network Interface\\Bytes Sent/sec.')
netCurrentBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCurrentBandwidth.setStatus('current')
if mibBuilder.loadTexts: netCurrentBandwidth.setDescription('Current Bandwidth is an estimate of the current bandwidth of the network interface in bits per second (BPS). For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this value is the nominal bandwidth.')
netOutputQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOutputQueueLength.setStatus('current')
if mibBuilder.loadTexts: netOutputQueueLength.setDescription('Output Queue Length is the length of the output packet queue (in packets). If this is longer than two, there are delays and the bottleneck should be found and eliminated, if possible. Since the requests are queued by the Network Driver Interface Specification (NDIS) in this implementation, this will always be 0.')
netPacketsOutboundDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsOutboundDiscarded.setStatus('current')
if mibBuilder.loadTexts: netPacketsOutboundDiscarded.setDescription('Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission. One possible reason for discarding packets could be to free up buffer space.')
netPacketsOutboundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsOutboundErrors.setStatus('current')
if mibBuilder.loadTexts: netPacketsOutboundErrors.setDescription('Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors.')
netPacketsReceivedDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedDiscarded.setStatus('current')
if mibBuilder.loadTexts: netPacketsReceivedDiscarded.setDescription('Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol. One possible reason for discarding packets could be to free up buffer space.')
netPacketsReceivedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedErrors.setStatus('current')
if mibBuilder.loadTexts: netPacketsReceivedErrors.setDescription('Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
netPacketsRcvdNonUnicastPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsRcvdNonUnicastPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsRcvdNonUnicastPerSec.setDescription('Packets Received Non-Unicast/sec is the rate at which non-unicast (subnet broadcast or subnet multicast) packets are delivered to a higher-layer protocol.')
netPacketsReceivedUnicastPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedUnicastPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsReceivedUnicastPerSec.setDescription('Packets Received Unicast/sec is the rate at which (subnet) unicast packets are delivered to a higher-layer protocol.')
netPacketsReceivedUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedUnknown.setStatus('current')
if mibBuilder.loadTexts: netPacketsReceivedUnknown.setDescription('Packets Received Unknown is the number of packets received through the interface that were discarded because of an unknown or unsupported protocol.')
netPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which packets are received on the network interface.')
netPacketsSentNonUnicastPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsSentNonUnicastPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsSentNonUnicastPerSec.setDescription('Packets Sent Non-Unicast/sec is the rate at which packets are requested to be transmitted to non-unicast (subnet broadcast or subnet multicast) addresses by higher-level protocols. The rate includes the packets that were discarded or not sent.')
netPacketsSentUnicastPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsSentUnicastPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsSentUnicastPerSec.setDescription('Packets Sent Unicast/sec is the rate at which packets are requested to be transmitted to subnet-unicast addresses by higher-level protocols. The rate includes the packets that were discarded or not sent.')
netPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsSentPerSec.setDescription('Packets Sent/sec is the rate at which packets are sent on the network interface.')
netPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 52, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: netPacketsPerSec.setDescription('Packets/sec is the rate at which packets are sent and received on the network interface.')
nntpCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53), )
if mibBuilder.loadTexts: nntpCommandsTable.setStatus('current')
if mibBuilder.loadTexts: nntpCommandsTable.setDescription('The NNTP Commands performance object includes counters for all NNTP commands processed by the Network News Transport Protocol (NNTP) service, which is installed as an optional component of Internet Information Services. NNTP counters are started for each virtual server instance and are reset to zero when the virtual server is started. A single NNTP service can have many virtual servers (also called sites).')
nntpCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1), ).setIndexNames((0, "INFORMANT-ADV", "nntpCmdsInstance"))
if mibBuilder.loadTexts: nntpCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: nntpCommandsEntry.setDescription("Performance information for one particular instance of 'NNTP Commands' object.")
nntpCmdsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsInstance.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsInstance.setDescription('Instance name.')
nntpCmdsArticleCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsArticleCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsArticleCmds.setDescription('Article Commands is the number of ARTICLE commands received by the NNTP Server since it was started.')
nntpCmdsArticleCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsArticleCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsArticleCmdsPerSec.setDescription('Article Commands/Sec is the number of ARTICLE commands per sec received by the NNTP Server since it was started.')
nntpCmdsCheckCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsCheckCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsCheckCmds.setDescription('Check Commands is the number of CHECK commands received by the NNTP Server since it was started.')
nntpCmdsCheckCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsCheckCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsCheckCmdsPerSec.setDescription('Check Commands/Sec is the number of CHECK commands per sec received by the NNTP Server since it was started.')
nntpCmdsGroupCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsGroupCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsGroupCmds.setDescription('Group Commands is the number of GROUP commands received by the NNTP Server since it was started.')
nntpCmdsGroupCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsGroupCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsGroupCmdsPerSec.setDescription('Group Commands/Sec is the number of GROUP commands per sec received by the NNTP Server since it was started.')
nntpCmdsHelpCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsHelpCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsHelpCmds.setDescription('Help Commands is the number of HELP commands received by the NNTP Server since it was started.')
nntpCmdsHelpCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsHelpCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsHelpCmdsPerSec.setDescription('Help Commands/Sec is the number of HELP commands per sec received by the NNTP Server since it was started.')
nntpCmdsIHaveCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsIHaveCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsIHaveCmds.setDescription('IHave Commands is the number of IHAVE commands received by the NNTP Server since it was started.')
nntpCmdsIHaveCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsIHaveCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsIHaveCmdsPerSec.setDescription('IHave Commands/Sec is the number of IHAVE commands per sec received by the NNTP Server since it was started.')
nntpCmdsLastCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsLastCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsLastCmds.setDescription('Last Commands is the number of LAST commands received by the NNTP Server since it was started.')
nntpCmdsLastCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsLastCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsLastCmdsPerSec.setDescription('Last Commands/Sec is the number of LAST commands per sec received by the NNTP Server since it was started.')
nntpCmdsListCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsListCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsListCmds.setDescription('List Commands is the number of LIST commands received by the NNTP Server since it was started.')
nntpCmdsListCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsListCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsListCmdsPerSec.setDescription('List Commands/Sec is the number of LIST commands per sec received by the NNTP Server since it was started.')
nntpCmdsLogonAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsLogonAttempts.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsLogonAttempts.setDescription('Logon Attempts is the number of logon attempts that have been made to the NNTP Server.')
nntpCmdsLogonAttemptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsLogonAttemptsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsLogonAttemptsPerSec.setDescription('Logon Attempts/Sec is the number of logon attempts per sec that have been made to the NNTP Server.')
nntpCmdsLogonFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsLogonFailures.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsLogonFailures.setDescription('Logon Failures is the number of logons that had failed.')
nntpCmdsLogonFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsLogonFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsLogonFailuresPerSec.setDescription('Logon Failures/Sec is the number of logons per sec that had failed.')
nntpCmdsModeCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsModeCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsModeCmds.setDescription('Mode Commands is the number of MODE commands received by the NNTP Server since it was started.')
nntpCmdsModeCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsModeCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsModeCmdsPerSec.setDescription('Mode Commands/Sec is the number of MODE commands per sec received by the NNTP Server since it was started.')
nntpCmdsNewgroupsCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsNewgroupsCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsNewgroupsCmds.setDescription('Newgroups Commands is the number of NEWGROUPS commands received by the NNTP Server since it was started.')
nntpCmdsNewgroupsCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsNewgroupsCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsNewgroupsCmdsPerSec.setDescription('Newgroups Commands/Sec is the number of NEWGROUPS commands per sec received by the NNTP Server since it was started.')
nntpCmdsNewnewsCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsNewnewsCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsNewnewsCmds.setDescription('Newnews Commands is the number of NEWNEWS commands received by the NNTP Server since it was started.')
nntpCmdsNewnewsCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsNewnewsCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsNewnewsCmdsPerSec.setDescription('Newnews Commands/Sec is the number of NEWNEWS commands per sec received by the NNTP Server since it was started.')
nntpCmdsNextCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsNextCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsNextCmds.setDescription('Next Commands is the number of NEXT commands received by the NNTP Server since it was started.')
nntpCmdsNextCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsNextCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsNextCmdsPerSec.setDescription('Next Commands/Sec is the number of NEXT commands per sec received by the NNTP Server since it was started.')
nntpCmdsPostCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsPostCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsPostCmds.setDescription('Post Commands is the number of POST commands received by the NNTP Server since it was started.')
nntpCmdsPostCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsPostCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsPostCmdsPerSec.setDescription('Post Commands/Sec is the number of POST commands per sec received by the NNTP Server since it was started.')
nntpCmdsQuitCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsQuitCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsQuitCmds.setDescription('Quit Commands is the number of QUIT commands received by the NNTP Server since it was started.')
nntpCmdsQuitCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsQuitCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsQuitCmdsPerSec.setDescription('Quit Commands/Sec is the number of QUIT commands per sec received by the NNTP Server since it was started.')
nntpCmdsSearchCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsSearchCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsSearchCmds.setDescription('Search Commands is the number of SEARCH commands received by the NNTP Server since it was started.')
nntpCmdsSearchCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsSearchCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsSearchCmdsPerSec.setDescription('Search Commands/Sec is the number of SEARCH commands per sec received by the NNTP Server since it was started.')
nntpCmdsStatCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsStatCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsStatCmds.setDescription('Stat Commands is the number of STAT commands received by the NNTP Server since it was started.')
nntpCmdsStatCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsStatCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsStatCmdsPerSec.setDescription('Stat Commands/Sec is the number of STAT commands per sec received by the NNTP Server since it was started.')
nntpCmdsTakethisCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsTakethisCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsTakethisCmds.setDescription('Takethis Commands is the number of TAKETHIS commands received by the NNTP Server since it was started.')
nntpCmdsTakethisCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsTakethisCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsTakethisCmdsPerSec.setDescription('Takethis Commands/Sec is the number of TAKETHIS commands per sec received by the NNTP Server since it was started.')
nntpCmdsXHdrCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXHdrCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXHdrCmds.setDescription('XHdr Commands is the number of XHDR commands received by the NNTP Server since it was started.')
nntpCmdsXHdrCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXHdrCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXHdrCmdsPerSec.setDescription('XHdr Commands/Sec is the number of XHDR commands per sec received by the NNTP Server since it was started.')
nntpCmdsXOverCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXOverCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXOverCmds.setDescription('XOver Commands is the number of XOVER commands received by the NNTP Server since it was started.')
nntpCmdsXOverCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXOverCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXOverCmdsPerSec.setDescription('XOver Commands/Sec is the number of XOVER commands per sec received by the NNTP Server since it was started.')
nntpCmdsXPatCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXPatCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXPatCmds.setDescription('XPat Commands is the number of XPAT commands received by the NNTP Server since it was started.')
nntpCmdsXPatCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXPatCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXPatCmdsPerSec.setDescription('XPat Commands/Sec is the number of XPAT commands per sec received by the NNTP Server since it was started.')
nntpCmdsXReplicCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXReplicCmds.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXReplicCmds.setDescription('XReplic Commands is the number of XREPLIC commands received by the NNTP Server since it was started.')
nntpCmdsXReplicCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 53, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpCmdsXReplicCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpCmdsXReplicCmdsPerSec.setDescription('XReplic Commands/Sec is the number of XREPLIC commands per sec received by the NNTP Server since it was started.')
nntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54), )
if mibBuilder.loadTexts: nntpServerTable.setStatus('current')
if mibBuilder.loadTexts: nntpServerTable.setDescription('The NNTP Server performance object monitors posting, authentication, and connection activity on an NNTP server. The Network News Transport Protocol (NNTP) service is an optional component of Internet Information Services. NNTP counters are started for each virtual server instance and are reset to zero when the virtual server is started. A single NNTP service can have many virtual servers (also called sites).')
nntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1), ).setIndexNames((0, "INFORMANT-ADV", "nntpSrvrInstance"))
if mibBuilder.loadTexts: nntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: nntpServerEntry.setDescription("Performance information for one particular instance of 'NNTP Server' object.")
nntpSrvrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrInstance.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrInstance.setDescription('Instance name.')
nntpSrvrArticleMapEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticleMapEntries.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticleMapEntries.setDescription('Article Map Entries is the entries inserted into the article mapping table of the NNTP Server.')
nntpSrvrArticleMapEntriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticleMapEntriesPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticleMapEntriesPerSec.setDescription('Article Map Entries/Sec is the entries inserted per sec into the article mapping table of the NNTP Server.')
nntpSrvrArticlesDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesDeleted.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesDeleted.setDescription('Articles Deleted is the number of articles deleted on the NNTP Server since it was started.')
nntpSrvrArticlesDeletedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesDeletedPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesDeletedPerSec.setDescription('Articles Deleted/Sec is the number of articles deleted per sec on the NNTP Server since it was started.')
nntpSrvrArticlesPosted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesPosted.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesPosted.setDescription('Articles Posted is the number of articles posted to the NNTP Server.')
nntpSrvrArticlesPostedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesPostedPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesPostedPerSec.setDescription('Articles Posted/Sec is the number of articles posted per sec to the NNTP Server.')
nntpSrvrArticlesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesReceived.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesReceived.setDescription('Articles Received is the total number of files received by the NNTP Server.')
nntpSrvrArticlesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesReceivedPerSec.setDescription('Articles Received/Sec is the total number of files per sec received by the NNTP Server.')
nntpSrvrArticlesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesSent.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesSent.setDescription('Articles Sent is the total number of files sent by the NNTP Server.')
nntpSrvrArticlesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesSentPerSec.setDescription('Articles Sent/Sec is the total number of files sent per sec by the NNTP Server.')
nntpSrvrArticlesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrArticlesTotal.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrArticlesTotal.setDescription('Articles Total is the sum of Articles Sent and Articles Received. This is the total number of files transferred by the NNTP Server.')
nntpSrvrBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate that data bytes are received by the NNTP Server.')
nntpSrvrBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrBytesSentPerSec.setDescription('Bytes Sent/sec is the rate that data bytes are sent by the NNTP Server.')
nntpSrvrBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Bytes Sent/sec and Bytes Received/sec. This is the total rate of bytes transferred by the NNTP Server.')
nntpSrvrControlMessagesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrControlMessagesFailed.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrControlMessagesFailed.setDescription('Control Messages Failed is the total number of control messages failed or not applied by the NNTP Server.')
nntpSrvrControlMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrControlMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrControlMessagesReceived.setDescription('Control Messages Received is the total number of control messages received by the NNTP Server.')
nntpSrvrCurrentAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrCurrentAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrCurrentAnonymousUsers.setDescription('Current Anonymous Users is the number of anonymous users currently connected to the NNTP Server.')
nntpSrvrCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrCurrentConnections.setDescription('Current Connections is the current number of connections to the NNTP Server.')
nntpSrvrCurrentNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrCurrentNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrCurrentNonAnonymousUsers.setDescription('Current NonAnonymous Users is the number of nonanonymous users currently connected to the NNTP Server.')
nntpSrvrCurrentOutboundConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrCurrentOutboundConns.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrCurrentOutboundConns.setDescription('Current Outbound Connections is the number of current outbound connections being made by the NNTP Server.')
nntpSrvrFailedOutboundLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrFailedOutboundLogons.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrFailedOutboundLogons.setDescription('Failed Outbound Logons is the number of failed outbound logons made by the NNTP Server.')
nntpSrvrHistoryMapEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrHistoryMapEntries.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrHistoryMapEntries.setDescription('History Map Entries is the entries inserted into the history mapping table of the NNTP Server.')
nntpSrvrHistoryMapEntriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrHistoryMapEntriesPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrHistoryMapEntriesPerSec.setDescription('History Map Entries/Sec is the entries inserted per sec into the history mapping table of the NNTP Server.')
nntpSrvrMaximumAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrMaximumAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrMaximumAnonymousUsers.setDescription('Maximum Anonymous Users is the maximum number of anonymous users simultaneously connected to the NNTP Server.')
nntpSrvrMaximumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrMaximumConnections.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrMaximumConnections.setDescription('Maximum Connections is the maximum number of simultaneous connections to the NNTP Server.')
nntpSrvrMaximumNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrMaximumNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrMaximumNonAnonymousUsers.setDescription('Maximum NonAnonymous Users is the maximum number of nonanonymous users simultaneously connected to the NNTP Server.')
nntpSrvrModeratedPostingsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrModeratedPostingsFailed.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrModeratedPostingsFailed.setDescription('Moderated Postings Failed is the total number of moderated postings the NNTP Server fails to send to an SMTP Server.')
nntpSrvrModeratedPostingsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrModeratedPostingsSent.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrModeratedPostingsSent.setDescription('Moderated Postings Sent is the total number of moderated postings the NNTP Server attempts to send to an SMTP Server.')
nntpSrvrSessionsFlowControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrSessionsFlowControlled.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrSessionsFlowControlled.setDescription('Sessions Flow Control is the number of client sessions currently in a flow controlled state in the NNTP Server.')
nntpSrvrTotalAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalAnonymousUsers.setDescription('Total Anonymous Users is the total number of anonymous users that have ever connected to the NNTP Server.')
nntpSrvrTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalConnections.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalConnections.setDescription('Total Connections is the number of connections that have been made to the NNTP Server.')
nntpSrvrTotalNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalNonAnonymousUsers.setDescription('Total NonAnonymous Users is the total number of nonanonymous users that have ever connected to the NNTP Server.')
nntpSrvrTotalOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalOutboundConnections.setDescription('Total Outbound Connections is the number of outbound connections that have been made by the NNTP Server.')
nntpSrvrTotalOutboundConnsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalOutboundConnsFailed.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalOutboundConnsFailed.setDescription('Total Outbound Connections Failed is the number of unsucessful outbound connections that have been made by the NNTP Server.')
nntpSrvrTotalPassiveFeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalPassiveFeeds.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalPassiveFeeds.setDescription('Total Passive Feeds is the number of passive feeds accepted by the NNTP Server.')
nntpSrvrTotalPullFeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalPullFeeds.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalPullFeeds.setDescription('Total Pull Feeds is the number of pull feeds made by the NNTP Server.')
nntpSrvrTotalPushFeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalPushFeeds.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalPushFeeds.setDescription('Total Push Feeds is the number of push feeds made by the NNTP Server.')
nntpSrvrTotalSSLConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrTotalSSLConnections.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrTotalSSLConnections.setDescription('Total SSL Connections is the number of SSL connections that have been made to the NNTP Server.')
nntpSrvrXoverEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrXoverEntries.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrXoverEntries.setDescription('Xover Entries is the number of xover entries in the xover table table of the NNTP Server.')
nntpSrvrXoverEntriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 54, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpSrvrXoverEntriesPerSec.setStatus('current')
if mibBuilder.loadTexts: nntpSrvrXoverEntriesPerSec.setDescription('Xover Entries/Sec is the number of xover entries inserted per sec in the xover table table of the NNTP Server.')
ntds = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55))
if mibBuilder.loadTexts: ntds.setStatus('current')
if mibBuilder.loadTexts: ntds.setDescription('The NTDS object provides statistics about the activity of Active Directory.')
ntdsABANRPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABANRPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsABANRPerSec.setDescription('The rate at which Address Book clients perform Ambiguous Name Resolutions operations.')
ntdsABBrowsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABBrowsesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsABBrowsesPerSec.setDescription('AB Browses/sec is the rate at which Address Book clients perform browse operations.')
ntdsABClientSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntdsABClientSessions.setDescription('AB Client Sessions is the number of connected Address Book client sessions.')
ntdsABMatchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABMatchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsABMatchesPerSec.setDescription('The rate at which Address Book clients perform find operations.')
ntdsABPropertyReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABPropertyReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsABPropertyReadsPerSec.setDescription('The rate at which Address Book clients perform property read operations.')
ntdsABProxyLookupsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABProxyLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsABProxyLookupsPerSec.setDescription('The rate at which proxy clients perform search operations.')
ntdsABSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsABSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsABSearchesPerSec.setDescription('The rate at which Address Book clients perform key search operations.')
ntdsATQThreadsLDAP = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsATQThreadsLDAP.setStatus('current')
if mibBuilder.loadTexts: ntdsATQThreadsLDAP.setDescription('The number of threads that ATQ has currently allocated to servicing LDAP requests.')
ntdsATQThreadsOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsATQThreadsOther.setStatus('current')
if mibBuilder.loadTexts: ntdsATQThreadsOther.setDescription('The number of threads that the ATQ has currently allocated to DS services other than LDAP.')
ntdsATQThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsATQThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: ntdsATQThreadsTotal.setDescription('The total number of ATQ threads that are either waiting to service an incoming request, or are already servicing a request.')
ntdsDRAHighestUSNCommitHighPart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAHighestUSNCommitHighPart.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAHighestUSNCommitHighPart.setDescription('High-order 32 bits of the highest USN Committed on the DSA.')
ntdsDRAHighestUSNCommitLowPart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAHighestUSNCommitLowPart.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAHighestUSNCommitLowPart.setDescription('Low-order 32 bits of the highest USN Committed on the DSA.')
ntdsDRAHighestUSNIssuedHighPart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAHighestUSNIssuedHighPart.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAHighestUSNIssuedHighPart.setDescription('High-order 32 bits of the highest USN Issued on the DSA.')
ntdsDRAHighestUSNIssuedLowPart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAHighestUSNIssuedLowPart.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAHighestUSNIssuedLowPart.setDescription('Low-order 32 bits of the highest USN Issued on the DSA.')
ntdsDRAInboundBytesCBSACSBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSACSBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSACSBoot.setDescription('Compressed size in bytes of inbound compressed replication data (size after compression, from DSAs in other sites).')
ntdsDRAInboundBytesCBSACPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSACPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSACPerSec.setDescription('Compressed size in bytes of inbound compressed replication data (size after compression, from DSAs in other sites).')
ntdsDRAInboundBytesCBSBCSBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSBCSBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSBCSBoot.setDescription('Original size in bytes of inbound compressed replication data (size before compression, from DSAs in other sites).')
ntdsDRAInboundBytesCBSBCPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSBCPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesCBSBCPerSec.setDescription('Original size in bytes of inbound compressed replication data (size before compression, from DSAs in other sites).')
ntdsDRAInboundBytesNotCWSSBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesNotCWSSBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesNotCWSSBoot.setDescription('Number of bytes replicated in that were not compressed at the source (i.e., from DSAs in the same site).')
ntdsDRAInboundBytesNotCWSPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesNotCWSPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesNotCWSPerSec.setDescription('Number of bytes replicated in that were not compressed at the source (i.e., from DSAs in the same site).')
ntdsDRAInboundBytesTotalBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesTotalBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesTotalBoot.setDescription('Total number of bytes replicated in. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
ntdsDRAInboundBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundBytesTotalPerSec.setDescription('Total number of bytes replicated in. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
ntdsDRAInboundFullSyncObjsRemain = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundFullSyncObjsRemain.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundFullSyncObjsRemain.setDescription('Number of objects remaining until the full sync completes (when set).')
ntdsDRAInboundObjUpdsRemainInPkt = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundObjUpdsRemainInPkt.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundObjUpdsRemainInPkt.setDescription('The number of object updates received in the current directory replication update packet that have not yet been applied to the local server.')
ntdsDRAInboundObjsAppliedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundObjsAppliedPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundObjsAppliedPerSec.setDescription('The rate at which replication updates received from replication partners are applied by the local directory service. This count excludes changes that are received but not applied (e.g., when the change is already present). This indicates how much replication update activity is occuring on the server as a result of changes generated on other servers.')
ntdsDRAInboundObjsFilteredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundObjsFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundObjsFilteredPerSec.setDescription('Number of objects received from inbound replication partners that contained no updates that needed to be applied.')
ntdsDRAInboundObjectsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundObjectsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundObjectsPerSec.setDescription('No of objects received from neighbors through inbound replication.')
ntdsDRAInboundPropAppliedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundPropAppliedPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundPropAppliedPerSec.setDescription('No of properties that are updated due to incoming property winning the reconciliation logic.')
ntdsDRAInboundPropFilteredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundPropFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundPropFilteredPerSec.setDescription('No of property changes that are received during the replication that we have already seen.')
ntdsDRAInboundPropTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundPropTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundPropTotalPerSec.setDescription('Total number of object properties received from inbound replication partners.')
ntdsDRAInboundValuesDNsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundValuesDNsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundValuesDNsPerSec.setDescription('Number of object property values received from inbound replication partners that are Distinguished Names; i.e., that reference other objects. DN-values, such as group or distribution list memberships, are generally more expensive to apply than other kinds of values.')
ntdsDRAInboundValuesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInboundValuesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInboundValuesTotalPerSec.setDescription('Total number of object property values received from inbound replication partners. Each inbound object has one or more properties, and each property has zero or more values. Zero values indicates property removal.')
ntdsDRAOutboundBytesCBSACSBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSACSBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSACSBoot.setDescription('Compressed size in bytes of outbound compressed replication data (size after compression, from DSAs in other sites).')
ntdsDRAOutboundBytesCBSACPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSACPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSACPerSec.setDescription('Compressed size in bytes of outbound compressed replication data (size after compression, from DSAs in other sites).')
ntdsDRAOutboundBytesCBSBCSBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSBCSBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSBCSBoot.setDescription('Original size in bytes of outbound compressed replication data (size before compression, from DSAs in other sites).')
ntdsDRAOutboundBytesCBSBCPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSBCPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesCBSBCPerSec.setDescription('Original size in bytes of outbound compressed replication data (size before compression, from DSAs in other sites).')
ntdsDRAOutboundBytesNotCWSSBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesNotCWSSBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesNotCWSSBoot.setDescription('Number of bytes replicated out that were not compressed (i.e., from DSAs in the same site).')
ntdsDRAOutboundBytesNotCWSPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesNotCWSPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesNotCWSPerSec.setDescription('Number of bytes replicated out that were not compressed (i.e., from DSAs in the same site).')
ntdsDRAOutboundBytesTotalBoot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesTotalBoot.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesTotalBoot.setDescription('Total number of bytes replicated out. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
ntdsDRAOutboundBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundBytesTotalPerSec.setDescription('Total number of bytes replicated out. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
ntdsDRAOutboundObjsFilterPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundObjsFilterPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundObjsFilterPerSec.setDescription('Number of objects looked at by outbound replication that were determined to have no updates that the outbound partner did not already have.')
ntdsDRAOutboundObjectsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundObjectsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundObjectsPerSec.setDescription('No of objects replicated out.')
ntdsDRAOutboundPropertiesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundPropertiesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundPropertiesPerSec.setDescription('No of properties replicated out.')
ntdsDRAOutboundValuesDNsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundValuesDNsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundValuesDNsPerSec.setDescription('Number of object property values containing Distinguished Names sent to outbound replication partners. DN-values, such as group or distribution list memberships, are generally more expensive to read than other kinds of values.')
ntdsDRAOutboundValuesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAOutboundValuesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAOutboundValuesTotalPerSec.setDescription('Number of object property values sent to outbound replication partners.')
ntdsDRAPendingReplicationSync = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAPendingReplicationSync.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAPendingReplicationSync.setDescription('DRA Pending Replication Synchronizations is the number of directory synchronizations that are queued for this server but not yet processed.')
ntdsDRASyncFailOnSchemaMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRASyncFailOnSchemaMismatch.setStatus('current')
if mibBuilder.loadTexts: ntdsDRASyncFailOnSchemaMismatch.setDescription('No of sync requests made to the neighbors that failed because their schema are out of sync.')
ntdsDRASyncRequestsMade = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRASyncRequestsMade.setStatus('current')
if mibBuilder.loadTexts: ntdsDRASyncRequestsMade.setDescription('No of sync requests made to the neighbors.')
ntdsDRASyncRequestsSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRASyncRequestsSuccessful.setStatus('current')
if mibBuilder.loadTexts: ntdsDRASyncRequestsSuccessful.setDescription('No of sync requests made to the neighbors that successfully returned.')
ntdsDSPercentReadsOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsOther.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsOther.setDescription('% of directory reads not coming from SAM/DRA/LDAP/LSA/XDS/KCC/NSPI.')
ntdsDSPercentReadsFromDRA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromDRA.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromDRA.setDescription('% of directory reads coming from DRA.')
ntdsDSPercentReadsFromKCC = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromKCC.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromKCC.setDescription('% of directory reads coming from KCC.')
ntdsDSPercentReadsFromLSA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromLSA.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromLSA.setDescription('% of directory reads coming from LSA.')
ntdsDSPercentReadsFromNSPI = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromNSPI.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromNSPI.setDescription('% of directory reads coming from NSPI.')
ntdsDSPercentReadsFromSAM = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromSAM.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromSAM.setDescription('% of directory reads coming from SAM.')
ntdsDSPercentReadsFromXDS = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromXDS.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromXDS.setDescription('% of directory reads coming from XDS.')
ntdsDSPercentSearchesOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesOther.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesOther.setDescription('% of directory searches not coming from SAM/DRA/LDAP/LSA/XDS/KCC/NSPI.')
ntdsDSPercentSearchesFromDRA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromDRA.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromDRA.setDescription('% of directory searches coming from DRA.')
ntdsDSPercentSearchesFromKCC = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromKCC.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromKCC.setDescription('% of directory searches coming from KCC.')
ntdsDSPercentSearchesFromLDAP = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromLDAP.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromLDAP.setDescription('% of directory searches coming from LDAP.')
ntdsDSPercentSearchesFromLSA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromLSA.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromLSA.setDescription('% of directory searches coming from LSA.')
ntdsDSPercentSearchesFromNSPI = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromNSPI.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromNSPI.setDescription('% of directory searches coming from NSPI.')
ntdsDSPercentSearchesFromSAM = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromSAM.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromSAM.setDescription('% of directory searches coming from SAM.')
ntdsDSPercentSearchesFromXDS = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromXDS.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromXDS.setDescription('% of directory searches coming from XDS.')
ntdsDSPercentWritesOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesOther.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesOther.setDescription('% of directory writes not coming from SAM/DRA/LDAP/LSA/XDS/KCC/NSPI.')
ntdsDSPercentWritesFromDRA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromDRA.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromDRA.setDescription('% of directory writes coming from DRA.')
ntdsDSPercentWritesFromKCC = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromKCC.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromKCC.setDescription('% of directory writes coming from KCC.')
ntdsDSPercentWritesFromLDAP = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromLDAP.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromLDAP.setDescription('% of directory writes coming from LDAP.')
ntdsDSPercentWritesFromLSA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromLSA.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromLSA.setDescription('% of directory writes coming from LSA.')
ntdsDSPercentWritesFromNSPI = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromNSPI.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromNSPI.setDescription('% of directory writes coming from NSPI.')
ntdsDSPercentWritesFromSAM = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromSAM.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromSAM.setDescription('% of directory writes coming from SAM.')
ntdsDSPercentWritesFromXDS = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromXDS.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromXDS.setDescription('% of directory writes coming from XDS.')
ntdsDSClientBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSClientBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSClientBindsPerSec.setDescription('Number of ntdsapi.dll binds per second serviced by this DC.')
ntdsDSClientNameTranslatePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSClientNameTranslatePerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSClientNameTranslatePerSec.setDescription('Number of ntdsapi.dll name translations per second serviced by this DC.')
ntdsDSDirectoryReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSDirectoryReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSDirectoryReadsPerSec.setDescription('Number of directory reads per second.')
ntdsDSDirectorySearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSDirectorySearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSDirectorySearchesPerSec.setDescription('Number of directory searches per second.')
ntdsDSDirectoryWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSDirectoryWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSDirectoryWritesPerSec.setDescription('Number of directory writes per second.')
ntdsDSMonitorListSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSMonitorListSize.setStatus('current')
if mibBuilder.loadTexts: ntdsDSMonitorListSize.setDescription('The number of requests to be notified when objects are updated that are currently registered with this DSA.')
ntdsDSNameCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSNameCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: ntdsDSNameCacheHitRate.setDescription("The percentage of directory object name component look ups that are satisfied out of the DSA's name cache.")
ntdsDSNotifyQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSNotifyQueueSize.setStatus('current')
if mibBuilder.loadTexts: ntdsDSNotifyQueueSize.setDescription('The number of pending update notifications that have been queued, but not yet transmitted to clients.')
ntdsDSSearchSuboperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSSearchSuboperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSSearchSuboperationsPerSec.setDescription('Number of search suboperations per second. One search operation is made up of many sub operations. A sub operation roughly corresponds to an object the search causes the DS to consider.')
ntdsDSSecurityDescPropEvents = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSSecurityDescPropEvents.setStatus('current')
if mibBuilder.loadTexts: ntdsDSSecurityDescPropEvents.setDescription('DS Security Descriptor Propagations Events is the number of Security Descriptor Propagation Events that are queued but not yet processed.')
ntdsDSSecurityDescPropAvgExTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSSecurityDescPropAvgExTime.setStatus('current')
if mibBuilder.loadTexts: ntdsDSSecurityDescPropAvgExTime.setDescription('Average length of time the Security Descriptor propagator spends waiting for exclusive access to Data Base elements during a Security Descriptor Propagation sub-operation.')
ntdsDSSecurityDescPropRunQueue = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSSecurityDescPropRunQueue.setStatus('current')
if mibBuilder.loadTexts: ntdsDSSecurityDescPropRunQueue.setDescription('Number of objects remaining to examine while processing the current DS Security Descriptor Propagator Event.')
ntdsDSSecurityDescSubopPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSSecurityDescSubopPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSSecurityDescSubopPerSec.setDescription('Number of Security Descriptor Propagation suboperations per second. One Security Descriptor Propagation operation is made up of many sub operations. A sub operation roughly corresponds to an object the propagation causes the propagator to examine.')
ntdsDSServerBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSServerBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSServerBindsPerSec.setDescription('Number of DC-to-DC binds per second serviced by this DC.')
ntdsDSServerNameTranslatePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSServerNameTranslatePerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDSServerNameTranslatePerSec.setDescription('Number of DC-to-DC name translations per second serviced by this DC.')
ntdsDSThreadsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSThreadsInUse.setStatus('current')
if mibBuilder.loadTexts: ntdsDSThreadsInUse.setDescription('DS Threads in Use is the current number of threads in use by the directory service (different than the number of threads in the directory service process). Threads in Use is the number of threads currently servicing client API calls and can be used to indicate whether additional processors could be of benefit.')
ntdsKDCASRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsKDCASRequests.setStatus('current')
if mibBuilder.loadTexts: ntdsKDCASRequests.setDescription('The number of AS requests serviced by the KDC per second. AS requests are used by client to obtain a ticket granting ticket.')
ntdsKDCTGSRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsKDCTGSRequests.setStatus('current')
if mibBuilder.loadTexts: ntdsKDCTGSRequests.setDescription('The number of TGS requests serviced by the KDC per second. TGS requests are used by the client to obtain a ticket to a resource.')
ntdsKerberosAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsKerberosAuthentications.setStatus('current')
if mibBuilder.loadTexts: ntdsKerberosAuthentications.setDescription('The number of times per second that clients use a ticket to this DC to authenticate to this DC.')
ntdsLDAPActiveThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPActiveThreads.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPActiveThreads.setDescription('LDAP Active Threads is the current number of threads in use by the LDAP subsystem of the local direcotry service.')
ntdsLDAPBindTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPBindTime.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPBindTime.setDescription('Time (in milliseconds) taken for last successful LDAP bind.')
ntdsLDAPClientSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPClientSessions.setDescription('LDAP Client Sessions is the number of connected LDAP client sessions.')
ntdsLDAPSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPSearchesPerSec.setDescription('LDAP Searches/sec is the rate at which LDAP clients perform search operations.')
ntdsLDAPSuccessfulBinds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPSuccessfulBinds.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPSuccessfulBinds.setDescription('% of LDAP bind attempts that were successful.')
ntdsLDAPSuccessfulBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPSuccessfulBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPSuccessfulBindsPerSec.setDescription('Number of LDAP Binds per second.')
ntdsLDAPUDPOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPUDPOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPUDPOperationsPerSec.setDescription('The number of UDP operations the LDAP server is processing per second.')
ntdsLDAPWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPWritesPerSec.setDescription('LDAP Writes/sec is the rate at which LDAP clients perform write operations.')
ntdsNTLMAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsNTLMAuthentications.setStatus('current')
if mibBuilder.loadTexts: ntdsNTLMAuthentications.setDescription('Number of NTLM authentications per second serviced by this DC.')
ntdsSAMAccountGroupMemEvalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMAccountGroupMemEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMAccountGroupMemEvalPerSec.setDescription('Number of SAM Account Group Membership Evaluations per second.')
ntdsSAMDisplayInfoQueriesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMDisplayInfoQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMDisplayInfoQueriesPerSec.setDescription('This counter displays the number of queries per second to obtain display information (netquerydisplayinformation).')
ntdsSAMEnumerationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 103), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMEnumerationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMEnumerationsPerSec.setDescription('This counter displays the number of net user, net group, and net local function enumerations per second.')
ntdsSAMGCEvaluationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMGCEvaluationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMGCEvaluationsPerSec.setDescription('This counter displays the number of universal group membership evaluations per second on a global catalog domain controller from non-global catalog domain controllers.')
ntdsSAMMachineCreateAtpsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMMachineCreateAtpsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMMachineCreateAtpsPerSec.setDescription('This counter displays the number of attempts per second to create computer accounts.')
ntdsSAMMembershipChangesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMMembershipChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMMembershipChangesPerSec.setDescription('This counter displays the number of group membership changes per second across all global, universal, and nested groups.')
ntdsSAMNonTransMemEvalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMNonTransMemEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMNonTransMemEvalPerSec.setDescription('This counter displays the number of net user and new local groups evaluations per second when performing a non-transitive membership evaluation.')
ntdsSAMPasswordChangesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMPasswordChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMPasswordChangesPerSec.setDescription('Number of SAM password changes per second.')
ntdsSAMResourceGrpMemEvalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMResourceGrpMemEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMResourceGrpMemEvalPerSec.setDescription('Number of SAM Resource Group Membership Evaluations per second.')
ntdsSAMSuccessMachineCreatPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 110), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMSuccessMachineCreatPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMSuccessMachineCreatPerSec.setDescription('Number of successful machine creations per second.')
ntdsSAMSuccessUserCreatePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 111), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMSuccessUserCreatePerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMSuccessUserCreatePerSec.setDescription('This counter displays the number of user accounts successfully created per second.')
ntdsSAMTransitiveMembEvalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 112), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMTransitiveMembEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMTransitiveMembEvalPerSec.setDescription('This counter displays the number of new groups encountered per second when performing a transitive membership evaluation. Evaluations are performed at authentication time and when computer accounts or attributes are created.')
ntdsSAMUniversalGrpMemEvalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 113), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMUniversalGrpMemEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMUniversalGrpMemEvalPerSec.setDescription('This counter displays the number of universal group membership evaluations per second at authentication time.')
ntdsSAMUserCreateAttemptsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 114), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMUserCreateAttemptsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMUserCreateAttemptsPerSec.setDescription('This counter displays the number of attempts per second to create user accounts.')
ntdsXDSClientSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 115), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsXDSClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntdsXDSClientSessions.setDescription('XDS Client Sessions is the number of connected Extended Directory Service client sessions. This indicates the number of connections from other Windows NT services and the Windows NT Administrator program.')
ntdsDRAInLnkValUpdsRemainInPckt = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 116), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInLnkValUpdsRemainInPckt.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInLnkValUpdsRemainInPckt.setDescription('The number of link value updates received in the current directory replication update packet that have not yet been applied to the local server.')
ntdsDRAInTotalUpdsRemainInPacket = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 117), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAInTotalUpdsRemainInPacket.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAInTotalUpdsRemainInPacket.setDescription('The number of total (link values + object) updates received in the current directory replication update packet that have not yet been applied to the local server.')
ntdsDRAPendReplicationOps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 118), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAPendReplicationOps.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAPendReplicationOps.setDescription('The total number of replication operations on the directory that are queued for this server but not yet performed.')
ntdsDRAThreadsGettingNCChanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 119), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAThreadsGettingNCChanges.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAThreadsGettingNCChanges.setDescription('The number of threads on the server which are currently attempting to acquire changes from another server.')
ntdsDRAThdsGetNCChngsHoldSmphr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 120), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDRAThdsGetNCChngsHoldSmphr.setStatus('current')
if mibBuilder.loadTexts: ntdsDRAThdsGetNCChngsHoldSmphr.setDescription('The number of threads on the server which are currently attempting to acquire changes from another server and hold a semaphore required to get these changes.')
ntdsDSPercentReadsFromNTDSAPI = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 121), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentReadsFromNTDSAPI.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentReadsFromNTDSAPI.setDescription('% of directory reads coming from NTDAPI calls.')
ntdsDSPercentSearchesFromNTDSAPI = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 122), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromNTDSAPI.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentSearchesFromNTDSAPI.setDescription('% of directory searches coming from NTDAPI calls.')
ntdsDSPercentWritesFromNTDSAPI = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 123), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDSPercentWritesFromNTDSAPI.setStatus('current')
if mibBuilder.loadTexts: ntdsDSPercentWritesFromNTDSAPI.setDescription('% of directory writes coming from NTDSAPI calls.')
ntdsLDAPClosedConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 124), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPClosedConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPClosedConnectionsPerSec.setDescription('The number of LDAP connections that have been closed in the last second.')
ntdsLDAPNewConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 125), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPNewConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPNewConnectionsPerSec.setDescription('The number of new LDAP connections that have arrived in the last second.')
ntdsLDAPNewSSLConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 126), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLDAPNewSSLConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLDAPNewSSLConnectionsPerSec.setDescription('The number of new SSL or TLS connections that arrived in the last second.')
ntdsSAMAccountGroupEvalLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 127), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMAccountGroupEvalLatency.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMAccountGroupEvalLatency.setDescription('The mean latency of the last 100 account and universal group evaluations performed for authentication.')
ntdsSAMResourceGroupEvalLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 128), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMResourceGroupEvalLatency.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMResourceGroupEvalLatency.setDescription('The mean latency of the last 100 resource group evaluations performed for authentication.')
ntdsATQEstimatedQueueDelay = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsATQEstimatedQueueDelay.setStatus('current')
if mibBuilder.loadTexts: ntdsATQEstimatedQueueDelay.setDescription('Estimated time (in milliseconds) the next request will spend in the queue prior to being serviced by the directory service.')
ntdsATQOutstandingQueuedRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsATQOutstandingQueuedRequests.setStatus('current')
if mibBuilder.loadTexts: ntdsATQOutstandingQueuedRequests.setDescription('The number of requests currently queued and waiting to be serviced.')
ntdsATQRequestLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsATQRequestLatency.setStatus('current')
if mibBuilder.loadTexts: ntdsATQRequestLatency.setDescription('Average length of time (in milliseconds) to process a request, not including time spent on the queue.')
ntdsBaseSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsBaseSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsBaseSearchesPerSec.setDescription('The number of base searches/sec')
ntdsDatabaseAddsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 133), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDatabaseAddsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDatabaseAddsPerSec.setDescription('The number of database adds/sec')
ntdsDatabaseDeletesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 134), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDatabaseDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDatabaseDeletesPerSec.setDescription('The number of database deletes/sec')
ntdsDatabaseModifysPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 135), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDatabaseModifysPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDatabaseModifysPerSec.setDescription('The number of database modifys/sec')
ntdsDigestBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 136), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsDigestBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsDigestBindsPerSec.setDescription('The number of digest binds/sec')
ntdsExternalBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 137), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsExternalBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsExternalBindsPerSec.setDescription('The number of external binds/sec')
ntdsFastBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 138), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsFastBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsFastBindsPerSec.setDescription('The number of fast binds/sec')
ntdsLinkValuesCleanedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 139), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsLinkValuesCleanedPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsLinkValuesCleanedPerSec.setDescription('The rate at which link values that need to be cleaned are cleaned.')
ntdsNTLMBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 140), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsNTLMBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsNTLMBindsPerSec.setDescription('The number of NTLM binds/sec')
ntdsNegotiatedBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 141), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsNegotiatedBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsNegotiatedBindsPerSec.setDescription('The number of negotiated binds/sec')
ntdsOnelevelSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 142), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsOnelevelSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsOnelevelSearchesPerSec.setDescription('The number of onelevel searches/sec')
ntdsPhantomsCleanedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 143), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsPhantomsCleanedPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsPhantomsCleanedPerSec.setDescription('The rate at which stale phantoms are cleaned.')
ntdsPhantomsVisitedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 144), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsPhantomsVisitedPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsPhantomsVisitedPerSec.setDescription('The rate at which phantoms are visited to determine if they are stale and need to be cleaned.')
ntdsSAMDomLocGrpMembEvalsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 145), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMDomLocGrpMembEvalsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMDomLocGrpMembEvalsPerSec.setDescription('This counter displays the number of domain local group memberships evaluations per second at authentication time.')
ntdsSAMGlbGrpMembpEvalsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 146), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMGlbGrpMembpEvalsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMGlbGrpMembpEvalsPerSec.setDescription('This counter displays the number of domain global group membership evaluations per second at authentication time.')
ntdsSAMSuccessCompCreationPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 147), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSAMSuccessCompCreationPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSAMSuccessCompCreationPerSec.setDescription('This counter displays the number of successful computer accounts created per second.')
ntdsSimpleBindsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 148), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSimpleBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSimpleBindsPerSec.setDescription('The number of simple binds/sec')
ntdsSubtreeSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 149), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsSubtreeSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsSubtreeSearchesPerSec.setDescription('The number of subtree searches/sec')
ntdsTombstonesGarbageCollPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 150), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsTombstonesGarbageCollPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsTombstonesGarbageCollPerSec.setDescription('The rate at which expired tombstoned objects are garbage collected.')
ntdsTombstonesVisitedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 55, 151), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntdsTombstonesVisitedPerSec.setStatus('current')
if mibBuilder.loadTexts: ntdsTombstonesVisitedPerSec.setDescription('The rate at which tombstoned objects are visited to be considered for garbage collected.')
nwLinkIPXTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56), )
if mibBuilder.loadTexts: nwLinkIPXTable.setStatus('current')
if mibBuilder.loadTexts: nwLinkIPXTable.setDescription('The NWLink IPX performance object consists of counters that measure datagram transmission to and from computers using the IPX protocol. This object only reports valid data for counters that monitor datagrams and packets; for frame-related counters, the object tends to report zero values. In addition, connection-related data is not likely to be useful because IPX is a connectionless protocol.')
nwLinkIPXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1), ).setIndexNames((0, "INFORMANT-ADV", "ipxInstance"))
if mibBuilder.loadTexts: nwLinkIPXEntry.setStatus('current')
if mibBuilder.loadTexts: nwLinkIPXEntry.setDescription("Performance information for one particular instance of 'NWLink IPX' object.")
ipxInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInstance.setStatus('current')
if mibBuilder.loadTexts: ipxInstance.setDescription('Instance name.')
ipxBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Frame Bytes/sec and Datagram Bytes/sec. This is the total rate of bytes sent to or received from the network by the protocol, but only counts the bytes in frames (i.e., packets) which carry data.')
ipxConnectionSessionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxConnectionSessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: ipxConnectionSessionTimeouts.setDescription('Connection Session Timeouts is the number of connections that were dropped due to a session timeout. This number is an accumulator and shows a running total.')
ipxConnectionsCanceled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxConnectionsCanceled.setStatus('current')
if mibBuilder.loadTexts: ipxConnectionsCanceled.setDescription('Connections Canceled is the number of connections that were canceled. This number is an accumulator and shows a running total.')
ipxConnectionsNoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxConnectionsNoRetries.setStatus('current')
if mibBuilder.loadTexts: ipxConnectionsNoRetries.setDescription('Connections No Retries is the total count of connections that were successfully made on the first try. This number is an accumulator and shows a running total.')
ipxConnectionsOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxConnectionsOpen.setStatus('current')
if mibBuilder.loadTexts: ipxConnectionsOpen.setDescription('Connections Open is the number of connections currently open for this protocol. This counter shows the current count only and does not accumulate over time.')
ipxConnectionsWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxConnectionsWithRetries.setStatus('current')
if mibBuilder.loadTexts: ipxConnectionsWithRetries.setDescription('Connections With Retries is the total count of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed. This number is an accumulator and shows a running total.')
ipxDatagramBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDatagramBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxDatagramBytesReceivedPerSec.setDescription('Datagram Bytes Received/sec is the rate at which datagram bytes are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
ipxDatagramBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDatagramBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxDatagramBytesSentPerSec.setDescription('Datagram Bytes Sent/sec is the rate at which datagram bytes are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
ipxDatagramBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDatagramBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxDatagramBytesPerSec.setDescription('Datagram Bytes/sec is the rate at which datagram bytes are processed by the computer. This counter is the sum of datagram bytes that are sent as well as received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
ipxDatagramsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDatagramsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxDatagramsReceivedPerSec.setDescription('Datagrams Received/sec is the rate at which datagrams are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
ipxDatagramsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxDatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate at which datagrams are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
ipxDatagramsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxDatagramsPerSec.setDescription('Datagrams/sec is the rate at which datagrams are processed by the computer. This counter displays the sum of datagrams sent and datagrams received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
ipxDisconnectsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDisconnectsLocal.setStatus('current')
if mibBuilder.loadTexts: ipxDisconnectsLocal.setDescription('Disconnects Local is the number of session disconnections that were initiated by the local computer. This number is an accumulator and shows a running total.')
ipxDisconnectsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDisconnectsRemote.setStatus('current')
if mibBuilder.loadTexts: ipxDisconnectsRemote.setDescription('Disconnects Remote is the number of session disconnections that were initiated by the remote computer. This number is an accumulator and shows a running total.')
ipxExpirationsAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxExpirationsAck.setStatus('current')
if mibBuilder.loadTexts: ipxExpirationsAck.setDescription('Expirations Ack is the count of T2 timer expirations.')
ipxExpirationsResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxExpirationsResponse.setStatus('current')
if mibBuilder.loadTexts: ipxExpirationsResponse.setDescription('Expirations Response is the count of T1 timer expirations.')
ipxFailuresAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFailuresAdapter.setStatus('current')
if mibBuilder.loadTexts: ipxFailuresAdapter.setDescription('Failures Adapter is the number of connections that were dropped due to an adapter failure. This number is an accumulator and shows a running total.')
ipxFailuresLink = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFailuresLink.setStatus('current')
if mibBuilder.loadTexts: ipxFailuresLink.setDescription('Failures Link is the number of connections that were dropped due to a link failure. This number is an accumulator and shows a running total.')
ipxFailuresNoListen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFailuresNoListen.setStatus('current')
if mibBuilder.loadTexts: ipxFailuresNoListen.setDescription('Failures No Listen is the number of connections that were rejected because the remote computer was not listening for connection requests.')
ipxFailuresNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFailuresNotFound.setStatus('current')
if mibBuilder.loadTexts: ipxFailuresNotFound.setDescription('Failures Not Found is the number of connection attempts that failed because the remote computer could not be found. This number is an accumulator and shows a running total.')
ipxFailuresResourceLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFailuresResourceLocal.setStatus('current')
if mibBuilder.loadTexts: ipxFailuresResourceLocal.setDescription('Failures Resource Local is the number of connections that failed because of resource problems or shortages on the local computer. This number is an accumulator and shows a running total.')
ipxFailuresResourceRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFailuresResourceRemote.setStatus('current')
if mibBuilder.loadTexts: ipxFailuresResourceRemote.setDescription('Failures Resource Remote is the number of connections that failed because of resource problems or shortages on the remote computer. This number is an accumulator and shows a running total.')
ipxFrameBytesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFrameBytesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFrameBytesReSentPerSec.setDescription('Frame Bytes Re-Sent/sec is the rate at which data bytes are re-sent by the computer. This counter only counts the bytes in frames that carry data.')
ipxFrameBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFrameBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFrameBytesReceivedPerSec.setDescription('Frame Bytes Received/sec is the rate at which data bytes are received by the computer. This counter only counts the frames (packets) that carry data.')
ipxFrameBytesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFrameBytesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFrameBytesRejectedPerSec.setDescription('Frame Bytes Rejected/sec is the rate at which data bytes are rejected. This counter only counts the bytes in data frames (packets) that carry data.')
ipxFrameBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFrameBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFrameBytesSentPerSec.setDescription('Frame Bytes Sent/sec is the rate at which data bytes are sent by the computer. This counter only counts the bytes in frames (packets) that carry data.')
ipxFrameBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFrameBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFrameBytesPerSec.setDescription('Frame Bytes/sec is the rate at which data bytes are processed by the computer. This counter is the sum of data frame bytes sent and received. This counter only counts the byte in frames (packets) that carry data.')
ipxFramesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFramesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFramesReSentPerSec.setDescription('Frames Re-Sent/sec is the rate at which data frames (packets) are re-sent by the computer. This counter only counts the frames or packets that carry data.')
ipxFramesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFramesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFramesReceivedPerSec.setDescription('Frames Received/sec is the rate at which data frames are received by the computer. This counter only counts the frames (packets) that carry data.')
ipxFramesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFramesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFramesRejectedPerSec.setDescription('Frames Rejected/sec is the rate at which data frames are rejected. This counter only counts the frames (packets) that carry data.')
ipxFramesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFramesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFramesSentPerSec.setDescription('Frames Sent/sec is the rate at which data frames are sent by the computer. This counter only counts the frames (packets) that carry data.')
ipxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFramesPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxFramesPerSec.setDescription('Frames/sec is the rate at which data frames (or packets) are processed by the computer. This counter is the sum of data frames sent and data frames received. This counter only counts those frames (packets) that carry data.')
ipxPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which packets are received by the computer. This counter counts all packets processed: control as well as data packets.')
ipxPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxPacketsSentPerSec.setDescription('Packets Sent/sec is the rate at which packets are sent by the computer. This counter counts all packets sent by the computer, i.e. control as well as data packets.')
ipxPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxPacketsPerSec.setDescription('Packets/sec is the rate at which packets are processed by the computer. This count is the sum of Packets Sent and Packets Received per second. This counter includes all packets processed: control as well as data packets.')
ipxPiggybackAckQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPiggybackAckQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipxPiggybackAckQueuedPerSec.setDescription('Piggyback Ack Queued/sec is the rate at which piggybacked acknowledgments are queued. Piggyback acknowledgments are acknowledgments to received packets that are to be included in the next outgoing packet to the remote computer.')
ipxPiggybackAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPiggybackAckTimeouts.setStatus('current')
if mibBuilder.loadTexts: ipxPiggybackAckTimeouts.setDescription('Piggyback Ack Timeouts is the number of times that a piggyback acknowledgment could not be sent because there was no outgoing packet to the remote on which to piggyback. A piggyback ack is an acknowledgment to a received packet that is sent along in an outgoing data packet to the remote computer. If no outgoing packet is sent within the timeout period, then an ack packet is sent and this counter is incremented.')
ipxWindowSendAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxWindowSendAverage.setStatus('current')
if mibBuilder.loadTexts: ipxWindowSendAverage.setDescription('Window Send Average is the running average number of data bytes that were sent before waiting for an acknowledgment from the remote computer.')
ipxWindowSendMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 56, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxWindowSendMaximum.setStatus('current')
if mibBuilder.loadTexts: ipxWindowSendMaximum.setDescription('Window Send Maximum is the maximum number of bytes of data that will be sent before waiting for an acknowledgment from the remote computer.')
nwLinkNetBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57), )
if mibBuilder.loadTexts: nwLinkNetBIOSTable.setStatus('current')
if mibBuilder.loadTexts: nwLinkNetBIOSTable.setDescription('The NWLink NetBIOS performance object consists of counters that monitor IPX transport rates and connections. This object only reports valid data for counters that monitor datagrams and packets; for frame-related counters, the object tends to report zero values.')
nwLinkNetBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1), ).setIndexNames((0, "INFORMANT-ADV", "netBIOSInstance"))
if mibBuilder.loadTexts: nwLinkNetBIOSEntry.setStatus('current')
if mibBuilder.loadTexts: nwLinkNetBIOSEntry.setDescription("Performance information for one particular instance of 'NWLink NetBIOS' object.")
netBIOSInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSInstance.setStatus('current')
if mibBuilder.loadTexts: netBIOSInstance.setDescription('Instance name.')
netBIOSBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Frame Bytes/sec and Datagram Bytes/sec. This is the total rate of bytes sent to or received from the network by the protocol, but only counts the bytes in frames (i.e., packets) which carry data.')
netBIOSConnectionSessionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSConnectionSessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: netBIOSConnectionSessionTimeouts.setDescription('Connection Session Timeouts is the number of connections that were dropped due to a session timeout. This number is an accumulator and shows a running total.')
netBIOSConnectionsCanceled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSConnectionsCanceled.setStatus('current')
if mibBuilder.loadTexts: netBIOSConnectionsCanceled.setDescription('Connections Canceled is the number of connections that were canceled. This number is an accumulator and shows a running total.')
netBIOSConnectionsNoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSConnectionsNoRetries.setStatus('current')
if mibBuilder.loadTexts: netBIOSConnectionsNoRetries.setDescription('Connections No Retries is the total count of connections that were successfully made on the first try. This number is an accumulator and shows a running total.')
netBIOSConnectionsOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSConnectionsOpen.setStatus('current')
if mibBuilder.loadTexts: netBIOSConnectionsOpen.setDescription('Connections Open is the number of connections currently open for this protocol. This counter shows the current count only and does not accumulate over time.')
netBIOSConnectionsWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSConnectionsWithRetries.setStatus('current')
if mibBuilder.loadTexts: netBIOSConnectionsWithRetries.setDescription('Connections With Retries is the total count of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed. This number is an accumulator and shows a running total.')
netBIOSDatagramBytesRcvdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDatagramBytesRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSDatagramBytesRcvdPerSec.setDescription('Datagram Bytes Received/sec is the rate at which datagram bytes are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBIOSDatagramBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDatagramBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSDatagramBytesSentPerSec.setDescription('Datagram Bytes Sent/sec is the rate at which datagram bytes are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBIOSDatagramBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDatagramBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSDatagramBytesPerSec.setDescription('Datagram Bytes/sec is the rate at which datagram bytes are processed by the computer. This counter is the sum of datagram bytes that are sent as well as received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
netBIOSDatagramsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDatagramsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSDatagramsReceivedPerSec.setDescription('Datagrams Received/sec is the rate at which datagrams are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBIOSDatagramsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSDatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate at which datagrams are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
netBIOSDatagramsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSDatagramsPerSec.setDescription('Datagrams/sec is the rate at which datagrams are processed by the computer. This counter displays the sum of datagrams sent and datagrams received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
netBIOSDisconnectsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDisconnectsLocal.setStatus('current')
if mibBuilder.loadTexts: netBIOSDisconnectsLocal.setDescription('Disconnects Local is the number of session disconnections that were initiated by the local computer. This number is an accumulator and shows a running total.')
netBIOSDisconnectsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSDisconnectsRemote.setStatus('current')
if mibBuilder.loadTexts: netBIOSDisconnectsRemote.setDescription('Disconnects Remote is the number of session disconnections that were initiated by the remote computer. This number is an accumulator and shows a running total.')
netBIOSExpirationsAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSExpirationsAck.setStatus('current')
if mibBuilder.loadTexts: netBIOSExpirationsAck.setDescription('Expirations Ack is the count of T2 timer expirations.')
netBIOSExpirationsResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSExpirationsResponse.setStatus('current')
if mibBuilder.loadTexts: netBIOSExpirationsResponse.setDescription('Expirations Response is the count of T1 timer expirations.')
netBIOSFailuresAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFailuresAdapter.setStatus('current')
if mibBuilder.loadTexts: netBIOSFailuresAdapter.setDescription('Failures Adapter is the number of connections that were dropped due to an adapter failure. This number is an accumulator and shows a running total.')
netBIOSFailuresLink = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFailuresLink.setStatus('current')
if mibBuilder.loadTexts: netBIOSFailuresLink.setDescription('Failures Link is the number of connections that were dropped due to a link failure. This number is an accumulator and shows a running total.')
netBIOSFailuresNoListen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFailuresNoListen.setStatus('current')
if mibBuilder.loadTexts: netBIOSFailuresNoListen.setDescription('Failures No Listen is the number of connections that were rejected because the remote computer was not listening for connection requests.')
netBIOSFailuresNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFailuresNotFound.setStatus('current')
if mibBuilder.loadTexts: netBIOSFailuresNotFound.setDescription('Failures Not Found is the number of connection attempts that failed because the remote computer could not be found. This number is an accumulator and shows a running total.')
netBIOSFailuresResourceLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFailuresResourceLocal.setStatus('current')
if mibBuilder.loadTexts: netBIOSFailuresResourceLocal.setDescription('Failures Resource Local is the number of connections that failed because of resource problems or shortages on the local computer. This number is an accumulator and shows a running total.')
netBIOSFailuresResourceRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFailuresResourceRemote.setStatus('current')
if mibBuilder.loadTexts: netBIOSFailuresResourceRemote.setDescription('Failures Resource Remote is the number of connections that failed because of resource problems or shortages on the remote computer. This number is an accumulator and shows a running total.')
netBIOSFrameBytesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFrameBytesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFrameBytesReSentPerSec.setDescription('Frame Bytes Re-Sent/sec is the rate at which data bytes are re-sent by the computer. This counter only counts the bytes in frames that carry data.')
netBIOSFrameBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFrameBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFrameBytesReceivedPerSec.setDescription('Frame Bytes Received/sec is the rate at which data bytes are received by the computer. This counter only counts the frames (packets) that carry data.')
netBIOSFrameBytesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFrameBytesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFrameBytesRejectedPerSec.setDescription('Frame Bytes Rejected/sec is the rate at which data bytes are rejected. This counter only counts the bytes in data frames (packets) that carry data.')
netBIOSFrameBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFrameBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFrameBytesSentPerSec.setDescription('Frame Bytes Sent/sec is the rate at which data bytes are sent by the computer. This counter only counts the bytes in frames (packets) that carry data.')
netBIOSFrameBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFrameBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFrameBytesPerSec.setDescription('Frame Bytes/sec is the rate at which data bytes are processed by the computer. This counter is the sum of data frame bytes sent and received. This counter only counts the byte in frames (packets) that carry data.')
netBIOSFramesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFramesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFramesReSentPerSec.setDescription('Frames Re-Sent/sec is the rate at which data frames (packets) are re-sent by the computer. This counter only counts the frames or packets that carry data.')
netBIOSFramesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFramesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFramesReceivedPerSec.setDescription('Frames Received/sec is the rate at which data frames are received by the computer. This counter only counts the frames (packets) that carry data.')
netBIOSFramesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFramesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFramesRejectedPerSec.setDescription('Frames Rejected/sec is the rate at which data frames are rejected. This counter only counts the frames (packets) that carry data.')
netBIOSFramesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFramesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFramesSentPerSec.setDescription('Frames Sent/sec is the rate at which data frames are sent by the computer. This counter only counts the frames (packets) that carry data.')
netBIOSFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSFramesPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSFramesPerSec.setDescription('Frames/sec is the rate at which data frames (or packets) are processed by the computer. This counter is the sum of data frames sent and data frames received. This counter only counts those frames (packets) that carry data.')
netBIOSPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which packets are received by the computer. This counter counts all packets processed: control as well as data packets.')
netBIOSPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSPacketsSentPerSec.setDescription('Packets Sent/sec is the rate at which packets are sent by the computer. This counter counts all packets sent by the computer, i.e. control as well as data packets.')
netBIOSPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSPacketsPerSec.setDescription('Packets/sec is the rate at which packets are processed by the computer. This count is the sum of Packets Sent and Packets Received per second. This counter includes all packets processed: control as well as data packets.')
netBIOSPiggybackAckQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSPiggybackAckQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: netBIOSPiggybackAckQueuedPerSec.setDescription('Piggyback Ack Queued/sec is the rate at which piggybacked acknowledgments are queued. Piggyback acknowledgments are acknowledgments to received packets that are to be included in the next outgoing packet to the remote computer.')
netBIOSPiggybackAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSPiggybackAckTimeouts.setStatus('current')
if mibBuilder.loadTexts: netBIOSPiggybackAckTimeouts.setDescription('Piggyback Ack Timeouts is the number of times that a piggyback acknowledgment could not be sent because there was no outgoing packet to the remote on which to piggyback. A piggyback ack is an acknowledgment to a received packet that is sent along in an outgoing data packet to the remote computer. If no outgoing packet is sent within the timeout period, then an ack packet is sent and this counter is incremented.')
netBIOSWindowSendAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSWindowSendAverage.setStatus('current')
if mibBuilder.loadTexts: netBIOSWindowSendAverage.setDescription('Window Send Average is the running average number of data bytes that were sent before waiting for an acknowledgment from the remote computer.')
netBIOSWindowSendMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 57, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBIOSWindowSendMaximum.setStatus('current')
if mibBuilder.loadTexts: netBIOSWindowSendMaximum.setDescription('Window Send Maximum is the maximum number of bytes of data that will be sent before waiting for an acknowledgment from the remote computer.')
nwLinkSPXTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58), )
if mibBuilder.loadTexts: nwLinkSPXTable.setStatus('current')
if mibBuilder.loadTexts: nwLinkSPXTable.setDescription('The NWLink SPX performance object consists of counters that measure data transmission and session connections for computers using the SPX protocol. This object only reports valid data for counters that monitor datagrams and packets; for frame-related counters, the object tends to report zero values.')
nwLinkSPXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1), ).setIndexNames((0, "INFORMANT-ADV", "spxInstance"))
if mibBuilder.loadTexts: nwLinkSPXEntry.setStatus('current')
if mibBuilder.loadTexts: nwLinkSPXEntry.setDescription("Performance information for one particular instance of 'NWLink SPX' object.")
spxInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxInstance.setStatus('current')
if mibBuilder.loadTexts: spxInstance.setDescription('Instance name.')
spxBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: spxBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Frame Bytes/sec and Datagram Bytes/sec. This is the total rate of bytes sent to or received from the network by the protocol, but only counts the bytes in frames (i.e., packets) which carry data.')
spxConnectionSessionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxConnectionSessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: spxConnectionSessionTimeouts.setDescription('Connection Session Timeouts is the number of connections that were dropped due to a session timeout. This number is an accumulator and shows a running total.')
spxConnectionsCanceled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxConnectionsCanceled.setStatus('current')
if mibBuilder.loadTexts: spxConnectionsCanceled.setDescription('Connections Canceled is the number of connections that were canceled. This number is an accumulator and shows a running total.')
spxConnectionsNoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxConnectionsNoRetries.setStatus('current')
if mibBuilder.loadTexts: spxConnectionsNoRetries.setDescription('Connections No Retries is the total count of connections that were successfully made on the first try. This number is an accumulator and shows a running total.')
spxConnectionsOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxConnectionsOpen.setStatus('current')
if mibBuilder.loadTexts: spxConnectionsOpen.setDescription('Connections Open is the number of connections currently open for this protocol. This counter shows the current count only and does not accumulate over time.')
spxConnectionsWithRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxConnectionsWithRetries.setStatus('current')
if mibBuilder.loadTexts: spxConnectionsWithRetries.setDescription('Connections With Retries is the total count of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed. This number is an accumulator and shows a running total.')
spxDatagramBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDatagramBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxDatagramBytesReceivedPerSec.setDescription('Datagram Bytes Received/sec is the rate at which datagram bytes are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
spxDatagramBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDatagramBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxDatagramBytesSentPerSec.setDescription('Datagram Bytes Sent/sec is the rate at which datagram bytes are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
spxDatagramBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDatagramBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: spxDatagramBytesPerSec.setDescription('Datagram Bytes/sec is the rate at which datagram bytes are processed by the computer. This counter is the sum of datagram bytes that are sent as well as received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
spxDatagramsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDatagramsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxDatagramsReceivedPerSec.setDescription('Datagrams Received/sec is the rate at which datagrams are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
spxDatagramsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxDatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate at which datagrams are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed.')
spxDatagramsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: spxDatagramsPerSec.setDescription('Datagrams/sec is the rate at which datagrams are processed by the computer. This counter displays the sum of datagrams sent and datagrams received. A datagram is a connectionless packet whose delivery to a remote is not guaranteed.')
spxDisconnectsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDisconnectsLocal.setStatus('current')
if mibBuilder.loadTexts: spxDisconnectsLocal.setDescription('Disconnects Local is the number of session disconnections that were initiated by the local computer. This number is an accumulator and shows a running total.')
spxDisconnectsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxDisconnectsRemote.setStatus('current')
if mibBuilder.loadTexts: spxDisconnectsRemote.setDescription('Disconnects Remote is the number of session disconnections that were initiated by the remote computer. This number is an accumulator and shows a running total.')
spxExpirationsAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxExpirationsAck.setStatus('current')
if mibBuilder.loadTexts: spxExpirationsAck.setDescription('Expirations Ack is the count of T2 timer expirations.')
spxExpirationsResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxExpirationsResponse.setStatus('current')
if mibBuilder.loadTexts: spxExpirationsResponse.setDescription('Expirations Response is the count of T1 timer expirations.')
spxFailuresAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFailuresAdapter.setStatus('current')
if mibBuilder.loadTexts: spxFailuresAdapter.setDescription('Failures Adapter is the number of connections that were dropped due to an adapter failure. This number is an accumulator and shows a running total.')
spxFailuresLink = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFailuresLink.setStatus('current')
if mibBuilder.loadTexts: spxFailuresLink.setDescription('Failures Link is the number of connections that were dropped due to a link failure. This number is an accumulator and shows a running total.')
spxFailuresNoListen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFailuresNoListen.setStatus('current')
if mibBuilder.loadTexts: spxFailuresNoListen.setDescription('Failures No Listen is the number of connections that were rejected because the remote computer was not listening for connection requests.')
spxFailuresNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFailuresNotFound.setStatus('current')
if mibBuilder.loadTexts: spxFailuresNotFound.setDescription('Failures Not Found is the number of connection attempts that failed because the remote computer could not be found. This number is an accumulator and shows a running total.')
spxFailuresResourceLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFailuresResourceLocal.setStatus('current')
if mibBuilder.loadTexts: spxFailuresResourceLocal.setDescription('Failures Resource Local is the number of connections that failed because of resource problems or shortages on the local computer. This number is an accumulator and shows a running total.')
spxFailuresResourceRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFailuresResourceRemote.setStatus('current')
if mibBuilder.loadTexts: spxFailuresResourceRemote.setDescription('Failures Resource Remote is the number of connections that failed because of resource problems or shortages on the remote computer. This number is an accumulator and shows a running total.')
spxFrameBytesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFrameBytesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFrameBytesReSentPerSec.setDescription('Frame Bytes Re-Sent/sec is the rate at which data bytes are re-sent by the computer. This counter only counts the bytes in frames that carry data.')
spxFrameBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFrameBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFrameBytesReceivedPerSec.setDescription('Frame Bytes Received/sec is the rate at which data bytes are received by the computer. This counter only counts the frames (packets) that carry data.')
spxFrameBytesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFrameBytesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFrameBytesRejectedPerSec.setDescription('Frame Bytes Rejected/sec is the rate at which data bytes are rejected. This counter only counts the bytes in data frames (packets) that carry data.')
spxFrameBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFrameBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFrameBytesSentPerSec.setDescription('Frame Bytes Sent/sec is the rate at which data bytes are sent by the computer. This counter only counts the bytes in frames (packets) that carry data.')
spxFrameBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFrameBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFrameBytesPerSec.setDescription('Frame Bytes/sec is the rate at which data bytes are processed by the computer. This counter is the sum of data frame bytes sent and received. This counter only counts the byte in frames (packets) that carry data.')
spxFramesReSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFramesReSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFramesReSentPerSec.setDescription('Frames Re-Sent/sec is the rate at which data frames (packets) are re-sent by the computer. This counter only counts the frames or packets that carry data.')
spxFramesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFramesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFramesReceivedPerSec.setDescription('Frames Received/sec is the rate at which data frames are received by the computer. This counter only counts the frames (packets) that carry data.')
spxFramesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFramesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFramesRejectedPerSec.setDescription('Frames Rejected/sec is the rate at which data frames are rejected. This counter only counts the frames (packets) that carry data.')
spxFramesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFramesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFramesSentPerSec.setDescription('Frames Sent/sec is the rate at which data frames are sent by the computer. This counter only counts the frames (packets) that carry data.')
spxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxFramesPerSec.setStatus('current')
if mibBuilder.loadTexts: spxFramesPerSec.setDescription('Frames/sec is the rate at which data frames (or packets) are processed by the computer. This counter is the sum of data frames sent and data frames received. This counter only counts those frames (packets) that carry data.')
spxPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which packets are received by the computer. This counter counts all packets processed: control as well as data packets.')
spxPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: spxPacketsSentPerSec.setDescription('Packets Sent/sec is the rate at which packets are sent by the computer. This counter counts all packets sent by the computer, i.e. control as well as data packets.')
spxPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: spxPacketsPerSec.setDescription('Packets/sec is the rate at which packets are processed by the computer. This count is the sum of Packets Sent and Packets Received per second. This counter includes all packets processed: control as well as data packets.')
spxPiggybackAckQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxPiggybackAckQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: spxPiggybackAckQueuedPerSec.setDescription('Piggyback Ack Queued/sec is the rate at which piggybacked acknowledgments are queued. Piggyback acknowledgments are acknowledgments to received packets that are to be included in the next outgoing packet to the remote computer.')
spxPiggybackAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxPiggybackAckTimeouts.setStatus('current')
if mibBuilder.loadTexts: spxPiggybackAckTimeouts.setDescription('Piggyback Ack Timeouts is the number of times that a piggyback acknowledgment could not be sent because there was no outgoing packet to the remote on which to piggyback. A piggyback ack is an acknowledgment to a received packet that is sent along in an outgoing data packet to the remote computer. If no outgoing packet is sent within the timeout period, then an ack packet is sent and this counter is incremented.')
spxWindowSendAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxWindowSendAverage.setStatus('current')
if mibBuilder.loadTexts: spxWindowSendAverage.setDescription('Window Send Average is the running average number of data bytes that were sent before waiting for an acknowledgment from the remote computer.')
spxWindowSendMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 58, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spxWindowSendMaximum.setStatus('current')
if mibBuilder.loadTexts: spxWindowSendMaximum.setDescription('Window Send Maximum is the maximum number of bytes of data that will be sent before waiting for an acknowledgment from the remote computer.')
objects = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59))
if mibBuilder.loadTexts: objects.setStatus('current')
if mibBuilder.loadTexts: objects.setDescription('The Objects performance object consists of counters that monitor logical objects in the system, such as processes, threads, mutexes, and semaphores. This information can be used to detect the unnecessary consumption of computer resources. Each object requires memory to store basic information about the object.')
objectsEvents = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsEvents.setStatus('current')
if mibBuilder.loadTexts: objectsEvents.setDescription('Events is the number of events in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. An event is used when two or more threads try to synchronize execution.')
objectsMutexes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsMutexes.setStatus('current')
if mibBuilder.loadTexts: objectsMutexes.setDescription('Mutexes counts the number of mutexes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. Mutexes are used by threads to assure only one thread is executing a particular section of code.')
objectsProcesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsProcesses.setStatus('current')
if mibBuilder.loadTexts: objectsProcesses.setDescription('Processes is the number of processes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. Each process represents the running of a program.')
objectsSections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsSections.setStatus('current')
if mibBuilder.loadTexts: objectsSections.setDescription('Sections is the number of sections in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. A section is a portion of virtual memory created by a process for storing data. A process can share sections with other processes.')
objectsSemaphores = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsSemaphores.setStatus('current')
if mibBuilder.loadTexts: objectsSemaphores.setDescription('Semaphores is the number of semaphores in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. Threads use semaphores to obtain exclusive access to data structures that they share with other threads.')
objectsThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 59, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsThreads.setStatus('current')
if mibBuilder.loadTexts: objectsThreads.setDescription('Threads is the number of threads in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. A thread is the basic executable entity that can execute instructions in a processor.')
pagingFileTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 60), )
if mibBuilder.loadTexts: pagingFileTable.setStatus('current')
if mibBuilder.loadTexts: pagingFileTable.setDescription('The Paging File performance object consists of counters that monitor the paging file(s) on the computer. The paging file is a reserved space on disk that backs up committed physical memory on the computer.')
pagingFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 60, 1), ).setIndexNames((0, "INFORMANT-ADV", "pagingFileInstance"))
if mibBuilder.loadTexts: pagingFileEntry.setStatus('current')
if mibBuilder.loadTexts: pagingFileEntry.setDescription("Performance information for one particular instance of 'Paging File' object.")
pagingFileInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 60, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingFileInstance.setStatus('current')
if mibBuilder.loadTexts: pagingFileInstance.setDescription('Instance name.')
pagingFilePercentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 60, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingFilePercentUsage.setStatus('current')
if mibBuilder.loadTexts: pagingFilePercentUsage.setDescription('The amount of the Page File instance in use in percent. See also Process\\\\Page File Bytes.')
pagingFilePercentUsagePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 60, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingFilePercentUsagePeak.setStatus('current')
if mibBuilder.loadTexts: pagingFilePercentUsagePeak.setDescription('The peak usage of the Page File instance in percent. See also Process\\\\Page File Bytes Peak.')
physicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61), )
if mibBuilder.loadTexts: physicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: physicalDiskTable.setDescription('The PhysicalDisk performance object consists of counters that monitor hard or fixed disk drives on a computer. Disks are used to store file, program, and paging data, are read to retrieve these items, and are written to record changes to them. The values of physical disk counters are sums of the values of the logical disks (or partitions) into which they are divided.')
physicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1), ).setIndexNames((0, "INFORMANT-ADV", "pDiskInstance"))
if mibBuilder.loadTexts: physicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: physicalDiskEntry.setDescription("Performance information for one particular instance of 'PhysicalDisk' object.")
pDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskInstance.setStatus('current')
if mibBuilder.loadTexts: pDiskInstance.setDescription('Instance name.')
pDiskPercentDiskReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskPercentDiskReadTime.setStatus('current')
if mibBuilder.loadTexts: pDiskPercentDiskReadTime.setDescription('% Disk Read Time is the percentage of elapsed time that the selected disk drive was busy servicing read requests.')
pDiskPercentDiskTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskPercentDiskTime.setStatus('current')
if mibBuilder.loadTexts: pDiskPercentDiskTime.setDescription('% Disk Time is the percentage of elapsed time that the selected disk drive was busy servicing read or write requests.')
pDiskPercentDiskWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskPercentDiskWriteTime.setStatus('current')
if mibBuilder.loadTexts: pDiskPercentDiskWriteTime.setDescription('% Disk Write Time is the percentage of elapsed time that the selected disk drive was busy servicing write requests.')
pDiskPercentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskPercentIdleTime.setStatus('current')
if mibBuilder.loadTexts: pDiskPercentIdleTime.setDescription('% Idle Time reports the percentage of time during the sample interval that the disk was idle.')
pDiskAvgDiskBytesPerRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskBytesPerRead.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskBytesPerRead.setDescription('Avg. Disk Bytes/Read is the average number of bytes transferred from the disk during read operations.')
pDiskAvgDiskBytesPerTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskBytesPerTransfer.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskBytesPerTransfer.setDescription('Avg. Disk Bytes/Transfer is the average number of bytes transferred to or from the disk during write or read operations.')
pDiskAvgDiskBytesPerWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskBytesPerWrite.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskBytesPerWrite.setDescription('Avg. Disk Bytes/Write is the average number of bytes transferred to the disk during write operations.')
pDiskAvgDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskQueueLength.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskQueueLength.setDescription('Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval. Multiplied by 1000 to provide a useful gauge value since it is commonly a fractional value.')
pDiskAvgDiskReadQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskReadQueueLength.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskReadQueueLength.setDescription('Avg. Disk Read Queue Length is the average number of read requests that were queued for the selected disk during the sample interval. Multiplied by 1000 to provide a useful gauge value since it is commonly a fractional value.')
pDiskAvgDiskWriteQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskWriteQueueLength.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskWriteQueueLength.setDescription('Avg. Disk Write Queue Length is the average number of write requests that were queued for the selected disk during the sample interval. Multiplied by 1000 to provide a useful gauge value since it is commonly a fractional value.')
pDiskAvgDiskSecPerRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskSecPerRead.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskSecPerRead.setDescription('Avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk. Multiplied by 1000000 to provide a useful gauge value since it is commonly a fractional value.')
pDiskAvgDiskSecPerTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskSecPerTransfer.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskSecPerTransfer.setDescription('Avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer. Multiplied by 1000000 to provide a useful gauge value since it is commonly a fractional value.')
pDiskAvgDiskSecPerWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskAvgDiskSecPerWrite.setStatus('current')
if mibBuilder.loadTexts: pDiskAvgDiskSecPerWrite.setDescription('Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk. Multiplied by 1000000 to provide a useful gauge value since it is commonly a fractional value.')
pDiskCurrentDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskCurrentDiskQueueLength.setStatus('current')
if mibBuilder.loadTexts: pDiskCurrentDiskQueueLength.setDescription('Current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two.')
pDiskDiskBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskDiskBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskDiskBytesPerSec.setDescription('Disk Bytes/sec is the rate bytes are transferred to or from the disk during write or read operations.')
pDiskDiskReadBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskDiskReadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskDiskReadBytesPerSec.setDescription('Disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations.')
pDiskDiskReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskDiskReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskDiskReadsPerSec.setDescription('Disk Reads/sec is the rate of read operations on the disk.')
pDiskDiskTransfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskDiskTransfersPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskDiskTransfersPerSec.setDescription('Disk Transfers/sec is the rate of read and write operations on the disk.')
pDiskDiskWriteBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskDiskWriteBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskDiskWriteBytesPerSec.setDescription('Disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations.')
pDiskDiskWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskDiskWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskDiskWritesPerSec.setDescription('Disk Writes/sec is the rate of write operations on the disk.')
pDiskSplitIOPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 61, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDiskSplitIOPerSec.setStatus('current')
if mibBuilder.loadTexts: pDiskSplitIOPerSec.setDescription('Split IO/Sec reports the rate at which I/Os to the disk were split into multiple I/Os. A split I/O may result from requesting data of a size that is too large to fit into a single I/O or that the disk is fragmented.')
pop3Service = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62))
pop3SvcBytesReceivePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcBytesReceivePerSec.setStatus('current')
if mibBuilder.loadTexts: pop3SvcBytesReceivePerSec.setDescription('Bytes received per second')
pop3SvcBytesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: pop3SvcBytesTransmittedPerSec.setDescription('Bytes transmitted per second')
pop3SvcConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: pop3SvcConnectionsPerSec.setDescription('Number of connections per second')
pop3SvcFreeThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcFreeThreads.setStatus('current')
if mibBuilder.loadTexts: pop3SvcFreeThreads.setDescription('Number of free threads')
pop3SvcMailboxesInAuthState = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcMailboxesInAuthState.setStatus('current')
if mibBuilder.loadTexts: pop3SvcMailboxesInAuthState.setDescription('Number of connections in Authentication state')
pop3SvcMailboxesInTranState = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcMailboxesInTranState.setStatus('current')
if mibBuilder.loadTexts: pop3SvcMailboxesInTranState.setDescription('Number of connections in Transaction state')
pop3SvcMessagesDeliveredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcMessagesDeliveredPerSec.setStatus('current')
if mibBuilder.loadTexts: pop3SvcMessagesDeliveredPerSec.setDescription('Number of messages delivered per second')
pop3SvcSocketsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcSocketsInUse.setStatus('current')
if mibBuilder.loadTexts: pop3SvcSocketsInUse.setDescription('Number of current active POP3 connections')
pop3SvcTotalConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcTotalConnections.setStatus('current')
if mibBuilder.loadTexts: pop3SvcTotalConnections.setDescription('Total connections since the service starts.')
pop3SvcTotalFailedLogons = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcTotalFailedLogons.setStatus('current')
if mibBuilder.loadTexts: pop3SvcTotalFailedLogons.setDescription('Number of failed logons since service starts')
pop3SvcTotalBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcTotalBytesReceived.setStatus('current')
if mibBuilder.loadTexts: pop3SvcTotalBytesReceived.setDescription('Total bytes of POP3 request received')
pop3SvcTotalBytesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcTotalBytesTransmitted.setStatus('current')
if mibBuilder.loadTexts: pop3SvcTotalBytesTransmitted.setDescription('Bytes of POP3 messages transmitted')
pop3SvcTotalMessagesDelivered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 62, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pop3SvcTotalMessagesDelivered.setStatus('current')
if mibBuilder.loadTexts: pop3SvcTotalMessagesDelivered.setDescription('Total number of messages delivered since service starts')
printQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63), )
if mibBuilder.loadTexts: printQueueTable.setStatus('current')
if mibBuilder.loadTexts: printQueueTable.setDescription('Windows 2000 printing features provide the Print Queue Object performance object for tracking activity in the server print queue. Its counters are reset when either the print server or the spooler service is restarted.')
printQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1), ).setIndexNames((0, "INFORMANT-ADV", "printQueueInstance"))
if mibBuilder.loadTexts: printQueueEntry.setStatus('current')
if mibBuilder.loadTexts: printQueueEntry.setDescription("Performance information for one particular instance of 'Print Queue' object.")
printQueueInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueInstance.setStatus('current')
if mibBuilder.loadTexts: printQueueInstance.setDescription('Instance name.')
printQueueAddNetworkPrinterCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueAddNetworkPrinterCalls.setStatus('current')
if mibBuilder.loadTexts: printQueueAddNetworkPrinterCalls.setDescription('Total number of calls from other print servers to add shared network printers to this server since last restart.')
printQueueBytesPrintedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueBytesPrintedPerSec.setStatus('current')
if mibBuilder.loadTexts: printQueueBytesPrintedPerSec.setDescription('Number of bytes per second printed on a print queue.')
printQueueEnumNetworkPrinterCall = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueEnumNetworkPrinterCall.setStatus('current')
if mibBuilder.loadTexts: printQueueEnumNetworkPrinterCall.setDescription('Total number of calls from browse clients to this print server to request network browse lists since last restart.')
printQueueJobErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueJobErrors.setStatus('current')
if mibBuilder.loadTexts: printQueueJobErrors.setDescription('Total number of job errors in a print queue since last restart.')
printQueueJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueJobs.setStatus('current')
if mibBuilder.loadTexts: printQueueJobs.setDescription('Current number of jobs in a print queue.')
printQueueJobsSpooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueJobsSpooling.setStatus('current')
if mibBuilder.loadTexts: printQueueJobsSpooling.setDescription('Current number of spooling jobs in a print queue.')
printQueueMaxJobsSpooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueMaxJobsSpooling.setStatus('current')
if mibBuilder.loadTexts: printQueueMaxJobsSpooling.setDescription('Maximum number of spooling jobs in a print queue since last restart.')
printQueueMaxReferences = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueMaxReferences.setStatus('current')
if mibBuilder.loadTexts: printQueueMaxReferences.setDescription('Peak number of references (open handles) to this printer.')
printQueueNotReadyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueNotReadyErrors.setStatus('current')
if mibBuilder.loadTexts: printQueueNotReadyErrors.setDescription('Total number of printer not ready errors in a print queue since the last restart.')
printQueueOutOfPaperErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueOutOfPaperErrors.setStatus('current')
if mibBuilder.loadTexts: printQueueOutOfPaperErrors.setDescription('Total number of out of paper errors in a print queue since the last restart.')
printQueueReferences = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueReferences.setStatus('current')
if mibBuilder.loadTexts: printQueueReferences.setDescription('Current number of references (open handles) to this printer.')
printQueueTotalJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueTotalJobsPrinted.setStatus('current')
if mibBuilder.loadTexts: printQueueTotalJobsPrinted.setDescription('Total number of jobs printed on a print queue since the last restart.')
printQueueTotalPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 63, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printQueueTotalPagesPrinted.setStatus('current')
if mibBuilder.loadTexts: printQueueTotalPagesPrinted.setDescription('Total number of pages printed through GDI on a print queue since the last restart.')
processTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64), )
if mibBuilder.loadTexts: processTable.setStatus('current')
if mibBuilder.loadTexts: processTable.setDescription('The Process performance object consists of counters that monitor running application program and system processes. All the threads in a process share the same address space and have access to the same data.')
processEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1), ).setIndexNames((0, "INFORMANT-ADV", "processInstance"))
if mibBuilder.loadTexts: processEntry.setStatus('current')
if mibBuilder.loadTexts: processEntry.setDescription("Performance information for one particular instance of 'Process' object.")
processInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processInstance.setStatus('current')
if mibBuilder.loadTexts: processInstance.setDescription('Instance name.')
processPercentPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPercentPrivilegedTime.setStatus('current')
if mibBuilder.loadTexts: processPercentPrivilegedTime.setDescription('% Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service is called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
processPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPercentProcessorTime.setStatus('current')
if mibBuilder.loadTexts: processPercentProcessorTime.setDescription('% Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.')
processPercentUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPercentUserTime.setStatus('current')
if mibBuilder.loadTexts: processPercentUserTime.setDescription('% User Time is the percentage of elapsed time that the process threads spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows executive, kernel, and device drivers. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
processCreatingProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCreatingProcessID.setStatus('current')
if mibBuilder.loadTexts: processCreatingProcessID.setDescription('The Creating Process ID value is the Process ID of the process that created the process. The creating process may have terminated, so this value may no longer identify a running process.')
processElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processElapsedTime.setStatus('current')
if mibBuilder.loadTexts: processElapsedTime.setDescription('The total elapsed time, in seconds, that this process has been running.')
processHandleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processHandleCount.setStatus('current')
if mibBuilder.loadTexts: processHandleCount.setDescription('The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.')
processIDProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIDProcess.setStatus('current')
if mibBuilder.loadTexts: processIDProcess.setDescription('ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.')
processIODataBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIODataBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: processIODataBytesPerSec.setDescription('The rate at which the process is reading and writing bytes in I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIODataOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIODataOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: processIODataOperationsPerSec.setDescription('The rate at which the process is issuing read and write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIOOtherBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIOOtherBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: processIOOtherBytesPerSec.setDescription('The rate at which the process is issuing bytes to I/O operations that do not involve data such as control operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIOOtherOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIOOtherOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: processIOOtherOperationsPerSec.setDescription('The rate at which the process is issuing I/O operations that are neither read nor write operations (for example, a control function). This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIOReadBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIOReadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: processIOReadBytesPerSec.setDescription('The rate at which the process is reading bytes from I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIOReadOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIOReadOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: processIOReadOperationsPerSec.setDescription('The rate at which the process is issuing read I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIOWriteBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIOWriteBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: processIOWriteBytesPerSec.setDescription('The rate at which the process is writing bytes to I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processIOWriteOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIOWriteOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: processIOWriteOperationsPerSec.setDescription('The rate at which the process is issuing write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.')
processPageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: processPageFaultsPerSec.setDescription('Page Faults/sec is the rate at which page faults by the threads executing in this process are occurring. A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This may not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.')
processPageFileBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFileBytes.setStatus('current')
if mibBuilder.loadTexts: processPageFileBytes.setDescription('Page File Bytes is the current amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the current amount of virtual memory that the process has reserved for use in physical memory.')
processPageFileBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFileBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processPageFileBytesPeak.setDescription('Page File Bytes Peak is the maximum amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the maximum amount of virtual memory that the process has reserved for use in physical memory.')
processPoolNonpagedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPoolNonpagedBytes.setStatus('current')
if mibBuilder.loadTexts: processPoolNonpagedBytes.setDescription('Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory\\\\Pool Nonpaged Bytes is calculated differently than Process\\\\Pool Nonpaged Bytes, so it might not equal Process\\\\Pool Nonpaged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
processPoolPagedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPoolPagedBytes.setStatus('current')
if mibBuilder.loadTexts: processPoolPagedBytes.setDescription('Pool Paged Bytes is the size, in bytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory\\\\Pool Paged Bytes is calculated differently than Process\\\\Pool Paged Bytes, so it might not equal Process\\\\Pool Paged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
processPriorityBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPriorityBase.setStatus('current')
if mibBuilder.loadTexts: processPriorityBase.setDescription("The current base priority of this process. Threads within a process can raise and lower their own base priority relative to the process' base priority.")
processPrivateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPrivateBytes.setStatus('current')
if mibBuilder.loadTexts: processPrivateBytes.setDescription('Private Bytes is the current size, in bytes, of memory that this process has allocated that cannot be shared with other processes.')
processThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processThreadCount.setStatus('current')
if mibBuilder.loadTexts: processThreadCount.setDescription('The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.')
processVirtualBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVirtualBytes.setStatus('current')
if mibBuilder.loadTexts: processVirtualBytes.setDescription('Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.')
processVirtualBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVirtualBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processVirtualBytesPeak.setDescription('Virtual Bytes Peak is the maximum size, in bytes, of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and the process might limit its ability to load libraries.')
processWorkingSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSet.setStatus('current')
if mibBuilder.loadTexts: processWorkingSet.setDescription('Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.')
processWorkingSetPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetPeak.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetPeak.setDescription('Working Set Peak is the maximum size, in bytes, of the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
processPageFileKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFileKBytes.setStatus('current')
if mibBuilder.loadTexts: processPageFileKBytes.setDescription('Page File KiloBytes is the current number of kilobytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory.')
processPageFileKBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFileKBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processPageFileKBytesPeak.setDescription('Page File KiloBytes Peak is the maximum number of kilobytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory.')
processPoolNonpagedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPoolNonpagedKBytes.setStatus('current')
if mibBuilder.loadTexts: processPoolNonpagedKBytes.setDescription('Pool Nonpaged KiloBytes is the number of kilobytes in the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory: Pool Nonpaged KiloBytes is calculated differently than Process: Pool Nonpaged KiloBytes, so it might not equal Process: Pool Nonpaged KiloBytes: _Total. This counter displays the last observed value only; it is not an average. ')
processPoolPagedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPoolPagedKBytes.setStatus('current')
if mibBuilder.loadTexts: processPoolPagedKBytes.setDescription('Pool Paged KiloBytes is the number of kilobytes in the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory: Pool Paged KiloBytes is calculated differently than Process: Pool Paged KiloBytes, so it might not equal Process: Pool Paged KiloBytes: _Total. This counter displays the last observed value only; it is not an average. ')
processPrivateKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPrivateKBytes.setStatus('current')
if mibBuilder.loadTexts: processPrivateKBytes.setDescription('Private KiloBytes is the current number of kilobytes this process has allocated that cannot be shared with other processes.')
processVirtualKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVirtualKBytes.setStatus('current')
if mibBuilder.loadTexts: processVirtualKBytes.setDescription('Virtual KiloBytes is the current size in kilobytes of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and by using too much, the process can limit its ability to load libraries.')
processVirtualKBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVirtualKBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processVirtualKBytesPeak.setDescription('Virtual KiloBytes Peak is the maximum number of kilobytes of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is however finite, and by using too much, the process might limit its ability to load libraries.')
processWorkingSetKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetKBytes.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetKBytes.setDescription('Working Set is the current number of kilobytes in the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
processWorkingSetKBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetKBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetKBytesPeak.setDescription('Working Set Peak is the maximum number of kilobytes in the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
processPageFileMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFileMBytes.setStatus('current')
if mibBuilder.loadTexts: processPageFileMBytes.setDescription('Page File MegaBytes is the current number of megabytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory.')
processPageFileMBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPageFileMBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processPageFileMBytesPeak.setDescription('Page File MegaBytes Peak is the maximum number of megabytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory.')
processPoolNonpagedMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPoolNonpagedMBytes.setStatus('current')
if mibBuilder.loadTexts: processPoolNonpagedMBytes.setDescription('Pool Nonpaged MegaBytes is the number of megabytes in the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory: Pool Nonpaged MegaBytes is calculated differently than Process: Pool Nonpaged MegaBytes, so it might not equal Process: Pool Nonpaged MegaBytes: _Total. This counter displays the last observed value only; it is not an average. ')
processPoolPagedMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPoolPagedMBytes.setStatus('current')
if mibBuilder.loadTexts: processPoolPagedMBytes.setDescription('Pool Paged MegaBytes is the number of megabytes in the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory: Pool Paged MegaBytes is calculated differently than Process: Pool Paged MegaBytes, so it might not equal Process: Pool Paged MegaBytes: _Total. This counter displays the last observed value only; it is not an average. ')
processPrivateMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPrivateMBytes.setStatus('current')
if mibBuilder.loadTexts: processPrivateMBytes.setDescription('Private MegaBytes is the current number of megabytes this process has allocated that cannot be shared with other processes.')
processVirtualMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVirtualMBytes.setStatus('current')
if mibBuilder.loadTexts: processVirtualMBytes.setDescription('Virtual MegaBytes is the current size in megabytes of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and by using too much, the process can limit its ability to load libraries.')
processVirtualMBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVirtualMBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processVirtualMBytesPeak.setDescription('Virtual MegaBytes Peak is the maximum number of megabytes of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is however finite, and by using too much, the process might limit its ability to load libraries.')
processWorkingSetMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetMBytes.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetMBytes.setDescription('Working Set is the current number of megabytes in the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
processWorkingSetMBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetMBytesPeak.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetMBytesPeak.setDescription('Working Set Peak is the maximum number of megabytes in the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
processWorkingSetPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetPrivate.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetPrivate.setDescription('Working Set - Private displays the size of the working set, in bytes, that is use for this process only and not shared nor sharable by other processes.')
processWorkingSetKPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetKPrivate.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetKPrivate.setDescription('Working Set - Private displays the size of the working set, in kilobytes, that is use for this process only and not shared nor sharable by other processes.')
processWorkingSetMPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 64, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWorkingSetMPrivate.setStatus('current')
if mibBuilder.loadTexts: processWorkingSetMPrivate.setDescription('Working Set - Private displays the size of the working set, in megabytes, that is use for this process only and not shared nor sharable by other processes.')
processorTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65), )
if mibBuilder.loadTexts: processorTable.setStatus('current')
if mibBuilder.loadTexts: processorTable.setDescription('The Processor performance object consists of counters that measure aspects of processor activity. The processor is the part of the computer that performs arithmetic and logical computations, initiates operations on peripherals, and runs the threads of processes. A computer can have multiple processors. The processor object represents each processor as an instance of the object.')
processorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1), ).setIndexNames((0, "INFORMANT-ADV", "cpuInstance"))
if mibBuilder.loadTexts: processorEntry.setStatus('current')
if mibBuilder.loadTexts: processorEntry.setDescription("Performance information for one particular instance of 'Processor' object.")
cpuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInstance.setStatus('current')
if mibBuilder.loadTexts: cpuInstance.setDescription('Instance name.')
cpuPercentC1Time = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentC1Time.setStatus('current')
if mibBuilder.loadTexts: cpuPercentC1Time.setDescription('% C1 Time is the percentage of time the processor spends in the C1 low-power idle state. % C1 Time is a subset of the total processor idle time. C1 low-power idle state enables the processor to maintain its entire context and quickly return to the running state. Not all systems support the % C1 state.')
cpuPercentC2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentC2Time.setStatus('current')
if mibBuilder.loadTexts: cpuPercentC2Time.setDescription('% C2 Time is the percentage of time the processor spends in the C2 low-power idle state. % C2 Time is a subset of the total processor idle time. C2 low-power idle state enables the processor to maintain the context of the system caches. The C2 power state is a lower power and higher exit latency state than C1. Not all systems support the C2 state.')
cpuPercentC3Time = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentC3Time.setStatus('current')
if mibBuilder.loadTexts: cpuPercentC3Time.setDescription('% C3 Time is the percentage of time the processor spends in the C3 low-power idle state. % C3 Time is a subset of the total processor idle time. When the processor is in the C3 low-power idle state it is unable to maintain the coherency of its caches. The C3 power state is a lower power and higher exit latency state than C2. Not all systems support the C3 state.')
cpuPercentDPCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentDPCTime.setStatus('current')
if mibBuilder.loadTexts: cpuPercentDPCTime.setDescription('% DPC Time is the percentage of time that the processor spent receiving and servicing deferred procedure calls (DPCs) during the sample interval. DPCs are interrupts that run at a lower priority than standard interrupts. % DPC Time is a component of % Privileged Time because DPCs are executed in privileged mode. They are counted separately and are not a component of the interrupt counters. This counter displays the average busy time as a percentage of the sample time.')
cpuPercentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentIdleTime.setStatus('current')
if mibBuilder.loadTexts: cpuPercentIdleTime.setDescription('% Idle Time is the percentage of time the processor is idle during the sample interval')
cpuPercentInterruptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentInterruptTime.setStatus('current')
if mibBuilder.loadTexts: cpuPercentInterruptTime.setDescription('% Interrupt Time is the time the processor spends receiving and servicing hardware interrupts during sample intervals. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended during interrupts. Most system clocks interrupt the processor every 10 milliseconds, creating a background of interrupt activity. suspends normal thread execution during interrupts. This counter displays the average busy time as a percentage of the sample time.')
cpuPercentPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentPrivilegedTime.setStatus('current')
if mibBuilder.loadTexts: cpuPercentPrivilegedTime.setDescription('% Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service in called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
cpuPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentProcessorTime.setStatus('current')
if mibBuilder.loadTexts: cpuPercentProcessorTime.setDescription('% Processor Time is the percentage of elapsed time that the processor spends to execute a non-Idle thread. It is calculated by measuring the percentage of time that the processor spends executing the idle thread and then subtracting that value from 100%. (Each processor has an idle thread that consumes cycles when no other threads are ready to run). This counter is the primary indicator of processor activity, and displays the average percentage of busy time observed during the sample interval. It should be noted that the accounting calculation of whether the processor is idle is performed at an internal sampling interval of the system clock (10ms). On todays fast processors, % Processor Time can therefore underestimate the processor utilization as the processor may be spending a lot of time servicing threads between the system clock sampling interval. Workload based timer applications are one example of applications which are more likely to be measured inaccurately as timers are signaled just after the sample is taken.')
cpuPercentUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentUserTime.setStatus('current')
if mibBuilder.loadTexts: cpuPercentUserTime.setDescription('% User Time is the percentage of elapsed time the processor spends in the user mode. User mode is a restricted processing mode designed for applications, environment subsystems, and integral subsystems. The alternative, privileged mode, is designed for operating system components and allows direct access to hardware and all memory. The operating system switches application threads to privileged mode to access operating system services. This counter displays the average busy time as a percentage of the sample time.')
cpuC1TransitionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuC1TransitionsPerSec.setStatus('current')
if mibBuilder.loadTexts: cpuC1TransitionsPerSec.setDescription('C1 Transitions/sec is the rate that the CPU enters the C1 low-power idle state. The CPU enters the C1 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
cpuC2TransitionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuC2TransitionsPerSec.setStatus('current')
if mibBuilder.loadTexts: cpuC2TransitionsPerSec.setDescription('C2 Transitions/sec is the rate that the CPU enters the C2 low-power idle state. The CPU enters the C2 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
cpuC3TransitionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuC3TransitionsPerSec.setStatus('current')
if mibBuilder.loadTexts: cpuC3TransitionsPerSec.setDescription('C3 Transitions/sec is the rate that the CPU enters the C3 low-power idle state. The CPU enters the C3 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
cpuDPCRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDPCRate.setStatus('current')
if mibBuilder.loadTexts: cpuDPCRate.setDescription('DPC Rate is the rate at which deferred procedure calls (DPCs) were added to the processors DPC queues between the timer ticks of the processor clock. DPCs are interrupts that run at alower priority than standard interrupts. Each processor has its own DPC queue. This counter measures the rate that DPCs were added to the queue, not the number of DPCs in the queue. This counter displays the last observed value only; it is not an average.')
cpuDPCsQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDPCsQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: cpuDPCsQueuedPerSec.setDescription("DPCs Queued/sec is the average rate, in incidents per second, at which deferred procedure calls (DPCs) were added to the processor's DPC queue. DPCs are interrupts that run at a lower priority than standard interrupts. Each processor has its own DPC queue. This counter measures the rate that DPCs are added to the queue, not the number of DPCs in the queue. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.")
cpuInterruptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 65, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterruptsPerSec.setStatus('current')
if mibBuilder.loadTexts: cpuInterruptsPerSec.setDescription('Interrupts/sec is the average rate, in incidents per second, at which the processor received and serviced hardware interrupts. It does not include deferred procedure calls (DPCs), which are counted separately. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards, and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended. The system clock typically interrupts the processor every 10 milliseconds, creating a background of interrupt activity. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
pSchedFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66), )
if mibBuilder.loadTexts: pSchedFlowTable.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowTable.setDescription('The PSched Flow Object shows statistics from the packet scheduler, a feature of QoS Admission Control.')
pSchedFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1), ).setIndexNames((0, "INFORMANT-ADV", "pSchedFlowInstance"))
if mibBuilder.loadTexts: pSchedFlowEntry.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowEntry.setDescription("Performance information for one particular instance of 'PSched Flow' object.")
pSchedFlowInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowInstance.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowInstance.setDescription('Instance name.')
pSchedFlowAveragePktsInNetcard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowAveragePktsInNetcard.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowAveragePktsInNetcard.setDescription('The average number of packets that have been queued in the netcard by this flow.')
pSchedFlowAveragePktsInSequencer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowAveragePktsInSequencer.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowAveragePktsInSequencer.setDescription('The average number of packets in the sequencer over the last sampling period')
pSchedFlowAveragePktsInShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowAveragePktsInShaper.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowAveragePktsInShaper.setDescription('The average number of packets in the shaper over the last sampling period')
pSchedFlowBytesScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowBytesScheduled.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowBytesScheduled.setDescription('The number of bytes which got scheduled in some way (rather than just being directly sent to the underlying miniport)')
pSchedFlowBytesScheduledPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowBytesScheduledPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowBytesScheduledPerSec.setDescription('The number of bytes per second from this flow which have been scheduled')
pSchedFlowBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowBytesTransmitted.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowBytesTransmitted.setDescription('The number of bytes from this flow which have been sent')
pSchedFlowBytesTransmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowBytesTransmittedPerSec.setDescription('The number of bytes per second from this flow which have been sent')
pSchedFlowMaxPktsInSequencer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowMaxPktsInSequencer.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowMaxPktsInSequencer.setDescription('The maximum number of packets that have ever simultaneously been in the sequencer')
pSchedFlowMaxPktsInShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowMaxPktsInShaper.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowMaxPktsInShaper.setDescription('The maximum number of packets that have ever simultaneously been in the shaper')
pSchedFlowMaximumPktsInNetcard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowMaximumPktsInNetcard.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowMaximumPktsInNetcard.setDescription('The maximum number of packets that have been queued in the netcard by this flow.')
pSchedFlowNonconfPktsSched = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowNonconfPktsSched.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowNonconfPktsSched.setDescription('The number of packets that have entered the packet scheduler at a rate which exceeded the flow parameters')
pSchedFlowNonconfPktsSchedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowNonconfPktsSchedPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowNonconfPktsSchedPerSec.setDescription('The rate at which nonconforming packets have entered the packet scheduler')
pSchedFlowNonconfPktsXmitd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowNonconfPktsXmitd.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowNonconfPktsXmitd.setDescription('The number of packets that have been sent by the packet scheduler at a rate which exceeded the flow parameters')
pSchedFlowNonconfPktsXmitdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowNonconfPktsXmitdPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowNonconfPktsXmitdPerSec.setDescription('The rate at which nonconforming packets have been sent by the packet scheduler')
pSchedFlowPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowPktsDropped.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowPktsDropped.setDescription('The number of packets dropped by the packet scheduler')
pSchedFlowPktsDroppedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowPktsDroppedPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowPktsDroppedPerSec.setDescription('The number of packets dropped by the packet scheduler from this flow per second')
pSchedFlowPktsScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowPktsScheduled.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowPktsScheduled.setDescription('The number of packets which got scheduled in some way (rather than just being directly sent to the underlying miniport)')
pSchedFlowPktsScheduledPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowPktsScheduledPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowPktsScheduledPerSec.setDescription('The number of packets per second from this flow which have been scheduled')
pSchedFlowPktsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowPktsTransmitted.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowPktsTransmitted.setDescription('The number of packets from this flow which have been sent')
pSchedFlowPktsTransmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 66, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedFlowPktsTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedFlowPktsTransmittedPerSec.setDescription('The number of packets per second from this flow which have been sent')
pSchedPipeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67), )
if mibBuilder.loadTexts: pSchedPipeTable.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeTable.setDescription('The PSched Pipe Object performance object reports statistics from the packet scheduler, a feature of QoS Admission Control.')
pSchedPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1), ).setIndexNames((0, "INFORMANT-ADV", "pSchedPipeInstance"))
if mibBuilder.loadTexts: pSchedPipeEntry.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeEntry.setDescription("Performance information for one particular instance of 'PSched Pipe' object.")
pSchedPipeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeInstance.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeInstance.setDescription('Instance name.')
pSchedPipeAvgPacketsInNetcard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeAvgPacketsInNetcard.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeAvgPacketsInNetcard.setDescription('The average number of packets in the network card over the last sampling period')
pSchedPipeAvgPacketsInSequencer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeAvgPacketsInSequencer.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeAvgPacketsInSequencer.setDescription('The average number of packets in the sequencer over the last sampling period')
pSchedPipeAvgPacketsInShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeAvgPacketsInShaper.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeAvgPacketsInShaper.setDescription('The average number of packets in the shaper over the last sampling period')
pSchedPipeFlowModsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeFlowModsRejected.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeFlowModsRejected.setDescription('The number of times a flow modification has been rejected')
pSchedPipeFlowsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeFlowsClosed.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeFlowsClosed.setDescription('The number of flows that have been closed')
pSchedPipeFlowsModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeFlowsModified.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeFlowsModified.setDescription('The of times a flow has been modified')
pSchedPipeFlowsOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeFlowsOpened.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeFlowsOpened.setDescription('The number of flows opened on this pipe (some of which may now be closed)')
pSchedPipeFlowsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeFlowsRejected.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeFlowsRejected.setDescription('The number of flow creations that were rejected')
pSchedPipeMaxPacketsInNetcard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeMaxPacketsInNetcard.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeMaxPacketsInNetcard.setDescription('The maximum number of packets ever simultaneously in the network card')
pSchedPipeMaxPacketsInSequencer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeMaxPacketsInSequencer.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeMaxPacketsInSequencer.setDescription('The maximum number of packets that have ever simultaneously been in the sequencer')
pSchedPipeMaxPacketsInShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeMaxPacketsInShaper.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeMaxPacketsInShaper.setDescription('The maximum number of packets that have ever simultaneously been in the shaper')
pSchedPipeMaxSimultaneousFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeMaxSimultaneousFlows.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeMaxSimultaneousFlows.setDescription('The maximum number of flows that have been simultaneously open on this pipe')
pSchedPipeBadPacketsSched = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeBadPacketsSched.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeBadPacketsSched.setDescription("The number of packets that have entered the packet scheduler at a rate which exceeded that packet's flow parameters")
pSchedPipeBadPacketsSchedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeBadPacketsSchedPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeBadPacketsSchedPerSec.setDescription('The rate at which nonconforming packets have entered the packet scheduler')
pSchedPipeBadPacketsXmited = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeBadPacketsXmited.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeBadPacketsXmited.setDescription("The number of packets that have been sent by the packet scheduler at a rate which exceeded that packet's flow parameters")
pSchedPipeBadPacketsXmitedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeBadPacketsXmitedPerSec.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeBadPacketsXmitedPerSec.setDescription('The rate at which nonconforming packets have been sent by the packet scheduler')
pSchedPipeOutOfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 67, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSchedPipeOutOfPackets.setStatus('current')
if mibBuilder.loadTexts: pSchedPipeOutOfPackets.setDescription('The number of times Pacer has been unable to allocate a packet')
rasTotal = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68))
if mibBuilder.loadTexts: rasTotal.setStatus('current')
if mibBuilder.loadTexts: rasTotal.setDescription('The RAS Total performance object consists of counters that combine values for all ports of the Remote Access Service (RAS) device on the computer.')
rasTotalAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: rasTotalAlignmentErrors.setDescription('The total number of Alignment Errors for this connection. Alignment Errors occur when a byte received is different from the byte expected.')
rasTotalBufferOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalBufferOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: rasTotalBufferOverrunErrors.setDescription('The total number of Buffer Overrun Errors for this connection. Buffer Overrun Errors when the software cannot handle the rate at which data is received.')
rasTotalBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalBytesReceived.setStatus('current')
if mibBuilder.loadTexts: rasTotalBytesReceived.setDescription('The number of bytes received total for this connection.')
rasTotalBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasTotalBytesReceivedPerSec.setDescription('The number of bytes received per second.')
rasTotalBytesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalBytesTransmitted.setStatus('current')
if mibBuilder.loadTexts: rasTotalBytesTransmitted.setDescription('The number of bytes transmitted total for this connection.')
rasTotalBytesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasTotalBytesTransmittedPerSec.setDescription('The number of bytes transmitted per second.')
rasTotalCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalCRCErrors.setStatus('current')
if mibBuilder.loadTexts: rasTotalCRCErrors.setDescription('The total number of CRC Errors for this connection. CRC Errors occur when the frame received contains erroneous data.')
rasTotalFramesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalFramesReceived.setStatus('current')
if mibBuilder.loadTexts: rasTotalFramesReceived.setDescription('The number of data frames received total for this connection.')
rasTotalFramesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalFramesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasTotalFramesReceivedPerSec.setDescription('The number of frames received per second.')
rasTotalFramesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalFramesTransmitted.setStatus('current')
if mibBuilder.loadTexts: rasTotalFramesTransmitted.setDescription('The number of data frames transmitted total for this connection.')
rasTotalFramesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalFramesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasTotalFramesTransmittedPerSec.setDescription('The number of frames transmitted per second.')
rasTotalPercentCompressionIn = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalPercentCompressionIn.setStatus('current')
if mibBuilder.loadTexts: rasTotalPercentCompressionIn.setDescription('The compression ratio for bytes being received.')
rasTotalPercentCompressionOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalPercentCompressionOut.setStatus('current')
if mibBuilder.loadTexts: rasTotalPercentCompressionOut.setDescription('The compression ratio for bytes being transmitted.')
rasTotalSerialOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalSerialOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: rasTotalSerialOverrunErrors.setDescription('The total number of Serial Overrun Errors for this connection. Serial Overrun Errors occur when the hardware cannot handle the rate at which data is received.')
rasTotalTimeoutErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: rasTotalTimeoutErrors.setDescription('The total number of Timeout Errors for this connection. Timeout Errors occur when an expected is not received in time.')
rasTotalTotalConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalTotalConnections.setStatus('current')
if mibBuilder.loadTexts: rasTotalTotalConnections.setDescription('The total number of Remote Access connections.')
rasTotalTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalTotalErrors.setStatus('current')
if mibBuilder.loadTexts: rasTotalTotalErrors.setDescription('The total number of CRC, Timeout, Serial Overrun, Alignment, and Buffer Overrun Errors for this connection.')
rasTotalTotalErrorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 68, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTotalTotalErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: rasTotalTotalErrorsPerSec.setDescription('The total number of CRC, Timeout, Serial Overrun, Alignment, and Buffer Overrun Errors per second.')
rasPortTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69), )
if mibBuilder.loadTexts: rasPortTable.setStatus('current')
if mibBuilder.loadTexts: rasPortTable.setDescription('The RAS Port performance object consists of counters that monitor individual Remote Access Service (RAS) ports of the RAS device on the system.')
rasPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1), ).setIndexNames((0, "INFORMANT-ADV", "rasPortInstance"))
if mibBuilder.loadTexts: rasPortEntry.setStatus('current')
if mibBuilder.loadTexts: rasPortEntry.setDescription("Performance information for one particular instance of 'RAS Port' object.")
rasPortInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortInstance.setStatus('current')
if mibBuilder.loadTexts: rasPortInstance.setDescription('Instance name.')
rasPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: rasPortAlignmentErrors.setDescription('The total number of Alignment Errors for this connection. Alignment Errors occur when a byte received is different from the byte expected.')
rasPortBufferOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortBufferOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: rasPortBufferOverrunErrors.setDescription('The total number of Buffer Overrun Errors for this connection. Buffer Overrun Errors when the software cannot handle the rate at which data is received.')
rasPortBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortBytesReceived.setStatus('current')
if mibBuilder.loadTexts: rasPortBytesReceived.setDescription('The number of bytes received total for this connection.')
rasPortBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasPortBytesReceivedPerSec.setDescription('The number of bytes received per second.')
rasPortBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortBytesTransmitted.setStatus('current')
if mibBuilder.loadTexts: rasPortBytesTransmitted.setDescription('The number of bytes transmitted total for this connection.')
rasPortBytesTransmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasPortBytesTransmittedPerSec.setDescription('The number of bytes transmitted per second.')
rasPortCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortCRCErrors.setStatus('current')
if mibBuilder.loadTexts: rasPortCRCErrors.setDescription('The total number of CRC Errors for this connection. CRC Errors occur when the frame received contains erroneous data.')
rasPortFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortFramesReceived.setStatus('current')
if mibBuilder.loadTexts: rasPortFramesReceived.setDescription('The number of data frames received total for this connection.')
rasPortFramesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortFramesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasPortFramesReceivedPerSec.setDescription('The number of frames received per second.')
rasPortFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortFramesTransmitted.setStatus('current')
if mibBuilder.loadTexts: rasPortFramesTransmitted.setDescription('The number of data frames transmitted total for this connection.')
rasPortFramesTransmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortFramesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: rasPortFramesTransmittedPerSec.setDescription('The number of frames transmitted per second.')
rasPortPercentCompressionIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortPercentCompressionIn.setStatus('current')
if mibBuilder.loadTexts: rasPortPercentCompressionIn.setDescription('The compression ratio for bytes being received.')
rasPortPercentCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortPercentCompressionOut.setStatus('current')
if mibBuilder.loadTexts: rasPortPercentCompressionOut.setDescription('The compression ratio for bytes being transmitted.')
rasPortSerialOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortSerialOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: rasPortSerialOverrunErrors.setDescription('The total number of Serial Overrun Errors for this connection. Serial Overrun Errors occur when the hardware cannot handle the rate at which data is received.')
rasPortTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: rasPortTimeoutErrors.setDescription('The total number of Timeout Errors for this connection. Timeout Errors occur when an expected is not received in time.')
rasPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortTotalErrors.setStatus('current')
if mibBuilder.loadTexts: rasPortTotalErrors.setDescription('The total number of CRC, Timeout, Serial Overrun, Alignment, and Buffer Overrun Errors for this connection.')
rasPortTotalErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 69, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPortTotalErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: rasPortTotalErrorsPerSec.setDescription('The total number of CRC, Timeout, Serial Overrun, Alignment, and Buffer Overrun Errors per second.')
redirector = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70))
if mibBuilder.loadTexts: redirector.setStatus('current')
if mibBuilder.loadTexts: redirector.setDescription('The Redirector performance object consists of counters that monitor network connections originating at the local computer.')
redirBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: redirBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate of bytes coming in to the Redirector from the network. It includes all application data as well as network protocol information (such as packet headers).')
redirBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: redirBytesTotalPerSec.setDescription('Bytes Total/sec is the rate the Redirector is processing data bytes. This includes all application and file data in addition to protocol information such as packet headers.')
redirBytesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: redirBytesTransmittedPerSec.setDescription('Bytes Transmitted/sec is the rate at which bytes are leaving the Redirector to the network. It includes all application data as well as network protocol information (such as packet headers and the like).')
redirConnectsCore = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirConnectsCore.setStatus('current')
if mibBuilder.loadTexts: redirConnectsCore.setDescription("Connects Core counts the number of connections you have to servers running the original MS-Net SMB protocol, including MS-Net itself and Xenix and VAX's.")
redirConnectsLanManager20 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirConnectsLanManager20.setStatus('current')
if mibBuilder.loadTexts: redirConnectsLanManager20.setDescription('Connects LAN Manager 2.0 counts connections to LAN Manager 2.0 servers, including LMX servers.')
redirConnectsLanManager21 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirConnectsLanManager21.setStatus('current')
if mibBuilder.loadTexts: redirConnectsLanManager21.setDescription('Connects LAN Manager 2.1 counts connections to LAN Manager 2.1 servers, including LMX servers.')
redirConnectsWindowsNT = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirConnectsWindowsNT.setStatus('current')
if mibBuilder.loadTexts: redirConnectsWindowsNT.setDescription('Connects Windows NT counts the connections to Windows 2000 or earlier computers.')
redirCurrentCommands = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirCurrentCommands.setStatus('current')
if mibBuilder.loadTexts: redirCurrentCommands.setDescription('Current Commands counter indicates the number of pending commands from the local computer to all destination servers. If the Current Commands counter shows a high number and the local computer is idle, this may indicate a network-related problem or a redirector bottleneck on the local computer.')
redirFileDataOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirFileDataOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirFileDataOperationsPerSec.setDescription('File Data Operations/sec is the rate at which the Redirector is processing data operations. One operation should include many bytes, since each operation has overhead. The efficiency of this path can be determined by dividing the Bytes/sec by this counter to obtain the average number of bytes transferred per operation.')
redirFileReadOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirFileReadOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirFileReadOperationsPerSec.setDescription('File Read Operations/sec is the rate at which applications are asking the Redirector for data. Each call to a file system or similar Application Program Interface (API) call counts as one operation.')
redirFileWriteOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirFileWriteOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirFileWriteOperationsPerSec.setDescription('File Write Operations/sec is the rate at which applications are sending data to the Redirector. Each call to a file system or similar Application Program Interface (API) call counts as one operation.')
redirNetworkErrorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirNetworkErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirNetworkErrorsPerSec.setDescription('Network Errors/sec is the rate at which serious unexpected errors are occurring. Such errors generally indicate that the Redirector and one or more Servers are having serious communication difficulties. For example an SMB (Server Manager Block) protocol error is a Network Error. An entry is written to the System Event Log and provide details.')
redirPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: redirPacketsReceivedPerSec.setDescription('Packets Received/sec is the rate at which the Redirector is receiving packets (also called SMBs or Server Message Blocks). Network transmissions are divided into packets. The average number of bytes received in a packet can be obtained by dividing Bytes Received/sec by this counter. Some packets received might not contain incoming data (for example an acknowledgment to a write made by the Redirector would count as an incoming packet).')
redirPacketsTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirPacketsTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: redirPacketsTransmittedPerSec.setDescription('Packets Transmitted/sec is the rate at which the Redirector is sending packets (also called SMBs or Server Message Blocks). Network transmissions are divided into packets. The average number of bytes transmitted in a packet can be obtained by dividing Bytes Transmitted/sec by this counter.')
redirPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirPacketsPerSec.setDescription('Packets/sec is the rate the Redirector is processing data packets. One packet includes (hopefully) many bytes. We say hopefully here because each packet has protocol overhead. You can determine the efficiency of this path by dividing the Bytes/sec by this counter to determine the average number of bytes transferred/packet. You can also divide this counter by Operations/sec to determine the average number of packets per operation, another measure of efficiency.')
redirReadBytesCachePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadBytesCachePerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadBytesCachePerSec.setDescription('Read Bytes Cache/sec is the rate at which applications are accessing the file system cache by using the Redirector. Some of these data requests are satisfied by retrieving the data from the cache. Requests that miss the Cache cause a page fault (see Read Bytes Paging/sec).')
redirReadBytesNetworkPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadBytesNetworkPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadBytesNetworkPerSec.setDescription('Read Bytes Network/sec is the rate at which applications are reading data across the network. This occurs when data sought in the file system cache is not found there and must be retrieved from the network. Dividing this value by Bytes Received/sec indicates the proportion of application data traveling across the network. (see Bytes Received/sec).')
redirReadBytesNonPagingPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadBytesNonPagingPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadBytesNonPagingPerSec.setDescription('Read Bytes Non-Paging/sec are those bytes read by the Redirector in response to normal file requests by an application when they are redirected to come from another computer. In addition to file requests, this counter includes other methods of reading across the network such as Named Pipes and Transactions. This counter does not count network protocol information, just application data.')
redirReadBytesPagingPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadBytesPagingPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadBytesPagingPerSec.setDescription('Read Bytes Paging/sec is the rate at which the Redirector is attempting to read bytes in response to page faults. Page faults are caused by loading of modules (such as programs and libraries), by a miss in the Cache (see Read Bytes Cache/sec), or by files directly mapped into the address space of applications (a high-performance feature of Windows NT).')
redirReadOperationsRandomPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadOperationsRandomPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadOperationsRandomPerSec.setDescription('Read Operations Random/sec counts the rate at which, on a file-by-file basis, reads are made that are not sequential. If a read is made using a particular file handle, and then is followed by another read that is not immediately the contiguous next byte, this counter is incremented by one.')
redirReadPacketsSmallPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadPacketsSmallPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadPacketsSmallPerSec.setDescription("Read Packets Small/sec is the rate at which reads less than one-fourth of the server's negotiated buffer size are made by applications. Too many of these could indicate a waste of buffers on the server. This counter is incremented once for each read. It does not count packets.")
redirReadPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadPacketsPerSec.setDescription('Read Packets/sec is the rate at which read packets are being placed on the network. Each time a single packet is sent with a request to read data remotely, this counter is incremented by one.')
redirReadsDeniedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadsDeniedPerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadsDeniedPerSec.setDescription("Reads Denied/sec is the rate at which the server is unable to accommodate requests for Raw Reads. When a read is much larger than the server's negotiated buffer size, the Redirector requests a Raw Read which, if granted, would permit the transfer of the data without lots of protocol overhead on each packet. To accomplish this the server must lock out other requests, so the request is denied if the server is really busy.")
redirReadsLargePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirReadsLargePerSec.setStatus('current')
if mibBuilder.loadTexts: redirReadsLargePerSec.setDescription("Reads Large/sec is the rate at which reads over 2 times the server's negotiated buffer size are made by applications. Too many of these could place a strain on server resources. This counter is incremented once for each read. It does not count packets.")
redirServerDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirServerDisconnects.setStatus('current')
if mibBuilder.loadTexts: redirServerDisconnects.setDescription('Server Disconnects counts the number of times a Server has disconnected your Redirector. See also Server Reconnects.')
redirServerReconnects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirServerReconnects.setStatus('current')
if mibBuilder.loadTexts: redirServerReconnects.setDescription('Server Reconnects counts the number of times your Redirector has had to reconnect to a server in order to complete a new active request. You can be disconnected by the Server if you remain inactive for too long. Locally even if all your remote files are closed, the Redirector will keep your connections intact for (nominally) ten minutes. Such inactive connections are called Dormant Connections. Reconnecting is expensive in time.')
redirServerSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirServerSessions.setStatus('current')
if mibBuilder.loadTexts: redirServerSessions.setDescription('Server Sessions counts the total number of security objects the Redirector has managed. For example, a logon to a server followed by a network access to the same server will establish one connection, but two sessions.')
redirServerSessionsHung = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirServerSessionsHung.setStatus('current')
if mibBuilder.loadTexts: redirServerSessionsHung.setDescription('Server Sessions Hung counts the number of active sessions that are timed out and unable to proceed due to a lack of response from the remote server.')
redirWriteBytesCachePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWriteBytesCachePerSec.setStatus('current')
if mibBuilder.loadTexts: redirWriteBytesCachePerSec.setDescription('Write Bytes Cache/sec is the rate at which applications on your computer are writing to the file system cache by using the Redirector. The data might not leave your computer immediately; it can be retained in the cache for further modification before being written to the network. This saves network traffic. Each write of a byte into the cache is counted here.')
redirWriteBytesNetworkPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWriteBytesNetworkPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWriteBytesNetworkPerSec.setDescription('Write Bytes Network/sec is the rate at which applications are writing data across the network. This occurs when the file system cache is bypassed, such as for Named Pipes or Transactions, or when the cache writes the bytes to disk to make room for other data. Dividing this counter by Bytes Transmitted/sec will indicate the proportion of application data being to the network (see Transmitted Bytes/sec).')
redirWriteBytesNonPagingPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWriteBytesNonPagingPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWriteBytesNonPagingPerSec.setDescription('Write Bytes Non-Paging/sec is the rate at which bytes are written by the Redirector in response to normal file outputs by an application when they are redirected to another computer. In addition to file requests, this count includes other methods of writing across the network, such as Named Pipes and Transactions. This counter does not count network protocol information, just application data.')
redirWriteBytesPagingPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWriteBytesPagingPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWriteBytesPagingPerSec.setDescription("Write Bytes Paging/sec is the rate at which the Redirector is attempting to write bytes changed in the pages being used by applications. The program data changed by modules (such as programs and libraries) that were loaded over the network are 'paged out' when no longer needed. Other output pages come from the file system cache (see Write Bytes Cache/sec).")
redirWriteOperationsRandomPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWriteOperationsRandomPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWriteOperationsRandomPerSec.setDescription('Write Operations Random/sec is the rate at which, on a file-by-file basis, writes are made that are not sequential. If a write is made using a particular file handle, and then is followed by another write that is not immediately the next contiguous byte, this counter is incremented by one.')
redirWritePacketsSmallPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWritePacketsSmallPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWritePacketsSmallPerSec.setDescription("Write Packets Small/sec is the rate at which writes are made by applications that are less than one-fourth of the server's negotiated buffer size. Too many of these could indicate a waste of buffers on the server. This counter is incremented once for each write: it counts writes, not packets.")
redirWritePacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWritePacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWritePacketsPerSec.setDescription('Write Packets/sec is the rate at which writes are being sent to the network. Each time a single packet is sent with a request to write remote data, this counter is incremented by one.')
redirWritesDeniedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWritesDeniedPerSec.setStatus('current')
if mibBuilder.loadTexts: redirWritesDeniedPerSec.setDescription("Writes Denied/sec is the rate at which the server is unable to accommodate requests for Raw Writes. When a write is much larger than the server's negotiated buffer size, the Redirector requests a Raw Write which, if granted, would permit the transfer of the data without lots of protocol overhead on each packet. To accomplish this the server must lock out other requests, so the request is denied if the server is really busy.")
redirWritesLargePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 70, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirWritesLargePerSec.setStatus('current')
if mibBuilder.loadTexts: redirWritesLargePerSec.setDescription("Writes Large/sec is the rate at which writes are made by applications that are over 2 times the server's negotiated buffer size. Too many of these could place a strain on server resources. This counter is incremented once for each write: it counts writes, not packets.")
rsvpInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71), )
if mibBuilder.loadTexts: rsvpInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: rsvpInterfacesTable.setDescription('ACS/RSVP Interfaces performance object counters report statistics about RSVP activity, flow, bandwidth, RSVP messages sent, and so on. The ACS/RSVP Interfaces object is available if ACS is running and there is an object for each IP address on the system.')
rsvpInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1), ).setIndexNames((0, "INFORMANT-ADV", "rsvpIfInstance"))
if mibBuilder.loadTexts: rsvpInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpInterfacesEntry.setDescription("Performance information for one particular instance of 'RSVP Interfaces' object.")
rsvpIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfInstance.setStatus('current')
if mibBuilder.loadTexts: rsvpIfInstance.setDescription('Instance name.')
rsvpIfBlockedRESVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfBlockedRESVs.setStatus('current')
if mibBuilder.loadTexts: rsvpIfBlockedRESVs.setDescription('Shows the number of blockaded reservations that failed due to failed reservations that have not been removed from this node. For more information about blockade states, see RFC 2205.')
rsvpIfGeneralFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfGeneralFailures.setStatus('current')
if mibBuilder.loadTexts: rsvpIfGeneralFailures.setDescription('Shows the total number of non-admission control errors that have occurred on this interface. For more information about the other traffic control failures, see RFC 2205.')
rsvpIfMaximumAdmittedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfMaximumAdmittedBandwidth.setStatus('current')
if mibBuilder.loadTexts: rsvpIfMaximumAdmittedBandwidth.setDescription('Shows the highest amount of allocated bandwidth admitted on the interface during the period in which the ACS has been running.')
rsvpIfNumOfActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfNumOfActiveFlows.setStatus('current')
if mibBuilder.loadTexts: rsvpIfNumOfActiveFlows.setDescription('Shows the number of reserved flows that are currently installed and maintained by RSVP on this interface.')
rsvpIfNumOfIncomingMsgsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfNumOfIncomingMsgsDropped.setStatus('current')
if mibBuilder.loadTexts: rsvpIfNumOfIncomingMsgsDropped.setDescription('Number of incoming messages dropped due to badly constructed RSVP objects etc.')
rsvpIfNumOfOutgoingMsgsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfNumOfOutgoingMsgsDropped.setStatus('current')
if mibBuilder.loadTexts: rsvpIfNumOfOutgoingMsgsDropped.setDescription('Number of outgoing messages dropped')
rsvpIfPATHERRMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHERRMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHERRMsgsReceived.setDescription('Shows the total number of PATH error messages received on this interface. This number indicates the number of times that a PATH has been rejected by a remote host.')
rsvpIfPATHERRMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHERRMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHERRMsgsSent.setDescription('Shows the total number of PATH ERR messages that were sent by the ACS/RSVP service rejecting incoming PATH messages.')
rsvpIfPATHTEARMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHTEARMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHTEARMsgsReceived.setDescription('Shows the total number of PATH TEAR messages that have been received on the interface. A PATH-TEAR message removes the PATH state along the route.')
rsvpIfPATHTEARMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHTEARMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHTEARMsgsSent.setDescription('Shows the total number of PATH TEAR messages that were sent on the interface to tear down an RSVP PATH state in the network. A PATH-ERR messages indicates an error in response to the PATH message.')
rsvpIfPATHMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHMsgsReceived.setDescription('Shows the total number of PATH messages that have been received on this interface.')
rsvpIfPATHMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHMsgsSent.setDescription('Shows the total number of PATH messages that were sent by the ACS/RSVP service on this the interface.')
rsvpIfPATHStateBlockTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPATHStateBlockTimeouts.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPATHStateBlockTimeouts.setDescription('Shows the total number of times that the RSVP PATH state timed out. This happens when no PATH messages are received within the designated timeout period. This error message can be caused by a route change.')
rsvpIfPolicyControlFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfPolicyControlFailures.setStatus('current')
if mibBuilder.loadTexts: rsvpIfPolicyControlFailures.setDescription('Shows the total number of RSVP requests that are not admitted on this interface due to a conflict with policy settings.')
rsvpIfRESVCONFIRMMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVCONFIRMMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVCONFIRMMsgsReceived.setDescription('Shows the total number of RESV CONFIRM messages that have been received by the interface.')
rsvpIfRESVCONFIRMMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVCONFIRMMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVCONFIRMMsgsSent.setDescription('Shows the total number of RESV CONFIRM messages that were sent on this interface in response to RESV messages sent from remote hosts.')
rsvpIfRESVERRMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVERRMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVERRMsgsReceived.setDescription('Shows the total number of RESV ERR messages that were sent on this interface by the ACS/RSVP service. rejecting incoming RESV messages. A RESV-ERR message indicates an error in response to the RESV.')
rsvpIfRESVERRMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVERRMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVERRMsgsSent.setDescription('Shows the total number of RESV errors that were sent on this interface. This number indicates how many reservations have been rejected by the network.')
rsvpIfRESVTEARMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVTEARMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVTEARMsgsReceived.setDescription('Shows the total number of RESV TEAR messages that have been received on the interface. A RESV-TEAR message removes the reservation along the route.')
rsvpIfRESVTEARMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVTEARMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVTEARMsgsSent.setDescription('Shows the total number of RESV TEAR messages that were sent on the interface to tear down a RESV state in the network.')
rsvpIfRESVMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVMsgsReceived.setDescription('Shows the total number of RESV messages that have been received on this interface.')
rsvpIfRESVMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVMsgsSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVMsgsSent.setDescription('Shows the total number of RESV messages that were sent by the ACS/RSVP service sent on this the interface')
rsvpIfRESVStateBlockTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfRESVStateBlockTimeouts.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRESVStateBlockTimeouts.setDescription('Shows the total number of times that the RSVP RESV state timed out. This happens when no RESV messages are received within the designated timeout period. This error message can be caused by a route change.')
rsvpIfReceiveMsgsErrorsBigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfReceiveMsgsErrorsBigMsgs.setStatus('current')
if mibBuilder.loadTexts: rsvpIfReceiveMsgsErrorsBigMsgs.setDescription('Shows the total number of outgoing RSVP messages that were dropped because they were bigger than the maximum configured RSVP message size.')
rsvpIfReceiveMsgsErrorsNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfReceiveMsgsErrorsNoMemory.setStatus('current')
if mibBuilder.loadTexts: rsvpIfReceiveMsgsErrorsNoMemory.setDescription('Shows the total number of outgoing RSVP messages that were dropped due to insufficient memory.')
rsvpIfReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfReservedBandwidth.setStatus('current')
if mibBuilder.loadTexts: rsvpIfReservedBandwidth.setDescription('Shows the reserved bandwidth for this interface, in bits per second.')
rsvpIfResourceControlFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfResourceControlFailures.setStatus('current')
if mibBuilder.loadTexts: rsvpIfResourceControlFailures.setDescription('Shows the number of reservations that failed due to the lack of resources.')
rsvpIfSendMsgsErrorsBigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfSendMsgsErrorsBigMsgs.setStatus('current')
if mibBuilder.loadTexts: rsvpIfSendMsgsErrorsBigMsgs.setDescription('Shows the total number of outgoing RSVP messages that were dropped because they were bigger than the maximum configured RSVP message size.')
rsvpIfSendMsgsErrorsNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfSendMsgsErrorsNoMemory.setStatus('current')
if mibBuilder.loadTexts: rsvpIfSendMsgsErrorsNoMemory.setDescription('Shows the total number of outgoing RSVP messages that were dropped due to insufficient memory.')
rsvpIfSignalingBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfSignalingBytesReceived.setStatus('current')
if mibBuilder.loadTexts: rsvpIfSignalingBytesReceived.setDescription('Shows the total RSVP signaling traffic, in bytes, that have been received by the ACS/RSVP service on this interface.')
rsvpIfSignalingBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 71, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfSignalingBytesSent.setStatus('current')
if mibBuilder.loadTexts: rsvpIfSignalingBytesSent.setDescription('Shows the total RSVP signaling traffic, in bytes, that were sent by the ACS/RSVP service on this interface.')
rsvpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72), )
if mibBuilder.loadTexts: rsvpServiceTable.setStatus('current')
if mibBuilder.loadTexts: rsvpServiceTable.setDescription('The ACS/RSVP Service performance object counters report statistics about Resource Reservation Protocol (RSVP) and Quality of Service (QoS) Admission Control (ACS) activity, flow, bandwidth, RSVP messages sent, and so on. The ACS/RSVP Service object is available if QoS Admission Control is installed, even if the service is not running.')
rsvpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1), ).setIndexNames((0, "INFORMANT-ADV", "rsvpSvcInstance"))
if mibBuilder.loadTexts: rsvpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpServiceEntry.setDescription("Performance information for one particular instance of 'RSVP Service' object.")
rsvpSvcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcInstance.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcInstance.setDescription('Instance name.')
rsvpSvcBytesInQoSNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcBytesInQoSNotifications.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcBytesInQoSNotifications.setDescription('A running total of the number of bytes delivered in QoS Notifications to QoS-enabled applications.')
rsvpSvcFailedQoSRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcFailedQoSRequests.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcFailedQoSRequests.setDescription('The number of QoS requests generated by QoS-enabled applications that have been rejected by the RSVP service. Failed QoS requests can be caused by invalid QoS requests.')
rsvpSvcFailedQoSSends = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcFailedQoSSends.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcFailedQoSSends.setDescription('The number of QoS notifications the RSVP service that could not be sent to the QoS applications. Failed QoS sends can be caused by terminated applications.')
rsvpSvcNetworkInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcNetworkInterfaces.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcNetworkInterfaces.setDescription('The number of local network interfaces visible to, and used by the RSVP service.')
rsvpSvcNetworkSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcNetworkSockets.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcNetworkSockets.setDescription('The total number of raw sockets opened for the purpose of RSVP signaling.')
rsvpSvcQoSClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcQoSClients.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcQoSClients.setDescription('The number of QoS enabled applications currently active.')
rsvpSvcQoSNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcQoSNotifications.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcQoSNotifications.setDescription('The number of QoS notifications delivered to QoS-enabled applications by the QoS RSVP service.')
rsvpSvcQoSenabledReceivers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcQoSenabledReceivers.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcQoSenabledReceivers.setDescription('Indicates the number of RESV messages sent for QoS-enabled receivers. This number increments each time a RESV is refreshed.')
rsvpSvcQoSenabledSenders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcQoSenabledSenders.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcQoSenabledSenders.setDescription('Indicates the number of PATH messages sent for QoS-enabled senders. This number increments each time a PATH is refreshed.')
rsvpSvcRSVPSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcRSVPSessions.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcRSVPSessions.setDescription('The current number of active RSVP sessions on the RSVP service.')
rsvpSvcTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 72, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSvcTimers.setStatus('current')
if mibBuilder.loadTexts: rsvpSvcTimers.setDescription('The number of timer events scheduled to take place. Shows the activity level of the RSVP service.')
server = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73))
if mibBuilder.loadTexts: server.setStatus('current')
if mibBuilder.loadTexts: server.setDescription('The Server performance object consists of counters that measure communication between the local computer and the network.')
serverBlockingRequestsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverBlockingRequestsRejected.setStatus('current')
if mibBuilder.loadTexts: serverBlockingRequestsRejected.setDescription('The number of times the server has rejected blocking SMBs due to insufficient count of free work items. Indicates whether the MaxWorkItem or MinFreeWorkItems server parameters might need to be adjusted.')
serverBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: serverBytesReceivedPerSec.setDescription('The number of bytes the server has received from the network. Indicates how busy the server is.')
serverBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: serverBytesTotalPerSec.setDescription('The number of bytes the server has sent to and received from the network. This value provides an overall indication of how busy the server is.')
serverBytesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: serverBytesTransmittedPerSec.setDescription('The number of bytes the server has sent on the network. Indicates how busy the server is.')
serverContextBlocksQueuedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverContextBlocksQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: serverContextBlocksQueuedPerSec.setDescription("Context Blocks Queued per second is the rate at which work context blocks had to be placed on the server's FSP queue to await server action.")
serverErrorsAccessPermissions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverErrorsAccessPermissions.setStatus('current')
if mibBuilder.loadTexts: serverErrorsAccessPermissions.setDescription('The number of times opens on behalf of clients have failed with STATUS_ACCESS_DENIED. Can indicate whether somebody is randomly attempting to access files in hopes of getting at something that was not properly protected.')
serverErrorsGrantedAccess = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverErrorsGrantedAccess.setStatus('current')
if mibBuilder.loadTexts: serverErrorsGrantedAccess.setDescription('The number of times accesses to files opened successfully were denied. Can indicate attempts to access files without proper access authorization.')
serverErrorsLogon = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverErrorsLogon.setStatus('current')
if mibBuilder.loadTexts: serverErrorsLogon.setDescription('The number of failed logon attempts to the server. Can indicate whether password guessing programs are being used to crack the security on the server.')
serverErrorsSystem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverErrorsSystem.setStatus('current')
if mibBuilder.loadTexts: serverErrorsSystem.setDescription('The number of times an internal Server Error was detected. Unexpected errors usually indicate a problem with the Server.')
serverFileDirectorySearches = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFileDirectorySearches.setStatus('current')
if mibBuilder.loadTexts: serverFileDirectorySearches.setDescription('The number of searches for files currently active in the server. Indicates current server activity.')
serverFilesOpen = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFilesOpen.setStatus('current')
if mibBuilder.loadTexts: serverFilesOpen.setDescription('The number of files currently opened in the server. Indicates current server activity.')
serverFilesOpenedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFilesOpenedTotal.setStatus('current')
if mibBuilder.loadTexts: serverFilesOpenedTotal.setDescription('The number of successful open attempts performed by the server of behalf of clients. Useful in determining the amount of file I/O, determining overhead for path-based operations, and for determining the effectiveness of open locks.')
serverLogonTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLogonTotal.setStatus('current')
if mibBuilder.loadTexts: serverLogonTotal.setDescription('Logon Total includes all interactive logons, network logons, service logons, successful logon, and failed logons since the machine is last rebooted.')
serverLogonPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLogonPerSec.setStatus('current')
if mibBuilder.loadTexts: serverLogonPerSec.setDescription('Logon/sec is the rate of all server logons.')
serverPoolNonpagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedBytes.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedBytes.setDescription('The number of bytes of non-pageable computer memory the server is using. This value is useful for determining the values of the MaxNonpagedMemoryUsage value entry in the WindowsNT Registry.')
serverPoolNonpagedFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedFailures.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedFailures.setDescription("The number of times allocations from nonpaged pool have failed. Indicates that the computer's physical memory is too small.")
serverPoolNonpagedPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedPeak.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedPeak.setDescription('The maximum number of bytes of nonpaged pool the server has had in use at any one point. Indicates how much physical memory the computer should have.')
serverPoolPagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedBytes.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedBytes.setDescription('The number of bytes of pageable computer memory the server is currently using. Can help in determining good values for the MaxPagedMemoryUsage parameter.')
serverPoolPagedFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedFailures.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedFailures.setDescription("The number of times allocations from paged pool have failed. Indicates that the computer's physical memory or paging file are too small.")
serverPoolPagedPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedPeak.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedPeak.setDescription('The maximum number of bytes of paged pool the server has had allocated. Indicates the proper sizes of the Page File(s) and physical memory.')
serverServerSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverServerSessions.setStatus('current')
if mibBuilder.loadTexts: serverServerSessions.setDescription('The number of sessions currently active in the server. Indicates current server activity.')
serverSessionsErroredOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSessionsErroredOut.setStatus('current')
if mibBuilder.loadTexts: serverSessionsErroredOut.setDescription('The number of sessions that have been closed due to unexpected error conditions or sessions that have reached the autodisconnect timeout and have been disconnected normally.')
serverSessionsForcedOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSessionsForcedOff.setStatus('current')
if mibBuilder.loadTexts: serverSessionsForcedOff.setDescription('The number of sessions that have been forced to logoff. Can indicate how many sessions were forced to logoff due to logon time constraints.')
serverSessionsLoggedOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSessionsLoggedOff.setStatus('current')
if mibBuilder.loadTexts: serverSessionsLoggedOff.setDescription('The number of sessions that have terminated normally. Useful in interpreting the Sessions Times Out and Sessions Errored Out statistics--allows percentage calculations.')
serverSessionsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: serverSessionsTimedOut.setDescription('The number of sessions that have been closed due to their idle time exceeding the AutoDisconnect parameter for the server. Shows whether the AutoDisconnect setting is helping to conserve resources.')
serverWorkItemShortages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverWorkItemShortages.setStatus('current')
if mibBuilder.loadTexts: serverWorkItemShortages.setDescription('The number of times STATUS_DATA_NOT_ACCEPTED was returned at receive indication time. This occurs when no work item is available or can be allocated to service the incoming request. Indicates whether the InitWorkItems or MaxWorkItems parameters might need to be adjusted.')
serverPoolNonpagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedKBytes.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedKBytes.setDescription('The number of kilobytes of non-pageable computer memory the server is using. This value is useful for determining the values of the MaxNonpagedMemoryUsage value entry in the Windows NT Registry.')
serverPoolNonpagedKBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedKBytesPeak.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedKBytesPeak.setDescription('The maximum number of kilobytes of nonpaged pool the server has had in use at any one point. Indicates how much physical memory the computer should have.')
serverPoolPagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedKBytes.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedKBytes.setDescription('The number of kilobytes of pageable computer memory the server is currently using. Can help in determining good values for the MaxPagedMemoryUsage parameter.')
serverPoolPagedKBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedKBytesPeak.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedKBytesPeak.setDescription('The maximum number of kilobytes of paged pool the server has had allocated. Indicates the proper sizes of the Page File(s) and physical memory.')
serverPoolNonpagedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedMBytes.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedMBytes.setDescription('The number of megabytes of non-pageable computer memory the server is using. This value is useful for determining the values of the MaxNonpagedMemoryUsage value entry in the Windows NT Registry.')
serverPoolNonpagedMBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolNonpagedMBytesPeak.setStatus('current')
if mibBuilder.loadTexts: serverPoolNonpagedMBytesPeak.setDescription('The maximum number of megabytes of nonpaged pool the server has had in use at any one point. Indicates how much physical memory the computer should have.')
serverPoolPagedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedMBytes.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedMBytes.setDescription('The number of megabytes of pageable computer memory the server is currently using. Can help in determining good values for the MaxPagedMemoryUsage parameter.')
serverPoolPagedMBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 73, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPoolPagedMBytesPeak.setStatus('current')
if mibBuilder.loadTexts: serverPoolPagedMBytesPeak.setDescription('The maximum number of megabytes of paged pool the server has had allocated. Indicates the proper sizes of the Page File(s) and physical memory.')
serverWorkQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74), )
if mibBuilder.loadTexts: serverWorkQueuesTable.setStatus('current')
if mibBuilder.loadTexts: serverWorkQueuesTable.setDescription('The Server Work Queues performance object consists of counters that monitor the length of queues and objects in the queues.')
serverWorkQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1), ).setIndexNames((0, "INFORMANT-ADV", "swqInstance"))
if mibBuilder.loadTexts: serverWorkQueuesEntry.setStatus('current')
if mibBuilder.loadTexts: serverWorkQueuesEntry.setDescription("Performance information for one particular instance of 'Server Work Queues' object.")
swqInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqInstance.setStatus('current')
if mibBuilder.loadTexts: swqInstance.setDescription('Instance name.')
swqActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqActiveThreads.setStatus('current')
if mibBuilder.loadTexts: swqActiveThreads.setDescription('Active Threads is the number of threads currently working on a request from the server client for this CPU. The system keeps this number as low as possible to minimize unnecessary context switching. This is an instantaneous count for the CPU, not an average over time.')
swqAvailableThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqAvailableThreads.setStatus('current')
if mibBuilder.loadTexts: swqAvailableThreads.setDescription('Available Threads is the number of server threads on this CPU not currently working on requests from a client. The server dynamically adjusts the number of threads to maximize server performance.')
swqAvailableWorkItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqAvailableWorkItems.setStatus('current')
if mibBuilder.loadTexts: swqAvailableWorkItems.setDescription("Every request from a client is represented in the server as a 'work item,' and the server maintains a pool of available work items per CPU to speed processing. This is the instantaneous number of available work items for this CPU. A sustained near-zero value indicates the need to increase the MinFreeWorkItems registry value for the Server service. This value will always be 0 in the Blocking Queue instance.")
swqBorrowedWorkItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqBorrowedWorkItems.setStatus('current')
if mibBuilder.loadTexts: swqBorrowedWorkItems.setDescription("Every request from a client is represented in the server as a 'work item,' and the server maintains a pool of available work items per CPU to speed processing. When a CPU runs out of work items, it borrows a free work item from another CPU. An increasing value of this running counter might indicate the need to increase the 'MaxWorkItems' or 'MinFreeWorkItems' registry values for the Server service. This value will always be 0 in the Blocking Queue instance.")
swqBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: swqBytesReceivedPerSec.setDescription('The rate at which the Server is receiving bytes from the network clients on this CPU. This value is a measure of how busy the Server is.')
swqBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: swqBytesSentPerSec.setDescription('The rate at which the Server is sending bytes to the network clients on this CPU. This value is a measure of how busy the Server is.')
swqBytesTransferredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqBytesTransferredPerSec.setStatus('current')
if mibBuilder.loadTexts: swqBytesTransferredPerSec.setDescription('The rate at which the Server is sending and receiving bytes with the network clients on this CPU. This value is a measure of how busy the Server is.')
swqContextBlocksQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqContextBlocksQueuedPerSec.setStatus('current')
if mibBuilder.loadTexts: swqContextBlocksQueuedPerSec.setDescription("Context Blocks Queued per second is the rate at which work context blocks had to be placed on the server's FSP queue to await server action.")
swqCurrentClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqCurrentClients.setStatus('current')
if mibBuilder.loadTexts: swqCurrentClients.setDescription("Current Clients is the instantaneous count of the clients being serviced by this CPU. The server actively balances the client load across all of the CPU's in the system. This value will always be 0 in the Blocking Queue instance.")
swqQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqQueueLength.setStatus('current')
if mibBuilder.loadTexts: swqQueueLength.setDescription('Queue Length is the current length of the server work queue for this CPU. A sustained queue length greater than four might indicate processor congestion. This is an instantaneous count, not an average over time.')
swqReadBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqReadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: swqReadBytesPerSec.setDescription('Read Bytes/sec is the rate the server is reading data from files for the clients on this CPU. This value is a measure of how busy the Server is.')
swqReadOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqReadOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: swqReadOperationsPerSec.setDescription('Read Operations/sec is the rate the server is performing file read operations for the clients on this CPU. This value is a measure of how busy the Server is. This value will always be 0 in the Blocking Queue instance.')
swqTotalBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqTotalBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: swqTotalBytesPerSec.setDescription('Total Bytes/sec is the rate the Server is reading and writing data to and from the files for the clients on this CPU. This value is a measure of how busy the Server is.')
swqTotalOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqTotalOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: swqTotalOperationsPerSec.setDescription('Total Operations/sec is the rate the Server is performing file read and file write operations for the clients on this CPU. This value is a measure of how busy the Server is. This value will always be 0 in the Blocking Queue instance.')
swqWorkItemShortages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqWorkItemShortages.setStatus('current')
if mibBuilder.loadTexts: swqWorkItemShortages.setDescription("Every request from a client is represented in the server as a 'work item,' and the server maintains a pool of available work items per CPU to speed processing. A sustained value greater than zero indicates the need to increase the 'MaxWorkItems' registry value for the Server service. This value will always be 0 in the Blocking Queue instance.")
swqWriteBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqWriteBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: swqWriteBytesPerSec.setDescription('Write Bytes/sec is the rate the server is writing data to files for the clients on this CPU. This value is a measure of how busy the Server is.')
swqWriteOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 74, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swqWriteOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: swqWriteOperationsPerSec.setDescription('Write Operations/sec is the rate the server is performing file write operations for the clients on this CPU. This value is a measure of how busy the Server is. This value will always be 0 in the Blocking Queue instance.')
smtpNTFSStoreDriverTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75), )
if mibBuilder.loadTexts: smtpNTFSStoreDriverTable.setStatus('current')
if mibBuilder.loadTexts: smtpNTFSStoreDriverTable.setDescription('The SMTP NTFS Store Driver performance object counters describe activity of the Exchange NTFS store driver, which is responsible for message transport to and from the message store.')
smtpNTFSStoreDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1), ).setIndexNames((0, "INFORMANT-ADV", "snsdInstance"))
if mibBuilder.loadTexts: smtpNTFSStoreDriverEntry.setStatus('current')
if mibBuilder.loadTexts: smtpNTFSStoreDriverEntry.setDescription("Performance information for one particular instance of 'SMTP NTFS Store Driver' object.")
snsdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdInstance.setStatus('current')
if mibBuilder.loadTexts: snsdInstance.setDescription('Instance name.')
snsdMessagesAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdMessagesAllocated.setStatus('current')
if mibBuilder.loadTexts: snsdMessagesAllocated.setDescription('The total number of messages allocated.')
snsdMessagesDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdMessagesDeleted.setStatus('current')
if mibBuilder.loadTexts: snsdMessagesDeleted.setDescription('The total number of messages deleted.')
snsdMessagesEnumerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdMessagesEnumerated.setStatus('current')
if mibBuilder.loadTexts: snsdMessagesEnumerated.setDescription('The total number of messages enumerated during startup.')
snsdMessagesInTheQueueDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdMessagesInTheQueueDirectory.setStatus('current')
if mibBuilder.loadTexts: snsdMessagesInTheQueueDirectory.setDescription('The current number of messages in the queue directory.')
snsdOpenMessageBodies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdOpenMessageBodies.setStatus('current')
if mibBuilder.loadTexts: snsdOpenMessageBodies.setDescription('The current number of open message bodies.')
snsdOpenMessageStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 75, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snsdOpenMessageStreams.setStatus('current')
if mibBuilder.loadTexts: snsdOpenMessageStreams.setDescription('The current number of open message streams.')
smtpServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76), )
if mibBuilder.loadTexts: smtpServerTable.setStatus('current')
if mibBuilder.loadTexts: smtpServerTable.setDescription('The SMTP Server performance object monitors message activity generated by the Simple Mail Transport Protocol (SMTP) service, that can be installed as part of Windows 2000 Server.')
smtpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1), ).setIndexNames((0, "INFORMANT-ADV", "smtpSrvrInstance"))
if mibBuilder.loadTexts: smtpServerEntry.setStatus('current')
if mibBuilder.loadTexts: smtpServerEntry.setDescription("Performance information for one particular instance of 'SMTP Server' object.")
smtpSrvrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrInstance.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrInstance.setDescription('Instance name.')
smtpSrvrPercentRcpntsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrPercentRcpntsLocal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrPercentRcpntsLocal.setDescription('The percentage of recipients that will be delivered locally.')
smtpSrvrPercentRcpntsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrPercentRcpntsRemote.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrPercentRcpntsRemote.setDescription('Thepercentage of recipients that will be delivered remotely.')
smtpSrvrAvgRcpntsPerMsgRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrAvgRcpntsPerMsgRcvd.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrAvgRcpntsPerMsgRcvd.setDescription('The average number of recipients per inbound message received.')
smtpSrvrAvgRcpntsPerMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrAvgRcpntsPerMsgSent.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrAvgRcpntsPerMsgSent.setDescription('The average number of recipients per outbound messages sent.')
smtpSrvrAvgRetriesPerMsgDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrAvgRetriesPerMsgDlvrd.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrAvgRetriesPerMsgDlvrd.setDescription('The average number of retries per local delivery.')
smtpSrvrAvgRetriesPerMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrAvgRetriesPerMsgSent.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrAvgRetriesPerMsgSent.setDescription('The average number of retries per outbound message sent.')
smtpSrvrBadMailMsgsBadPickupFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsBadPickupFile.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsBadPickupFile.setDescription('The number of malformed pickup messages sent to badmail.')
smtpSrvrBadMailMsgsGeneralFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsGeneralFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsGeneralFail.setDescription('The number of messages sent to badmail for reasons not associated with a specific counter.')
smtpSrvrBadMailMsgsHopCntExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsHopCntExceed.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsHopCntExceed.setDescription('The number of messages sent to badmil becuase they had exceeded the maximum hop count.')
smtpSrvrBadMailMsgsNDROfDSN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsNDROfDSN.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsNDROfDSN.setDescription('The number of Delivery Status Notifications sent to badmail becuase they could not be delivered.')
smtpSrvrBadMailMsgsNoRcpnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsNoRcpnts.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsNoRcpnts.setDescription('The number of messages sent to badmail because they had no recipients.')
smtpSrvrBadMailMsgsTrigViaEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsTrigViaEvent.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBadMailMsgsTrigViaEvent.setDescription('The number of messages sent to badmail at the request of a server event sink.')
smtpSrvrBytesRcvdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBytesRcvdTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBytesRcvdTotal.setDescription('The total number of bytes received.')
smtpSrvrBytesRcvdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBytesRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBytesRcvdPerSec.setDescription('The rate that bytes are received.')
smtpSrvrBytesSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBytesSentTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBytesSentTotal.setDescription('The total number of bytes sent.')
smtpSrvrBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBytesSentPerSec.setDescription('The rate that bytes are sent.')
smtpSrvrBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBytesTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBytesTotal.setDescription('The total number of bytes sent and received.')
smtpSrvrBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrBytesTotalPerSec.setDescription('The rate that bytes are sent and received.')
smtpSrvrCatAddrLookupCmplt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupCmplt.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupCmplt.setDescription('The number of address lookup completions processed')
smtpSrvrCatAddrLookupCmpltPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupCmpltPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupCmpltPerSec.setDescription('The number of address lookup completions processed per second')
smtpSrvrCatAddrLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatAddrLookups.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatAddrLookups.setDescription('The number of DS lookups for individual addresses')
smtpSrvrCatAddrLookupsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupsNotFound.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupsNotFound.setDescription('The number of address lookups that did not find any DS object')
smtpSrvrCatAddrLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatAddrLookupsPerSec.setDescription('The number of address lookups dispatched to the DS per second')
smtpSrvrCatCatsCmpltd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsCmpltd.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsCmpltd.setDescription('The total number of messages submitted to categorizer that have finished categorization.')
smtpSrvrCatCatsCmpltdSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsCmpltdSuccess.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsCmpltdSuccess.setDescription('The number of categorizations that completed without any errors.')
smtpSrvrCatCatsCmpltdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsCmpltdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsCmpltdPerSec.setDescription('The rate of categorizations completed.')
smtpSrvrCatCatsFailDSConnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsFailDSConnFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsFailDSConnFail.setDescription('The number of categorizations that failed due to a DS connection failure')
smtpSrvrCatCatsFailDSLogonFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsFailDSLogonFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsFailDSLogonFail.setDescription('The number of categorizations that failed due to a DS logon failure')
smtpSrvrCatCatsFailOutOfMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsFailOutOfMemory.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsFailOutOfMemory.setDescription('The number of categorizations that failed due to lack of available memory.')
smtpSrvrCatCatsFailNonRetryError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsFailNonRetryError.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsFailNonRetryError.setDescription('The number of categorizations that failed with a hard error (not retryable).')
smtpSrvrCatCatsFailRetryError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsFailRetryError.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsFailRetryError.setDescription('The number of categorizations that failed with a retryable error.')
smtpSrvrCatCatsFailSinkRetryErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsFailSinkRetryErr.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsFailSinkRetryErr.setDescription('The number of categorizations that failed with a generic retryable error')
smtpSrvrCatCatsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatCatsInProgress.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatCatsInProgress.setDescription('The number of categorizations in progress.')
smtpSrvrCatLDAPBindFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPBindFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPBindFail.setDescription('The total number of LDAP bind failures')
smtpSrvrCatLDAPBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPBinds.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPBinds.setDescription('The total number of successfull LDAP binds performed')
smtpSrvrCatLDAPConnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPConnFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPConnFail.setDescription('The total number of failures encountered connection to LDAP servers')
smtpSrvrCatLDAPConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPConns.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPConns.setDescription('The total number of LDAP connections opened')
smtpSrvrCatLDAPConnsCurrOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPConnsCurrOpen.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPConnsCurrOpen.setDescription('The number of LDAP connections currently open')
smtpSrvrCatLDAPGeneralCmpltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPGeneralCmpltFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPGeneralCmpltFail.setDescription('Number of LDAP completions with a generic failure')
smtpSrvrCatLDAPPageSrchCmpltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPPageSrchCmpltFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPPageSrchCmpltFail.setDescription('Number of LDAP paged searches that completed with a failure')
smtpSrvrCatLDAPPagedSrchFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPPagedSrchFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPPagedSrchFail.setDescription('Number of failures to dispatch an async paged LDAP search')
smtpSrvrCatLDAPPagedSrchs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPPagedSrchs.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPPagedSrchs.setDescription('LDAP paged searches successfully dispatched')
smtpSrvrCatLDAPPagedSrchsCmpltd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPPagedSrchsCmpltd.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPPagedSrchsCmpltd.setDescription('Number of paged LDAP completions processed')
smtpSrvrCatLDAPSrchCmpltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchCmpltFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchCmpltFail.setDescription('Number of LDAP searches that completed with a failure')
smtpSrvrCatLDAPSrchFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchFail.setDescription('Number of failures to dispatch an async LDAP search')
smtpSrvrCatLDAPSrchs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchs.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchs.setDescription('LDAP searches successfully dispatched')
smtpSrvrCatLDAPSrchsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsAbandoned.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsAbandoned.setDescription('Number of LDAP searches abandoned')
smtpSrvrCatLDAPSrchsCmpltd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsCmpltd.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsCmpltd.setDescription('Number of LDAP search completions processed')
smtpSrvrCatLDAPSrchsCmpltdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsCmpltdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsCmpltdPerSec.setDescription('LDAP search completions processed/sec')
smtpSrvrCatLDAPSrchsPendingCmplt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsPendingCmplt.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsPendingCmplt.setDescription('Number of LDAP searches pending async completon')
smtpSrvrCatLDAPSrchsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatLDAPSrchsPerSec.setDescription('LDAP searches successfully dispatched/sec')
smtpSrvrCatMsgsCategorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatMsgsCategorized.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatMsgsCategorized.setDescription('The number of messages categorizer has submitted to queueing.')
smtpSrvrCatMsgsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatMsgsAborted.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatMsgsAborted.setDescription('The number of messages marked to be aborted by the categorizer.')
smtpSrvrCatMsgsBifurcated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatMsgsBifurcated.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatMsgsBifurcated.setDescription('The number of new messages created by the categorizer (bifurcation).')
smtpSrvrCatMsgsSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatMsgsSubmitted.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatMsgsSubmitted.setDescription('The total number of messages submitted to the categorizer.')
smtpSrvrCatMsgsSubmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatMsgsSubmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatMsgsSubmittedPerSec.setDescription('The rate that messages are being submitted to the categorizer.')
smtpSrvrCatRcptsNDRdAmbigsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdAmbigsAddr.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdAmbigsAddr.setDescription('The number of recipients with addresses that match multiple DS objects.')
smtpSrvrCatRcptsNDRdForwardLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdForwardLoop.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdForwardLoop.setDescription('The number of recipients NDRd by the categorizer due to a forwarding loop detection.')
smtpSrvrCatRcptsNDRdIllegalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdIllegalAddr.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdIllegalAddr.setDescription('The number of recipients with illegal addresses detected by the categorizer.')
smtpSrvrCatRcptsNDRdSinkRecipErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdSinkRecipErr.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdSinkRecipErr.setDescription('The number of recipients NDRd by the categorizer due to a generic recipient failure.')
smtpSrvrCatRcptsNDRdUnresolved = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdUnresolved.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdUnresolved.setDescription('The number of unresolved recipients (local addresses not found).')
smtpSrvrCatRcptsNDRdByCategorize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdByCategorize.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsNDRdByCategorize.setDescription('The number of recipients set to be NDRd by the categorizer.')
smtpSrvrCatRcptsAfterCat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsAfterCat.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsAfterCat.setDescription('The number of mailmsg recipients submitted from categorizer to queueing.')
smtpSrvrCatRcptsBeforeCat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsBeforeCat.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsBeforeCat.setDescription('The number of mailmsg recipients submitted to categorizer.')
smtpSrvrCatRcptsInCat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatRcptsInCat.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatRcptsInCat.setDescription('The number of recipients the categorizer is currently processing.')
smtpSrvrCatSendersUnresolved = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatSendersUnresolved.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatSendersUnresolved.setDescription('The number of seners not find in the DS.')
smtpSrvrCatSendersAmbigsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatSendersAmbigsAddr.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatSendersAmbigsAddr.setDescription('The number of senders with addresses that match multiple DS objects.')
smtpSrvrCatMailmsgDupCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCatMailmsgDupCollisions.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCatMailmsgDupCollisions.setDescription('The number of times a duplicate recipient address was detected by mailmsg/categorizer.')
smtpSrvrCategorizerQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCategorizerQueueLength.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCategorizerQueueLength.setDescription('The number of messages in the categorizer queue.')
smtpSrvrConnErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrConnErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrConnErrorsPerSec.setDescription('The number of connection errors per second.')
smtpSrvrCurrentMsgsInLocalDlvry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrCurrentMsgsInLocalDlvry.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrCurrentMsgsInLocalDlvry.setDescription('The number of messages that are currently being processed by a server event sink for local delivery.')
smtpSrvrDNSQueriesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrDNSQueriesTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrDNSQueriesTotal.setDescription('The total number of DNS lookups.')
smtpSrvrDNSQueriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrDNSQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrDNSQueriesPerSec.setDescription('The rate of DNS lookups.')
smtpSrvrDirDropsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrDirDropsTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrDirDropsTotal.setDescription('The total number of messages placed in a drop directory.')
smtpSrvrDirDropsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrDirDropsPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrDirDropsPerSec.setDescription('The number of messages placed in a drop directory per second.')
smtpSrvrETRNMsgsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrETRNMsgsTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrETRNMsgsTotal.setDescription('The total number of ETRN messages received by the server.')
smtpSrvrETRNMsgsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrETRNMsgsPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrETRNMsgsPerSec.setDescription('The number of ETRN messages per second.')
smtpSrvrInboundConnsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrInboundConnsCurrent.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrInboundConnsCurrent.setDescription('The total number of connections currently inbound.')
smtpSrvrInboundConnsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrInboundConnsTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrInboundConnsTotal.setDescription('The total number of inbound connections received.')
smtpSrvrLocalQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrLocalQueueLength.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrLocalQueueLength.setDescription('The number of messages in the local queue.')
smtpSrvrLocalRetryQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrLocalRetryQueueLength.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrLocalRetryQueueLength.setDescription('The number of messages in the local retry queue.')
smtpSrvrMsgBytesRcvdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgBytesRcvdTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgBytesRcvdTotal.setDescription('The total number of bytes received in messages.')
smtpSrvrMsgBytesRcvdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgBytesRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgBytesRcvdPerSec.setDescription('The rate that bytes are received in messages.')
smtpSrvrMsgBytesSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgBytesSentTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgBytesSentTotal.setDescription('The total number of bytes sent in messages.')
smtpSrvrMsgBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgBytesSentPerSec.setDescription('The rate that bytes are sent in messages.')
smtpSrvrMsgBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgBytesTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgBytesTotal.setDescription('The total number of bytes sent and received in messages.')
smtpSrvrMsgBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgBytesTotalPerSec.setDescription('The rate that bytes are sent and received in messages.')
smtpSrvrMsgDlvryRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgDlvryRetries.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgDlvryRetries.setDescription('The total number of local deliveries that were retried.')
smtpSrvrMsgSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgSendRetries.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgSendRetries.setDescription('The total number of outbound message sends that were retried.')
smtpSrvrMsgsCurrUndeliverable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsCurrUndeliverable.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsCurrUndeliverable.setDescription('The number of messages that have been reported as currently undeliverable by routing.')
smtpSrvrMsgsDlvrdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsDlvrdTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsDlvrdTotal.setDescription('The total number of messages delivered to local mailboxes.')
smtpSrvrMsgsDlvrdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsDlvrdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsDlvrdPerSec.setDescription('The rate that messages are delivered to local mailboxes.')
smtpSrvrMsgsPendingRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsPendingRoute.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsPendingRoute.setDescription('The number of messages that have been categorized but not routed.')
smtpSrvrMsgsRcvdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsRcvdTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsRcvdTotal.setDescription('The total number of inbound messages accepted.')
smtpSrvrMsgsRcvdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsRcvdPerSec.setDescription('The rate that inbound messages are being received.')
smtpSrvrMsgsRfsdForAddrObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsRfsdForAddrObjects.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsRfsdForAddrObjects.setDescription('The total number of messages refused due to no address objects.')
smtpSrvrMsgsRfsdForMailObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsRfsdForMailObjects.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsRfsdForMailObjects.setDescription('The total number of messages refused due to no mail objects.')
smtpSrvrMsgsRfsdForSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsRfsdForSize.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsRfsdForSize.setDescription('The total number of messages rejected because they were too big.')
smtpSrvrMsgsSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsSentTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsSentTotal.setDescription('The total number of outbound messages sent.')
smtpSrvrMsgsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrMsgsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrMsgsSentPerSec.setDescription('The rate that outbound messages are being sent.')
smtpSrvrNDRsGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrNDRsGenerated.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrNDRsGenerated.setDescription('The number of non-delivery reports that have been generated.')
smtpSrvrNumberOfMailFilesOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 103), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrNumberOfMailFilesOpen.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrNumberOfMailFilesOpen.setDescription('Number of handles to open mail files.')
smtpSrvrNumberOfQueueFilesOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrNumberOfQueueFilesOpen.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrNumberOfQueueFilesOpen.setDescription('Number of handles to open queue files.')
smtpSrvrOutboundConnsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrOutboundConnsCurrent.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrOutboundConnsCurrent.setDescription('The number of connections currently outbound.')
smtpSrvrOutboundConnsRfsd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrOutboundConnsRfsd.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrOutboundConnsRfsd.setDescription('The number of outbound connection attempts refused by remote sites.')
smtpSrvrOutboundConnsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrOutboundConnsTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrOutboundConnsTotal.setDescription('The total number of outbound connections attempted.')
smtpSrvrPickupDirMsgsRtrvdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrPickupDirMsgsRtrvdTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrPickupDirMsgsRtrvdTotal.setDescription('The total number of messages retrieved from the mail pick-up directory.')
smtpSrvrPickupDirMsgsRtrvdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrPickupDirMsgsRtrvdPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrPickupDirMsgsRtrvdPerSec.setDescription('The rate that messages are being retrieved from the mail pick-up directory.')
smtpSrvrRemoteQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 110), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrRemoteQueueLength.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrRemoteQueueLength.setDescription('The number of messages in the remote queue.')
smtpSrvrRemoteRetryQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 111), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrRemoteRetryQueueLength.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrRemoteRetryQueueLength.setDescription('The number of messages in the retry queue for remote delivery.')
smtpSrvrRouteTableLookupsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 112), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrRouteTableLookupsTotal.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrRouteTableLookupsTotal.setDescription('The total number of routing table lookups.')
smtpSrvrRouteTableLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 113), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrRouteTableLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrRouteTableLookupsPerSec.setDescription('The number of routing table lookups per second.')
smtpSrvrTotalConnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 114), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrTotalConnErrors.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrTotalConnErrors.setDescription('The total number of connection errors.')
smtpSrvrTotalDSNFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 115), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrTotalDSNFail.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrTotalDSNFail.setDescription('The total number of failed DSN generation attempts.')
smtpSrvrTotalMsgsSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 76, 1, 116), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSrvrTotalMsgsSubmitted.setStatus('current')
if mibBuilder.loadTexts: smtpSrvrTotalMsgsSubmitted.setDescription('The total messages submitted to queuing for delivery.')
system = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77))
if mibBuilder.loadTexts: system.setStatus('current')
if mibBuilder.loadTexts: system.setDescription("The System performance object consists of counters that apply to more than one component of the computer. Percentage counters by default do not show values above 100 percent. See 'Overview of Performance Monitoring' in the Windows 2000 Server Resource Kit Server Operations Guide for instructions about changing this default in the registry.")
systemPercentRegistryQuotaInUse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPercentRegistryQuotaInUse.setStatus('current')
if mibBuilder.loadTexts: systemPercentRegistryQuotaInUse.setDescription('% Registry Quota In Use is the percentage of the Total Registry Quota Allowed that is currently being used by the system. This counter displays the current percentage value only; it is not an average.')
systemAlignmentFixupsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlignmentFixupsPerSec.setStatus('current')
if mibBuilder.loadTexts: systemAlignmentFixupsPerSec.setDescription('Alignment Fixups/sec is the rate, in incidents per seconds, at alignment faults were fixed by the system.')
systemContextSwitchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemContextSwitchesPerSec.setStatus('current')
if mibBuilder.loadTexts: systemContextSwitchesPerSec.setDescription('Context Switches/sec is the combined rate at which all processors on the computer are switched from one thread to another. Context switches occur when a running thread voluntarily relinquishes the processor, is preempted by a higher priority ready thread, or switches between user-mode and privileged (kernel) mode to use an Executive or subsystem service. It is the sum of Thread\\\\Context Switches/sec for all threads running on all processors in the computer and is measured in numbers of switches. There are context switch counters on the System and Thread objects. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemExceptionDispatchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemExceptionDispatchesPerSec.setStatus('current')
if mibBuilder.loadTexts: systemExceptionDispatchesPerSec.setDescription('Exception Dispatches/sec is the rate, in incidents per second, at which exceptions were dispatched by the system.')
systemFileControlBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileControlBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileControlBytesPerSec.setDescription('File Control Bytes/sec is the overall rate at which bytes are transferred for all file system operations that are neither reads nor writes, including file system control requests and requests for information about device characteristics or status. It is measured in numbers of bytes. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFileControlOperationPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileControlOperationPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileControlOperationPerSec.setDescription('File Control Operations/sec is the combined rate of file system operations that are neither reads nor writes, such as file system control requests and requests for information about device characteristics or status. This is the inverse of System: File Data Operations/sec and is measured in number of operations perf second. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFileDataOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileDataOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileDataOperationsPerSec.setDescription('File Data Operations/ sec is the combined rate of read and write operations on all logical disks on the computer. This is the inverse of System: File Control Operations/sec. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFileReadBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileReadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileReadBytesPerSec.setDescription('File Read Bytes/sec is the overall rate at which bytes are read to satisfy file system read requests to all devices on the computer, including reads from the file system cache. It is measured in number of bytes per second. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFileReadOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileReadOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileReadOperationsPerSec.setDescription('File Read Operations/sec is the combined rate of file system read requests to all devices on the computer, including requests to read from the file system cache. It is measured in numbers of reads. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFileWriteBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileWriteBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileWriteBytesPerSec.setDescription('File Write Bytes/sec is the overall rate at which bytes are written to satisfy file system write requests to all devices on the computer, including writes to the file system cache. It is measured in number of bytes per second. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFileWriteOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileWriteOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFileWriteOperationsPerSec.setDescription('File Write Operations/sec is the combined rate of the file system write requests to all devices on the computer, including requests to write to data in the file system cache. It is measured in numbers of writes. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemFloatingEmulationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFloatingEmulationsPerSec.setStatus('current')
if mibBuilder.loadTexts: systemFloatingEmulationsPerSec.setDescription('Floating Emulations/sec is the rate of floating emulations performed by the system. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemProcesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProcesses.setStatus('current')
if mibBuilder.loadTexts: systemProcesses.setDescription('Processes is the number of processes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. Each process represents the running of a program.')
systemProcessorQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProcessorQueueLength.setStatus('current')
if mibBuilder.loadTexts: systemProcessorQueueLength.setDescription('Processor Queue Length is the number of threads in the processor queue. Unlike the disk counters, this counter counters, this counter shows ready threads only, not threads that are running. There is a single queue for processor time even on computers with multiple processors. Therefore, if a computer has multiple processors, you need to divide this value by the number of processors servicing the workload. A sustained processor queue of less than 10 threads per processor is normally acceptable, dependent of the workload.')
systemSystemCallsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSystemCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: systemSystemCallsPerSec.setDescription('System Calls/sec is the combined rate of calls to operating system service routines by all processes running on the computer. These routines perform all of the basic scheduling and synchronization of activities on the computer, and provide access to non-graphic devices, memory management, and name space management. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
systemSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSystemUpTime.setStatus('current')
if mibBuilder.loadTexts: systemSystemUpTime.setDescription('System Up Time is the elapsed time (in seconds) that the computer has been running since it was last started. This counter displays the difference between the start time and the current time.')
systemThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 77, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemThreads.setStatus('current')
if mibBuilder.loadTexts: systemThreads.setDescription('Threads is the number of threads in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval. A thread is the basic executable entity that can execute instructions in a processor.')
tcpV4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78))
if mibBuilder.loadTexts: tcpV4.setStatus('current')
if mibBuilder.loadTexts: tcpV4.setDescription('The TCP performance object consists of counters that measure the rates at which TCP segments are sent and received using the Transmission Control Protocol (TCP). It includes counters that monitor the number of TCP connections in each TCP connection state.')
tcpV4ConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4ConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: tcpV4ConnectionFailures.setDescription('Connection Failures is the number of times TCP connections have made a direct transition to the CLOSED state from the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
tcpV4ConnectionsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4ConnectionsActive.setStatus('current')
if mibBuilder.loadTexts: tcpV4ConnectionsActive.setDescription('Connections Active is the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state. In other words, it shows a number of connections which are initiated by the local computer. The value is a cumulative total.')
tcpV4ConnectionsEstablished = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4ConnectionsEstablished.setStatus('current')
if mibBuilder.loadTexts: tcpV4ConnectionsEstablished.setDescription('Connections Established is the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.')
tcpV4ConnectionsPassive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4ConnectionsPassive.setStatus('current')
if mibBuilder.loadTexts: tcpV4ConnectionsPassive.setDescription('Connections Passive is the number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state. In other words, it shows a number of connections to the local computer, which are initiated by remote computers. The value is a cumulative total.')
tcpV4ConnectionsReset = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4ConnectionsReset.setStatus('current')
if mibBuilder.loadTexts: tcpV4ConnectionsReset.setDescription('Connections Reset is the number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.')
tcpV4SegmentsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4SegmentsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV4SegmentsReceivedPerSec.setDescription('Segments Received/sec is the rate at which segments are received, including those received in error. This count includes segments received on currently established connections.')
tcpV4SegmentsRetransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4SegmentsRetransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV4SegmentsRetransmittedPerSec.setDescription('Segments Retransmitted/sec is the rate at which segments are retransmitted, that is, segments transmitted containing one or more previously transmitted bytes.')
tcpV4SegmentsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4SegmentsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV4SegmentsSentPerSec.setDescription('Segments Sent/sec is the rate at which segments are sent, including those on current connections, but excluding those containing only retransmitted bytes.')
tcpV4SegmentsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 78, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV4SegmentsPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV4SegmentsPerSec.setDescription('Segments/sec is the rate at which TCP segments are sent or received using the TCP protocol.')
tcpV6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79))
tcpV6ConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6ConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: tcpV6ConnectionFailures.setDescription('Connection Failures is the number of times TCP connections have made a direct transition to the CLOSED state from the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
tcpV6ConnectionsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6ConnectionsActive.setStatus('current')
if mibBuilder.loadTexts: tcpV6ConnectionsActive.setDescription('Connections Active is the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state. In other words, it shows a number of connections which are initiated by the local computer. The value is a cumulative total.')
tcpV6ConnectionsEstablished = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6ConnectionsEstablished.setStatus('current')
if mibBuilder.loadTexts: tcpV6ConnectionsEstablished.setDescription('Connections Established is the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.')
tcpV6ConnectionsPassive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6ConnectionsPassive.setStatus('current')
if mibBuilder.loadTexts: tcpV6ConnectionsPassive.setDescription('Connections Passive is the number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state. In other words, it shows a number of connections to the local computer, which are initiated by remote computers. The value is a cumulative total.')
tcpV6ConnectionsReset = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6ConnectionsReset.setStatus('current')
if mibBuilder.loadTexts: tcpV6ConnectionsReset.setDescription('Connections Reset is the number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.')
tcpV6SegmentsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6SegmentsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV6SegmentsReceivedPerSec.setDescription('Segments Received/sec is the rate at which segments are received, including those received in error. This count includes segments received on currently established connections.')
tcpV6SegmentsRetransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6SegmentsRetransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV6SegmentsRetransmittedPerSec.setDescription('Segments Retransmitted/sec is the rate at which segments are retransmitted, that is, segments transmitted containing one or more previously transmitted bytes.')
tcpV6SegmentsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6SegmentsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV6SegmentsSentPerSec.setDescription('Segments Sent/sec is the rate at which segments are sent, including those on current connections, but excluding those containing only retransmitted bytes.')
tcpV6SegmentsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 79, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpV6SegmentsPerSec.setStatus('current')
if mibBuilder.loadTexts: tcpV6SegmentsPerSec.setDescription('Segments/sec is the rate at which TCP segments are sent or received using the TCP protocol.')
telephony = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80))
if mibBuilder.loadTexts: telephony.setStatus('current')
if mibBuilder.loadTexts: telephony.setDescription('The Telephony performance object provides counters for monitoring telephone-communication activity on a computer running Windows 2000.')
telephonyActiveLines = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyActiveLines.setStatus('current')
if mibBuilder.loadTexts: telephonyActiveLines.setDescription('The number of telephone lines serviced by this computer that are currently active.')
telephonyActiveTelephones = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyActiveTelephones.setStatus('current')
if mibBuilder.loadTexts: telephonyActiveTelephones.setDescription('The number of telephone devices that are currently being monitored.')
telephonyClientApps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyClientApps.setStatus('current')
if mibBuilder.loadTexts: telephonyClientApps.setDescription('The number of applications that are currently using telephony services.')
telephonyCurrentIncomingCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyCurrentIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: telephonyCurrentIncomingCalls.setDescription('Current incoming calls being serviced by this computer.')
telephonyCurrentOutgoingCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyCurrentOutgoingCalls.setStatus('current')
if mibBuilder.loadTexts: telephonyCurrentOutgoingCalls.setDescription('Current outgoing calls being serviced by this computer.')
telephonyIncomingCallsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyIncomingCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: telephonyIncomingCallsPerSec.setDescription('The rate of incoming calls answered by this computer.')
telephonyLines = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyLines.setStatus('current')
if mibBuilder.loadTexts: telephonyLines.setDescription('The number of telephone lines serviced by this computer.')
telephonyOutgoingCallsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyOutgoingCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: telephonyOutgoingCallsPerSec.setDescription('The rate of outgoing calls made by this computer.')
telephonyTelephoneDevices = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 80, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyTelephoneDevices.setStatus('current')
if mibBuilder.loadTexts: telephonyTelephoneDevices.setDescription('The number of telephone devices serviced by this computer.')
terminalServices = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 81))
if mibBuilder.loadTexts: terminalServices.setStatus('current')
if mibBuilder.loadTexts: terminalServices.setDescription('Terminal Services summary information.')
tsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 81, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: tsActiveSessions.setDescription('Number of active Terminal Services sessions.')
tsInactiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 81, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsInactiveSessions.setStatus('current')
if mibBuilder.loadTexts: tsInactiveSessions.setDescription('Number of inactive Terminal Services sessions.')
tsTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 81, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: tsTotalSessions.setDescription('Total number of Terminal Services sessions.')
terminalServicesSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82), )
if mibBuilder.loadTexts: terminalServicesSessionTable.setStatus('current')
if mibBuilder.loadTexts: terminalServicesSessionTable.setDescription('The Terminal Services Session object provides per-session resource statistics such as packet and frame transmission data, errors, and cache activity for Terminal Services.')
terminalServicesSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1), ).setIndexNames((0, "INFORMANT-ADV", "tssInstance"))
if mibBuilder.loadTexts: terminalServicesSessionEntry.setStatus('current')
if mibBuilder.loadTexts: terminalServicesSessionEntry.setDescription("Performance information for one particular instance of 'Terminal Services Session' object.")
tssInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInstance.setStatus('current')
if mibBuilder.loadTexts: tssInstance.setDescription('Instance name.')
tssPercentPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPercentPrivilegedTime.setStatus('current')
if mibBuilder.loadTexts: tssPercentPrivilegedTime.setDescription('% Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service is called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
tssPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPercentProcessorTime.setStatus('current')
if mibBuilder.loadTexts: tssPercentProcessorTime.setDescription('% Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.')
tssPercentUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPercentUserTime.setStatus('current')
if mibBuilder.loadTexts: tssPercentUserTime.setDescription('% User Time is the percentage of elapsed time that the process threads spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows executive, kernel, and device drivers. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
tssHandleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssHandleCount.setStatus('current')
if mibBuilder.loadTexts: tssHandleCount.setDescription('The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.')
tssInputAsyncFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputAsyncFrameError.setStatus('current')
if mibBuilder.loadTexts: tssInputAsyncFrameError.setDescription('Number of input async framing errors. These can be caused by a noisy transmission line. Using a smaller packet size may help in some cases.')
tssInputAsyncOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputAsyncOverflow.setStatus('current')
if mibBuilder.loadTexts: tssInputAsyncOverflow.setDescription('Number of input async overflow errors. These can be caused by a lack of buffer space available on the host.')
tssInputAsyncOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputAsyncOverrun.setStatus('current')
if mibBuilder.loadTexts: tssInputAsyncOverrun.setDescription("Number of input async overrun errors. These can be caused by the baud rate being faster than the computer can handle, or a non-16550 serial line is used. Overruns can also occur if too many high speed serial lines are active at one time for the processor's power.")
tssInputAsyncParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputAsyncParityError.setStatus('current')
if mibBuilder.loadTexts: tssInputAsyncParityError.setDescription('Number of input async parity errors. These can be caused by a noisy transmission line')
tssInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputBytes.setStatus('current')
if mibBuilder.loadTexts: tssInputBytes.setDescription('Number of bytes input on this session that includes all protocol overhead.')
tssInputCompressFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputCompressFlushes.setStatus('current')
if mibBuilder.loadTexts: tssInputCompressFlushes.setDescription('Number of input compression dictionary flushes. When the data can not be compressed, the compression dictionary is flushed so that newer data has a better chance of being compressed. Some causes of data not compressing includes transferring compressed files over Client Drive Mapping.')
tssInputCompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputCompressedBytes.setStatus('current')
if mibBuilder.loadTexts: tssInputCompressedBytes.setDescription('Number of bytes input after compression. This number compared with the Total Bytes input is the compression ratio.')
tssInputCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: tssInputCompressionRatio.setDescription('Compression ratio of the server input data stream.')
tssInputErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputErrors.setStatus('current')
if mibBuilder.loadTexts: tssInputErrors.setDescription("Number of input errors of all types. Some example input errors are lost ACK's, badly formed packets, etc.")
tssInputFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputFrames.setStatus('current')
if mibBuilder.loadTexts: tssInputFrames.setDescription('Number of frames (packets) input on this Session.')
tssInputTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputTimeouts.setStatus('current')
if mibBuilder.loadTexts: tssInputTimeouts.setDescription('The total number of timeouts on the communication line as seen from the client side of the connection. These are typically the result of a noisy line. On some high latency networks, this could be the result of the protocol timeout being too short. Increasing the protocol timeout on these types of lines will improve performance by reducing needless re-transmissions.')
tssInputTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputTransportErrors.setStatus('current')
if mibBuilder.loadTexts: tssInputTransportErrors.setDescription('Number of Terminal Services transport-level errors on input.')
tssInputWaitForOutBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputWaitForOutBuf.setStatus('current')
if mibBuilder.loadTexts: tssInputWaitForOutBuf.setDescription('The number of times that a wait for an available send buffer was done by the protocols on the client side of the connection.')
tssInputWdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputWdBytes.setStatus('current')
if mibBuilder.loadTexts: tssInputWdBytes.setDescription('Number of bytes input on this session after all protocol overhead has been removed.')
tssInputWdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssInputWdFrames.setStatus('current')
if mibBuilder.loadTexts: tssInputWdFrames.setDescription('The number of frames input after any additional protocol added frames have been removed.')
tssOutputAsyncFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputAsyncFrameError.setStatus('current')
if mibBuilder.loadTexts: tssOutputAsyncFrameError.setDescription('Number of output async framing errors. This could be caused by a hardware or line problem.')
tssOutputAsyncOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputAsyncOverflow.setStatus('current')
if mibBuilder.loadTexts: tssOutputAsyncOverflow.setDescription('Number of output async overflow errors.')
tssOutputAsyncOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputAsyncOverrun.setStatus('current')
if mibBuilder.loadTexts: tssOutputAsyncOverrun.setDescription('Number of output async overrun errors.')
tssOutputAsyncParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputAsyncParityError.setStatus('current')
if mibBuilder.loadTexts: tssOutputAsyncParityError.setDescription('Number of output async parity errors. These can be caused by a hardware or line problem.')
tssOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputBytes.setStatus('current')
if mibBuilder.loadTexts: tssOutputBytes.setDescription('Number of bytes output on this Session that includes all protocol overhead.')
tssOutputCompressFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputCompressFlushes.setStatus('current')
if mibBuilder.loadTexts: tssOutputCompressFlushes.setDescription('Number of output compression dictionary flushes. When the data can not be compressed, the compression dictionary is flushed so that newer data has a better chance of being compressed. Some causes of data not compressing includes transfering compressed files over Client Drive Mapping.')
tssOutputCompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputCompressedBytes.setStatus('current')
if mibBuilder.loadTexts: tssOutputCompressedBytes.setDescription('Number of bytes output after compression. This number compared with the Total Bytes output is the compression ratio.')
tssOutputCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: tssOutputCompressionRatio.setDescription('Compression ratio of the server output data stream.')
tssOutputErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputErrors.setStatus('current')
if mibBuilder.loadTexts: tssOutputErrors.setDescription("Number of output errors of all types. Some example output errors are lost ACK's, badly formed packets, etc.")
tssOutputFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputFrames.setStatus('current')
if mibBuilder.loadTexts: tssOutputFrames.setDescription('Number of frames (packets) output on this session.')
tssOutputTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputTimeouts.setStatus('current')
if mibBuilder.loadTexts: tssOutputTimeouts.setDescription('The total number of timeouts on the communication line from the host side of the connection. These are typically the result of a noisy line. On some high latency networks, this could be the result of the protocol timeout being too short. Increasing the protocol timeout on these types of lines will improve performance by reducing needless re-transmissions.')
tssOutputTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputTransportErrors.setStatus('current')
if mibBuilder.loadTexts: tssOutputTransportErrors.setDescription('Number of Terminal Services transport-level errors on output.')
tssOutputWaitForOutBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputWaitForOutBuf.setStatus('current')
if mibBuilder.loadTexts: tssOutputWaitForOutBuf.setDescription('This is the number of times that a wait for an available send buffer was done by the protocol on the server side of the connection.')
tssOutputWdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputWdBytes.setStatus('current')
if mibBuilder.loadTexts: tssOutputWdBytes.setDescription('Number of bytes output on this session after all protocol overhead has been removed.')
tssOutputWdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssOutputWdFrames.setStatus('current')
if mibBuilder.loadTexts: tssOutputWdFrames.setDescription('The number of frames output before any additional protocol frames have been added.')
tssPageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: tssPageFaultsPerSec.setDescription('Page Faults/sec is the rate at which page faults by the threads executing in this process are occurring. A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This may not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.')
tssPageFileBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPageFileBytes.setStatus('current')
if mibBuilder.loadTexts: tssPageFileBytes.setDescription('Page File Bytes is the current amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the current amount of virtual memory that the process has reserved for use in physical memory.')
tssPageFileBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPageFileBytesPeak.setStatus('current')
if mibBuilder.loadTexts: tssPageFileBytesPeak.setDescription('Page File Bytes Peak is the maximum amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the maximum amount of virtual memory that the process has reserved for use in physical memory.')
tssPoolNonpagedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPoolNonpagedBytes.setStatus('current')
if mibBuilder.loadTexts: tssPoolNonpagedBytes.setDescription('Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory\\\\Pool Nonpaged Bytes is calculated differently than Process\\\\Pool Nonpaged Bytes, so it might not equal Process\\\\Pool Nonpaged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
tssPoolPagedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPoolPagedBytes.setStatus('current')
if mibBuilder.loadTexts: tssPoolPagedBytes.setDescription('Pool Paged Bytes is the size, in bytes, of the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used. Memory\\\\Pool Paged Bytes is calculated differently than Process\\\\Pool Paged Bytes, so it might not equal Process\\\\Pool Paged Bytes\\\\_Total. This counter displays the last observed value only; it is not an average.')
tssPrivateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssPrivateBytes.setStatus('current')
if mibBuilder.loadTexts: tssPrivateBytes.setDescription('Private Bytes is the current size, in bytes, of memory that this process has allocated that cannot be shared with other processes.')
tssProtocolBitmapCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolBitmapCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: tssProtocolBitmapCacheHitRatio.setDescription('Hit ratio in the protocol bitmap cache. A higher hit ratio means better performance since data transmissions are reduced. Low hit ratios are due to the screen updating with new information that is either not re-used, or is flushed out of the client cache.')
tssProtocolBitmapCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolBitmapCacheHits.setStatus('current')
if mibBuilder.loadTexts: tssProtocolBitmapCacheHits.setDescription('Number of hits in the protocol bitmap cache.')
tssProtocolBitmapCacheReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolBitmapCacheReads.setStatus('current')
if mibBuilder.loadTexts: tssProtocolBitmapCacheReads.setDescription('Number of references to the protocol bitmap cache.')
tssProtocolBrushCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolBrushCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: tssProtocolBrushCacheHitRatio.setDescription('Hit ratio in the protocol brush cache. A higher hit ratio means better performance since data transmissions are reduced. Low hit ratios are due to the screen updating with new information that is either not re-used, or is flushed out of the client cache.')
tssProtocolBrushCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolBrushCacheHits.setStatus('current')
if mibBuilder.loadTexts: tssProtocolBrushCacheHits.setDescription('Number of hits in the protocol brush cache.')
tssProtocolBrushCacheReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolBrushCacheReads.setStatus('current')
if mibBuilder.loadTexts: tssProtocolBrushCacheReads.setDescription('Number of references to the protocol brush cache.')
tssProtocolGlyphCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolGlyphCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: tssProtocolGlyphCacheHitRatio.setDescription('Hit ratio in the protocol glyph cache. A higher hit ratio means better performance since data transmissions are reduced. Low hit ratios are due to the screen updating with new information that is either not re-used, or is flushed out of the client cache.')
tssProtocolGlyphCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolGlyphCacheHits.setStatus('current')
if mibBuilder.loadTexts: tssProtocolGlyphCacheHits.setDescription('Number of hits in the protocol glyph cache.')
tssProtocolGlyphCacheReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolGlyphCacheReads.setStatus('current')
if mibBuilder.loadTexts: tssProtocolGlyphCacheReads.setDescription('Number of references to the protocol glyph cache.')
tssProtocolSvScrnBtmpCachHtRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolSvScrnBtmpCachHtRatio.setStatus('current')
if mibBuilder.loadTexts: tssProtocolSvScrnBtmpCachHtRatio.setDescription('Hit ratio in the protocol save screen bitmap cache. A higher hit ratio means better performance since data transmissions are reduced. Low hit ratios are due to the screen updating with new information that is either not re-used, or is flushed out of the client cache.')
tssProtocolSvScrnBtmpCachHts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolSvScrnBtmpCachHts.setStatus('current')
if mibBuilder.loadTexts: tssProtocolSvScrnBtmpCachHts.setDescription('Number of hits in the protocol save screen bitmap cache.')
tssProtocolSvScrnBtmpCachReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssProtocolSvScrnBtmpCachReads.setStatus('current')
if mibBuilder.loadTexts: tssProtocolSvScrnBtmpCachReads.setDescription('Number of references to the protocol save screen bitmap cache.')
tssThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssThreadCount.setStatus('current')
if mibBuilder.loadTexts: tssThreadCount.setDescription('The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.')
tssTotalAsyncFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalAsyncFrameError.setStatus('current')
if mibBuilder.loadTexts: tssTotalAsyncFrameError.setDescription('Total number of async framing errors. These can be caused by a noisy transmission line. Using a smaller packet size may help in some cases.')
tssTotalAsyncOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalAsyncOverflow.setStatus('current')
if mibBuilder.loadTexts: tssTotalAsyncOverflow.setDescription('Total number of async overflow errors. These can be caused by a lack of buffer space available on the host.')
tssTotalAsyncOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalAsyncOverrun.setStatus('current')
if mibBuilder.loadTexts: tssTotalAsyncOverrun.setDescription("Total number of async overrun errors. These can be caused by the baud rate being faster than the computer can handle, or a non-16550 serial line is used. Overruns can also occur if too many high speed serial lines are active at one time for the processor's power.")
tssTotalAsyncParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalAsyncParityError.setStatus('current')
if mibBuilder.loadTexts: tssTotalAsyncParityError.setDescription('Total number of async parity errors. These can be caused by a noisy transmission line.')
tssTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalBytes.setStatus('current')
if mibBuilder.loadTexts: tssTotalBytes.setDescription('Total number of bytes on this Session that includes all protocol overhead.')
tssTotalCompressFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalCompressFlushes.setStatus('current')
if mibBuilder.loadTexts: tssTotalCompressFlushes.setDescription('Total number of compression dictionary flushes. When the data can not be compressed, the compression dictionary is flushed so that newer data has a better chance of being compressed. Some causes of data not compressing includes transfering compressed files over Client Drive Mapping.')
tssTotalCompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalCompressedBytes.setStatus('current')
if mibBuilder.loadTexts: tssTotalCompressedBytes.setDescription('Total number of bytes after compression. This number compared with the total bytes is the compression ratio.')
tssTotalCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: tssTotalCompressionRatio.setDescription('Total compression ratio of the server data stream.')
tssTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalErrors.setStatus('current')
if mibBuilder.loadTexts: tssTotalErrors.setDescription("Total number of errors of all types. Some example errors are lost ACK's, badly formed packets, etc.")
tssTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalFrames.setStatus('current')
if mibBuilder.loadTexts: tssTotalFrames.setDescription('Total number of frames (packets) on this Session.')
tssTotalProtocolCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalProtocolCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: tssTotalProtocolCacheHitRatio.setDescription('Overall hit ratio for all protocol caches.')
tssTotalProtocolCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalProtocolCacheHits.setStatus('current')
if mibBuilder.loadTexts: tssTotalProtocolCacheHits.setDescription('Total hits in all protocol caches. The protocol caches Windows objects that are likely to be re-used to avoid having to re-send them on the transmission line. Example objects are Windows icons and brushes. Hits in the cache represent objects that did not need to be re-sent.')
tssTotalProtocolCacheReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalProtocolCacheReads.setStatus('current')
if mibBuilder.loadTexts: tssTotalProtocolCacheReads.setDescription('Total references to all protocol caches.')
tssTotalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalTimeouts.setStatus('current')
if mibBuilder.loadTexts: tssTotalTimeouts.setDescription('The total number of timeouts on the communication line from both the host and client sides of the connection. These are typically the result of a noisy line. On some high latency networks, this could be the result of the protocol timeout being too short. Increasing the protocol timeout on these types of lines will improve performance by reducing needless re-transmissions.')
tssTotalTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalTransportErrors.setStatus('current')
if mibBuilder.loadTexts: tssTotalTransportErrors.setDescription('Total number of Terminal Services transport-level errors.')
tssTotalWaitForOutBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalWaitForOutBuf.setStatus('current')
if mibBuilder.loadTexts: tssTotalWaitForOutBuf.setDescription('The number of times that a wait for an available send buffer was done by the protocols on both the server and client sides of the connection.')
tssTotalWdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalWdBytes.setStatus('current')
if mibBuilder.loadTexts: tssTotalWdBytes.setDescription('Total number of bytes on this Session after all protocol overhead has been removed.')
tssTotalWdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssTotalWdFrames.setStatus('current')
if mibBuilder.loadTexts: tssTotalWdFrames.setDescription('The total number of frames input and output before any additional protocol frames have been added.')
tssVirtualBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssVirtualBytes.setStatus('current')
if mibBuilder.loadTexts: tssVirtualBytes.setDescription('Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.')
tssVirtualBytesPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssVirtualBytesPeak.setStatus('current')
if mibBuilder.loadTexts: tssVirtualBytesPeak.setDescription('Virtual Bytes Peak is the maximum size, in bytes, of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and the process might limit its ability to load libraries.')
tssWorkingSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssWorkingSet.setStatus('current')
if mibBuilder.loadTexts: tssWorkingSet.setDescription('Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.')
tssWorkingSetPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 82, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tssWorkingSetPeak.setStatus('current')
if mibBuilder.loadTexts: tssWorkingSetPeak.setDescription('Working Set Peak is the maximum size, in bytes, of the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
threadTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83), )
if mibBuilder.loadTexts: threadTable.setStatus('current')
if mibBuilder.loadTexts: threadTable.setDescription('The Thread performance object consists of counters that measure aspects of thread behavior. A thread is the basic object that executes instructions on a processor. All running processes have at least one thread.')
threadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1), ).setIndexNames((0, "INFORMANT-ADV", "threadInstance"))
if mibBuilder.loadTexts: threadEntry.setStatus('current')
if mibBuilder.loadTexts: threadEntry.setDescription("Performance information for one particular instance of 'Thread' object.")
threadInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadInstance.setStatus('current')
if mibBuilder.loadTexts: threadInstance.setDescription('Instance name.')
threadPercentPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPercentPrivilegedTime.setStatus('current')
if mibBuilder.loadTexts: threadPercentPrivilegedTime.setDescription('% Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service in called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.')
threadPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPercentProcessorTime.setStatus('current')
if mibBuilder.loadTexts: threadPercentProcessorTime.setDescription('% Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.')
threadPercentUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPercentUserTime.setStatus('current')
if mibBuilder.loadTexts: threadPercentUserTime.setDescription('% User Time is the percentage of elapsed time that this thread has spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows NT Executive, Kernel, and device drivers. Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. These subsystem processes provide additional protection. Therefore, some work done by Windows NT on behalf of your application might appear in other subsystem processes in addition to the privileged time in your process.')
threadContextSwitchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadContextSwitchesPerSec.setStatus('current')
if mibBuilder.loadTexts: threadContextSwitchesPerSec.setDescription('Context Switches/sec is the rate of switches from one thread to another. Thread switches can occur either inside of a single process or across processes. A thread switch can be caused either by one thread asking another for information, or by a thread being preempted by another, higher priority thread becoming ready to run. Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. These subsystem processes provide additional protection. Therefore, some work done by Windows NT on behalf of an application appear in other subsystem processes in addition to the privileged time in the application. Switching to the subsystem process causes one Context Switch in the application thread. Switching back causes another Context Switch in the subsystem thread.')
threadElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadElapsedTime.setStatus('current')
if mibBuilder.loadTexts: threadElapsedTime.setDescription('The total elapsed time (in seconds) this thread has been running.')
threadIDProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadIDProcess.setStatus('current')
if mibBuilder.loadTexts: threadIDProcess.setDescription('ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.')
threadIDThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadIDThread.setStatus('current')
if mibBuilder.loadTexts: threadIDThread.setDescription('ID Thread is the unique identifier of this thread. ID Thread numbers are reused, so they only identify a thread for the lifetime of that thread.')
threadPriorityBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPriorityBase.setStatus('current')
if mibBuilder.loadTexts: threadPriorityBase.setDescription("The current base priority of this thread. The system can raise the thread's dynamic priority above the base priority if the thread is handling user input, or lower it towards the base priority if the thread becomes compute bound.")
threadPriorityCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPriorityCurrent.setStatus('current')
if mibBuilder.loadTexts: threadPriorityCurrent.setDescription("The current dynamic priority of this thread. The system can raise the thread's dynamic priority above the base priority if the thread is handling user input, or lower it towards the base priority if the thread becomes compute bound.")
threadStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadStartAddress.setStatus('current')
if mibBuilder.loadTexts: threadStartAddress.setDescription('Starting virtual address for this thread.')
threadThreadState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadThreadState.setStatus('current')
if mibBuilder.loadTexts: threadThreadState.setDescription('Thread State is the current state of the thread. It is 0 for Initialized, 1 for Ready, 2 for Running, 3 for Standby, 4 for Terminated, 5 for Wait, 6 for Transition, 7 for Unknown. A Running thread is using a processor; a Standby thread is about to use one. A Ready thread wants to use a processor, but is waiting for a processor because none are free. A thread in Transition is waiting for a resource in order to execute, such as waiting for its execution stack to be paged in from disk. A Waiting thread has no use for the processor because it is waiting for a peripheral operation to complete or a resource to become free.')
threadThreadWaitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 83, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadThreadWaitReason.setStatus('current')
if mibBuilder.loadTexts: threadThreadWaitReason.setDescription('Thread Wait Reason is only applicable when the thread is in the Wait state (see Thread State). It is 0 or 7 when the thread is waiting for the Executive, 1 or 8 for a Free Page, 2 or 9 for a Page In, 3 or 10 for a Pool Allocation, 4 or 11 for an Execution Delay, 5 or 12 for a Suspended condition, 6 or 13 for a User Request, 14 for an Event Pair High, 15 for an Event Pair Low, 16 for an LPC Receive, 17 for an LPC Reply, 18 for Virtual Memory, 19 for a Page Out; 20 and higher are not assigned at the time of this writing. Event Pairs are used to communicate with protected subsystems (see Context Switches).')
udpV4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 84))
if mibBuilder.loadTexts: udpV4.setStatus('current')
if mibBuilder.loadTexts: udpV4.setDescription('The UDP performance object consists of counters that measure the rates at which User Data Protocol (UDP) datagrams are sent and received using the UDP. It includes counters that monitor UDP errors.')
udpV4DatagramsNoPortPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 84, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV4DatagramsNoPortPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV4DatagramsNoPortPerSec.setDescription('Datagrams No Port/sec is the rate of received UDP datagrams for which there was no application at the destination port.')
udpV4DatagramsReceivedErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 84, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV4DatagramsReceivedErrors.setStatus('current')
if mibBuilder.loadTexts: udpV4DatagramsReceivedErrors.setDescription('Datagrams Received Errors is the number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.')
udpV4DatagramsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 84, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV4DatagramsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV4DatagramsReceivedPerSec.setDescription('Datagrams Received/sec is the rate at which UDP datagrams are delivered to UDP users.')
udpV4DatagramsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 84, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV4DatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV4DatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate at which UDP datagrams are sent from the entity.')
udpV4DatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 84, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV4DatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV4DatagramsPerSec.setDescription('Datagrams/sec is the rate at which UDP datagrams are sent or received by the entity.')
udpV6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 85))
udpV6DatagramsNoPortPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 85, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6DatagramsNoPortPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV6DatagramsNoPortPerSec.setDescription('Datagrams No Port/sec is the rate of received UDP datagrams for which there was no application at the destination port.')
udpV6DatagramsReceivedErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 85, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6DatagramsReceivedErrors.setStatus('current')
if mibBuilder.loadTexts: udpV6DatagramsReceivedErrors.setDescription('Datagrams Received Errors is the number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.')
udpV6DatagramsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 85, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6DatagramsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV6DatagramsReceivedPerSec.setDescription('Datagrams Received/sec is the rate at which UDP datagrams are delivered to UDP users.')
udpV6DatagramsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 85, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6DatagramsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV6DatagramsSentPerSec.setDescription('Datagrams Sent/sec is the rate at which UDP datagrams are sent from the entity.')
udpV6DatagramsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 85, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpV6DatagramsPerSec.setStatus('current')
if mibBuilder.loadTexts: udpV6DatagramsPerSec.setDescription('Datagrams/sec is the rate at which UDP datagrams are sent or received by the entity.')
webServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86), )
if mibBuilder.loadTexts: webServiceTable.setStatus('current')
if mibBuilder.loadTexts: webServiceTable.setDescription('The Web Service object counters installed with Internet Information Service monitor file transfer rates, bandwidth usage, and connection rates. You can view performance data for all instances of this object (using the _Total instance) or for specific instances, such as the Default Web Site or Administration Web Site instances. In addition to these counters, counters supplied by the Internet Information Services Global performance object combine data for the Web service with the performance data they report for IIS as a whole. For more information, see the Internet Information Services Global object.')
webServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1), ).setIndexNames((0, "INFORMANT-ADV", "wsInstance"))
if mibBuilder.loadTexts: webServiceEntry.setStatus('current')
if mibBuilder.loadTexts: webServiceEntry.setDescription("Performance information for one particular instance of 'Web Service' object.")
wsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInstance.setStatus('current')
if mibBuilder.loadTexts: wsInstance.setDescription('Instance name.')
wsAnonymousUsersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAnonymousUsersPerSec.setStatus('current')
if mibBuilder.loadTexts: wsAnonymousUsersPerSec.setDescription('The rate users are making anonymous connections to the Web service.')
wsBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wsBytesReceivedPerSec.setDescription('Bytes Received/sec is the rate that data bytes are received by the Web service.')
wsBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wsBytesSentPerSec.setDescription('Bytes Sent/sec is the rate data bytes are being sent by the Web service.')
wsBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: wsBytesTotalPerSec.setDescription('Bytes Total/sec is the sum of Bytes Sent/sec and Bytes Received/sec. This is the total rate of bytes transferred by the Web service.')
wsCGIRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCGIRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsCGIRqstsPerSec.setDescription('The rate CGI requests are received by the Web service.')
wsConnAtmpsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsConnAtmpsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsConnAtmpsPerSec.setDescription('The rate that connections to the Web service are being attempted.')
wsCopyRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCopyRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsCopyRqstsPerSec.setDescription('The rate HTTP requests using the COPY method are made. Copy requests are used for copying files and directories.')
wsCurrentAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: wsCurrentAnonymousUsers.setDescription('Current Anonymous Users is the number of users who currently have an anonymous connection using the Web service.')
wsCurrentBlkdAsyncIORqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentBlkdAsyncIORqsts.setStatus('current')
if mibBuilder.loadTexts: wsCurrentBlkdAsyncIORqsts.setDescription('Current requests temporarily blocked due to bandwidth throttling settings.')
wsCurrentCALCountForSSLConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentCALCountForSSLConns.setStatus('current')
if mibBuilder.loadTexts: wsCurrentCALCountForSSLConns.setDescription('This counter is no longer valid. Value will always be zero.')
wsCurrentCALCountForAuthdUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentCALCountForAuthdUsers.setStatus('current')
if mibBuilder.loadTexts: wsCurrentCALCountForAuthdUsers.setDescription('This counter is no longer valid. Value will always be zero.')
wsCurrentCGIRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentCGIRqsts.setStatus('current')
if mibBuilder.loadTexts: wsCurrentCGIRqsts.setDescription('Current CGI Requests is the current number of CGI requests being simultaneously processed by the Web service.')
wsCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentConns.setStatus('current')
if mibBuilder.loadTexts: wsCurrentConns.setDescription('Current Connections is the current number of connections established with the Web service.')
wsCurrentISAPIExtensionRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentISAPIExtensionRqsts.setStatus('current')
if mibBuilder.loadTexts: wsCurrentISAPIExtensionRqsts.setDescription('Current ISAPI Extension Requests is the current number of ISAPI requests being simultaneously processed by the Web service.')
wsCurrentNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: wsCurrentNonAnonymousUsers.setDescription('Current NonAnonymous Users is the number of users who currently have a non-anonymous connection using the Web service.')
wsCurrentBlkdBandwidthBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCurrentBlkdBandwidthBytes.setStatus('current')
if mibBuilder.loadTexts: wsCurrentBlkdBandwidthBytes.setDescription('Current bytes temporarily blocked due to bandwidth throttling settings.')
wsDeleteRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsDeleteRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsDeleteRqstsPerSec.setDescription('The rate HTTP requests using the DELETE method are made. Delete requests are generally used for file removals.')
wsFilesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFilesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wsFilesReceivedPerSec.setDescription('The rate files are received by the Web service.')
wsFilesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFilesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wsFilesSentPerSec.setDescription('The rate files are sent by the Web service.')
wsFilesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFilesPerSec.setStatus('current')
if mibBuilder.loadTexts: wsFilesPerSec.setDescription('The rate files are transferred, that is, sent and received by the Web service.')
wsGetRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsGetRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsGetRqstsPerSec.setDescription('The rate HTTP requests using the GET method are made. Get requests are the most common HTTP request.')
wsHeadRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHeadRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsHeadRqstsPerSec.setDescription('The rate HTTP requests using the HEAD method are made. Head requests generally indicate a client is querying the state of a document they already have to see if it needs to be refreshed.')
wsISAPIExtensionRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsISAPIExtensionRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsISAPIExtensionRqstsPerSec.setDescription('The rate that ISAPI Extension requests are received by the Web service.')
wsLockRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLockRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsLockRqstsPerSec.setDescription('The rate HTTP requests using the LOCK method are made. Lock requests are used to lock a file for one user so that only that user can modify the file.')
wsLockedErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLockedErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsLockedErrorsPerSec.setDescription("The rate of errors due to requests that couldn't be satisfied by the server because the requested document was locked. These are generally reported as an HTTP 423 error code to the client.")
wsLogonAtmpsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLogonAtmpsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsLogonAtmpsPerSec.setDescription('The rate that logons to the Web service are being attempted.')
wsMaximumAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: wsMaximumAnonymousUsers.setDescription('Maximum Anonymous Users is the maximum number of users who established concurrent anonymous connections using the Web service (since service startup).')
wsMaximumCALCountForSSLConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumCALCountForSSLConns.setStatus('current')
if mibBuilder.loadTexts: wsMaximumCALCountForSSLConns.setDescription('This counter is no longer valid. Value will always be zero.')
wsMaximumCALCountForAuthdUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumCALCountForAuthdUsers.setStatus('current')
if mibBuilder.loadTexts: wsMaximumCALCountForAuthdUsers.setDescription('This counter is no longer valid. Value will always be zero.')
wsMaximumCGIRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumCGIRqsts.setStatus('current')
if mibBuilder.loadTexts: wsMaximumCGIRqsts.setDescription('Maximum CGI Requests is the maximum number of CGI requests simultaneously processed by the Web service (since service startup).')
wsMaximumConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumConns.setStatus('current')
if mibBuilder.loadTexts: wsMaximumConns.setDescription('Maximum Connections is the maximum number of concurrent connections established with the Web service (since service startup).')
wsMaximumISAPIExtensionRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumISAPIExtensionRqsts.setStatus('current')
if mibBuilder.loadTexts: wsMaximumISAPIExtensionRqsts.setDescription('Maximum ISAPI Extension Requests is the maximum number of ISAPI requests simultaneously processed by the Web service (since service startup).')
wsMaximumNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaximumNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: wsMaximumNonAnonymousUsers.setDescription('Maximum NonAnonymous Users is the maximum number of concurrent non-anonymous connections to the Web service (since service startup).')
wsMeasuredAsyncIOBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMeasuredAsyncIOBandwidthUsage.setStatus('current')
if mibBuilder.loadTexts: wsMeasuredAsyncIOBandwidthUsage.setDescription('Measured bandwidth of asynchronous I/O averaged over a minute.')
wsMkcolRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMkcolRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsMkcolRqstsPerSec.setDescription('The rate HTTP requests using the MKCOL method are made. Mkcol requests are used to create directories on the server.')
wsMoveRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMoveRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsMoveRqstsPerSec.setDescription('The rate HTTP requests using the MOVE method are made. Move requests are used for moving files and directories.')
wsNonAnonymousUsersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAnonymousUsersPerSec.setStatus('current')
if mibBuilder.loadTexts: wsNonAnonymousUsersPerSec.setDescription('The rate users are making non-anonymous connections to the Web service.')
wsNotFoundErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNotFoundErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsNotFoundErrorsPerSec.setDescription("The rate of errors due to requests that couldn't be satisfied by the server because the requested document could not be found. These are generally reported as an HTTP 404 error code to the client.")
wsOptionsRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsOptionsRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsOptionsRqstsPerSec.setDescription('The rate HTTP requests using the OPTIONS method are made.')
wsOtherRqstMethodsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsOtherRqstMethodsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsOtherRqstMethodsPerSec.setDescription('The rate HTTP requests are made that do not use the OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, MOVE, COPY, MKCOL, PROPFIND, PROPPATCH, SEARCH, LOCK or UNLOCK methods.')
wsPostRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPostRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsPostRqstsPerSec.setDescription('The rate HTTP requests using the POST method are made.')
wsPropfindRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPropfindRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsPropfindRqstsPerSec.setDescription('The rate HTTP requests using the PROPFIND method are made. Propfind requests retrieve property values on files and directories.')
wsProppatchRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsProppatchRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsProppatchRqstsPerSec.setDescription('The rate HTTP requests using the PROPPATCH method are made. Proppatch requests set property values on files and directories.')
wsPutRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPutRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsPutRqstsPerSec.setDescription('The rate HTTP requests using the PUT method are made.')
wsSearchRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSearchRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsSearchRqstsPerSec.setDescription('The rate HTTP requests using the SEARCH method are made. Search requests are used to query the server to find resources that match a set of conditions provided by the client.')
wsServiceUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsServiceUptime.setStatus('current')
if mibBuilder.loadTexts: wsServiceUptime.setDescription('The length of time the Web Service has been running.')
wsTotalAllowedAsyncIORqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalAllowedAsyncIORqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalAllowedAsyncIORqsts.setDescription('Total requests allowed by bandwidth throttling settings (since service startup).')
wsTotalAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: wsTotalAnonymousUsers.setDescription('Total Anonymous Users is the total number of users who established an anonymous connection with the Web service (since service startup).')
wsTotalBlkdAsyncIORqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalBlkdAsyncIORqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalBlkdAsyncIORqsts.setDescription('Total requests temporarily blocked due to bandwidth throttling settings (since service startup).')
wsTotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalBytesReceived.setStatus('current')
if mibBuilder.loadTexts: wsTotalBytesReceived.setDescription('Total Bytes Received is the number of data bytes that have been received by the Web service (since service startup).')
wsTotalBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalBytesSent.setStatus('current')
if mibBuilder.loadTexts: wsTotalBytesSent.setDescription('Total Bytes Sent is the number of data bytes that have been sent by the Web service (since service startup).')
wsTotalBytesTransfered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalBytesTransfered.setStatus('current')
if mibBuilder.loadTexts: wsTotalBytesTransfered.setDescription('Total bytes either received or sent by the Web service (since service startup).')
wsTotalCGIRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalCGIRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalCGIRqsts.setDescription('Total CGI requests is the total number of CGI requests (since service startup).')
wsTotalConnAtmpsAllInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalConnAtmpsAllInstances.setStatus('current')
if mibBuilder.loadTexts: wsTotalConnAtmpsAllInstances.setDescription('Total Connection Attempts is the number of connections that have been attempted using the Web service (since service startup). This counter is for all instances listed.')
wsTotalCopyRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalCopyRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalCopyRqsts.setDescription('Total Copy Requests is the number of HTTP requests using the COPY method (since service startup). Copy requests are used for copying files and directories.')
wsTotalDeleteRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalDeleteRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalDeleteRqsts.setDescription('Total Delete Requests is the number of HTTP requests using the DELETE method (since service startup). Delete requests are generally used for file removals.')
wsTotalFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalFilesReceived.setStatus('current')
if mibBuilder.loadTexts: wsTotalFilesReceived.setDescription('Total Files Received is the total number of files received by the Web service (since service startup).')
wsTotalFilesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalFilesSent.setStatus('current')
if mibBuilder.loadTexts: wsTotalFilesSent.setDescription('Total Files Sent is the total number of files sent by the Web service (since service startup).')
wsTotalFilesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalFilesTransferred.setStatus('current')
if mibBuilder.loadTexts: wsTotalFilesTransferred.setDescription('Total Files Transferred is the sum of Files Sent and Files Received (since service startup).')
wsTotalGetRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalGetRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalGetRqsts.setDescription('Total Get Requests is the number of HTTP requests using the GET method (since service startup). Get requests are the most common HTTP request.')
wsTotalHeadRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalHeadRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalHeadRqsts.setDescription('Total Head Requests is the number of HTTP requests using the HEAD method (since service startup). Head requests generally indicate a client is querying the state of a document they already have to see if it needs to be refreshed.')
wsTotalISAPIExtensionRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalISAPIExtensionRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalISAPIExtensionRqsts.setDescription('Total ISAPI Extension Requests received (since service startup).')
wsTotalLockRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalLockRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalLockRqsts.setDescription('Total Lock Requests is the number of HTTP requests using the LOCK method (since service startup). Lock requests are used to lock a file for one user so that only that user can modify the file.')
wsTotalLockedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalLockedErrors.setStatus('current')
if mibBuilder.loadTexts: wsTotalLockedErrors.setDescription("Total Locked Errors is the number of requests that couldn't be satisfied by the server because the requested was locked (since service startup). These are generally reported as an HTTP 423 error code to the client.")
wsTotalLogonAtmps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalLogonAtmps.setStatus('current')
if mibBuilder.loadTexts: wsTotalLogonAtmps.setDescription('Total Logon Attempts is the number of logons attempts to the Web Service (since service startup).')
wsTotalMethodRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalMethodRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalMethodRqsts.setDescription('Total Method Requests is the number of all HTTP requests (since service startup).')
wsTotalMethodRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalMethodRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsTotalMethodRqstsPerSec.setDescription('The rate HTTP requests are received.')
wsTotalMkcolRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalMkcolRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalMkcolRqsts.setDescription('Total Mkcol Requests is the number of HTTP requests using the MKCOL method (since service startup). Mkcol requests are used to create directories on the server.')
wsTotalMoveRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalMoveRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalMoveRqsts.setDescription('Total Move Requests is the number of HTTP requests using the MOVE method (since service startup). Move requests are used for moving files and directories.')
wsTotalNonAnonymousUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalNonAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: wsTotalNonAnonymousUsers.setDescription('Total NonAnonymous Users is the total number of users who established a non-anonymous connection with the Web service (since service startup).')
wsTotalNotFoundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalNotFoundErrors.setStatus('current')
if mibBuilder.loadTexts: wsTotalNotFoundErrors.setDescription("Total Not Found Errors is the number of requests that couldn't be satisfied by the server because the requested document could not be found (since service startup). These are generally reported as an HTTP 404 error code to the client.")
wsTotalOptionsRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalOptionsRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalOptionsRqsts.setDescription('Total Options Requests is the number of HTTP requests using the OPTIONS method (since service startup).')
wsTotalOtherRqstMethods = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalOtherRqstMethods.setStatus('current')
if mibBuilder.loadTexts: wsTotalOtherRqstMethods.setDescription('Total Other Request Methods is the number of HTTP requests that are not OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, MOVE, COPY, MKCOL, PROPFIND, PROPPATCH, SEARCH, LOCK or UNLOCK methods (since service startup).')
wsTotalPostRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalPostRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalPostRqsts.setDescription('Total Post Requests is the number of HTTP requests using the POST method (since service startup).')
wsTotalPropfindRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalPropfindRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalPropfindRqsts.setDescription('Total Propfind Requests is the number of HTTP requests using the PROPFIND method (since service startup). Propfind requests retrieve property values on files and directories.')
wsTotalProppatchRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalProppatchRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalProppatchRqsts.setDescription('Total Proppatch Requests is the number of HTTP requests using the PROPPATCH method (since service startup). Proppatch requests set property values on files and directories.')
wsTotalPutRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalPutRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalPutRqsts.setDescription('Total Put Requests is the number of HTTP requests using the PUT method (since service startup).')
wsTotalRejectedAsyncIORqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalRejectedAsyncIORqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalRejectedAsyncIORqsts.setDescription('Total requests rejected due to bandwidth throttling settings (since service startup).')
wsTotalSearchRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalSearchRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalSearchRqsts.setDescription('Total Search Requests is the number of HTTP requests using the SEARCH method (since service startup). Search requests are used to query the server to find resources that match a set of conditions provided by the client.')
wsTotalTraceRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalTraceRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalTraceRqsts.setDescription('Total Trace Requests is the number of HTTP requests using the TRACE method (since service startup). Trace requests allow the client to see what is being received at the end of the request chain and use the information for diagnostic purposes.')
wsTotalUnlockRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalUnlockRqsts.setStatus('current')
if mibBuilder.loadTexts: wsTotalUnlockRqsts.setDescription('Total Unlock Requests is the number of HTTP requests using the UNLOCK method (since service startup). Unlock requests are used to remove locks from files.')
wsTotalBlkdBandwidthBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalBlkdBandwidthBytes.setStatus('current')
if mibBuilder.loadTexts: wsTotalBlkdBandwidthBytes.setDescription('Total bytes blocked due to bandwidth throttling settings (since service startup).')
wsTotalCountFailCALRqstsSSLConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalCountFailCALRqstsSSLConns.setStatus('current')
if mibBuilder.loadTexts: wsTotalCountFailCALRqstsSSLConns.setDescription('This counter is no longer valid. Value will always be zero.')
wsTotalCountFailCALRqstsAuthdUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTotalCountFailCALRqstsAuthdUsr.setStatus('current')
if mibBuilder.loadTexts: wsTotalCountFailCALRqstsAuthdUsr.setDescription('This counter is no longer valid. Value will always be zero.')
wsTraceRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTraceRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsTraceRqstsPerSec.setDescription('The rate HTTP requests using the TRACE method are made. Trace requests allow the client to see what is being received at the end of the request chain and use the information for diagnostic purposes.')
wsUnlockRqstsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 86, 1, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsUnlockRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wsUnlockRqstsPerSec.setDescription('The rate HTTP requests using the UNLOCK method are made. Unlock requests are used to remove locks from files.')
webServiceCache = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87))
if mibBuilder.loadTexts: webServiceCache.setStatus('current')
if mibBuilder.loadTexts: webServiceCache.setDescription('The Web Service Cache Counters object includes cache counters specific to the World Wide Web Publishing Service.')
wscActiveFlushedEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscActiveFlushedEntries.setStatus('current')
if mibBuilder.loadTexts: wscActiveFlushedEntries.setDescription('Active Flushed Entries are file handles cached in user-mode that will be closed when all current transfers complete.')
wscCurrentFileCacheMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscCurrentFileCacheMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: wscCurrentFileCacheMemoryUsage.setDescription('Current number of bytes used for the user-mode file cache.')
wscCurrentFilesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscCurrentFilesCached.setStatus('current')
if mibBuilder.loadTexts: wscCurrentFilesCached.setDescription('Current number of files whose content is in the user-mode cache.')
wscCurrentMetadataCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscCurrentMetadataCached.setStatus('current')
if mibBuilder.loadTexts: wscCurrentMetadataCached.setDescription('Current number of metadata information blocks currently in the user-mode cache.')
wscCurrentURIsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscCurrentURIsCached.setStatus('current')
if mibBuilder.loadTexts: wscCurrentURIsCached.setDescription('URI information blocks currently in the user-mode cache.')
wscFileCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscFileCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: wscFileCacheFlushes.setDescription('The number of files removed from the user-mode cache (since service startup).')
wscFileCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscFileCacheHits.setStatus('current')
if mibBuilder.loadTexts: wscFileCacheHits.setDescription('Total number of successful lookups in the user-mode file cache (since service startup).')
wscFileCacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscFileCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: wscFileCacheHitsPercent.setDescription('The ratio of user-mode file cache hits to total cache requests (since service startup).')
wscFileCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscFileCacheMisses.setStatus('current')
if mibBuilder.loadTexts: wscFileCacheMisses.setDescription('Total number of unsuccessful lookups in the user-mode file cache (since service startup).')
wscKernelCurrentURIsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelCurrentURIsCached.setStatus('current')
if mibBuilder.loadTexts: wscKernelCurrentURIsCached.setDescription('URI information blocks currently cached by the kernel.')
wscKernelTotalFlushedURIs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelTotalFlushedURIs.setStatus('current')
if mibBuilder.loadTexts: wscKernelTotalFlushedURIs.setDescription('The number of URI information blocks that have been removed from the kernel cache (since service startup).')
wscKernelTotalURIsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelTotalURIsCached.setStatus('current')
if mibBuilder.loadTexts: wscKernelTotalURIsCached.setDescription('Total number of URI information blocks added to the kernel cache (since service startup).')
wscKernelURICacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelURICacheFlushes.setStatus('current')
if mibBuilder.loadTexts: wscKernelURICacheFlushes.setDescription('Kernel URI Cache Flushes (since server startup).')
wscKernelURICacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelURICacheHits.setStatus('current')
if mibBuilder.loadTexts: wscKernelURICacheHits.setDescription('Total number of successful lookups in the kernel URI cache (since service startup).')
wscKernelURICacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelURICacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: wscKernelURICacheHitsPercent.setDescription('The ratio of kernel URI cache hits to total cache requests (since service startup).')
wscKernelURICacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelURICacheMisses.setStatus('current')
if mibBuilder.loadTexts: wscKernelURICacheMisses.setDescription('Total number of unsuccessful lookups in the kernel URI cache (since service startup).')
wscKernelUriCacheHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscKernelUriCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: wscKernelUriCacheHitsPerSec.setDescription('The rate of kernel URI Cache hits.')
wscMaximumFileCacheMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscMaximumFileCacheMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: wscMaximumFileCacheMemoryUsage.setDescription('Maximum number of bytes used for user-mode file cache (since service startup).')
wscMetadataCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscMetadataCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: wscMetadataCacheFlushes.setDescription('The number of user-mode metadata cache flushes (since service startup).')
wscMetadataCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscMetadataCacheHits.setStatus('current')
if mibBuilder.loadTexts: wscMetadataCacheHits.setDescription('Total number of successful lookups in the user-mode metadata cache (since service startup).')
wscMetadataCacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscMetadataCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: wscMetadataCacheHitsPercent.setDescription('The ratio of user-mode metadata cache hits to total cache requests (since service startup).')
wscMetadataCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscMetadataCacheMisses.setStatus('current')
if mibBuilder.loadTexts: wscMetadataCacheMisses.setDescription('Total number of unsuccessful lookups in the user-mode metadata cache (since service startup).')
wscTotalFilesCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscTotalFilesCached.setStatus('current')
if mibBuilder.loadTexts: wscTotalFilesCached.setDescription('Total number of files whose content was ever added to the user-mode cache (since service startup).')
wscTotalFlushedFiles = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscTotalFlushedFiles.setStatus('current')
if mibBuilder.loadTexts: wscTotalFlushedFiles.setDescription('Total Flushed Files is the number of file handles that have been removed from the user-mode cache (since service startup).')
wscTotalFlushedMetadata = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscTotalFlushedMetadata.setStatus('current')
if mibBuilder.loadTexts: wscTotalFlushedMetadata.setDescription('Total Flushed Metadata is the number of Metadata information blocks that have been removed from the user-mode cache (since service startup).')
wscTotalFlushedURIs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscTotalFlushedURIs.setStatus('current')
if mibBuilder.loadTexts: wscTotalFlushedURIs.setDescription('The number of URI information blocks that have been removed from the user-mode cache (since service startup).')
wscTotalMetadataCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscTotalMetadataCached.setStatus('current')
if mibBuilder.loadTexts: wscTotalMetadataCached.setDescription('Total number of metadata information blocks added to the user-mode cache (since service startup).')
wscTotalURIsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscTotalURIsCached.setStatus('current')
if mibBuilder.loadTexts: wscTotalURIsCached.setDescription('Total number of URI information blocks added to the user-mode cache (since service startup).')
wscURICacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscURICacheFlushes.setStatus('current')
if mibBuilder.loadTexts: wscURICacheFlushes.setDescription('User-mode URI Cache flushes (since service startup).')
wscURICacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscURICacheHits.setStatus('current')
if mibBuilder.loadTexts: wscURICacheHits.setDescription('Total number of successful lookups in the user-mode URI cache (since service startup).')
wscURICacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscURICacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: wscURICacheHitsPercent.setDescription('The ratio of user-mode URI Cache Hits to total cache requests (since service startup).')
wscURICacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscURICacheMisses.setStatus('current')
if mibBuilder.loadTexts: wscURICacheMisses.setDescription('Total number of unsuccessful lookups in the user-mode URI cache (since service startup).')
wscOutputCacheCurrentFlushedItem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheCurrentFlushedItem.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheCurrentFlushedItem.setDescription('Number of items that have been flushed, but are still being used by outgoing responses so are still taking up memory.')
wscOutputCacheCurrentHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheCurrentHitsPercent.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheCurrentHitsPercent.setDescription('Output Cache current hit ratio. Calculated as (H)/(H+M) where H and M represent Hits and Misses in previous sample interval respectively.')
wscOutputCacheCurrentItems = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheCurrentItems.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheCurrentItems.setDescription('Number of items currently in output cache.')
wscOutputCacheCurrentMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheCurrentMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheCurrentMemoryUsage.setDescription('Current memory usage by output cache.')
wscOutputCacheTotalFlushedItems = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheTotalFlushedItems.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheTotalFlushedItems.setDescription('Total number of items flushed by cache.')
wscOutputCacheTotalFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheTotalFlushes.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheTotalFlushes.setDescription('Total number of flushes in output cache.')
wscOutputCacheTotalHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheTotalHits.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheTotalHits.setDescription('Total number of hits in output cache.')
wscOutputCacheTotalMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 87, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wscOutputCacheTotalMisses.setStatus('current')
if mibBuilder.loadTexts: wscOutputCacheTotalMisses.setDescription('Total number of misses in output cache.')
windowsMediaServices = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88))
wmsCurCacheDownloads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurCacheDownloads.setStatus('current')
if mibBuilder.loadTexts: wmsCurCacheDownloads.setDescription('Current Cache Downloads is the current number of active downloads to a cache.')
wmsCurConnectedPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurConnectedPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsCurConnectedPlayers.setDescription('Current Connected Players is the current number of players with unicast connections to the server.')
wmsCurConnectionQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurConnectionQueueLength.setStatus('current')
if mibBuilder.loadTexts: wmsCurConnectionQueueLength.setDescription('Current Connection Queue Length is the current number of connection requests that are pending on the server.')
wmsCurConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurConnectionRate.setStatus('current')
if mibBuilder.loadTexts: wmsCurConnectionRate.setDescription('Current Connection Rate is the current number of clients per second that are connecting to the server.')
wmsCurFileReadRateKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurFileReadRateKbps.setStatus('current')
if mibBuilder.loadTexts: wmsCurFileReadRateKbps.setDescription('Current File Read Rate is the current read rate, in Kbps, for all data files.')
wmsCurIncomingBandwidthKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurIncomingBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmsCurIncomingBandwidthKbps.setDescription('Current Incoming Bandwidth is the current bandwidth, in Kbps, allocated for streams from other servers.')
wmsCurLateReadRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurLateReadRate.setStatus('current')
if mibBuilder.loadTexts: wmsCurLateReadRate.setDescription('Current Late Read Rate is the current number of late read operations per second.')
wmsCurLateSendRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurLateSendRate.setStatus('current')
if mibBuilder.loadTexts: wmsCurLateSendRate.setDescription('Current Late Send Rate is the current number of late write operations per second.')
wmsCurOutDistAllocBandwidthKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurOutDistAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmsCurOutDistAllocBandwidthKbps.setDescription('Current Outgoing Distribution Allocated Bandwidth is the current bandwidth, in Kbps, allocated for streams to distribution servers.')
wmsCurOutDistConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurOutDistConnections.setStatus('current')
if mibBuilder.loadTexts: wmsCurOutDistConnections.setDescription('Current Outgoing Distribution Connections is the current number of connections to distribution servers.')
wmsCurOutDistSendRateKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurOutDistSendRateKbps.setStatus('current')
if mibBuilder.loadTexts: wmsCurOutDistSendRateKbps.setDescription('Current Outgoing Distribution Send Rate is the current send rate, in Kbps, for connections to distribution servers.')
wmsCurPlayerAllocBandwidthKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurPlayerAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmsCurPlayerAllocBandwidthKbps.setDescription('Current Player Allocated Bandwidth is the current bandwidth, in Kbps, that is allocated for streams to all players.')
wmsCurPlayerSendRateKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurPlayerSendRateKbps.setStatus('current')
if mibBuilder.loadTexts: wmsCurPlayerSendRateKbps.setDescription('Current Player Send Rate is the current rate, in Kbps, at which data is being streamed to players.')
wmsCurStreamErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurStreamErrorRate.setStatus('current')
if mibBuilder.loadTexts: wmsCurStreamErrorRate.setDescription('Current Stream Error Rate is the current number of errors per second due to dropped packets.')
wmsCurStreamingHTTPPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurStreamingHTTPPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsCurStreamingHTTPPlayers.setDescription('Current Streaming HTTP Players is the current number of players being streamed data using the HTTP protocol. This does not include players that are stopped or paused.')
wmsCurStreamingMMSPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurStreamingMMSPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsCurStreamingMMSPlayers.setDescription('Current Streaming MMS Players is the current number of players being streamed data using the MMS protocol. This does not include players that are stopped or paused.')
wmsCurStreamingPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurStreamingPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsCurStreamingPlayers.setDescription('Current Streaming Players is the current number of players being streamed data across all protocols. This does not include players that are stopped or paused.')
wmsCurStreamingRTSPPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurStreamingRTSPPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsCurStreamingRTSPPlayers.setDescription('Current Streaming RTSP Players is the current number of players that are being streamed data using the RTSP protocol. This does not include players that are stopped or paused.')
wmsCurUDPResendRequestsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurUDPResendRequestsRate.setStatus('current')
if mibBuilder.loadTexts: wmsCurUDPResendRequestsRate.setDescription('Current UDP Resend Requests Rate is the current number of requests for UDP resends per second received from clients.')
wmsCurUDPResendsSentRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCurUDPResendsSentRate.setStatus('current')
if mibBuilder.loadTexts: wmsCurUDPResendsSentRate.setDescription('Current UDP Resends Sent Rate is the current number of UDP resends per second sent to clients.')
wmsPeakConnectedPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakConnectedPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsPeakConnectedPlayers.setDescription('Peak Connected Players is the peak number of players that have connected since the last time the counter was reset.')
wmsPeakOutDistAllocBandwidthKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakOutDistAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmsPeakOutDistAllocBandwidthKbps.setDescription('Peak Outgoing Distribution Allocated Bandwidth is the peak bandwidth, in Kbps, allocated for all streams to distribution servers that have connected since the last time the counter was reset.')
wmsPeakOutDistConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakOutDistConnections.setStatus('current')
if mibBuilder.loadTexts: wmsPeakOutDistConnections.setDescription('Peak Outgoing Distribution Connections is the peak number of distribution servers that have connected since the last time the counter was reset.')
wmsPeakOutDistSendRateKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakOutDistSendRateKbps.setStatus('current')
if mibBuilder.loadTexts: wmsPeakOutDistSendRateKbps.setDescription('Peak Outgoing Distribution Send Rate is the peak rate, in Kbps, at which data was streamed to distribution servers since the last time the counter was reset.')
wmsPeakPlayerAllocBandwidthKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakPlayerAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmsPeakPlayerAllocBandwidthKbps.setDescription('Peak Player Allocated Bandwidth is the peak bandwidth, in Kbps, that was allocated for all streams to players since the last time the counter was reset.')
wmsPeakPlayerSendRateKbps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakPlayerSendRateKbps.setStatus('current')
if mibBuilder.loadTexts: wmsPeakPlayerSendRateKbps.setDescription('Peak Player Send Rate is the peak rate, in Kbps, at which data was streamed to players since the last time the counter was reset.')
wmsPeakStreamingPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPeakStreamingPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsPeakStreamingPlayers.setDescription('Peak Streaming Players is the peak number of players that have been streamed data since the last time the counter was reset.')
wmsTotalAdvertisements = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalAdvertisements.setStatus('current')
if mibBuilder.loadTexts: wmsTotalAdvertisements.setDescription('Total Advertisements is the total number of advertisements that have been streamed from playlists since the last time the counter was reset.')
wmsTotalConnectedPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalConnectedPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsTotalConnectedPlayers.setDescription('Total Connected Players is the total number of players that have connected since the last time the counter was reset.')
wmsTotalLateReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalLateReads.setStatus('current')
if mibBuilder.loadTexts: wmsTotalLateReads.setDescription('Total Late Reads is the total number of late read operations since the last time the counter was reset.')
wmsTotalLateSends = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalLateSends.setStatus('current')
if mibBuilder.loadTexts: wmsTotalLateSends.setDescription('Total Late Sends is the total number of late send operations since the last time the counter was reset.')
wmsTotalOutDistBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalOutDistBytesSent.setStatus('current')
if mibBuilder.loadTexts: wmsTotalOutDistBytesSent.setDescription('Total Outgoing Distribution Bytes Sent is the total number of bytes streamed to all distribution servers since the last time the counter was reset.')
wmsTotalOutDistConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalOutDistConnections.setStatus('current')
if mibBuilder.loadTexts: wmsTotalOutDistConnections.setDescription('Total Outgoing Distribution Connections is the total number of distribution servers that have connected since the last time the counter was reset.')
wmsTotalPlayerBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalPlayerBytesSent.setStatus('current')
if mibBuilder.loadTexts: wmsTotalPlayerBytesSent.setDescription('Total Player Bytes Sent is the total number of bytes streamed to all players since the last time the counter was reset.')
wmsTotalServerUptime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalServerUptime.setStatus('current')
if mibBuilder.loadTexts: wmsTotalServerUptime.setDescription('Total Server Uptime is the elapsed time, in seconds, which the Windows Media Services service has been running since it was last started.')
wmsTotalStreamDenials = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalStreamDenials.setStatus('current')
if mibBuilder.loadTexts: wmsTotalStreamDenials.setDescription('Total Stream Denials is the total number of stream denials since the last time the counter was reset. This includes both denials that occurred due to failure to be authorized or authenticated, as well as denials that occurred because limits were exceeded.')
wmsTotalStreamErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalStreamErrors.setStatus('current')
if mibBuilder.loadTexts: wmsTotalStreamErrors.setDescription('Total Stream Errors is the total number of stream errors due to dropped packets since the last time the counter was reset.')
wmsTotalStreamTerminations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalStreamTerminations.setStatus('current')
if mibBuilder.loadTexts: wmsTotalStreamTerminations.setDescription('Total Stream Terminations is the total number of streams that were terminated due to inactivity or errors since the last time the counter was reset. This includes terminations that occurred because player inactivity and timeout limits were exceeded, as well as terminations that were due to events such as late reads.')
wmsTotalStreamingPlayers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalStreamingPlayers.setStatus('current')
if mibBuilder.loadTexts: wmsTotalStreamingPlayers.setDescription('Total Streaming Players is the total number of players that have been streamed data since the last time the counter was reset.')
wmsTotalUDPResendRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalUDPResendRequests.setStatus('current')
if mibBuilder.loadTexts: wmsTotalUDPResendRequests.setDescription('Total UDP Resend Requests is the total number of requests for UDP resends received from clients since the last time the counter was reset.')
wmsTotalUDPResendsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 88, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsTotalUDPResendsSent.setStatus('current')
if mibBuilder.loadTexts: wmsTotalUDPResendsSent.setDescription('Total UDP Resends Sent is the total number of UDP resends sent to clients since the last time the counter was reset.')
windowsMediaPublishingPointTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89), )
if mibBuilder.loadTexts: windowsMediaPublishingPointTable.setStatus('current')
if mibBuilder.loadTexts: windowsMediaPublishingPointTable.setDescription("A table containing performance information for instances of 'Windows Media Publishing Points' objects.")
windowsMediaPublishingPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1), ).setIndexNames((0, "INFORMANT-ADV", "wmppInstance"))
if mibBuilder.loadTexts: windowsMediaPublishingPointEntry.setStatus('current')
if mibBuilder.loadTexts: windowsMediaPublishingPointEntry.setDescription("Performance information for one particular instance of 'Windows Media Publishing Points' object.")
wmppInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppInstance.setStatus('current')
if mibBuilder.loadTexts: wmppInstance.setDescription('Instance name.')
wmppCurConnectedPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurConnectedPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppCurConnectedPlayers.setDescription('Current Connected Players is the current number of players with unicast connections to the publishing point.')
wmppCurFileReadRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurFileReadRateKbps.setStatus('current')
if mibBuilder.loadTexts: wmppCurFileReadRateKbps.setDescription('Current File Read Rate is the current read rate, in Kbps, for all data files.')
wmppCurLateReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurLateReadRate.setStatus('current')
if mibBuilder.loadTexts: wmppCurLateReadRate.setDescription('Current Late Read Rate is the current number of late read operations per second.')
wmppCurOutDistAllocBandwidthKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurOutDistAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmppCurOutDistAllocBandwidthKbps.setDescription('Current Outgoing Distribution Allocated Bandwidth is the current bandwidth, in Kbps, allocated for streams to all distribution servers.')
wmppCurOutDistConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurOutDistConnections.setStatus('current')
if mibBuilder.loadTexts: wmppCurOutDistConnections.setDescription('Current Outgoing Distribution Connections is the current number of connections to distribution servers.')
wmppCurPlayerAllocBandwidthKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurPlayerAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmppCurPlayerAllocBandwidthKbps.setDescription('Current Player Allocated Bandwidth is the current bandwidth, in Kbps, that is allocated for streams to all players.')
wmppCurStreamErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurStreamErrorRate.setStatus('current')
if mibBuilder.loadTexts: wmppCurStreamErrorRate.setDescription('Current Stream Error Rate is the current number of errors per second due to dropped packets.')
wmppCurStreamingHTTPPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurStreamingHTTPPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppCurStreamingHTTPPlayers.setDescription('Current Streaming HTTP Players is the current number of players being streamed data using the HTTP protocol. This does not include players that are stopped or paused.')
wmppCurStreamingMMSPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurStreamingMMSPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppCurStreamingMMSPlayers.setDescription('Current Streaming MMS Players is the current number of players being streamed data using the MMS protocol. This does not include players that are stopped or paused.')
wmppCurStreamingPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurStreamingPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppCurStreamingPlayers.setDescription('Current Streaming Players is the current number of players being streamed data across all protocols. This does not include players that are stopped or paused.')
wmppCurStreamingRTSPPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppCurStreamingRTSPPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppCurStreamingRTSPPlayers.setDescription('Current Streaming RTSP Players is the current number of players being streamed data using the RTSP protocol. This does not include players that are stopped or paused.')
wmppPeakConnectedPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppPeakConnectedPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppPeakConnectedPlayers.setDescription('Peak Connected Players is the peak number of players that have connected since the last time the counter was reset.')
wmppPeakOutDistAllocBandwdthKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppPeakOutDistAllocBandwdthKbps.setStatus('current')
if mibBuilder.loadTexts: wmppPeakOutDistAllocBandwdthKbps.setDescription('Peak Outgoing Distribution Allocated Bandwidth is the peak bandwidth, in Kbps, allocated for all streams to distribution servers that have connected since the last time the server was reset.')
wmppPeakOutDistConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppPeakOutDistConnections.setStatus('current')
if mibBuilder.loadTexts: wmppPeakOutDistConnections.setDescription('Peak Outgoing Distribution Connections is the peak number of distribution servers that have connected since the last time the counter was reset.')
wmppPeakPlayerAllocBandwidthKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppPeakPlayerAllocBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: wmppPeakPlayerAllocBandwidthKbps.setDescription('Peak Player Allocated Bandwidth is the peak bandwidth, in Kbps, that was allocated for streams to players since the last time the counter was reset.')
wmppPeakStreamingPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppPeakStreamingPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppPeakStreamingPlayers.setDescription('Peak Streaming Players is the peak number of players that have been streamed data since the last time the counter was reset.')
wmppTotalAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalAdvertisements.setStatus('current')
if mibBuilder.loadTexts: wmppTotalAdvertisements.setDescription('Total Advertisements is the total number of advertisements that have been streamed from playlists since the last time the counter was reset.')
wmppTotalConnectedPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalConnectedPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppTotalConnectedPlayers.setDescription('Total Connected Players is the total number of players that have connected since the last time the counter was reset.')
wmppTotalFileBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalFileBytesRead.setStatus('current')
if mibBuilder.loadTexts: wmppTotalFileBytesRead.setDescription('Total File Bytes Read is the total number of file bytes read.')
wmppTotalLateReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalLateReads.setStatus('current')
if mibBuilder.loadTexts: wmppTotalLateReads.setDescription('Total Late Reads is the total number of late read operations since the last time the counter was reset.')
wmppTotalOutDistBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalOutDistBytesSent.setStatus('current')
if mibBuilder.loadTexts: wmppTotalOutDistBytesSent.setDescription('Total Outgoing Distribution Bytes Sent is the total number of bytes streamed to all distribution servers since the last time the counter was reset.')
wmppTotalOutDistConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalOutDistConnections.setStatus('current')
if mibBuilder.loadTexts: wmppTotalOutDistConnections.setDescription('Total Outgoing Distribution Connections is the total number of distribution servers that have connected since the last time the counter was reset.')
wmppTotalPlayerBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalPlayerBytesSent.setStatus('current')
if mibBuilder.loadTexts: wmppTotalPlayerBytesSent.setDescription('Total Player Bytes Sent is the total number of bytes streamed to all players since the last time the counter was reset.')
wmppTotalStreamDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalStreamDenials.setStatus('current')
if mibBuilder.loadTexts: wmppTotalStreamDenials.setDescription('Total Stream Denials is the total number of stream denials since the last time the counter was reset. This includes both denials that occurred due to failure to be authorized or authenticated, as well as denials that occurred because limits were exceeded.')
wmppTotalStreamErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalStreamErrors.setStatus('current')
if mibBuilder.loadTexts: wmppTotalStreamErrors.setDescription('Total Stream Errors is the total number of stream errors due to dropped packets since the last time the counter was reset.')
wmppTotalStreamTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalStreamTerminations.setStatus('current')
if mibBuilder.loadTexts: wmppTotalStreamTerminations.setDescription('Total Stream Terminations is the total number of streams that were terminated due to inactivity or errors since the last time the counter was reset. This includes terminations that occurred because player inactivity and timeout limits were exceeded, as well as terminations that were due to events such as late reads.')
wmppTotalStreamingPlayers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 89, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmppTotalStreamingPlayers.setStatus('current')
if mibBuilder.loadTexts: wmppTotalStreamingPlayers.setDescription('Total Streaming Players is the total number of players that have been streamed data since the last time the counter was reset.')
windowsMediaStationService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 90))
if mibBuilder.loadTexts: windowsMediaStationService.setStatus('current')
if mibBuilder.loadTexts: windowsMediaStationService.setDescription('The Windows Media Station Service performance object provides statistics about the Windows Media Station service that provides multicasting, distribution and storage functions for ASF streams.')
wmssControllers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 90, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmssControllers.setStatus('current')
if mibBuilder.loadTexts: wmssControllers.setDescription('The number of controllers currently connected to the server.')
wmssStations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 90, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmssStations.setStatus('current')
if mibBuilder.loadTexts: wmssStations.setDescription('The number of station objects that currently exist in the server.')
wmssStreams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 90, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmssStreams.setStatus('current')
if mibBuilder.loadTexts: wmssStreams.setDescription('The number of stream objects that currently exist in the server.')
windowsMediaUnicastService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91))
if mibBuilder.loadTexts: windowsMediaUnicastService.setStatus('current')
if mibBuilder.loadTexts: windowsMediaUnicastService.setDescription('The Windows Media Unicast Service performance object provides statistics about the Windows Media service Unicast service that provides unicasting functions for Advanced Streaming Format (ASF) streams.')
wmusActiveLiveUnicastStreams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusActiveLiveUnicastStreams.setStatus('current')
if mibBuilder.loadTexts: wmusActiveLiveUnicastStreams.setDescription('The number of Live Unicast streams that are being streamed.')
wmusActiveStreams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusActiveStreams.setStatus('current')
if mibBuilder.loadTexts: wmusActiveStreams.setDescription('The number of streams that are being streamed.')
wmusActiveTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusActiveTCPStreams.setStatus('current')
if mibBuilder.loadTexts: wmusActiveTCPStreams.setDescription('The number of TCP streams that are being streamed.')
wmusActiveUDPStreams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusActiveUDPStreams.setStatus('current')
if mibBuilder.loadTexts: wmusActiveUDPStreams.setDescription('The number of UDP streams that are being streamed.')
wmusAggregateReadRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAggregateReadRate.setStatus('current')
if mibBuilder.loadTexts: wmusAggregateReadRate.setDescription('The total, aggregate rate (bytes/sec) of file reads.')
wmusAggregateSendRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAggregateSendRate.setStatus('current')
if mibBuilder.loadTexts: wmusAggregateSendRate.setDescription('The total, aggregate rate (bytes/sec) of stream transmission.')
wmusAllocatedBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAllocatedBandwidth.setStatus('current')
if mibBuilder.loadTexts: wmusAllocatedBandwidth.setDescription('The bandwidth (bytes/sec) currently allocated by clients.')
wmusAuthenticationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAuthenticationRequests.setStatus('current')
if mibBuilder.loadTexts: wmusAuthenticationRequests.setDescription('The number of times an authentication plugin is called to authenticate a client. Depending on the protocol in use, either HTTP or Microsoft Media Server (MMS), a single client may be authenticated once or several times when accessing each piece of unicast co')
wmusAuthenticationsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAuthenticationsDenied.setStatus('current')
if mibBuilder.loadTexts: wmusAuthenticationsDenied.setDescription('The number of times clients are denied access to unicast content by authentication plugins. Clients are denied access by an authentication plugin when their IDs cannot be verified, no user accounts exist, or the authentication plugin is not working.')
wmusAuthorizationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAuthorizationRequests.setStatus('current')
if mibBuilder.loadTexts: wmusAuthorizationRequests.setDescription('The number of times an authorization plugin is called to authorize a client. Each client action, such as opening or playing unicast content, is separately authorized; therefore, the total number of authorization requests is greater than the number of connecte')
wmusAuthorizationsRefused = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusAuthorizationsRefused.setStatus('current')
if mibBuilder.loadTexts: wmusAuthorizationsRefused.setDescription('The number of times clients are denied access to unicast content by authorization plugins. Plugins will deny access to clients based on their function; for example, a billing plugin may deny client access to unicast content if the user account contains insuff')
wmusConnectedClients = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusConnectedClients.setStatus('current')
if mibBuilder.loadTexts: wmusConnectedClients.setDescription('The number of clients connected to this server.')
wmusConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusConnectionRate.setStatus('current')
if mibBuilder.loadTexts: wmusConnectionRate.setDescription('The rate at which clients are connecting to the server.')
wmusHTTPStreams = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusHTTPStreams.setStatus('current')
if mibBuilder.loadTexts: wmusHTTPStreams.setDescription('The number of HTTP streams being streamed.')
wmusHTTPStreamsReadingHeader = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusHTTPStreamsReadingHeader.setStatus('current')
if mibBuilder.loadTexts: wmusHTTPStreamsReadingHeader.setDescription('The number of clients connected to the server via HTTP and reading a file header, but not yet streaming the unicast content. HTTP Streams Reading Header and HTTP Streams Reading Body equal the total number of clients connected to the server via HTTP, as indic')
wmusHTTPStreamsStreamingBody = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusHTTPStreamsStreamingBody.setStatus('current')
if mibBuilder.loadTexts: wmusHTTPStreamsStreamingBody.setDescription('The number of connected clients that have read the file header and are actively streaming unicast content via HTTP. HTTP Streams Reading Body and HTTP Streams Reading Header equal the total number of clients connected to the server via HTTP, as indicated by H')
wmusLateReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusLateReads.setStatus('current')
if mibBuilder.loadTexts: wmusLateReads.setDescription('The number of late read completions per second.')
wmusPendingConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusPendingConnections.setStatus('current')
if mibBuilder.loadTexts: wmusPendingConnections.setDescription('The number of clients attempting to connect to the server but are not yet connected. This number may be high if the server is running near maximum capacity and cannot process a large number of connection requests in a timely manner.')
wmusPluginErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusPluginErrors.setStatus('current')
if mibBuilder.loadTexts: wmusPluginErrors.setDescription("The number of times plugins failed to perform their function. For example, a plugin couldn't reach its user database, the plugin crashed, and so on.")
wmusPluginEvents = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusPluginEvents.setStatus('current')
if mibBuilder.loadTexts: wmusPluginEvents.setDescription('The number of events reported to plugins. An indicator of how much the server is using external plugins.')
wmusSchedulingRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusSchedulingRate.setStatus('current')
if mibBuilder.loadTexts: wmusSchedulingRate.setDescription('The rate (tasks/sec) at which tasks are being scheduled.')
wmusStreamErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusStreamErrors.setStatus('current')
if mibBuilder.loadTexts: wmusStreamErrors.setDescription('The cumulative number of errors occuring per second.')
wmusStreamTerminations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusStreamTerminations.setStatus('current')
if mibBuilder.loadTexts: wmusStreamTerminations.setDescription('The rate at which streams are being terminated due to errors.')
wmusUDPResendRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusUDPResendRequests.setStatus('current')
if mibBuilder.loadTexts: wmusUDPResendRequests.setDescription('The number of times clients ask the server to resend a data packet that was received in error. This value may be high when the server cannot send packets via UDP reliably. A good indicator of server or network overload.')
wmusUDPResendsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 91, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmusUDPResendsSent.setStatus('current')
if mibBuilder.loadTexts: wmusUDPResendsSent.setDescription('The number of UDP Resend Requests processed by the server. Not all UDP Resend Requests are processed if the server is under a heavy load.')
winsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92))
winsSrvrFailedQueriesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrFailedQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrFailedQueriesPerSec.setDescription('Total Number of Failed Queries/sec')
winsSrvrFailedReleasesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrFailedReleasesPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrFailedReleasesPerSec.setDescription('Total Number of Failed Releases/sec')
winsSrvrGroupConflictsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrGroupConflictsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrGroupConflictsPerSec.setDescription('Group Conflicts/sec is the rate at which group registration received by the WINS server resulted in conflicts with records in the database.')
winsSrvrGroupRegsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrGroupRegsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrGroupRegsPerSec.setDescription('Group Registrations/sec is the rate at which group registration are received by the WINS server.')
winsSrvrGroupRenewalsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrGroupRenewalsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrGroupRenewalsPerSec.setDescription('Group Renewals/sec is the rate at which group renewals are received by the WINS server.')
winsSrvrQueriesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrQueriesPerSec.setDescription('Total Number of Queries/sec is the rate at which queries are received by the WINS server.')
winsSrvrReleasesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrReleasesPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrReleasesPerSec.setDescription('Total Number of Releases/sec is the rate at which releases are received by the WINS server.')
winsSrvrSuccessfulQueriesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrSuccessfulQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrSuccessfulQueriesPerSec.setDescription('Total Number of Successful Queries/sec')
winsSrvrSuccessfulReleasesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrSuccessfulReleasesPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrSuccessfulReleasesPerSec.setDescription('Total Number of Successful Releases/sec')
winsSrvrTotalNumConflictsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrTotalNumConflictsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrTotalNumConflictsPerSec.setDescription('Total Number of Conflicts/sec is the sum of the Unique and Group conflicts per sec. This is the total rate at which conflicts were seen by the WINS server.')
winsSrvrTotalNumRegsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrTotalNumRegsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrTotalNumRegsPerSec.setDescription('Total Number of Registrations/sec is the sum of the Unique and Group registrations per sec. This is the total rate at which registration are received by the WINS server.')
winsSrvrTotalNumRenewalsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrTotalNumRenewalsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrTotalNumRenewalsPerSec.setDescription('Total Number of Renewals/sec is the sum of the Unique and Group renewals per sec. This is the total rate at which renewals are received by the WINS server.')
winsSrvrUniqueConflictsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrUniqueConflictsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrUniqueConflictsPerSec.setDescription('Unique Conflicts/sec is the rate at which unique registrations/renewals received by the WINS server resulted in conflicts with records in the database.')
winsSrvrUniqueRegsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrUniqueRegsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrUniqueRegsPerSec.setDescription('Unique Registrations/sec is the rate at which unique registration are received by the WINS server.')
winsSrvrUniqueRenewalsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 92, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSrvrUniqueRenewalsPerSec.setStatus('current')
if mibBuilder.loadTexts: winsSrvrUniqueRenewalsPerSec.setDescription('Unique Renewals/sec is the rate at which unique renewals are received by the WINS server.')
wmiObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 93))
if mibBuilder.loadTexts: wmiObjects.setStatus('current')
if mibBuilder.loadTexts: wmiObjects.setDescription('Number of WMI High Performance provider returned by WMI Adapter')
wmiObjectsHiPerfClasses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 93, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmiObjectsHiPerfClasses.setStatus('current')
if mibBuilder.loadTexts: wmiObjectsHiPerfClasses.setDescription('Shows High Performance Classes')
wmiObjectsHiPerfValidity = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 93, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmiObjectsHiPerfValidity.setStatus('current')
if mibBuilder.loadTexts: wmiObjectsHiPerfValidity.setDescription('Shows if High Performance Classes are valid')
bitsNetUtilization = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94))
if mibBuilder.loadTexts: bitsNetUtilization.setStatus('current')
if mibBuilder.loadTexts: bitsNetUtilization.setDescription('BITS Per Job Network Utilization')
bnuBITSDownloadBlockSizeBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuBITSDownloadBlockSizeBytes.setStatus('current')
if mibBuilder.loadTexts: bnuBITSDownloadBlockSizeBytes.setDescription('Size of the next download block for BITS')
bnuBITSDownloadResponseIntvlMsec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuBITSDownloadResponseIntvlMsec.setStatus('current')
if mibBuilder.loadTexts: bnuBITSDownloadResponseIntvlMsec.setDescription('BITS download response interval (msec)')
bnuEstBWAvailRemoteBitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuEstBWAvailRemoteBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: bnuEstBWAvailRemoteBitsPerSec.setDescription('Estimated bandwidth available to the remote system (Bits/sec)')
bnuIGDSpeedBitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuIGDSpeedBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: bnuIGDSpeedBitsPerSec.setDescription("Estimate of the IGD's Internet connection speed (Bits/Sec)")
bnuNetcardSpeedBitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuNetcardSpeedBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: bnuNetcardSpeedBitsPerSec.setDescription("Estimate of the local netcard's speed (Bits/Sec)")
bnuPercentIGDFree = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuPercentIGDFree.setStatus('current')
if mibBuilder.loadTexts: bnuPercentIGDFree.setDescription('Estimate of most recent percent IGD Internet connection utilization')
bnuPercentNetcardFree = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuPercentNetcardFree.setStatus('current')
if mibBuilder.loadTexts: bnuPercentNetcardFree.setDescription('Estimate of most recent percent network interface utilization')
bnuRemoteServerSpeedBitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 94, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnuRemoteServerSpeedBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: bnuRemoteServerSpeedBitsPerSec.setDescription('Estimate of Remote Server Speed (Bits/Sec)')
advDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95), )
if mibBuilder.loadTexts: advDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: advDatabaseTable.setDescription('Database provides performance statistics for each process using the ESE high performance embedded database management system.')
advDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1), ).setIndexNames((0, "INFORMANT-ADV", "adbInstance"))
if mibBuilder.loadTexts: advDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: advDatabaseEntry.setDescription("Performance information for one particular instance of 'Database' object.")
adbInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbInstance.setStatus('current')
if mibBuilder.loadTexts: adbInstance.setDescription('Instance name.')
adbDatabaseCachePercentHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbDatabaseCachePercentHit.setStatus('current')
if mibBuilder.loadTexts: adbDatabaseCachePercentHit.setDescription('Database Cache % Hit is the percentage of database file page requests that were fulfilled by the database cache without causing a file operation. If this percentage is too low, the database cache size may be too small.')
adbDatabaseCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbDatabaseCacheSize.setStatus('current')
if mibBuilder.loadTexts: adbDatabaseCacheSize.setDescription('Database Cache Size is the amount of system memory used by the database cache manager to hold commonly used information from the database file(s) to prevent file operations. If the database cache size seems to be too small for optimal performance and there is very little available memory on the system (see Memory/Available Bytes), adding more memory to the system may increase performance. If there is a lot of available memory on the system and the database cache size is not growing beyond a certain point, the database cache size may be capped at an artificially low limit. Increasing this limit may increase performance.')
adbDatabaseCacheSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbDatabaseCacheSizeMB.setStatus('current')
if mibBuilder.loadTexts: adbDatabaseCacheSizeMB.setDescription('Database Cache Size (MB) is the amount of system memory (in MegaBytes) used by the database cache manager to hold commonly used information from the database file(s) to prevent file operations. If the database cache size seems to be too small for optimal performance and there is very little available memory on the system (see Memory/Available Bytes), adding more memory to the system may increase performance. If there is a lot of available memory on the system and the database cache size is not growing beyond a certain point, the database cache size may be capped at an artificially low limit. Increasing this limit may increase performance.')
adbDatabasePageEvictionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbDatabasePageEvictionsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbDatabasePageEvictionsPerSec.setDescription('Database Page Evictions/sec is the rate that database file page requests that require the database cache manager to allocate a new page from the database cache force another database page out of the cache. The eviction count is charged when the page is allocated and not when the previous owner of that page was actually evicted from the cache. If this rate is too high, the database cache size may be too small.')
adbDatabasePageFaultStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbDatabasePageFaultStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbDatabasePageFaultStallsPerSec.setDescription('Database Page Fault Stalls/sec is the rate of page faults that cannot be serviced because there are no pages available for allocation from the database cache. If this counter is non-zero most of the time, the clean threshold may be too low.')
adbDatabasePageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbDatabasePageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbDatabasePageFaultsPerSec.setDescription('Database Page Faults/sec is the rate that database file page requests require the database cache manager to allocate a new page from the database cache.')
adbIPerODatabaseReadsAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerODatabaseReadsAvgLatency.setStatus('current')
if mibBuilder.loadTexts: adbIPerODatabaseReadsAvgLatency.setDescription('I/O Database Reads Average Latency is the average length of time, in milliseconds, per database read operation.')
adbIPerODatabaseReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerODatabaseReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIPerODatabaseReadsPerSec.setDescription('I/O Database Reads/sec is the rate of database read operations completed.')
adbIPerODatabaseWritesAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerODatabaseWritesAvgLatency.setStatus('current')
if mibBuilder.loadTexts: adbIPerODatabaseWritesAvgLatency.setDescription('I/O Database Writes Average Latency is the average length of time, in milliseconds, per database write operation.')
adbIPerODatabaseWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerODatabaseWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIPerODatabaseWritesPerSec.setDescription('I/O Database Writes/sec is the rate of database write operations completed.')
adbIPerOLogReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerOLogReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIPerOLogReadsPerSec.setDescription('I/O Log Reads/sec is the rate of logfile read operations completed.')
adbIPerOLogWritesAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerOLogWritesAverageLatency.setStatus('current')
if mibBuilder.loadTexts: adbIPerOLogWritesAverageLatency.setDescription('I/O Log Writes Average Latency is the average length of time, in milliseconds, per logfile write operation.')
adbIPerOLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIPerOLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIPerOLogWritesPerSec.setDescription('I/O Log Writes/sec is the rate of logfile write operations completed.')
adbLogBytesWritePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbLogBytesWritePerSec.setStatus('current')
if mibBuilder.loadTexts: adbLogBytesWritePerSec.setDescription('Log Bytes Write per second is the rate bytes are written to the log.')
adbLogRecordStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbLogRecordStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbLogRecordStallsPerSec.setDescription('Log Record Stalls/sec is the number of log records that cannot be added to the log buffers per second because they are full. If this counter is non-zero most of the time, the log buffer size may be a bottleneck.')
adbLogThreadsWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbLogThreadsWaiting.setStatus('current')
if mibBuilder.loadTexts: adbLogThreadsWaiting.setDescription('Log Threads Waiting is the number of threads waiting for their data to be written to the log in order to complete an update of the database. If this number is too high, the log may be a bottleneck.')
adbLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbLogWritesPerSec.setDescription('Log Writes/sec is the number of times the log buffers are written to the log file(s) per second. If this number approaches the maximum write rate for the media holding the log file(s), the log may be a bottleneck.')
adbPagesConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbPagesConverted.setStatus('current')
if mibBuilder.loadTexts: adbPagesConverted.setDescription('Pages Converted is the count of database pages that have been converted from an older format')
adbPagesConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbPagesConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: adbPagesConvertedPerSec.setDescription('Pages Converted/sec is the count of times per second a database page is converted from an older database format')
adbRecordsConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbRecordsConverted.setStatus('current')
if mibBuilder.loadTexts: adbRecordsConverted.setDescription('Records Converted is the count of database records that have been converted from an older format')
adbRecordsConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbRecordsConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: adbRecordsConvertedPerSec.setDescription('Records Converted/sec is the count of times per second a database record is converted from an older database format')
adbSessionsPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbSessionsPercentUsed.setStatus('current')
if mibBuilder.loadTexts: adbSessionsPercentUsed.setDescription('Sessions % Used is the percentage of database sessions currently open for use by client threads. [Dev Only]')
adbSessionsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: adbSessionsInUse.setDescription('Sessions In Use is the number of database sessions currently open for use by client threads. [Dev Only]')
adbTableOpenCachePercentHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbTableOpenCachePercentHit.setStatus('current')
if mibBuilder.loadTexts: adbTableOpenCachePercentHit.setDescription('Table Open Cache % Hit is the percentage of database tables opened using cached schema information. If this percentage is too low, the table cache size may be too small.')
adbTableOpenCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbTableOpenCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbTableOpenCacheHitsPerSec.setDescription('Table Open Cache Hits/sec is the number of database tables opened using cached schema information per second. If this rate is too low, the table cache size may be too small.')
adbTableOpenCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbTableOpenCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbTableOpenCacheMissesPerSec.setDescription('Table Open Cache Misses/sec is the number of database tables opened without using cached schema information per second. If this rate is too high, the table cache size may be too small.')
adbTableOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbTableOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: adbTableOpensPerSec.setDescription('Table Opens/sec is the number of database tables opened per second.')
adbVersionBucketsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 95, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbVersionBucketsAllocated.setStatus('current')
if mibBuilder.loadTexts: adbVersionBucketsAllocated.setDescription('Total number of version buckets allocated')
advDatabaseInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96), )
if mibBuilder.loadTexts: advDatabaseInstancesTable.setStatus('current')
if mibBuilder.loadTexts: advDatabaseInstancesTable.setDescription("A table containing performance information for instances of 'Database ==> Instances' objects.")
advDatabaseInstancesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1), ).setIndexNames((0, "INFORMANT-ADV", "adbiInstance"))
if mibBuilder.loadTexts: advDatabaseInstancesEntry.setStatus('current')
if mibBuilder.loadTexts: advDatabaseInstancesEntry.setDescription("Performance information for one particular instance of 'Database ==> Instances' object.")
adbiInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiInstance.setStatus('current')
if mibBuilder.loadTexts: adbiInstance.setDescription('Instance name.')
adbIODatabaseReadsAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIODatabaseReadsAverageLatency.setStatus('current')
if mibBuilder.loadTexts: adbIODatabaseReadsAverageLatency.setDescription('I/O Database Reads Average Latency is the average length of time, in milliseconds, per database read operation.')
adbIODatabaseReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIODatabaseReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIODatabaseReadsPerSec.setDescription('I/O Database Reads/sec is the rate of database read operations completed.')
adbIODatabaseWriteAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIODatabaseWriteAverageLatency.setStatus('current')
if mibBuilder.loadTexts: adbIODatabaseWriteAverageLatency.setDescription('I/O Database Writes Average Latency is the average length of time, in milliseconds, per database write operation.')
adbIODatabaseWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIODatabaseWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIODatabaseWritesPerSec.setDescription('I/O Database Writes/sec is the rate of database write operations completed.')
adbIOLogReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIOLogReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIOLogReadsPerSec.setDescription('I/O Log Reads/sec is the rate of logfile read operations completed.')
adbIOLogWritesAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIOLogWritesAverageLatency.setStatus('current')
if mibBuilder.loadTexts: adbIOLogWritesAverageLatency.setDescription('I/O Log Writes Average Latency is the average length of time, in milliseconds, per logfile write operation.')
adbIOLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbIOLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbIOLogWritesPerSec.setDescription('I/O Log Writes/sec is the rate of logfile write operations completed.')
adbiLogBytesWritePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogBytesWritePerSec.setStatus('current')
if mibBuilder.loadTexts: adbiLogBytesWritePerSec.setDescription('Log Bytes Write per second is the rate bytes are written to the log.')
adbiLogGenCheckpointDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogGenCheckpointDepth.setStatus('current')
if mibBuilder.loadTexts: adbiLogGenCheckpointDepth.setDescription('Log Generation Checkpoint Depth represents the amount of work, in count of log files, that will need to be redone or undone to the database file(s) if the process crashes.')
adbiLogGenCheckpointDepthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogGenCheckpointDepthMax.setStatus('current')
if mibBuilder.loadTexts: adbiLogGenCheckpointDepthMax.setDescription('Log Record Stalls/sec is the number of log records that cannot be added to the log buffers per second because they are full. If this counter is non-zero most of the time, the log buffer size may be a bottleneck.')
adbiLogGenLossResiliencyDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogGenLossResiliencyDepth.setStatus('current')
if mibBuilder.loadTexts: adbiLogGenLossResiliencyDepth.setDescription('Log Threads Waiting is the number of threads waiting for their data to be written to the log in order to complete an update of the database. If this number is too high, the log may be a bottleneck.')
adbiLogRecordStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogRecordStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiLogRecordStallsPerSec.setDescription('Log Writes/sec is the number of times the log buffers are written to the log file(s) per second. If this number approaches the maximum write rate for the media holding the log file(s), the log may be a bottleneck.')
adbiLogThreadsWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogThreadsWaiting.setStatus('current')
if mibBuilder.loadTexts: adbiLogThreadsWaiting.setDescription('Pages Converted is the count of database pages that have been converted from an older format')
adbiLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiLogWritesPerSec.setDescription('Pages Converted/sec is the count of times per second a database page is converted from an older database format')
adbiPagesConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiPagesConverted.setStatus('current')
if mibBuilder.loadTexts: adbiPagesConverted.setDescription('Records Converted is the count of database records that have been converted from an older format')
adbiPagesConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiPagesConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiPagesConvertedPerSec.setDescription('Records Converted/sec is the count of times per second a database record is converted from an older database format')
adbiRecordsConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiRecordsConverted.setStatus('current')
if mibBuilder.loadTexts: adbiRecordsConverted.setDescription('Sessions % Used is the percentage of database sessions currently open for use by client threads. [Dev Only]')
adbiRecordsConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiRecordsConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiRecordsConvertedPerSec.setDescription('Sessions In Use is the number of database sessions currently open for use by client threads. [Dev Only]')
adbiSessionsPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiSessionsPercentUsed.setStatus('current')
if mibBuilder.loadTexts: adbiSessionsPercentUsed.setDescription('Streaming Backup Pages Read/sec is the rate of database read operationsperformed for the purpose of streaming backups.')
adbiSessionsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: adbiSessionsInUse.setDescription('Table Open Cache % Hit is the percentage of database tables opened using cached schema information. If this percentage is too low, the table cache size may be too small.')
adbiStreamBackupPagesReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiStreamBackupPagesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiStreamBackupPagesReadPerSec.setDescription('Table Open Cache Hits/sec is the number of database tables opened using cached schema information per second. If this rate is too low, the table cache size may be too small.')
adbiTableOpenCachePercentHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiTableOpenCachePercentHit.setStatus('current')
if mibBuilder.loadTexts: adbiTableOpenCachePercentHit.setDescription('Table Open Cache Misses/sec is the number of database tables opened without using cached schema information per second. If this rate is too high, the table cache size may be too small.')
adbiTableOpenCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiTableOpenCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiTableOpenCacheHitsPerSec.setDescription('Table Opens/sec is the number of database tables opened per second.')
adbiTableOpenCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiTableOpenCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiTableOpenCacheMissesPerSec.setDescription('Total number of version buckets allocated')
adbiTableOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiTableOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: adbiTableOpensPerSec.setDescription('Table Opens/sec is the number of database tables opened per second.')
adbiVersionBucketsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 96, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbiVersionBucketsAllocated.setStatus('current')
if mibBuilder.loadTexts: adbiVersionBucketsAllocated.setDescription('Total number of version buckets allocated')
advDatabaseTableClassesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 97), )
if mibBuilder.loadTexts: advDatabaseTableClassesTable.setStatus('current')
if mibBuilder.loadTexts: advDatabaseTableClassesTable.setDescription("A table containing performance information for instances of 'Database ==> TableClasses' objects.")
advDatabaseTableClassesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 97, 1), ).setIndexNames((0, "INFORMANT-ADV", "adbtcInstance"))
if mibBuilder.loadTexts: advDatabaseTableClassesEntry.setStatus('current')
if mibBuilder.loadTexts: advDatabaseTableClassesEntry.setDescription("Performance information for one particular instance of 'Database ==> TableClasses' object.")
adbtcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 97, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbtcInstance.setStatus('current')
if mibBuilder.loadTexts: adbtcInstance.setDescription('Instance name.')
adbtcCacheSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 97, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adbtcCacheSizeMB.setStatus('current')
if mibBuilder.loadTexts: adbtcCacheSizeMB.setDescription('Database Cache Size (MB) is the amount of system memory (in MegaBytes) used by the database cache manager to hold commonly used information from the database file(s) to prevent file operations. If the database cache size seems to be too small for optimal performance and there is very little available memory on the system (see Memory/Available Bytes), adding more memory to the system may increase performance. If there is a lot of available memory on the system and the database cache size is not growing beyond a certain point, the database cache size may be capped at an artificially low limit. Increasing this limit may increase performance.')
genericIKEAndAuthIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98))
if mibBuilder.loadTexts: genericIKEAndAuthIP.setStatus('current')
if mibBuilder.loadTexts: genericIKEAndAuthIP.setDescription('Generic IKE and AuthIP is the set of Internet Protocol security (IPsec) Internet Key Exchange (IKE) and Authenticated IP (AuthIP) counters that are generic and do not apply to a specific Internet Protocol version.')
giaipAuthIPMainModeNegotTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipAuthIPMainModeNegotTime.setStatus('current')
if mibBuilder.loadTexts: giaipAuthIPMainModeNegotTime.setDescription('AuthIP Main Mode Negotiation Time is the number of milliseconds taken for the last Authenticated IP Main Mode security association negotiated.')
giaipAuthIPQuickModeNegotTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipAuthIPQuickModeNegotTime.setStatus('current')
if mibBuilder.loadTexts: giaipAuthIPQuickModeNegotTime.setDescription('AuthIP Quick Mode Negotiation Time is the number of milliseconds taken for the last Authenticated IP Quick Mode security association negotiated.')
giaipExtendedModeNegotiationTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipExtendedModeNegotiationTime.setStatus('current')
if mibBuilder.loadTexts: giaipExtendedModeNegotiationTime.setDescription('Extended Mode Negotiation Time is the number of milliseconds taken for the last Extended Mode security association negotiated.')
giaipFailedNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipFailedNegotiations.setStatus('current')
if mibBuilder.loadTexts: giaipFailedNegotiations.setDescription('Failed Negotiations is the number of failed negotiations for IKE and AuthIP since IPsec was last started.')
giaipFailedNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipFailedNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: giaipFailedNegotiationsPerSec.setDescription('Failed Negotiations per second is the rate of failed negotiations attempted for IKE and AuthIP.')
giaipIKEMainModeNegotiationTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipIKEMainModeNegotiationTime.setStatus('current')
if mibBuilder.loadTexts: giaipIKEMainModeNegotiationTime.setDescription('IKE Main Mode Negotiation Time is the number of milliseconds taken for the last IKE Main Mode security association negotiated.')
giaipIKEQuickModeNegotiationTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipIKEQuickModeNegotiationTime.setStatus('current')
if mibBuilder.loadTexts: giaipIKEQuickModeNegotiationTime.setDescription('IKE Quick Mode Negotiation Time is the number of milliseconds taken for the last IKE Quick Mode security association negotiated.')
giaipInvalidPacketReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipInvalidPacketReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: giaipInvalidPacketReceivedPerSec.setDescription('Invalid Packets Received per second is the rate at which invalid IPsec packets are being received.')
giaipPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: giaipPacketsReceivedPerSec.setDescription('Packets Received per second is the rate at which validated IPsec packets are being received.')
giaipSuccessfulNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipSuccessfulNegotiations.setStatus('current')
if mibBuilder.loadTexts: giaipSuccessfulNegotiations.setDescription('Successful Negotiations is the number of negotiations completed for IKE and AuthIP since IPsec was last started.')
giaipSuccessfulNegotiationPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 98, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giaipSuccessfulNegotiationPerSec.setStatus('current')
if mibBuilder.loadTexts: giaipSuccessfulNegotiationPerSec.setDescription('Successful Negotiations per second is the rate of negotiations completed for IKE and AuthIP.')
httpService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99))
if mibBuilder.loadTexts: httpService.setStatus('current')
if mibBuilder.loadTexts: httpService.setDescription('Set of HTTP service counters')
httpServiceCurrentUrisCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceCurrentUrisCached.setStatus('current')
if mibBuilder.loadTexts: httpServiceCurrentUrisCached.setDescription('Total number of URIs currently cached by the kernel')
httpServiceTotalFlushedUris = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceTotalFlushedUris.setStatus('current')
if mibBuilder.loadTexts: httpServiceTotalFlushedUris.setDescription('Total number of URIs that have been removed from the kernel URI cache since service startup')
httpServiceTotalUrisCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceTotalUrisCached.setStatus('current')
if mibBuilder.loadTexts: httpServiceTotalUrisCached.setDescription('Total number of URIs added to the kernel since service startup')
httpServiceUriCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceUriCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: httpServiceUriCacheFlushes.setDescription('Total number of kernel URI cache flushes (complete or partial) since service startup')
httpServiceUriCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceUriCacheHits.setStatus('current')
if mibBuilder.loadTexts: httpServiceUriCacheHits.setDescription('Total number of successful lookups in the kernel URI cache')
httpServiceUriCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 99, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceUriCacheMisses.setStatus('current')
if mibBuilder.loadTexts: httpServiceUriCacheMisses.setDescription('Total number of unsuccessful lookups in the kernel URI cache')
httpServiceRequestQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100), )
if mibBuilder.loadTexts: httpServiceRequestQueuesTable.setStatus('current')
if mibBuilder.loadTexts: httpServiceRequestQueuesTable.setDescription('Set of request queue counters')
httpServiceRequestQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1), ).setIndexNames((0, "INFORMANT-ADV", "httpsrqInstance"))
if mibBuilder.loadTexts: httpServiceRequestQueuesEntry.setStatus('current')
if mibBuilder.loadTexts: httpServiceRequestQueuesEntry.setDescription("Performance information for one particular instance of 'HTTP Service Request Queues' object.")
httpsrqInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqInstance.setStatus('current')
if mibBuilder.loadTexts: httpsrqInstance.setDescription('Instance name.')
httpsrqArrivalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqArrivalRate.setStatus('current')
if mibBuilder.loadTexts: httpsrqArrivalRate.setDescription('Rate at which requests are arriving in the queue')
httpsrqCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: httpsrqCacheHitRate.setDescription('Rate of cache hits for the queue')
httpsrqCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqCurrentQueueSize.setStatus('current')
if mibBuilder.loadTexts: httpsrqCurrentQueueSize.setDescription('Number of requests in the queue')
httpsrqMaxQueueItemAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqMaxQueueItemAge.setStatus('current')
if mibBuilder.loadTexts: httpsrqMaxQueueItemAge.setDescription('Age of the oldest request in the queue')
httpsrqRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqRejectedRequests.setStatus('current')
if mibBuilder.loadTexts: httpsrqRejectedRequests.setDescription('Total number of requests rejected from the queue')
httpsrqRejectionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 100, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsrqRejectionRate.setStatus('current')
if mibBuilder.loadTexts: httpsrqRejectionRate.setDescription('Rate at which requests are rejected from the queue')
httpServiceUrlGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101), )
if mibBuilder.loadTexts: httpServiceUrlGroupsTable.setStatus('current')
if mibBuilder.loadTexts: httpServiceUrlGroupsTable.setDescription('Set of URL Group-specific counters')
httpServiceUrlGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1), ).setIndexNames((0, "INFORMANT-ADV", "httpsugInstance"))
if mibBuilder.loadTexts: httpServiceUrlGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: httpServiceUrlGroupsEntry.setDescription("Performance information for one particular instance of 'HTTP Service Url Groups' object.")
httpsugInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugInstance.setStatus('current')
if mibBuilder.loadTexts: httpsugInstance.setDescription('Instance name.')
httpsugAllRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugAllRequests.setStatus('current')
if mibBuilder.loadTexts: httpsugAllRequests.setDescription('Total number of HTTP requests made for this site')
httpsugBytesReceivedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugBytesReceivedRate.setStatus('current')
if mibBuilder.loadTexts: httpsugBytesReceivedRate.setDescription('Rate of received data by HTTP service for this site')
httpsugBytesSentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugBytesSentRate.setStatus('current')
if mibBuilder.loadTexts: httpsugBytesSentRate.setDescription('Rate of sending data by HTTP service for this site')
httpsugBytesTransferredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugBytesTransferredRate.setStatus('current')
if mibBuilder.loadTexts: httpsugBytesTransferredRate.setDescription('Rate of total bytes transferred (sent and received) by HTTP service for this site')
httpsugConnectionAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugConnectionAttempts.setStatus('current')
if mibBuilder.loadTexts: httpsugConnectionAttempts.setDescription('Rate at which connection attempts are being made for this site')
httpsugCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: httpsugCurrentConnections.setDescription('Number of current connections established for this site')
httpsugGetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugGetRequests.setStatus('current')
if mibBuilder.loadTexts: httpsugGetRequests.setDescription('Rate at which GET method requests are made for this site')
httpsugHeadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugHeadRequests.setStatus('current')
if mibBuilder.loadTexts: httpsugHeadRequests.setDescription('Rate at which HEAD method requests are made for this site')
httpsugMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 101, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsugMaxConnections.setStatus('current')
if mibBuilder.loadTexts: httpsugMaxConnections.setDescription('Maximum number of concurrent connections established for this site')
securityPerProcessStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 102), )
if mibBuilder.loadTexts: securityPerProcessStatisticTable.setStatus('current')
if mibBuilder.loadTexts: securityPerProcessStatisticTable.setDescription('These counters track the number of security resources and handles used per process.')
securityPerProcessStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 102, 1), ).setIndexNames((0, "INFORMANT-ADV", "sppsInstance"))
if mibBuilder.loadTexts: securityPerProcessStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: securityPerProcessStatisticEntry.setDescription("Performance information for one particular instance of 'Security Per-Process Statistics' object.")
sppsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 102, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sppsInstance.setStatus('current')
if mibBuilder.loadTexts: sppsInstance.setDescription('Instance name.')
sppsContextHandles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 102, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sppsContextHandles.setStatus('current')
if mibBuilder.loadTexts: sppsContextHandles.setDescription('This counter tracks the number of context handles in use by a given process. Context handles are associated with security contexts established between a client application and a remote peer.')
sppsCredentialHandles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 102, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sppsCredentialHandles.setStatus('current')
if mibBuilder.loadTexts: sppsCredentialHandles.setDescription('This counter tracks the number of credential handles in use by a given process. Credential handles are handles to pre-existing credentials, such as a password, that are associated with a user and are established through a system logon.')
securitySystemWideStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103))
if mibBuilder.loadTexts: securitySystemWideStatistics.setStatus('current')
if mibBuilder.loadTexts: securitySystemWideStatistics.setDescription('These counters track authentication performance on a per second basis.')
sswsActiveSChannelSessionCache = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsActiveSChannelSessionCache.setStatus('current')
if mibBuilder.loadTexts: sswsActiveSChannelSessionCache.setDescription('This counter tracks the number of Secure Sockets Layer (SSL) entries that are currently stored in the secure channel (Schannel) session cache and that are currently in use. The Schannel session cache stores information about successfully established sessions, such as SSL session IDs. Clients can use this information to reconnect to a server without performaing a full SSL handshake.')
sswsDigestAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsDigestAuthentications.setStatus('current')
if mibBuilder.loadTexts: sswsDigestAuthentications.setDescription('This counter tracks the number of Digest authentications that are being processed per second.')
sswsKDCASRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsKDCASRequests.setStatus('current')
if mibBuilder.loadTexts: sswsKDCASRequests.setDescription('This counter tracks the number of Autonomous System (AS) requests that are being processed by the Key Distribution Center (KDC) per second. Clients use AS requests to obtain a ticket-granting ticket.')
sswsKDCTGSRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsKDCTGSRequests.setStatus('current')
if mibBuilder.loadTexts: sswsKDCTGSRequests.setDescription('This counter tracks the number of ticket-granting service (TGS) requests that are being processed by the Key Distribution Center (KDC) per second. Clients use these TGS requests to obtain a service ticket, which allows a client to access resources on other computers.')
sswsKerberosAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsKerberosAuthentications.setStatus('current')
if mibBuilder.loadTexts: sswsKerberosAuthentications.setDescription('This counter tracks the number of times that clients use a ticket to authenticate to this computer per second.')
sswsNTLMAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsNTLMAuthentications.setStatus('current')
if mibBuilder.loadTexts: sswsNTLMAuthentications.setDescription('This counter tracks the number of NTLM authentications processed by this computer per second.')
sswsSSLClientSideFullHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsSSLClientSideFullHandshakes.setStatus('current')
if mibBuilder.loadTexts: sswsSSLClientSideFullHandshakes.setDescription('This counter tracks the number of Secure Sockets Layer (SSL) full client-side handshakes that are being processed per second. During a handshake, signals are exchanged to acknowledge that communication can occur between computers or other devices.')
sswsSSLClientSideReconHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsSSLClientSideReconHandshakes.setStatus('current')
if mibBuilder.loadTexts: sswsSSLClientSideReconHandshakes.setDescription('This counter tracks the number of Secure Sockets Layer (SSL) client-side reconnect handshakes that are being processed per second. Reconnect handshakes allow session keys from previous SSL sessions to be used to resume a client/server connection, and they require less memory to process than full handshakes.')
sswsSSLServerSideFullHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsSSLServerSideFullHandshakes.setStatus('current')
if mibBuilder.loadTexts: sswsSSLServerSideFullHandshakes.setDescription('This counter tracks the number of Secure Sockets Layer (SSL) full server-side handshakes that are being processed per second. During a handshake, signals are exchanged to acknowledge that communication can occur between computers or other devices.')
sswsSSLServerSideReconHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsSSLServerSideReconHandshakes.setStatus('current')
if mibBuilder.loadTexts: sswsSSLServerSideReconHandshakes.setDescription('This counter tracks the number of Secure Sockets Layer (SSL) server-side reconnect handshakes that are being processed per second. Reconnect handshakes allow session keys from previous SSL sessions to be used to resume a client/server connection, and they require less memory to process than full handshakes.')
sswsSchannelSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 103, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsSchannelSessionCacheEntries.setStatus('current')
if mibBuilder.loadTexts: sswsSchannelSessionCacheEntries.setDescription('This counter tracks the number of Secure Sockets Layer (SSL) entries that are currently stored in the secure channel (Schannel) session cache. The Schannel session cache stores information about successfully established sessions, such as SSL session IDs. Clients can use this information to reconnect to a server without performing a full SSL handshake.')
usbTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104), )
if mibBuilder.loadTexts: usbTable.setStatus('current')
if mibBuilder.loadTexts: usbTable.setDescription('USB I/O Counters')
usbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1), ).setIndexNames((0, "INFORMANT-ADV", "usbInstance"))
if mibBuilder.loadTexts: usbEntry.setStatus('current')
if mibBuilder.loadTexts: usbEntry.setDescription("Performance information for one particular instance of 'USB' object.")
usbInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbInstance.setStatus('current')
if mibBuilder.loadTexts: usbInstance.setDescription('Instance name.')
usbPercentTotalBWUsedInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbPercentTotalBWUsedInterrupt.setStatus('current')
if mibBuilder.loadTexts: usbPercentTotalBWUsedInterrupt.setDescription('Displays the percentage of BW reserved for interrupt transfers')
usbPercentTotalBWUseIsoTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbPercentTotalBWUseIsoTransfers.setStatus('current')
if mibBuilder.loadTexts: usbPercentTotalBWUseIsoTransfers.setDescription('Displays the percentage of BW reserved for ISO transfers')
usbAvgMsLatencyForISOTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbAvgMsLatencyForISOTransfers.setStatus('current')
if mibBuilder.loadTexts: usbAvgMsLatencyForISOTransfers.setDescription('Avg number of ms between the current frame and the start frame of an ISO transfer when scheduled. For device instances only.')
usbAvgBytesPerTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbAvgBytesPerTransfer.setStatus('current')
if mibBuilder.loadTexts: usbAvgBytesPerTransfer.setDescription('Displays the average size of all transfer URBs. For device instances only.')
usbBulkBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbBulkBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: usbBulkBytesPerSec.setDescription('Displays the current bulk transfer rate in bytes/sec.')
usbControlDataBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlDataBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: usbControlDataBytesPerSec.setDescription('Displays the current control transfer rate in bytes/sec.')
usbControllerPCIInterruptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControllerPCIInterruptsPerSec.setStatus('current')
if mibBuilder.loadTexts: usbControllerPCIInterruptsPerSec.setDescription('Displays the rate of PCI interrupt generation by the USB controller. For controller instances only.')
usbControllerWorkSignalsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControllerWorkSignalsPerSec.setStatus('current')
if mibBuilder.loadTexts: usbControllerWorkSignalsPerSec.setDescription('Displays the current rate Work Signals generated per second by the usbport driver. For controller instances only.')
usbHostControlAsyncCacheFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbHostControlAsyncCacheFlush.setStatus('current')
if mibBuilder.loadTexts: usbHostControlAsyncCacheFlush.setDescription('Incremented each time the controller async cache is flushed.')
usbHostControllerAsyncIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbHostControllerAsyncIdle.setStatus('current')
if mibBuilder.loadTexts: usbHostControllerAsyncIdle.setDescription('Non-Zero value if the host controller async schedule is not running(idle).')
usbHostControllerIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbHostControllerIdle.setStatus('current')
if mibBuilder.loadTexts: usbHostControllerIdle.setDescription('Non-zero value if the host controller is not running(idle).')
usbHostControllerPerdiodicIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbHostControllerPerdiodicIdle.setStatus('current')
if mibBuilder.loadTexts: usbHostControllerPerdiodicIdle.setDescription('Non-Zero if the periodic schedule is not running(idle).')
usbHostControlPeriodicCacheFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbHostControlPeriodicCacheFlush.setStatus('current')
if mibBuilder.loadTexts: usbHostControlPeriodicCacheFlush.setDescription('Incremented each time the controller periodic cache is flushed.')
usbInterruptBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbInterruptBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: usbInterruptBytesPerSec.setDescription('Displays the current interrupt transfer rate in bytes/sec.')
usbIsoPacketErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbIsoPacketErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: usbIsoPacketErrorsPerSec.setDescription('Number of ISO packets that are NOT late, but complete with an error. For device instances only.')
usbIsochronousBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbIsochronousBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: usbIsochronousBytesPerSec.setDescription('Displays the current isochronous transfer rate in bytes/sec.')
usbTransferErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 104, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbTransferErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: usbTransferErrorsPerSec.setDescription('Number of Transfer URBs completing with an error status. For device instances only.')
videoSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105), )
if mibBuilder.loadTexts: videoSchedulerTable.setStatus('current')
if mibBuilder.loadTexts: videoSchedulerTable.setDescription('Performance counter class of Video Scheduler')
videoSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1), ).setIndexNames((0, "INFORMANT-ADV", "vschdInstance"))
if mibBuilder.loadTexts: videoSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: videoSchedulerEntry.setDescription("Performance information for one particular instance of 'Video Scheduler' object.")
vschdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdInstance.setStatus('current')
if mibBuilder.loadTexts: vschdInstance.setDescription('Instance name.')
vschdPercentGPUBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdPercentGPUBusy.setStatus('current')
if mibBuilder.loadTexts: vschdPercentGPUBusy.setDescription('Percentage of GPU Busy time per second')
vschdDMABufferCompletedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdDMABufferCompletedPerSec.setStatus('current')
if mibBuilder.loadTexts: vschdDMABufferCompletedPerSec.setDescription('Number of DMA Buffer completed by GPU per second')
vschdDMABufferPreemptedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdDMABufferPreemptedPerSec.setStatus('current')
if mibBuilder.loadTexts: vschdDMABufferPreemptedPerSec.setDescription('Number of DMA Buffer preempted by GPU per second')
vschdDMABufferSubmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdDMABufferSubmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: vschdDMABufferSubmittedPerSec.setDescription('Number of DMA Buffer sent to GPU per second')
vschdGPUContext = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdGPUContext.setStatus('current')
if mibBuilder.loadTexts: vschdGPUContext.setDescription('Number of GPU context')
vschdGPUContextSwitchPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdGPUContextSwitchPerSec.setStatus('current')
if mibBuilder.loadTexts: vschdGPUContextSwitchPerSec.setDescription('Number of GPU context switch per second')
vschdPresentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 105, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vschdPresentPerSec.setStatus('current')
if mibBuilder.loadTexts: vschdPresentPerSec.setDescription('Number of Present processed by GPU per second')
wFP = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 106))
wFPProviderCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 106, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPProviderCount.setStatus('current')
if mibBuilder.loadTexts: wFPProviderCount.setDescription('Provider Count is the number of providers registered with the Windows Filtering Platform.')
wFPv4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107))
if mibBuilder.loadTexts: wFPv4.setStatus('current')
if mibBuilder.loadTexts: wFPv4.setDescription('WFPv4 is the set of Windows Filtering Platform counters that apply to traffic and connections over Internet Protocol version 4.')
wFPv4ActiveInConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4ActiveInConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv4ActiveInConnections.setDescription('Active Inbound Connections is the number of current inbound connections allowed by the Windows Filtering Platform.')
wFPv4ActiveOutConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4ActiveOutConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv4ActiveOutConnections.setDescription('Active Outbound Connections is the number of current outbound connections allowed by the Windows Filtering Platform.')
wFPv4AllowedClassifiesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4AllowedClassifiesPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4AllowedClassifiesPerSec.setDescription('Allowed Classifies per second is the rate of Windows Filtering Platform security rule evaluations which allow network activity.')
wFPv4BlockedBinds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4BlockedBinds.setStatus('current')
if mibBuilder.loadTexts: wFPv4BlockedBinds.setDescription('Blocked Binds is the number of network resource assignment requests blocked by the Windows Filtering Platform since the computer was last started.')
wFPv4InConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4InConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv4InConnections.setDescription('Inbound Connections is the number of inbound connections allowed by the Windows Filtering Platform since the computer was last started.')
wFPv4InConnectionsAllowedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4InConnectionsAllowedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4InConnectionsAllowedPerSec.setDescription('Inbound Connections Allowed per second is the rate at which inbound connections are being allowed by the Windows Filtering Platform.')
wFPv4InConnectionsBlockedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4InConnectionsBlockedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4InConnectionsBlockedPerSec.setDescription('Inbound Connections Blocked per second is the rate at which inbound connections are being blocked by the Windows Filtering Platform.')
wFPv4InPacketsDiscardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4InPacketsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4InPacketsDiscardedPerSec.setDescription('Inbound Packets Discarded per second is the rate at which inbound packets are discarded by the Windows Filtering Platform.')
wFPv4OutConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4OutConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv4OutConnections.setDescription('Outbound Connections is the number of outbound connections allowed by the Windows Filtering Platform since the computer was last started.')
wFPv4OutConnectionsAllowedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4OutConnectionsAllowedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4OutConnectionsAllowedPerSec.setDescription('Outbound Connections Allowed per second is the rate at which outbound connections are being allowed by the Windows Filtering Platform.')
wFPv4OutConnectionsBlockedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4OutConnectionsBlockedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4OutConnectionsBlockedPerSec.setDescription('Outbound Connections Blocked per second is the rate at which outbound connections are being blocked by the Windows Filtering Platform.')
wFPv4OutPacketsDiscardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4OutPacketsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4OutPacketsDiscardedPerSec.setDescription('Outbound Packets Discarded per second is the rate at which outbound packets are discarded by the Windows Filtering Platform.')
wFPv4PacketsDiscardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 107, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv4PacketsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv4PacketsDiscardedPerSec.setDescription('Packets Discarded per second is the rate at which the total of inbound and outbound packets are discarded by the Windows Filtering Platform.')
wFPv6 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108))
if mibBuilder.loadTexts: wFPv6.setStatus('current')
if mibBuilder.loadTexts: wFPv6.setDescription('WFPv6 is the set of Windows Filtering Platform counters that apply to traffic and connections over Internet Protocol version 6.')
wFPv6ActiveInConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6ActiveInConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv6ActiveInConnections.setDescription('Active Inbound Connections is the number of current inbound connections allowed by the Windows Filtering Platform.')
wFPv6ActiveOutConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6ActiveOutConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv6ActiveOutConnections.setDescription('Active Outbound Connections is the number of current outbound connections allowed by the Windows Filtering Platform.')
wFPv6AllowedClassifiesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6AllowedClassifiesPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6AllowedClassifiesPerSec.setDescription('Allowed Classifies per second is the rate of Windows Filtering Platform security rule evaluations which allow network activity.')
wFPv6BlockedBinds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6BlockedBinds.setStatus('current')
if mibBuilder.loadTexts: wFPv6BlockedBinds.setDescription('Blocked Binds is the number of network resource assignment requests blocked by the Windows Filtering Platform since the computer was last started.')
wFPv6InConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6InConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv6InConnections.setDescription('Inbound Connections is the number of inbound connections allowed by the Windows Filtering Platform since the computer was last started.')
wFPv6InConnectionsAllowedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6InConnectionsAllowedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6InConnectionsAllowedPerSec.setDescription('Inbound Connections Allowed per second is the rate at which inbound connections are being allowed by the Windows Filtering Platform.')
wFPv6InConnectionsBlockedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6InConnectionsBlockedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6InConnectionsBlockedPerSec.setDescription('Inbound Connections Blocked per second is the rate at which inbound connections are being blocked by the Windows Filtering Platform.')
wFPv6InPacketsDiscardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6InPacketsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6InPacketsDiscardedPerSec.setDescription('Inbound Packets Discarded per second is the rate at which inbound packets are discarded by the Windows Filtering Platform.')
wFPv6OutConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6OutConnections.setStatus('current')
if mibBuilder.loadTexts: wFPv6OutConnections.setDescription('Outbound Connections is the number of outbound connections allowed by the Windows Filtering Platform since the computer was last started.')
wFPv6OutConnectionsAllowedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6OutConnectionsAllowedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6OutConnectionsAllowedPerSec.setDescription('Outbound Connections Allowed per second is the rate at which outbound connections are being allowed by the Windows Filtering Platform.')
wFPv6OutConnectionsBlockedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6OutConnectionsBlockedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6OutConnectionsBlockedPerSec.setDescription('Outbound Connections Blocked per second is the rate at which outbound connections are being blocked by the Windows Filtering Platform.')
wFPv6OutPacketsDiscardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6OutPacketsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6OutPacketsDiscardedPerSec.setDescription('Outbound Packets Discarded per second is the rate at which outbound packets are discarded by the Windows Filtering Platform.')
wFPv6PacketsDiscardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 108, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wFPv6PacketsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: wFPv6PacketsDiscardedPerSec.setDescription('Packets Discarded per second is the rate at which the total of inbound and outbound packets are discarded by the Windows Filtering Platform.')
windowsWorkflowFoundationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109), )
if mibBuilder.loadTexts: windowsWorkflowFoundationTable.setStatus('current')
if mibBuilder.loadTexts: windowsWorkflowFoundationTable.setDescription("A table containing performance information for instances of 'Windows Workflow Foundation' objects.")
windowsWorkflowFoundationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1), ).setIndexNames((0, "INFORMANT-ADV", "wwfInstance"))
if mibBuilder.loadTexts: windowsWorkflowFoundationEntry.setStatus('current')
if mibBuilder.loadTexts: windowsWorkflowFoundationEntry.setDescription("Performance information for one particular instance of 'Windows Workflow Foundation' object.")
wwfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfInstance.setStatus('current')
if mibBuilder.loadTexts: wwfInstance.setDescription('Instance name.')
wwfWorkflowsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsAborted.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsAborted.setDescription('Total number of workflows aborted.')
wwfWorkflowsAbortedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsAbortedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsAbortedPerSec.setDescription('Rate of workflows aborted per second.')
wwfWorkflowsCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsCompleted.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsCompleted.setDescription('Total number of workflows completed.')
wwfWorkflowsCompletedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsCompletedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsCompletedPerSec.setDescription('Rate of workflows completed per second.')
wwfWorkflowsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsCreated.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsCreated.setDescription('Total number of workflows created.')
wwfWorkflowsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsCreatedPerSec.setDescription('Rate of workflows created per second.')
wwfWorkflowsExecuting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsExecuting.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsExecuting.setDescription('Total number of workflow instances actively executing.')
wwfWorkflowsIdlePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsIdlePerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsIdlePerSec.setDescription('Rate of workflows becoming idle per second.')
wwfWorkflowsInMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsInMemory.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsInMemory.setDescription('Total number of workflows in memory.')
wwfWorkflowsLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsLoaded.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsLoaded.setDescription('Total number of workflows loaded.')
wwfWorkflowsLoadedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsLoadedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsLoadedPerSec.setDescription('Rate of workflows loaded per second.')
wwfWorkflowsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsPending.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsPending.setDescription('Total number of workflows waiting for a thread.')
wwfWorkflowsPersisted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsPersisted.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsPersisted.setDescription('Total number of workflows persisted.')
wwfWorkflowsPersistedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsPersistedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsPersistedPerSec.setDescription('Rate of workflows persisted per second.')
wwfWorkflowsRunnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsRunnable.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsRunnable.setDescription('Total number of workflows ready to execute.')
wwfWorkflowsSuspended = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsSuspended.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsSuspended.setDescription('Total number of workflows suspended.')
wwfWorkflowsSuspendedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsSuspendedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsSuspendedPerSec.setDescription('Rate of workflows suspended per second.')
wwfWorkflowsTerminated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsTerminated.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsTerminated.setDescription('Total number of workflows terminated.')
wwfWorkflowsTerminatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsTerminatedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsTerminatedPerSec.setDescription('Rate of workflows terminated per second.')
wwfWorkflowsUnloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsUnloaded.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsUnloaded.setDescription('Total number of workflows unloaded.')
wwfWorkflowsUnloadedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 109, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwfWorkflowsUnloadedPerSec.setStatus('current')
if mibBuilder.loadTexts: wwfWorkflowsUnloadedPerSec.setDescription('Rate of workflows unloaded per second.')
iSCSIInitiatorInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110), )
if mibBuilder.loadTexts: iSCSIInitiatorInstanceTable.setStatus('current')
if mibBuilder.loadTexts: iSCSIInitiatorInstanceTable.setDescription('iSCSI Initiator Instance Statistics')
iSCSIInitiatorInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110, 1), ).setIndexNames((0, "INFORMANT-ADV", "iscsiInstance"))
if mibBuilder.loadTexts: iSCSIInitiatorInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: iSCSIInitiatorInstanceEntry.setDescription("Performance information for one particular instance of 'iSCSI Initiator Instance' object.")
iscsiInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstance.setStatus('current')
if mibBuilder.loadTexts: iscsiInstance.setDescription('Instance name.')
iscsiSessionCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSessionCxnTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionCxnTimeoutErrors.setDescription('Count of Session connection timeout error')
iscsiSessionDigestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSessionDigestErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionDigestErrors.setDescription('Count of Session digest errors')
iscsiSessionFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSessionFormatErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionFormatErrors.setDescription('Count of Session format error')
iscsiSessionsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 110, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSessionsFailed.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionsFailed.setDescription('Number of Sessions failed belonging to this instance')
dtcBridge3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111))
if mibBuilder.loadTexts: dtcBridge3.setStatus('current')
if mibBuilder.loadTexts: dtcBridge3.setDescription('MSDTC Bridge 3.0.0.0 performance counters')
dtcb3AvgParticipantCmtRspnsTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3AvgParticipantCmtRspnsTime.setStatus('current')
if mibBuilder.loadTexts: dtcb3AvgParticipantCmtRspnsTime.setDescription('Average time in milliseconds for the WS-AT service to receive a Commit message response from a participant.')
dtcb3AvgParticipantPrepRspnsTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3AvgParticipantPrepRspnsTime.setStatus('current')
if mibBuilder.loadTexts: dtcb3AvgParticipantPrepRspnsTime.setDescription('Average time in milliseconds for the WS-AT service to receive a Prepare message response from a participant.')
dtcb3CommitRetryCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3CommitRetryCountPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3CommitRetryCountPerSec.setDescription('The number of Commit retry messages that the WS-AT service has sent per second.')
dtcb3FaultsReceivedCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3FaultsReceivedCountPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3FaultsReceivedCountPerSec.setDescription('The number of Fault messages that the WS-AT service has received per second.')
dtcb3FaultsSentCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3FaultsSentCountPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3FaultsSentCountPerSec.setDescription('The number of Fault messages that the WS-AT service has sent per second.')
dtcb3MessageSendFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3MessageSendFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3MessageSendFailuresPerSec.setDescription('The number of WS-AT protocol messages that the WS-AT service failed to send per second.')
dtcb3PrepareRetryCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3PrepareRetryCountPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3PrepareRetryCountPerSec.setDescription('The number of Prepare retry messages that the WS-AT service has sent per second.')
dtcb3PreparedRetryCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3PreparedRetryCountPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3PreparedRetryCountPerSec.setDescription('The number of Prepared retry messages that the WS-AT service has sent per second.')
dtcb3ReplayRetryCountPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 111, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtcb3ReplayRetryCountPerSec.setStatus('current')
if mibBuilder.loadTexts: dtcb3ReplayRetryCountPerSec.setDescription('The number of Replay retry messages that the WS-AT service has sent per second.')
serviceModelEndpoint3Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112), )
if mibBuilder.loadTexts: serviceModelEndpoint3Table.setStatus('current')
if mibBuilder.loadTexts: serviceModelEndpoint3Table.setDescription("A table containing performance information for instances of 'ServiceModelEndpoint 3.0.0.0' objects.")
serviceModelEndpoint3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1), ).setIndexNames((0, "INFORMANT-ADV", "sme3Instance"))
if mibBuilder.loadTexts: serviceModelEndpoint3Entry.setStatus('current')
if mibBuilder.loadTexts: serviceModelEndpoint3Entry.setDescription("Performance information for one particular instance of 'ServiceModelEndpoint 3.0.0.0' object.")
sme3Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3Instance.setStatus('current')
if mibBuilder.loadTexts: sme3Instance.setDescription('Instance name.')
sme3Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3Calls.setStatus('current')
if mibBuilder.loadTexts: sme3Calls.setDescription('The number of calls to this endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.Calls.aspx')
sme3CallsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsDuration.setStatus('current')
if mibBuilder.loadTexts: sme3CallsDuration.setDescription('The average duration of calls to this endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallDuration.aspx')
sme3CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsFailed.setStatus('current')
if mibBuilder.loadTexts: sme3CallsFailed.setDescription('The number of calls with unhandled exceptions at this endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallsFailed.aspx')
sme3CallsFailedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsFailedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sme3CallsFailedPerSecond.setDescription('The number of calls with unhandled exceptions at this endpoint per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallsFailedPerSecond.aspx')
sme3CallsFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsFaulted.setStatus('current')
if mibBuilder.loadTexts: sme3CallsFaulted.setDescription('The number of calls to this endpoint that returned faults. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallsFaulted.aspx')
sme3CallsFaultedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsFaultedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sme3CallsFaultedPerSecond.setDescription('The number of calls to this endpoint that returned faults per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallsFaultedPerSecond.aspx')
sme3CallsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsOutstanding.setStatus('current')
if mibBuilder.loadTexts: sme3CallsOutstanding.setDescription('The number of calls to this endpoint that are in progress. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallsOutstanding.aspx')
sme3CallsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsPerSecond.setStatus('current')
if mibBuilder.loadTexts: sme3CallsPerSecond.setDescription('The number of calls to this endpoint per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.CallsPerSecond.aspx')
sme3ReliableMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3ReliableMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: sme3ReliableMessagesDropped.setDescription('The number of reliable messaging messages that were dropped at this endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.RMMessagesDropped.aspx')
sme3ReliableMessagesDropPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3ReliableMessagesDropPerSec.setStatus('current')
if mibBuilder.loadTexts: sme3ReliableMessagesDropPerSec.setDescription('The number of reliable messaging messages that were dropped at this endpoint per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.RMMessagesDroppedPerSecond.aspx')
sme3ReliableSessionsFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3ReliableSessionsFaulted.setStatus('current')
if mibBuilder.loadTexts: sme3ReliableSessionsFaulted.setDescription('The number of reliable messaging sessions that faulted at this endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.RMSessionsFaulted.aspx')
sme3ReliableSessionsFaultPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3ReliableSessionsFaultPerSec.setStatus('current')
if mibBuilder.loadTexts: sme3ReliableSessionsFaultPerSec.setDescription('The number of reliable messaging sessions that faulted at this endpoint per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.RMSessionsFaultedPerSecond.aspx')
sme3CallsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: sme3CallsNotAuthorized.setDescription('The number of calls to this endpoint that failed authorization. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.SecurityCallsNotAuthorized.aspx')
sme3CallsNotAuthorizedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3CallsNotAuthorizedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sme3CallsNotAuthorizedPerSecond.setDescription('The number of calls to this endpoint that failed authorization per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.SecurityCallsNotAuthorizedPerSecond.aspx ')
sme3ValidationAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3ValidationAuthFail.setStatus('current')
if mibBuilder.loadTexts: sme3ValidationAuthFail.setDescription('The number of calls to this endpoint that failed validation or authentication. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.SecurityValidationAuthenticationFailures .aspx')
sme3ValidationAuthFailPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3ValidationAuthFailPerSec.setStatus('current')
if mibBuilder.loadTexts: sme3ValidationAuthFailPerSec.setDescription('The number of calls to this endpoint that failed validation or authentication per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.SecurityValidationAuthenticationFailures PerSecond.aspx')
sme3TransactionsFlowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3TransactionsFlowed.setStatus('current')
if mibBuilder.loadTexts: sme3TransactionsFlowed.setDescription('The number of transactions that flowed to operations at this endpoint. This counter is incremented any time a transaction ID is present in the message that is sent to the endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.TxFlowed.aspx')
sme3TransactionsFlowedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 112, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sme3TransactionsFlowedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sme3TransactionsFlowedPerSecond.setDescription('The number of transactions that flowed to operations at this endpoint per second. This counter is incremented any time a transaction ID is present in the message that is sent to the endpoint. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.TxFlowedPerSecond.aspx')
serviceModelOperation3Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113), )
if mibBuilder.loadTexts: serviceModelOperation3Table.setStatus('current')
if mibBuilder.loadTexts: serviceModelOperation3Table.setDescription("A table containing performance information for instances of 'ServiceModelOperation 3.0.0.0' objects.")
serviceModelOperation3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1), ).setIndexNames((0, "INFORMANT-ADV", "smo3Instance"))
if mibBuilder.loadTexts: serviceModelOperation3Entry.setStatus('current')
if mibBuilder.loadTexts: serviceModelOperation3Entry.setDescription("Performance information for one particular instance of 'ServiceModelOperation 3.0.0.0' object.")
smo3Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3Instance.setStatus('current')
if mibBuilder.loadTexts: smo3Instance.setDescription('Instance name.')
smo3CallFailedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallFailedPerSecond.setStatus('current')
if mibBuilder.loadTexts: smo3CallFailedPerSecond.setDescription('The number of calls with unhandled exceptions in this operation per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallsFailedPerSecond.aspx')
smo3Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3Calls.setStatus('current')
if mibBuilder.loadTexts: smo3Calls.setDescription('The number of calls to this operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.Calls.aspx')
smo3CallsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsDuration.setStatus('current')
if mibBuilder.loadTexts: smo3CallsDuration.setDescription('The average duration of calls to this operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallDuration.aspx')
smo3CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsFailed.setStatus('current')
if mibBuilder.loadTexts: smo3CallsFailed.setDescription('The number of calls with unhandled exceptions in this operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallsFailed.aspx')
smo3CallsFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsFaulted.setStatus('current')
if mibBuilder.loadTexts: smo3CallsFaulted.setDescription('The number of calls to this operation that returned faults. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallsFaulted.aspx')
smo3CallsFaultedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsFaultedPerSecond.setStatus('current')
if mibBuilder.loadTexts: smo3CallsFaultedPerSecond.setDescription('The number of calls to this operation that returned faults per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallsFaultedPerSecond.aspx')
smo3CallsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsOutstanding.setStatus('current')
if mibBuilder.loadTexts: smo3CallsOutstanding.setDescription('The number of calls to this operation that are in progress. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallsOutstanding.aspx')
smo3CallsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsPerSecond.setStatus('current')
if mibBuilder.loadTexts: smo3CallsPerSecond.setDescription('The number of calls to this operation per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.CallsPerSecond.aspx')
smo3CallsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: smo3CallsNotAuthorized.setDescription('The number of calls to this operation that failed authorization. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.SecurityCallsNotAuthorized.aspx')
smo3CallsNotAuthorizedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3CallsNotAuthorizedPerSec.setStatus('current')
if mibBuilder.loadTexts: smo3CallsNotAuthorizedPerSec.setDescription('The number of calls to this operation that failed authorization per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.SecurityCallsNotAuthorizedPerSecond.asp x')
smo3ValidationAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3ValidationAuthFail.setStatus('current')
if mibBuilder.loadTexts: smo3ValidationAuthFail.setDescription('The number of calls to this operation that failed validation or authentication. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.SecurityValidationAuthenticationFailure s.aspx')
smo3ValidationAuthFailPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3ValidationAuthFailPerSec.setStatus('current')
if mibBuilder.loadTexts: smo3ValidationAuthFailPerSec.setDescription('The number of calls to this operation that failed validation or authentication per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.SecurityValidationAuthenticationFailure sPerSecond.aspx')
smo3TransactionsFlowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3TransactionsFlowed.setStatus('current')
if mibBuilder.loadTexts: smo3TransactionsFlowed.setDescription('The number of transactions that flowed to this operation. This counter is incremented any time a transaction ID is present in the message sent to the operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.TxFlowed.aspx')
smo3TransactionsFlowedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 113, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smo3TransactionsFlowedPerSecond.setStatus('current')
if mibBuilder.loadTexts: smo3TransactionsFlowedPerSecond.setDescription('The number of transactions that flowed to this operation per second. This counter is incremented any time a transaction ID is present in the message sent to the operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Op eration.TxFlowedPerSecond.aspx')
serviceModelService3Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114), )
if mibBuilder.loadTexts: serviceModelService3Table.setStatus('current')
if mibBuilder.loadTexts: serviceModelService3Table.setDescription("A table containing performance information for instances of 'ServiceModelService 3.0.0.0' objects.")
serviceModelService3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1), ).setIndexNames((0, "INFORMANT-ADV", "sms3Instance"))
if mibBuilder.loadTexts: serviceModelService3Entry.setStatus('current')
if mibBuilder.loadTexts: serviceModelService3Entry.setDescription("Performance information for one particular instance of 'ServiceModelService 3.0.0.0' object.")
sms3Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3Instance.setStatus('current')
if mibBuilder.loadTexts: sms3Instance.setDescription('Instance name.')
sms3Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3Calls.setStatus('current')
if mibBuilder.loadTexts: sms3Calls.setDescription('The number of calls to this service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.Calls.aspx')
sms3CallsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsDuration.setStatus('current')
if mibBuilder.loadTexts: sms3CallsDuration.setDescription('The average duration of calls to this service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallDuration.aspx')
sms3CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsFailed.setStatus('current')
if mibBuilder.loadTexts: sms3CallsFailed.setDescription('The number of calls with unhandled exceptions in this service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallsFailed.aspx')
sms3CallsFailedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsFailedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sms3CallsFailedPerSecond.setDescription('The number of calls with unhandled exceptions in this service per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallsFailedPerSecond.aspx')
sms3CallsFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsFaulted.setStatus('current')
if mibBuilder.loadTexts: sms3CallsFaulted.setDescription('The number of calls to this service that returned faults. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallsFaulted.aspx')
sms3CallsFaultedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsFaultedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sms3CallsFaultedPerSecond.setDescription('The number of calls to this service that returned faults per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallsFaultedPerSecond.aspx')
sms3CallsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsOutstanding.setStatus('current')
if mibBuilder.loadTexts: sms3CallsOutstanding.setDescription('The number of calls to this service that are in progress. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallsOutstanding.aspx')
sms3CallsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsPerSecond.setStatus('current')
if mibBuilder.loadTexts: sms3CallsPerSecond.setDescription('The number of calls to this service per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.CallsPerSecond.aspx')
sms3Instances = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3Instances.setStatus('current')
if mibBuilder.loadTexts: sms3Instances.setDescription('The total number of instances of the service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.Instances.aspx')
sms3InstancesCreatedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3InstancesCreatedPerSecond.setStatus('current')
if mibBuilder.loadTexts: sms3InstancesCreatedPerSecond.setDescription('The creation rate of service instances per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.InstancesPerSecond.aspx')
sms3QueuedMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3QueuedMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: sms3QueuedMessagesDropped.setDescription('The number of messages to this service that were dropped by the queued transport. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.MsmqDroppedMessages.aspx')
sms3QueuedMessagesDroppedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3QueuedMessagesDroppedPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3QueuedMessagesDroppedPerSec.setDescription('The number of messages to this service that were dropped by the queued transport per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.MsmqDroppedMessagesPerSecond.aspx')
sms3QueuedMessagesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3QueuedMessagesRejected.setStatus('current')
if mibBuilder.loadTexts: sms3QueuedMessagesRejected.setDescription('The number of messages to this servcie that were rejected by the queued transport. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.MsmqRejectedMessages.aspx')
sms3QueuedMessagesRejectedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3QueuedMessagesRejectedPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3QueuedMessagesRejectedPerSec.setDescription('The number of messages to this service that were rejected by the queued transport per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.MsmqRejectedMessagesPerSecond.aspx')
sms3QueuedPoisonMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3QueuedPoisonMessages.setStatus('current')
if mibBuilder.loadTexts: sms3QueuedPoisonMessages.setDescription('The number of messages to this service that were marked poisoned by the queued transport. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.MsmqPoisonMessages.aspx')
sms3QueuedPoisonMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3QueuedPoisonMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3QueuedPoisonMessagesPerSec.setDescription('The number of messages to this service that were marked poisoned by the queued transport per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.En dpoint.MsmqPoisonMessagesPerSecond.aspx')
sms3ReliableMessagesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3ReliableMessagesDrop.setStatus('current')
if mibBuilder.loadTexts: sms3ReliableMessagesDrop.setDescription('The number of reliable messaging messages that were dropped in this service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.RMMessagesDropped.aspx')
sms3ReliableMessagesDropPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3ReliableMessagesDropPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3ReliableMessagesDropPerSec.setDescription('The number of reliable messaging messages that were dropped in this service per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.RMMessagesDroppedPerSecond.aspx')
sms3ReliableSessionsFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3ReliableSessionsFaulted.setStatus('current')
if mibBuilder.loadTexts: sms3ReliableSessionsFaulted.setDescription('The number of reliable messaging sessions that were faulted in this service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.RMSessionsFaulted.aspx')
sms3ReliableSessionFaultedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3ReliableSessionFaultedPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3ReliableSessionFaultedPerSec.setDescription('The number of reliable messaging sessions that were faulted in this service per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.RMSessionsFaultedPerSecond.aspx')
sms3CallsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: sms3CallsNotAuthorized.setDescription('The number of calls to this service that failed authorization. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.SecurityCallsNotAuthorized.aspx')
sms3CallsNotAuthorizedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3CallsNotAuthorizedPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3CallsNotAuthorizedPerSec.setDescription('The number of calls to this service that failed authorization per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.SecurityCallsNotAuthorizedPerSecond.aspx')
sms3ValidationAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3ValidationAuthFail.setStatus('current')
if mibBuilder.loadTexts: sms3ValidationAuthFail.setDescription('The number of calls to this service that failed validation or authentication. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.SecurityValidationAuthenticationFailures. aspx')
sms3ValidationAuthFailPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3ValidationAuthFailPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3ValidationAuthFailPerSec.setDescription('The number of calls to this service that failed validation or authentication per second. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.SecurityValidationAuthenticationFailuresP erSecond.aspx')
sms3TransactedOpsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactedOpsAborted.setStatus('current')
if mibBuilder.loadTexts: sms3TransactedOpsAborted.setDescription('The number of transacted operations with the outcome aborted in this service. Work done under such operations is rolled back. Resources are reverted to their previous state. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxAborted.aspx')
sms3TransactedOpsAbortedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactedOpsAbortedPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3TransactedOpsAbortedPerSec.setDescription('The number of transacted operations with the outcome aborted in this service per second. Work done under such operations is rolled back. Resources are reverted to their previous state. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxAbortedPerSecond.aspx')
sms3TransactedOpsCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactedOpsCommit.setStatus('current')
if mibBuilder.loadTexts: sms3TransactedOpsCommit.setDescription('The number of transacted operations with the outcome committed in this service. Work done under such operations is fully committed. Resources are updated in accordance with the work done in the operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxCommitted.aspx')
sms3TransactedOpsCommitPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactedOpsCommitPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3TransactedOpsCommitPerSec.setDescription('The number of transacted operations with the outcome committed in this service per second. Work done under such operations is fully committed. Resources are updated in accordance with the work done in the operation. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxCommittedPerSecond.aspx')
sms3TransactedOpsInDoubt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactedOpsInDoubt.setStatus('current')
if mibBuilder.loadTexts: sms3TransactedOpsInDoubt.setDescription('The number of transacted operations with an outcome in doubt in this service. Work done with an outcome in doubt is in an indeterminate state. Resources are held pending outcome. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxInDoubt.aspx')
sms3TransactedOpsInDoubtPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactedOpsInDoubtPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3TransactedOpsInDoubtPerSec.setDescription('The number of transacted operations with an outcome in doubt in this service per second. Work done with an outcome in doubt is in an indeterminate state. Resources are held pending outcome. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxInDoubtPerSecond.aspx')
sms3TransactionsFlowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactionsFlowed.setStatus('current')
if mibBuilder.loadTexts: sms3TransactionsFlowed.setDescription('The number of transactions that flowed to operations in this service. This counter is incremented any time a transaction ID is present in the message that is sent to the service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxFlowed.aspx')
sms3TransactionsFlowedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 114, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sms3TransactionsFlowedPerSec.setStatus('current')
if mibBuilder.loadTexts: sms3TransactionsFlowedPerSec.setDescription('The number of transactions that flowed to operations in this service per second. This counter is incremented any time a transaction ID is present in the message that is sent to the service. http://msdn.microsoft.com/en-US/library/System. ServiceModel.Diagnostics.PerformanceCounters.Se rvice.TxFlowedPerSecond.aspx')
svcHost3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115))
if mibBuilder.loadTexts: svcHost3.setStatus('current')
if mibBuilder.loadTexts: svcHost3.setDescription('SMSvcHost 3.0.0.0 performance counters')
smsh3ConnsAcceptedOverNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3ConnsAcceptedOverNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3ConnsAcceptedOverNetPipe.setDescription('The total number of named pipe connections accepted over net.pipe.')
smsh3ConnsAcceptedOverNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3ConnsAcceptedOverNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3ConnsAcceptedOverNetTcp.setDescription('The total number of TCP connections accepted over net.tcp.')
smsh3ConnsDispatchedOverNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3ConnsDispatchedOverNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3ConnsDispatchedOverNetPipe.setDescription('The total number of connections dispatched over net.pipe.')
smsh3ConnsDispatchedOverNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3ConnsDispatchedOverNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3ConnsDispatchedOverNetTcp.setDescription('The total number of connections dispatched over net.tcp.')
smsh3DispatchFailuresOverNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3DispatchFailuresOverNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3DispatchFailuresOverNetPipe.setDescription('The total number of failures dispatching messages received over net.pipe.')
smsh3DispatchFailuresOverNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3DispatchFailuresOverNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3DispatchFailuresOverNetTcp.setDescription('The total number of failures dispatching messages received over net.tcp.')
smsh3ProtocolFailuresOverNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3ProtocolFailuresOverNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3ProtocolFailuresOverNetPipe.setDescription('The total number of failures at the protocol layer of net.pipe.')
smsh3ProtocolFailuresOverNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3ProtocolFailuresOverNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3ProtocolFailuresOverNetTcp.setDescription('The total number of failures at the protocol layer of net.tcp.')
smsh3RegActiveForNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3RegActiveForNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3RegActiveForNetPipe.setDescription('The number of uri registrations currently active for net.pipe.')
smsh3RegActiveForNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3RegActiveForNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3RegActiveForNetTcp.setDescription('The number of uri registrations currently active for net.tcp.')
smsh3UrisRegisteredForNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3UrisRegisteredForNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3UrisRegisteredForNetPipe.setDescription('The total number of uris that were succesfully registered for net.pipe.')
smsh3UrisRegisteredForNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3UrisRegisteredForNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3UrisRegisteredForNetTcp.setDescription('The total number of uris that were succesfully registered for net.tcp.')
smsh3UrisUnregisteredForNetPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3UrisUnregisteredForNetPipe.setStatus('current')
if mibBuilder.loadTexts: smsh3UrisUnregisteredForNetPipe.setDescription('The total number of uris that were succesfully unregistered for net.pipe.')
smsh3UrisUnregisteredForNetTcp = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 115, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smsh3UrisUnregisteredForNetTcp.setStatus('current')
if mibBuilder.loadTexts: smsh3UrisUnregisteredForNetTcp.setDescription('The total number of uris that were succesfully unregistered for net.tcp.')
aspDotNETv1 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116))
adn1ApplicationRestarts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1ApplicationRestarts.setStatus('current')
if mibBuilder.loadTexts: adn1ApplicationRestarts.setDescription("Number of times the application has been restarted during the web server's lifetime.")
adn1ApplicationsRunning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1ApplicationsRunning.setStatus('current')
if mibBuilder.loadTexts: adn1ApplicationsRunning.setDescription('Number of currently running web applications.')
adn1RequestExecutionTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1RequestExecutionTime.setStatus('current')
if mibBuilder.loadTexts: adn1RequestExecutionTime.setDescription('The number of milliseconds that it took to execute the most recent request.')
adn1RequestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1RequestWaitTime.setStatus('current')
if mibBuilder.loadTexts: adn1RequestWaitTime.setDescription('The number of milliseconds the most recent request was waiting in the queue.')
adn1RequestsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1RequestsCurrent.setStatus('current')
if mibBuilder.loadTexts: adn1RequestsCurrent.setDescription('The current number of requests, including those that are queued, currently executing, or waiting to be written to the client. Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.')
adn1RequestsDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1RequestsDisconnected.setStatus('current')
if mibBuilder.loadTexts: adn1RequestsDisconnected.setDescription('The number of requests disconnected due to communication errors or user terminated.')
adn1RequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1RequestsQueued.setStatus('current')
if mibBuilder.loadTexts: adn1RequestsQueued.setDescription('The number of requests waiting to be processed.')
adn1RequestsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1RequestsRejected.setStatus('current')
if mibBuilder.loadTexts: adn1RequestsRejected.setDescription('The number of requests rejected because the request queue was full.')
adn1StateServerSessionsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1StateServerSessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adn1StateServerSessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adn1StateServerSessionsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1StateServerSessionsActive.setStatus('current')
if mibBuilder.loadTexts: adn1StateServerSessionsActive.setDescription('The current number of sessions currently active.')
adn1StateServerSessionsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1StateServerSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adn1StateServerSessionsTimedOut.setDescription('The number of sessions timed out.')
adn1StateServerSessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1StateServerSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adn1StateServerSessionsTotal.setDescription('The number of sessions total.')
adn1WorkerProcessRestarts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1WorkerProcessRestarts.setStatus('current')
if mibBuilder.loadTexts: adn1WorkerProcessRestarts.setDescription('Number of times a worker process has restarted on the machine.')
adn1WorkerProcessesRunning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 116, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn1WorkerProcessesRunning.setStatus('current')
if mibBuilder.loadTexts: adn1WorkerProcessesRunning.setDescription('Number of worker processes running on the machine.')
aspDotNETApplicationsV1Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117), )
if mibBuilder.loadTexts: aspDotNETApplicationsV1Table.setStatus('current')
if mibBuilder.loadTexts: aspDotNETApplicationsV1Table.setDescription("A table containing performance information for instances of 'ASP.NET Apps v1.1.4322' objects.")
aspDotNETApplicationsV1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1), ).setIndexNames((0, "INFORMANT-ADV", "adnAppl1Instance"))
if mibBuilder.loadTexts: aspDotNETApplicationsV1Entry.setStatus('current')
if mibBuilder.loadTexts: aspDotNETApplicationsV1Entry.setDescription("Performance information for one particular instance of 'ASP.NET Apps v1.1.4322' object.")
adnAppl1Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1Instance.setStatus('current')
if mibBuilder.loadTexts: adnAppl1Instance.setDescription('Instance name.')
adnAppl1AnonymousRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1AnonymousRequests.setStatus('current')
if mibBuilder.loadTexts: adnAppl1AnonymousRequests.setDescription('Number of requests utilizing anonymous authentication.')
adnAppl1AnonymousRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1AnonymousRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl1AnonymousRequestsPerSec.setDescription('Number of Authentication Anonymous Requests/Sec')
adnAppl1CacheAPIEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheAPIEntries.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheAPIEntries.setDescription('Total number of entries within the cache added by the user.')
adnAppl1CacheAPIHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheAPIHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheAPIHitRatio.setDescription('Ratio of hits called from user code.')
adnAppl1CacheAPIHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheAPIHits.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheAPIHits.setDescription('Number of cache hits from user code.')
adnAppl1CacheAPIMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheAPIMisses.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheAPIMisses.setDescription('Number of cache misses called from user code.')
adnAppl1CacheAPITurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheAPITurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheAPITurnoverRate.setDescription('Number of additions and removals to the API cache per second.')
adnAppl1CacheTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheTotalEntries.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheTotalEntries.setDescription('Total number of entries within the cache (both internal and user added)')
adnAppl1CacheTotalHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheTotalHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheTotalHitRatio.setDescription('Ratio of hits from all cache calls.')
adnAppl1CacheTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheTotalHits.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheTotalHits.setDescription('Total number of hits from the cache.')
adnAppl1CacheTotalMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheTotalMisses.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheTotalMisses.setDescription('Total number of cache misses.')
adnAppl1CacheTotalTurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CacheTotalTurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CacheTotalTurnoverRate.setDescription('Number of additions and removals to the total cache per second.')
adnAppl1CompilationsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1CompilationsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1CompilationsTotal.setDescription('Number of .asax, .ascx, .ashx, .asmx, or .aspx source files dynamically compiled.')
adnAppl1DebuggingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1DebuggingRequests.setStatus('current')
if mibBuilder.loadTexts: adnAppl1DebuggingRequests.setDescription('Number of debugging requests processed.')
adnAppl1ErrorsDuringCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorsDuringCompilation.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorsDuringCompilation.setDescription('Number of errors that have occurred during compilation.')
adnAppl1ErrorsDuringExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorsDuringExecution.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorsDuringExecution.setDescription('Number of errors that have occurred during the processing of a request.')
adnAppl1ErrorDuringPreprocessing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorDuringPreprocessing.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorDuringPreprocessing.setDescription('Number of errors that have occurred during parsing and configuration.')
adnAppl1ErrorsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorsTotal.setDescription('Total number of errors occurred.')
adnAppl1ErrorsTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorsTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorsTotalPerSec.setDescription('Rate of errors occurred.')
adnAppl1ErrorUnhandledDuringExec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorUnhandledDuringExec.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorUnhandledDuringExec.setDescription('Number of errors not handled by user code, but by the default error handler.')
adnAppl1ErrorUnhandledExecPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1ErrorUnhandledExecPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl1ErrorUnhandledExecPerSec.setDescription('Rate of unhandled errors.')
adnAppl1OutputCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1OutputCacheEntries.setStatus('current')
if mibBuilder.loadTexts: adnAppl1OutputCacheEntries.setDescription('Current number of entries in the output cache.')
adnAppl1OutputCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1OutputCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnAppl1OutputCacheHitRatio.setDescription('Ratio of hits to requests for output cacheable requests.')
adnAppl1OutputCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1OutputCacheHits.setStatus('current')
if mibBuilder.loadTexts: adnAppl1OutputCacheHits.setDescription('Total number of ouput cacheable requests served from the output cache.')
adnAppl1OutputCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1OutputCacheMisses.setStatus('current')
if mibBuilder.loadTexts: adnAppl1OutputCacheMisses.setDescription('Total number of ouput cacheable requests not served from the output cache.')
adnAppl1OutputCacheTurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1OutputCacheTurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnAppl1OutputCacheTurnoverRate.setDescription('Number of additions and removals to the output cache per second.')
adnAppl1PipelineInstanceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1PipelineInstanceCount.setStatus('current')
if mibBuilder.loadTexts: adnAppl1PipelineInstanceCount.setDescription('Number of active pipeline instances.')
adnAppl1RequestBytesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestBytesInTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestBytesInTotal.setDescription('The total size, in bytes, of all requests.')
adnAppl1RequestBytesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestBytesOutTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestBytesOutTotal.setDescription('The total size, in bytes, of responses sent to a client. This does not include standard HTTP response headers.')
adnAppl1RequestsExecuting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsExecuting.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsExecuting.setDescription('The number of requests currently executing.')
adnAppl1RequestsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsFailed.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsFailed.setDescription('Total number of failed requests.')
adnAppl1RequestsInApplQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsInApplQueue.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsInApplQueue.setDescription('The number of requests in the application request queue.')
adnAppl1RequestsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsNotAuthorized.setDescription('Number of requests failed due to unauthorized access.')
adnAppl1RequestsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsNotFound.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsNotFound.setDescription('The number of requests for resources that were not found.')
adnAppl1RequestsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsSucceeded.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsSucceeded.setDescription('The number of requests that executed successfully.')
adnAppl1RequestsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsTimedOut.setDescription('The number of requests that timed out.')
adnAppl1RequestsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsTotal.setDescription('The total number of requests since the application was started.')
adnAppl1RequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1RequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl1RequestsPerSec.setDescription('The number of requests executed per second.')
adnAppl1SessionSQLSvrConnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1SessionSQLSvrConnTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1SessionSQLSvrConnTotal.setDescription('The total number of connections to the SQL Server used by session state.')
adnAppl1SessionStateSvrConnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1SessionStateSvrConnTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1SessionStateSvrConnTotal.setDescription('The total number of connections to the State Server used by session state.')
adnAppl1SessionsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1SessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adnAppl1SessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adnAppl1SessionsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1SessionsActive.setStatus('current')
if mibBuilder.loadTexts: adnAppl1SessionsActive.setDescription('The current number of sessions currently active.')
adnAppl1SessionsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1SessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnAppl1SessionsTimedOut.setDescription('The number of sessions timed out.')
adnAppl1SessionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1SessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1SessionsTotal.setDescription('Total number of sessions since the application was started.')
adnAppl1TransactionsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1TransactionsAborted.setStatus('current')
if mibBuilder.loadTexts: adnAppl1TransactionsAborted.setDescription('The number of transactions aborted.')
adnAppl1TransactionsCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1TransactionsCommitted.setStatus('current')
if mibBuilder.loadTexts: adnAppl1TransactionsCommitted.setDescription('The number of transactions committed.')
adnAppl1TransactionsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1TransactionsPending.setStatus('current')
if mibBuilder.loadTexts: adnAppl1TransactionsPending.setDescription('Number of transactions in progress.')
adnAppl1TransactionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1TransactionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl1TransactionsTotal.setDescription('The total number of transactions since the application was started.')
adnAppl1TransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 117, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl1TransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl1TransactionsPerSec.setDescription('Transactions started per second.')
aspDotNETv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118))
adn2ApplicationRestarts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2ApplicationRestarts.setStatus('current')
if mibBuilder.loadTexts: adn2ApplicationRestarts.setDescription("Number of times the application has been restarted during the web server's lifetime.")
adn2ApplicationsRunning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2ApplicationsRunning.setStatus('current')
if mibBuilder.loadTexts: adn2ApplicationsRunning.setDescription('Number of currently running web applications.')
adn2AuditFailureEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2AuditFailureEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adn2AuditFailureEventsRaised.setDescription('Number of audit failures in the application since it was started.')
adn2AuditSuccessEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2AuditSuccessEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adn2AuditSuccessEventsRaised.setDescription('Number of audit successes in the application since it was started.')
adn2ErrorEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2ErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adn2ErrorEventsRaised.setDescription('Number of error events raised since the application was started.')
adn2InfraErrorEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2InfraErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adn2InfraErrorEventsRaised.setDescription('Number of HTTP error events raised since the application was started.')
adn2RequestErrorEventsRaised = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adn2RequestErrorEventsRaised.setDescription('Number of runtime error events raised since the application was started.')
adn2RequestExecutionTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestExecutionTime.setStatus('current')
if mibBuilder.loadTexts: adn2RequestExecutionTime.setDescription('The number of milliseconds that it took to execute the most recent request.')
adn2RequestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestWaitTime.setStatus('current')
if mibBuilder.loadTexts: adn2RequestWaitTime.setDescription('The number of milliseconds the most recent request was waiting in the queue.')
adn2RequestsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestsCurrent.setStatus('current')
if mibBuilder.loadTexts: adn2RequestsCurrent.setDescription('The current number of requests, including those that are queued, currently executing, or waiting to be written to the client. Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.')
adn2RequestsDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestsDisconnected.setStatus('current')
if mibBuilder.loadTexts: adn2RequestsDisconnected.setDescription('The number of requests disconnected due to communication errors or user terminated.')
adn2RequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestsQueued.setStatus('current')
if mibBuilder.loadTexts: adn2RequestsQueued.setDescription('The number of requests waiting to be processed.')
adn2RequestsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2RequestsRejected.setStatus('current')
if mibBuilder.loadTexts: adn2RequestsRejected.setDescription('The number of requests rejected because the request queue was full.')
adn2StateServerSessionsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2StateServerSessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adn2StateServerSessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adn2StateServerSessionsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2StateServerSessionsActive.setStatus('current')
if mibBuilder.loadTexts: adn2StateServerSessionsActive.setDescription('The current number of sessions currently active.')
adn2StateServerSessionsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2StateServerSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adn2StateServerSessionsTimedOut.setDescription('The number of sessions timed out.')
adn2StateServerSessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2StateServerSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adn2StateServerSessionsTotal.setDescription('The number of sessions total.')
adn2WorkerProcessRestarts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2WorkerProcessRestarts.setStatus('current')
if mibBuilder.loadTexts: adn2WorkerProcessRestarts.setDescription('Number of times a worker process has restarted on the machine.')
adn2WorkerProcessesRunning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 118, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adn2WorkerProcessesRunning.setStatus('current')
if mibBuilder.loadTexts: adn2WorkerProcessesRunning.setDescription('Number of worker processes running on the machine.')
aspDotNETApplicationsV2Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119), )
if mibBuilder.loadTexts: aspDotNETApplicationsV2Table.setStatus('current')
if mibBuilder.loadTexts: aspDotNETApplicationsV2Table.setDescription("A table containing performance information for instances of 'ASP.NET Apps v2.0.50727' objects.")
aspDotNETApplicationsV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1), ).setIndexNames((0, "INFORMANT-ADV", "adnAppl2Instance"))
if mibBuilder.loadTexts: aspDotNETApplicationsV2Entry.setStatus('current')
if mibBuilder.loadTexts: aspDotNETApplicationsV2Entry.setDescription("Performance information for one particular instance of 'ASP.NET Apps v2.0.50727' object.")
adnAppl2Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2Instance.setStatus('current')
if mibBuilder.loadTexts: adnAppl2Instance.setDescription('Instance name.')
adnAppl2AnonymousRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2AnonymousRequests.setStatus('current')
if mibBuilder.loadTexts: adnAppl2AnonymousRequests.setDescription('Number of requests utilizing anonymous authentication.')
adnAppl2AnonymousRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2AnonymousRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2AnonymousRequestsPerSec.setDescription('Number of Authentication Anonymous Requests/Sec')
adnAppl2ApplLifetimeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ApplLifetimeEvents.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ApplLifetimeEvents.setDescription('Number of application events raised since the application was started.')
adnAppl2ApplLifetimeEventsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ApplLifetimeEventsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ApplLifetimeEventsPerSec.setDescription('Number of application events raised per second.')
adnAppl2AuditFailureEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2AuditFailureEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2AuditFailureEventsRaised.setDescription('Number of audit failures in the application since it was started.')
adnAppl2AuditSuccessEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2AuditSuccessEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2AuditSuccessEventsRaised.setDescription('Number of audit successes in the application since it was started.')
adnAppl2CachePctMachMemLimUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CachePctMachMemLimUsed.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CachePctMachMemLimUsed.setDescription('The amount of physical memory used by the machine divided by the physical memory limit for the cache, as a percentage. When this reaches 100%, half of the cache entries will be forcibly removed. The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.')
adnAppl2CachePctProcMemLimUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CachePctProcMemLimUsed.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CachePctProcMemLimUsed.setDescription('The value of private bytes for the worker process divided by the private bytes memory limit for the cache, as a percentage. When this reaches 100%, half of the cache entries will be forcibly removed. The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.')
adnAppl2CacheAPIEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheAPIEntries.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheAPIEntries.setDescription('Total number of entries within the cache added by the user.')
adnAppl2CacheAPIHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheAPIHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheAPIHitRatio.setDescription('Ratio of hits called from user code.')
adnAppl2CacheAPIHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheAPIHits.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheAPIHits.setDescription('Number of cache hits from user code.')
adnAppl2CacheAPIMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheAPIMisses.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheAPIMisses.setDescription('Number of cache misses called from user code.')
adnAppl2CacheAPITrims = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheAPITrims.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheAPITrims.setDescription('Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache using one of the public cache APIs.')
adnAppl2CacheAPITurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheAPITurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheAPITurnoverRate.setDescription('Number of additions and removals to the API cache per second.')
adnAppl2CacheTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheTotalEntries.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheTotalEntries.setDescription('Total number of entries within the cache (both internal and user added)')
adnAppl2CacheTotalHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheTotalHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheTotalHitRatio.setDescription('Ratio of hits from all cache calls.')
adnAppl2CacheTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheTotalHits.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheTotalHits.setDescription('Total number of hits from the cache.')
adnAppl2CacheTotalMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheTotalMisses.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheTotalMisses.setDescription('Total number of cache misses.')
adnAppl2CacheTotalTrims = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheTotalTrims.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheTotalTrims.setDescription('Total number of entries forcibly removed from the cache due to memory pressure.')
adnAppl2CacheTotalTurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CacheTotalTurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CacheTotalTurnoverRate.setDescription('Number of additions and removals to the total cache per second.')
adnAppl2CompilationsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2CompilationsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2CompilationsTotal.setDescription('Number of .asax, .ascx, .ashx, .asmx, or .aspx source files dynamically compiled.')
adnAppl2DebuggingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2DebuggingRequests.setStatus('current')
if mibBuilder.loadTexts: adnAppl2DebuggingRequests.setDescription('Number of debugging requests processed.')
adnAppl2ErrorEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorEventsRaised.setDescription('Number of error events raised since the application was started.')
adnAppl2ErrorEventsRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorEventsRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorEventsRaisedPerSec.setDescription('Number of error events per second.')
adnAppl2ErrorsDuringCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorsDuringCompilation.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorsDuringCompilation.setDescription('Number of errors that have occurred during compilation.')
adnAppl2ErrorsDuringExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorsDuringExecution.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorsDuringExecution.setDescription('Number of errors that have occurred during the processing of a request.')
adnAppl2ErrorDuringPreprocessing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorDuringPreprocessing.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorDuringPreprocessing.setDescription('Number of errors that have occurred during parsing and configuration.')
adnAppl2ErrorsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorsTotal.setDescription('Total number of errors occurred.')
adnAppl2ErrorsTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorsTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorsTotalPerSec.setDescription('Rate of errors occurred.')
adnAppl2ErrorUnhandledDuringExec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorUnhandledDuringExec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorUnhandledDuringExec.setDescription('Number of errors not handled by user code, but by the default error handler.')
adnAppl2ErrorUnhandledExecPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ErrorUnhandledExecPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ErrorUnhandledExecPerSec.setDescription('Rate of unhandled errors.')
adnAppl2EventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2EventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2EventsRaised.setDescription('Total number of instrumentation events raised since the application was started.')
adnAppl2EventsRaisedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2EventsRaisedPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2EventsRaisedPerSec.setDescription('Total number of instrumentation events per second.')
adnAppl2FormsAuthenticationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2FormsAuthenticationFail.setStatus('current')
if mibBuilder.loadTexts: adnAppl2FormsAuthenticationFail.setDescription('Number of failed forms authentication ticket validations since the application was started.')
adnAppl2FormsAuthenticationSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2FormsAuthenticationSucc.setStatus('current')
if mibBuilder.loadTexts: adnAppl2FormsAuthenticationSucc.setDescription('Number of successful forms authentication ticket validations since the application was started.')
adnAppl2InfraErrorEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2InfraErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2InfraErrorEventsRaised.setDescription('Number of HTTP error events raised since the application was started.')
adnAppl2InfraErrEventRaisePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2InfraErrEventRaisePerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2InfraErrEventRaisePerSec.setDescription('Number of HTTP error events raised per second.')
adnAppl2MembershipAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2MembershipAuthFailure.setStatus('current')
if mibBuilder.loadTexts: adnAppl2MembershipAuthFailure.setDescription('Number of failed membership credential validations since the application was started.')
adnAppl2MembershipAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2MembershipAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: adnAppl2MembershipAuthSuccess.setDescription('Number of successful membership credential validations since the application was started.')
adnAppl2OutputCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2OutputCacheEntries.setStatus('current')
if mibBuilder.loadTexts: adnAppl2OutputCacheEntries.setDescription('Current number of entries in the output cache.')
adnAppl2OutputCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2OutputCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: adnAppl2OutputCacheHitRatio.setDescription('Ratio of hits to requests for output cacheable requests.')
adnAppl2OutputCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2OutputCacheHits.setStatus('current')
if mibBuilder.loadTexts: adnAppl2OutputCacheHits.setDescription('Total number of output cacheable requests served from the output cache.')
adnAppl2OutputCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2OutputCacheMisses.setStatus('current')
if mibBuilder.loadTexts: adnAppl2OutputCacheMisses.setDescription('Total number of output cacheable requests not served from the output cache.')
adnAppl2OutputCacheTrims = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2OutputCacheTrims.setStatus('current')
if mibBuilder.loadTexts: adnAppl2OutputCacheTrims.setDescription('Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache by the output cache feature.')
adnAppl2OutputCacheTurnoverRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2OutputCacheTurnoverRate.setStatus('current')
if mibBuilder.loadTexts: adnAppl2OutputCacheTurnoverRate.setDescription('Number of additions and removals to the output cache per second.')
adnAppl2PipelineInstanceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2PipelineInstanceCount.setStatus('current')
if mibBuilder.loadTexts: adnAppl2PipelineInstanceCount.setDescription('Number of active pipeline instances.')
adnAppl2RequestBytesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestBytesInTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestBytesInTotal.setDescription('The total size, in bytes, of all requests.')
adnAppl2RequestBytesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestBytesOutTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestBytesOutTotal.setDescription('The total size, in bytes, of responses sent to a client. This does not include standard HTTP response headers.')
adnAppl2RequestErrorEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestErrorEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestErrorEventsRaised.setDescription('Number of runtime error events raised since the application was started.')
adnAppl2ReqErrorEventRaisePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ReqErrorEventRaisePerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ReqErrorEventRaisePerSec.setDescription('Number of runtime error events per second.')
adnAppl2RequestEventsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestEventsRaised.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestEventsRaised.setDescription('Number of request events raised since the application was started')
adnAppl2RequestEventsRaisePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestEventsRaisePerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestEventsRaisePerSec.setDescription('Number of request events raised per second.')
adnAppl2RequestExecutionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestExecutionTime.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestExecutionTime.setDescription('The number of milliseconds that it took to execute the most recent request.')
adnAppl2RequestWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestWaitTime.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestWaitTime.setDescription('The number of milliseconds the most recent request was waiting in the queue.')
adnAppl2RequestsDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsDisconnected.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsDisconnected.setDescription('The number of requests disconnected due to communication errors or user terminated.')
adnAppl2RequestsExecuting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsExecuting.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsExecuting.setDescription('The number of requests currently executing.')
adnAppl2RequestsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsFailed.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsFailed.setDescription('Total number of failed requests.')
adnAppl2RequestsInApplQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsInApplQueue.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsInApplQueue.setDescription('The number of requests in the application request queue.')
adnAppl2RequestsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsNotAuthorized.setDescription('Number of requests failed due to unauthorized access.')
adnAppl2RequestsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsNotFound.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsNotFound.setDescription('The number of requests for resources that were not found.')
adnAppl2RequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsRejected.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsRejected.setDescription('The number of requests rejected because the application request queue was full.')
adnAppl2RequestsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsSucceeded.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsSucceeded.setDescription('The number of requests that executed successfully.')
adnAppl2RequestsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsTimedOut.setDescription('The number of requests that timed out.')
adnAppl2RequestsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsTotal.setDescription('The total number of requests since the application was started.')
adnAppl2RequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2RequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2RequestsPerSec.setDescription('The number of requests executed per second.')
adnAppl2SessionSQLSvrConnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2SessionSQLSvrConnTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2SessionSQLSvrConnTotal.setDescription('The total number of connections to the SQL Server used by session state.')
adnAppl2SessionStateSvrConnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2SessionStateSvrConnTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2SessionStateSvrConnTotal.setDescription('The total number of connections to the State Server used by session state.')
adnAppl2SessionsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2SessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adnAppl2SessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adnAppl2SessionsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2SessionsActive.setStatus('current')
if mibBuilder.loadTexts: adnAppl2SessionsActive.setDescription('The current number of sessions currently active.')
adnAppl2SessionsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2SessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnAppl2SessionsTimedOut.setDescription('The number of sessions timed out.')
adnAppl2SessionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2SessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2SessionsTotal.setDescription('Total number of sessions since the application was started.')
adnAppl2TransactionsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2TransactionsAborted.setStatus('current')
if mibBuilder.loadTexts: adnAppl2TransactionsAborted.setDescription('The number of transactions aborted.')
adnAppl2TransactionsCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2TransactionsCommitted.setStatus('current')
if mibBuilder.loadTexts: adnAppl2TransactionsCommitted.setDescription('The number of transactions committed.')
adnAppl2TransactionsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2TransactionsPending.setStatus('current')
if mibBuilder.loadTexts: adnAppl2TransactionsPending.setDescription('Number of transactions in progress.')
adnAppl2TransactionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2TransactionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnAppl2TransactionsTotal.setDescription('The total number of transactions since the application was started.')
adnAppl2TransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2TransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: adnAppl2TransactionsPerSec.setDescription('Transactions started per second.')
adnAppl2ViewstateMACValidFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 119, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnAppl2ViewstateMACValidFailure.setStatus('current')
if mibBuilder.loadTexts: adnAppl2ViewstateMACValidFailure.setDescription('Number of viewstate MAC validations that failed since the application was started.')
aspDotNETStateService = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 120))
adnssSessionsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 120, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnssSessionsAbandoned.setStatus('current')
if mibBuilder.loadTexts: adnssSessionsAbandoned.setDescription('The number of sessions that have been explicitly abandoned.')
adnssSessionsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 120, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnssSessionsActive.setStatus('current')
if mibBuilder.loadTexts: adnssSessionsActive.setDescription('The current number of sessions currently active.')
adnssSessionsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 120, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnssSessionsTimedOut.setStatus('current')
if mibBuilder.loadTexts: adnssSessionsTimedOut.setDescription('The number of sessions timed out.')
adnssSessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 120, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adnssSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: adnssSessionsTotal.setDescription('The number of sessions total.')
authorizationManagerApplTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 121), )
if mibBuilder.loadTexts: authorizationManagerApplTable.setStatus('current')
if mibBuilder.loadTexts: authorizationManagerApplTable.setDescription("A table containing performance information for instances of 'Authorization Manager Applications' objects.")
authorizationManagerApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 121, 1), ).setIndexNames((0, "INFORMANT-ADV", "amaInstance"))
if mibBuilder.loadTexts: authorizationManagerApplEntry.setStatus('current')
if mibBuilder.loadTexts: authorizationManagerApplEntry.setDescription("Performance information for one particular instance of 'Authorization Manager Applications' object.")
amaInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 121, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amaInstance.setStatus('current')
if mibBuilder.loadTexts: amaInstance.setDescription('Instance name.')
amaNumberOfScopesLoadedInMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 121, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amaNumberOfScopesLoadedInMemory.setStatus('current')
if mibBuilder.loadTexts: amaNumberOfScopesLoadedInMemory.setDescription('Shows the number of scopes that are currently loaded in memory')
amaTotalNumberOfScopes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 121, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amaTotalNumberOfScopes.setStatus('current')
if mibBuilder.loadTexts: amaTotalNumberOfScopes.setDescription('Shows the total number of scopes in the application')
certificationAuthorityTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122), )
if mibBuilder.loadTexts: certificationAuthorityTable.setStatus('current')
if mibBuilder.loadTexts: certificationAuthorityTable.setDescription("A table containing performance information for instances of 'Certification Authority' objects.")
certificationAuthorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1), ).setIndexNames((0, "INFORMANT-ADV", "caInstance"))
if mibBuilder.loadTexts: certificationAuthorityEntry.setStatus('current')
if mibBuilder.loadTexts: certificationAuthorityEntry.setDescription("Performance information for one particular instance of 'Certification Authority' object.")
caInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caInstance.setStatus('current')
if mibBuilder.loadTexts: caInstance.setDescription('Instance name.')
caFailedRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFailedRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: caFailedRequestsPerSec.setDescription('Failed certificate requests processed per second')
caIssuedRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIssuedRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: caIssuedRequestsPerSec.setDescription('Issued certificate requests processed per second')
caPendingRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caPendingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: caPendingRequestsPerSec.setDescription('Pending certificate requests processed per second')
caRequestCryptographicSignTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRequestCryptographicSignTimeMs.setStatus('current')
if mibBuilder.loadTexts: caRequestCryptographicSignTimeMs.setDescription('Time elapsed for signing operation per request')
caRequestPolicyModulePrcTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRequestPolicyModulePrcTimeMs.setStatus('current')
if mibBuilder.loadTexts: caRequestPolicyModulePrcTimeMs.setDescription('Time elapsed for policy module processing per request')
caRequestProcessingTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRequestProcessingTimeMs.setStatus('current')
if mibBuilder.loadTexts: caRequestProcessingTimeMs.setDescription('Time elapsed per request')
caRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: caRequestsPerSec.setDescription('Certificate requests processed per second')
caRetrievalProcessingTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRetrievalProcessingTimeMs.setStatus('current')
if mibBuilder.loadTexts: caRetrievalProcessingTimeMs.setDescription('Time elapsed per certificate retrieval request')
caRetrievalsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 122, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caRetrievalsPerSec.setStatus('current')
if mibBuilder.loadTexts: caRetrievalsPerSec.setDescription('Certificate retrieval requests processed per second')
certificationAuthorityConnTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 123), )
if mibBuilder.loadTexts: certificationAuthorityConnTable.setStatus('current')
if mibBuilder.loadTexts: certificationAuthorityConnTable.setDescription("A table containing performance information for instances of 'Certification Authority Connections' objects.")
certificationAuthorityConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 123, 1), ).setIndexNames((0, "INFORMANT-ADV", "cacInstance"))
if mibBuilder.loadTexts: certificationAuthorityConnEntry.setStatus('current')
if mibBuilder.loadTexts: certificationAuthorityConnEntry.setDescription("Performance information for one particular instance of 'Certification Authority Connections' object.")
cacInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 123, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacInstance.setStatus('current')
if mibBuilder.loadTexts: cacInstance.setDescription('Instance name.')
cacActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 123, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacActiveConnections.setStatus('current')
if mibBuilder.loadTexts: cacActiveConnections.setDescription('Number of active connections')
directoryServicesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124), )
if mibBuilder.loadTexts: directoryServicesTable.setStatus('current')
if mibBuilder.loadTexts: directoryServicesTable.setDescription("A table containing performance information for instances of 'DirectoryServices' objects.")
directoryServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1), ).setIndexNames((0, "INFORMANT-ADV", "dsInstance"))
if mibBuilder.loadTexts: directoryServicesEntry.setStatus('current')
if mibBuilder.loadTexts: directoryServicesEntry.setDescription("Performance information for one particular instance of 'DirectoryServices' object.")
dsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsInstance.setStatus('current')
if mibBuilder.loadTexts: dsInstance.setDescription('Instance name.')
dsABANRPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABANRPerSec.setStatus('current')
if mibBuilder.loadTexts: dsABANRPerSec.setDescription('The rate at which Address Book clients perform Ambiguous Name Resolutions operations.')
dsABBrowsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABBrowsesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsABBrowsesPerSec.setDescription('AB Browses/sec is the rate at which Address Book clients perform browse operations.')
dsABClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABClientSessions.setStatus('current')
if mibBuilder.loadTexts: dsABClientSessions.setDescription('AB Client Sessions is the number of connected Address Book client sessions.')
dsABMatchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABMatchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsABMatchesPerSec.setDescription('The rate at which Address Book clients perform find operations.')
dsABPropertyReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABPropertyReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsABPropertyReadsPerSec.setDescription('The rate at which Address Book clients perform property read operations.')
dsABProxyLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABProxyLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsABProxyLookupsPerSec.setDescription('The rate at which proxy clients perform search operations.')
dsABSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsABSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsABSearchesPerSec.setDescription('The rate at which Address Book clients perform key search operations.')
dsATQEstimatedQueueDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsATQEstimatedQueueDelay.setStatus('current')
if mibBuilder.loadTexts: dsATQEstimatedQueueDelay.setDescription('Estimated time (in milliseconds) the next request will spend in the queue prior to being serviced by the directory service.')
dsATQOutstandingQueuedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsATQOutstandingQueuedRequests.setStatus('current')
if mibBuilder.loadTexts: dsATQOutstandingQueuedRequests.setDescription('The number of requests currently queued and waiting to be serviced.')
dsATQRequestLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsATQRequestLatency.setStatus('current')
if mibBuilder.loadTexts: dsATQRequestLatency.setDescription('Average length of time (in milliseconds) to process a request, not including time spent on the queue.')
dsATQThreadsLDAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsATQThreadsLDAP.setStatus('current')
if mibBuilder.loadTexts: dsATQThreadsLDAP.setDescription('The number of threads that ATQ has currently allocated to servicing LDAP requests.')
dsATQThreadsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsATQThreadsOther.setStatus('current')
if mibBuilder.loadTexts: dsATQThreadsOther.setDescription('The number of threads that the ATQ has currently allocated to DS services other than LDAP.')
dsATQThreadsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsATQThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: dsATQThreadsTotal.setDescription('The total number of ATQ threads that are either waiting to service an incoming request, or are already servicing a request.')
dsBaseSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsBaseSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsBaseSearchesPerSec.setDescription('The number of base searches/sec')
dsDRAHighestUSNCommittedHighPart = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAHighestUSNCommittedHighPart.setStatus('current')
if mibBuilder.loadTexts: dsDRAHighestUSNCommittedHighPart.setDescription('High-order 32 bits of the highest USN Committed on the DSA.')
dsDRAHighestUSNCommittedLowPart = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAHighestUSNCommittedLowPart.setStatus('current')
if mibBuilder.loadTexts: dsDRAHighestUSNCommittedLowPart.setDescription('Low-order 32 bits of the highest USN Committed on the DSA.')
dsDRAHighestUSNIssuedHighPart = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAHighestUSNIssuedHighPart.setStatus('current')
if mibBuilder.loadTexts: dsDRAHighestUSNIssuedHighPart.setDescription('High-order 32 bits of the highest USN Issued on the DSA.')
dsDRAHighestUSNIssuedLowPart = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAHighestUSNIssuedLowPart.setStatus('current')
if mibBuilder.loadTexts: dsDRAHighestUSNIssuedLowPart.setDescription('Low-order 32 bits of the highest USN Issued on the DSA.')
dsDRAInCmpBtwSiteAftCmpSinceBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInCmpBtwSiteAftCmpSinceBoot.setStatus('current')
if mibBuilder.loadTexts: dsDRAInCmpBtwSiteAftCmpSinceBoot.setDescription('Compressed size in bytes of inbound compressed replication data (size after compression, from DSAs in other sites).')
dsDRAInCmpBtwSitesAfterCmpPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInCmpBtwSitesAfterCmpPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInCmpBtwSitesAfterCmpPerSec.setDescription('Compressed size in bytes of inbound compressed replication data (size after compression, from DSAs in other sites).')
dsDRAInCmpBtwSiteBfrCmpSinceBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInCmpBtwSiteBfrCmpSinceBoot.setStatus('current')
if mibBuilder.loadTexts: dsDRAInCmpBtwSiteBfrCmpSinceBoot.setDescription('Original size in bytes of inbound compressed replication data (size before compression, from DSAs in other sites).')
dsDRAInCmpBtwSitesBeforCmpPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInCmpBtwSitesBeforCmpPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInCmpBtwSitesBeforCmpPerSec.setDescription('Original size in bytes of inbound compressed replication data (size before compression, from DSAs in other sites).')
dsDRAInNotCmpWithinSiteSinceBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInNotCmpWithinSiteSinceBoot.setStatus('current')
if mibBuilder.loadTexts: dsDRAInNotCmpWithinSiteSinceBoot.setDescription('Number of bytes replicated in that were not compressed at the source (i.e., from DSAs in the same site).')
dsDRAInNotCmpWithinSitePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInNotCmpWithinSitePerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInNotCmpWithinSitePerSec.setDescription('Number of bytes replicated in that were not compressed at the source (i.e., from DSAs in the same site).')
dsDRAInBytesTotalSinceBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInBytesTotalSinceBoot.setStatus('current')
if mibBuilder.loadTexts: dsDRAInBytesTotalSinceBoot.setDescription('Total number of bytes replicated in. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
dsDRAInBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInBytesTotalPerSec.setDescription('Total number of bytes replicated in. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
dsDRAInFullSyncObjectsRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInFullSyncObjectsRemaining.setStatus('current')
if mibBuilder.loadTexts: dsDRAInFullSyncObjectsRemaining.setDescription('Number of objects remaining until the full sync completes (when set).')
dsDRAInLinkValueUpdRemainInPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInLinkValueUpdRemainInPkt.setStatus('current')
if mibBuilder.loadTexts: dsDRAInLinkValueUpdRemainInPkt.setDescription('The number of link value updates received in the current directory replication update packet that have not yet been applied to the local server.')
dsDRAInObjectUpdRemainInPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInObjectUpdRemainInPkt.setStatus('current')
if mibBuilder.loadTexts: dsDRAInObjectUpdRemainInPkt.setDescription('The number of object updates received in the current directory replication update packet that have not yet been applied to the local server.')
dsDRAInObjectsAppliedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInObjectsAppliedPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInObjectsAppliedPerSec.setDescription('The rate at which replication updates received from replication partners are applied by the local directory service. This count excludes changes that are received but not applied (e.g., when the change is already present). This indicates how much replication update activity is occuring on the server as a result of changes generated on other servers.')
dsDRAInObjectsFilteredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInObjectsFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInObjectsFilteredPerSec.setDescription('Number of objects received from inbound replication partners that contained no updates that needed to be applied.')
dsDRAInObjectsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInObjectsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInObjectsPerSec.setDescription('No of objects received from neighbors through inbound replication.')
dsDRAInPropertiesAppliedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInPropertiesAppliedPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInPropertiesAppliedPerSec.setDescription('No of properties that are updated due to incoming property winning the reconciliation logic.')
dsDRAInPropertiesFilteredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInPropertiesFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInPropertiesFilteredPerSec.setDescription('No of property changes that are received during the replication that we have already seen.')
dsDRAInPropertiesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInPropertiesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInPropertiesTotalPerSec.setDescription('Total number of object properties received from inbound replication partners.')
dsDRAInTotalUpdRemainInPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInTotalUpdRemainInPkt.setStatus('current')
if mibBuilder.loadTexts: dsDRAInTotalUpdRemainInPkt.setDescription('The number of total (link values + object) updates received in the current directory replication update packet that have not yet been applied to the local server.')
dsDRAInValuesDNsOnlyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInValuesDNsOnlyPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInValuesDNsOnlyPerSec.setDescription('Number of object property values received from inbound replication partners that are Distinguished Names; i.e., that reference other objects. DN-values, such as group or distribution list memberships, are generally more expensive to apply than other kinds of values.')
dsDRAInValuesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAInValuesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAInValuesTotalPerSec.setDescription('Total number of object property values received from inbound replication partners. Each inbound object has one or more properties, and each property has zero or more values. Zero values indicates property removal.')
dsDRAOutCmpBtwSitesAftCmpSinceBt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesAftCmpSinceBt.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesAftCmpSinceBt.setDescription('Compressed size in bytes of outbound compressed replication data (size after compression, from DSAs in other sites).')
dsDRAOutCmpBtwSitesAftCmpPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesAftCmpPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesAftCmpPerSec.setDescription('Compressed size in bytes of outbound compressed replication data (size after compression, from DSAs in other sites).')
dsDRAOutCmpBtwSitesBfrCmpSinceBt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesBfrCmpSinceBt.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesBfrCmpSinceBt.setDescription('Original size in bytes of outbound compressed replication data (size before compression, from DSAs in other sites).')
dsDRAOutCmpBtwSitesBfrCmpPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesBfrCmpPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutCmpBtwSitesBfrCmpPerSec.setDescription('Original size in bytes of outbound compressed replication data (size before compression, from DSAs in other sites).')
dsDRAOutNotCmpWithinSiteSinceBt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutNotCmpWithinSiteSinceBt.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutNotCmpWithinSiteSinceBt.setDescription('Number of bytes replicated out that were not compressed (i.e., from DSAs in the same site).')
dsDRAOutNotCmpWithinSitePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutNotCmpWithinSitePerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutNotCmpWithinSitePerSec.setDescription('Number of bytes replicated out that were not compressed (i.e., from DSAs in the same site).')
dsDRAOutboundBytesTotalSinceBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutboundBytesTotalSinceBoot.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutboundBytesTotalSinceBoot.setDescription('Total number of bytes replicated out. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
dsDRAOutboundBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutboundBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutboundBytesTotalPerSec.setDescription('Total number of bytes replicated out. Sum of the number of uncompressed bytes (never compressed) and the number of compressed bytes (after compression).')
dsDRAOutObjectsFilteredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutObjectsFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutObjectsFilteredPerSec.setDescription('Number of objects looked at by outbound replication that were determined to have no updates that the outbound partner did not already have.')
dsDRAOutboundObjectsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutboundObjectsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutboundObjectsPerSec.setDescription('No of objects replicated out.')
dsDRAOutboundPropertiesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutboundPropertiesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutboundPropertiesPerSec.setDescription('No of properties replicated out.')
dsDRAOutboundValuesDNsOnlyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutboundValuesDNsOnlyPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutboundValuesDNsOnlyPerSec.setDescription('Number of object property values containing Distinguished Names sent to outbound replication partners. DN-values, such as group or distribution list memberships, are generally more expensive to read than other kinds of values.')
dsDRAOutboundValuesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAOutboundValuesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDRAOutboundValuesTotalPerSec.setDescription('Number of object property values sent to outbound replication partners.')
dsDRAPendingReplicationOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAPendingReplicationOperation.setStatus('current')
if mibBuilder.loadTexts: dsDRAPendingReplicationOperation.setDescription('The total number of replication operations on the directory that are queued for this server but not yet performed.')
dsDRAPendingReplicationSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAPendingReplicationSync.setStatus('current')
if mibBuilder.loadTexts: dsDRAPendingReplicationSync.setDescription('DRA Pending Replication Synchronizations is the number of directory synchronizations that are queued for this server but not yet processed.')
dsDRASyncFailsOnSchemaMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRASyncFailsOnSchemaMismatch.setStatus('current')
if mibBuilder.loadTexts: dsDRASyncFailsOnSchemaMismatch.setDescription('No of sync requests made to the neighbors that failed because their schema are out of sync.')
dsDRASyncRequestsMade = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRASyncRequestsMade.setStatus('current')
if mibBuilder.loadTexts: dsDRASyncRequestsMade.setDescription('No of sync requests made to the neighbors.')
dsDRASyncRequestsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRASyncRequestsSuccessful.setStatus('current')
if mibBuilder.loadTexts: dsDRASyncRequestsSuccessful.setDescription('No of sync requests made to the neighbors that successfully returned.')
dsDRAThreadsGettingNCChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAThreadsGettingNCChanges.setStatus('current')
if mibBuilder.loadTexts: dsDRAThreadsGettingNCChanges.setDescription('The number of threads on the server which are currently attempting to acquire changes from another server.')
dsDRAThreadsNCChgHoldSemaphore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDRAThreadsNCChgHoldSemaphore.setStatus('current')
if mibBuilder.loadTexts: dsDRAThreadsNCChgHoldSemaphore.setDescription('The number of threads on the server which are currently attempting to acquire changes from another server and hold a semaphore required to get these changes.')
dsDSPercentReadsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsOther.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsOther.setDescription('% of directory reads not coming from SAM/DRA/LDAP/LSA/XDS/KCC/NSPI.')
dsDSPercentReadsFromDRA = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsFromDRA.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsFromDRA.setDescription('% of directory reads coming from DRA.')
dsDSPercentReadsFromKCC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsFromKCC.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsFromKCC.setDescription('% of directory reads coming from KCC.')
dsDSPercentReadsFromLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsFromLSA.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsFromLSA.setDescription('% of directory reads coming from LSA.')
dsDSPercentReadsFromNSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsFromNSPI.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsFromNSPI.setDescription('% of directory reads coming from NSPI.')
dsDSPercentReadsFromNTDSAPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsFromNTDSAPI.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsFromNTDSAPI.setDescription('% of directory reads coming from NTDAPI calls.')
dsDSPercentReadsFromSAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentReadsFromSAM.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentReadsFromSAM.setDescription('% of directory reads coming from SAM.')
dsDSPercentSearchesOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesOther.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesOther.setDescription('% of directory searches not coming from SAM/DRA/LDAP/LSA/XDS/KCC/NSPI.')
dsDSPercentSearchesFromDRA = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromDRA.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromDRA.setDescription('% of directory searches coming from DRA.')
dsDSPercentSearchesFromKCC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromKCC.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromKCC.setDescription('% of directory searches coming from KCC.')
dsDSPercentSearchesFromLDAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromLDAP.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromLDAP.setDescription('% of directory searches coming from LDAP.')
dsDSPercentSearchesFromLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromLSA.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromLSA.setDescription('% of directory searches coming from LSA.')
dsDSPercentSearchesFromNSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromNSPI.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromNSPI.setDescription('% of directory searches coming from NSPI.')
dsDSPercentSearchesFromNTDSAPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromNTDSAPI.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromNTDSAPI.setDescription('% of directory searches coming from NTDAPI calls.')
dsDSPercentSearchesFromSAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentSearchesFromSAM.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentSearchesFromSAM.setDescription('% of directory searches coming from SAM.')
dsDSPercentWritesOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesOther.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesOther.setDescription('% of directory writes not coming from SAM/DRA/LDAP/LSA/XDS/KCC/NSPI.')
dsDSPercentWritesFromDRA = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromDRA.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromDRA.setDescription('% of directory writes coming from DRA.')
dsDSPercentWritesFromKCC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromKCC.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromKCC.setDescription('% of directory writes coming from KCC.')
dsDSPercentWritesFromLDAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromLDAP.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromLDAP.setDescription('% of directory writes coming from LDAP.')
dsDSPercentWritesFromLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromLSA.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromLSA.setDescription('% of directory writes coming from LSA.')
dsDSPercentWritesFromNSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromNSPI.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromNSPI.setDescription('% of directory writes coming from NSPI.')
dsDSPercentWritesFromNTDSAPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromNTDSAPI.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromNTDSAPI.setDescription('% of directory writes coming from NTDSAPI calls.')
dsDSPercentWritesFromSAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSPercentWritesFromSAM.setStatus('current')
if mibBuilder.loadTexts: dsDSPercentWritesFromSAM.setDescription('% of directory writes coming from SAM.')
dsDSClientBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSClientBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSClientBindsPerSec.setDescription('Number of ntdsapi.dll binds per second serviced by this DC.')
dsDSClientNameTranslationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSClientNameTranslationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSClientNameTranslationsPerSec.setDescription('Number of ntdsapi.dll name translations per second serviced by this DC.')
dsDSDirectoryReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSDirectoryReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSDirectoryReadsPerSec.setDescription('Number of directory reads per second.')
dsDSDirectorySearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSDirectorySearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSDirectorySearchesPerSec.setDescription('Number of directory searches per second.')
dsDSDirectoryWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSDirectoryWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSDirectoryWritesPerSec.setDescription('Number of directory writes per second.')
dsDSMonitorListSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSMonitorListSize.setStatus('current')
if mibBuilder.loadTexts: dsDSMonitorListSize.setDescription('The number of requests to be notified when objects are updated that are currently registered with this DSA.')
dsDSNameCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSNameCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: dsDSNameCacheHitRate.setDescription("The percentage of directory object name component look ups that are satisfied out of the DSA's name cache.")
dsDSNotifyQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSNotifyQueueSize.setStatus('current')
if mibBuilder.loadTexts: dsDSNotifyQueueSize.setDescription('The number of pending update notifications that have been queued, but not yet transmitted to clients.')
dsDSSearchSubOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSSearchSubOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSSearchSubOperationsPerSec.setDescription('Number of search suboperations per second. One search operation is made up of many sub operations. A sub operation roughly corresponds to an object the search causes the DS to consider.')
dsDSSecurityDescriptorPropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSSecurityDescriptorPropEvents.setStatus('current')
if mibBuilder.loadTexts: dsDSSecurityDescriptorPropEvents.setDescription('DS Security Descriptor Propagations Events is the number of Security Descriptor Propagation Events that are queued but not yet processed.')
dsDSSecurityDescPropAvgExclTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSSecurityDescPropAvgExclTime.setStatus('current')
if mibBuilder.loadTexts: dsDSSecurityDescPropAvgExclTime.setDescription('Average length of time the Security Descriptor propagator spends waiting for exclusive access to Data Base elements during a Security Descriptor Propagation sub-operation.')
dsDSSecurityDescPropRuntimeQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSSecurityDescPropRuntimeQueue.setStatus('current')
if mibBuilder.loadTexts: dsDSSecurityDescPropRuntimeQueue.setDescription('Number of objects remaining to examine while processing the current DS Security Descriptor Propagator Event.')
dsDSSecurityDescSubOpsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSSecurityDescSubOpsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSSecurityDescSubOpsPerSec.setDescription('Number of Security Descriptor Propagation suboperations per second. One Security Descriptor Propagation operation is made up of many sub operations. A sub operation roughly corresponds to an object the propagation causes the propagator to examine.')
dsDSServerBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSServerBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSServerBindsPerSec.setDescription('Number of DC-to-DC binds per second serviced by this DC.')
dsDSServerNameTranslationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSServerNameTranslationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDSServerNameTranslationsPerSec.setDescription('Number of DC-to-DC name translations per second serviced by this DC.')
dsDSThreadsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDSThreadsInUse.setStatus('current')
if mibBuilder.loadTexts: dsDSThreadsInUse.setDescription('DS Threads in Use is the current number of threads in use by the directory service (different than the number of threads in the directory service process). Threads in Use is the number of threads currently servicing client API calls and can be used to indicate whether additional processors could be of benefit.')
dsDatabaseAddsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDatabaseAddsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDatabaseAddsPerSec.setDescription('The number of database adds/sec')
dsDatabaseDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDatabaseDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDatabaseDeletesPerSec.setDescription('The number of database deletes/sec')
dsDatabaseModifysPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDatabaseModifysPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDatabaseModifysPerSec.setDescription('The number of database modifys/sec')
dsDigestBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsDigestBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsDigestBindsPerSec.setDescription('The number of digest binds/sec')
dsExternalBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 103), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsExternalBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsExternalBindsPerSec.setDescription('The number of external binds/sec')
dsFastBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsFastBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsFastBindsPerSec.setDescription('The number of fast binds/sec')
dsLDAPActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPActiveThreads.setStatus('current')
if mibBuilder.loadTexts: dsLDAPActiveThreads.setDescription('LDAP Active Threads is the current number of threads in use by the LDAP subsystem of the local direcotry service.')
dsLDAPBindTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPBindTime.setStatus('current')
if mibBuilder.loadTexts: dsLDAPBindTime.setDescription('Time (in milliseconds) taken for last successful LDAP bind.')
dsLDAPClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPClientSessions.setStatus('current')
if mibBuilder.loadTexts: dsLDAPClientSessions.setDescription('LDAP Client Sessions is the number of connected LDAP client sessions.')
dsLDAPClosedConnectionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPClosedConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPClosedConnectionsPerSec.setDescription('The number of LDAP connections that have been closed in the last second.')
dsLDAPNewConnectionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPNewConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPNewConnectionsPerSec.setDescription('The number of new LDAP connections that have arrived in the last second.')
dsLDAPNewSSLConnectionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 110), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPNewSSLConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPNewSSLConnectionsPerSec.setDescription('The number of new SSL or TLS connections that arrived in the last second.')
dsLDAPSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 111), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPSearchesPerSec.setDescription('LDAP Searches/sec is the rate at which LDAP clients perform search operations.')
dsLDAPSuccessfulBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 112), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPSuccessfulBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPSuccessfulBindsPerSec.setDescription('Number of LDAP Binds per second.')
dsLDAPUDPOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 113), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPUDPOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPUDPOperationsPerSec.setDescription('The number of UDP operations the LDAP server is processing per second.')
dsLDAPWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 114), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLDAPWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLDAPWritesPerSec.setDescription('LDAP Writes/sec is the rate at which LDAP clients perform write operations.')
dsLinkValuesCleanedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 115), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsLinkValuesCleanedPerSec.setStatus('current')
if mibBuilder.loadTexts: dsLinkValuesCleanedPerSec.setDescription('The rate at which link values that need to be cleaned are cleaned.')
dsNTLMBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 116), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsNTLMBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsNTLMBindsPerSec.setDescription('The number of NTLM binds/sec')
dsNegotiatedBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 117), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsNegotiatedBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsNegotiatedBindsPerSec.setDescription('The number of negotiated binds/sec')
dsOnelevelSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 118), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsOnelevelSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsOnelevelSearchesPerSec.setDescription('The number of onelevel searches/sec')
dsPhantomsCleanedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 119), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsPhantomsCleanedPerSec.setStatus('current')
if mibBuilder.loadTexts: dsPhantomsCleanedPerSec.setDescription('The rate at which stale phantoms are cleaned.')
dsPhantomsVisitedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 120), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsPhantomsVisitedPerSec.setStatus('current')
if mibBuilder.loadTexts: dsPhantomsVisitedPerSec.setDescription('The rate at which phantoms are visited to determine if they are stale and need to be cleaned.')
dsSAMAccountGroupEvalLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 121), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMAccountGroupEvalLatency.setStatus('current')
if mibBuilder.loadTexts: dsSAMAccountGroupEvalLatency.setDescription('The mean latency of the last 100 account and universal group evaluations performed for authentication.')
dsSAMDisplayInfoQueriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 122), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMDisplayInfoQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMDisplayInfoQueriesPerSec.setDescription('This counter displays the number of queries per second to obtain display information (netquerydisplayinformation).')
dsSAMDomainLocalGrpMemEvalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 123), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMDomainLocalGrpMemEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMDomainLocalGrpMemEvalPerSec.setDescription('This counter displays the number of domain local group memberships evaluations per second at authentication time.')
dsSAMEnumerationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 124), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMEnumerationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMEnumerationsPerSec.setDescription('This counter displays the number of net user, net group, and net local function enumerations per second.')
dsSAMGCEvaluationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 125), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMGCEvaluationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMGCEvaluationsPerSec.setDescription('This counter displays the number of universal group membership evaluations per second on a global catalog domain controller from non-global catalog domain controllers.')
dsSAMGlobalGroupMembEvalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 126), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMGlobalGroupMembEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMGlobalGroupMembEvalPerSec.setDescription('This counter displays the number of domain global group membership evaluations per second at authentication time.')
dsSAMMachineCreationAttpsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 127), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMMachineCreationAttpsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMMachineCreationAttpsPerSec.setDescription('This counter displays the number of attempts per second to create computer accounts.')
dsSAMMembershipChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 128), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMMembershipChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMMembershipChangesPerSec.setDescription('This counter displays the number of group membership changes per second across all global, universal, and nested groups.')
dsSAMNonTransitiveMembEvalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMNonTransitiveMembEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMNonTransitiveMembEvalPerSec.setDescription('This counter displays the number of net user and new local groups evaluations per second when performing a non-transitive membership evaluation.')
dsSAMPasswordChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMPasswordChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMPasswordChangesPerSec.setDescription('Number of SAM password changes per second.')
dsSAMResourceGroupEvalLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMResourceGroupEvalLatency.setStatus('current')
if mibBuilder.loadTexts: dsSAMResourceGroupEvalLatency.setDescription('The mean latency of the last 100 resource group evaluations performed for authentication.')
dsSAMSuccCmpCrtPerSecInclAllRqst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMSuccCmpCrtPerSecInclAllRqst.setStatus('current')
if mibBuilder.loadTexts: dsSAMSuccCmpCrtPerSecInclAllRqst.setDescription('This counter displays the number of successful computer accounts created per second.')
dsSAMSuccessUserCreationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 133), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMSuccessUserCreationsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMSuccessUserCreationsPerSec.setDescription('This counter displays the number of user accounts successfully created per second.')
dsSAMTransitiveMemberEvalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 134), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMTransitiveMemberEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMTransitiveMemberEvalPerSec.setDescription('This counter displays the number of new groups encountered per second when performing a transitive membership evaluation. Evaluations are performed at authentication time and when computer accounts or attributes are created.')
dsSAMUniversalGrpMembEvalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 135), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMUniversalGrpMembEvalPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMUniversalGrpMembEvalPerSec.setDescription('This counter displays the number of universal group membership evaluations per second at authentication time.')
dsSAMUserCreationAttemptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 136), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSAMUserCreationAttemptsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSAMUserCreationAttemptsPerSec.setDescription('This counter displays the number of attempts per second to create user accounts.')
dsSimpleBindsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 137), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSimpleBindsPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSimpleBindsPerSec.setDescription('The number of simple binds/sec')
dsSubtreeSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 138), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSubtreeSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: dsSubtreeSearchesPerSec.setDescription('The number of subtree searches/sec')
dsTombstonesGarbageCollPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 139), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsTombstonesGarbageCollPerSec.setStatus('current')
if mibBuilder.loadTexts: dsTombstonesGarbageCollPerSec.setDescription('The rate at which expired tombstoned objects are garbage collected.')
dsTombstonesVisitedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 124, 1, 140), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsTombstonesVisitedPerSec.setStatus('current')
if mibBuilder.loadTexts: dsTombstonesVisitedPerSec.setDescription('The rate at which tombstoned objects are visited to be considered for garbage collected.')
dfsReplicatedFoldersTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125), )
if mibBuilder.loadTexts: dfsReplicatedFoldersTable.setStatus('current')
if mibBuilder.loadTexts: dfsReplicatedFoldersTable.setDescription('The DFS replicated folders performance object. This object includes counters for staging and conflict quotas.')
dfsReplicatedFoldersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1), ).setIndexNames((0, "INFORMANT-ADV", "dfsrfInstance"))
if mibBuilder.loadTexts: dfsReplicatedFoldersEntry.setStatus('current')
if mibBuilder.loadTexts: dfsReplicatedFoldersEntry.setDescription("Performance information for one particular instance of 'DFS Replicated Folders' object.")
dfsrfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfInstance.setStatus('current')
if mibBuilder.loadTexts: dfsrfInstance.setDescription('Instance name.')
dfsrfBandwidthSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfBandwidthSavings.setStatus('current')
if mibBuilder.loadTexts: dfsrfBandwidthSavings.setDescription('Bandwidth Savings Using DFS Replication shows the percentage of bandwidth that was saved by the DFS Replication service for this replicated folder using a combination of remote differential compression (RDC) and other compression technologies that minimize network bandwidth. For example, a value of 20 indicates that the DFS Replication service used 20% less bandwidth than it would have used if it had transmitted the entire files uncompressed over the network.')
dfsrfCompressedSizeOfFilesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfCompressedSizeOfFilesRcvd.setStatus('current')
if mibBuilder.loadTexts: dfsrfCompressedSizeOfFilesRcvd.setDescription('Compressed Size of Files Received shows the compressed size (in bytes) of files received for this replicated folder.')
dfsrfConflictBytesCleanedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfConflictBytesCleanedUp.setStatus('current')
if mibBuilder.loadTexts: dfsrfConflictBytesCleanedUp.setDescription('Conflict Bytes Cleaned up shows the total size (in bytes) of the conflict loser files and folders that were deleted from the Conflict and Deleted folder by the DFS Replication service. The DFS Replication service automatically detects and resolves conflicts encountered in replicated folders and moves the losing version to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfConflictBytesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfConflictBytesGenerated.setStatus('current')
if mibBuilder.loadTexts: dfsrfConflictBytesGenerated.setDescription('Conflict Bytes Generated shows the total size (in bytes) of the files and folders in this replicated folder that were moved to the Conflict and Deleted folder by the DFS Replication service. The DFS Replication service automatically detects and resolves conflicts encountered in replicated folders and moves the losing version to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfConflictFilesCleanedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfConflictFilesCleanedUp.setStatus('current')
if mibBuilder.loadTexts: dfsrfConflictFilesCleanedUp.setDescription('Conflict Files Cleaned up shows the number the conflict loser files and folders that were deleted from the Conflict and Deleted folder by the DFS Replication service. The DFS Replication service automatically detects and resolves conflicts encountered in replicated folders and moves the losing version to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfConflictFilesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfConflictFilesGenerated.setStatus('current')
if mibBuilder.loadTexts: dfsrfConflictFilesGenerated.setDescription('Conflict Files Generated shows the number of files and folders in this replicated folder that were moved to the Conflict and Deleted folder by the DFS Replication service. The DFS Replication service automatically detects and resolves conflicts encountered in replicated folders and moves the losing version to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfConflictFolderCleanupsComp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfConflictFolderCleanupsComp.setStatus('current')
if mibBuilder.loadTexts: dfsrfConflictFolderCleanupsComp.setDescription('Conflict Folder Cleanups Completed shows the number of times conflict loser files and folders in the Conflict and Deleted folder were deleted by the DFS Replication service. The DFS Replication service automatically detects and resolves conflicts encountered in replicated folders and moves the losing version to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfConflictSpaceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfConflictSpaceInUse.setStatus('current')
if mibBuilder.loadTexts: dfsrfConflictSpaceInUse.setDescription('Conflict Space in Use shows the total size (in bytes) of the conflict loser files and folders currently in the Conflict and Deleted folder used by the DFS Replication service. The DFS Replication service automatically detects and resolves conflicts encountered in replicated folders and moves the losing version to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfDeletedBytesCleanedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfDeletedBytesCleanedUp.setStatus('current')
if mibBuilder.loadTexts: dfsrfDeletedBytesCleanedUp.setDescription('Deleted Bytes Cleaned up shows the total size (in bytes) of replicating deleted files and folders (in bytes) that were cleaned up from the Conflict and Deleted folder by the DFS Replication service. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfDeletedBytesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfDeletedBytesGenerated.setStatus('current')
if mibBuilder.loadTexts: dfsrfDeletedBytesGenerated.setDescription('Deleted Bytes Generated shows the total size (in bytes) of replicated deleted files and folders that were moved to the Conflict and Deleted folder after they were deleted from a replicated folder on a sending member. The DFS Replication service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfDeletedFilesCleanedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfDeletedFilesCleanedUp.setStatus('current')
if mibBuilder.loadTexts: dfsrfDeletedFilesCleanedUp.setDescription('Deleted Files Cleaned up shows the number of replicated deleted files and folders that were cleaned up from the Conflict and Deleted folder by the DFS Replication service. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfDeletedFilesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfDeletedFilesGenerated.setStatus('current')
if mibBuilder.loadTexts: dfsrfDeletedFilesGenerated.setDescription('Deleted Files Generated shows the number of replicated deleted files and folders that were moved to the Conflict and Deleted folder after they were deleted from a replicated folder on a sending member. The DFS Replication service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfDeletedSpaceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfDeletedSpaceInUse.setStatus('current')
if mibBuilder.loadTexts: dfsrfDeletedSpaceInUse.setDescription('Deleted Space in Use shows the total size (in bytes) of the deleted files and folders currently in the Conflict and Deleted folder used by the DFS Replication service. The DFS Replication service detects remote deletes from its sending partner and moves the file or folder to the Conflict and Deleted folder. The service automatically cleans up the Conflict and Deleted folder when it exceeds a pre-configured threshold of the quota.')
dfsrfFileInstallsRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfFileInstallsRetried.setStatus('current')
if mibBuilder.loadTexts: dfsrfFileInstallsRetried.setDescription('File Installs Retried shows the number of file installs that are being retried due to sharing violations or other errors encountered when installing the files. The DFS Replication service replicates staged files into the staging folder, uncompresses them in the Installing folder, and renames them to the target location. The second and third steps of this process are known as installing the file.')
dfsrfFileInstallsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfFileInstallsSucceeded.setStatus('current')
if mibBuilder.loadTexts: dfsrfFileInstallsSucceeded.setDescription('File Installs Succeeded shows the number of files that were successfully received from sending members and installed locally on this server. The DFS Replication service replicates staged files into the staging folder, uncompresses them in the Installing folder, and renames them to the target location. The second and third steps of this process are known as installing the file.')
dfsrfRDCBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfRDCBytesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrfRDCBytesReceived.setDescription('RDC Bytes Received shows the number of bytes that were received in replicating files using remote differential compression (RDC) for this replicated folder. This is the actual bytes received over the network without the networking protocol overhead.')
dfsrfRDCCompressSizeOfFilesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfRDCCompressSizeOfFilesRcvd.setStatus('current')
if mibBuilder.loadTexts: dfsrfRDCCompressSizeOfFilesRcvd.setDescription('RDC Compressed Size of Files Received shows the compressed size (in bytes) of the files received with remote differential compression (RDC) for this replicated folder. This is the number of bytes that would have been received had RDC not been used. This is not the actual bytes received over the network.')
dfsrfRDCNumberOfFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfRDCNumberOfFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrfRDCNumberOfFilesReceived.setDescription('RDC Number of Files Received shows the number files that were received for this replicated folder.')
dfsrfRDCSizeOfFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfRDCSizeOfFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrfRDCSizeOfFilesReceived.setDescription('RDC Size of Files Received shows the uncompressed size (in bytes) of the files received with remote differential compression (RDC) for this replicated folder. This is the number of bytes that would have been received had neither compression nor RDC been used. This is not the actual bytes received over the network.')
dfsrfSizeOfFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfSizeOfFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrfSizeOfFilesReceived.setDescription('Size of Files Received shows the uncompressed size (in bytes) of the files received for this replicated folder. This is the number of bytes that would have been received had DFS Replication compression not been used.')
dfsrfStagingBytesCleanedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfStagingBytesCleanedUp.setStatus('current')
if mibBuilder.loadTexts: dfsrfStagingBytesCleanedUp.setDescription('Staging Bytes Cleaned up shows the total size (in bytes) of the files and folders that were cleaned up from the staging folder by the DFS Replication service. The DFS Replication service stages files and folders in the staging folder before they are replicated, and automatically cleans up the staging folder when it exceeds a pre-configured threshold of the quota.')
dfsrfStagingBytesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfStagingBytesGenerated.setStatus('current')
if mibBuilder.loadTexts: dfsrfStagingBytesGenerated.setDescription('Staging Bytes Generated shows the total size (in bytes) of replicated files and folders in the staging folder created by the DFS Replication service since last restart and is monotonically increasing counter. The DFS Replication service stages files and folders in the staging folder before they are replicated, and automatically cleans up the staging folder when it exceeds a pre-configured threshold of the quota.')
dfsrfStagingFilesCleanedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfStagingFilesCleanedUp.setStatus('current')
if mibBuilder.loadTexts: dfsrfStagingFilesCleanedUp.setDescription('Staging Files Cleaned up shows the number of files and folders that were cleaned up from the staging folder by the DFS Replication service. The DFS Replication service stages files and folders in the staging folder before they are replicated, and automatically cleans up the staging folder when it exceeds a pre-configured threshold of the quota.')
dfsrfStagingFilesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfStagingFilesGenerated.setStatus('current')
if mibBuilder.loadTexts: dfsrfStagingFilesGenerated.setDescription('Staging Files Generated shows the number of times replicated files and folders were staged by the DFS Replication service. The DFS Replication service stages files and folders in a staging folder before they are replicated, and automatically cleans up the staging folder when it exceeds a pre-configured threshold of the quota.')
dfsrfStagingSpaceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfStagingSpaceInUse.setStatus('current')
if mibBuilder.loadTexts: dfsrfStagingSpaceInUse.setDescription('Staging Files Generated shows the number of times replicated files and folders were staged by the DFS Replication service. The DFS Replication service stages files and folders in a staging folder before they are replicated, and automatically cleans up the staging folder when it exceeds a pre-configured threshold of the quota.')
dfsrfTotalFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfTotalFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrfTotalFilesReceived.setDescription('Total Files Received shows the number of files that were received by this replicated folder.')
dfsrfUpdatesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 125, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrfUpdatesDropped.setStatus('current')
if mibBuilder.loadTexts: dfsrfUpdatesDropped.setDescription('Updates Dropped shows the number of redundant file replication update records that were ignored by the DFS Replication service because they did not change the replicated file or folder. For example, dropped updates can occur when access control lists (ACLs) are overwritten with identical ACLs on a file or folder.')
dfsReplicationConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126), )
if mibBuilder.loadTexts: dfsReplicationConnectionsTable.setStatus('current')
if mibBuilder.loadTexts: dfsReplicationConnectionsTable.setDescription('The DFS Replication connections performance object for incoming connections.')
dfsReplicationConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1), ).setIndexNames((0, "INFORMANT-ADV", "dfsrcInstance"))
if mibBuilder.loadTexts: dfsReplicationConnectionsEntry.setStatus('current')
if mibBuilder.loadTexts: dfsReplicationConnectionsEntry.setDescription("Performance information for one particular instance of 'DFS Replication Connections' object.")
dfsrcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcInstance.setStatus('current')
if mibBuilder.loadTexts: dfsrcInstance.setDescription('Instance name.')
dfsrcBandwidthSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcBandwidthSavings.setStatus('current')
if mibBuilder.loadTexts: dfsrcBandwidthSavings.setDescription('Bandwidth Savings Using DFS Replication shows the percentage of bandwidth that was saved by the DFS Replication service for this connection using a combination of remote differential compression (RDC) and other compression technologies that minimize network bandwidth use. For example, a value of 20 indicates that the DFS Replication service used 20% less bandwidth than it would have used if it had transmitted the entire files uncompressed over the network.')
dfsrcBytesReceivedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcBytesReceivedPerSecond.setStatus('current')
if mibBuilder.loadTexts: dfsrcBytesReceivedPerSecond.setDescription('Bytes Received Per Second shows an estimate of the average number of bytes that were received each second over the past 30 seconds.')
dfsrcCompressedSizeOfFilesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcCompressedSizeOfFilesRcvd.setStatus('current')
if mibBuilder.loadTexts: dfsrcCompressedSizeOfFilesRcvd.setDescription('Compressed Size of Files Received shows the compressed size of files (in bytes) received on the connection.')
dfsrcRDCBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcRDCBytesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrcRDCBytesReceived.setDescription('RDC Bytes Received shows the bytes that were received on this connection while replicating files using remote differential compression (RDC). This is the actual bytes received over the network without the networking protocol overhead.')
dfsrcRDCCompressSizeOfFilesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcRDCCompressSizeOfFilesRcvd.setStatus('current')
if mibBuilder.loadTexts: dfsrcRDCCompressSizeOfFilesRcvd.setDescription('RDC Compressed Size of Files Received shows the compressed size (in bytes) of files received with remote differential compression (RDC) for this connection. This is the number of bytes that would have been received had RDC not been used. This is not the actual number of bytes received over the network.')
dfsrcRDCNumberOfFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcRDCNumberOfFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrcRDCNumberOfFilesReceived.setDescription('RDC Number of Files Received shows the number files that were received on this connection.')
dfsrcRDCSizeOfFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcRDCSizeOfFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrcRDCSizeOfFilesReceived.setDescription('RDC Size of Files Received shows the uncompressed size (in bytes) of files received with remote differential compression (RDC) for this connection. This is the number of bytes that would have been received had neither compression nor RDC been used. This is not the actual number of bytes received over the network.')
dfsrcSizeOfFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcSizeOfFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrcSizeOfFilesReceived.setDescription('Size of Files Received shows the uncompressed size (in bytes) of the files received on this connection. This is the number of bytes that would have been received had DFS Replication compression not been used.')
dfsrcTotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcTotalBytesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrcTotalBytesReceived.setDescription('Total Bytes Received shows the total number of bytes received on the connection. The bytes received value includes file data and replication metadata.')
dfsrcTotalFilesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 126, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrcTotalFilesReceived.setStatus('current')
if mibBuilder.loadTexts: dfsrcTotalFilesReceived.setDescription('Total Files Received shows the number of files that were received on the connection.')
dfsReplicationServiceVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127), )
if mibBuilder.loadTexts: dfsReplicationServiceVolumeTable.setStatus('current')
if mibBuilder.loadTexts: dfsReplicationServiceVolumeTable.setDescription('The DFS Replication service volume performance object. This object includes counters for update sequence number (USN) journal records and database processing on each volume.')
dfsReplicationServiceVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1), ).setIndexNames((0, "INFORMANT-ADV", "dfsrsvInstance"))
if mibBuilder.loadTexts: dfsReplicationServiceVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: dfsReplicationServiceVolumeEntry.setDescription("Performance information for one particular instance of 'DFS Replication Service Volumes' object.")
dfsrsvInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrsvInstance.setStatus('current')
if mibBuilder.loadTexts: dfsrsvInstance.setDescription('Instance name.')
dfsrsvDatabaseCommits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrsvDatabaseCommits.setStatus('current')
if mibBuilder.loadTexts: dfsrsvDatabaseCommits.setDescription('Database Commits shows the number of database commit operations performed by the DFS Replication service. This counter indicates how intensive the DFS Replication service is from a database perspective.')
dfsrsvDatabaseLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrsvDatabaseLookups.setStatus('current')
if mibBuilder.loadTexts: dfsrsvDatabaseLookups.setDescription('Database Lookups shows the number of database search operations performed by the DFS Replication service This counter indicates how intensive the DFS Replication service is from a database perspective.')
dfsrsvUSNJournalRecordsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrsvUSNJournalRecordsAccepted.setStatus('current')
if mibBuilder.loadTexts: dfsrsvUSNJournalRecordsAccepted.setDescription('USN Journal Records Accepted shows the number of update sequence number (USN) journal records that were processed by the DFS Replication service. The DFS Replication service processes all USN journal records for replicated content on a volume and ignores records for non-replicated files and folders on the volume.')
dfsrsvUSNJournalRecordsRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrsvUSNJournalRecordsRead.setStatus('current')
if mibBuilder.loadTexts: dfsrsvUSNJournalRecordsRead.setDescription('USN Journal Records Read shows the number of update sequence number (USN) journal records that were read by the DFS Replication service.')
dfsrsvUSNJournalUnreadPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 127, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsrsvUSNJournalUnreadPercentage.setStatus('current')
if mibBuilder.loadTexts: dfsrsvUSNJournalUnreadPercentage.setDescription('USN Journal Unread Percentage shows the percent of the update sequence number (USN) journal that has not yet been read and processed by the DFS Replication service. A journal wrap will occur if this counter reaches 100.')
faxService = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128))
faxsBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: faxsBytesReceived.setDescription('Number of bytes received.')
faxsBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsBytesSent.setStatus('current')
if mibBuilder.loadTexts: faxsBytesSent.setDescription('Number of bytes sent.')
faxsFailedFaxesTransmissions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsFailedFaxesTransmissions.setStatus('current')
if mibBuilder.loadTexts: faxsFailedFaxesTransmissions.setDescription('Number of faxes that failed.')
faxsFailedOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: faxsFailedOutgoingConnections.setDescription('Number of outgoing connections that failed.')
faxsFailedReceptions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsFailedReceptions.setStatus('current')
if mibBuilder.loadTexts: faxsFailedReceptions.setDescription('Number of faxes that service failed to receive.')
faxsFaxesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsFaxesSent.setStatus('current')
if mibBuilder.loadTexts: faxsFaxesSent.setDescription('Number of faxes successfully sent.')
faxsMinutesReceiving = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsMinutesReceiving.setStatus('current')
if mibBuilder.loadTexts: faxsMinutesReceiving.setDescription('Number of minutes that the service received faxes.')
faxsMinutesSending = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsMinutesSending.setStatus('current')
if mibBuilder.loadTexts: faxsMinutesSending.setDescription('Number of minutes that the service spent in sending successfully transmitted faxes.')
faxsPagesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsPagesSent.setStatus('current')
if mibBuilder.loadTexts: faxsPagesSent.setDescription('Number of pages sent.')
faxsReceivedFaxes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsReceivedFaxes.setStatus('current')
if mibBuilder.loadTexts: faxsReceivedFaxes.setDescription('Number of successfully received faxes.')
faxsReceivedPages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsReceivedPages.setStatus('current')
if mibBuilder.loadTexts: faxsReceivedPages.setDescription('Number of pages received.')
faxsTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsTotalBytes.setStatus('current')
if mibBuilder.loadTexts: faxsTotalBytes.setDescription('Total number of bytes sent and received.')
faxsTotalFaxesSentAndReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsTotalFaxesSentAndReceived.setStatus('current')
if mibBuilder.loadTexts: faxsTotalFaxesSentAndReceived.setDescription('Total number of faxes sent and received.')
faxsTotalMinutesSendAndReceive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsTotalMinutesSendAndReceive.setStatus('current')
if mibBuilder.loadTexts: faxsTotalMinutesSendAndReceive.setDescription('Total number of minutes that the service sent and received faxes.')
faxsTotalPages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 128, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxsTotalPages.setStatus('current')
if mibBuilder.loadTexts: faxsTotalPages.setDescription('Total number of pages sent and received.')
hcapCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129))
hcapcAverageNPSValidationTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcAverageNPSValidationTime.setStatus('current')
if mibBuilder.loadTexts: hcapcAverageNPSValidationTime.setDescription('Average time taken by NPS to validate requests in milliseconds for this uptime')
hcapcLastNPSValidationTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcLastNPSValidationTime.setStatus('current')
if mibBuilder.loadTexts: hcapcLastNPSValidationTime.setDescription('Time taken by NPS to validate the last request in milliseconds for this uptime')
hcapcPostureValidFailureResponse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcPostureValidFailureResponse.setStatus('current')
if mibBuilder.loadTexts: hcapcPostureValidFailureResponse.setDescription('Number of failure Posture Validation responses sent for this uptime')
hcapcPostureValidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcPostureValidationRequests.setStatus('current')
if mibBuilder.loadTexts: hcapcPostureValidationRequests.setDescription('Number of Posture Validation requests received for this uptime')
hcapcPostureValidSuccessResponse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcPostureValidSuccessResponse.setStatus('current')
if mibBuilder.loadTexts: hcapcPostureValidSuccessResponse.setDescription('Number of successful Posture Validation responses sent for this uptime')
hcapcVersionNegotiationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcVersionNegotiationRequests.setStatus('current')
if mibBuilder.loadTexts: hcapcVersionNegotiationRequests.setDescription('Number of Version Negotiation requests received for this uptime')
hcapcVersionNegotiationResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 129, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcapcVersionNegotiationResponses.setStatus('current')
if mibBuilder.loadTexts: hcapcVersionNegotiationResponses.setDescription('Number of Version Negotiation responses sent for this uptime')
hraStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130))
if mibBuilder.loadTexts: hraStatistics.setStatus('current')
if mibBuilder.loadTexts: hraStatistics.setDescription('Health Registration Authority Statistics')
hrasCertificationTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasCertificationTimeMs.setStatus('current')
if mibBuilder.loadTexts: hrasCertificationTimeMs.setDescription('Total time taken by the Certification Authority for certification')
hrasHCEPFailedRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasHCEPFailedRequests.setStatus('current')
if mibBuilder.loadTexts: hrasHCEPFailedRequests.setDescription('Total number of failed HCEP requests')
hrasHCEPRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasHCEPRequests.setStatus('current')
if mibBuilder.loadTexts: hrasHCEPRequests.setDescription('Total Number of HCEP requests')
hrasHCEPSuccessfulRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasHCEPSuccessfulRequests.setStatus('current')
if mibBuilder.loadTexts: hrasHCEPSuccessfulRequests.setDescription('Total number of successful HCEP requests')
hrasNPSValidationTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasNPSValidationTimeMs.setStatus('current')
if mibBuilder.loadTexts: hrasNPSValidationTimeMs.setDescription('Total time taken by NPS for validation')
hrasNPSSuccessfulRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasNPSSuccessfulRequests.setStatus('current')
if mibBuilder.loadTexts: hrasNPSSuccessfulRequests.setDescription('Successful NPS requests')
hrasSuccessCertificationRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasSuccessCertificationRequests.setStatus('current')
if mibBuilder.loadTexts: hrasSuccessCertificationRequests.setDescription('Successful Certification requests')
hrasSumOfTimePerRequestMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 130, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrasSumOfTimePerRequestMs.setStatus('current')
if mibBuilder.loadTexts: hrasSumOfTimePerRequestMs.setDescription('Time spent handling a request in milliseconds')
ipSecAuthIPv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131))
ipsa4ActiveExtendedModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4ActiveExtendedModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsa4ActiveExtendedModeSAs.setDescription('Active Extended Mode SAs is the number of currently active Extended Mode security associations. ')
ipsa4ActiveMainModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4ActiveMainModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsa4ActiveMainModeSAs.setDescription('Active Main Mode SAs is the number of currently active Main Mode security associations. ')
ipsa4ActiveQuickModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4ActiveQuickModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsa4ActiveQuickModeSAs.setDescription('Active Quick Mode SAs is the number of currently active Quick Mode security associations. ')
ipsa4ExtendedModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4ExtendedModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4ExtendedModeNegotiations.setDescription('Extended Mode Negotiations is the number of Extended Mode negotiations attempted since IPsec was last started. ')
ipsa4ExtendModeNegotiationPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4ExtendModeNegotiationPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4ExtendModeNegotiationPerSec.setDescription('Extended Mode Negotiations per second is the rate at which Extended Mode negotiations are being attempted. ')
ipsa4ExtModeSAsThatUsedImperson = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4ExtModeSAsThatUsedImperson.setStatus('current')
if mibBuilder.loadTexts: ipsa4ExtModeSAsThatUsedImperson.setDescription('Extended Mode SAs That Used Impersonation is the number of Extended Mode security associations completed using impersonation since IPsec was last started. ')
ipsa4FailExtendedModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4FailExtendedModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa4FailExtendedModeNegotiation.setDescription('Failed Extended Mode Negotiations is the number of failed Extended Mode negotiations since IPsec was last started. ')
ipsa4FailExtendModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4FailExtendModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4FailExtendModeNegotPerSec.setDescription('Failed Extended Mode Negotiations per second is the rate of failed Extended Mode negotiations. ')
ipsa4FailedMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4FailedMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4FailedMainModeNegotiations.setDescription('Failed Main Mode Negotiations is the number of failed Main Mode negotiations since IPsec was last started. ')
ipsa4FailedMainModeNegPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4FailedMainModeNegPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4FailedMainModeNegPerSec.setDescription('Failed Main Mode Negotiations per second is the rate of failed Main Mode negotiations. ')
ipsa4FailedQuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4FailedQuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4FailedQuickModeNegotiations.setDescription('Failed Quick Mode Negotiations is the number of failed Quick Mode negotiations since IPsec was last started. ')
ipsa4FailQuickModeNegPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4FailQuickModeNegPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4FailQuickModeNegPerSec.setDescription('Failed Quick Mode Negotiations per second is the rate of failed Quick Mode negotiations. ')
ipsa4MainModeNegRqstReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4MainModeNegRqstReceived.setStatus('current')
if mibBuilder.loadTexts: ipsa4MainModeNegRqstReceived.setDescription('Main Mode Negotiation Requests Received is the number of Main Mode negotiations initiated by a peer since IPsec was last started. ')
ipsa4MainModeNegRequestRcvPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4MainModeNegRequestRcvPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4MainModeNegRequestRcvPerSec.setDescription('Main Mode Negotiation Requests Received per second is the rate of Main Mode negotiations initiated by a peer. ')
ipsa4MainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4MainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4MainModeNegotiations.setDescription('Main Mode Negotiations is the number of Main Mode negotiations attempted since IPsec was last started. ')
ipsa4MainModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4MainModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4MainModeNegotiationsPerSec.setDescription('Main Mode Negotiations per second is the rate at which Main Mode negotiations are being attempted. ')
ipsa4MainModeSAsUseImpersonation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4MainModeSAsUseImpersonation.setStatus('current')
if mibBuilder.loadTexts: ipsa4MainModeSAsUseImpersonation.setDescription('Main Mode SAs That Used Impersonation is the number of Main Mode security associations completed using impersonation since IPsec was last started. ')
ipsa4MainModeSAUseImpersonPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4MainModeSAUseImpersonPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4MainModeSAUseImpersonPerSec.setDescription('Main Mode SAs That Used Impersonation per second is the rate of Main Mode security associations completed using impersonation. ')
ipsa4PendExtendModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4PendExtendModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4PendExtendModeNegotiations.setDescription('Pending Extended Mode Negotiations is the number of pending Extended Mode negotiations. ')
ipsa4PendingMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4PendingMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4PendingMainModeNegotiations.setDescription('Pending Main Mode Negotiations is the number of pending Main Mode negotiations. ')
ipsa4PendingQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4PendingQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa4PendingQuickModeNegotiation.setDescription('Pending Quick Mode Negotiations is the number of pending Quick Mode negotiations. ')
ipsa4QuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4QuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4QuickModeNegotiations.setDescription('Quick Mode Negotiations is the number of Quick Mode negotiations attempted since IPsec was last started. ')
ipsa4QuickModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4QuickModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4QuickModeNegotiationsPerSec.setDescription('Quick Mode Negotiations per second is the rate at which Quick Mode negotiations are being attempted. ')
ipsa4SuccExtendedModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4SuccExtendedModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa4SuccExtendedModeNegotiation.setDescription('Successful Extended Mode Negotiations is the number of Extended Mode negotiations completed since IPsec was last started. ')
ipsa4SuccExtendModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4SuccExtendModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4SuccExtendModeNegotPerSec.setDescription('Successful Extended Mode Negotiations per second is the rate of Extended Mode negotiations completed. ')
ipsa4SuccessMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4SuccessMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa4SuccessMainModeNegotiations.setDescription('Successful Main Mode Negotiations is the number of Main Mode negotiations completed since IPsec was last started. ')
ipsa4SuccessMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4SuccessMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4SuccessMainModeNegotPerSec.setDescription('Successful Main Mode Negotiations per second is the rate of Main Mode negotiations completed. ')
ipsa4SuccessQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4SuccessQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa4SuccessQuickModeNegotiation.setDescription('Successful Quick Mode Negotiations is the number of Quick Mode negotiations completed since IPsec was last started. ')
ipsa4SuccessQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 131, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa4SuccessQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa4SuccessQuickModeNegotPerSec.setDescription('Successful Quick Mode Negotiations per second is the rate of Quick Mode negotiations completed. ')
ipSecAuthIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132))
ipsa6ActiveExtendedModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6ActiveExtendedModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsa6ActiveExtendedModeSAs.setDescription('Active Extended Mode SAs is the number of currently active Extended Mode security associations. ')
ipsa6ActiveMainModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6ActiveMainModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsa6ActiveMainModeSAs.setDescription('Active Main Mode SAs is the number of currently active Main Mode security associations. ')
ipsa6ActiveQuickModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6ActiveQuickModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsa6ActiveQuickModeSAs.setDescription('Active Quick Mode SAs is the number of currently active Quick Mode security associations. ')
ipsa6ExtendedModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6ExtendedModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6ExtendedModeNegotiations.setDescription('Extended Mode Negotiations is the number of Extended Mode negotiations attempted since IPsec was last started. ')
ipsa6ExtendModeNegotiationPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6ExtendModeNegotiationPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6ExtendModeNegotiationPerSec.setDescription('Extended Mode Negotiations per second is the rate at which Extended Mode negotiations are being attempted. ')
ipsa6ExtendedModeSAsUsedImperson = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6ExtendedModeSAsUsedImperson.setStatus('current')
if mibBuilder.loadTexts: ipsa6ExtendedModeSAsUsedImperson.setDescription('Extended Mode SAs That Used Impersonation is the number of Extended Mode security associations completed using impersonation since IPsec was last started. ')
ipsa6FailExtendModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6FailExtendModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6FailExtendModeNegotiations.setDescription('Failed Extended Mode Negotiations is the number of failed Extended Mode negotiations since IPsec was last started. ')
ipsa6FailedExtendModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6FailedExtendModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6FailedExtendModeNegotPerSec.setDescription('Failed Extended Mode Negotiations per second is the rate of failed Extended Mode negotiations. ')
ipsa6FailedMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6FailedMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6FailedMainModeNegotiations.setDescription('Failed Main Mode Negotiations is the number of failed Main Mode negotiations since IPsec was last started. ')
ipsa6FailMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6FailMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6FailMainModeNegotPerSec.setDescription('Failed Main Mode Negotiations per second is the rate of failed Main Mode negotiations. ')
ipsa6FailedQuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6FailedQuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6FailedQuickModeNegotiations.setDescription('Failed Quick Mode Negotiations is the number of failed Quick Mode negotiations since IPsec was last started. ')
ipsa6FailQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6FailQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6FailQuickModeNegotPerSec.setDescription('Failed Quick Mode Negotiations per second is the rate of failed Quick Mode negotiations. ')
ipsa6MainModeNegotiationRqstRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6MainModeNegotiationRqstRcvd.setStatus('current')
if mibBuilder.loadTexts: ipsa6MainModeNegotiationRqstRcvd.setDescription('Main Mode Negotiation Requests Received is the number of Main Mode negotiations initiated by a peer since IPsec was last started. ')
ipsa6MainModeNegotRqstRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6MainModeNegotRqstRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6MainModeNegotRqstRcvdPerSec.setDescription('Main Mode Negotiation Requests Received per second is the rate of Main Mode negotiations initiated by a peer. ')
ipsa6MainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6MainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6MainModeNegotiations.setDescription('Main Mode Negotiations is the number of Main Mode negotiations attempted since IPsec was last started. ')
ipsa6MainModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6MainModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6MainModeNegotiationsPerSec.setDescription('Main Mode Negotiations per second is the rate at which Main Mode negotiations are being attempted. ')
ipsa6MainModeSAsUseImpersonation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6MainModeSAsUseImpersonation.setStatus('current')
if mibBuilder.loadTexts: ipsa6MainModeSAsUseImpersonation.setDescription('Main Mode SAs That Used Impersonation is the number of Main Mode security associations completed using impersonation since IPsec was last started. ')
ipsa6MainModeSAUseImpersonPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6MainModeSAUseImpersonPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6MainModeSAUseImpersonPerSec.setDescription('Main Mode SAs That Used Impersonation per second is the rate of Main Mode security associations completed using impersonation. ')
ipsa6PendExtendModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6PendExtendModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6PendExtendModeNegotiations.setDescription('Pending Extended Mode Negotiations is the number of pending Extended Mode negotiations. ')
ipsa6PendingMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6PendingMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6PendingMainModeNegotiations.setDescription('Pending Main Mode Negotiations is the number of pending Main Mode negotiations. ')
ipsa6PendingQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6PendingQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa6PendingQuickModeNegotiation.setDescription('Pending Quick Mode Negotiations is the number of pending Quick Mode negotiations. ')
ipsa6QuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6QuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6QuickModeNegotiations.setDescription('Quick Mode Negotiations is the number of Quick Mode negotiations attempted since IPsec was last started. ')
ipsa6QuickModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6QuickModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6QuickModeNegotiationsPerSec.setDescription('Quick Mode Negotiations per second is the rate at which Quick Mode negotiations are being attempted. ')
ipsa6SuccExtendedModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6SuccExtendedModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa6SuccExtendedModeNegotiation.setDescription('Successful Extended Mode Negotiations is the number of Extended Mode negotiations completed since IPsec was last started. ')
ipsa6SuccExtendModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6SuccExtendModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6SuccExtendModeNegotPerSec.setDescription('Successful Extended Mode Negotiations per second is the rate of Extended Mode negotiations completed. ')
ipsa6SuccessMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6SuccessMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsa6SuccessMainModeNegotiations.setDescription('Successful Main Mode Negotiations is the number of Main Mode negotiations completed since IPsec was last started. ')
ipsa6SuccessMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6SuccessMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6SuccessMainModeNegotPerSec.setDescription('Successful Main Mode Negotiations per second is the rate of Main Mode negotiations completed. ')
ipsa6SuccessQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6SuccessQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsa6SuccessQuickModeNegotiation.setDescription('Successful Quick Mode Negotiations is the number of Quick Mode negotiations completed since IPsec was last started. ')
ipsa6SuccessQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 132, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsa6SuccessQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsa6SuccessQuickModeNegotPerSec.setDescription('Successful Quick Mode Negotiations per second is the rate of Quick Mode negotiations completed. ')
ipSecDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133))
ipsdActiveSecurityAssociations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdActiveSecurityAssociations.setStatus('current')
if mibBuilder.loadTexts: ipsdActiveSecurityAssociations.setDescription('Active Security Associations is the number of active Quick Mode security associations. ')
ipsdByteRcvInTransportModePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdByteRcvInTransportModePerSec.setStatus('current')
if mibBuilder.loadTexts: ipsdByteRcvInTransportModePerSec.setDescription('Bytes Received in Transport Mode per second is the rate of bytes received using Transport Mode. ')
ipsdBytesRcvdInTunnelModePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdBytesRcvdInTunnelModePerSec.setStatus('current')
if mibBuilder.loadTexts: ipsdBytesRcvdInTunnelModePerSec.setDescription('Bytes Received in Tunnel Mode per second is the rate of bytes received using Tunnel Mode. ')
ipsdByteSntInTransportModePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdByteSntInTransportModePerSec.setStatus('current')
if mibBuilder.loadTexts: ipsdByteSntInTransportModePerSec.setDescription('Bytes Sent in Transport Mode per second is the rate of bytes sent using Transport Mode. ')
ipsdBytesSentInTunnelModePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdBytesSentInTunnelModePerSec.setStatus('current')
if mibBuilder.loadTexts: ipsdBytesSentInTunnelModePerSec.setDescription('Bytes Sent in Tunnel Mode per second is the rate of bytes sent using Tunnel Mode. ')
ipsdIncorrectSPIPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdIncorrectSPIPackets.setStatus('current')
if mibBuilder.loadTexts: ipsdIncorrectSPIPackets.setDescription('Incorrect SPI packets is the number of packets for which the Security Parameter Index (SPI) was incorrect since the computer was last started. A large number of packets with bad SPIs within a short amount of time might indicate a packet spoofing attack. ')
ipsdOffloadedBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdOffloadedBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsdOffloadedBytesReceivedPerSec.setDescription('Offloaded Bytes Received per second is the rate of bytes received using IPsec hardware offload. Certain network adapters can accelerate IPsec processing by performing hardware offload of IPsec cryptographic functions. ')
ipsdOffloadedBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdOffloadedBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsdOffloadedBytesSentPerSec.setDescription('Offloaded Bytes Sent per second is the rate of bytes sent using IPsec hardware offload. Certain network adapters can accelerate IPsec processing by performing hardware offload of IPsec cryptographic functions. ')
ipsdOffloadedSecurityAssociation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdOffloadedSecurityAssociation.setStatus('current')
if mibBuilder.loadTexts: ipsdOffloadedSecurityAssociation.setDescription('Offloaded Security Associations is the number of active Quick Mode security associations offloaded to hardware. Certain network adapters can accelerate IPsec processing by performing hardware offload of IPsec cryptographic functions.')
ipsdPacketsNotAuthenticated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPacketsNotAuthenticated.setStatus('current')
if mibBuilder.loadTexts: ipsdPacketsNotAuthenticated.setDescription('Packets Not Authenticated is the number of packets for which data could not be verified (for which the integrity hash verification failed) since the computer was last started. Increases in this counter might indicate an IPsec packet spoofing or modification attack, or packet corruption by network devices. ')
ipsdPacketsNotDecrypted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPacketsNotDecrypted.setStatus('current')
if mibBuilder.loadTexts: ipsdPacketsNotDecrypted.setDescription('Packets Not Decrypted is the number of packets that could not be decrypted since the computer was last started. A packet might not be decrypted if it fails a validation check. ')
ipsdPacketsReceivedOverWrongSA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPacketsReceivedOverWrongSA.setStatus('current')
if mibBuilder.loadTexts: ipsdPacketsReceivedOverWrongSA.setDescription('Packets Received Over Wrong SA is the number of packets received over the wrong security association since the computer was last started. ')
ipsdPacketsFailedESPValidation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPacketsFailedESPValidation.setStatus('current')
if mibBuilder.loadTexts: ipsdPacketsFailedESPValidation.setDescription('Packets That Failed ESP Validation is the number of packets received that failed ESP validation since the computer was last started. ')
ipsdPacketsFailedReplayDetection = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPacketsFailedReplayDetection.setStatus('current')
if mibBuilder.loadTexts: ipsdPacketsFailedReplayDetection.setDescription('Packets That Failed Replay Detection is the number of packets that contained an invalid sequence number since the computer was last started. Increases in this counter might indicate a network problem or replay attack. ')
ipsdPacketsFailUDPESPValidation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPacketsFailUDPESPValidation.setStatus('current')
if mibBuilder.loadTexts: ipsdPacketsFailUDPESPValidation.setDescription('Packets That Failed UDP-ESP Validation is the number of packets received that failed UDP-ESP validation (used for NAT traversal) since the computer was last started. ')
ipsdPendingSecurityAssociations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPendingSecurityAssociations.setStatus('current')
if mibBuilder.loadTexts: ipsdPendingSecurityAssociations.setDescription('Pending Security Associations is the number of pending Quick Mode security associations. ')
ipsdPlaintextPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdPlaintextPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: ipsdPlaintextPacketsReceived.setDescription('Plaintext Packets Received is the number of clear text packets received since the computer was last started. ')
ipsdSARekeys = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdSARekeys.setStatus('current')
if mibBuilder.loadTexts: ipsdSARekeys.setDescription('SA Rekeys is the number of successful rekey operations for Quick Mode security associations since the computer was last started. ')
ipsdSecurityAssociationsAdded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 133, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdSecurityAssociationsAdded.setStatus('current')
if mibBuilder.loadTexts: ipsdSecurityAssociationsAdded.setDescription('Security Associations Added is the number of security associations added since the computer was last started. ')
ipSecIKEv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134))
ipsi4ActiveMainModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4ActiveMainModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsi4ActiveMainModeSAs.setDescription('Active Main Mode SAs is the number of currently active Main Mode security associations. ')
ipsi4ActiveQuickModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4ActiveQuickModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsi4ActiveQuickModeSAs.setDescription('Active Quick Mode SAs is the number of currently active Quick Mode security associations. ')
ipsi4FailedMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4FailedMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi4FailedMainModeNegotiations.setDescription('Failed Main Mode Negotiations is the number of failed Main Mode negotiations since IPsec was last started. ')
ipsi4FailedMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4FailedMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4FailedMainModeNegotPerSec.setDescription('Failed Main Mode Negotiations per second is the rate of failed Main Mode negotiations. ')
ipsi4FailedQuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4FailedQuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi4FailedQuickModeNegotiations.setDescription('Failed Quick Mode Negotiations is the number of failed Quick Mode negotiations since IPsec was last started. ')
ipsi4FailedQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4FailedQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4FailedQuickModeNegotPerSec.setDescription('Failed Quick Mode Negotiations per second is the rate of failed Quick Mode negotiations. ')
ipsi4MainModeNegotiationRqstRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4MainModeNegotiationRqstRcvd.setStatus('current')
if mibBuilder.loadTexts: ipsi4MainModeNegotiationRqstRcvd.setDescription('Main Mode Negotiation Requests Received is the number of Main Mode negotiations initiated by a peer since IPsec was last started. ')
ipsi4MainModeNegotRqstRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4MainModeNegotRqstRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4MainModeNegotRqstRcvdPerSec.setDescription('Main Mode Negotiation Requests Received per second is the rate of Main Mode negotiations initiated by a peer. ')
ipsi4MainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4MainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi4MainModeNegotiations.setDescription('Main Mode Negotiations is the number of Main Mode negotiations attempted since IPsec was last started. ')
ipsi4MainModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4MainModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4MainModeNegotiationsPerSec.setDescription('Main Mode Negotiations per second is the rate at which Main Mode negotiations are being attempted. ')
ipsi4PendingMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4PendingMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi4PendingMainModeNegotiations.setDescription('Pending Main Mode Negotiations is the number of pending Main Mode negotiations. ')
ipsi4PendingQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4PendingQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsi4PendingQuickModeNegotiation.setDescription('Pending Quick Mode Negotiations is the number of pending Quick Mode negotiations. ')
ipsi4QuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4QuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi4QuickModeNegotiations.setDescription('Quick Mode Negotiations is the number of Quick Mode negotiations attempted since IPsec was last started. ')
ipsi4QuickModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4QuickModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4QuickModeNegotiationsPerSec.setDescription('Quick Mode Negotiations per second is the rate at which Quick Mode negotiations are being attempted. ')
ipsi4SuccessMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4SuccessMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi4SuccessMainModeNegotiations.setDescription('Successful Main Mode Negotiations is the number of Main Mode negotiations completed since IPsec was last started. ')
ipsi4SuccessMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4SuccessMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4SuccessMainModeNegotPerSec.setDescription('Successful Main Mode Negotiations per second is the rate of Main Mode negotiations completed. ')
ipsi4SuccessQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4SuccessQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsi4SuccessQuickModeNegotiation.setDescription('Successful Quick Mode Negotiations is the number of Quick Mode negotiations completed since IPsec was last started. ')
ipsi4SuccessQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 134, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi4SuccessQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi4SuccessQuickModeNegotPerSec.setDescription('Successful Quick Mode Negotiations per second is the rate of Quick Mode negotiations completed. ')
ipSecIKEv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135))
ipsi6ActiveMainModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6ActiveMainModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsi6ActiveMainModeSAs.setDescription('Active Main Mode SAs is the number of currently active Main Mode security associations. ')
ipsi6ActiveQuickModeSAs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6ActiveQuickModeSAs.setStatus('current')
if mibBuilder.loadTexts: ipsi6ActiveQuickModeSAs.setDescription('Active Quick Mode SAs is the number of currently active Quick Mode security associations. ')
ipsi6FailedMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6FailedMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi6FailedMainModeNegotiations.setDescription('Failed Main Mode Negotiations is the number of failed Main Mode negotiations since IPsec was last started. ')
ipsi6FailedMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6FailedMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6FailedMainModeNegotPerSec.setDescription('Failed Main Mode Negotiations per second is the rate of failed Main Mode negotiations. ')
ipsi6FailedQuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6FailedQuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi6FailedQuickModeNegotiations.setDescription('Failed Quick Mode Negotiations is the number of failed Quick Mode negotiations since IPsec was last started. ')
ipsi6FailedQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6FailedQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6FailedQuickModeNegotPerSec.setDescription('Failed Quick Mode Negotiations per second is the rate of failed Quick Mode negotiations. ')
ipsi6MainModeNegotiationRqstRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6MainModeNegotiationRqstRcvd.setStatus('current')
if mibBuilder.loadTexts: ipsi6MainModeNegotiationRqstRcvd.setDescription('Main Mode Negotiation Requests Received is the number of Main Mode negotiations initiated by a peer since IPsec was last started. ')
ipsi6MainModeNegotRqstRcvdPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6MainModeNegotRqstRcvdPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6MainModeNegotRqstRcvdPerSec.setDescription('Main Mode Negotiation Requests Received per second is the rate of Main Mode negotiations initiated by a peer. ')
ipsi6MainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6MainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi6MainModeNegotiations.setDescription('Main Mode Negotiations is the number of Main Mode negotiations attempted since IPsec was last started. ')
ipsi6MainModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6MainModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6MainModeNegotiationsPerSec.setDescription('Main Mode Negotiations per second is the rate at which Main Mode negotiations are being attempted. ')
ipsi6PendingMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6PendingMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi6PendingMainModeNegotiations.setDescription('Pending Main Mode Negotiations is the number of pending Main Mode negotiations. ')
ipsi6PendingQuickModeNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6PendingQuickModeNegotiation.setStatus('current')
if mibBuilder.loadTexts: ipsi6PendingQuickModeNegotiation.setDescription('Pending Quick Mode Negotiations is the number of pending Quick Mode negotiations. ')
ipsi6QuickModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6QuickModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi6QuickModeNegotiations.setDescription('Quick Mode Negotiations is the number of Quick Mode negotiations attempted since IPsec was last started. ')
ipsi6QuickModeNegotiationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6QuickModeNegotiationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6QuickModeNegotiationsPerSec.setDescription('Quick Mode Negotiations per second is the rate at which Quick Mode negotiations are being attempted. ')
ipsi6SuccessMainModeNegotiations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6SuccessMainModeNegotiations.setStatus('current')
if mibBuilder.loadTexts: ipsi6SuccessMainModeNegotiations.setDescription('Successful Main Mode Negotiations is the number of Main Mode negotiations completed since IPsec was last started. ')
ipsi6SuccessMainModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6SuccessMainModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6SuccessMainModeNegotPerSec.setDescription('Successful Main Mode Negotiations per second is the rate of Main Mode negotiations completed. ')
ipsi6SuccessfulQuickModeNegot = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6SuccessfulQuickModeNegot.setStatus('current')
if mibBuilder.loadTexts: ipsi6SuccessfulQuickModeNegot.setDescription('Successful Quick Mode Negotiations is the number of Quick Mode negotiations completed since IPsec was last started. ')
ipsi6SuccessQuickModeNegotPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 135, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsi6SuccessQuickModeNegotPerSec.setStatus('current')
if mibBuilder.loadTexts: ipsi6SuccessQuickModeNegotPerSec.setDescription('Successful Quick Mode Negotiations per second is the rate of Quick Mode negotiations completed. ')
msmqIncomingHTTPTraffic = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 136))
if mibBuilder.loadTexts: msmqIncomingHTTPTraffic.setStatus('current')
if mibBuilder.loadTexts: msmqIncomingHTTPTraffic.setDescription('The MSMQ Incoming HTTP Traffic and MSMQ Outgoing HTTP Session performance objects include counters that monitor messages sent over HTTP transport. These objects contain counters that monitor statistics about incoming HTTP messages, the rates at which the messages and message bytes arrive at the computer in an incoming HTTP connection, the total number of HTTP messages that arrived in the connection, and the total number of message bytes that arrived in the connection as well as counters that monitor the statistics about active outgoing HTTP sessions between the computer and other computers, the rates at which message bytes and messages are sent from the computer in a specific outgoing session, the total number of HTTP messages sent in the session, and the total number of message bytes sent in the session.')
msmqitIncomingHTTPBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 136, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqitIncomingHTTPBytes.setStatus('current')
if mibBuilder.loadTexts: msmqitIncomingHTTPBytes.setDescription('The total number of message bytes that arrived at the computer in the incoming HTTP connection.')
msmqitIncomingHTTPBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 136, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqitIncomingHTTPBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqitIncomingHTTPBytesPerSec.setDescription('The rate at which message bytes are arriving at the computer in the incoming HTTP connection.')
msmqitIncomingHTTPMessages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 136, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqitIncomingHTTPMessages.setStatus('current')
if mibBuilder.loadTexts: msmqitIncomingHTTPMessages.setDescription('The total number of HTTP Message Queuing messages that arrived at the computer.')
msmqitIncomingHTTPMessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 136, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqitIncomingHTTPMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqitIncomingHTTPMessagesPerSec.setDescription('The rate at which HTTP Message Queuing messages are arriving at the computer.')
msmqInMulticastSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137), )
if mibBuilder.loadTexts: msmqInMulticastSessionTable.setStatus('current')
if mibBuilder.loadTexts: msmqInMulticastSessionTable.setDescription('The MSMQ Incoming Multicast Session and MSMQ Outgoing Multicast Session performance objects contain counters that monitor messages sent in multicast sessions. These objects contain counters that monitor statistics about active incoming multicast sessions, the rates at which the messages and message bytes arrive at the computer in a specific incoming multicast session, the total number of multicast messages that arrived in the session, and the total number of message bytes that arrived in the session as well as counters that monitor the statistics about active outgoing multicast sessions between the computer and other computers, the rates at which message bytes and messages are sent from the computer in a specific outgoing session, the total number of multicast messages sent in the session, and the total number of message bytes sent in the session.')
msmqInMulticastSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137, 1), ).setIndexNames((0, "INFORMANT-ADV", "msmqimsInstance"))
if mibBuilder.loadTexts: msmqInMulticastSessionEntry.setStatus('current')
if mibBuilder.loadTexts: msmqInMulticastSessionEntry.setDescription("Performance information for one particular instance of 'MSMQ Incoming Multicast Session' object.")
msmqimsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqimsInstance.setStatus('current')
if mibBuilder.loadTexts: msmqimsInstance.setDescription('Instance name.')
msmqimsIncomingMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqimsIncomingMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: msmqimsIncomingMulticastBytes.setDescription('The total number of message bytes that arrived at the computer in the selected session.')
msmqimsInMulticastBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqimsInMulticastBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqimsInMulticastBytesPerSec.setDescription('The rate at which message bytes are arriving at the computer in the selected session.')
msmqimsIncomingMulticastMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqimsIncomingMulticastMessages.setStatus('current')
if mibBuilder.loadTexts: msmqimsIncomingMulticastMessages.setDescription('The total number of Message Queuing messages that arrived at the computer in the selected session.')
msmqimsInMulticastMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 137, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqimsInMulticastMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqimsInMulticastMessagesPerSec.setDescription('The rate at which Message Queuing messages are arriving at the computer in the selected session.')
msmqOutgoingHTTPSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138), )
if mibBuilder.loadTexts: msmqOutgoingHTTPSessionTable.setStatus('current')
if mibBuilder.loadTexts: msmqOutgoingHTTPSessionTable.setDescription('The MSMQ Incoming HTTP Traffic and MSMQ Outgoing HTTP Session performance objects include counters that monitor messages sent over HTTP transport. These objects contain counters that monitor statistics about incoming HTTP messages, the rates at which the messages and message bytes arrive at the computer in an incoming HTTP connection, the total number of HTTP messages that arrived in the connection, and the total number of message bytes that arrived in the connection as well as counters that monitor the statistics about active outgoing HTTP sessions between the computer and other computers, the rates at which message bytes and messages are sent from the computer in a specific outgoing session, the total number of HTTP messages sent in the session, and the total number of message bytes sent in the session.')
msmqOutgoingHTTPSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138, 1), ).setIndexNames((0, "INFORMANT-ADV", "msmqosInstance"))
if mibBuilder.loadTexts: msmqOutgoingHTTPSessionEntry.setStatus('current')
if mibBuilder.loadTexts: msmqOutgoingHTTPSessionEntry.setDescription("Performance information for one particular instance of 'MSMQ Outgoing HTTP Session' object.")
msmqosInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqosInstance.setStatus('current')
if mibBuilder.loadTexts: msmqosInstance.setDescription('Instance name.')
msmqosOutgoingHTTPBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqosOutgoingHTTPBytes.setStatus('current')
if mibBuilder.loadTexts: msmqosOutgoingHTTPBytes.setDescription('The total number of message bytes that were sent from the computer in the selected outgoing HTTP session.')
msmqosOutgoingHTTPBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqosOutgoingHTTPBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqosOutgoingHTTPBytesPerSec.setDescription('The rate at which message bytes are being sent from the computer in the selected outgoing HTTP session.')
msmqosOutgoingHTTPMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqosOutgoingHTTPMessages.setStatus('current')
if mibBuilder.loadTexts: msmqosOutgoingHTTPMessages.setDescription('The total number of Message Queuing messages that were sent from the computer in the selected outgoing HTTP session.')
msmqosOutgoingHTTPMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 138, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqosOutgoingHTTPMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqosOutgoingHTTPMessagesPerSec.setDescription('The rate at which Message Queuing messages are being sent from the computer in the selected outgoing HTTP session.')
msmqOutMulticastSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139), )
if mibBuilder.loadTexts: msmqOutMulticastSessionTable.setStatus('current')
if mibBuilder.loadTexts: msmqOutMulticastSessionTable.setDescription('The MSMQ Incoming Multicast Session and MSMQ Outgoing Multicast Session performance objects contain counters that monitor messages sent in multicast sessions. These objects contain counters that monitor statistics about active incoming multicast sessions, the rates at which the messages and message bytes arrive at the computer in a specific incoming multicast session, the total number of multicast messages that arrived in the session, and the total number of message bytes that arrived in the session as well as counters that monitor the statistics about active outgoing multicast sessions between the computer and other computers, the rates at which message bytes and messages are sent from the computer in a specific outgoing session, the total number of multicast messages sent in the session, and the total number of message bytes sent in the session.')
msmqOutMulticastSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139, 1), ).setIndexNames((0, "INFORMANT-ADV", "msmqomsInstance"))
if mibBuilder.loadTexts: msmqOutMulticastSessionEntry.setStatus('current')
if mibBuilder.loadTexts: msmqOutMulticastSessionEntry.setDescription("Performance information for one particular instance of 'MSMQ Outgoing Multicast Session' object.")
msmqomsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqomsInstance.setStatus('current')
if mibBuilder.loadTexts: msmqomsInstance.setDescription('Instance name.')
msmqomsOutgoingMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqomsOutgoingMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: msmqomsOutgoingMulticastBytes.setDescription('The total number of message bytes that were sent from the computer in the selected session.')
msmqomsOutMulticastBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqomsOutMulticastBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqomsOutMulticastBytesPerSec.setDescription('The rate at which message bytes are being sent from the computer in the selected session.')
msmqomsOutgoingMulticastMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqomsOutgoingMulticastMessages.setStatus('current')
if mibBuilder.loadTexts: msmqomsOutgoingMulticastMessages.setDescription('The total number of Message Queuing messages that were sent from the computer in the selected session.')
msmqomsOutMulticastMessagePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 139, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqomsOutMulticastMessagePerSec.setStatus('current')
if mibBuilder.loadTexts: msmqomsOutMulticastMessagePerSec.setDescription('The rate at which Message Queuing messages are being sent from the computer in the selected session.')
msmqSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140), )
if mibBuilder.loadTexts: msmqSessionTable.setStatus('current')
if mibBuilder.loadTexts: msmqSessionTable.setDescription('The MSMQ Session performance object is visible only when the computer has established an active session with another Message Queuing computer. This object contains counters that can be used to monitor statistics about active sessions between computers running Message Queuing. Multiple instances of this object may be listed, one for each session. There can be an instance of this object on both computers involved in each session up to the maximum number of instances allowed on each computer. Instance lists the IP address of the computer with which there is an active session.')
msmqSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1), ).setIndexNames((0, "INFORMANT-ADV", "msmqsInstance"))
if mibBuilder.loadTexts: msmqSessionEntry.setStatus('current')
if mibBuilder.loadTexts: msmqSessionEntry.setDescription("Performance information for one particular instance of 'MSMQ Session' object.")
msmqsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsInstance.setStatus('current')
if mibBuilder.loadTexts: msmqsInstance.setDescription('Instance name.')
msmqsIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: msmqsIncomingBytes.setDescription('The total number of bytes that arrived at the computer in the selected session. Only bytes in Message Queuing messages are counted.')
msmqsIncomingBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsIncomingBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqsIncomingBytesPerSec.setDescription('The rate at which bytes are arriving at the computer in the selected session. Only bytes in Message Queuing messages are counted.')
msmqsIncomingMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsIncomingMessages.setStatus('current')
if mibBuilder.loadTexts: msmqsIncomingMessages.setDescription('The total number of Message Queuing messages that arrived at the computer in the selected session.')
msmqsIncomingMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsIncomingMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqsIncomingMessagesPerSec.setDescription('The rate at which Message Queuing messages are arriving at the computer in the selected session.')
msmqsOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: msmqsOutgoingBytes.setDescription('The total number of bytes that were sent from the computer in the selected session. Only bytes in Message Queuing messages are counted.')
msmqsOutgoingBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsOutgoingBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqsOutgoingBytesPerSec.setDescription('The rate at which bytes are being sent from the computer in the selected session. Only bytes in Message Queuing messages are counted.')
msmqsOutgoingMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsOutgoingMessages.setStatus('current')
if mibBuilder.loadTexts: msmqsOutgoingMessages.setDescription('The total number of Message Queuing messages that were sent from the computer in the selected session.')
msmqsOutgoingMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 140, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msmqsOutgoingMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: msmqsOutgoingMessagesPerSec.setDescription('The rate at which Message Queuing messages are being sent from the computer in the selected session.')
netlogonTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141), )
if mibBuilder.loadTexts: netlogonTable.setStatus('current')
if mibBuilder.loadTexts: netlogonTable.setDescription('Counters for measuring the performance of Netlogon.')
netlogonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1), ).setIndexNames((0, "INFORMANT-ADV", "netlogonInstance"))
if mibBuilder.loadTexts: netlogonEntry.setStatus('current')
if mibBuilder.loadTexts: netlogonEntry.setDescription("Performance information for one particular instance of 'Netlogon' object.")
netlogonInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netlogonInstance.setStatus('current')
if mibBuilder.loadTexts: netlogonInstance.setDescription('Instance name.')
netlogonAverageSemaphoreHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netlogonAverageSemaphoreHoldTime.setStatus('current')
if mibBuilder.loadTexts: netlogonAverageSemaphoreHoldTime.setDescription('The average time (in seconds) that the semaphore is held over the last sample.')
netlogonSemaphoreAcquires = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netlogonSemaphoreAcquires.setStatus('current')
if mibBuilder.loadTexts: netlogonSemaphoreAcquires.setDescription('The total number of times that the semaphore has been obtained over the lifetime of the security channel connection, or since system startup for _Total.')
netlogonSemaphoreHolders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netlogonSemaphoreHolders.setStatus('current')
if mibBuilder.loadTexts: netlogonSemaphoreHolders.setDescription('The number of the thread that is holding the semaphore.')
netlogonSemaphoreTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netlogonSemaphoreTimeouts.setStatus('current')
if mibBuilder.loadTexts: netlogonSemaphoreTimeouts.setDescription(' The total number of times that a thread has timed out while it waited for the semaphore over the lifetime of the security channel connection, or since system startup for _Total.')
netlogonSemaphoreWaiters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 141, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netlogonSemaphoreWaiters.setStatus('current')
if mibBuilder.loadTexts: netlogonSemaphoreWaiters.setDescription('The number of the thread that is waiting to obtain the semaphore.')
npsAccountingClientsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142), )
if mibBuilder.loadTexts: npsAccountingClientsTable.setStatus('current')
if mibBuilder.loadTexts: npsAccountingClientsTable.setDescription("A table containing performance information for instances of 'NPS Accounting Clients' objects.")
npsAccountingClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1), ).setIndexNames((0, "INFORMANT-ADV", "npsaccInstance"))
if mibBuilder.loadTexts: npsAccountingClientsEntry.setStatus('current')
if mibBuilder.loadTexts: npsAccountingClientsEntry.setDescription("Performance information for one particular instance of 'NPS Accounting Clients' object.")
npsaccInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccInstance.setStatus('current')
if mibBuilder.loadTexts: npsaccInstance.setDescription('Instance name.')
npsaccAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: npsaccAccountingRequests.setDescription('The number of RADIUS Accounting-Request packets received on the accounting port.')
npsaccAccountingRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccAccountingRequestsPerSec.setDescription('The average number of RADIUS Accounting-Requests received per second on the accounting port.')
npsaccAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: npsaccAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets sent from this NPS server.')
npsaccAccountingResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccAccountingResponsesPerSec.setDescription('The average number of RADIUS Accounting-Responses sent per second.')
npsaccBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsaccBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsaccBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsaccDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsaccDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsaccDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsaccDupAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccDupAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: npsaccDupAccountingRequests.setDescription("The number of duplicate RADIUS Accounting-Request packets received on this NPS server's accounting port.")
npsaccDupAccountingRequestPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccDupAccountingRequestPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccDupAccountingRequestPerSec.setDescription("The average number of duplicate RADIUS Accounting-Request packets received per second on this NPS server's accounting port.")
npsaccMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsaccMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsaccMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsaccNoRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccNoRecord.setStatus('current')
if mibBuilder.loadTexts: npsaccNoRecord.setDescription("The number of RADIUS Accounting-Request packets received and responded to but not recorded on this NPS server's accounting port.")
npsaccNoRecordPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccNoRecordPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccNoRecordPerSec.setDescription("The average number of Accounting-Request packets received and responded to per second, but not recorded on this NPS server's accounting port.")
npsaccPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsaccPacketsReceived.setDescription('The number of packets received.')
npsaccPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsaccPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccPacketsSent.setStatus('current')
if mibBuilder.loadTexts: npsaccPacketsSent.setDescription('The number of packets sent.')
npsaccPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccPacketsSentPerSec.setDescription('The average number of packets sent per second.')
npsaccUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsaccUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsaccUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 142, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaccUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsaccUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsAccountingProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143))
npsacpAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: npsacpAccountingRequests.setDescription('The number of RADIUS Accounting-Request packets received on the accounting port.')
npsacpAccountingRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpAccountingRequestsPerSec.setDescription('The average number of RADIUS Accounting-Request packets sent per second to the accounting port.')
npsacpAccountingResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: npsacpAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets received on the accounting port.')
npsacpAccountingResponsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpAccountingResponsesPerSec.setDescription('The average number of RADIUS Accounting-Response packets received per second on the accounting port.')
npsacpBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsacpBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsacpBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsacpDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsacpDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsacpDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsacpInvalidAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpInvalidAddresses.setStatus('current')
if mibBuilder.loadTexts: npsacpInvalidAddresses.setDescription('The number of packets received from unknown addresses.')
npsacpInvalidAddressesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpInvalidAddressesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpInvalidAddressesPerSec.setDescription('The average number of packets per second received from unknown addresses.')
npsacpMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsacpMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsacpMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsacpPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsacpPacketsReceived.setDescription('The number of packets received.')
npsacpPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsacpPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpPendingRequests.setStatus('current')
if mibBuilder.loadTexts: npsacpPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
npsacpRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: npsacpRequestTimeouts.setDescription('The number of request timeouts to this server.')
npsacpRequestTimeoutsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
npsacpRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpRetransmissions.setStatus('current')
if mibBuilder.loadTexts: npsacpRetransmissions.setDescription('The number of requests retransmitted to this server.')
npsacpRetransmissionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
npsacpUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsacpUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsacpUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 143, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacpUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsacpUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsAccountingServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144))
npsacsAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: npsacsAccountingRequests.setDescription('The number of RADIUS Accounting-Request packets received on the accounting port.')
npsacsAccountingRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsAccountingRequestsPerSec.setDescription('The average number of RADIUS Accounting-Requests received per second on the accounting port.')
npsacsAccountingResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: npsacsAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets sent from this NPS server.')
npsacsAccountingResponsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsAccountingResponsesPerSec.setDescription('The average number of RADIUS Accounting-Responses sent per second.')
npsacsBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsacsBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsacsBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsacsDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsacsDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsacsDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsacsDupAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsDupAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: npsacsDupAccountingRequests.setDescription("The number of duplicate RADIUS Accounting-Request packets received on this NPS server's accounting port.")
npsacsDupAccountingRequestPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsDupAccountingRequestPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsDupAccountingRequestPerSec.setDescription("The average number of duplicate RADIUS Accounting-Request packets received per second on this NPS server's accounting port.")
npsacsInvalidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsInvalidRequests.setStatus('current')
if mibBuilder.loadTexts: npsacsInvalidRequests.setDescription('The number of RADIUS packets received from unknown clients or remote RADIUS servers.')
npsacsInvalidRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsInvalidRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsInvalidRequestsPerSec.setDescription('The average number of RADIUS packets from unknown clients or remote RADIUS servers received per second.')
npsacsMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsacsMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsacsMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsacsNoRecord = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsNoRecord.setStatus('current')
if mibBuilder.loadTexts: npsacsNoRecord.setDescription("The number of RADIUS Accounting-Request packets received and responded to but not recorded on this NPS server's accounting port.")
npsacsNoRecordPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsNoRecordPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsNoRecordPerSec.setDescription("The average number of Accounting-Request packets received and responded to per second, but not recorded on this NPS server's accounting port.")
npsacsPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsacsPacketsReceived.setDescription('The number of packets received.')
npsacsPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsacsPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: npsacsPacketsSent.setDescription('The number of packets sent.')
npsacsPacketsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsPacketsSentPerSec.setDescription('The average number of packets sent per second.')
npsacsServerResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsServerResetTime.setStatus('current')
if mibBuilder.loadTexts: npsacsServerResetTime.setDescription('The time elapsed (in hundredths of a second) since the configuration of this NPS server was reset because of a configuration change or because the service control manager sent a reset to the NPS service.')
npsacsServerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsServerUpTime.setStatus('current')
if mibBuilder.loadTexts: npsacsServerUpTime.setDescription('The time elapsed (in hundredths of a second) since the server process was started on this NPS server.')
npsacsUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsacsUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsacsUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 144, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsacsUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsacsUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsAuthenticationClientsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145), )
if mibBuilder.loadTexts: npsAuthenticationClientsTable.setStatus('current')
if mibBuilder.loadTexts: npsAuthenticationClientsTable.setDescription("A table containing performance information for instances of 'NPS Authentication Clients' objects.")
npsAuthenticationClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1), ).setIndexNames((0, "INFORMANT-ADV", "npsaucInstance"))
if mibBuilder.loadTexts: npsAuthenticationClientsEntry.setStatus('current')
if mibBuilder.loadTexts: npsAuthenticationClientsEntry.setDescription("Performance information for one particular instance of 'NPS Authentication Clients' object.")
npsaucInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucInstance.setStatus('current')
if mibBuilder.loadTexts: npsaucInstance.setDescription('Instance name.')
npsaucAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessAccepts.setDescription('The number of RADIUS Access-Accept packets sent.')
npsaucAccessAcceptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessAcceptsPerSec.setDescription('The average number of RADIUS Access-Accept packets per second sent.')
npsaucAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets sent.')
npsaucAccessChallengesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessChallengesPerSec.setDescription('The average number of RADIUS Access-Challenge packets per second sent.')
npsaucAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessRejects.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessRejects.setDescription('The number of RADIUS Access-Reject packets sent to this client.')
npsaucAccessRejectsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessRejectsPerSec.setDescription('The average number of RADIUS Access-Reject packets per second sent.')
npsaucAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessRequests.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessRequests.setDescription('The number of packets received on the authentication port.')
npsaucAccessRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucAccessRequestsPerSec.setDescription('The average number of packets per second received on the authentication port.')
npsaucBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsaucBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsaucBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsaucDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsaucDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsaucDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsaucDuplicateAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucDuplicateAccessRequests.setStatus('current')
if mibBuilder.loadTexts: npsaucDuplicateAccessRequests.setDescription('The number of duplicate RADIUS Access-Request packets received.')
npsaucDupAccessRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucDupAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucDupAccessRequestsPerSec.setDescription('The average number of duplicate RADIUS Access-Request packets per second received.')
npsaucFullAccessDecisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucFullAccessDecisions.setStatus('current')
if mibBuilder.loadTexts: npsaucFullAccessDecisions.setDescription('The number of Full-Access decisions sent to this client.')
npsaucFullAccessDecisionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucFullAccessDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucFullAccessDecisionsPerSec.setDescription('The average number of Full-Access decisions per second sent to this client.')
npsaucMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsaucMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsaucMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsaucPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsaucPacketsReceived.setDescription('The number of packets received.')
npsaucPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsaucPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucPacketsSent.setStatus('current')
if mibBuilder.loadTexts: npsaucPacketsSent.setDescription('The number of packets sent.')
npsaucPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucPacketsSentPerSec.setDescription('The average number of packets sent per second.')
npsaucProbationDecisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucProbationDecisions.setStatus('current')
if mibBuilder.loadTexts: npsaucProbationDecisions.setDescription('The number of probation decisions sent to this client.')
npsaucProbationDecisionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucProbationDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucProbationDecisionsPerSec.setDescription('The average number of probation decisions per second sent to this client.')
npsaucQuarantineDecisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucQuarantineDecisions.setStatus('current')
if mibBuilder.loadTexts: npsaucQuarantineDecisions.setDescription('The number of quarantine decisions sent to this client.')
npsaucQuarantineDecisionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucQuarantineDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucQuarantineDecisionsPerSec.setDescription('The average number of quarantine decisions per second sent to this client.')
npsaucUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsaucUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsaucUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 145, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaucUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsaucUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsAuthenticationProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146))
npsaupAccessAccepts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessAccepts.setDescription('The number of RADIUS Access-Accept packets received from this server.')
npsaupAccessAcceptsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessAcceptsPerSec.setDescription('The average number of RADIUS Access-Accept packets per second received from this server.')
npsaupAccessChallenges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets received from this server.')
npsaupAccessChallengesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessChallengesPerSec.setDescription('The average number of RADIUS Access-Challenge packets per second received from this server.')
npsaupAccessRejects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessRejects.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessRejects.setDescription('The number of RADIUS Access-Reject packets received from this server.')
npsaupAccessRejectsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessRejectsPerSec.setDescription('The average number of RADIUS Access-Reject packets per second received from this server.')
npsaupAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessRequests.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server.')
npsaupAccessRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupAccessRequestsPerSec.setDescription('The average number of RADIUS Access-Request packets per second sent to this server.')
npsaupBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsaupBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsaupBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsaupDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsaupDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsaupDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsaupFullAccessDecisions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupFullAccessDecisions.setStatus('current')
if mibBuilder.loadTexts: npsaupFullAccessDecisions.setDescription('The number of Full-Access decisions received from this server.')
npsaupFullAccessDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupFullAccessDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupFullAccessDecisionsPerSec.setDescription('The average number of Full-Access decisions per second received from this server.')
npsaupInvalidAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupInvalidAddresses.setStatus('current')
if mibBuilder.loadTexts: npsaupInvalidAddresses.setDescription('The number of packets received from unknown addresses.')
npsaupInvalidAddressesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupInvalidAddressesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupInvalidAddressesPerSec.setDescription('The average number of packets per second received from unknown addresses.')
npsaupMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsaupMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsaupMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsaupPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsaupPacketsReceived.setDescription('The number of packets received.')
npsaupPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsaupPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupPendingRequests.setStatus('current')
if mibBuilder.loadTexts: npsaupPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
npsaupProbationDecisions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupProbationDecisions.setStatus('current')
if mibBuilder.loadTexts: npsaupProbationDecisions.setDescription('The number of probation decisions received from this server.')
npsaupProbationDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupProbationDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupProbationDecisionsPerSec.setDescription('The average number of probation decisions per second received from this server.')
npsaupQuarantineDecisions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupQuarantineDecisions.setStatus('current')
if mibBuilder.loadTexts: npsaupQuarantineDecisions.setDescription('The number of quarantine decisions received from this server.')
npsaupQuarantineDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupQuarantineDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupQuarantineDecisionsPerSec.setDescription('The average number of quarantine decisions per second received from this server.')
npsaupRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: npsaupRequestTimeouts.setDescription('The number of request timeouts to this server.')
npsaupRequestTimeoutsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
npsaupRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupRetransmissions.setStatus('current')
if mibBuilder.loadTexts: npsaupRetransmissions.setDescription('The number of requests retransmitted to this server.')
npsaupRetransmissionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
npsaupUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsaupUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsaupUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 146, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsaupUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsaupUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsAuthenticationServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147))
npsausAccessAccepts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: npsausAccessAccepts.setDescription('The number of RADIUS Access-Accept packets sent.')
npsausAccessAcceptsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausAccessAcceptsPerSec.setDescription('The average number of RADIUS Access-Accept packets per second sent.')
npsausAccessChallenges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: npsausAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets sent.')
npsausAccessChallengesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausAccessChallengesPerSec.setDescription('The average number of RADIUS Access-Challenge packets per second sent.')
npsausAccessRejects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessRejects.setStatus('current')
if mibBuilder.loadTexts: npsausAccessRejects.setDescription('The number of RADIUS Access-Reject packets sent to this client.')
npsausAccessRejectsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausAccessRejectsPerSec.setDescription('The average number of RADIUS Access-Reject packets per second sent.')
npsausAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessRequests.setStatus('current')
if mibBuilder.loadTexts: npsausAccessRequests.setDescription('The number of packets received on the authentication port.')
npsausAccessRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausAccessRequestsPerSec.setDescription('The average number of packets per second received on the authentication port.')
npsausBadAuthenticators = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsausBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsausBadAuthenticatorsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsausDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsausDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsausDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsausDuplicateAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausDuplicateAccessRequests.setStatus('current')
if mibBuilder.loadTexts: npsausDuplicateAccessRequests.setDescription('The number of duplicate RADIUS Access-Request packets received.')
npsausDupAccessRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausDupAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausDupAccessRequestsPerSec.setDescription('The average number of duplicate RADIUS Access-Request packets per second received.')
npsausFullAccessDecisions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausFullAccessDecisions.setStatus('current')
if mibBuilder.loadTexts: npsausFullAccessDecisions.setDescription('The number of Full-Access decisions sent to this client.')
npsausFullAccessDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausFullAccessDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausFullAccessDecisionsPerSec.setDescription('The average number of Full-Access decisions per second sent to this client.')
npsausInvalidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausInvalidRequests.setStatus('current')
if mibBuilder.loadTexts: npsausInvalidRequests.setDescription('The number of RADIUS packets received from unknown clients or remote RADIUS servers.')
npsausInvalidRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausInvalidRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausInvalidRequestsPerSec.setDescription('The average number of RADIUS packets from unknown clients or remote RADIUS servers received per second.')
npsausMalformedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsausMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsausMalformedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsausPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsausPacketsReceived.setDescription('The number of packets received.')
npsausPacketsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsausPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausPacketsSent.setStatus('current')
if mibBuilder.loadTexts: npsausPacketsSent.setDescription('The number of packets sent.')
npsausPacketsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausPacketsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausPacketsSentPerSec.setDescription('The average number of packets sent per second.')
npsausProbationDecisions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausProbationDecisions.setStatus('current')
if mibBuilder.loadTexts: npsausProbationDecisions.setDescription('The number of probation decisions sent to this client.')
npsausProbationDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausProbationDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausProbationDecisionsPerSec.setDescription('The average number of probation decisions per second sent to this client.')
npsausQuarantineDecisions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausQuarantineDecisions.setStatus('current')
if mibBuilder.loadTexts: npsausQuarantineDecisions.setDescription('The number of quarantine decisions sent to this client.')
npsausQuarantineDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausQuarantineDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsausQuarantineDecisionsPerSec.setDescription('The average number of quarantine decisions per second sent to this client.')
npsausServerResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausServerResetTime.setStatus('current')
if mibBuilder.loadTexts: npsausServerResetTime.setDescription('The time elapsed (in hundredths of a second) since the configuration of this NPS server was reset because of a configuration change or because the service control manager sent a reset to the NPS service.')
npsausServerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausServerUpTime.setStatus('current')
if mibBuilder.loadTexts: npsausServerUpTime.setDescription('The time elapsed (in hundredths of a second) since the server process was started on this NPS server.')
npsausUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsausUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsausUnknownTypePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 147, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsausUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsausUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsPolicyEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 148))
npspeLastRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 148, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npspeLastRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: npspeLastRoundTripTime.setDescription('The interval (in hundredths of a second) between the most recent request to the policy engine and its response.')
npspeMatchedRemoteAccessPolicies = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 148, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npspeMatchedRemoteAccessPolicies.setStatus('current')
if mibBuilder.loadTexts: npspeMatchedRemoteAccessPolicies.setDescription('The number of remote access policies that have been matched.')
npspeMatchRemoteAccPolicyPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 148, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npspeMatchRemoteAccPolicyPerSec.setStatus('current')
if mibBuilder.loadTexts: npspeMatchRemoteAccPolicyPerSec.setDescription('The average number of remote access policies that have been matched per second.')
npspePendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 148, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npspePendingRequests.setStatus('current')
if mibBuilder.loadTexts: npspePendingRequests.setDescription('The number of requests that have entered the policy engine but have not yet completed the process.')
npsRemoteAccountingServersTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149), )
if mibBuilder.loadTexts: npsRemoteAccountingServersTable.setStatus('current')
if mibBuilder.loadTexts: npsRemoteAccountingServersTable.setDescription("A table containing performance information for instances of 'NPS Remote Accounting Servers' objects.")
npsRemoteAccountingServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1), ).setIndexNames((0, "INFORMANT-ADV", "npsracsInstance"))
if mibBuilder.loadTexts: npsRemoteAccountingServersEntry.setStatus('current')
if mibBuilder.loadTexts: npsRemoteAccountingServersEntry.setDescription("Performance information for one particular instance of 'NPS Remote Accounting Servers' object.")
npsracsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsInstance.setStatus('current')
if mibBuilder.loadTexts: npsracsInstance.setDescription('Instance name.')
npsracsAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: npsracsAccountingRequests.setDescription('The number of RADIUS Accounting-Request packets received on the accounting port.')
npsracsAccountingRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsAccountingRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsAccountingRequestsPerSec.setDescription('The average number of RADIUS Accounting-Request packets sent per second to the accounting port.')
npsracsAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: npsracsAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets received on the accounting port.')
npsracsAccountingResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsAccountingResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsAccountingResponsesPerSec.setDescription('The average number of RADIUS Accounting-Response packets received per second on the accounting port.')
npsracsBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsracsBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsracsBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsracsDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsracsDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsracsDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsracsLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsLastRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: npsracsLastRoundTripTime.setDescription('The interval (in hundredths of a second) between the most recent request to a remote NPS server and its response.')
npsracsMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsracsMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsracsMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsracsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsracsPacketsReceived.setDescription('The number of packets received.')
npsracsPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsracsPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsPendingRequests.setStatus('current')
if mibBuilder.loadTexts: npsracsPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
npsracsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsPortNumber.setStatus('current')
if mibBuilder.loadTexts: npsracsPortNumber.setDescription('The UDP port the proxy is using to send requests to this server.')
npsracsRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: npsracsRequestTimeouts.setDescription('The number of request timeouts to this server.')
npsracsRequestTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
npsracsRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsRetransmissions.setStatus('current')
if mibBuilder.loadTexts: npsracsRetransmissions.setDescription('The number of requests retransmitted to this server.')
npsracsRetransmissionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
npsracsUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsracsUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsracsUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 149, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsracsUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsracsUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsRemoteAuthServersTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150), )
if mibBuilder.loadTexts: npsRemoteAuthServersTable.setStatus('current')
if mibBuilder.loadTexts: npsRemoteAuthServersTable.setDescription("A table containing performance information for instances of 'NPS Remote Authentication Servers' objects.")
npsRemoteAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1), ).setIndexNames((0, "INFORMANT-ADV", "npsrausInstance"))
if mibBuilder.loadTexts: npsRemoteAuthServersEntry.setStatus('current')
if mibBuilder.loadTexts: npsRemoteAuthServersEntry.setDescription("Performance information for one particular instance of 'NPS Remote Authentication Servers' object.")
npsrausInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausInstance.setStatus('current')
if mibBuilder.loadTexts: npsrausInstance.setDescription('Instance name.')
npsrausAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessAccepts.setDescription('The number of RADIUS Access-Accept packets received from this server.')
npsrausAccessAcceptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessAcceptsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessAcceptsPerSec.setDescription('The average number of RADIUS Access-Accept packets per second received from this server.')
npsrausAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets received from this server.')
npsrausAccessChallengesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessChallengesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessChallengesPerSec.setDescription('The average number of RADIUS Access-Challenge packets per second received from this server.')
npsrausAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessRejects.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessRejects.setDescription('The number of RADIUS Access-Reject packets received from this server.')
npsrausAccessRejectsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessRejectsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessRejectsPerSec.setDescription('The average number of RADIUS Access-Reject packets per second received from this server.')
npsrausAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessRequests.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server.')
npsrausAccessRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausAccessRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausAccessRequestsPerSec.setDescription('The average number of RADIUS Access-Request packets per second sent to this server.')
npsrausBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: npsrausBadAuthenticators.setDescription('The number of RADIUS packets that contain an invalid Message Authenticator attribute.')
npsrausBadAuthenticatorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausBadAuthenticatorsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausBadAuthenticatorsPerSec.setDescription('The average number of RADIUS packets per second that contain an invalid Message Authenticator attribute.')
npsrausDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: npsrausDroppedPackets.setDescription("The number of incoming packets that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsrausDroppedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausDroppedPacketsPerSec.setDescription("The average number of incoming packets per second that are silently discarded for a reason other than 'malformed,' 'invalid Message Authenticator,' or 'unknown type'.")
npsrausFullAccessDecisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausFullAccessDecisions.setStatus('current')
if mibBuilder.loadTexts: npsrausFullAccessDecisions.setDescription('The number of Full-Access decisions received from this server.')
npsrausFullAccessDecisionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausFullAccessDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausFullAccessDecisionsPerSec.setDescription('The average number of Full-Access decisions per second received from this server.')
npsrausLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausLastRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: npsrausLastRoundTripTime.setDescription('The interval (in hundredths of a second) between the most recent request to a remote NPS server and its response.')
npsrausMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: npsrausMalformedPackets.setDescription('The number of packets containing malformed data received.')
npsrausMalformedPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausMalformedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausMalformedPacketsPerSec.setDescription('The average number of packets containing malformed data received per second.')
npsrausPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: npsrausPacketsReceived.setDescription('The number of packets received.')
npsrausPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausPacketsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausPacketsReceivedPerSec.setDescription('The average number of packets received per second.')
npsrausPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausPendingRequests.setStatus('current')
if mibBuilder.loadTexts: npsrausPendingRequests.setDescription('The number of requests destined for this server that have not yet timed out or received a response.')
npsrausPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausPortNumber.setStatus('current')
if mibBuilder.loadTexts: npsrausPortNumber.setDescription('The UDP port the proxy is using to send requests to this server.')
npsrausProbationDecisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausProbationDecisions.setStatus('current')
if mibBuilder.loadTexts: npsrausProbationDecisions.setDescription('The number of probation decisions received from this server.')
npsrausProbationDecisionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausProbationDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausProbationDecisionsPerSec.setDescription('The average number of probation decisions per second received from this server.')
npsrausQuarantineDecisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausQuarantineDecisions.setStatus('current')
if mibBuilder.loadTexts: npsrausQuarantineDecisions.setDescription('The number of quarantine decisions received from this server.')
npsrausQuarantineDecisionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausQuarantineDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausQuarantineDecisionsPerSec.setDescription('The average number of quarantine decisions per second received from this server.')
npsrausRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: npsrausRequestTimeouts.setDescription('The number of request timeouts to this server.')
npsrausRequestTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausRequestTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausRequestTimeoutsPerSec.setDescription('The average number of request timeouts per second to this server.')
npsrausRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausRetransmissions.setStatus('current')
if mibBuilder.loadTexts: npsrausRetransmissions.setDescription('The number of requests retransmitted to this server.')
npsrausRetransmissionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausRetransmissionsPerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausRetransmissionsPerSec.setDescription('The average number of requests retransmitted per second to this server.')
npsrausUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausUnknownType.setStatus('current')
if mibBuilder.loadTexts: npsrausUnknownType.setDescription('The number of unknown type (non-RADIUS) packets received.')
npsrausUnknownTypePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 150, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsrausUnknownTypePerSec.setStatus('current')
if mibBuilder.loadTexts: npsrausUnknownTypePerSec.setDescription('The average number of unknown type (non-RADIUS) packets received per second.')
npsSystemHealthValidatorsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151), )
if mibBuilder.loadTexts: npsSystemHealthValidatorsTable.setStatus('current')
if mibBuilder.loadTexts: npsSystemHealthValidatorsTable.setDescription("A table containing performance information for instances of 'NPS System Health Validators' objects.")
npsSystemHealthValidatorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1), ).setIndexNames((0, "INFORMANT-ADV", "npsshvInstance"))
if mibBuilder.loadTexts: npsSystemHealthValidatorsEntry.setStatus('current')
if mibBuilder.loadTexts: npsSystemHealthValidatorsEntry.setDescription("Performance information for one particular instance of 'NPS System Health Validators' object.")
npsshvInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvInstance.setStatus('current')
if mibBuilder.loadTexts: npsshvInstance.setDescription('Instance name.')
npsshvShvClientCommFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvClientCommFailures.setStatus('current')
if mibBuilder.loadTexts: npsshvShvClientCommFailures.setDescription('The number of Client-Communication failures from this health validator.')
npsshvShvClientCommFailurePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvClientCommFailurePerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvClientCommFailurePerSec.setDescription('The average number of Client-Communication failures per second from this health validator.')
npsshvShvClientComponentFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvClientComponentFailures.setStatus('current')
if mibBuilder.loadTexts: npsshvShvClientComponentFailures.setDescription('The number of Client-Component failures from this health validator.')
npsshvShvClientComponentFailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvClientComponentFailSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvClientComponentFailSec.setDescription('The average number of Client-Component failures per second from this health validator.')
npsshvShvCompliances = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvCompliances.setStatus('current')
if mibBuilder.loadTexts: npsshvShvCompliances.setDescription('The number of compliant decisions from this health validator.')
npsshvShvCompliancesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvCompliancesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvCompliancesPerSec.setDescription('The average number of compliant decisions per second from this health validator.')
npsshvShvLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvLastRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: npsshvShvLastRoundTripTime.setDescription('The interval (in hundredths of a second) between the most recent request to a system health validator and its response.')
npsshvShvNonCompliances = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvNonCompliances.setStatus('current')
if mibBuilder.loadTexts: npsshvShvNonCompliances.setDescription('The number of non-compliant decisions from this health validator.')
npsshvShvNonCompliancesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvNonCompliancesPerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvNonCompliancesPerSec.setDescription('The average number of non-compliant decisions per second from this health validator.')
npsshvShvNoneFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvNoneFailures.setStatus('current')
if mibBuilder.loadTexts: npsshvShvNoneFailures.setDescription('The number of none failures from this health validator.')
npsshvShvNoneFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvNoneFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvNoneFailuresPerSec.setDescription('The average number of none failures per second from this health validator.')
npsshvShvOtherFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvOtherFailures.setStatus('current')
if mibBuilder.loadTexts: npsshvShvOtherFailures.setDescription('The number of other failures from this health validator.')
npsshvShvOtherFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvOtherFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvOtherFailuresPerSec.setDescription('The average number of other failures per second from this health validator.')
npsshvShvServerCommFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvServerCommFailures.setStatus('current')
if mibBuilder.loadTexts: npsshvShvServerCommFailures.setDescription('The number of Server-Communication failures from this health validator.')
npsshvShvServerCommnFailPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvServerCommnFailPerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvServerCommnFailPerSec.setDescription('The average number of Server-Communication failures per second from this health validator.')
npsshvShvServerComponentFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvServerComponentFailures.setStatus('current')
if mibBuilder.loadTexts: npsshvShvServerComponentFailures.setDescription('The number of Server-Component failures from this health validator.')
npsshvShvServerCompFailurePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 151, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npsshvShvServerCompFailurePerSec.setStatus('current')
if mibBuilder.loadTexts: npsshvShvServerCompFailurePerSec.setDescription('The average number of Server-Component failures per second from this health validator.')
ocspServerConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 152), )
if mibBuilder.loadTexts: ocspServerConnectionsTable.setStatus('current')
if mibBuilder.loadTexts: ocspServerConnectionsTable.setDescription("A table containing performance information for instances of 'OCSP Server Connections' objects.")
ocspServerConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 152, 1), ).setIndexNames((0, "INFORMANT-ADV", "ocspscInstance"))
if mibBuilder.loadTexts: ocspServerConnectionsEntry.setStatus('current')
if mibBuilder.loadTexts: ocspServerConnectionsEntry.setDescription("Performance information for one particular instance of 'OCSP Server Connections' object.")
ocspscInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 152, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocspscInstance.setStatus('current')
if mibBuilder.loadTexts: ocspscInstance.setDescription('Instance name.')
ocspscActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 152, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocspscActiveConnections.setStatus('current')
if mibBuilder.loadTexts: ocspscActiveConnections.setDescription('Number of active connections')
rpcPerHTTPProxy = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153))
if mibBuilder.loadTexts: rpcPerHTTPProxy.setStatus('current')
if mibBuilder.loadTexts: rpcPerHTTPProxy.setDescription('The RPC/HTTP Proxy object contains the counters that display information for RPC/HTTP proxy sizing, trouble shooting and reporting.')
rpcpAttemptLoadBalBrkRqstsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpAttemptLoadBalBrkRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: rpcpAttemptLoadBalBrkRqstsPerSec.setDescription('Rate of load balancing messages that the RPC Proxy attempted.')
rpcpAttemptLoadBalDecisionPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpAttemptLoadBalDecisionPerSec.setStatus('current')
if mibBuilder.loadTexts: rpcpAttemptLoadBalDecisionPerSec.setDescription('Rate of attempted load balancing decisions by the RPC Proxy.')
rpcpCurNumInRPCOverHTTPConn = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpCurNumInRPCOverHTTPConn.setStatus('current')
if mibBuilder.loadTexts: rpcpCurNumInRPCOverHTTPConn.setDescription('Current number of front-end HTTP connections.')
rpcpCurrentNumberOfUniqueUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpCurrentNumberOfUniqueUsers.setStatus('current')
if mibBuilder.loadTexts: rpcpCurrentNumberOfUniqueUsers.setDescription('Number of unique users currently connected to a back-end server via RPC/HTTP.')
rpcpFailLoadBalBrokerRqstsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpFailLoadBalBrokerRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: rpcpFailLoadBalBrokerRqstsPerSec.setDescription('Rate of load balancing messages that the RPC Proxy failed to complete.')
rpcpFailLoadBalDecisionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpFailLoadBalDecisionsPerSec.setStatus('current')
if mibBuilder.loadTexts: rpcpFailLoadBalDecisionsPerSec.setDescription('Rate of attempted load balancing decisions by the RPC Proxy that where unable to contact any load balancing service.')
rpcpNumBackEndConnAttemptsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpNumBackEndConnAttemptsPerSec.setStatus('current')
if mibBuilder.loadTexts: rpcpNumBackEndConnAttemptsPerSec.setDescription('Rate at which RPC Proxy attempts to establish a connection to a back-end server.')
rpcpNumFailBackEndConnAttmPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpNumFailBackEndConnAttmPerSec.setStatus('current')
if mibBuilder.loadTexts: rpcpNumFailBackEndConnAttmPerSec.setDescription('Rate at which the RPC Proxy attemts but fails to establish a connection to a back-end.')
rpcpRPCPerHTTPRequestsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpRPCPerHTTPRequestsPerSecond.setStatus('current')
if mibBuilder.loadTexts: rpcpRPCPerHTTPRequestsPerSecond.setDescription('Rate of RPC/HTTP requests sent to the back-end servers.')
rpcpTotalInBandwidthBackEndSrvrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpTotalInBandwidthBackEndSrvrs.setStatus('current')
if mibBuilder.loadTexts: rpcpTotalInBandwidthBackEndSrvrs.setDescription('Bytes/sec received from the RPC Proxy by back-end servers.')
rpcpTotalOutBandwidthBackEndSrvr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 153, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpTotalOutBandwidthBackEndSrvr.setStatus('current')
if mibBuilder.loadTexts: rpcpTotalOutBandwidthBackEndSrvr.setDescription('Bytes/sec sent to the RPC Proxy by back-end servers.')
rpcPerHTTPProxyPerServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 154), )
if mibBuilder.loadTexts: rpcPerHTTPProxyPerServerTable.setStatus('current')
if mibBuilder.loadTexts: rpcPerHTTPProxyPerServerTable.setDescription('Number of connections to a back-end server via RPC/HTTP.')
rpcPerHTTPProxyPerServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 154, 1), ).setIndexNames((0, "INFORMANT-ADV", "rpcpsInstance"))
if mibBuilder.loadTexts: rpcPerHTTPProxyPerServerEntry.setStatus('current')
if mibBuilder.loadTexts: rpcPerHTTPProxyPerServerEntry.setDescription("Performance information for one particular instance of 'RPC/HTTP Proxy Per Server' object.")
rpcpsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 154, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpsInstance.setStatus('current')
if mibBuilder.loadTexts: rpcpsInstance.setDescription('Instance name.')
rpcpsCurrentNumberOfBackendConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 154, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcpsCurrentNumberOfBackendConns.setStatus('current')
if mibBuilder.loadTexts: rpcpsCurrentNumberOfBackendConns.setDescription('Number of connections to a back-end server via RPC/HTTP.')
searchGatherer = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155))
if mibBuilder.loadTexts: searchGatherer.setStatus('current')
if mibBuilder.loadTexts: searchGatherer.setDescription('Counters for the Windows Search Service Gathering service object')
sgActiveQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgActiveQueueLength.setStatus('current')
if mibBuilder.loadTexts: sgActiveQueueLength.setDescription('The number of documents waiting for robot threads. If this number is not 0, all threads should be filtering.')
sgAdminClients = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgAdminClients.setStatus('current')
if mibBuilder.loadTexts: sgAdminClients.setDescription('The number of currently connected administrative clients.')
sgAllNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgAllNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: sgAllNotificationsReceived.setDescription('The total number of notifications received from all notification sources including file system.')
sgDelayedDocuments = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDelayedDocuments.setStatus('current')
if mibBuilder.loadTexts: sgDelayedDocuments.setDescription('The number of documents delayed due to site hit frequency rules.')
sgDocumentEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDocumentEntries.setStatus('current')
if mibBuilder.loadTexts: sgDocumentEntries.setDescription('The number of document entries currently in memory. Zero means no indexing activity is going on.')
sgDocumentsDelayedRetry = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDocumentsDelayedRetry.setStatus('current')
if mibBuilder.loadTexts: sgDocumentsDelayedRetry.setDescription('The number of documents that will be retried after time-out. When this is non-zero, it means that the local server it is crawling is shut down.')
sgDocumentsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDocumentsFiltered.setStatus('current')
if mibBuilder.loadTexts: sgDocumentsFiltered.setDescription('The number of times a filter object was created. This corresponds to the total number of documents filtered in the system since startup.')
sgDocumentsFilteredRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDocumentsFilteredRate.setStatus('current')
if mibBuilder.loadTexts: sgDocumentsFilteredRate.setDescription('The number of documents filtered per second.')
sgDocumentsSuccessfullyFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDocumentsSuccessfullyFiltered.setStatus('current')
if mibBuilder.loadTexts: sgDocumentsSuccessfullyFiltered.setDescription('The number of documents successfully filtered.')
sgDocumentsSuccessFilteredRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgDocumentsSuccessFilteredRate.setStatus('current')
if mibBuilder.loadTexts: sgDocumentsSuccessFilteredRate.setDescription('The number of successfully filtered documents per second.')
sgExtNotificationsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgExtNotificationsRate.setStatus('current')
if mibBuilder.loadTexts: sgExtNotificationsRate.setDescription('The rate of external notifications received per second.')
sgExtNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgExtNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: sgExtNotificationsReceived.setDescription('The total number of notifications received from all notification sources excluding file system.')
sgFilterObjects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgFilterObjects.setStatus('current')
if mibBuilder.loadTexts: sgFilterObjects.setDescription('The number of filter objects in the system. Each filter object corresponds to a URL currently being filtered.')
sgFilterProcessCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgFilterProcessCreated.setStatus('current')
if mibBuilder.loadTexts: sgFilterProcessCreated.setDescription('The total number of times a filter process was created or restarted. Having too many filter processes created indicates that filtering is having trouble with the data in the documents.')
sgFilterProcesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgFilterProcesses.setStatus('current')
if mibBuilder.loadTexts: sgFilterProcesses.setDescription('The number of filtering processes in the system.')
sgFilterProcessesMax = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgFilterProcessesMax.setStatus('current')
if mibBuilder.loadTexts: sgFilterProcessesMax.setDescription('The maximum number of filtering processes that have existed in the system since startup.')
sgFilteringThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgFilteringThreads.setStatus('current')
if mibBuilder.loadTexts: sgFilteringThreads.setDescription('The total number of filtering threads in the system. This number is calculated based on your system resources.')
sgHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgHeartbeats.setStatus('current')
if mibBuilder.loadTexts: sgHeartbeats.setDescription('The total number of heartbeats counted since startup. A heartbeat occurs once every 10 seconds while the service is running. If the service is not running there will be no heartbeat and the number of ticks will not be incremented.')
sgHeartbeatsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgHeartbeatsRate.setStatus('current')
if mibBuilder.loadTexts: sgHeartbeatsRate.setDescription('Displays one heartbeat every 10 seconds.')
sgIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgIdleThreads.setStatus('current')
if mibBuilder.loadTexts: sgIdleThreads.setDescription('The number of threads waiting for documents.')
sgNotificationSources = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgNotificationSources.setStatus('current')
if mibBuilder.loadTexts: sgNotificationSources.setDescription('Currently connected external notification sources.')
sgNotificationsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgNotificationsRate.setStatus('current')
if mibBuilder.loadTexts: sgNotificationsRate.setDescription('The rate of external notifications received per second.')
sgPerformanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgPerformanceLevel.setStatus('current')
if mibBuilder.loadTexts: sgPerformanceLevel.setDescription('Indicates the level of the amount of system resources that the Gatherer service is allowed to use.')
sgReasonToBackOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgReasonToBackOff.setStatus('current')
if mibBuilder.loadTexts: sgReasonToBackOff.setDescription('The code describing why the Gatherer service went into back off state. 0 - up and running 1 - high system IO traffic 2 - high notifications rate 3 - delayed recovery in progress (not implemented) 4 - back off due to user activity 5 - Battery Low 6 - Memory Low 99 - back off for some internal reason (forced by Search itself) While backing off, no indexing is performed. To resume the indexing you must eliminate the reason for back off. If the Gatherer service is in back off state, the Search service is paused and there is a message in the event log.')
sgServerObjects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgServerObjects.setStatus('current')
if mibBuilder.loadTexts: sgServerObjects.setDescription('The number of servers recently accessed by the system.')
sgServerObjectsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgServerObjectsCreated.setStatus('current')
if mibBuilder.loadTexts: sgServerObjectsCreated.setDescription('The number of times a new server object had to be created.')
sgServersCurrentlyUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgServersCurrentlyUnavailable.setStatus('current')
if mibBuilder.loadTexts: sgServersCurrentlyUnavailable.setDescription('A server becomes unavailable when a number of requests to that server time out.')
sgServersUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgServersUnavailable.setStatus('current')
if mibBuilder.loadTexts: sgServersUnavailable.setDescription('A server becomes unavailable when a number of requests to that server time out.')
sgStemmersCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgStemmersCached.setStatus('current')
if mibBuilder.loadTexts: sgStemmersCached.setDescription('Number of available cached stemmer instances. Too many may indicate a resource usage problem.')
sgSystemIOTrafficRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgSystemIOTrafficRate.setStatus('current')
if mibBuilder.loadTexts: sgSystemIOTrafficRate.setDescription('System IO (disk) traffic rate in KB/s detected by back off logic')
sgThreadsAccessingNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgThreadsAccessingNetwork.setStatus('current')
if mibBuilder.loadTexts: sgThreadsAccessingNetwork.setDescription('The number of threads waiting for a response from the filter process. If no activity is going on and this number is equal to number of filtering threads, it may indicate a network problem or unavailability of the server it is crawling.')
sgThreadsInPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgThreadsInPlugIns.setStatus('current')
if mibBuilder.loadTexts: sgThreadsInPlugIns.setDescription('The number of threads waiting for plug-ins to complete an operation.')
sgThreadsBlockedDueToBackOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgThreadsBlockedDueToBackOff.setStatus('current')
if mibBuilder.loadTexts: sgThreadsBlockedDueToBackOff.setDescription('The number of threads blocked due to back off event')
sgTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgTimeOuts.setStatus('current')
if mibBuilder.loadTexts: sgTimeOuts.setDescription('The total number of timeouts detected by the system since startup.')
sgWordBreakersCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 155, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgWordBreakersCached.setStatus('current')
if mibBuilder.loadTexts: sgWordBreakersCached.setDescription('Number of available cached word breakers instances')
searchGathererProjectsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156), )
if mibBuilder.loadTexts: searchGathererProjectsTable.setStatus('current')
if mibBuilder.loadTexts: searchGathererProjectsTable.setDescription('Counters for the Windows Search Service Gatherer Project object')
searchGathererProjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1), ).setIndexNames((0, "INFORMANT-ADV", "sgpInstance"))
if mibBuilder.loadTexts: searchGathererProjectsEntry.setStatus('current')
if mibBuilder.loadTexts: searchGathererProjectsEntry.setDescription("Performance information for one particular instance of 'Search Gatherer Projects' object.")
sgpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpInstance.setStatus('current')
if mibBuilder.loadTexts: sgpInstance.setDescription('Instance name.')
sgpAccessedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpAccessedFileRate.setStatus('current')
if mibBuilder.loadTexts: sgpAccessedFileRate.setDescription('The number of documents accessed via file system per second.')
sgpAccessedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpAccessedFiles.setStatus('current')
if mibBuilder.loadTexts: sgpAccessedFiles.setDescription('The number of documents accessed via file system.')
sgpAdaptiveCrawlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpAdaptiveCrawlErrors.setStatus('current')
if mibBuilder.loadTexts: sgpAdaptiveCrawlErrors.setDescription('Documents incorrectly rejected by adaptive crawl')
sgpChangedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpChangedDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpChangedDocuments.setDescription('Documents which have changed since the last crawl')
sgpCrawlsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpCrawlsInProgress.setStatus('current')
if mibBuilder.loadTexts: sgpCrawlsInProgress.setDescription('Number of crawls in progress.')
sgpDelayedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDelayedDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpDelayedDocuments.setDescription('The number of documents delayed due to site hit frequency rules.')
sgpDocumentAddRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentAddRate.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentAddRate.setDescription('The number of document additions per second.')
sgpDocumentAdditions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentAdditions.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentAdditions.setDescription('The number of add notifications.')
sgpDocumentDeleteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentDeleteRate.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentDeleteRate.setDescription('The number of document deletes per second.')
sgpDocumentDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentDeletes.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentDeletes.setDescription('The number of delete notifications.')
sgpDocumentModifies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentModifies.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentModifies.setDescription('The number of modify notifications.')
sgpDocumentModifiesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentModifiesRate.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentModifiesRate.setDescription('The number of modify notifications per second.')
sgpDocumentMoveAndRenameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentMoveAndRenameRate.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentMoveAndRenameRate.setDescription('The number of document Moves and Renames per second.')
sgpDocumentMovesPerRenames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentMovesPerRenames.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentMovesPerRenames.setDescription('The number of Move/Rename notifications.')
sgpDocumentsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentsInProgress.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentsInProgress.setDescription('The number of documents in progress.')
sgpDocumentsOnHold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpDocumentsOnHold.setStatus('current')
if mibBuilder.loadTexts: sgpDocumentsOnHold.setDescription('The number of documents on hold because a document with the same URL is currently in process.')
sgpErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpErrorRate.setStatus('current')
if mibBuilder.loadTexts: sgpErrorRate.setDescription('The number of filtered documents which returned an error per second.')
sgpFileErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFileErrors.setStatus('current')
if mibBuilder.loadTexts: sgpFileErrors.setDescription('The number of file protocol errors received while getting documents.')
sgpFileErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFileErrorsRate.setStatus('current')
if mibBuilder.loadTexts: sgpFileErrorsRate.setDescription('The number of file protocol errors received per second.')
sgpFilteredOffice = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFilteredOffice.setStatus('current')
if mibBuilder.loadTexts: sgpFilteredOffice.setDescription('The number of office documents filtered.')
sgpFilteredOfficeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFilteredOfficeRate.setStatus('current')
if mibBuilder.loadTexts: sgpFilteredOfficeRate.setDescription('The number of office documents filtered per second.')
sgpFilteredText = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFilteredText.setStatus('current')
if mibBuilder.loadTexts: sgpFilteredText.setDescription('The number of text documents filtered.')
sgpFilteredTextRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFilteredTextRate.setStatus('current')
if mibBuilder.loadTexts: sgpFilteredTextRate.setDescription('The number of text documents filtered per second.')
sgpFilteringDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpFilteringDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpFilteringDocuments.setDescription('The number of documents currently being filtered.')
sgpGathererPausedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpGathererPausedFlag.setStatus('current')
if mibBuilder.loadTexts: sgpGathererPausedFlag.setDescription('The Gatherer paused flag indicates if the Gatherer has been paused.')
sgpHistoryRecoveryProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpHistoryRecoveryProgress.setStatus('current')
if mibBuilder.loadTexts: sgpHistoryRecoveryProgress.setDescription('Percentage of the history recovery completed')
sgpIncrementalCrawls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpIncrementalCrawls.setStatus('current')
if mibBuilder.loadTexts: sgpIncrementalCrawls.setDescription('Number of incremental crawls in progress.')
sgpIteratingHistInProgressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpIteratingHistInProgressFlag.setStatus('current')
if mibBuilder.loadTexts: sgpIteratingHistInProgressFlag.setDescription('The Iterating history in progress flag indicates if the Gatherer is currently iterating over the URL history.')
sgpNotModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpNotModified.setStatus('current')
if mibBuilder.loadTexts: sgpNotModified.setDescription('The number of documents which were not filtered because no modification was detected since the last crawl.')
sgpProcessedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpProcessedDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpProcessedDocuments.setDescription('The number of documents processed since the history has been reset.')
sgpProcessedDocumentsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpProcessedDocumentsRate.setStatus('current')
if mibBuilder.loadTexts: sgpProcessedDocumentsRate.setDescription('The number of documents processed per second.')
sgpRecoveryInProgressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpRecoveryInProgressFlag.setStatus('current')
if mibBuilder.loadTexts: sgpRecoveryInProgressFlag.setDescription('The recovery in progress flag indicates if recovery is currently in progress. Indexing will not be resumed until this flag is off.')
sgpRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpRetries.setStatus('current')
if mibBuilder.loadTexts: sgpRetries.setDescription('The total number of times a document access has been retried. Having this number high may indicate a problem with accessing the data.')
sgpRetriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpRetriesRate.setStatus('current')
if mibBuilder.loadTexts: sgpRetriesRate.setDescription('The number of retries per second.')
sgpStartedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpStartedDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpStartedDocuments.setDescription('The number of documents initiated into the Gatherer service. This includes the number of documents on hold, in the active queue, and currently filtered. When this number goes to zero during a crawl, it means the crawl will be done soon.')
sgpStatusError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpStatusError.setStatus('current')
if mibBuilder.loadTexts: sgpStatusError.setDescription('The number of filtered documents which returned an error.')
sgpStatusSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpStatusSuccess.setStatus('current')
if mibBuilder.loadTexts: sgpStatusSuccess.setDescription('The number of successfully filtered documents.')
sgpSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpSuccessRate.setStatus('current')
if mibBuilder.loadTexts: sgpSuccessRate.setDescription('The number of successfully filtered documents per second.')
sgpURLsInHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpURLsInHistory.setStatus('current')
if mibBuilder.loadTexts: sgpURLsInHistory.setDescription('The number of files (URLs) in the history list. This indicates the total size of your document corpus that was indexed.')
sgpUniqueDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpUniqueDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpUniqueDocuments.setDescription('Number of unique documents in the system. Documents are considered not unique if their contents is the same.')
sgpWaitingDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 156, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgpWaitingDocuments.setStatus('current')
if mibBuilder.loadTexts: sgpWaitingDocuments.setDescription('The number of documents waiting to be processed. When this number goes to zero the catalog is idle. This number indicates the total queue size of unprocessed documents in the gatherer.')
searchIndexerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157), )
if mibBuilder.loadTexts: searchIndexerTable.setStatus('current')
if mibBuilder.loadTexts: searchIndexerTable.setDescription("A table containing performance information for instances of 'Search Indexer' objects.")
searchIndexerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1), ).setIndexNames((0, "INFORMANT-ADV", "siInstance"))
if mibBuilder.loadTexts: searchIndexerEntry.setStatus('current')
if mibBuilder.loadTexts: searchIndexerEntry.setDescription("Performance information for one particular instance of 'Search Indexer' object.")
siInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInstance.setStatus('current')
if mibBuilder.loadTexts: siInstance.setDescription('Instance name.')
siActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siActiveConnections.setStatus('current')
if mibBuilder.loadTexts: siActiveConnections.setDescription('Active Connections')
siCleanWidSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siCleanWidSets.setStatus('current')
if mibBuilder.loadTexts: siCleanWidSets.setDescription('Number of clean WidSets')
siDirtyWidSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siDirtyWidSets.setStatus('current')
if mibBuilder.loadTexts: siDirtyWidSets.setDescription('Number of dirty WidSets')
siDocumentsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siDocumentsFiltered.setStatus('current')
if mibBuilder.loadTexts: siDocumentsFiltered.setDescription('Number of Documents Filtered')
siIndexSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siIndexSize.setStatus('current')
if mibBuilder.loadTexts: siIndexSize.setDescription('Size of Index')
siL0IndexesWordlists = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL0IndexesWordlists.setStatus('current')
if mibBuilder.loadTexts: siL0IndexesWordlists.setDescription('The number of L0 Indexes (Wordlists)')
siL0MergeFlushCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL0MergeFlushCount.setStatus('current')
if mibBuilder.loadTexts: siL0MergeFlushCount.setDescription('The number of L0 merges (flushes) since the catalog was loaded')
siL0MergeFlushSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL0MergeFlushSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL0MergeFlushSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L0 merges (flushes) since the catalog has been loaded')
siL0MergeFlushSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL0MergeFlushSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL0MergeFlushSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L0 merges (flushes).')
siL0MergesFlushesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL0MergesFlushesNow.setStatus('current')
if mibBuilder.loadTexts: siL0MergesFlushesNow.setDescription('The number of L0 merges (flushes) in progress at any one moment.')
siL1MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL1MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL1MergeCount.setDescription('The number of L1 merges since the catalog was loaded')
siL1MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL1MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL1MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L1 merges since the catalog has been loaded')
siL1MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL1MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL1MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L1 merges.')
siL1MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL1MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL1MergesNow.setDescription('The number of L1 merges in progress at any one moment.')
siL2MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL2MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL2MergeCount.setDescription('The number of L2 merges since the catalog was loaded')
siL2MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL2MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL2MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L2 merges since the catalog has been loaded')
siL2MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL2MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL2MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L2 merges.')
siL2MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL2MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL2MergesNow.setDescription('The number of L2 merges in progress at any one moment.')
siL3MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL3MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL3MergeCount.setDescription('The number of L3 merges since the catalog was loaded')
siL3MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL3MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL3MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L3 merges since the catalog has been loaded')
siL3MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL3MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL3MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L3 merges.')
siL3MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL3MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL3MergesNow.setDescription('The number of L3 merges in progress at any one moment.')
siL4MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL4MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL4MergeCount.setDescription('The number of L4 merges since the catalog was loaded')
siL4MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL4MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL4MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L4 merges since the catalog has been loaded')
siL4MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL4MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL4MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L4 merges.')
siL4MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL4MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL4MergesNow.setDescription('The number of L4 merges in progress at any one moment.')
siL5MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL5MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL5MergeCount.setDescription('The number of L5 merges since the catalog was loaded')
siL5MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL5MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL5MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L5 merges since the catalog has been loaded')
siL5MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL5MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL5MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L5 merges.')
siL5MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL5MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL5MergesNow.setDescription('The number of L5 merges in progress at any one moment.')
siL6MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL6MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL6MergeCount.setDescription('The number of L6 merges since the catalog was loaded')
siL6MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL6MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL6MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L6 merges since the catalog has been loaded')
siL6MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL6MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL6MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L6 merges.')
siL6MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL6MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL6MergesNow.setDescription('The number of L6 merges in progress at any one moment.')
siL7MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL7MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL7MergeCount.setDescription('The number of L7 merges since the catalog was loaded')
siL7MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL7MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL7MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L7 merges since the catalog has been loaded')
siL7MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL7MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL7MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L7 merges.')
siL7MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL7MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL7MergesNow.setDescription('The number of L7 merges in progress at any one moment.')
siL8MergeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL8MergeCount.setStatus('current')
if mibBuilder.loadTexts: siL8MergeCount.setDescription('The number of L8 merges since the catalog was loaded')
siL8MergeSpeedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL8MergeSpeedAverage.setStatus('current')
if mibBuilder.loadTexts: siL8MergeSpeedAverage.setDescription('The average value [documents/hour] computed for the speed of L8 merges since the catalog has been loaded')
siL8MergeSpeedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL8MergeSpeedLast.setStatus('current')
if mibBuilder.loadTexts: siL8MergeSpeedLast.setDescription('The last value [documents/hour] computed for the speed of L8 merges.')
siL8MergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siL8MergesNow.setStatus('current')
if mibBuilder.loadTexts: siL8MergesNow.setDescription('The number of L8 merges in progress at any one moment.')
siMasterIndexLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siMasterIndexLevel.setStatus('current')
if mibBuilder.loadTexts: siMasterIndexLevel.setDescription('The level of the master index.')
siMasterMergeProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siMasterMergeProgress.setStatus('current')
if mibBuilder.loadTexts: siMasterMergeProgress.setDescription('Master Merge Progress')
siMasterMergesNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siMasterMergesNow.setStatus('current')
if mibBuilder.loadTexts: siMasterMergesNow.setDescription('Indicator if a master merge is going on.')
siMasterMergesToDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siMasterMergesToDate.setStatus('current')
if mibBuilder.loadTexts: siMasterMergesToDate.setDescription('Number of Master Merges to Date')
siPersistentIndexes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexes.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexes.setDescription('Number of Persistent Indexes')
siPersistentIndexesL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL1.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL1.setDescription('The number of L1 Indexes')
siPersistentIndexesL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL2.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL2.setDescription('The number of L2 Indexes')
siPersistentIndexesL3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL3.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL3.setDescription('The number of L3 Indexes')
siPersistentIndexesL4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL4.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL4.setDescription('The number of L4 Indexes')
siPersistentIndexesL5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL5.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL5.setDescription('The number of L5 Indexes')
siPersistentIndexesL6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL6.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL6.setDescription('The number of L6 Indexes')
siPersistentIndexesL7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL7.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL7.setDescription('The number of L7 Indexes')
siPersistentIndexesL8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siPersistentIndexesL8.setStatus('current')
if mibBuilder.loadTexts: siPersistentIndexesL8.setDescription('The number of L8 Indexes')
siQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siQueries.setStatus('current')
if mibBuilder.loadTexts: siQueries.setDescription('Number of Queries')
siQueriesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siQueriesFailed.setStatus('current')
if mibBuilder.loadTexts: siQueriesFailed.setDescription('Number of Queries Failed')
siQueriesSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siQueriesSucceeded.setStatus('current')
if mibBuilder.loadTexts: siQueriesSucceeded.setDescription('Number of Queries Succeeded')
siShadowMergeLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siShadowMergeLevels.setStatus('current')
if mibBuilder.loadTexts: siShadowMergeLevels.setDescription('Shadow Merge Levels')
siShadowMergeLevelsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siShadowMergeLevelsThreshold.setStatus('current')
if mibBuilder.loadTexts: siShadowMergeLevelsThreshold.setDescription('Shadow Merge Levels Threshold')
siUniqueKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siUniqueKeys.setStatus('current')
if mibBuilder.loadTexts: siUniqueKeys.setDescription('Number of Unique Keys')
siWorkItemsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siWorkItemsCreated.setStatus('current')
if mibBuilder.loadTexts: siWorkItemsCreated.setDescription('Number of invalidator work items that were created')
siWorkItemsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 157, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siWorkItemsDeleted.setStatus('current')
if mibBuilder.loadTexts: siWorkItemsDeleted.setDescription('Number of invalidator work items that were deleted')
serverForNFS = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158))
if mibBuilder.loadTexts: serverForNFS.setStatus('current')
if mibBuilder.loadTexts: serverForNFS.setDescription('The NfsSvr Object Type reports Server for NFS performance on your system.')
snfsAnonymousAccesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsAnonymousAccesses.setStatus('current')
if mibBuilder.loadTexts: snfsAnonymousAccesses.setDescription('Anonymous Accesses is the number of requests received whose UIDs are not mapped to valid Windows NT accounts.')
snfsBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsBytesRead.setStatus('current')
if mibBuilder.loadTexts: snfsBytesRead.setDescription('Bytes Read is the total number of bytes read by NFS clients.')
snfsBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: snfsBytesReadPerSec.setDescription('Bytes Read/sec is the rate at which bytes are read by NFS clients.')
snfsBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsBytesWritten.setStatus('current')
if mibBuilder.loadTexts: snfsBytesWritten.setDescription('Bytes Written is the total number of bytes written by NFS clients.')
snfsBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: snfsBytesWrittenPerSec.setDescription('Bytes Written/sec is the rate at which bytes are written by NFS clients.')
snfsDRCHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsDRCHits.setStatus('current')
if mibBuilder.loadTexts: snfsDRCHits.setDescription('DRC Hits is the number of duplicate requests received while the original packet is still in the Duplicate Request Cache.')
snfsDRCReplies = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsDRCReplies.setStatus('current')
if mibBuilder.loadTexts: snfsDRCReplies.setDescription('DRC Replies is the number of duplicate requests whose replies were satisfied from the Dupicate Request Cache.')
snfsDRCReplyPresent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsDRCReplyPresent.setStatus('current')
if mibBuilder.loadTexts: snfsDRCReplyPresent.setDescription('DRC Reply Present is the number of duplicate requests whose replies existed in the Duplicate Request Cache at packet receipt. (Packet already processed, and reply sent)')
snfsDRCSendErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsDRCSendErrors.setStatus('current')
if mibBuilder.loadTexts: snfsDRCSendErrors.setDescription('DRC Send Errors is the number of attempted, but failed, replies from the Duplicate Request Cache.')
snfsDiscardedDRCPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsDiscardedDRCPackets.setStatus('current')
if mibBuilder.loadTexts: snfsDiscardedDRCPackets.setDescription('Discarded DRC Packets is the number of Duplicate Request Cache Packets discarded because the cache is full.')
snfsMOUNTErrorsV1 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMOUNTErrorsV1.setStatus('current')
if mibBuilder.loadTexts: snfsMOUNTErrorsV1.setDescription('MOUNT Errors (V1) is the total number of version 1 MOUNT requests that did not complete successfully.')
snfsMOUNTErrorsV3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMOUNTErrorsV3.setStatus('current')
if mibBuilder.loadTexts: snfsMOUNTErrorsV3.setDescription('MOUNT Errors (V3) is the total number of version 3 MOUNT requests that did not complete successfully.')
snfsMV100NULLMount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV100NULLMount.setStatus('current')
if mibBuilder.loadTexts: snfsMV100NULLMount.setDescription('MV1 (00) NULL Mount is the number of such version 1 requests received.')
snfsMV101Mount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV101Mount.setStatus('current')
if mibBuilder.loadTexts: snfsMV101Mount.setDescription('MV1 (01) Mount is the number of such version 1 requests received.')
snfsMV102DumpMounts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV102DumpMounts.setStatus('current')
if mibBuilder.loadTexts: snfsMV102DumpMounts.setDescription('MV1 (02) Dump Mounts is the number of such version 1 requests received.')
snfsMV103Unmount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV103Unmount.setStatus('current')
if mibBuilder.loadTexts: snfsMV103Unmount.setDescription('MV1 (03) Unmount is the number of such version 1 requests received.')
snfsMV104UnmountAll = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV104UnmountAll.setStatus('current')
if mibBuilder.loadTexts: snfsMV104UnmountAll.setDescription('MV1 (04) Unmount All is the number of such version 1 requests received.')
snfsMV105ExportList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV105ExportList.setStatus('current')
if mibBuilder.loadTexts: snfsMV105ExportList.setDescription('MV1 (05) Export List is the number of such version 1 requests received.')
snfsMV300NULLMount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV300NULLMount.setStatus('current')
if mibBuilder.loadTexts: snfsMV300NULLMount.setDescription('MV3 (00) NULL Mount is the number of such version 3 requests received.')
snfsMV301Mount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV301Mount.setStatus('current')
if mibBuilder.loadTexts: snfsMV301Mount.setDescription('MV3 (01) Mount is the number of such version 3 requests received.')
snfsMV302DumpMounts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV302DumpMounts.setStatus('current')
if mibBuilder.loadTexts: snfsMV302DumpMounts.setDescription('MV3 (02) Dump Mounts is the number of such version 3 requests received.')
snfsMV303Unmount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV303Unmount.setStatus('current')
if mibBuilder.loadTexts: snfsMV303Unmount.setDescription('MV3 (03) Unmount is the number of such version 3 requests received.')
snfsMV304UnmountAll = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV304UnmountAll.setStatus('current')
if mibBuilder.loadTexts: snfsMV304UnmountAll.setDescription('MV3 (04) Unmount All is the number of such version 3 requests received.')
snfsMV305ExportList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsMV305ExportList.setStatus('current')
if mibBuilder.loadTexts: snfsMV305ExportList.setDescription('MV3 (05) Export List is the number of such version 3 requests received.')
snfsNFSErrorsV2 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsNFSErrorsV2.setStatus('current')
if mibBuilder.loadTexts: snfsNFSErrorsV2.setDescription('NFS Errors (V2) is the total number of version 2 NFS requests that did not complete successfully.')
snfsNFSErrorsV3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsNFSErrorsV3.setStatus('current')
if mibBuilder.loadTexts: snfsNFSErrorsV3.setDescription('NFS Errors (V3) is the total number of version 3 NFS requests that did not complete successfully.')
snfsPendingDRCPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsPendingDRCPackets.setStatus('current')
if mibBuilder.loadTexts: snfsPendingDRCPackets.setDescription('Pending DRC Packets is the number of duplicate packets received while the original packet is still being processed.')
snfsRPCCallPacketsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsRPCCallPacketsCreated.setStatus('current')
if mibBuilder.loadTexts: snfsRPCCallPacketsCreated.setDescription('RPC Call Packets Created is the number of RPC call packets created by applications using RpcXdr.')
snfsRPCCallsReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsRPCCallsReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: snfsRPCCallsReceivedPerSec.setDescription('RPC Calls Received/sec is the rate at which RPC calls are received by RpcXdr.')
snfsRPCFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsRPCFailures.setStatus('current')
if mibBuilder.loadTexts: snfsRPCFailures.setDescription('RPC Failures is the number of packets whose RPC header could not be successfully decoded.')
snfsRPCRepliesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsRPCRepliesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: snfsRPCRepliesReceivedPerSec.setDescription('RPC Replies Received/sec is the rate at which RPC replies are received by RpcXdr.')
snfsRPCReplyPacketsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsRPCReplyPacketsCreated.setStatus('current')
if mibBuilder.loadTexts: snfsRPCReplyPacketsCreated.setDescription('RPC Reply Packets Created is the number of RPC reply packets created by applications using RpcXdr.')
snfsThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: snfsThreadsTotal.setDescription('Threads Total is the number of threads created to service incoming RPC packets.')
snfsThreadsWaiting = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsThreadsWaiting.setStatus('current')
if mibBuilder.loadTexts: snfsThreadsWaiting.setDescription('Threads Waiting is the number of threads currently idle, waiting for incoming RPC packets.')
snfsTotalMountCallsV1 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsTotalMountCallsV1.setStatus('current')
if mibBuilder.loadTexts: snfsTotalMountCallsV1.setDescription('Total Mount Calls (V1) is the total number of version 1 MOUNT calls received.')
snfsTotalMountCallsV3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsTotalMountCallsV3.setStatus('current')
if mibBuilder.loadTexts: snfsTotalMountCallsV3.setDescription('Total Mount Calls (V3) is the total number of version 3 MOUNT calls received.')
snfsTotalNFSCallsV2 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsTotalNFSCallsV2.setStatus('current')
if mibBuilder.loadTexts: snfsTotalNFSCallsV2.setDescription('Total NFS Calls (V2) is the total number of version 2 NFS requests received.')
snfsTotalNFSCallsV3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsTotalNFSCallsV3.setStatus('current')
if mibBuilder.loadTexts: snfsTotalNFSCallsV3.setDescription('Total NFS Calls (V3) is the total number of version 3 NFS requests received.')
snfsTotalRPCCallsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsTotalRPCCallsReceived.setStatus('current')
if mibBuilder.loadTexts: snfsTotalRPCCallsReceived.setDescription('Total RPC Calls Received is the total number of RPC calls received by RpcXdr.')
snfsTotalRPCRepliesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsTotalRPCRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: snfsTotalRPCRepliesReceived.setDescription('Total RPC Replies Received is the total number of RPC replies received by RpcXdr.')
snfsUnrecognizedRPCPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsUnrecognizedRPCPackets.setStatus('current')
if mibBuilder.loadTexts: snfsUnrecognizedRPCPackets.setDescription('Unrecognized RPC Packets is the number of RPC packets received by RpcXdr which are not recognizable and thus discarded.')
snfsV200NULL = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV200NULL.setStatus('current')
if mibBuilder.loadTexts: snfsV200NULL.setDescription('V2 (00) NULL is the number of such version 2 requests received.')
snfsV201GetAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV201GetAttributes.setStatus('current')
if mibBuilder.loadTexts: snfsV201GetAttributes.setDescription('V2 (01) Get Attributes is the number of such version 2 requests received.')
snfsV202SetAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV202SetAttributes.setStatus('current')
if mibBuilder.loadTexts: snfsV202SetAttributes.setDescription('V2 (02) Set Attributes is the number of such version 2 requests received.')
snfsV203Root = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV203Root.setStatus('current')
if mibBuilder.loadTexts: snfsV203Root.setDescription('V2 (03) Root is the number of such version 2 requests received.')
snfsV204Lookup = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV204Lookup.setStatus('current')
if mibBuilder.loadTexts: snfsV204Lookup.setDescription('V2 (04) Lookup is the number of such version 2 requests received.')
snfsV205ReadLink = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV205ReadLink.setStatus('current')
if mibBuilder.loadTexts: snfsV205ReadLink.setDescription('V2 (05) Read Link is the number of such version 2 requests received.')
snfsV206Read = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV206Read.setStatus('current')
if mibBuilder.loadTexts: snfsV206Read.setDescription('V2 (06) Read is the number of such version 2 requests received.')
snfsV207WriteCache = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV207WriteCache.setStatus('current')
if mibBuilder.loadTexts: snfsV207WriteCache.setDescription('V2 (07) Write Cache is the number of such version 2 requests received.')
snfsV208Write = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV208Write.setStatus('current')
if mibBuilder.loadTexts: snfsV208Write.setDescription('V2 (08) Write is the number of such version 2 requests received.')
snfsV209Create = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV209Create.setStatus('current')
if mibBuilder.loadTexts: snfsV209Create.setDescription('V2 (09) Create is the number of such version 2 requests received.')
snfsV210Remove = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV210Remove.setStatus('current')
if mibBuilder.loadTexts: snfsV210Remove.setDescription('V2 (10) Remove is the number of such version 2 requests received.')
snfsV211Rename = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV211Rename.setStatus('current')
if mibBuilder.loadTexts: snfsV211Rename.setDescription('V2 (11) Rename is the number of such version 2 requests received.')
snfsV212Link = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV212Link.setStatus('current')
if mibBuilder.loadTexts: snfsV212Link.setDescription('V2 (12) Link is the number of such version 2 requests received.')
snfsV213SymbolicLink = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV213SymbolicLink.setStatus('current')
if mibBuilder.loadTexts: snfsV213SymbolicLink.setDescription('V2 (13) Symbolic Link is the number of such version 2 requests received.')
snfsV214MakeDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV214MakeDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV214MakeDirectory.setDescription('V2 (14) Make Directory is the number of such version 2 requests received.')
snfsV215RemoveDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV215RemoveDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV215RemoveDirectory.setDescription('V2 (15) Remove Directory is the number of such version 2 requests received.')
snfsV216ReadDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV216ReadDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV216ReadDirectory.setDescription('V2 (16) Read Directory is the number of such version 2 requests received.')
snfsV217StatFileSystem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV217StatFileSystem.setStatus('current')
if mibBuilder.loadTexts: snfsV217StatFileSystem.setDescription('V2 (17) Stat File System is the number of such version 2 requests received.')
snfsV300NULL = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV300NULL.setStatus('current')
if mibBuilder.loadTexts: snfsV300NULL.setDescription('V3 (00) NULL is the number of such version 3 requests received.')
snfsV301GetAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV301GetAttributes.setStatus('current')
if mibBuilder.loadTexts: snfsV301GetAttributes.setDescription('V3 (01) Get Attributes is the number of such version 3 requests received.')
snfsV302SetAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV302SetAttributes.setStatus('current')
if mibBuilder.loadTexts: snfsV302SetAttributes.setDescription('V3 (02) Set Attributes is the number of such version 3 requests received.')
snfsV303Lookup = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV303Lookup.setStatus('current')
if mibBuilder.loadTexts: snfsV303Lookup.setDescription('V3 (03) Lookup is the number of such version 3 requests received.')
snfsV304Access = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV304Access.setStatus('current')
if mibBuilder.loadTexts: snfsV304Access.setDescription('V3 (04) Access is the number of such version 3 requests received.')
snfsV305ReadLinkV3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV305ReadLinkV3.setStatus('current')
if mibBuilder.loadTexts: snfsV305ReadLinkV3.setDescription('V3 (05) Read Link is the number of such version 3 requests received.')
snfsV306Read = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV306Read.setStatus('current')
if mibBuilder.loadTexts: snfsV306Read.setDescription('V3 (06) Read is the number of such version 3 requests received.')
snfsV307Write = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV307Write.setStatus('current')
if mibBuilder.loadTexts: snfsV307Write.setDescription('V3 (07) Write is the number of such version 3 requests received.')
snfsV308Create = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV308Create.setStatus('current')
if mibBuilder.loadTexts: snfsV308Create.setDescription('V3 (08) Create is the number of such version 3 requests received.')
snfsV309MakeDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV309MakeDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV309MakeDirectory.setDescription('V3 (09) Make Directory is the number of such version 3 requests received.')
snfsV310SymbolicLink = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV310SymbolicLink.setStatus('current')
if mibBuilder.loadTexts: snfsV310SymbolicLink.setDescription('V3 (10) Symbolic Link is the number of such version 3 requests received.')
snfsV311MakeNode = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV311MakeNode.setStatus('current')
if mibBuilder.loadTexts: snfsV311MakeNode.setDescription('V3 (11) Make Node is the number of such version 3 requests received.')
snfsV312Remove = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV312Remove.setStatus('current')
if mibBuilder.loadTexts: snfsV312Remove.setDescription('V3 (12) Remove is the number of such version 3 requests received.')
snfsV313RemoveDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV313RemoveDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV313RemoveDirectory.setDescription('V3 (13) Remove Directory is the number of such version 3 requests received.')
snfsV314Rename = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV314Rename.setStatus('current')
if mibBuilder.loadTexts: snfsV314Rename.setDescription('V3 (14) Rename is the number of such version 3 requests received.')
snfsV315Link = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV315Link.setStatus('current')
if mibBuilder.loadTexts: snfsV315Link.setDescription('V3 (15) Link is the number of such version 3 requests received.')
snfsV316ReadDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV316ReadDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV316ReadDirectory.setDescription('V3 (16) Read Directory is the number of such version 3 requests received.')
snfsV317ReadDirectory = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV317ReadDirectory.setStatus('current')
if mibBuilder.loadTexts: snfsV317ReadDirectory.setDescription('V3 (17) Read Directory+ is the number of such version 3 requests received.')
snfsV318FileSystemStat = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV318FileSystemStat.setStatus('current')
if mibBuilder.loadTexts: snfsV318FileSystemStat.setDescription('V3 (18) File System Stat is the number of such version 3 requests received.')
snfsV319FileSystemInfo = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV319FileSystemInfo.setStatus('current')
if mibBuilder.loadTexts: snfsV319FileSystemInfo.setDescription('V3 (19) File System Info is the number of such version 3 requests received.')
snfsV320PathConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV320PathConfiguration.setStatus('current')
if mibBuilder.loadTexts: snfsV320PathConfiguration.setDescription('V3 (20) Path Configuration is the number of such version 3 requests received.')
snfsV321Commit = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsV321Commit.setStatus('current')
if mibBuilder.loadTexts: snfsV321Commit.setDescription('V3 (21) Commit is the number of such version 3 requests received.')
snfsWorkQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsWorkQueueSize.setStatus('current')
if mibBuilder.loadTexts: snfsWorkQueueSize.setDescription('Work Queue Size is the number of RPC packets current waiting for an available thread.')
snfsXDRFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 158, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snfsXDRFailures.setStatus('current')
if mibBuilder.loadTexts: snfsXDRFailures.setDescription('XDR Failures is the number of packets whose RPC header contained invalid or erroneous data.')
tbsCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 2, 159))
if mibBuilder.loadTexts: tbsCounters.setStatus('current')
if mibBuilder.loadTexts: tbsCounters.setDescription('Performance counters for the TPM Base Services component.')
tbscCurrentContexts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 159, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbscCurrentContexts.setStatus('current')
if mibBuilder.loadTexts: tbscCurrentContexts.setDescription('The number of TBS contexts that are currently active.')
tbscCurrentResources = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 159, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbscCurrentResources.setStatus('current')
if mibBuilder.loadTexts: tbscCurrentResources.setDescription('The number of resources that are currently being managed by the TBS.')
terminalServiceGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160))
tsgConnectionRequestAuthTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsgConnectionRequestAuthTime.setStatus('current')
if mibBuilder.loadTexts: tsgConnectionRequestAuthTime.setDescription('Shows the average connection request authentication and authorization times in seconds.')
tsgCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsgCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: tsgCurrentConnections.setDescription('Shows the total number of active/inactive connections to the TSG server at any given moment.')
tsgFailedConnectionAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsgFailedConnectionAuthorization.setStatus('current')
if mibBuilder.loadTexts: tsgFailedConnectionAuthorization.setDescription('Shows the total number of requests that failed due to insufficient connection authorization privilege.')
tsgFailedResourceAuthoization = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsgFailedResourceAuthoization.setStatus('current')
if mibBuilder.loadTexts: tsgFailedResourceAuthoization.setDescription('Shows the total number of requests that failed due to insufficient resource authorization privilege.')
tsgFailedConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsgFailedConnections.setStatus('current')
if mibBuilder.loadTexts: tsgFailedConnections.setDescription('Shows the number of connection requests that are all failed due to errors and authorization failure')
tsgSuccessfulConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 160, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsgSuccessfulConnections.setStatus('current')
if mibBuilder.loadTexts: tsgSuccessfulConnections.setDescription('Shows the number of requests that were successfully processed and connected')
uddiAPICounts = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161))
uddicAddpublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicAddpublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: uddicAddpublisherAssertions.setDescription('The number of executions of the add_publisherAssertions API since the service was started.')
uddicDeletebinding = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDeletebinding.setStatus('current')
if mibBuilder.loadTexts: uddicDeletebinding.setDescription('The number of executions of the delete_binding API since the service was started.')
uddicDeletebusiness = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDeletebusiness.setStatus('current')
if mibBuilder.loadTexts: uddicDeletebusiness.setDescription('The number of executions of the delete_business API since the service was started.')
uddicDeletepublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDeletepublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: uddicDeletepublisherAssertions.setDescription('The number of executions of the delete_publisherAssertions API since the service was started.')
uddicDeleteservice = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDeleteservice.setStatus('current')
if mibBuilder.loadTexts: uddicDeleteservice.setDescription('The number of executions of the delete_service API since the service was started.')
uddicDeletetModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDeletetModel.setStatus('current')
if mibBuilder.loadTexts: uddicDeletetModel.setDescription('The number of executions of the delete_tModel API since the service was started.')
uddicDiscardauthToken = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDiscardauthToken.setStatus('current')
if mibBuilder.loadTexts: uddicDiscardauthToken.setDescription('The number of executions of the discard_authToken API since the service was started.')
uddicDoping = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicDoping.setStatus('current')
if mibBuilder.loadTexts: uddicDoping.setDescription('The number of executions of the do_ping API since the service was started.')
uddicFindbinding = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicFindbinding.setStatus('current')
if mibBuilder.loadTexts: uddicFindbinding.setDescription('The number of executions of the find_binding API since the service was started.')
uddicFindbusiness = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicFindbusiness.setStatus('current')
if mibBuilder.loadTexts: uddicFindbusiness.setDescription('The number of executions of the find_business API since the service was started.')
uddicFindrelatedBusinesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicFindrelatedBusinesses.setStatus('current')
if mibBuilder.loadTexts: uddicFindrelatedBusinesses.setDescription('The number of executions of the find_relatedBusinesses API since the service was started.')
uddicFindservice = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicFindservice.setStatus('current')
if mibBuilder.loadTexts: uddicFindservice.setDescription('The number of executions of the find_service API since the service was started.')
uddicFindtModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicFindtModel.setStatus('current')
if mibBuilder.loadTexts: uddicFindtModel.setDescription('The number of executions of the find_tModel API since the service was started.')
uddicGetassertionStatusReport = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetassertionStatusReport.setStatus('current')
if mibBuilder.loadTexts: uddicGetassertionStatusReport.setDescription('The number of executions of the get_assertionStatusReport API since the service was started.')
uddicGetauthToken = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetauthToken.setStatus('current')
if mibBuilder.loadTexts: uddicGetauthToken.setDescription('The number of executions of the get_authToken API since the service was started.')
uddicGetbindingDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetbindingDetail.setStatus('current')
if mibBuilder.loadTexts: uddicGetbindingDetail.setDescription('The number of executions of the get_bindingDetail API since the service was started.')
uddicGetbusinessDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetbusinessDetail.setStatus('current')
if mibBuilder.loadTexts: uddicGetbusinessDetail.setDescription('The number of executions of the get_businessDetail API since the service was started.')
uddicGetbusinessDetailExt = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetbusinessDetailExt.setStatus('current')
if mibBuilder.loadTexts: uddicGetbusinessDetailExt.setDescription('The number of executions of the get_businessDetailExt API since the service was started.')
uddicGetchangeRecords = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetchangeRecords.setStatus('current')
if mibBuilder.loadTexts: uddicGetchangeRecords.setDescription('The number of executions of the get_changeRecords API since the service was started.')
uddicGethighWaterMarks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGethighWaterMarks.setStatus('current')
if mibBuilder.loadTexts: uddicGethighWaterMarks.setDescription('The number of executions of the get_highWaterMarks API since the service was started.')
uddicGetpublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetpublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: uddicGetpublisherAssertions.setDescription('The number of executions of the get_publisherAssertions API since the service was started.')
uddicGetregisteredInfo = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetregisteredInfo.setStatus('current')
if mibBuilder.loadTexts: uddicGetregisteredInfo.setDescription('The number of executions of the get_registeredInfo API since the service was started.')
uddicGetrelatedCategories = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetrelatedCategories.setStatus('current')
if mibBuilder.loadTexts: uddicGetrelatedCategories.setDescription('The number of executions of the get_relatedCategories API since the service was started.')
uddicGetserviceDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGetserviceDetail.setStatus('current')
if mibBuilder.loadTexts: uddicGetserviceDetail.setDescription('The number of executions of the get_serviceDetail API since the service was started.')
uddicGettModelDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicGettModelDetail.setStatus('current')
if mibBuilder.loadTexts: uddicGettModelDetail.setDescription('The number of executions of the get_tModelDetail API since the service was started.')
uddicNotifychangeRecordAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicNotifychangeRecordAvailable.setStatus('current')
if mibBuilder.loadTexts: uddicNotifychangeRecordAvailable.setDescription('The number of executions of the notify_changeRecordsAvailable API since the service was started.')
uddicSavebinding = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicSavebinding.setStatus('current')
if mibBuilder.loadTexts: uddicSavebinding.setDescription('The number of executions of the save_binding API since the service was started.')
uddicSavebusiness = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicSavebusiness.setStatus('current')
if mibBuilder.loadTexts: uddicSavebusiness.setDescription('The number of executions of the save_business API since the service was started.')
uddicSaveservice = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicSaveservice.setStatus('current')
if mibBuilder.loadTexts: uddicSaveservice.setDescription('The number of executions of the save_service API since the service was started.')
uddicSavetModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicSavetModel.setStatus('current')
if mibBuilder.loadTexts: uddicSavetModel.setDescription('The number of executions of the save_tModel API since the service was started.')
uddicSetpublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicSetpublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: uddicSetpublisherAssertions.setDescription('The number of executions of the set_publisherAssertions API since the service was started.')
uddicValidatecategorization = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 161, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddicValidatecategorization.setStatus('current')
if mibBuilder.loadTexts: uddicValidatecategorization.setDescription('The number of executions of the validate_categorization API since the service was started.')
uddiAPITimes = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162))
udditAddpublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditAddpublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: udditAddpublisherAssertions.setDescription('The average number of milliseconds that it took to execute the add_publisherAssertions API.')
udditDeletebinding = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDeletebinding.setStatus('current')
if mibBuilder.loadTexts: udditDeletebinding.setDescription('The average number of milliseconds that it took to execute the delete_binding API.')
udditDeletebusiness = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDeletebusiness.setStatus('current')
if mibBuilder.loadTexts: udditDeletebusiness.setDescription('The average number of milliseconds that it took to execute the delete_business API.')
udditDeletepublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDeletepublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: udditDeletepublisherAssertions.setDescription('The average number of milliseconds that it took to execute the delete_publisherAssertions API.')
udditDeleteservice = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDeleteservice.setStatus('current')
if mibBuilder.loadTexts: udditDeleteservice.setDescription('The average number of milliseconds that it took to execute the delete_service API.')
udditDeletetModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDeletetModel.setStatus('current')
if mibBuilder.loadTexts: udditDeletetModel.setDescription('The average number of milliseconds that it took to execute the delete_tModel API.')
udditDiscardauthToken = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDiscardauthToken.setStatus('current')
if mibBuilder.loadTexts: udditDiscardauthToken.setDescription('The average number of milliseconds that it took to execute the discard_authToken API.')
udditDoping = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditDoping.setStatus('current')
if mibBuilder.loadTexts: udditDoping.setDescription('The average number of milliseconds that it took to execute the do_ping API.')
udditFindbinding = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditFindbinding.setStatus('current')
if mibBuilder.loadTexts: udditFindbinding.setDescription('The average number of milliseconds that it took to execute the find_binding API.')
udditFindbusiness = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditFindbusiness.setStatus('current')
if mibBuilder.loadTexts: udditFindbusiness.setDescription('The average number of milliseconds that it took to execute the find_business API.')
udditFindrelatedBusinesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditFindrelatedBusinesses.setStatus('current')
if mibBuilder.loadTexts: udditFindrelatedBusinesses.setDescription('The average number of milliseconds that it took to execute the find_relatedBusinesses API.')
udditFindservice = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditFindservice.setStatus('current')
if mibBuilder.loadTexts: udditFindservice.setDescription('The average number of milliseconds that it took to execute the find_service API.')
udditFindtModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditFindtModel.setStatus('current')
if mibBuilder.loadTexts: udditFindtModel.setDescription('The average number of milliseconds that it took to execute the find_tModel API.')
udditGetassertionStatusReport = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetassertionStatusReport.setStatus('current')
if mibBuilder.loadTexts: udditGetassertionStatusReport.setDescription('The average number of milliseconds that it took to execute the get_assertionStatusReport API.')
udditGetauthToken = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetauthToken.setStatus('current')
if mibBuilder.loadTexts: udditGetauthToken.setDescription('The average number of milliseconds that it took to execute the get_authToken API.')
udditGetbindingDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetbindingDetail.setStatus('current')
if mibBuilder.loadTexts: udditGetbindingDetail.setDescription('The average number of milliseconds that it took to execute the get_bindingDetail API.')
udditGetbusinessDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetbusinessDetail.setStatus('current')
if mibBuilder.loadTexts: udditGetbusinessDetail.setDescription('The average number of milliseconds that it took to execute the get_businessDetail API.')
udditGetbusinessDetailExt = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetbusinessDetailExt.setStatus('current')
if mibBuilder.loadTexts: udditGetbusinessDetailExt.setDescription('The average number of milliseconds that it took to execute the get_businessDetailExt API.')
udditGetchangeRecords = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetchangeRecords.setStatus('current')
if mibBuilder.loadTexts: udditGetchangeRecords.setDescription('The average number of milliseconds that it took to execute the get_changeRecords API.')
udditGethighWaterMarks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGethighWaterMarks.setStatus('current')
if mibBuilder.loadTexts: udditGethighWaterMarks.setDescription('The average number of milliseconds that it took to execute the get_highWaterMarks API.')
udditGetpublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetpublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: udditGetpublisherAssertions.setDescription('The average number of milliseconds that it took to execute the get_publisherAssertions API.')
udditGetregisteredInfo = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetregisteredInfo.setStatus('current')
if mibBuilder.loadTexts: udditGetregisteredInfo.setDescription('The average number of milliseconds that it took to execute the get_registeredInfo API.')
udditGetrelatedCategories = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetrelatedCategories.setStatus('current')
if mibBuilder.loadTexts: udditGetrelatedCategories.setDescription('The average number of milliseconds that it took to execute the get_relatedCategories API.')
udditGetserviceDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGetserviceDetail.setStatus('current')
if mibBuilder.loadTexts: udditGetserviceDetail.setDescription('The average number of milliseconds that it took to execute the get_serviceDetail API.')
udditGettModelDetail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditGettModelDetail.setStatus('current')
if mibBuilder.loadTexts: udditGettModelDetail.setDescription('The average number of milliseconds that it took to execute the get_tModelDetail API.')
udditNotifychangeRecordAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditNotifychangeRecordAvailable.setStatus('current')
if mibBuilder.loadTexts: udditNotifychangeRecordAvailable.setDescription('The average number of milliseconds that it took to execute the notify_changeRecordsAvailable API.')
udditSavebinding = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditSavebinding.setStatus('current')
if mibBuilder.loadTexts: udditSavebinding.setDescription('The average number of milliseconds that it took to execute the save_binding API.')
udditSavebusiness = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditSavebusiness.setStatus('current')
if mibBuilder.loadTexts: udditSavebusiness.setDescription('The average number of milliseconds that it took to execute the save_business API.')
udditSaveservice = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditSaveservice.setStatus('current')
if mibBuilder.loadTexts: udditSaveservice.setDescription('The average number of milliseconds that it took to execute the save_service API.')
udditSavetModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditSavetModel.setStatus('current')
if mibBuilder.loadTexts: udditSavetModel.setDescription('The average number of milliseconds that it took to execute the save_tModel API.')
udditSetpublisherAssertions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditSetpublisherAssertions.setStatus('current')
if mibBuilder.loadTexts: udditSetpublisherAssertions.setDescription('The average number of milliseconds that it took to execute the set_publisherAssertions API.')
udditValidatecategorization = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 2, 162, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udditValidatecategorization.setStatus('current')
if mibBuilder.loadTexts: udditValidatecategorization.setDescription('The average number of milliseconds that it took to execute the validate_categorization API.')
w3svcW3WPTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163), )
if mibBuilder.loadTexts: w3svcW3WPTable.setStatus('current')
if mibBuilder.loadTexts: w3svcW3WPTable.setDescription('This counter set exposes HTTP request processing related counters for the worker process.')
w3svcW3WPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1), ).setIndexNames((0, "INFORMANT-ADV", "w3svcInstance"))
if mibBuilder.loadTexts: w3svcW3WPEntry.setStatus('current')
if mibBuilder.loadTexts: w3svcW3WPEntry.setDescription("Performance information for one particular instance of 'W3SVC_W3WP' object.")
w3svcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcInstance.setStatus('current')
if mibBuilder.loadTexts: w3svcInstance.setDescription('Instance name.')
w3svcActiveFlushedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcActiveFlushedEntries.setStatus('current')
if mibBuilder.loadTexts: w3svcActiveFlushedEntries.setDescription('Number of file handles cached in user-mode that will be closed when all current transfers complete.')
w3svcActiveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcActiveRequests.setStatus('current')
if mibBuilder.loadTexts: w3svcActiveRequests.setDescription('Current number of requests being processed by the worker process.')
w3svcActiveThreadsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcActiveThreadsCount.setStatus('current')
if mibBuilder.loadTexts: w3svcActiveThreadsCount.setDescription('Number of threads actively processing requests in the worker process.')
w3svcCurrentFileCacheMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcCurrentFileCacheMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: w3svcCurrentFileCacheMemoryUsage.setDescription('Current number of bytes used by user-mode file cache.')
w3svcCurrentFilesCached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcCurrentFilesCached.setStatus('current')
if mibBuilder.loadTexts: w3svcCurrentFilesCached.setDescription('Current number of files whose contents are present in user-mode cache.')
w3svcCurrentMetadataCached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcCurrentMetadataCached.setStatus('current')
if mibBuilder.loadTexts: w3svcCurrentMetadataCached.setDescription('Number of metadata information blocks currently present in user-mode cache.')
w3svcCurrentURIsCached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcCurrentURIsCached.setStatus('current')
if mibBuilder.loadTexts: w3svcCurrentURIsCached.setDescription('URI information blocks currently in the user-mode cache.')
w3svcFileCacheFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcFileCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: w3svcFileCacheFlushes.setDescription('Total number of files removed from the user-mode cache (since service startup).')
w3svcFileCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcFileCacheHits.setStatus('current')
if mibBuilder.loadTexts: w3svcFileCacheHits.setDescription('Total number of successful lookups in the user-mode file cache (since service startup).')
w3svcFileCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcFileCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcFileCacheHitsPerSec.setDescription('Rate of successful lookups in file cache during last sample interval.')
w3svcFileCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcFileCacheMisses.setStatus('current')
if mibBuilder.loadTexts: w3svcFileCacheMisses.setDescription('Total number of unsuccessful lookups in the user-mode file cache (since service startup).')
w3svcFileCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcFileCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcFileCacheMissesPerSec.setDescription('Rate of unsuccessful lookups in file cache during last sample interval.')
w3svcMaximumFileCacheMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMaximumFileCacheMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: w3svcMaximumFileCacheMemoryUsage.setDescription('Maximum number of bytes used by user-mode file cache.')
w3svcMaximumThreadsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMaximumThreadsCount.setStatus('current')
if mibBuilder.loadTexts: w3svcMaximumThreadsCount.setDescription('Maximum number of threads to which the thread pool can grow as needed.')
w3svcMetadataCacheFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMetadataCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: w3svcMetadataCacheFlushes.setDescription('Total number of user-mode metadata cache flushes (since service startup).')
w3svcMetadataCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMetadataCacheHits.setStatus('current')
if mibBuilder.loadTexts: w3svcMetadataCacheHits.setDescription('Total number of successful lookups in the user-mode metadata cache (since service startup).')
w3svcMetadataCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMetadataCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcMetadataCacheHitsPerSec.setDescription('Rate of successful lookups in metadata cache during last sample interval.')
w3svcMetadataCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMetadataCacheMisses.setStatus('current')
if mibBuilder.loadTexts: w3svcMetadataCacheMisses.setDescription('Total number of unsuccessful lookups in the user-mode metadata cache (since service startup).')
w3svcMetadataCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcMetadataCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcMetadataCacheMissesPerSec.setDescription('Rate of unsuccessful lookups in metadata cache during last sample interval.')
w3svcOutputCacheCurrentFlushItem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheCurrentFlushItem.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheCurrentFlushItem.setDescription('Number of items that have been flushed from output cache but are still being used by outgoing responses so are still taking up memory.')
w3svcOutputCacheCurrentItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheCurrentItems.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheCurrentItems.setDescription('Number of items current present in output cache.')
w3svcOutputCacheCurrentMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheCurrentMemUsage.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheCurrentMemUsage.setDescription('Current number of bytes used by output cache.')
w3svcOutputCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheHitsPerSec.setDescription('Rate of successful lookups in output cache during last sample interval.')
w3svcOutputCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheMissesPerSec.setDescription('Rate of unsuccessful lookups in output cache during last sample interval.')
w3svcOutputCacheTotalFlushItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheTotalFlushItems.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheTotalFlushItems.setDescription('Total number of items flushed from output cache (since service startup).')
w3svcOutputCacheTotalFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheTotalFlushes.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheTotalFlushes.setDescription('Total number of flushes of output cache (since service startup).')
w3svcOutputCacheTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheTotalHits.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheTotalHits.setDescription('Total number of successful lookups in output cache (since service startup).')
w3svcOutputCacheTotalMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcOutputCacheTotalMisses.setStatus('current')
if mibBuilder.loadTexts: w3svcOutputCacheTotalMisses.setDescription('Total number of unsuccessful lookups in output cache (since service startup).')
w3svcRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcRequestsPerSec.setDescription('HTTP requests/sec being processed by the worker process.')
w3svcTotalFilesCached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalFilesCached.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalFilesCached.setDescription('Total number of files whose contents were ever added to the user-mode cache (since service startup).')
w3svcTotalFlushedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalFlushedFiles.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalFlushedFiles.setDescription('Total number of file handles that have been removed from the user-mode cache (since service startup).')
w3svcTotalFlushedMetadata = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalFlushedMetadata.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalFlushedMetadata.setDescription('Total number of metadata information blocks removed from the user-mode cache (since service startup).')
w3svcTotalFlushedURIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalFlushedURIs.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalFlushedURIs.setDescription('The number of URI information blocks that have been removed from the user-mode cache (since service startup).')
w3svcTotalHTTPRequestsServed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalHTTPRequestsServed.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalHTTPRequestsServed.setDescription('Total number of HTTP requests served by the worker process.')
w3svcTotalMetadataCached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalMetadataCached.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalMetadataCached.setDescription('Total number of metadata information blocks added to the user-mode cache (since service startup).')
w3svcTotalThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalThreads.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalThreads.setDescription('Total number of threads available to process requests in the worker process.')
w3svcTotalURIsCached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcTotalURIsCached.setStatus('current')
if mibBuilder.loadTexts: w3svcTotalURIsCached.setDescription('Total number of URI information blocks added to the user-mode cache (since service startup).')
w3svcURICacheFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcURICacheFlushes.setStatus('current')
if mibBuilder.loadTexts: w3svcURICacheFlushes.setDescription('Total number of URI cache flushes (since service startup).')
w3svcURICacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcURICacheHits.setStatus('current')
if mibBuilder.loadTexts: w3svcURICacheHits.setDescription('Total number of successful lookups in the user-mode URI cache (since service startup).')
w3svcURICacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcURICacheMisses.setStatus('current')
if mibBuilder.loadTexts: w3svcURICacheMisses.setDescription('Total number of unsuccessful lookups in the user-mode URI cache (since service startup).')
w3svcUriCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcUriCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcUriCacheHitsPerSec.setDescription('Rate of successful lookups in URI cache during last sample interval.')
w3svcUriCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 163, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w3svcUriCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: w3svcUriCacheMissesPerSec.setDescription('Rate of unsuccessful lookups in URI cache during last sample interval.')
wasW3WPTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164), )
if mibBuilder.loadTexts: wasW3WPTable.setStatus('current')
if mibBuilder.loadTexts: wasW3WPTable.setDescription('This counter set exposes Windows Process Activation Service (WAS) related counters for the worker process.')
wasW3WPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1), ).setIndexNames((0, "INFORMANT-ADV", "wasInstance"))
if mibBuilder.loadTexts: wasW3WPEntry.setStatus('current')
if mibBuilder.loadTexts: wasW3WPEntry.setDescription("Performance information for one particular instance of 'WAS_W3WP' object.")
wasInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasInstance.setStatus('current')
if mibBuilder.loadTexts: wasInstance.setDescription('Instance name.')
wasActiveListenerChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasActiveListenerChannels.setStatus('current')
if mibBuilder.loadTexts: wasActiveListenerChannels.setDescription('Number of currently active listener channels in the worker process.')
wasActiveProtocolHandlers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasActiveProtocolHandlers.setStatus('current')
if mibBuilder.loadTexts: wasActiveProtocolHandlers.setDescription('Number of currently active protocol handlers in the worker process.')
wasHealthPingReplyLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasHealthPingReplyLatency.setStatus('current')
if mibBuilder.loadTexts: wasHealthPingReplyLatency.setDescription('Time, in 100 nanosecond increments, taken by worker process to reply to last health ping.')
wasTotalHealthPings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasTotalHealthPings.setStatus('current')
if mibBuilder.loadTexts: wasTotalHealthPings.setDescription('Total number of health pings received by the process.')
wasTotalMessagesSentToWAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasTotalMessagesSentToWAS.setStatus('current')
if mibBuilder.loadTexts: wasTotalMessagesSentToWAS.setDescription('Total number of messages sent to Windows Process Activation Service (WAS) by the worker process.')
wasTotalRequestsServed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasTotalRequestsServed.setStatus('current')
if mibBuilder.loadTexts: wasTotalRequestsServed.setDescription('Total number of requests served by the worker process. This counter is only meaningful when request based recycling is enabled for the application pool.')
wasTotalRuntimeStatusQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasTotalRuntimeStatusQueries.setStatus('current')
if mibBuilder.loadTexts: wasTotalRuntimeStatusQueries.setDescription('Total number of Runtime Status queries received by the process.')
wasTotalWASMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 164, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wasTotalWASMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: wasTotalWASMessagesReceived.setDescription('Total number of messages received by the worker process from Windows Process Activation Service (WAS).')
wsrmPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 165), )
if mibBuilder.loadTexts: wsrmPolicyTable.setStatus('current')
if mibBuilder.loadTexts: wsrmPolicyTable.setDescription('The WSRM Policy performance object, installed with Windows System Resource Manager (WSRM), consists of a counter that provides the percentage of CPU cycles of the entire system that are used by the current resource-allocation policy, since the time the policy was set to manage the behavior of WSRM. (The resource-allocation policy is an ordered list of resource allocations that specifies the management behavior of WSRM at a given time.) Each WSRM Policy object will have one instance whose name is the same as the current active policy.')
wsrmPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 165, 1), ).setIndexNames((0, "INFORMANT-ADV", "wsrmplInstance"))
if mibBuilder.loadTexts: wsrmPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: wsrmPolicyEntry.setDescription("Performance information for one particular instance of 'WSRM: Policy' object.")
wsrmplInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 165, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmplInstance.setStatus('current')
if mibBuilder.loadTexts: wsrmplInstance.setDescription('Instance name.')
wsrmplSystemManagedCPUPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 165, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmplSystemManagedCPUPercent.setStatus('current')
if mibBuilder.loadTexts: wsrmplSystemManagedCPUPercent.setDescription('The percentage of CPU cycles managed by WSRM that are used by the combined process-matching criteria. A process-matching criterion is the mechanism in WSRM that matches running processes to a resource-allocation policy.')
wsrmProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 166), )
if mibBuilder.loadTexts: wsrmProcessTable.setStatus('current')
if mibBuilder.loadTexts: wsrmProcessTable.setDescription('The WSRM Process performance object, installed with Windows System Resource Manager (WSRM), consists of a counter that provides the percentage of total managed CPU cycles used by a particular process, since the time that the resource-allocation policy was set to manage the behavior of WSRM. (The resource-allocation policy is an ordered list of resource allocations that specifies the management behavior of WSRM at a given time.) One instance of this object exists for every managed process. Note that Total Managed CPU cycles is the sum of the CPU cycles for all the managed processes.')
wsrmProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 166, 1), ).setIndexNames((0, "INFORMANT-ADV", "wsrmprInstance"))
if mibBuilder.loadTexts: wsrmProcessEntry.setStatus('current')
if mibBuilder.loadTexts: wsrmProcessEntry.setDescription("Performance information for one particular instance of 'WSRM: Process' object.")
wsrmprInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 166, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmprInstance.setStatus('current')
if mibBuilder.loadTexts: wsrmprInstance.setDescription('Instance name.')
wsrmprActualManagedCPUPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 166, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmprActualManagedCPUPercent.setStatus('current')
if mibBuilder.loadTexts: wsrmprActualManagedCPUPercent.setDescription('The percentage of total managed CPU cycles that have been used by this process-matching criterion. A process-matching criterion is the mechanism in WSRM that matches running processes to a resource-allocation policy.')
wsrmProcessMatchingCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167), )
if mibBuilder.loadTexts: wsrmProcessMatchingCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: wsrmProcessMatchingCriteriaTable.setDescription('The WSRM process-matching criteria performance object, installed with Windows System Resource Manager (WSRM), consists of counters that monitor the CPU usage and memory usage of the processes matched by the process-matching criteria. The criteria are included in the managing resource-allocation policy. Each object will have as many instances as the number of process-matching criteria within the current active policy.')
wsrmProcessMatchingCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1), ).setIndexNames((0, "INFORMANT-ADV", "wsrmpmcInstance"))
if mibBuilder.loadTexts: wsrmProcessMatchingCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: wsrmProcessMatchingCriteriaEntry.setDescription("Performance information for one particular instance of 'WSRM: Process Matching Criteria' object.")
wsrmpmcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcInstance.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcInstance.setDescription('Instance name.')
wsrmpmcActualManagedCPUPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcActualManagedCPUPercent.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcActualManagedCPUPercent.setDescription('The percentage of total managed CPU cycles that have been used by this process-matching criterion. A process-matching criterion is the mechanism in WSRM that matches running processes to a resource-allocation policy.')
wsrmpmcManagedCPUPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcManagedCPUPercent.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcManagedCPUPercent.setDescription('The percentage of managed CPU cycles used by this process-matching criterion between the last process samplings.')
wsrmpmcPageFileMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcPageFileMBytes.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcPageFileMBytes.setDescription('The total size of page files used by this process.')
wsrmpmcProcessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcProcessCount.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcProcessCount.setDescription('The number of processes associated with this process-matching criterion.')
wsrmpmcTargetManagedCPUPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcTargetManagedCPUPercent.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcTargetManagedCPUPercent.setDescription('The percentage of total managed CPU cycles allocated to this process-matching criterion.')
wsrmpmcWorkingSetMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 2, 167, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmpmcWorkingSetMBytes.setStatus('current')
if mibBuilder.loadTexts: wsrmpmcWorkingSetMBytes.setDescription('The total size of the set of memory pages used by the threads of this process.')
mibBuilder.exportSymbols("INFORMANT-ADV", ntdsDSPercentWritesFromDRA=ntdsDSPercentWritesFromDRA, frsReplicaSetsCreated=frsReplicaSetsCreated, ipxConnectionsNoRetries=ipxConnectionsNoRetries, atBytesOutPerSec=atBytesOutPerSec, amaNumberOfScopesLoadedInMemory=amaNumberOfScopesLoadedInMemory, dsLDAPNewConnectionsPerSec=dsLDAPNewConnectionsPerSec, searchIndexerTable=searchIndexerTable, msmqimsInMulticastMessagesPerSec=msmqimsInMulticastMessagesPerSec, threadIDProcess=threadIDProcess, snfsV206Read=snfsV206Read, wasActiveProtocolHandlers=wasActiveProtocolHandlers, npsausServerResetTime=npsausServerResetTime, adnApplMembershipAuthSuccess=adnApplMembershipAuthSuccess, tcpV6=tcpV6, uddicSaveservice=uddicSaveservice, ntdsSAMMembershipChangesPerSec=ntdsSAMMembershipChangesPerSec, npsrausDroppedPacketsPerSec=npsrausDroppedPacketsPerSec, wsTotalAllowedAsyncIORqsts=wsTotalAllowedAsyncIORqsts, frsLocalChgOrdersMorphed=frsLocalChgOrdersMorphed, npsaucProbationDecisions=npsaucProbationDecisions, cpuPercentDPCTime=cpuPercentDPCTime, ntdsATQThreadsOther=ntdsATQThreadsOther, npsaccAccountingResponsesPerSec=npsaccAccountingResponsesPerSec, tssInputCompressFlushes=tssInputCompressFlushes, netBEUIConnectionsWithRetries=netBEUIConnectionsWithRetries, msmqomsOutMulticastBytesPerSec=msmqomsOutMulticastBytesPerSec, serverBlockingRequestsRejected=serverBlockingRequestsRejected, netBEUIResourceTimesExhausted=netBEUIResourceTimesExhausted, ipsi6FailedMainModeNegotiations=ipsi6FailedMainModeNegotiations, joThisPeriodMSecKernelMode=joThisPeriodMSecKernelMode, msmqInMulticastSessionTable=msmqInMulticastSessionTable, ipsa6PendingMainModeNegotiations=ipsa6PendingMainModeNegotiations, tssOutputBytes=tssOutputBytes, adnAppl2CacheAPITurnoverRate=adnAppl2CacheAPITurnoverRate, iupDroppedPackets=iupDroppedPackets, adnAppl2PipelineInstanceCount=adnAppl2PipelineInstanceCount, ntdsDRAInboundBytesTotalPerSec=ntdsDRAInboundBytesTotalPerSec, dsDSPercentSearchesOther=dsDSPercentSearchesOther, memoryFreeZeroPageListKBytes=memoryFreeZeroPageListKBytes, caRequestPolicyModulePrcTimeMs=caRequestPolicyModulePrcTimeMs, spxConnectionsWithRetries=spxConnectionsWithRetries, usbHostControlPeriodicCacheFlush=usbHostControlPeriodicCacheFlush, npsaucProbationDecisionsPerSec=npsaucProbationDecisionsPerSec, ncmNumBytesInAllHeaps=ncmNumBytesInAllHeaps, ftpSvcInstance=ftpSvcInstance, spxDatagramsSentPerSec=spxDatagramsSentPerSec, iupAccessRequests=iupAccessRequests, udditFindservice=udditFindservice, nwBytesTotalPerSec=nwBytesTotalPerSec, icmpV6SentRouterSolicit=icmpV6SentRouterSolicit, icmpV6SentRouterAdvert=icmpV6SentRouterAdvert, iusAccessRequestsPerSec=iusAccessRequestsPerSec, adnAppl2ApplLifetimeEventsPerSec=adnAppl2ApplLifetimeEventsPerSec, dfsrfConflictBytesGenerated=dfsrfConflictBytesGenerated, wmusLateReads=wmusLateReads, frsBytesOfStagingRegenerated=frsBytesOfStagingRegenerated, npsaucBadAuthenticators=npsaucBadAuthenticators, wFPv6OutConnections=wFPv6OutConnections, wsrmprActualManagedCPUPercent=wsrmprActualManagedCPUPercent, winsSrvrReleasesPerSec=winsSrvrReleasesPerSec, icsInvalidRequests=icsInvalidRequests, ntdsSAMSuccessMachineCreatPerSec=ntdsSAMSuccessMachineCreatPerSec, icpPacketsReceived=icpPacketsReceived, faxsReceivedFaxes=faxsReceivedFaxes, ncltQueueLengthPerSec=ncltQueueLengthPerSec, cacheFastReadResourceMissPerSec=cacheFastReadResourceMissPerSec, sms3CallsOutstanding=sms3CallsOutstanding, adnAppl1CacheTotalHitRatio=adnAppl1CacheTotalHitRatio, faxsTotalMinutesSendAndReceive=faxsTotalMinutesSendAndReceive, nntpSrvrTotalPassiveFeeds=nntpSrvrTotalPassiveFeeds, netBIOSConnectionsNoRetries=netBIOSConnectionsNoRetries, npsracsRetransmissionsPerSec=npsracsRetransmissionsPerSec, frsPacketsSentInError=frsPacketsSentInError, bnuPercentNetcardFree=bnuPercentNetcardFree, npsaucAccessRejectsPerSec=npsaucAccessRejectsPerSec, memorySystemDriverTotalKBytes=memorySystemDriverTotalKBytes, sgDocumentsSuccessFilteredRate=sgDocumentsSuccessFilteredRate, dsDSPercentReadsFromNSPI=dsDSPercentReadsFromNSPI, w3svcFileCacheHitsPerSec=w3svcFileCacheHitsPerSec, netBEUIExpirationsResponse=netBEUIExpirationsResponse, terminalServicesSessionTable=terminalServicesSessionTable, msmqSvcTotalMessagesInAllQueues=msmqSvcTotalMessagesInAllQueues, ipsi6FailedQuickModeNegotiations=ipsi6FailedQuickModeNegotiations, w3svcOutputCacheCurrentItems=w3svcOutputCacheCurrentItems, snfsThreadsWaiting=snfsThreadsWaiting, httpsugBytesTransferredRate=httpsugBytesTransferredRate, wscMaximumFileCacheMemoryUsage=wscMaximumFileCacheMemoryUsage, rsvpSvcBytesInQoSNotifications=rsvpSvcBytesInQoSNotifications, hrasNPSSuccessfulRequests=hrasNPSSuccessfulRequests, sgpErrorRate=sgpErrorRate, wsTotalPutRqsts=wsTotalPutRqsts, ntdsKerberosAuthentications=ntdsKerberosAuthentications, dsDRAThreadsNCChgHoldSemaphore=dsDRAThreadsNCChgHoldSemaphore, snfsBytesWrittenPerSec=snfsBytesWrittenPerSec, w3svcOutputCacheTotalMisses=w3svcOutputCacheTotalMisses, sms3ReliableSessionFaultedPerSec=sms3ReliableSessionFaultedPerSec, ncsStackWalkDepth=ncsStackWalkDepth, jodPageFileBytesPeak=jodPageFileBytesPeak, ipsa6ExtendModeNegotiationPerSec=ipsa6ExtendModeNegotiationPerSec, pSchedFlowAveragePktsInSequencer=pSchedFlowAveragePktsInSequencer, ircsUnknownType=ircsUnknownType, snsdMessagesEnumerated=snsdMessagesEnumerated, dnsWINSReverseLookupReceived=dnsWINSReverseLookupReceived, wmppCurConnectedPlayers=wmppCurConnectedPlayers, snfsMV103Unmount=snfsMV103Unmount, siL7MergesNow=siL7MergesNow, adnAppl2RequestsFailed=adnAppl2RequestsFailed, netPacketsSentPerSec=netPacketsSentPerSec, iscsiSessionCxnTimeoutErrors=iscsiSessionCxnTimeoutErrors, sme3TransactionsFlowed=sme3TransactionsFlowed, smsh3UrisRegisteredForNetTcp=smsh3UrisRegisteredForNetTcp, frcFetchBlocksSent=frcFetchBlocksSent, nwBytesReceivedPerSec=nwBytesReceivedPerSec, browserAnnouncementsDomainPerSec=browserAnnouncementsDomainPerSec, w3svcActiveRequests=w3svcActiveRequests, ipxDatagramBytesReceivedPerSec=ipxDatagramBytesReceivedPerSec, sgpDocumentMovesPerRenames=sgpDocumentMovesPerRenames, wFPv6ActiveInConnections=wFPv6ActiveInConnections, caRequestsPerSec=caRequestsPerSec, npsaucInstance=npsaucInstance, dnsDynamicUpdateWriteToDBPerSec=dnsDynamicUpdateWriteToDBPerSec, dsDRAOutNotCmpWithinSitePerSec=dsDRAOutNotCmpWithinSitePerSec, wsTotalOptionsRqsts=wsTotalOptionsRqsts, rpcpNumBackEndConnAttemptsPerSec=rpcpNumBackEndConnAttemptsPerSec, dhcpSrvDiscoversPerSec=dhcpSrvDiscoversPerSec, ipsi4SuccessQuickModeNegotPerSec=ipsi4SuccessQuickModeNegotPerSec, adnAppl1RequestsExecuting=adnAppl1RequestsExecuting, npsRemoteAccountingServersEntry=npsRemoteAccountingServersEntry, ircsAccountingResponses=ircsAccountingResponses, ncmNumTotalReservedBytes=ncmNumTotalReservedBytes, cache=cache, ntdsDRAInboundBytesCBSACPerSec=ntdsDRAInboundBytesCBSACPerSec, uddicDeletetModel=uddicDeletetModel, wFPv6PacketsDiscardedPerSec=wFPv6PacketsDiscardedPerSec, processIODataOperationsPerSec=processIODataOperationsPerSec, sgHeartbeats=sgHeartbeats, ftpSvcMaximumNonAnonymousUsers=ftpSvcMaximumNonAnonymousUsers, pSchedPipeFlowsClosed=pSchedPipeFlowsClosed, adnApplRequestsPerSec=adnApplRequestsPerSec, atDDPPacketsPerSec=atDDPPacketsPerSec, netBEUIDatagramsPerSec=netBEUIDatagramsPerSec, wsTotalLockedErrors=wsTotalLockedErrors, iasAuthenticationServer=iasAuthenticationServer, svcHost3=svcHost3, adnAppl2CompilationsTotal=adnAppl2CompilationsTotal, msmqomsOutgoingMulticastMessages=msmqomsOutgoingMulticastMessages, browserDuplicateMasterAnnounce=browserDuplicateMasterAnnounce, giaipInvalidPacketReceivedPerSec=giaipInvalidPacketReceivedPerSec, sms3InstancesCreatedPerSecond=sms3InstancesCreatedPerSecond, dsDSDirectorySearchesPerSec=dsDSDirectorySearchesPerSec, npsausDroppedPackets=npsausDroppedPackets, ntdsDRAOutboundBytesTotalPerSec=ntdsDRAOutboundBytesTotalPerSec, is4dTotalBytesReceivedInTunnels=is4dTotalBytesReceivedInTunnels, wmsCurIncomingBandwidthKbps=wmsCurIncomingBandwidthKbps, dsTombstonesVisitedPerSec=dsTombstonesVisitedPerSec, dfsrcInstance=dfsrcInstance, adnAppl2AuditFailureEventsRaised=adnAppl2AuditFailureEventsRaised, dnsAXFRRequestReceived=dnsAXFRRequestReceived, icmpV6MessagesReceivedErrors=icmpV6MessagesReceivedErrors, netBEUIConnectionSessionTimeouts=netBEUIConnectionSessionTimeouts, ipsa6MainModeNegotiationRqstRcvd=ipsa6MainModeNegotiationRqstRcvd, dotNETCLRNetworkingEntry=dotNETCLRNetworkingEntry, pop3SvcConnectionsPerSec=pop3SvcConnectionsPerSec, smtpSrvrCatRcptsAfterCat=smtpSrvrCatRcptsAfterCat, cacheDataFlushesPerSec=cacheDataFlushesPerSec, frsPacketsReceivedInBytes=frsPacketsReceivedInBytes, iupUnknownTypePerSec=iupUnknownTypePerSec, pDiskAvgDiskSecPerWrite=pDiskAvgDiskSecPerWrite, wwfWorkflowsSuspended=wwfWorkflowsSuspended, sme3CallsOutstanding=sme3CallsOutstanding, ipxConnectionsWithRetries=ipxConnectionsWithRetries, dsATQThreadsOther=dsATQThreadsOther, dsSAMGCEvaluationsPerSec=dsSAMGCEvaluationsPerSec, rsvpIfRESVTEARMsgsSent=rsvpIfRESVTEARMsgsSent, nclRateOfLoadFailures=nclRateOfLoadFailures, frsRemoteChgOrdersPropagated=frsRemoteChgOrdersPropagated, rasTotalTotalErrors=rasTotalTotalErrors, netBIOSFramesReceivedPerSec=netBIOSFramesReceivedPerSec, redirWriteBytesCachePerSec=redirWriteBytesCachePerSec, wmusPendingConnections=wmusPendingConnections, idxSvcFilterInstance=idxSvcFilterInstance, dsDSSecurityDescSubOpsPerSec=dsDSSecurityDescSubOpsPerSec, tsgFailedConnectionAuthorization=tsgFailedConnectionAuthorization, w3svcTotalFlushedFiles=w3svcTotalFlushedFiles, sgDocumentsFiltered=sgDocumentsFiltered, processPriorityBase=processPriorityBase, pDiskAvgDiskSecPerRead=pDiskAvgDiskSecPerRead, ipsa6SuccessMainModeNegotiations=ipsa6SuccessMainModeNegotiations, w3svcOutputCacheCurrentFlushItem=w3svcOutputCacheCurrentFlushItem, ipsa6QuickModeNegotiations=ipsa6QuickModeNegotiations, cpuPercentProcessorTime=cpuPercentProcessorTime, ftpSvcTotalConnAttemptsAllInst=ftpSvcTotalConnAttemptsAllInst, npsausMalformedPackets=npsausMalformedPackets, acsPerRsvpSvcQoSNotifications=acsPerRsvpSvcQoSNotifications, aspRequestsTimedOut=aspRequestsTimedOut, ntdsDRASyncFailOnSchemaMismatch=ntdsDRASyncFailOnSchemaMismatch, rsvpIfRESVStateBlockTimeouts=rsvpIfRESVStateBlockTimeouts, wmsCurStreamingHTTPPlayers=wmsCurStreamingHTTPPlayers, cpuC3TransitionsPerSec=cpuC3TransitionsPerSec, netlogonSemaphoreWaiters=netlogonSemaphoreWaiters, npsrausBadAuthenticatorsPerSec=npsrausBadAuthenticatorsPerSec, is4dOffloadedSecurityAssociation=is4dOffloadedSecurityAssociation, winsSrvrUniqueRenewalsPerSec=winsSrvrUniqueRenewalsPerSec, adnAppl2RequestEventsRaised=adnAppl2RequestEventsRaised, frsChgOrdersRetired=frsChgOrdersRetired, usbControllerWorkSignalsPerSec=usbControllerWorkSignalsPerSec, npsacsInvalidRequestsPerSec=npsacsInvalidRequestsPerSec, w3svcOutputCacheHitsPerSec=w3svcOutputCacheHitsPerSec, ncdSQLClntPeakNumPoolConns=ncdSQLClntPeakNumPoolConns, npsrausProbationDecisions=npsrausProbationDecisions, memoryCommitLimit=memoryCommitLimit, frsBytesOfFilesInstalled=frsBytesOfFilesInstalled, ntdsDRAInboundBytesCBSBCPerSec=ntdsDRAInboundBytesCBSBCPerSec, ipV6FragmentsReassembledPerSec=ipV6FragmentsReassembledPerSec, adnAppl2RequestsNotFound=adnAppl2RequestsNotFound, threadPriorityBase=threadPriorityBase, irusDroppedPackets=irusDroppedPackets, smo3CallsPerSecond=smo3CallsPerSecond, ipV4DatagramsOutboundNoRoute=ipV4DatagramsOutboundNoRoute, adnApplCachePrcntPrcMemLimitUsed=adnApplCachePrcntPrcMemLimitUsed, rpcpsCurrentNumberOfBackendConns=rpcpsCurrentNumberOfBackendConns, spxFrameBytesReSentPerSec=spxFrameBytesReSentPerSec, ircsAccountingResponsesPerSec=ircsAccountingResponsesPerSec, nntpCommandsEntry=nntpCommandsEntry, dtcTransactionsPerSec=dtcTransactionsPerSec, tcpV4SegmentsReceivedPerSec=tcpV4SegmentsReceivedPerSec, pop3SvcSocketsInUse=pop3SvcSocketsInUse, tssWorkingSet=tssWorkingSet, smtpSrvrMsgsCurrUndeliverable=smtpSrvrMsgsCurrUndeliverable, aspRequestsSucceeded=aspRequestsSucceeded, smsh3RegActiveForNetPipe=smsh3RegActiveForNetPipe, ncmProcessID=ncmProcessID, npsaupPacketsReceived=npsaupPacketsReceived, siL8MergeSpeedLast=siL8MergeSpeedLast, spxPacketsSentPerSec=spxPacketsSentPerSec, siL7MergeCount=siL7MergeCount, serverPoolPagedPeak=serverPoolPagedPeak, ircsInstance=ircsInstance, snfsRPCFailures=snfsRPCFailures, ncrTotalRemoteCalls=ncrTotalRemoteCalls, npsausAccessRequests=npsausAccessRequests, bnuBITSDownloadBlockSizeBytes=bnuBITSDownloadBlockSizeBytes, npsRemoteAuthServersTable=npsRemoteAuthServersTable, ipsdOffloadedSecurityAssociation=ipsdOffloadedSecurityAssociation, npsacpDroppedPackets=npsacpDroppedPackets, systemProcesses=systemProcesses, sgNotificationSources=sgNotificationSources, wsMaximumCGIRqsts=wsMaximumCGIRqsts, adn2ApplicationRestarts=adn2ApplicationRestarts, ntdsDRAThdsGetNCChngsHoldSmphr=ntdsDRAThdsGetNCChngsHoldSmphr, npsacsMalformedPackets=npsacsMalformedPackets, sgpRetriesRate=sgpRetriesRate, icsBadAuthenticatorsPerSec=icsBadAuthenticatorsPerSec, adnApplRequestsSucceeded=adnApplRequestsSucceeded)
mibBuilder.exportSymbols("INFORMANT-ADV", dnsDatabaseNodeMemory=dnsDatabaseNodeMemory, iisGlobalFileCacheFlushes=iisGlobalFileCacheFlushes, npsshvShvOtherFailures=npsshvShvOtherFailures, tcpV6SegmentsPerSec=tcpV6SegmentsPerSec, smo3CallsFailed=smo3CallsFailed, snfsV201GetAttributes=snfsV201GetAttributes, ncmNumOfPinnedObjects=ncmNumOfPinnedObjects, wsFilesPerSec=wsFilesPerSec, ircsPacketsReceived=ircsPacketsReceived, npsaucBadAuthenticatorsPerSec=npsaucBadAuthenticatorsPerSec, npsAuthenticationProxy=npsAuthenticationProxy, frsDSSearches=frsDSSearches, snsdMessagesDeleted=snsdMessagesDeleted, adn1RequestsQueued=adn1RequestsQueued, ntdsDSMonitorListSize=ntdsDSMonitorListSize, swqAvailableWorkItems=swqAvailableWorkItems, netBIOSDatagramBytesRcvdPerSec=netBIOSDatagramBytesRcvdPerSec, dsDRAInObjectsPerSec=dsDRAInObjectsPerSec, rpcPerHTTPProxyPerServerEntry=rpcPerHTTPProxyPerServerEntry, adnAppl2OutputCacheTrims=adnAppl2OutputCacheTrims, ntdsDRAInboundPropTotalPerSec=ntdsDRAInboundPropTotalPerSec, ipsa6MainModeSAsUseImpersonation=ipsa6MainModeSAsUseImpersonation, ncltNumOfCurrentPhysicalThread=ncltNumOfCurrentPhysicalThread, memory=memory, iisGlobalBLOBCacheHits=iisGlobalBLOBCacheHits, dsSimpleBindsPerSec=dsSimpleBindsPerSec, irusBadAuthenticatorsPerSec=irusBadAuthenticatorsPerSec, npsaupAccessChallenges=npsaupAccessChallenges, wwfWorkflowsUnloadedPerSec=wwfWorkflowsUnloadedPerSec, ncnBytesSent=ncnBytesSent, sms3ValidationAuthFail=sms3ValidationAuthFail, npsRemoteAccountingServersTable=npsRemoteAccountingServersTable, frsAuthenticationsInError=frsAuthenticationsInError, msmqomsOutMulticastMessagePerSec=msmqomsOutMulticastMessagePerSec, jodVirtualBytesPeak=jodVirtualBytesPeak, ntdsDRAOutboundBytesNotCWSSBoot=ntdsDRAOutboundBytesNotCWSSBoot, ipsa4FailedQuickModeNegotiations=ipsa4FailedQuickModeNegotiations, memoryCommittedBytes=memoryCommittedBytes, dnsTotalResponseSent=dnsTotalResponseSent, ntdsDRAInboundBytesNotCWSSBoot=ntdsDRAInboundBytesNotCWSSBoot, sms3CallsFaultedPerSecond=sms3CallsFaultedPerSecond, swqInstance=swqInstance, mfsCurrentPagedMemory=mfsCurrentPagedMemory, redirPacketsReceivedPerSec=redirPacketsReceivedPerSec, httpsugConnectionAttempts=httpsugConnectionAttempts, jodPoolNonpagedBytes=jodPoolNonpagedBytes, netBIOSConnectionsOpen=netBIOSConnectionsOpen, processWorkingSetKBytes=processWorkingSetKBytes, wscFileCacheHitsPercent=wscFileCacheHitsPercent, msmqsIncomingMessagesPerSec=msmqsIncomingMessagesPerSec, msmqOutMulticastSessionTable=msmqOutMulticastSessionTable, indexingServiceFilterEntry=indexingServiceFilterEntry, dsDSPercentSearchesFromLDAP=dsDSPercentSearchesFromLDAP, adnAppl2RequestsPerSec=adnAppl2RequestsPerSec, wsrmProcessMatchingCriteriaEntry=wsrmProcessMatchingCriteriaEntry, adnAppl1CacheAPIHitRatio=adnAppl1CacheAPIHitRatio, adnRequestsRejected=adnRequestsRejected, ncmFinalizationSurvivors=ncmFinalizationSurvivors, adn2AuditSuccessEventsRaised=adn2AuditSuccessEventsRaised, adnAppl2RequestsExecuting=adnAppl2RequestsExecuting, hrasNPSValidationTimeMs=hrasNPSValidationTimeMs, ncrContextProxies=ncrContextProxies, dtcAbortedTransactionsPerSec=dtcAbortedTransactionsPerSec, systemProcessorQueueLength=systemProcessorQueueLength, icpBadAuthenticators=icpBadAuthenticators, nclRateOfAssemblies=nclRateOfAssemblies, rsvpSvcInstance=rsvpSvcInstance, ipsa4QuickModeNegotiationsPerSec=ipsa4QuickModeNegotiationsPerSec, cacheAsyncPinReadsPerSec=cacheAsyncPinReadsPerSec, adnAppl2RequestsNotAuthorized=adnAppl2RequestsNotAuthorized, dsSubtreeSearchesPerSec=dsSubtreeSearchesPerSec, smtpNTFSStoreDriverEntry=smtpNTFSStoreDriverEntry, snfsTotalRPCCallsReceived=snfsTotalRPCCallsReceived, nntpCmdsListCmdsPerSec=nntpCmdsListCmdsPerSec, ftpServiceTable=ftpServiceTable, tssInputTimeouts=tssInputTimeouts, dfsrfStagingBytesGenerated=dfsrfStagingBytesGenerated, processTable=processTable, npsaupAccessAcceptsPerSec=npsaupAccessAcceptsPerSec, sgpFilteringDocuments=sgpFilteringDocuments, dsATQRequestLatency=dsATQRequestLatency, adnAppl2InfraErrEventRaisePerSec=adnAppl2InfraErrEventRaisePerSec, redirReadBytesPagingPerSec=redirReadBytesPagingPerSec, activeServerPages=activeServerPages, wsBytesTotalPerSec=wsBytesTotalPerSec, netlogonSemaphoreAcquires=netlogonSemaphoreAcquires, cacheAsyncFastReadsPerSec=cacheAsyncFastReadsPerSec, frsDSObjectsInError=frsDSObjectsInError, tssOutputWaitForOutBuf=tssOutputWaitForOutBuf, adnApplicationsRunning=adnApplicationsRunning, tssOutputTransportErrors=tssOutputTransportErrors, serverPoolPagedKBytes=serverPoolPagedKBytes, ipsi4QuickModeNegotiationsPerSec=ipsi4QuickModeNegotiationsPerSec, ipV6DatagramsRcvdPerSec=ipV6DatagramsRcvdPerSec, dsDRAInObjectsFilteredPerSec=dsDRAInObjectsFilteredPerSec, npsaucDroppedPacketsPerSec=npsaucDroppedPacketsPerSec, aspErrorsDuringScriptRuntime=aspErrorsDuringScriptRuntime, ftpSvcTotalLogonAttempts=ftpSvcTotalLogonAttempts, jodIOOtherOperationsPerSec=jodIOOtherOperationsPerSec, wmsTotalServerUptime=wmsTotalServerUptime, cpuInstance=cpuInstance, ntdsSAMGlbGrpMembpEvalsPerSec=ntdsSAMGlbGrpMembpEvalsPerSec, tssTotalAsyncOverrun=tssTotalAsyncOverrun, adnStateServerSessionsActive=adnStateServerSessionsActive, ntdsDSPercentSearchesFromSAM=ntdsDSPercentSearchesFromSAM, wsMaximumConns=wsMaximumConns, iscsiInstance=iscsiInstance, siL1MergeSpeedLast=siL1MergeSpeedLast, wFPv6InConnections=wFPv6InConnections, atATPRetriesRemote=atATPRetriesRemote, ntdsDatabaseAddsPerSec=ntdsDatabaseAddsPerSec, sme3CallsFaultedPerSecond=sme3CallsFaultedPerSecond, npsrausAccessChallenges=npsrausAccessChallenges, ipsi4SuccessMainModeNegotPerSec=ipsi4SuccessMainModeNegotPerSec, adnAppl2TransactionsAborted=adnAppl2TransactionsAborted, wscKernelTotalURIsCached=wscKernelTotalURIsCached, msmqSvcIncomingMessagesPerSec=msmqSvcIncomingMessagesPerSec, npsaucAccessChallenges=npsaucAccessChallenges, dfsrfConflictFilesGenerated=dfsrfConflictFilesGenerated, smtpSrvrETRNMsgsTotal=smtpSrvrETRNMsgsTotal, dhcpSrvDuplicatesDroppedPerSec=dhcpSrvDuplicatesDroppedPerSec, rsvpIfPATHERRMsgsSent=rsvpIfPATHERRMsgsSent, telephonyCurrentOutgoingCalls=telephonyCurrentOutgoingCalls, httpsugHeadRequests=httpsugHeadRequests, nwFileDataOperationsPerSec=nwFileDataOperationsPerSec, memoryCacheBytes=memoryCacheBytes, frsLocalChgOrdersRetriedInstall=frsLocalChgOrdersRetriedInstall, msmqsOutgoingMessagesPerSec=msmqsOutgoingMessagesPerSec, w3svcURICacheMisses=w3svcURICacheMisses, frsFetchBlocksSentInBytes=frsFetchBlocksSentInBytes, pSchedFlowPktsScheduledPerSec=pSchedFlowPktsScheduledPerSec, cacActiveConnections=cacActiveConnections, icmpV4RcvdAddressMask=icmpV4RcvdAddressMask, swqCurrentClients=swqCurrentClients, rasPortFramesReceivedPerSec=rasPortFramesReceivedPerSec, ntdsLinkValuesCleanedPerSec=ntdsLinkValuesCleanedPerSec, npsracsBadAuthenticators=npsracsBadAuthenticators, sms3CallsDuration=sms3CallsDuration, ipsi6MainModeNegotiationRqstRcvd=ipsi6MainModeNegotiationRqstRcvd, memoryModifiedPageListBytes=memoryModifiedPageListBytes, smtpSrvrMsgsSentTotal=smtpSrvrMsgsSentTotal, udditGetauthToken=udditGetauthToken, icsDuplicateAccountingRqstPerSec=icsDuplicateAccountingRqstPerSec, dsDRAInValuesDNsOnlyPerSec=dsDRAInValuesDNsOnlyPerSec, iusAccessAcceptsPerSec=iusAccessAcceptsPerSec, smtpSrvrCatLDAPSrchCmpltFail=smtpSrvrCatLDAPSrchCmpltFail, w3svcCurrentURIsCached=w3svcCurrentURIsCached, dtcResponseTimeMinimum=dtcResponseTimeMinimum, dsSAMResourceGroupEvalLatency=dsSAMResourceGroupEvalLatency, msmqSvcIncomingMulticastSessions=msmqSvcIncomingMulticastSessions, ntdsDigestBindsPerSec=ntdsDigestBindsPerSec, ncjTotalNumOfILBytesJitted=ncjTotalNumOfILBytesJitted, adnAppl1ErrorUnhandledExecPerSec=adnAppl1ErrorUnhandledExecPerSec, ocspscInstance=ocspscInstance, msmqitIncomingHTTPBytes=msmqitIncomingHTTPBytes, pDiskSplitIOPerSec=pDiskSplitIOPerSec, smtpSrvrRouteTableLookupsTotal=smtpSrvrRouteTableLookupsTotal, wmsTotalUDPResendRequests=wmsTotalUDPResendRequests, icmpV4MessagesOutboundErrors=icmpV4MessagesOutboundErrors, processPoolPagedMBytes=processPoolPagedMBytes, dsDSSecurityDescPropAvgExclTime=dsDSSecurityDescPropAvgExclTime, ncmNumTotalCommittedBytes=ncmNumTotalCommittedBytes, siL0IndexesWordlists=siL0IndexesWordlists, sme3ReliableSessionsFaultPerSec=sme3ReliableSessionsFaultPerSec, netBIOSInstance=netBIOSInstance, npsrausPacketsReceived=npsrausPacketsReceived, frsLocalChgOrdersRetried=frsLocalChgOrdersRetried, w3svcOutputCacheTotalFlushItems=w3svcOutputCacheTotalFlushItems, ntdsSAMResourceGroupEvalLatency=ntdsSAMResourceGroupEvalLatency, tcpV6ConnectionsReset=tcpV6ConnectionsReset, icmpV4SentTimestampPerSec=icmpV4SentTimestampPerSec, genericIKEAndAuthIP=genericIKEAndAuthIP, printQueueOutOfPaperErrors=printQueueOutOfPaperErrors, aspScriptEnginesCached=aspScriptEnginesCached, wmsPeakOutDistConnections=wmsPeakOutDistConnections, sgServersCurrentlyUnavailable=sgServersCurrentlyUnavailable, rsvpIfReceiveMsgsErrorsBigMsgs=rsvpIfReceiveMsgsErrorsBigMsgs, w3svcUriCacheMissesPerSec=w3svcUriCacheMissesPerSec, networkInterfaceTable=networkInterfaceTable, snfsDRCReplyPresent=snfsDRCReplyPresent, ipsa6ExtendedModeNegotiations=ipsa6ExtendedModeNegotiations, adbiTableOpensPerSec=adbiTableOpensPerSec, dsDSPercentSearchesFromSAM=dsDSPercentSearchesFromSAM, atATPXOResponsePerSec=atATPXOResponsePerSec, icmpV6SentMembershipReport=icmpV6SentMembershipReport, cacheDataMapHitsPercent=cacheDataMapHitsPercent, iupPacketsReceived=iupPacketsReceived, nntpSrvrTotalSSLConnections=nntpSrvrTotalSSLConnections, msmqsOutgoingBytesPerSec=msmqsOutgoingBytesPerSec, npsracsPacketsReceived=npsracsPacketsReceived, tssProtocolSvScrnBtmpCachHts=tssProtocolSvScrnBtmpCachHts, adnAppl1OutputCacheTurnoverRate=adnAppl1OutputCacheTurnoverRate, npsacpRequestTimeouts=npsacpRequestTimeouts, dfsReplicationServiceVolumeTable=dfsReplicationServiceVolumeTable, sme3CallsFailed=sme3CallsFailed, smtpSrvrMsgsRfsdForMailObjects=smtpSrvrMsgsRfsdForMailObjects, dtcCommittedTransactions=dtcCommittedTransactions, aspRequestsTotal=aspRequestsTotal, irusRequestTimeouts=irusRequestTimeouts, wsTotalSearchRqsts=wsTotalSearchRqsts, wsTotalHeadRqsts=wsTotalHeadRqsts, nntpCmdsHelpCmdsPerSec=nntpCmdsHelpCmdsPerSec, frcCommunicationTimeouts=frcCommunicationTimeouts, usbTransferErrorsPerSec=usbTransferErrorsPerSec, tcpV6SegmentsReceivedPerSec=tcpV6SegmentsReceivedPerSec, adbTableOpenCacheHitsPerSec=adbTableOpenCacheHitsPerSec, dnsSecureUpdateFailure=dnsSecureUpdateFailure, wFPv6OutConnectionsBlockedPerSec=wFPv6OutConnectionsBlockedPerSec, atZIPPacketsPerSec=atZIPPacketsPerSec, browserIllegalDatagramsPerSec=browserIllegalDatagramsPerSec, dnsTCPMessageMemory=dnsTCPMessageMemory, tssPageFaultsPerSec=tssPageFaultsPerSec, snfsV300NULL=snfsV300NULL, pSchedFlowNonconfPktsSchedPerSec=pSchedFlowNonconfPktsSchedPerSec, npsausAccessAccepts=npsausAccessAccepts, aspRequestExecutionTime=aspRequestExecutionTime, atAARPPacketsPerSec=atAARPPacketsPerSec, smtpSrvrCatLDAPSrchsAbandoned=smtpSrvrCatLDAPSrchsAbandoned, netBytesSentPerSec=netBytesSentPerSec, ipSecV4Driver=ipSecV4Driver, adn2ApplicationsRunning=adn2ApplicationsRunning, memorySystemCodeTotalBytes=memorySystemCodeTotalBytes, nbtConnectionEntry=nbtConnectionEntry, serviceModelOperation3Entry=serviceModelOperation3Entry, iisGlobalURICacheMisses=iisGlobalURICacheMisses, printQueueTable=printQueueTable, adnAppl2ErrorsTotal=adnAppl2ErrorsTotal, ipsdPendingSecurityAssociations=ipsdPendingSecurityAssociations, nntpServerTable=nntpServerTable, ncjStandardJitFailures=ncjStandardJitFailures, ncmLargeObjectHeapSize=ncmLargeObjectHeapSize, telephonyClientApps=telephonyClientApps, sgDocumentEntries=sgDocumentEntries, giaipAuthIPQuickModeNegotTime=giaipAuthIPQuickModeNegotTime, ntdsLDAPNewConnectionsPerSec=ntdsLDAPNewConnectionsPerSec, smtpSrvrMsgsRcvdTotal=smtpSrvrMsgsRcvdTotal, netBIOSFramesRejectedPerSec=netBIOSFramesRejectedPerSec, nntpCmdsListCmds=nntpCmdsListCmds, pDiskAvgDiskBytesPerRead=pDiskAvgDiskBytesPerRead, ntdsSAMMachineCreateAtpsPerSec=ntdsSAMMachineCreateAtpsPerSec, smtpSrvrCatRcptsNDRdForwardLoop=smtpSrvrCatRcptsNDRdForwardLoop, w3svcTotalURIsCached=w3svcTotalURIsCached, serverWorkItemShortages=serverWorkItemShortages, netPacketsSentNonUnicastPerSec=netPacketsSentNonUnicastPerSec, memorySystemCodeResidentBytes=memorySystemCodeResidentBytes, iusAccessRejectsPerSec=iusAccessRejectsPerSec, smtpSrvrCatRcptsInCat=smtpSrvrCatRcptsInCat, ircsPendingRequests=ircsPendingRequests, dsABANRPerSec=dsABANRPerSec, ncltQueueLengthPeak=ncltQueueLengthPeak, wmusHTTPStreams=wmusHTTPStreams, adnAppl1RequestsTotal=adnAppl1RequestsTotal, dsABSearchesPerSec=dsABSearchesPerSec, npsaupProbationDecisionsPerSec=npsaupProbationDecisionsPerSec)
mibBuilder.exportSymbols("INFORMANT-ADV", ntdsDSPercentReadsFromSAM=ntdsDSPercentReadsFromSAM, netBIOSDatagramsSentPerSec=netBIOSDatagramsSentPerSec, ipV6DatagramsRcvdHeaderErrors=ipV6DatagramsRcvdHeaderErrors, wmsPeakStreamingPlayers=wmsPeakStreamingPlayers, frcJoinNotificationsReceived=frcJoinNotificationsReceived, wmsTotalStreamingPlayers=wmsTotalStreamingPlayers, npsaccBadAuthenticators=npsaccBadAuthenticators, msmqBytesInJournalQueue=msmqBytesInJournalQueue, ircsRequestTimeouts=ircsRequestTimeouts, faxsFailedReceptions=faxsFailedReceptions, ncnInstance=ncnInstance, rsvpIfSignalingBytesReceived=rsvpIfSignalingBytesReceived, sgpProcessedDocumentsRate=sgpProcessedDocumentsRate, netBEUIFrameBytesRejectedPerSec=netBEUIFrameBytesRejectedPerSec, tcpV4SegmentsPerSec=tcpV4SegmentsPerSec, jodPoolPagedBytes=jodPoolPagedBytes, pSchedFlowBytesTransmittedPerSec=pSchedFlowBytesTransmittedPerSec, httpServiceUriCacheFlushes=httpServiceUriCacheFlushes, npsaucUnknownTypePerSec=npsaucUnknownTypePerSec, dsSAMDisplayInfoQueriesPerSec=dsSAMDisplayInfoQueriesPerSec, wscCurrentFileCacheMemoryUsage=wscCurrentFileCacheMemoryUsage, npsausServerUpTime=npsausServerUpTime, ntdsDRAOutboundBytesNotCWSPerSec=ntdsDRAOutboundBytesNotCWSPerSec, snfsV313RemoveDirectory=snfsV313RemoveDirectory, serverWorkQueuesTable=serverWorkQueuesTable, tcpV4ConnectionFailures=tcpV4ConnectionFailures, serverSessionsForcedOff=serverSessionsForcedOff, ncmPromotedMemoryFromGen0=ncmPromotedMemoryFromGen0, icmpV6ReceivedEchoReplyPerSec=icmpV6ReceivedEchoReplyPerSec, pSchedFlowBytesScheduled=pSchedFlowBytesScheduled, dotNETCLRNetworkingTable=dotNETCLRNetworkingTable, npspeLastRoundTripTime=npspeLastRoundTripTime, udditGetbindingDetail=udditGetbindingDetail, jodIOWriteOperationsPerSec=jodIOWriteOperationsPerSec, aspScriptEngineCacheHitRate=aspScriptEngineCacheHitRate, hrasSumOfTimePerRequestMs=hrasSumOfTimePerRequestMs, ipsi6ActiveQuickModeSAs=ipsi6ActiveQuickModeSAs, snfsV210Remove=snfsV210Remove, wscKernelURICacheMisses=wscKernelURICacheMisses, icmpV6MessagesPerSec=icmpV6MessagesPerSec, processPrivateKBytes=processPrivateKBytes, dotNETCLRMemoryEntry=dotNETCLRMemoryEntry, sgpIncrementalCrawls=sgpIncrementalCrawls, icmpV6SentEchoReplyPerSec=icmpV6SentEchoReplyPerSec, smo3CallsNotAuthorized=smo3CallsNotAuthorized, dnsTCPResponseSentPerSec=dnsTCPResponseSentPerSec, npsracsPacketsReceivedPerSec=npsracsPacketsReceivedPerSec, rsvpIfSendMsgsErrorsNoMemory=rsvpIfSendMsgsErrorsNoMemory, ntdsDatabaseModifysPerSec=ntdsDatabaseModifysPerSec, wmsCurUDPResendRequestsRate=wmsCurUDPResendRequestsRate, icmpV6SentMembershipQuery=icmpV6SentMembershipQuery, netBIOSPiggybackAckTimeouts=netBIOSPiggybackAckTimeouts, wmusAuthenticationsDenied=wmusAuthenticationsDenied, iusAccessChallengesPerSec=iusAccessChallengesPerSec, memoryFreeSystemPageTableEntries=memoryFreeSystemPageTableEntries, redirReadPacketsSmallPerSec=redirReadPacketsSmallPerSec, rsvpIfSendMsgsErrorsBigMsgs=rsvpIfSendMsgsErrorsBigMsgs, sgReasonToBackOff=sgReasonToBackOff, acsPerRsvpSvcInstance=acsPerRsvpSvcInstance, aspRequestsNotFound=aspRequestsNotFound, wFPv6InConnectionsBlockedPerSec=wFPv6InConnectionsBlockedPerSec, udpV4DatagramsPerSec=udpV4DatagramsPerSec, smtpSrvrCatMsgsCategorized=smtpSrvrCatMsgsCategorized, smtpSrvrRemoteRetryQueueLength=smtpSrvrRemoteRetryQueueLength, dsSAMSuccCmpCrtPerSecInclAllRqst=dsSAMSuccCmpCrtPerSecInclAllRqst, frsReplicaSetsDeleted=frsReplicaSetsDeleted, lDiskPercentDiskReadTime=lDiskPercentDiskReadTime, adn2InfraErrorEventsRaised=adn2InfraErrorEventsRaised, dsDSNameCacheHitRate=dsDSNameCacheHitRate, wsMaximumISAPIExtensionRqsts=wsMaximumISAPIExtensionRqsts, adbiLogThreadsWaiting=adbiLogThreadsWaiting, ipsa6ActiveExtendedModeSAs=ipsa6ActiveExtendedModeSAs, wsFilesSentPerSec=wsFilesSentPerSec, snfsV203Root=snfsV203Root, smtpSrvrCatLDAPSrchsPendingCmplt=smtpSrvrCatLDAPSrchsPendingCmplt, iusServerUpTime=iusServerUpTime, pSchedFlowPktsDropped=pSchedFlowPktsDropped, ipsi6MainModeNegotiations=ipsi6MainModeNegotiations, sgpDocumentDeletes=sgpDocumentDeletes, npsrausPendingRequests=npsrausPendingRequests, memoryStbyCacheReserveBytes=memoryStbyCacheReserveBytes, ntdsDRAHighestUSNCommitLowPart=ntdsDRAHighestUSNCommitLowPart, searchGatherer=searchGatherer, processWorkingSetKBytesPeak=processWorkingSetKBytesPeak, pop3SvcBytesReceivePerSec=pop3SvcBytesReceivePerSec, ntdsATQThreadsTotal=ntdsATQThreadsTotal, adnAppl2TransactionsCommitted=adnAppl2TransactionsCommitted, iucBadAuthenticatorsPerSec=iucBadAuthenticatorsPerSec, wsTotalFilesReceived=wsTotalFilesReceived, adbDatabaseCachePercentHit=adbDatabaseCachePercentHit, cpuPercentC3Time=cpuPercentC3Time, jodCreatingProcessID=jodCreatingProcessID, smo3CallsFaultedPerSecond=smo3CallsFaultedPerSecond, siL6MergeCount=siL6MergeCount, adnApplAnonymousRequests=adnApplAnonymousRequests, sgThreadsBlockedDueToBackOff=sgThreadsBlockedDueToBackOff, ircsPortNumber=ircsPortNumber, netBEUIDatagramBytesRcvdPerSec=netBEUIDatagramBytesRcvdPerSec, ntdsDSSearchSuboperationsPerSec=ntdsDSSearchSuboperationsPerSec, sgpRecoveryInProgressFlag=sgpRecoveryInProgressFlag, nclRateOfClassesLoaded=nclRateOfClassesLoaded, ipV6DatagramsSentPerSec=ipV6DatagramsSentPerSec, advDatabaseTable=advDatabaseTable, ipV6FragmentReassemblyFailures=ipV6FragmentReassemblyFailures, swqWriteBytesPerSec=swqWriteBytesPerSec, ncrContextBoundClassesLoaded=ncrContextBoundClassesLoaded, iupRetransmissionsPerSec=iupRetransmissionsPerSec, processPoolNonpagedKBytes=processPoolNonpagedKBytes, redirWritePacketsPerSec=redirWritePacketsPerSec, aspInMemoryTemplateCacheHitRate=aspInMemoryTemplateCacheHitRate, npsacpPendingRequests=npsacpPendingRequests, irusPendingRequests=irusPendingRequests, udditSavebusiness=udditSavebusiness, ipV4FragmentationFailures=ipV4FragmentationFailures, winsSrvrTotalNumConflictsPerSec=winsSrvrTotalNumConflictsPerSec, w3svcFileCacheMisses=w3svcFileCacheMisses, pSchedFlowNonconfPktsXmitdPerSec=pSchedFlowNonconfPktsXmitdPerSec, serviceModelEndpoint3Table=serviceModelEndpoint3Table, ntdsNegotiatedBindsPerSec=ntdsNegotiatedBindsPerSec, wscOutputCacheTotalMisses=wscOutputCacheTotalMisses, nntpSrvrInstance=nntpSrvrInstance, acsPerRsvpServiceTable=acsPerRsvpServiceTable, aspRequestsFailedTotal=aspRequestsFailedTotal, dnsIXFRRequestReceived=dnsIXFRRequestReceived, redirBytesTransmittedPerSec=redirBytesTransmittedPerSec, ipsdBytesSentInTunnelModePerSec=ipsdBytesSentInTunnelModePerSec, npsaupMalformedPackets=npsaupMalformedPackets, redirReadPacketsPerSec=redirReadPacketsPerSec, sswsKDCTGSRequests=sswsKDCTGSRequests, msmqBytesInQueue=msmqBytesInQueue, npsacsPacketsSent=npsacsPacketsSent, wscTotalMetadataCached=wscTotalMetadataCached, jodElapsedTime=jodElapsedTime, jodInstance=jodInstance, irusLastRoundTripTime=irusLastRoundTripTime, wmusPluginErrors=wmusPluginErrors, adnApplOutputCacheHitRatio=adnApplOutputCacheHitRatio, dhcpSrvPacketsReceivedPerSec=dhcpSrvPacketsReceivedPerSec, nwPacketsReceivedPerSec=nwPacketsReceivedPerSec, gatewayServiceForNetWare=gatewayServiceForNetWare, ntdsDRAInboundObjsFilteredPerSec=ntdsDRAInboundObjsFilteredPerSec, processPageFileKBytes=processPageFileKBytes, wsFilesReceivedPerSec=wsFilesReceivedPerSec, rsvpIfSignalingBytesSent=rsvpIfSignalingBytesSent, wscTotalFlushedURIs=wscTotalFlushedURIs, adbTableOpenCachePercentHit=adbTableOpenCachePercentHit, iisGlobalTotalFlushedBLOBs=iisGlobalTotalFlushedBLOBs, adbtcCacheSizeMB=adbtcCacheSizeMB, nntpCmdsNewnewsCmds=nntpCmdsNewnewsCmds, aspDotNETv2=aspDotNETv2, iscsiSessionFormatErrors=iscsiSessionFormatErrors, wsMaximumNonAnonymousUsers=wsMaximumNonAnonymousUsers, npsracsRequestTimeouts=npsracsRequestTimeouts, sgpIteratingHistInProgressFlag=sgpIteratingHistInProgressFlag, udpV4=udpV4, w3svcFileCacheFlushes=w3svcFileCacheFlushes, indexingServiceTable=indexingServiceTable, cacheMDLReadHitsPercent=cacheMDLReadHitsPercent, smtpSrvrMsgBytesSentTotal=smtpSrvrMsgBytesSentTotal, adnApplRequestExecutionTime=adnApplRequestExecutionTime, dsDRAThreadsGettingNCChanges=dsDRAThreadsGettingNCChanges, aspTransactionsAborted=aspTransactionsAborted, msmqomsInstance=msmqomsInstance, adnAppl1DebuggingRequests=adnAppl1DebuggingRequests, is4dTotalOffloadedBytesSent=is4dTotalOffloadedBytesSent, httpsugBytesSentRate=httpsugBytesSentRate, dfsrfSizeOfFilesReceived=dfsrfSizeOfFilesReceived, httpServiceRequestQueuesEntry=httpServiceRequestQueuesEntry, ipsi6MainModeNegotiationsPerSec=ipsi6MainModeNegotiationsPerSec, wmsCurOutDistSendRateKbps=wmsCurOutDistSendRateKbps, sgpInstance=sgpInstance, icsInvalidRequestsPerSec=icsInvalidRequestsPerSec, nntpSrvrFailedOutboundLogons=nntpSrvrFailedOutboundLogons, netBIOSPacketsSentPerSec=netBIOSPacketsSentPerSec, cacheLazyWritePagesPerSec=cacheLazyWritePagesPerSec, adbiLogBytesWritePerSec=adbiLogBytesWritePerSec, frcFetchBlocksSentInBytes=frcFetchBlocksSentInBytes, ipxPiggybackAckQueuedPerSec=ipxPiggybackAckQueuedPerSec, iucInstance=iucInstance, smtpSrvrBadMailMsgsBadPickupFile=smtpSrvrBadMailMsgsBadPickupFile, spxWindowSendMaximum=spxWindowSendMaximum, nntpSrvrCurrentConnections=nntpSrvrCurrentConnections, dtcInDoubtTransactions=dtcInDoubtTransactions, frsChgOrdersEvaporated=frsChgOrdersEvaporated, wmusHTTPStreamsReadingHeader=wmusHTTPStreamsReadingHeader, adnApplTransactionsAborted=adnApplTransactionsAborted, udditGetassertionStatusReport=udditGetassertionStatusReport, wscKernelUriCacheHitsPerSec=wscKernelUriCacheHitsPerSec, siMasterMergesNow=siMasterMergesNow, jodPrivateBytes=jodPrivateBytes, ntdsDSPercentSearchesFromKCC=ntdsDSPercentSearchesFromKCC, lDiskAvgDiskReadQueueLength=lDiskAvgDiskReadQueueLength, npsrausAccessRequests=npsrausAccessRequests, pop3SvcTotalBytesTransmitted=pop3SvcTotalBytesTransmitted, jobObjectDetailsEntry=jobObjectDetailsEntry, tssOutputFrames=tssOutputFrames, npsaucPacketsSent=npsaucPacketsSent, iusPacketsSent=iusPacketsSent, smtpSrvrCatCatsFailOutOfMemory=smtpSrvrCatCatsFailOutOfMemory, is4iTotalNegotiationFailures=is4iTotalNegotiationFailures, icsMalformedPacketsPerSec=icsMalformedPacketsPerSec, ntdsDSPercentReadsFromDRA=ntdsDSPercentReadsFromDRA, dsDRAInPropertiesTotalPerSec=dsDRAInPropertiesTotalPerSec, ipsa4MainModeNegRqstReceived=ipsa4MainModeNegRqstReceived, npsshvShvCompliancesPerSec=npsshvShvCompliancesPerSec, uddicFindbusiness=uddicFindbusiness, browserElectionPacketsPerSec=browserElectionPacketsPerSec, icmpV6ReceivedNeighborSolicit=icmpV6ReceivedNeighborSolicit, sme3ReliableSessionsFaulted=sme3ReliableSessionsFaulted, adnAppl1RequestBytesOutTotal=adnAppl1RequestBytesOutTotal, ntdsDRAOutboundBytesTotalBoot=ntdsDRAOutboundBytesTotalBoot, ocspServerConnectionsTable=ocspServerConnectionsTable, w3svcOutputCacheMissesPerSec=w3svcOutputCacheMissesPerSec, wsTotalAnonymousUsers=wsTotalAnonymousUsers, memoryStbyCacheCoreKBytes=memoryStbyCacheCoreKBytes, pSchedPipeBadPacketsSched=pSchedPipeBadPacketsSched, adnAppl2OutputCacheEntries=adnAppl2OutputCacheEntries, nntpCmdsXOverCmds=nntpCmdsXOverCmds, wmusHTTPStreamsStreamingBody=wmusHTTPStreamsStreamingBody, dnsWINSReverseLookupRcvPerSec=dnsWINSReverseLookupRcvPerSec, siL5MergeCount=siL5MergeCount, nwFileWriteOperationsPerSec=nwFileWriteOperationsPerSec, pSchedPipeAvgPacketsInShaper=pSchedPipeAvgPacketsInShaper, nntpSrvrBytesReceivedPerSec=nntpSrvrBytesReceivedPerSec, wwfWorkflowsAbortedPerSec=wwfWorkflowsAbortedPerSec, snfsNFSErrorsV2=snfsNFSErrorsV2, dfsrcSizeOfFilesReceived=dfsrcSizeOfFilesReceived, nntpCmdsLastCmdsPerSec=nntpCmdsLastCmdsPerSec, tsgFailedConnections=tsgFailedConnections, icmpV6SentParameterProblem=icmpV6SentParameterProblem, ipV6=ipV6, nntpSrvrSessionsFlowControlled=nntpSrvrSessionsFlowControlled, netBEUIFramesRejectedPerSec=netBEUIFramesRejectedPerSec, frsChgOrdersRetriedInstall=frsChgOrdersRetriedInstall, tssTotalCompressFlushes=tssTotalCompressFlushes, npsaccDupAccountingRequestPerSec=npsaccDupAccountingRequestPerSec, wwfWorkflowsCreatedPerSec=wwfWorkflowsCreatedPerSec, adnApplApplicationLifetimeEvents=adnApplApplicationLifetimeEvents, adnApplInfraErrEventRaisedPerSec=adnApplInfraErrEventRaisedPerSec, ftpSvcBytesSentPerSec=ftpSvcBytesSentPerSec, iccNoRecordPerSec=iccNoRecordPerSec, adnApplAuditFailureEventsRaised=adnApplAuditFailureEventsRaised, httpService=httpService, npsaupProbationDecisions=npsaupProbationDecisions, nntpSrvrXoverEntriesPerSec=nntpSrvrXoverEntriesPerSec, adnAppl1CacheTotalMisses=adnAppl1CacheTotalMisses, dnsDynamicUpdateQueued=dnsDynamicUpdateQueued, usbBulkBytesPerSec=usbBulkBytesPerSec, adnAppl1RequestsNotFound=adnAppl1RequestsNotFound, sgAdminClients=sgAdminClients, snfsV216ReadDirectory=snfsV216ReadDirectory, msmqimsInstance=msmqimsInstance, npsAuthenticationClientsTable=npsAuthenticationClientsTable, ncdSQLClntCurNumConnPools=ncdSQLClntCurNumConnPools)
mibBuilder.exportSymbols("INFORMANT-ADV", netBEUIResourceUsedAverage=netBEUIResourceUsedAverage, sme3Instance=sme3Instance, smtpSrvrNumberOfQueueFilesOpen=smtpSrvrNumberOfQueueFilesOpen, npsacsUnknownType=npsacsUnknownType, adnAppl2RequestWaitTime=adnAppl2RequestWaitTime, atPacketsRoutedOutPerSec=atPacketsRoutedOutPerSec, smo3CallsDuration=smo3CallsDuration, smtpSrvrCatMsgsSubmittedPerSec=smtpSrvrCatMsgsSubmittedPerSec, wmsCurStreamingMMSPlayers=wmsCurStreamingMMSPlayers, dtcAbortedTransactions=dtcAbortedTransactions, wscCurrentFilesCached=wscCurrentFilesCached, frsUnjoins=frsUnjoins, nntpSrvrBytesSentPerSec=nntpSrvrBytesSentPerSec, wmsCurConnectionRate=wmsCurConnectionRate, processPoolPagedKBytes=processPoolPagedKBytes, wmiObjectsHiPerfValidity=wmiObjectsHiPerfValidity, snfsV303Lookup=snfsV303Lookup, siL5MergeSpeedAverage=siL5MergeSpeedAverage, ntdsLDAPSuccessfulBindsPerSec=ntdsLDAPSuccessfulBindsPerSec, smtpSrvrMsgsRcvdPerSec=smtpSrvrMsgsRcvdPerSec, npsausAccessChallengesPerSec=npsausAccessChallengesPerSec, frsLocalChgOrdersSentJoin=frsLocalChgOrdersSentJoin, sme3ValidationAuthFailPerSec=sme3ValidationAuthFailPerSec, spxDatagramBytesSentPerSec=spxDatagramBytesSentPerSec, snfsV213SymbolicLink=snfsV213SymbolicLink, dfsrfConflictFilesCleanedUp=dfsrfConflictFilesCleanedUp, tssOutputWdBytes=tssOutputWdBytes, sswsKerberosAuthentications=sswsKerberosAuthentications, npsrausProbationDecisionsPerSec=npsrausProbationDecisionsPerSec, tssTotalAsyncFrameError=tssTotalAsyncFrameError, dsDRAInLinkValueUpdRemainInPkt=dsDRAInLinkValueUpdRemainInPkt, atAverageTimePerATPPacket=atAverageTimePerATPPacket, adn2AuditFailureEventsRaised=adn2AuditFailureEventsRaised, dnsDynamicUpdateTimeOuts=dnsDynamicUpdateTimeOuts, npsaccPacketsSentPerSec=npsaccPacketsSentPerSec, adbInstance=adbInstance, icmpV4RcvdEchoPerSec=icmpV4RcvdEchoPerSec, ntdsSubtreeSearchesPerSec=ntdsSubtreeSearchesPerSec, wsCurrentConns=wsCurrentConns, adnAppl2ErrorsTotalPerSec=adnAppl2ErrorsTotalPerSec, sgpStartedDocuments=sgpStartedDocuments, ntdsLDAPSuccessfulBinds=ntdsLDAPSuccessfulBinds, snfsMV300NULLMount=snfsMV300NULLMount, dsABBrowsesPerSec=dsABBrowsesPerSec, iisGlobalBLOBCacheFlushes=iisGlobalBLOBCacheFlushes, ipsdPacketsNotDecrypted=ipsdPacketsNotDecrypted, idxSvcNumDocumentsIndexed=idxSvcNumDocumentsIndexed, serviceModelService3Table=serviceModelService3Table, wsCGIRqstsPerSec=wsCGIRqstsPerSec, ipsi4FailedMainModeNegotiations=ipsi4FailedMainModeNegotiations, adn1RequestsCurrent=adn1RequestsCurrent, ipxWindowSendAverage=ipxWindowSendAverage, rsvpSvcQoSNotifications=rsvpSvcQoSNotifications, memorySystemDriverResidentBytes=memorySystemDriverResidentBytes, wsPutRqstsPerSec=wsPutRqstsPerSec, wFPProviderCount=wFPProviderCount, adnAppl1RequestsTimedOut=adnAppl1RequestsTimedOut, cpuDPCsQueuedPerSec=cpuDPCsQueuedPerSec, npsaccDroppedPacketsPerSec=npsaccDroppedPacketsPerSec, smtpSrvrMsgDlvryRetries=smtpSrvrMsgDlvryRetries, smtpSrvrBytesSentTotal=smtpSrvrBytesSentTotal, ncdInstance=ncdInstance, atRTMPPacketsPerSec=atRTMPPacketsPerSec, memorySystemCodeResidentKBytes=memorySystemCodeResidentKBytes, ipV6DatagramsForwardedPerSec=ipV6DatagramsForwardedPerSec, nclTotalNumOfLoadFailures=nclTotalNumOfLoadFailures, wmsPeakPlayerSendRateKbps=wmsPeakPlayerSendRateKbps, nwConnectNetWare3X=nwConnectNetWare3X, httpServiceUriCacheMisses=httpServiceUriCacheMisses, npsracsMalformedPacketsPerSec=npsracsMalformedPacketsPerSec, dnsDynamicUpdateWriteToDB=dnsDynamicUpdateWriteToDB, siIndexSize=siIndexSize, sgFilterProcessesMax=sgFilterProcessesMax, adnApplRequestWaitTime=adnApplRequestWaitTime, is4dPendingKeyExchangeOperations=is4dPendingKeyExchangeOperations, physicalDiskEntry=physicalDiskEntry, wmppPeakConnectedPlayers=wmppPeakConnectedPlayers, ntdsABANRPerSec=ntdsABANRPerSec, advDatabaseTableClassesEntry=advDatabaseTableClassesEntry, udditGethighWaterMarks=udditGethighWaterMarks, rsvpIfGeneralFailures=rsvpIfGeneralFailures, frsRemoteChgOrdersRetriedRename=frsRemoteChgOrdersRetriedRename, memorySystemCodeTotalKBytes=memorySystemCodeTotalKBytes, npsaupAccessChallengesPerSec=npsaupAccessChallengesPerSec, uddicFindbinding=uddicFindbinding, w3svcActiveFlushedEntries=w3svcActiveFlushedEntries, rsvpIfReservedBandwidth=rsvpIfReservedBandwidth, uddicDeleteservice=uddicDeleteservice, sgpAccessedFileRate=sgpAccessedFileRate, fileReplicaConnEntry=fileReplicaConnEntry, processWorkingSetPeak=processWorkingSetPeak, vschdPresentPerSec=vschdPresentPerSec, caPendingRequestsPerSec=caPendingRequestsPerSec, ncdSQLClntCurNumConns=ncdSQLClntCurNumConns, dsSAMGlobalGroupMembEvalPerSec=dsSAMGlobalGroupMembEvalPerSec, wmsCurPlayerAllocBandwidthKbps=wmsCurPlayerAllocBandwidthKbps, dfsrsvDatabaseCommits=dfsrsvDatabaseCommits, npsacsAccountingResponses=npsacsAccountingResponses, npsausQuarantineDecisions=npsausQuarantineDecisions, rpcpFailLoadBalBrokerRqstsPerSec=rpcpFailLoadBalBrokerRqstsPerSec, netBIOSFailuresResourceLocal=netBIOSFailuresResourceLocal, processIOReadBytesPerSec=processIOReadBytesPerSec, dsDRAHighestUSNIssuedLowPart=dsDRAHighestUSNIssuedLowPart, logicalDiskTable=logicalDiskTable, frsThreadsStarted=frsThreadsStarted, w3svcOutputCacheTotalHits=w3svcOutputCacheTotalHits, adnssSessionsTimedOut=adnssSessionsTimedOut, pSchedPipeFlowsModified=pSchedPipeFlowsModified, snfsBytesRead=snfsBytesRead, rasTotalCRCErrors=rasTotalCRCErrors, tssProtocolBrushCacheReads=tssProtocolBrushCacheReads, irusRetransmissionsPerSec=irusRetransmissionsPerSec, ncrContexts=ncrContexts, joPagesPerSec=joPagesPerSec, dnsRecursiveQueriesPerSec=dnsRecursiveQueriesPerSec, bnuNetcardSpeedBitsPerSec=bnuNetcardSpeedBitsPerSec, frcFetchRequestsSent=frcFetchRequestsSent, cpuDPCRate=cpuDPCRate, snfsRPCRepliesReceivedPerSec=snfsRPCRepliesReceivedPerSec, udditGetrelatedCategories=udditGetrelatedCategories, sgServerObjectsCreated=sgServerObjectsCreated, nntpCmdsQuitCmdsPerSec=nntpCmdsQuitCmdsPerSec, ipsdBytesRcvdInTunnelModePerSec=ipsdBytesRcvdInTunnelModePerSec, udditDiscardauthToken=udditDiscardauthToken, wsTraceRqstsPerSec=wsTraceRqstsPerSec, nntpCmdsXReplicCmds=nntpCmdsXReplicCmds, dnsRecursiveQueryFailurePerSec=dnsRecursiveQueryFailurePerSec, ncltRateOfRecognizedThreadPerSec=ncltRateOfRecognizedThreadPerSec, npsaupInvalidAddresses=npsaupInvalidAddresses, system=system, videoSchedulerEntry=videoSchedulerEntry, dotNETCLRExceptionsEntry=dotNETCLRExceptionsEntry, ntdsDSServerBindsPerSec=ntdsDSServerBindsPerSec, pagingFileTable=pagingFileTable, ntdsSAMUniversalGrpMemEvalPerSec=ntdsSAMUniversalGrpMemEvalPerSec, searchGathererProjectsEntry=searchGathererProjectsEntry, snfsV214MakeDirectory=snfsV214MakeDirectory, spxFrameBytesReceivedPerSec=spxFrameBytesReceivedPerSec, dfsReplicatedFoldersEntry=dfsReplicatedFoldersEntry, idxSvcSavedIndexes=idxSvcSavedIndexes, snfsMOUNTErrorsV3=snfsMOUNTErrorsV3, aspDotNETApplicationsEntry=aspDotNETApplicationsEntry, netBIOSFailuresResourceRemote=netBIOSFailuresResourceRemote, udditFindbusiness=udditFindbusiness, npsshvShvServerComponentFailures=npsshvShvServerComponentFailures, icmpV4RcvdAddressMaskReply=icmpV4RcvdAddressMaskReply, sms3QueuedMessagesRejected=sms3QueuedMessagesRejected, npsacsUnknownTypePerSec=npsacsUnknownTypePerSec, tssTotalWdFrames=tssTotalWdFrames, npsracsDroppedPacketsPerSec=npsracsDroppedPacketsPerSec, systemThreads=systemThreads, dfsrcCompressedSizeOfFilesRcvd=dfsrcCompressedSizeOfFilesRcvd, adnAppl2SessionsAbandoned=adnAppl2SessionsAbandoned, threadEntry=threadEntry, dfsrfConflictFolderCleanupsComp=dfsrfConflictFolderCleanupsComp, msmqosOutgoingHTTPMessagesPerSec=msmqosOutgoingHTTPMessagesPerSec, adbiSessionsInUse=adbiSessionsInUse, tssProtocolBrushCacheHitRatio=tssProtocolBrushCacheHitRatio, ncmNumGen1Collections=ncmNumGen1Collections, cacheFastReadsPerSec=cacheFastReadsPerSec, memoryPoolPagedMBytes=memoryPoolPagedMBytes, processPercentUserTime=processPercentUserTime, iccBadAuthenticatorsPerSec=iccBadAuthenticatorsPerSec, smtpSrvrMsgBytesRcvdPerSec=smtpSrvrMsgBytesRcvdPerSec, joTotalMSecProcessor=joTotalMSecProcessor, uddicGetbusinessDetail=uddicGetbusinessDetail, snfsV310SymbolicLink=snfsV310SymbolicLink, ipsa6FailQuickModeNegotPerSec=ipsa6FailQuickModeNegotPerSec, giaipFailedNegotiations=giaipFailedNegotiations, ntdsLDAPUDPOperationsPerSec=ntdsLDAPUDPOperationsPerSec, netBEUIInstance=netBEUIInstance, processElapsedTime=processElapsedTime, frsChgOrdersReceived=frsChgOrdersReceived, ntdsSimpleBindsPerSec=ntdsSimpleBindsPerSec, redirReadBytesNonPagingPerSec=redirReadBytesNonPagingPerSec, sms3CallsFailedPerSecond=sms3CallsFailedPerSecond, jodPriorityBase=jodPriorityBase, sme3CallsNotAuthorized=sme3CallsNotAuthorized, tssTotalErrors=tssTotalErrors, ntdsDRAInboundBytesTotalBoot=ntdsDRAInboundBytesTotalBoot, msmqimsIncomingMulticastBytes=msmqimsIncomingMulticastBytes, w3svcMetadataCacheHitsPerSec=w3svcMetadataCacheHitsPerSec, smtpSrvrPickupDirMsgsRtrvdTotal=smtpSrvrPickupDirMsgsRtrvdTotal, atATPResponseTimouts=atATPResponseTimouts, iccAccountingResponses=iccAccountingResponses, npsacpAccountingRequestsPerSec=npsacpAccountingRequestsPerSec, sgAllNotificationsReceived=sgAllNotificationsReceived, lDiskDiskWritesPerSec=lDiskDiskWritesPerSec, adnAppl1Instance=adnAppl1Instance, caRetrievalsPerSec=caRetrievalsPerSec, dnsDynamicUpdateNoOpPerSec=dnsDynamicUpdateNoOpPerSec, tssOutputCompressedBytes=tssOutputCompressedBytes, wsConnAtmpsPerSec=wsConnAtmpsPerSec, snfsV319FileSystemInfo=snfsV319FileSystemInfo, icsBadAuthenticators=icsBadAuthenticators, dsDSPercentWritesOther=dsDSPercentWritesOther, ntdsSAMDomLocGrpMembEvalsPerSec=ntdsSAMDomLocGrpMembEvalsPerSec, snfsUnrecognizedRPCPackets=snfsUnrecognizedRPCPackets, dtcForceAbortedTransactions=dtcForceAbortedTransactions, memoryFreeZeroPageListBytes=memoryFreeZeroPageListBytes, smtpSrvrCatAddrLookupCmpltPerSec=smtpSrvrCatAddrLookupCmpltPerSec, macFileServer=macFileServer, printQueueJobsSpooling=printQueueJobsSpooling, ntdsDSSecurityDescPropAvgExTime=ntdsDSSecurityDescPropAvgExTime, ipsa4ActiveMainModeSAs=ipsa4ActiveMainModeSAs, npsAuthenticationClientsEntry=npsAuthenticationClientsEntry, dtcBridge3=dtcBridge3, cacheSyncPinReadsPerSec=cacheSyncPinReadsPerSec, ntdsABProxyLookupsPerSec=ntdsABProxyLookupsPerSec, wmppTotalStreamDenials=wmppTotalStreamDenials, wmusStreamErrors=wmusStreamErrors, rsvpIfMaximumAdmittedBandwidth=rsvpIfMaximumAdmittedBandwidth, npsausAccessRejectsPerSec=npsausAccessRejectsPerSec, nceThrowToCatchDepthPerSec=nceThrowToCatchDepthPerSec, iucAccessAcceptsPerSec=iucAccessAcceptsPerSec, snfsWorkQueueSize=snfsWorkQueueSize, adnAppl2ErrorUnhandledDuringExec=adnAppl2ErrorUnhandledDuringExec, spxFailuresAdapter=spxFailuresAdapter, wwfInstance=wwfInstance, acsPerRsvpSvcBytesInQoSNotify=acsPerRsvpSvcBytesInQoSNotify, iccDuplicateAccountingRqstPerSec=iccDuplicateAccountingRqstPerSec, sme3ValidationAuthFail=sme3ValidationAuthFail, aspRequestBytesInTotal=aspRequestBytesInTotal, sgpNotModified=sgpNotModified, memorySystemCacheResidentMBytes=memorySystemCacheResidentMBytes, nntpCmdsNewgroupsCmdsPerSec=nntpCmdsNewgroupsCmdsPerSec, distributeTransactionCoordinator=distributeTransactionCoordinator, dsDatabaseModifysPerSec=dsDatabaseModifysPerSec, udditDeletepublisherAssertions=udditDeletepublisherAssertions, wscOutputCacheTotalFlushedItems=wscOutputCacheTotalFlushedItems, dsDRAOutNotCmpWithinSiteSinceBt=dsDRAOutNotCmpWithinSiteSinceBt, npsacpUnknownType=npsacpUnknownType, dsABMatchesPerSec=dsABMatchesPerSec, dhcpServer=dhcpServer, adnApplCacheTotalTrims=adnApplCacheTotalTrims, mfsCurrentNonPagedMemory=mfsCurrentNonPagedMemory, sgThreadsAccessingNetwork=sgThreadsAccessingNetwork, objectsThreads=objectsThreads, w3svcW3WPEntry=w3svcW3WPEntry, npsausQuarantineDecisionsPerSec=npsausQuarantineDecisionsPerSec, adnAppl2CachePctProcMemLimUsed=adnAppl2CachePctProcMemLimUsed, lDiskPercentFreeSpace=lDiskPercentFreeSpace, adn1StateServerSessionsAbandoned=adn1StateServerSessionsAbandoned, npsshvShvNonCompliancesPerSec=npsshvShvNonCompliancesPerSec, hcapcPostureValidFailureResponse=hcapcPostureValidFailureResponse, sgpGathererPausedFlag=sgpGathererPausedFlag, dsDSNotifyQueueSize=dsDSNotifyQueueSize, smtpSrvrBytesRcvdPerSec=smtpSrvrBytesRcvdPerSec, rasPortAlignmentErrors=rasPortAlignmentErrors, wmppCurOutDistAllocBandwidthKbps=wmppCurOutDistAllocBandwidthKbps, dnsIXFRUDPSuccessReceived=dnsIXFRUDPSuccessReceived, windowsMediaServices=windowsMediaServices, ipsa4QuickModeNegotiations=ipsa4QuickModeNegotiations, npsacsPacketsReceived=npsacsPacketsReceived)
mibBuilder.exportSymbols("INFORMANT-ADV", printQueueMaxJobsSpooling=printQueueMaxJobsSpooling, wsTotalUnlockRqsts=wsTotalUnlockRqsts, sgpAdaptiveCrawlErrors=sgpAdaptiveCrawlErrors, sgpDocumentsInProgress=sgpDocumentsInProgress, wmppPeakOutDistAllocBandwdthKbps=wmppPeakOutDistAllocBandwdthKbps, ntdsDSDirectorySearchesPerSec=ntdsDSDirectorySearchesPerSec, npsausAccessAcceptsPerSec=npsausAccessAcceptsPerSec, ncnDatagramsReceived=ncnDatagramsReceived, dtcb3AvgParticipantPrepRspnsTime=dtcb3AvgParticipantPrepRspnsTime, pSchedPipeBadPacketsSchedPerSec=pSchedPipeBadPacketsSchedPerSec, dhcpSrvOffersPerSec=dhcpSrvOffersPerSec, lDiskAvgDiskSecPerWrite=lDiskAvgDiskSecPerWrite, ipsi6ActiveMainModeSAs=ipsi6ActiveMainModeSAs, ftpSvcBytesReceivedPerSec=ftpSvcBytesReceivedPerSec, wsUnlockRqstsPerSec=wsUnlockRqstsPerSec, npsaccPacketsReceivedPerSec=npsaccPacketsReceivedPerSec, tssProtocolGlyphCacheHits=tssProtocolGlyphCacheHits, wsrmPolicyTable=wsrmPolicyTable, jodPageFaultsPerSec=jodPageFaultsPerSec, jodThreadCount=jodThreadCount, certificationAuthorityConnEntry=certificationAuthorityConnEntry, ipV4DatagramsRcvdPerSec=ipV4DatagramsRcvdPerSec, netBIOSDatagramsPerSec=netBIOSDatagramsPerSec, nclCurrentAppdomains=nclCurrentAppdomains, iucPacketsSentPerSec=iucPacketsSentPerSec, webServiceEntry=webServiceEntry, dnsZoneTransferSOARequestSent=dnsZoneTransferSOARequestSent, ntdsDSPercentWritesFromLSA=ntdsDSPercentWritesFromLSA, httpsugMaxConnections=httpsugMaxConnections, adnAppl2AnonymousRequestsPerSec=adnAppl2AnonymousRequestsPerSec, browserServerAllocFailedPerSec=browserServerAllocFailedPerSec, frsRemoteChgOrdersAborted=frsRemoteChgOrdersAborted, adnAppl2SessionsTimedOut=adnAppl2SessionsTimedOut, usbControlDataBytesPerSec=usbControlDataBytesPerSec, ntdsLDAPSearchesPerSec=ntdsLDAPSearchesPerSec, spxDisconnectsLocal=spxDisconnectsLocal, dsATQOutstandingQueuedRequests=dsATQOutstandingQueuedRequests, ipsa4FailExtendedModeNegotiation=ipsa4FailExtendedModeNegotiation, adnApplReqErrorEventRaised=adnApplReqErrorEventRaised, adnAppl1SessionsTimedOut=adnAppl1SessionsTimedOut, smtpSrvrCatRcptsNDRdUnresolved=smtpSrvrCatRcptsNDRdUnresolved, dfsrcBandwidthSavings=dfsrcBandwidthSavings, smtpSrvrMsgBytesSentPerSec=smtpSrvrMsgBytesSentPerSec, pSchedPipeBadPacketsXmitedPerSec=pSchedPipeBadPacketsXmitedPerSec, netBEUIConnectionsOpen=netBEUIConnectionsOpen, wsMoveRqstsPerSec=wsMoveRqstsPerSec, ipxFramesPerSec=ipxFramesPerSec, tssPageFileBytesPeak=tssPageFileBytesPeak, npsacpMalformedPacketsPerSec=npsacpMalformedPacketsPerSec, aspSessionsCurrent=aspSessionsCurrent, frcUnjoins=frcUnjoins, smtpSrvrMsgBytesTotal=smtpSrvrMsgBytesTotal, ntdsSAMDisplayInfoQueriesPerSec=ntdsSAMDisplayInfoQueriesPerSec, serverBytesReceivedPerSec=serverBytesReceivedPerSec, msmqomsOutgoingMulticastBytes=msmqomsOutgoingMulticastBytes, ipsi4PendingQuickModeNegotiation=ipsi4PendingQuickModeNegotiation, iasAccountingProxy=iasAccountingProxy, dfsrcRDCCompressSizeOfFilesRcvd=dfsrcRDCCompressSizeOfFilesRcvd, smtpSrvrCatLDAPBindFail=smtpSrvrCatLDAPBindFail, adbRecordsConvertedPerSec=adbRecordsConvertedPerSec, wsTotalCountFailCALRqstsAuthdUsr=wsTotalCountFailCALRqstsAuthdUsr, httpServiceCurrentUrisCached=httpServiceCurrentUrisCached, netBEUIResourceInstance=netBEUIResourceInstance, frsStagingFilesRegenerated=frsStagingFilesRegenerated, adbiStreamBackupPagesReadPerSec=adbiStreamBackupPagesReadPerSec, wmiObjects=wmiObjects, snfsMV105ExportList=snfsMV105ExportList, icmpV6ReceivedRedirectPerSec=icmpV6ReceivedRedirectPerSec, frsDSObjects=frsDSObjects, uddicSavetModel=uddicSavetModel, snfsV318FileSystemStat=snfsV318FileSystemStat, w3svcActiveThreadsCount=w3svcActiveThreadsCount, npsaccNoRecordPerSec=npsaccNoRecordPerSec, frsLocalChgOrdersRetired=frsLocalChgOrdersRetired, processWorkingSetMBytesPeak=processWorkingSetMBytesPeak, irusMalformedPackets=irusMalformedPackets, processVirtualMBytes=processVirtualMBytes, adbiSessionsPercentUsed=adbiSessionsPercentUsed, icsAccountingResponsesPerSec=icsAccountingResponsesPerSec, smtpSrvrLocalQueueLength=smtpSrvrLocalQueueLength, adnAuditSuccessEventsRaised=adnAuditSuccessEventsRaised, npsaucAccessAcceptsPerSec=npsaucAccessAcceptsPerSec, wsMaximumCALCountForSSLConns=wsMaximumCALCountForSSLConns, nntpCmdsModeCmdsPerSec=nntpCmdsModeCmdsPerSec, snfsMV102DumpMounts=snfsMV102DumpMounts, netBIOSBytesTotalPerSec=netBIOSBytesTotalPerSec, is4dTotalOffloadedBytesReceived=is4dTotalOffloadedBytesReceived, rasTotalTotalConnections=rasTotalTotalConnections, sppsContextHandles=sppsContextHandles, wsDeleteRqstsPerSec=wsDeleteRqstsPerSec, adnAppl1CacheAPITurnoverRate=adnAppl1CacheAPITurnoverRate, dfsrfDeletedBytesGenerated=dfsrfDeletedBytesGenerated, wscURICacheMisses=wscURICacheMisses, netBEUIDatagramsSentPerSec=netBEUIDatagramsSentPerSec, dfsrfStagingFilesGenerated=dfsrfStagingFilesGenerated, dnsTCPQueryReceived=dnsTCPQueryReceived, wsTotalGetRqsts=wsTotalGetRqsts, sms3QueuedPoisonMessagesPerSec=sms3QueuedPoisonMessagesPerSec, npsaucAccessChallengesPerSec=npsaucAccessChallengesPerSec, sswsNTLMAuthentications=sswsNTLMAuthentications, ipsa6SuccessQuickModeNegotiation=ipsa6SuccessQuickModeNegotiation, tsgCurrentConnections=tsgCurrentConnections, smtpSrvrCatCatsCmpltdSuccess=smtpSrvrCatCatsCmpltdSuccess, npsracsMalformedPackets=npsracsMalformedPackets, dsLDAPClosedConnectionsPerSec=dsLDAPClosedConnectionsPerSec, adnWorkerProcessesRunning=adnWorkerProcessesRunning, rsvpServiceEntry=rsvpServiceEntry, aspSessionsTotal=aspSessionsTotal, ntdsDSPercentReadsFromNTDSAPI=ntdsDSPercentReadsFromNTDSAPI, ipxPacketsPerSec=ipxPacketsPerSec, frsUsnRecordsAccepted=frsUsnRecordsAccepted, smtpSrvrPickupDirMsgsRtrvdPerSec=smtpSrvrPickupDirMsgsRtrvdPerSec, iusAccessRejects=iusAccessRejects, wsTotalNonAnonymousUsers=wsTotalNonAnonymousUsers, npsacsDroppedPacketsPerSec=npsacsDroppedPacketsPerSec, memoryStbyCacheCoreBytes=memoryStbyCacheCoreBytes, networkInterfaceEntry=networkInterfaceEntry, frsThreadsExited=frsThreadsExited, spxExpirationsResponse=spxExpirationsResponse, appleTalkTable=appleTalkTable, iccDuplicateAccountingRequests=iccDuplicateAccountingRequests, frsChgOrdersIssued=frsChgOrdersIssued, netInstance=netInstance, ncltNumOfCurrentRecognizedThread=ncltNumOfCurrentRecognizedThread, sgDocumentsFilteredRate=sgDocumentsFilteredRate, adnApplErrorsUnhandledExec=adnApplErrorsUnhandledExec, printQueueTotalJobsPrinted=printQueueTotalJobsPrinted, adnAppl2CacheAPIHitRatio=adnAppl2CacheAPIHitRatio, npsaupQuarantineDecisionsPerSec=npsaupQuarantineDecisionsPerSec, nntpSrvrArticleMapEntries=nntpSrvrArticleMapEntries, processPoolNonpagedMBytes=processPoolNonpagedMBytes, npsaccAccountingRequestsPerSec=npsaccAccountingRequestsPerSec, dnsRecursiveSendTimeOuts=dnsRecursiveSendTimeOuts, frcFetchBlocksReceivedInBytes=frcFetchBlocksReceivedInBytes, uddicGethighWaterMarks=uddicGethighWaterMarks, rpcPerHTTPProxy=rpcPerHTTPProxy, siL2MergeCount=siL2MergeCount, ipxDatagramsSentPerSec=ipxDatagramsSentPerSec, dnsZoneTransferSuccess=dnsZoneTransferSuccess, adnApplSessionsAbandoned=adnApplSessionsAbandoned, wscURICacheHits=wscURICacheHits, ipV6DatagramsRcvdUnknownProtocol=ipV6DatagramsRcvdUnknownProtocol, redirWritePacketsSmallPerSec=redirWritePacketsSmallPerSec, systemFileReadBytesPerSec=systemFileReadBytesPerSec, dfsrfInstance=dfsrfInstance, tsgFailedResourceAuthoization=tsgFailedResourceAuthoization, usbAvgBytesPerTransfer=usbAvgBytesPerTransfer, printQueueAddNetworkPrinterCalls=printQueueAddNetworkPrinterCalls, frsChgOrdersAborted=frsChgOrdersAborted, processVirtualBytesPeak=processVirtualBytesPeak, advDatabaseInstancesEntry=advDatabaseInstancesEntry, siCleanWidSets=siCleanWidSets, nclTotalAppdomainsUnloaded=nclTotalAppdomainsUnloaded, systemContextSwitchesPerSec=systemContextSwitchesPerSec, nntpSrvrTotalAnonymousUsers=nntpSrvrTotalAnonymousUsers, sms3ReliableMessagesDropPerSec=sms3ReliableMessagesDropPerSec, snfsV308Create=snfsV308Create, ftpSvcTotalNonAnonymousUsers=ftpSvcTotalNonAnonymousUsers, wsTotalLockRqsts=wsTotalLockRqsts, uddicGetrelatedCategories=uddicGetrelatedCategories, lDiskAvgDiskWriteQueueLength=lDiskAvgDiskWriteQueueLength, memoryPoolPagedKBytes=memoryPoolPagedKBytes, vschdDMABufferPreemptedPerSec=vschdDMABufferPreemptedPerSec, pop3Service=pop3Service, nntpCmdsTakethisCmdsPerSec=nntpCmdsTakethisCmdsPerSec, nntpSrvrTotalConnections=nntpSrvrTotalConnections, sswsSSLServerSideReconHandshakes=sswsSSLServerSideReconHandshakes, iisGlobalTotalRejectedAsyncIOReq=iisGlobalTotalRejectedAsyncIOReq, memoryCommitLimitMBytes=memoryCommitLimitMBytes, jodPageFileBytes=jodPageFileBytes, icpMalformedPacketsPerSec=icpMalformedPacketsPerSec, pDiskInstance=pDiskInstance, pDiskAvgDiskReadQueueLength=pDiskAvgDiskReadQueueLength, frsUsnReads=frsUsnReads, nntpSrvrArticlesPostedPerSec=nntpSrvrArticlesPostedPerSec, ipxExpirationsResponse=ipxExpirationsResponse, tssTotalAsyncOverflow=tssTotalAsyncOverflow, npsacpRetransmissions=npsacpRetransmissions, udditSavetModel=udditSavetModel, nwBytesTransmittedPerSec=nwBytesTransmittedPerSec, ntdsDSPercentSearchesFromLDAP=ntdsDSPercentSearchesFromLDAP, is4dTotalPktsFailReplayDetection=is4dTotalPktsFailReplayDetection, snfsThreadsTotal=snfsThreadsTotal, tsActiveSessions=tsActiveSessions, wFP=wFP, udpV6DatagramsReceivedPerSec=udpV6DatagramsReceivedPerSec, npsacpRetransmissionsPerSec=npsacpRetransmissionsPerSec, netBEUIPacketsReceivedPerSec=netBEUIPacketsReceivedPerSec, iasRemoteAuthenticationSrvrEntry=iasRemoteAuthenticationSrvrEntry, dsLDAPNewSSLConnectionsPerSec=dsLDAPNewSSLConnectionsPerSec, dns=dns, redirPacketsTransmittedPerSec=redirPacketsTransmittedPerSec, iupAccessRejectsPerSec=iupAccessRejectsPerSec, snfsDRCReplies=snfsDRCReplies, dfsrfFileInstallsSucceeded=dfsrfFileInstallsSucceeded, ftpServiceEntry=ftpServiceEntry, aspRequestsPerSec=aspRequestsPerSec, rsvpIfRESVCONFIRMMsgsSent=rsvpIfRESVCONFIRMMsgsSent, snfsV321Commit=snfsV321Commit, sms3ValidationAuthFailPerSec=sms3ValidationAuthFailPerSec, mfsCurrentFilesOpen=mfsCurrentFilesOpen, physicalDiskTable=physicalDiskTable, sms3ReliableMessagesDrop=sms3ReliableMessagesDrop, nciNumOfTLBExportsPerSec=nciNumOfTLBExportsPerSec, dnsIXFRSuccessReceived=dnsIXFRSuccessReceived, bnuEstBWAvailRemoteBitsPerSec=bnuEstBWAvailRemoteBitsPerSec, nntpSrvrBytesTotalPerSec=nntpSrvrBytesTotalPerSec, w3svcOutputCacheCurrentMemUsage=w3svcOutputCacheCurrentMemUsage, aspDotNETv1=aspDotNETv1, redirBytesReceivedPerSec=redirBytesReceivedPerSec, rsvpIfNumOfActiveFlows=rsvpIfNumOfActiveFlows, wFPv4OutConnectionsAllowedPerSec=wFPv4OutConnectionsAllowedPerSec, wwfWorkflowsTerminatedPerSec=wwfWorkflowsTerminatedPerSec, tbscCurrentContexts=tbscCurrentContexts, frsOutboundChgOrdersDampened=frsOutboundChgOrdersDampened, adnApplCacheAPITrims=adnApplCacheAPITrims, rasTotalFramesReceivedPerSec=rasTotalFramesReceivedPerSec, wsTotalMethodRqsts=wsTotalMethodRqsts, dnsWINSLookupReceivedPerSec=dnsWINSLookupReceivedPerSec, tssProtocolBrushCacheHits=tssProtocolBrushCacheHits, adn2RequestsDisconnected=adn2RequestsDisconnected, siL3MergeSpeedAverage=siL3MergeSpeedAverage, ipsi6SuccessfulQuickModeNegot=ipsi6SuccessfulQuickModeNegot, joTotalMSecUserMode=joTotalMSecUserMode, httpsrqInstance=httpsrqInstance, siShadowMergeLevels=siShadowMergeLevels, nntpCmdsXPatCmds=nntpCmdsXPatCmds, irusPortNumber=irusPortNumber, adbIPerOLogReadsPerSec=adbIPerOLogReadsPerSec, wsMeasuredAsyncIOBandwidthUsage=wsMeasuredAsyncIOBandwidthUsage, npsaucAccessRequestsPerSec=npsaucAccessRequestsPerSec, siInstance=siInstance, nbtConnectionBytesSentPerSec=nbtConnectionBytesSentPerSec, rasPortPercentCompressionIn=rasPortPercentCompressionIn, udditDeletebusiness=udditDeletebusiness, iscsiSessionsFailed=iscsiSessionsFailed, systemFileControlBytesPerSec=systemFileControlBytesPerSec, tcpV4SegmentsSentPerSec=tcpV4SegmentsSentPerSec, atAverageTimePerRTMPPacket=atAverageTimePerRTMPPacket, terminalServicesSessionEntry=terminalServicesSessionEntry, ipxWindowSendMaximum=ipxWindowSendMaximum, dnsIXFRResponseReceived=dnsIXFRResponseReceived, iccPacketsSentPerSec=iccPacketsSentPerSec, ipxFailuresAdapter=ipxFailuresAdapter, wFPv4InPacketsDiscardedPerSec=wFPv4InPacketsDiscardedPerSec, ircsDroppedPackets=ircsDroppedPackets, dnsZoneTransferRequestReceived=dnsZoneTransferRequestReceived, dfsrfTotalFilesReceived=dfsrfTotalFilesReceived, netBEUIWindowSendMaximum=netBEUIWindowSendMaximum, ntdsDRASyncRequestsSuccessful=ntdsDRASyncRequestsSuccessful, lDiskFreeMegabytes=lDiskFreeMegabytes, iisGlobalURICacheHits=iisGlobalURICacheHits, snfsV302SetAttributes=snfsV302SetAttributes, usbIsoPacketErrorsPerSec=usbIsoPacketErrorsPerSec)
mibBuilder.exportSymbols("INFORMANT-ADV", winsSrvrGroupConflictsPerSec=winsSrvrGroupConflictsPerSec, adnApplDebuggingRequests=adnApplDebuggingRequests, spxExpirationsAck=spxExpirationsAck, hrasHCEPFailedRequests=hrasHCEPFailedRequests, adnAppl1CompilationsTotal=adnAppl1CompilationsTotal, iisGlobalFileCacheMisses=iisGlobalFileCacheMisses, w3svcMaximumThreadsCount=w3svcMaximumThreadsCount, ipsa4MainModeSAUseImpersonPerSec=ipsa4MainModeSAUseImpersonPerSec, adnApplCacheAPIHits=adnApplCacheAPIHits, adnAppl2ViewstateMACValidFailure=adnAppl2ViewstateMACValidFailure, pSchedFlowAveragePktsInNetcard=pSchedFlowAveragePktsInNetcard, wscOutputCacheTotalFlushes=wscOutputCacheTotalFlushes, ftpSvcTotalFilesReceived=ftpSvcTotalFilesReceived, frsFetchRequestsReceived=frsFetchRequestsReceived, idxSvcRunningQueries=idxSvcRunningQueries, giaipExtendedModeNegotiationTime=giaipExtendedModeNegotiationTime, ipV4DatagramsRcvdHeaderErrors=ipV4DatagramsRcvdHeaderErrors, snfsV315Link=snfsV315Link, ipV4DatagramsForwardedPerSec=ipV4DatagramsForwardedPerSec, adn1ApplicationsRunning=adn1ApplicationsRunning, dsDRAOutboundValuesDNsOnlyPerSec=dsDRAOutboundValuesDNsOnlyPerSec, lDiskPercentDiskWriteTime=lDiskPercentDiskWriteTime, adnApplCacheTotalHitRatio=adnApplCacheTotalHitRatio, nwPacketsTransmittedPerSec=nwPacketsTransmittedPerSec, msmqSvcTotalBytesInAllQueues=msmqSvcTotalBytesInAllQueues, frcLocalChangeOrdersSent=frcLocalChangeOrdersSent, aspErrorsFromScriptCompilers=aspErrorsFromScriptCompilers, smtpNTFSStoreDriverTable=smtpNTFSStoreDriverTable, serverPoolNonpagedFailures=serverPoolNonpagedFailures, udditNotifychangeRecordAvailable=udditNotifychangeRecordAvailable, wFPv4PacketsDiscardedPerSec=wFPv4PacketsDiscardedPerSec, pSchedPipeTable=pSchedPipeTable, smtpSrvrMsgsRfsdForSize=smtpSrvrMsgsRfsdForSize, netBEUIEntry=netBEUIEntry, adnApplTransactionsCommitted=adnApplTransactionsCommitted, telephony=telephony, frsKBOfStagingSpaceInUse=frsKBOfStagingSpaceInUse, ftpSvcBytesTotalPerSec=ftpSvcBytesTotalPerSec, tssOutputWdFrames=tssOutputWdFrames, processIDProcess=processIDProcess, wmppTotalAdvertisements=wmppTotalAdvertisements, adnApplFormAuthenticationSuccess=adnApplFormAuthenticationSuccess, atPacketsRoutedInPerSec=atPacketsRoutedInPerSec, serverPoolNonpagedKBytesPeak=serverPoolNonpagedKBytesPeak, tssOutputErrors=tssOutputErrors, npsrausLastRoundTripTime=npsrausLastRoundTripTime, dtcActiveTransactionsMaximum=dtcActiveTransactionsMaximum, smtpSrvrCatLDAPPagedSrchsCmpltd=smtpSrvrCatLDAPPagedSrchsCmpltd, nntpCmdsArticleCmds=nntpCmdsArticleCmds, nwLinkSPXEntry=nwLinkSPXEntry, adbIPerODatabaseReadsPerSec=adbIPerODatabaseReadsPerSec, ipsa4ExtModeSAsThatUsedImperson=ipsa4ExtModeSAsThatUsedImperson, ipsi4FailedMainModeNegotPerSec=ipsi4FailedMainModeNegotPerSec, swqBytesSentPerSec=swqBytesSentPerSec, adnAppl1SessionsActive=adnAppl1SessionsActive, wmppCurStreamingRTSPPlayers=wmppCurStreamingRTSPPlayers, usbPercentTotalBWUsedInterrupt=usbPercentTotalBWUsedInterrupt, serverErrorsAccessPermissions=serverErrorsAccessPermissions, wsTotalMoveRqsts=wsTotalMoveRqsts, iSCSIInitiatorInstanceTable=iSCSIInitiatorInstanceTable, ntdsDRAInboundObjUpdsRemainInPkt=ntdsDRAInboundObjUpdsRemainInPkt, dsDRAInObjectsAppliedPerSec=dsDRAInObjectsAppliedPerSec, npsaccMalformedPacketsPerSec=npsaccMalformedPacketsPerSec, npsausAccessChallenges=npsausAccessChallenges, uddicGetpublisherAssertions=uddicGetpublisherAssertions, w3svcUriCacheHitsPerSec=w3svcUriCacheHitsPerSec, wwfWorkflowsPersistedPerSec=wwfWorkflowsPersistedPerSec, dsNTLMBindsPerSec=dsNTLMBindsPerSec, adnApplErrorsPreprocessing=adnApplErrorsPreprocessing, nntpSrvrModeratedPostingsSent=nntpSrvrModeratedPostingsSent, dtcResponseTimeMaximum=dtcResponseTimeMaximum, smtpSrvrCatRcptsNDRdIllegalAddr=smtpSrvrCatRcptsNDRdIllegalAddr, adnAppl1ErrorsDuringCompilation=adnAppl1ErrorsDuringCompilation, adnAppl1ErrorsDuringExecution=adnAppl1ErrorsDuringExecution, frsLocalChgOrdersAborted=frsLocalChgOrdersAborted, smtpSrvrCatMsgsAborted=smtpSrvrCatMsgsAborted, smtpSrvrCatAddrLookupsNotFound=smtpSrvrCatAddrLookupsNotFound, adnAppl2CacheAPIMisses=adnAppl2CacheAPIMisses, ntdsSAMUserCreateAttemptsPerSec=ntdsSAMUserCreateAttemptsPerSec, w3svcMetadataCacheMisses=w3svcMetadataCacheMisses, ncnConnectionsEstablished=ncnConnectionsEstablished, sms3CallsPerSecond=sms3CallsPerSecond, processWorkingSetMBytes=processWorkingSetMBytes, wmsTotalUDPResendsSent=wmsTotalUDPResendsSent, nntpCmdsCheckCmds=nntpCmdsCheckCmds, telephonyOutgoingCallsPerSec=telephonyOutgoingCallsPerSec, nceNumOfFiltersPerSec=nceNumOfFiltersPerSec, vschdInstance=vschdInstance, spxDatagramBytesPerSec=spxDatagramBytesPerSec, pSchedFlowNonconfPktsSched=pSchedFlowNonconfPktsSched, adbiLogGenCheckpointDepthMax=adbiLogGenCheckpointDepthMax, npsracsInstance=npsracsInstance, smtpSrvrPercentRcpntsRemote=smtpSrvrPercentRcpntsRemote, tssOutputAsyncParityError=tssOutputAsyncParityError, adnApplFormAuthenticationFailure=adnApplFormAuthenticationFailure, dsATQEstimatedQueueDelay=dsATQEstimatedQueueDelay, rsvpIfRESVMsgsSent=rsvpIfRESVMsgsSent, siMasterMergeProgress=siMasterMergeProgress, dsLDAPSuccessfulBindsPerSec=dsLDAPSuccessfulBindsPerSec, icmpV6ReceivedPacketTooBig=icmpV6ReceivedPacketTooBig, cpuInterruptsPerSec=cpuInterruptsPerSec, rasTotalAlignmentErrors=rasTotalAlignmentErrors, adnApplErrorsTotal=adnApplErrorsTotal, adnApplRequestsTimedOut=adnApplRequestsTimedOut, rasTotalSerialOverrunErrors=rasTotalSerialOverrunErrors, ipxFailuresResourceRemote=ipxFailuresResourceRemote, adnApplPipelineInstanceCount=adnApplPipelineInstanceCount, dnsZoneTransferFailure=dnsZoneTransferFailure, wmppCurPlayerAllocBandwidthKbps=wmppCurPlayerAllocBandwidthKbps, winsSrvrTotalNumRegsPerSec=winsSrvrTotalNumRegsPerSec, adnAppl1OutputCacheHitRatio=adnAppl1OutputCacheHitRatio, frcJoinNotificationsSent=frcJoinNotificationsSent, netPacketsRcvdNonUnicastPerSec=netPacketsRcvdNonUnicastPerSec, adnAppl1PipelineInstanceCount=adnAppl1PipelineInstanceCount, ncmPromotFinalizationMemoryGen0=ncmPromotFinalizationMemoryGen0, netBIOSConnectionSessionTimeouts=netBIOSConnectionSessionTimeouts, adnApplErrorsExecution=adnApplErrorsExecution, icmpV6SentPacketTooBig=icmpV6SentPacketTooBig, threadPercentPrivilegedTime=threadPercentPrivilegedTime, adbRecordsConverted=adbRecordsConverted, pSchedFlowEntry=pSchedFlowEntry, ircsUnknownTypePerSec=ircsUnknownTypePerSec, nwLinkSPXTable=nwLinkSPXTable, dsOnelevelSearchesPerSec=dsOnelevelSearchesPerSec, vschdGPUContextSwitchPerSec=vschdGPUContextSwitchPerSec, icmpV4SentRedirectPerSec=icmpV4SentRedirectPerSec, rsvpSvcNetworkSockets=rsvpSvcNetworkSockets, dsPhantomsCleanedPerSec=dsPhantomsCleanedPerSec, siShadowMergeLevelsThreshold=siShadowMergeLevelsThreshold, dfsrfStagingSpaceInUse=dfsrfStagingSpaceInUse, atATPALOResponsePerSec=atATPALOResponsePerSec, icsServerUpTime=icsServerUpTime, authorizationManagerApplTable=authorizationManagerApplTable, usbHostControlAsyncCacheFlush=usbHostControlAsyncCacheFlush, ipV4DatagramsOutboundDiscarded=ipV4DatagramsOutboundDiscarded, adn1StateServerSessionsActive=adn1StateServerSessionsActive, ntdsSAMGCEvaluationsPerSec=ntdsSAMGCEvaluationsPerSec, wmsCurConnectionQueueLength=wmsCurConnectionQueueLength, frsPacketsSent=frsPacketsSent, usbInstance=usbInstance, adn2RequestsRejected=adn2RequestsRejected, msmqSvcOutgoingMessagesPerSec=msmqSvcOutgoingMessagesPerSec, icmpV4RcvdTimeExceeded=icmpV4RcvdTimeExceeded, windowsMediaUnicastService=windowsMediaUnicastService, tcpV4ConnectionsActive=tcpV4ConnectionsActive, wmsCurPlayerSendRateKbps=wmsCurPlayerSendRateKbps, icmpV4SentEchoReplyPerSec=icmpV4SentEchoReplyPerSec, pagingFilePercentUsagePeak=pagingFilePercentUsagePeak, netBEUIDisconnectsLocal=netBEUIDisconnectsLocal, ntdsDRAHighestUSNCommitHighPart=ntdsDRAHighestUSNCommitHighPart, cpuC2TransitionsPerSec=cpuC2TransitionsPerSec, wsrmPolicyEntry=wsrmPolicyEntry, npsshvShvOtherFailuresPerSec=npsshvShvOtherFailuresPerSec, ipV4FragmentsRcvdPerSec=ipV4FragmentsRcvdPerSec, netPacketsReceivedDiscarded=netPacketsReceivedDiscarded, dotNETCLRLocksAndThreadsTable=dotNETCLRLocksAndThreadsTable, adnAppl2RequestsDisconnected=adnAppl2RequestsDisconnected, ocspServerConnectionsEntry=ocspServerConnectionsEntry, uddicFindrelatedBusinesses=uddicFindrelatedBusinesses, nntpSrvrArticlesSentPerSec=nntpSrvrArticlesSentPerSec, sswsSSLServerSideFullHandshakes=sswsSSLServerSideFullHandshakes, npsaccAccountingResponses=npsaccAccountingResponses, ntdsDSPercentWritesFromSAM=ntdsDSPercentWritesFromSAM, spxConnectionsCanceled=spxConnectionsCanceled, adnApplRequestsNotAuthorized=adnApplRequestsNotAuthorized, netPacketsReceivedUnicastPerSec=netPacketsReceivedUnicastPerSec, w3svcMetadataCacheFlushes=w3svcMetadataCacheFlushes, httpServiceRequestQueuesTable=httpServiceRequestQueuesTable, wscCurrentMetadataCached=wscCurrentMetadataCached, adbTableOpenCacheMissesPerSec=adbTableOpenCacheMissesPerSec, iccInstance=iccInstance, adnAppl1CacheAPIHits=adnAppl1CacheAPIHits, ipsa4PendingQuickModeNegotiation=ipsa4PendingQuickModeNegotiation, iupInvalidAddressesPerSec=iupInvalidAddressesPerSec, ncnBytesReceived=ncnBytesReceived, ntdsDSNotifyQueueSize=ntdsDSNotifyQueueSize, mfsMaximumSessions=mfsMaximumSessions, ipV6FragmentsCreatedPerSec=ipV6FragmentsCreatedPerSec, ipSecV4IKE=ipSecV4IKE, joProcessCountTerminated=joProcessCountTerminated, sgpUniqueDocuments=sgpUniqueDocuments, wwfWorkflowsAborted=wwfWorkflowsAborted, ipsdIncorrectSPIPackets=ipsdIncorrectSPIPackets, iisGlobalActiveFlushedEntries=iisGlobalActiveFlushedEntries, rpcpCurNumInRPCOverHTTPConn=rpcpCurNumInRPCOverHTTPConn, atCurrentNonPagedPool=atCurrentNonPagedPool, hrasCertificationTimeMs=hrasCertificationTimeMs, wwfWorkflowsCreated=wwfWorkflowsCreated, ntdsLDAPBindTime=ntdsLDAPBindTime, frsChgOrdersSent=frsChgOrdersSent, dnsTotalQueryReceived=dnsTotalQueryReceived, iupRetransmissions=iupRetransmissions, nntpCmdsPostCmdsPerSec=nntpCmdsPostCmdsPerSec, ipsa6PendingQuickModeNegotiation=ipsa6PendingQuickModeNegotiation, icsPacketsReceived=icsPacketsReceived, netBEUIBytesTotalPerSec=netBEUIBytesTotalPerSec, nbtConnectionBytesTotalPerSec=nbtConnectionBytesTotalPerSec, rsvpIfPolicyControlFailures=rsvpIfPolicyControlFailures, wwfWorkflowsLoaded=wwfWorkflowsLoaded, sms3Instance=sms3Instance, ipxExpirationsAck=ipxExpirationsAck, aspSessionsTimedOut=aspSessionsTimedOut, icsPacketsSentPerSec=icsPacketsSentPerSec, adnAppl1RequestsFailed=adnAppl1RequestsFailed, nwWritePacketsPerSec=nwWritePacketsPerSec, smtpSrvrBadMailMsgsTrigViaEvent=smtpSrvrBadMailMsgsTrigViaEvent, tcpV6SegmentsRetransmittedPerSec=tcpV6SegmentsRetransmittedPerSec, giaipSuccessfulNegotiationPerSec=giaipSuccessfulNegotiationPerSec, server=server, npsaupAccessRejects=npsaupAccessRejects, adbiPagesConvertedPerSec=adbiPagesConvertedPerSec, siL4MergeSpeedLast=siL4MergeSpeedLast, netBIOSDatagramsReceivedPerSec=netBIOSDatagramsReceivedPerSec, dnsDynamicUpdateRejected=dnsDynamicUpdateRejected, dnsAXFRRequestSent=dnsAXFRRequestSent, ipV4FragmentsCreatedPerSec=ipV4FragmentsCreatedPerSec, netBIOSPacketsPerSec=netBIOSPacketsPerSec, frcPacketsSentInBytes=frcPacketsSentInBytes, netBEUIResourceEntry=netBEUIResourceEntry, rasTotalFramesReceived=rasTotalFramesReceived, pop3SvcFreeThreads=pop3SvcFreeThreads, dsDSDirectoryWritesPerSec=dsDSDirectoryWritesPerSec, wscURICacheHitsPercent=wscURICacheHitsPercent, siL7MergeSpeedAverage=siL7MergeSpeedAverage, iusDuplicateAccessRequests=iusDuplicateAccessRequests, ipsi6SuccessQuickModeNegotPerSec=ipsi6SuccessQuickModeNegotPerSec, npsracsPortNumber=npsracsPortNumber, msmqsOutgoingMessages=msmqsOutgoingMessages, npsracsAccountingRequestsPerSec=npsracsAccountingRequestsPerSec, adnAppl2SessionsTotal=adnAppl2SessionsTotal, threadStartAddress=threadStartAddress, ipsa4ActiveQuickModeSAs=ipsa4ActiveQuickModeSAs, jodIOReadOperationsPerSec=jodIOReadOperationsPerSec, wsrmpmcActualManagedCPUPercent=wsrmpmcActualManagedCPUPercent, dsDSSecurityDescPropRuntimeQueue=dsDSSecurityDescPropRuntimeQueue, ftpSvcTotalFilesTransferred=ftpSvcTotalFilesTransferred, icmpV4SentTimeExceeded=icmpV4SentTimeExceeded, wmppTotalFileBytesRead=wmppTotalFileBytesRead, w3svcURICacheFlushes=w3svcURICacheFlushes, ntdsDRAInboundValuesDNsPerSec=ntdsDRAInboundValuesDNsPerSec, dnsUDPResponseSent=dnsUDPResponseSent, hcapcAverageNPSValidationTime=hcapcAverageNPSValidationTime, sgpStatusError=sgpStatusError, wsTotalISAPIExtensionRqsts=wsTotalISAPIExtensionRqsts, uddicNotifychangeRecordAvailable=uddicNotifychangeRecordAvailable, ipxBytesTotalPerSec=ipxBytesTotalPerSec, tssOutputCompressFlushes=tssOutputCompressFlushes, msmqOutgoingHTTPSessionEntry=msmqOutgoingHTTPSessionEntry, iisGlobalTotalFilesCached=iisGlobalTotalFilesCached, ipxFailuresLink=ipxFailuresLink, nntpCmdsStatCmds=nntpCmdsStatCmds, netBEUIFrameBytesSentPerSec=netBEUIFrameBytesSentPerSec, adnAppl1SessionsAbandoned=adnAppl1SessionsAbandoned, certificationAuthorityEntry=certificationAuthorityEntry)
mibBuilder.exportSymbols("INFORMANT-ADV", cacInstance=cacInstance, msmqService=msmqService, dotNETCLRExceptionsTable=dotNETCLRExceptionsTable, aspEngineFlushNotifications=aspEngineFlushNotifications, ntdsSAMResourceGrpMemEvalPerSec=ntdsSAMResourceGrpMemEvalPerSec, joCurrentPercentProcessorTime=joCurrentPercentProcessorTime, wsMaximumCALCountForAuthdUsers=wsMaximumCALCountForAuthdUsers, lDiskPercentIdleTime=lDiskPercentIdleTime, adbIPerODatabaseWritesAvgLatency=adbIPerODatabaseWritesAvgLatency, wwfWorkflowsPersisted=wwfWorkflowsPersisted, faxsTotalPages=faxsTotalPages, iucAccessAccepts=iucAccessAccepts, tssInputFrames=tssInputFrames, sms3TransactedOpsInDoubt=sms3TransactedOpsInDoubt, msmqitIncomingHTTPMessagesPerSec=msmqitIncomingHTTPMessagesPerSec, mfsMaximumQueueLength=mfsMaximumQueueLength, siL0MergesFlushesNow=siL0MergesFlushesNow, wmsPeakOutDistAllocBandwidthKbps=wmsPeakOutDistAllocBandwidthKbps, frcOutboundChangeOrdersDampened=frcOutboundChangeOrdersDampened, ipxFrameBytesRejectedPerSec=ipxFrameBytesRejectedPerSec, wFPv4OutConnectionsBlockedPerSec=wFPv4OutConnectionsBlockedPerSec, netBIOSDisconnectsRemote=netBIOSDisconnectsRemote, systemSystemUpTime=systemSystemUpTime, ipsa6MainModeSAUseImpersonPerSec=ipsa6MainModeSAUseImpersonPerSec, smsh3ConnsAcceptedOverNetTcp=smsh3ConnsAcceptedOverNetTcp, tsgConnectionRequestAuthTime=tsgConnectionRequestAuthTime, frsRemoteChgOrdersRetriedInstall=frsRemoteChgOrdersRetriedInstall, adnAppl2InfraErrorEventsRaised=adnAppl2InfraErrorEventsRaised, ntdsDRAInLnkValUpdsRemainInPckt=ntdsDRAInLnkValUpdsRemainInPckt, serviceModelEndpoint3Entry=serviceModelEndpoint3Entry, adnAppl2EventsRaisedPerSec=adnAppl2EventsRaisedPerSec, dsFastBindsPerSec=dsFastBindsPerSec, nclRateOfAppdomainsUnloaded=nclRateOfAppdomainsUnloaded, mfsDataTransmittedPerSec=mfsDataTransmittedPerSec, frsFetchBlocksSent=frsFetchBlocksSent, iupMalformedPacketsPerSec=iupMalformedPacketsPerSec, pSchedFlowTable=pSchedFlowTable, usbAvgMsLatencyForISOTransfers=usbAvgMsLatencyForISOTransfers, ipxConnectionsCanceled=ipxConnectionsCanceled, lDiskDiskTransfersPerSec=lDiskDiskTransfersPerSec, wFPv6InConnectionsAllowedPerSec=wFPv6InConnectionsAllowedPerSec, dsDSPercentSearchesFromNTDSAPI=dsDSPercentSearchesFromNTDSAPI, icpPendingRequests=icpPendingRequests, smsh3DispatchFailuresOverNetTcp=smsh3DispatchFailuresOverNetTcp, nntpCmdsCheckCmdsPerSec=nntpCmdsCheckCmdsPerSec, npsaccUnknownType=npsaccUnknownType, dsSAMMembershipChangesPerSec=dsSAMMembershipChangesPerSec, ipsi4MainModeNegotiations=ipsi4MainModeNegotiations, wsMaximumAnonymousUsers=wsMaximumAnonymousUsers, nntpSrvrArticlesTotal=nntpSrvrArticlesTotal, frcRemoteChangeOrdersSent=frcRemoteChangeOrdersSent, tssOutputAsyncOverrun=tssOutputAsyncOverrun, dfsrfCompressedSizeOfFilesRcvd=dfsrfCompressedSizeOfFilesRcvd, adnWorkerProcessRestarts=adnWorkerProcessRestarts, smtpSrvrCatLDAPSrchsCmpltdPerSec=smtpSrvrCatLDAPSrchsCmpltdPerSec, msmqSessionEntry=msmqSessionEntry, snfsTotalNFSCallsV2=snfsTotalNFSCallsV2, ipxConnectionSessionTimeouts=ipxConnectionSessionTimeouts, msmqimsInMulticastBytesPerSec=msmqimsInMulticastBytesPerSec, nntpCmdsHelpCmds=nntpCmdsHelpCmds, adnAppl2CacheTotalHits=adnAppl2CacheTotalHits, smtpSrvrBadMailMsgsNDROfDSN=smtpSrvrBadMailMsgsNDROfDSN, tssPercentPrivilegedTime=tssPercentPrivilegedTime, frsStagingFilesFetched=frsStagingFilesFetched, dfsrfFileInstallsRetried=dfsrfFileInstallsRetried, tssInputAsyncOverrun=tssInputAsyncOverrun, dnsDynamicUpdateNoOperation=dnsDynamicUpdateNoOperation, nntpSrvrTotalPullFeeds=nntpSrvrTotalPullFeeds, frsStagingFilesGeneratedWithErr=frsStagingFilesGeneratedWithErr, redirFileWriteOperationsPerSec=redirFileWriteOperationsPerSec, iisGlobalFileCacheHits=iisGlobalFileCacheHits, dhcpSrvNacksPerSec=dhcpSrvNacksPerSec, lDiskDiskWriteBytesPerSec=lDiskDiskWriteBytesPerSec, smtpSrvrMsgSendRetries=smtpSrvrMsgSendRetries, directoryServicesEntry=directoryServicesEntry, ipsi4MainModeNegotRqstRcvdPerSec=ipsi4MainModeNegotRqstRcvdPerSec, ipV6DatagramsOutboundNoRoute=ipV6DatagramsOutboundNoRoute, ipxDatagramsPerSec=ipxDatagramsPerSec, rasTotalTotalErrorsPerSec=rasTotalTotalErrorsPerSec, dsDRAOutCmpBtwSitesAftCmpSinceBt=dsDRAOutCmpBtwSitesAftCmpSinceBt, aspDotNETApplicationsV2Table=aspDotNETApplicationsV2Table, nntpSrvrArticlesDeleted=nntpSrvrArticlesDeleted, snfsV217StatFileSystem=snfsV217StatFileSystem, iupPendingRequests=iupPendingRequests, processVirtualKBytes=processVirtualKBytes, ntdsLDAPClosedConnectionsPerSec=ntdsLDAPClosedConnectionsPerSec, wmsPeakOutDistSendRateKbps=wmsPeakOutDistSendRateKbps, npsacpInvalidAddresses=npsacpInvalidAddresses, caFailedRequestsPerSec=caFailedRequestsPerSec, tssInputCompressedBytes=tssInputCompressedBytes, adbSessionsInUse=adbSessionsInUse, sme3CallsDuration=sme3CallsDuration, smtpSrvrNumberOfMailFilesOpen=smtpSrvrNumberOfMailFilesOpen, browserAnnouncementsServerPerSec=browserAnnouncementsServerPerSec, ipSecAuthIPv6=ipSecAuthIPv6, rsvpIfRESVERRMsgsSent=rsvpIfRESVERRMsgsSent, httpsrqMaxQueueItemAge=httpsrqMaxQueueItemAge, adnStateServerSessionsAbandoned=adnStateServerSessionsAbandoned, smtpSrvrAvgRetriesPerMsgDlvrd=smtpSrvrAvgRetriesPerMsgDlvrd, tcpV4ConnectionsEstablished=tcpV4ConnectionsEstablished, swqAvailableThreads=swqAvailableThreads, npsRemoteAuthServersEntry=npsRemoteAuthServersEntry, npsacsDupAccountingRequestPerSec=npsacsDupAccountingRequestPerSec, wasTotalHealthPings=wasTotalHealthPings, adnApplAnonymousRequestsPerSec=adnApplAnonymousRequestsPerSec, dsDRAInBytesTotalPerSec=dsDRAInBytesTotalPerSec, snfsNFSErrorsV3=snfsNFSErrorsV3, npsausDroppedPacketsPerSec=npsausDroppedPacketsPerSec, dfsrfUpdatesDropped=dfsrfUpdatesDropped, npsaupAccessAccepts=npsaupAccessAccepts, wsTotalConnAtmpsAllInstances=wsTotalConnAtmpsAllInstances, icpUnknownType=icpUnknownType, iisGlobalFileCacheHitsPercent=iisGlobalFileCacheHitsPercent, ntdsDSPercentWritesFromNSPI=ntdsDSPercentWritesFromNSPI, tssProtocolGlyphCacheHitRatio=tssProtocolGlyphCacheHitRatio, netPacketsSentUnicastPerSec=netPacketsSentUnicastPerSec, redirServerReconnects=redirServerReconnects, msmqsOutgoingBytes=msmqsOutgoingBytes, icmpV6ReceivedEchoPerSec=icmpV6ReceivedEchoPerSec, swqWriteOperationsPerSec=swqWriteOperationsPerSec, dnsTCPResponseSent=dnsTCPResponseSent, iasRemoteAccountingServersEntry=iasRemoteAccountingServersEntry, snfsDiscardedDRCPackets=snfsDiscardedDRCPackets, smtpSrvrCatCatsCmpltdPerSec=smtpSrvrCatCatsCmpltdPerSec, dsSAMAccountGroupEvalLatency=dsSAMAccountGroupEvalLatency, icsDuplicateAccountingRequests=icsDuplicateAccountingRequests, serverPoolNonpagedMBytes=serverPoolNonpagedMBytes, cacheAsyncCopyReadsPerSec=cacheAsyncCopyReadsPerSec, uddicGetregisteredInfo=uddicGetregisteredInfo, fileReplicaConnTable=fileReplicaConnTable, adnAppl1CacheTotalHits=adnAppl1CacheTotalHits, adnAppl2RequestBytesInTotal=adnAppl2RequestBytesInTotal, memoryStbyCacheReserveKBytes=memoryStbyCacheReserveKBytes, dsExternalBindsPerSec=dsExternalBindsPerSec, aspTemplateCacheHitRate=aspTemplateCacheHitRate, is4iReceiveHeapSize=is4iReceiveHeapSize, ircsDroppedPacketsPerSec=ircsDroppedPacketsPerSec, memoryWriteCopiesPerSec=memoryWriteCopiesPerSec, dsABPropertyReadsPerSec=dsABPropertyReadsPerSec, adnAppl2ErrorsDuringCompilation=adnAppl2ErrorsDuringCompilation, tssInputAsyncOverflow=tssInputAsyncOverflow, wFPv4InConnectionsBlockedPerSec=wFPv4InConnectionsBlockedPerSec, dnsAXFRSuccessReceived=dnsAXFRSuccessReceived, wsTotalBlkdBandwidthBytes=wsTotalBlkdBandwidthBytes, spxFailuresLink=spxFailuresLink, atAverageTimePerAARPPacket=atAverageTimePerAARPPacket, wmusStreamTerminations=wmusStreamTerminations, ntdsDRAOutboundValuesTotalPerSec=ntdsDRAOutboundValuesTotalPerSec, ntdsDRASyncRequestsMade=ntdsDRASyncRequestsMade, hcapcVersionNegotiationResponses=hcapcVersionNegotiationResponses, uddicGettModelDetail=uddicGettModelDetail, pSchedFlowMaxPktsInShaper=pSchedFlowMaxPktsInShaper, icmpV6ReceivedRouterAdvert=icmpV6ReceivedRouterAdvert, adnAppl2ErrorUnhandledExecPerSec=adnAppl2ErrorUnhandledExecPerSec, processIODataBytesPerSec=processIODataBytesPerSec, tssProtocolBitmapCacheReads=tssProtocolBitmapCacheReads, tssPercentUserTime=tssPercentUserTime, adnApplRequestsInApplQueue=adnApplRequestsInApplQueue, adnAppl1SessionSQLSvrConnTotal=adnAppl1SessionSQLSvrConnTotal, sms3CallsNotAuthorizedPerSec=sms3CallsNotAuthorizedPerSec, adnAppl2RequestsSucceeded=adnAppl2RequestsSucceeded, snfsV202SetAttributes=snfsV202SetAttributes, iasRemoteAuthenticationSrvrTable=iasRemoteAuthenticationSrvrTable, adn2RequestsCurrent=adn2RequestsCurrent, netBEUIFailuresAdapter=netBEUIFailuresAdapter, ntdsSAMSuccessUserCreatePerSec=ntdsSAMSuccessUserCreatePerSec, dsDatabaseAddsPerSec=dsDatabaseAddsPerSec, icmpV6MessagesSentPerSec=icmpV6MessagesSentPerSec, icpAccountingRequests=icpAccountingRequests, siQueries=siQueries, swqQueueLength=swqQueueLength, wscTotalURIsCached=wscTotalURIsCached, memoryPoolPagedAllocs=memoryPoolPagedAllocs, iisGlobalBLOBCacheMisses=iisGlobalBLOBCacheMisses, ipxFramesRejectedPerSec=ipxFramesRejectedPerSec, pSchedPipeEntry=pSchedPipeEntry, adnApplOutputCacheTurnoverRate=adnApplOutputCacheTurnoverRate, rsvpIfPATHERRMsgsReceived=rsvpIfPATHERRMsgsReceived, rasPortTotalErrors=rasPortTotalErrors, ircsBadAuthenticators=ircsBadAuthenticators, ipsa6ActiveQuickModeSAs=ipsa6ActiveQuickModeSAs, aspTransactionsPerSec=aspTransactionsPerSec, dnsNbstatMemory=dnsNbstatMemory, ipsa6PendExtendModeNegotiations=ipsa6PendExtendModeNegotiations, processorEntry=processorEntry, wmsTotalStreamErrors=wmsTotalStreamErrors, ntdsDSSecurityDescPropRunQueue=ntdsDSSecurityDescPropRunQueue, spxFramesPerSec=spxFramesPerSec, icpAccountingResponsesPerSec=icpAccountingResponsesPerSec, rsvpIfNumOfIncomingMsgsDropped=rsvpIfNumOfIncomingMsgsDropped, dfsrcBytesReceivedPerSecond=dfsrcBytesReceivedPerSecond, frsBindingsInError=frsBindingsInError, wsTotalFilesSent=wsTotalFilesSent, lDiskAvgDiskBytesPerTransfer=lDiskAvgDiskBytesPerTransfer, msmqInstance=msmqInstance, windowsWorkflowFoundationEntry=windowsWorkflowFoundationEntry, ipsa6MainModeNegotRqstRcvdPerSec=ipsa6MainModeNegotRqstRcvdPerSec, spxPiggybackAckTimeouts=spxPiggybackAckTimeouts, redirConnectsLanManager20=redirConnectsLanManager20, ncsPercentTimeInRTChecks=ncsPercentTimeInRTChecks, ntdsATQEstimatedQueueDelay=ntdsATQEstimatedQueueDelay, memoryPageFaultsPerSec=memoryPageFaultsPerSec, dnsRecursiveTimeOutPerSec=dnsRecursiveTimeOutPerSec, iupAccessAcceptsPerSec=iupAccessAcceptsPerSec, frsFetchBlocksReceived=frsFetchBlocksReceived, wmusSchedulingRate=wmusSchedulingRate, adnErrorEventsRaised=adnErrorEventsRaised, nwLinkNetBIOSEntry=nwLinkNetBIOSEntry, nntpCmdsXHdrCmdsPerSec=nntpCmdsXHdrCmdsPerSec, adnAppl2AnonymousRequests=adnAppl2AnonymousRequests, netBIOSFramesReSentPerSec=netBIOSFramesReSentPerSec, dhcpSrvDeclinesPerSec=dhcpSrvDeclinesPerSec, wsTotalCGIRqsts=wsTotalCGIRqsts, snfsMV303Unmount=snfsMV303Unmount, wsNotFoundErrorsPerSec=wsNotFoundErrorsPerSec, browserMailslotAllocationsFailed=browserMailslotAllocationsFailed, pop3SvcMessagesDeliveredPerSec=pop3SvcMessagesDeliveredPerSec, msmqSvcMSMQIncomingMessages=msmqSvcMSMQIncomingMessages, wwfWorkflowsRunnable=wwfWorkflowsRunnable, adnAppl2Instance=adnAppl2Instance, uddicSetpublisherAssertions=uddicSetpublisherAssertions, iccMalformedPacketsPerSec=iccMalformedPacketsPerSec, smtpSrvrAvgRcpntsPerMsgRcvd=smtpSrvrAvgRcpntsPerMsgRcvd, smtpSrvrCatSendersAmbigsAddr=smtpSrvrCatSendersAmbigsAddr, nwServerReconnects=nwServerReconnects, icmpV4MessagesReceivedErrors=icmpV4MessagesReceivedErrors, dhcpSrvPacketsExpiredPerSec=dhcpSrvPacketsExpiredPerSec, nwPacketBurstWriteTimeoutsPerSec=nwPacketBurstWriteTimeoutsPerSec, npsrausAccessRejectsPerSec=npsrausAccessRejectsPerSec, faxsTotalBytes=faxsTotalBytes, icmpV6SentMembershipReduction=icmpV6SentMembershipReduction, redirConnectsWindowsNT=redirConnectsWindowsNT, iusPacketsSentPerSec=iusPacketsSentPerSec, pSchedPipeFlowsOpened=pSchedPipeFlowsOpened, rsvpIfRESVERRMsgsReceived=rsvpIfRESVERRMsgsReceived, adnApplCacheAPITurnoverRate=adnApplCacheAPITurnoverRate, memoryPoolPagedBytes=memoryPoolPagedBytes, wsCurrentBlkdAsyncIORqsts=wsCurrentBlkdAsyncIORqsts, netlogonEntry=netlogonEntry, pop3SvcBytesTransmittedPerSec=pop3SvcBytesTransmittedPerSec, atATPPacketsPerSec=atATPPacketsPerSec, netBEUIDatagramsReceivedPerSec=netBEUIDatagramsReceivedPerSec, rasTotalPercentCompressionIn=rasTotalPercentCompressionIn, frsChgOrdersRetriedRename=frsChgOrdersRetriedRename, ncltTotalNumOfContentions=ncltTotalNumOfContentions, ipxFailuresNoListen=ipxFailuresNoListen, ipV4DatagramsRcvdUnknownProtocol=ipV4DatagramsRcvdUnknownProtocol, uddicDeletebusiness=uddicDeletebusiness, dnsSecureUpdateReceived=dnsSecureUpdateReceived, rasPortSerialOverrunErrors=rasPortSerialOverrunErrors, httpServiceTotalUrisCached=httpServiceTotalUrisCached, spxBytesTotalPerSec=spxBytesTotalPerSec, snfsV317ReadDirectory=snfsV317ReadDirectory, ncmPromotedMemoryFromGen1=ncmPromotedMemoryFromGen1)
mibBuilder.exportSymbols("INFORMANT-ADV", dsNegotiatedBindsPerSec=dsNegotiatedBindsPerSec, adn1WorkerProcessRestarts=adn1WorkerProcessRestarts, dfsrsvDatabaseLookups=dfsrsvDatabaseLookups, udditFindtModel=udditFindtModel, rsvpIfResourceControlFailures=rsvpIfResourceControlFailures, dfsReplicatedFoldersTable=dfsReplicatedFoldersTable, aspRequestWaitTime=aspRequestWaitTime, pSchedPipeMaxPacketsInNetcard=pSchedPipeMaxPacketsInNetcard, sms3ReliableSessionsFaulted=sms3ReliableSessionsFaulted, icmpV4RcvdParameterProblem=icmpV4RcvdParameterProblem, nwLinkIPXTable=nwLinkIPXTable, processVirtualBytes=processVirtualBytes, dnsSecureUpdateReceivedPerSec=dnsSecureUpdateReceivedPerSec, nwReadPacketsPerSec=nwReadPacketsPerSec, iupAccessAccepts=iupAccessAccepts, wsServiceUptime=wsServiceUptime, adbLogRecordStallsPerSec=adbLogRecordStallsPerSec, netBEUIFailuresResourceLocal=netBEUIFailuresResourceLocal, iupAccessRejects=iupAccessRejects, objectsMutexes=objectsMutexes, wscOutputCacheCurrentMemoryUsage=wscOutputCacheCurrentMemoryUsage, ftpSvcFTPServiceUptime=ftpSvcFTPServiceUptime, wmsPeakPlayerAllocBandwidthKbps=wmsPeakPlayerAllocBandwidthKbps, nwConnectNetWare4X=nwConnectNetWare4X, is4iAcquireHeapSize=is4iAcquireHeapSize, adnRequestsQueued=adnRequestsQueued, dsSAMEnumerationsPerSec=dsSAMEnumerationsPerSec, siL8MergeCount=siL8MergeCount, ntdsLDAPActiveThreads=ntdsLDAPActiveThreads, wmssStations=wmssStations, processPageFileMBytesPeak=processPageFileMBytesPeak, webServiceCache=webServiceCache, smtpSrvrOutboundConnsRfsd=smtpSrvrOutboundConnsRfsd, netCurrentBandwidth=netCurrentBandwidth, wmusAggregateReadRate=wmusAggregateReadRate, ircsBadAuthenticatorsPerSec=ircsBadAuthenticatorsPerSec, dnsRecursiveQueries=dnsRecursiveQueries, npsaupPacketsReceivedPerSec=npsaupPacketsReceivedPerSec, memoryStbyCacheCoreMBytes=memoryStbyCacheCoreMBytes, swqReadBytesPerSec=swqReadBytesPerSec, irusUnknownType=irusUnknownType, telephonyCurrentIncomingCalls=telephonyCurrentIncomingCalls, wmsTotalStreamTerminations=wmsTotalStreamTerminations, frsDSPolls=frsDSPolls, bnuRemoteServerSpeedBitsPerSec=bnuRemoteServerSpeedBitsPerSec, smsh3ProtocolFailuresOverNetPipe=smsh3ProtocolFailuresOverNetPipe, frsRemoteChgOrdersReceived=frsRemoteChgOrdersReceived, nwLinkIPXEntry=nwLinkIPXEntry, adbSessionsPercentUsed=adbSessionsPercentUsed, faxsFailedOutgoingConnections=faxsFailedOutgoingConnections, redirWritesLargePerSec=redirWritesLargePerSec, frsLocalChgOrdersRetriedGenerate=frsLocalChgOrdersRetriedGenerate, npsaccInstance=npsaccInstance, irusUnknownTypePerSec=irusUnknownTypePerSec, tssTotalCompressionRatio=tssTotalCompressionRatio, dsDSPercentSearchesFromKCC=dsDSPercentSearchesFromKCC, frsPacketsReceivedInError=frsPacketsReceivedInError, npsrausRequestTimeouts=npsrausRequestTimeouts, icmpV6SentNeighborAdvert=icmpV6SentNeighborAdvert, pSchedFlowBytesTransmitted=pSchedFlowBytesTransmitted, iusAccessRequests=iusAccessRequests, uddicAddpublisherAssertions=uddicAddpublisherAssertions, ipsa6SuccessMainModeNegotPerSec=ipsa6SuccessMainModeNegotPerSec, ipsi4FailedQuickModeNegotPerSec=ipsi4FailedQuickModeNegotPerSec, iusDuplicateAccessRequestsPerSec=iusDuplicateAccessRequestsPerSec, siPersistentIndexesL3=siPersistentIndexesL3, memoryPoolPagedResidentBytes=memoryPoolPagedResidentBytes, dfsrfConflictBytesCleanedUp=dfsrfConflictBytesCleanedUp, dnsUDPQueryReceivedPerSec=dnsUDPQueryReceivedPerSec, nclCurrentClassesLoaded=nclCurrentClassesLoaded, iusDroppedPacketsPerSec=iusDroppedPacketsPerSec, nntpSrvrHistoryMapEntriesPerSec=nntpSrvrHistoryMapEntriesPerSec, smtpSrvrCatLDAPConnsCurrOpen=smtpSrvrCatLDAPConnsCurrOpen, dtcb3FaultsSentCountPerSec=dtcb3FaultsSentCountPerSec, wsOptionsRqstsPerSec=wsOptionsRqstsPerSec, npsrausRequestTimeoutsPerSec=npsrausRequestTimeoutsPerSec, wFPv6BlockedBinds=wFPv6BlockedBinds, nclTotalAppdomains=nclTotalAppdomains, memoryAvailableKBytes=memoryAvailableKBytes, ipsdPacketsFailedReplayDetection=ipsdPacketsFailedReplayDetection, ipsi6MainModeNegotRqstRcvdPerSec=ipsi6MainModeNegotRqstRcvdPerSec, sswsSchannelSessionCacheEntries=sswsSchannelSessionCacheEntries, wsPostRqstsPerSec=wsPostRqstsPerSec, npsaccDroppedPackets=npsaccDroppedPackets, npsSystemHealthValidatorsEntry=npsSystemHealthValidatorsEntry, telephonyIncomingCallsPerSec=telephonyIncomingCallsPerSec, adnApplSessionsActive=adnApplSessionsActive, jodIODataOperationsPerSec=jodIODataOperationsPerSec, dsATQThreadsTotal=dsATQThreadsTotal, ipxFrameBytesSentPerSec=ipxFrameBytesSentPerSec, aspDotNET=aspDotNET, icmpV6ReceivedNeighborAdvert=icmpV6ReceivedNeighborAdvert, npsaupInvalidAddressesPerSec=npsaupInvalidAddressesPerSec, printQueueEnumNetworkPrinterCall=printQueueEnumNetworkPrinterCall, sgpFilteredOfficeRate=sgpFilteredOfficeRate, processPoolNonpagedBytes=processPoolNonpagedBytes, npsshvShvNoneFailures=npsshvShvNoneFailures, processWorkingSetMPrivate=processWorkingSetMPrivate, sgActiveQueueLength=sgActiveQueueLength, netPacketsOutboundErrors=netPacketsOutboundErrors, wscOutputCacheCurrentFlushedItem=wscOutputCacheCurrentFlushedItem, sms3TransactedOpsAborted=sms3TransactedOpsAborted, wsrmplSystemManagedCPUPercent=wsrmplSystemManagedCPUPercent, dnsIXFRTCPSuccessReceived=dnsIXFRTCPSuccessReceived, wsTotalBytesReceived=wsTotalBytesReceived, wwfWorkflowsUnloaded=wwfWorkflowsUnloaded, npsacsAccountingResponsesPerSec=npsacsAccountingResponsesPerSec, npsausBadAuthenticatorsPerSec=npsausBadAuthenticatorsPerSec, wmsCurStreamErrorRate=wmsCurStreamErrorRate, cachePinReadHitsPercent=cachePinReadHitsPercent, dsDRAOutboundValuesTotalPerSec=dsDRAOutboundValuesTotalPerSec, dfsrfDeletedFilesCleanedUp=dfsrfDeletedFilesCleanedUp, adn1RequestsDisconnected=adn1RequestsDisconnected, sgServerObjects=sgServerObjects, wscTotalFlushedFiles=wscTotalFlushedFiles, rsvpIfRESVTEARMsgsReceived=rsvpIfRESVTEARMsgsReceived, frsInstance=frsInstance, serverPoolNonpagedPeak=serverPoolNonpagedPeak, smtpSrvrCatCatsInProgress=smtpSrvrCatCatsInProgress, ncmAllocatedBytesPerSec=ncmAllocatedBytesPerSec, lDiskDiskReadBytesPerSec=lDiskDiskReadBytesPerSec, wsLogonAtmpsPerSec=wsLogonAtmpsPerSec, npsrausUnknownTypePerSec=npsrausUnknownTypePerSec, ntdsDSPercentWritesFromXDS=ntdsDSPercentWritesFromXDS, telephonyActiveLines=telephonyActiveLines, advDatabaseTableClassesTable=advDatabaseTableClassesTable, atAverageTimePerZIPPacket=atAverageTimePerZIPPacket, jobObjectTable=jobObjectTable, frsFetchRequestsSent=frsFetchRequestsSent, dotNETCLRLoadingEntry=dotNETCLRLoadingEntry, icmpV4MessagesSentPerSec=icmpV4MessagesSentPerSec, rasPortTable=rasPortTable, nntpCmdsLogonFailures=nntpCmdsLogonFailures, spxFrameBytesPerSec=spxFrameBytesPerSec, frsLocalChgOrdersSent=frsLocalChgOrdersSent, ipV6DatagramsRcvdAddressErrors=ipV6DatagramsRcvdAddressErrors, iisGlobalTotalURIsCached=iisGlobalTotalURIsCached, nntpSrvrArticleMapEntriesPerSec=nntpSrvrArticleMapEntriesPerSec, wsCopyRqstsPerSec=wsCopyRqstsPerSec, windowsWorkflowFoundationTable=windowsWorkflowFoundationTable, frsRemoteChgOrdersSent=frsRemoteChgOrdersSent, pDiskDiskReadBytesPerSec=pDiskDiskReadBytesPerSec, threadElapsedTime=threadElapsedTime, hcapcPostureValidSuccessResponse=hcapcPostureValidSuccessResponse, siPersistentIndexesL2=siPersistentIndexesL2, dfsrcRDCNumberOfFilesReceived=dfsrcRDCNumberOfFilesReceived, rsvpInterfacesEntry=rsvpInterfacesEntry, sme3CallsFailedPerSecond=sme3CallsFailedPerSecond, objectsSemaphores=objectsSemaphores, pop3SvcTotalMessagesDelivered=pop3SvcTotalMessagesDelivered, adn2StateServerSessionsTotal=adn2StateServerSessionsTotal, sppsCredentialHandles=sppsCredentialHandles, npsrausFullAccessDecisionsPerSec=npsrausFullAccessDecisionsPerSec, dsInstance=dsInstance, wsTotalFilesTransferred=wsTotalFilesTransferred, redirector=redirector, icsNoRecord=icsNoRecord, processPageFaultsPerSec=processPageFaultsPerSec, ipV6FragmentedDatagramsPerSec=ipV6FragmentedDatagramsPerSec, cacheSyncDataMapsPerSec=cacheSyncDataMapsPerSec, sgpStatusSuccess=sgpStatusSuccess, adnAppl1OutputCacheEntries=adnAppl1OutputCacheEntries, adnAppl2SessionsActive=adnAppl2SessionsActive, uddicFindservice=uddicFindservice, iccAccountingResponsesPerSec=iccAccountingResponsesPerSec, wmusActiveTCPStreams=wmusActiveTCPStreams, serverWorkQueuesEntry=serverWorkQueuesEntry, sme3Calls=sme3Calls, serverErrorsLogon=serverErrorsLogon, serverPoolNonpagedBytes=serverPoolNonpagedBytes, dsDRAInPropertiesFilteredPerSec=dsDRAInPropertiesFilteredPerSec, npsracsAccountingResponses=npsracsAccountingResponses, smtpSrvrCatRcptsNDRdAmbigsAddr=smtpSrvrCatRcptsNDRdAmbigsAddr, rpcpTotalInBandwidthBackEndSrvrs=rpcpTotalInBandwidthBackEndSrvrs, smtpSrvrRouteTableLookupsPerSec=smtpSrvrRouteTableLookupsPerSec, aspRequestBytesOutTotal=aspRequestBytesOutTotal, snfsV316ReadDirectory=snfsV316ReadDirectory, wmsTotalConnectedPlayers=wmsTotalConnectedPlayers, irusAccessRequestsPerSec=irusAccessRequestsPerSec, icmpV4SentAddressMask=icmpV4SentAddressMask, dotNETCLRDataEntry=dotNETCLRDataEntry, ncjPercentTimeInJit=ncjPercentTimeInJit, ipsdActiveSecurityAssociations=ipsdActiveSecurityAssociations, iupBadAuthenticators=iupBadAuthenticators, cacheSyncFastReadsPerSec=cacheSyncFastReadsPerSec, sgpDocumentAdditions=sgpDocumentAdditions, wFPv4InConnections=wFPv4InConnections, smtpSrvrMsgBytesTotalPerSec=smtpSrvrMsgBytesTotalPerSec, usbEntry=usbEntry, serverSessionsErroredOut=serverSessionsErroredOut, sgIdleThreads=sgIdleThreads, memorySystemCodeTotalMBytes=memorySystemCodeTotalMBytes, rsvpSvcFailedQoSRequests=rsvpSvcFailedQoSRequests, cpuPercentIdleTime=cpuPercentIdleTime, adnAppl2CacheAPIHits=adnAppl2CacheAPIHits, wscFileCacheMisses=wscFileCacheMisses, netBEUIFailuresNoListen=netBEUIFailuresNoListen, serverPoolPagedMBytes=serverPoolPagedMBytes, giaipIKEQuickModeNegotiationTime=giaipIKEQuickModeNegotiationTime, netBEUIDatagramBytesPerSec=netBEUIDatagramBytesPerSec, dtcb3PreparedRetryCountPerSec=dtcb3PreparedRetryCountPerSec, cpuPercentC2Time=cpuPercentC2Time, ipsdPacketsFailUDPESPValidation=ipsdPacketsFailUDPESPValidation, processorTable=processorTable, iucMalformedPacketsPerSec=iucMalformedPacketsPerSec, indexingServiceFilterTable=indexingServiceFilterTable, mfsCurrentQueueLength=mfsCurrentQueueLength, nntpCmdsLogonFailuresPerSec=nntpCmdsLogonFailuresPerSec, smtpSrvrBadMailMsgsGeneralFail=smtpSrvrBadMailMsgsGeneralFail, netBEUIPacketsPerSec=netBEUIPacketsPerSec, adnStateServerSessionsTimedOut=adnStateServerSessionsTimedOut, spxConnectionsOpen=spxConnectionsOpen, npsrausAccessAccepts=npsrausAccessAccepts, cpuPercentInterruptTime=cpuPercentInterruptTime, ipSecIKEv6=ipSecIKEv6, npsausFullAccessDecisionsPerSec=npsausFullAccessDecisionsPerSec, ntdsDSPercentSearchesFromNTDSAPI=ntdsDSPercentSearchesFromNTDSAPI, npsaupAccessRejectsPerSec=npsaupAccessRejectsPerSec, udditSavebinding=udditSavebinding, ntdsDSThreadsInUse=ntdsDSThreadsInUse, npsracsAccountingRequests=npsracsAccountingRequests, npsrausQuarantineDecisionsPerSec=npsrausQuarantineDecisionsPerSec, aspErrorsPerSec=aspErrorsPerSec, adbIPerODatabaseReadsAvgLatency=adbIPerODatabaseReadsAvgLatency, adnApplRequestEventsRaised=adnApplRequestEventsRaised, smo3Calls=smo3Calls, smtpSrvrDirDropsTotal=smtpSrvrDirDropsTotal, ipsa4FailExtendModeNegotPerSec=ipsa4FailExtendModeNegotPerSec, is4dActiveSecurityAssociations=is4dActiveSecurityAssociations, npsacpPacketsReceived=npsacpPacketsReceived, smtpSrvrCatRcptsNDRdSinkRecipErr=smtpSrvrCatRcptsNDRdSinkRecipErr, threadContextSwitchesPerSec=threadContextSwitchesPerSec, netBIOSFailuresAdapter=netBIOSFailuresAdapter, wmppPeakPlayerAllocBandwidthKbps=wmppPeakPlayerAllocBandwidthKbps, usbIsochronousBytesPerSec=usbIsochronousBytesPerSec, npsshvShvClientCommFailurePerSec=npsshvShvClientCommFailurePerSec, objects=objects, idxSvcFilterIdxSpeedMBPerHr=idxSvcFilterIdxSpeedMBPerHr, spxPacketsReceivedPerSec=spxPacketsReceivedPerSec, wmppTotalStreamingPlayers=wmppTotalStreamingPlayers, ntdsABClientSessions=ntdsABClientSessions, ntdsKDCTGSRequests=ntdsKDCTGSRequests, ipV6FragmentationFailures=ipV6FragmentationFailures, adnAppl2RequestsInApplQueue=adnAppl2RequestsInApplQueue, wscMetadataCacheFlushes=wscMetadataCacheFlushes, ipxFramesReceivedPerSec=ipxFramesReceivedPerSec, tssInstance=tssInstance, httpServiceUriCacheHits=httpServiceUriCacheHits, sms3CallsFaulted=sms3CallsFaulted, ncmPercentTimeInGC=ncmPercentTimeInGC, snfsMV305ExportList=snfsMV305ExportList, npsausPacketsSentPerSec=npsausPacketsSentPerSec, iisGlobalCurURIsCached=iisGlobalCurURIsCached, rsvpIfRESVMsgsReceived=rsvpIfRESVMsgsReceived)
mibBuilder.exportSymbols("INFORMANT-ADV", rsvpSvcQoSenabledSenders=rsvpSvcQoSenabledSenders, wmsCurCacheDownloads=wmsCurCacheDownloads, ipsa4ExtendModeNegotiationPerSec=ipsa4ExtendModeNegotiationPerSec, snfsV205ReadLink=snfsV205ReadLink, ipsa4MainModeSAsUseImpersonation=ipsa4MainModeSAsUseImpersonation, icmpV4SentDestinationUnreachable=icmpV4SentDestinationUnreachable, processIOOtherOperationsPerSec=processIOOtherOperationsPerSec, acsPerRsvpSvcNetworkSockets=acsPerRsvpSvcNetworkSockets, idxSvcTotalNumOfQueries=idxSvcTotalNumOfQueries, memorySystemCacheResidentKBytes=memorySystemCacheResidentKBytes, tssWorkingSetPeak=tssWorkingSetPeak, netBIOSFrameBytesSentPerSec=netBIOSFrameBytesSentPerSec, icpRequestTimeoutsPerSec=icpRequestTimeoutsPerSec, smtpSrvrLocalRetryQueueLength=smtpSrvrLocalRetryQueueLength, wwfWorkflowsCompletedPerSec=wwfWorkflowsCompletedPerSec, msmqSvcOutgoingMulticastSessions=msmqSvcOutgoingMulticastSessions, ntdsDRAInboundBytesCBSBCSBoot=ntdsDRAInboundBytesCBSBCSBoot, ircsPacketsReceivedPerSec=ircsPacketsReceivedPerSec, lDiskDiskReadsPerSec=lDiskDiskReadsPerSec, ntdsDRAOutboundBytesCBSBCPerSec=ntdsDRAOutboundBytesCBSBCPerSec, dsDSClientBindsPerSec=dsDSClientBindsPerSec, snfsV312Remove=snfsV312Remove, ipxFailuresNotFound=ipxFailuresNotFound, ipxPiggybackAckTimeouts=ipxPiggybackAckTimeouts, uddicDeletebinding=uddicDeletebinding, acsPerRsvpSvcQoSEnabledSenders=acsPerRsvpSvcQoSEnabledSenders, wmsTotalAdvertisements=wmsTotalAdvertisements, udditSaveservice=udditSaveservice, smtpSrvrCatLDAPSrchs=smtpSrvrCatLDAPSrchs, nciNumOfCCWs=nciNumOfCCWs, ipsa4SuccessMainModeNegotPerSec=ipsa4SuccessMainModeNegotPerSec, wsrmpmcManagedCPUPercent=wsrmpmcManagedCPUPercent, adn2WorkerProcessRestarts=adn2WorkerProcessRestarts, atAverageTimePerNBPPacket=atAverageTimePerNBPPacket, tssOutputAsyncOverflow=tssOutputAsyncOverflow, dsDRAHighestUSNCommittedHighPart=dsDRAHighestUSNCommittedHighPart, ntdsOnelevelSearchesPerSec=ntdsOnelevelSearchesPerSec, dnsRecursiveQueryFailure=dnsRecursiveQueryFailure, netBEUITable=netBEUITable, siL5MergesNow=siL5MergesNow, wmppCurLateReadRate=wmppCurLateReadRate, msmqosOutgoingHTTPBytes=msmqosOutgoingHTTPBytes, ntdsDRAOutboundBytesCBSBCSBoot=ntdsDRAOutboundBytesCBSBCSBoot, netBEUIResourceTable=netBEUIResourceTable, adn2StateServerSessionsAbandoned=adn2StateServerSessionsAbandoned, nciNumOfMarshalling=nciNumOfMarshalling, httpServiceUrlGroupsEntry=httpServiceUrlGroupsEntry, icmpV4SentParameterProblem=icmpV4SentParameterProblem, adnAppl1CacheAPIEntries=adnAppl1CacheAPIEntries, dsDRAOutboundBytesTotalSinceBoot=dsDRAOutboundBytesTotalSinceBoot, adnApplTransactionsPending=adnApplTransactionsPending, ipsdSARekeys=ipsdSARekeys, npsacsDroppedPackets=npsacsDroppedPackets, dsDRAInObjectUpdRemainInPkt=dsDRAInObjectUpdRemainInPkt, jodWorkingSet=jodWorkingSet, adnApplCacheTotalTurnoverRate=adnApplCacheTotalTurnoverRate, wFPv4InConnectionsAllowedPerSec=wFPv4InConnectionsAllowedPerSec, memoryStbyCacheNormPriorityKByte=memoryStbyCacheNormPriorityKByte, advanced=advanced, nciNumOfTLBImportsPerSec=nciNumOfTLBImportsPerSec, adnAppl1RequestsNotAuthorized=adnAppl1RequestsNotAuthorized, icsPacketsReceivedPerSec=icsPacketsReceivedPerSec, adnApplCacheTotalEntries=adnApplCacheTotalEntries, pSchedFlowPktsTransmitted=pSchedFlowPktsTransmitted, wsrmProcessEntry=wsrmProcessEntry, dotNETCLRMemoryTable=dotNETCLRMemoryTable, ntdsDSPercentWritesFromKCC=ntdsDSPercentWritesFromKCC, dhcpSrvRequestsPerSec=dhcpSrvRequestsPerSec, udpV6DatagramsPerSec=udpV6DatagramsPerSec, adnAppl2TransactionsTotal=adnAppl2TransactionsTotal, msmqIncomingHTTPTraffic=msmqIncomingHTTPTraffic, nntpSrvrMaximumConnections=nntpSrvrMaximumConnections, idxSvcUniqueKeys=idxSvcUniqueKeys, serverPoolPagedBytes=serverPoolPagedBytes, wsCurrentCALCountForAuthdUsers=wsCurrentCALCountForAuthdUsers, caIssuedRequestsPerSec=caIssuedRequestsPerSec, ntdsDSSecurityDescPropEvents=ntdsDSSecurityDescPropEvents, iisGlobalCurFileCacheMemUsage=iisGlobalCurFileCacheMemUsage, npsshvShvServerCommnFailPerSec=npsshvShvServerCommnFailPerSec, smtpSrvrCatMailmsgDupCollisions=smtpSrvrCatMailmsgDupCollisions, sgpFilteredTextRate=sgpFilteredTextRate, rasPortBytesTransmitted=rasPortBytesTransmitted, iisGlobalURICacheFlushes=iisGlobalURICacheFlushes, wmsTotalStreamDenials=wmsTotalStreamDenials, wmsTotalPlayerBytesSent=wmsTotalPlayerBytesSent, npsausPacketsReceived=npsausPacketsReceived, uddicDoping=uddicDoping, iupAccessChallenges=iupAccessChallenges, ncltNumOfCurrentLogicalThread=ncltNumOfCurrentLogicalThread, smtpSrvrPercentRcpntsLocal=smtpSrvrPercentRcpntsLocal, icmpV6ReceivedDestUnreachable=icmpV6ReceivedDestUnreachable, cpuPercentUserTime=cpuPercentUserTime, aspRequestsDisconnected=aspRequestsDisconnected, siDocumentsFiltered=siDocumentsFiltered, iupAccessChallengesPerSec=iupAccessChallengesPerSec, memorySystemDriverResidentMBytes=memorySystemDriverResidentMBytes, uddicGetbusinessDetailExt=uddicGetbusinessDetailExt, tcpV4SegmentsRetransmittedPerSec=tcpV4SegmentsRetransmittedPerSec, nntpCmdsXReplicCmdsPerSec=nntpCmdsXReplicCmdsPerSec, iupDroppedPacketsPerSec=iupDroppedPacketsPerSec, npsacpAccountingResponsesPerSec=npsacpAccountingResponsesPerSec, systemAlignmentFixupsPerSec=systemAlignmentFixupsPerSec, browserMissedServerListRequests=browserMissedServerListRequests, dnsTCPQueryReceivedPerSec=dnsTCPQueryReceivedPerSec, udpV6DatagramsReceivedErrors=udpV6DatagramsReceivedErrors, udpV4DatagramsReceivedPerSec=udpV4DatagramsReceivedPerSec, smtpSrvrBytesTotal=smtpSrvrBytesTotal, ntdsBaseSearchesPerSec=ntdsBaseSearchesPerSec, adn1ApplicationRestarts=adn1ApplicationRestarts, npsausProbationDecisionsPerSec=npsausProbationDecisionsPerSec, wsrmprInstance=wsrmprInstance, frsJoinNotificationsSent=frsJoinNotificationsSent, ncmGen1PromotedBytesPerSec=ncmGen1PromotedBytesPerSec, advDatabaseEntry=advDatabaseEntry, ipsa6FailedExtendModeNegotPerSec=ipsa6FailedExtendModeNegotPerSec, acsPerRsvpSvcTimers=acsPerRsvpSvcTimers, ipsi4ActiveQuickModeSAs=ipsi4ActiveQuickModeSAs, processIOWriteOperationsPerSec=processIOWriteOperationsPerSec, snfsDRCHits=snfsDRCHits, wasActiveListenerChannels=wasActiveListenerChannels, nwConnectNetWare2X=nwConnectNetWare2X, icsDroppedPackets=icsDroppedPackets, siPersistentIndexesL7=siPersistentIndexesL7, iusUnknownTypePerSec=iusUnknownTypePerSec, icmpV6ReceivedMembershipReduct=icmpV6ReceivedMembershipReduct, dfsrfDeletedBytesCleanedUp=dfsrfDeletedBytesCleanedUp, httpsrqRejectionRate=httpsrqRejectionRate, ntdsDRAOutboundObjsFilterPerSec=ntdsDRAOutboundObjsFilterPerSec, processThreadCount=processThreadCount, adnRequestExecutionTime=adnRequestExecutionTime, serverLogonTotal=serverLogonTotal, tcpV6SegmentsSentPerSec=tcpV6SegmentsSentPerSec, adnApplRequestsDisconnected=adnApplRequestsDisconnected, idxSvcIndexSizeMB=idxSvcIndexSizeMB, wscActiveFlushedEntries=wscActiveFlushedEntries, ntdsDRAOutboundObjectsPerSec=ntdsDRAOutboundObjectsPerSec, ncjILBytesJittedPerSec=ncjILBytesJittedPerSec, ipsa4FailedMainModeNegPerSec=ipsa4FailedMainModeNegPerSec, ntdsDSDirectoryReadsPerSec=ntdsDSDirectoryReadsPerSec, wscKernelURICacheFlushes=wscKernelURICacheFlushes, redirBytesTotalPerSec=redirBytesTotalPerSec, iupAccessRequestsPerSec=iupAccessRequestsPerSec, npsrausInstance=npsrausInstance, siL0MergeFlushCount=siL0MergeFlushCount, icmpV6=icmpV6, dotNETCLRDataTable=dotNETCLRDataTable, iccAccountingRequestsPerSec=iccAccountingRequestsPerSec, is4iTotalSoftAssociations=is4iTotalSoftAssociations, threadPriorityCurrent=threadPriorityCurrent, mfsFailedLogons=mfsFailedLogons, ncmPromotFinalizationMemoryGen1=ncmPromotFinalizationMemoryGen1, sms3TransactionsFlowedPerSec=sms3TransactionsFlowedPerSec, dtcb3AvgParticipantCmtRspnsTime=dtcb3AvgParticipantCmtRspnsTime, frcBindingsInError=frcBindingsInError, nwReadOperationsRandomPerSec=nwReadOperationsRandomPerSec, memoryAvailableBytes=memoryAvailableBytes, npsaccDupAccountingRequests=npsaccDupAccountingRequests, dhcpSrvReleasesPerSec=dhcpSrvReleasesPerSec, netlogonSemaphoreHolders=netlogonSemaphoreHolders, adn1WorkerProcessesRunning=adn1WorkerProcessesRunning, npsaucMalformedPackets=npsaucMalformedPackets, atPacketsOutPerSec=atPacketsOutPerSec, udpV6DatagramsNoPortPerSec=udpV6DatagramsNoPortPerSec, wwfWorkflowsInMemory=wwfWorkflowsInMemory, ntdsDatabaseDeletesPerSec=ntdsDatabaseDeletesPerSec, wFPv6ActiveOutConnections=wFPv6ActiveOutConnections, msmqMessagesInJournalQueue=msmqMessagesInJournalQueue, tssInputAsyncFrameError=tssInputAsyncFrameError, npsshvShvClientComponentFailSec=npsshvShvClientComponentFailSec, ncmGen0PromotedBytesPerSec=ncmGen0PromotedBytesPerSec, frsFilesInstalled=frsFilesInstalled, is4iMainModeSAListEntries=is4iMainModeSAListEntries, adnAppl1SessionsTotal=adnAppl1SessionsTotal, nwWriteOperationsRandomPerSec=nwWriteOperationsRandomPerSec, ntdsDRAOutboundBytesCBSACPerSec=ntdsDRAOutboundBytesCBSACPerSec, processIOReadOperationsPerSec=processIOReadOperationsPerSec, adnApplTransactionsPerSec=adnApplTransactionsPerSec, smo3Instance=smo3Instance, dsDSPercentWritesFromDRA=dsDSPercentWritesFromDRA, dtcResponseTimeAverage=dtcResponseTimeAverage, memoryAvailableMBytes=memoryAvailableMBytes, giaipFailedNegotiationsPerSec=giaipFailedNegotiationsPerSec, snfsV307Write=snfsV307Write, iusUnknownType=iusUnknownType, udditGettModelDetail=udditGettModelDetail, mfsDataReceivedPerSec=mfsDataReceivedPerSec, smsh3UrisUnregisteredForNetTcp=smsh3UrisUnregisteredForNetTcp, ftpSvcMaximumConnections=ftpSvcMaximumConnections, snfsV209Create=snfsV209Create, w3svcW3WPTable=w3svcW3WPTable, nntpCmdsNextCmds=nntpCmdsNextCmds, directoryServicesTable=directoryServicesTable, ipsi6QuickModeNegotiationsPerSec=ipsi6QuickModeNegotiationsPerSec, adn2RequestErrorEventsRaised=adn2RequestErrorEventsRaised, dsSAMUniversalGrpMembEvalPerSec=dsSAMUniversalGrpMembEvalPerSec, winsSrvrQueriesPerSec=winsSrvrQueriesPerSec, ipV4FragmentsReassembledPerSec=ipV4FragmentsReassembledPerSec, npsshvShvClientCommFailures=npsshvShvClientCommFailures, frsReplicaSetsStarted=frsReplicaSetsStarted, processIOOtherBytesPerSec=processIOOtherBytesPerSec, browserServerListRequestsPerSec=browserServerListRequestsPerSec, redirServerSessions=redirServerSessions, nclCurrentAssemblies=nclCurrentAssemblies, faxsFaxesSent=faxsFaxesSent, udditFindbinding=udditFindbinding, idxSvcDeferredForIndexing=idxSvcDeferredForIndexing, ntdsDSPercentReadsOther=ntdsDSPercentReadsOther, ntdsLDAPNewSSLConnectionsPerSec=ntdsLDAPNewSSLConnectionsPerSec, sms3TransactedOpsCommitPerSec=sms3TransactedOpsCommitPerSec, netPacketsPerSec=netPacketsPerSec, ipV6FragmentsRcvdPerSec=ipV6FragmentsRcvdPerSec, ntdsPhantomsCleanedPerSec=ntdsPhantomsCleanedPerSec, idxSvcFilterTotalIdxSpeedMBPerHr=idxSvcFilterTotalIdxSpeedMBPerHr, npsshvShvCompliances=npsshvShvCompliances, ntdsDSDirectoryWritesPerSec=ntdsDSDirectoryWritesPerSec, processInstance=processInstance, wmsTotalLateSends=wmsTotalLateSends, httpsrqCurrentQueueSize=httpsrqCurrentQueueSize, adbIODatabaseReadsPerSec=adbIODatabaseReadsPerSec, ncltContentionRatePerSec=ncltContentionRatePerSec, icmpV4RcvdEchoReplyPerSec=icmpV4RcvdEchoReplyPerSec, wwfWorkflowsLoadedPerSec=wwfWorkflowsLoadedPerSec, serviceModelService3Entry=serviceModelService3Entry, frcBindings=frcBindings, nbtConnectionBytesReceivedPerSec=nbtConnectionBytesReceivedPerSec, npsacsMalformedPacketsPerSec=npsacsMalformedPacketsPerSec, adnApplInfraErrEventRaised=adnApplInfraErrEventRaised, irusAccessRequests=irusAccessRequests, serviceModelOperation3Table=serviceModelOperation3Table, npsacpInvalidAddressesPerSec=npsacpInvalidAddressesPerSec, adnAppl2AuditSuccessEventsRaised=adnAppl2AuditSuccessEventsRaised, nntpCmdsGroupCmdsPerSec=nntpCmdsGroupCmdsPerSec, wmusConnectedClients=wmusConnectedClients, netBIOSFailuresNotFound=netBIOSFailuresNotFound, rasPortCRCErrors=rasPortCRCErrors, redirWriteBytesNetworkPerSec=redirWriteBytesNetworkPerSec, nclBytesInLoaderHeap=nclBytesInLoaderHeap, objectsProcesses=objectsProcesses, netlogonTable=netlogonTable, adnAppl2TransactionsPending=adnAppl2TransactionsPending, nntpCmdsInstance=nntpCmdsInstance, httpsugBytesReceivedRate=httpsugBytesReceivedRate, npsaccPacketsReceived=npsaccPacketsReceived, snfsV306Read=snfsV306Read, nwServerDisconnects=nwServerDisconnects, ipsa4SuccessQuickModeNegotiation=ipsa4SuccessQuickModeNegotiation, npsaucFullAccessDecisions=npsaucFullAccessDecisions, cpuPercentPrivilegedTime=cpuPercentPrivilegedTime, uddicGetassertionStatusReport=uddicGetassertionStatusReport, sgWordBreakersCached=sgWordBreakersCached, ftpSvcCurrentAnonymousUsers=ftpSvcCurrentAnonymousUsers, netPacketsOutboundDiscarded=netPacketsOutboundDiscarded, iucMalformedPackets=iucMalformedPackets, snsdMessagesInTheQueueDirectory=snsdMessagesInTheQueueDirectory)
mibBuilder.exportSymbols("INFORMANT-ADV", icmpV6MessagesOutboundErrors=icmpV6MessagesOutboundErrors, ipsa4SuccessQuickModeNegotPerSec=ipsa4SuccessQuickModeNegotPerSec, rsvpServiceTable=rsvpServiceTable, wsTotalBytesTransfered=wsTotalBytesTransfered, npsacpAccountingRequests=npsacpAccountingRequests, wasTotalRuntimeStatusQueries=wasTotalRuntimeStatusQueries, cacheDataMapPinsPerSec=cacheDataMapPinsPerSec, adnAuditFailureEventsRaised=adnAuditFailureEventsRaised, nwPacketBurstIOPerSec=nwPacketBurstIOPerSec, w3svcMaximumFileCacheMemoryUsage=w3svcMaximumFileCacheMemoryUsage, adnApplSessionsTimedOut=adnApplSessionsTimedOut, ntdsSAMSuccessCompCreationPerSec=ntdsSAMSuccessCompCreationPerSec, siPersistentIndexes=siPersistentIndexes, rsvpIfPATHTEARMsgsReceived=rsvpIfPATHTEARMsgsReceived, systemFileReadOperationsPerSec=systemFileReadOperationsPerSec, npsrausMalformedPackets=npsrausMalformedPackets, wmsTotalLateReads=wmsTotalLateReads, dhcpSrvConflictCheckQueueLength=dhcpSrvConflictCheckQueueLength, ipV6DatagramsRcvdDiscarded=ipV6DatagramsRcvdDiscarded, aspInMemoryTemplatesCached=aspInMemoryTemplatesCached, faxsPagesSent=faxsPagesSent, udditAddpublisherAssertions=udditAddpublisherAssertions, irusAccessRejectsPerSec=irusAccessRejectsPerSec, irusRetransmissions=irusRetransmissions, dsDSPercentWritesFromNTDSAPI=dsDSPercentWritesFromNTDSAPI, ircsRequestTimeoutsPerSec=ircsRequestTimeoutsPerSec, adbLogWritesPerSec=adbLogWritesPerSec, nbtConnectionTable=nbtConnectionTable, dotNETCLRRemotingTable=dotNETCLRRemotingTable, icsServerResetTime=icsServerResetTime, jodIOOtherBytesPerSec=jodIOOtherBytesPerSec, ncmNumInducedGC=ncmNumInducedGC, netBEUIFramesReSentPerSec=netBEUIFramesReSentPerSec, dtcb3ReplayRetryCountPerSec=dtcb3ReplayRetryCountPerSec, npsrausFullAccessDecisions=npsrausFullAccessDecisions, adnApplRequestsRejected=adnApplRequestsRejected, printQueueBytesPrintedPerSec=printQueueBytesPrintedPerSec, npsaccBadAuthenticatorsPerSec=npsaccBadAuthenticatorsPerSec, adnApplCacheTotalHits=adnApplCacheTotalHits, memoryPoolNonpagedKBytes=memoryPoolNonpagedKBytes, bnuIGDSpeedBitsPerSec=bnuIGDSpeedBitsPerSec, siL3MergeCount=siL3MergeCount, uddicFindtModel=uddicFindtModel, irusPacketsReceivedPerSec=irusPacketsReceivedPerSec, ipsa4SuccExtendedModeNegotiation=ipsa4SuccExtendedModeNegotiation, ntdsLDAPClientSessions=ntdsLDAPClientSessions, faxsReceivedPages=faxsReceivedPages, npsacsServerUpTime=npsacsServerUpTime, sgpFilteredOffice=sgpFilteredOffice, smsh3ProtocolFailuresOverNetTcp=smsh3ProtocolFailuresOverNetTcp, dfsrcTotalFilesReceived=dfsrcTotalFilesReceived, jodIDProcess=jodIDProcess, wsSearchRqstsPerSec=wsSearchRqstsPerSec, adnApplCachePrcntMchneMemLimUsed=adnApplCachePrcntMchneMemLimUsed, siL5MergeSpeedLast=siL5MergeSpeedLast, spxConnectionsNoRetries=spxConnectionsNoRetries, snfsTotalNFSCallsV3=snfsTotalNFSCallsV3, winsSrvrFailedReleasesPerSec=winsSrvrFailedReleasesPerSec, iisGlobalTotalFlushedURIs=iisGlobalTotalFlushedURIs, sms3CallsFailed=sms3CallsFailed, iccDroppedPackets=iccDroppedPackets, ipV6DatagramsOutboundDiscarded=ipV6DatagramsOutboundDiscarded, pSchedFlowPktsDroppedPerSec=pSchedFlowPktsDroppedPerSec, smtpSrvrCatMsgsBifurcated=smtpSrvrCatMsgsBifurcated, tssTotalAsyncParityError=tssTotalAsyncParityError, udpV6=udpV6, wFPv6=wFPv6, sms3TransactedOpsAbortedPerSec=sms3TransactedOpsAbortedPerSec, dsDRAOutCmpBtwSitesBfrCmpPerSec=dsDRAOutCmpBtwSitesBfrCmpPerSec, npsrausMalformedPacketsPerSec=npsrausMalformedPacketsPerSec, npsSystemHealthValidatorsTable=npsSystemHealthValidatorsTable, dsDSPercentReadsFromSAM=dsDSPercentReadsFromSAM, dsDSThreadsInUse=dsDSThreadsInUse, printQueueInstance=printQueueInstance, dsDRAInBytesTotalSinceBoot=dsDRAInBytesTotalSinceBoot, usbHostControllerAsyncIdle=usbHostControllerAsyncIdle, npsshvShvServerCompFailurePerSec=npsshvShvServerCompFailurePerSec, nntpSrvrArticlesDeletedPerSec=nntpSrvrArticlesDeletedPerSec, smo3CallFailedPerSecond=smo3CallFailedPerSecond, irusPacketsReceived=irusPacketsReceived, tcpV6ConnectionsPassive=tcpV6ConnectionsPassive, smtpSrvrCategorizerQueueLength=smtpSrvrCategorizerQueueLength, npsausInvalidRequests=npsausInvalidRequests, ntdsDRAHighestUSNIssuedHighPart=ntdsDRAHighestUSNIssuedHighPart, pDiskAvgDiskSecPerTransfer=pDiskAvgDiskSecPerTransfer, browserEnumerationsOtherPerSec=browserEnumerationsOtherPerSec, mfsMaximumFilesOpen=mfsMaximumFilesOpen, smtpSrvrTotalMsgsSubmitted=smtpSrvrTotalMsgsSubmitted, wFPv4OutConnections=wFPv4OutConnections, atInstance=atInstance, msmqosOutgoingHTTPMessages=msmqosOutgoingHTTPMessages, npsacpBadAuthenticatorsPerSec=npsacpBadAuthenticatorsPerSec, faxsMinutesSending=faxsMinutesSending, nntpSrvrCurrentAnonymousUsers=nntpSrvrCurrentAnonymousUsers, rsvpSvcFailedQoSSends=rsvpSvcFailedQoSSends, securitySystemWideStatistics=securitySystemWideStatistics, ipSecIKEv4=ipSecIKEv4, ipV4DatagramsRcvdDiscarded=ipV4DatagramsRcvdDiscarded, ipsa4MainModeNegotiationsPerSec=ipsa4MainModeNegotiationsPerSec, ipsi6SuccessMainModeNegotiations=ipsi6SuccessMainModeNegotiations, rasPortEntry=rasPortEntry, msmqSvcMSMQOutgoingMessages=msmqSvcMSMQOutgoingMessages, iasAccountingClientsEntry=iasAccountingClientsEntry, msmqsIncomingBytes=msmqsIncomingBytes, pSchedFlowPktsTransmittedPerSec=pSchedFlowPktsTransmittedPerSec, fileReplicaSetTable=fileReplicaSetTable, faxsBytesReceived=faxsBytesReceived, smtpSrvrCatAddrLookups=smtpSrvrCatAddrLookups, tssPoolNonpagedBytes=tssPoolNonpagedBytes, tssProtocolSvScrnBtmpCachReads=tssProtocolSvScrnBtmpCachReads, dnsUDPQueryReceived=dnsUDPQueryReceived, snsdInstance=snsdInstance, smtpSrvrCatAddrLookupCmplt=smtpSrvrCatAddrLookupCmplt, systemPercentRegistryQuotaInUse=systemPercentRegistryQuotaInUse, smtpSrvrInboundConnsTotal=smtpSrvrInboundConnsTotal, wsTotalOtherRqstMethods=wsTotalOtherRqstMethods, ipxDatagramBytesSentPerSec=ipxDatagramBytesSentPerSec, snfsBytesWritten=snfsBytesWritten, ipsa6QuickModeNegotiationsPerSec=ipsa6QuickModeNegotiationsPerSec, processPoolPagedBytes=processPoolPagedBytes, wFPv4ActiveInConnections=wFPv4ActiveInConnections, aspTransactionsPending=aspTransactionsPending, nceInstance=nceInstance, smo3CallsNotAuthorizedPerSec=smo3CallsNotAuthorizedPerSec, tssProtocolBitmapCacheHits=tssProtocolBitmapCacheHits, wmppTotalLateReads=wmppTotalLateReads, ntdsABSearchesPerSec=ntdsABSearchesPerSec, netBEUIExpirationsAck=netBEUIExpirationsAck, adbiInstance=adbiInstance, wwfWorkflowsCompleted=wwfWorkflowsCompleted, joProcessCountActive=joProcessCountActive, dsDSPercentReadsOther=dsDSPercentReadsOther, ncrInstance=ncrInstance, adnAppl1CacheTotalEntries=adnAppl1CacheTotalEntries, browserMissedMailslotDatagrams=browserMissedMailslotDatagrams, adnAppl1RequestsSucceeded=adnAppl1RequestsSucceeded, dtcb3FaultsReceivedCountPerSec=dtcb3FaultsReceivedCountPerSec, npsausDuplicateAccessRequests=npsausDuplicateAccessRequests, wmppPeakOutDistConnections=wmppPeakOutDistConnections, iusServerResetTime=iusServerResetTime, memoryTranFaultsPerSec=memoryTranFaultsPerSec, caRequestProcessingTimeMs=caRequestProcessingTimeMs, ipsa6SuccessQuickModeNegotPerSec=ipsa6SuccessQuickModeNegotPerSec, dotNETCLRInteropEntry=dotNETCLRInteropEntry, objectsEvents=objectsEvents, nntpSrvrControlMessagesReceived=nntpSrvrControlMessagesReceived, memoryStbyCacheNormPriorityBytes=memoryStbyCacheNormPriorityBytes, tssTotalWdBytes=tssTotalWdBytes, dsDRAOutCmpBtwSitesAftCmpPerSec=dsDRAOutCmpBtwSitesAftCmpPerSec, ncsNumLinkTimeChecks=ncsNumLinkTimeChecks, cachePinReadsPerSec=cachePinReadsPerSec, sgFilterObjects=sgFilterObjects, npsaccNoRecord=npsaccNoRecord, netBIOSFrameBytesReSentPerSec=netBIOSFrameBytesReSentPerSec, netBEUIFrameBytesPerSec=netBEUIFrameBytesPerSec, ntdsSAMPasswordChangesPerSec=ntdsSAMPasswordChangesPerSec, dfsrfRDCCompressSizeOfFilesRcvd=dfsrfRDCCompressSizeOfFilesRcvd, wsrmProcessTable=wsrmProcessTable, ntdsDRAInboundPropFilteredPerSec=ntdsDRAInboundPropFilteredPerSec, nntpCmdsStatCmdsPerSec=nntpCmdsStatCmdsPerSec, wmusActiveUDPStreams=wmusActiveUDPStreams, netBIOSWindowSendMaximum=netBIOSWindowSendMaximum, nwLinkNetBIOSTable=nwLinkNetBIOSTable, rasTotalBufferOverrunErrors=rasTotalBufferOverrunErrors, ntdsDRAInboundObjsAppliedPerSec=ntdsDRAInboundObjsAppliedPerSec, dfsrsvInstance=dfsrsvInstance, snfsV211Rename=snfsV211Rename, iisGlobalCurFilesCached=iisGlobalCurFilesCached, rsvpIfPATHStateBlockTimeouts=rsvpIfPATHStateBlockTimeouts, npsrausAccessRejects=npsrausAccessRejects, pop3SvcMailboxesInAuthState=pop3SvcMailboxesInAuthState, adbiLogWritesPerSec=adbiLogWritesPerSec, nwPacketBurstReadTimeoutsPerSec=nwPacketBurstReadTimeoutsPerSec, usbHostControllerIdle=usbHostControllerIdle, tssTotalProtocolCacheHits=tssTotalProtocolCacheHits, tssInputErrors=tssInputErrors, pSchedFlowMaximumPktsInNetcard=pSchedFlowMaximumPktsInNetcard, serverContextBlocksQueuedPerSec=serverContextBlocksQueuedPerSec, spxWindowSendAverage=spxWindowSendAverage, hrasSuccessCertificationRequests=hrasSuccessCertificationRequests, iupRequestTimeoutsPerSec=iupRequestTimeoutsPerSec, rpcpsInstance=rpcpsInstance, adnRequestsCurrent=adnRequestsCurrent, rpcpAttemptLoadBalDecisionPerSec=rpcpAttemptLoadBalDecisionPerSec, ipV4=ipV4, caInstance=caInstance, idxSvcTotalNumDocuments=idxSvcTotalNumDocuments, sswsActiveSChannelSessionCache=sswsActiveSChannelSessionCache, npsrausPacketsReceivedPerSec=npsrausPacketsReceivedPerSec, ncmGen0HeapSize=ncmGen0HeapSize, frsCommunicationTimeouts=frsCommunicationTimeouts, siL0MergeFlushSpeedLast=siL0MergeFlushSpeedLast, processWorkingSet=processWorkingSet, cacheSyncCopyReadsPerSec=cacheSyncCopyReadsPerSec, ipsi6FailedMainModeNegotPerSec=ipsi6FailedMainModeNegotPerSec, nntpCmdsIHaveCmds=nntpCmdsIHaveCmds, adnssSessionsAbandoned=adnssSessionsAbandoned, icpAccountingRequestsPerSec=icpAccountingRequestsPerSec, ntdsATQOutstandingQueuedRequests=ntdsATQOutstandingQueuedRequests, frsDSPollsWithChgs=frsDSPollsWithChgs, iucAccessChallenges=iucAccessChallenges, wmusUDPResendRequests=wmusUDPResendRequests, sswsKDCASRequests=sswsKDCASRequests, dfsrfConflictSpaceInUse=dfsrfConflictSpaceInUse, wsrmpmcTargetManagedCPUPercent=wsrmpmcTargetManagedCPUPercent, appleTalkEntry=appleTalkEntry, ipsi4MainModeNegotiationRqstRcvd=ipsi4MainModeNegotiationRqstRcvd, w3svcCurrentFilesCached=w3svcCurrentFilesCached, spxConnectionSessionTimeouts=spxConnectionSessionTimeouts, memoryStbyCacheReserveMBytes=memoryStbyCacheReserveMBytes, netBIOSConnectionsCanceled=netBIOSConnectionsCanceled, winsSrvrUniqueRegsPerSec=winsSrvrUniqueRegsPerSec, ipsa6SuccExtendedModeNegotiation=ipsa6SuccExtendedModeNegotiation, npsaucAccessRequests=npsaucAccessRequests, serverPoolNonpagedMBytesPeak=serverPoolNonpagedMBytesPeak, httpsugAllRequests=httpsugAllRequests, vschdGPUContext=vschdGPUContext, threadPercentProcessorTime=threadPercentProcessorTime, npsaupUnknownTypePerSec=npsaupUnknownTypePerSec, pDiskDiskReadsPerSec=pDiskDiskReadsPerSec, ipsi6PendingMainModeNegotiations=ipsi6PendingMainModeNegotiations, siMasterMergesToDate=siMasterMergesToDate, uddicGetchangeRecords=uddicGetchangeRecords, memoryTransPagesRePurposedPerSec=memoryTransPagesRePurposedPerSec, tssProtocolBitmapCacheHitRatio=tssProtocolBitmapCacheHitRatio, giaipSuccessfulNegotiations=giaipSuccessfulNegotiations, rasPortFramesTransmittedPerSec=rasPortFramesTransmittedPerSec, nbtConnectionInstance=nbtConnectionInstance, icpInvalidAddressesPerSec=icpInvalidAddressesPerSec, smtpSrvrCatLDAPConns=smtpSrvrCatLDAPConns, dsDSPercentReadsFromKCC=dsDSPercentReadsFromKCC, siL6MergesNow=siL6MergesNow, lDiskDiskBytesPerSec=lDiskDiskBytesPerSec, adnAppl1ErrorsTotalPerSec=adnAppl1ErrorsTotalPerSec, ipV4FragmentedDatagramsPerSec=ipV4FragmentedDatagramsPerSec, sgpDocumentModifiesRate=sgpDocumentModifiesRate, snfsPendingDRCPackets=snfsPendingDRCPackets, tssTotalWaitForOutBuf=tssTotalWaitForOutBuf, ipsdPacketsNotAuthenticated=ipsdPacketsNotAuthenticated, ftpSvcTotalFilesSent=ftpSvcTotalFilesSent, iusAccessChallenges=iusAccessChallenges, adnAppl1TransactionsPerSec=adnAppl1TransactionsPerSec, udpV6DatagramsSentPerSec=udpV6DatagramsSentPerSec, siWorkItemsDeleted=siWorkItemsDeleted, icpPacketsReceivedPerSec=icpPacketsReceivedPerSec, iasAuthenticationClientsTable=iasAuthenticationClientsTable, snfsAnonymousAccesses=snfsAnonymousAccesses, redirFileReadOperationsPerSec=redirFileReadOperationsPerSec, netlogonInstance=netlogonInstance, nwFileReadOperationsPerSec=nwFileReadOperationsPerSec, smsh3DispatchFailuresOverNetPipe=smsh3DispatchFailuresOverNetPipe, adnApplRequestsTotal=adnApplRequestsTotal, redirPacketsPerSec=redirPacketsPerSec, npsaccAccountingRequests=npsaccAccountingRequests)
mibBuilder.exportSymbols("INFORMANT-ADV", npsaupAccessRequestsPerSec=npsaupAccessRequestsPerSec, iccNoRecord=iccNoRecord, giaipIKEMainModeNegotiationTime=giaipIKEMainModeNegotiationTime, ncjInstance=ncjInstance, mfsCurrentThreads=mfsCurrentThreads, netBIOSFrameBytesPerSec=netBIOSFrameBytesPerSec, wsCurrentNonAnonymousUsers=wsCurrentNonAnonymousUsers, memoryModifiedPageListMBytes=memoryModifiedPageListMBytes, iusDroppedPackets=iusDroppedPackets, rsvpIfInstance=rsvpIfInstance, adnAppl2SessionStateSvrConnTotal=adnAppl2SessionStateSvrConnTotal, spxFailuresResourceRemote=spxFailuresResourceRemote, joInstance=joInstance, sgpAccessedFiles=sgpAccessedFiles, ipV4DatagramsPerSec=ipV4DatagramsPerSec, tcpV6ConnectionsActive=tcpV6ConnectionsActive, joThisPeriodMSecUserMode=joThisPeriodMSecUserMode, redirCurrentCommands=redirCurrentCommands, icmpV4SentSourceQuench=icmpV4SentSourceQuench, rsvpSvcNetworkInterfaces=rsvpSvcNetworkInterfaces, tcpV4ConnectionsReset=tcpV4ConnectionsReset, wFPv6AllowedClassifiesPerSec=wFPv6AllowedClassifiesPerSec, sswsSSLClientSideFullHandshakes=sswsSSLClientSideFullHandshakes, pagingFileInstance=pagingFileInstance, dfsReplicationServiceVolumeEntry=dfsReplicationServiceVolumeEntry, npsrausQuarantineDecisions=npsrausQuarantineDecisions, snsdOpenMessageBodies=snsdOpenMessageBodies, uddicGetbindingDetail=uddicGetbindingDetail, smsh3ConnsDispatchedOverNetPipe=smsh3ConnsDispatchedOverNetPipe, memoryStbyCacheNormPriorityMByte=memoryStbyCacheNormPriorityMByte, nclTotalClassesLoaded=nclTotalClassesLoaded, dsLDAPWritesPerSec=dsLDAPWritesPerSec, dsSAMUserCreationAttemptsPerSec=dsSAMUserCreationAttemptsPerSec, sme3ReliableMessagesDropped=sme3ReliableMessagesDropped, dsDRAInPropertiesAppliedPerSec=dsDRAInPropertiesAppliedPerSec, aspRequestsRejected=aspRequestsRejected, spxInstance=spxInstance, wasW3WPEntry=wasW3WPEntry, snfsTotalRPCRepliesReceived=snfsTotalRPCRepliesReceived, wsOtherRqstMethodsPerSec=wsOtherRqstMethodsPerSec, cacheMDLReadsPerSec=cacheMDLReadsPerSec, iupMalformedPackets=iupMalformedPackets, tcpV6ConnectionsEstablished=tcpV6ConnectionsEstablished, caRetrievalProcessingTimeMs=caRetrievalProcessingTimeMs, ftpSvcCurrentNonAnonymousUsers=ftpSvcCurrentNonAnonymousUsers, aspDotNETApplicationsTable=aspDotNETApplicationsTable, adnApplCompilationsTotal=adnApplCompilationsTotal, adnApplErrorsUnhandledExecPerSec=adnApplErrorsUnhandledExecPerSec, ftpSvcTotalAnonymousUsers=ftpSvcTotalAnonymousUsers, dnsTotalQueryReceivedPerSec=dnsTotalQueryReceivedPerSec, adnApplCacheAPIEntries=adnApplCacheAPIEntries, netBEUIDatagramBytesSentPerSec=netBEUIDatagramBytesSentPerSec, wmppCurFileReadRateKbps=wmppCurFileReadRateKbps, wmppPeakStreamingPlayers=wmppPeakStreamingPlayers, iccUnknownTypePerSec=iccUnknownTypePerSec, wsInstance=wsInstance, npsaupBadAuthenticatorsPerSec=npsaupBadAuthenticatorsPerSec, adnApplOutputCacheEntries=adnApplOutputCacheEntries, smtpSrvrCatLDAPSrchsCmpltd=smtpSrvrCatLDAPSrchsCmpltd, wsCurrentCGIRqsts=wsCurrentCGIRqsts, dnsDynamicUpdateReceived=dnsDynamicUpdateReceived, nntpSrvrTotalPushFeeds=nntpSrvrTotalPushFeeds, npsacsPacketsReceivedPerSec=npsacsPacketsReceivedPerSec, ipV4DatagramsRcvdAddressErrors=ipV4DatagramsRcvdAddressErrors, tssTotalBytes=tssTotalBytes, w3svcTotalFlushedMetadata=w3svcTotalFlushedMetadata, npsacsAccountingRequestsPerSec=npsacsAccountingRequestsPerSec, adnApplCacheTotalMisses=adnApplCacheTotalMisses, wscTotalFlushedMetadata=wscTotalFlushedMetadata, adbIODatabaseWritesPerSec=adbIODatabaseWritesPerSec, irusMalformedPacketsPerSec=irusMalformedPacketsPerSec, pagingFilePercentUsage=pagingFilePercentUsage, lDiskPercentDiskTime=lDiskPercentDiskTime, netBEUIFramesPerSec=netBEUIFramesPerSec, threadInstance=threadInstance, snfsMV304UnmountAll=snfsMV304UnmountAll, tssInputWaitForOutBuf=tssInputWaitForOutBuf, iucBadAuthenticators=iucBadAuthenticators, lDiskAvgDiskQueueLength=lDiskAvgDiskQueueLength, smtpServerTable=smtpServerTable, adnAppl2RequestsTimedOut=adnAppl2RequestsTimedOut, memoryPagesPerSec=memoryPagesPerSec, wasInstance=wasInstance, pSchedPipeAvgPacketsInNetcard=pSchedPipeAvgPacketsInNetcard, adbiTableOpenCacheMissesPerSec=adbiTableOpenCacheMissesPerSec, dsDSPercentSearchesFromDRA=dsDSPercentSearchesFromDRA, netBEUIFrameBytesReceivedPerSec=netBEUIFrameBytesReceivedPerSec, ntdsDSPercentReadsFromNSPI=ntdsDSPercentReadsFromNSPI, icmpV6ReceivedParameterProblem=icmpV6ReceivedParameterProblem, netBIOSFrameBytesReceivedPerSec=netBIOSFrameBytesReceivedPerSec, adn2WorkerProcessesRunning=adn2WorkerProcessesRunning, icmpV4RcvdTimestampPerSec=icmpV4RcvdTimestampPerSec, npsausUnknownType=npsausUnknownType, npsrausBadAuthenticators=npsrausBadAuthenticators, wscMetadataCacheHitsPercent=wscMetadataCacheHitsPercent, ipxInstance=ipxInstance, redirServerSessionsHung=redirServerSessionsHung, smtpSrvrInboundConnsCurrent=smtpSrvrInboundConnsCurrent, frcInstance=frcInstance, nntpCommandsTable=nntpCommandsTable, bnuPercentIGDFree=bnuPercentIGDFree, rasTotalFramesTransmittedPerSec=rasTotalFramesTransmittedPerSec, pSchedPipeMaxPacketsInSequencer=pSchedPipeMaxPacketsInSequencer, cacheReadAheadsPerSec=cacheReadAheadsPerSec, aspTemplateNotifications=aspTemplateNotifications, rpcpCurrentNumberOfUniqueUsers=rpcpCurrentNumberOfUniqueUsers, serverFilesOpenedTotal=serverFilesOpenedTotal, dsSAMMachineCreationAttpsPerSec=dsSAMMachineCreationAttpsPerSec, w3svcRequestsPerSec=w3svcRequestsPerSec, redirReadBytesNetworkPerSec=redirReadBytesNetworkPerSec, npsaucQuarantineDecisions=npsaucQuarantineDecisions, ipSecAuthIPv4=ipSecAuthIPv4, adbIODatabaseReadsAverageLatency=adbIODatabaseReadsAverageLatency, udditGetregisteredInfo=udditGetregisteredInfo, smtpSrvrInstance=smtpSrvrInstance, smtpSrvrMsgsPendingRoute=smtpSrvrMsgsPendingRoute, threadTable=threadTable, npsaccPacketsSent=npsaccPacketsSent, serverPoolPagedFailures=serverPoolPagedFailures, icmpV4=icmpV4, wsBytesReceivedPerSec=wsBytesReceivedPerSec, wsTotalPostRqsts=wsTotalPostRqsts, dsDSPercentReadsFromLSA=dsDSPercentReadsFromLSA, w3svcMetadataCacheMissesPerSec=w3svcMetadataCacheMissesPerSec, browserMailslotWritesFailed=browserMailslotWritesFailed, nntpCmdsLogonAttempts=nntpCmdsLogonAttempts, ntdsDRAInboundValuesTotalPerSec=ntdsDRAInboundValuesTotalPerSec, nntpSrvrArticlesPosted=nntpSrvrArticlesPosted, snsdMessagesAllocated=snsdMessagesAllocated, npsacpUnknownTypePerSec=npsacpUnknownTypePerSec, icmpV6ReceivedTimeExceeded=icmpV6ReceivedTimeExceeded, pSchedFlowNonconfPktsXmitd=pSchedFlowNonconfPktsXmitd, tssOutputTimeouts=tssOutputTimeouts, npsrausRetransmissionsPerSec=npsrausRetransmissionsPerSec, hcapcPostureValidationRequests=hcapcPostureValidationRequests, udditDoping=udditDoping, faxsTotalFaxesSentAndReceived=faxsTotalFaxesSentAndReceived, snfsRPCCallPacketsCreated=snfsRPCCallPacketsCreated, udditSetpublisherAssertions=udditSetpublisherAssertions, smtpSrvrCatCatsCmpltd=smtpSrvrCatCatsCmpltd, npsacsBadAuthenticatorsPerSec=npsacsBadAuthenticatorsPerSec, smtpSrvrTotalDSNFail=smtpSrvrTotalDSNFail, npsracsBadAuthenticatorsPerSec=npsracsBadAuthenticatorsPerSec, sme3ReliableMessagesDropPerSec=sme3ReliableMessagesDropPerSec, frsRemoteChgOrdersRetried=frsRemoteChgOrdersRetried, sme3TransactionsFlowedPerSecond=sme3TransactionsFlowedPerSecond, iusMalformedPackets=iusMalformedPackets, adbiVersionBucketsAllocated=adbiVersionBucketsAllocated, siDirtyWidSets=siDirtyWidSets, idxSvcInstance=idxSvcInstance, dsLDAPUDPOperationsPerSec=dsLDAPUDPOperationsPerSec, w3svcTotalFilesCached=w3svcTotalFilesCached, frsLocalChgOrdersPropagated=frsLocalChgOrdersPropagated, nntpSrvrControlMessagesFailed=nntpSrvrControlMessagesFailed, processIOWriteBytesPerSec=processIOWriteBytesPerSec, icpBadAuthenticatorsPerSec=icpBadAuthenticatorsPerSec, netBEUIConnectionsNoRetries=netBEUIConnectionsNoRetries, adbiTableOpenCacheHitsPerSec=adbiTableOpenCacheHitsPerSec, httpsrqRejectedRequests=httpsrqRejectedRequests, netBIOSFrameBytesRejectedPerSec=netBIOSFrameBytesRejectedPerSec, idxSvcMergeProgress=idxSvcMergeProgress, siL3MergesNow=siL3MergesNow, serverServerSessions=serverServerSessions, wsProppatchRqstsPerSec=wsProppatchRqstsPerSec, irusAccessChallenges=irusAccessChallenges, adn1StateServerSessionsTimedOut=adn1StateServerSessionsTimedOut, snfsV212Link=snfsV212Link, dsDRAInCmpBtwSitesAfterCmpPerSec=dsDRAInCmpBtwSitesAfterCmpPerSec, netBIOSDisconnectsLocal=netBIOSDisconnectsLocal, processCreatingProcessID=processCreatingProcessID, adnAppl2RequestEventsRaisePerSec=adnAppl2RequestEventsRaisePerSec, npsaucAccessRejects=npsaucAccessRejects, dsDRAPendingReplicationOperation=dsDRAPendingReplicationOperation, ncrChannels=ncrChannels, aspTemplatesCached=aspTemplatesCached, amaInstance=amaInstance, wscMetadataCacheMisses=wscMetadataCacheMisses, icsAccountingRequestsPerSec=icsAccountingRequestsPerSec, smtpSrvrBytesTotalPerSec=smtpSrvrBytesTotalPerSec, memoryCacheMBytesPeak=memoryCacheMBytesPeak, ipxFrameBytesPerSec=ipxFrameBytesPerSec, httpsugInstance=httpsugInstance, udditGetbusinessDetail=udditGetbusinessDetail, pDiskPercentDiskReadTime=pDiskPercentDiskReadTime, msmqitIncomingHTTPMessages=msmqitIncomingHTTPMessages, frcInboundChangeOrdersDampened=frcInboundChangeOrdersDampened, wwfWorkflowsSuspendedPerSec=wwfWorkflowsSuspendedPerSec, httpServiceTotalFlushedUris=httpServiceTotalFlushedUris, ipsa6MainModeNegotiationsPerSec=ipsa6MainModeNegotiationsPerSec, acsPerRsvpServiceEntry=acsPerRsvpServiceEntry, memoryCacheBytesPeak=memoryCacheBytesPeak, adbLogBytesWritePerSec=adbLogBytesWritePerSec, pSchedFlowMaxPktsInSequencer=pSchedFlowMaxPktsInSequencer, adnAppl2EventsRaised=adnAppl2EventsRaised, tssTotalTransportErrors=tssTotalTransportErrors, sms3QueuedMessagesDroppedPerSec=sms3QueuedMessagesDroppedPerSec, ncsPercentTimeSigAuthenticating=ncsPercentTimeSigAuthenticating, smtpSrvrCatLDAPConnFail=smtpSrvrCatLDAPConnFail, adnAppl2ReqErrorEventRaisePerSec=adnAppl2ReqErrorEventRaisePerSec, icpUnknownTypePerSec=icpUnknownTypePerSec, ipsi6FailedQuickModeNegotPerSec=ipsi6FailedQuickModeNegotPerSec, wmppTotalStreamTerminations=wmppTotalStreamTerminations, ncmNumOfSinkBlocksInUse=ncmNumOfSinkBlocksInUse, wmusAggregateSendRate=wmusAggregateSendRate, tssOutputCompressionRatio=tssOutputCompressionRatio, frcAuthentications=frcAuthentications, iucPacketsReceivedPerSec=iucPacketsReceivedPerSec, nntpSrvrCurrentOutboundConns=nntpSrvrCurrentOutboundConns, nntpSrvrTotalNonAnonymousUsers=nntpSrvrTotalNonAnonymousUsers, npsshvShvLastRoundTripTime=npsshvShvLastRoundTripTime, printQueueMaxReferences=printQueueMaxReferences, wmppTotalConnectedPlayers=wmppTotalConnectedPlayers, wFPv6InPacketsDiscardedPerSec=wFPv6InPacketsDiscardedPerSec, dsPhantomsVisitedPerSec=dsPhantomsVisitedPerSec, ipsa4FailQuickModeNegPerSec=ipsa4FailQuickModeNegPerSec, dnsRecordFlowMemory=dnsRecordFlowMemory, adnAppl2ApplLifetimeEvents=adnAppl2ApplLifetimeEvents, sgStemmersCached=sgStemmersCached, npsacpMalformedPackets=npsacpMalformedPackets, w3svcFileCacheHits=w3svcFileCacheHits, printQueueJobErrors=printQueueJobErrors, adbiPagesConverted=adbiPagesConverted, dsDRASyncRequestsMade=dsDRASyncRequestsMade, tssThreadCount=tssThreadCount, adnAppl1TransactionsTotal=adnAppl1TransactionsTotal, icsUnknownType=icsUnknownType, iucAccessRejectsPerSec=iucAccessRejectsPerSec, nntpServerEntry=nntpServerEntry, netBIOSConnectionsWithRetries=netBIOSConnectionsWithRetries, npsaucUnknownType=npsaucUnknownType, npsrausRetransmissions=npsrausRetransmissions, sms3TransactionsFlowed=sms3TransactionsFlowed, siPersistentIndexesL8=siPersistentIndexesL8, ncrRemoteCallsPerSec=ncrRemoteCallsPerSec, adbtcInstance=adbtcInstance, snfsV314Rename=snfsV314Rename, memoryPageWritesPerSec=memoryPageWritesPerSec, netBEUIFramesReceivedPerSec=netBEUIFramesReceivedPerSec, frsPacketsReceived=frsPacketsReceived, w3svcURICacheHits=w3svcURICacheHits, tssPoolPagedBytes=tssPoolPagedBytes, adbIPerODatabaseWritesPerSec=adbIPerODatabaseWritesPerSec, udditGetbusinessDetailExt=udditGetbusinessDetailExt, adnAppl1AnonymousRequestsPerSec=adnAppl1AnonymousRequestsPerSec, dsSAMPasswordChangesPerSec=dsSAMPasswordChangesPerSec, sgPerformanceLevel=sgPerformanceLevel, adnAppl1OutputCacheHits=adnAppl1OutputCacheHits, nntpCmdsSearchCmdsPerSec=nntpCmdsSearchCmdsPerSec, wsCurrentAnonymousUsers=wsCurrentAnonymousUsers, wsTotalTraceRqsts=wsTotalTraceRqsts, frsBytesOfStagingFetched=frsBytesOfStagingFetched, npsshvShvServerCommFailures=npsshvShvServerCommFailures, iucAccessRequestsPerSec=iucAccessRequestsPerSec, sgpProcessedDocuments=sgpProcessedDocuments)
mibBuilder.exportSymbols("INFORMANT-ADV", usbInterruptBytesPerSec=usbInterruptBytesPerSec, faxService=faxService, snfsBytesReadPerSec=snfsBytesReadPerSec, frsFetchBlocksReceivedInBytes=frsFetchBlocksReceivedInBytes, adnAppl1RequestBytesInTotal=adnAppl1RequestBytesInTotal, dnsWINSResponseSent=dnsWINSResponseSent, iscsiSessionDigestErrors=iscsiSessionDigestErrors, spxFrameBytesSentPerSec=spxFrameBytesSentPerSec, spxFailuresResourceLocal=spxFailuresResourceLocal, adn1StateServerSessionsTotal=adn1StateServerSessionsTotal, ncmNumGCHandles=ncmNumGCHandles, smtpSrvrCatRcptsBeforeCat=smtpSrvrCatRcptsBeforeCat, tssInputBytes=tssInputBytes, sgpChangedDocuments=sgpChangedDocuments, adnRequestsDisconnected=adnRequestsDisconnected, nwPacketBurstReadNCPCountPerSec=nwPacketBurstReadNCPCountPerSec, joTotalMSecKernelMode=joTotalMSecKernelMode, ncdSQLClntCurNumPoolConns=ncdSQLClntCurNumPoolConns, processWorkingSetKPrivate=processWorkingSetKPrivate, adbIOLogWritesPerSec=adbIOLogWritesPerSec, uddiAPICounts=uddiAPICounts, udditGetpublisherAssertions=udditGetpublisherAssertions, npsAccountingClientsTable=npsAccountingClientsTable, siQueriesFailed=siQueriesFailed, ntdsDSPercentSearchesFromXDS=ntdsDSPercentSearchesFromXDS, serverFileDirectorySearches=serverFileDirectorySearches, snfsV304Access=snfsV304Access, nntpSrvrTotalOutboundConnsFailed=nntpSrvrTotalOutboundConnsFailed, smtpSrvrCatLDAPBinds=smtpSrvrCatLDAPBinds, ntdsDRAInboundBytesNotCWSPerSec=ntdsDRAInboundBytesNotCWSPerSec, dhcpSrvAcksPerSec=dhcpSrvAcksPerSec, sppsInstance=sppsInstance, iccBadAuthenticators=iccBadAuthenticators, ntdsSAMAccountGroupMemEvalPerSec=ntdsSAMAccountGroupMemEvalPerSec, adnAppl2CacheTotalMisses=adnAppl2CacheTotalMisses, smtpSrvrCatLDAPPageSrchCmpltFail=smtpSrvrCatLDAPPageSrchCmpltFail, npsracsPendingRequests=npsracsPendingRequests, adnAppl2CacheTotalTrims=adnAppl2CacheTotalTrims, adbDatabaseCacheSize=adbDatabaseCacheSize, npsausProbationDecisions=npsausProbationDecisions, snfsMV101Mount=snfsMV101Mount, irusAccessChallengesPerSec=irusAccessChallengesPerSec, is4iTotalQuickModeSAs=is4iTotalQuickModeSAs, serverLogonPerSec=serverLogonPerSec, tsInactiveSessions=tsInactiveSessions, adnApplViewstateMACValidFailure=adnApplViewstateMACValidFailure, wwfWorkflowsIdlePerSec=wwfWorkflowsIdlePerSec, smtpSrvrCatCatsFailSinkRetryErr=smtpSrvrCatCatsFailSinkRetryErr, adn2ErrorEventsRaised=adn2ErrorEventsRaised, wscFileCacheHits=wscFileCacheHits, sme3CallsNotAuthorizedPerSecond=sme3CallsNotAuthorizedPerSecond, atATPRecvdReleasePerSec=atATPRecvdReleasePerSec, dotNETCLRInteropTable=dotNETCLRInteropTable, is4dTotalPktsNotDecrypted=is4dTotalPktsNotDecrypted, mfsMaximumThreads=mfsMaximumThreads, smsh3ConnsAcceptedOverNetPipe=smsh3ConnsAcceptedOverNetPipe, frsReplicaSetsRemoved=frsReplicaSetsRemoved, iccMalformedPackets=iccMalformedPackets, frsBindings=frsBindings, serverSessionsTimedOut=serverSessionsTimedOut, sgpDocumentsOnHold=sgpDocumentsOnHold, ntdsNTLMBindsPerSec=ntdsNTLMBindsPerSec, memoryCommittedMBytes=memoryCommittedMBytes, ipsa6FailedMainModeNegotiations=ipsa6FailedMainModeNegotiations, dnsUDPResponseSentPerSec=dnsUDPResponseSentPerSec, rsvpIfBlockedRESVs=rsvpIfBlockedRESVs, dsLinkValuesCleanedPerSec=dsLinkValuesCleanedPerSec, snfsMV100NULLMount=snfsMV100NULLMount, npsracsUnknownTypePerSec=npsracsUnknownTypePerSec, npsrausPortNumber=npsrausPortNumber, wsTotalRejectedAsyncIORqsts=wsTotalRejectedAsyncIORqsts, rpcPerHTTPProxyPerServerTable=rpcPerHTTPProxyPerServerTable, adnAppl1CacheAPIMisses=adnAppl1CacheAPIMisses, rasPortTotalErrorsPerSec=rasPortTotalErrorsPerSec, adnAppl2CacheAPIEntries=adnAppl2CacheAPIEntries, redirReadBytesCachePerSec=redirReadBytesCachePerSec, dnsWINSResponseSentPerSec=dnsWINSResponseSentPerSec, npsshvInstance=npsshvInstance, nwServerSessions=nwServerSessions, spxDatagramsPerSec=spxDatagramsPerSec, iisGlobalMaxFileCacheMemUsage=iisGlobalMaxFileCacheMemUsage, dtcCommittedTransactionsPerSec=dtcCommittedTransactionsPerSec, ntdsDSPercentSearchesOther=ntdsDSPercentSearchesOther, rasPortPercentCompressionOut=rasPortPercentCompressionOut, ipsa4PendingMainModeNegotiations=ipsa4PendingMainModeNegotiations, swqReadOperationsPerSec=swqReadOperationsPerSec, msmqMessagesInQueue=msmqMessagesInQueue, npspeMatchRemoteAccPolicyPerSec=npspeMatchRemoteAccPolicyPerSec, adnApplErrorEventsRaisedPerSec=adnApplErrorEventsRaisedPerSec, pSchedPipeInstance=pSchedPipeInstance, frsFilesInstalledWithError=frsFilesInstalledWithError, serverPoolPagedMBytesPeak=serverPoolPagedMBytesPeak, netBEUIConnectionsCanceled=netBEUIConnectionsCanceled, sgpDelayedDocuments=sgpDelayedDocuments, logicalDiskEntry=logicalDiskEntry, sgpDocumentAddRate=sgpDocumentAddRate, spxFailuresNotFound=spxFailuresNotFound, dsDSPercentWritesFromKCC=dsDSPercentWritesFromKCC, nclPercentTimeLoading=nclPercentTimeLoading, swqWorkItemShortages=swqWorkItemShortages, wFPv4OutPacketsDiscardedPerSec=wFPv4OutPacketsDiscardedPerSec, npsAccountingProxy=npsAccountingProxy, wsAnonymousUsersPerSec=wsAnonymousUsersPerSec, searchIndexerEntry=searchIndexerEntry, fileReplicaSetEntry=fileReplicaSetEntry, spxFrameBytesRejectedPerSec=spxFrameBytesRejectedPerSec, smtpSrvrCurrentMsgsInLocalDlvry=smtpSrvrCurrentMsgsInLocalDlvry, wmusPluginEvents=wmusPluginEvents, telephonyActiveTelephones=telephonyActiveTelephones, smtpSrvrAvgRcpntsPerMsgSent=smtpSrvrAvgRcpntsPerMsgSent, wFPv6OutConnectionsAllowedPerSec=wFPv6OutConnectionsAllowedPerSec, npspePendingRequests=npspePendingRequests, memoryTranPagesRePurposedPerSec=memoryTranPagesRePurposedPerSec, wasHealthPingReplyLatency=wasHealthPingReplyLatency, rasPortBufferOverrunErrors=rasPortBufferOverrunErrors, processPercentPrivilegedTime=processPercentPrivilegedTime, dotNETCLRSecurityTable=dotNETCLRSecurityTable, cacheSyncMDLReadsPerSec=cacheSyncMDLReadsPerSec, icpAccountingResponses=icpAccountingResponses, iisGlobalTotalBLOBsCached=iisGlobalTotalBLOBsCached, usbHostControllerPerdiodicIdle=usbHostControllerPerdiodicIdle, rpcpFailLoadBalDecisionsPerSec=rpcpFailLoadBalDecisionsPerSec, sgDocumentsDelayedRetry=sgDocumentsDelayedRetry, npsaucPacketsReceivedPerSec=npsaucPacketsReceivedPerSec, dhcpSrvInformsPerSec=dhcpSrvInformsPerSec, iucAccessChallengesPerSec=iucAccessChallengesPerSec, nntpCmdsIHaveCmdsPerSec=nntpCmdsIHaveCmdsPerSec, nntpCmdsLastCmds=nntpCmdsLastCmds, iupUnknownType=iupUnknownType, tssInputTransportErrors=tssInputTransportErrors, vschdDMABufferCompletedPerSec=vschdDMABufferCompletedPerSec, tcpV6ConnectionFailures=tcpV6ConnectionFailures, pDiskDiskTransfersPerSec=pDiskDiskTransfersPerSec, ipV6DatagramsPerSec=ipV6DatagramsPerSec, ncmGen1HeapSize=ncmGen1HeapSize, msmqosOutgoingHTTPBytesPerSec=msmqosOutgoingHTTPBytesPerSec, smtpSrvrMsgsSentPerSec=smtpSrvrMsgsSentPerSec, adnAppl1TransactionsCommitted=adnAppl1TransactionsCommitted, netBIOSWindowSendAverage=netBIOSWindowSendAverage, sgpDocumentDeleteRate=sgpDocumentDeleteRate, ipV4DatagramsRcvdDeliveredPerSec=ipV4DatagramsRcvdDeliveredPerSec, adnApplReqErrorEventRaisedPerSec=adnApplReqErrorEventRaisedPerSec, uddiAPITimes=uddiAPITimes, frsRemoteChgOrdersRetriedFetch=frsRemoteChgOrdersRetriedFetch, ntdsDRAInboundBytesCBSACSBoot=ntdsDRAInboundBytesCBSACSBoot, acsPerRsvpSvcRSVPSessions=acsPerRsvpSvcRSVPSessions, wscFileCacheFlushes=wscFileCacheFlushes, wsTotalBlkdAsyncIORqsts=wsTotalBlkdAsyncIORqsts, aspTransactionsTotal=aspTransactionsTotal, frsJoinNotificationsReceived=frsJoinNotificationsReceived, winsSrvrTotalNumRenewalsPerSec=winsSrvrTotalNumRenewalsPerSec, smo3TransactionsFlowedPerSecond=smo3TransactionsFlowedPerSecond, wsTotalProppatchRqsts=wsTotalProppatchRqsts, frsChgOrdersRetriedGenerate=frsChgOrdersRetriedGenerate, systemExceptionDispatchesPerSec=systemExceptionDispatchesPerSec, siWorkItemsCreated=siWorkItemsCreated, adnApplOutputCacheHits=adnApplOutputCacheHits, dnsWINSReverseResponseSentPerSec=dnsWINSReverseResponseSentPerSec, ipsi4SuccessMainModeNegotiations=ipsi4SuccessMainModeNegotiations, npsausDupAccessRequestsPerSec=npsausDupAccessRequestsPerSec, smtpSrvrRemoteQueueLength=smtpSrvrRemoteQueueLength, ntdsDSNameCacheHitRate=ntdsDSNameCacheHitRate, dnsUDPMessageMemory=dnsUDPMessageMemory, ntdsDSPercentReadsFromLSA=ntdsDSPercentReadsFromLSA, udditGetchangeRecords=udditGetchangeRecords, browserEnumerationsDomainPerSec=browserEnumerationsDomainPerSec, dsLDAPSearchesPerSec=dsLDAPSearchesPerSec, sgpFileErrorsRate=sgpFileErrorsRate, rpcpRPCPerHTTPRequestsPerSecond=rpcpRPCPerHTTPRequestsPerSecond, adnApplEventsRaisedPerSec=adnApplEventsRaisedPerSec, netBIOSFramesSentPerSec=netBIOSFramesSentPerSec, smsh3ConnsDispatchedOverNetTcp=smsh3ConnsDispatchedOverNetTcp, wscKernelURICacheHits=wscKernelURICacheHits, iucDroppedPacketsPerSec=iucDroppedPacketsPerSec, iucAccessRequests=iucAccessRequests, is4dTotalTransportBytesReceived=is4dTotalTransportBytesReceived, wsISAPIExtensionRqstsPerSec=wsISAPIExtensionRqstsPerSec, snfsMV302DumpMounts=snfsMV302DumpMounts, npsausFullAccessDecisions=npsausFullAccessDecisions, sgExtNotificationsRate=sgExtNotificationsRate, rsvpIfReceiveMsgsErrorsNoMemory=rsvpIfReceiveMsgsErrorsNoMemory, npsracsRequestTimeoutsPerSec=npsracsRequestTimeoutsPerSec, netBEUIFailuresNotFound=netBEUIFailuresNotFound, dsDRASyncFailsOnSchemaMismatch=dsDRASyncFailsOnSchemaMismatch, dnsAXFRSuccessSent=dnsAXFRSuccessSent, msmqsIncomingMessages=msmqsIncomingMessages, ntdsLDAPWritesPerSec=ntdsLDAPWritesPerSec, ipxDisconnectsLocal=ipxDisconnectsLocal, rasPortBytesReceived=rasPortBytesReceived, winsSrvrUniqueConflictsPerSec=winsSrvrUniqueConflictsPerSec, ntdsDRAPendingReplicationSync=ntdsDRAPendingReplicationSync, w3svcCurrentFileCacheMemoryUsage=w3svcCurrentFileCacheMemoryUsage, tcpV4=tcpV4, memoryCacheFaultsPerSec=memoryCacheFaultsPerSec, ntdsDRAOutboundValuesDNsPerSec=ntdsDRAOutboundValuesDNsPerSec, processPageFileMBytes=processPageFileMBytes, nntpCmdsSearchCmds=nntpCmdsSearchCmds, dfsrcRDCBytesReceived=dfsrcRDCBytesReceived, jodIOReadBytesPerSec=jodIOReadBytesPerSec, dsDSSecurityDescriptorPropEvents=dsDSSecurityDescriptorPropEvents, wFPv6OutPacketsDiscardedPerSec=wFPv6OutPacketsDiscardedPerSec, smtpSrvrMsgsDlvrdPerSec=smtpSrvrMsgsDlvrdPerSec, wsrmpmcWorkingSetMBytes=wsrmpmcWorkingSetMBytes, adbIOLogReadsPerSec=adbIOLogReadsPerSec, icmpV4RcvdTimestampReplyPerSec=icmpV4RcvdTimestampReplyPerSec, tssTotalFrames=tssTotalFrames, tsgSuccessfulConnections=tsgSuccessfulConnections, icsUnknownTypePerSec=icsUnknownTypePerSec, httpsrqArrivalRate=httpsrqArrivalRate, ntdsDRAOutboundPropertiesPerSec=ntdsDRAOutboundPropertiesPerSec, ipsa4MainModeNegotiations=ipsa4MainModeNegotiations, ntdsDSPercentSearchesFromLSA=ntdsDSPercentSearchesFromLSA, wFPv4=wFPv4, wmsTotalOutDistBytesSent=wmsTotalOutDistBytesSent, ntdsDRAInboundObjectsPerSec=ntdsDRAInboundObjectsPerSec, rpcpTotalOutBandwidthBackEndSrvr=rpcpTotalOutBandwidthBackEndSrvr, iasAccountingServer=iasAccountingServer, joCurrentPercentUserModeTime=joCurrentPercentUserModeTime, adnAppl2RequestsRejected=adnAppl2RequestsRejected, snfsRPCReplyPacketsCreated=snfsRPCReplyPacketsCreated, printQueueEntry=printQueueEntry, icmpV4RcvdRedirectPerSec=icmpV4RcvdRedirectPerSec, swqTotalOperationsPerSec=swqTotalOperationsPerSec, joCurrentPercentKernelModeTime=joCurrentPercentKernelModeTime, pSchedPipeOutOfPackets=pSchedPipeOutOfPackets, wsTotalCountFailCALRqstsSSLConns=wsTotalCountFailCALRqstsSSLConns, adnApplRequestBytesOutTotal=adnApplRequestBytesOutTotal, netOutputQueueLength=netOutputQueueLength, wmppTotalPlayerBytesSent=wmppTotalPlayerBytesSent, ipsdPlaintextPacketsReceived=ipsdPlaintextPacketsReceived, ntdsSAMTransitiveMembEvalPerSec=ntdsSAMTransitiveMembEvalPerSec, memoryModifiedPageListKBytes=memoryModifiedPageListKBytes, httpsugCurrentConnections=httpsugCurrentConnections, adnAppl2MembershipAuthFailure=adnAppl2MembershipAuthFailure, smtpSrvrTotalConnErrors=smtpSrvrTotalConnErrors, wmsCurFileReadRateKbps=wmsCurFileReadRateKbps, npsaccUnknownTypePerSec=npsaccUnknownTypePerSec, ircsAccountingRequestsPerSec=ircsAccountingRequestsPerSec, icsNoRecordPerSec=icsNoRecordPerSec, httpsugGetRequests=httpsugGetRequests, icmpV4SentTimestampReplyPerSec=icmpV4SentTimestampReplyPerSec, dsDSPercentWritesFromNSPI=dsDSPercentWritesFromNSPI, netlogonSemaphoreTimeouts=netlogonSemaphoreTimeouts, dotNETCLRRemotingEntry=dotNETCLRRemotingEntry, adbDatabasePageFaultsPerSec=adbDatabasePageFaultsPerSec, snfsV204Lookup=snfsV204Lookup, joThisPeriodMSecProcessor=joThisPeriodMSecProcessor, processPrivateBytes=processPrivateBytes, icmpV4MessagesReceivedPerSec=icmpV4MessagesReceivedPerSec, ntdsDSPercentSearchesFromDRA=ntdsDSPercentSearchesFromDRA, npsrausUnknownType=npsrausUnknownType, siPersistentIndexesL5=siPersistentIndexesL5, adbIPerOLogWritesAverageLatency=adbIPerOLogWritesAverageLatency, winsSrvrSuccessfulQueriesPerSec=winsSrvrSuccessfulQueriesPerSec)
mibBuilder.exportSymbols("INFORMANT-ADV", snfsV301GetAttributes=snfsV301GetAttributes, memoryPoolPagedResidentMBytes=memoryPoolPagedResidentMBytes, adn2RequestExecutionTime=adn2RequestExecutionTime, dfsrfRDCSizeOfFilesReceived=dfsrfRDCSizeOfFilesReceived, npsracsRetransmissions=npsracsRetransmissions, npsacsDupAccountingRequests=npsacsDupAccountingRequests, memoryFreeZeroPageListMBytes=memoryFreeZeroPageListMBytes, aspRequestsNotAuthorized=aspRequestsNotAuthorized, tcpV4ConnectionsPassive=tcpV4ConnectionsPassive, nciInstance=nciInstance, smtpSrvrCatLDAPGeneralCmpltFail=smtpSrvrCatLDAPGeneralCmpltFail, adbPagesConverted=adbPagesConverted, memoryPercentCommittedBytesInUse=memoryPercentCommittedBytesInUse, npsacpBadAuthenticators=npsacpBadAuthenticators, adnAppl2RequestBytesOutTotal=adnAppl2RequestBytesOutTotal, frsAuthentications=frsAuthentications, pSchedPipeMaxPacketsInShaper=pSchedPipeMaxPacketsInShaper, frsLocalChgOrdersRetriedFetch=frsLocalChgOrdersRetriedFetch, rasTotalTimeoutErrors=rasTotalTimeoutErrors, adbIPerOLogWritesPerSec=adbIPerOLogWritesPerSec, giaipPacketsReceivedPerSec=giaipPacketsReceivedPerSec, ircsMalformedPackets=ircsMalformedPackets, rasPortFramesReceived=rasPortFramesReceived, wwfWorkflowsTerminated=wwfWorkflowsTerminated, sms3QueuedPoisonMessages=sms3QueuedPoisonMessages, adn2StateServerSessionsTimedOut=adn2StateServerSessionsTimedOut, wasW3WPTable=wasW3WPTable, iucAccessRejects=iucAccessRejects, uddicValidatecategorization=uddicValidatecategorization, netBEUIFailuresResourceRemote=netBEUIFailuresResourceRemote, netBIOSFailuresNoListen=netBIOSFailuresNoListen, dsDRAInCmpBtwSiteBfrCmpSinceBoot=dsDRAInCmpBtwSiteBfrCmpSinceBoot, wmusAuthorizationsRefused=wmusAuthorizationsRefused, iisGlobalCurBlockAsyncIORequests=iisGlobalCurBlockAsyncIORequests, lDiskInstance=lDiskInstance, npsshvShvNoneFailuresPerSec=npsshvShvNoneFailuresPerSec, aspSessionDuration=aspSessionDuration, snsdOpenMessageStreams=snsdOpenMessageStreams, npsaupDroppedPackets=npsaupDroppedPackets, adnApplInstance=adnApplInstance, siL2MergeSpeedAverage=siL2MergeSpeedAverage, udditDeletebinding=udditDeletebinding, adnAppl1ErrorUnhandledDuringExec=adnAppl1ErrorUnhandledDuringExec, icmpV6ReceivedMembershipReport=icmpV6ReceivedMembershipReport, icmpV6SentDestinationUnreachable=icmpV6SentDestinationUnreachable, ntdsTombstonesVisitedPerSec=ntdsTombstonesVisitedPerSec, siL7MergeSpeedLast=siL7MergeSpeedLast, wasTotalRequestsServed=wasTotalRequestsServed, tssHandleCount=tssHandleCount, swqBytesTransferredPerSec=swqBytesTransferredPerSec, advDatabaseInstancesTable=advDatabaseInstancesTable, w3svcTotalFlushedURIs=w3svcTotalFlushedURIs, frsInboundChgOrdersDampened=frsInboundChgOrdersDampened, frsDSPollsWithoutChgs=frsDSPollsWithoutChgs, spxDisconnectsRemote=spxDisconnectsRemote, npsPolicyEngine=npsPolicyEngine, PYSNMP_MODULE_ID=advanced, wsCurrentCALCountForSSLConns=wsCurrentCALCountForSSLConns, searchGathererProjectsTable=searchGathererProjectsTable, iisGlobalMeasuredAsyncIOBwUsage=iisGlobalMeasuredAsyncIOBwUsage, nclRateOfAppdomains=nclRateOfAppdomains, adnApplOutputCacheMisses=adnApplOutputCacheMisses, dnsIXFRSuccessSent=dnsIXFRSuccessSent, browserEnumerationsServerPerSec=browserEnumerationsServerPerSec, nntpCmdsQuitCmds=nntpCmdsQuitCmds, rsvpIfPATHTEARMsgsSent=rsvpIfPATHTEARMsgsSent, winsServer=winsServer, npsaupRetransmissionsPerSec=npsaupRetransmissionsPerSec, sgFilterProcesses=sgFilterProcesses, swqBytesReceivedPerSec=swqBytesReceivedPerSec, systemFileDataOperationsPerSec=systemFileDataOperationsPerSec, ncdSQLClntTotalNumFailedCommands=ncdSQLClntTotalNumFailedCommands, netBEUIFailuresLink=netBEUIFailuresLink, wsTotalLogonAtmps=wsTotalLogonAtmps, snfsV309MakeDirectory=snfsV309MakeDirectory, ntdsDRAPendReplicationOps=ntdsDRAPendReplicationOps, serverBytesTransmittedPerSec=serverBytesTransmittedPerSec, sgpFileErrors=sgpFileErrors, dhcpSrvMillisecondsPerPacketAvg=dhcpSrvMillisecondsPerPacketAvg, adnAppl2OutputCacheMisses=adnAppl2OutputCacheMisses, redirWritesDeniedPerSec=redirWritesDeniedPerSec, ircsRetransmissionsPerSec=ircsRetransmissionsPerSec, jodPercentPrivilegedTime=jodPercentPrivilegedTime, acsPerRsvpSvcNetworkInterfaces=acsPerRsvpSvcNetworkInterfaces, adnApplTransactionsTotal=adnApplTransactionsTotal, msmqsIncomingBytesPerSec=msmqsIncomingBytesPerSec, frsRemoteChgOrdersIssued=frsRemoteChgOrdersIssued, ipsi4MainModeNegotiationsPerSec=ipsi4MainModeNegotiationsPerSec, npsacsPacketsSentPerSec=npsacsPacketsSentPerSec, npsaucMalformedPacketsPerSec=npsaucMalformedPacketsPerSec, rsvpIfRESVCONFIRMMsgsReceived=rsvpIfRESVCONFIRMMsgsReceived, mfsDataWrittenPerSec=mfsDataWrittenPerSec, sgNotificationsRate=sgNotificationsRate, smtpSrvrBytesRcvdTotal=smtpSrvrBytesRcvdTotal, dsDRAInCmpBtwSiteAftCmpSinceBoot=dsDRAInCmpBtwSiteAftCmpSinceBoot, redirWriteBytesPagingPerSec=redirWriteBytesPagingPerSec, ipsdByteSntInTransportModePerSec=ipsdByteSntInTransportModePerSec, snfsV305ReadLinkV3=snfsV305ReadLinkV3, pop3SvcMailboxesInTranState=pop3SvcMailboxesInTranState, dtcb3CommitRetryCountPerSec=dtcb3CommitRetryCountPerSec, smtpSrvrCatMsgsSubmitted=smtpSrvrCatMsgsSubmitted, npsaucFullAccessDecisionsPerSec=npsaucFullAccessDecisionsPerSec, objectsSections=objectsSections, dtcForceCommittedTransactions=dtcForceCommittedTransactions, ipV4FragmentReassemblyFailures=ipV4FragmentReassemblyFailures, wmppCurStreamingMMSPlayers=wmppCurStreamingMMSPlayers, adnAppl2OutputCacheHits=adnAppl2OutputCacheHits, wmsTotalOutDistConnections=wmsTotalOutDistConnections, ipsa4SuccessMainModeNegotiations=ipsa4SuccessMainModeNegotiations, uddicGetserviceDetail=uddicGetserviceDetail, iccAccountingRequests=iccAccountingRequests, ipxDisconnectsRemote=ipxDisconnectsRemote, snfsTotalMountCallsV3=snfsTotalMountCallsV3, icmpV6ReceivedMembershipQuery=icmpV6ReceivedMembershipQuery, ntdsDRAThreadsGettingNCChanges=ntdsDRAThreadsGettingNCChanges, ntdsDSPercentWritesOther=ntdsDSPercentWritesOther, windowsMediaPublishingPointTable=windowsMediaPublishingPointTable, irusAccessAccepts=irusAccessAccepts, msmqsInstance=msmqsInstance, icpRequestTimeouts=icpRequestTimeouts, dfsrfStagingBytesCleanedUp=dfsrfStagingBytesCleanedUp, siL4MergeSpeedAverage=siL4MergeSpeedAverage, wscKernelURICacheHitsPercent=wscKernelURICacheHitsPercent, npsaupAccessRequests=npsaupAccessRequests, bnuBITSDownloadResponseIntvlMsec=bnuBITSDownloadResponseIntvlMsec, pSchedPipeMaxSimultaneousFlows=pSchedPipeMaxSimultaneousFlows, ntds=ntds, nntpCmdsNewnewsCmdsPerSec=nntpCmdsNewnewsCmdsPerSec, sswsSSLClientSideReconHandshakes=sswsSSLClientSideReconHandshakes, pDiskPercentDiskTime=pDiskPercentDiskTime, dsDRAInTotalUpdRemainInPkt=dsDRAInTotalUpdRemainInPkt, dsDSPercentSearchesFromLSA=dsDSPercentSearchesFromLSA, pDiskPercentDiskWriteTime=pDiskPercentDiskWriteTime, ipsa6MainModeNegotiations=ipsa6MainModeNegotiations, msmqInMulticastSessionEntry=msmqInMulticastSessionEntry, npsaupPendingRequests=npsaupPendingRequests, adnAppl2CacheTotalHitRatio=adnAppl2CacheTotalHitRatio, internetInformationServiceGlobal=internetInformationServiceGlobal, siL8MergeSpeedAverage=siL8MergeSpeedAverage, netBIOSPacketsReceivedPerSec=netBIOSPacketsReceivedPerSec, wsGetRqstsPerSec=wsGetRqstsPerSec, adnAppl1OutputCacheMisses=adnAppl1OutputCacheMisses, rsvpSvcTimers=rsvpSvcTimers, wmppCurStreamingPlayers=wmppCurStreamingPlayers, msmqOutMulticastSessionEntry=msmqOutMulticastSessionEntry, netBIOSExpirationsResponse=netBIOSExpirationsResponse, tssOutputAsyncFrameError=tssOutputAsyncFrameError, mfsMaxNonPagedMemory=mfsMaxNonPagedMemory, smsh3RegActiveForNetTcp=smsh3RegActiveForNetTcp, dsLDAPBindTime=dsLDAPBindTime, wmppTotalOutDistConnections=wmppTotalOutDistConnections, snfsTotalMountCallsV1=snfsTotalMountCallsV1, rsvpIfPATHMsgsSent=rsvpIfPATHMsgsSent, ncltInstance=ncltInstance, smtpSrvrCatAddrLookupsPerSec=smtpSrvrCatAddrLookupsPerSec, browserEnumerationsTotalPerSec=browserEnumerationsTotalPerSec, wmusAuthenticationRequests=wmusAuthenticationRequests, adnStateServerSessionsTotal=adnStateServerSessionsTotal, tssInputAsyncParityError=tssInputAsyncParityError, ntdsNTLMAuthentications=ntdsNTLMAuthentications, sms3CallsNotAuthorized=sms3CallsNotAuthorized, snfsV311MakeNode=snfsV311MakeNode, adbiLogGenCheckpointDepth=adbiLogGenCheckpointDepth, adnApplRequestsNotFound=adnApplRequestsNotFound, ipsa6ExtendedModeSAsUsedImperson=ipsa6ExtendedModeSAsUsedImperson, memoryDemandZeroFaultsPerSec=memoryDemandZeroFaultsPerSec, memoryCommitLimitKBytes=memoryCommitLimitKBytes, mfsCurrentSessions=mfsCurrentSessions, ntdsDSServerNameTranslatePerSec=ntdsDSServerNameTranslatePerSec, npsacsNoRecord=npsacsNoRecord, udpV4DatagramsSentPerSec=udpV4DatagramsSentPerSec, netBEUIFramesSentPerSec=netBEUIFramesSentPerSec, icpRetransmissions=icpRetransmissions, ntdsDSPercentWritesFromLDAP=ntdsDSPercentWritesFromLDAP, iccUnknownType=iccUnknownType, dsDSPercentWritesFromSAM=dsDSPercentWritesFromSAM, siQueriesSucceeded=siQueriesSucceeded, iccPacketsReceived=iccPacketsReceived, smtpSrvrCatLDAPSrchFail=smtpSrvrCatLDAPSrchFail, cacheAsyncMDLReadsPerSec=cacheAsyncMDLReadsPerSec, threadIDThread=threadIDThread, atNBPPacketsPerSec=atNBPPacketsPerSec, rsvpIfPATHMsgsReceived=rsvpIfPATHMsgsReceived, dsABProxyLookupsPerSec=dsABProxyLookupsPerSec, ircsLastRoundTripTime=ircsLastRoundTripTime, atPacketsDropped=atPacketsDropped, ntdsExternalBindsPerSec=ntdsExternalBindsPerSec, processPercentProcessorTime=processPercentProcessorTime, wscCurrentURIsCached=wscCurrentURIsCached, siActiveConnections=siActiveConnections, adnAppl2MembershipAuthSuccess=adnAppl2MembershipAuthSuccess, npsaucQuarantineDecisionsPerSec=npsaucQuarantineDecisionsPerSec, iasAccountingClientsTable=iasAccountingClientsTable, memorySystemDriverTotalBytes=memorySystemDriverTotalBytes, dsDRAOutboundBytesTotalPerSec=dsDRAOutboundBytesTotalPerSec, irusBadAuthenticators=irusBadAuthenticators, wsLockedErrorsPerSec=wsLockedErrorsPerSec, ipsdByteRcvInTransportModePerSec=ipsdByteRcvInTransportModePerSec, icsDroppedPacketsPerSec=icsDroppedPacketsPerSec, threadPercentUserTime=threadPercentUserTime, adn1RequestExecutionTime=adn1RequestExecutionTime, udditDeletetModel=udditDeletetModel, nceNumOfExcepsThrownPerSec=nceNumOfExcepsThrownPerSec, irusAccessAcceptsPerSec=irusAccessAcceptsPerSec, rasTotalBytesTransmittedPerSec=rasTotalBytesTransmittedPerSec, dsDRAPendingReplicationSync=dsDRAPendingReplicationSync, sgpDocumentMoveAndRenameRate=sgpDocumentMoveAndRenameRate, msmqSessionTable=msmqSessionTable, npsrausAccessRequestsPerSec=npsrausAccessRequestsPerSec, spxFramesRejectedPerSec=spxFramesRejectedPerSec, siL0MergeFlushSpeedAverage=siL0MergeFlushSpeedAverage, wsBytesSentPerSec=wsBytesSentPerSec, adnAppl2TransactionsPerSec=adnAppl2TransactionsPerSec, wmsPeakConnectedPlayers=wmsPeakConnectedPlayers, siPersistentIndexesL1=siPersistentIndexesL1, uddicDiscardauthToken=uddicDiscardauthToken, authorizationManagerApplEntry=authorizationManagerApplEntry, memorySystemCodeResidentMBytes=memorySystemCodeResidentMBytes, icsMalformedPackets=icsMalformedPackets, nntpCmdsGroupCmds=nntpCmdsGroupCmds, lDiskCurrentDiskQueueLength=lDiskCurrentDiskQueueLength, sgServersUnavailable=sgServersUnavailable, memoryCommittedKBytes=memoryCommittedKBytes, msmqSvcOutgoingHTTPSessions=msmqSvcOutgoingHTTPSessions, adnAppl2OutputCacheTurnoverRate=adnAppl2OutputCacheTurnoverRate, ncmInstance=ncmInstance, processHandleCount=processHandleCount, pagingFileEntry=pagingFileEntry, dsDRASyncRequestsSuccessful=dsDRASyncRequestsSuccessful, hcapcVersionNegotiationRequests=hcapcVersionNegotiationRequests, sms3Calls=sms3Calls, dsDatabaseDeletesPerSec=dsDatabaseDeletesPerSec, ipsa6FailedQuickModeNegotiations=ipsa6FailedQuickModeNegotiations, netBEUIWindowSendAverage=netBEUIWindowSendAverage, ipsi6QuickModeNegotiations=ipsi6QuickModeNegotiations, dnsNotifySent=dnsNotifySent, systemFileControlOperationPerSec=systemFileControlOperationPerSec, atBytesInPerSec=atBytesInPerSec, netBIOSExpirationsAck=netBIOSExpirationsAck, frcJoins=frcJoins, adnApplCacheAPIMisses=adnApplCacheAPIMisses, printQueueJobs=printQueueJobs, cacheDataFlushPagesPerSec=cacheDataFlushPagesPerSec, wmppTotalStreamErrors=wmppTotalStreamErrors, wsrmplInstance=wsrmplInstance, adnApplErrorsCompilation=adnApplErrorsCompilation, nntpCmdsNewgroupsCmds=nntpCmdsNewgroupsCmds, ntdsABPropertyReadsPerSec=ntdsABPropertyReadsPerSec, npsaupUnknownType=npsaupUnknownType, ipxPacketsReceivedPerSec=ipxPacketsReceivedPerSec, npsaccMalformedPackets=npsaccMalformedPackets, wmusActiveStreams=wmusActiveStreams, rsvpInterfacesTable=rsvpInterfacesTable, nclAssemblySearchLength=nclAssemblySearchLength)
mibBuilder.exportSymbols("INFORMANT-ADV", smtpSrvrETRNMsgsPerSec=smtpSrvrETRNMsgsPerSec, npsaupRequestTimeoutsPerSec=npsaupRequestTimeoutsPerSec, siL6MergeSpeedLast=siL6MergeSpeedLast, wscKernelTotalFlushedURIs=wscKernelTotalFlushedURIs, adnAppl1RequestsInApplQueue=adnAppl1RequestsInApplQueue, mfsDataReadPerSec=mfsDataReadPerSec, wsPropfindRqstsPerSec=wsPropfindRqstsPerSec, sgHeartbeatsRate=sgHeartbeatsRate, ntdsKDCASRequests=ntdsKDCASRequests, dotNETCLRLocksAndThreadsEntry=dotNETCLRLocksAndThreadsEntry, ipxDatagramsReceivedPerSec=ipxDatagramsReceivedPerSec, ntdsDSSecurityDescSubopPerSec=ntdsDSSecurityDescSubopPerSec, smtpSrvrBytesSentPerSec=smtpSrvrBytesSentPerSec, dfsrfDeletedFilesGenerated=dfsrfDeletedFilesGenerated, pSchedPipeFlowModsRejected=pSchedPipeFlowModsRejected, indexingServiceEntry=indexingServiceEntry, tssPrivateBytes=tssPrivateBytes, pop3SvcTotalBytesReceived=pop3SvcTotalBytesReceived, adnAppl2OutputCacheHitRatio=adnAppl2OutputCacheHitRatio, is4iTotalAuthenticationFailures=is4iTotalAuthenticationFailures, frsBytesOfStagingGenerated=frsBytesOfStagingGenerated, nntpCmdsXOverCmdsPerSec=nntpCmdsXOverCmdsPerSec, frsChgOrdersPropagated=frsChgOrdersPropagated, wsrmpmcPageFileMBytes=wsrmpmcPageFileMBytes, iasRemoteAccountingServersTable=iasRemoteAccountingServersTable, aspTransactionsCommitted=aspTransactionsCommitted, cacheLazyWriteFlushesPerSec=cacheLazyWriteFlushesPerSec, winsSrvrGroupRenewalsPerSec=winsSrvrGroupRenewalsPerSec, adnAppl2CacheTotalEntries=adnAppl2CacheTotalEntries, amaTotalNumberOfScopes=amaTotalNumberOfScopes, adbIOLogWritesAverageLatency=adbIOLogWritesAverageLatency, ipsa4FailedMainModeNegotiations=ipsa4FailedMainModeNegotiations, wsMkcolRqstsPerSec=wsMkcolRqstsPerSec, wscOutputCacheTotalHits=wscOutputCacheTotalHits, usbTable=usbTable, redirServerDisconnects=redirServerDisconnects, wsNonAnonymousUsersPerSec=wsNonAnonymousUsersPerSec, adn2RequestWaitTime=adn2RequestWaitTime, ntdsXDSClientSessions=ntdsXDSClientSessions, wmusConnectionRate=wmusConnectionRate, dfsrcTotalBytesReceived=dfsrcTotalBytesReceived, systemSystemCallsPerSec=systemSystemCallsPerSec, icmpV6SentEchoPerSec=icmpV6SentEchoPerSec, adnApplCacheAPIHitRatio=adnApplCacheAPIHitRatio, dotNETCLRJitEntry=dotNETCLRJitEntry, iasAuthenticationProxy=iasAuthenticationProxy, lDiskAvgDiskSecPerTransfer=lDiskAvgDiskSecPerTransfer, pSchedFlowInstance=pSchedFlowInstance, processPrivateMBytes=processPrivateMBytes, is4dTotalPktsNotAuthenticated=is4dTotalPktsNotAuthenticated, smtpSrvrMsgsDlvrdTotal=smtpSrvrMsgsDlvrdTotal, dsDSServerBindsPerSec=dsDSServerBindsPerSec, dnsIXFRRequestSent=dnsIXFRRequestSent, aspDotNETApplicationsV1Entry=aspDotNETApplicationsV1Entry, siL8MergesNow=siL8MergesNow, npsacpDroppedPacketsPerSec=npsacpDroppedPacketsPerSec, sgpDocumentModifies=sgpDocumentModifies, w3svcInstance=w3svcInstance, msmqSvcIPXSessions=msmqSvcIPXSessions, ntdsATQThreadsLDAP=ntdsATQThreadsLDAP, wmssStreams=wmssStreams, siPersistentIndexesL4=siPersistentIndexesL4, lDiskAvgDiskSecPerRead=lDiskAvgDiskSecPerRead, wmusAllocatedBandwidth=wmusAllocatedBandwidth, dtcb3MessageSendFailuresPerSec=dtcb3MessageSendFailuresPerSec, iucUnknownType=iucUnknownType, smtpSrvrOutboundConnsTotal=smtpSrvrOutboundConnsTotal, nntpSrvrModeratedPostingsFailed=nntpSrvrModeratedPostingsFailed, spxPacketsPerSec=spxPacketsPerSec, dfsrsvUSNJournalRecordsRead=dfsrsvUSNJournalRecordsRead, irusInstance=irusInstance, w3svcTotalThreads=w3svcTotalThreads, dsDSPercentReadsFromDRA=dsDSPercentReadsFromDRA, npsaucDroppedPackets=npsaucDroppedPackets, iisGlobalBLOBCacheHitsPercent=iisGlobalBLOBCacheHitsPercent, wmppTotalOutDistBytesSent=wmppTotalOutDistBytesSent, wmppCurOutDistConnections=wmppCurOutDistConnections, memoryPoolNonpagedAllocs=memoryPoolNonpagedAllocs, swqActiveThreads=swqActiveThreads, adn1RequestWaitTime=adn1RequestWaitTime, browserMailslotWritesPerSec=browserMailslotWritesPerSec, sswsDigestAuthentications=sswsDigestAuthentications, ipsdPacketsFailedESPValidation=ipsdPacketsFailedESPValidation, processPageFileBytes=processPageFileBytes, tssVirtualBytesPeak=tssVirtualBytesPeak, npsausMalformedPacketsPerSec=npsausMalformedPacketsPerSec, dotNETCLRJitTable=dotNETCLRJitTable, idxSvcFilesToBeIndexed=idxSvcFilesToBeIndexed, udpV4DatagramsNoPortPerSec=udpV4DatagramsNoPortPerSec, ncmNumGen0Collections=ncmNumGen0Collections, rasTotalBytesReceived=rasTotalBytesReceived, redirWriteOperationsRandomPerSec=redirWriteOperationsRandomPerSec, w3svcTotalHTTPRequestsServed=w3svcTotalHTTPRequestsServed, iSCSIInitiatorInstanceEntry=iSCSIInitiatorInstanceEntry, jodWorkingSetPeak=jodWorkingSetPeak, dsDSDirectoryReadsPerSec=dsDSDirectoryReadsPerSec, frsRemoteChgOrdersRetired=frsRemoteChgOrdersRetired, nntpSrvrMaximumNonAnonymousUsers=nntpSrvrMaximumNonAnonymousUsers, siL1MergeSpeedAverage=siL1MergeSpeedAverage, dsSAMNonTransitiveMembEvalPerSec=dsSAMNonTransitiveMembEvalPerSec, adnssSessionsActive=adnssSessionsActive, redirReadsLargePerSec=redirReadsLargePerSec, ipsa4PendExtendModeNegotiations=ipsa4PendExtendModeNegotiations, npsausPacketsSent=npsausPacketsSent, ipsdPacketsReceivedOverWrongSA=ipsdPacketsReceivedOverWrongSA, wasTotalWASMessagesReceived=wasTotalWASMessagesReceived, wmssControllers=wmssControllers, sgpCrawlsInProgress=sgpCrawlsInProgress, smtpSrvrCatCatsFailRetryError=smtpSrvrCatCatsFailRetryError, dsDRAInCmpBtwSitesBeforCmpPerSec=dsDRAInCmpBtwSitesBeforCmpPerSec, ipxFailuresResourceLocal=ipxFailuresResourceLocal, sgFilterProcessCreated=sgFilterProcessCreated, ncjNumOfMethodsJitted=ncjNumOfMethodsJitted, dsSAMSuccessUserCreationsPerSec=dsSAMSuccessUserCreationsPerSec, redirWriteBytesNonPagingPerSec=redirWriteBytesNonPagingPerSec, iisGlobalTotalFlushedFiles=iisGlobalTotalFlushedFiles, ipsi4QuickModeNegotiations=ipsi4QuickModeNegotiations, wmsCurOutDistAllocBandwidthKbps=wmsCurOutDistAllocBandwidthKbps, sms3TransactedOpsCommit=sms3TransactedOpsCommit, wsTotalDeleteRqsts=wsTotalDeleteRqsts, smtpSrvrBadMailMsgsNoRcpnts=smtpSrvrBadMailMsgsNoRcpnts, caRequestCryptographicSignTimeMs=caRequestCryptographicSignTimeMs, dnsCachingMemory=dnsCachingMemory, ipsi4PendingMainModeNegotiations=ipsi4PendingMainModeNegotiations, tssInputCompressionRatio=tssInputCompressionRatio, adnAppl2ErrorEventsRaised=adnAppl2ErrorEventsRaised, udditDeleteservice=udditDeleteservice, aspErrorsFromASPPreprocessor=aspErrorsFromASPPreprocessor, nntpSrvrHistoryMapEntries=nntpSrvrHistoryMapEntries, adnAppl1TransactionsPending=adnAppl1TransactionsPending, sms3QueuedMessagesRejectedPerSec=sms3QueuedMessagesRejectedPerSec, dtcb3PrepareRetryCountPerSec=dtcb3PrepareRetryCountPerSec, nntpCmdsPostCmds=nntpCmdsPostCmds, frcLocalChangeOrdersSentAtJoin=frcLocalChangeOrdersSentAtJoin, icpMalformedPackets=icpMalformedPackets, mfsMaxPagedMemory=mfsMaxPagedMemory, pDiskDiskWritesPerSec=pDiskDiskWritesPerSec, nntpCmdsArticleCmdsPerSec=nntpCmdsArticleCmdsPerSec, smtpSrvrNDRsGenerated=smtpSrvrNDRsGenerated, dnsAXFRResponseReceived=dnsAXFRResponseReceived, nntpCmdsXPatCmdsPerSec=nntpCmdsXPatCmdsPerSec, iucDuplicateAccessRequestsPerSec=iucDuplicateAccessRequestsPerSec, idxSvcFilterBindingTimeMsec=idxSvcFilterBindingTimeMsec, rasTotal=rasTotal, certificationAuthorityConnTable=certificationAuthorityConnTable, rpcpNumFailBackEndConnAttmPerSec=rpcpNumFailBackEndConnAttmPerSec, ntdsDSPercentWritesFromNTDSAPI=ntdsDSPercentWritesFromNTDSAPI, acsPerRsvpSvcQoSSockets=acsPerRsvpSvcQoSSockets, wmsCurUDPResendsSentRate=wmsCurUDPResendsSentRate, spxFramesReceivedPerSec=spxFramesReceivedPerSec, joProcessCountTotal=joProcessCountTotal, w3svcOutputCacheTotalFlushes=w3svcOutputCacheTotalFlushes, w3svcMetadataCacheHits=w3svcMetadataCacheHits, nclInstance=nclInstance, ntdsABMatchesPerSec=ntdsABMatchesPerSec, netBEUIPacketsSentPerSec=netBEUIPacketsSentPerSec, ntdsDSPercentReadsFromKCC=ntdsDSPercentReadsFromKCC, is4dTotalBytesSentInTunnels=is4dTotalBytesSentInTunnels, winsSrvrFailedQueriesPerSec=winsSrvrFailedQueriesPerSec, wwfWorkflowsPending=wwfWorkflowsPending, npsacsServerResetTime=npsacsServerResetTime, npsrausAccessChallengesPerSec=npsrausAccessChallengesPerSec, siUniqueKeys=siUniqueKeys, terminalServiceGateway=terminalServiceGateway, icpRetransmissionsPerSec=icpRetransmissionsPerSec, threadThreadWaitReason=threadThreadWaitReason, ircsRetransmissions=ircsRetransmissions, dsATQThreadsLDAP=dsATQThreadsLDAP, iucPacketsSent=iucPacketsSent, ipV4DatagramsSentPerSec=ipV4DatagramsSentPerSec, nntpSrvrXoverEntries=nntpSrvrXoverEntries, smo3ValidationAuthFail=smo3ValidationAuthFail, icmpV6ReceivedRouterSolicit=icmpV6ReceivedRouterSolicit, dfsrcRDCSizeOfFilesReceived=dfsrcRDCSizeOfFilesReceived, wmsCurStreamingPlayers=wmsCurStreamingPlayers, npsacsAccountingRequests=npsacsAccountingRequests, nntpSrvrArticlesSent=nntpSrvrArticlesSent, dsDSSearchSubOperationsPerSec=dsDSSearchSubOperationsPerSec, wmsCurStreamingRTSPPlayers=wmsCurStreamingRTSPPlayers, adnAppl2FormsAuthenticationSucc=adnAppl2FormsAuthenticationSucc, dsDSPercentWritesFromLSA=dsDSPercentWritesFromLSA, tssTotalCompressedBytes=tssTotalCompressedBytes, wmusUDPResendsSent=wmusUDPResendsSent, adnAppl2ErrorDuringPreprocessing=adnAppl2ErrorDuringPreprocessing, npsrausAccessAcceptsPerSec=npsrausAccessAcceptsPerSec, dnsTotalResponseSentPerSec=dnsTotalResponseSentPerSec, wmiObjectsHiPerfClasses=wmiObjectsHiPerfClasses, w3svcTotalMetadataCached=w3svcTotalMetadataCached, ipsi6PendingQuickModeNegotiation=ipsi6PendingQuickModeNegotiation, iisGlobalCurBLOBsCached=iisGlobalCurBLOBsCached, memoryPoolPagedResidentKBytes=memoryPoolPagedResidentKBytes, iccDroppedPacketsPerSec=iccDroppedPacketsPerSec, serverBytesTotalPerSec=serverBytesTotalPerSec, ipxDatagramBytesPerSec=ipxDatagramBytesPerSec, ipsa6ActiveMainModeSAs=ipsa6ActiveMainModeSAs, icsAccountingRequests=icsAccountingRequests, npsracsAccountingResponsesPerSec=npsracsAccountingResponsesPerSec, dsDSMonitorListSize=dsDSMonitorListSize, icmpV6SentNeighborSolicit=icmpV6SentNeighborSolicit, hcapCounters=hcapCounters, spxPiggybackAckQueuedPerSec=spxPiggybackAckQueuedPerSec, systemFloatingEmulationsPerSec=systemFloatingEmulationsPerSec, snfsV207WriteCache=snfsV207WriteCache, irusRequestTimeoutsPerSec=irusRequestTimeoutsPerSec, icpInvalidAddresses=icpInvalidAddresses, adnApplEventsRaised=adnApplEventsRaised, wmsCurLateReadRate=wmsCurLateReadRate, npsaucPacketsSentPerSec=npsaucPacketsSentPerSec, memoryCacheMBytes=memoryCacheMBytes, memoryCacheKBytesPeak=memoryCacheKBytesPeak, iccPacketsSent=iccPacketsSent, windowsMediaPublishingPointEntry=windowsMediaPublishingPointEntry, serverErrorsGrantedAccess=serverErrorsGrantedAccess, memoryCacheKBytes=memoryCacheKBytes, sms3Instances=sms3Instances, frcFetchRequestsReceived=frcFetchRequestsReceived, rasTotalPercentCompressionOut=rasTotalPercentCompressionOut, wsrmpmcProcessCount=wsrmpmcProcessCount, iucDroppedPackets=iucDroppedPackets, frsUsnRecordsExamined=frsUsnRecordsExamined, frsUsnRecordsRejected=frsUsnRecordsRejected, ntdsATQRequestLatency=ntdsATQRequestLatency, iupRequestTimeouts=iupRequestTimeouts, netBIOSFramesPerSec=netBIOSFramesPerSec, wFPv4BlockedBinds=wFPv4BlockedBinds, rsvpSvcRSVPSessions=rsvpSvcRSVPSessions, frsDSBindings=frsDSBindings, siMasterIndexLevel=siMasterIndexLevel, dsDSServerNameTranslationsPerSec=dsDSServerNameTranslationsPerSec, smtpSrvrCatCatsFailNonRetryError=smtpSrvrCatCatsFailNonRetryError, sgDelayedDocuments=sgDelayedDocuments, pDiskAvgDiskBytesPerWrite=pDiskAvgDiskBytesPerWrite, snfsV320PathConfiguration=snfsV320PathConfiguration, ntdsDSClientNameTranslatePerSec=ntdsDSClientNameTranslatePerSec, adnApplRequestsFailed=adnApplRequestsFailed, npsacsNoRecordPerSec=npsacsNoRecordPerSec, ipsa6FailMainModeNegotPerSec=ipsa6FailMainModeNegotPerSec, netlogonAverageSemaphoreHoldTime=netlogonAverageSemaphoreHoldTime, ntdsDSPercentSearchesFromNSPI=ntdsDSPercentSearchesFromNSPI, w3svcFileCacheMissesPerSec=w3svcFileCacheMissesPerSec, npsAccountingClientsEntry=npsAccountingClientsEntry, lDiskAvgDiskBytesPerWrite=lDiskAvgDiskBytesPerWrite, telephonyTelephoneDevices=telephonyTelephoneDevices, wwfWorkflowsExecuting=wwfWorkflowsExecuting, smtpSrvrDirDropsPerSec=smtpSrvrDirDropsPerSec, sms3TransactedOpsInDoubtPerSec=sms3TransactedOpsInDoubtPerSec, spxFramesSentPerSec=spxFramesSentPerSec, pSchedFlowAveragePktsInShaper=pSchedFlowAveragePktsInShaper, npsausInvalidRequestsPerSec=npsausInvalidRequestsPerSec, adn2RequestsQueued=adn2RequestsQueued, npsAccountingServer=npsAccountingServer, icmpV4SentAddressMaskReply=icmpV4SentAddressMaskReply, telephonyLines=telephonyLines, rasPortBytesReceivedPerSec=rasPortBytesReceivedPerSec)
mibBuilder.exportSymbols("INFORMANT-ADV", ntdsABBrowsesPerSec=ntdsABBrowsesPerSec, adnAppl1RequestsPerSec=adnAppl1RequestsPerSec, pop3SvcTotalFailedLogons=pop3SvcTotalFailedLogons, redirNetworkErrorsPerSec=redirNetworkErrorsPerSec, adnRequestWaitTime=adnRequestWaitTime, tssPercentProcessorTime=tssPercentProcessorTime, idxSvcWordLists=idxSvcWordLists, tssTotalTimeouts=tssTotalTimeouts, ipsi4SuccessQuickModeNegotiation=ipsi4SuccessQuickModeNegotiation, netBEUIPiggybackAckTimeouts=netBEUIPiggybackAckTimeouts, tssVirtualBytes=tssVirtualBytes, iccPacketsReceivedPerSec=iccPacketsReceivedPerSec, wsrmProcessMatchingCriteriaTable=wsrmProcessMatchingCriteriaTable, cacheAsyncDataMapsPerSec=cacheAsyncDataMapsPerSec, ipsdOffloadedBytesReceivedPerSec=ipsdOffloadedBytesReceivedPerSec, ipxFrameBytesReSentPerSec=ipxFrameBytesReSentPerSec, adnApplApplLifetimeEventsPerSec=adnApplApplLifetimeEventsPerSec, spxFramesReSentPerSec=spxFramesReSentPerSec, dsDRAHighestUSNIssuedHighPart=dsDRAHighestUSNIssuedHighPart, dfsReplicationConnectionsTable=dfsReplicationConnectionsTable, dfsrsvUSNJournalRecordsAccepted=dfsrsvUSNJournalRecordsAccepted, ircsAccountingRequests=ircsAccountingRequests, siL4MergesNow=siL4MergesNow, iisGlobalTotalBlockAsyncIOReqs=iisGlobalTotalBlockAsyncIOReqs, dhcpSrvActiveQueueLength=dhcpSrvActiveQueueLength, usbPercentTotalBWUseIsoTransfers=usbPercentTotalBWUseIsoTransfers, iupBadAuthenticatorsPerSec=iupBadAuthenticatorsPerSec, smtpSrvrCatCatsFailDSConnFail=smtpSrvrCatCatsFailDSConnFail, adnAppl2CacheAPITrims=adnAppl2CacheAPITrims, adnAppl2ErrorEventsRaisedPerSec=adnAppl2ErrorEventsRaisedPerSec, acsPerRsvpSvcFailedQoSSends=acsPerRsvpSvcFailedQoSSends, tssInputWdBytes=tssInputWdBytes, lDiskSplitIOPerSec=lDiskSplitIOPerSec, adnAppl2CacheTotalTurnoverRate=adnAppl2CacheTotalTurnoverRate, snfsV208Write=snfsV208Write, terminalServices=terminalServices, adbiTableOpenCachePercentHit=adbiTableOpenCachePercentHit, frsChgOrdersMorphed=frsChgOrdersMorphed, pSchedPipeFlowsRejected=pSchedPipeFlowsRejected, cacheFastReadNotPossiblesPerSec=cacheFastReadNotPossiblesPerSec, sgExtNotificationsReceived=sgExtNotificationsReceived, is4iTotalMainModeSAs=is4iTotalMainModeSAs, ncmNumGen2Collections=ncmNumGen2Collections, dnsWINSLookupReceived=dnsWINSLookupReceived, netBIOSPiggybackAckQueuedPerSec=netBIOSPiggybackAckQueuedPerSec, printQueueReferences=printQueueReferences, adbLogThreadsWaiting=adbLogThreadsWaiting, faxsBytesSent=faxsBytesSent, pSchedPipeBadPacketsXmited=pSchedPipeBadPacketsXmited, snfsXDRFailures=snfsXDRFailures, cpuPercentC1Time=cpuPercentC1Time, adnAppl1ErrorDuringPreprocessing=adnAppl1ErrorDuringPreprocessing, tssProtocolGlyphCacheReads=tssProtocolGlyphCacheReads, wmusAuthorizationRequests=wmusAuthorizationRequests, dsDRAOutCmpBtwSitesBfrCmpSinceBt=dsDRAOutCmpBtwSitesBfrCmpSinceBt, tssInputWdFrames=tssInputWdFrames, ncsInstance=ncsInstance, tssProtocolSvScrnBtmpCachHtRatio=tssProtocolSvScrnBtmpCachHtRatio, dsDRAInNotCmpWithinSitePerSec=dsDRAInNotCmpWithinSitePerSec, adnApplicationRestarts=adnApplicationRestarts, redirReadsDeniedPerSec=redirReadsDeniedPerSec, serverPoolPagedKBytesPeak=serverPoolPagedKBytesPeak, udpV4DatagramsReceivedErrors=udpV4DatagramsReceivedErrors, frsDSBindingsInError=frsDSBindingsInError, nntpSrvrMaximumAnonymousUsers=nntpSrvrMaximumAnonymousUsers, ntdsDRAOutboundBytesCBSACSBoot=ntdsDRAOutboundBytesCBSACSBoot, pDiskPercentIdleTime=pDiskPercentIdleTime, adbiLogRecordStallsPerSec=adbiLogRecordStallsPerSec, rsvpIfNumOfOutgoingMsgsDropped=rsvpIfNumOfOutgoingMsgsDropped, memoryPagesInputPerSec=memoryPagesInputPerSec, wscTotalFilesCached=wscTotalFilesCached, npsaupFullAccessDecisions=npsaupFullAccessDecisions, pDiskAvgDiskBytesPerTransfer=pDiskAvgDiskBytesPerTransfer, atPacketsInPerSec=atPacketsInPerSec, processPageFileBytesPeak=processPageFileBytesPeak, bitsNetUtilization=bitsNetUtilization, processEntry=processEntry, smtpSrvrCatLDAPPagedSrchFail=smtpSrvrCatLDAPPagedSrchFail, smo3TransactionsFlowed=smo3TransactionsFlowed, siL6MergeSpeedAverage=siL6MergeSpeedAverage, wmppCurStreamErrorRate=wmppCurStreamErrorRate, dsDRAOutboundPropertiesPerSec=dsDRAOutboundPropertiesPerSec, webServiceTable=webServiceTable, iusPacketsReceived=iusPacketsReceived, browserMailslotOpensFailedPerSec=browserMailslotOpensFailedPerSec, browserMailslotReceivesFailed=browserMailslotReceivesFailed, nntpCmdsLogonAttemptsPerSec=nntpCmdsLogonAttemptsPerSec, usbControllerPCIInterruptsPerSec=usbControllerPCIInterruptsPerSec, dnsWINSReverseResponseSent=dnsWINSReverseResponseSent, icsAccountingResponses=icsAccountingResponses, sgFilteringThreads=sgFilteringThreads, irusDroppedPacketsPerSec=irusDroppedPacketsPerSec, frsKBOfStagingSpaceFree=frsKBOfStagingSpaceFree, wscMetadataCacheHits=wscMetadataCacheHits, tssTotalProtocolCacheReads=tssTotalProtocolCacheReads, pSchedPipeAvgPacketsInSequencer=pSchedPipeAvgPacketsInSequencer, dsLDAPActiveThreads=dsLDAPActiveThreads, ipsi4ActiveMainModeSAs=ipsi4ActiveMainModeSAs, netPacketsReceivedErrors=netPacketsReceivedErrors, ipxFramesReSentPerSec=ipxFramesReSentPerSec, ncmGen2HeapSize=ncmGen2HeapSize, dsDRAInValuesTotalPerSec=dsDRAInValuesTotalPerSec, nntpSrvrTotalOutboundConnections=nntpSrvrTotalOutboundConnections, adnAppl2ErrorsDuringExecution=adnAppl2ErrorsDuringExecution, dsTombstonesGarbageCollPerSec=dsTombstonesGarbageCollPerSec, msmqosInstance=msmqosInstance, smsh3UrisRegisteredForNetPipe=smsh3UrisRegisteredForNetPipe, wmppInstance=wmppInstance, ipsa4ExtendedModeNegotiations=ipsa4ExtendedModeNegotiations, swqTotalBytesPerSec=swqTotalBytesPerSec, wmsCurConnectedPlayers=wmsCurConnectedPlayers, processVirtualMBytesPeak=processVirtualMBytesPeak, adbIODatabaseWriteAverageLatency=adbIODatabaseWriteAverageLatency, giaipAuthIPMainModeNegotTime=giaipAuthIPMainModeNegotTime, npsausBadAuthenticators=npsausBadAuthenticators, securityPerProcessStatisticEntry=securityPerProcessStatisticEntry, frsLocalChgOrdersRetriedRename=frsLocalChgOrdersRetriedRename, wsTotalPropfindRqsts=wsTotalPropfindRqsts, wFPv4ActiveOutConnections=wFPv4ActiveOutConnections, smtpSrvrConnErrorsPerSec=smtpSrvrConnErrorsPerSec, adn1RequestsRejected=adn1RequestsRejected, netPacketsReceivedPerSec=netPacketsReceivedPerSec, adnAppl2SessionSQLSvrConnTotal=adnAppl2SessionSQLSvrConnTotal, npsaucDuplicateAccessRequests=npsaucDuplicateAccessRequests, icpDroppedPackets=icpDroppedPackets, redirConnectsCore=redirConnectsCore, wsTotalNotFoundErrors=wsTotalNotFoundErrors, smo3CallsFaulted=smo3CallsFaulted, dsBaseSearchesPerSec=dsBaseSearchesPerSec, npsaupRetransmissions=npsaupRetransmissions, dsDRAInFullSyncObjectsRemaining=dsDRAInFullSyncObjectsRemaining, printQueueTotalPagesPrinted=printQueueTotalPagesPrinted, dotNETCLRSecurityEntry=dotNETCLRSecurityEntry, ntdsDRAInboundPropAppliedPerSec=ntdsDRAInboundPropAppliedPerSec, adnApplRequestsExecuting=adnApplRequestsExecuting, aspDotNETApplicationsV1Table=aspDotNETApplicationsV1Table, pDiskAvgDiskQueueLength=pDiskAvgDiskQueueLength, nwPacketBurstWriteNCPCountPerSec=nwPacketBurstWriteNCPCountPerSec, ncltCurrentQueueLength=ncltCurrentQueueLength, frsChgOrdersRetriedFetch=frsChgOrdersRetriedFetch, dnsDynamicUpdateReceivedPerSec=dnsDynamicUpdateReceivedPerSec, frsPacketsSentInBytes=frsPacketsSentInBytes, siL1MergesNow=siL1MergesNow, spxDatagramBytesReceivedPerSec=spxDatagramBytesReceivedPerSec, dsSAMDomainLocalGrpMemEvalPerSec=dsSAMDomainLocalGrpMemEvalPerSec, wsrmpmcInstance=wsrmpmcInstance, dsDigestBindsPerSec=dsDigestBindsPerSec, pDiskCurrentDiskQueueLength=pDiskCurrentDiskQueueLength, ncjNumOfILBytesJitted=ncjNumOfILBytesJitted, jobObjectEntry=jobObjectEntry, ntdsDSClientBindsPerSec=ntdsDSClientBindsPerSec, faxsMinutesReceiving=faxsMinutesReceiving, adnApplSessionStateSrvrConnTotal=adnApplSessionStateSrvrConnTotal, httpsrqCacheHitRate=httpsrqCacheHitRate, sgpHistoryRecoveryProgress=sgpHistoryRecoveryProgress, sgpWaitingDocuments=sgpWaitingDocuments, sme3CallsFaulted=sme3CallsFaulted, smsh3UrisUnregisteredForNetPipe=smsh3UrisUnregisteredForNetPipe, dnsNotifyReceived=dnsNotifyReceived, ntdsTombstonesGarbageCollPerSec=ntdsTombstonesGarbageCollPerSec, certificationAuthorityTable=certificationAuthorityTable, adnAppl2FormsAuthenticationFail=adnAppl2FormsAuthenticationFail, sgTimeOuts=sgTimeOuts, udditValidatecategorization=udditValidatecategorization, icmpV6SentRedirectPerSec=icmpV6SentRedirectPerSec, jodIODataBytesPerSec=jodIODataBytesPerSec, nceNumOfExcepsThrown=nceNumOfExcepsThrown, nciNumOfStubs=nciNumOfStubs, iusBadAuthenticators=iusBadAuthenticators, msmqQueueEntry=msmqQueueEntry, npsAuthenticationServer=npsAuthenticationServer, msmqOutgoingHTTPSessionTable=msmqOutgoingHTTPSessionTable, lDiskAvgDiskBytesPerRead=lDiskAvgDiskBytesPerRead, ncnDatagramsSent=ncnDatagramsSent, wsTotalMkcolRqsts=wsTotalMkcolRqsts, wFPv4AllowedClassifiesPerSec=wFPv4AllowedClassifiesPerSec, frsDSSearchesInError=frsDSSearchesInError, iupInvalidAddresses=iupInvalidAddresses, atAverageTimePerDDPPacket=atAverageTimePerDDPPacket, processWorkingSetPrivate=processWorkingSetPrivate, sgpURLsInHistory=sgpURLsInHistory, tssTotalProtocolCacheHitRatio=tssTotalProtocolCacheHitRatio, adnAppl2RequestExecutionTime=adnAppl2RequestExecutionTime, ipsa6FailExtendModeNegotiations=ipsa6FailExtendModeNegotiations, snfsMV104UnmountAll=snfsMV104UnmountAll, rasTotalBytesTransmitted=rasTotalBytesTransmitted, adbDatabaseCacheSizeMB=adbDatabaseCacheSizeMB, dfsrfRDCNumberOfFilesReceived=dfsrfRDCNumberOfFilesReceived, ocspscActiveConnections=ocspscActiveConnections, cacheDataMapsPerSec=cacheDataMapsPerSec, is4iQuickModeSAListEntries=is4iQuickModeSAListEntries, jodHandleCount=jodHandleCount, npsacsInvalidRequests=npsacsInvalidRequests, frcPacketsSentInError=frcPacketsSentInError, cacheCopyReadHitsPercent=cacheCopyReadHitsPercent, nntpSrvrArticlesReceived=nntpSrvrArticlesReceived, sgThreadsInPlugIns=sgThreadsInPlugIns, netBEUIResourceUsedMaximum=netBEUIResourceUsedMaximum, iucPacketsReceived=iucPacketsReceived, dfsrfBandwidthSavings=dfsrfBandwidthSavings, adnApplSessionSQLSrvrConnTotal=adnApplSessionSQLSrvrConnTotal, adbDatabasePageEvictionsPerSec=adbDatabasePageEvictionsPerSec, sme3CallsPerSecond=sme3CallsPerSecond, frcFetchBlocksReceived=frcFetchBlocksReceived, wsCurrentBlkdBandwidthBytes=wsCurrentBlkdBandwidthBytes, ipxFramesSentPerSec=ipxFramesSentPerSec, serverForNFS=serverForNFS, ftpSvcMaximumAnonymousUsers=ftpSvcMaximumAnonymousUsers, nceNumOfFinallysPerSec=nceNumOfFinallysPerSec, npsaupFullAccessDecisionsPerSec=npsaupFullAccessDecisionsPerSec, iisGlobalURICacheHitsPercent=iisGlobalURICacheHitsPercent, npspeMatchedRemoteAccessPolicies=npspeMatchedRemoteAccessPolicies, processPageFileKBytesPeak=processPageFileKBytesPeak, wmusActiveLiveUnicastStreams=wmusActiveLiveUnicastStreams, dfsReplicationConnectionsEntry=dfsReplicationConnectionsEntry, siPersistentIndexesL6=siPersistentIndexesL6, redirConnectsLanManager21=redirConnectsLanManager21, memorySystemDriverResidentKBytes=memorySystemDriverResidentKBytes, pop3SvcTotalConnections=pop3SvcTotalConnections, siL4MergeCount=siL4MergeCount, iucUnknownTypePerSec=iucUnknownTypePerSec, netBEUIPiggybackAckQueuedPerSec=netBEUIPiggybackAckQueuedPerSec, adnApplAuditSuccessEventsRaised=adnApplAuditSuccessEventsRaised, adnApplRequestBytesInTotal=adnApplRequestBytesInTotal, serverPoolNonpagedKBytes=serverPoolNonpagedKBytes, aspDebuggingRequests=aspDebuggingRequests, dsDSClientNameTranslationsPerSec=dsDSClientNameTranslationsPerSec, iusInvalidRequests=iusInvalidRequests, ftpSvcCurrentConnections=ftpSvcCurrentConnections, frcPacketsSent=frcPacketsSent, adnssSessionsTotal=adnssSessionsTotal, dsDSPercentWritesFromLDAP=dsDSPercentWritesFromLDAP, is4dTotalSARekeys=is4dTotalSARekeys, serverFilesOpen=serverFilesOpen, adnAppl1CacheTotalTurnoverRate=adnAppl1CacheTotalTurnoverRate, adnAppl2RequestErrorEventsRaised=adnAppl2RequestErrorEventsRaised, npsacsBadAuthenticators=npsacsBadAuthenticators, msmqimsIncomingMulticastMessages=msmqimsIncomingMulticastMessages, ipsi4FailedQuickModeNegotiations=ipsi4FailedQuickModeNegotiations, dtcActiveTransactions=dtcActiveTransactions, memoryPagesOutputPerSec=memoryPagesOutputPerSec, videoSchedulerTable=videoSchedulerTable, npsaupMalformedPacketsPerSec=npsaupMalformedPacketsPerSec, dsDSPercentReadsFromNTDSAPI=dsDSPercentReadsFromNTDSAPI, is4dTotalBadSPIPackets=is4dTotalBadSPIPackets, aspDotNETStateService=aspDotNETStateService, browserAnnouncementsTotalPerSec=browserAnnouncementsTotalPerSec, iasAuthenticationClientsEntry=iasAuthenticationClientsEntry, rasPortInstance=rasPortInstance, frcAuthenticationsInError=frcAuthenticationsInError, smtpSrvrCatLDAPPagedSrchs=smtpSrvrCatLDAPPagedSrchs, sgpSuccessRate=sgpSuccessRate, frsRemoteChgOrdersRetriedGenerat=frsRemoteChgOrdersRetriedGenerat, tbsCounters=tbsCounters)
mibBuilder.exportSymbols("INFORMANT-ADV", sgpRetries=sgpRetries, cacheCopyReadsPerSec=cacheCopyReadsPerSec, iusMalformedPacketsPerSec=iusMalformedPacketsPerSec, serverSessionsLoggedOff=serverSessionsLoggedOff, adbDatabasePageFaultStallsPerSec=adbDatabasePageFaultStallsPerSec, dsDRAInNotCmpWithinSiteSinceBoot=dsDRAInNotCmpWithinSiteSinceBoot, atATPRetriesLocal=atATPRetriesLocal, nntpCmdsModeCmds=nntpCmdsModeCmds, icmpV4RcvdSourceQuench=icmpV4RcvdSourceQuench, iucDuplicateAccessRequests=iucDuplicateAccessRequests, msmqitIncomingHTTPBytesPerSec=msmqitIncomingHTTPBytesPerSec, dfsrfStagingFilesCleanedUp=dfsrfStagingFilesCleanedUp, adnApplErrorEventsRaised=adnApplErrorEventsRaised, netBytesReceivedPerSec=netBytesReceivedPerSec, snfsV200NULL=snfsV200NULL, adnApplSessionsTotal=adnApplSessionsTotal, adbTableOpensPerSec=adbTableOpensPerSec, msmqSvcSessions=msmqSvcSessions, aspRequestsExecuting=aspRequestsExecuting, ntdsFastBindsPerSec=ntdsFastBindsPerSec, npsracsLastRoundTripTime=npsracsLastRoundTripTime, dsDRAHighestUSNCommittedLowPart=dsDRAHighestUSNCommittedLowPart, npsacpRequestTimeoutsPerSec=npsacpRequestTimeoutsPerSec, windowsMediaStationService=windowsMediaStationService, memorySystemCacheResidentBytes=memorySystemCacheResidentBytes, hrasHCEPSuccessfulRequests=hrasHCEPSuccessfulRequests, sgSystemIOTrafficRate=sgSystemIOTrafficRate, netBytesTotalPerSec=netBytesTotalPerSec, memoryPageReadsPerSec=memoryPageReadsPerSec, dsDRAOutboundObjectsPerSec=dsDRAOutboundObjectsPerSec, ntdsSAMEnumerationsPerSec=ntdsSAMEnumerationsPerSec, processVirtualKBytesPeak=processVirtualKBytesPeak, rasTotalBytesReceivedPerSec=rasTotalBytesReceivedPerSec, frcRemoteChangeOrdersReceived=frcRemoteChangeOrdersReceived, w3svcCurrentMetadataCached=w3svcCurrentMetadataCached, icmpV6MessagesReceivedPerSec=icmpV6MessagesReceivedPerSec, hraStatistics=hraStatistics, msmqSvcIPSessions=msmqSvcIPSessions, adnAppl1TransactionsAborted=adnAppl1TransactionsAborted, swqBorrowedWorkItems=swqBorrowedWorkItems, smtpSrvrCatSendersUnresolved=smtpSrvrCatSendersUnresolved, ntdsSAMNonTransMemEvalPerSec=ntdsSAMNonTransMemEvalPerSec, pDiskDiskWriteBytesPerSec=pDiskDiskWriteBytesPerSec, acsPerRsvpSvcFailedQoSRequests=acsPerRsvpSvcFailedQoSRequests, npsausAccessRejects=npsausAccessRejects, dfsrfDeletedSpaceInUse=dfsrfDeletedSpaceInUse, is4dTotalTransportBytesSent=is4dTotalTransportBytesSent, dsLDAPClientSessions=dsLDAPClientSessions, npsshvShvClientComponentFailures=npsshvShvClientComponentFailures, hcapcLastNPSValidationTime=hcapcLastNPSValidationTime, smtpSrvrDNSQueriesPerSec=smtpSrvrDNSQueriesPerSec, irusAccessRejects=irusAccessRejects, adnAppl2RequestsTotal=adnAppl2RequestsTotal, wasTotalMessagesSentToWAS=wasTotalMessagesSentToWAS, dsSAMTransitiveMemberEvalPerSec=dsSAMTransitiveMemberEvalPerSec, sgpFilteredText=sgpFilteredText, siL3MergeSpeedLast=siL3MergeSpeedLast, npsausPacketsReceivedPerSec=npsausPacketsReceivedPerSec, frsJoins=frsJoins, npsaupRequestTimeouts=npsaupRequestTimeouts, npsshvShvNonCompliances=npsshvShvNonCompliances, iisGlobalTotalAllowedAsyncIOReqs=iisGlobalTotalAllowedAsyncIOReqs, ipsa4SuccExtendModeNegotPerSec=ipsa4SuccExtendModeNegotPerSec, memoryPoolNonpagedBytes=memoryPoolNonpagedBytes, browser=browser, faxsFailedFaxesTransmissions=faxsFailedFaxesTransmissions, browserMissedServerAnnouncements=browserMissedServerAnnouncements, icpDroppedPacketsPerSec=icpDroppedPacketsPerSec, netPacketsReceivedUnknown=netPacketsReceivedUnknown, ntdsDRAInboundFullSyncObjsRemain=ntdsDRAInboundFullSyncObjsRemain, redirFileDataOperationsPerSec=redirFileDataOperationsPerSec, wmsCurOutDistConnections=wmsCurOutDistConnections, msmqQueueTable=msmqQueueTable, icsPacketsSent=icsPacketsSent, wscURICacheFlushes=wscURICacheFlushes, spxFailuresNoListen=spxFailuresNoListen, netBEUIDisconnectsRemote=netBEUIDisconnectsRemote, wsLockRqstsPerSec=wsLockRqstsPerSec, ipsa6SuccExtendModeNegotPerSec=ipsa6SuccExtendModeNegotPerSec, ipsa4ActiveExtendedModeSAs=ipsa4ActiveExtendedModeSAs, vschdPercentGPUBusy=vschdPercentGPUBusy, pSchedFlowBytesScheduledPerSec=pSchedFlowBytesScheduledPerSec, ncltNumOfTotalRecognizedThread=ncltNumOfTotalRecognizedThread, cpuC1TransitionsPerSec=cpuC1TransitionsPerSec, adnAppl1AnonymousRequests=adnAppl1AnonymousRequests, smtpSrvrDNSQueriesTotal=smtpSrvrDNSQueriesTotal, siL2MergesNow=siL2MergesNow, uddicGetauthToken=uddicGetauthToken, smo3CallsOutstanding=smo3CallsOutstanding, ipxConnectionsOpen=ipxConnectionsOpen, netBIOSDatagramBytesPerSec=netBIOSDatagramBytesPerSec, pDiskAvgDiskWriteQueueLength=pDiskAvgDiskWriteQueueLength, pDiskDiskBytesPerSec=pDiskDiskBytesPerSec, securityPerProcessStatisticTable=securityPerProcessStatisticTable, npsaupQuarantineDecisions=npsaupQuarantineDecisions, npsausUnknownTypePerSec=npsausUnknownTypePerSec, nntpSrvrArticlesReceivedPerSec=nntpSrvrArticlesReceivedPerSec, ipxFrameBytesReceivedPerSec=ipxFrameBytesReceivedPerSec, jodVirtualBytes=jodVirtualBytes, smtpSrvrMsgsRfsdForAddrObjects=smtpSrvrMsgsRfsdForAddrObjects, sms3QueuedMessagesDropped=sms3QueuedMessagesDropped, ncdSQLClntTotalNumFailedConnects=ncdSQLClntTotalNumFailedConnects, snfsV215RemoveDirectory=snfsV215RemoveDirectory, adnInfrastructErrorEventsRaised=adnInfrastructErrorEventsRaised, icmpV6SentTimeExceeded=icmpV6SentTimeExceeded, snfsDRCSendErrors=snfsDRCSendErrors, ipV6DatagramsRcvdDeliveredPerSec=ipV6DatagramsRcvdDeliveredPerSec, frsStagingFilesGenerated=frsStagingFilesGenerated, adn2StateServerSessionsActive=adn2StateServerSessionsActive, rasTotalFramesTransmitted=rasTotalFramesTransmitted, nwPacketsPerSec=nwPacketsPerSec, npsracsUnknownType=npsracsUnknownType, npsausAccessRequestsPerSec=npsausAccessRequestsPerSec, ipsa4MainModeNegRequestRcvPerSec=ipsa4MainModeNegRequestRcvPerSec, netBEUIFrameBytesReSentPerSec=netBEUIFrameBytesReSentPerSec, ipsi6SuccessMainModeNegotPerSec=ipsi6SuccessMainModeNegotPerSec, icmpV4RcvdDestUnreachable=icmpV4RcvdDestUnreachable, nntpCmdsXHdrCmds=nntpCmdsXHdrCmds, rasPortTimeoutErrors=rasPortTimeoutErrors, uddicSavebinding=uddicSavebinding, adnRequestErrorEventsRaised=adnRequestErrorEventsRaised, iusBadAuthenticatorsPerSec=iusBadAuthenticatorsPerSec, ipsdOffloadedBytesSentPerSec=ipsdOffloadedBytesSentPerSec, winsSrvrGroupRegsPerSec=winsSrvrGroupRegsPerSec, icmpV4MessagesPerSec=icmpV4MessagesPerSec, adnAppl1ErrorsTotal=adnAppl1ErrorsTotal, npsaupDroppedPacketsPerSec=npsaupDroppedPacketsPerSec, ntdsSAMAccountGroupEvalLatency=ntdsSAMAccountGroupEvalLatency, smtpSrvrCatLDAPSrchsPerSec=smtpSrvrCatLDAPSrchsPerSec, systemFileWriteBytesPerSec=systemFileWriteBytesPerSec, wmsCurLateSendRate=wmsCurLateSendRate, adbVersionBucketsAllocated=adbVersionBucketsAllocated, httpServiceUrlGroupsTable=httpServiceUrlGroupsTable, adnAppl1SessionStateSvrConnTotal=adnAppl1SessionStateSvrConnTotal, smtpSrvrAvgRetriesPerMsgSent=smtpSrvrAvgRetriesPerMsgSent, adnApplMembershipAuthFailure=adnApplMembershipAuthFailure, jobObjectDetailsTable=jobObjectDetailsTable, dfsrsvUSNJournalUnreadPercentage=dfsrsvUSNJournalUnreadPercentage, ipSecDriver=ipSecDriver, jodPercentProcessorTime=jodPercentProcessorTime, memorySystemDriverTotalMBytes=memorySystemDriverTotalMBytes, npsacpAccountingResponses=npsacpAccountingResponses, jodIOWriteBytesPerSec=jodIOWriteBytesPerSec, wsCurrentISAPIExtensionRqsts=wsCurrentISAPIExtensionRqsts, ipxPacketsSentPerSec=ipxPacketsSentPerSec, adnAppl2CachePctMachMemLimUsed=adnAppl2CachePctMachMemLimUsed, rasPortBytesTransmittedPerSec=rasPortBytesTransmittedPerSec, netBIOSDatagramBytesSentPerSec=netBIOSDatagramBytesSentPerSec, hrasHCEPRequests=hrasHCEPRequests, sgDocumentsSuccessfullyFiltered=sgDocumentsSuccessfullyFiltered, npsaucPacketsReceived=npsaucPacketsReceived, ncsTotalRuntimeChecks=ncsTotalRuntimeChecks, smtpSrvrOutboundConnsCurrent=smtpSrvrOutboundConnsCurrent, snfsMV301Mount=snfsMV301Mount, dsDRAOutObjectsFilteredPerSec=dsDRAOutObjectsFilteredPerSec, smtpSrvrBadMailMsgsHopCntExceed=smtpSrvrBadMailMsgsHopCntExceed, adbiLogGenLossResiliencyDepth=adbiLogGenLossResiliencyDepth, frsLocalChgOrdersIssued=frsLocalChgOrdersIssued, wscOutputCacheCurrentItems=wscOutputCacheCurrentItems, rpcpAttemptLoadBalBrkRqstsPerSec=rpcpAttemptLoadBalBrkRqstsPerSec, npsrausDroppedPackets=npsrausDroppedPackets, nntpSrvrCurrentNonAnonymousUsers=nntpSrvrCurrentNonAnonymousUsers, swqContextBlocksQueuedPerSec=swqContextBlocksQueuedPerSec, adnApplErrorsTotalPerSec=adnApplErrorsTotalPerSec, frsRemoteChgOrdersMorphed=frsRemoteChgOrdersMorphed, wsHeadRqstsPerSec=wsHeadRqstsPerSec, adbiRecordsConverted=adbiRecordsConverted, rsvpSvcQoSClients=rsvpSvcQoSClients, tsTotalSessions=tsTotalSessions, smtpSrvrCatRcptsNDRdByCategorize=smtpSrvrCatRcptsNDRdByCategorize, ntdsPhantomsVisitedPerSec=ntdsPhantomsVisitedPerSec, uddicSavebusiness=uddicSavebusiness, tssPageFileBytes=tssPageFileBytes, wsTotalCopyRqsts=wsTotalCopyRqsts, ntdsDSPercentReadsFromXDS=ntdsDSPercentReadsFromXDS, jodPercentUserTime=jodPercentUserTime, frsChgOrdersRetried=frsChgOrdersRetried, dotNETCLRLoadingTable=dotNETCLRLoadingTable, rsvpSvcQoSenabledReceivers=rsvpSvcQoSenabledReceivers, systemFileWriteOperationsPerSec=systemFileWriteOperationsPerSec, npsaucDupAccessRequestsPerSec=npsaucDupAccessRequestsPerSec, wscKernelCurrentURIsCached=wscKernelCurrentURIsCached, adnApplOutputCacheTrims=adnApplOutputCacheTrims, serverErrorsSystem=serverErrorsSystem, iusInvalidRequestsPerSec=iusInvalidRequestsPerSec, adnApplRequestEventsRaisedPerSec=adnApplRequestEventsRaisedPerSec, wscOutputCacheCurrentHitsPercent=wscOutputCacheCurrentHitsPercent, ircsMalformedPacketsPerSec=ircsMalformedPacketsPerSec, dsDSPercentSearchesFromNSPI=dsDSPercentSearchesFromNSPI, ntdsDRAInTotalUpdsRemainInPacket=ntdsDRAInTotalUpdsRemainInPacket, ntdsDRAHighestUSNIssuedLowPart=ntdsDRAHighestUSNIssuedLowPart, wmppCurStreamingHTTPPlayers=wmppCurStreamingHTTPPlayers, netBIOSFailuresLink=netBIOSFailuresLink, siL1MergeCount=siL1MergeCount, adbiRecordsConvertedPerSec=adbiRecordsConvertedPerSec, nclTotalAssemblies=nclTotalAssemblies, npsaupBadAuthenticators=npsaupBadAuthenticators, snfsRPCCallsReceivedPerSec=snfsRPCCallsReceivedPerSec, ncrContextBoundObjsAllocPerSec=ncrContextBoundObjsAllocPerSec, siL2MergeSpeedLast=siL2MergeSpeedLast, aspRequestsQueued=aspRequestsQueued, nntpCmdsNextCmdsPerSec=nntpCmdsNextCmdsPerSec, wsTotalMethodRqstsPerSec=wsTotalMethodRqstsPerSec, iusAccessAccepts=iusAccessAccepts, snfsMOUNTErrorsV1=snfsMOUNTErrorsV1, vschdDMABufferSubmittedPerSec=vschdDMABufferSubmittedPerSec, acsPerRsvpSvcQoSEnabledReceivers=acsPerRsvpSvcQoSEnabledReceivers, dfsrfRDCBytesReceived=dfsrfRDCBytesReceived, udditFindrelatedBusinesses=udditFindrelatedBusinesses, printQueueNotReadyErrors=printQueueNotReadyErrors, ipsdSecurityAssociationsAdded=ipsdSecurityAssociationsAdded, memoryPoolNonpagedMBytes=memoryPoolNonpagedMBytes, wsTotalBytesSent=wsTotalBytesSent, rasPortFramesTransmitted=rasPortFramesTransmitted, adbPagesConvertedPerSec=adbPagesConvertedPerSec, uddicDeletepublisherAssertions=uddicDeletepublisherAssertions, udditGetserviceDetail=udditGetserviceDetail, redirReadOperationsRandomPerSec=redirReadOperationsRandomPerSec, npsaucAccessAccepts=npsaucAccessAccepts, nntpCmdsTakethisCmds=nntpCmdsTakethisCmds, iupPacketsReceivedPerSec=iupPacketsReceivedPerSec, smtpSrvrMsgBytesRcvdTotal=smtpSrvrMsgBytesRcvdTotal, smo3ValidationAuthFailPerSec=smo3ValidationAuthFailPerSec, npsacpPacketsReceivedPerSec=npsacpPacketsReceivedPerSec, aspDotNETApplicationsV2Entry=aspDotNETApplicationsV2Entry, threadThreadState=threadThreadState, npsracsDroppedPackets=npsracsDroppedPackets, icmpV4SentEchoPerSec=icmpV4SentEchoPerSec, adnAppl2DebuggingRequests=adnAppl2DebuggingRequests, dsABClientSessions=dsABClientSessions, iusPacketsReceivedPerSec=iusPacketsReceivedPerSec, winsSrvrSuccessfulReleasesPerSec=winsSrvrSuccessfulReleasesPerSec, tbscCurrentResources=tbscCurrentResources, spxDatagramsReceivedPerSec=spxDatagramsReceivedPerSec, smtpSrvrCatCatsFailDSLogonFail=smtpSrvrCatCatsFailDSLogonFail, pSchedFlowPktsScheduled=pSchedFlowPktsScheduled, smtpServerEntry=smtpServerEntry)
