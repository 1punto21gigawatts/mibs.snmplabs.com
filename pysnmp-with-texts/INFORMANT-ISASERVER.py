#
# PySNMP MIB module INFORMANT-ISASERVER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-ISASERVER
# Produced by pysmi-0.3.4 at Wed May  1 13:53:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, IpAddress, Bits, iso, ObjectIdentity, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Integer32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "IpAddress", "Bits", "iso", "ObjectIdentity", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Integer32", "Counter32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
InstanceName, informant = mibBuilder.importSymbols("WTCS", "InstanceName", "informant")
isaServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6))
isaServer.setRevisions(('2007-05-24 22:39', '2006-06-02 01:18', '2004-03-13 06:11',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: isaServer.setRevisionsDescriptions(('Added support for ISA Server 2006.', 'Added support for ISA Server 2004.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: isaServer.setLastUpdated('200705242239Z')
if mibBuilder.loadTexts: isaServer.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: isaServer.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: isaServer.setDescription('The MIB module for SNMP Informant ISAServer performance counter entries.')
h323Filter = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6, 1))
if mibBuilder.loadTexts: h323Filter.setStatus('current')
if mibBuilder.loadTexts: h323Filter.setDescription('The H.323 Firewall Filter object contains the counters for the number of H.323 calls handled by the H.323 Firewall Filter component of ISA Server')
h323FilterActiveH323Calls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323FilterActiveH323Calls.setStatus('current')
if mibBuilder.loadTexts: h323FilterActiveH323Calls.setDescription('The number of H.323 calls that are currently active.')
h323FilterTotalH323Calls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323FilterTotalH323Calls.setStatus('current')
if mibBuilder.loadTexts: h323FilterTotalH323Calls.setDescription('The total number of H.323 calls handled by the H.323 filter since the Firewall Service was started.')
bandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2), )
if mibBuilder.loadTexts: bandwidthControlTable.setStatus('current')
if mibBuilder.loadTexts: bandwidthControlTable.setDescription("A table containing performance information for instances of 'ISA Server Bandwidth Control' objects.")
bandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1), ).setIndexNames((0, "INFORMANT-ISASERVER", "bwCtrlInstance"))
if mibBuilder.loadTexts: bandwidthControlEntry.setStatus('current')
if mibBuilder.loadTexts: bandwidthControlEntry.setDescription("Performance information for one particular instance of 'ISA Server Bandwidth Control' object.")
bwCtrlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCtrlInstance.setStatus('current')
if mibBuilder.loadTexts: bwCtrlInstance.setDescription('Instance name.')
bwCtrlActualInboundBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCtrlActualInboundBandwidth.setStatus('current')
if mibBuilder.loadTexts: bwCtrlActualInboundBandwidth.setDescription('Measures the actual inbound bandwidth [bytes/seconds].')
bwCtrlActualOutboundBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCtrlActualOutboundBandwidth.setStatus('current')
if mibBuilder.loadTexts: bwCtrlActualOutboundBandwidth.setDescription('Measures the actual outbound bandwidth [bytes/seconds].')
bwCtrlAssignedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCtrlAssignedConnections.setStatus('current')
if mibBuilder.loadTexts: bwCtrlAssignedConnections.setDescription('Counts the number of connections with an assigned bandwidth priority.')
bwCtrlAssignedInboundBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCtrlAssignedInboundBandwidth.setStatus('current')
if mibBuilder.loadTexts: bwCtrlAssignedInboundBandwidth.setDescription('Retrieves the assigned inbound bandwidth [bytes/seconds].')
bwCtrlAssignedOutboundBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 6, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCtrlAssignedOutboundBandwidth.setStatus('current')
if mibBuilder.loadTexts: bwCtrlAssignedOutboundBandwidth.setDescription('Retrieves the assigned outbound bandwidth [bytes/seconds].')
cache = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3))
if mibBuilder.loadTexts: cache.setStatus('current')
if mibBuilder.loadTexts: cache.setDescription('The ISA Server Cache object type includes counters specific to the cache.')
cacheActiveRefreshKBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheActiveRefreshKBPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheActiveRefreshKBPerSec.setDescription('The rate at which bytes of data are retrieved from the Internet to actively refresh popular URLs in the cache.')
cacheActiveRefreshURLPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheActiveRefreshURLPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheActiveRefreshURLPerSec.setDescription('The rate at which popular URLs in the cache are actively refreshed from the Internet.')
cacheDiskRetrievedKBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDiskRetrievedKBPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDiskRetrievedKBPerSec.setDescription('The rate at which kilobytes of data are retrieved from the disk cache.')
cacheDiskCacheAllocatedSpaceKB = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDiskCacheAllocatedSpaceKB.setStatus('current')
if mibBuilder.loadTexts: cacheDiskCacheAllocatedSpaceKB.setDescription('The amount of space used for the disk cache (from the total disk space allocated for disk caching).')
cacheDiskContentWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDiskContentWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDiskContentWritesPerSec.setDescription('The amount of writes to the disk cache, per second.')
cacheDiskFailPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDiskFailPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDiskFailPerSec.setDescription('The number of I/O failures per second. An I/O failure occurs when ISA Server fails to read from or write to disk cache.')
cacheDiskRetrieveURLPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDiskRetrieveURLPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheDiskRetrieveURLPerSec.setDescription('The rate at which URLs are retrieved from the disk cache.')
cacheMaxURLsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxURLsCached.setStatus('current')
if mibBuilder.loadTexts: cacheMaxURLsCached.setDescription('The maximum number of URLs that have been stored in the cache.')
cacheMemoryRetrievedKBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemoryRetrievedKBPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheMemoryRetrievedKBPerSec.setDescription('The rate at which kilobytes of data are retrieved from the memory cache.')
cacheMemoryCacheAllocatedSpaceKB = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemoryCacheAllocatedSpaceKB.setStatus('current')
if mibBuilder.loadTexts: cacheMemoryCacheAllocatedSpaceKB.setDescription('The amount of space being used for the memory cache, from the memory allocated for memory caching.')
cacheMemoryRetrieveURLPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemoryRetrieveURLPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheMemoryRetrieveURLPerSec.setDescription('The rate at which URLs are retrieved from the memory cache.')
cacheMemoryUsageRatioPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemoryUsageRatioPercent.setStatus('current')
if mibBuilder.loadTexts: cacheMemoryUsageRatioPercent.setDescription('The amount of memory cache fetches, in proportion to total cache fetches.')
cacheTotalActivelyRefreshedURLs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalActivelyRefreshedURLs.setStatus('current')
if mibBuilder.loadTexts: cacheTotalActivelyRefreshedURLs.setDescription('The cumulative number of popular URLs in the cache that have been actively refreshed from the Internet.')
cacheTotalBytesActiveRefreshedKB = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalBytesActiveRefreshedKB.setStatus('current')
if mibBuilder.loadTexts: cacheTotalBytesActiveRefreshedKB.setDescription('The total bytes retrieved from the Internet to actively refresh popular URLs in the cache.')
cacheTotalDiskBytesRetrievedKB = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalDiskBytesRetrievedKB.setStatus('current')
if mibBuilder.loadTexts: cacheTotalDiskBytesRetrievedKB.setDescription('The cumulative number of kilobytes retrieved from the disk cache.')
cacheTotalDiskFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalDiskFailures.setStatus('current')
if mibBuilder.loadTexts: cacheTotalDiskFailures.setDescription('The number of times that ISA Server failed to read from or write to disk cache, due to an I/O failure, since the Web Proxy service started.')
cacheTotalDiskURLsRetrieved = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalDiskURLsRetrieved.setStatus('current')
if mibBuilder.loadTexts: cacheTotalDiskURLsRetrieved.setDescription('The cumulative number of URLs retrieved from the disk cache.')
cacheTotalMemoryBytesRetrievedKB = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalMemoryBytesRetrievedKB.setStatus('current')
if mibBuilder.loadTexts: cacheTotalMemoryBytesRetrievedKB.setDescription('The cumulative number of kilobytes retrieved from the memory cache.')
cacheTotalMemoryURLsRetrieved = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalMemoryURLsRetrieved.setStatus('current')
if mibBuilder.loadTexts: cacheTotalMemoryURLsRetrieved.setDescription('The cumulative number of URLs retrieved from the memory cache.')
cacheTotalURLsCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalURLsCached.setStatus('current')
if mibBuilder.loadTexts: cacheTotalURLsCached.setDescription('The cumulative number of URLs that have been stored in the cache.')
cacheURLCommitPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheURLCommitPerSec.setStatus('current')
if mibBuilder.loadTexts: cacheURLCommitPerSec.setDescription('The rate at which URLs are committed to the cache.')
cacheURLsInCache = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 3, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheURLsInCache.setStatus('current')
if mibBuilder.loadTexts: cacheURLsInCache.setDescription('The current number of URLs in the cache.')
firewallService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4))
if mibBuilder.loadTexts: firewallService.setStatus('current')
if mibBuilder.loadTexts: firewallService.setDescription('Microsoft Firewall service performance counters.')
fsAcceptingTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsAcceptingTCPConnections.setStatus('current')
if mibBuilder.loadTexts: fsAcceptingTCPConnections.setDescription('The number of connection objects waiting for a TCP connection from the Firewall client after a successful remote connection.')
fsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: fsActiveSessions.setDescription('The number of active Firewall service sessions.')
fsActiveTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsActiveTCPConnections.setStatus('current')
if mibBuilder.loadTexts: fsActiveTCPConnections.setDescription('The total number of active TCP connections currently passing data. Connections pending or not yet established are counted elsewhere.')
fsActiveUDPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsActiveUDPConnections.setStatus('current')
if mibBuilder.loadTexts: fsActiveUDPConnections.setDescription('The total number of active UDP connections.')
fsAvailableWorkerThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsAvailableWorkerThreads.setStatus('current')
if mibBuilder.loadTexts: fsAvailableWorkerThreads.setDescription('The number of Firewall service worker threads that are available (waiting in completion port queue).')
fsBackConnectingTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsBackConnectingTCPConnections.setStatus('current')
if mibBuilder.loadTexts: fsBackConnectingTCPConnections.setDescription('The total number of TCP connections awaiting an inbound connect call to finish. These are connections from the Firewall service to a Firewall client after the Firewall service accepted a connection from the Internet on a listening socket.')
fsBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: fsBytesReadPerSec.setDescription('Number of bytes read by the data-pump per second.')
fsBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: fsBytesWrittenPerSec.setDescription('Number of bytes written by data-pump per second.')
fsConnectingTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsConnectingTCPConnections.setStatus('current')
if mibBuilder.loadTexts: fsConnectingTCPConnections.setDescription('The total number of TCP connections pending. This is the total number of connections that are waiting for a connect call to finish.')
fsDNSCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDNSCacheEntries.setStatus('current')
if mibBuilder.loadTexts: fsDNSCacheEntries.setDescription('The current number of DNS domain name entries cached by the Firewall service.')
fsDNSCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDNSCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: fsDNSCacheFlushes.setDescription('The total number of times that the DNS domain name cache has been flushed or cleared by the Web Proxy Server.')
fsDNSCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDNSCacheHits.setStatus('current')
if mibBuilder.loadTexts: fsDNSCacheHits.setDescription('The total number of times a DNS domain name was found within the DNS Cache.')
fsDNSCacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDNSCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: fsDNSCacheHitsPercent.setDescription('The percentage of DNS domain names serviced by the DNS cache, out of a total of all DNS entries that have been retrieved by the Firewall service.')
fsDNSRetrievals = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDNSRetrievals.setStatus('current')
if mibBuilder.loadTexts: fsDNSRetrievals.setDescription('The total number of DNS domain names that have been retrieved by the Firewall service.')
fsFailedDNSResolutions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFailedDNSResolutions.setStatus('current')
if mibBuilder.loadTexts: fsFailedDNSResolutions.setDescription('Number of gethostbyname and gethostbyaddr API calls that have failed. These are calls used to resolve host DNS domain names and IP addresses for Firewall service connections.')
fsKernelModeDataPumps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsKernelModeDataPumps.setStatus('current')
if mibBuilder.loadTexts: fsKernelModeDataPumps.setDescription('The number of kernel mode data pumps created by the Firewall service.')
fsListeningTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsListeningTCPConnections.setStatus('current')
if mibBuilder.loadTexts: fsListeningTCPConnections.setDescription('The number of connection objects waiting for TCP connections from remote Internet computers (after a successful listen).')
fsNonConnectedUDPMappings = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsNonConnectedUDPMappings.setStatus('current')
if mibBuilder.loadTexts: fsNonConnectedUDPMappings.setDescription('The number of mappings available for UDP connections.')
fsPendingDNSResolutions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsPendingDNSResolutions.setStatus('current')
if mibBuilder.loadTexts: fsPendingDNSResolutions.setDescription('Number of gethostbyname and gethostbyaddr API calls pending resolution. These are calls used to resolve host DNS domain names and IP addresses for Firewall service connections.')
fsSecureNATMappings = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSecureNATMappings.setStatus('current')
if mibBuilder.loadTexts: fsSecureNATMappings.setDescription('The number of mappings created by SecureNAT.')
fsSuccessfulDNSResolutions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSuccessfulDNSResolutions.setStatus('current')
if mibBuilder.loadTexts: fsSuccessfulDNSResolutions.setDescription('Number of gethostbyname and gethostbyaddr API calls successfully returned. These are calls used to resolve host DNS domain names and IP addresses for Firewall service connections.')
fsTCPBytesXferPerSecByKernelMode = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTCPBytesXferPerSecByKernelMode.setStatus('current')
if mibBuilder.loadTexts: fsTCPBytesXferPerSecByKernelMode.setDescription('Number of TCP bytes transferred by the kernel mode data-pump per second.')
fsUDPBytesXferPerSecByKernelMode = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsUDPBytesXferPerSecByKernelMode.setStatus('current')
if mibBuilder.loadTexts: fsUDPBytesXferPerSecByKernelMode.setDescription('Number of UDP bytes transferred by the kernel mode data-pump per second.')
fsWorkerThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsWorkerThreads.setStatus('current')
if mibBuilder.loadTexts: fsWorkerThreads.setDescription('The number of Firewall service worker threads that are currently alive.')
fsAvailableUDPMappings = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsAvailableUDPMappings.setStatus('current')
if mibBuilder.loadTexts: fsAvailableUDPMappings.setDescription('The number of mappings available for UDP connections.')
fsDNSCacheLockFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDNSCacheLockFailures.setStatus('current')
if mibBuilder.loadTexts: fsDNSCacheLockFailures.setDescription('The total number of times that the DNS domain names cache failed locking its internal data structure.')
fsPendingTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsPendingTCPConnections.setStatus('current')
if mibBuilder.loadTexts: fsPendingTCPConnections.setDescription('The total number of pending TCP connections. This is the total number of connections that are waiting for a connect call to finish.')
fsTCPAwaitInConnectCallToFinish = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 4, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTCPAwaitInConnectCallToFinish.setStatus('current')
if mibBuilder.loadTexts: fsTCPAwaitInConnectCallToFinish.setDescription('The total number of TCP connections awaiting an inbound connect call to finish. These are connections from the Firewall Service to a Firewall client after the Firewall Service accepted a connection from the Internet on a listening socket.')
firewallEngine = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5))
if mibBuilder.loadTexts: firewallEngine.setStatus('current')
if mibBuilder.loadTexts: firewallEngine.setDescription('Microsoft Firewall Packet Engine performance counters.')
feActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feActiveConnections.setStatus('current')
if mibBuilder.loadTexts: feActiveConnections.setDescription('The total number of active connections currently passing data.')
feAllowedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAllowedPackets.setStatus('current')
if mibBuilder.loadTexts: feAllowedPackets.setDescription('The total number of allowed packets.')
feAllowedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAllowedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: feAllowedPacketsPerSec.setDescription('The number of allowed packets per second.')
feBackloggedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feBackloggedPackets.setStatus('current')
if mibBuilder.loadTexts: feBackloggedPackets.setDescription('The number of backlogged packets.')
feBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feBytes.setStatus('current')
if mibBuilder.loadTexts: feBytes.setDescription('The total number of bytes passed through the firewall.')
feBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: feBytesPerSec.setDescription('The number of bytes passed through the firewall per second.')
feConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: feConnectionsPerSec.setDescription('The number of newly created connections per second.')
feDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: feDroppedPackets.setDescription('The total number of dropped packets.')
feDroppedPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feDroppedPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: feDroppedPacketsPerSec.setDescription('The number of dropped packets per second.')
fePackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePackets.setStatus('current')
if mibBuilder.loadTexts: fePackets.setDescription('The total number of packets inspected by the firewall.')
fePacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: fePacketsPerSec.setDescription('The number of packets inspected by the firewall per second.')
feTCPEstablishedConnsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTCPEstablishedConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: feTCPEstablishedConnsPerSec.setDescription('The number of newly TCP established connections per second. A TCP connection is counted as established after the 3-way SYN handshake was completed successfully.')
feTCPEstablishedConns = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTCPEstablishedConns.setStatus('current')
if mibBuilder.loadTexts: feTCPEstablishedConns.setDescription('The current number of established TCP connections. A TCP connection is counted as established after the 3-way SYN handshake was completed successfully.')
packetFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 6, 6))
packetsDroppedFilterDenial = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsDroppedFilterDenial.setStatus('current')
if mibBuilder.loadTexts: packetsDroppedFilterDenial.setDescription('The total number of packets dropped because dynamic packet filtering rejected the data.')
packetsDroppedProtocolViolation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsDroppedProtocolViolation.setStatus('current')
if mibBuilder.loadTexts: packetsDroppedProtocolViolation.setDescription('The total of the number of frames dropped because of a protocol irregularity.')
totalDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: totalDroppedPackets.setDescription('The total number of dropped or filtered packets.')
totalLoggingPacketsLost = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalLoggingPacketsLost.setStatus('current')
if mibBuilder.loadTexts: totalLoggingPacketsLost.setDescription('The total of the number of packets dropped that could not be logged.')
totalIncomingConn = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncomingConn.setStatus('current')
if mibBuilder.loadTexts: totalIncomingConn.setDescription('The total number of connections made through the filtered interfaces.')
webProxyService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7))
if mibBuilder.loadTexts: webProxyService.setStatus('current')
if mibBuilder.loadTexts: webProxyService.setDescription('The Web Proxy service object type includes counters specific to the ISA Server Web Proxy service.')
wpsArrayBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsArrayBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsArrayBytesReceivedPerSec.setDescription('The rate at which data bytes are received by the ISA Server from other servers within the same array in response to requests from the Web Proxy filter.')
wpsArrayBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsArrayBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsArrayBytesSentPerSec.setDescription('The rate at which data bytes are sent by the ISA Server to other servers within the same array.')
wpsArrayBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsArrayBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsArrayBytesTotalPerSec.setDescription('The sum of Array Bytes Sent/sec and Bytes Received/sec. This is the total rate for all bytes transferred between the ISA Server and other members of the same array.')
wpsCacheHitRatioPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCacheHitRatioPercent.setStatus('current')
if mibBuilder.loadTexts: wpsCacheHitRatioPercent.setDescription('The percentage of Web Proxy client requests served using cached data, out of the total number of Web Proxy client requests to the ISA Server.')
wpsCacheRunningHitRatioPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCacheRunningHitRatioPercent.setStatus('current')
if mibBuilder.loadTexts: wpsCacheRunningHitRatioPercent.setDescription('The percentage of Web Proxy client requests served using cached data out of the total number of Web Proxy client requests to the ISA Server, for the last 10,000 requests serviced.')
wpsClientBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsClientBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsClientBytesReceivedPerSec.setDescription('The rate at which data bytes are received by the Web Proxy filter from Web Proxy clients.')
wpsClientBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsClientBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsClientBytesSentPerSec.setDescription('The rate at which data bytes are sent by the Web Proxy filter to Web Proxy clients.')
wpsClientBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsClientBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsClientBytesTotalPerSec.setDescription('The sum of Client Bytes Sent/sec and Client Bytes Received/sec. This is the total rate for all bytes transferred between the Web Proxy filter and Web Proxy clients.')
wpsConnectErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsConnectErrors.setStatus('current')
if mibBuilder.loadTexts: wpsConnectErrors.setDescription('The total number of errors that occurred while connecting.')
wpsConnErrsPerTotalErrsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsConnErrsPerTotalErrsPercent.setStatus('current')
if mibBuilder.loadTexts: wpsConnErrsPerTotalErrsPercent.setDescription('The percentage of errors that occurred while connecting as a ratio of the total number of failed requests during the time shown in the duration field.')
wpsCurArrayFetchAvgMSPerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCurArrayFetchAvgMSPerRequest.setStatus('current')
if mibBuilder.loadTexts: wpsCurArrayFetchAvgMSPerRequest.setDescription('The mean number of milliseconds required to service a Web Proxy client request that is fetched through another array member (not including requests serviced by the Secure Sockets Layer tunnel).')
wpsCurAvgMSPerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCurAvgMSPerRequest.setStatus('current')
if mibBuilder.loadTexts: wpsCurAvgMSPerRequest.setDescription('The mean number of milliseconds required to service a Web Proxy client request (not including requests serviced by the Secure Sockets Layer tunnel).')
wpsCurCacheFetchAvgMSPerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCurCacheFetchAvgMSPerRequest.setStatus('current')
if mibBuilder.loadTexts: wpsCurCacheFetchAvgMSPerRequest.setDescription('The mean number of milliseconds required to service a Web Proxy client request from cache (not including tunneled requests for HTTPS or SNEWS).')
wpsCurDirectFetchAvgMSPerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCurDirectFetchAvgMSPerRequest.setStatus('current')
if mibBuilder.loadTexts: wpsCurDirectFetchAvgMSPerRequest.setDescription('The mean number of milliseconds required to service a Web Proxy client request directly to the Web server or upstream proxy (not including tunneled requests for HTTPS or SNEWS).')
wpsCurrentUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCurrentUsers.setStatus('current')
if mibBuilder.loadTexts: wpsCurrentUsers.setDescription('The number of users currently connected to the Web Proxy service.')
wpsDNSCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsDNSCacheEntries.setStatus('current')
if mibBuilder.loadTexts: wpsDNSCacheEntries.setDescription('The current number of DNS domain name entries cached as a result of Web Proxy filter activity.')
wpsDNSCacheFlushes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsDNSCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: wpsDNSCacheFlushes.setDescription('The total number of times that the DNS domain name cache was flushed by the Web Proxy filter.')
wpsDNSCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsDNSCacheHits.setStatus('current')
if mibBuilder.loadTexts: wpsDNSCacheHits.setDescription('The total number of times a DNS domain name was found in the DNS Cache by the Web Proxy filter.')
wpsDNSCacheHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsDNSCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: wpsDNSCacheHitsPercent.setDescription('The percentage of DNS domain names served from the DNS cache, out of a total of all DNS entries retrieved by the Web Proxy filter.')
wpsDNSRetrievals = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsDNSRetrievals.setStatus('current')
if mibBuilder.loadTexts: wpsDNSRetrievals.setDescription('The total number of DNS domain names retrieved by the Web Proxy filter.')
wpsFailRqstsPerTotalRqstsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsPerTotalRqstsPercent.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsPerTotalRqstsPercent.setDescription('The percentage of failing requests out of the total number of requests during the time shown in the duration field.')
wpsFailRqstsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsPerSec.setDescription('The rate per second of requests that have failed because of some type of error.')
wpsFailRqstsFromArrayMbr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsFromArrayMbr.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsFromArrayMbr.setDescription('The total number of requests coming from another array member.')
wpsFailRqstsFromArrayMbrPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsFromArrayMbrPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsFromArrayMbrPerErrs.setDescription('The percentage of requests coming from another array member out of the total number of failed requests.')
wpsFailRqstsToArrayMbr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsToArrayMbr.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsToArrayMbr.setDescription('The total number of requests going to another array member.')
wpsFailRqstsToArrayMbrPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsToArrayMbrPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsToArrayMbrPerErrs.setDescription('The percentage of requests going to another array member out of the total number of failed requests.')
wpsFailRqstsKAToArrayMbr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsKAToArrayMbr.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsKAToArrayMbr.setDescription('The total number of using an existing keep alive connection between the proxy and another array member.')
wpsFailRqstsKAToArrayMbrPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsKAToArrayMbrPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsKAToArrayMbrPerErrs.setDescription('The percentage of using an existing keep alive connection between the proxy and another array member out of the total number of failed requests.')
wpsFailRqstsKAToClient = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsKAToClient.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsKAToClient.setDescription('The total number of requests using an existing keep alive connection between the client and the proxy.')
wpsFailRqstsKAToClientPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsKAToClientPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsKAToClientPerErrs.setDescription('The percentage of requests using an existing keep alive connection between the client and the proxy out of the total number of failed requests.')
wpsFailRqstsKAToServer = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsKAToServer.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsKAToServer.setDescription('The total number of requests using an existing keep alive connection between the proxy and the web server.')
wpsFailRqstsKAToServerPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFailRqstsKAToServerPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsFailRqstsKAToServerPerErrs.setDescription('The percentage of requests using an existing keep alive connection between the proxy and the web server out of the total number of failed requests.')
wpsFtpRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsFtpRequests.setStatus('current')
if mibBuilder.loadTexts: wpsFtpRequests.setDescription('The total number of FTP requests made to ISA Server, since the Firewall service was started.')
wpsHTTPSSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsHTTPSSessions.setStatus('current')
if mibBuilder.loadTexts: wpsHTTPSSessions.setDescription('The total number of HTTP-secured sessions serviced by the Secure Sockets Layer (SSL) tunnel. This includes only sessions allowed by rules configured to use SSL tunneling publishing mode.')
wpsHttpRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsHttpRequests.setStatus('current')
if mibBuilder.loadTexts: wpsHttpRequests.setDescription('The total number of HTTP requests made to ISA Server, since the Firewall service was started.')
wpsIOErrorsToArrayMember = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIOErrorsToArrayMember.setStatus('current')
if mibBuilder.loadTexts: wpsIOErrorsToArrayMember.setDescription('The total number of IO errors that occurred during communication with an array member.')
wpsIOErrorsToArrayMemberPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIOErrorsToArrayMemberPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsIOErrorsToArrayMemberPerErrs.setDescription('The percentage of IO errors that occurred during communication with an array member out of the total number of failed requests during the time shown in the duration field.')
wpsIOErrorsToClient = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIOErrorsToClient.setStatus('current')
if mibBuilder.loadTexts: wpsIOErrorsToClient.setDescription('The total number of IO errors that occurred during communication with the client.')
wpsIOErrorsToClientPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIOErrorsToClientPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsIOErrorsToClientPerErrs.setDescription('The percentage of IO errors that occurred during communication with the client out of the total number of failed requests during the time shown in the duration field.')
wpsIOErrorsToServer = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIOErrorsToServer.setStatus('current')
if mibBuilder.loadTexts: wpsIOErrorsToServer.setDescription('The total number of IO errors that occurred during communication with the server.')
wpsIOErrorsToServerPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIOErrorsToServerPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsIOErrorsToServerPerErrs.setDescription('The percentage of IO errors that occurred during communication with the server out of the total number of failed requests during the time shown in the duration field.')
wpsIncomingConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsIncomingConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsIncomingConnectionsPerSec.setDescription('The rate per second of incoming connections.')
wpsMaximumUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsMaximumUsers.setStatus('current')
if mibBuilder.loadTexts: wpsMaximumUsers.setDescription('The maximum number of users that have connected to the ISA Server computer simultaneously, since the Firewall service was started.')
wpsOutgoingConnectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsOutgoingConnectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsOutgoingConnectionsPerSec.setDescription('The rate per second of outgoing connections.')
wpsRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsRequestsPerSec.setDescription('The rate of requests that have been made to the Web Proxy filter.')
wpsReverseBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsReverseBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsReverseBytesReceivedPerSec.setDescription('The rate at which data bytes are received by the Web Proxy filter from published Web servers in response to incoming Web requests.')
wpsReverseBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsReverseBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsReverseBytesSentPerSec.setDescription('The rate at which data bytes are sent by the Web Proxy filter to published Web servers in response to incoming Web requests.')
wpsReverseBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsReverseBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsReverseBytesTotalPerSec.setDescription('The sum of Reverse Bytes Sent/sec and Reverse Bytes Received/sec. This is the total rate for all bytes transferred between the ISA Server and published Web servers in response to incoming Web requests.')
wpsSNEWSSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsSNEWSSessions.setStatus('current')
if mibBuilder.loadTexts: wpsSNEWSSessions.setDescription('The total number of SNEWS sessions serviced by the Secure Sockets Layer (SSL) tunnel. This includes only sessions allowed by rules configured to use SSL tunneling publishing mode.')
wpsSSLClientBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsSSLClientBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsSSLClientBytesReceivedPerSec.setDescription('The rate at which Secure Sockets Layer (SSL) data bytes are received by the Web Proxy filter from Web Proxy clients over a secure connection.')
wpsSSLClientBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsSSLClientBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsSSLClientBytesSentPerSec.setDescription('The rate at which Secure Sockets Layer (SSL) data bytes are sent by the Web Proxy filter to Web Proxy clients over a secure connection.')
wpsSSLClientBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsSSLClientBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsSSLClientBytesTotalPerSec.setDescription('The sum of SSL Client Bytes Sent/sec and Bytes Received/sec. This is the total rate for all bytes transferred between the Web Proxy filter and Web Proxy clients over a secure connection.')
wpsSitesDenied = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsSitesDenied.setStatus('current')
if mibBuilder.loadTexts: wpsSitesDenied.setDescription('The total number of websites to which the Web Proxy filter denied access.')
wpsSitesGranted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsSitesGranted.setStatus('current')
if mibBuilder.loadTexts: wpsSitesGranted.setDescription('The total number of websites to which the Web Proxy filter allowed access.')
wpsThreadPoolFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsThreadPoolFailures.setStatus('current')
if mibBuilder.loadTexts: wpsThreadPoolFailures.setDescription('The number of requests rejected because the thread pool was overcommitted.')
wpsThreadPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsThreadPoolSize.setStatus('current')
if mibBuilder.loadTexts: wpsThreadPoolSize.setDescription('The number of threads in the thread pool.')
wpsThreadPoolActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsThreadPoolActiveSessions.setStatus('current')
if mibBuilder.loadTexts: wpsThreadPoolActiveSessions.setDescription('The number of sessions actively serviced by thread pool threads.')
wpsTotalArrayFetches = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalArrayFetches.setStatus('current')
if mibBuilder.loadTexts: wpsTotalArrayFetches.setDescription('The total number of Web Proxy client requests that have been serviced by requesting the data from another ISA Server within the array.')
wpsTotalCacheFetches = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalCacheFetches.setStatus('current')
if mibBuilder.loadTexts: wpsTotalCacheFetches.setDescription('The total number of Web Proxy client requests served from the ISA Server cache.')
wpsTotalFailingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalFailingRequests.setStatus('current')
if mibBuilder.loadTexts: wpsTotalFailingRequests.setDescription('The total number of requests that failed to be processed due to errors. Errors can be the result of the Web Proxy filter failing to locate a requested server URL on the Internet or because the Web Proxy client was denied access to the requested URL.')
wpsTotalPendingConnects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalPendingConnects.setStatus('current')
if mibBuilder.loadTexts: wpsTotalPendingConnects.setDescription('The total number of connection requests made, but not yet established.')
wpsTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalRequests.setStatus('current')
if mibBuilder.loadTexts: wpsTotalRequests.setDescription('The total number of requests made to ISA Server, since the Firewall service was started.')
wpsTotalReverseFetches = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalReverseFetches.setStatus('current')
if mibBuilder.loadTexts: wpsTotalReverseFetches.setDescription('The total number of incoming Web requests serviced by retrieving data from published Web servers.')
wpsTotalSSLSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalSSLSessions.setStatus('current')
if mibBuilder.loadTexts: wpsTotalSSLSessions.setDescription('The total number of Secure Sockets Layer (SSL) sessions serviced by the SSL tunnel. This includes only sessions allowed by rules configured to use SSL tunneling publishing mode.')
wpsTotalSuccessfulRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalSuccessfulRequests.setStatus('current')
if mibBuilder.loadTexts: wpsTotalSuccessfulRequests.setDescription('The total number of requests that were successfully processed by the Web Proxy filter.')
wpsTotalUpstreamFetches = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalUpstreamFetches.setStatus('current')
if mibBuilder.loadTexts: wpsTotalUpstreamFetches.setDescription('The total number of requests served by retrieving content from remote servers or from a chained upstream ISA Server computer.')
wpsTotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsTotalUsers.setStatus('current')
if mibBuilder.loadTexts: wpsTotalUsers.setDescription('The total number of users that have ever connected to the ISA Server computer, since the Firewall service was started.')
wpsUnknownSSLSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsUnknownSSLSessions.setStatus('current')
if mibBuilder.loadTexts: wpsUnknownSSLSessions.setDescription('The total number of unknown Secure Sockets Layer (SSL) sessions serviced by the SSL tunnel. This includes only sessions allowed by rules configured to use SSL tunneling publishing mode.')
wpsUpstreamBytesReceivedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsUpstreamBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsUpstreamBytesReceivedPerSec.setDescription('The rate at which data bytes are received by the Web Proxy filter from remote servers or from a chained upstream proxy.')
wpsUpstreamBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsUpstreamBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsUpstreamBytesSentPerSec.setDescription('The rate at which data bytes are sent by the Web Proxy filter to remote servers or to a chained upstream proxy.')
wpsUpstreamBytesTotalPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsUpstreamBytesTotalPerSec.setStatus('current')
if mibBuilder.loadTexts: wpsUpstreamBytesTotalPerSec.setDescription('The total rate for all bytes transferred between ISA Server and remote servers or a chained upstream proxy.')
wpsActiveWebSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsActiveWebSessions.setStatus('current')
if mibBuilder.loadTexts: wpsActiveWebSessions.setDescription('The number of active Web sessions currently connected to ISA Server.')
wpsAverageMillisecondsPerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsAverageMillisecondsPerRequest.setStatus('current')
if mibBuilder.loadTexts: wpsAverageMillisecondsPerRequest.setDescription('The mean number of milliseconds required to service a Web Proxy client request (not including tunneled requests for HTTPS or SNEWS).')
wpsBytesRtnPtlCntRsps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRsps.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRsps.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers.')
wpsBytesRtnPtlCntRspsRqstdServer = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsRqstdServer.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsRqstdServer.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers requested from server.')
wpsBytesRtnPtlCntRspsSvdCh = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsSvdCh.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsSvdCh.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers served from cache.')
wpsBytesRtnPtlCntRspsSvdChHr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsSvdChHr.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsSvdChHr.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers served from cache in the last hour.')
wpsBytesRtnPtlCntRspsBITSEnChRule = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsBITSEnChRule.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsBITSEnChRule.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers for cache rules with BITS caching enabled.')
wpsBytesRtnPtlCntRspsBITSEnChRuleHr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsBITSEnChRuleHr.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsBITSEnChRuleHr.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers for cache rules with BITS caching enabled in the last hour.')
wpsBytesRtnPtlCntRspsInLastHour = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsInLastHour.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRtnPtlCntRspsInLastHour.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers in the last hour.')
wpsBytesARqstSvrRngRqstRngRqst = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesARqstSvrRngRqstRngRqst.setStatus('current')
if mibBuilder.loadTexts: wpsBytesARqstSvrRngRqstRngRqst.setDescription('The percentage of asked from server for range requests out of the number of bytes in range requests when the cache rule enabled range request caching.')
wpsCacheHitPctForRangeRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCacheHitPctForRangeRequests.setStatus('current')
if mibBuilder.loadTexts: wpsCacheHitPctForRangeRequests.setDescription('The percentage of bytes served from cache for responses to HTTP requests containing range headers.')
wpscAccumulatedCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscAccumulatedCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wpscAccumulatedCompressionRatio.setDescription('The accumulated average compression ratio of HTTP responses which were compressed by ISA Server.')
wpscAccumulatedPctRspsCompressed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscAccumulatedPctRspsCompressed.setStatus('current')
if mibBuilder.loadTexts: wpscAccumulatedPctRspsCompressed.setDescription('Accumulated percentage of HTTP responses that were compressed by ISA Server.')
wpscAccumulatedPctRspsDecompress = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscAccumulatedPctRspsDecompress.setStatus('current')
if mibBuilder.loadTexts: wpscAccumulatedPctRspsDecompress.setDescription('Accumulated percentage of HTTP responses that were decompressed by ISA Server.')
wpscSampledCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscSampledCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wpscSampledCompressionRatio.setDescription('The Sampled average compression ratio of HTTP responses which were compressed by ISA Server.')
wpscSampledPctRspsCompressed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscSampledPctRspsCompressed.setStatus('current')
if mibBuilder.loadTexts: wpscSampledPctRspsCompressed.setDescription('Sampled percentage of HTTP responses that were compressed by ISA Server.')
wpscSampledPctRspsDecompressed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscSampledPctRspsDecompressed.setStatus('current')
if mibBuilder.loadTexts: wpscSampledPctRspsDecompressed.setDescription('Sampled percentage of HTTP responses that were decompressed by ISA Server.')
wpscTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpscTotalFailures.setStatus('current')
if mibBuilder.loadTexts: wpscTotalFailures.setDescription('The total number of failures to compress or decompress a response.')
wpsDNSCacheLockFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsDNSCacheLockFailures.setStatus('current')
if mibBuilder.loadTexts: wpsDNSCacheLockFailures.setDescription('The total number of times that the DNS domain names cache failed locking its internal data structure.')
wpsdrq1stPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq1stPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrq1stPriorityRatioToTotal.setDescription('The ratio of 1st priority requests to the total number of requests.')
wpsdrq1stPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq1stPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrq1stPriority.setDescription('Total number of 1st priority requests since the last performance monitoring sample.')
wpsdrq2ndPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq2ndPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrq2ndPriorityRatioToTotal.setDescription('The ratio of 2nd priority requests to the total number of requests.')
wpsdrq2ndPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq2ndPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrq2ndPriority.setDescription('Total number of 2nd priority requests since the last performance monitoring sample.')
wpsdrq3rdPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq3rdPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrq3rdPriorityRatioToTotal.setDescription('The ratio of 3rd priority requests to the total number of requests.')
wpsdrq3rdPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq3rdPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrq3rdPriority.setDescription('Total number of 3rd priority requests since the last performance monitoring sample.')
wpsdrq4thPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq4thPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrq4thPriorityRatioToTotal.setDescription('The ratio of 4th priority requests to the total number of requests.')
wpsdrq4thPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq4thPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrq4thPriority.setDescription('Total number of 4th priority requests since the last performance monitoring sample.')
wpsdrq5thPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq5thPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrq5thPriorityRatioToTotal.setDescription('The ratio of 5th priority requests to the total number of requests.')
wpsdrq5thPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrq5thPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrq5thPriority.setDescription('Total number of 5th priority requests since the last performance monitoring sample.')
wpsdrqLowPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrqLowPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrqLowPriorityRatioToTotal.setDescription('The ratio of low (6th priority and below) priority requests to the total number of requests.')
wpsdrqLowerPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrqLowerPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrqLowerPriority.setDescription('Total number of low priority requests (6th priority and below) since the last performance monitoring sample.')
wpsdrqNon_PriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 103), Gauge32()).setLabel("wpsdrqNon-PriorityRatioToTotal").setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrqNon_PriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrqNon_PriorityRatioToTotal.setDescription('The ratio of requests without an assigned priority to the total number of requests.')
wpsdrqNon_priority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 104), Gauge32()).setLabel("wpsdrqNon-priority").setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrqNon_priority.setStatus('current')
if mibBuilder.loadTexts: wpsdrqNon_priority.setDescription('Total number of requests without an assigned priority since the last performance monitoring sample.')
wpsdrqPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrqPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrqPriorityRatioToTotal.setDescription('The ratio of requests with an assigned priority to the total number of requests.')
wpsdrqTotalPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrqTotalPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrqTotalPriority.setDescription('Total number of requests with an assigned priority since the last performance monitoring sample.')
wpsdrs1stPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs1stPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrs1stPriorityRatioToTotal.setDescription('The ratio of 1st priority responses to the total number of responses.')
wpsdrs1stPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs1stPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrs1stPriority.setDescription('Total number of 1st priority responses since the last performance monitoring sample.')
wpsdrs2ndPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs2ndPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrs2ndPriorityRatioToTotal.setDescription('The ratio of 2nd priority responses to the total number of responses.')
wpsdrs2ndPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 110), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs2ndPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrs2ndPriority.setDescription('Total number of 2nd priority responses since the last performance monitoring sample.')
wpsdrs3rdPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 111), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs3rdPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrs3rdPriorityRatioToTotal.setDescription('The ratio of 3rd priority responses to the total number of responses.')
wpsdrs3rdPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 112), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs3rdPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrs3rdPriority.setDescription('Total number of 3rd priority responses since the last performance monitoring sample.')
wpsdrs4thPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 113), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs4thPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrs4thPriorityRatioToTotal.setDescription('The ratio of 4th priority responses to the total number of responses.')
wpsdrs4thPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 114), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs4thPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrs4thPriority.setDescription('Total number of 4th priority responses since the last performance monitoring sample.')
wpsdrs5thPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 115), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs5thPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrs5thPriorityRatioToTotal.setDescription('The ratio of 5th priority responses to the total number of responses.')
wpsdrs5thPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 116), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrs5thPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrs5thPriority.setDescription('Total number of 5th priority responses since the last performance monitoring sample.')
wpsdrsLowPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 117), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrsLowPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrsLowPriorityRatioToTotal.setDescription('The ratio of low (6th priority and below) priority responses to the total number of responses.')
wpsdrsLowerPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 118), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrsLowerPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrsLowerPriority.setDescription('Total number of low priority responses (6th priority and below) since the last performance monitoring sample.')
wpsdrsNon_PriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 119), Gauge32()).setLabel("wpsdrsNon-PriorityRatioToTotal").setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrsNon_PriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrsNon_PriorityRatioToTotal.setDescription('The ratio of responses without an assigned priority to the total number of responses.')
wpsdrsNon_priority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 120), Gauge32()).setLabel("wpsdrsNon-priority").setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrsNon_priority.setStatus('current')
if mibBuilder.loadTexts: wpsdrsNon_priority.setDescription('Total number of responses without an assigned priority since the last performance monitoring sample.')
wpsdrsPriorityRatioToTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 121), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrsPriorityRatioToTotal.setStatus('current')
if mibBuilder.loadTexts: wpsdrsPriorityRatioToTotal.setDescription('The ratio of responses with an assigned priority to the total number of responses.')
wpsdrsTotalPriority = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 122), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsdrsTotalPriority.setStatus('current')
if mibBuilder.loadTexts: wpsdrsTotalPriority.setDescription('Total number of responses with an assigned priority since the last performance monitoring sample.')
wpsRqstFromAryMember = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 123), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstFromAryMember.setStatus('current')
if mibBuilder.loadTexts: wpsRqstFromAryMember.setDescription('The total number of requests coming from another array member.')
wpsRqstFromAryMemberPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 124), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstFromAryMemberPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsRqstFromAryMemberPerErrs.setDescription('The percentage of requests coming from another array member out of the total number of failed requests during the time shown in the duration field.')
wpsRqstToAryMember = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 125), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstToAryMember.setStatus('current')
if mibBuilder.loadTexts: wpsRqstToAryMember.setDescription('The total number of requests going to another array member.')
wpsRqstToAryMemberPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 126), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstToAryMemberPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsRqstToAryMemberPerErrs.setDescription('The percentage of requests going to another array member out of the total number of failed requests during the time shown in the duration field.')
wpsRqstKeepAliveToAryMember = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 127), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstKeepAliveToAryMember.setStatus('current')
if mibBuilder.loadTexts: wpsRqstKeepAliveToAryMember.setDescription('The total number of that use an existing keep alive connection between ISA Server and another array member.')
wpsRqstKeepAliveToAryMbrPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 128), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstKeepAliveToAryMbrPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsRqstKeepAliveToAryMbrPerErrs.setDescription('The percentage of that use an existing keep alive connection between ISA Server and another array member out of the total number of failed requests during the time shown in the duration field.')
wpsRqstKeepAliveToClient = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstKeepAliveToClient.setStatus('current')
if mibBuilder.loadTexts: wpsRqstKeepAliveToClient.setDescription('The total number of requests that use an existing keep alive connection between the client and ISA Server.')
wpsRqstKeepAliveToClientPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstKeepAliveToClientPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsRqstKeepAliveToClientPerErrs.setDescription('The percentage of requests that use an existing keep alive connection between the client and ISA Server as a ratio of the total number of failed requests during the time shown in the duration field.')
wpsRqstKeepAliveToServer = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstKeepAliveToServer.setStatus('current')
if mibBuilder.loadTexts: wpsRqstKeepAliveToServer.setDescription('The total number of requests that use an existing keep alive connection between ISA Server and the Web server.')
wpsRqstKeepAliveToServerPerErrs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstKeepAliveToServerPerErrs.setStatus('current')
if mibBuilder.loadTexts: wpsRqstKeepAliveToServerPerErrs.setDescription('The percentage of requests that use an existing keep alive connection between ISA Server and the Web server as a ratio of the total number of failed requests during the time shown in the duration field.')
wpsRqstWithMultipleRanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 133), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsRqstWithMultipleRanges.setStatus('current')
if mibBuilder.loadTexts: wpsRqstWithMultipleRanges.setDescription('The number of requests with more than one range in the HTTP Range header.')
wpsAverageRequestSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 134), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsAverageRequestSpeed.setStatus('current')
if mibBuilder.loadTexts: wpsAverageRequestSpeed.setDescription('The average speed of the request for all requests in the previous minute. The speed is calculated by dividing the request size by the time needed to serve the request, and is provided in bytes per second.')
wpsBytesRequestedFromServerInRanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 135), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesRequestedFromServerInRanges.setStatus('current')
if mibBuilder.loadTexts: wpsBytesRequestedFromServerInRanges.setDescription('The total number of bytes requested from server in HTTP requests containing range headers.')
wpsBytesServedLastHourFromCacheInRanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 136), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesServedLastHourFromCacheInRanges.setStatus('current')
if mibBuilder.loadTexts: wpsBytesServedLastHourFromCacheInRanges.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers served from cache in the last hour.')
wpsBytesServedLastHourInRanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 137), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesServedLastHourInRanges.setStatus('current')
if mibBuilder.loadTexts: wpsBytesServedLastHourInRanges.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers in the last hour.')
wpsBytesServedFromCacheInRanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 138), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesServedFromCacheInRanges.setStatus('current')
if mibBuilder.loadTexts: wpsBytesServedFromCacheInRanges.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers served from cache.')
wpsBytesServedInRanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 139), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsBytesServedInRanges.setStatus('current')
if mibBuilder.loadTexts: wpsBytesServedInRanges.setDescription('The total number of bytes returned in responses to HTTP requests containing range headers.')
wpsCompCurrentCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 140), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCompCurrentCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wpsCompCurrentCompressionRatio.setDescription('For HTTP responses compressed by ISA Server, the average size reduction of the HTTP response body as a percentage of the uncompressed body size, during the sample period.')
wpsCompCurRatioOfRspsCompressed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 141), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCompCurRatioOfRspsCompressed.setStatus('current')
if mibBuilder.loadTexts: wpsCompCurRatioOfRspsCompressed.setDescription('The percentage of HTTP responses compressed by ISA Server out of the number of HTTP requests handled by ISA Server, during the sample period.')
wpsCompCurRatioOfRspsDecompress = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 142), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCompCurRatioOfRspsDecompress.setStatus('current')
if mibBuilder.loadTexts: wpsCompCurRatioOfRspsDecompress.setDescription('The percentage of HTTP responses decompressed by ISA Server out of the number of HTTP requests handled by ISA Server, during the sample period.')
wpsCompRatioOfSizeReduction = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 143), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCompRatioOfSizeReduction.setStatus('current')
if mibBuilder.loadTexts: wpsCompRatioOfSizeReduction.setDescription('For HTTP responses compressed by ISA Server, the average size reduction of the HTTP response body as a percentage of the uncompressed body size.')
wpsCompRspsCompAccumulatedRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 144), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCompRspsCompAccumulatedRatio.setStatus('current')
if mibBuilder.loadTexts: wpsCompRspsCompAccumulatedRatio.setDescription('The percentage of HTTP responses compressed by ISA Server out of the total number of HTTP requests handled by ISA Server.')
wpsCompRspsDcompAccumulatedRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 145), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsCompRspsDcompAccumulatedRatio.setStatus('current')
if mibBuilder.loadTexts: wpsCompRspsDcompAccumulatedRatio.setDescription('The percentage of HTTP responses decompressed by ISA Server out of the total number of HTTP requests handled by ISA Server.')
wpsMemoryPoolForHTTPRqstPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 146), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsMemoryPoolForHTTPRqstPercent.setStatus('current')
if mibBuilder.loadTexts: wpsMemoryPoolForHTTPRqstPercent.setDescription('Percentage of memory available for HTTP requests. When an HTTP request is made, ISA Server uses memory from a pre-allocated pool. You can use the ProxyVmemAlloc3pSize registry value in the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Ser vices\\W3Proxy\\Param')
wpsMemoryPoolForSSLRqstPercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 7, 147), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wpsMemoryPoolForSSLRqstPercent.setStatus('current')
if mibBuilder.loadTexts: wpsMemoryPoolForSSLRqstPercent.setDescription('Percentage of memory available for SSL requests. When an SSL request is made, ISA Server uses memory from a pre-allocated pool. You can use the ProxyVmemAlloc1pSize registry value in the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Ser vices\\W3Proxy\\Paramet')
socksFilter = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8))
if mibBuilder.loadTexts: socksFilter.setStatus('current')
if mibBuilder.loadTexts: socksFilter.setDescription('SOCKS Filter performance counters.')
socksFilterActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterActiveConnections.setStatus('current')
if mibBuilder.loadTexts: socksFilterActiveConnections.setDescription('The total number of active connections currently passing data. Connections pending or not yet established are counted elsewhere.')
socksFilterActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterActiveSessions.setStatus('current')
if mibBuilder.loadTexts: socksFilterActiveSessions.setDescription('The number of active SOCKS sessions.')
socksFilterBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: socksFilterBytesReadPerSec.setDescription('Number of bytes read on all SOCKS connections per second.')
socksFilterBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: socksFilterBytesWrittenPerSec.setDescription('Number of bytes written on all SOCKS connections per second.')
socksFilterConnectingConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterConnectingConnections.setStatus('current')
if mibBuilder.loadTexts: socksFilterConnectingConnections.setDescription('The number of SOCKS connections waiting for a remote computer to connect to.')
socksFilterListeningConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterListeningConnections.setStatus('current')
if mibBuilder.loadTexts: socksFilterListeningConnections.setDescription('Number of connection objects that wait for remote computers to connect to.')
socksFilterPendingDNSResolutions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterPendingDNSResolutions.setStatus('current')
if mibBuilder.loadTexts: socksFilterPendingDNSResolutions.setDescription('Number of pending name resolution requests. These requests resolve host DNS names and IP addresses for SOCKS connections.')
socksFilterSuccessDNSResolutions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 6, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksFilterSuccessDNSResolutions.setStatus('current')
if mibBuilder.loadTexts: socksFilterSuccessDNSResolutions.setDescription('Number of name resultions requests resolved each second. These requests resolve host DNS names and IP addresses for SOCKS connections.')
mibBuilder.exportSymbols("INFORMANT-ISASERVER", feTCPEstablishedConnsPerSec=feTCPEstablishedConnsPerSec, wpsCurDirectFetchAvgMSPerRequest=wpsCurDirectFetchAvgMSPerRequest, wpsRqstKeepAliveToAryMbrPerErrs=wpsRqstKeepAliveToAryMbrPerErrs, wpsCurAvgMSPerRequest=wpsCurAvgMSPerRequest, wpsdrsNon_PriorityRatioToTotal=wpsdrsNon_PriorityRatioToTotal, cacheMemoryUsageRatioPercent=cacheMemoryUsageRatioPercent, fsSuccessfulDNSResolutions=fsSuccessfulDNSResolutions, wpsRqstFromAryMemberPerErrs=wpsRqstFromAryMemberPerErrs, totalIncomingConn=totalIncomingConn, wpsArrayBytesReceivedPerSec=wpsArrayBytesReceivedPerSec, h323FilterTotalH323Calls=h323FilterTotalH323Calls, fsDNSCacheLockFailures=fsDNSCacheLockFailures, fsBackConnectingTCPConnections=fsBackConnectingTCPConnections, wpsHttpRequests=wpsHttpRequests, wpsBytesServedLastHourFromCacheInRanges=wpsBytesServedLastHourFromCacheInRanges, fsDNSRetrievals=fsDNSRetrievals, fsBytesWrittenPerSec=fsBytesWrittenPerSec, fsDNSCacheFlushes=fsDNSCacheFlushes, wpsCompRspsDcompAccumulatedRatio=wpsCompRspsDcompAccumulatedRatio, wpsFailRqstsKAToServer=wpsFailRqstsKAToServer, bwCtrlAssignedInboundBandwidth=bwCtrlAssignedInboundBandwidth, fsBytesReadPerSec=fsBytesReadPerSec, wpsFailRqstsFromArrayMbrPerErrs=wpsFailRqstsFromArrayMbrPerErrs, wpscSampledPctRspsDecompressed=wpscSampledPctRspsDecompressed, bwCtrlAssignedOutboundBandwidth=bwCtrlAssignedOutboundBandwidth, wpsFailRqstsFromArrayMbr=wpsFailRqstsFromArrayMbr, wpsCacheHitRatioPercent=wpsCacheHitRatioPercent, wpsIOErrorsToArrayMemberPerErrs=wpsIOErrorsToArrayMemberPerErrs, fsDNSCacheHits=fsDNSCacheHits, wpsCompCurRatioOfRspsCompressed=wpsCompCurRatioOfRspsCompressed, wpsTotalSSLSessions=wpsTotalSSLSessions, wpsRqstFromAryMember=wpsRqstFromAryMember, feActiveConnections=feActiveConnections, wpscAccumulatedPctRspsCompressed=wpscAccumulatedPctRspsCompressed, wpsRqstToAryMemberPerErrs=wpsRqstToAryMemberPerErrs, bwCtrlInstance=bwCtrlInstance, wpsDNSCacheFlushes=wpsDNSCacheFlushes, packetFilter=packetFilter, wpsDNSCacheEntries=wpsDNSCacheEntries, wpsdrs2ndPriority=wpsdrs2ndPriority, wpsArrayBytesTotalPerSec=wpsArrayBytesTotalPerSec, cacheDiskContentWritesPerSec=cacheDiskContentWritesPerSec, wpsdrs3rdPriorityRatioToTotal=wpsdrs3rdPriorityRatioToTotal, wpsdrsPriorityRatioToTotal=wpsdrsPriorityRatioToTotal, wpscAccumulatedPctRspsDecompress=wpscAccumulatedPctRspsDecompress, wpsFailRqstsKAToArrayMbr=wpsFailRqstsKAToArrayMbr, wpsBytesARqstSvrRngRqstRngRqst=wpsBytesARqstSvrRngRqstRngRqst, cacheActiveRefreshKBPerSec=cacheActiveRefreshKBPerSec, fsActiveTCPConnections=fsActiveTCPConnections, wpsDNSCacheHits=wpsDNSCacheHits, fsConnectingTCPConnections=fsConnectingTCPConnections, h323FilterActiveH323Calls=h323FilterActiveH323Calls, totalDroppedPackets=totalDroppedPackets, fePacketsPerSec=fePacketsPerSec, wpsdrq2ndPriorityRatioToTotal=wpsdrq2ndPriorityRatioToTotal, wpsFailRqstsKAToArrayMbrPerErrs=wpsFailRqstsKAToArrayMbrPerErrs, wpsUnknownSSLSessions=wpsUnknownSSLSessions, wpsRequestsPerSec=wpsRequestsPerSec, isaServer=isaServer, wpsIOErrorsToClient=wpsIOErrorsToClient, wpsMemoryPoolForHTTPRqstPercent=wpsMemoryPoolForHTTPRqstPercent, cacheMemoryRetrieveURLPerSec=cacheMemoryRetrieveURLPerSec, firewallEngine=firewallEngine, wpsUpstreamBytesSentPerSec=wpsUpstreamBytesSentPerSec, wpsCompRspsCompAccumulatedRatio=wpsCompRspsCompAccumulatedRatio, feBackloggedPackets=feBackloggedPackets, wpsIncomingConnectionsPerSec=wpsIncomingConnectionsPerSec, feTCPEstablishedConns=feTCPEstablishedConns, wpscAccumulatedCompressionRatio=wpscAccumulatedCompressionRatio, wpsHTTPSSessions=wpsHTTPSSessions, wpscSampledPctRspsCompressed=wpscSampledPctRspsCompressed, feConnectionsPerSec=feConnectionsPerSec, PYSNMP_MODULE_ID=isaServer, cacheTotalDiskFailures=cacheTotalDiskFailures, wpsTotalPendingConnects=wpsTotalPendingConnects, wpsIOErrorsToServerPerErrs=wpsIOErrorsToServerPerErrs, feAllowedPackets=feAllowedPackets, fsKernelModeDataPumps=fsKernelModeDataPumps, cacheTotalBytesActiveRefreshedKB=cacheTotalBytesActiveRefreshedKB, firewallService=firewallService, wpsReverseBytesTotalPerSec=wpsReverseBytesTotalPerSec, wpsTotalArrayFetches=wpsTotalArrayFetches, socksFilterConnectingConnections=socksFilterConnectingConnections, fsDNSCacheHitsPercent=fsDNSCacheHitsPercent, wpsdrs4thPriorityRatioToTotal=wpsdrs4thPriorityRatioToTotal, socksFilterBytesWrittenPerSec=socksFilterBytesWrittenPerSec, fsWorkerThreads=fsWorkerThreads, wpsdrq3rdPriorityRatioToTotal=wpsdrq3rdPriorityRatioToTotal, wpsFailRqstsKAToClient=wpsFailRqstsKAToClient, fsSecureNATMappings=fsSecureNATMappings, wpsRqstKeepAliveToServer=wpsRqstKeepAliveToServer, cacheMaxURLsCached=cacheMaxURLsCached, wpsBytesRtnPtlCntRspsBITSEnChRuleHr=wpsBytesRtnPtlCntRspsBITSEnChRuleHr, wpsdrq4thPriority=wpsdrq4thPriority, cacheActiveRefreshURLPerSec=cacheActiveRefreshURLPerSec, cacheTotalMemoryBytesRetrievedKB=cacheTotalMemoryBytesRetrievedKB, wpsBytesRtnPtlCntRsps=wpsBytesRtnPtlCntRsps, fsActiveSessions=fsActiveSessions, wpsClientBytesReceivedPerSec=wpsClientBytesReceivedPerSec, bwCtrlAssignedConnections=bwCtrlAssignedConnections, wpsFailRqstsPerSec=wpsFailRqstsPerSec, cacheDiskFailPerSec=cacheDiskFailPerSec, wpsFtpRequests=wpsFtpRequests, wpsdrq5thPriorityRatioToTotal=wpsdrq5thPriorityRatioToTotal, fsAvailableWorkerThreads=fsAvailableWorkerThreads, socksFilterBytesReadPerSec=socksFilterBytesReadPerSec, wpsActiveWebSessions=wpsActiveWebSessions, wpsBytesServedInRanges=wpsBytesServedInRanges, wpsdrqTotalPriority=wpsdrqTotalPriority, wpsdrs4thPriority=wpsdrs4thPriority, wpsCacheHitPctForRangeRequests=wpsCacheHitPctForRangeRequests, wpsTotalUpstreamFetches=wpsTotalUpstreamFetches, fsAvailableUDPMappings=fsAvailableUDPMappings, wpsdrqNon_priority=wpsdrqNon_priority, wpsArrayBytesSentPerSec=wpsArrayBytesSentPerSec, wpsFailRqstsKAToClientPerErrs=wpsFailRqstsKAToClientPerErrs, wpsMaximumUsers=wpsMaximumUsers, cacheMemoryRetrievedKBPerSec=cacheMemoryRetrievedKBPerSec, wpsRqstWithMultipleRanges=wpsRqstWithMultipleRanges, bwCtrlActualInboundBandwidth=bwCtrlActualInboundBandwidth, socksFilterActiveConnections=socksFilterActiveConnections, wpsCurArrayFetchAvgMSPerRequest=wpsCurArrayFetchAvgMSPerRequest, wpsCacheRunningHitRatioPercent=wpsCacheRunningHitRatioPercent, wpsSSLClientBytesSentPerSec=wpsSSLClientBytesSentPerSec, wpsThreadPoolFailures=wpsThreadPoolFailures, wpsThreadPoolSize=wpsThreadPoolSize, wpscTotalFailures=wpscTotalFailures, wpsCompCurRatioOfRspsDecompress=wpsCompCurRatioOfRspsDecompress, feBytes=feBytes, wpsRqstKeepAliveToClientPerErrs=wpsRqstKeepAliveToClientPerErrs, wpsTotalSuccessfulRequests=wpsTotalSuccessfulRequests, cacheDiskCacheAllocatedSpaceKB=cacheDiskCacheAllocatedSpaceKB, wpsIOErrorsToServer=wpsIOErrorsToServer, wpsMemoryPoolForSSLRqstPercent=wpsMemoryPoolForSSLRqstPercent, wpsCompCurrentCompressionRatio=wpsCompCurrentCompressionRatio, wpsBytesRtnPtlCntRspsInLastHour=wpsBytesRtnPtlCntRspsInLastHour, fsUDPBytesXferPerSecByKernelMode=fsUDPBytesXferPerSecByKernelMode, wpsBytesRtnPtlCntRspsSvdCh=wpsBytesRtnPtlCntRspsSvdCh, feDroppedPacketsPerSec=feDroppedPacketsPerSec, wpsReverseBytesSentPerSec=wpsReverseBytesSentPerSec, fsPendingTCPConnections=fsPendingTCPConnections, wpsdrs1stPriority=wpsdrs1stPriority, wpsdrsLowerPriority=wpsdrsLowerPriority, wpsTotalCacheFetches=wpsTotalCacheFetches, wpsBytesServedFromCacheInRanges=wpsBytesServedFromCacheInRanges, wpsFailRqstsToArrayMbr=wpsFailRqstsToArrayMbr, cacheTotalDiskURLsRetrieved=cacheTotalDiskURLsRetrieved, wpsdrs5thPriority=wpsdrs5thPriority, wpsTotalUsers=wpsTotalUsers, wpsdrq2ndPriority=wpsdrq2ndPriority, wpsRqstToAryMember=wpsRqstToAryMember, wpsTotalRequests=wpsTotalRequests, wpsDNSCacheLockFailures=wpsDNSCacheLockFailures, wpsdrsNon_priority=wpsdrsNon_priority, wpsDNSCacheHitsPercent=wpsDNSCacheHitsPercent, packetsDroppedFilterDenial=packetsDroppedFilterDenial, wpsIOErrorsToClientPerErrs=wpsIOErrorsToClientPerErrs, bandwidthControlTable=bandwidthControlTable, wpsCompRatioOfSizeReduction=wpsCompRatioOfSizeReduction, wpsRqstKeepAliveToClient=wpsRqstKeepAliveToClient, wpsIOErrorsToArrayMember=wpsIOErrorsToArrayMember, wpsdrqPriorityRatioToTotal=wpsdrqPriorityRatioToTotal, cacheDiskRetrieveURLPerSec=cacheDiskRetrieveURLPerSec, wpsFailRqstsToArrayMbrPerErrs=wpsFailRqstsToArrayMbrPerErrs, wpsdrs1stPriorityRatioToTotal=wpsdrs1stPriorityRatioToTotal, bwCtrlActualOutboundBandwidth=bwCtrlActualOutboundBandwidth, wpsBytesRtnPtlCntRspsRqstdServer=wpsBytesRtnPtlCntRspsRqstdServer, wpsCurCacheFetchAvgMSPerRequest=wpsCurCacheFetchAvgMSPerRequest, wpsSSLClientBytesReceivedPerSec=wpsSSLClientBytesReceivedPerSec, wpsdrsLowPriorityRatioToTotal=wpsdrsLowPriorityRatioToTotal, cacheTotalActivelyRefreshedURLs=cacheTotalActivelyRefreshedURLs, totalLoggingPacketsLost=totalLoggingPacketsLost, wpsDNSRetrievals=wpsDNSRetrievals, wpsdrqLowerPriority=wpsdrqLowerPriority, feDroppedPackets=feDroppedPackets, cacheURLCommitPerSec=cacheURLCommitPerSec, cacheTotalURLsCached=cacheTotalURLsCached, wpsdrq5thPriority=wpsdrq5thPriority, cacheURLsInCache=cacheURLsInCache, wpsAverageMillisecondsPerRequest=wpsAverageMillisecondsPerRequest, socksFilterListeningConnections=socksFilterListeningConnections, wpsBytesRtnPtlCntRspsBITSEnChRule=wpsBytesRtnPtlCntRspsBITSEnChRule, wpsSitesDenied=wpsSitesDenied, fsNonConnectedUDPMappings=fsNonConnectedUDPMappings, wpsThreadPoolActiveSessions=wpsThreadPoolActiveSessions, wpsdrs3rdPriority=wpsdrs3rdPriority, fsActiveUDPConnections=fsActiveUDPConnections, fsFailedDNSResolutions=fsFailedDNSResolutions, wpsClientBytesSentPerSec=wpsClientBytesSentPerSec, wpsFailRqstsKAToServerPerErrs=wpsFailRqstsKAToServerPerErrs, wpsSSLClientBytesTotalPerSec=wpsSSLClientBytesTotalPerSec, wpsdrs5thPriorityRatioToTotal=wpsdrs5thPriorityRatioToTotal, wpsdrq3rdPriority=wpsdrq3rdPriority, wpsBytesRequestedFromServerInRanges=wpsBytesRequestedFromServerInRanges, socksFilterPendingDNSResolutions=socksFilterPendingDNSResolutions, h323Filter=h323Filter, wpsTotalFailingRequests=wpsTotalFailingRequests, fsListeningTCPConnections=fsListeningTCPConnections, wpsSitesGranted=wpsSitesGranted, wpsUpstreamBytesReceivedPerSec=wpsUpstreamBytesReceivedPerSec, wpsTotalReverseFetches=wpsTotalReverseFetches, socksFilter=socksFilter, wpsRqstKeepAliveToServerPerErrs=wpsRqstKeepAliveToServerPerErrs, wpsClientBytesTotalPerSec=wpsClientBytesTotalPerSec, bandwidthControlEntry=bandwidthControlEntry, wpsSNEWSSessions=wpsSNEWSSessions, fePackets=fePackets, wpsBytesServedLastHourInRanges=wpsBytesServedLastHourInRanges, packetsDroppedProtocolViolation=packetsDroppedProtocolViolation, cacheTotalDiskBytesRetrievedKB=cacheTotalDiskBytesRetrievedKB, socksFilterActiveSessions=socksFilterActiveSessions, wpsdrqNon_PriorityRatioToTotal=wpsdrqNon_PriorityRatioToTotal, fsAcceptingTCPConnections=fsAcceptingTCPConnections, cacheMemoryCacheAllocatedSpaceKB=cacheMemoryCacheAllocatedSpaceKB, feAllowedPacketsPerSec=feAllowedPacketsPerSec, wpsCurrentUsers=wpsCurrentUsers, wpsFailRqstsPerTotalRqstsPercent=wpsFailRqstsPerTotalRqstsPercent, wpsOutgoingConnectionsPerSec=wpsOutgoingConnectionsPerSec, wpsdrq1stPriorityRatioToTotal=wpsdrq1stPriorityRatioToTotal, wpsConnectErrors=wpsConnectErrors, cacheDiskRetrievedKBPerSec=cacheDiskRetrievedKBPerSec, wpsBytesRtnPtlCntRspsSvdChHr=wpsBytesRtnPtlCntRspsSvdChHr, wpsdrs2ndPriorityRatioToTotal=wpsdrs2ndPriorityRatioToTotal, wpsAverageRequestSpeed=wpsAverageRequestSpeed, cacheTotalMemoryURLsRetrieved=cacheTotalMemoryURLsRetrieved, wpsdrsTotalPriority=wpsdrsTotalPriority, socksFilterSuccessDNSResolutions=socksFilterSuccessDNSResolutions, wpsdrq1stPriority=wpsdrq1stPriority, fsDNSCacheEntries=fsDNSCacheEntries, wpsdrqLowPriorityRatioToTotal=wpsdrqLowPriorityRatioToTotal, wpsRqstKeepAliveToAryMember=wpsRqstKeepAliveToAryMember, fsPendingDNSResolutions=fsPendingDNSResolutions, wpsConnErrsPerTotalErrsPercent=wpsConnErrsPerTotalErrsPercent, webProxyService=webProxyService, wpsReverseBytesReceivedPerSec=wpsReverseBytesReceivedPerSec, fsTCPAwaitInConnectCallToFinish=fsTCPAwaitInConnectCallToFinish, wpscSampledCompressionRatio=wpscSampledCompressionRatio, wpsdrq4thPriorityRatioToTotal=wpsdrq4thPriorityRatioToTotal, cache=cache, feBytesPerSec=feBytesPerSec, fsTCPBytesXferPerSecByKernelMode=fsTCPBytesXferPerSecByKernelMode, wpsUpstreamBytesTotalPerSec=wpsUpstreamBytesTotalPerSec)
