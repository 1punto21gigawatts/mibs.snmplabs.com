#
# PySNMP MIB module DES3828P-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES3828P-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Counter32, ModuleIdentity, Bits, Counter64, IpAddress, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Counter32", "ModuleIdentity", "Bits", "Counter64", "IpAddress", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Gauge32", "Integer32")
MacAddress, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TextualConvention")
des3828P, = mibBuilder.importSymbols("SW3800PRIMGMT-MIB", "des3828P")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0805220000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information for the proprietary enterprise.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class VlanIndex(Unsigned32):
    pass

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 3))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 9))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1))
swDevInfoSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setStatus('current')
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setDescription('The value of sysUpTime at the time the switch entered its current operational state. If the current state was entered prior to the last re-initialization, then this object contains a zero value. This value is in the units of seconds.')
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
swDevInfoConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoConsoleInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoConsoleInUse.setDescription('The usage indication of the console system.')
swDevInfoModuleType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoModuleType.setStatus('current')
if mibBuilder.loadTexts: swDevInfoModuleType.setDescription('This object indicates the module type of this port.')
swDevInfoFrontPanelLedMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portStatusMode", 1), ("poeStatusMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedMode.setStatus('current')
if mibBuilder.loadTexts: swDevInfoFrontPanelLedMode.setDescription('This object indicates the mode of current device front panel LEDs . The front panel LED mode could be changed only by a push button on the device front panel . PortStatusMode : the LEDs respresent ports status. PoEStatusMode : the LEDs respresent POE status.')
swDevInfoPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 8), )
if mibBuilder.loadTexts: swDevInfoPowerTable.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerTable.setDescription('A list of the temperature.')
swDevInfoPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 8, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), (0, "DES3828P-L2MGMT-MIB", "swDevInfoPowerID"))
if mibBuilder.loadTexts: swDevInfoPowerEntry.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerEntry.setDescription('An entry for Power information.')
swDevInfoPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerUnitIndex.setDescription('Indicates the ID of the unit in the System')
swDevInfoPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerID.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerID.setDescription('Indicates ID of the power ')
swDevInfoPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("lowVoltage", 1), ("overCurrent", 2), ("working", 3), ("fail", 4), ("connect", 5), ("disconnect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerStatus.setDescription('Indicates status of the power ')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlStpState.setDescription('This object can enable or disable the spanning tree algorithm during the runtime of the system.')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setDescription('This object indicates if the layer 2 Internet Group Management Protocol (IGMP) capture function has been enabled or disabled.')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setDescription('This object can be enable or disable RMON.')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('If the object is set to active, all the statistic counters will be cleared. If set to normal, do nothing.')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 5), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setDescription('Indicates the VLAN ID which the Dot1dTpFdbTable belongs to ; The default value is the DEFAULT_VLAN_ID of the system.')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enable or disable MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of variation MAC in the address table. The default value is 1 .')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval in seconds for triggering the MAC notify message. ')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 10))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object controls the Telnet status.')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setDescription("This object can designate a TCP port. When Telnet is disabled this object isn't accessible.")
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of Spanning Tree, this object decides whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription("This object determines whether to send a trap or not when the switch topology has changed. If the object is enabled(3), the topology change trap is sent by the device when any of its configured ports transition from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port transition, the device doesn't send the trap if this object value is set to disabled or other.")
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription("This object determines whether to send a trap or not when the link has changed. If the object is enabled (3), the Link Change trap is sent by the device when any of its port links change. The device doesn't send the trap if this object value is set to disabled or other.")
swL2VlanAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 3, 1), )
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setDescription('A table containing the advertisement state for each VLAN configured into the device by (local or network) management.')
swL2VlanAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 3, 1, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setDescription('Advertisement state for each VLAN configured in the device.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
if mibBuilder.loadTexts: swL2VlanName.setDescription('An administratively assigned string, which may be used to identify the VLAN.')
swL2VlanAdvertiseState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setDescription('This object indicates the advertised status of this VLAN entry.')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2PortInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module).")
swL2PortInfoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('This object indicates the connector type of this port.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInfoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1000T", 2), ("moduleType-BaseModule", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleType.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoModuleType.setDescription('This object indicates the module type of this port.')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("lbd", 2), ("unknow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2PortCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port of the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates the ID of the unit in the device')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides whether the port is enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Choose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlLockState.setDescription('This object decides whether the port is locked or not.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription('This object decides whether MAC notification is enabled or not.')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setDescription("This object configure the switch's jumbo frame settings.")
swL2PortInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4), )
if mibBuilder.loadTexts: swL2PortInformationTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationTable.setDescription('A table that contains information about every port.')
swL2PortInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2PortInformationPortIndex"), (0, "DES3828P-L2MGMT-MIB", "swL2PortInformationMediumType"))
if mibBuilder.loadTexts: swL2PortInformationEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationEntry.setDescription('A list of information for each port of the device.')
swL2PortInformationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInformationMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationMediumType.setDescription('Indicates medium type of the port number.')
swL2PortInformationUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationUnitID.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationUnitID.setDescription('Indicates ID of the unit in the system')
swL2PortInformationType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("portType-1000Base-TX-GBIC-COMBO", 11), ("portType-1000Base-none-GBIC", 12), ("portType-1000Base-SX-MGBIC", 13), ("portType-1000Base-LX-MGBIC", 14), ("portType-1000Base-TX-MGBIC", 15), ("portType-1000Base-none-MGBIC", 16), ("portType-SIO", 17), ("portType-10G", 18), ("portType-10G-xenpak-1310nm", 19), ("portType-10G-xenpak-850nm", 20), ("portType-10G-xenpak-empty", 21), ("portType-10G-xfp-1310nm", 22), ("portType-10G-xfp-850nm", 23), ("portType-10G-xfp-empty", 24), ("portType-none", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationType.setDescription('This object indicates the connector type of this port.')
swL2PortInformationLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInformationNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 0), ("empty", 1), ("link-down", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8), ("full-10Gigabps", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInformationModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationModuleType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationModuleType.setDescription('This object indicates the module type of this port.')
swL2PortInformationErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("lbd", 2), ("unknow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationErrorDisabled.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5), )
if mibBuilder.loadTexts: swL2PortControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlTable.setDescription('A table that contains control information about every port.')
swL2PortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2PortControlPortIndex"), (0, "DES3828P-L2MGMT-MIB", "swL2PortControlMediumType"))
if mibBuilder.loadTexts: swL2PortControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlEntry.setDescription('A list of control information for each port of the device.')
swL2PortControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortControlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortControlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlAdminState.setDescription('This object decides if the port is enabled or disabled.')
swL2PortControlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlNwayState.setDescription('Choose the port speed, duplex mode, and N-Way function mode.')
swL2PortControlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortControlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlLearningState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlLearningState.setDescription('This object decides whether the port is locked or not.')
swL2PortControlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMACNotifyState.setDescription("This object sets each port's MAC notification state.")
swL2PortControlMulticastfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMulticastfilter.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMulticastfilter.setDescription('This object controls the multicast port filtering mode for a specified port. ')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setDescription('.')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setDescription('A list of information contained in swL2QOSBandwidthControlTable.')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setDescription('Indicates the port.')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setDescription('Indicates the RX Rate(kbit/sec) of the specifed port. Value 0 means no limit.')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setDescription('Indicates the TX Rate(kbit/sec) of the specifed port. Value 0 means no limit.')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setDescription('The Rx Rate value comes from the RADIUS server, If an 802.1X port is authenticated, this value will overwrite the locally configured Rx Rate. ')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setDescription('The Tx Rate value comes from the RADIUS server, If an 802.1X port is authenticated, this value will overwrite the locally configured Tx Rate. ')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setDescription('.')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 2, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setDescription('A list of information contained in swL2QOSSchedulingTable.')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setDescription('Indicates the hardware queue number.')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setDescription('Indicates the maximum number of packets the hardware priority queue will be allowed to transmit before allowing the next lowest priority queue to transmit its packets. a value between 0 and 255 can be specified.')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setDescription('.')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 3, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setDescription('A list of information contained in swL2QOS8021pUserPriorityTable.')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setDescription('The 802.1p user priority .')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setDescription("The number of the switch's hardware priority queue. The switch has four hardware priority queues available. They are numbered between 0 (the lowest priority) and 6 (the highest priority).")
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setDescription('.')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 4, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setDescription('A list of information contained in swL2QOS8021pDefaultPriorityTable.')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setDescription('Indicates the port number.')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setDescription('The priority value to assign to untagged packets received by the switch ports on the switch.')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setDescription('Indicates the value of 802.1p comes from RADIUS server. If an 802.1X port is authenticated, this value will overwrite the local configured value.')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setDescription('Maximum number of entries in the trunk configuration table (swL2TrunkCtrlTable).')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setDescription('Current active number of entries in the trunk configuration table.')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setDescription('This table specifies which ports are grouped as a set of ports(up to 8) into a single logical link.')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setDescription('A list of information specifies which ports are grouped as a set of ports(up to 8) into a single logical link.')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkIndex.setDescription('The index of logical port trunk. The trunk group number depends on the existence of the unit and module.')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkName.setDescription('The name of logical port trunk.')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMasterPort.setDescription('The object indicates the master port number of the port trunk entry. When using Port Trunk, you can not configure the other ports of the group except the master port. Their configuration must be the same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMember.setDescription('Indicates how many ports are included in this Trunk. The trunk port number depends on the existence of module. The maximum number of ports is 8 for one trunks.')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setDescription('The object indicates the flooding port number of the port trunk entry. The first port of the trunk is implicitly configured to be the flooding port.')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkType.setDescription('This object indicates the type of the trunk group. static : is static trunk group lacp : is LACP trunk group . ')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkState.setDescription('This object indicates the status of this entry.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures the part of the packet examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setDescription('This object indicates which port will sniff another port to the switch. A trunk port member cannot be configured as a target Snooping port. The port number is the sequential (logical) number which is also applied to bridge MIB, etc.')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setDescription('This represents the ingress of the source port packet to be sniffed.')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 9, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setDescription('This represents the egress of the source port packet to be sniffed.')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortState.setDescription('This object indicates the port mirroring state. other(1) - this entry is currently in use but the conditions under which it will remain so are different for each of the following values. disabled(2) - writing this value to the object will remove the corresponding entry from the table. enabled(3) - this entry will reside in the table.')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setDescription('Maximum number of VLANs in the layer 2 IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setDescription("This table controls the VLAN's IGMP function. Its scale depends on the current VLAN state (swL2VlanInfoStatus). If VLAN is in disabled mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with an index range from 1 to 12.")
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setDescription('The entry in IGMP control table (swL2IGMPCtrlTable). The entry is effective only when IGMP capture switch (swL2DevCtrlIGMPSnooping) is enabled.')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN ID. If VLAN is disabled, the VID is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the VID is arranged from 1 to 12, fixed form. If VLAN is in 802.1q mode, the VID setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setDescription('The frequency at which the IGMP Host-Query packets are transmitted on this switch.')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setDescription('The maximum query response time on this switch.')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to have a high loss, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses.')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages.')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setDescription('The timer value for sending IGMP query packet when none was sent by the host in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer has expired. Please reference RFC2236-1997.')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setDescription('The Router Timeout is how long a host must wait after hearing a Query before it may send any IGMPv2 messages.')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setDescription('When a query receives a Leave Group message for a group that has group members on the reception interface, it sends Group-Specific Queries every swL2IGMPLeaveTimer to the group being left.')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryState.setDescription('This object decides if the IGMP query is enabled or disabled.')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCurrentState.setDescription('This object indicates the current IGMP query state.')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different for each of the following values. disable(2) - IGMP funtion is disabled for this entry. enable(3) - IGMP funtion is enabled for this entry.')
swL2IGMPFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setDescription('This object indicates the fast_leave status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP fast-leave funtion is disabled for this entry. enable(3) - IGMP fast-leave funtion is enabled for this entry.')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setDescription('The table contains the current number of IGMP query packets which have been captured by this device, as well as the IGMP query packets sent by the device.')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 4, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setDescription('Information about current IGMP query information, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrState of associated VLAN entires are all enabled.')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoVid.setDescription('This object indicates the VID of the associated IGMP info table entry. It follows swL2IGMPCtrlVid in the associated entry of the IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function has been enabled, on a per-VLAN basis.')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, on a per-VLAN basis. In case of the IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increments this object by 1.')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTable.setDescription('The table containing current IGMP information which have been captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entries are all enabled. Note that the priority of IGMP table entries is lower than the Filtering Table, i.e. if there is a table hash collision between the entries of the IGMP Table and the Filtering Table inside the switch H/W address table, the Filtering Table entry will overwrite the colliding entry of the IGMP Table. See swL2FilterMgmt description also.')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2IGMPVid"), (0, "DES3828P-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setDescription('Information about current IGMP information which was captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entries are all enabled.')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPVid.setDescription('This object indicates the VID of individual IGMP table entries. It shows the VID of IGMP report information captured on the network.')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setDescription('This object identifies group ip address which have been captured from the IGMP packet, on a per-Vlan basis.')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMacAddr.setDescription('This object identifies mac addresses which correspond to swL2IGMPGroupIpAddr, on a per-Vlan basis.')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPPortMap.setDescription("This object indicates which ports belong to the same multicast group, on a per-Vlan basis. Each multicast group has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'(Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant). The 4 octets represent one unit port according to its logic port. If the unit has less then 32 port, the other ports don't care and just fill in zero.")
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setDescription('This object indicates how many report packets were received by the device corresponding with this entry where the IGMP function is enabled, on a per-Vlan basis.')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setDescription('The information of the IGMP snooping multicast VLAN table.')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setDescription('The entry of swL2IGMPMulticastVlanTable.')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setDescription('This object indicates the VLAN id of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setDescription('This object indicates the VLAN name of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setDescription('This object indicates the portlist of the source ports of IGMP snooping multicast VLAN. The source ports will be set as tag ports of the VLAN entry and the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setDescription('This object indicates the portlist of the member ports of IGMP snooping multicast VLAN. The source ports will be set to untag ports of the vlan entry and the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setDescription('The information of the router port table.')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setDescription('The entry of swL2IGMPRouterPortTable.')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setDescription('This object indicates the VLAN id of the router port entry.')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setDescription('This object indicates the VLAN name of the router port entry.')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setDescription('This object indicates the static portlist of the router port entry.')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setDescription('This object indicates the dynamic portlist of the router port entry.')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 10, 7, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setDescription('This object indicates the forbidden portlist of the router port entry.')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifies that the port can just forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 1, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information specifying the port with its traffic forward list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list that the specific port can forward traffic to.')
swL2BroadcastSegCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 2))
swL2BroadcastSegFilterPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2BroadcastSegFilterPorts.setStatus('current')
if mibBuilder.loadTexts: swL2BroadcastSegFilterPorts.setDescription('The port list that the specific port can filter broadcast packets from.')
swL2BroadcastSegARPForwardPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 13, 2, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2BroadcastSegARPForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2BroadcastSegARPForwardPorts.setDescription('The port list that the specific port can forward broadcast ARP packets to.')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setDescription('The port security feature controls the address learning capability and the traffic forwarding decision. Each port can have this function enabled or disabled. When it is enabled and a number is given said N, which allows N addresses to be learned at this port, the first N learned addresses are locked at this port as a static entry. When the learned addresses number reaches N, any incoming packet that has not learned a source address is discarded (e.g. dropped) and no more new addresses can be learned on this port.')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 1, 1), ).setIndexNames((0, "DES3828P-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setDescription('A list of information contained in the swL2PortSecurityControlTable.')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setDescription('Indicates the secured port to lock address learning.')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setDescription('Indicates allowable number of addresses to be learned at this port.')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMode.setDescription('Indicates the mode of locking address. In deleteOnTimeout (3) mode, the locked addresses can be aged out after the aging timer has expired. In this mode, when the locked address has aged out, the number of addresses that can be learned has to increase by one. In deleteOnReset (4) mode, the locked addresses are not aged out unless the system is restarted. This is to prevent port movement or intrusion.')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setDescription('Indicates the administration state of the locking address.')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setDescription("When enable (2) is selected, whenever there's a new MAC that violates the pre-defined port security configuration, a trap will be sent out and the relevant information will be logged by the system.")
swL2MgmtMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 0))
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 0, 3)).setObjects(("DES3828P-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicate the MAC addresses variation in the address table . ')
swL2porttypechgNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 0, 4)).setObjects(("DES3828P-L2MGMT-MIB", "swL2PortInfoPortIndex"), ("DES3828P-L2MGMT-MIB", "swL2PortInfoType"))
if mibBuilder.loadTexts: swL2porttypechgNotification.setStatus('current')
if mibBuilder.loadTexts: swL2porttypechgNotification.setDescription(' This trap indicates the port type change. ')
swPowerStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 0, 5)).setObjects(("DES3828P-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3828P-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3828P-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChg.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChg.setDescription('Power Status change notification.')
swPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 0, 6)).setObjects(("DES3828P-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3828P-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3828P-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerFailure.setStatus('current')
if mibBuilder.loadTexts: swPowerFailure.setDescription('Power Failure notification.')
swPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 0, 7)).setObjects(("DES3828P-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3828P-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3828P-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerRecover.setStatus('current')
if mibBuilder.loadTexts: swPowerRecover.setDescription('Power Recover notification.')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates information about the last time the system rebooted. ')
swl2NotifyPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 2))
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 2, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setDescription('This object indicates the MAC address that violated the port security configuration.')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 3, 2, 15, 2, 2)).setObjects(("DES3828P-L2MGMT-MIB", "swL2PortSecurityPortIndex"), ("DES3828P-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setDescription("When the port_security trap is enabled, if there's a new MAC that violates the pre-defined port security configuration, a trap will be sent out ")
mibBuilder.exportSymbols("DES3828P-L2MGMT-MIB", VlanIndex=VlanIndex, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swDevInfoPowerTable=swDevInfoPowerTable, swL2macNotification=swL2macNotification, swl2NotifyPortSecurity=swl2NotifyPortSecurity, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2PortControlLearningState=swL2PortControlLearningState, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2PortInformationPortIndex=swL2PortInformationPortIndex, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2PortControlNwayState=swL2PortControlNwayState, swL2TrunkType=swL2TrunkType, swL2BroadcastSegFilterPorts=swL2BroadcastSegFilterPorts, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2PortCtrlTable=swL2PortCtrlTable, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2PortInformationLinkStatus=swL2PortInformationLinkStatus, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2PortInfoType=swL2PortInfoType, swL2PortInfoModuleType=swL2PortInfoModuleType, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2PortInformationNwayStatus=swL2PortInformationNwayStatus, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swDevInfoModuleType=swDevInfoModuleType, swL2PortControlFlowCtrlState=swL2PortControlFlowCtrlState, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2PortInfoEntry=swL2PortInfoEntry, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2IGMPMgmt=swL2IGMPMgmt, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, PortList=PortList, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swPowerFailure=swPowerFailure, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2VlanIndex=swL2VlanIndex, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swDevInfoPowerStatus=swDevInfoPowerStatus, swPowerRecover=swPowerRecover, swL2PortInformationMediumType=swL2PortInformationMediumType, swL2VlanAdvertisementTable=swL2VlanAdvertisementTable, swL2BroadcastSegCtrl=swL2BroadcastSegCtrl, swL2QOSMgmt=swL2QOSMgmt, swL2VlanAdvertisementEntry=swL2VlanAdvertisementEntry, swL2DevMgmt=swL2DevMgmt, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2PortControlMACNotifyState=swL2PortControlMACNotifyState, swL2TrafficSegTable=swL2TrafficSegTable, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2PortControlMediumType=swL2PortControlMediumType, swL2PortInformationTable=swL2PortInformationTable, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swL2VlanName=swL2VlanName, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2MACNotifyState=swL2MACNotifyState, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2TrunkIndex=swL2TrunkIndex, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2IGMPFastLeaveState=swL2IGMPFastLeaveState, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swPowerStatusChg=swPowerStatusChg, swL2PortInformationType=swL2PortInformationType, swL2PortInformationUnitID=swL2PortInformationUnitID, swL2PortInfoTable=swL2PortInfoTable, swL2MgmtMIBTrapPrefix=swL2MgmtMIBTrapPrefix, swL2TrunkMgmt=swL2TrunkMgmt, swL2DevInfo=swL2DevInfo, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2IGMPQueryState=swL2IGMPQueryState, swL2PortSecurityMode=swL2PortSecurityMode, swL2PortInformationModuleType=swL2PortInformationModuleType, swL2MgmtMIB=swL2MgmtMIB, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2DevCtrl=swL2DevCtrl, swDevInfoConsoleInUse=swDevInfoConsoleInUse, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2IGMPPortMap=swL2IGMPPortMap, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2MirrorPortState=swL2MirrorPortState, swL2IGMPRobustness=swL2IGMPRobustness, swL2PortControlUnitIndex=swL2PortControlUnitIndex, swDevInfoPowerEntry=swDevInfoPowerEntry, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2PortControlMulticastfilter=swL2PortControlMulticastfilter, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2BroadcastSegARPForwardPorts=swL2BroadcastSegARPForwardPorts, swl2NotificationBidings=swl2NotificationBidings, swL2PortControlTable=swL2PortControlTable, swDevInfoFrontPanelLedMode=swDevInfoFrontPanelLedMode, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2PortControlAdminState=swL2PortControlAdminState, swL2TrunkName=swL2TrunkName, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2PortInfoUnitIndex=swL2PortInfoUnitIndex, swL2PortCtrlLockState=swL2PortCtrlLockState, swDevInfoSystemUpTime=swDevInfoSystemUpTime, swDevInfoPowerID=swDevInfoPowerID, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, PYSNMP_MODULE_ID=swL2MgmtMIB, VlanId=VlanId, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2porttypechgNotification=swL2porttypechgNotification, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2PortMgmt=swL2PortMgmt, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2MirrorMgmt=swL2MirrorMgmt, swL2PortControlPortIndex=swL2PortControlPortIndex, swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2VlanAdvertiseState=swL2VlanAdvertiseState, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2IGMPVid=swL2IGMPVid, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2PortControlEntry=swL2PortControlEntry, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swDevInfoPowerUnitIndex=swDevInfoPowerUnitIndex, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2TrunkState=swL2TrunkState, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2VlanMgmt=swL2VlanMgmt, swL2PortInformationEntry=swL2PortInformationEntry, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2TrunkMember=swL2TrunkMember, swL2macNotifyInfo=swL2macNotifyInfo, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2PortInformationErrorDisabled=swL2PortInformationErrorDisabled, swL2DevAlarm=swL2DevAlarm, swL2TrafficSegPort=swL2TrafficSegPort)
