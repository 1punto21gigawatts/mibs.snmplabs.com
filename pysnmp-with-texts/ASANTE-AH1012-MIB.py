#
# PySNMP MIB module ASANTE-AH1012-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASANTE-AH1012-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, enterprises, Counter64, TimeTicks, Unsigned32, IpAddress, NotificationType, ModuleIdentity, Gauge32, MibIdentifier, ObjectIdentity, private, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "enterprises", "Counter64", "TimeTicks", "Unsigned32", "IpAddress", "NotificationType", "ModuleIdentity", "Gauge32", "MibIdentifier", "ObjectIdentity", "private", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
asante = MibIdentifier((1, 3, 6, 1, 4, 1, 298))
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

products = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1))
adaptCard = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 2))
concentrator = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3))
agentSw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 1))
agentFw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 2))
agentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 3))
agentNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5))
ipagentProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1))
concChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 1))
concConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 2))
concStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3))
concStateCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 4))
concNodeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 5))
concAlarmMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 6))
concBasicGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1))
eSmartHubConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1))
eStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1))
eStateCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1))
eGlobalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1))
agentNetProtoStkCapMap = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetProtoStkCapMap.setStatus('mandatory')
if mibBuilder.loadTexts: agentNetProtoStkCapMap.setDescription('This octet string represents the current protocol stack configuration supported by the agent, encoded as a bit string. Each protocol stack is represented by a single bit. When the value of a bit = 1, it indicates that the protocol stack on the agent represented by that bit is supported; when zero, the protocol stack is not supported. The number of octets in the string is always integer multiple of the octet. The first protocol stack will encode in the least significant bit of the first octet. Current, only IP Stack(bit 0) and IPX Stack(bit 1) were defined, all other bits should be zero.')
agentRunTimeImageMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentRunTimeImageMajorVer.setDescription('The major software version number of the agent run time image.')
agentRunTimeImageMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentRunTimeImageMinorVer.setDescription('The minor software version number of the agent run time image.')
agentImageLoadMode = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("localBoot", 2), ("netBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentImageLoadMode.setStatus('mandatory')
if mibBuilder.loadTexts: agentImageLoadMode.setDescription('Tells hub whether the software image is to be loaded from the FLASH EPROM or from over the network.')
agentRemoteBootInfo = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("eepromBootInfo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRemoteBootInfo.setStatus('mandatory')
if mibBuilder.loadTexts: agentRemoteBootInfo.setDescription('The method for getting boot parameter information.')
agentRemoteBootProtocol = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bootp-tftp", 2), ("tftp-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: agentRemoteBootProtocol.setDescription('The netboot protocol that used to load the agent software.')
agentRemoteBootFile = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: agentRemoteBootFile.setDescription('The boot file name that is sent to the boot file server by agent boot code during boot time.')
agentOutBandDialString = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandDialString.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutBandDialString.setDescription('This is the initialization string used by the Network Management station to establish the out-of-band connection for modem only.')
agentOutBandBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b1200", 2), ("b2400", 3), ("b4800", 4), ("b9600", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutBandBaudRate.setDescription('The baud rate setting for the out-of-band port.')
agentReset = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("not-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReset.setStatus('mandatory')
if mibBuilder.loadTexts: agentReset.setDescription("The object to allow software to perform 'push_button' system reset.")
agentHwReVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwReVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentHwReVer.setDescription('The hardware reversion number of the network management module.')
agentHwVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentHwVer.setDescription('The hardware model number of the network management module')
agentFwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentFwMajorVer.setDescription('The major firmware version number of the agent prom code.')
agentFwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentFwMinorVer.setDescription('The minor firmware version number of the agent prom code.')
ipagentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentIpAddr.setDescription("The ipagent's administrative IP address. The current operational IP address can be obtained from the ipAdEntAddr in the ipAddrTable. This parameter will take effect only after reset hub. This parameter will always be updated in the EEPROM.")
ipagentIpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentIpNetMask.setDescription("The ipagent's administrative IP subnet mask. The current operational IP subnet mask can be obtained from the ipAdEntMask in the ipAddrTable. This parameter will take effect only after reset hub. This parameter will always be updated in the EEPROM.")
ipagentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentDefaultGateway.setDescription("The ipagent's administrative default gateway IP address. The current operational IP default gateway IP address can be obtained from the ipRouteDest in the ipRouteTable. This parameter will take effect only after reset hub. This parameter will always be updated in the EEPROM.")
ipagentBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentBootServerAddr.setDescription('The IP address of the boot server that was used for booting this ipagent. This parameter will always be updated in the EEPROM.')
ipagentUnAuthIP = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthIP.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentUnAuthIP.setDescription('The IP address of the last station that tried to access this ipagent with an invalid community string.')
ipagentUnAuthComm = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthComm.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentUnAuthComm.setDescription('The community string of the last station that tried to access this ipagent with an invalid community string.')
ipagentTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2), )
if mibBuilder.loadTexts: ipagentTrapRcvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrTable.setDescription('Table consisting of the list of Network Management Stations that are to receive traps generated by this agent.')
ipagentTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ipagentTrapRcvrIpAddr"))
if mibBuilder.loadTexts: ipagentTrapRcvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrEntry.setDescription('Destination IP address and community string for a particular trap server. ')
ipagentTrapRcvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentTrapRcvrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrIpAddr.setDescription('IP address for trap server receiving trap. ')
ipagentTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrStatus.setDescription('Validation of individual trap receiver. If value of this object is set to invalid(3), then that particular entry is deemed invalid, meaning that the address for that entry is no longer valid because the entry has been removed from the table.')
ipagentTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrComm.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrComm.setDescription('Community string for traps sent to this trap receiver.')
concChassisType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("aH1012", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisType.setDescription("The concentrator's chassis type.")
concChassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("no-backplane", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisBkplType.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisBkplType.setDescription("The concentrator's chassis backplane type.")
concChassisBkplRev = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisBkplRev.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisBkplRev.setDescription("The concentrator's chassis backplane revision number.")
concChassisPsTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: concChassisPsTable.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisPsTable.setDescription("This table contains concentrator's power supply information.")
concChassisPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "concChassisPsIndex"))
if mibBuilder.loadTexts: concChassisPsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisPsEntry.setDescription('The entry in the table containing the information about a single power supply.')
concChassisPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisPsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisPsIndex.setDescription('The value of this object identifies the power supply table for which this entry contains power supply type and status.')
concChassisPsModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisPsModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisPsModuleType.setDescription('The value of this object identifies the power supply module type.')
concChassisPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("good", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisPsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisPsStatus.setDescription('The value of this object identifies the power supply module status.')
concChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("no-fan", 2), ("good", 3), ("bad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisFanStatus.setDescription('The value of this object identifies the fan status.')
concChassisGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGroupCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGroupCapacity.setDescription('The number of groups that can be contained within the concentrator. ')
concChassisGroupMap = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGroupMap.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGroupMap.setDescription('This octet string represents the current configuration of groups, encoded as a bit string, each group is represented by a single bit.')
concChassisGrpTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: concChassisGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpTable.setDescription('A table that contains information about the group/slot in this chassis.')
concChassisGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "concChassisGrpIndex"))
if mibBuilder.loadTexts: concChassisGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpEntry.setDescription('A list of information for each slot in this chassis.')
concChassisGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpIndex.setDescription('The value of this object identifies the chassis group table for which this entry contains group related information.')
concChassisGrpNumberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpNumberPort.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpNumberPort.setDescription('The number of port is available for up/down link within this group.')
concChassisGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpType.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpType.setDescription('The value represents the function of this group.')
concChassisGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpDescr.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpDescr.setDescription('A description of this group device.')
concChassisGrpHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: concChassisGrpHwRev.setDescription('The hardware revision number of this particular group.')
eSmartHubId = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubId.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHubId.setDescription('Hub MAC address (octet string) found from prom chip in hub.')
eSmartHubAssignedId = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubAssignedId.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHubAssignedId.setDescription('Assigned hub ID for Out-of-Band.')
eSmartHubTerSwitch = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("terminal", 2), ("pc-modem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubTerSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHubTerSwitch.setDescription('Status of position of PC/terminal switch located on rear panel of hub. Switches between serial and parallel communications for modem/PC or terminal connection to RS-232 Port. Up (off) for PC, down (on) for terminal. If position of switch is changed, there will be no change in this status until hub is reset.')
eSmartHubHwLoadPatStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSmartHubHwLoadPatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHubHwLoadPatStatus.setDescription('Which logic configuration pattern is loaded into the Programmable Logic Device PLD.')
eSmartHubHwLoadPatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubHwLoadPatCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHubHwLoadPatCapacity.setDescription('What kind of function the PLD can perform.')
eSmartHubNodeAgeTimer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSmartHubNodeAgeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHubNodeAgeTimer.setDescription('How long to keep node entry in node summary table, measured in sec. The maximum is 11 hours.')
eSmartHub3in1LnConStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("uTP", 2), ("aUI", 3), ("uTP-and-AUI", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHub3in1LnConStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHub3in1LnConStatus.setDescription('Status of 3In1 Uplink which is located on rear panel of hub. Describes the physical link type or types currently connected.')
eSmartHub3in1StateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("uTP", 2), ("bNC", 3), ("aUI", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSmartHub3in1StateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: eSmartHub3in1StateCtrl.setDescription('Whether using Auto-sense or manually selected a particular media type for the uplink connection. If using Auto-sense it first tries AUI. If AUI is not present then 10T. If neither AUI nor 10T is present, then it defaults to BNC.')
eGlobalHubReadableFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubReadableFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubReadableFrames.setDescription('Global counter of good or readable frames for this hub. Frame is between 64 and 1518 bytes in length and has SFD and good FCS.')
eGlobalHubMcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubMcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubMcastFrames.setDescription('Global counter of number of multicast frames for this hub. 1st bit in highest ordered bytes of destination address is set to 1. Broadcast packets are not included.')
eGlobalHubBcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubBcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubBcastFrames.setDescription('Global counter of number of broadcast frames for his hub. All 1s in network destination address. Multicast packets are not included.')
eGlobalHubFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubFrameTooLongs.setDescription('Global counter, for this hub, of data frames longer than 1518 bytes, with a SFD and good FCS.')
eGlobalHubRunts = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubRunts.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubRunts.setDescription('Global counter, for this hub, of data frames with size less than 64 bytes, with no CRC or alignment errors. ')
eGlobalHubAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubAlignmentErrors.setDescription('Global counter, for this hub, of frames which are not integer multiples of 1 byte.')
eGlobalHubFragmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubFragmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubFragmentErrors.setDescription('Global counter, for this hub, of frames greater than 2 bytes and less than 64 bytes, with SFD and bad FCS (CRC error).')
eGlobalHubFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubFCSErrors.setDescription('Global counter, for this hub, of frames that failed Cyclic Redundancy Check (CRC).')
eGlobalHubIFGErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubIFGErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubIFGErrors.setDescription('Global counter, for this hub, of occurrences of Interframe Gap Errors where time period between data frames is less than 5.5 micro seconds.')
eGlobalHubDataRateMismatchs = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubDataRateMismatchs.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubDataRateMismatchs.setDescription('Global counter, for this hub, of errors where incoming data rate is not with in the tolerance level of 10MHZ + or - 0.01%.')
eGlobalHubShortEvents = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubShortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubShortEvents.setDescription('Global counter, for this hub, of data burst where data is less than 10 bytes in length, with no SFD.')
eGlobalHubCollisions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubCollisions.setDescription('Global counter of collision flags, for this hub.')
eGlobalHubLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubLateCollisions.setDescription('Global counter, for this hub, of collisions occurring after the 64 byte collision window.')
eGlobalHubMJLPs = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubMJLPs.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubMJLPs.setDescription('Global counter of MAU jabber lockup protection where hub repeater chip goes into lockup state.')
eGlobalHubAutoPartitions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubAutoPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubAutoPartitions.setDescription('Global counter, for this hub, of all ports including 3in1 port being partitioned from network in response to 31 or more continuous collisions.')
eGlobalHubSFDMissings = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubSFDMissings.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubSFDMissings.setDescription('Global counter, for this hub, of a burst of data greater than or equal to 10 bytes in length with no SFD.')
eGlobalHubBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalHubBadFrames.setDescription('Global counter, for this hub, of total errored frame including toolong, runts, misaligned, or bad FCS.')
eGrpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3), )
if mibBuilder.loadTexts: eGrpStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatisticsTable.setDescription('Table of statistical information for each group.')
eGrpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "eGrpStatIndex"))
if mibBuilder.loadTexts: eGrpStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatisticsEntry.setDescription('Entry for individual group in table.')
eGrpStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatIndex.setDescription('The value of this object identifies the group for which this entry contains group statistical information.')
eGrpStatReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatReadableFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatReadableFrames.setDescription("Group counter of 'good' or readable frames. Frame is between 64 and 1518 bytes in length and has SFD and good FCS.")
eGrpStatMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatMcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatMcastFrames.setDescription('Group counter of number of muliticast frames. 1st bit in highest ordered bytes of destination address is set to 1. Broadcast packets are not included.')
eGrpStatBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatBcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatBcastFrames.setDescription('Group counter of number of broadcast frames. All 1s in network destination address. Multicast packets are not included.')
eGrpStatFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatFrameTooLongs.setDescription('Group counter for data frames longer than 1518 bytes, with a SFD and good FCS. ')
eGrpStatRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatRunts.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatRunts.setDescription('Group counter for data frames with size less than 64 bytes, with no CRC or alignment errors.')
eGrpStatAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatAlignmentErrors.setDescription('Group counter of frames which are not integer multiples of 1 byte .')
eGrpStatFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatFragmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatFragmentErrors.setDescription('Group counter of frames greater than 2 bytes and less than 64 bytes, with SFD and bad FCS (CRC error).')
eGrpStatFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatFCSErrors.setDescription('Group counter frames that failed Cyclic Redundancy Check (CRC).')
eGrpStatIFGErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatIFGErrors.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatIFGErrors.setDescription('Group counter of Interframe Gap Errors where time period between data frames is less than 5.5 micro seconds.')
eGrpStatDataRateMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatDataRateMismatchs.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatDataRateMismatchs.setDescription('Group counter of errors where incoming data rate is not with in the tolerance level of 10 MHZ + or - 0.01%.')
eGrpStatShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatShortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatShortEvents.setDescription('Group counter of data burst where data is less than 10 bytes in length, with no SFD.')
eGrpStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatCollisions.setDescription('Group counter of collision flags.')
eGrpStatLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatLateCollisions.setDescription('Group counter of collisions occurring after the 64 byte collision window.')
eGrpStatMJLPs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatMJLPs.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatMJLPs.setDescription('Group counter of MAU jabber lockup protection where hub repeater chip goes into lockup state.')
eGrpStatAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatAutoPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatAutoPartitions.setDescription('Group counter of ports in group autopartitioned in response to 31 or more continuous collisions.')
eGrpStatSFDMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatSFDMissings.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatSFDMissings.setDescription('Group counter of a burst of data greater than or equal to 10 bytes in length with no SFD.')
eGrpStatBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: eGrpStatBadFrames.setDescription('Group counter of total errored frames including toolong, runts, misaligned, or bad FCS.')
ePortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4), )
if mibBuilder.loadTexts: ePortStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatisticsTable.setDescription('Table for port specific network statistics.')
ePortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ePortGrpIndex"), (0, "ASANTE-AH1012-MIB", "ePortIndex"))
if mibBuilder.loadTexts: ePortStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatisticsEntry.setDescription('Entry for individual port in table.')
ePortGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePortGrpIndex.setDescription('The value of this object identifies the group for which this entry contains port statistical information.')
ePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePortIndex.setDescription('The value of this object identifies the port for which this entry contains port statistical information.')
ePortStatReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatReadableFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatReadableFrames.setDescription('Port counter of good or readable frames. Frame is between 64 and 1518 bytes in length and has SFD and good FCS.')
ePortStatMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatMcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatMcastFrames.setDescription('Port counter of number of muliticast frames. 1st bit in highest ordered bytes of destination address is set to 1. Broadcast packets are not included.')
ePortStatBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatBcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatBcastFrames.setDescription('Port counter of number of broadcast frames. All 1s in network destination address. Multicast packets are not included.')
ePortStatFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatFrameTooLongs.setDescription('Port counter for data frames longer than 1518 bytes, with a SFD and good FCS.')
ePortStatRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatRunts.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatRunts.setDescription('Port counter for data frames with size less than 64 bytes, with no CRC or alignment errors.')
ePortStatAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatAlignmentErrors.setDescription('Port counter of frames which are not integer multiples of 1 byte.')
ePortStatFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatFragmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatFragmentErrors.setDescription('Port counter of frames greater than 2 bytes and less than 64 bytes, with SFD and bad FCS (CRC error).')
ePortStatFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatFCSErrors.setDescription('Port counter of frames that failed Cyclic Redundancy Check (CRC).')
ePortStatIFGErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatIFGErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatIFGErrors.setDescription('Port counter of Interframe Gap Errors where time period between data frames is less than 5.5 micro seconds.')
ePortStatDataRateMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatDataRateMismatchs.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatDataRateMismatchs.setDescription('Port counter of errors where incoming data rate is not with in the tolerance level of 10 MHZ + or - 0.01%.')
ePortStatShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatShortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatShortEvents.setDescription('Port counter of data burst where data is less than 10 bytes in length, with no SFD.')
ePortStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatCollisions.setDescription('Port counter of collision flags.')
ePortStatLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatLateCollisions.setDescription('Port counter of collisions occurring after the 64 byte collision window.')
ePortStatMJLPs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatMJLPs.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatMJLPs.setDescription('Port counter of MAU jabber lockup protection where hub repeater chip goes into lockup state.')
ePortStatAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatAutoPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatAutoPartitions.setDescription('Port counter of number of times port was autopartitioned in response to 31 or more continuous collisions.')
ePortStatSFDMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatSFDMissings.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatSFDMissings.setDescription('Port counter of a burst of data greater than or equal to 10 bytes in length with no SFD.')
ePortStatBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatBadFrames.setDescription('Port counter of total errored frames including toolong, runts, misaligned, or bad FCS.')
eTrafficMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5), )
if mibBuilder.loadTexts: eTrafficMatrixTable.setStatus('mandatory')
if mibBuilder.loadTexts: eTrafficMatrixTable.setDescription('Table to analyze the number of packets received through network traffic by the size of each packet.')
eTrafficMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "eTrafficMatrixLength"))
if mibBuilder.loadTexts: eTrafficMatrixEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eTrafficMatrixEntry.setDescription('Individual entry in matrix of packet lengths table.')
eTrafficMatrixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTrafficMatrixLength.setStatus('mandatory')
if mibBuilder.loadTexts: eTrafficMatrixLength.setDescription('Starting length for each range in table.')
eTrafficMatrixRange = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("from-1-to-63-bytes", 2), ("from-64-to-127-bytes", 3), ("from-128-to-255-bytes", 4), ("from-256-to-511-bytes", 5), ("from-512-to-767-bytes", 6), ("from-768-to-1023-bytes", 7), ("from-1024-to-1518-bytes", 8), ("from-512-to-1023-bytes", 9), ("from-65-to-511-bytes", 10), ("exact-64-bytes", 11), ("over-1518-bytes", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTrafficMatrixRange.setStatus('mandatory')
if mibBuilder.loadTexts: eTrafficMatrixRange.setDescription('Range of packet sizes to be scanned for in network traffic.')
eTrafficMatrixFramesCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTrafficMatrixFramesCounts.setStatus('mandatory')
if mibBuilder.loadTexts: eTrafficMatrixFramesCounts.setDescription('Counter for number of frames received for particular range specified by the MatrixRange. ')
eSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6))
eSmartHubSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1))
eColGraphBar = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eColGraphBar.setStatus('mandatory')
if mibBuilder.loadTexts: eColGraphBar.setDescription('Information on hardware LED collision graph bar.')
eUtilGraphBar = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eUtilGraphBar.setStatus('mandatory')
if mibBuilder.loadTexts: eUtilGraphBar.setDescription('Information on hardware LED for utilization graph bar.')
ePortRateTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6), )
if mibBuilder.loadTexts: ePortRateTable.setStatus('optional')
if mibBuilder.loadTexts: ePortRateTable.setDescription('Network statistics for individual ports measured in Rate/Second.')
ePortRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ePortRateGrpIndex"), (0, "ASANTE-AH1012-MIB", "ePortRatePortIndex"))
if mibBuilder.loadTexts: ePortRateEntry.setStatus('optional')
if mibBuilder.loadTexts: ePortRateEntry.setDescription('Individual entry in port rate table.')
ePortRateGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateGrpIndex.setStatus('optional')
if mibBuilder.loadTexts: ePortRateGrpIndex.setDescription('The value of this object identifies the group for which this entry contains port statistical information.')
ePortRatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRatePortIndex.setStatus('optional')
if mibBuilder.loadTexts: ePortRatePortIndex.setDescription('This value identifies the port for which this entry contains port statistical information.')
ePortRateReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateReadableFrames.setStatus('optional')
if mibBuilder.loadTexts: ePortRateReadableFrames.setDescription('Rate of occurrence of good or readable frames.')
ePortRateMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateMcastFrames.setStatus('optional')
if mibBuilder.loadTexts: ePortRateMcastFrames.setDescription('Rate of occurrence of number of muliticast frames. 1st bit in highest ordered bytes of destination address is set to 1. Broadcast packets are not included.')
ePortRateBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateBcastFrames.setStatus('optional')
if mibBuilder.loadTexts: ePortRateBcastFrames.setDescription('Rate of occurrence of number of broadcast frames. All 1s in network destination address. Multicast packets are not included.')
ePortRateFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateFrameTooLongs.setStatus('optional')
if mibBuilder.loadTexts: ePortRateFrameTooLongs.setDescription('Rate of occurrence of data frames longer than 1518 bytes, with a SFD and good FCS.')
ePortRateRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateRunts.setStatus('optional')
if mibBuilder.loadTexts: ePortRateRunts.setDescription('Rate of occurrence of data frames with size less than 64 bytes, with no CRC or alignment errors.')
ePortRateAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateAlignmentErrors.setStatus('optional')
if mibBuilder.loadTexts: ePortRateAlignmentErrors.setDescription('Rate of occurrence of frames which are not integer multiples of 1 byte.')
ePortRateFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateFragmentErrors.setStatus('optional')
if mibBuilder.loadTexts: ePortRateFragmentErrors.setDescription('Rate of occurrence of frames greater than 2 bytes and less than 64 bytes, with SFD and bad FCS (CRC error).')
ePortRateFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateFCSErrors.setStatus('optional')
if mibBuilder.loadTexts: ePortRateFCSErrors.setDescription('Rate of occurrence of frames that failed Cyclic Redundancy Check (CRC).')
ePortRateIFGErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateIFGErrors.setStatus('optional')
if mibBuilder.loadTexts: ePortRateIFGErrors.setDescription('Rate of occurrence of interframe Gap Errors where time period between data frames is less than 5.5 micro seconds.')
ePortRateDataRateMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateDataRateMismatch.setStatus('optional')
if mibBuilder.loadTexts: ePortRateDataRateMismatch.setDescription('Rate of occurrence of errors where incoming data rate is not with in the tolerance level of 10 MHz + or - 0.01%.')
ePortRateShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateShortEvents.setStatus('optional')
if mibBuilder.loadTexts: ePortRateShortEvents.setDescription('Rate of occurrence of data burst where data is less than 10 bytes in length, with no SFD.')
ePortRateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateCollisions.setStatus('optional')
if mibBuilder.loadTexts: ePortRateCollisions.setDescription('Rate of occurrence of collision flags.')
ePortRateLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateLateCollisions.setStatus('optional')
if mibBuilder.loadTexts: ePortRateLateCollisions.setDescription('Rate of occurrence of collisions occurring after the 64 byte collision window.')
ePortRateMJLPs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateMJLPs.setStatus('optional')
if mibBuilder.loadTexts: ePortRateMJLPs.setDescription('Rate of occurrence of MAU jabber lockup protection where hub repeater chip goes into lockup state.')
ePortRateAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateAutoPartitions.setStatus('optional')
if mibBuilder.loadTexts: ePortRateAutoPartitions.setDescription('Rate of occurrence of times port was autopartitioned in response to 31 or more continuous collisions.')
ePortRateSFDMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateSFDMissings.setStatus('optional')
if mibBuilder.loadTexts: ePortRateSFDMissings.setDescription('Rate of occurrence of a burst of data greater than or equal to 10 bytes in length with no SFD.')
ePortRateBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateBadFrames.setStatus('optional')
if mibBuilder.loadTexts: ePortRateBadFrames.setDescription('Rate of occurrence of total errored frames including toolong, runts, misaligned, or bad FCS.')
ePortStateCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1), )
if mibBuilder.loadTexts: ePortStateCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateCtrlTable.setDescription('Table for port control parameters.')
ePortStateCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ePortStateGrpIndex"), (0, "ASANTE-AH1012-MIB", "ePortStatePortIndex"))
if mibBuilder.loadTexts: ePortStateCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateCtrlEntry.setDescription('Individual entry of port control in table.')
ePortStateGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateGrpIndex.setDescription('The value of this object identifies the group for which this entry contains port control information.')
ePortStatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatePortIndex.setDescription('This value identifies the port for which this entry contains port control information.')
ePortStateType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("bNC", 2), ("aUI", 3), ("rJ45", 4), ("foil", 5), ("three-in-one", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateType.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateType.setDescription('Type of cabling physically connected to port.')
ePortStateLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("linkon", 2), ("linkoff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateLinkStatus.setDescription('Link status for particular port. On=physical link if link test enabled. Off=no physical link exists or link test is disabled.')
ePortStateLinkIntegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("linkTestEnable", 2), ("linkTestDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateLinkIntegTest.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateLinkIntegTest.setDescription('Set can enable or disabled link integrity test. Get will say if link integrity test is enabled (2) or disabled (3).')
ePortStateAutoPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("autopartitioned", 2), ("notautopartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateAutoPartStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateAutoPartStatus.setDescription('Whether port has been autopartitioned (2) or not autopartitioned (3).')
ePortStateJabberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateJabberStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateJabberStatus.setDescription('Jabber detection for port. If On(2), then jabber occurred on this port. Off(3), then no jabber occurred or jabber detection has been manually disabled.')
ePortStateJabberState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateJabberState.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateJabberState.setDescription('Set can enable or disable jabber detection test. Get will say if jabber detection test is enabled (2) or disabled (3).')
ePortStateAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateAdminState.setDescription('Set will manually enable or disable any port. Get will say if port has been enabled (2) or disabled (3).')
ePortStateRDTState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("unreduce", 2), ("reduce", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateRDTState.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStateRDTState.setDescription('Whether RecvThreshold has been enabled or disabled. Can use this to lower noise threshold (tolerance) so that longer twisted pair links can be used.')
ePortStatePolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("normal", 2), ("reversed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatePolarityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatePolarityStatus.setDescription('Polarity is correct (2) or not for this port.')
ePortStatePolarityState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStatePolarityState.setStatus('mandatory')
if mibBuilder.loadTexts: ePortStatePolarityState.setDescription('Autopolarity correction enabled or disabled. Allows hub to make electrical corrections automatically if cable does not reverse polarity within wire pairs. If do not want this correction to take place, autocorrection can be disabled.')
nodeSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1), )
if mibBuilder.loadTexts: nodeSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryTable.setDescription('Node summary of all traffic through hub.')
nodeSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "nodeSummaryGrpIndex"), (0, "ASANTE-AH1012-MIB", "nodeSummaryPortIndex"), (0, "ASANTE-AH1012-MIB", "nodeSummarySrcMacAddr"), (0, "ASANTE-AH1012-MIB", "nodeSummaryDestMacAddr"))
if mibBuilder.loadTexts: nodeSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryEntry.setDescription('Individual entry in node summary table. ')
nodeSummaryGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryGrpIndex.setDescription('Group Id for identifying the group where node activity is detected.')
nodeSummaryPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryPortIndex.setDescription('Port Id for identifying the port where node activity is detected.')
nodeSummarySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummarySrcMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummarySrcMacAddr.setDescription('The source MAC address of the node that is transmitting frames received by this port.')
nodeSummaryDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryDestMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryDestMacAddr.setDescription('The destination MAC address of the node to which frames are being received by this port. ')
nodeSummaryEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryEtherType.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryEtherType.setDescription('The 2 bytes after the source (src) address in packet.')
nodeSummaryIpAddrPair = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryIpAddrPair.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryIpAddrPair.setDescription('Destination and source IP address if packet is an Ethernet IP packet. It the packet is not an Ethernet IP packet, then the information may not be accurate.')
nodeSummaryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSummaryTimeStamp.setDescription('nodeSummary entry time stamp (in hundredths of a second) since the network management portion of the system was last re-initialized.')
nodeSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2))
nodeSecuLev1Table = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1), )
if mibBuilder.loadTexts: nodeSecuLev1Table.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1Table.setDescription('Table of nodes which have access to particular ports. Nodes are identified by MAC address.')
nodeSecuLev1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "nodeSecuLev1GrpIndex"), (0, "ASANTE-AH1012-MIB", "nodeSecuLev1PortIndex"))
if mibBuilder.loadTexts: nodeSecuLev1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1Entry.setDescription('Individual entry for node security table.')
nodeSecuLev1GrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecuLev1GrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1GrpIndex.setDescription('Group ID for port which verifying node access.')
nodeSecuLev1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecuLev1PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1PortIndex.setDescription('Specific port for which verifying node access.')
nodeSecuLev1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecuLev1Status.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1Status.setDescription('Address is valid or invalid.')
nodeSecuLev1AllowedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecuLev1AllowedAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1AllowedAddr.setDescription('MAC address of nodes allowed for particular port.')
nodeSecuLev1Action = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("partition-port", 2), ("send-trap", 3), ("partition-port-and-send-trap", 4), ("send-trap-and-request-page", 5), ("partition-port-and-send-trap-and-request-page", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecuLev1Action.setStatus('mandatory')
if mibBuilder.loadTexts: nodeSecuLev1Action.setDescription('Set action for node intrusion violation.')
thresholdAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1))
thresholdLev1Table = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1), )
if mibBuilder.loadTexts: thresholdLev1Table.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Table.setDescription('Threshold/trap table.')
thresholdLev1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "thresholdLev1Index"))
if mibBuilder.loadTexts: thresholdLev1Entry.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Entry.setDescription('Individual entry in threshold trap table.')
thresholdLev1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdLev1Index.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Index.setDescription('An index that uniquely identifies an entry in the alarm table.')
thresholdLev1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Status.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Status.setDescription('Status of entry in threshold/trap table.')
thresholdLev1Target = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hub", 2), ("port", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Target.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Target.setDescription('Set target for threshold definition. Either whole hub(2) or particular port (3).')
thresholdLev1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1GroupIndex.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1GroupIndex.setDescription('Group ID for trap set. One note--if the target is selected as hub, the group index will be ignored.')
thresholdLev1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1PortIndex.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1PortIndex.setDescription('Port number for trap set. One note--if the target is selected as hub, the port index will be ignored.')
thresholdLev1Subject = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("readable-frames", 2), ("mcast-frames", 3), ("bcast-frames", 4), ("frame-too-longs", 5), ("runts", 6), ("alignment-errors", 7), ("fragment-errors", 8), ("fCS-errors", 9), ("iFG-errors", 10), ("data-rate-mismatch", 11), ("short-events", 12), ("collisions", 13), ("late-collisions", 14), ("auto-partitions", 15), ("sfd-missing", 16), ("bad-frames", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Subject.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Subject.setDescription('Variable checking for in trap. These are the type of frames that a trap will be verified against.')
thresholdLev1SampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("event-per-second", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1SampleType.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1SampleType.setDescription('The method of sampling the selected variable and calculating the value to be compared against the threshold.')
thresholdLev1StartupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("rising", 2), ("falling", 3), ("rising-or-falling", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1StartupAlarm.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1StartupAlarm.setDescription('When the trap is triggered in relation to value set. When goes above (2), below (3), or changes at all from (4).')
thresholdLev1WaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1WaterMark.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1WaterMark.setDescription('Counter of threshold.')
thresholdLev1DetectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdLev1DetectedValue.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1DetectedValue.setDescription('The value of the statistic for the last sampling period.')
thresholdLev1RisingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("partition-port", 2), ("send-trap", 3), ("partition-port-and-send-trap", 4), ("send-trap-and-request-page", 5), ("partition-port-and-send-trap-and-request-page", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1RisingEvent.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1RisingEvent.setDescription('How to respond to a triggered event for a rising event.')
thresholdLev1FallingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("partition-port", 2), ("send-trap", 3), ("partition-port-and-send-trap", 4), ("send-trap-and-request-page", 5), ("partition-port-and-send-trap-and-request-page", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1FallingEvent.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1FallingEvent.setDescription('How to respond to a triggered event for a falling event.')
thresholdLev1Interval = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Interval.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1Interval.setDescription('The interval in seconds over which the data is sampled.')
thresholdLev1OwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1OwnerString.setStatus('optional')
if mibBuilder.loadTexts: thresholdLev1OwnerString.setDescription('8-byte octet reserved for the owner who defined this entry.')
adapterProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 1))
concProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2))
hub1012 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 1))
hub1012_bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 2)).setLabel("hub1012-bridge")
thresholdLev1 = NotificationType((1, 3, 6, 1, 4, 1, 298, 2, 2, 1) + (0,1)).setObjects(("ASANTE-AH1012-MIB", "thresholdLev1Target"), ("ASANTE-AH1012-MIB", "thresholdLev1GroupIndex"), ("ASANTE-AH1012-MIB", "thresholdLev1PortIndex"), ("ASANTE-AH1012-MIB", "thresholdLev1Subject"), ("ASANTE-AH1012-MIB", "thresholdLev1SampleType"), ("ASANTE-AH1012-MIB", "thresholdLev1WaterMark"), ("ASANTE-AH1012-MIB", "thresholdLev1DetectedValue"), ("ASANTE-AH1012-MIB", "thresholdLev1OwnerString"), ("ASANTE-AH1012-MIB", "thresholdLev1RisingEvent"), ("ASANTE-AH1012-MIB", "thresholdLev1FallingEvent"))
if mibBuilder.loadTexts: thresholdLev1.setDescription('The SNMP trap that is generated when an alarm entry crosses its rising threshold or falling threshold, and generates an event that is configured for sending SNMP traps.')
nodeSecuLevel1 = NotificationType((1, 3, 6, 1, 4, 1, 298, 2, 2, 1) + (0,2))
if mibBuilder.loadTexts: nodeSecuLevel1.setDescription('The SNMP trap that is generated when the MAC layer address of the incoming frame from a particular port does not match the pre-assigned address with that port, and generates an event that is configured for sending SNMP traps.')
mibBuilder.exportSymbols("ASANTE-AH1012-MIB", concChassisPsTable=concChassisPsTable, ePortStatSFDMissings=ePortStatSFDMissings, ePortRateEntry=ePortRateEntry, agentHwReVer=agentHwReVer, ePortStatIFGErrors=ePortStatIFGErrors, agentRemoteBootProtocol=agentRemoteBootProtocol, PhysAddress=PhysAddress, ipagentTrapRcvrTable=ipagentTrapRcvrTable, eGrpStatBadFrames=eGrpStatBadFrames, thresholdLev1PortIndex=thresholdLev1PortIndex, concConfiguration=concConfiguration, adaptCard=adaptCard, ePortStateType=ePortStateType, thresholdLev1Table=thresholdLev1Table, eGlobalHubIFGErrors=eGlobalHubIFGErrors, ePortStatShortEvents=ePortStatShortEvents, eGrpStatMcastFrames=eGrpStatMcastFrames, ePortRatePortIndex=ePortRatePortIndex, nodeSummaryEntry=nodeSummaryEntry, eGlobalHubCollisions=eGlobalHubCollisions, ePortRateAutoPartitions=ePortRateAutoPartitions, hub1012_bridge=hub1012_bridge, concentrator=concentrator, eGrpStatIndex=eGrpStatIndex, nodeSecuLev1Action=nodeSecuLev1Action, ePortStateLinkIntegTest=ePortStateLinkIntegTest, nodeSecurity=nodeSecurity, eTrafficMatrixTable=eTrafficMatrixTable, eSmartHubAssignedId=eSmartHubAssignedId, ePortStateLinkStatus=ePortStateLinkStatus, eSmartHubId=eSmartHubId, nodeSecuLev1Status=nodeSecuLev1Status, thresholdLev1Entry=thresholdLev1Entry, ePortRateIFGErrors=ePortRateIFGErrors, nodeSummaryDestMacAddr=nodeSummaryDestMacAddr, ePortStatAlignmentErrors=ePortStatAlignmentErrors, concChassisGroupMap=concChassisGroupMap, agentFwMajorVer=agentFwMajorVer, concChassisGrpTable=concChassisGrpTable, eGrpStatIFGErrors=eGrpStatIFGErrors, agentSw=agentSw, eGlobalHubDataRateMismatchs=eGlobalHubDataRateMismatchs, eGrpStatFCSErrors=eGrpStatFCSErrors, eGrpStatFrameTooLongs=eGrpStatFrameTooLongs, concProductId=concProductId, thresholdAlarm=thresholdAlarm, ipagentTrapRcvrIpAddr=ipagentTrapRcvrIpAddr, concChassis=concChassis, nodeSummarySrcMacAddr=nodeSummarySrcMacAddr, ePortStatCollisions=ePortStatCollisions, eGlobalStatistics=eGlobalStatistics, eGrpStatShortEvents=eGrpStatShortEvents, ePortStatAutoPartitions=ePortStatAutoPartitions, eSmartHub3in1StateCtrl=eSmartHub3in1StateCtrl, ePortStatisticsEntry=ePortStatisticsEntry, eSmartHub3in1LnConStatus=eSmartHub3in1LnConStatus, concStateCtrl=concStateCtrl, eSmartHubTerSwitch=eSmartHubTerSwitch, ePortRateFrameTooLongs=ePortRateFrameTooLongs, ePortRateMJLPs=ePortRateMJLPs, eSmartHubNodeAgeTimer=eSmartHubNodeAgeTimer, concChassisGrpIndex=concChassisGrpIndex, concChassisGrpNumberPort=concChassisGrpNumberPort, eSmartHubHwLoadPatCapacity=eSmartHubHwLoadPatCapacity, agentNetProtoStkCapMap=agentNetProtoStkCapMap, ePortStateRDTState=ePortStateRDTState, ePortStateGrpIndex=ePortStateGrpIndex, eUtilGraphBar=eUtilGraphBar, thresholdLev1DetectedValue=thresholdLev1DetectedValue, eGrpStatisticsTable=eGrpStatisticsTable, ePortStatFCSErrors=ePortStatFCSErrors, nodeSummaryIpAddrPair=nodeSummaryIpAddrPair, nodeSecuLev1Table=nodeSecuLev1Table, ePortStatReadableFrames=ePortStatReadableFrames, ePortStateJabberStatus=ePortStateJabberStatus, eGlobalHubLateCollisions=eGlobalHubLateCollisions, eGrpStatLateCollisions=eGrpStatLateCollisions, eGrpStatRunts=eGrpStatRunts, nodeSecuLev1AllowedAddr=nodeSecuLev1AllowedAddr, productId=productId, eTrafficMatrixRange=eTrafficMatrixRange, hub1012=hub1012, ePortStatRunts=ePortStatRunts, ePortStatMJLPs=ePortStatMJLPs, ePortRateAlignmentErrors=ePortRateAlignmentErrors, nodeSecuLev1PortIndex=nodeSecuLev1PortIndex, eSmartHubSpec=eSmartHubSpec, ePortStateAutoPartStatus=ePortStateAutoPartStatus, eGlobalHubBadFrames=eGlobalHubBadFrames, thresholdLev1SampleType=thresholdLev1SampleType, agentRunTimeImageMinorVer=agentRunTimeImageMinorVer, nodeSummaryTable=nodeSummaryTable, eTrafficMatrixEntry=eTrafficMatrixEntry, eTrafficMatrixFramesCounts=eTrafficMatrixFramesCounts, eSmartHubHwLoadPatStatus=eSmartHubHwLoadPatStatus, ePortRateGrpIndex=ePortRateGrpIndex, agentRemoteBootInfo=agentRemoteBootInfo, ipagentIpAddr=ipagentIpAddr, DisplayString=DisplayString, eColGraphBar=eColGraphBar, ePortGrpIndex=ePortGrpIndex, products=products, eGrpStatMJLPs=eGrpStatMJLPs, ePortStateCtrlTable=ePortStateCtrlTable, ePortStateAdminState=ePortStateAdminState, eGrpStatReadableFrames=eGrpStatReadableFrames, thresholdLev1Subject=thresholdLev1Subject, concChassisType=concChassisType, concChassisPsStatus=concChassisPsStatus, concChassisGrpType=concChassisGrpType, eGrpStatDataRateMismatchs=eGrpStatDataRateMismatchs, eSpecific=eSpecific, ePortRateDataRateMismatch=ePortRateDataRateMismatch, eGlobalHubShortEvents=eGlobalHubShortEvents, thresholdLev1Target=thresholdLev1Target, agentRunTimeImageMajorVer=agentRunTimeImageMajorVer, nodeSecuLev1Entry=nodeSecuLev1Entry, agentRemoteBootFile=agentRemoteBootFile, ePortRateLateCollisions=ePortRateLateCollisions, concBasicGrp=concBasicGrp, asante=asante, ePortStatMcastFrames=ePortStatMcastFrames, eGrpStatFragmentErrors=eGrpStatFragmentErrors, ePortRateRunts=ePortRateRunts, ePortRateMcastFrames=ePortRateMcastFrames, concChassisBkplType=concChassisBkplType, eGrpStatAutoPartitions=eGrpStatAutoPartitions, eGlobalHubFrameTooLongs=eGlobalHubFrameTooLongs, concChassisFanStatus=concChassisFanStatus, ePortStatFragmentErrors=ePortStatFragmentErrors, ePortStatePortIndex=ePortStatePortIndex, eGrpStatisticsEntry=eGrpStatisticsEntry, eSmartHubConfig=eSmartHubConfig, agentImageLoadMode=agentImageLoadMode, concChassisGroupCapacity=concChassisGroupCapacity, eGlobalHubMJLPs=eGlobalHubMJLPs, ePortStatBcastFrames=ePortStatBcastFrames, concChassisGrpHwRev=concChassisGrpHwRev, ePortRateFCSErrors=ePortRateFCSErrors, ePortRateCollisions=ePortRateCollisions, concChassisPsEntry=concChassisPsEntry, ePortRateBadFrames=ePortRateBadFrames, thresholdLev1RisingEvent=thresholdLev1RisingEvent, eGlobalHubReadableFrames=eGlobalHubReadableFrames, eGlobalHubAutoPartitions=eGlobalHubAutoPartitions, ePortIndex=ePortIndex, ePortRateShortEvents=ePortRateShortEvents, eGlobalHubBcastFrames=eGlobalHubBcastFrames, ipagentTrapRcvrEntry=ipagentTrapRcvrEntry, eGlobalHubFragmentErrors=eGlobalHubFragmentErrors, concChassisGrpDescr=concChassisGrpDescr, ePortStatePolarityState=ePortStatePolarityState, thresholdLev1OwnerString=thresholdLev1OwnerString, nodeSummaryPortIndex=nodeSummaryPortIndex, ePortStatisticsTable=ePortStatisticsTable, concChassisBkplRev=concChassisBkplRev, concAlarmMgt=concAlarmMgt, ePortStateJabberState=ePortStateJabberState, eGlobalHubMcastFrames=eGlobalHubMcastFrames, eTrafficMatrixLength=eTrafficMatrixLength, snmpAgent=snmpAgent, thresholdLev1Interval=thresholdLev1Interval, ipagentUnAuthComm=ipagentUnAuthComm, eGlobalHubSFDMissings=eGlobalHubSFDMissings, ePortStatBadFrames=ePortStatBadFrames, eGrpStatBcastFrames=eGrpStatBcastFrames, agentFw=agentFw, ipagentUnAuthIP=ipagentUnAuthIP, concStatistics=concStatistics, thresholdLev1Status=thresholdLev1Status, ePortRateTable=ePortRateTable, concChassisPsModuleType=concChassisPsModuleType, ePortStatDataRateMismatchs=ePortStatDataRateMismatchs, agentFwMinorVer=agentFwMinorVer, thresholdLev1StartupAlarm=thresholdLev1StartupAlarm, eGlobalHubAlignmentErrors=eGlobalHubAlignmentErrors, eStateCtrl=eStateCtrl, ePortRateSFDMissings=ePortRateSFDMissings, thresholdLev1FallingEvent=thresholdLev1FallingEvent, concChassisPsIndex=concChassisPsIndex, eGlobalHubRunts=eGlobalHubRunts, ePortRateReadableFrames=ePortRateReadableFrames, eGlobalHubFCSErrors=eGlobalHubFCSErrors, nodeSecuLevel1=nodeSecuLevel1, agentHwVer=agentHwVer, ipagentTrapRcvrComm=ipagentTrapRcvrComm, nodeSecuLev1GrpIndex=nodeSecuLev1GrpIndex, thresholdLev1Index=thresholdLev1Index, agentHw=agentHw, concNodeMgt=concNodeMgt, ePortStateCtrlEntry=ePortStateCtrlEntry, ipagentIpNetMask=ipagentIpNetMask, ePortRateBcastFrames=ePortRateBcastFrames, agentOutBandDialString=agentOutBandDialString, ePortStatFrameTooLongs=ePortStatFrameTooLongs, thresholdLev1GroupIndex=thresholdLev1GroupIndex, agentOutBandBaudRate=agentOutBandBaudRate, ipagentBootServerAddr=ipagentBootServerAddr, ePortStatLateCollisions=ePortStatLateCollisions, ePortRateFragmentErrors=ePortRateFragmentErrors, concChassisGrpEntry=concChassisGrpEntry, nodeSummaryEtherType=nodeSummaryEtherType, eStatistics=eStatistics, ipagentProtocol=ipagentProtocol, adapterProductId=adapterProductId, eGrpStatCollisions=eGrpStatCollisions, eGrpStatSFDMissings=eGrpStatSFDMissings, thresholdLev1=thresholdLev1, ipagentDefaultGateway=ipagentDefaultGateway, eGrpStatAlignmentErrors=eGrpStatAlignmentErrors, ePortStatePolarityStatus=ePortStatePolarityStatus, agentNetProtocol=agentNetProtocol, ipagentTrapRcvrStatus=ipagentTrapRcvrStatus, agentReset=agentReset, nodeSummaryTimeStamp=nodeSummaryTimeStamp, thresholdLev1WaterMark=thresholdLev1WaterMark, nodeSummaryGrpIndex=nodeSummaryGrpIndex)
