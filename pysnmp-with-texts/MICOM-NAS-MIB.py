#
# PySNMP MIB module MICOM-NAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-NAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Counter64, TimeTicks, NotificationType, Integer32, Bits, ModuleIdentity, Unsigned32, iso, IpAddress, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Counter64", "TimeTicks", "NotificationType", "Integer32", "Bits", "ModuleIdentity", "Unsigned32", "iso", "IpAddress", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_nas = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16)).setLabel("micom-nas")
nasBase = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1))
nasStat = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2))
nasOscar = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3))
nasDn = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4))
nasNvParam = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 5))
nasOSCARHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasOSCARHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARHelloTime.setDescription("NAME = ServerAgeingTime; DESC = The Server age time for ageing the registered \\ MPA entries.; HELP = If the server does not receive \\ a HELLO packet from the MPA within this time \\ the MPA's registered numbers will be removed. \\ This accounts for MPAs coming up and going down. \\ The value should be a multiple \\ of the MPA's HelloTime. Recommended value \\ is atleast twice of that of the MPA's \\ HelloTime. This parameter is stored \\ in permanent storage whose copy is \\ accessible thru the MIB object \\ nasNvOSCARHelloTime.; CAPABILITIES = NET_CFG, VPN_NONE;")
nasOSCARCntrZero = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nasOSCARCntrZero.setStatus('obsolete')
if mibBuilder.loadTexts: nasOSCARCntrZero.setDescription('NAME = ServerCounterReset; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Facility to zero the statistical counters \\ of this NAS.; HELP = Setting this parameter to reset will \\ zero out the counters from the NAS \\ Stat Group. This is useful when collecting \\ statistics over a period of time for analysis; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOSCARTableSize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARTableSize.setDescription('NAME = NumofRegisteredMPAs; DESC = Aggregrate of MPAs (belonging to all customers) \\ that are currently registered with this server; HELP = A zero value would either mean \\ that no MPAs are currently active \\ or are reachable by this server, or this \\ server is not known to the MPAs; CAPABILITIES = NET_CFG, VPN_NONE;')
nasDNDNAdbSize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNDNAdbSize.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNDNAdbSize.setDescription('NAME = NumofRegisteredDNs; DESC = Aggregrate of DNs (belonging to all customers) \\ that are currently registered with this server. HELP = A zero value would either mean \\ that no MPAs are currently active \\ or are reachable by this server, or this \\ server is not known to the MPAs; CAPABILITIES = NET_CFG, VPN_NONE;')
nasInDNARequests = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInDNARequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasInDNARequests.setDescription('NAME = AddressMappingRequestRecvd; DESC = Aggregrate of Address Mapping requests \\ received by this server from MPAs \\ belonging to all customers served by this NAS; HELP = Number of DN-DNA mappings requested \\ by this NAS.; CAPABILITIES = NET_CFG, VPN_NONE;')
nasInDNAResolveds = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInDNAResolveds.setStatus('mandatory')
if mibBuilder.loadTexts: nasInDNAResolveds.setDescription('NAME = AddressMappingsResolved; DESC = Number of DN-DNA mappings resolved by \\ this NAS.; HELP = Number of DN-DNA mappings resolved by \\ this NAS. This includes requests from \\ MPAs belonging to all the Customers \\ serviced by this Network Address Server.; CAPABILITIES = NET_CFG, VPN_NONE;')
nasInDNAUnResolveds = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInDNAUnResolveds.setStatus('mandatory')
if mibBuilder.loadTexts: nasInDNAUnResolveds.setDescription('NAME = AddressMappingRequestFails; DESC = Aggregrate of address mapping requests this \\ server was unable to resolve.; HELP = Includes all customers serviced by this server. \\ A very high value could indicate call attempts \\ to a telephone serviced by a down or \\ unreachable MPA; CAPABILITIES = NET_CFG, VPN_NONE;')
nasInNACHellos = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInNACHellos.setStatus('mandatory')
if mibBuilder.loadTexts: nasInNACHellos.setDescription('NAME = HellosRecvd; DESC = Aggregrate of HELLO messages received from \\ all MPAs belonging to all customers that \\ are serviced by this NAS; HELP = Includes Hellos from MPAs \\ belonging to all the Customers \\ serviced by this Network Address Server.; CAPABILITIES = NET_CFG, VPN_NONE;')
nasInRegisters = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInRegisters.setStatus('mandatory')
if mibBuilder.loadTexts: nasInRegisters.setDescription("NAME = RegisterMessageRcvd; DESC = Aggregrate of Register messages received \\ by this server from MPAs belonging to all\\ customers serviced by this NAS ; HELP = If this value is greater than NumofRegisterdMPAs \\ it would indicate that a few MPAs have had to \\ re-register. A MPA may have to re-register if \\ this server aged out it's registered entries \\ or if the MPA had a configuration change or \\ a MPA has rebooted; CAPABILITIES = NET_CFG, VPN_NONE;")
nasInUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInUnknowns.setStatus('mandatory')
if mibBuilder.loadTexts: nasInUnknowns.setDescription('NAME = UnknownMessagesReceived; DESC = Number of Unknown messages received \\ by this server.; HELP = This includes messages \\ from MPAs belonging to all the Customers \\ serviced by this Network Address Server. \\ This value should be zero. A non-zero \\ value would indicate a different \\ application sharing the same UDP port; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOSCARRegSuccess = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARRegSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARRegSuccess.setDescription('NAME = SuccessfulRegistrations; DESC = Number of Register packets successfully \\ serviced by this server.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOSCARRegFails = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARRegFails.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARRegFails.setDescription('NAME = RegistrationFails; DESC = Number of MPA registration attempts failed \\ by this server; HELP = The server may fail an registration atttempt \\ for the following reasons : \\ the received packet was incorrect or \\ the server ran out of memory; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOSCARTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARTimedOuts.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARTimedOuts.setDescription('NAME = NumOfMPAsTimedOut; DESC = Number of MPAs aged out from the database \\ as HELLO messages were not received in time; HELP = A very high number could be a due to : \\ IP network congestion or failure and hence \\ HELLO messages are not reaching this server, or \\ The MPAs have gone out of service; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOutNASHellos = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutNASHellos.setStatus('mandatory')
if mibBuilder.loadTexts: nasOutNASHellos.setDescription('NAME = NumOfNASHellosSent; DESC = Number of NAS Hello Messages sent out \\ by this NAS.; HELP = These messages are sent \\ if solicited by the MPA. The MPA solicits \\ a HELLO message from the server in \\ an attempt to re-establish communication; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOutRegisterRequests = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutRegisterRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasOutRegisterRequests.setDescription('NAME = ; DESC = Number of NAS Register-Request Messages \\ sent out by this NAS.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOSCARTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1), )
if mibBuilder.loadTexts: nasOSCARTable.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARTable.setDescription('NAME = ; DESC = The NAS MPA table listing; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nasOSCAREntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1), ).setIndexNames((0, "MICOM-NAS-MIB", "nasOSCARCustomerId"), (0, "MICOM-NAS-MIB", "nasOSCARDNADigits"))
if mibBuilder.loadTexts: nasOSCAREntry.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCAREntry.setDescription('NAME = ; DESC = Each entry corresponds to one MPA \\ registered with the system.; HELP = ; CAPABILITIES = ;')
nasOSCARCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARCustomerId.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARCustomerId.setDescription('NAME = ; DESC = The unique identifier of the customer \\ network. This is one of the indicies \\ to a row in this table.; HELP = This is one of the indicies \\ to a row in this table.; CAPABILITIES = ;')
nasOSCARDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARDNADigits.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARDNADigits.setDescription('NAME = ; DESC = The DNA digits in ASCII format which \\ uniquely identify the row in the table.; HELP = Every MPA an unique DNA number \\ assigned to it.; CAPABILITIES = ;')
nasOSCARState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARState.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARState.setDescription('NAME = ; DESC = The validity of this entry in the MPA \\ table.; HELP = ; CAPABILITIES = ;')
nasOSCARIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARIpAddr.setDescription('NAME = ; DESC = The network address used by the MPA \\ to communicate with this NAS.; HELP = ; CAPABILITIES = ;')
nasOSCARSuppDns = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARSuppDns.setStatus('mandatory')
if mibBuilder.loadTexts: nasOSCARSuppDns.setDescription("NAME = ; DESC = The number of DN entries supported by \\ this MPA. This is the size of the \\ MPA's Egress Table.; HELP = ; CAPABILITIES = ;")
nasDNTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1), )
if mibBuilder.loadTexts: nasDNTable.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNTable.setDescription('NAME = ; DESC = The NAS DN Table.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nasDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1), ).setIndexNames((0, "MICOM-NAS-MIB", "nasDNCustomerId"), (0, "MICOM-NAS-MIB", "nasDNDigits"))
if mibBuilder.loadTexts: nasDNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNEntry.setDescription('NAME = ; DESC = Each entry corresponds to one DN registered \\ with the system.; HELP = ; CAPABILITIES = ;')
nasDNCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNCustomerId.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNCustomerId.setDescription('NAME = ; DESC = The unique identifier of the customer \\ network.; HELP = This is one of the indicies \\ to a row in this table.; CAPABILITIES = ;')
nasDNDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNDigits.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNDigits.setDescription('NAME = ; DESC = The DN digits in ASCII format which \\ uniquely identify the row in the table. \\ For software releases prior to 3.0, the \\ string range was restricted to (SIZE(1..24)).; HELP = Every Egress Entry has an unique DN \\ number assigned to the channel.; CAPABILITIES = ;')
nasDNDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNDNADigits.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNDNADigits.setDescription('NAME = ; DESC = The DNA digits in ASCII format which \\ uniquely identify the MPA which \\ supports this DN.; HELP = Every MPA has a \\ unique DNA number assigned to it.; CAPABILITIES = ;')
nasDNState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNState.setStatus('mandatory')
if mibBuilder.loadTexts: nasDNState.setDescription('NAME = ; DESC = The validity of this entry in the DN \\ table.; HELP = ; CAPABILITIES = ;')
nasNvOSCARHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasNvOSCARHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: nasNvOSCARHelloTime.setDescription('NAME = ; DESC = The NAS Ageing time for ageing the registered \\ MPA entries.; HELP = This should be a multiple \\ of the NAC HelloTime. Recommended value \\ is atleast twice of that of the NAC \\ HelloTime. This parameter is stored \\ in permanent storage. The operating \\ value is accessible thru the MIB object \\ nasOSCARHelloTime.; CAPABILITIES = NET_CFG, VPN_NONE;')
mibBuilder.exportSymbols("MICOM-NAS-MIB", nasOSCARCntrZero=nasOSCARCntrZero, nasOSCAREntry=nasOSCAREntry, nasDNEntry=nasDNEntry, nasOSCARCustomerId=nasOSCARCustomerId, nasOSCARTableSize=nasOSCARTableSize, nasOutRegisterRequests=nasOutRegisterRequests, nasInDNARequests=nasInDNARequests, nasOSCARDNADigits=nasOSCARDNADigits, nasDNTable=nasDNTable, nasOSCARState=nasOSCARState, nasOSCARRegSuccess=nasOSCARRegSuccess, nasDNDigits=nasDNDigits, nasStat=nasStat, nasInDNAResolveds=nasInDNAResolveds, nasInRegisters=nasInRegisters, nasInUnknowns=nasInUnknowns, nasDNCustomerId=nasDNCustomerId, nasInNACHellos=nasInNACHellos, micom_nas=micom_nas, nasOSCARRegFails=nasOSCARRegFails, nasOSCARIpAddr=nasOSCARIpAddr, nasDNDNAdbSize=nasDNDNAdbSize, nasOscar=nasOscar, nasDn=nasDn, nasDNDNADigits=nasDNDNADigits, nasOSCARTable=nasOSCARTable, nasInDNAUnResolveds=nasInDNAUnResolveds, nasDNState=nasDNState, nasOSCARTimedOuts=nasOSCARTimedOuts, nasOSCARSuppDns=nasOSCARSuppDns, nasBase=nasBase, nasNvParam=nasNvParam, nasOutNASHellos=nasOutNASHellos, nasNvOSCARHelloTime=nasNvOSCARHelloTime, nasOSCARHelloTime=nasOSCARHelloTime)
