#
# PySNMP MIB module INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Integer32, ModuleIdentity, Gauge32, Counter64, MibIdentifier, ObjectIdentity, IpAddress, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "ModuleIdentity", "Gauge32", "Counter64", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 18446744073709551615)

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
nic = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 4))
e100b = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines attributes common to all components. This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this component.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this component.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 3), DmiDisplaystring())
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this component.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 4), DmiDisplaystring())
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this component.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The date of the install of this component.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tSystemResourcesDescription = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2), )
if mibBuilder.loadTexts: tSystemResourcesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourcesDescription.setDescription('The System Resources Description group describes the number of entries in the System Resources Group. ')
eSystemResourcesDescription = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemResourcesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourcesDescription.setDescription('')
a2DeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a2DeviceCount.setDescription('A count of the number of different hardware devices represented in this table.')
a2SystemResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemResourceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemResourceCount.setDescription('A count of the total number of system resources on this system.')
tSystemResources = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3), )
if mibBuilder.loadTexts: tSystemResources.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResources.setDescription('The System Resources group contains hardware descriptions which are commonly used on PC style computers such as IRQs, IO ports, and memory address ranges.')
eSystemResources = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a3DeviceId"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a3ResourceNumber"))
if mibBuilder.loadTexts: eSystemResources.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResources.setDescription('')
a3DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3DeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a3DeviceId.setDescription('On systems that implement a PnP-like subsystem, the device ID should be the ID used by that subsystem. On systems that do not have inherent device numbering, then the instrumentation supporting the system resources group should devise a device number scheme. In either case, the table will naturally group all of the resources associated with a device.')
a3ResourceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ResourceNumber.setDescription('This attribute is the ordinal of the resource within a device. Within the table, any device may have one or more resources.')
a3ResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMemoryRange", 3), ("vIoPort", 4), ("vIrq", 5), ("vDma", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ResourceType.setDescription('The type of system resource represented by this entry.')
a3ResourceBase = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceBase.setStatus('mandatory')
if mibBuilder.loadTexts: a3ResourceBase.setDescription('The starting address of the system resource in the appropriate address space.')
a3ResourceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceSize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ResourceSize.setDescription('The size of the system resource.')
a3ResourceFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 6), DmiInteger())
if mibBuilder.loadTexts: a3ResourceFlags.setStatus('mandatory')
if mibBuilder.loadTexts: a3ResourceFlags.setDescription('This attribute contains fields representing the status of this resource entry. The meaning of this field varies according to the Resource Type field in this group.')
a3GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3GroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a3GroupId.setDescription("This attribute is a 'back pointer' to a group within this MIF, if applicable. If the back pointer is not known, either because the device is not represented by a group, or the actual device type is not known, then the value of this attribute will be 0.")
tNetworkAdapter802PortGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4), )
if mibBuilder.loadTexts: tNetworkAdapter802PortGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tNetworkAdapter802PortGroup.setDescription('Contains objects related to each of the network ports on the network adapter.')
eNetworkAdapter802PortGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a4PortIndex"))
if mibBuilder.loadTexts: eNetworkAdapter802PortGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eNetworkAdapter802PortGroup.setDescription('')
a4PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4PortIndex.setDescription("This attribute is the ordinal of the network port within the network adapter, i.e. the 'port number'.")
a4PermanentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PermanentNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a4PermanentNetworkAddress.setDescription('This is the node address stored permanently in the adapter.')
a4CurrentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4CurrentNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a4CurrentNetworkAddress.setDescription('This is the node address that can be modified by software, sometimes referred to as the Locally Administered Address (LAA).')
a4ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vUnknown", 1), ("vAui", 2), ("vUtpCategory3", 3), ("vUtpCategory4", 4), ("vUtpCategory5", 5), ("vBnc", 6), ("vStpRj45", 7), ("vStpDb9", 8), ("vFiberMic", 9), ("vAppleAui", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a4ConnectorType.setDescription('This is the type of connector currently being used to physically attach this port to the LAN.')
a4DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DataRate.setStatus('mandatory')
if mibBuilder.loadTexts: a4DataRate.setDescription('This is the rate at which data is transferred over the LAN in Mbps.')
a4TotalPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 6), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalPacketsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalPacketsTransmitted.setDescription('This is the total number of packets transmitted.')
a4TotalBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 7), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalBytesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalBytesTransmitted.setDescription('This is the total number of bytes transmitted.')
a4TotalPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 8), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalPacketsReceived.setDescription('This is the total number packets received.')
a4TotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 9), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalBytesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalBytesReceived.setDescription('This is the total number of bytes received.')
a4TotalTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 10), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalTransmitErrors.setDescription('This is the total number of transmit errors of any type.')
a4TotalReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 11), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalReceiveErrors.setDescription('This is the total number of receive errors of any type.')
a4TotalHostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 12), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalHostErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalHostErrors.setDescription('This is the total number of errors due to problems with the network adapter host interface (e.g. overrun / underrun errors).')
a4TotalWireErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 13), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalWireErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4TotalWireErrors.setDescription('This is the total number of either receive or transmit errors due to problems with the network (e.g. receive CRC Errors). ')
t802AlternateAddressGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5), )
if mibBuilder.loadTexts: t802AlternateAddressGroup.setStatus('mandatory')
if mibBuilder.loadTexts: t802AlternateAddressGroup.setDescription('Contains objects related to alternate addresses for each network adapter port.')
e802AlternateAddressGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a5AlternateAddressIndex"))
if mibBuilder.loadTexts: e802AlternateAddressGroup.setStatus('mandatory')
if mibBuilder.loadTexts: e802AlternateAddressGroup.setDescription('')
a5AlternateAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 1), DmiInteger())
if mibBuilder.loadTexts: a5AlternateAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5AlternateAddressIndex.setDescription('This is an arbitrary number assigned to each alternate address. The Alternate Address Index usually starts with 1 and increments for each alternate address.')
a5PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 2), DmiInteger())
if mibBuilder.loadTexts: a5PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5PortIndex.setDescription("The value of the Port Index attribute for the network port that uses this alternate address, i.e. the 'port number'.")
a5AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vMulticast", 1), ("vFunctional", 2), ("vGroup", 3))))
if mibBuilder.loadTexts: a5AddressType.setStatus('mandatory')
if mibBuilder.loadTexts: a5AddressType.setDescription('This is the type of alternate address, e.g. multicast, functiona , etc.')
a5AlternateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 4), DmiDisplaystring())
if mibBuilder.loadTexts: a5AlternateAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a5AlternateAddress.setDescription('This is the actual alternate address value.')
tNetworkAdapterDriverGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6), )
if mibBuilder.loadTexts: tNetworkAdapterDriverGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tNetworkAdapterDriverGroup.setDescription('Contains objects related to the network adapter device drivers currently in use.')
eNetworkAdapterDriverGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a6DriverIndex"))
if mibBuilder.loadTexts: eNetworkAdapterDriverGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eNetworkAdapterDriverGroup.setDescription('')
a6DriverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverIndex.setDescription('This is an arbitrary number assigned to each device driver. Driver Index usually starts with 1 and increments for each additional device driver.')
a6DriverSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSoftwareName.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverSoftwareName.setDescription('This is the sign-on name of the driver.')
a6DriverSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverSoftwareVersion.setDescription('This is the revision level of the driver software.')
a6DriverSoftwareDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSoftwareDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverSoftwareDescription.setDescription('This is an expanded description of the device driver software.')
a6DriverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSize.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverSize.setDescription('This is the resident memory size of the driver in bytes.')
a6DriverInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vIpx", 2), ("vOdi", 3), ("vNdis", 4), ("vPacketDriver", 5), ("vLantastic", 6), ("vUnix", 7), ("vAppletalk", 8), ("vIbmLanSupportProgram", 9), ("vLlc", 10), ("vNetbios", 11), ("vPathworksDll", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverInterfaceType.setDescription('This is the specification or network operating system to which this LAN driver conforms, e.g. IPX, NDIS, etc.')
a6DriverInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverInterfaceVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverInterfaceVersion.setDescription('This is the version of the driver interface specification, e.g. for NDIS, this attribute could be 2.01, 3.0, etc.')
a6DriverInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverInterfaceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a6DriverInterfaceDescription.setDescription('An expanded description of the driver interface specification in use.')
tNetworkAdapterHardwareGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7), )
if mibBuilder.loadTexts: tNetworkAdapterHardwareGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tNetworkAdapterHardwareGroup.setDescription('Contains objects related to the network adapter hardware.')
eNetworkAdapterHardwareGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eNetworkAdapterHardwareGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eNetworkAdapterHardwareGroup.setDescription('')
a7NetworkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("v10MbpsEthernet", 2), ("v100MbpsEthernet", 3), ("v10010MbpsEthernet", 4), ("v100MbpsVgAnylan", 5), ("v4MbpsToken-ring", 6), ("v16MbpsToken-ring", 7), ("v164MbpsToken-ring", 8), ("v2MbpsArcnet", 9), ("v20MbpsArcnet", 10), ("vFddi", 11), ("vAtm", 12), ("vAppletalk1", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NetworkTopology.setStatus('mandatory')
if mibBuilder.loadTexts: a7NetworkTopology.setDescription('This is the network media access method/topology supported by this adapter.')
a7TransmissionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vNormal", 1), ("vFullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7TransmissionCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a7TransmissionCapability.setDescription('The transmission capabilities of the adapter.')
a7NetworkAdapterRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NetworkAdapterRamSize.setStatus('mandatory')
if mibBuilder.loadTexts: a7NetworkAdapterRamSize.setDescription('This is the total size of adapter RAM in Kb.')
a7BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("vOther", 1), ("vIsa", 2), ("vEisa", 3), ("vMca", 4), ("vPci", 5), ("vVl", 6), ("vPcmcia", 7), ("vParallel", 8), ("vNec98", 9), ("vMotherboard", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusType.setStatus('mandatory')
if mibBuilder.loadTexts: a7BusType.setDescription('This is the type of bus used to interface the adapter to the host.')
a7BusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a7BusWidth.setDescription('This is the width (in bits) of the data path used to interface the adapter to the host.')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, availability status, and administrative state indicators for specific Device Group instances.')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a8OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a8OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8OperationalStateInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a8OperationalStateInstanceIndex.setDescription('The Index into the Operational State table.')
a8DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a8DeviceGroupIndex.setDescription('The group ID of the group referencing this instance.')
a8OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8OperationalStatus.setDescription('The operational status of the Device group instance.')
a8UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a8UsageState.setDescription('The usage state of the Device Group instance.')
a8AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8AvailabilityStatus.setDescription('The availability status of the Device Group instance.')
a8AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a8AdministrativeState.setDescription('The administrative state of the Device Group instance.')
a8FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a8FatalErrorCount.setDescription('The accumulated fatal error count for this Device Group Instance ')
a8MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a8MajorErrorCount.setDescription('The accumulated major error count for this Device Group Instance ')
a8WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a8WarningErrorCount.setDescription('The accumulated warning error count for this Device Group Instance.')
tFruTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9), )
if mibBuilder.loadTexts: tFruTable.setStatus('mandatory')
if mibBuilder.loadTexts: tFruTable.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware component which is designed to be separately removable')
eFruTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9FruIndex"))
if mibBuilder.loadTexts: eFruTable.setStatus('mandatory')
if mibBuilder.loadTexts: eFruTable.setDescription('')
a9FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9FruIndex.setDescription('The index into the Field Replaceable Unit table.')
a9DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9DeviceGroupIndex.setDescription('The group ID of the group referencing this Field Replaceable Unit instance.')
a9Description = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Description.setStatus('mandatory')
if mibBuilder.loadTexts: a9Description.setDescription('A clear description of this Field Replaceable Unit.')
a9Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a9Manufacturer.setDescription('The name of the company manufacturing or providing this Field Replaceable Unit.')
a9Model = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Model.setStatus('mandatory')
if mibBuilder.loadTexts: a9Model.setDescription("The manufacturer's model number for this Field Replaceable Unit.")
a9PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 6), DmiDisplaystring())
if mibBuilder.loadTexts: a9PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9PartNumber.setDescription('A part number by which a replacement part can be ordered for this Field Replaceable Unit.')
a9FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 7), DmiDisplaystring())
if mibBuilder.loadTexts: a9FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9FruSerialNumber.setDescription("The manufacturer's serial number for this Field Replaceable Unit.")
a9RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 8), DmiDisplaystring())
if mibBuilder.loadTexts: a9RevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a9RevisionLevel.setDescription('The revision level of this Field Replaceable Unit.')
a9WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WarrantyStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: a9WarrantyStartDate.setDescription('The start date of the service Warranty for this Field Replaceabl Unit.')
a9WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WarrantyDuration.setStatus('mandatory')
if mibBuilder.loadTexts: a9WarrantyDuration.setDescription('The total duration of this Field Replaceable Unit Warranty in months. (9999 = Lifetime).')
a9SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9SupportPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9SupportPhoneNumber.setDescription('The phone number(s) for support for this Field Replaceable Unit.')
tBootRomConfiguration = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10), )
if mibBuilder.loadTexts: tBootRomConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: tBootRomConfiguration.setDescription('This group describes the characteristics of the boot ROM.')
eBootRomConfiguration = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eBootRomConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: eBootRomConfiguration.setDescription('')
a10BootRomDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BootRomDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a10BootRomDescription.setDescription('This is the description of the software contained in the boot ROM.')
a10BootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BootRomVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a10BootRomVersion.setDescription('This is the version number of the boot ROM software.')
a10RemoteBootProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vNone", 2), ("vRpl", 3), ("vBootp", 4), ("vDecMop", 5), ("vNativeNetware", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10RemoteBootProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: a10RemoteBootProtocolType.setDescription('This is the type of remote boot protocol supported by this ROM.')
a10RemoteBootProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10RemoteBootProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a10RemoteBootProtocolVersion.setDescription('The version of the remote boot protocol supported by this ROM.')
tBootRomCapabilities = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11), )
if mibBuilder.loadTexts: tBootRomCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: tBootRomCapabilities.setDescription('This group describes the capabilities or special features supported by this ROM.')
eBootRomCapabilities = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a11CapabilityIndex"))
if mibBuilder.loadTexts: eBootRomCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: eBootRomCapabilities.setDescription('')
a11CapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11CapabilityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a11CapabilityIndex.setDescription('This is an arbitrary number assigned to each capability.Capabili y Index usually starts with 1 and increments for each additional capability.')
a11CapabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11CapabilityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a11CapabilityDescription.setDescription("This is a clear description of a property or special feature of the ROM, e.g. 'virus protection'.")
a11CapabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11CapabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a11CapabilityStatus.setDescription("The current state or value associated with the capability or special feature, e.g. 'enabled', 'active', etc.")
tIntellanadapterextensionsgroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12), )
if mibBuilder.loadTexts: tIntellanadapterextensionsgroup.setStatus('mandatory')
if mibBuilder.loadTexts: tIntellanadapterextensionsgroup.setDescription('These attributes provide extended information for use with Intel software.')
eIntellanadapterextensionsgroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eIntellanadapterextensionsgroup.setStatus('mandatory')
if mibBuilder.loadTexts: eIntellanadapterextensionsgroup.setDescription('')
a12DriverFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12DriverFilename.setStatus('mandatory')
if mibBuilder.loadTexts: a12DriverFilename.setDescription('The filename of the LAN adapter driver.')
a12DriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 2), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12DriverDate.setStatus('mandatory')
if mibBuilder.loadTexts: a12DriverDate.setDescription('The timestamp of the LAN adapter driver.')
a12MifAndInstrumentationFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MifAndInstrumentationFilename.setStatus('mandatory')
if mibBuilder.loadTexts: a12MifAndInstrumentationFilename.setDescription('')
a12InstrumentationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12InstrumentationVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a12InstrumentationVersion.setDescription('The version number of component instrumentation.')
a12MifVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MifVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a12MifVersion.setDescription('This is the version of the MIF file')
tIndication_control_group = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151), )
if mibBuilder.loadTexts: tIndication_control_group.setStatus('mandatory')
if mibBuilder.loadTexts: tIndication_control_group.setDescription('This group defines the indication control settings for the LAN instrumentation')
eIndication_control_group = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a151PortIndex"))
if mibBuilder.loadTexts: eIndication_control_group.setStatus('mandatory')
if mibBuilder.loadTexts: eIndication_control_group.setDescription('')
a151PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a151PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a151PortIndex.setDescription("This attribute is the ordinal of the network port within the network adapter, i.e. the 'port number'.")
a151IndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151IndicationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a151IndicationEnable.setDescription('Used to control indications')
a151TotalTransmitIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalTransmitIndicationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalTransmitIndicationEnable.setDescription('Used to control indications')
a151TotalTransmitErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 4), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalTransmitErrorsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalTransmitErrorsThreshold.setDescription('This is a threshold value used to trigger indications when the total number of transfer errors exceed this value')
a151TotalReceiveIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalReceiveIndicationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalReceiveIndicationEnable.setDescription('Used to control indications')
a151TotalReceiveErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 6), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalReceiveErrorsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalReceiveErrorsThreshold.setDescription('This is a threshold value used to trigger indications when the total number of receive errors exceed this value')
a151TotalHostIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalHostIndicationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalHostIndicationEnable.setDescription('Used to control indications')
a151TotalHostErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 8), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalHostErrorsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalHostErrorsThreshold.setDescription('This is a threshold value used to trigger indications when the total number of host errors exceed this value')
a151TotalWireIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalWireIndicationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalWireIndicationEnable.setDescription('Used to control indications')
a151TotalWireErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 10), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalWireErrorsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a151TotalWireErrorsThreshold.setDescription('This is a threshold value used to trigger indications when the total number of wire errors exceed this value')
tErrorcontrol = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152), )
if mibBuilder.loadTexts: tErrorcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: tErrorcontrol.setDescription('Indication control and status for the parent group')
eErrorcontrol = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a152Selfid"))
if mibBuilder.loadTexts: eErrorcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: eErrorcontrol.setDescription('')
a152Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a152Selfid.setDescription('Instance identifer. A unique number that identifies this row.')
a152Fatalcount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Fatalcount.setStatus('mandatory')
if mibBuilder.loadTexts: a152Fatalcount.setDescription('Count of all fatal errors since system startup.')
a152Majorcount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Majorcount.setStatus('mandatory')
if mibBuilder.loadTexts: a152Majorcount.setDescription('Count of all major errors since system startup.')
a152Warningcount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Warningcount.setStatus('mandatory')
if mibBuilder.loadTexts: a152Warningcount.setDescription('Count of all warning errors since system startup.')
a152Errstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vOk", 0), ("vWarning1", 1), ("vMajor", 2), ("vFatal", 3), ("vUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Errstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a152Errstatus.setDescription('current error status')
a152Errstatustype = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vPost", 0), ("vRuntime", 1), ("vDiagnosticTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Errstatustype.setStatus('mandatory')
if mibBuilder.loadTexts: a152Errstatustype.setDescription('Indicates the type of detection that set the current error status.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a153MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a153MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a153MibName.setDescription('The MIB name that defines this MIF')
a153MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a153MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a153MibOid.setDescription('The MIB OID that corresponds to this MIF')
a153DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a153DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a153DisableTrap.setDescription('Used to dissable the SNMP trap')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tTrapGroup.setDescription('This group defines attributes needed for Trap definition. This group does not exist in MIF file')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eTrapGroup.setDescription('')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorTime.setDescription('The Date & Time when the error occured')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorStatus.setDescription('Error Status Code')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorGroupId.setDescription('Group ID of the errorControl Group')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorInstanceId.setDescription('Instance ID of the errorControl Group')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ComponentId.setDescription('Component ID of the component that caused this error')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999GroupId.setDescription('Group ID of the Group that caused this error')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999InstanceId.setDescription('Instance ID of the Group that caused this error')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorCode1.setDescription('Vendor specific code 1')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorCode2.setDescription('Vendor specific code 2')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorText.setDescription('Vendor specific octet string info')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ParentGroupId.setDescription('Group ID of parent of Group that caused this error')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ParentInstanceId.setDescription('Instance ID of parent of Group that caused this error')
e100bEventError = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1) + (0,1)).setObjects(("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorTime"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorStatus"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorGroupId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorInstanceId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ComponentId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999GroupId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999InstanceId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999VendorCode1"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999VendorCode2"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999VendorText"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ParentGroupId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ParentInstanceId"))
if mibBuilder.loadTexts: e100bEventError.setDescription('DMI Service Layer generated event for E100B Adapter')
mibBuilder.exportSymbols("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", a6DriverSize=a6DriverSize, eIntellanadapterextensionsgroup=eIntellanadapterextensionsgroup, tOperationalState=tOperationalState, tSystemResourcesDescription=tSystemResourcesDescription, a151TotalWireIndicationEnable=a151TotalWireIndicationEnable, products=products, a5PortIndex=a5PortIndex, a7NetworkTopology=a7NetworkTopology, a151TotalHostIndicationEnable=a151TotalHostIndicationEnable, a151PortIndex=a151PortIndex, a9FruIndex=a9FruIndex, tIntellanadapterextensionsgroup=tIntellanadapterextensionsgroup, a9999ParentInstanceId=a9999ParentInstanceId, e802AlternateAddressGroup=e802AlternateAddressGroup, a9PartNumber=a9PartNumber, a7BusType=a7BusType, DmiDisplaystring=DmiDisplaystring, a11CapabilityIndex=a11CapabilityIndex, a2SystemResourceCount=a2SystemResourceCount, tNetworkAdapter802PortGroup=tNetworkAdapter802PortGroup, eIndication_control_group=eIndication_control_group, a9DeviceGroupIndex=a9DeviceGroupIndex, tBootRomConfiguration=tBootRomConfiguration, eFruTable=eFruTable, a10BootRomDescription=a10BootRomDescription, a152Errstatustype=a152Errstatustype, a4TotalPacketsTransmitted=a4TotalPacketsTransmitted, a8AvailabilityStatus=a8AvailabilityStatus, a9999ParentGroupId=a9999ParentGroupId, a9999ErrorGroupId=a9999ErrorGroupId, a151TotalReceiveIndicationEnable=a151TotalReceiveIndicationEnable, a4TotalWireErrors=a4TotalWireErrors, a1Version=a1Version, a8FatalErrorCount=a8FatalErrorCount, a5AlternateAddressIndex=a5AlternateAddressIndex, a152Selfid=a152Selfid, a153DisableTrap=a153DisableTrap, eNetworkAdapter802PortGroup=eNetworkAdapter802PortGroup, a9999GroupId=a9999GroupId, tNetworkAdapterHardwareGroup=tNetworkAdapterHardwareGroup, a9999ErrorStatus=a9999ErrorStatus, a5AddressType=a5AddressType, eNetworkAdapterDriverGroup=eNetworkAdapterDriverGroup, a8MajorErrorCount=a8MajorErrorCount, eTrapGroup=eTrapGroup, a4TotalReceiveErrors=a4TotalReceiveErrors, a6DriverSoftwareVersion=a6DriverSoftwareVersion, a1SerialNumber=a1SerialNumber, dmtfGroups=dmtfGroups, eSystemResources=eSystemResources, a10RemoteBootProtocolVersion=a10RemoteBootProtocolVersion, a9999VendorText=a9999VendorText, a3ResourceType=a3ResourceType, a9999InstanceId=a9999InstanceId, tSystemResources=tSystemResources, eSystemResourcesDescription=eSystemResourcesDescription, a7BusWidth=a7BusWidth, a9999ErrorTime=a9999ErrorTime, a12DriverDate=a12DriverDate, tTrapGroup=tTrapGroup, a9SupportPhoneNumber=a9SupportPhoneNumber, a4PermanentNetworkAddress=a4PermanentNetworkAddress, DmiCounter=DmiCounter, a7NetworkAdapterRamSize=a7NetworkAdapterRamSize, eBootRomConfiguration=eBootRomConfiguration, a3DeviceId=a3DeviceId, a12InstrumentationVersion=a12InstrumentationVersion, a7TransmissionCapability=a7TransmissionCapability, a6DriverInterfaceType=a6DriverInterfaceType, a1Manufacturer=a1Manufacturer, a4ConnectorType=a4ConnectorType, server_products=server_products, a151TotalReceiveErrorsThreshold=a151TotalReceiveErrorsThreshold, a151TotalTransmitIndicationEnable=a151TotalTransmitIndicationEnable, a8OperationalStateInstanceIndex=a8OperationalStateInstanceIndex, a3ResourceSize=a3ResourceSize, e100bEventError=e100bEventError, tBootRomCapabilities=tBootRomCapabilities, a9999ComponentId=a9999ComponentId, eErrorcontrol=eErrorcontrol, a153MibOid=a153MibOid, a3ResourceNumber=a3ResourceNumber, a152Fatalcount=a152Fatalcount, a4TotalHostErrors=a4TotalHostErrors, t802AlternateAddressGroup=t802AlternateAddressGroup, a9999VendorCode2=a9999VendorCode2, a9WarrantyDuration=a9WarrantyDuration, a11CapabilityStatus=a11CapabilityStatus, a151IndicationEnable=a151IndicationEnable, a9Description=a9Description, a6DriverInterfaceVersion=a6DriverInterfaceVersion, a6DriverInterfaceDescription=a6DriverInterfaceDescription, a12MifVersion=a12MifVersion, tMiftomib=tMiftomib, DmiComponentIndex=DmiComponentIndex, a4TotalBytesReceived=a4TotalBytesReceived, a9Model=a9Model, eBootRomCapabilities=eBootRomCapabilities, DmiDateX=DmiDateX, a9RevisionLevel=a9RevisionLevel, DmiInteger=DmiInteger, a153MibName=a153MibName, a4DataRate=a4DataRate, a8UsageState=a8UsageState, a5AlternateAddress=a5AlternateAddress, a10BootRomVersion=a10BootRomVersion, e100b=e100b, a3GroupId=a3GroupId, nic=nic, a12DriverFilename=a12DriverFilename, tNetworkAdapterDriverGroup=tNetworkAdapterDriverGroup, a8DeviceGroupIndex=a8DeviceGroupIndex, a9WarrantyStartDate=a9WarrantyStartDate, eMiftomib=eMiftomib, a6DriverIndex=a6DriverIndex, a2DeviceCount=a2DeviceCount, a8OperationalStatus=a8OperationalStatus, a152Warningcount=a152Warningcount, a4TotalTransmitErrors=a4TotalTransmitErrors, eOperationalState=eOperationalState, a1Verify=a1Verify, tFruTable=tFruTable, a11CapabilityDescription=a11CapabilityDescription, a152Majorcount=a152Majorcount, a3ResourceFlags=a3ResourceFlags, a1Product=a1Product, a4TotalBytesTransmitted=a4TotalBytesTransmitted, DmiCounter64X=DmiCounter64X, tComponentid=tComponentid, a151TotalTransmitErrorsThreshold=a151TotalTransmitErrorsThreshold, a4TotalPacketsReceived=a4TotalPacketsReceived, a6DriverSoftwareDescription=a6DriverSoftwareDescription, a9FruSerialNumber=a9FruSerialNumber, a10RemoteBootProtocolType=a10RemoteBootProtocolType, eNetworkAdapterHardwareGroup=eNetworkAdapterHardwareGroup, a9999VendorCode1=a9999VendorCode1, a9999ErrorInstanceId=a9999ErrorInstanceId, a3ResourceBase=a3ResourceBase, intel=intel, a6DriverSoftwareName=a6DriverSoftwareName, a152Errstatus=a152Errstatus, a8AdministrativeState=a8AdministrativeState, tErrorcontrol=tErrorcontrol, a12MifAndInstrumentationFilename=a12MifAndInstrumentationFilename, a151TotalHostErrorsThreshold=a151TotalHostErrorsThreshold, eComponentid=eComponentid, a4CurrentNetworkAddress=a4CurrentNetworkAddress, a8WarningErrorCount=a8WarningErrorCount, tIndication_control_group=tIndication_control_group, a1Installation=a1Installation, a9Manufacturer=a9Manufacturer, a151TotalWireErrorsThreshold=a151TotalWireErrorsThreshold, a4PortIndex=a4PortIndex)
