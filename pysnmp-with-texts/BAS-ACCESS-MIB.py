#
# PySNMP MIB module BAS-ACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ACCESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
basAccessControl, BasInterfaceId, BasLogicalPortId, BasSlotId, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "basAccessControl", "BasInterfaceId", "BasLogicalPortId", "BasSlotId", "BasChassisId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Gauge32, IpAddress, iso, ModuleIdentity, Counter64, Integer32, Counter32, ObjectIdentity, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Gauge32", "IpAddress", "iso", "ModuleIdentity", "Counter64", "Integer32", "Counter32", "ObjectIdentity", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
basAccessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1))
if mibBuilder.loadTexts: basAccessMIB.setLastUpdated('9812080000Z')
if mibBuilder.loadTexts: basAccessMIB.setOrganization('Broadband Access Systems, Inc.')
if mibBuilder.loadTexts: basAccessMIB.setContactInfo(' Tech Support Broadband Access Systems, Inc. 201 Forest Street Marlborough, MA 01752 USA 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basAccessMIB.setDescription('This MIB module defines the configuration MIB objects for Broadband Access Systems, Inc. Network Management access control.')
basAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1), )
if mibBuilder.loadTexts: basAccessTable.setStatus('current')
if mibBuilder.loadTexts: basAccessTable.setDescription('')
basAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1), ).setIndexNames((0, "BAS-ACCESS-MIB", "basAccessChassis"), (0, "BAS-ACCESS-MIB", "basAccessSlot"), (0, "BAS-ACCESS-MIB", "basAccessInterface"), (0, "BAS-ACCESS-MIB", "basAccessLPort"), (0, "BAS-ACCESS-MIB", "basAccessIndex"))
if mibBuilder.loadTexts: basAccessEntry.setStatus('current')
if mibBuilder.loadTexts: basAccessEntry.setDescription('')
basAccessChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basAccessChassis.setStatus('current')
if mibBuilder.loadTexts: basAccessChassis.setDescription('The BAS Chassis ID of this card.')
basAccessSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basAccessSlot.setStatus('current')
if mibBuilder.loadTexts: basAccessSlot.setDescription('The BAS Slot ID of this card.')
basAccessInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basAccessInterface.setStatus('current')
if mibBuilder.loadTexts: basAccessInterface.setDescription('The BAS interface ID of this card.')
basAccessLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basAccessLPort.setStatus('current')
if mibBuilder.loadTexts: basAccessLPort.setDescription('The BAS logical port ID of this card.')
basAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: basAccessIndex.setStatus('current')
if mibBuilder.loadTexts: basAccessIndex.setDescription('')
basAccessCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basAccessCommName.setStatus('current')
if mibBuilder.loadTexts: basAccessCommName.setDescription('An assigned SNMP community name. The SNMP entity may have more than one community names with either read/write or read-only priviledge.')
basAccessIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basAccessIpAddress.setStatus('current')
if mibBuilder.loadTexts: basAccessIpAddress.setDescription('The Ip address of the management application that is authorized to communicate with the SNMP entity. An Ip address of 0.0.0.0 allows any management application with a valid community and/or profile to connect to the SNMP entity. ')
basAccessProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basAccessProfile.setStatus('current')
if mibBuilder.loadTexts: basAccessProfile.setDescription("The Profile associated with the community name. Each request PDU will have a profile in addition to the community name. The profile is specified as: '1' read-only '2' read/write")
basAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 10, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basAccessStatus.setStatus('current')
if mibBuilder.loadTexts: basAccessStatus.setDescription('This mib object allows row creation to take place in the profile table.')
mibBuilder.exportSymbols("BAS-ACCESS-MIB", basAccessMIB=basAccessMIB, PYSNMP_MODULE_ID=basAccessMIB, basAccessStatus=basAccessStatus, basAccessSlot=basAccessSlot, basAccessIpAddress=basAccessIpAddress, basAccessCommName=basAccessCommName, basAccessChassis=basAccessChassis, basAccessEntry=basAccessEntry, basAccessIndex=basAccessIndex, basAccessTable=basAccessTable, basAccessLPort=basAccessLPort, basAccessProfile=basAccessProfile, basAccessInterface=basAccessInterface)
