#
# PySNMP MIB module CISCO-WAN-OPTIMIZATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-OPTIMIZATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cpmCPUTotalMonIntervalValue, = mibBuilder.importSymbols("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, Unsigned64, CiscoMilliSeconds = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec", "Unsigned64", "CiscoMilliSeconds")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Gauge32, Counter64, Unsigned32, Counter32, IpAddress, ObjectIdentity, MibIdentifier, Bits, Integer32, iso, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter64", "Unsigned32", "Counter32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "iso", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TimeStamp, DisplayString, TimeInterval, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeStamp", "DisplayString", "TimeInterval", "TruthValue", "TextualConvention")
ciscoWanOptimizationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 762))
ciscoWanOptimizationMIB.setRevisions(('2016-05-22 00:00', '2016-05-18 00:00', '2015-11-30 00:00', '2013-05-23 00:00', '2012-12-13 00:00', '2012-03-05 00:00', '2011-04-19 00:00', '2010-10-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanOptimizationMIB.setRevisionsDescriptions(('Edited descriptions of CwoDreCacheStatus object. Changed Max-Access of cwoDrePerfStatsEncodeCompressionRatio and cwoDrePerfStatsDecodeCompressionRatio objects.', 'Added cwoAoHttpxStatsAKC table for HTTP Akamai Cache objects. Added cwoAoDre table for DRE objects.', 'Deprecated cwoAoVideoxStats and cwoAoCifsxStats tables as all the objects in them are deprecated.', 'Added the below counters in cwoAoSmbxStats table Signed SMB Bytes Stats enhancement feature cwoAoSmbxStatsRdL4SignWANBytes cwoAoSmbxStatsWrL4SignWANBytes cwoAoSmbxStatsRdSignLANBytes cwoAoSmbxStatsWrSignLANBytes', 'Added the below new counters which display SharePoint AO statistics in cwoAoHttpxStats group. cwoAoHttpxStatsTotalSPSessions cwoAoHttpxStatsTotalSPPFSessions cwoAoHttpxStatsTotalSPPFObjects cwoAoHttpxStatsTotalSPRTTSaved cwoAoHttpxStatsTotalSPPFMissTime Added the below new counters in cwoAoCifsxStats group to support the CIFS Atkins feature. cwoAoCifsxStatsFFTotalReqs cwoAoCifsxStatsFFRemoteReqs cwoAoCifsxStatsFFLocalRespTime cwoAoCifsxStatsFFRemoteRespTime cwoAoCifsxStatsDirResources', '(1) Added cwoAoStatsLoadStatus and cwoAoStatsBwOpt in cwoAoStatsTable (2) Added cwoAoSmbStatsBwOpt in cwoAoSmbxstats Group (3) Added cwoAoHttpxStats - Statistics Group for HTTP AO (4) Added cwoAoMapixStats - Statistics Group for MAPI AO (5) Added cwoAoNfsxStats - Statistics Group for NFS AO (6) Added cwoAoVideoxStats - Statistics Group for Video AO (7) Added cwoAoCifsxstats - Statistics Group for CIFS AO (8) Added cwoApp - Gorup which includes objects for Applications associated with AOs. (9) Added cwoPmap - Group which includes objects for policy-map. (10) Added cwoCmap - Group which includes objects for class-maps associated with active policy-map. (11) Addes cwoTfoStatsLoadStatus in cswTfoStats group', 'New License Notification Group has been added.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoWanOptimizationMIB.setLastUpdated('201605220000Z')
if mibBuilder.loadTexts: ciscoWanOptimizationMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanOptimizationMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-waas@cisco.com, cs-waas-express@cisco.com')
if mibBuilder.loadTexts: ciscoWanOptimizationMIB.setDescription('This MIB is for managing Wide Area Network (WAN) Optimization systems. The objective of WAN optimization system is to reduce as much traffic as possible on WAN link and improve the application response time for various applications, which gets affected due to bandwidth, packet loss, congestion and latency limitations of WAN link. WAN optimization system is generally peer based system. They are located at both end of WAN link and peer with each other to perform optimization. This MIB provides instrumentation for monitoring statistics for various features implemented for WAN optimization. WAN optimization features includes TCP protocol optimizations and various Application Optimizers (AOs). AOs include SMB AO, HTTP AO, CIFS AO, NFS AO, MAPI AO, VIDEO AO, SSL AO and EPM AO. Acronyms and Terminology used in this MIB are: AO : Application Optimizer TFO : Traffic Flow Optimization SMB : Server Message Block CIFS : Common Internet File System HTTP : Hyper Text Transfer Protocol NFS : Network File System SSL : Secure Socket Layer MAPI : Messaging Application Programming Interface EPM : End Point Mapper RA : Read Ahead MD : Meta Data PT : Pass Through AD : Auto Discovery RTT : Round Trip Time Conn : Connections File Server : SMB/CIFS file server peer : It refers to peer WAN optimization system located on other end of WAN and registered with this device to optimize the traffic. SharePoint : SharePoint is a Microsoft Application that provides a collaborative environment for using Microsoft Office and related applications. Typical deployments of Microsoft SharePoint use one or more SharePoint servers in a server farm for scalability. The actual data for the various documents, etc. are usually stored in a backend database. The SharePoint server(s) communicate with the backend database using SharePoint Back-end protocols. Clients (either Microsoft Office Applications like Word, Excel, PowerPoint or Web Browsers) typically connect to the SharePoint server and communicate using SOAP over HTTP. Fast Connections : End to end connections which uses existing TCP connection over WAN and reconstructs only LAN connection is fast connection. DRE : Data Redundancy Elimination. LZ : Lemple-Ziv data compression. PLZ : Persistent Lemple-Ziv data compression.')
class CwoHttpAKCPrepStatus(TextualConvention, Integer32):
    description = 'Represents various Akamai cache preposition task status of a HTTP application optimizer. unknown(1) : The prepositioning task is in unknown state. scheduled(2) : The prepositioning task is scheduled to run. disabled(3) : The prepositioning task is disabled. success(4) : The prepositioning task completed successfully. error(5) : The prepositioning task has an error.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("scheduled", 2), ("disabled", 3), ("success", 4), ("error", 5))

class CwoDreCacheStatus(TextualConvention, Integer32):
    description = 'Represents various DRE cache status of an application optimizer. notUsable(1) : This state indicates that DRE cache is currently not usable/accessible (eg.,when DRE partition is not mounted/available). initializing(2) : This state indicates that DRE cache is getting initialized. usable(3) : This state indicates that DRE cache is accessible and in usable condition. tempFailed(4) : This state indicates that DRE cache is temporarily not available due to internal errors. failed(5) : This state indicates that DRE cache initialization failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notUsable", 1), ("initializing", 2), ("usable", 3), ("temporarilyFailed", 4), ("failed", 5))

class CwoAoName(TextualConvention, OctetString):
    description = 'Represents the name of an Application Optimizer supported by this system.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 96)

class CwoAoOperationalState(TextualConvention, Integer32):
    description = 'Represents Various operational states of an Application Optimizer. shutdown : This state indicates that an AO is in shutdown state. initializing : This state indicates that an AO is getting Initialized. normalRunning : This state indicates that an AO is running normally. normalDisabled : This state indicates that an AO is in normal disabled. licenseExpired : This state indicates that license for an AO is expired. cleaningup : This state indicates that an AO is in cleaning up state. error : This state indicates that some error has happened in AO operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("shutdown", 1), ("initializing", 2), ("normalRunning", 3), ("normalDisabled", 4), ("licenseExpired", 5), ("cleaningup", 6), ("error", 7))

class CwoLoadStates(TextualConvention, Integer32):
    description = 'Represents load status of the system or feature. unknown : This state is applicable when feature is not active or disabled. green : This state indicates that the feature is operating normally, within acceptable load limits. yellow : This state indicates that the feature is overloaded, and new connections received by it may not get optimized. red : This state indicates that the feature is not healthy, and existing as well as new connections received by it may not get optimized.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("green", 2), ("yellow", 3), ("red", 4))

class CwoTypes(TextualConvention, Integer32):
    description = 'Represents various types related to wan optimization system. One such use is types of class-map and policy-map for wan optimization syatem. waas : It is used for wan optimization functionality. appnav : It is used for application traffic redirection to wan optimization systems.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("waas", 1), ("appnav", 2))

ciscoWanOptimizationMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 0))
ciscoWanOptimizationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1))
ciscoWanOptimizationMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 3))
ciscoWanOptimizationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1))
cwoGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 1))
cwoTfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2))
cwoAo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3))
cwoApp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4))
cwoPmap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5))
cwoCmap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6))
cwoDre = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7))
cwoGeneralActivePeers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 1, 1), Gauge32()).setUnits('number of peers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoGeneralActivePeers.setStatus('current')
if mibBuilder.loadTexts: cwoGeneralActivePeers.setDescription('This object contains total number of active peers connected with this device for WAN optimization.')
cwoGeneralMaxActivePeers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoGeneralMaxActivePeers.setStatus('current')
if mibBuilder.loadTexts: cwoGeneralMaxActivePeers.setDescription('This object contains maximum number of peers that this device can peer with for WAN optimization.')
cwoGeneralCpuThrottleHigh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwoGeneralCpuThrottleHigh.setStatus('current')
if mibBuilder.loadTexts: cwoGeneralCpuThrottleHigh.setDescription('This object contains high threshold (percentage) value of CPU usage of system when WAN optimization feature is running. The current CPU utilization, stored in cpmCPUTotalMonIntervalValue, is compared against this value. A cwoCpuThrottlingOn notification is generated whenever cpmCPUTotalMonIntervalValue exceeds cwoGeneralCpuThrottleHigh for cwoGeneralCpuThrottlPeriod.')
cwoGeneralCpuThrottleLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwoGeneralCpuThrottleLow.setStatus('current')
if mibBuilder.loadTexts: cwoGeneralCpuThrottleLow.setDescription('This object contains low threshold (percentage) value of CPU usage of system when WAN optimization feature is running. The current CPU utilization, stored in cpmCPUTotalMonIntervalValue, is compared against this value. A cwoCpuThrottlingOff notification is generated if a prior cwoCpuThrottlingOn notification was generated, and the current value of cpmCPUTotalMonIntervalValue is below cwoGeneralCpuThrottleLow for cwoGeneralCpuThrottlPeriod. Note that the value of cwoGeneralCpuThrottleLow must be less than or equal to cwoGeneralCpuThrottleHigh.')
cwoGeneralCpuThrottlPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 1, 5), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwoGeneralCpuThrottlPeriod.setStatus('current')
if mibBuilder.loadTexts: cwoGeneralCpuThrottlPeriod.setDescription('This Object indicates CPU throttling observation period. The value of the CPU utilization for this period is stored in cpmCPUTotalMonIntervalValue. If the value of cpmCPUTotalMonIntervalValue object is above cwoGeneralCPUThrottleHigh, a cwoCPUThrottlingOn notification is sent. If it is below cwoGeneralCPUThrottleLow, a cwoCPUThrottlingOff notification is sent to the NMS.')
cwoTfoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1))
cwoTfoStatsTotalOptConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsTotalOptConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsTotalOptConn.setDescription('This object contains total number of TCP connections optimized since TFO was started or its statistics were last reset.')
cwoTfoStatsActiveOptConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsActiveOptConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsActiveOptConn.setDescription('This object contains number of currently active TCP connections getting optimized.')
cwoTfoStatsMaxActiveConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 3), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsMaxActiveConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsMaxActiveConn.setDescription('This object contains maximum number of active TCP connections that this device can optimize.')
cwoTfoStatsActiveOptTCPPlusConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsActiveOptTCPPlusConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsActiveOptTCPPlusConn.setDescription('This object contains number of active TCP connections going through TCP plus other optimization.')
cwoTfoStatsActiveOptTCPOnlyConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsActiveOptTCPOnlyConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsActiveOptTCPOnlyConn.setDescription('This object contains number of active connections going through only TCP optimization.')
cwoTfoStatsActiveOptTCPPrepConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsActiveOptTCPPrepConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsActiveOptTCPPrepConn.setDescription('This object contains number of current active TCP connections that were originated by an accelerator to acquire data in anticipation of its future use.')
cwoTfoStatsActiveADConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsActiveADConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsActiveADConn.setDescription('This object contains number of current active TCP connections in the auto-discovery state.')
cwoTfoStatsReservedConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsReservedConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsReservedConn.setDescription('This object contains number of TCP connections reserved for the MAPI accelerator.')
cwoTfoStatsPendingConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsPendingConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsPendingConn.setDescription('This object contains number of TCP connections, which are pending in queue of connections to be optimized.')
cwoTfoStatsActivePTConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsActivePTConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsActivePTConn.setDescription('This object contains number of active Pass Through TCP connections. Connections which are not selected for optimization are called Pass Through.')
cwoDreCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1))
cwoDrePerfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2))
cwoDreCacheStatsStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 1), CwoDreCacheStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsStatus.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsStatus.setDescription('This object describes the status of the portion of the disk that is meant for DRE cache.')
cwoDreCacheStatsAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsAge.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsAge.setDescription("This object indicates the age of the oldest data present in the DRE cache. For example, let us say that the portion of the disk space allocated for DRE cache is 1GB and it is full. Now, if new data is written onto this cache, then it would replace the oldest data in the cache in First-In-First-Out (FIFO) order. This object will specify what is the oldest data now present in the cache. It takes the format of <x>d<x>h<x>m, where 'x' is an integer number. For example, 6d20h30m means that the oldest data's age is 6 days, 20 hours and 30 minutes.")
cwoDreCacheStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 3), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsTotal.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsTotal.setDescription('This object indicates the percentage of available disk space for DRE cache. For example, if the total disk space is 202 GB and let us say that 20% of this disk space is allocated for DRE cache, then this would mean that 40GB (40960 MB) out of the total disk space is allocated for DRE cache.')
cwoDreCacheStatsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 4), Gauge32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsUsed.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsUsed.setDescription('This object indicates the percentage of DRE disk space currently used out of the total space allocated for DRE cache. For example, if the disk space allocated for DRE cache is 972798MB and if this object indicates 1%, it means that 9727 MB is used and remaining approximate 963071 MB of disk space is free.')
cwoDreCacheStatsDataUnitUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 5), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsDataUnitUsage.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsDataUnitUsage.setDescription('This object indicates DRE disk space currently used by data unit. DRE stores the actual data as data units in data block and the metadata (chuck signature) in signature block.')
cwoDreCacheStatsReplacedOneHrDataUnit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 6), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsReplacedOneHrDataUnit.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsReplacedOneHrDataUnit.setDescription('This object indicates the amount of data unit replaced in the last one hour in DRE cache. DRE stores the actual data as data units in the cache data block. If new data units have to be stored in the cache, the older data units in the cache are evicted in First-In-First-Out (FIFO) order. This object would also indicate how much new data units have been stored in the DRE cache in the past one hour.')
cwoDreCacheStatsDataUnitAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsDataUnitAge.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsDataUnitAge.setDescription("This object indicates the age of oldest data unit in the data block. DRE stores the actual data as data units in the data block and the metadata (chuck signature) in signature block. If new data unit should be written to the data block when it is full, then the oldest data unit currently present in the data block will be evicted. So this object would indicate the age of the oldest data unit present in the DRE cache. It takes the format of <x>d<x>h<x>m, where 'x' is an integer number. For example, 6d20h30m means that the oldest data's age is 6 days, 20 hours and 30 minutes.")
cwoDreCacheStatsSigblockUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 8), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsSigblockUsage.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsSigblockUsage.setDescription('This object indicates DRE disk space currently used by sigblock or signature block. DRE stores the actual data as data units in cache data block and the metadata (chuck signature) in signature block.')
cwoDreCacheStatsReplacedOneHrSigblock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 9), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsReplacedOneHrSigblock.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsReplacedOneHrSigblock.setDescription('This object indicates the amount of signatures replaced in last one hour in sigblock. DRE stores the metadata (chuck signature) in signature block of DRE cache. If new signatures have to be stored in the cache, the older signatures in the sigblock are evicted in First-In-First-Out (FIFO) order. This object would also indicate how much new signatures have been stored in the DRE cache sigblock in the past one hour.')
cwoDreCacheStatsSigblockAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDreCacheStatsSigblockAge.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsSigblockAge.setDescription("This object indicates the age of oldest signature in the sigblock. DRE stores the actual data as data units in the data block and the metadata (chuck signature) in signature block. If a new signature should be written to the sigblock when it is full, then the oldest signature currently present in the sigblock will be evicted. So this object would indicate the age of the oldest signature present in the DRE cache. It takes the format of <x>d<x>h<x>m, where 'x' is an integer number. For example, 6d20h30m means that the oldest data's age is 6 days, 20 hours and 30 minutes.")
cwoDrePerfStatsEncodeCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDrePerfStatsEncodeCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsEncodeCompressionRatio.setDescription('This object indicates the total compression ratio provided by all the DRE components - DRE, LZ and PLZ (if applicable), during the encoding process. It is the ratio of the number of bytes entering the DRE module (from LAN side) and the number of bytes exiting the DRE module (from WAN side). This object indicates the value that is calculated since the last time the counter was cleared. The calculation is not based on per-connection or per-peer basis.')
cwoDrePerfStatsEncodeCompressionLatency = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2, 2), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDrePerfStatsEncodeCompressionLatency.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsEncodeCompressionLatency.setDescription('This object indicates the processing latency that is introduced by DRE/LZ/PLZ processes during the encoding of data that is coming into the DRE module. The encoding process comprises of dividing the input data into chunks and calculating the signature of every chunk. This encoding process would add certain latency. Then the LZ compression would add further latency. This object indicates the value that is calculated since the last time the counter was cleared. The calculation is not based on per-connection or per-peer basis.')
cwoDrePerfStatsEncodeAvgMsgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDrePerfStatsEncodeAvgMsgSize.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsEncodeAvgMsgSize.setDescription('This object indicates the average size of all the messages handled by DRE during encoding (i.e., for all the messages received from the LAN side). The message size is an important factor in performance of DRE. This object indicates the value that is calculated since the last time the counter was cleared. The calculation is not based on per-connection or per-peer basis.')
cwoDrePerfStatsDecodeCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDrePerfStatsDecodeCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsDecodeCompressionRatio.setDescription('This object indicates the total compression ratio provided by all the DRE components - DRE, LZ and PLZ (if applicable), during the decoding process. It is the ratio of the number of bytes entering the DRE module (from WAN side) and the number of bytes exiting the DRE module (from LAN side). This object indicates the value that is calculated since the last time the counter was cleared. The calculation is not based on per-connection or per-peer basis.')
cwoDrePerfStatsDecodeCompressionLatency = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2, 5), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDrePerfStatsDecodeCompressionLatency.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsDecodeCompressionLatency.setDescription('This object indicates the processing latency that is introduced by DRE/LZ/PLZ processes during the decoding of data that is coming into the DRE module. The LZ decompression (for applicable data) would add certain latency. Then the decoding process that involves a lot of signature look-up for disk IO and data fetch from the data unit for recreation of original data, would add further latency. This object indicates the value that is calculated since the last time the counter was cleared. The calculation is not based on per-connection or per-peer basis.')
cwoDrePerfStatsDecodeAvgMsgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 7, 2, 6), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoDrePerfStatsDecodeAvgMsgSize.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsDecodeAvgMsgSize.setDescription('This object indicates the average size of all the messages handled by DRE during decoding (i.e., for all the messages received from the WAN side). The message size is an important factor in performance of DRE. This object indicates the value that is calculated since the last time the counter was cleared. The calculation is not based on per-connection or per-peer basis.')
cwoTfoStatsTotalNormalClosedConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsTotalNormalClosedConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsTotalNormalClosedConn.setDescription('This object contains total number of optimized TCP connections which were closed normally since TFO was started or its statistics were last reset.')
cwoTfoStatsResetConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsResetConn.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsResetConn.setDescription('This object contains total number of optimized TCP connections, which are reset since TFO was started or its statistics were last reset.')
cwoTfoStatsLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 2, 1, 13), CwoLoadStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTfoStatsLoadStatus.setStatus('current')
if mibBuilder.loadTexts: cwoTfoStatsLoadStatus.setDescription('This object indicates the load status of Traffic Flow Optimizer (TFO).')
cwoAoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1), )
if mibBuilder.loadTexts: cwoAoStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsTable.setDescription('This table gives statistics of Application Optimizers.')
cwoAoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsName"))
if mibBuilder.loadTexts: cwoAoStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsEntry.setDescription('An entry containing statistics for particular Application optimizer. An entry will be created during system startup and will include AOs, which are supported by this system.')
cwoAoStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 1), CwoAoName())
if mibBuilder.loadTexts: cwoAoStatsName.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsName.setDescription('This object represents name of the AO.')
cwoAoStatsIsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsIsConfigured.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsIsConfigured.setDescription("This object indicates whether the AO is configured or not. If AO is not configured then the operational state (cwoAoStatsOperationalState) of AO would be 'shutdown'.")
cwoAoStatsIsLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsIsLicensed.setDescription("This object indicates whether license for the AO is valid or not. If License for AO is not valid then operational state (cwoAoStatsOperationalState) of AO would be 'shutdown'.")
cwoAoStatsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 4), CwoAoOperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsOperationalState.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsOperationalState.setDescription("This object indicates operational state of the AO. If AO is not configured or license is not valid for this AO then operational state of AO would be 'shutdown'.")
cwoAoStatsStartUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsStartUpTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsStartUpTime.setDescription('This object contains date and time when AO was started. This object will hold NULL value when AO is in shutdown state.')
cwoAoStatsLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsLastResetTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsLastResetTime.setDescription('This object contains date and time when statistics of AO were set to reset last time. When statistics of AO set to reset then all statistics counters will also set to reset. This object will hold NULL value when AO is in shutdown state.')
cwoAoStatsTotalHandledConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsTotalHandledConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsTotalHandledConns.setDescription('This object contains total number of connections handled by AO since it was started or its statistics were last reset.')
cwoAoStatsTotalOptConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsTotalOptConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsTotalOptConns.setDescription('This object contains total number of connections optimized by AO since it was started or its statistics were last reset.')
cwoAoStatsTotalHandedOffConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsTotalHandedOffConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsTotalHandedOffConns.setDescription('This object contains total number of connections handed off to Generic optimization by AO since it was started or its statistics last reset.')
cwoAoStatsTotalDroppedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsTotalDroppedConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsTotalDroppedConns.setDescription('This object contains total number of connections dropped by AO since it was started or its statistics were last reset.')
cwoAoStatsActiveOptConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsActiveOptConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsActiveOptConns.setDescription('This object contains number of active connections which are getting optimized by AO.')
cwoAoStatsPendingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsPendingConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsPendingConns.setDescription('This object contains number of connections currently pending in queue of connections to be optimized by AO.')
cwoAoStatsMaxActiveOptConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsMaxActiveOptConns.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsMaxActiveOptConns.setDescription('This object contains maximum number of active TCP connections that AO can optimize.')
cwoAoStatsLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 14), CwoLoadStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsLoadStatus.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsLoadStatus.setDescription('This object indicates the load status of an AO.')
cwoAoStatsBwOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 1, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoStatsBwOpt.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsBwOpt.setDescription('This object indicates the percentage bandwidth optimization achieved due to optimizations done by an AO.')
cwoAoSmbxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2))
cwoAoSmbxStatsBytesReadCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesReadCache.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesReadCache.setDescription('This object contains total number of bytes read from SMB Application Optimizer cache (Read-ahead and Metadata cache) since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsBytesWriteCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesWriteCache.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesWriteCache.setDescription('This object contains total number of bytes written to SMB Application Optimizer cache (Read-ahead and Metadata) since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsBytesReadServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesReadServer.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesReadServer.setDescription('This object contains total number of bytes read from file servers by SMB Application Optimizer since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsBytesWriteServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesWriteServer.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesWriteServer.setDescription('This object contains total number of bytes written to file servers by SMB Application Optimizer since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsBytesReadClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesReadClient.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesReadClient.setDescription('This object contains total number of bytes read by SMB Application Optimizer clients since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsBytesWriteClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesWriteClient.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsBytesWriteClient.setDescription('This object contains total number of bytes written by SMB Application optimizer clients since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsProcessedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 7), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsProcessedReqs.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsProcessedReqs.setDescription('This object contains total number of requests processed by SMB Application Optimizer since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsActiveReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 8), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsActiveReqs.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsActiveReqs.setDescription('This object contains total number of active requests getting processed by SMB Application Optimizer.')
cwoAoSmbxStatsTotalTimedOutReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 9), Unsigned64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalTimedOutReqs.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalTimedOutReqs.setDescription('This object contains total number of requests timed out in SMB Application Optimizer since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsTotalRemoteReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 10), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalRemoteReqs.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalRemoteReqs.setDescription('This object contains total number of SMB requests sent to remote file server since SMB AO was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsTotalLocalReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalLocalReqs.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalLocalReqs.setDescription('This object contains total number of SMB requests served locally by SMB Application Optimizer since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsRemoteAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 12), CiscoMilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRemoteAvgTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRemoteAvgTime.setDescription('This object contains average duration of time taken by SMB Application Optimizer to process all remote requests since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsLocalAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 13), CiscoMilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsLocalAvgTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsLocalAvgTime.setDescription('This object contains average duration of time taken by SMB Application Optimizer to process all local requests since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsRACacheHitCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRACacheHitCount.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRACacheHitCount.setDescription('This object contains SMB Application Optimizer Read Ahead Cache hit count since SMB AO was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsMDCacheHitCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsMDCacheHitCount.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsMDCacheHitCount.setDescription('This object contains SMB Application Optimizer Metadata cache hit count since SMB AO was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsRACacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRACacheHitRate.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRACacheHitRate.setDescription('This object contains SMB Application Optimizer Read Ahead cache hit rate since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsMDCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsMDCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsMDCacheHitRate.setDescription('This object contains SMB Application Optimizer Metadata cache hit rate since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsMaxRACacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 18), Unsigned64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsMaxRACacheSize.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsMaxRACacheSize.setDescription('This object contains Maximum disk space that can be allocated for Read Ahead data in SMB Application Optimizer cache.')
cwoAoSmbxStatsMaxMDCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 19), Unsigned64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsMaxMDCacheSize.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsMaxMDCacheSize.setDescription('This object contains maximum disk space that can be allocated for Metadata in SMB Application Optimizer cache.')
cwoAoSmbxStatsMDCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 20), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsMDCacheSize.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsMDCacheSize.setDescription('This object contains current size of Metadata cache in SMB Application Optimizer.')
cwoAoSmbxStatsRAEvictedAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 21), CiscoMilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRAEvictedAge.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRAEvictedAge.setDescription('This object contains amount of time spent in the SMB Application Optimizer Read Ahead cache by the resource that was last evicted since last update. If this amount is too short or too long, it is recommended to modify the size of the cache.')
cwoAoSmbxStatsRTT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 22), TimeIntervalSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRTT.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRTT.setDescription('This object contains total round trip time for all SMB connections since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsTotalRespTimeSaving = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 23), TimeIntervalSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalRespTimeSaving.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalRespTimeSaving.setDescription('This object contains total response time saved due to SMB AO optimizations since it was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 24), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsOpenFiles.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsOpenFiles.setDescription('This object contains number of files currently opened by SMB Application Optimizer.')
cwoAoSmbxStatsTotalFilesInRACache = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 25), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalFilesInRACache.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsTotalFilesInRACache.setDescription('This object contains total number of files in SMB Application optimizer Read Ahead cache.')
cwoAoSmbxStatsRdL4SignWANBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRdL4SignWANBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRdL4SignWANBytes.setDescription('This object contains the total number of Layer 4 (L4) optimized signed bytes read from WAN by SMB Application Optimizer since the SMB Application Optimizer was started. L4 optimization comprises of TFO, DRE and LZ optimizations. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsWrL4SignWANBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsWrL4SignWANBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsWrL4SignWANBytes.setDescription('This object contains the total number of Layer 4 (L4) optimized signed bytes written to WAN by SMB Application Optimizer since SMB Application Optimizer was started. L4 optimization comprises of TFO, DRE and LZ optimizations. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsRdSignLANBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsRdSignLANBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsRdSignLANBytes.setDescription('This object contains the total number of signed bytes read from LAN by SMB Application Optimizer since the SMB Application Optimizer was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoSmbxStatsWrSignLANBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoSmbxStatsWrSignLANBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbxStatsWrSignLANBytes.setDescription('This object contains the total number of original signed bytes written to LAN by SMB Application Optimizer since SMB Application Optimizer was started. Discontinuities in the value of this counter can occur at re-initialization of the SMB AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the SMB AO.')
cwoAoHttpxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3))
cwoAoHttpxStatsTotalSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 1), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSavedTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSavedTime.setDescription('This object indicates total time saved due to optimizations done by HTTP AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the HTTP AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the HTTP AO.')
cwoAoHttpxStatsTotalRTT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 2), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalRTT.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalRTT.setDescription('This object indicates total Round Trip Time (RTT) for all the connections going through HTTP AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the HTTP AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the HTTP AO.')
cwoAoHttpxStatsTotalMDCMTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 3), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalMDCMTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalMDCMTime.setDescription('This object indicates total time for Meta Data Cache Misses (MDCM) for HTTP AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the HTTP AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the HTTP AO.')
cwoAoHttpxStatsEstSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsEstSavedTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsEstSavedTime.setDescription('This object indicates percentage estimated time saved due to optimizations done by HTTP AO since it was started.')
cwoAoHttpxStatsTotalSPSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 5), Counter64()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPSessions.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPSessions.setDescription('This object indicates the total number of SharePoint Optimized HTTP sessions. This counter is incremented for every session on which SharePoint optimization can be performed. An HTTP session is tagged as a SharePoint Session based on the information present in the HTTP request.')
cwoAoHttpxStatsTotalSPPFSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 6), Counter64()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPPFSessions.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPPFSessions.setDescription('This object indicates the total number of SharePoint Pre-fetch optimized HTTP sessions. This counter is incremented for every session on which SharePoint pre-fetch optimization can be performed. An HTTP session is tagged as a SharePoint pre-fetch Session based on the information present in the HTTP request. A pre-fetch operation is one where the edge WAAS device fetches the next set of data (which it anticipates the client will request later) from the server based on the current HTTP Request information.')
cwoAoHttpxStatsTotalSPPFObjects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 7), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPPFObjects.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPPFObjects.setDescription('This object indicates the total number of pre-fetched objects served locally for SharePoint pre-fetch sessions. The edge WAAS device maintains a local cache where the pre-fetched responses are saved. This object is incremented whenever the SharePoint client request is served from the pre-fetch cache.')
cwoAoHttpxStatsTotalSPRTTSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 8), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPRTTSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPRTTSaved.setDescription('This object contains total Round Trip Time (RTT) saved due to SharePoint pre-fetch optimizations since SharePoint pre-fetch optimization was started. Discontinuities in the value of this counter can occur at re-initialization of the HTTP AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the HTTP AO.')
cwoAoHttpxStatsTotalSPPFMissTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 9), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPPFMissTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsTotalSPPFMissTime.setDescription('This object indicates total time for SharePoint pre-fetch Cache Misses since SharePoint pre-fetch optimization was started. Discontinuities in the value of this counter can occur at re-initialization of the HTTP AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the HTTP AO.')
cwoAoHttpxStatsAKC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10))
cwoAoHttpxStatsAKCBypassEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1))
cwoAoHttpxStatsAKCStdEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2))
cwoAoHttpxStatsAKCBasicEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3))
cwoAoHttpxStatsAKCAdvEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4))
cwoAoHttpxStatsAKCTotalEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5))
cwoAoHttpxStatsAKCPrepTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 6), )
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepTable.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepTable.setDescription('This table gives statistics of Akamai Preposition tasks.')
cwoAoHttpxStatsAKCPrepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 6, 1), ).setIndexNames((0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCPrepTaskName"))
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepEntry.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepEntry.setDescription('An entry containing statistics for a particular Akamai Preposition task.')
cwoAoHttpxStatsAKCPrepTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepTaskName.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepTaskName.setDescription('This object indicates the name of the preposition task in Akamai connected cache preposition operation.')
cwoAoHttpxStatsAKCPrepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 6, 1, 2), CwoHttpAKCPrepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepStatus.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepStatus.setDescription('This object indicates the current status of the preposition task in Akamai connected cache preposition operation.')
cwoAoHttpxStatsAKCPrepCacheStoreBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 6, 1, 3), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepCacheStoreBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepCacheStoreBytes.setDescription('This object indicates the total number of response bytes stored in the cache for a particular preposition task in Akamai connected cache preposition operation.')
cwoAoHttpxStatsAKCPrepUncacheStoreBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 6, 1, 4), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepUncacheStoreBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCPrepUncacheStoreBytes.setDescription('This object indicates the total number of response bytes not stored in the cache for a particular preposition task in Akamai connected cache preposition operation.')
cwoAoHttpxStatsAKCBypassCacheTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 1), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassCacheTrans.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassCacheTrans.setDescription('This object indicates the Akamai connected cache statistics for total number of cache-bypass transactions that were handled in bypass mode transparent cache profile. When bypass mode transparent cache profile is set for a particular hostname, the caching for the hostname specified in a rule is suppressed. In this mode, the cache-engine turns off caching for one or more configured sites.')
cwoAoHttpxStatsAKCBypassRespBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassRespBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassRespBytes.setDescription('This object indicates the total number of response bytes saved for cache-hit HTTP transactions in bypass mode transparent cache profile.')
cwoAoHttpxStatsAKCBypassCacheTransPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassCacheTransPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassCacheTransPercent.setDescription('This object indicates the percentage of total number of cache-hit HTTP transactions in bypass mode transparent cache profile.')
cwoAoHttpxStatsAKCBypassRespBytesPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassRespBytesPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassRespBytesPercent.setDescription('This object indicates the percentage of total number of response bytes saved for cache-hit HTTP transactions in bypass mode transparent cache profile.')
cwoAoHttpxStatsAKCBypassCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 5), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassCacheRespTimeSaved.setDescription('This object indicates the total response time saved for cache-hit HTTP transactions in bypass mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCBypassAvgCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 6), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassAvgCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassAvgCacheRespTimeSaved.setDescription('This object indicates the average response time saved per cache-hit HTTP transaction in bypass mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCBypassRespTimeSavedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassRespTimeSavedPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBypassRespTimeSavedPercent.setDescription('This object indicates the percentage of total response time saved for cache-hit HTTP transactions in bypass mode transparent cache profile.')
cwoAoHttpxStatsAKCStdCacheTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 1), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdCacheTrans.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdCacheTrans.setDescription('This object indicates the Akamai connected cache statistics for total number of cache-hit transactions that were served from cache in standard mode transparent cache profile. This is a default mode.In this mode, the cache engine also follows the RFC-2616 behavior for cache control headers with the exception of not honoring the client cache override behavior.')
cwoAoHttpxStatsAKCStdRespBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdRespBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdRespBytes.setDescription('This object indicates the total number of response bytes saved for cache-hit HTTP transactions in standard mode transparent cache profile.')
cwoAoHttpxStatsAKCStdCacheTransPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdCacheTransPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdCacheTransPercent.setDescription('This object indicates the percentage of total number of cache-hit HTTP transactions in standard mode transparent cache profile.')
cwoAoHttpxStatsAKCStdRespBytesPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdRespBytesPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdRespBytesPercent.setDescription('This object indicates the percentage of total number of response bytes saved for cache-hit HTTP transactions in standard mode transparent cache profile.')
cwoAoHttpxStatsAKCStdCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 5), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdCacheRespTimeSaved.setDescription('This object indicates the total response time saved for cache-hit HTTP transactions in standard mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCStdAvgCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 6), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdAvgCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdAvgCacheRespTimeSaved.setDescription('This object indicates the average response time saved per cache-hit HTTP transaction in standard mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCStdRespTimeSavedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 2, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdRespTimeSavedPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCStdRespTimeSavedPercent.setDescription('This object indicates the percentage of total response time saved for cache-hit HTTP transactions in standard mode transparent cache profile.')
cwoAoHttpxStatsAKCBasicCacheTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 1), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicCacheTrans.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicCacheTrans.setDescription('This object indicates the Akamai connected cache statistics for total number of cache-hit transactions that were served from cache in basic mode transparent cache profile. In this mode, the cache engine works in strict RFC-2616 behavior, and therefore, only caches responses that are marked explicitly as cacheable with cache-control headers or responses that have an expiry header to service and accelerate traffic from a datacenter to a branch office over any type of IP network.')
cwoAoHttpxStatsAKCBasicRespBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicRespBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicRespBytes.setDescription('This object indicates the total number of response bytes saved for cache-hit HTTP transactions in basic mode transparent cache profile.')
cwoAoHttpxStatsAKCBasicCacheTransPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicCacheTransPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicCacheTransPercent.setDescription('This object indicates the percentage of total number of cache-hit HTTP transactions in basic mode transparent cache profile.')
cwoAoHttpxStatsAKCBasicRespBytesPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicRespBytesPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicRespBytesPercent.setDescription('This object indicates the percentage of total number of response bytes saved for cache-hit HTTP transactions in basic mode transparent cache profile.')
cwoAoHttpxStatsAKCBasicCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 5), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicCacheRespTimeSaved.setDescription('This object indicates the total response time saved for cache-hit HTTP transactions in basic mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCBasicAvgCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 6), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicAvgCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicAvgCacheRespTimeSaved.setDescription('This object indicates the average response time saved per cache-hit HTTP transaction in basic mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCBasicRespTimeSavedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 3, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicRespTimeSavedPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCBasicRespTimeSavedPercent.setDescription('This object indicates the percentage of total response time saved for cache-hit HTTP transactions in basic mode transparent cache profile.')
cwoAoHttpxStatsAKCAdvCacheTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 1), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvCacheTrans.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvCacheTrans.setDescription('This object indicates the Akamai connected cache statistics for total number of cache-hit transactions that were served from cache in advanced mode transparent cache profile. In advanced mode,the cache engine caches media types more aggressively, and caches all object types for longer time (when there is no explicit expiration time).')
cwoAoHttpxStatsAKCAdvRespBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvRespBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvRespBytes.setDescription('This object indicates the total number of response bytes saved for cache-hit HTTP transactions in advanced mode transparent cache profile.')
cwoAoHttpxStatsAKCAdvCacheTransPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvCacheTransPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvCacheTransPercent.setDescription('This object indicates the percentage of total number of cache-hit HTTP transactions in advanced mode transparent cache profile.')
cwoAoHttpxStatsAKCAdvRespBytesPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvRespBytesPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvRespBytesPercent.setDescription('This object indicates the percentage of total number of response bytes saved for cache-hit HTTP transactions in advanced mode transparent cache profile.')
cwoAoHttpxStatsAKCAdvCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 5), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvCacheRespTimeSaved.setDescription('This object indicates the total response time saved for cache-hit HTTP transactions in advanced mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCAdvAvgCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 6), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvAvgCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvAvgCacheRespTimeSaved.setDescription('This object indicates the average response time saved per cache-hit HTTP transaction in advanced mode transparent cache profile, in milli-seconds.')
cwoAoHttpxStatsAKCAdvRespTimeSavedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 4, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvRespTimeSavedPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCAdvRespTimeSavedPercent.setDescription('This object indicates the percentage of total response time saved for cache-hit HTTP transactions in advanced mode transparent cache profile.')
cwoAoHttpxStatsAKCTotalCacheTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 1), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalCacheTrans.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalCacheTrans.setDescription('This object indicates the aggregation of all the statistics related to various Akamai Connected Cache profile types - Bypass, Standard, Basic and Advanced.')
cwoAoHttpxStatsAKCTotalRespBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalRespBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalRespBytes.setDescription('This object indicates the total number of response bytes saved for cache-hit HTTP transactions in all transparent cache profile modes.')
cwoAoHttpxStatsAKCTotalCacheTransPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalCacheTransPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalCacheTransPercent.setDescription('This object indicates the percentage of total number of cache-hit HTTP transactions in all transparent cache profile modes.')
cwoAoHttpxStatsAKCTotalRespBytesPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalRespBytesPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalRespBytesPercent.setDescription('This object indicates the percentage of total number of response bytes saved for cache-hit HTTP transactions in all transparent cache profile modes.')
cwoAoHttpxStatsAKCTotalCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 5), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalCacheRespTimeSaved.setDescription('This object indicates the total response time saved for cache-hit HTTP transactions in all transparent cache profile modes, in milli-seconds.')
cwoAoHttpxStatsAKCTotalAvgCacheRespTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 6), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalAvgCacheRespTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalAvgCacheRespTimeSaved.setDescription('This object indicates the average response time saved per cache-hit HTTP transaction in all transparent cache profile modes, in milli-seconds.')
cwoAoHttpxStatsAKCTotalRespTimeSavedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 3, 10, 5, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalRespTimeSavedPercent.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpxStatsAKCTotalRespTimeSavedPercent.setDescription('This object indicates the percentage of total response time saved for Cache-hit HTTP transactions in all transparent cache profile modes.')
cwoAoMapixStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4))
cwoAoMapixStatsUnEncrALRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 1), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsUnEncrALRT.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsUnEncrALRT.setDescription('This object indicates Average Local Response Time (ALRT) for unencrypted connections of MAPI AO since it was started.')
cwoAoMapixStatsEncrALRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 2), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsEncrALRT.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsEncrALRT.setDescription('This object indicates Average Local Response Time (ALRT) for encrypted connections of MAPI AO since it was started.')
cwoAoMapixStatsUnEncrARRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 3), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsUnEncrARRT.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsUnEncrARRT.setDescription('This object indicates Average Remote Response Time (ARRT) for unencrypted connections of MAPI AO since it was started.')
cwoAoMapixStatsEncrARRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 4), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsEncrARRT.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsEncrARRT.setDescription('This object indicates Average Remote Response Time (ARRT) for encrypted connections of MAPI AO since it was started.')
cwoAoMapixStatsTotalUnEncrLRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsTotalUnEncrLRs.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsTotalUnEncrLRs.setDescription('This object indicates total requests served locally for unencrypted connections by MAPI AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the MAPI AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the MAPI AO.')
cwoAoMapixStatsTotalEncrLRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 6), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsTotalEncrLRs.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsTotalEncrLRs.setDescription('This object indicates total requests served locally for encrypted connections by MAPI AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the MAPI AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the MAPI AO.')
cwoAoMapixStatsTotalUnEncrRRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 7), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsTotalUnEncrRRs.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsTotalUnEncrRRs.setDescription('This object indicates total Remote Requests(RR) served by remote servers for unencrypted connections of MAPI AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the MAPI AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the MAPI AO.')
cwoAoMapixStatsTotalEncrRRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsTotalEncrRRs.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsTotalEncrRRs.setDescription('This object indicates total Remote Requests(RR) served by remote servers for encrypted connections by MAPI AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the MAPI AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the MAPI AO.')
cwoAoMapixStatsUnEncrAvgRedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 9), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsUnEncrAvgRedTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsUnEncrAvgRedTime.setDescription('This object indicates average time reduced for unencrypted connections due to optimizations done by MAPI AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the MAPI AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the MAPI AO.')
cwoAoMapixStatsEncrAvgRedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 4, 10), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoMapixStatsEncrAvgRedTime.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapixStatsEncrAvgRedTime.setDescription('This object indicates average time reduced for encrypted connections due to optimizations done by MAPI AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the MAPI AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the MAPI AO.')
cwoAoNfsxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 5))
cwoAoNfsxStatsALRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 5, 1), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoNfsxStatsALRT.setStatus('current')
if mibBuilder.loadTexts: cwoAoNfsxStatsALRT.setDescription('This object indicates Average Local Response Time (ALRT) for NFS AO since it was started.')
cwoAoNfsxStatsARRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 5, 2), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoNfsxStatsARRT.setStatus('current')
if mibBuilder.loadTexts: cwoAoNfsxStatsARRT.setDescription('This object indicates Average Remote Response Time (ARRT) for NFS AO since it was started.')
cwoAoNfsxStatsTotalLRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 5, 3), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoNfsxStatsTotalLRs.setStatus('current')
if mibBuilder.loadTexts: cwoAoNfsxStatsTotalLRs.setDescription('This object indicates total requests served locally by NFS AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the NFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the NFS AO.')
cwoAoNfsxStatsTotalRRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 5, 4), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoNfsxStatsTotalRRs.setStatus('current')
if mibBuilder.loadTexts: cwoAoNfsxStatsTotalRRs.setDescription('This object indicates total Remote Requests (RR) served by remote servers for NFS AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the NFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the NFS AO.')
cwoAoNfsxStatsEstTimeSaved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 5, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoNfsxStatsEstTimeSaved.setStatus('current')
if mibBuilder.loadTexts: cwoAoNfsxStatsEstTimeSaved.setDescription('This object indicates percentage estimated time saved due to optimizations done by NFS AO since it was started.')
cwoAoVideoxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 6))
cwoAoVideoxStatsTotalInBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 6, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoVideoxStatsTotalInBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoVideoxStatsTotalInBytes.setDescription('This object indicates total incoming bytes for Video AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the Video AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the Video AO.')
cwoAoVideoxStatsTotalOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 6, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoVideoxStatsTotalOutBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoVideoxStatsTotalOutBytes.setDescription('This object indicates total outgoing bytes for Video AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the Video AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the Video AO.')
cwoAoCifsxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7))
cwoAoCifsxStatsTotalReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 1), Counter32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalReadBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalReadBytes.setDescription('This object indicates the total bytes read by clients from the client side (via cache or remotely) using CIFS AO since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsTotalWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 2), Counter32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalWrittenBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalWrittenBytes.setDescription('This object indicates the total bytes written to the client-side using the CIFS AO since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsTotalRemoteReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 3), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalRemoteReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalRemoteReqs.setDescription('This object indicates the total requests sent to remote file server since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsTotalLocalReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 4), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalLocalReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalLocalReqs.setDescription('This object indicates the total number requests served locally by CIFS AO since it was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsTotalRemoteTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 5), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalRemoteTime.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalRemoteTime.setDescription('This object indicates the total duration of time taken by CIFS AO to process all remote requests since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsTotalLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 6), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalLocalTime.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsTotalLocalTime.setDescription('This object indicates the total duration of time taken by CIFS AO to process all local requests since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsConnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 7), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsConnectedSessions.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsConnectedSessions.setDescription('This object indicates the number of currently connected CIFS sessions.')
cwoAoCifsxStatsOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 8), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsOpenFiles.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsOpenFiles.setDescription('This object indicates the number of currently open CIFS files.')
cwoAoCifsxStatsMaxCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 9), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsMaxCacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsMaxCacheSize.setDescription('This object indicates the maximum disk space (in KB) allocated for data in the CIFS AO cache.')
cwoAoCifsxStatsCurrentCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 10), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsCurrentCacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsCurrentCacheSize.setDescription('This object indicates the amount of disk space (in KB), currently being used for data in the CIFS AO cache.')
cwoAoCifsxStatsMaxCacheResources = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 11), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsMaxCacheResources.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsMaxCacheResources.setDescription('This object indicates the maximum number of cache resources (files and directories) supported by the CIFS AO cache, regardless of the size of these resources.')
cwoAoCifsxStatsCacheResources = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 12), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsCacheResources.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsCacheResources.setDescription('This object indicates the number of cache resources (files and directories) currently held in the CIFS AO cache.')
cwoAoCifsxStatsEvictedResources = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 13), Counter32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsEvictedResources.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsEvictedResources.setDescription('This object indicates the number of cache resources (files and directories) that have been evicted from the cache since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsLastEvictedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsLastEvictedTime.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsLastEvictedTime.setDescription('This object indicates the time when cache resources (files and directories) were last evicted from the CIFS AO cache. 00:00 is displayed if no cache resources have been evicted since CIFS AO was started.')
cwoAoCifsxStatsVolHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsVolHiWatermark.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsVolHiWatermark.setDescription('This object indicates the disk usage high watermark in percentage that triggers the eviction of resources from the CIFS AO cache.')
cwoAoCifsxStatsVolLoWatermark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsVolLoWatermark.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsVolLoWatermark.setDescription('This object indicates the target disk usage low watermark percentage to be reached via cache eviction when triggered by cfVolHiWatermark. When this low watermark is reached, cache eviction stops.')
cwoAoCifsxStatsAmntHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsAmntHiWatermark.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsAmntHiWatermark.setDescription('This object indicates the target percentage of maximum cache resources (defined by cfMaxCacheResources) that triggers the eviction of resources from the CIFS AO cache.')
cwoAoCifsxStatsAmntLoWatermark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsAmntLoWatermark.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsAmntLoWatermark.setDescription('This object indicates the target percentage of maximum cache resources (defined by cfMaxCacheResources) to be reached via cache eviction when triggered by cfAmntHiWatermark. When this low watermark is reached, cache eviction stops.')
cwoAoCifsxStatsEvictedAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 19), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsEvictedAge.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsEvictedAge.setDescription('This object indicates the amount of time spent in the CIFS AO cache by the resource that was last evicted. If this amount is too short or too long, it is recommended to modify the size of the cache.')
cwoAoCifsxStatsEvictedLastAccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsEvictedLastAccess.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsEvictedLastAccess.setDescription('This object indicates the value of sysUpTime when the resource, which was last evicted from the CIFS AO cache has been last accessed.')
cwoAoCifsxStatsFFTotalReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 21), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsFFTotalReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsFFTotalReqs.setDescription('This object contains total number of FindFirst (FF) requests since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsFFRemoteReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 22), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsFFRemoteReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsFFRemoteReqs.setDescription('This object contains total number of FindFirst (FF) requests sent to the remote file-server since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsFFLocalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 23), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsFFLocalRespTime.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsFFLocalRespTime.setDescription('This object contains the average local response time for FindFirst (FF) requests replied locally since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsFFRemoteRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 24), CiscoMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsFFRemoteRespTime.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsFFRemoteRespTime.setDescription('This object contains the average remote response time for FindFirst (FF) requests replied remotely since CIFS AO was started. Discontinuities in the value of this counter can occur at re-initialization of the CIFS AO. The last discontinuity time is indicated by the value of cwoAoStatsLastResetTime for the CIFS AO.')
cwoAoCifsxStatsDirResources = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 3, 7, 25), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAoCifsxStatsDirResources.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsxStatsDirResources.setDescription('This object contains the total number of currently allocated Directory Resources in CIFS AO.')
cwoAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4, 1), )
if mibBuilder.loadTexts: cwoAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwoAppStatsTable.setDescription('This table lists the statistics for applications configured on the wan optimization system.')
cwoAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoAppStatsAppName"))
if mibBuilder.loadTexts: cwoAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwoAppStatsEntry.setDescription('An entry describing statistics for applications configured on the WAN optimization system. The WAN opimitization system creates an entry when a user configures an application for optimization. The WAN optimization system deletes an entry, when user removes the application from the configuration.')
cwoAppStatsAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cwoAppStatsAppName.setStatus('current')
if mibBuilder.loadTexts: cwoAppStatsAppName.setDescription('This object indicates the name of a particular application, which is configured for optimization.')
cwoAppStatsOriginalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4, 1, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAppStatsOriginalBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAppStatsOriginalBytes.setDescription('This object indicates total original traffic (uncompressed) in bytes of a particular application that has entered into the system.')
cwoAppStatsOptimizedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4, 1, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAppStatsOptimizedBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAppStatsOptimizedBytes.setDescription('This object indicates total optimized traffic in bytes of a particular application.')
cwoAppStatsPTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 4, 1, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoAppStatsPTBytes.setStatus('current')
if mibBuilder.loadTexts: cwoAppStatsPTBytes.setDescription('This object indicates total pass-through traffic in bytes of a particular application.')
cwoPmapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1), )
if mibBuilder.loadTexts: cwoPmapStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsTable.setDescription('This table lists the staistics for active policy maps.')
cwoPmapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsType"), (0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsName"))
if mibBuilder.loadTexts: cwoPmapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsEntry.setDescription('An entry describing statistics related with an active policy map of a given type. The WAN optimization system creates/deletes an entry for a policy map when it is made active/inactive through configuration changes.')
cwoPmapStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 1), CwoTypes())
if mibBuilder.loadTexts: cwoPmapStatsType.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsType.setDescription('This object indicates type of the policy map.')
cwoPmapStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: cwoPmapStatsName.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsName.setDescription('This object indicates name of the policy map.')
cwoPmapStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoPmapStatsDescr.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsDescr.setDescription('This object indicates the descriptive information of the policy map configured on the WAN optimization system. If the description is not configured for a given policy map then this string will contain a NULL string.')
cwoPmapStatsTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 4), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoPmapStatsTotalConns.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsTotalConns.setDescription('This object indicates total number of connections processed by the policy map since it is active.')
cwoPmapStatsTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 5), Counter64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoPmapStatsTotalBytes.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsTotalBytes.setDescription('This object indicates total bytes processed by the policy map since it is active.')
cwoPmapStatsTotalPTConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 6), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoPmapStatsTotalPTConns.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsTotalPTConns.setDescription('This object indicates total connections, which are made as pass-through due to some reason by the policy map since it is active.')
cwoPmapStatsTotalPTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 5, 1, 1, 7), Counter64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoPmapStatsTotalPTBytes.setStatus('current')
if mibBuilder.loadTexts: cwoPmapStatsTotalPTBytes.setDescription('This object indicates total bytes which are made pass-through by the policy map since it is active.')
cwoCmapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1), )
if mibBuilder.loadTexts: cwoCmapStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsTable.setDescription('This table lists the staistics for class maps associated with the active policy map.')
cwoCmapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsType"), (0, "CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsName"))
if mibBuilder.loadTexts: cwoCmapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsEntry.setDescription('An entry describes statistics for the class maps associated with active policy maps. A new entry will be created for the class map when a new class map gets associated to the policy map through the configuration changes. An entry will be deleted, when the class map is disassociated from the active policy map through the configuration changes.')
cwoCmapStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 1), CwoTypes())
if mibBuilder.loadTexts: cwoCmapStatsType.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsType.setDescription('This object indicates the type of the class map.')
cwoCmapStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: cwoCmapStatsName.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsName.setDescription('This object indicates the name of the class map.')
cwoCmapStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoCmapStatsDescr.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsDescr.setDescription('This object indicates the descriptive information of the class map configured on the WAN optimization system. If the description is not configured for a given class map then this string will contain a NULL string.')
cwoCmapStatsTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 4), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoCmapStatsTotalConns.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsTotalConns.setDescription('This object indicates the total number of connections processed by the class map.')
cwoCmapStatsTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoCmapStatsTotalBytes.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsTotalBytes.setDescription('This object indicates the total bytes processed by the class map.')
cwoCmapStatsTotalPTConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 6), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoCmapStatsTotalPTConns.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsTotalPTConns.setDescription('This object indicates total connections, which are made as pass-through due to some reason by the class map.')
cwoCmapStatsTotalPTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 762, 1, 6, 1, 1, 7), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoCmapStatsTotalPTBytes.setStatus('current')
if mibBuilder.loadTexts: cwoCmapStatsTotalPTBytes.setDescription('This object indicates the total bytes which are made pass-through by the class map.')
cwoTfoConnectionOverload = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 1)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsMaxActiveConn"))
if mibBuilder.loadTexts: cwoTfoConnectionOverload.setStatus('current')
if mibBuilder.loadTexts: cwoTfoConnectionOverload.setDescription('This notification indicates that the device has reached its limit of number of connections it can optimize. No new connections will be picked-up for optimization, while the device is in this state.')
cwoPeerOverload = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 2)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralMaxActivePeers"))
if mibBuilder.loadTexts: cwoPeerOverload.setStatus('current')
if mibBuilder.loadTexts: cwoPeerOverload.setDescription('This notification indicates the device has reached its limit of number of peer devices with which it can optimize connections. While the device is in this state, connections from new peer device will not be picked-up for optimization.')
cwoCpuThrottlingOn = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 3)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottleHigh"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottlPeriod"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"))
if mibBuilder.loadTexts: cwoCpuThrottlingOn.setStatus('current')
if mibBuilder.loadTexts: cwoCpuThrottlingOn.setDescription('This notification indicates that the device has detected that the current CPU utilization (stored in cpmCPUTotalMonIntervalValue) is higher than the cwoGeneralCpuThrottleHigh. As a result the device has entered into a throttling mode due to which connections under optimization may experience slowdown. This notification is generated the moment it occurs after a time lapse of 30 minutes since the previous notification.')
cwoCpuThrottlingOff = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 4)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottleLow"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottlPeriod"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"))
if mibBuilder.loadTexts: cwoCpuThrottlingOff.setStatus('current')
if mibBuilder.loadTexts: cwoCpuThrottlingOff.setDescription('This notification indicates that device has detected that the CPU utilization of device (stored in cpmCPUTotalMonIntervalValue) has fallen below the cwoGeneralCpuThrottleLow from cwoGeneralCpuThrottleHigh. As a result the device has come out of the throttling mode and there should not be any negative impact of CPU usage on connection under optimization. This notification is generated the moment it occurs after a time lapse of 30 minutes since the previous notification.')
cwoLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 5))
if mibBuilder.loadTexts: cwoLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: cwoLicenseExpired.setDescription('This notification is generated when the license on the system expires after the period for which it was installed.')
cwoLicenseRevoked = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 6))
if mibBuilder.loadTexts: cwoLicenseRevoked.setStatus('current')
if mibBuilder.loadTexts: cwoLicenseRevoked.setDescription('This notification is generated when a requested revoke ticket is obtained. This ticket could have been requested in order to move the license to a different system.')
cwoLicenseDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 762, 0, 7))
if mibBuilder.loadTexts: cwoLicenseDeleted.setStatus('current')
if mibBuilder.loadTexts: cwoLicenseDeleted.setDescription('This notification is generated when the license on the system is cleared.')
ciscoWanOptimizationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1, 1)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoBaseGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoOverloadNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoExtGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanOptimizationMIBCompliance = ciscoWanOptimizationMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanOptimizationMIBCompliance.setDescription('This is a default module-compliance containing default object groups.')
ciscoWanOptimizationMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1, 2)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoBaseGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoOverloadNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoExtGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanOptimizationMIBCompliance1 = ciscoWanOptimizationMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanOptimizationMIBCompliance1.setDescription('This is a default module-compliance containing default object groups.')
ciscoWanOptimizationMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1, 3)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoBaseGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoOverloadNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapiExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoVideoExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoApplicationStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoPolicyMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoClassMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoTfoExtGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoExtGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanOptimizationMIBComplianceRev2 = ciscoWanOptimizationMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanOptimizationMIBComplianceRev2.setDescription('This is a default module-compliance containing default object groups. This compliance module deprecates ciscoWanOptimizationMIBCompliance1.')
ciscoWanOptimizationMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1, 4)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoBaseGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoOverloadNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapiExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoVideoExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoApplicationStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoPolicyMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoClassMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoTfoExtGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoExtGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsExtendedStatsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanOptimizationMIBComplianceRev3 = ciscoWanOptimizationMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanOptimizationMIBComplianceRev3.setDescription('This is a default module-compliance containing default object groups. This compliance module deprecates ciscoWanOptimizationMIBComplianceRev2.')
ciscoWanOptimizationMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1, 5)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoBaseGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoOverloadNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapiExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoVideoExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoApplicationStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoPolicyMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoClassMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoTfoExtGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoExtGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsExtendedStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanOptimizationMIBComplianceRev4 = ciscoWanOptimizationMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanOptimizationMIBComplianceRev4.setDescription('This is a default module-compliance containing default object groups. This compliance module deprecates ciscoWanOptimizationMIBComplianceRev3.')
ciscoWanOptimizationMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 1, 6)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoBaseGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoOverloadNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseNotificationGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapiExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoApplicationStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoPolicyMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoClassMapStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoTfoExtGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoExtGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbExtendedStatsGroupRev1"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpExtendedStatsGroupRev2"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsGroup"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanOptimizationMIBComplianceRev5 = ciscoWanOptimizationMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoWanOptimizationMIBComplianceRev5.setDescription('This is a default module-compliance containing default object groups. This compliance module deprecates ciscoWanOptimizationMIBComplianceRev4.')
ciscoWanOptimizationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2))
cwoGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 1)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralActivePeers"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralMaxActivePeers"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottleHigh"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottleLow"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoGeneralCpuThrottlPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoGeneralGroup = cwoGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cwoGeneralGroup.setDescription('This collection of objects represent the general statistics of WAN optimization system/sub-system.')
cwoTfoBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 2)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsTotalOptConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsActiveOptConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsMaxActiveConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsTotalNormalClosedConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsResetConn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoTfoBaseGroup = cwoTfoBaseGroup.setStatus('current')
if mibBuilder.loadTexts: cwoTfoBaseGroup.setDescription('This collection of objects represent the common statistics for TFO.')
cwoTfoExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 3)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsActiveOptTCPPlusConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsActiveOptTCPOnlyConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsActiveOptTCPPrepConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsActiveADConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsReservedConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsPendingConn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsActivePTConn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoTfoExtGroup = cwoTfoExtGroup.setStatus('current')
if mibBuilder.loadTexts: cwoTfoExtGroup.setDescription('This collection of objects represent the statistics for TFO, which are optional.')
cwoAoStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 4)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsIsConfigured"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsIsLicensed"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsOperationalState"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsStartUpTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsTotalHandledConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsTotalOptConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsTotalHandedOffConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsTotalDroppedConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsActiveOptConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsPendingConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsMaxActiveOptConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoStatsGroup = cwoAoStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsGroup.setDescription('This group includes statistics for AO. Which are common for all AOs.')
cwoOverloadNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 5)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoConnectionOverload"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoPeerOverload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoOverloadNotificationGroup = cwoOverloadNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cwoOverloadNotificationGroup.setDescription('This group contains notifications event for various overload condition on wan optimization system.')
cwoCpuNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 6)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuThrottlingOn"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCpuThrottlingOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoCpuNotificationGroup = cwoCpuNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cwoCpuNotificationGroup.setDescription('This group contains notifications event for wan optimization system, which are specific to some WAN optimization systems.')
cwoAoSmbExtendedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 7)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsBytesReadCache"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsBytesWriteCache"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsBytesReadServer"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsBytesWriteServer"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsBytesReadClient"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsBytesWriteClient"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsProcessedReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsActiveReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsTotalTimedOutReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsTotalRemoteReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsTotalLocalReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRemoteAvgTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsLocalAvgTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRACacheHitCount"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsMDCacheHitCount"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRACacheHitRate"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsMDCacheHitRate"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsMaxRACacheSize"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsMaxMDCacheSize"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsMDCacheSize"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRAEvictedAge"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRTT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsTotalRespTimeSaving"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsOpenFiles"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsTotalFilesInRACache"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoSmbExtendedStatsGroup = cwoAoSmbExtendedStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbExtendedStatsGroup.setDescription('This Group contains statistics which are specific to SMB AO.')
cwoLicenseNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 8)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseExpired"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseRevoked"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoLicenseDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoLicenseNotificationGroup = cwoLicenseNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cwoLicenseNotificationGroup.setDescription('This group contains notifications event for actions on licensing on wan optimization systems.')
cwoAoHttpExtendedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 9)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalSavedTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalRTT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalMDCMTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsEstSavedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoHttpExtendedStatsGroup = cwoAoHttpExtendedStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpExtendedStatsGroup.setDescription('This group contains statistics which are specific to HTTP AO.')
cwoAoMapiExtendedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 10)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsUnEncrALRT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsUnEncrARRT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsTotalUnEncrLRs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsTotalUnEncrRRs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsUnEncrAvgRedTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsEncrALRT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsEncrARRT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsTotalEncrLRs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsTotalEncrRRs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoMapixStatsEncrAvgRedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoMapiExtendedStatsGroup = cwoAoMapiExtendedStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoMapiExtendedStatsGroup.setDescription('This group contains statistics which are specific to MAPI AO.')
cwoAoNfsExtendedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 11)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsxStatsALRT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsxStatsARRT"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsxStatsTotalLRs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsxStatsTotalRRs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoNfsxStatsEstTimeSaved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoNfsExtendedStatsGroup = cwoAoNfsExtendedStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoNfsExtendedStatsGroup.setDescription('This group contains statistics which are specific to NFS AO.')
cwoAoVideoExtendedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 12)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoVideoxStatsTotalInBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoVideoxStatsTotalOutBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoVideoExtendedStatsGroup = cwoAoVideoExtendedStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoVideoExtendedStatsGroup.setDescription('This group contains statistics which are specific to Video AO. This group is deprecated as all the objects in cwoAoVideoxStats table are deprecated.')
cwoAoCifsExtendedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 13)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsTotalReadBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsTotalWrittenBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsTotalRemoteReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsTotalLocalReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsTotalRemoteTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsTotalLocalTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsConnectedSessions"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsOpenFiles"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsMaxCacheSize"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsCurrentCacheSize"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsMaxCacheResources"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsCacheResources"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsEvictedResources"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsLastEvictedTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsVolHiWatermark"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsVolLoWatermark"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsAmntHiWatermark"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsAmntLoWatermark"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsEvictedAge"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsEvictedLastAccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoCifsExtendedStatsGroup = cwoAoCifsExtendedStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsExtendedStatsGroup.setDescription('This group contains statistics which are specific to CIFS AO. This group is deprecated as all the objects in cwoAoCifsxStats table are deprecated.')
cwoAoApplicationStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 14)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAppStatsOriginalBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAppStatsOptimizedBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAppStatsPTBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoApplicationStatsGroup = cwoAoApplicationStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoApplicationStatsGroup.setDescription('This group contains statistics for applications associated with AO.')
cwoAoPolicyMapStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 15)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsDescr"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsTotalConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsTotalBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsTotalPTConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoPmapStatsTotalPTBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoPolicyMapStatsGroup = cwoAoPolicyMapStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoPolicyMapStatsGroup.setDescription('This group contains statistics for active policy map.')
cwoAoClassMapStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 16)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsDescr"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsTotalConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsTotalBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsTotalPTConns"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoCmapStatsTotalPTBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoClassMapStatsGroup = cwoAoClassMapStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoAoClassMapStatsGroup.setDescription('This group contains statistics for class maps associated with active policy map.')
cwoAoStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 17)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsLoadStatus"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoStatsBwOpt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoStatsGroupRev1 = cwoAoStatsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cwoAoStatsGroupRev1.setDescription('This group includes statistics, which are common for all AOs.')
cwoAoTfoExtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 18)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoTfoStatsLoadStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoTfoExtGroupRev1 = cwoAoTfoExtGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cwoAoTfoExtGroupRev1.setDescription('This collection of objects represent the statistics for TFO, which are optional.')
cwoAoHttpExtendedStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 19)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalSPSessions"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalSPPFSessions"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalSPPFObjects"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalSPRTTSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsTotalSPPFMissTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoHttpExtendedStatsGroupRev1 = cwoAoHttpExtendedStatsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpExtendedStatsGroupRev1.setDescription('This group contains statistics specific to cwoAoHttpxStats group enhancement and SharePoint AO.')
cwoAoCifsExtendedStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 20)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsFFTotalReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsFFRemoteReqs"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsFFLocalRespTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsFFRemoteRespTime"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoCifsxStatsDirResources"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoCifsExtendedStatsGroupRev1 = cwoAoCifsExtendedStatsGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cwoAoCifsExtendedStatsGroupRev1.setDescription('This group contains statistics specific to CIFS Atkins feature. This group is deprecated as all the objects in cwoAoCifsxStats table are deprecated.')
cwoAoSmbExtendedStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 21)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRdL4SignWANBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsWrL4SignWANBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsRdSignLANBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoSmbxStatsWrSignLANBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoSmbExtendedStatsGroupRev1 = cwoAoSmbExtendedStatsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cwoAoSmbExtendedStatsGroupRev1.setDescription('This group contains statistics specific to Signed Bytes Statistics feature for SMB AO.')
cwoAoHttpExtendedStatsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 22)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassCacheTrans"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassRespBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassCacheTransPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassRespBytesPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassAvgCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBypassRespTimeSavedPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdCacheTrans"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdRespBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdCacheTransPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdRespBytesPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdAvgCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCStdRespTimeSavedPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicCacheTrans"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicRespBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicCacheTransPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicRespBytesPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicAvgCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCBasicRespTimeSavedPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvCacheTrans"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvRespBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvCacheTransPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvRespBytesPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvAvgCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCAdvRespTimeSavedPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalCacheTrans"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalRespBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalCacheTransPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalRespBytesPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalAvgCacheRespTimeSaved"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCTotalRespTimeSavedPercent"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCPrepStatus"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCPrepCacheStoreBytes"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoAoHttpxStatsAKCPrepUncacheStoreBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoAoHttpExtendedStatsGroupRev2 = cwoAoHttpExtendedStatsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cwoAoHttpExtendedStatsGroupRev2.setDescription('This group contains statistics specific to cwoAoHttpxStats group enhancement and HTTP Akamai Cache.')
cwoDreCacheStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 23)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsStatus"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsAge"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsTotal"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsUsed"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsDataUnitUsage"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsReplacedOneHrDataUnit"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsDataUnitAge"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsSigblockUsage"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsReplacedOneHrSigblock"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDreCacheStatsSigblockAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoDreCacheStatsGroup = cwoDreCacheStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoDreCacheStatsGroup.setDescription('This group contains statistics specific to DRE cache statistics.')
cwoDrePerfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 762, 3, 2, 24)).setObjects(("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsEncodeCompressionRatio"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsEncodeCompressionLatency"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsEncodeAvgMsgSize"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsDecodeCompressionRatio"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsDecodeCompressionLatency"), ("CISCO-WAN-OPTIMIZATION-MIB", "cwoDrePerfStatsDecodeAvgMsgSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwoDrePerfStatsGroup = cwoDrePerfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwoDrePerfStatsGroup.setDescription('This group contains statistics specific to DRE performance statistics.')
mibBuilder.exportSymbols("CISCO-WAN-OPTIMIZATION-MIB", cwoTfoStatsPendingConn=cwoTfoStatsPendingConn, cwoAppStatsOriginalBytes=cwoAppStatsOriginalBytes, cwoDrePerfStatsDecodeCompressionRatio=cwoDrePerfStatsDecodeCompressionRatio, cwoDrePerfStatsEncodeCompressionLatency=cwoDrePerfStatsEncodeCompressionLatency, cwoAoHttpxStatsAKCBasicRespBytes=cwoAoHttpxStatsAKCBasicRespBytes, cwoDrePerfStatsDecodeCompressionLatency=cwoDrePerfStatsDecodeCompressionLatency, cwoDrePerfStatsEncodeCompressionRatio=cwoDrePerfStatsEncodeCompressionRatio, cwoAoMapiExtendedStatsGroup=cwoAoMapiExtendedStatsGroup, cwoGeneralMaxActivePeers=cwoGeneralMaxActivePeers, cwoAoHttpxStatsAKCBypassAvgCacheRespTimeSaved=cwoAoHttpxStatsAKCBypassAvgCacheRespTimeSaved, cwoAoHttpxStatsAKCBasicCacheTrans=cwoAoHttpxStatsAKCBasicCacheTrans, cwoAoHttpxStatsAKCAdvCacheTrans=cwoAoHttpxStatsAKCAdvCacheTrans, cwoDreCacheStatsReplacedOneHrDataUnit=cwoDreCacheStatsReplacedOneHrDataUnit, cwoAoStatsPendingConns=cwoAoStatsPendingConns, cwoAoSmbxStatsBytesReadServer=cwoAoSmbxStatsBytesReadServer, cwoTfoStatsActiveOptConn=cwoTfoStatsActiveOptConn, cwoAoVideoxStats=cwoAoVideoxStats, cwoAoHttpxStatsAKCAdvRespBytes=cwoAoHttpxStatsAKCAdvRespBytes, cwoPmapStatsDescr=cwoPmapStatsDescr, cwoAoCifsxStatsLastEvictedTime=cwoAoCifsxStatsLastEvictedTime, cwoLicenseDeleted=cwoLicenseDeleted, cwoAoCifsxStatsEvictedLastAccess=cwoAoCifsxStatsEvictedLastAccess, cwoAppStatsPTBytes=cwoAppStatsPTBytes, cwoAoHttpxStatsTotalSPSessions=cwoAoHttpxStatsTotalSPSessions, cwoAoMapixStatsUnEncrALRT=cwoAoMapixStatsUnEncrALRT, cwoAoStatsEntry=cwoAoStatsEntry, cwoAoStatsBwOpt=cwoAoStatsBwOpt, cwoAppStatsOptimizedBytes=cwoAppStatsOptimizedBytes, cwoTfoStatsTotalOptConn=cwoTfoStatsTotalOptConn, CwoDreCacheStatus=CwoDreCacheStatus, cwoAoHttpxStatsAKCTotalCacheRespTimeSaved=cwoAoHttpxStatsAKCTotalCacheRespTimeSaved, cwoCmapStatsType=cwoCmapStatsType, cwoDrePerfStatsEncodeAvgMsgSize=cwoDrePerfStatsEncodeAvgMsgSize, CwoAoName=CwoAoName, cwoAoHttpExtendedStatsGroupRev1=cwoAoHttpExtendedStatsGroupRev1, cwoAoNfsxStatsALRT=cwoAoNfsxStatsALRT, cwoAoHttpxStatsAKCPrepEntry=cwoAoHttpxStatsAKCPrepEntry, cwoAoHttpxStatsAKCStdAvgCacheRespTimeSaved=cwoAoHttpxStatsAKCStdAvgCacheRespTimeSaved, cwoAoHttpxStatsAKCPrepCacheStoreBytes=cwoAoHttpxStatsAKCPrepCacheStoreBytes, CwoAoOperationalState=CwoAoOperationalState, cwoAoHttpxStatsEstSavedTime=cwoAoHttpxStatsEstSavedTime, cwoAoCifsxStatsTotalRemoteReqs=cwoAoCifsxStatsTotalRemoteReqs, ciscoWanOptimizationMIBComplianceRev4=ciscoWanOptimizationMIBComplianceRev4, cwoPmapStatsTotalPTConns=cwoPmapStatsTotalPTConns, cwoAoMapixStats=cwoAoMapixStats, cwoAoHttpxStatsAKCBasicEntry=cwoAoHttpxStatsAKCBasicEntry, cwoAoHttpxStatsAKCStdRespBytes=cwoAoHttpxStatsAKCStdRespBytes, cwoAo=cwoAo, cwoAoHttpxStatsAKCBasicRespBytesPercent=cwoAoHttpxStatsAKCBasicRespBytesPercent, cwoDrePerfStatsDecodeAvgMsgSize=cwoDrePerfStatsDecodeAvgMsgSize, cwoAoMapixStatsEncrALRT=cwoAoMapixStatsEncrALRT, cwoAoCifsxStatsMaxCacheSize=cwoAoCifsxStatsMaxCacheSize, cwoAoCifsxStatsCacheResources=cwoAoCifsxStatsCacheResources, cwoAoHttpxStatsAKCTotalCacheTrans=cwoAoHttpxStatsAKCTotalCacheTrans, cwoApp=cwoApp, cwoDreCacheStatsDataUnitAge=cwoDreCacheStatsDataUnitAge, cwoAoHttpxStatsAKCStdCacheTransPercent=cwoAoHttpxStatsAKCStdCacheTransPercent, cwoAoSmbxStatsMaxRACacheSize=cwoAoSmbxStatsMaxRACacheSize, cwoAoHttpxStatsAKCAdvCacheRespTimeSaved=cwoAoHttpxStatsAKCAdvCacheRespTimeSaved, cwoAoSmbxStatsTotalLocalReqs=cwoAoSmbxStatsTotalLocalReqs, cwoAoHttpxStatsAKCBypassRespBytesPercent=cwoAoHttpxStatsAKCBypassRespBytesPercent, cwoAoSmbxStatsBytesWriteClient=cwoAoSmbxStatsBytesWriteClient, cwoAoHttpxStatsAKCStdRespTimeSavedPercent=cwoAoHttpxStatsAKCStdRespTimeSavedPercent, cwoDreCacheStatsTotal=cwoDreCacheStatsTotal, cwoAoSmbxStatsMaxMDCacheSize=cwoAoSmbxStatsMaxMDCacheSize, cwoAoMapixStatsTotalUnEncrRRs=cwoAoMapixStatsTotalUnEncrRRs, cwoAoHttpxStatsAKCAdvRespTimeSavedPercent=cwoAoHttpxStatsAKCAdvRespTimeSavedPercent, cwoAoSmbxStatsBytesReadCache=cwoAoSmbxStatsBytesReadCache, cwoAoCifsxStatsVolHiWatermark=cwoAoCifsxStatsVolHiWatermark, cwoAoHttpxStatsTotalMDCMTime=cwoAoHttpxStatsTotalMDCMTime, cwoDreCacheStatsUsed=cwoDreCacheStatsUsed, cwoTfoBaseGroup=cwoTfoBaseGroup, cwoCpuThrottlingOn=cwoCpuThrottlingOn, cwoAoStatsLoadStatus=cwoAoStatsLoadStatus, cwoAoSmbxStatsRACacheHitCount=cwoAoSmbxStatsRACacheHitCount, CwoTypes=CwoTypes, CwoHttpAKCPrepStatus=CwoHttpAKCPrepStatus, cwoAppStatsEntry=cwoAppStatsEntry, cwoAoSmbxStatsRTT=cwoAoSmbxStatsRTT, cwoAoHttpxStatsAKCPrepUncacheStoreBytes=cwoAoHttpxStatsAKCPrepUncacheStoreBytes, ciscoWanOptimizationMIBCompliance1=ciscoWanOptimizationMIBCompliance1, cwoAoCifsxStatsConnectedSessions=cwoAoCifsxStatsConnectedSessions, ciscoWanOptimizationMIBCompliances=ciscoWanOptimizationMIBCompliances, cwoAoHttpxStatsAKCAdvAvgCacheRespTimeSaved=cwoAoHttpxStatsAKCAdvAvgCacheRespTimeSaved, ciscoWanOptimizationMIBComplianceRev5=ciscoWanOptimizationMIBComplianceRev5, cwoAoCifsxStatsEvictedAge=cwoAoCifsxStatsEvictedAge, cwoTfoStatsActiveADConn=cwoTfoStatsActiveADConn, cwoPmapStatsTotalBytes=cwoPmapStatsTotalBytes, cwoAoNfsxStatsTotalRRs=cwoAoNfsxStatsTotalRRs, cwoTfoStatsLoadStatus=cwoTfoStatsLoadStatus, cwoPmapStatsTotalPTBytes=cwoPmapStatsTotalPTBytes, cwoAoHttpExtendedStatsGroupRev2=cwoAoHttpExtendedStatsGroupRev2, cwoPmapStatsTotalConns=cwoPmapStatsTotalConns, cwoAoHttpxStatsAKCAdvCacheTransPercent=cwoAoHttpxStatsAKCAdvCacheTransPercent, cwoAoClassMapStatsGroup=cwoAoClassMapStatsGroup, cwoAoStatsTotalHandedOffConns=cwoAoStatsTotalHandedOffConns, cwoDreCacheStatsSigblockUsage=cwoDreCacheStatsSigblockUsage, cwoCmapStatsEntry=cwoCmapStatsEntry, ciscoWanOptimizationMIB=ciscoWanOptimizationMIB, cwoCmapStatsTable=cwoCmapStatsTable, cwoDreCacheStatsSigblockAge=cwoDreCacheStatsSigblockAge, cwoAoHttpxStatsAKCBypassCacheTransPercent=cwoAoHttpxStatsAKCBypassCacheTransPercent, cwoAoSmbxStatsRdL4SignWANBytes=cwoAoSmbxStatsRdL4SignWANBytes, cwoAoSmbxStatsMDCacheHitRate=cwoAoSmbxStatsMDCacheHitRate, ciscoWanOptimizationMIBComplianceRev2=ciscoWanOptimizationMIBComplianceRev2, PYSNMP_MODULE_ID=ciscoWanOptimizationMIB, cwoAoSmbxStatsRAEvictedAge=cwoAoSmbxStatsRAEvictedAge, cwoAoHttpxStatsAKCBypassRespBytes=cwoAoHttpxStatsAKCBypassRespBytes, cwoCmapStatsName=cwoCmapStatsName, cwoCmapStatsTotalBytes=cwoCmapStatsTotalBytes, cwoCmap=cwoCmap, cwoAoSmbxStatsRACacheHitRate=cwoAoSmbxStatsRACacheHitRate, cwoAoHttpxStatsAKCBasicRespTimeSavedPercent=cwoAoHttpxStatsAKCBasicRespTimeSavedPercent, ciscoWanOptimizationMIBCompliance=ciscoWanOptimizationMIBCompliance, cwoAoStatsStartUpTime=cwoAoStatsStartUpTime, cwoAoStatsIsConfigured=cwoAoStatsIsConfigured, cwoAoHttpxStatsAKCPrepStatus=cwoAoHttpxStatsAKCPrepStatus, cwoAoHttpxStats=cwoAoHttpxStats, cwoAoSmbxStatsTotalFilesInRACache=cwoAoSmbxStatsTotalFilesInRACache, cwoAoHttpxStatsAKCPrepTable=cwoAoHttpxStatsAKCPrepTable, cwoAoSmbExtendedStatsGroupRev1=cwoAoSmbExtendedStatsGroupRev1, cwoAoMapixStatsTotalEncrLRs=cwoAoMapixStatsTotalEncrLRs, cwoAoHttpxStatsAKCTotalEntry=cwoAoHttpxStatsAKCTotalEntry, cwoAoCifsxStatsMaxCacheResources=cwoAoCifsxStatsMaxCacheResources, cwoDrePerfStatsGroup=cwoDrePerfStatsGroup, cwoAoSmbxStats=cwoAoSmbxStats, cwoAoStatsTotalHandledConns=cwoAoStatsTotalHandledConns, cwoAppStatsTable=cwoAppStatsTable, cwoAoCifsxStatsFFRemoteRespTime=cwoAoCifsxStatsFFRemoteRespTime, cwoAoStatsLastResetTime=cwoAoStatsLastResetTime, cwoAoHttpxStatsAKCStdCacheTrans=cwoAoHttpxStatsAKCStdCacheTrans, cwoAoCifsxStatsTotalReadBytes=cwoAoCifsxStatsTotalReadBytes, cwoDreCacheStatsGroup=cwoDreCacheStatsGroup, cwoPmapStatsType=cwoPmapStatsType, cwoAoSmbxStatsProcessedReqs=cwoAoSmbxStatsProcessedReqs, cwoAoHttpxStatsAKCBypassCacheTrans=cwoAoHttpxStatsAKCBypassCacheTrans, cwoAoHttpxStatsAKCTotalRespBytesPercent=cwoAoHttpxStatsAKCTotalRespBytesPercent, cwoAoSmbxStatsActiveReqs=cwoAoSmbxStatsActiveReqs, cwoAoVideoExtendedStatsGroup=cwoAoVideoExtendedStatsGroup, cwoAoSmbxStatsTotalRespTimeSaving=cwoAoSmbxStatsTotalRespTimeSaving, cwoAoHttpxStatsAKCTotalRespBytes=cwoAoHttpxStatsAKCTotalRespBytes, cwoAoCifsxStatsAmntHiWatermark=cwoAoCifsxStatsAmntHiWatermark, cwoAoSmbxStatsBytesWriteServer=cwoAoSmbxStatsBytesWriteServer, cwoLicenseRevoked=cwoLicenseRevoked, cwoAoStatsGroupRev1=cwoAoStatsGroupRev1, cwoAoCifsxStatsTotalRemoteTime=cwoAoCifsxStatsTotalRemoteTime, cwoAoHttpxStatsTotalRTT=cwoAoHttpxStatsTotalRTT, cwoAoMapixStatsEncrAvgRedTime=cwoAoMapixStatsEncrAvgRedTime, cwoPeerOverload=cwoPeerOverload, cwoAoVideoxStatsTotalInBytes=cwoAoVideoxStatsTotalInBytes, cwoTfoExtGroup=cwoTfoExtGroup, cwoAoSmbxStatsRemoteAvgTime=cwoAoSmbxStatsRemoteAvgTime, cwoAoHttpxStatsTotalSPRTTSaved=cwoAoHttpxStatsTotalSPRTTSaved, cwoCpuThrottlingOff=cwoCpuThrottlingOff, cwoDreCacheStatsReplacedOneHrSigblock=cwoDreCacheStatsReplacedOneHrSigblock, cwoAoHttpxStatsTotalSPPFObjects=cwoAoHttpxStatsTotalSPPFObjects, cwoAoNfsxStatsEstTimeSaved=cwoAoNfsxStatsEstTimeSaved, cwoTfoStatsActiveOptTCPOnlyConn=cwoTfoStatsActiveOptTCPOnlyConn, cwoAoStatsTotalDroppedConns=cwoAoStatsTotalDroppedConns, cwoTfoStats=cwoTfoStats, ciscoWanOptimizationMIBGroups=ciscoWanOptimizationMIBGroups, cwoTfo=cwoTfo, cwoTfoStatsReservedConn=cwoTfoStatsReservedConn, cwoAoHttpxStatsAKCStdCacheRespTimeSaved=cwoAoHttpxStatsAKCStdCacheRespTimeSaved, cwoAoHttpxStatsAKCBypassEntry=cwoAoHttpxStatsAKCBypassEntry, cwoOverloadNotificationGroup=cwoOverloadNotificationGroup, cwoAoHttpxStatsAKCBasicAvgCacheRespTimeSaved=cwoAoHttpxStatsAKCBasicAvgCacheRespTimeSaved, cwoAoCifsxStatsFFRemoteReqs=cwoAoCifsxStatsFFRemoteReqs, cwoAoApplicationStatsGroup=cwoAoApplicationStatsGroup, cwoTfoStatsTotalNormalClosedConn=cwoTfoStatsTotalNormalClosedConn, cwoGeneralGroup=cwoGeneralGroup, cwoAoTfoExtGroupRev1=cwoAoTfoExtGroupRev1, cwoTfoStatsResetConn=cwoTfoStatsResetConn, cwoAoHttpxStatsTotalSPPFMissTime=cwoAoHttpxStatsTotalSPPFMissTime, cwoDreCacheStats=cwoDreCacheStats, cwoAoMapixStatsTotalEncrRRs=cwoAoMapixStatsTotalEncrRRs, cwoCpuNotificationGroup=cwoCpuNotificationGroup, cwoAoStatsTotalOptConns=cwoAoStatsTotalOptConns, cwoAppStatsAppName=cwoAppStatsAppName, cwoAoHttpxStatsAKCBypassRespTimeSavedPercent=cwoAoHttpxStatsAKCBypassRespTimeSavedPercent, cwoAoSmbxStatsWrSignLANBytes=cwoAoSmbxStatsWrSignLANBytes, cwoAoHttpxStatsAKCTotalCacheTransPercent=cwoAoHttpxStatsAKCTotalCacheTransPercent, ciscoWanOptimizationMIBObjects=ciscoWanOptimizationMIBObjects, cwoTfoStatsActiveOptTCPPrepConn=cwoTfoStatsActiveOptTCPPrepConn, cwoAoSmbxStatsTotalRemoteReqs=cwoAoSmbxStatsTotalRemoteReqs, cwoAoHttpxStatsAKCStdEntry=cwoAoHttpxStatsAKCStdEntry, cwoTfoStatsMaxActiveConn=cwoTfoStatsMaxActiveConn, cwoAoStatsTable=cwoAoStatsTable, cwoAoCifsxStatsTotalLocalTime=cwoAoCifsxStatsTotalLocalTime, cwoAoHttpExtendedStatsGroup=cwoAoHttpExtendedStatsGroup, cwoPmapStatsTable=cwoPmapStatsTable, cwoAoSmbxStatsWrL4SignWANBytes=cwoAoSmbxStatsWrL4SignWANBytes, cwoAoCifsxStatsEvictedResources=cwoAoCifsxStatsEvictedResources, cwoAoCifsxStatsOpenFiles=cwoAoCifsxStatsOpenFiles, cwoGeneral=cwoGeneral, CwoLoadStates=CwoLoadStates, cwoAoMapixStatsEncrARRT=cwoAoMapixStatsEncrARRT, cwoAoSmbxStatsRdSignLANBytes=cwoAoSmbxStatsRdSignLANBytes, cwoAoHttpxStatsAKCTotalRespTimeSavedPercent=cwoAoHttpxStatsAKCTotalRespTimeSavedPercent, cwoAoNfsxStatsTotalLRs=cwoAoNfsxStatsTotalLRs, cwoAoMapixStatsUnEncrARRT=cwoAoMapixStatsUnEncrARRT, cwoDreCacheStatsStatus=cwoDreCacheStatsStatus, cwoCmapStatsTotalConns=cwoCmapStatsTotalConns, cwoAoSmbxStatsOpenFiles=cwoAoSmbxStatsOpenFiles, cwoAoStatsActiveOptConns=cwoAoStatsActiveOptConns, ciscoWanOptimizationMIBConform=ciscoWanOptimizationMIBConform, cwoAoSmbxStatsBytesWriteCache=cwoAoSmbxStatsBytesWriteCache, cwoAoMapixStatsUnEncrAvgRedTime=cwoAoMapixStatsUnEncrAvgRedTime, ciscoWanOptimizationMIBComplianceRev3=ciscoWanOptimizationMIBComplianceRev3, cwoGeneralCpuThrottleHigh=cwoGeneralCpuThrottleHigh, cwoAoCifsxStatsFFLocalRespTime=cwoAoCifsxStatsFFLocalRespTime, cwoAoCifsExtendedStatsGroupRev1=cwoAoCifsExtendedStatsGroupRev1, cwoCmapStatsDescr=cwoCmapStatsDescr, cwoAoCifsxStats=cwoAoCifsxStats, cwoAoSmbxStatsLocalAvgTime=cwoAoSmbxStatsLocalAvgTime, cwoTfoStatsActivePTConn=cwoTfoStatsActivePTConn, cwoAoHttpxStatsAKCAdvRespBytesPercent=cwoAoHttpxStatsAKCAdvRespBytesPercent, cwoAoHttpxStatsAKCBypassCacheRespTimeSaved=cwoAoHttpxStatsAKCBypassCacheRespTimeSaved, cwoAoCifsExtendedStatsGroup=cwoAoCifsExtendedStatsGroup, cwoAoHttpxStatsTotalSavedTime=cwoAoHttpxStatsTotalSavedTime, cwoAoStatsName=cwoAoStatsName, cwoAoCifsxStatsTotalLocalReqs=cwoAoCifsxStatsTotalLocalReqs, cwoAoCifsxStatsAmntLoWatermark=cwoAoCifsxStatsAmntLoWatermark, cwoLicenseExpired=cwoLicenseExpired, cwoAoHttpxStatsTotalSPPFSessions=cwoAoHttpxStatsTotalSPPFSessions, cwoPmapStatsEntry=cwoPmapStatsEntry, cwoAoSmbExtendedStatsGroup=cwoAoSmbExtendedStatsGroup, cwoAoStatsGroup=cwoAoStatsGroup, cwoGeneralCpuThrottlPeriod=cwoGeneralCpuThrottlPeriod, cwoGeneralActivePeers=cwoGeneralActivePeers, cwoAoSmbxStatsBytesReadClient=cwoAoSmbxStatsBytesReadClient, cwoAoSmbxStatsTotalTimedOutReqs=cwoAoSmbxStatsTotalTimedOutReqs, cwoAoStatsIsLicensed=cwoAoStatsIsLicensed, cwoAoNfsxStats=cwoAoNfsxStats, cwoAoNfsExtendedStatsGroup=cwoAoNfsExtendedStatsGroup, cwoTfoConnectionOverload=cwoTfoConnectionOverload, cwoDreCacheStatsAge=cwoDreCacheStatsAge, cwoAoCifsxStatsVolLoWatermark=cwoAoCifsxStatsVolLoWatermark, cwoDreCacheStatsDataUnitUsage=cwoDreCacheStatsDataUnitUsage, cwoAoCifsxStatsTotalWrittenBytes=cwoAoCifsxStatsTotalWrittenBytes, cwoAoHttpxStatsAKCStdRespBytesPercent=cwoAoHttpxStatsAKCStdRespBytesPercent, cwoAoHttpxStatsAKCTotalAvgCacheRespTimeSaved=cwoAoHttpxStatsAKCTotalAvgCacheRespTimeSaved, cwoAoHttpxStatsAKC=cwoAoHttpxStatsAKC, cwoPmap=cwoPmap, cwoAoSmbxStatsMDCacheHitCount=cwoAoSmbxStatsMDCacheHitCount, ciscoWanOptimizationMIBNotifs=ciscoWanOptimizationMIBNotifs, cwoAoNfsxStatsARRT=cwoAoNfsxStatsARRT, cwoAoStatsMaxActiveOptConns=cwoAoStatsMaxActiveOptConns, cwoAoVideoxStatsTotalOutBytes=cwoAoVideoxStatsTotalOutBytes, cwoTfoStatsActiveOptTCPPlusConn=cwoTfoStatsActiveOptTCPPlusConn, cwoGeneralCpuThrottleLow=cwoGeneralCpuThrottleLow, cwoDrePerfStats=cwoDrePerfStats, cwoAoHttpxStatsAKCBasicCacheTransPercent=cwoAoHttpxStatsAKCBasicCacheTransPercent, cwoDre=cwoDre)
mibBuilder.exportSymbols("CISCO-WAN-OPTIMIZATION-MIB", cwoAoHttpxStatsAKCBasicCacheRespTimeSaved=cwoAoHttpxStatsAKCBasicCacheRespTimeSaved, cwoCmapStatsTotalPTConns=cwoCmapStatsTotalPTConns, cwoAoCifsxStatsCurrentCacheSize=cwoAoCifsxStatsCurrentCacheSize, cwoAoCifsxStatsFFTotalReqs=cwoAoCifsxStatsFFTotalReqs, cwoAoCifsxStatsDirResources=cwoAoCifsxStatsDirResources, cwoAoStatsOperationalState=cwoAoStatsOperationalState, cwoAoHttpxStatsAKCAdvEntry=cwoAoHttpxStatsAKCAdvEntry, cwoAoMapixStatsTotalUnEncrLRs=cwoAoMapixStatsTotalUnEncrLRs, cwoCmapStatsTotalPTBytes=cwoCmapStatsTotalPTBytes, cwoLicenseNotificationGroup=cwoLicenseNotificationGroup, cwoAoPolicyMapStatsGroup=cwoAoPolicyMapStatsGroup, cwoAoSmbxStatsMDCacheSize=cwoAoSmbxStatsMDCacheSize, cwoPmapStatsName=cwoPmapStatsName, cwoAoHttpxStatsAKCPrepTaskName=cwoAoHttpxStatsAKCPrepTaskName)
