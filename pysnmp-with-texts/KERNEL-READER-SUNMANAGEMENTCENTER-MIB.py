#
# PySNMP MIB module KERNEL-READER-SUNMANAGEMENTCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KERNEL-READER-SUNMANAGEMENTCENTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, MibIdentifier, Gauge32, IpAddress, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Counter64, TimeTicks, enterprises, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibIdentifier", "Gauge32", "IpAddress", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Counter64", "TimeTicks", "enterprises", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
kernelReader = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12))
kernelReader.setRevisions(('1999-07-20 15:05', '1900-09-18 14:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: kernelReader.setRevisionsDescriptions(('Rev 1.0 20th July 1999 15:05, Initial version Of MIB.', 'Rev 1.1 18th sep 2000 14:35. Changed the index ranges, the were starting from 1 and now they are starting from 0.',))
if mibBuilder.loadTexts: kernelReader.setLastUpdated('0009181435Z')
if mibBuilder.loadTexts: kernelReader.setOrganization('Sun Microsystems Inc.')
if mibBuilder.loadTexts: kernelReader.setContactInfo(' Sun Microsystems Inc. Customer Support Postal: 901 San Antonio Road Palo Alto, CA-94303-4900 USA Tel: 650-960-1300 E-mail: service@sun.com')
if mibBuilder.loadTexts: kernelReader.setDescription('The kernel reader mib obtains information from the operating system about kernel based entities, including CPUs, disk drives, streams buffers, VM statistics, etc. This information is used to monitor and report on CPU usage, disk and network I/O, Paging and swapping rates, and so on. ')
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
sunsymon = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2))
krUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krConsoleUser"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfUsers"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfSessions"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPrimaryUser"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krUserGroup = krUserGroup.setStatus('current')
if mibBuilder.loadTexts: krUserGroup.setDescription('User related statistics.')
krLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemLoadAvg1min"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemLoadAvg5min"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemLoadAvg15min"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krLoadGroup = krLoadGroup.setStatus('current')
if mibBuilder.loadTexts: krLoadGroup.setDescription('Load related statistics.')
krDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3))
krFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4))
krCPUDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5))
krMemoryUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotPhyMemAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPhyMemInUse"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPctOfPhyMemInUse"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krFreePhyMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPctOfPhyMemFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krMemoryUsageGroup = krMemoryUsageGroup.setStatus('current')
if mibBuilder.loadTexts: krMemoryUsageGroup.setDescription('Memory usage related statistics.')
krSwapDetailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSwapSpaceAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotReservedSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotAllocatedSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotUsedSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotPctOfSwapSpaceUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krSwapDetailGroup = krSwapDetailGroup.setStatus('current')
if mibBuilder.loadTexts: krSwapDetailGroup.setDescription('Swap space detail related statistics.')
krStreamsDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8))
krIOErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevDevice"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevSoftwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevHardwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevTransportErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevTotalErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeDevice"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeSoftwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeHardwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeTransportErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeTotalErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krIOErrorStatsGroup = krIOErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: krIOErrorStatsGroup.setDescription('IO error summary statistics.')
krKernelMemAllocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSmallPoolMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSmallPoolMemAllocated"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSmallPoolMemFailed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLargePoolMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLargePoolMemAllocated"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLargePoolMemFailed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOversizeMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOversizeMemFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krKernelMemAllocGroup = krKernelMemAllocGroup.setStatus('current')
if mibBuilder.loadTexts: krKernelMemAllocGroup.setDescription(' Details kernel memory allocation (KMA) activities ')
krZoneList = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krZoneId"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krZoneName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStatus"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPath"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIp"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krAutoboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krZoneList = krZoneList.setStatus('current')
if mibBuilder.loadTexts: krZoneList.setDescription('Details about Zone staticstics.')
krConsoleUser = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krConsoleUser.setStatus('current')
if mibBuilder.loadTexts: krConsoleUser.setDescription('User currently logged in on the console.')
krTotNumOfUsers = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfUsers.setStatus('current')
if mibBuilder.loadTexts: krTotNumOfUsers.setDescription('Number of unique users currently logged in.')
krTotNumOfSessions = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfSessions.setStatus('current')
if mibBuilder.loadTexts: krTotNumOfSessions.setDescription('Number of currently active user sessions.')
krPrimaryUser = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPrimaryUser.setStatus('current')
if mibBuilder.loadTexts: krPrimaryUser.setDescription('The login name of the primary user.')
krSystemLoadAvg1min = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 1), DisplayString()).setUnits('Jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemLoadAvg1min.setStatus('current')
if mibBuilder.loadTexts: krSystemLoadAvg1min.setDescription('Load average of the system over the last 1 minute.')
krSystemLoadAvg5min = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 2), DisplayString()).setUnits('Jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemLoadAvg5min.setStatus('current')
if mibBuilder.loadTexts: krSystemLoadAvg5min.setDescription('Load average of the system over the last 5 minutes.')
krSystemLoadAvg15min = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 3), DisplayString()).setUnits('Jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemLoadAvg15min.setStatus('current')
if mibBuilder.loadTexts: krSystemLoadAvg15min.setDescription('Load average of the system over the last 15 minutes.')
krSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemUpTime.setStatus('current')
if mibBuilder.loadTexts: krSystemUpTime.setDescription('The total time elapsed since the machine was last rebooted.')
krDiskDetailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDDDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskAliasName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskReadOpRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskWriteOpRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskOperationRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskDataReadRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskDataWriteRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskDataTransferRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskAvgWaitTrans"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskAvgRunTrans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krDiskDetailGroup = krDiskDetailGroup.setStatus('current')
if mibBuilder.loadTexts: krDiskDetailGroup.setDescription('Disk detail related statistics.')
krDiskSrvcTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDSDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcWaitPctTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskBusyPctTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcAvgWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcAvgTransRunTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcAvgTransTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krDiskSrvcTimeGroup = krDiskSrvcTimeGroup.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvcTimeGroup.setDescription('Disk load related statistics.')
krDiskDetailTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1), )
if mibBuilder.loadTexts: krDiskDetailTable.setStatus('current')
if mibBuilder.loadTexts: krDiskDetailTable.setDescription('Table of information about all the disks installed on the system.')
krDiskDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDDDiskName"))
if mibBuilder.loadTexts: krDiskDetailEntry.setStatus('current')
if mibBuilder.loadTexts: krDiskDetailEntry.setDescription('Information about a disk installed on the system.')
krDDDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDDDiskName.setStatus('current')
if mibBuilder.loadTexts: krDDDiskName.setDescription('Name of the disk (sd0, etc ...).')
krDiskAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskAliasName.setStatus('current')
if mibBuilder.loadTexts: krDiskAliasName.setDescription('Name of the disk alias (c0t0d0, etc).')
krDiskReadOpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 3), DisplayString()).setUnits('op/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskReadOpRate.setStatus('current')
if mibBuilder.loadTexts: krDiskReadOpRate.setDescription('Number of read operations per second on the disk.')
krDiskWriteOpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 4), DisplayString()).setUnits('op/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskWriteOpRate.setStatus('current')
if mibBuilder.loadTexts: krDiskWriteOpRate.setDescription('Number of write operations per second on the disk.')
krDiskOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 5), DisplayString()).setUnits('op/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskOperationRate.setStatus('current')
if mibBuilder.loadTexts: krDiskOperationRate.setDescription('Total number of read and write operations per second (read + write) on the disk.')
krDiskDataReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 6), DisplayString()).setUnits('KB/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskDataReadRate.setStatus('current')
if mibBuilder.loadTexts: krDiskDataReadRate.setDescription('Rate of data reads per second from this disk, in Kbytes per second.')
krDiskDataWriteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 7), DisplayString()).setUnits('KB/secops').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskDataWriteRate.setStatus('current')
if mibBuilder.loadTexts: krDiskDataWriteRate.setDescription('Rate of data writes per second to this disk, in Kbytes per second.')
krDiskDataTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 8), DisplayString()).setUnits('KB/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskDataTransferRate.setStatus('current')
if mibBuilder.loadTexts: krDiskDataTransferRate.setDescription('Rate of data transfers per second to or from this disk, in Kbytes per second.')
krDiskAvgWaitTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskAvgWaitTrans.setStatus('current')
if mibBuilder.loadTexts: krDiskAvgWaitTrans.setDescription('Average number of transactions waiting.')
krDiskAvgRunTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskAvgRunTrans.setStatus('current')
if mibBuilder.loadTexts: krDiskAvgRunTrans.setDescription('Average number of transactions running.')
krDiskSrvTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1), )
if mibBuilder.loadTexts: krDiskSrvTable.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvTable.setDescription('Table of performance related information for all the disks.')
krDiskSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDSDiskName"))
if mibBuilder.loadTexts: krDiskSrvEntry.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvEntry.setDescription('Performance related information for one disk.')
krDSDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDSDiskName.setStatus('current')
if mibBuilder.loadTexts: krDSDiskName.setDescription('Name of the disk (sd0, etc ...).')
krDiskSrvcWaitPctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 2), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcWaitPctTime.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvcWaitPctTime.setDescription('Percentage of time there is a transaction waiting for service (wait queue length).')
krDiskBusyPctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 3), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskBusyPctTime.setStatus('current')
if mibBuilder.loadTexts: krDiskBusyPctTime.setDescription('Percentage of time the disk is busy (transaction running).')
krDiskSrvcAvgWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 4), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcAvgWaitTime.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvcAvgWaitTime.setDescription('The average wait service time in msec for one disk transaction, either read or write.')
krDiskSrvcAvgTransRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 5), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcAvgTransRunTime.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvcAvgTransRunTime.setDescription('The average run service time in msec for one disk transaction, either read or write.')
krDiskSrvcAvgTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 6), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcAvgTransTime.setStatus('current')
if mibBuilder.loadTexts: krDiskSrvcAvgTransTime.setDescription('The average service (run + wait) time in msec for one disk transaction, either read or write.')
krUFSFileSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemIndex"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemMountPoint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemFreeSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFreeSpaceForNonSU"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemPctUsedSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSTotNumOfInodes"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSTotNumOfInodesAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSPctInodesUsed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemSize64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemFreeSpace64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFreeSpaceForNonSU64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krUFSFileSystemGroup = krUFSFileSystemGroup.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemGroup.setDescription('UFS file system related statistics.')
krVXFSFileSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemIndex"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemMountPoint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemFreeSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFreeSpaceForNonSU"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemPctUsedSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSTotNumOfInodes"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSTotNumOfInodesAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSPctInodesUsed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemSize64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemFreeSpace64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFreeSpaceForNonSU64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krVXFSFileSystemGroup = krVXFSFileSystemGroup.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemGroup.setDescription('VXFS file system related statistics.')
krUFSFileTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1), )
if mibBuilder.loadTexts: krUFSFileTable.setStatus('current')
if mibBuilder.loadTexts: krUFSFileTable.setDescription('Table of information about UFS file systems.')
krUFSFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemIndex"))
if mibBuilder.loadTexts: krUFSFileEntry.setStatus('current')
if mibBuilder.loadTexts: krUFSFileEntry.setDescription('Information about a UFS file system.')
krUFSFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemIndex.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemIndex.setDescription('The index for the file system in table.')
krUFSFileSystemMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemMountPoint.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemMountPoint.setDescription('The full pathname where the file system is mounted.')
krUFSFileSystemDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemDiskName.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemDiskName.setDescription('The name of the device (/dev/dsk/...).')
krUFSFileSystemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 4), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemSize.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemSize.setDescription('The total size of the file system, in Kbytes.')
krUFSFileSystemFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 5), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemFreeSpace.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemFreeSpace.setDescription('Available disk space in the file system, in Kbytes.')
krUFSFreeSpaceForNonSU = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 6), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFreeSpaceForNonSU.setStatus('current')
if mibBuilder.loadTexts: krUFSFreeSpaceForNonSU.setDescription('Available disk space in file system for non-superusers, in Kbytes.')
krUFSFileSystemPctUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 7), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemPctUsedSpace.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemPctUsedSpace.setDescription('Percentage of disk space used in the file system.')
krUFSTotNumOfInodes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 8), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSTotNumOfInodes.setStatus('current')
if mibBuilder.loadTexts: krUFSTotNumOfInodes.setDescription('The total number of inodes in the file system.')
krUFSTotNumOfInodesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 9), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSTotNumOfInodesAvail.setStatus('current')
if mibBuilder.loadTexts: krUFSTotNumOfInodesAvail.setDescription('The total number of inodes available in the file system.')
krUFSPctInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 10), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSPctInodesUsed.setStatus('current')
if mibBuilder.loadTexts: krUFSPctInodesUsed.setDescription('Percentage of inodes used in the file system.')
krUFSFileSystemSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 11), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemSize64.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemSize64.setDescription('The total size of the TeraByte file system, in Kbytes.')
krUFSFileSystemFreeSpace64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 12), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemFreeSpace64.setStatus('current')
if mibBuilder.loadTexts: krUFSFileSystemFreeSpace64.setDescription('The total Free space in the TeraByte file system, in Kbytes.')
krUFSFreeSpaceForNonSU64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 13), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFreeSpaceForNonSU64.setStatus('current')
if mibBuilder.loadTexts: krUFSFreeSpaceForNonSU64.setDescription('The total Available space for non-superusers in the TeraByte file system, in Kbytes.')
krVXFSFileTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1), )
if mibBuilder.loadTexts: krVXFSFileTable.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileTable.setDescription('Table of information about VXFS file systems.')
krVXFSFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemIndex"))
if mibBuilder.loadTexts: krVXFSFileEntry.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileEntry.setDescription('Information about a VXFS file system.')
krVXFSFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemIndex.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemIndex.setDescription('The index of the file system in the table.')
krVXFSFileSystemMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemMountPoint.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemMountPoint.setDescription('The full pathname where the file system is mounted.')
krVXFSFileSystemDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemDiskName.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemDiskName.setDescription('The name of the device (/dev/dsk/...).')
krVXFSFileSystemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 4), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemSize.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemSize.setDescription('The total size of the file system, in Kbytes.')
krVXFSFileSystemFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 5), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemFreeSpace.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemFreeSpace.setDescription('Available disk space of the file system, in Kbytes.')
krVXFSFreeSpaceForNonSU = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 6), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFreeSpaceForNonSU.setStatus('current')
if mibBuilder.loadTexts: krVXFSFreeSpaceForNonSU.setDescription('Available disk space in file system for non-superusers, in Kbytes.')
krVXFSFileSystemPctUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 7), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemPctUsedSpace.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemPctUsedSpace.setDescription('Percentage of disk space used in the file system.')
krVXFSTotNumOfInodes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 8), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSTotNumOfInodes.setStatus('current')
if mibBuilder.loadTexts: krVXFSTotNumOfInodes.setDescription('The total number of inodes in the file system.')
krVXFSTotNumOfInodesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 9), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSTotNumOfInodesAvail.setStatus('current')
if mibBuilder.loadTexts: krVXFSTotNumOfInodesAvail.setDescription('The total number of inodes available in the file system.')
krVXFSPctInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 10), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSPctInodesUsed.setStatus('current')
if mibBuilder.loadTexts: krVXFSPctInodesUsed.setDescription('Percentage of inodes used in the file system.')
krVXFSFileSystemSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 11), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemSize64.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemSize64.setDescription('Total disk space in TeraByte file system, in Kbytes.')
krVXFSFileSystemFreeSpace64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 12), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemFreeSpace64.setStatus('current')
if mibBuilder.loadTexts: krVXFSFileSystemFreeSpace64.setDescription('Total free space in TeraByte file system, in Kbytes.')
krVXFSFreeSpaceForNonSU64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 13), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFreeSpaceForNonSU64.setStatus('current')
if mibBuilder.loadTexts: krVXFSFreeSpaceForNonSU64.setDescription('Available disk space in TeraByte file system for non-superusers, in Kbytes.')
krCPUUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUDelta"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUIdleTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUUserModeTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUKernelModeTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotIOWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotSwapWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotPIOWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUNumOfIdleThreadSched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUUtilGroup = krCPUUtilGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUUtilGroup.setDescription('CPU utilization related statistics.')
krCPUProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2))
krCPUIOGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIOCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumPhyBlocksRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumPhyBlocksWrite"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumLogBlocksRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumLogBlocksWrite"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumRawIOReads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumRawIOWrites"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumBytesRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumBytesWritten"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krrcvint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krxmtint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krmdmint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumTermInputChars"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumCanModeCharsHandled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumTermOutChars"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumPhyBlocksAsyncWrite"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krphysio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUIOGroup = krCPUIOGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUIOGroup.setDescription('CPU I/O related statistics.')
krCPUInterruptsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIntrCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfContextSwitches"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumberOfTraps"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumberOfDevInterrupts"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfIntrThreads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInterrupts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUInterruptsGroup = krCPUInterruptsGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUInterruptsGroup.setDescription('CPU interrupt related statistics.')
krCPUSyscallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyscCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSysCallsMade"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSysReads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSysWrites"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfForksCalled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfVForksCalled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfExecsCalled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfMessages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfSemops"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPnameLookup"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfUfsigetcalls"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfDirBlocksRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInodesTakenWAP"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInodesTakenWNAP"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInodeTblOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfFileTblOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfProcTblOvrFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUSyscallGroup = krCPUSyscallGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUSyscallGroup.setDescription('System call related statistics.')
krCPUMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krMiscCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfIvolCSwitches"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfThrCreateCalls"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfCPUMig"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfxcalls"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfFldMutxEntrs"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRWReaderFails"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRWWriterFails"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfModuleLoads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfModuleUnloads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRWLockTry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUMiscGroup = krCPUMiscGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUMiscGroup.setDescription('Miscellaneous statistics.')
krCPURegWindowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krRWCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinUsrOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinUsrUndrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinSysOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinSysUndrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinSysUsrOvrFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPURegWindowGroup = krCPURegWindowGroup.setStatus('current')
if mibBuilder.loadTexts: krCPURegWindowGroup.setDescription('CPU register window related statistics.')
krCPUPginfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPgCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPageReclaims"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfFreeListPgReclaims"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPageIns"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPgsPagedIn"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPageOuts"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krkrNumOfPgsPagedOut"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSwapIns"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPgsSwappedIn"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSwapOuts"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPgsSwappedOut"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfZeroFilledPages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfAutoFreedPages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumberOfScanedPages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPDHandsRvln"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPagerRun"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUPginfoGroup = krCPUPginfoGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUPginfoGroup.setDescription('CPU page related statistics.')
krCPUFaultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krFaultCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfMinorHatPageFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfMinorAsPageFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfMajorPageFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfCopyOnWriteFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfProtectionFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSWLockFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfAsFaultsInKSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUFaultsGroup = krCPUFaultsGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUFaultsGroup.setDescription('CPU fault related statistics.')
krOverAllCPUStatistics = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 10)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOverAllCpuStatsUtil"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOverAllCpuStatsIdle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krOverAllCPUStatistics = krOverAllCPUStatistics.setStatus('current')
if mibBuilder.loadTexts: krOverAllCPUStatistics.setDescription('CPU utilization statistics.')
krCPUUtilTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1), )
if mibBuilder.loadTexts: krCPUUtilTable.setStatus('current')
if mibBuilder.loadTexts: krCPUUtilTable.setDescription('Table of CPU utilization information for all CPUs.')
krCPUUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUInstance"))
if mibBuilder.loadTexts: krCPUUtilEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUUtilEntry.setDescription('CPU utilization information for one CPU.')
krCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krCPUInstance.setDescription('The CPU number.')
krCPUDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUDelta.setStatus('current')
if mibBuilder.loadTexts: krCPUDelta.setDescription('The delta of V1(value 1) and V2(value 2), where V1 and V2 are the cumulative CPU clock ticks taken at different times which is either when refresh interval reaches or when the mannual refresh is issued. V1 or V2 is the Sum of CPU_IdleTime, CPU_UserModeTime, CPU_KernelModeTime and CPU_WaitTime. If V1 is the previous value and V2 is the current value then krCPUDelta = V2 - V1.')
krCPUIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUIdleTime.setStatus('current')
if mibBuilder.loadTexts: krCPUIdleTime.setDescription('Idle CPU time in percentage of CPU delta. If V1 is the previous value of idle time and V2 is the current value of idle time then krCPUIdleTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUUserModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUUserModeTime.setStatus('current')
if mibBuilder.loadTexts: krCPUUserModeTime.setDescription('Time spent by CPU in user mode in percentage of CPU delta. If V1 is the previous value of user mode time and V2 is the current value of user mode time then krCPUUserModeTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUKernelModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUKernelModeTime.setStatus('current')
if mibBuilder.loadTexts: krCPUKernelModeTime.setDescription('Time spent by CPU in kernel mode in percentage of CPU delta. If V1 is the previous value of kernel mode time and V2 is the current value of kernel mode time then krCPUKernelModeTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUTotWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotWaitTime.setStatus('current')
if mibBuilder.loadTexts: krCPUTotWaitTime.setDescription('Total CPU wait time in percentage of CPU delta. If V1 is the previous value of CPU wait time and V2 is the current value of CPU wait time then krCPUTotWaitTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUTotIOWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotIOWaitTime.setStatus('current')
if mibBuilder.loadTexts: krCPUTotIOWaitTime.setDescription('Total CPU IO wait time in percentage of CPU delta. If V1 is the previous value of CPU IO wait time and V2 is the current value of CPU IO wait time then krCPUTotIOWaitTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUTotSwapWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotSwapWaitTime.setStatus('current')
if mibBuilder.loadTexts: krCPUTotSwapWaitTime.setDescription('Total CPU swap wait time in percentage of CPU delta. If V1 is the previous value of CPU swap wait time and V2 is the current value of CPU swap wait time then krCPUTotSwapWaitTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUTotPIOWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotPIOWaitTime.setStatus('current')
if mibBuilder.loadTexts: krCPUTotPIOWaitTime.setDescription('Total CPU peripheral IO wait time in percentage of CPU delta. If V1 is the previous value of CPU peripheral wait time and V2 is the current value of CPU peripheral wait time then krCPUTotPIOWaitTime = ( V2 - V1 ) * 100 / krCPUDelta .')
krCPUNumOfIdleThreadSched = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUNumOfIdleThreadSched.setStatus('current')
if mibBuilder.loadTexts: krCPUNumOfIdleThreadSched.setDescription('The rate of number of idle thread scheduled. If V1 and V2 is the number of idle threads scheduled found at time T1 and T2 respectively then krCPUNumOfIdleThreadSched = (V2 - V1)/(T2 - T1).')
krCPUProcInStatesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotProcInRunQueue"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotProcBlocked"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotProcReadyInSwap"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumberOfCPUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUProcInStatesGroup = krCPUProcInStatesGroup.setStatus('current')
if mibBuilder.loadTexts: krCPUProcInStatesGroup.setDescription('Statistics related to numbers of processes in different states.')
krTotProcInRunQueue = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotProcInRunQueue.setStatus('current')
if mibBuilder.loadTexts: krTotProcInRunQueue.setDescription('Number of processes in run queue.')
krTotProcBlocked = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotProcBlocked.setStatus('current')
if mibBuilder.loadTexts: krTotProcBlocked.setDescription('Number of processes blocked for resources.')
krTotProcReadyInSwap = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotProcReadyInSwap.setStatus('current')
if mibBuilder.loadTexts: krTotProcReadyInSwap.setDescription('Number of processes runnable but swapped.')
krTotNumberOfCPUs = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumberOfCPUs.setStatus('current')
if mibBuilder.loadTexts: krTotNumberOfCPUs.setDescription('Total number Of CPUs.')
krCPUIOTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1), )
if mibBuilder.loadTexts: krCPUIOTable.setStatus('current')
if mibBuilder.loadTexts: krCPUIOTable.setDescription('Table of CPU I/O information for all CPUs.')
krCPUIOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIOCPUInstance"))
if mibBuilder.loadTexts: krCPUIOEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUIOEntry.setDescription('I/O related information for one CPU.')
krIOCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krIOCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krIOCPUInstance.setDescription('The CPU number.')
krNumPhyBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumPhyBlocksRead.setStatus('current')
if mibBuilder.loadTexts: krNumPhyBlocksRead.setDescription('The rate of number of physical blocks read. Number of physical blocks read is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumPhyBlocksRead = (Y - X)/(T2 - T1).')
krNumPhyBlocksWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumPhyBlocksWrite.setStatus('current')
if mibBuilder.loadTexts: krNumPhyBlocksWrite.setDescription('The rate of number of physical blocks written (sync or async). Number of physical blocks written is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumPhyBlocksWrite = (Y - X)/(T2 - T1).')
krNumLogBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumLogBlocksRead.setStatus('current')
if mibBuilder.loadTexts: krNumLogBlocksRead.setDescription('The rate of number of logical blocks read. Number of logical blocks read is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumLogBlocksRead = (Y - X)/(T2 - T1).')
krNumLogBlocksWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumLogBlocksWrite.setStatus('current')
if mibBuilder.loadTexts: krNumLogBlocksWrite.setDescription('The rate of number of logical blocks written. Number of logical blocks written is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumLogBlocksWrite = (Y - X)/(T2 - T1).')
krNumRawIOReads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumRawIOReads.setStatus('current')
if mibBuilder.loadTexts: krNumRawIOReads.setDescription('The rate of cummulative number of raw I/O reads. Cummulative number of raw I/O reads is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumRawIOReads = (Y - X)/(T2 - T1).')
krNumRawIOWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumRawIOWrites.setStatus('current')
if mibBuilder.loadTexts: krNumRawIOWrites.setDescription('The rate of cummulative number of raw I/O writes. Cummulative number of raw I/O writes is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumRawIOWrites = (Y - X)/(T2 - T1).')
krNumBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumBytesRead.setStatus('current')
if mibBuilder.loadTexts: krNumBytesRead.setDescription('The rate of Number of bytes read by rdwr(). Number of bytes read by rdwr() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumBytesRead = (Y - X)/(T2 - T1).')
krNumBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumBytesWritten.setStatus('current')
if mibBuilder.loadTexts: krNumBytesWritten.setDescription('The rate of number of bytes written by rdwr(). Number of bytes written by rdwr() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumBytesWritten = (Y - X)/(T2 - T1).')
krrcvint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krrcvint.setStatus('current')
if mibBuilder.loadTexts: krrcvint.setDescription('UNUSED.')
krxmtint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krxmtint.setStatus('current')
if mibBuilder.loadTexts: krxmtint.setDescription('UNUSED.')
krmdmint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krmdmint.setStatus('current')
if mibBuilder.loadTexts: krmdmint.setDescription('UNUSED.')
krNumTermInputChars = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumTermInputChars.setStatus('current')
if mibBuilder.loadTexts: krNumTermInputChars.setDescription('The rate of number of terminal input characters. Number of terminal input characters is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumTermInputChars = (Y - X)/(T2 - T1).')
krNumCanModeCharsHandled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumCanModeCharsHandled.setStatus('current')
if mibBuilder.loadTexts: krNumCanModeCharsHandled.setDescription('The rate of number of characters handled in canonical mode. Number of characters handled in canonical mode is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumCanModeCharsHandled = (Y - X)/(T2 - T1).')
krNumTermOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumTermOutChars.setStatus('current')
if mibBuilder.loadTexts: krNumTermOutChars.setDescription('The rate of number of terminal output characters. Number of terminal output characters is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumTermOutChars = (Y - X)/(T2 - T1).')
krNumPhyBlocksAsyncWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumPhyBlocksAsyncWrite.setStatus('current')
if mibBuilder.loadTexts: krNumPhyBlocksAsyncWrite.setDescription('The rate of number of asynchronous physical block writes. Number of physical block writes asynchronously is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumPhyBlocksAsyncWrite = (Y - X)/(T2 - T1).')
krphysio = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krphysio.setStatus('current')
if mibBuilder.loadTexts: krphysio.setDescription('UNUSED.')
krCPUIntrTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1), )
if mibBuilder.loadTexts: krCPUIntrTable.setStatus('current')
if mibBuilder.loadTexts: krCPUIntrTable.setDescription('Table of CPU Interrupts related information.')
krCPUIntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIntrCPUInstance"))
if mibBuilder.loadTexts: krCPUIntrEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUIntrEntry.setDescription('CPU Interrupts related information for one CPU.')
krIntrCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krIntrCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krIntrCPUInstance.setDescription('The CPU number.')
krNumOfContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfContextSwitches.setStatus('current')
if mibBuilder.loadTexts: krNumOfContextSwitches.setDescription('The rate of number of context switches. Number of context switches is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfContextSwitches = (Y - X)/(T2 - T1).')
krNumberOfTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumberOfTraps.setStatus('current')
if mibBuilder.loadTexts: krNumberOfTraps.setDescription('The rate of number of traps. Number of traps is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumberOfTraps = (Y - X)/(T2 - T1).')
krNumberOfDevInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumberOfDevInterrupts.setStatus('current')
if mibBuilder.loadTexts: krNumberOfDevInterrupts.setDescription('The rate of number of device interrupts. Number of device interrupts is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumberOfDevInterrupts = (Y - X)/(T2 - T1).')
krNumOfIntrThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfIntrThreads.setStatus('current')
if mibBuilder.loadTexts: krNumOfIntrThreads.setDescription('The rate of number of interrupts as threads. Number of interrupts as threads is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfIntrThreads = (Y - X)/(T2 - T1).')
krNumOfInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInterrupts.setStatus('current')
if mibBuilder.loadTexts: krNumOfInterrupts.setDescription('The rate of number of interrupts locked, prempted, or released. Number of interrupts locked, prempted, or released is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfInterrupts = (Y - X)/(T2 - T1).')
krCPUSysTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1), )
if mibBuilder.loadTexts: krCPUSysTable.setStatus('current')
if mibBuilder.loadTexts: krCPUSysTable.setDescription('Table of system call related information for all CPUs.')
krCPUSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyscCPUInstance"))
if mibBuilder.loadTexts: krCPUSysEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUSysEntry.setDescription('System call related information for one CPU.')
krSyscCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyscCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krSyscCPUInstance.setDescription('The CPU number.')
krNumOfSysCallsMade = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSysCallsMade.setStatus('current')
if mibBuilder.loadTexts: krNumOfSysCallsMade.setDescription('The rate of number of system calls made. Number of system calls made is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfSysCallsMade = (Y - X)/(T2 - T1).')
krNumOfSysReads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSysReads.setStatus('current')
if mibBuilder.loadTexts: krNumOfSysReads.setDescription('The rate of number of system reads using read() and readv(). Number of reads using read() and readv() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfSysReads = (Y - X)/(T2 - T1).')
krNumOfSysWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSysWrites.setStatus('current')
if mibBuilder.loadTexts: krNumOfSysWrites.setDescription('The rate of number of system writes using write() and writev(). Number of writes using write() and writev() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfSysWrites = (Y - X)/(T2 - T1).')
krNumOfForksCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfForksCalled.setStatus('current')
if mibBuilder.loadTexts: krNumOfForksCalled.setDescription('The rate of number of forks called. Number of forks called is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfForksCalled = (Y - X)/(T2 - T1).')
krNumOfVForksCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfVForksCalled.setStatus('current')
if mibBuilder.loadTexts: krNumOfVForksCalled.setDescription('The rate of number of vforks called. Number of vforks called is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfVForksCalled = (Y - X)/(T2 - T1).')
krNumOfExecsCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfExecsCalled.setStatus('current')
if mibBuilder.loadTexts: krNumOfExecsCalled.setDescription('The rate of number of execs called. Number of execs called is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfExecsCalled = (Y - X)/(T2 - T1).')
krTotNumOfMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfMessages.setStatus('current')
if mibBuilder.loadTexts: krTotNumOfMessages.setDescription('The rate of sum of messages sent or received by msgrcv() and msgsnd(). Sum of messages sent or received by msgrcv() and msgsnd() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krTotNumOfMessages = (Y - X)/(T2 - T1).')
krTotNumOfSemops = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfSemops.setStatus('current')
if mibBuilder.loadTexts: krTotNumOfSemops.setDescription('The rate of number of semaphore operations using semop() call. Number of semaphore operations using semop() call is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krTotNumOfSemops = (Y - X)/(T2 - T1).')
krNumOfPnameLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPnameLookup.setStatus('current')
if mibBuilder.loadTexts: krNumOfPnameLookup.setDescription('The rate of number of pathname lookup. Number of pathname lookup is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPnameLookup = (Y - X)/(T2 - T1).')
krNumOfUfsigetcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfUfsigetcalls.setStatus('current')
if mibBuilder.loadTexts: krNumOfUfsigetcalls.setDescription('The rate of number of ufs_iget() calls. Number of ufs_iget() calls is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfUfsigetcalls = (Y - X)/(T2 - T1).')
krNumOfDirBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfDirBlocksRead.setStatus('current')
if mibBuilder.loadTexts: krNumOfDirBlocksRead.setDescription('The rate of number of directory blocks read. Number of directory blocks read is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfDirBlocksRead = (Y - X)/(T2 - T1).')
krNumOfInodesTakenWAP = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInodesTakenWAP.setStatus('current')
if mibBuilder.loadTexts: krNumOfInodesTakenWAP.setDescription('The rate of number of inodes taken with attached pages. Number of inodes taken with attached pages is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfInodesTakenWAP = (Y - X)/(T2 - T1).')
krNumOfInodesTakenWNAP = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInodesTakenWNAP.setStatus('current')
if mibBuilder.loadTexts: krNumOfInodesTakenWNAP.setDescription('The rate of number of inodes taken with no attached pages. Number of inodes taken with no attached pages is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfInodesTakenWNAP = (Y - X)/(T2 - T1).')
krNumOfInodeTblOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInodeTblOvrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfInodeTblOvrFlow.setDescription('The rate of number of inode table overflows. Number of inode table overflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfInodeTblOvrFlow = (Y - X)/(T2 - T1).')
krNumOfFileTblOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfFileTblOvrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfFileTblOvrFlow.setDescription('The rate of number of file table overflows. Number of file table overflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfFileTblOvrFlow = (Y - X)/(T2 - T1).')
krNumOfProcTblOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfProcTblOvrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfProcTblOvrFlow.setDescription('The rate of number of proc table overflows. Number of proc table overflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfProcTblOvrFlow = (Y - X)/(T2 - T1).')
krCPUMiscTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1), )
if mibBuilder.loadTexts: krCPUMiscTable.setStatus('current')
if mibBuilder.loadTexts: krCPUMiscTable.setDescription('Table of miscellaneous information about all CPUs.')
krCPUMiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krMiscCPUInstance"))
if mibBuilder.loadTexts: krCPUMiscEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUMiscEntry.setDescription('Miscellaneous information for one CPU.')
krMiscCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krMiscCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krMiscCPUInstance.setDescription('The CPU number.')
krNumOfIvolCSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfIvolCSwitches.setStatus('current')
if mibBuilder.loadTexts: krNumOfIvolCSwitches.setDescription('The rate of number of involuntary context switches. Number of involuntary context switches is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfIvolCSwitches = (Y - X)/(T2 - T1).')
krNumOfThrCreateCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfThrCreateCalls.setStatus('current')
if mibBuilder.loadTexts: krNumOfThrCreateCalls.setDescription('The rate of number of thread_create() calls. Number of thread_create() calls is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfThrCreateCalls = (Y - X)/(T2 - T1).')
krNumOfCPUMig = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfCPUMig.setStatus('current')
if mibBuilder.loadTexts: krNumOfCPUMig.setDescription('The rate of number of CPU migrations by threads. Number of CPU migrations by threads is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfCPUMig = (Y - X)/(T2 - T1).')
krNumOfxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfxcalls.setStatus('current')
if mibBuilder.loadTexts: krNumOfxcalls.setDescription('The rate of number of xcalls to other CPU. Number of xcalls to other CPU is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfxcalls = (Y - X)/(T2 - T1).')
krNumOfFldMutxEntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfFldMutxEntrs.setStatus('current')
if mibBuilder.loadTexts: krNumOfFldMutxEntrs.setDescription('The rate of number of failed mutex enters. Number of failed mutex enters is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfFldMutxEntrs = (Y - X)/(T2 - T1).')
krNumOfRWReaderFails = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRWReaderFails.setStatus('current')
if mibBuilder.loadTexts: krNumOfRWReaderFails.setDescription('The rate of number of rw reader failures. Number of rw reader failures is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRWReaderFails = (Y - X)/(T2 - T1).')
krNumOfRWWriterFails = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRWWriterFails.setStatus('current')
if mibBuilder.loadTexts: krNumOfRWWriterFails.setDescription('The rate of number of rw writer failures. Number of rw writer failures is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRWWriterFails = (Y - X)/(T2 - T1).')
krNumOfModuleLoads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfModuleLoads.setStatus('current')
if mibBuilder.loadTexts: krNumOfModuleLoads.setDescription('The rate of number of times loadable modules loaded. Number of times loadable modules loaded is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfModuleLoads = (Y - X)/(T2 - T1).')
krNumOfModuleUnloads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfModuleUnloads.setStatus('current')
if mibBuilder.loadTexts: krNumOfModuleUnloads.setDescription('The rate of number of times loadable modules unloaded. Number of times loadable modules unloaded is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfModuleUnloads = (Y - X)/(T2 - T1).')
krNumOfRWLockTry = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRWLockTry.setStatus('current')
if mibBuilder.loadTexts: krNumOfRWLockTry.setDescription('The rate of number of tries to acquire rw lock. Number of tries to acquire rw lock is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRWLockTry = (Y - X)/(T2 - T1).')
krCPURegTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1), )
if mibBuilder.loadTexts: krCPURegTable.setStatus('current')
if mibBuilder.loadTexts: krCPURegTable.setDescription('Table of CPU register window related information for all CPUs.')
krCPURegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krRWCPUInstance"))
if mibBuilder.loadTexts: krCPURegEntry.setStatus('current')
if mibBuilder.loadTexts: krCPURegEntry.setDescription('CPU register window related information for one CPU.')
krRWCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krRWCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krRWCPUInstance.setDescription('The CPU number.')
krNumOfRegWinUsrOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinUsrOvrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfRegWinUsrOvrFlow.setDescription('The rate of number of register window user overflows. Number of register window user overflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRegWinUsrOvrFlow = (Y - X)/(T2 - T1).')
krNumOfRegWinUsrUndrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinUsrUndrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfRegWinUsrUndrFlow.setDescription('The rate of number of register window user underflows. Number of register window user underflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRegWinUsrUndrFlow = (Y - X)/(T2 - T1).')
krNumOfRegWinSysOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinSysOvrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfRegWinSysOvrFlow.setDescription('The rate of number of register window system overflows. Number of register window system overflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRegWinSysOvrFlow = (Y - X)/(T2 - T1).')
krNumOfRegWinSysUndrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinSysUndrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfRegWinSysUndrFlow.setDescription('The rate of number of register window system underflows. Number of register window system underflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRegWinSysUndrFlow = (Y - X)/(T2 - T1).')
krNumOfRegWinSysUsrOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinSysUsrOvrFlow.setStatus('current')
if mibBuilder.loadTexts: krNumOfRegWinSysUsrOvrFlow.setDescription('The rate of number of register window system user overflows. Number of register window system user overflows is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfRegWinSysUsrOvrFlow = (Y - X)/(T2 - T1).')
krCPUPgTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1), )
if mibBuilder.loadTexts: krCPUPgTable.setStatus('current')
if mibBuilder.loadTexts: krCPUPgTable.setDescription('Table of paging related information for all CPUs.')
krCPUPgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPgCPUInstance"))
if mibBuilder.loadTexts: krCPUPgEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUPgEntry.setDescription('Paging related information for one CPU.')
krPgCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPgCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krPgCPUInstance.setDescription('The CPU number.')
krNumOfPageReclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPageReclaims.setStatus('current')
if mibBuilder.loadTexts: krNumOfPageReclaims.setDescription('The rate of number of page reclaims including pageout. Number of page reclaims including pageout is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPageReclaims = (Y - X)/(T2 - T1).')
krNumOfFreeListPgReclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfFreeListPgReclaims.setStatus('current')
if mibBuilder.loadTexts: krNumOfFreeListPgReclaims.setDescription('The rate of number of page reclaims from free list. Number of page reclaims from free list is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfFreeListPgReclaims = (Y - X)/(T2 - T1).')
krNumOfPageIns = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPageIns.setStatus('current')
if mibBuilder.loadTexts: krNumOfPageIns.setDescription('The rate of number of pageins. Number of pageins is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPageIns = (Y - X)/(T2 - T1).')
krNumOfPgsPagedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPgsPagedIn.setStatus('current')
if mibBuilder.loadTexts: krNumOfPgsPagedIn.setDescription('The rate of number of pages paged in. Number of pages paged in is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPgsPagedIn = (Y - X)/(T2 - T1).')
krNumOfPageOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPageOuts.setStatus('current')
if mibBuilder.loadTexts: krNumOfPageOuts.setDescription('The rate of number of pageouts. Number of pageouts is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPageOuts = (Y - X)/(T2 - T1).')
krkrNumOfPgsPagedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krkrNumOfPgsPagedOut.setStatus('current')
if mibBuilder.loadTexts: krkrNumOfPgsPagedOut.setDescription('The rate of number of pages paged out. Number of pages paged out is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krkrNumOfPgsPagedOut = (Y - X)/(T2 - T1).')
krNumOfSwapIns = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSwapIns.setStatus('current')
if mibBuilder.loadTexts: krNumOfSwapIns.setDescription('The rate of number of swapins. Number of swapins is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfSwapIns = (Y - X)/(T2 - T1).')
krNumOfPgsSwappedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPgsSwappedIn.setStatus('current')
if mibBuilder.loadTexts: krNumOfPgsSwappedIn.setDescription('The rate of number of pages swapped in. Number of pages swapped in is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPgsSwappedIn = (Y - X)/(T2 - T1).')
krNumOfSwapOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSwapOuts.setStatus('current')
if mibBuilder.loadTexts: krNumOfSwapOuts.setDescription('The rate of number of swapouts. Number of swapouts is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfSwapOuts = (Y - X)/(T2 - T1).')
krNumOfPgsSwappedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPgsSwappedOut.setStatus('current')
if mibBuilder.loadTexts: krNumOfPgsSwappedOut.setDescription('The rate of number of pages swapped out. Number of pages swapped out is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPgsSwappedOut = (Y - X)/(T2 - T1).')
krNumOfZeroFilledPages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfZeroFilledPages.setStatus('current')
if mibBuilder.loadTexts: krNumOfZeroFilledPages.setDescription('The rate of number of pages zero filled on demand. Number of pages zero filled on demand is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfZeroFilledPages = (Y - X)/(T2 - T1).')
krNumOfAutoFreedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfAutoFreedPages.setStatus('current')
if mibBuilder.loadTexts: krNumOfAutoFreedPages.setDescription('The rate of number of pages freed by daemon or auto. Number of pages freed by daemon or auto is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfAutoFreedPages = (Y - X)/(T2 - T1).')
krNumberOfScanedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumberOfScanedPages.setStatus('current')
if mibBuilder.loadTexts: krNumberOfScanedPages.setDescription('The rate of number of pages examined by pageout daemons. Number of pages examined by pageout daemons is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumberOfScanedPages = (Y - X)/(T2 - T1).')
krNumOfPDHandsRvln = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPDHandsRvln.setStatus('current')
if mibBuilder.loadTexts: krNumOfPDHandsRvln.setDescription('The rate of number of revolutions of the page daemon hands. Number of revolutions of the page daemon hands is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPDHandsRvln = (Y - X)/(T2 - T1).')
krNumOfPagerRun = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPagerRun.setStatus('current')
if mibBuilder.loadTexts: krNumOfPagerRun.setDescription('The rate of number of times pager was scheduled. Number of times pager was scheduled is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfPagerRun = (Y - X)/(T2 - T1).')
krCPUFaultTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1), )
if mibBuilder.loadTexts: krCPUFaultTable.setStatus('current')
if mibBuilder.loadTexts: krCPUFaultTable.setDescription('Table of CPU fault related information for all CPUs.')
krCPUFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krFaultCPUInstance"))
if mibBuilder.loadTexts: krCPUFaultEntry.setStatus('current')
if mibBuilder.loadTexts: krCPUFaultEntry.setDescription('CPU fault related information for one CPU.')
krFaultCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krFaultCPUInstance.setStatus('current')
if mibBuilder.loadTexts: krFaultCPUInstance.setDescription('The CPU number.')
krNumOfMinorHatPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfMinorHatPageFaults.setStatus('current')
if mibBuilder.loadTexts: krNumOfMinorHatPageFaults.setDescription('The rate of number of minor page faults via hat_fault(). Number of minor page faults via hat_fault() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfMinorHatPageFaults = (Y - X)/(T2 - T1).')
krNumOfMinorAsPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfMinorAsPageFaults.setStatus('current')
if mibBuilder.loadTexts: krNumOfMinorAsPageFaults.setDescription('The rate of number of minor page faults via as_fault(). Number of minor page faults via as_fault() is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfMinorAsPageFaults = (Y - X)/(T2 - T1).')
krNumOfMajorPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfMajorPageFaults.setStatus('current')
if mibBuilder.loadTexts: krNumOfMajorPageFaults.setDescription('The rate of number of major page faults. Number of major page faults is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfMajorPageFaults = (Y - X)/(T2 - T1).')
krNumOfCopyOnWriteFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfCopyOnWriteFaults.setStatus('current')
if mibBuilder.loadTexts: krNumOfCopyOnWriteFaults.setDescription('The rate of number of copy-on-write faults. Number of copy-on-write faults is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfCopyOnWriteFaults = (Y - X)/(T2 - T1).')
krNumOfProtectionFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfProtectionFaults.setStatus('current')
if mibBuilder.loadTexts: krNumOfProtectionFaults.setDescription('The rate of number of protection faults. Number of protection faults is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfProtectionFaults = (Y - X)/(T2 - T1).')
krNumOfSWLockFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSWLockFaults.setStatus('current')
if mibBuilder.loadTexts: krNumOfSWLockFaults.setDescription('The rate of number of faults due to software locking req. Number of faults is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfSWLockFaults = (Y - X)/(T2 - T1).')
krNumOfAsFaultsInKSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfAsFaultsInKSpace.setStatus('current')
if mibBuilder.loadTexts: krNumOfAsFaultsInKSpace.setDescription('The rate of number of as_faults() in kernel addr space. Number of as_faults() in kernel addr space is calculated at different times which is either when refresh interval reaches or when the mannual refresh is issued. If at time T1 the value is X and at time T2 the value is Y then krNumOfAsFaultsInKSpace = (Y - X)/(T2 - T1).')
krOverAllCpuStatsUtil = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 10, 1), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krOverAllCpuStatsUtil.setStatus('current')
if mibBuilder.loadTexts: krOverAllCpuStatsUtil.setDescription('Total CPU Utilization in Percentage.')
krOverAllCpuStatsIdle = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 10, 2), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krOverAllCpuStatsIdle.setStatus('current')
if mibBuilder.loadTexts: krOverAllCpuStatsIdle.setDescription('IDLE time for CPU in Percentage.')
krTotPhyMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 1), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotPhyMemAvail.setStatus('current')
if mibBuilder.loadTexts: krTotPhyMemAvail.setDescription('Total physical memory available, in Mbytes.')
krPhyMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 2), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krPhyMemInUse.setStatus('current')
if mibBuilder.loadTexts: krPhyMemInUse.setDescription('Total physical memory in use, in Mbytes.')
krPctOfPhyMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPctOfPhyMemInUse.setStatus('current')
if mibBuilder.loadTexts: krPctOfPhyMemInUse.setDescription('Total percentage of physical memory in use.')
krFreePhyMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krFreePhyMem.setStatus('current')
if mibBuilder.loadTexts: krFreePhyMem.setDescription('Total amount of physical memory free, in Mbytes.')
krPctOfPhyMemFree = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPctOfPhyMemFree.setStatus('current')
if mibBuilder.loadTexts: krPctOfPhyMemFree.setDescription('Total percentage of physical memory free.')
krTotSwapSpaceAvail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 1), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSwapSpaceAvail.setStatus('current')
if mibBuilder.loadTexts: krTotSwapSpaceAvail.setDescription('Total amount of swap space available, in Kbytes (total swap - reserved).')
krTotReservedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 2), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotReservedSwapSpace.setStatus('current')
if mibBuilder.loadTexts: krTotReservedSwapSpace.setDescription('Total amount of swap space reserved, in Kbytes.')
krTotAllocatedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 3), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotAllocatedSwapSpace.setStatus('current')
if mibBuilder.loadTexts: krTotAllocatedSwapSpace.setDescription('Total amount of swap space allocated, in Kbytes.')
krTotUsedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 4), Unsigned32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotUsedSwapSpace.setStatus('current')
if mibBuilder.loadTexts: krTotUsedSwapSpace.setDescription('Total amount of swap space used, in Kbytes.')
krTotSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 5), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSwapSpace.setStatus('current')
if mibBuilder.loadTexts: krTotSwapSpace.setDescription('Total amount of swap space.')
krTotPctOfSwapSpaceUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 6), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotPctOfSwapSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: krTotPctOfSwapSpaceUsed.setDescription('Total percentage of swap space used.')
krStreamHeadCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSHCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSHAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krStreamHeadCacheGroup = krStreamHeadCacheGroup.setStatus('current')
if mibBuilder.loadTexts: krStreamHeadCacheGroup.setDescription('Stream head cache related statistics.')
krQueueCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krQueueCacheGroup = krQueueCacheGroup.setStatus('current')
if mibBuilder.loadTexts: krQueueCacheGroup.setDescription('Queue cache related statistics.')
krStreamsMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSMCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSMAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krStreamsMsgGroup = krStreamsMsgGroup.setStatus('current')
if mibBuilder.loadTexts: krStreamsMsgGroup.setDescription('Stream message related statistics.')
krLinkinfoCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotLICacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotLIAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krLinkinfoCacheGroup = krLinkinfoCacheGroup.setStatus('current')
if mibBuilder.loadTexts: krLinkinfoCacheGroup.setDescription('Link info cache related statistics.')
krStreventCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSECacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSEAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krStreventCacheGroup = krStreventCacheGroup.setStatus('current')
if mibBuilder.loadTexts: krStreventCacheGroup.setDescription('Stream event cache related statistics.')
krSyncqCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSyCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSyAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krSyncqCacheGroup = krSyncqCacheGroup.setStatus('current')
if mibBuilder.loadTexts: krSyncqCacheGroup.setDescription('Sync cache related statistics.')
krQbandCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQBCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQBAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krQbandCacheGroup = krQbandCacheGroup.setStatus('current')
if mibBuilder.loadTexts: krQbandCacheGroup.setDescription('Qband cache related statistics.')
krStrHeadCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCacheName.setStatus('current')
if mibBuilder.loadTexts: krStrHeadCacheName.setDescription('The name of the streams head cache maintained by kernel.')
krStrHeadCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krStrHeadCacheCurrUsage.setDescription('Current usage (total - avail) of streams head cache.')
krStrHeadCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCacheSize.setStatus('current')
if mibBuilder.loadTexts: krStrHeadCacheSize.setDescription('Maximum capacity of streams head cache.')
krTotSHCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSHCacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotSHCacheAllocation.setDescription('Number of total cache allocatios in streams head cache.')
krTotSHAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSHAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotSHAllocFailures.setDescription('Number of allocation failures in streams head cache.')
krStrHeadCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krStrHeadCachePctUsed.setDescription('Percentage of streams head cache used.')
krQueueCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCacheName.setStatus('current')
if mibBuilder.loadTexts: krQueueCacheName.setDescription('The name of the queue cache maintained by kernel.')
krQueueCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krQueueCacheCurrUsage.setDescription('Current usage (total - avail) of queue cache.')
krQueueCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCacheSize.setStatus('current')
if mibBuilder.loadTexts: krQueueCacheSize.setDescription('Maximum capacity of the queue cache.')
krTotQCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQCacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotQCacheAllocation.setDescription('Number of total queue cache allocations.')
krTotQAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotQAllocFailures.setDescription('Number of allocation failures in queue cache.')
krQueueCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krQueueCachePctUsed.setDescription('Percentage of queue cache used.')
krStrMsgCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCacheName.setStatus('current')
if mibBuilder.loadTexts: krStrMsgCacheName.setDescription('The name of the streams messages cache maintained by kernel.')
krStrMsgCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krStrMsgCacheCurrUsage.setDescription('Current usage (total - avail) of streams messages cache.')
krStrMsgCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCacheSize.setStatus('current')
if mibBuilder.loadTexts: krStrMsgCacheSize.setDescription('Maximum capacity of streams messages cache.')
krTotSMCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSMCacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotSMCacheAllocation.setDescription('Number of total streams messages cache allocations.')
krTotSMAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSMAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotSMAllocFailures.setDescription('Number of allocation failures in streams messages cache.')
krStrMsgCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krStrMsgCachePctUsed.setDescription('Percentage of streams messages cache used.')
krLinkinfoCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCacheName.setStatus('current')
if mibBuilder.loadTexts: krLinkinfoCacheName.setDescription('The name of the link information cache maintained by kernel.')
krLinkinfoCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krLinkinfoCacheCurrUsage.setDescription('Current usage (total - avail) of link information cache.')
krLinkinfoCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCacheSize.setStatus('current')
if mibBuilder.loadTexts: krLinkinfoCacheSize.setDescription('Maximum capacity of link information cache.')
krTotLICacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotLICacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotLICacheAllocation.setDescription('Number of total allocations in link information cache.')
krTotLIAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotLIAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotLIAllocFailures.setDescription('Number of allocation failures in link information cache.')
krLinkinfoCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krLinkinfoCachePctUsed.setDescription('Percentage of link information cache used.')
krStrEventCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCacheName.setStatus('current')
if mibBuilder.loadTexts: krStrEventCacheName.setDescription('The name of the streams event cache maintained by kernel.')
krStrEventCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krStrEventCacheCurrUsage.setDescription('Current usage (total - avail) of streams event cache.')
krStrEventCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCacheSize.setStatus('current')
if mibBuilder.loadTexts: krStrEventCacheSize.setDescription('Maximum capacity of streams event cache.')
krTotSECacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSECacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotSECacheAllocation.setDescription('Number of total allocations in streams event cache.')
krTotSEAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSEAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotSEAllocFailures.setDescription('Number of allocation failures in streams event cache.')
krStrEventCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krStrEventCachePctUsed.setDescription('Percentage of streams event cache used.')
krSyncCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCacheName.setStatus('current')
if mibBuilder.loadTexts: krSyncCacheName.setDescription('The name of the syncq cache maintained by kernel.')
krSyncCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krSyncCacheCurrUsage.setDescription('Current usage (total - avail) of syncq cache.')
krSyncCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCacheSize.setStatus('current')
if mibBuilder.loadTexts: krSyncCacheSize.setDescription('Maximum capacity of syncq cache.')
krTotSyCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSyCacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotSyCacheAllocation.setDescription('Number of total allocations in syncq cache.')
krTotSyAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSyAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotSyAllocFailures.setDescription('Number of allocation failures in syncq cache.')
krSyncCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krSyncCachePctUsed.setDescription('Percentage of syncq cache used.')
krQbandCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCacheName.setStatus('current')
if mibBuilder.loadTexts: krQbandCacheName.setDescription('The name of the qband cache maintained by kernel.')
krQbandCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCacheCurrUsage.setStatus('current')
if mibBuilder.loadTexts: krQbandCacheCurrUsage.setDescription('Current usage (total - avail) of qband cache.')
krQbandCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCacheSize.setStatus('current')
if mibBuilder.loadTexts: krQbandCacheSize.setDescription('Maximum capacity of qband cache.')
krTotQBCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQBCacheAllocation.setStatus('current')
if mibBuilder.loadTexts: krTotQBCacheAllocation.setDescription('Number of total allocations in qband cache.')
krTotQBAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQBAllocFailures.setStatus('current')
if mibBuilder.loadTexts: krTotQBAllocFailures.setDescription('Number of allocation failures in qband cache.')
krQbandCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCachePctUsed.setStatus('current')
if mibBuilder.loadTexts: krQbandCachePctUsed.setDescription('Percentage of qband cache used.')
krDeviceErrorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1), )
if mibBuilder.loadTexts: krDeviceErrorTable.setStatus('current')
if mibBuilder.loadTexts: krDeviceErrorTable.setDescription('This table displays device error summary statistics.')
krDeviceErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevDevice"))
if mibBuilder.loadTexts: krDeviceErrorEntry.setStatus('current')
if mibBuilder.loadTexts: krDeviceErrorEntry.setDescription('Error information for a particular device.')
krDevDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevDevice.setStatus('current')
if mibBuilder.loadTexts: krDevDevice.setDescription('The name of the device.')
krDevSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: krDevSoftwareErrors.setDescription('The number of software errors.')
krDevHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: krDevHardwareErrors.setDescription('The number of hardware errors.')
krDevTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevTransportErrors.setStatus('current')
if mibBuilder.loadTexts: krDevTransportErrors.setDescription('The number of transport errors.')
krDevTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevTotalErrors.setStatus('current')
if mibBuilder.loadTexts: krDevTotalErrors.setDescription('Total number of errors for the device.')
krTapeErrorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2), )
if mibBuilder.loadTexts: krTapeErrorTable.setStatus('current')
if mibBuilder.loadTexts: krTapeErrorTable.setDescription('This table displays tape device error summary statistics.')
krTapeErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeDevice"))
if mibBuilder.loadTexts: krTapeErrorEntry.setStatus('current')
if mibBuilder.loadTexts: krTapeErrorEntry.setDescription('Error information for a particular tape device.')
krTapeDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeDevice.setStatus('current')
if mibBuilder.loadTexts: krTapeDevice.setDescription('The name of the device.')
krTapeSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: krTapeSoftwareErrors.setDescription('The number of software errors.')
krTapeHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: krTapeHardwareErrors.setDescription('The number of hardware errors.')
krTapeTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeTransportErrors.setStatus('current')
if mibBuilder.loadTexts: krTapeTransportErrors.setDescription('The number of transport errors.')
krTapeTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeTotalErrors.setStatus('current')
if mibBuilder.loadTexts: krTapeTotalErrors.setDescription('The total number of errors for the tape device.')
krSmallPoolMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSmallPoolMem.setStatus('current')
if mibBuilder.loadTexts: krSmallPoolMem.setDescription('The amount of memory in bytes KMA has for the small pool (The reserve from which small space requests are catered.')
krSmallPoolMemAllocated = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSmallPoolMemAllocated.setStatus('current')
if mibBuilder.loadTexts: krSmallPoolMemAllocated.setDescription('The number of bytes allocated to satisfy requests for small amounts of memory.')
krSmallPoolMemFailed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSmallPoolMemFailed.setStatus('current')
if mibBuilder.loadTexts: krSmallPoolMemFailed.setDescription('The number of requests for small amounts of memory that were not satisfied (failed).')
krLargePoolMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLargePoolMem.setStatus('current')
if mibBuilder.loadTexts: krLargePoolMem.setDescription('The amount of memory in bytes KMA has for the large pool (The reserve from which large space requests are catered.')
krLargePoolMemAllocated = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLargePoolMemAllocated.setStatus('current')
if mibBuilder.loadTexts: krLargePoolMemAllocated.setDescription('The number of bytes allocated to satisfy requests for large amounts of memory.')
krLargePoolMemFailed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLargePoolMemFailed.setStatus('current')
if mibBuilder.loadTexts: krLargePoolMemFailed.setDescription('The number of requests for large amounts of memory that were not satisfied (failed).')
krOversizeMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krOversizeMem.setStatus('current')
if mibBuilder.loadTexts: krOversizeMem.setDescription('The amount of memory in bytes allocated for over-size requests.')
krOversizeMemFailed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krOversizeMemFailed.setStatus('current')
if mibBuilder.loadTexts: krOversizeMemFailed.setDescription('The number of oversize requests which could not be satisfied (failed)')
krZoneListTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1), )
if mibBuilder.loadTexts: krZoneListTable.setStatus('current')
if mibBuilder.loadTexts: krZoneListTable.setDescription('MIB tree branch')
krZoneListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krZoneName"))
if mibBuilder.loadTexts: krZoneListEntry.setStatus('current')
if mibBuilder.loadTexts: krZoneListEntry.setDescription('MIB tree branch')
krZoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krZoneId.setStatus('current')
if mibBuilder.loadTexts: krZoneId.setDescription('Gives Zone Identification Number.')
krZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krZoneName.setStatus('current')
if mibBuilder.loadTexts: krZoneName.setDescription('Name of the zone.')
krStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStatus.setStatus('current')
if mibBuilder.loadTexts: krStatus.setDescription("Zone's Status.")
krPath = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPath.setStatus('current')
if mibBuilder.loadTexts: krPath.setDescription('Logical PATH for the zone.')
krIp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krIp.setStatus('current')
if mibBuilder.loadTexts: krIp.setDescription("Zone's IP address.")
krAutoboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krAutoboot.setStatus('current')
if mibBuilder.loadTexts: krAutoboot.setDescription('Autoboot Status for the zone.')
mibBuilder.exportSymbols("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", krNumOfContextSwitches=krNumOfContextSwitches, krSwapDetailGroup=krSwapDetailGroup, krQbandCacheGroup=krQbandCacheGroup, krNumOfForksCalled=krNumOfForksCalled, kernelReader=kernelReader, krNumOfFldMutxEntrs=krNumOfFldMutxEntrs, krUFSFreeSpaceForNonSU64=krUFSFreeSpaceForNonSU64, krUFSPctInodesUsed=krUFSPctInodesUsed, krIp=krIp, krNumOfCopyOnWriteFaults=krNumOfCopyOnWriteFaults, krDevHardwareErrors=krDevHardwareErrors, krNumPhyBlocksWrite=krNumPhyBlocksWrite, krNumOfSwapOuts=krNumOfSwapOuts, krTapeTotalErrors=krTapeTotalErrors, krNumCanModeCharsHandled=krNumCanModeCharsHandled, sun=sun, krUFSFileSystemSize64=krUFSFileSystemSize64, krkrNumOfPgsPagedOut=krkrNumOfPgsPagedOut, krPhyMemInUse=krPhyMemInUse, krSyncCachePctUsed=krSyncCachePctUsed, krDevSoftwareErrors=krDevSoftwareErrors, krSystemUpTime=krSystemUpTime, krDiskDataWriteRate=krDiskDataWriteRate, krVXFSFileSystemPctUsedSpace=krVXFSFileSystemPctUsedSpace, krNumOfPageIns=krNumOfPageIns, krFileSystem=krFileSystem, krDiskSrvcAvgTransTime=krDiskSrvcAvgTransTime, krNumLogBlocksRead=krNumLogBlocksRead, krTotSyAllocFailures=krTotSyAllocFailures, krDiskDetailEntry=krDiskDetailEntry, krVXFSFreeSpaceForNonSU64=krVXFSFreeSpaceForNonSU64, krCPUSysEntry=krCPUSysEntry, krDiskSrvcAvgTransRunTime=krDiskSrvcAvgTransRunTime, krPctOfPhyMemInUse=krPctOfPhyMemInUse, krNumOfDirBlocksRead=krNumOfDirBlocksRead, krNumOfRegWinUsrOvrFlow=krNumOfRegWinUsrOvrFlow, krNumOfPgsPagedIn=krNumOfPgsPagedIn, krUFSFileSystemMountPoint=krUFSFileSystemMountPoint, krNumOfRegWinSysUsrOvrFlow=krNumOfRegWinSysUsrOvrFlow, krTotPctOfSwapSpaceUsed=krTotPctOfSwapSpaceUsed, krTotQAllocFailures=krTotQAllocFailures, krTotQBAllocFailures=krTotQBAllocFailures, krVXFSFileEntry=krVXFSFileEntry, krTotProcBlocked=krTotProcBlocked, krNumOfZeroFilledPages=krNumOfZeroFilledPages, krStrHeadCacheName=krStrHeadCacheName, krCPUIntrEntry=krCPUIntrEntry, krTotNumberOfCPUs=krTotNumberOfCPUs, krNumLogBlocksWrite=krNumLogBlocksWrite, krFaultCPUInstance=krFaultCPUInstance, krCPUPgEntry=krCPUPgEntry, krLinkinfoCacheName=krLinkinfoCacheName, krUFSFileSystemGroup=krUFSFileSystemGroup, agent=agent, krVXFSFileSystemSize64=krVXFSFileSystemSize64, krTotNumOfSessions=krTotNumOfSessions, krNumOfRegWinSysOvrFlow=krNumOfRegWinSysOvrFlow, krNumOfAsFaultsInKSpace=krNumOfAsFaultsInKSpace, krQueueCacheGroup=krQueueCacheGroup, krTotNumOfUsers=krTotNumOfUsers, krCPUKernelModeTime=krCPUKernelModeTime, PYSNMP_MODULE_ID=kernelReader, krNumRawIOWrites=krNumRawIOWrites, krNumOfModuleUnloads=krNumOfModuleUnloads, krNumOfPDHandsRvln=krNumOfPDHandsRvln, krTapeErrorTable=krTapeErrorTable, krQueueCachePctUsed=krQueueCachePctUsed, krLinkinfoCacheSize=krLinkinfoCacheSize, krStreventCacheGroup=krStreventCacheGroup, krTotSMAllocFailures=krTotSMAllocFailures, krIOErrorStatsGroup=krIOErrorStatsGroup, krTapeHardwareErrors=krTapeHardwareErrors, krDiskOperationRate=krDiskOperationRate, krStrMsgCacheCurrUsage=krStrMsgCacheCurrUsage, krTotSHCacheAllocation=krTotSHCacheAllocation, krCPUSyscallGroup=krCPUSyscallGroup, krStreamsMsgGroup=krStreamsMsgGroup, krLinkinfoCacheCurrUsage=krLinkinfoCacheCurrUsage, krUFSFileSystemFreeSpace64=krUFSFileSystemFreeSpace64, krTotSEAllocFailures=krTotSEAllocFailures, krUFSFileEntry=krUFSFileEntry, krStrEventCachePctUsed=krStrEventCachePctUsed, krStrEventCacheCurrUsage=krStrEventCacheCurrUsage, krTotSwapSpaceAvail=krTotSwapSpaceAvail, krTotUsedSwapSpace=krTotUsedSwapSpace, krNumOfCPUMig=krNumOfCPUMig, krTotSwapSpace=krTotSwapSpace, krLargePoolMemAllocated=krLargePoolMemAllocated, krNumOfMinorAsPageFaults=krNumOfMinorAsPageFaults, krUFSFileSystemSize=krUFSFileSystemSize, krKernelMemAllocGroup=krKernelMemAllocGroup, krDiskAvgRunTrans=krDiskAvgRunTrans, krUserGroup=krUserGroup, krCPUIntrTable=krCPUIntrTable, krCPUMiscEntry=krCPUMiscEntry, krTotLIAllocFailures=krTotLIAllocFailures, krDiskSrvcTimeGroup=krDiskSrvcTimeGroup, krStreamsDetail=krStreamsDetail, krNumOfPgsSwappedIn=krNumOfPgsSwappedIn, krNumOfRWWriterFails=krNumOfRWWriterFails, krCPUNumOfIdleThreadSched=krCPUNumOfIdleThreadSched, krUFSFreeSpaceForNonSU=krUFSFreeSpaceForNonSU, krIntrCPUInstance=krIntrCPUInstance, krStrHeadCacheSize=krStrHeadCacheSize, krQbandCacheName=krQbandCacheName, krCPUUtilTable=krCPUUtilTable, krNumOfProtectionFaults=krNumOfProtectionFaults, krOverAllCPUStatistics=krOverAllCPUStatistics, krNumOfSWLockFaults=krNumOfSWLockFaults, krLinkinfoCacheGroup=krLinkinfoCacheGroup, krTotSECacheAllocation=krTotSECacheAllocation, krTotSyCacheAllocation=krTotSyCacheAllocation, krSyncCacheSize=krSyncCacheSize, krCPUTotIOWaitTime=krCPUTotIOWaitTime, krNumTermOutChars=krNumTermOutChars, krNumOfInodeTblOvrFlow=krNumOfInodeTblOvrFlow, krCPURegEntry=krCPURegEntry, krNumOfPageReclaims=krNumOfPageReclaims, krNumOfIvolCSwitches=krNumOfIvolCSwitches, modules=modules, krNumOfSysReads=krNumOfSysReads, krDiskSrvcWaitPctTime=krDiskSrvcWaitPctTime, krVXFSTotNumOfInodesAvail=krVXFSTotNumOfInodesAvail, krDiskSrvcAvgWaitTime=krDiskSrvcAvgWaitTime, krDevTransportErrors=krDevTransportErrors, krDDDiskName=krDDDiskName, krTotPhyMemAvail=krTotPhyMemAvail, krDisk=krDisk, krNumberOfTraps=krNumberOfTraps, krMiscCPUInstance=krMiscCPUInstance, krCPUIOTable=krCPUIOTable, krTotProcInRunQueue=krTotProcInRunQueue, krCPUDetail=krCPUDetail, krDiskDetailTable=krDiskDetailTable, krNumOfMinorHatPageFaults=krNumOfMinorHatPageFaults, krCPUDelta=krCPUDelta, krNumOfMajorPageFaults=krNumOfMajorPageFaults, krZoneName=krZoneName, krNumOfFileTblOvrFlow=krNumOfFileTblOvrFlow, krZoneListTable=krZoneListTable, krPath=krPath, krSyncCacheName=krSyncCacheName, krNumRawIOReads=krNumRawIOReads, krStrEventCacheName=krStrEventCacheName, krOversizeMemFailed=krOversizeMemFailed, krNumBytesWritten=krNumBytesWritten, krPgCPUInstance=krPgCPUInstance, krDeviceErrorEntry=krDeviceErrorEntry, krTotSMCacheAllocation=krTotSMCacheAllocation, krLargePoolMemFailed=krLargePoolMemFailed, krNumPhyBlocksAsyncWrite=krNumPhyBlocksAsyncWrite, krmdmint=krmdmint, krDeviceErrorTable=krDeviceErrorTable, krTapeErrorEntry=krTapeErrorEntry, krTotSHAllocFailures=krTotSHAllocFailures, krCPUUtilEntry=krCPUUtilEntry, krNumOfModuleLoads=krNumOfModuleLoads, krUFSTotNumOfInodesAvail=krUFSTotNumOfInodesAvail, krSmallPoolMemFailed=krSmallPoolMemFailed, krNumOfInodesTakenWAP=krNumOfInodesTakenWAP, krVXFSFileSystemMountPoint=krVXFSFileSystemMountPoint, krDiskAliasName=krDiskAliasName, krCPUSysTable=krCPUSysTable, krPctOfPhyMemFree=krPctOfPhyMemFree, krDevTotalErrors=krDevTotalErrors, krMemoryUsageGroup=krMemoryUsageGroup, krCPUTotSwapWaitTime=krCPUTotSwapWaitTime, krAutoboot=krAutoboot, krVXFSTotNumOfInodes=krVXFSTotNumOfInodes, krPrimaryUser=krPrimaryUser, krNumOfInodesTakenWNAP=krNumOfInodesTakenWNAP, krUFSFileSystemFreeSpace=krUFSFileSystemFreeSpace, krNumOfExecsCalled=krNumOfExecsCalled, krNumOfVForksCalled=krNumOfVForksCalled, krZoneListEntry=krZoneListEntry, krSyncqCacheGroup=krSyncqCacheGroup, krConsoleUser=krConsoleUser, krVXFSFileTable=krVXFSFileTable, sunsymon=sunsymon, krSystemLoadAvg15min=krSystemLoadAvg15min, krStrMsgCacheSize=krStrMsgCacheSize, krVXFSFreeSpaceForNonSU=krVXFSFreeSpaceForNonSU, krxmtint=krxmtint, krCPUFaultsGroup=krCPUFaultsGroup, krQueueCacheSize=krQueueCacheSize, krQbandCacheSize=krQbandCacheSize, krDSDiskName=krDSDiskName, krVXFSPctInodesUsed=krVXFSPctInodesUsed, krSmallPoolMem=krSmallPoolMem, krDevDevice=krDevDevice, krQbandCacheCurrUsage=krQbandCacheCurrUsage, krTotQBCacheAllocation=krTotQBCacheAllocation, krCPUTotWaitTime=krCPUTotWaitTime, krUFSFileSystemIndex=krUFSFileSystemIndex, krVXFSFileSystemGroup=krVXFSFileSystemGroup, krNumOfSysCallsMade=krNumOfSysCallsMade, krStrHeadCachePctUsed=krStrHeadCachePctUsed, krRWCPUInstance=krRWCPUInstance, krCPUMiscGroup=krCPUMiscGroup, krrcvint=krrcvint, krCPUFaultTable=krCPUFaultTable, krUFSFileSystemDiskName=krUFSFileSystemDiskName, krCPUInstance=krCPUInstance, krNumTermInputChars=krNumTermInputChars, krTotProcReadyInSwap=krTotProcReadyInSwap, krTapeSoftwareErrors=krTapeSoftwareErrors, krNumOfIntrThreads=krNumOfIntrThreads, krNumOfRegWinSysUndrFlow=krNumOfRegWinSysUndrFlow, krCPUTotPIOWaitTime=krCPUTotPIOWaitTime, krStreamHeadCacheGroup=krStreamHeadCacheGroup, krVXFSFileSystemSize=krVXFSFileSystemSize, krphysio=krphysio, krStrMsgCachePctUsed=krStrMsgCachePctUsed, krOverAllCpuStatsUtil=krOverAllCpuStatsUtil, krTotQCacheAllocation=krTotQCacheAllocation, krCPUMiscTable=krCPUMiscTable, krNumOfRWLockTry=krNumOfRWLockTry, krDiskBusyPctTime=krDiskBusyPctTime, prod=prod, krDiskDetailGroup=krDiskDetailGroup, krNumOfPageOuts=krNumOfPageOuts, krOversizeMem=krOversizeMem, krUFSFileTable=krUFSFileTable, krStrMsgCacheName=krStrMsgCacheName, krStatus=krStatus, krNumberOfDevInterrupts=krNumberOfDevInterrupts, krCPURegWindowGroup=krCPURegWindowGroup, krDiskDataTransferRate=krDiskDataTransferRate, krNumOfUfsigetcalls=krNumOfUfsigetcalls, krDiskSrvEntry=krDiskSrvEntry, krDiskDataReadRate=krDiskDataReadRate, krDiskReadOpRate=krDiskReadOpRate, krTotReservedSwapSpace=krTotReservedSwapSpace, krTotNumOfMessages=krTotNumOfMessages, krSyscCPUInstance=krSyscCPUInstance, krNumOfxcalls=krNumOfxcalls, krCPUPgTable=krCPUPgTable, krNumOfPgsSwappedOut=krNumOfPgsSwappedOut, krFreePhyMem=krFreePhyMem, krCPUIOGroup=krCPUIOGroup, krSmallPoolMemAllocated=krSmallPoolMemAllocated, krNumOfRegWinUsrUndrFlow=krNumOfRegWinUsrUndrFlow, krCPUProcInStatesGroup=krCPUProcInStatesGroup, krNumOfAutoFreedPages=krNumOfAutoFreedPages, krQueueCacheCurrUsage=krQueueCacheCurrUsage, krSystemLoadAvg5min=krSystemLoadAvg5min, krDiskSrvTable=krDiskSrvTable, krNumberOfScanedPages=krNumberOfScanedPages, krQueueCacheName=krQueueCacheName, krLinkinfoCachePctUsed=krLinkinfoCachePctUsed, krStrEventCacheSize=krStrEventCacheSize, krCPUIdleTime=krCPUIdleTime, krUFSFileSystemPctUsedSpace=krUFSFileSystemPctUsedSpace, krNumOfProcTblOvrFlow=krNumOfProcTblOvrFlow)
mibBuilder.exportSymbols("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", krCPUFaultEntry=krCPUFaultEntry, krDiskAvgWaitTrans=krDiskAvgWaitTrans, krVXFSFileSystemFreeSpace64=krVXFSFileSystemFreeSpace64, krLoadGroup=krLoadGroup, krVXFSFileSystemDiskName=krVXFSFileSystemDiskName, krNumOfPagerRun=krNumOfPagerRun, krTapeTransportErrors=krTapeTransportErrors, krCPURegTable=krCPURegTable, krQbandCachePctUsed=krQbandCachePctUsed, krCPUPginfoGroup=krCPUPginfoGroup, krZoneId=krZoneId, krCPUProcess=krCPUProcess, krCPUUtilGroup=krCPUUtilGroup, krNumBytesRead=krNumBytesRead, krNumOfInterrupts=krNumOfInterrupts, krUFSTotNumOfInodes=krUFSTotNumOfInodes, krNumOfSysWrites=krNumOfSysWrites, krCPUUserModeTime=krCPUUserModeTime, krNumOfThrCreateCalls=krNumOfThrCreateCalls, krNumOfRWReaderFails=krNumOfRWReaderFails, krNumOfSwapIns=krNumOfSwapIns, krCPUInterruptsGroup=krCPUInterruptsGroup, krOverAllCpuStatsIdle=krOverAllCpuStatsIdle, krTotAllocatedSwapSpace=krTotAllocatedSwapSpace, krDiskWriteOpRate=krDiskWriteOpRate, krVXFSFileSystemFreeSpace=krVXFSFileSystemFreeSpace, krTotNumOfSemops=krTotNumOfSemops, krSyncCacheCurrUsage=krSyncCacheCurrUsage, krVXFSFileSystemIndex=krVXFSFileSystemIndex, krNumPhyBlocksRead=krNumPhyBlocksRead, krZoneList=krZoneList, krNumOfFreeListPgReclaims=krNumOfFreeListPgReclaims, krIOCPUInstance=krIOCPUInstance, krNumOfPnameLookup=krNumOfPnameLookup, krStrHeadCacheCurrUsage=krStrHeadCacheCurrUsage, krSystemLoadAvg1min=krSystemLoadAvg1min, krCPUIOEntry=krCPUIOEntry, krTotLICacheAllocation=krTotLICacheAllocation, krTapeDevice=krTapeDevice, krLargePoolMem=krLargePoolMem)
