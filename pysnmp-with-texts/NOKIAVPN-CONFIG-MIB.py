#
# PySNMP MIB module NOKIAVPN-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIAVPN-CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
nokiaVPNModules, config = mibBuilder.importSymbols("NOKIAVPN-MIB", "nokiaVPNModules", "config")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter32, Counter64, Gauge32, iso, ModuleIdentity, Bits, IpAddress, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter32", "Counter64", "Gauge32", "iso", "ModuleIdentity", "Bits", "IpAddress", "ObjectIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nokiaVPNConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 94, 1, 41, 5, 6))
nokiaVPNConfigMIB.setRevisions(('2001-01-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nokiaVPNConfigMIB.setRevisionsDescriptions(('Cleanup.',))
if mibBuilder.loadTexts: nokiaVPNConfigMIB.setLastUpdated('200101180000Z')
if mibBuilder.loadTexts: nokiaVPNConfigMIB.setOrganization('Nokia Internet Communications.')
if mibBuilder.loadTexts: nokiaVPNConfigMIB.setContactInfo(' Nokia, Inc. Customer Support Postal: 100 Enterprise Way, Module B Scotts Valley, CA 95066 USA E-Mail: snmp-contact@cips.nokia.com')
if mibBuilder.loadTexts: nokiaVPNConfigMIB.setDescription('NokiaVPN Configuration MIB module.')
configDirtyBit = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDirtyBit.setStatus('current')
if mibBuilder.loadTexts: configDirtyBit.setDescription('Says whether the configuration has been changed via a set on any of the writable SNMP variables.')
configCommit = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommit.setStatus('current')
if mibBuilder.loadTexts: configCommit.setDescription('When an SNMP management station sets (changes) a configuration parameter via an SNMP set operation, the SNMP agent code will set a dirty bit. The management station can then submit a set operation on this configCommit variable to write the configuration to flash, thereby committing the change. Performing a read on this variable will return the value of the config dirty bit.')
configPollrate = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPollrate.setStatus('current')
if mibBuilder.loadTexts: configPollrate.setDescription('Defines how often in seconds SNMP Agent checks system resources for capasity-limit-exceeded -trap sending purposes.')
configTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTrapDelay.setStatus('current')
if mibBuilder.loadTexts: configTrapDelay.setDescription('Defines how often (at most) one type of trap is sent in seconds.')
configTresholdCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTresholdCPUUsage.setStatus('current')
if mibBuilder.loadTexts: configTresholdCPUUsage.setDescription('Defines the treshold (percentage) of CPU utilisation after which a trap is sent.')
configTresholdIOLoad = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTresholdIOLoad.setStatus('current')
if mibBuilder.loadTexts: configTresholdIOLoad.setDescription('Defines the treshold (pkts/sec divided by system performance rating) of I/O load after which a trap is sent.')
configTresholdUDPDrop = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTresholdUDPDrop.setStatus('current')
if mibBuilder.loadTexts: configTresholdUDPDrop.setDescription('Defines the UDP packet drop rate treshold (percentage) after which a trap is sent.')
configTresholdIPDrop = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTresholdIPDrop.setStatus('current')
if mibBuilder.loadTexts: configTresholdIPDrop.setDescription('Defines the IP packet drop rate treshold (percentage) after which a trap is sent.')
configTresholdMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTresholdMemUsage.setStatus('current')
if mibBuilder.loadTexts: configTresholdMemUsage.setDescription('Defines the memory usage treshold (percentage) after which a trap is sent.')
configValCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configValCPUUsage.setStatus('current')
if mibBuilder.loadTexts: configValCPUUsage.setDescription('The current CPU (the most loaded CPU) usage (percentage).')
configValIOLoad = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configValIOLoad.setStatus('current')
if mibBuilder.loadTexts: configValIOLoad.setDescription('The current I/O load (pkts/sec divided by system performance rating) .')
configValUDPDrop = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configValUDPDrop.setStatus('current')
if mibBuilder.loadTexts: configValUDPDrop.setDescription('The current UDP packet drop rate (percentage).')
configValIPDrop = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configValIPDrop.setStatus('current')
if mibBuilder.loadTexts: configValIPDrop.setDescription('The current IP packet drop rate (percentage).')
configValMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 41, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configValMemUsage.setStatus('current')
if mibBuilder.loadTexts: configValMemUsage.setDescription('The current memory usage (percentage).')
mibBuilder.exportSymbols("NOKIAVPN-CONFIG-MIB", configTresholdUDPDrop=configTresholdUDPDrop, configTresholdIOLoad=configTresholdIOLoad, nokiaVPNConfigMIB=nokiaVPNConfigMIB, configValIOLoad=configValIOLoad, configPollrate=configPollrate, configCommit=configCommit, configTresholdIPDrop=configTresholdIPDrop, configTresholdMemUsage=configTresholdMemUsage, configValIPDrop=configValIPDrop, configValMemUsage=configValMemUsage, configDirtyBit=configDirtyBit, configTresholdCPUUsage=configTresholdCPUUsage, PYSNMP_MODULE_ID=nokiaVPNConfigMIB, configValUDPDrop=configValUDPDrop, configValCPUUsage=configValCPUUsage, configTrapDelay=configTrapDelay)
