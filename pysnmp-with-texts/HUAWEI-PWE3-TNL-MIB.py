#
# PySNMP MIB module HUAWEI-PWE3-TNL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PWE3-TNL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
HWL2VpnVcEncapsType, HWL2VpnStateChangeReason, HWEnableValue = mibBuilder.importSymbols("HUAWEI-VPLS-EXT-MIB", "HWL2VpnVcEncapsType", "HWL2VpnStateChangeReason", "HWEnableValue")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
TimeTicks, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Counter32, iso, ModuleIdentity, Bits, MibIdentifier, IpAddress, Bits, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Counter32", "iso", "ModuleIdentity", "Bits", "MibIdentifier", "IpAddress", "Bits", "Gauge32", "NotificationType")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
hwL2VpnPwe3TnlExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5))
if mibBuilder.loadTexts: hwL2VpnPwe3TnlExt.setLastUpdated('200812151935Z')
if mibBuilder.loadTexts: hwL2VpnPwe3TnlExt.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwL2VpnPwe3TnlExt.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwL2VpnPwe3TnlExt.setDescription('Initial version 2008/12/11,L2VPN QOS OBJECT GROUP.')
hwL2Vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119))
hwPwe3TunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1))
hwPwe3TunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1), )
if mibBuilder.loadTexts: hwPwe3TunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TunnelTable.setDescription('Provides the information of a tunnel table.')
hwPwe3TunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1), ).setIndexNames((0, "HUAWEI-PWE3-TNL-MIB", "hwPwVcId"), (0, "HUAWEI-PWE3-TNL-MIB", "hwPwVcType"), (0, "HUAWEI-PWE3-TNL-MIB", "hwPwe3PeerTnlId"), (0, "HUAWEI-PWE3-TNL-MIB", "hwPwe3PwInlabel"))
if mibBuilder.loadTexts: hwPwe3TunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TunnelEntry.setDescription('Provides the information of a VC entry.')
hwPwVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPwVcId.setStatus('current')
if mibBuilder.loadTexts: hwPwVcId.setDescription("Index for the conceptual row identifying a PW within this PW Emulation table.Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element'.")
hwPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 2), HWL2VpnVcEncapsType())
if mibBuilder.loadTexts: hwPwVcType.setStatus('current')
if mibBuilder.loadTexts: hwPwVcType.setDescription('The type of the Virtual Circuit.This value indicate the service carried over this PW.')
hwPwe3PwInlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwPwe3PwInlabel.setStatus('current')
if mibBuilder.loadTexts: hwPwe3PwInlabel.setDescription('The inlabel of SVC PW.')
hwPwe3PeerTnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: hwPwe3PeerTnlId.setStatus('current')
if mibBuilder.loadTexts: hwPwe3PeerTnlId.setDescription('The Tunnel ID.')
hwPwe3TnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3TnlName.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TnlName.setDescription('The name of this Tunnel.')
hwPwe3TnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3TnlType.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TnlType.setDescription('The type of this Tunnel. e.g. LSP/GRE/CR-LSP...')
hwPwe3TnlSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3TnlSrcAddress.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TnlSrcAddress.setDescription('The source ip address of this tunnel.')
hwPwe3TnlDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3TnlDestAddress.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TnlDestAddress.setDescription('The destination ip address of this tunnel.')
hwPwe3LspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspIndex.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspIndex.setDescription('The index of lsp.')
hwPwe3LspOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspOutIf.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspOutIf.setDescription('The out-interface of lsp.')
hwPwe3LspOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspOutLabel.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspOutLabel.setDescription('The out-label of lsp.')
hwPwe3LspNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspNextHop.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspNextHop.setDescription('The next-hop of lsp.')
hwPwe3LspFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspFec.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspFec.setDescription('The FEC of lsp.')
hwPwe3LspFecPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspFecPfxLen.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspFecPfxLen.setDescription('The length of mask for hwVplsLspFec.')
hwPwe3LspIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspIsBackup.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspIsBackup.setDescription('Indicate whether the lsp is main.')
hwPwe3PwOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3PwOutLabel.setStatus('current')
if mibBuilder.loadTexts: hwPwe3PwOutLabel.setDescription('the outlabel of pw, specified for SVC.')
hwPwe3IsBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3IsBalance.setStatus('current')
if mibBuilder.loadTexts: hwPwe3IsBalance.setDescription('Property of Balance. Rerurn True if Tunnel-Policy is configed.')
hwPwe3LspTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspTunnelId.setDescription('This object indicates the tunnel ID of the tunnel interface.')
hwPwe3LspSignType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20))).clone(namedValues=NamedValues(("ldp", 1), ("crLdp", 2), ("rsvp", 3), ("bgp", 4), ("l3vpn", 5), ("static", 6), ("crStatic", 7), ("bgpIpv6", 8), ("staticHa", 9), ("l2vpnIpv6", 10), ("maxSignal", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3LspSignType.setStatus('current')
if mibBuilder.loadTexts: hwPwe3LspSignType.setDescription('This object indicates the signaling protocol of the tunnel.')
hwPwe3TnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 1, 1, 1, 50), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwe3TnlRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TnlRowStatus.setDescription('The operating state of the row.')
hwPwe3TunnelMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 2))
hwPwe3TunnelMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 3))
hwPwe3TunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 3, 1))
hwPwe3TunnelMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 3, 1, 1)).setObjects(("HUAWEI-PWE3-TNL-MIB", "hwPwe3TunnelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPwe3TunnelMIBCompliance = hwPwe3TunnelMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TunnelMIBCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-PWE3-TNL-MIB.')
hwPwe3TunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 3, 2))
hwPwe3TunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 5, 3, 2, 1)).setObjects(("HUAWEI-PWE3-TNL-MIB", "hwPwe3TnlName"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3TnlType"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3TnlSrcAddress"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3TnlDestAddress"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspIndex"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspOutIf"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspOutLabel"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspNextHop"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspFec"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspFecPfxLen"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspIsBackup"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3PwOutLabel"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3IsBalance"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspTunnelId"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3LspSignType"), ("HUAWEI-PWE3-TNL-MIB", "hwPwe3TnlRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPwe3TunnelGroup = hwPwe3TunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwPwe3TunnelGroup.setDescription('The PWE3 tunnel group.')
mibBuilder.exportSymbols("HUAWEI-PWE3-TNL-MIB", hwPwe3PwInlabel=hwPwe3PwInlabel, hwPwe3LspIndex=hwPwe3LspIndex, hwPwe3TunnelMIBCompliances=hwPwe3TunnelMIBCompliances, hwPwe3TunnelMIBObjects=hwPwe3TunnelMIBObjects, hwPwe3TunnelEntry=hwPwe3TunnelEntry, hwPwe3PeerTnlId=hwPwe3PeerTnlId, hwPwe3TunnelMIBConformance=hwPwe3TunnelMIBConformance, hwPwe3TunnelMIBCompliance=hwPwe3TunnelMIBCompliance, hwL2VpnPwe3TnlExt=hwL2VpnPwe3TnlExt, hwPwe3LspOutLabel=hwPwe3LspOutLabel, hwL2Vpn=hwL2Vpn, hwPwVcType=hwPwVcType, hwPwVcId=hwPwVcId, hwPwe3LspIsBackup=hwPwe3LspIsBackup, hwPwe3LspFec=hwPwe3LspFec, hwPwe3TnlName=hwPwe3TnlName, hwPwe3TunnelMIBTraps=hwPwe3TunnelMIBTraps, hwPwe3LspFecPfxLen=hwPwe3LspFecPfxLen, hwPwe3PwOutLabel=hwPwe3PwOutLabel, hwPwe3LspSignType=hwPwe3LspSignType, hwPwe3IsBalance=hwPwe3IsBalance, hwPwe3LspTunnelId=hwPwe3LspTunnelId, hwPwe3LspNextHop=hwPwe3LspNextHop, hwPwe3TunnelGroup=hwPwe3TunnelGroup, hwPwe3TunnelMIBGroups=hwPwe3TunnelMIBGroups, hwPwe3TnlDestAddress=hwPwe3TnlDestAddress, hwPwe3TunnelTable=hwPwe3TunnelTable, hwPwe3LspOutIf=hwPwe3LspOutIf, hwPwe3TnlSrcAddress=hwPwe3TnlSrcAddress, hwPwe3TnlType=hwPwe3TnlType, hwPwe3TnlRowStatus=hwPwe3TnlRowStatus, PYSNMP_MODULE_ID=hwL2VpnPwe3TnlExt)
