#
# PySNMP MIB module CENTILLION-IF-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-IF-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
BitField, MacAddress, EnableIndicator, Boolean, extensions = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "BitField", "MacAddress", "EnableIndicator", "Boolean", "extensions")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, iso, ModuleIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Counter64, Gauge32, TimeTicks, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "iso", "ModuleIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Counter64", "Gauge32", "TimeTicks", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cnIfExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 2))
cnIfExtnTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 2, 1), )
if mibBuilder.loadTexts: cnIfExtnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnTable.setDescription('A list of interface entries. The numebr of entries is given by the value of ifNumber.')
cnIfExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1), ).setIndexNames((0, "CENTILLION-IF-EXTENSIONS-MIB", "cnIfExtnIndex"))
if mibBuilder.loadTexts: cnIfExtnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
cnIfExtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfExtnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnIndex.setDescription('A unique value for each interface corresponding to the ifIndex value for the same interface.')
cnIfExtnCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfExtnCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnCardNumber.setDescription('The card number associated with this particular interface.')
cnIfExtnPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfExtnPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnPortNumber.setDescription('The port number associated with this particular interface.')
cnIfFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableInputFiltersOnly", 1), ("disableAllFilters", 2), ("enableOutputFiltersOnly", 3), ("enableInputAndOutputFilters", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfFilterEnable.setDescription('The state of filtering on this port. The filter port table will become valid when filters are is downloaded to the port via setting the cnIfFilterDownload object. In the high-perfomrance mode, filters will be disable on all ports execpt the management port.')
cnIfFilterDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 5), BitField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfFilterDownload.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfFilterDownload.setDescription('Downloads the filters to the port. Value will always be read as zero.')
cnIfNetbiosNameFilteringState = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 6), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfNetbiosNameFilteringState.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfNetbiosNameFilteringState.setDescription('The state of NetBIOS name filtering on this port. Note that a port with filtering disabled may have a valid NetBIOS name table. The table will become valid when filtering is enabled on the port.')
cnIfNetbiosBcastDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 7), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfNetbiosBcastDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfNetbiosBcastDiscard.setDescription('This indicates whether NetBIOS broadcasts are to be discarded on this interface.')
cnIfNetbiosNameProxyState = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 8), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfNetbiosNameProxyState.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfNetbiosNameProxyState.setDescription('The state of NetBIOS name proxying on this port.')
cnIfForwardingIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfForwardingIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfForwardingIdentifier.setDescription('This object references the correspsonding instance in the MIB object which describes the ports forwarding function. For example, if the port is participating in bridging, then this object contains the OID of the bridgeGroupPortTable. If this information is not present, its value is set to the OBJECT IDENTIFIER { 0 0 }.')
cnIfInNoResources = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfInNoResources.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfInNoResources.setDescription('The number of inbound packet which were dropped by the switch because of lack of certain type of system resource.')
cnIfOutNoResources = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfOutNoResources.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfOutNoResources.setDescription('The number of outbound packet which were dropped by the switch because of lack of certain type of system resource.')
cnIfVlanMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfVlanMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfVlanMismatch.setDescription('The number of packets which were dropped due to the switch not being able to qualify a packet based on the VLAN policies defined. This object is only valid on interfaces that represent LAN physical port.')
cnIfVlanCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfVlanCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfVlanCapabilities.setDescription('This object contains bit mask flags to indicate support for port-based VLAN, 802.1Q Tagging, and protocol-based VLAN on a port. Bit definition: bit 0: port-based VLAN bit 1: 802.1Q Tagging bit 2: protocol-based VLAN bit 3-7:future use.')
cnIfExtnLocalAdminAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 14), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfExtnLocalAdminAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnLocalAdminAddress.setDescription("The interface's locally administed address if applicable. The interface's media-specific MIB must define the bit and byte ordering and format of the value contained by this object. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
cnIfExtnPhyAddressDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useDefaultPhyAddress", 1), ("useLocallyAdministeredAddress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfExtnPhyAddressDefault.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfExtnPhyAddressDefault.setDescription('This object refers to which mac address is being used: the default or locally administered address. The value of useLocallyAdministeredAddress(2) is read-only. Setting this object with useDefaultPhyAddress(1) will have the effect of deleting the locally administered address. It cannot be restored.')
cnIfVlanTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 16), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnIfVlanTrunk.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfVlanTrunk.setDescription('This object controls the VLAN trunk mode for the interface. In trunk mode, the interface accepts both tagged and untagged frames in its default VLAN. Trunk mode is only available for interfaces that support 802.1Q tagging, as indicated by cnIfVlanCapabilities. An interface in trunk mode cannot do protocol-based VLAN classification. The trunk mode cannot be changed while the interface belongs to an MLT group.')
cnIfUsrInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfUsrInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfUsrInDiscards.setDescription('The total number of inbound packets which were dropped by user-defined filters.')
cnIfUsrOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnIfUsrOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cnIfUsrOutDiscards.setDescription('The total number of outbound packets which were dropped by user-defined filters.')
mibBuilder.exportSymbols("CENTILLION-IF-EXTENSIONS-MIB", cnIfExtnCardNumber=cnIfExtnCardNumber, cnIfOutNoResources=cnIfOutNoResources, cnIfExtnPortNumber=cnIfExtnPortNumber, cnIfVlanTrunk=cnIfVlanTrunk, cnIfExtnPhyAddressDefault=cnIfExtnPhyAddressDefault, cnIfUsrInDiscards=cnIfUsrInDiscards, cnIfNetbiosNameProxyState=cnIfNetbiosNameProxyState, cnIfFilterDownload=cnIfFilterDownload, cnIfExtnLocalAdminAddress=cnIfExtnLocalAdminAddress, cnIfExtnTable=cnIfExtnTable, cnIfExtnEntry=cnIfExtnEntry, cnIfUsrOutDiscards=cnIfUsrOutDiscards, cnIfInNoResources=cnIfInNoResources, cnIfNetbiosBcastDiscard=cnIfNetbiosBcastDiscard, cnIfExtnIndex=cnIfExtnIndex, cnIfVlanCapabilities=cnIfVlanCapabilities, cnIfVlanMismatch=cnIfVlanMismatch, cnIfForwardingIdentifier=cnIfForwardingIdentifier, cnIfExtensions=cnIfExtensions, cnIfNetbiosNameFilteringState=cnIfNetbiosNameFilteringState, cnIfFilterEnable=cnIfFilterEnable)
