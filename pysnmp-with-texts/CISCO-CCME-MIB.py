#
# PySNMP MIB module CISCO-CCME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CCME-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Counter32, ModuleIdentity, iso, Counter64, IpAddress, TimeTicks, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Counter32", "ModuleIdentity", "iso", "Counter64", "IpAddress", "TimeTicks", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
ciscoCcmeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 439))
ciscoCcmeMIB.setRevisions(('2010-10-13 00:00', '2010-04-01 00:00', '2005-05-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCcmeMIB.setRevisionsDescriptions(('1. Added ccmeEphonePrimaryDn in ccmeEphoneConfTable. 2. Deprecated ciscoCcmeMIBComplianceRev1 and added ciscoCcmeMIBComplianceRev2 MODULE-COMPLIANCE. 3. Added ccmeActiveStatsGroupEM.', '1. Add ccmeEphonePrimaryDn in ccmeEphoneConfTable. 2. Deprecated ciscoCcmeMIBCompliance and added ciscoCcmeMIBComplianceRev1 MODULE-COMPLIANCE. 3. Added ccmeConfigGroup1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCcmeMIB.setLastUpdated('201010130000Z')
if mibBuilder.loadTexts: ciscoCcmeMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCcmeMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ccme-srst@cisco.com')
if mibBuilder.loadTexts: ciscoCcmeMIB.setDescription('This MIB allows management of Cisco CallManager Express (CCME) feature in Cisco IOS. CCME is optional software feature that enables Cisco routers to deliver Key System or Hybrid PBX functionality for enterprise branch offices or small businesses.')
ciscoCcmeMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 0))
ciscoCcmeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 1))
ciscoCcmeMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 2))
ccmeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1))
ccmeActiveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2))
ccmeHistoryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3))
class CcmeDigitPatternString(TextualConvention, OctetString):
    description = "A E.164 address string limited to the character set '0123456789*#.+ABCDT'. An address of length zero indicates that no address is specified."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), )
class CcmeNightServiceCodeString(TextualConvention, OctetString):
    description = "A code string limited to character set '0123456789*' This code begins with first character as * (asteric) and followed by at least one digit. Example - *9234 Users enters at an IP phone to disable or enable night service."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )
ccmeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeEnabled.setDescription("Indicates whether the Cisco CallManager Express feature is enabled on the device. 'true' means that the CCME feature is enabled on this device. 'false' means that the CCME feature is disabled.")
ccmeVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeVersion.setStatus('current')
if mibBuilder.loadTexts: ccmeVersion.setDescription('The version of Cisco CallManager Express on the device.')
ccmeIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeIPAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmeIPAddressType.setDescription('Address type of ccmeIPAddress. Only IPv4 and IPv6 addresses are expected.')
ccmeIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeIPAddress.setStatus('current')
if mibBuilder.loadTexts: ccmeIPAddress.setDescription('Indicates the IP address through which the IP phones communicate with CCME. The type of this address is determined by the value of the ccmeSysIPAddressType object. This IP address is usually the IP address bound to the Ethernet port on the gateway to which the phones are connected.')
ccmePortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 5), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(2000, 9999)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmePortNumber.setStatus('current')
if mibBuilder.loadTexts: ccmePortNumber.setDescription('This object indicates the TCP port number to use for Skinny Client Control Protocol (SCCP). This port also indicates through which IP phones communicate with this device.')
ccmeMaxEphones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMaxEphones.setStatus('current')
if mibBuilder.loadTexts: ccmeMaxEphones.setDescription('Maximum number of IP phones allowed by the configuration for the Cisco CallManager Express on the device. Maximum permissible range is IOS version and platform dependent. A value of zero indicates no IP phones are permitted to register to this device.')
ccmeMaxDirectoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 288))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMaxDirectoryNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeMaxDirectoryNumber.setDescription('This object indicates the maximum number of IP phones extensions (ephone-dns) or directory numbers supported by this device. Maximum permissible range is IOS version and platform dependent. A value of zero indicates no IP phones extensions could be created.')
ccmeMaxConferences = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMaxConferences.setStatus('current')
if mibBuilder.loadTexts: ccmeMaxConferences.setDescription('Maximum number of simultaneous three-party conferences supported by the Cisco CallManager Express on the device. Range is IOS version and platform dependent. With CCME Version 3.1, the following are the maximum values for each platform - Cisco 1750, Cisco 1751, Cisco 2600, Cisco 3640 - 8 conferences. Cisco 3660, Cisco 3725, Cisco 3745 - 16 conferences. Default is half the maximum number of simultaneous three-party conferences for each platform. A value of zero indicates no three-party conferences allowed on this device.')
ccmeMaxRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMaxRedirect.setStatus('current')
if mibBuilder.loadTexts: ccmeMaxRedirect.setDescription('Indicates the maximum number of times that a call can be redirected by call forwarding or transfer within this device.')
ccmeScriptName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeScriptName.setStatus('current')
if mibBuilder.loadTexts: ccmeScriptName.setDescription('This object indicates the session-level IVR application script in Tool Command Language (TCL) for all extensions (ephone-dns) in CCME system. By default no application script is selected for all extensions and the object length in this case will return a zero length string.')
ccmeVoiceMailNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeVoiceMailNumber.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeVoiceMailNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeVoiceMailNumber.setDescription('This object indicates the E.164 phone number that is associated with a voice-mail (speed-dial) on this device. If voice-mail number is not configured, this object has a length of zero.')
ccmeMwiRelay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiRelay.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiRelay.setDescription('Indicates whether the device can relay message-waiting indication (MWI) notification to remote Cisco IP phones.')
ccmeMwiExpires = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 99999)).clone(86400)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiExpires.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiExpires.setDescription('Expiration time in seconds, for the registration of the message-waiting indication (MWI) client or server. Range is 600 to 99999.')
ccmeTransferSystem = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("blind", 1), ("localConsult", 2), ("fullBlind", 3), ("fullConsult", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeTransferSystem.setStatus('current')
if mibBuilder.loadTexts: ccmeTransferSystem.setDescription("This object indicates the call transfer method for all configured Cisco IP phone extensions, that use the ITU-T H.450.2 standard. Call transfers that use the H.450.2 standard can be 'blind' or 'consultative'. A blind transfer is one in which the transferring extension connects the caller to a destination extension before ringback begins. A consultative transfer is one in which the transferring party either connects the caller to a ringing phone (ringback heard) or speaks with the third party before connecting the caller to the third party. blind - Calls are transferred without consultation using a single phone line and the Cisco proprietary method. localConsult - Calls are transferred with local consultation using the second phone line if available, or the calls fall back to blind for nonlocal consultation or transfer target. This mode is intended for use primarily in voice over Frame Relay networks. fullBlind - Calls are transferred without consultation using H.450.2 standard method. fullConsult - Calls are transferred using H.450.2 with consultation using the second phone line if available, or the calls fall back to fullBlind if the second line is unavailable.")
ccmeTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twelve", 1), ("twentyfour", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeTimeFormat.setStatus('current')
if mibBuilder.loadTexts: ccmeTimeFormat.setDescription('Time display format on Cisco IP phones in a Cisco CallManager Express system. twelve(1) - 12 hour clock. twentyfour(2) - 24 hour clock.')
ccmeDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mmddyy", 1), ("ddmmyy", 2), ("yymmdd", 3), ("yyddmm", 4))).clone('mmddyy')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeDateFormat.setStatus('current')
if mibBuilder.loadTexts: ccmeDateFormat.setDescription('Indicates the date display format on Cisco IP phones in a Cisco CallManager Express system.')
ccmeUrlforServicesBtn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeUrlforServicesBtn.setStatus('current')
if mibBuilder.loadTexts: ccmeUrlforServicesBtn.setDescription("This object indicates the URL information for the 'Services' button on the Cisco IP phone display. The Cisco IP Phone 7940 and Cisco IP phone 7960 can support four URL's in association with the four programmable feature buttons on those IP phones - Directories, Information, Messages and Services. The fifth button, Settings, is managed entirely by the phone. Operation of these services is determined by the Cisco IP phone capabilities and the content of the referenced URL.")
ccmeUrlforDirectoriesBtn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeUrlforDirectoriesBtn.setStatus('current')
if mibBuilder.loadTexts: ccmeUrlforDirectoriesBtn.setDescription("This object indicates the URL information for the 'Directories' button on the Cisco IP phone display. The Cisco IP Phone 7940 and Cisco IP phone 7960 can support four URL's in association with the four programmable feature buttons on those IP phones - Directories, Information, Messages and Services. The fifth button, Settings, is managed entirely by the phone. Operation of these services is determined by the Cisco IP phone capabilities and the content of the referenced URL.")
ccmeMohFlashFile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohFlashFile.setStatus('current')
if mibBuilder.loadTexts: ccmeMohFlashFile.setDescription('This object indicates the name of the audio file to use for the Music on hold (MOH) audio stream. Audio files that are used for MOH exist in the flash file system on the device. A MOH file can be .au or .wav file format. However, the file format must contain 8-bit 8-KHz data in a-law or mu-law. Maximum length of filename is 128 characters long. This object returns a zero length string if the MOH from flash is not configured on this router.')
ccmeMohMulticastFromFlashEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohMulticastFromFlashEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeMohMulticastFromFlashEnabled.setDescription('Indicates whether music-on-hold (MOH) multicast from flash file source is enabled or disabled on this router. If ccmeMohFlashFile is zero length this object has no relevance.')
ccmeMohFlashMulticastIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 66), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohFlashMulticastIPAddrType.setStatus('current')
if mibBuilder.loadTexts: ccmeMohFlashMulticastIPAddrType.setDescription('Address type of ccmeMohFlashMulticastIPAddr. Only IPv4 and IPv6 addresses are expected.')
ccmeMohFlashMulticastIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohFlashMulticastIPAddr.setStatus('current')
if mibBuilder.loadTexts: ccmeMohFlashMulticastIPAddr.setDescription('This object indicates the destination IP address for multicast of the audio stream from Flash file, that is designated for MOH. If ccmeMohFlashFile is zero length this object has no relevance. Cisco IP phones don not support multicast at 224.x.x.x addresses.')
ccmeMohFlashMulticastPortNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 22), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohFlashMulticastPortNum.setStatus('current')
if mibBuilder.loadTexts: ccmeMohFlashMulticastPortNum.setDescription('This object indicates the media port for multicast of the audio stream from Flash file that is designated for MOH. This object has no relevance if ccmeMohMulticastFromFlash object is zero length.')
ccmePhoneFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 23), )
if mibBuilder.loadTexts: ccmePhoneFirmwareTable.setStatus('current')
if mibBuilder.loadTexts: ccmePhoneFirmwareTable.setDescription('A list of firmware load configured for each IP Phone on this device.')
ccmePhoneFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 23, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmePhoneFirmwareIndex"))
if mibBuilder.loadTexts: ccmePhoneFirmwareEntry.setStatus('current')
if mibBuilder.loadTexts: ccmePhoneFirmwareEntry.setDescription('Information on an Cisco IP phone type and its configured firmware load. There is an entry in this table for each IP Phone type firmware that is configured on this device.')
ccmePhoneFirmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: ccmePhoneFirmwareIndex.setStatus('current')
if mibBuilder.loadTexts: ccmePhoneFirmwareIndex.setDescription('An arbitrary and unique index for this CcmePhoneFirmwareEntry.')
ccmePhoneType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 23, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmePhoneType.setStatus('current')
if mibBuilder.loadTexts: ccmePhoneType.setDescription('Type or model of Cisco IP phone. Cisco IP Phone types are 7902, 7905, 7910, 7912, 7914, 7920, 7935, 7936, 7940, 7960, ATA-186, ATA-188')
ccmePhoneFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 23, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmePhoneFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: ccmePhoneFirmwareRev.setDescription('The vendor-specific firmware revision string configured for the Cisco IP phone on this device.')
ccmeTransferPatternTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 24), )
if mibBuilder.loadTexts: ccmeTransferPatternTable.setStatus('current')
if mibBuilder.loadTexts: ccmeTransferPatternTable.setDescription('A list of transfer patterns configured on this device.')
ccmeTransferPatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 24, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeTransferPatternIndex"))
if mibBuilder.loadTexts: ccmeTransferPatternEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeTransferPatternEntry.setDescription('Information on a transfer pattern configured. There is an entry in this table for each transfer pattern that is configured on this device.')
ccmeTransferPatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: ccmeTransferPatternIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeTransferPatternIndex.setDescription('An arbitrary and unique index for this CcmeTransferPatternEntry.')
ccmeTransferPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 24, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeTransferPattern.setStatus('current')
if mibBuilder.loadTexts: ccmeTransferPattern.setDescription('String of digits for permitted call transfers.')
ccmeTransferPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blind", 1), ("h4502", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeTransferPatternType.setStatus('current')
if mibBuilder.loadTexts: ccmeTransferPatternType.setDescription("Indicates the pattern for call transfer. 'blind(1)' indicates blind transfer pattern. 'h4502(2)' indicates H.450.2 consultative call transfer.")
ccmeWebGUIEditEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeWebGUIEditEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeWebGUIEditEnabled.setDescription('Indicates Cisco CallManager Express web-based Graphical User Interface (GUI) is allowed to add extensions (ephone-dns).')
ccmeWebGUITimeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeWebGUITimeEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeWebGUITimeEnabled.setDescription('Indicates Cisco CallManager Express web-based Graphical User Interface (GUI) is allowed to change or set time on this device.')
ccmeAfterHrsBlockPatternTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 27), )
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternTable.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternTable.setDescription('A list of after hour block patterns configured on this device.')
ccmeAfterHrsBlockPatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 27, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeAfterHrsBlockPatternTag"))
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternEntry.setDescription('Information about a configured after hours block pattern. There is an entry in this table for each after hours block that is configured on this device.')
ccmeAfterHrsBlockPatternTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternTag.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternTag.setDescription('An unique identifier tag configured for a pattern.')
ccmeAfterHrsBlockPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 27, 1, 2), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockPattern.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockPattern.setDescription('Indicates the configured string of outgoing call digits that will be matched for blocking call at specified after hours. Example - 9011')
ccmeAfterHrsBlockPatternAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 27, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternAllTime.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockPatternAllTime.setDescription("Indicates whether after hours block pattern is applicable all time. 'true' means ccmeAfterHrsBlockPattern pattern will always be applied, 7 days a week, 24 hours a day. 'false' means ccmeAfterHrsBlockPattern pattern will be blocked during the days and dates defined by ccmeAfterHrsBlockDateTable and ccmeAfterHrsBlockDayTable objects.")
ccmeAfterHrsBlockDateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28), )
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateTable.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateTable.setDescription('A list of recurring time period based on date during which outgoing calls that match defined block patterns are blocked on IP phones.')
ccmeAfterHrsBlockDateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeAfterHrsBlockDateIndex"))
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateEntry.setDescription('Information on a configured after hour block pattern date. There is an entry in this table for each entry that is configured on this device. An entry is deleted from this table once an after hour block configuration is removed from this device.')
ccmeAfterHrsBlockDateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateIndex.setDescription('An arbitrary and unique index for this CcmeAfterHrsBlockDateEntry.')
ccmeAfterHrsBlockDateMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateMonth.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateMonth.setDescription("Indicates the month of the year during which the 'after hours block' service is active.")
ccmeAfterHrsBlockDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDate.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDate.setDescription("Indicates the day of the month during which the 'after hours block' service is activated.")
ccmeAfterHrsBlockDateStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStartHour.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStartHour.setDescription("Indicates the hour of the day during which the 'after hours block' service is activated.")
ccmeAfterHrsBlockDateStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStartMin.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStartMin.setDescription("Indicates the minute in the ccmeAfterHrsBlockDateStartHour from which the 'after hours block' service is activated.")
ccmeAfterHrsBlockDateStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStopHour.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStopHour.setDescription("Indicates the hour of the day during which during which the 'after hours block' service is deactivated.")
ccmeAfterHrsBlockDateStopMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStopMin.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDateStopMin.setDescription("Indicates the minute in the ccmeAfterHrsBlockDateStopHour after which the 'after hours block' service is deactivated.")
ccmeAfterHrsBlockDayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29), )
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayTable.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayTable.setDescription('A list of recurring time period based on day of week during which outgoing calls that match defined block patterns are blocked on IP phones.')
ccmeAfterHrsBlockDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeAfterHrsBlockDayIndex"))
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayEntry.setDescription("Information on a configured after hour block pattern day. There is an entry in this table for each entry that is configured on this device. An entry is deleted from this table once an 'after hour block' day configuration is removed from this device.")
ccmeAfterHrsBlockDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayIndex.setDescription('An arbitrary and unique index for this CcmeAfterHrsBlockDayEntry.')
ccmeAfterHrsBlockDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDay.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDay.setDescription("Indicates the day of the week during which the 'after hours block' service is active.")
ccmeAfterHrsBlockDayStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStartHour.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStartHour.setDescription("Indicates the hour of the day during which the 'after hours block' service is activated.")
ccmeAfterHrsBlockDayStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStartMin.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStartMin.setDescription("Indicates the minute in the ccmeAfterHrsBlockDayStartHour from which the 'after hours block' service is activated.")
ccmeAfterHrsBlockDayStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStopHour.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStopHour.setDescription("Indicates the hour of the day during which during which the 'after hours block' service is deactivated.")
ccmeAfterHrsBlockDayStopMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStopMin.setStatus('current')
if mibBuilder.loadTexts: ccmeAfterHrsBlockDayStopMin.setDescription("Indicates the minute in the ccmeAfterHrsBlockDayStopHour after which the 'after hours block' service is deactivated.")
ccmeNightServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 30), CcmeNightServiceCodeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceCode.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceCode.setDescription("Indicates the configured night service code that disables or enables night service on IP phones. The code is the digit code that a user enters at an IP phone to disable or enable night service. The code begins with '*' (asterisk).")
ccmeNightServiceDateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31), )
if mibBuilder.loadTexts: ccmeNightServiceDateTable.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateTable.setDescription('A list of recurring time period based on date of month during which night service is active.')
ccmeNightServiceDateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeNightServiceDateIndex"))
if mibBuilder.loadTexts: ccmeNightServiceDateEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateEntry.setDescription('Information on a configured night service date pattern. There is an entry in this table for each entry that is configured on this device. An entry is deleted from this table once a night service configuration is removed from this device.')
ccmeNightServiceDateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: ccmeNightServiceDateIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateIndex.setDescription('An arbitrary and unique index for this CcmeNightServiceDateEntry.')
ccmeNightServiceDateMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDateMonth.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateMonth.setDescription('Indicates the month of the year during which the night service is active.')
ccmeNightServiceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDate.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDate.setDescription('Indicates the day of the month during which the night service is activated.')
ccmeNightServiceDateStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDateStartHour.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateStartHour.setDescription('Indicates the hour of the date during which the night service is activated.')
ccmeNightServiceDateStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDateStartMin.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateStartMin.setDescription('Indicates the minute in the ccmeNightServiceDateStartHour during which the night service is activated.')
ccmeNightServiceDateStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDateStopHour.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateStopHour.setDescription('Indicates the hour of the date during which during which the night service is deactivated.')
ccmeNightServiceDateStopMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDateStopMin.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDateStopMin.setDescription('Indicates the minute in the ccmeNightServiceDateStopHour during which the night service is deactivated.')
ccmeNightServiceDayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32), )
if mibBuilder.loadTexts: ccmeNightServiceDayTable.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayTable.setDescription('A list of recurring time period associated with a day of the week during which night service is active.')
ccmeNightServiceDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeNightServiceDayIndex"))
if mibBuilder.loadTexts: ccmeNightServiceDayEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayEntry.setDescription('Information on a configured night service day pattern. There is an entry in this table for each entry that is configured on this device. An entry is deleted from this table once a night service configuration is removed from this device.')
ccmeNightServiceDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: ccmeNightServiceDayIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayIndex.setDescription('An arbitrary and unique index for this CcmeNightServiceDayEntry.')
ccmeNightServiceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDay.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDay.setDescription('Indicates the day of the week during which the night service is active.')
ccmeNightServiceDayStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDayStartHour.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayStartHour.setDescription('Indicates the hour of the day during which the night service is activated.')
ccmeNightServiceDayStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDayStartMin.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayStartMin.setDescription('Indicates the minute in the ccmeNightServiceDayStartHour during which the night service is activated.')
ccmeNightServiceDayStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDayStopHour.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayStopHour.setDescription('Indicates the hour of the day during which during which the night service is deactivated.')
ccmeNightServiceDayStopMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceDayStopMin.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceDayStopMin.setDescription('Indicates the minute in the ccmeNightServiceDayStopHour during which the night service is deactivated.')
ccmeFXOHookFlashEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeFXOHookFlashEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeFXOHookFlashEnabled.setDescription("Indicates whether Flash soft key display on IP Phone is enabled. Flash softkey is provided Cisco IP phones 7940 and 7960 users on Foreign Exchange Office (FXO) lines attached to the Cisco CallManager Express system. 'true' means Flash soft key display on IP Phones is enabled. 'false' means that the Flash soft key on IP phones is not displayed in a Cisco CallManager Express system.")
ccmeSecondaryDialTonePrefix = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 34), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeSecondaryDialTonePrefix.setStatus('current')
if mibBuilder.loadTexts: ccmeSecondaryDialTonePrefix.setDescription('Indicates secondary dial tone access prefix digit string. If secondary dial tone is not configured on this device, in such case the object returns a zero length string. Example - 9.')
ccmeWebAdminSystemUser = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 35), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeWebAdminSystemUser.setStatus('current')
if mibBuilder.loadTexts: ccmeWebAdminSystemUser.setDescription('Indicates login username for a Cisco CallManager Express system administrator.')
ccmeWebAdminCustomerUser = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeWebAdminCustomerUser.setStatus('current')
if mibBuilder.loadTexts: ccmeWebAdminCustomerUser.setDescription('Indicates login username for a Cisco CallManager Express customer administrator.')
ccmeSystemMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 37), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeSystemMessage.setStatus('current')
if mibBuilder.loadTexts: ccmeSystemMessage.setDescription("Indicates the configured text system message for display on idle Cisco IP phone 7940's and 7960's in a Cisco CallManager Express system. The text message is Alpha numeric string of up to 32 characters to disply when the phone is idle.")
ccmeDialplanPatternTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38), )
if mibBuilder.loadTexts: ccmeDialplanPatternTable.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanPatternTable.setDescription('A list of Dialplan patterns configured on this device.')
ccmeDialplanPatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeDialplanPatternIndex"))
if mibBuilder.loadTexts: ccmeDialplanPatternEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanPatternEntry.setDescription('Information on a dialplan pattern configured. There is an entry in this table for each Dialplan Pattern that is configured on this device.')
ccmeDialplanPatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ccmeDialplanPatternIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanPatternIndex.setDescription('An arbitrary and unique index for this ccmeDialplanPatternTable.')
ccmeDialplanPatternTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeDialplanPatternTag.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanPatternTag.setDescription('Indicates the number that identifies the dial-plan pattern.')
ccmeDialplanExtLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeDialplanExtLength.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanExtLength.setDescription('Indicates length of digit extension for Dial plan pattern extension.')
ccmeDialplanPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1, 4), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeDialplanPattern.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanPattern.setDescription('Indicates string of digits forming a dial-plan pattern, such as the area code, the prefix, and the first one or two digits of the extension number, plus wild card markers or dots (.) for the remainder of the extension number digits. Example - 40854.....')
ccmeDialplanExtPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1, 5), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeDialplanExtPattern.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanExtPattern.setDescription('Indicates string of digits forming the extension number leading digit pattern that are used when the leading digits of the extension number are different from the E.164 telephone number leading digits defined by the ccmeDialplanPattern object.')
ccmeDialplanAllowRegiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 38, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeDialplanAllowRegiEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeDialplanAllowRegiEnabled.setDescription("Indicates whether the E.164 number in the dial peer is allowed to register with the gatekeeper. 'true' means that the registration is allowed. 'false' means that the registration is disabled.")
ccmeKeepAliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeKeepAliveTimeout.setStatus('current')
if mibBuilder.loadTexts: ccmeKeepAliveTimeout.setDescription('Indicates the length of time interval between successive keepalive messages from this device to IP phones.')
ccmeInterDigitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120)).clone(10)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeInterDigitTimeout.setStatus('current')
if mibBuilder.loadTexts: ccmeInterDigitTimeout.setDescription('Indicates the length of time interval for interdigit timeout for Cisco IP phones.')
ccmeBusyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(10)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeBusyTimeout.setStatus('current')
if mibBuilder.loadTexts: ccmeBusyTimeout.setDescription('Indicates amount of wait time after which the call is disconnected from a busy signal.')
ccmeAlertTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(180)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: ccmeAlertTimeout.setDescription('Indicates the length of time interval for which Cisco CallManager Express allows the IP phone to alert (ring) if a call is not answered.')
ccmeEphoneConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43), )
if mibBuilder.loadTexts: ccmeEphoneConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneConfTable.setDescription('A list of IP phones (Ephones or EthernetPhones) configured on this device.')
ccmeEphoneConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneTag"))
if mibBuilder.loadTexts: ccmeEphoneConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneConfEntry.setDescription('Information about a configured IP phone. There is an entry in this table for each IP Phone that is configured on this device. An entry is deleted in this table once an IP Phone configuration is removed from this device.')
ccmeEphoneTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)))
if mibBuilder.loadTexts: ccmeEphoneTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTag.setDescription('An number that uniquely identifies a IP phone configured on the device. The maximum number of Ephone entries varies among Cisco IOS platforms and may be less than 120.')
ccmeEphoneIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneIpAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneIpAddressType.setDescription('Address type of ccmeEphoneIpAddress. Only IPv4 and IPv6 addresses are expected.')
ccmeEphoneIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneIpAddress.setDescription('Indicates the designated IP address to this Cisco IP phone (Ephone) configured on this device.')
ccmeEphoneMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneMacAddress.setDescription('The MAC address of a Cisco IP phone.')
ccmeEphoneModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneModel.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneModel.setDescription('Type and model of Cisco IP phone.')
ccmeEphoneUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneUsername.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneUsername.setDescription("Indicates the username of the local Cisco IP phone user. Default is 'Admin'. The login account allows a phone user to access a web-based GUI to view information and change some personal settings for the phone user's own phone only. A login account is also required for users of Telephony Application Programming Interface (TAPI) aware PC applications, which can register with this device and exercise remote-control operations of Cisco IP phones.")
ccmeEphoneKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneKeepAlive.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneKeepAlive.setDescription('Indicates the time interval between successive keepalive messages from this device to this particular IP phone. If the router fails to receive three successive keepalive messages, it considers the phone to be out of service until the phone re-registers.')
ccmeEphoneAutoLineOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneAutoLineOut.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneAutoLineOut.setDescription('Indicates the line (Ephone-DN) that will be selected for out going calls when this Cisco IP phone goes off-hook.')
ccmeEphonePagingDn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphonePagingDn.setStatus('current')
if mibBuilder.loadTexts: ccmeEphonePagingDn.setDescription('Indicates the audio paging DN group configured for this Cisco IP phone.')
ccmeEphoneAddon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneAddon.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneAddon.setDescription('Indicates the number of add on modules (Cisco IP phone 7914) that are attached to this phone.')
ccmeEphoneTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTemplate.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTemplate.setDescription('Indicates the Ephone template tag associated with this IP phone.')
ccmeEphonePagingPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphonePagingPolicy.setStatus('current')
if mibBuilder.loadTexts: ccmeEphonePagingPolicy.setDescription('Indicates paging mechanism associated with this Cisco IP phone. unicast(1) - Indicates the Cisco IP phone is not capable of receiving audio paging through multicast and requests that all pages to this phone be sent through unicast. multicast(2) - Audio paging is transmitted to the Cisco IP phone using multicast.')
ccmeEphoneKeyPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneKeyPhone.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneKeyPhone.setDescription("Indicates whether the phone is marked as 'Key' IP phone. 'true' indicates IP phone is configured as Key IP phone. 'false' indicates IP phone is not configured as key IP phone.")
ccmeEphoneAutoLineInEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneAutoLineInEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneAutoLineInEnabled.setDescription("Indicates automatic line (Ephone-Dn) selection for incoming call is available. 'true' indicates automatic line selection for incoming calls is enabled. 'false' indicates auto-line selection for incoming calls on this Cisco IP phone is disabled.")
ccmeEphoneAftHrsBlkExmptEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneAftHrsBlkExmptEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneAftHrsBlkExmptEnabled.setDescription("Indicates whether this Cisco IP phone is exempt from after-hours blocking. 'true' indicates this Cisco IP phone is exempt from after-hour blocking. 'false' indicates is this Cisco IP phone is included in after-hour blocking.")
ccmeEphoneNightBellSvcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneNightBellSvcEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneNightBellSvcEnabled.setDescription("Indicates night-bell service is available on this Cisco IP Phone. 'true' indicates night-bell service is enabled for this IP phone. 'false' indicates night-bell service is disabled.")
ccmeEphoneKeepConfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneKeepConfEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneKeepConfEnabled.setDescription("Indicates whether the call would be disconnected when conference initiator hangs-up. 'true' - Indicates not to disconnect conference when conference initiator hangs-up. Connect remaining parties together directly using call transfer. 'false' - Disconnect conference when initiator hangs-up.")
ccmeEphonePrimaryDn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphonePrimaryDn.setStatus('current')
if mibBuilder.loadTexts: ccmeEphonePrimaryDn.setDescription('This object indicates the primary extension DN (Ephone-Dn) for this Cisco IP phone. Zero value indicates no primary extension DN is set for this IP phone')
ccmeEMUserProfileTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMUserProfileTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEMUserProfileTag.setDescription('This object indicates the user profile tag for this Cisco Extension Mobility IP phone. Zero value indicates no user logs into this phone.')
ccmeEMLogOutProfileTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 43, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMLogOutProfileTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEMLogOutProfileTag.setDescription('This object indicates the logout profile tag configured for this Cisco Extension Mobility IP phone. Zero value indicates this phone is not an Extension Mobility phone.')
ccmeEphoneSpeedDialConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 44), )
if mibBuilder.loadTexts: ccmeEphoneSpeedDialConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialConfTable.setDescription('Information about configured speed dial entries for all IP phones.')
ccmeEphoneSpeedDialConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 44, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneTag"), (0, "CISCO-CCME-MIB", "ccmeEphoneSpeedDialTableIndex"))
if mibBuilder.loadTexts: ccmeEphoneSpeedDialConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialConfEntry.setDescription('Information about all configured speed dial entries for an IP phone. There is an entry created for each Speed Dial configured on this device. An entry is deleted from this table when the speed dial configuration is removed.')
ccmeEphoneSpeedDialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 34)))
if mibBuilder.loadTexts: ccmeEphoneSpeedDialTableIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialTableIndex.setDescription('An arbitrary and unique index for this CcmeEphoneSpeedDialConfEntry.')
ccmeEphoneSpeedDialTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 44, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneSpeedDialTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialTag.setDescription('An unique identifier tag configured for a speed-dial entry.')
ccmeEphoneSpeedDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 44, 1, 3), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneSpeedDialNumber.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialNumber.setDescription('This object indicates the configured speed dial E.164 phone extension number that is associated with a line (ephone-dn) on this Cisco IP phone.')
ccmeEphoneSpeedDialLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 44, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneSpeedDialLabel.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneSpeedDialLabel.setDescription('Indicates the text to be displayed next to the speed-dial button on Cisco IP Phone.')
ccmeEphoneFastDialConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 45), )
if mibBuilder.loadTexts: ccmeEphoneFastDialConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneFastDialConfTable.setDescription('Information about configured fast dial entries for all IP phones.')
ccmeEphoneFastDialConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 45, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneTag"), (0, "CISCO-CCME-MIB", "ccmeEphoneFastDialTableIndex"))
if mibBuilder.loadTexts: ccmeEphoneFastDialConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneFastDialConfEntry.setDescription('Information about all configured fast dial entries for an IP phone. There is an entry created in this table for each Fast dial configured on this device. An entry is deleted from this table when Fast dial configuration is removed from this device.')
ccmeEphoneFastDialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ccmeEphoneFastDialTableIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneFastDialTableIndex.setDescription('An arbitrary and unique index for this CcmeEphoneFastDialConfEntry.')
ccmeEphoneFastDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 45, 1, 2), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneFastDialNumber.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneFastDialNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneFastDialNumber.setDescription('This object indicates the configured fast dial E.164 phone extension number that is associated with this Cisco IP phone. No primary number is associated as a default.')
ccmeEphoneFastDialName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 45, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneFastDialName.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneFastDialName.setDescription('This object indicates the configured name associated with this fast dial E.164 phone extension number that is associated with this Cisco IP phone. When no name is associated, in that case this object will return a string length of zero.')
ccmeEphoneBtnDNAssocConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 46), )
if mibBuilder.loadTexts: ccmeEphoneBtnDNAssocConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneBtnDNAssocConfTable.setDescription('Information about all configured DN and button association for all IP phones.')
ccmeEphoneBtnDNAssocConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 46, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneTag"), (0, "CISCO-CCME-MIB", "ccmeEphoneButtonNumber"))
if mibBuilder.loadTexts: ccmeEphoneBtnDNAssocConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneBtnDNAssocConfEntry.setDescription('Information about a configured DN and button association entries for an IP phone. There is an entry in this table for each DN and button association that is configured on this device. An entry is deleted once the configuration is deleted from this device.')
ccmeEphoneButtonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ccmeEphoneButtonNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneButtonNumber.setDescription('The button number of an IP phone.')
ccmeEphoneOverlayDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 46, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneOverlayDN.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneOverlayDN.setDescription("This object indicates the overlay DN's configured for this button on this IP phone.")
ccmeEphoneDnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47), )
if mibBuilder.loadTexts: ccmeEphoneDnConfigTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnConfigTable.setDescription("A list of configured Ephone-DN's (Directory Number or extensions) for Cisco IP phone lines on this device.")
ccmeEphoneDnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneDnTag"))
if mibBuilder.loadTexts: ccmeEphoneDnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnConfigEntry.setDescription('Information about each configured extension/DN. There is an entry in this table for each Ephone DN configured on this device. In SRST (Survivable Remote Site Telephone) mode, an entry is created for each Ephone-DN automatically generated. An entry is deleted from this table if the Ephone-DN is un-configured on this device.')
ccmeEphoneDnTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 288)))
if mibBuilder.loadTexts: ccmeEphoneDnTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnTag.setDescription('A unique sequence number that indicates an Cisco IP phone extension (ephone-dn) configured on this device.')
ccmeEphoneDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("extension", 1), ("intercom", 2), ("paging", 3), ("moh", 4), ("mwi", 5), ("parkslot", 6), ("loopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnType.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnType.setDescription('Extension type of the line. extension(1) - Cisco IP Phone line. intercom(2) - Part of pair of intercom line. paging(3) - type to receive audio pages. moh(4) - type to address MoH. mwi(5) - type to address MWI. parkslot(6) - type to address call park slot. loopback(7) - loopback directory number.')
ccmeEphoneDnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnMode.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnMode.setDescription('Mode of the line. single(1) - Single line mode. dual(2) - Dual line mode, that has one virtual voice port and two channels to handle two independent calls. This capacity allows call waiting, call transfer and conference functions within a single line (ephone-dn).')
ccmeEphoneDnPriNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnPriNum.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneDnPriNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnPriNum.setDescription('Indicates the primary E.164 phone extension number that is associated with a line (ephone-dn) on this device. No primary number is associated as a default.')
ccmeEphoneDnSecNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnSecNum.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneDnSecNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnSecNum.setDescription('Indicates the second E.164 phone extension number that is associated with a line (ephone-dn) on this device.')
ccmeEphoneDnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnName.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnName.setDescription('Indicates the name of the person associated with this extension (ephone-dn). If no specific name of person is associated with the IP phone, then this object will contain a zero-length string.')
ccmeEphoneDnLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnLabel.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnLabel.setDescription('Indicates the text string that is displayed on the Cisco IP phone console instead of the extension phone number.')
ccmeEphoneDnPriPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnPriPref.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnPriPref.setDescription('This object shows the preference for the primary number associated with an extension. Range is from 0 to 10, where 0 is highest and 10 is lowest.')
ccmeEphoneDnSecPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnSecPref.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnSecPref.setDescription('This object shows the preference for the secondary number associated with an extension. Range is from 0 to 10, where 0 is highest and 10 is lowest.')
ccmeEphoneDnCFBusyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnCFBusyNum.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneDnCFBusyNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnCFBusyNum.setDescription('This object indicates the E.164 phone number to which calls are forwarded for all the incoming calls to busy extension. If no specific call forwarding phone number is associated with the IP phone, then this object will contain a zero-length string.')
ccmeEphoneDnCFAllNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnCFAllNum.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneDnCFAllNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnCFAllNum.setDescription('Indicates the E.164 phone number to which calls are forwarded for all the incoming calls to an extension (ephone-dn). If no specific call forwarding all phone number is associated with the IP phone, then this object will contain a zero-length string.')
ccmeEphoneDnCFNoAnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnCFNoAnNum.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: ccmeEphoneDnCFNoAnNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnCFNoAnNum.setDescription('Indicates the E.164 phone number to which calls are forwarded for all the incoming calls to an extension (ephone-dn) that does not answer. If no specific call forwarding number when extension does not answer is associated, then this object will contain a zero-length string.')
ccmeEphoneDnCFNoAnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60000))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnCFNoAnTo.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnCFNoAnTo.setDescription('Indicates the duration that a call can ring with no answer before the call is forwarded to another extension/line/DN.')
ccmeEphoneDnMwiCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mwiOn", 1), ("mwiOff", 2), ("mwiOnoff", 3), ("mwiDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnMwiCapability.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnMwiCapability.setDescription('Indicates the capability of an extension (ephone-dn) to process message-waiting indication (MWI) notification from an external voice-messaging systems. mwiOn - Extension can process MWI ON notifications using either the main or secondary phone number. mwiOff - Extension can process MWI OFF notifications using either the main or secondary phone number. mwiOnOff - Extension can process both MWI ON and OFF notifications using either the main or secondary phone number. mwiDisabled - MWI notifications are disabled on an extension.')
ccmeEphoneDnHuntstop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnHuntstop.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnHuntstop.setDescription("Indicates the call hunting behavior for an extension (ephone-dn). If the value of this object is 'true', an incoming call does not roll over (hunt) to another ephone-dn if the called ephone-dn is busy or does not answer and a hunting strategy has been established that includes this ephone-dn.")
ccmeEphoneDnHuntstopCh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnHuntstopCh.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnHuntstopCh.setDescription('Indicates the call hunting behavior for an extension (ephone-dn) channel. If this object is enabled on dual-line extensions, an incoming call does not roll over (hunt) to another channel if the first channel is busy or does not answer on this ephone-dn.')
ccmeEphoneDnHoldAltTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnHoldAltTo.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnHoldAltTo.setDescription('Indicates time out for repeating audible alert notification when a call is on hold on a Cisco IP phone. Range is 15 to 300. By default hold alert feature is disabled. In such case, this object will return a zero value.')
ccmeEphoneDnHoldAltType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("originator", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnHoldAltType.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnHoldAltType.setDescription('Indicates when hold alert audible notification will be repeated on a Cisco IP phone. idle(1) - Alerts only when the Cisco IP phone is idle. originator(2) - Alerts when the Cisco IP phone is idle or busy. shared(3) - Alerts only when the Cisco IP phone is idle but alerts all phones that share the line.')
ccmeEphoneDnMwiSipSubscrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnMwiSipSubscrEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnMwiSipSubscrEnabled.setDescription("Indicates whether this extension (DN) in a Cisco CallManager Express system is subscribed to a SIP-based MWI server. 'true' indicates this extension can receive MWI from SIP-based MWI server. 'false' indicates extension is not subscribed to receive MWI.")
ccmeEphoneDnScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 47, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnScriptName.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnScriptName.setDescription('Indicates the session-level IVR application script in Tool Command Language (TCL) for this extension (ephone-dn) in CCME system. By default no application script is selected for an extension and the object length in this case will return a string of zero length.')
ccmeNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 48), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmeNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: ccmeNotificationEnable.setDescription("This variable indicates whether the system produces the Cisco CallManager Express notifications. When this variable is 'true', generation of CCME notifications are enabled. When this variable is 'false', generation of CCME notifications is disabled.")
ccmeSysTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeSysTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: ccmeSysTrapSeverity.setDescription("The internally-defined severity of the particular alarm condition, associated with the most recent notification. A subsequent event in which the alarm condition changes from its failed state back to a 'normal' state has a severity of 'clear'.")
ccmeSysNotificationReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 50), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeSysNotificationReason.setStatus('current')
if mibBuilder.loadTexts: ccmeSysNotificationReason.setDescription('The internally-defined failure cause of the particular alarm condition, associated with the most recent trap.')
ccmeEphoneUnRegThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmeEphoneUnRegThreshold.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneUnRegThreshold.setDescription('This variable sets the threshold to limit the unregistration trap notification.')
ccmeEphoneTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 52), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTrapReason.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTrapReason.setDescription('The internally-defined failure cause of the particular alarm condition, associated with the most recent Ephone trap.')
ccmeUserAutoLogoutTo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeUserAutoLogoutTo.setStatus('current')
if mibBuilder.loadTexts: ccmeUserAutoLogoutTo.setDescription('Indicates the length of time before the users of IP phones in a Cisco CallManager Express system are automatically logged out.')
ccmeUserLoginDeactivateTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 54), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeUserLoginDeactivateTime.setStatus('current')
if mibBuilder.loadTexts: ccmeUserLoginDeactivateTime.setDescription('Indicates the specified time of day when user logins for all IP phones are deactivated.')
ccmeMwiSipServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 55), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiSipServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiSipServerIpAddress.setDescription('Indicates the designated IP address to an external SIP based message-waiting indication (MWI) server. The type of this address is determined by the value of the ccmeSysIPAddressType object.')
ccmeMwiSipServerTransportType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiSipServerTransportType.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiSipServerTransportType.setDescription('Indicates the transport layer protocol used to connect external SIP-based message-waiting indication (MWI) server. tcp(1) - TCP as transport layer protocol. udp(2) - UDP as transport layer protocol.')
ccmeMwiSipServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 57), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(2000, 9999)).clone(5060)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiSipServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiSipServerPortNumber.setDescription('Indicates the port number for the message-waiting indication (MWI) server.')
ccmeMwiSipServerRegE164Enabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiSipServerRegE164Enabled.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiSipServerRegE164Enabled.setDescription("Indicates whether E.164 number is registered with SIP proxy or Registrar rather than an extension number. 'true' indicates E.164 is registered. 'false' indicates extension number is registered.")
ccmeMwiSipSvrUnsolicitedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 59), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMwiSipSvrUnsolicitedEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeMwiSipSvrUnsolicitedEnabled.setDescription("Indicates whether SIP NOTIFY for MWI is sent without a SUBSCRIBE from the Cisco CallManager Express. 'true' indicates SIP NOTIFY is sent without SIP SUBSCRIBE. 'false' indicates solicited NOTIFY is sent.")
ccmeCorConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60), )
if mibBuilder.loadTexts: ccmeCorConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeCorConfTable.setDescription('A list of Class of Restriction (COR) configured on this device.')
ccmeCorConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeCorTableIndex"))
if mibBuilder.loadTexts: ccmeCorConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeCorConfEntry.setDescription('Information about a Class of restriction (COR) configured entry. There is an entry for each COR configured on this device. An entry is deleted if the COR is removed from configuration.')
ccmeCorTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ccmeCorTableIndex.setStatus('current')
if mibBuilder.loadTexts: ccmeCorTableIndex.setDescription('An arbitrary and unique index for this CcmeCorConfEntry.')
ccmeCorTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorTag.setStatus('current')
if mibBuilder.loadTexts: ccmeCorTag.setDescription("Indicates the tag number. If ccmeEnabled object is 'true' for Cisco CallManager Express Mode then this object indicates the ephone-dn tag under which the COR was configured. If csrstEnabled object is 'true' for Cisco Survivable Remote Site Telephony (SRST) mode, then this object indicates the COR list identifier configured under SRST configuration or Voice Registrar configuration.")
ccmeCorListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorListName.setStatus('current')
if mibBuilder.loadTexts: ccmeCorListName.setDescription('Indicates the COR list name configured on this device.')
ccmeCorScope = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ccme", 1), ("srstSccp", 2), ("srstSip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorScope.setStatus('current')
if mibBuilder.loadTexts: ccmeCorScope.setDescription('Indicates the scope of this COR list for a list of associated dial-peers. ccme(1) - indicates this COR is applicable to the dial-peer associated with ciscoCorTag Ephone-DN object. srstSccp(2) - indicates this COR is applicable to all the dynamically created dial-peers under SCCP SRST mode. srstSip(3) - indicates this COR is applicable to all the SIP SRST dial-peers that belong to a specified voice registrar pool indicated by ciscoCorVoiceRegPoolNumber object.')
ccmeCorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorDirection.setStatus('current')
if mibBuilder.loadTexts: ccmeCorDirection.setDescription('Indicates whether the COR will be used by incoming or outgoing dial peers.')
ccmeCorStartingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorStartingNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeCorStartingNumber.setDescription('Indicates the starting number of a range of directory numbers for a COR list configured on this device.')
ccmeCorEndingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorEndingNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeCorEndingNumber.setDescription('Indicates the ending number of a range of directory numbers for a COR list configured on this device.')
ccmeCorVoiceRegPoolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorVoiceRegPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeCorVoiceRegPoolNumber.setDescription('Indicates the voice registrar pool number under which this COR list is applied.')
ccmeCorListDefaultEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 60, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeCorListDefaultEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeCorListDefaultEnabled.setDescription("Indicates whether the default COR list is enabled or disabled for this COR entry. 'true' indicates this COR list assumes behavior of a pre-defined default COR list. 'false' indicates default COR list is not applied.")
ccmeLoopbackDnConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61), )
if mibBuilder.loadTexts: ccmeLoopbackDnConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnConfTable.setDescription("A list of loopback DN's (lines) configured on this device.")
ccmeLoopbackDnConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeLoopbackDnTag"))
if mibBuilder.loadTexts: ccmeLoopbackDnConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnConfEntry.setDescription('Information about a loopback DN configured on this device. There is an entry created for each loopback DN configured on this device. An entry is deleted if the loopback DN is removed from this device configuration.')
ccmeLoopbackDnTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ccmeLoopbackDnTag.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnTag.setDescription('A unique sequence number that identifies the ephone-dn loopback pairs in this device.')
ccmeLoopbackDnforward = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnforward.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnforward.setDescription('Indicates the number of digits in the original called number that will be forwarded to the other phone-dn in the loopback-dn pair.')
ccmeLoopbackDnStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnStrip.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnStrip.setDescription('Indicates the number of leading digits that will be stripped from the original called number that will be forwarded to the other phone-dn in the loopback-dn pair.')
ccmeLoopbackDnPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnPrefix.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnPrefix.setDescription('Indicates the string of digits that will be added in the front of the forwarded called number.')
ccmeLoopbackDnSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnSuffix.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnSuffix.setDescription('Indicates the string of digits that will be added in the end of the forwarded called number.')
ccmeLoopbackDnRetryTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnRetryTo.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnRetryTo.setDescription('Indicates the number of seconds to wait before retrying the loopback target when it is busy or unavailable. A zero-value indicates that retry is disabled and appropriate call-progress tones are passed to the call originator.')
ccmeLoopbackDnAutoCon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnAutoCon.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnAutoCon.setDescription("Indicates whether the automatic connection capability for the call during far-end alert. 'true' indicates call is immediately connected and in-band alerting is provided while waiting for the far-end destination to answer. 'false' indicates automatic connection is disabled.")
ccmeLoopbackDnCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 61, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("g711alaw", 1), ("g711ulaw", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeLoopbackDnCodec.setStatus('current')
if mibBuilder.loadTexts: ccmeLoopbackDnCodec.setDescription('The codec type applied to the calls that pass through the loopback-dn. g711alaw(1) - indicates the G.711 a-law is applied. g711ulaw(2) - indicates the G.711 mu-law is applied. Option 1 and 2 overrides the G.711 codec type that is negotiated for the call and provides mu-law to a-law conversion if needed. default(3) - indicates the Real-Time Transport Protocol (RTP) voice packets are passed through the loopback-dn without considering the G.711 coding type negotiated for the calls.')
ccmeIntercomDnConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62), )
if mibBuilder.loadTexts: ccmeIntercomDnConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnConfTable.setDescription("A list of intercom DN's (lines) configured on this device.")
ccmeIntercomDnConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeIntercomDnTag"))
if mibBuilder.loadTexts: ccmeIntercomDnConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnConfEntry.setDescription('Information about a intercom DN configured on this device. There is an entry created for each intercom DN configured on this device. An entry is deleted if the intercom DN is removed from this device configuration.')
ccmeIntercomDnTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ccmeIntercomDnTag.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnTag.setDescription('Indicates Ephone-DN (line) tag number under which this Intercom was configured.')
ccmeIntercomDnExtensionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeIntercomDnExtensionNum.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnExtensionNum.setDescription('Indicates the telephone number to which intercom calls are placed.')
ccmeIntercomDnBargeInEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeIntercomDnBargeInEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnBargeInEnabled.setDescription("Indicates whether the inbound intercom calls behavior when existing call is active. 'true' indicates inbound intercom calls force the existing call into call-hold state and allows the intercom call to be answered immediately. 'false' indicates inbound intercom calls don't barge-in the existing calls.")
ccmeIntercomDnAutoAnsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeIntercomDnAutoAnsEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnAutoAnsEnabled.setDescription("Indicates whether the auto-answer feature is applied to this EPhone-DN. 'true' indicates auto-answer feature is enabled. 'false' indicates auto-answer feature is disabled. This indicates the Ephone-DN a connection that resembles a private line, automatic ringdown (PLAR).")
ccmeIntercomDnLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 62, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeIntercomDnLabel.setStatus('current')
if mibBuilder.loadTexts: ccmeIntercomDnLabel.setDescription('Indicates the label for the intercom configured on this device.')
ccmeMohMulticastIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 67), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohMulticastIpAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmeMohMulticastIpAddressType.setDescription('Address type of ccmeMohMulticastIpAddress. Only IPv4 and IPv6 addresses are expected.')
ccmeMohMulticastIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 63), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohMulticastIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccmeMohMulticastIpAddress.setDescription('This object indicates the destination IP address for multicast of the Music-on-hold audio stream. The type of this address is determined by the value of the ccmeSysIPAddressType object.')
ccmeMohMulticastPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 64), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohMulticastPortNumber.setStatus('current')
if mibBuilder.loadTexts: ccmeMohMulticastPortNumber.setDescription('This object indicates the media port for multicast of the Music-oh-hold audio stream.')
ccmeMohMulticastRoute = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 65), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohMulticastRoute.setStatus('current')
if mibBuilder.loadTexts: ccmeMohMulticastRoute.setDescription('Indicates a string of IP addresses, each separate by other by a space, over which Music-oh-hold IP multicast packets are transmitted.')
ccmeEMUserDirNumConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 68), )
if mibBuilder.loadTexts: ccmeEMUserDirNumConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEMUserDirNumConfTable.setDescription('A list of Directory Number or extensions configured under user profile which are downloaded to Cisco IP extension mobility phones when an user log into it using this user profile.')
ccmeEMUserDirNumConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 68, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmEMUserProfileDirNumIndex"), (0, "CISCO-CCME-MIB", "ccmeEMUserDirNumTag"))
if mibBuilder.loadTexts: ccmeEMUserDirNumConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEMUserDirNumConfEntry.setDescription('Information about each directory number configured under user profile to be downloaded to an extension mobility IP phone when an user logs into it using this user profile. There is an entry in this table for each line on the logged in ephone.')
ccmEMUserProfileDirNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 68, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: ccmEMUserProfileDirNumIndex.setStatus('current')
if mibBuilder.loadTexts: ccmEMUserProfileDirNumIndex.setDescription('A number that uniquely identifies an Extension Mobility user profile.')
ccmeEMUserDirNumTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 68, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: ccmeEMUserDirNumTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEMUserDirNumTag.setDescription('A number that uniquely identifies a directory number entry.')
ccmeEMUserDirNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 68, 1, 3), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMUserDirNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEMUserDirNum.setDescription('This object indicates the E.164 phone diretory or extension number which is downloaded to a line on the extension mobility phone when an user logs into it.')
ccmeEMUserDirNumOverlay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 68, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMUserDirNumOverlay.setStatus('current')
if mibBuilder.loadTexts: ccmeEMUserDirNumOverlay.setDescription('This object indicates the overlay directory number configured for this line under this user profile.')
ccmeEMLogoutDirNumConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 69), )
if mibBuilder.loadTexts: ccmeEMLogoutDirNumConfTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEMLogoutDirNumConfTable.setDescription('A list of Directory Number or extensions configured under logout profile which are downloaded to Cisco IP extension mobility phones when an user log out or no one is logged in.')
ccmeEMLogoutDirNumConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 69, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmEMLogOutProfileDirNumIndex"), (0, "CISCO-CCME-MIB", "ccmeEMLogoutDirNumTag"))
if mibBuilder.loadTexts: ccmeEMLogoutDirNumConfEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEMLogoutDirNumConfEntry.setDescription('Information about each directory number configured under logout profile to be downloaded to an extension mobility IP phone at logout state. There is an entry in this table for each line on the ephone at logout state. There is an entry in this table for each logout profile.')
ccmEMLogOutProfileDirNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 69, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: ccmEMLogOutProfileDirNumIndex.setStatus('current')
if mibBuilder.loadTexts: ccmEMLogOutProfileDirNumIndex.setDescription('A number that uniquely identifies an Extension Mobility logout profile.')
ccmeEMLogoutDirNumTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 69, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: ccmeEMLogoutDirNumTag.setStatus('current')
if mibBuilder.loadTexts: ccmeEMLogoutDirNumTag.setDescription('A number that uniquely identifies a directory number entry.')
ccmeEMLogoutDirNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 69, 1, 3), CcmeDigitPatternString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMLogoutDirNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEMLogoutDirNum.setDescription('This object indicates the E.164 phone diretory or extension number which is downloaded to a line on the extension mobility phone at the logout state.')
ccmeEMLogoutDirNumOverlay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 1, 69, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMLogoutDirNumOverlay.setStatus('current')
if mibBuilder.loadTexts: ccmeEMLogoutDirNumOverlay.setDescription('This object indicates the overlay directory number configured for this line under this logout profile.')
ccmeEphoneCallLegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneCallLegs.setDescription('Indicates the active number of call legs contributed from the Cisco IP Phones and TAPI clients interacting with this device at this instance.')
ccmeEphoneTot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTot.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTot.setDescription('Indicates the total number of Cisco IP phones (Ephones) seen by this device since the last reset.')
ccmeEphoneTotRegistered = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTotRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTotRegistered.setDescription('Indicates the total number of Cisco IP phones currently registered to this device.')
ccmeEphoneTotKeyPhConfigured = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTotKeyPhConfigured.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTotKeyPhConfigured.setDescription('Indicates the total number of configured Cisco IP phones that are marked as Key phones on this device.')
ccmeEphoneTotKeyPhRegistered = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTotKeyPhRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTotKeyPhRegistered.setDescription('Indicates the total number of Key Cisco IP phones currently registered to this device.')
ccmeEphoneActTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6), )
if mibBuilder.loadTexts: ccmeEphoneActTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneActTable.setDescription('A list of all IP phones currently registered on this device.')
ccmeEphoneActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneTag"))
if mibBuilder.loadTexts: ccmeEphoneActEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneActEntry.setDescription('Information about an IP phone seen by this device. There is an entry added for each new IP phone registration in this table. Entry is removed once the phone is deceased or re-registered.')
ccmeEphoneDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDeviceName.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDeviceName.setDescription('Type and model of Cisco IP phone as seen in the registration on this device.')
ccmeEphoneRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("registered", 1), ("unregistered", 2), ("deceased", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneRegState.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneRegState.setDescription('The registration state of the Cisco IP phone. registered(1) - indicates the phone is active. unregistered(2) - indicates the connection to Cisco IP phone was closed in normal manner. deceased(3) - indicates the connection to the Cisco IP phone was closed because of a keep-alive timeout.')
ccmeEphoneActiveDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneActiveDN.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneActiveDN.setDescription('Current active DN (line) on the IP phone.')
ccmeEphoneActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onhook", 1), ("offhook", 2), ("ringing", 3), ("paging", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneActivityStatus.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneActivityStatus.setDescription('Current status of the Cisco IP phone as seen on this device. onhook(1) - Phone is on-hook. offhook(2) - Phone is off-hook. ringing(3) - Phone is ringing. paging(4) - Phone is receiving an audio page.')
ccmeEphoneKeepAliveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneKeepAliveCnt.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneKeepAliveCnt.setDescription('Number of keepalive messages received from the Cisco IP phone by this device since the phone registered.')
ccmeEphonePendingReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphonePendingReset.setStatus('current')
if mibBuilder.loadTexts: ccmeEphonePendingReset.setDescription('Pending reset operation on this IP phone as seen by this device. True indicating reset is pending.')
ccmeEphoneRegTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneRegTime.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneRegTime.setDescription('Time this phone registered to this device.')
ccmeEphoneCurrentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneCurrentFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneCurrentFirmwareRev.setDescription('The current vendor-specific firmware version string provided by the Cisco IP phone during registration on this device.')
ccmeEphonePreviousFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphonePreviousFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: ccmeEphonePreviousFirmwareRev.setDescription('The previous vendor-specific firmware version of Cisco IP phone provided by the Cisco IP phone during registration on this device.')
ccmeEphoneLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneLastError.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneLastError.setDescription("Reason for last reset of the phone as seen by this device. Reason for last reset of phone could be 'TCP-timeout' or 'CallManager-closed-TCP' or 'Initialized'.")
ccmeEphoneObservedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneObservedType.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneObservedType.setDescription('Type and model of Cisco IP phone received by this device during the registration of IP phone.')
ccmeEphoneLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneLoginStatus.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneLoginStatus.setDescription('True indicates that a phone user is currently logged in on this phone. False indicates no phone user currently logged in on this phone.')
ccmeEphoneDnDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnDStatus.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnDStatus.setDescription("True indicates that phone is set do-not-disturb (DnD) on one or more of the phone's extensions used by the Cisco IP phone. False indicates no DnD is set.")
ccmeEphoneDebugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDebugStatus.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDebugStatus.setDescription('True indicates that phone is set in debug mode. False indicates no debug is disabled on this IP phone.')
ccmeEphoneMediaActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneMediaActive.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneMediaActive.setDescription('True indicates that phone is in active conversation. False indicates no conversation is ongoing.')
ccmeEphoneTAPIClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneTAPIClient.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneTAPIClient.setDescription('True indicates that phone is a TAPI client. False indicates the phone is not TAPI client.')
ccmeEphoneMediaCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audioOnly", 1), ("audioVideo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneMediaCapability.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneMediaCapability.setDescription('Indicates whether the registered IP phone is capable of supporting audio or video. audioOnly(1) - IP phone is only audio capable. audioVideo(2) - IP phone is audio and video capable.')
ccmeEphoneRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 6, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneRemote.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneRemote.setDescription('True indicates that phone is suspected not to be on the local area network(LAN). This is derived from the ARP entry not seen on this device. False indicates the phone is in the same LAN as device.')
ccmeMohSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("liveFeed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeMohSource.setStatus('current')
if mibBuilder.loadTexts: ccmeMohSource.setDescription('Cisco CallManager Express system can derive music-on-hold (MOH) from two locations. If flash (1) is displayed, the router is currently picking MOH stream from an audio file configured in flash file system. The location of the file is provided by ccmeMohFlashFile object. If liveFeed (2) is displayed, the router is currently picking MOH stream from an incoming call audio stream. Normally, a single ephone-dn would be configured to accept liveFeed call. ccmeEphoneDnType with moh type will specify this DN.')
ccmeNightServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeNightServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceEnabled.setDescription("Indicates the current Night service state. 'true' means that Night service is active. 'false' means that Night service is inactive.")
ccmeEMphoneTot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMphoneTot.setStatus('current')
if mibBuilder.loadTexts: ccmeEMphoneTot.setDescription('Indicates the total number of Cisco IP Extension Mobility phones (EMphones) seen by this device since the last reset.')
ccmeEMphoneTotRegistered = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEMphoneTotRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmeEMphoneTotRegistered.setDescription('This object indicates the total number of Cisco IP Extension Mobility phones registered to this CCME.')
ccmeEphoneDnChStatsHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1), )
if mibBuilder.loadTexts: ccmeEphoneDnChStatsHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChStatsHistoryTable.setDescription("A list of statistics for all Ephone-DN's (lines) on this device.")
ccmeEphoneDnChStatsHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-CCME-MIB", "ccmeEphoneDnTag"), (0, "CISCO-CCME-MIB", "ccmeEphoneDnChNum"))
if mibBuilder.loadTexts: ccmeEphoneDnChStatsHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChStatsHistoryEntry.setDescription('Statistical information about an Ephone-DN. There is an entry added for each new Ephone-DN configured in this table. Entry is removed once the Ephone-DN is removed from this device configuration.')
ccmeEphoneDnChNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ccmeEphoneDnChNum.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChNum.setDescription('The Ephone-DN (line) channel number for this entry.')
ccmeEphoneDnChIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChIncoming.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChIncoming.setDescription('Total number of incoming calls received by this Ephone-DN (line) channel.')
ccmeEphoneDnChInAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChInAnswered.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChInAnswered.setDescription('Total number of incoming calls answered by this Ephone-DN (line) channel.')
ccmeEphoneDnChOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChOutbound.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChOutbound.setDescription('Total number of calls placed by this Ephone-DN (line) channel.')
ccmeEphoneDnChOutAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChOutAnswered.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChOutAnswered.setDescription('Total number of calls that were placed and answered by this Ephone-DN (line) channel.')
ccmeEphoneDnChOutBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChOutBusy.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChOutBusy.setDescription('Total number of calls that were placed from this channel and were not answered because of busy line.')
ccmeEphoneDnChDiscAtConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtConn.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtConn.setDescription('Total number of calls that were placed from this channel and were disconnected during call setup.')
ccmeEphoneDnChDiscAtAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtAlert.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtAlert.setDescription('Total number of calls that were placed from this channel and were disconnected during call alerting stage.')
ccmeEphoneDnChDiscAtHold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtHold.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtHold.setDescription('Total number of calls that were placed from this channel and were disconnected during call was put on hold.')
ccmeEphoneDnChDiscAtRing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtRing.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChDiscAtRing.setDescription('Total number of calls that were received on this channel and were disconnected during alerting state.')
ccmeEphoneDnChDiscCauseNearEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChDiscCauseNearEnd.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChDiscCauseNearEnd.setDescription('The last near end disconnect cause code seen by this channel.')
ccmeEphoneDnChDiscCauseFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 439, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmeEphoneDnChDiscCauseFarEnd.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneDnChDiscCauseFarEnd.setDescription('The last far end disconnect cause code seen by this channel.')
ccmeMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0))
ccmeStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 1)).setObjects(("CISCO-CCME-MIB", "ccmeSysTrapSeverity"), ("CISCO-CCME-MIB", "ccmeEnabled"), ("CISCO-CCME-MIB", "ccmeSysNotificationReason"))
if mibBuilder.loadTexts: ccmeStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ccmeStatusChangeNotif.setDescription("A ccmeStatusChangeNotif is generated if there is a change in ccmeEnabled. This notification is generated only when value of the 'ccmeNotificationEnable' object is 'true'.")
ccmeEphoneUnRegThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 2)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneUnRegThreshold"))
if mibBuilder.loadTexts: ccmeEphoneUnRegThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneUnRegThresholdExceed.setDescription("This notification is generated every time the total number of Ephones registered is exceeded and then dropped below threshold specified by 'ccmeEphoneUnRegThreshold' object. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeEPhoneDeceased = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 3)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneIpAddress"), ("CISCO-CCME-MIB", "ccmeEphoneRegState"))
if mibBuilder.loadTexts: ccmeEPhoneDeceased.setStatus('current')
if mibBuilder.loadTexts: ccmeEPhoneDeceased.setDescription("This notification is generated every time registered Ephone changes state to 'Deceased', indicating that the connection to the Cisco IP phone was closed because of a keepalive timeout. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeEPhoneRegFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 4)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneIpAddress"), ("CISCO-CCME-MIB", "ccmeEphoneTrapReason"))
if mibBuilder.loadTexts: ccmeEPhoneRegFailed.setStatus('current')
if mibBuilder.loadTexts: ccmeEPhoneRegFailed.setDescription("This notification is generated every time an Ephone attempts to register but fails. This notification is only for those failures seen by the CCME or SRST gateway. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeEphoneLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 5)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneIpAddress"), ("CISCO-CCME-MIB", "ccmeEphoneTrapReason"))
if mibBuilder.loadTexts: ccmeEphoneLoginFailed.setStatus('current')
if mibBuilder.loadTexts: ccmeEphoneLoginFailed.setDescription("This notification is generated every time an Ephone user login is rejected/failed. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeNightServiceChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 6)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneTrapReason"))
if mibBuilder.loadTexts: ccmeNightServiceChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ccmeNightServiceChangeNotif.setDescription("A ccmeNightServiceChangeNotif notification is generated if there is change in night service status on this device. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeLivefeedMohFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 7)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneTrapReason"))
if mibBuilder.loadTexts: ccmeLivefeedMohFailedNotif.setStatus('current')
if mibBuilder.loadTexts: ccmeLivefeedMohFailedNotif.setDescription("A ccmeLivefeedMohFailedNotif notification is generated when the Music-on-hold (Moh) live feed has failed. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeMaxConferenceNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 8)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneTrapReason"))
if mibBuilder.loadTexts: ccmeMaxConferenceNotif.setStatus('current')
if mibBuilder.loadTexts: ccmeMaxConferenceNotif.setDescription("A ccmeMaxConferenceNotif notification is generated if the maximum number of simultaneous three-party conferences supported by the Cisco CallManager Express is exceeded. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ccmeKeyEphoneRegChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 439, 0, 0, 9)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneIpAddress"), ("CISCO-CCME-MIB", "ccmeEphoneRegState"))
if mibBuilder.loadTexts: ccmeKeyEphoneRegChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ccmeKeyEphoneRegChangeNotif.setDescription("A ccmeKeyEphoneRegChangeNotif notification is generated if there is a change in the registration status of Key IP phone. This objects is generated only if 'ccmeNotificationEnable' object is 'true'.")
ciscoCcmeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 1))
ciscoCcmeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2))
ciscoCcmeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 1, 1)).setObjects(("CISCO-CCME-MIB", "ccmeConfigGroup"), ("CISCO-CCME-MIB", "ccmeActiveStatsGroup"), ("CISCO-CCME-MIB", "ccmeHistoryStatsGroup"), ("CISCO-CCME-MIB", "ccmeNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmeMIBCompliance = ciscoCcmeMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCcmeMIBCompliance.setDescription('The compliance statement for the Cisco CallManager Express MIB.')
ciscoCcmeMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 1, 2)).setObjects(("CISCO-CCME-MIB", "ccmeActiveStatsGroup"), ("CISCO-CCME-MIB", "ccmeHistoryStatsGroup"), ("CISCO-CCME-MIB", "ccmeNotifGroup"), ("CISCO-CCME-MIB", "ccmeConfigGroup"), ("CISCO-CCME-MIB", "ccmeConfigGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmeMIBComplianceRev1 = ciscoCcmeMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCcmeMIBComplianceRev1.setDescription('The compliance statement for the Cisco CallManager Express MIB.')
ciscoCcmeMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 1, 3)).setObjects(("CISCO-CCME-MIB", "ccmeConfigGroup"), ("CISCO-CCME-MIB", "ccmeActiveStatsGroup"), ("CISCO-CCME-MIB", "ccmeHistoryStatsGroup"), ("CISCO-CCME-MIB", "ccmeNotifGroup"), ("CISCO-CCME-MIB", "ccmeConfigGroup1"), ("CISCO-CCME-MIB", "ccmeConfigGroupEM"), ("CISCO-CCME-MIB", "ccmeActiveStatsGroupEM"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmeMIBComplianceRev2 = ciscoCcmeMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoCcmeMIBComplianceRev2.setDescription('Add the enhancement to monitor Extension Mobility phones including their configuration')
ccmeConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 1)).setObjects(("CISCO-CCME-MIB", "ccmeEnabled"), ("CISCO-CCME-MIB", "ccmeVersion"), ("CISCO-CCME-MIB", "ccmeIPAddressType"), ("CISCO-CCME-MIB", "ccmeIPAddress"), ("CISCO-CCME-MIB", "ccmePortNumber"), ("CISCO-CCME-MIB", "ccmeMaxEphones"), ("CISCO-CCME-MIB", "ccmeMaxDirectoryNumber"), ("CISCO-CCME-MIB", "ccmeMaxConferences"), ("CISCO-CCME-MIB", "ccmeMaxRedirect"), ("CISCO-CCME-MIB", "ccmeScriptName"), ("CISCO-CCME-MIB", "ccmeVoiceMailNumber"), ("CISCO-CCME-MIB", "ccmeMwiRelay"), ("CISCO-CCME-MIB", "ccmeMwiExpires"), ("CISCO-CCME-MIB", "ccmeTransferSystem"), ("CISCO-CCME-MIB", "ccmeTimeFormat"), ("CISCO-CCME-MIB", "ccmeDateFormat"), ("CISCO-CCME-MIB", "ccmeUrlforServicesBtn"), ("CISCO-CCME-MIB", "ccmeUrlforDirectoriesBtn"), ("CISCO-CCME-MIB", "ccmeMohFlashFile"), ("CISCO-CCME-MIB", "ccmeMohMulticastFromFlashEnabled"), ("CISCO-CCME-MIB", "ccmeMohFlashMulticastIPAddrType"), ("CISCO-CCME-MIB", "ccmeMohFlashMulticastIPAddr"), ("CISCO-CCME-MIB", "ccmeMohFlashMulticastPortNum"), ("CISCO-CCME-MIB", "ccmePhoneType"), ("CISCO-CCME-MIB", "ccmePhoneFirmwareRev"), ("CISCO-CCME-MIB", "ccmeTransferPattern"), ("CISCO-CCME-MIB", "ccmeTransferPatternType"), ("CISCO-CCME-MIB", "ccmeWebGUIEditEnabled"), ("CISCO-CCME-MIB", "ccmeWebGUITimeEnabled"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockPattern"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockPatternAllTime"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDateMonth"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDate"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDateStartHour"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDateStartMin"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDateStopHour"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDateStopMin"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDay"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDayStartHour"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDayStartMin"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDayStopHour"), ("CISCO-CCME-MIB", "ccmeAfterHrsBlockDayStopMin"), ("CISCO-CCME-MIB", "ccmeNightServiceCode"), ("CISCO-CCME-MIB", "ccmeNightServiceDateMonth"), ("CISCO-CCME-MIB", "ccmeNightServiceDate"), ("CISCO-CCME-MIB", "ccmeNightServiceDateStartHour"), ("CISCO-CCME-MIB", "ccmeNightServiceDateStartMin"), ("CISCO-CCME-MIB", "ccmeNightServiceDateStopHour"), ("CISCO-CCME-MIB", "ccmeNightServiceDateStopMin"), ("CISCO-CCME-MIB", "ccmeNightServiceDay"), ("CISCO-CCME-MIB", "ccmeNightServiceDayStartHour"), ("CISCO-CCME-MIB", "ccmeNightServiceDayStartMin"), ("CISCO-CCME-MIB", "ccmeNightServiceDayStopHour"), ("CISCO-CCME-MIB", "ccmeNightServiceDayStopMin"), ("CISCO-CCME-MIB", "ccmeFXOHookFlashEnabled"), ("CISCO-CCME-MIB", "ccmeSecondaryDialTonePrefix"), ("CISCO-CCME-MIB", "ccmeWebAdminSystemUser"), ("CISCO-CCME-MIB", "ccmeWebAdminCustomerUser"), ("CISCO-CCME-MIB", "ccmeSystemMessage"), ("CISCO-CCME-MIB", "ccmeDialplanPatternTag"), ("CISCO-CCME-MIB", "ccmeDialplanPattern"), ("CISCO-CCME-MIB", "ccmeDialplanExtLength"), ("CISCO-CCME-MIB", "ccmeDialplanExtPattern"), ("CISCO-CCME-MIB", "ccmeDialplanAllowRegiEnabled"), ("CISCO-CCME-MIB", "ccmeKeepAliveTimeout"), ("CISCO-CCME-MIB", "ccmeInterDigitTimeout"), ("CISCO-CCME-MIB", "ccmeBusyTimeout"), ("CISCO-CCME-MIB", "ccmeAlertTimeout"), ("CISCO-CCME-MIB", "ccmeEphoneIpAddressType"), ("CISCO-CCME-MIB", "ccmeEphoneIpAddress"), ("CISCO-CCME-MIB", "ccmeEphoneMacAddress"), ("CISCO-CCME-MIB", "ccmeEphoneModel"), ("CISCO-CCME-MIB", "ccmeEphoneDnType"), ("CISCO-CCME-MIB", "ccmeEphoneDnMode"), ("CISCO-CCME-MIB", "ccmeEphoneDnPriNum"), ("CISCO-CCME-MIB", "ccmeEphoneDnSecNum"), ("CISCO-CCME-MIB", "ccmeEphoneDnName"), ("CISCO-CCME-MIB", "ccmeEphoneDnLabel"), ("CISCO-CCME-MIB", "ccmeEphoneDnPriPref"), ("CISCO-CCME-MIB", "ccmeEphoneDnSecPref"), ("CISCO-CCME-MIB", "ccmeEphoneDnCFBusyNum"), ("CISCO-CCME-MIB", "ccmeEphoneDnCFAllNum"), ("CISCO-CCME-MIB", "ccmeEphoneDnCFNoAnNum"), ("CISCO-CCME-MIB", "ccmeEphoneDnCFNoAnTo"), ("CISCO-CCME-MIB", "ccmeEphoneDnMwiCapability"), ("CISCO-CCME-MIB", "ccmeEphoneDnHuntstop"), ("CISCO-CCME-MIB", "ccmeEphoneDnHuntstopCh"), ("CISCO-CCME-MIB", "ccmeEphoneDnHoldAltTo"), ("CISCO-CCME-MIB", "ccmeEphoneDnHoldAltType"), ("CISCO-CCME-MIB", "ccmeEphoneDnMwiSipSubscrEnabled"), ("CISCO-CCME-MIB", "ccmeEphoneDnScriptName"), ("CISCO-CCME-MIB", "ccmeEphoneUsername"), ("CISCO-CCME-MIB", "ccmeNotificationEnable"), ("CISCO-CCME-MIB", "ccmeSysTrapSeverity"), ("CISCO-CCME-MIB", "ccmeSysNotificationReason"), ("CISCO-CCME-MIB", "ccmeEphoneUnRegThreshold"), ("CISCO-CCME-MIB", "ccmeEphoneKeyPhone"), ("CISCO-CCME-MIB", "ccmeEphoneKeepAlive"), ("CISCO-CCME-MIB", "ccmeEphoneAutoLineInEnabled"), ("CISCO-CCME-MIB", "ccmeEphoneAutoLineOut"), ("CISCO-CCME-MIB", "ccmeEphonePagingDn"), ("CISCO-CCME-MIB", "ccmeEphonePagingPolicy"), ("CISCO-CCME-MIB", "ccmeEphoneTemplate"), ("CISCO-CCME-MIB", "ccmeEphoneAftHrsBlkExmptEnabled"), ("CISCO-CCME-MIB", "ccmeEphoneNightBellSvcEnabled"), ("CISCO-CCME-MIB", "ccmeEphoneAddon"), ("CISCO-CCME-MIB", "ccmeEphoneKeepConfEnabled"), ("CISCO-CCME-MIB", "ccmeEphoneTrapReason"), ("CISCO-CCME-MIB", "ccmeUserAutoLogoutTo"), ("CISCO-CCME-MIB", "ccmeUserLoginDeactivateTime"), ("CISCO-CCME-MIB", "ccmeMwiSipServerIpAddress"), ("CISCO-CCME-MIB", "ccmeMwiSipServerTransportType"), ("CISCO-CCME-MIB", "ccmeMwiSipServerPortNumber"), ("CISCO-CCME-MIB", "ccmeMwiSipServerRegE164Enabled"), ("CISCO-CCME-MIB", "ccmeMwiSipSvrUnsolicitedEnabled"), ("CISCO-CCME-MIB", "ccmeCorTag"), ("CISCO-CCME-MIB", "ccmeCorListName"), ("CISCO-CCME-MIB", "ccmeCorScope"), ("CISCO-CCME-MIB", "ccmeCorDirection"), ("CISCO-CCME-MIB", "ccmeCorStartingNumber"), ("CISCO-CCME-MIB", "ccmeCorEndingNumber"), ("CISCO-CCME-MIB", "ccmeCorVoiceRegPoolNumber"), ("CISCO-CCME-MIB", "ccmeCorListDefaultEnabled"), ("CISCO-CCME-MIB", "ccmeLoopbackDnforward"), ("CISCO-CCME-MIB", "ccmeLoopbackDnStrip"), ("CISCO-CCME-MIB", "ccmeLoopbackDnPrefix"), ("CISCO-CCME-MIB", "ccmeLoopbackDnSuffix"), ("CISCO-CCME-MIB", "ccmeLoopbackDnRetryTo"), ("CISCO-CCME-MIB", "ccmeLoopbackDnAutoCon"), ("CISCO-CCME-MIB", "ccmeLoopbackDnCodec"), ("CISCO-CCME-MIB", "ccmeIntercomDnExtensionNum"), ("CISCO-CCME-MIB", "ccmeIntercomDnBargeInEnabled"), ("CISCO-CCME-MIB", "ccmeIntercomDnAutoAnsEnabled"), ("CISCO-CCME-MIB", "ccmeIntercomDnLabel"), ("CISCO-CCME-MIB", "ccmeEphoneSpeedDialTag"), ("CISCO-CCME-MIB", "ccmeEphoneSpeedDialNumber"), ("CISCO-CCME-MIB", "ccmeEphoneSpeedDialLabel"), ("CISCO-CCME-MIB", "ccmeEphoneFastDialNumber"), ("CISCO-CCME-MIB", "ccmeEphoneFastDialName"), ("CISCO-CCME-MIB", "ccmeEphoneOverlayDN"), ("CISCO-CCME-MIB", "ccmeMohMulticastIpAddressType"), ("CISCO-CCME-MIB", "ccmeMohMulticastIpAddress"), ("CISCO-CCME-MIB", "ccmeMohMulticastPortNumber"), ("CISCO-CCME-MIB", "ccmeMohMulticastRoute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeConfigGroup = ccmeConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ccmeConfigGroup.setDescription('A collection of objects which are used to show the configuration of Cisco CallManager Express feature.')
ccmeActiveStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 2)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneCallLegs"), ("CISCO-CCME-MIB", "ccmeEphoneTot"), ("CISCO-CCME-MIB", "ccmeEphoneTotRegistered"), ("CISCO-CCME-MIB", "ccmeEphoneTotKeyPhConfigured"), ("CISCO-CCME-MIB", "ccmeEphoneTotKeyPhRegistered"), ("CISCO-CCME-MIB", "ccmeEphoneDeviceName"), ("CISCO-CCME-MIB", "ccmeEphoneRegState"), ("CISCO-CCME-MIB", "ccmeEphoneActiveDN"), ("CISCO-CCME-MIB", "ccmeEphoneActivityStatus"), ("CISCO-CCME-MIB", "ccmeEphoneKeepAliveCnt"), ("CISCO-CCME-MIB", "ccmeEphonePendingReset"), ("CISCO-CCME-MIB", "ccmeEphoneRegTime"), ("CISCO-CCME-MIB", "ccmeEphoneCurrentFirmwareRev"), ("CISCO-CCME-MIB", "ccmeEphonePreviousFirmwareRev"), ("CISCO-CCME-MIB", "ccmeEphoneLastError"), ("CISCO-CCME-MIB", "ccmeEphoneObservedType"), ("CISCO-CCME-MIB", "ccmeEphoneLoginStatus"), ("CISCO-CCME-MIB", "ccmeEphoneDnDStatus"), ("CISCO-CCME-MIB", "ccmeEphoneDebugStatus"), ("CISCO-CCME-MIB", "ccmeEphoneMediaActive"), ("CISCO-CCME-MIB", "ccmeEphoneTAPIClient"), ("CISCO-CCME-MIB", "ccmeEphoneMediaCapability"), ("CISCO-CCME-MIB", "ccmeEphoneRemote"), ("CISCO-CCME-MIB", "ccmeMohSource"), ("CISCO-CCME-MIB", "ccmeNightServiceEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeActiveStatsGroup = ccmeActiveStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ccmeActiveStatsGroup.setDescription('A collection of objects that show the active status of Cisco CallManager Express, Ephone and EphoneDN.')
ccmeHistoryStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 3)).setObjects(("CISCO-CCME-MIB", "ccmeEphoneDnChIncoming"), ("CISCO-CCME-MIB", "ccmeEphoneDnChInAnswered"), ("CISCO-CCME-MIB", "ccmeEphoneDnChOutbound"), ("CISCO-CCME-MIB", "ccmeEphoneDnChOutAnswered"), ("CISCO-CCME-MIB", "ccmeEphoneDnChOutBusy"), ("CISCO-CCME-MIB", "ccmeEphoneDnChDiscAtConn"), ("CISCO-CCME-MIB", "ccmeEphoneDnChDiscAtAlert"), ("CISCO-CCME-MIB", "ccmeEphoneDnChDiscAtHold"), ("CISCO-CCME-MIB", "ccmeEphoneDnChDiscAtRing"), ("CISCO-CCME-MIB", "ccmeEphoneDnChDiscCauseNearEnd"), ("CISCO-CCME-MIB", "ccmeEphoneDnChDiscCauseFarEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeHistoryStatsGroup = ccmeHistoryStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ccmeHistoryStatsGroup.setDescription('Selects the group of objects that display the history status of EphoneDN.')
ccmeNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 4)).setObjects(("CISCO-CCME-MIB", "ccmeStatusChangeNotif"), ("CISCO-CCME-MIB", "ccmeEphoneUnRegThresholdExceed"), ("CISCO-CCME-MIB", "ccmeEPhoneDeceased"), ("CISCO-CCME-MIB", "ccmeEPhoneRegFailed"), ("CISCO-CCME-MIB", "ccmeEphoneLoginFailed"), ("CISCO-CCME-MIB", "ccmeNightServiceChangeNotif"), ("CISCO-CCME-MIB", "ccmeLivefeedMohFailedNotif"), ("CISCO-CCME-MIB", "ccmeMaxConferenceNotif"), ("CISCO-CCME-MIB", "ccmeKeyEphoneRegChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeNotifGroup = ccmeNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ccmeNotifGroup.setDescription('A collection of notifications for the Cisco CallManager Express features.')
ccmeConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 5)).setObjects(("CISCO-CCME-MIB", "ccmeEphonePrimaryDn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeConfigGroup1 = ccmeConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: ccmeConfigGroup1.setDescription('A collection of object which indicates the primary extension DN of an IP phone.')
ccmeConfigGroupEM = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 6)).setObjects(("CISCO-CCME-MIB", "ccmeEMUserProfileTag"), ("CISCO-CCME-MIB", "ccmeEMLogOutProfileTag"), ("CISCO-CCME-MIB", "ccmeEMUserDirNum"), ("CISCO-CCME-MIB", "ccmeEMUserDirNumOverlay"), ("CISCO-CCME-MIB", "ccmeEMLogoutDirNum"), ("CISCO-CCME-MIB", "ccmeEMLogoutDirNumOverlay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeConfigGroupEM = ccmeConfigGroupEM.setStatus('current')
if mibBuilder.loadTexts: ccmeConfigGroupEM.setDescription('A collection of object which indicates a Cisco extension mobility IP phone.')
ccmeActiveStatsGroupEM = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 439, 2, 2, 7)).setObjects(("CISCO-CCME-MIB", "ccmeEMphoneTot"), ("CISCO-CCME-MIB", "ccmeEMphoneTotRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmeActiveStatsGroupEM = ccmeActiveStatsGroupEM.setStatus('current')
if mibBuilder.loadTexts: ccmeActiveStatsGroupEM.setDescription('A collection of objects that show the active status of Extension Mobility phones on this Cisco CallManager Express.')
mibBuilder.exportSymbols("CISCO-CCME-MIB", ccmeDialplanPatternIndex=ccmeDialplanPatternIndex, ccmeEphoneKeepConfEnabled=ccmeEphoneKeepConfEnabled, ccmeAfterHrsBlockDateIndex=ccmeAfterHrsBlockDateIndex, ccmeAfterHrsBlockDateStopMin=ccmeAfterHrsBlockDateStopMin, ccmeCorScope=ccmeCorScope, ccmeEMUserDirNumConfEntry=ccmeEMUserDirNumConfEntry, ccmeEphonePendingReset=ccmeEphonePendingReset, ccmeMIBNotifications=ccmeMIBNotifications, ccmeEphoneDnConfigTable=ccmeEphoneDnConfigTable, ccmeEphoneDnHoldAltType=ccmeEphoneDnHoldAltType, ccmeAfterHrsBlockDayStartMin=ccmeAfterHrsBlockDayStartMin, ccmeSysTrapSeverity=ccmeSysTrapSeverity, ccmeEphoneDnSecPref=ccmeEphoneDnSecPref, ccmeLoopbackDnConfTable=ccmeLoopbackDnConfTable, ccmeMohFlashMulticastPortNum=ccmeMohFlashMulticastPortNum, ccmeHistoryStatsGroup=ccmeHistoryStatsGroup, ccmeNightServiceDateEntry=ccmeNightServiceDateEntry, ccmeSysNotificationReason=ccmeSysNotificationReason, ccmeAfterHrsBlockDate=ccmeAfterHrsBlockDate, ccmeCorVoiceRegPoolNumber=ccmeCorVoiceRegPoolNumber, ccmeEphoneDnCFBusyNum=ccmeEphoneDnCFBusyNum, ccmeMaxConferenceNotif=ccmeMaxConferenceNotif, ccmeTimeFormat=ccmeTimeFormat, ccmeNightServiceDateTable=ccmeNightServiceDateTable, ccmeConfigGroup1=ccmeConfigGroup1, ccmeMwiSipServerTransportType=ccmeMwiSipServerTransportType, ccmeEphoneSpeedDialConfTable=ccmeEphoneSpeedDialConfTable, ccmeEphoneDnPriNum=ccmeEphoneDnPriNum, ccmeEphoneActTable=ccmeEphoneActTable, ccmeNightServiceCode=ccmeNightServiceCode, ccmeMohSource=ccmeMohSource, ccmeIntercomDnTag=ccmeIntercomDnTag, ccmeDialplanExtPattern=ccmeDialplanExtPattern, ccmeEphoneBtnDNAssocConfEntry=ccmeEphoneBtnDNAssocConfEntry, ccmeEphoneFastDialConfTable=ccmeEphoneFastDialConfTable, ccmeEphoneFastDialTableIndex=ccmeEphoneFastDialTableIndex, ccmeEMLogoutDirNumConfTable=ccmeEMLogoutDirNumConfTable, CcmeDigitPatternString=CcmeDigitPatternString, ccmeFXOHookFlashEnabled=ccmeFXOHookFlashEnabled, ccmeEphoneAutoLineOut=ccmeEphoneAutoLineOut, ccmeEphoneDnChDiscAtHold=ccmeEphoneDnChDiscAtHold, ccmeAfterHrsBlockDayStopMin=ccmeAfterHrsBlockDayStopMin, ccmeAfterHrsBlockDayIndex=ccmeAfterHrsBlockDayIndex, ccmeEphoneModel=ccmeEphoneModel, ccmeMwiSipSvrUnsolicitedEnabled=ccmeMwiSipSvrUnsolicitedEnabled, ccmeNightServiceDayStartMin=ccmeNightServiceDayStartMin, ccmeAfterHrsBlockDateTable=ccmeAfterHrsBlockDateTable, ccmeAfterHrsBlockDayStartHour=ccmeAfterHrsBlockDayStartHour, ccmeEphoneCallLegs=ccmeEphoneCallLegs, ccmeActiveStatsGroupEM=ccmeActiveStatsGroupEM, ccmeActiveStats=ccmeActiveStats, ccmeEphoneDnChOutBusy=ccmeEphoneDnChOutBusy, ccmePhoneFirmwareRev=ccmePhoneFirmwareRev, ccmeCorConfEntry=ccmeCorConfEntry, ccmeEphoneMediaActive=ccmeEphoneMediaActive, ccmePhoneFirmwareEntry=ccmePhoneFirmwareEntry, ccmeIntercomDnAutoAnsEnabled=ccmeIntercomDnAutoAnsEnabled, ccmeIntercomDnConfTable=ccmeIntercomDnConfTable, PYSNMP_MODULE_ID=ciscoCcmeMIB, ccmeNightServiceEnabled=ccmeNightServiceEnabled, ccmeNotificationEnable=ccmeNotificationEnable, ccmeEphoneCurrentFirmwareRev=ccmeEphoneCurrentFirmwareRev, ccmeDialplanPattern=ccmeDialplanPattern, ccmeMohFlashMulticastIPAddrType=ccmeMohFlashMulticastIPAddrType, ccmeAlertTimeout=ccmeAlertTimeout, ccmeStatusChangeNotif=ccmeStatusChangeNotif, ccmeDialplanExtLength=ccmeDialplanExtLength, ccmeTransferPatternEntry=ccmeTransferPatternEntry, ciscoCcmeMIBGroups=ciscoCcmeMIBGroups, ccmeAfterHrsBlockDateStartMin=ccmeAfterHrsBlockDateStartMin, ccmeAfterHrsBlockDayStopHour=ccmeAfterHrsBlockDayStopHour, ccmeNightServiceDayEntry=ccmeNightServiceDayEntry, ccmeAfterHrsBlockDateEntry=ccmeAfterHrsBlockDateEntry, ccmEMUserProfileDirNumIndex=ccmEMUserProfileDirNumIndex, ccmeEphoneTotKeyPhRegistered=ccmeEphoneTotKeyPhRegistered, ciscoCcmeMIBObjects=ciscoCcmeMIBObjects, ccmeNightServiceDate=ccmeNightServiceDate, ccmeKeepAliveTimeout=ccmeKeepAliveTimeout, ccmeEphoneDnType=ccmeEphoneDnType, ccmeCorStartingNumber=ccmeCorStartingNumber, ccmeNightServiceDateMonth=ccmeNightServiceDateMonth, ccmeTransferSystem=ccmeTransferSystem, ccmeTransferPatternTable=ccmeTransferPatternTable, ccmeCorDirection=ccmeCorDirection, ccmeTransferPatternIndex=ccmeTransferPatternIndex, ccmeEphoneDnChDiscAtAlert=ccmeEphoneDnChDiscAtAlert, ccmeEphoneDnChOutAnswered=ccmeEphoneDnChOutAnswered, ccmeEphoneAutoLineInEnabled=ccmeEphoneAutoLineInEnabled, ccmeMohMulticastRoute=ccmeMohMulticastRoute, ccmeMwiSipServerPortNumber=ccmeMwiSipServerPortNumber, ccmeNightServiceDateStopHour=ccmeNightServiceDateStopHour, ccmeAfterHrsBlockDateMonth=ccmeAfterHrsBlockDateMonth, ccmeEphoneDnMwiSipSubscrEnabled=ccmeEphoneDnMwiSipSubscrEnabled, ciscoCcmeMIBNotifs=ciscoCcmeMIBNotifs, ccmeEphoneDnHuntstop=ccmeEphoneDnHuntstop, ccmeMwiSipServerRegE164Enabled=ccmeMwiSipServerRegE164Enabled, ccmeMohMulticastPortNumber=ccmeMohMulticastPortNumber, ccmeEphoneTot=ccmeEphoneTot, ccmeEMUserDirNumTag=ccmeEMUserDirNumTag, ccmeSystemMessage=ccmeSystemMessage, ccmeUserAutoLogoutTo=ccmeUserAutoLogoutTo, ccmeEphoneRemote=ccmeEphoneRemote, ccmeEphoneAftHrsBlkExmptEnabled=ccmeEphoneAftHrsBlkExmptEnabled, ccmeEPhoneRegFailed=ccmeEPhoneRegFailed, ccmeMaxEphones=ccmeMaxEphones, ccmeEphoneDnCFNoAnTo=ccmeEphoneDnCFNoAnTo, ciscoCcmeMIBCompliance=ciscoCcmeMIBCompliance, ccmeEphoneLastError=ccmeEphoneLastError, ccmeEphoneLoginStatus=ccmeEphoneLoginStatus, ccmeDialplanPatternEntry=ccmeDialplanPatternEntry, ccmeEphoneKeepAlive=ccmeEphoneKeepAlive, ccmeNightServiceDateIndex=ccmeNightServiceDateIndex, ccmeEphoneTemplate=ccmeEphoneTemplate, ccmeEphoneActEntry=ccmeEphoneActEntry, ccmeTransferPatternType=ccmeTransferPatternType, ccmeEphoneDnSecNum=ccmeEphoneDnSecNum, ccmeEphoneUnRegThreshold=ccmeEphoneUnRegThreshold, ccmeEphoneDebugStatus=ccmeEphoneDebugStatus, ccmeEphoneDnConfigEntry=ccmeEphoneDnConfigEntry, ccmeEphoneTotRegistered=ccmeEphoneTotRegistered, ccmeEMUserDirNumConfTable=ccmeEMUserDirNumConfTable, ccmeScriptName=ccmeScriptName, ccmeEphoneNightBellSvcEnabled=ccmeEphoneNightBellSvcEnabled, ccmeEphoneOverlayDN=ccmeEphoneOverlayDN, ccmeEphoneActiveDN=ccmeEphoneActiveDN, ccmeMohFlashMulticastIPAddr=ccmeMohFlashMulticastIPAddr, ccmeEphoneTAPIClient=ccmeEphoneTAPIClient, ccmeEnabled=ccmeEnabled, ccmeEphoneDnChStatsHistoryTable=ccmeEphoneDnChStatsHistoryTable, ccmeIPAddressType=ccmeIPAddressType, ccmeMohFlashFile=ccmeMohFlashFile, ccmeNightServiceDay=ccmeNightServiceDay, ccmeWebAdminSystemUser=ccmeWebAdminSystemUser, ccmeLivefeedMohFailedNotif=ccmeLivefeedMohFailedNotif, ccmeIPAddress=ccmeIPAddress, ccmePhoneFirmwareIndex=ccmePhoneFirmwareIndex, ccmeEphonePrimaryDn=ccmeEphonePrimaryDn, ccmeEPhoneDeceased=ccmeEPhoneDeceased, ccmeLoopbackDnCodec=ccmeLoopbackDnCodec, ccmeKeyEphoneRegChangeNotif=ccmeKeyEphoneRegChangeNotif, ccmeEphoneTrapReason=ccmeEphoneTrapReason, ccmeMaxRedirect=ccmeMaxRedirect, ccmeEphoneMacAddress=ccmeEphoneMacAddress, ccmeEMLogoutDirNumConfEntry=ccmeEMLogoutDirNumConfEntry, ccmeEphoneDnCFAllNum=ccmeEphoneDnCFAllNum, ccmeEphoneDnPriPref=ccmeEphoneDnPriPref, ccmeEphoneDnChDiscAtRing=ccmeEphoneDnChDiscAtRing, ccmeMwiRelay=ccmeMwiRelay, ccmeCorListName=ccmeCorListName, ccmeUrlforDirectoriesBtn=ccmeUrlforDirectoriesBtn, ccmeIntercomDnExtensionNum=ccmeIntercomDnExtensionNum, ccmeEphoneSpeedDialTableIndex=ccmeEphoneSpeedDialTableIndex, ccmeMaxDirectoryNumber=ccmeMaxDirectoryNumber, ccmePhoneType=ccmePhoneType, ccmeEphoneSpeedDialTag=ccmeEphoneSpeedDialTag, ccmeEphoneObservedType=ccmeEphoneObservedType, ccmeCorTag=ccmeCorTag, ccmeEphoneDnChDiscCauseNearEnd=ccmeEphoneDnChDiscCauseNearEnd, ccmeEphoneTag=ccmeEphoneTag, ccmeNotifGroup=ccmeNotifGroup, ccmeEphoneFastDialConfEntry=ccmeEphoneFastDialConfEntry, ccmeAfterHrsBlockDayTable=ccmeAfterHrsBlockDayTable, ccmeCorTableIndex=ccmeCorTableIndex, ccmeEphoneMediaCapability=ccmeEphoneMediaCapability, ciscoCcmeMIBConform=ciscoCcmeMIBConform, ccmeMohMulticastIpAddress=ccmeMohMulticastIpAddress, ccmeEphoneKeyPhone=ccmeEphoneKeyPhone, ccmeLoopbackDnConfEntry=ccmeLoopbackDnConfEntry, ccmeNightServiceDayStopHour=ccmeNightServiceDayStopHour, ccmeEMphoneTotRegistered=ccmeEMphoneTotRegistered, ciscoCcmeMIBCompliances=ciscoCcmeMIBCompliances, ccmeLoopbackDnSuffix=ccmeLoopbackDnSuffix, ccmeVersion=ccmeVersion, ccmeNightServiceDateStopMin=ccmeNightServiceDateStopMin, ccmeEphoneSpeedDialLabel=ccmeEphoneSpeedDialLabel, ccmeEphoneButtonNumber=ccmeEphoneButtonNumber, ccmeEphoneBtnDNAssocConfTable=ccmeEphoneBtnDNAssocConfTable, ccmeEphoneIpAddressType=ccmeEphoneIpAddressType, ciscoCcmeMIBComplianceRev1=ciscoCcmeMIBComplianceRev1, ccmeMwiExpires=ccmeMwiExpires, ccmeMohMulticastFromFlashEnabled=ccmeMohMulticastFromFlashEnabled, ciscoCcmeMIB=ciscoCcmeMIB, ccmeEphoneDnChInAnswered=ccmeEphoneDnChInAnswered, ccmeMaxConferences=ccmeMaxConferences, ccmeEphoneConfEntry=ccmeEphoneConfEntry, ccmEMLogOutProfileDirNumIndex=ccmEMLogOutProfileDirNumIndex, ccmePortNumber=ccmePortNumber, ccmeEphoneKeepAliveCnt=ccmeEphoneKeepAliveCnt, ccmeEphoneConfTable=ccmeEphoneConfTable, ccmeDialplanAllowRegiEnabled=ccmeDialplanAllowRegiEnabled, ccmeWebGUITimeEnabled=ccmeWebGUITimeEnabled, ccmeEphoneDeviceName=ccmeEphoneDeviceName, ccmeNightServiceDayTable=ccmeNightServiceDayTable, ccmeEphoneDnHuntstopCh=ccmeEphoneDnHuntstopCh, ccmeEphoneDnDStatus=ccmeEphoneDnDStatus, ccmeEphoneDnLabel=ccmeEphoneDnLabel, ccmeAfterHrsBlockDay=ccmeAfterHrsBlockDay, ccmeAfterHrsBlockPatternEntry=ccmeAfterHrsBlockPatternEntry, ccmeLoopbackDnAutoCon=ccmeLoopbackDnAutoCon, ccmeEphoneAddon=ccmeEphoneAddon, ccmeEphonePagingDn=ccmeEphonePagingDn, ccmeEphoneFastDialNumber=ccmeEphoneFastDialNumber, ccmeCorConfTable=ccmeCorConfTable, ccmeWebGUIEditEnabled=ccmeWebGUIEditEnabled, ccmeEphonePreviousFirmwareRev=ccmeEphonePreviousFirmwareRev, ccmeAfterHrsBlockPattern=ccmeAfterHrsBlockPattern, ccmeEMLogoutDirNumOverlay=ccmeEMLogoutDirNumOverlay, ccmeAfterHrsBlockDayEntry=ccmeAfterHrsBlockDayEntry, ccmeAfterHrsBlockDateStartHour=ccmeAfterHrsBlockDateStartHour, ccmeEphoneIpAddress=ccmeEphoneIpAddress, ccmeEMLogOutProfileTag=ccmeEMLogOutProfileTag, ccmeEphoneDnChDiscCauseFarEnd=ccmeEphoneDnChDiscCauseFarEnd, ccmeEphoneSpeedDialNumber=ccmeEphoneSpeedDialNumber, CcmeNightServiceCodeString=CcmeNightServiceCodeString, ccmeDialplanPatternTable=ccmeDialplanPatternTable, ccmeEphoneDnHoldAltTo=ccmeEphoneDnHoldAltTo, ccmeMwiSipServerIpAddress=ccmeMwiSipServerIpAddress, ccmeNightServiceDayStopMin=ccmeNightServiceDayStopMin, ccmeEMphoneTot=ccmeEMphoneTot, ccmeEphoneLoginFailed=ccmeEphoneLoginFailed, ccmeConfigGroupEM=ccmeConfigGroupEM, ccmeHistoryStats=ccmeHistoryStats, ccmeUrlforServicesBtn=ccmeUrlforServicesBtn, ccmeLoopbackDnTag=ccmeLoopbackDnTag, ccmeEphoneUnRegThresholdExceed=ccmeEphoneUnRegThresholdExceed, ccmeActiveStatsGroup=ccmeActiveStatsGroup, ccmeEMLogoutDirNum=ccmeEMLogoutDirNum, ccmeCorEndingNumber=ccmeCorEndingNumber, ccmeNightServiceDayIndex=ccmeNightServiceDayIndex, ccmeNightServiceDateStartHour=ccmeNightServiceDateStartHour, ccmeEphoneFastDialName=ccmeEphoneFastDialName, ccmeEphoneDnName=ccmeEphoneDnName, ccmeEphoneDnChStatsHistoryEntry=ccmeEphoneDnChStatsHistoryEntry, ccmeEphoneDnMode=ccmeEphoneDnMode, ccmeUserLoginDeactivateTime=ccmeUserLoginDeactivateTime, ccmeLoopbackDnStrip=ccmeLoopbackDnStrip, ccmeVoiceMailNumber=ccmeVoiceMailNumber, ccmeIntercomDnConfEntry=ccmeIntercomDnConfEntry, ccmeTransferPattern=ccmeTransferPattern, ccmeEphoneDnChDiscAtConn=ccmeEphoneDnChDiscAtConn, ccmeEMLogoutDirNumTag=ccmeEMLogoutDirNumTag, ccmeLoopbackDnforward=ccmeLoopbackDnforward, ccmeEphoneRegState=ccmeEphoneRegState, ccmeEphonePagingPolicy=ccmeEphonePagingPolicy, ccmeAfterHrsBlockPatternTag=ccmeAfterHrsBlockPatternTag, ccmeAfterHrsBlockPatternTable=ccmeAfterHrsBlockPatternTable, ccmeWebAdminCustomerUser=ccmeWebAdminCustomerUser, ccmeLoopbackDnRetryTo=ccmeLoopbackDnRetryTo, ccmeMohMulticastIpAddressType=ccmeMohMulticastIpAddressType, ccmeConfig=ccmeConfig, ccmeEphoneActivityStatus=ccmeEphoneActivityStatus, ccmeNightServiceChangeNotif=ccmeNightServiceChangeNotif, ccmeLoopbackDnPrefix=ccmeLoopbackDnPrefix, ccmeEphoneDnChIncoming=ccmeEphoneDnChIncoming)
mibBuilder.exportSymbols("CISCO-CCME-MIB", ccmeAfterHrsBlockDateStopHour=ccmeAfterHrsBlockDateStopHour, ccmeSecondaryDialTonePrefix=ccmeSecondaryDialTonePrefix, ccmeEphoneDnCFNoAnNum=ccmeEphoneDnCFNoAnNum, ccmeDialplanPatternTag=ccmeDialplanPatternTag, ccmePhoneFirmwareTable=ccmePhoneFirmwareTable, ccmeIntercomDnLabel=ccmeIntercomDnLabel, ccmeEMUserProfileTag=ccmeEMUserProfileTag, ccmeAfterHrsBlockPatternAllTime=ccmeAfterHrsBlockPatternAllTime, ccmeEphoneDnScriptName=ccmeEphoneDnScriptName, ccmeEphoneTotKeyPhConfigured=ccmeEphoneTotKeyPhConfigured, ccmeEphoneDnChNum=ccmeEphoneDnChNum, ccmeNightServiceDayStartHour=ccmeNightServiceDayStartHour, ccmeEphoneDnTag=ccmeEphoneDnTag, ccmeEMUserDirNumOverlay=ccmeEMUserDirNumOverlay, ccmeCorListDefaultEnabled=ccmeCorListDefaultEnabled, ccmeEphoneUsername=ccmeEphoneUsername, ccmeEphoneDnMwiCapability=ccmeEphoneDnMwiCapability, ccmeInterDigitTimeout=ccmeInterDigitTimeout, ccmeDateFormat=ccmeDateFormat, ccmeEphoneSpeedDialConfEntry=ccmeEphoneSpeedDialConfEntry, ciscoCcmeMIBComplianceRev2=ciscoCcmeMIBComplianceRev2, ccmeEphoneDnChOutbound=ccmeEphoneDnChOutbound, ccmeEMUserDirNum=ccmeEMUserDirNum, ccmeConfigGroup=ccmeConfigGroup, ccmeEphoneRegTime=ccmeEphoneRegTime, ccmeNightServiceDateStartMin=ccmeNightServiceDateStartMin, ccmeBusyTimeout=ccmeBusyTimeout, ccmeIntercomDnBargeInEnabled=ccmeIntercomDnBargeInEnabled)
