#
# PySNMP MIB module WWP-LEOS-PORT-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-PORT-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, MibIdentifier, Bits, Counter64, TimeTicks, Gauge32, ModuleIdentity, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "MibIdentifier", "Bits", "Counter64", "TimeTicks", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wwpModules, wwpModulesLeos = mibBuilder.importSymbols("WWP-SMI", "wwpModules", "wwpModulesLeos")
wwpLeosPortStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3))
wwpLeosPortStatsMIB.setRevisions(('2012-11-16 00:00', '2010-02-12 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosPortStatsMIB.setRevisionsDescriptions(('Added wwpLeosPortHCStatsLastRefresh,wwpLeosPortHCStatsLastChange, wwpLeosPortTotalHCStatsLastRefresh,wwpLeosPortTotalHCStatsLastChange,', 'Added wwpLeosPortHCSttsRxInErrorPkts.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosPortStatsMIB.setLastUpdated('201211160000Z')
if mibBuilder.loadTexts: wwpLeosPortStatsMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosPortStatsMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosPortStatsMIB.setDescription('The MIB module for the WWP Port ether Stats.')
wwpLeosPortStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1))
wwpLeosPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1))
wwpLeosPortStatsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 2))
wwpLeosPortStatsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 2, 0))
wwpLeosPortStatsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 3))
wwpLeosPortStatsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 3, 1))
wwpLeosPortStatsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 3, 2))
wwpLeosPortStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortStatsReset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsReset.setDescription("Setting this object to 'reset' will clear the stats of all ports. A read on this object will always return the 'none'.")
wwpLeosPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTable.setDescription('The table specifying the stats for the ports.')
wwpLeosPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-PORT-STATS-MIB", "wwpLeosPortStatsPortId"))
if mibBuilder.loadTexts: wwpLeosPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsEntry.setDescription('An entry in the port stats table.')
wwpLeosPortStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsPortId.setDescription('The Id of the port for which this entry contains the stats.')
wwpLeosPortStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxBytes.setDescription('The number of bytes received by this port.')
wwpLeosPortStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxPkts.setDescription('The number of packets received by this port.')
wwpLeosPortStatsRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxCrcErrorPkts.setDescription('The number of packets received with CRC errors by this port.')
wwpLeosPortStatsRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxBcastPkts.setDescription('The number of Broadcast packets received by this port.')
wwpLeosPortStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsUndersizePkts.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsOversizePkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortStatsFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsFragmentPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsFragmentPkts.setDescription('The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortStatsJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsJabberPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsJabberPkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortStats64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats64BytePkts.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets).')
wwpLeosPortStats65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats65To127BytePkts.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortStats128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats128To255BytePkts.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortStats256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats256To511BytePkts.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortStats512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats512To1023BytePkts.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortStats1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats1024To1518BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxBytes.setDescription('The number of Octets transmitted for this port.')
wwpLeosPortStatsTxTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxTBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPortStatsTxTBytes.setDescription('The total number of Octets transmitted for this port.')
wwpLeosPortStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxPkts.setDescription('The total number of packets transmitted for this port.')
wwpLeosPortStatsTxExDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxExDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxExDeferPkts.setDescription('The transmit excessive defer packet count for a port.')
wwpLeosPortStatsTxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxGiantPkts.setDescription('The transmit too big packet count for a port.')
wwpLeosPortStatsTxUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxUnderRunPkts.setDescription('The transmit underrun packet count for a port.')
wwpLeosPortStatsTxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxCrcErrorPkts.setDescription('The transmit CRC error packet count for a port.')
wwpLeosPortStatsTxLCheckErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxLCheckErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxLCheckErrorPkts.setDescription('The transmit length check error packet count for a port.')
wwpLeosPortStatsTxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxLOutRangePkts.setDescription('The transmit length out of range packet count for a port.')
wwpLeosPortStatsTxLateCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxLateCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxLateCollPkts.setDescription('The transmit late collision packet count for a port.')
wwpLeosPortStatsTxExCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxExCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxExCollPkts.setDescription('The transmit excessive collision packet count for a port.')
wwpLeosPortStatsTxSingleCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxSingleCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxSingleCollPkts.setDescription('The transmit single collision packet count for a port.')
wwpLeosPortStatsTxCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxCollPkts.setDescription('The transmit collision packet count for the port.')
wwpLeosPortStatsTxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxPausePkts.setDescription('The transmit pause packets for the port.')
wwpLeosPortStatsTxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxMcastPkts.setDescription('The transmit multicast packets for the port.')
wwpLeosPortStatsTxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxBcastPkts.setDescription('The transmit broadcast packets for the port.')
wwpLeosPortStatsPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortStatsPortReset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsPortReset.setDescription("Setting this object will reset the stats of given port. Doing read on this object will always return 'none'")
wwpLeosPortStatsRxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxMcastPkts.setDescription('The total number of multicast packets received for the given port.')
wwpLeosPortStatsRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxPausePkts.setDescription('The receive pause packets for the port.')
wwpLeosPortStats1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats1519To2047BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStats2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats2048To4095BytePkts.setDescription('The total number of packets (including bad packets) received that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStats4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStats4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStats4096To9216BytePkts.setDescription('The total number of packets (including bad packets) received that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTxDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxDeferPkts.setDescription('The transmit single deferral packet count for a port. Not Supported in leos 4.x')
wwpLeosPortStatsTx64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx64BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were 64 octets in length (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx65To127BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx128To255BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx256To511BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx512To1023BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx1024To1518BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx1519To2047BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx2048To4095BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsTx4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTx4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTx4096To9216BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortStatsRxFpgaDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxFpgaDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxFpgaDropPkts.setDescription('The total number of dropped packets on a port when traffic profiles are enabled on the port. (311v only)')
wwpLeosPortStatsPortLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsPortLinkUp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsPortLinkUp.setDescription('The total number of port link up events on the port.')
wwpLeosPortStatsPortLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsPortLinkDown.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsPortLinkDown.setDescription('The total number of port link down events on the port.')
wwpLeosPortStatsPortLinkFlap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsPortLinkFlap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsPortLinkFlap.setDescription('The total number of port link flap events on the port.')
wwpLeosPortStatsRxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxUcastPkts.setDescription('The number of Unicast packets received by this port. Not Supported in leos 4.x')
wwpLeosPortStatsTxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxUcastPkts.setDescription('The number of Unicast packets transmitted by this port. Not Supported in leos 4.x')
wwpLeosPortStatsRxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxDropPkts.setDescription('The number of discarded received frames for this port.')
wwpLeosPortStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxDiscardPkts.setDescription('The number of discarded received frames for this port including IPv6 L3, L3 IP Header and runt discards.')
wwpLeosPortStatsRxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxLOutRangePkts.setDescription('The number of frames received by this port that exceeded the maximum permitted frame size. Not Supported in leos 4.x')
wwpLeosPortStatsRxFpgaBufferDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxFpgaBufferDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxFpgaBufferDropPkts.setDescription('number of frames dropped because the FPGA RX buffer was full Only supported on the 311V')
wwpLeosPortStatsTxFpgaBufferDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsTxFpgaBufferDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsTxFpgaBufferDropPkts.setDescription('number of frames dropped because the FPGA TX buffer was full Only supported on the 311V')
wwpLeosPortStatsFpgaVlanPriFilterDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaVlanPriFilterDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaVlanPriFilterDropPkts.setDescription('number of frames dropped by the transmit VLAN Priority Filter Only supported on the 311V')
wwpLeosPortStatsFpgaRxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaRxErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaRxErrorPkts.setDescription('Number of frames dropped by the FPGA because of receive errors. Only supported on the 311V')
wwpLeosPortStatsFpgaRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaRxCrcErrorPkts.setDescription('Number of frames dropped by the FPGA because of CRC errors. Only supported on the 311V')
wwpLeosPortStatsFpgaRxIpCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaRxIpCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsFpgaRxIpCrcErrorPkts.setDescription('Number of frames dropped by the FPGA because of IP Checksum errors Only supported on the 311V')
wwpLeosPortStatsRxInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortStatsRxInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortStatsRxInErrorPkts.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
wwpLeosPortTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTable.setDescription('The table specifying the stats for the ports.')
wwpLeosPortTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-PORT-STATS-MIB", "wwpLeosPortTotalStatsPortId"))
if mibBuilder.loadTexts: wwpLeosPortTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsEntry.setDescription('An entry in the port stats table.')
wwpLeosPortTotalStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortId.setDescription('The Id of the port for which this entry contains the stats.')
wwpLeosPortTotalStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxBytes.setDescription('The number of bytes received by this port.')
wwpLeosPortTotalStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxPkts.setDescription('The number of packets received by this port.')
wwpLeosPortTotalStatsRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxCrcErrorPkts.setDescription('The number of packets received with CRC errors by this port.')
wwpLeosPortTotalStatsRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxBcastPkts.setDescription('The number of Broadcast packets received by this port.')
wwpLeosPortTotalStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsUndersizePkts.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortTotalStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsOversizePkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortTotalStatsFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFragmentPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFragmentPkts.setDescription('The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortTotalStatsJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsJabberPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsJabberPkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortTotalStats64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats64BytePkts.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets).')
wwpLeosPortTotalStats65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats65To127BytePkts.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalStats128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats128To255BytePkts.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalStats256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats256To511BytePkts.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalStats512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats512To1023BytePkts.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalStats1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats1024To1518BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxBytes.setDescription('The number of Octets transmitted for this port.')
wwpLeosPortTotalStatsTxTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxTBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxTBytes.setDescription('The total number of Octets transmitted for this port.')
wwpLeosPortTotalStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxPkts.setDescription('The total number of packets transmitted for this port.')
wwpLeosPortTotalStatsTxExDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxExDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxExDeferPkts.setDescription('The transmit excessive defer packet count for a port.')
wwpLeosPortTotalStatsTxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxGiantPkts.setDescription('The transmit too big packet count for a port.')
wwpLeosPortTotalStatsTxUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxUnderRunPkts.setDescription('The transmit underrun packet count for a port.')
wwpLeosPortTotalStatsTxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxCrcErrorPkts.setDescription('The transmit CRC error packet count for a port.')
wwpLeosPortTotalStatsTxLCheckErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxLCheckErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxLCheckErrorPkts.setDescription('The transmit length check error packet count for a port.')
wwpLeosPortTotalStatsTxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxLOutRangePkts.setDescription('The transmit length out of range packet count for a port.')
wwpLeosPortTotalStatsTxLateCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxLateCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxLateCollPkts.setDescription('The transmit late collision packet count for a port.')
wwpLeosPortTotalStatsTxExCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxExCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxExCollPkts.setDescription('The transmit excessive collision packet count for a port.')
wwpLeosPortTotalStatsTxSingleCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxSingleCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxSingleCollPkts.setDescription('The transmit single collision packet count for a port.')
wwpLeosPortTotalStatsTxCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxCollPkts.setDescription('The transmit collision packet count for the port.')
wwpLeosPortTotalStatsTxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxPausePkts.setDescription('The transmit pause packets for the port.')
wwpLeosPortTotalStatsTxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxMcastPkts.setDescription('The transmit multicast packets for the port.')
wwpLeosPortTotalStatsTxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxBcastPkts.setDescription('The transmit broadcast packets for the port.')
wwpLeosPortTotalStatsPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortReset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortReset.setDescription("Setting this object will reset the stats of given port. Doing read on this object will always return 'none'")
wwpLeosPortTotalStatsRxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxMcastPkts.setDescription('The total number of multicast packets received for the given port.')
wwpLeosPortTotalStatsRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxPausePkts.setDescription('The total receive pause packets for the port.')
wwpLeosPortTotalStats1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats1519To2047BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStats2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats2048To4095BytePkts.setDescription('The total number of packets (including bad packets) received that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStats4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStats4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStats4096To9216BytePkts.setDescription('The total number of packets (including bad packets) received that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTxDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxDeferPkts.setDescription('The total transmit single deferral packet count for a port. Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx64BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were 64 octets in length (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx65To127BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx128To255BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx256To511BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx512To1023BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx1024To1518BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx1519To2047BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx2048To4095BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsTx4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTx4096To9216BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalStatsRxFpgaDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxFpgaDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxFpgaDropPkts.setDescription('The total number of dropped packets on a port when traffic profiles are enabled on the port.(311v only)')
wwpLeosPortTotalStatsPortLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortLinkUp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortLinkUp.setDescription('The total number of port link up events on the port.')
wwpLeosPortTotalStatsPortLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortLinkDown.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortLinkDown.setDescription('The total number of port link down events on the port.')
wwpLeosPortTotalStatsPortLinkFlap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortLinkFlap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsPortLinkFlap.setDescription('The total number of port link flap events on the port.')
wwpLeosPortTotalStatsRxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxUcastPkts.setDescription('The total number of Unicast packets received by this port. Not Supported in leos 4.x')
wwpLeosPortTotalStatsTxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxUcastPkts.setDescription('The total number of Unicast packets transmitted by this port. Not Supported in leos 4.x')
wwpLeosPortTotalStatsRxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxDropPkts.setDescription('The total number of discarded received frames for this port.')
wwpLeosPortTotalStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxDiscardPkts.setDescription('The total number of discarded received frames for this port including IPv6 L3, L3 IP Header and runt discards.')
wwpLeosPortTotalStatsRxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxLOutRangePkts.setDescription('The total number of frames received by this port that exceeded the maximum permitted frame size. Not Supported in leos 4.x')
wwpLeosPortTotalStatsRxFpgaBufferDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxFpgaBufferDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxFpgaBufferDropPkts.setDescription('number of frames dropped because the FPGA RX buffer was full Only supported on the 311V')
wwpLeosPortTotalStatsTxFpgaBufferDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxFpgaBufferDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsTxFpgaBufferDropPkts.setDescription('number of frames dropped because the FPGA TX buffer was full Only supported on the 311V')
wwpLeosPortTotalStatsFpgaVlanPriFilterDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaVlanPriFilterDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaVlanPriFilterDropPkts.setDescription('number of frames dropped by the transmit VLAN Priority Filter Only supported on the 311V')
wwpLeosPortTotalStatsFpgaRxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaRxErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaRxErrorPkts.setDescription('Number of frames dropped by the FPGA because of receive errors. Only supported on the 311V')
wwpLeosPortTotalStatsFpgaRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaRxCrcErrorPkts.setDescription('Number of frames dropped by the FPGA because of CRC errors. Only supported on the 311V')
wwpLeosPortTotalStatsFpgaRxIpCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaRxIpCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsFpgaRxIpCrcErrorPkts.setDescription('Number of frames dropped by the FPGA because of IP Checksum errors Only supported on the 311V')
wwpLeosPortTotalStatsRxInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalStatsRxInErrorPkts.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
wwpLeosPortHCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosPortHCStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTable.setDescription('The table specifying the 64 bit statistics for the ports.')
wwpLeosPortHCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-PORT-STATS-MIB", "wwpLeosPortHCStatsPortId"))
if mibBuilder.loadTexts: wwpLeosPortHCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsEntry.setDescription('An entry in the port stats table.')
wwpLeosPortHCStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsPortId.setDescription('The Id of the port for which this entry contains the stats.')
wwpLeosPortHCStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxBytes.setDescription('The number of bytes received by this port.')
wwpLeosPortHCStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxPkts.setDescription('The number of packets received by this port.')
wwpLeosPortHCStatsRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxCrcErrorPkts.setDescription('The number of packets received with CRC errors by this port.')
wwpLeosPortHCStatsRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxBcastPkts.setDescription('The number of Broadcast packets received by this port.')
wwpLeosPortHCStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsUndersizePkts.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortHCStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsOversizePkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortHCStatsFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsFragmentPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsFragmentPkts.setDescription('The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortHCStatsJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsJabberPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsJabberPkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortHCStats64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats64BytePkts.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets).')
wwpLeosPortHCStats65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats65To127BytePkts.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortHCStats128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats128To255BytePkts.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortHCStats256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats256To511BytePkts.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortHCStats512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats512To1023BytePkts.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortHCStats1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats1024To1518BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortHCStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxBytes.setDescription('The number of Octets transmitted for this port.')
wwpLeosPortHCStatsTxTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxTBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxTBytes.setDescription('The total number of Octets transmitted for this port.')
wwpLeosPortHCStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxPkts.setDescription('The total number of packets transmitted for this port.')
wwpLeosPortHCStatsTxExDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxExDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxExDeferPkts.setDescription('The transmit excessive defer packet count for a port.')
wwpLeosPortHCStatsTxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxGiantPkts.setDescription('The transmit too big packet count for a port.')
wwpLeosPortHCStatsTxUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxUnderRunPkts.setDescription('The transmit underrun packet count for a port.')
wwpLeosPortHCStatsTxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxCrcErrorPkts.setDescription('The transmit CRC error packet count for a port.')
wwpLeosPortHCStatsTxLCheckErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxLCheckErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxLCheckErrorPkts.setDescription('The transmit length check error packet count for a port.')
wwpLeosPortHCStatsTxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxLOutRangePkts.setDescription('The transmit length out of range packet count for a port.')
wwpLeosPortHCStatsTxLateCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxLateCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxLateCollPkts.setDescription('The transmit late collision packet count for a port.')
wwpLeosPortHCStatsTxExCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxExCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxExCollPkts.setDescription('The transmit excessive collision packet count for a port.')
wwpLeosPortHCStatsTxSingleCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxSingleCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxSingleCollPkts.setDescription('The transmit single collision packet count for a port.')
wwpLeosPortHCStatsTxCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxCollPkts.setDescription('The transmit collision packet count for the port.')
wwpLeosPortHCStatsTxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxPausePkts.setDescription('The transmit pause packets for the port.')
wwpLeosPortHCStatsTxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxMcastPkts.setDescription('The transmit multicast packets for the port.')
wwpLeosPortHCStatsTxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxBcastPkts.setDescription('The transmit broadcast packets for the port.')
wwpLeosPortHCStatsPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortHCStatsPortReset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsPortReset.setDescription("Setting this object will reset the stats of given port. Doing read on this object will always return 'none'")
wwpLeosPortHCStatsRxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxMcastPkts.setDescription('The total number of multicast packets received for the given port.')
wwpLeosPortHCStatsRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxPausePkts.setDescription('The receive pause packets for the port.')
wwpLeosPortHCStats1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats1519To2047BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStats2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats2048To4095BytePkts.setDescription('The total number of packets (including bad packets) received that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStats4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStats4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStats4096To9216BytePkts.setDescription('The total number of packets (including bad packets) received that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTxDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxDeferPkts.setDescription('The transmit single deferral packet count for a port. Not Supported in leos 4.x')
wwpLeosPortHCStatsTx64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx64BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were 64 octets in length (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx65To127BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx128To255BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx256To511BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx512To1023BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx1024To1518BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx1519To2047BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx2048To4095BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsTx4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTx4096To9216BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortHCStatsRxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxUcastPkts.setDescription('The number of Unicast packets received by this port.')
wwpLeosPortHCStatsTxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsTxUcastPkts.setDescription('The number of Unicast packets transmitted by this port. Not Supported in leos 4.x')
wwpLeosPortHCStatsRxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxDropPkts.setDescription('The number of discarded received frames for this port.')
wwpLeosPortHCStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxDiscardPkts.setDescription('The number of discarded received frames for this port including IPv6 L3, L3 IP Header and runt discards.')
wwpLeosPortHCStatsRxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxLOutRangePkts.setDescription('The number of frames received by this port that exceeded the maximum permitted frame size. Not Supported in leos 4.x')
wwpLeosPortHCStatsRxInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsRxInErrorPkts.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
wwpLeosPortHCStatsLastRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsLastRefresh.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsLastRefresh.setDescription('The time system uptime of the last statistics refresh on the port.')
wwpLeosPortHCStatsLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 4, 1, 55), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortHCStatsLastChange.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortHCStatsLastChange.setDescription('The value of sysUpTime at the time of the last state change for the port. If the port state has been unchanged since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
wwpLeosPortTotalHCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTable.setDescription('The table specifying the 64 bit statistics for the ports.')
wwpLeosPortTotalHCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-PORT-STATS-MIB", "wwpLeosPortTotalHCStatsPortId"))
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsEntry.setDescription('An entry in the port stats table.')
wwpLeosPortTotalHCStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsPortId.setDescription('The Id of the port for which this entry contains the stats.')
wwpLeosPortTotalHCStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxBytes.setDescription('The number of bytes received by this port.')
wwpLeosPortTotalHCStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxPkts.setDescription('The number of packets received by this port.')
wwpLeosPortTotalHCStatsRxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxCrcErrorPkts.setDescription('The number of packets received with CRC errors by this port.')
wwpLeosPortTotalHCStatsRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxBcastPkts.setDescription('The number of Broadcast packets received by this port.')
wwpLeosPortTotalHCStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsUndersizePkts.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortTotalHCStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsOversizePkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosPortTotalHCStatsFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsFragmentPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsFragmentPkts.setDescription('The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortTotalHCStatsJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsJabberPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsJabberPkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosPortTotalHCStats64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats64BytePkts.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets).')
wwpLeosPortTotalHCStats65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats65To127BytePkts.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalHCStats128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats128To255BytePkts.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalHCStats256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats256To511BytePkts.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalHCStats512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats512To1023BytePkts.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalHCStats1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats1024To1518BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
wwpLeosPortTotalHCStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxBytes.setDescription('The number of Octets transmitted for this port.')
wwpLeosPortTotalHCStatsTxTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxTBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxTBytes.setDescription('The total number of Octets transmitted for this port.')
wwpLeosPortTotalHCStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxPkts.setDescription('The total number of packets transmitted for this port.')
wwpLeosPortTotalHCStatsTxExDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxExDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxExDeferPkts.setDescription('The transmit excessive defer packet count for a port.')
wwpLeosPortTotalHCStatsTxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxGiantPkts.setDescription('The transmit too big packet count for a port.')
wwpLeosPortTotalHCStatsTxUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxUnderRunPkts.setDescription('The transmit underrun packet count for a port.')
wwpLeosPortTotalHCStatsTxCrcErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxCrcErrorPkts.setDescription('The transmit CRC error packet count for a port.')
wwpLeosPortTotalHCStatsTxLCheckErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxLCheckErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxLCheckErrorPkts.setDescription('The transmit length check error packet count for a port.')
wwpLeosPortTotalHCStatsTxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxLOutRangePkts.setDescription('The transmit length out of range packet count for a port.')
wwpLeosPortTotalHCStatsTxLateCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxLateCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxLateCollPkts.setDescription('The transmit late collision packet count for a port.')
wwpLeosPortTotalHCStatsTxExCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxExCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxExCollPkts.setDescription('The transmit excessive collision packet count for a port.')
wwpLeosPortTotalHCStatsTxSingleCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxSingleCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxSingleCollPkts.setDescription('The transmit single collision packet count for a port.')
wwpLeosPortTotalHCStatsTxCollPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxCollPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxCollPkts.setDescription('The transmit collision packet count for the port.')
wwpLeosPortTotalHCStatsTxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxPausePkts.setDescription('The transmit pause packets for the port.')
wwpLeosPortTotalHCStatsTxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxMcastPkts.setDescription('The transmit multicast packets for the port.')
wwpLeosPortTotalHCStatsTxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxBcastPkts.setDescription('The transmit broadcast packets for the port.')
wwpLeosPortTotalHCStatsPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsPortReset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsPortReset.setDescription("Setting this object will reset the stats of given port. Doing read on this object will always return 'none'")
wwpLeosPortTotalHCStatsRxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxMcastPkts.setDescription('The total number of multicast packets received for the given port.')
wwpLeosPortTotalHCStatsRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxPausePkts.setDescription('The total receive pause packets for the port.')
wwpLeosPortTotalHCStats1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats1519To2047BytePkts.setDescription('The total number of packets (including bad packets) received that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets) Not Supported in leos 4.x. ')
wwpLeosPortTotalHCStats2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats2048To4095BytePkts.setDescription('The total number of packets (including bad packets) received that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStats4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStats4096To9216BytePkts.setDescription('The total number of packets (including bad packets) received that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTxDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxDeferPkts.setDescription('The total transmit single deferral packet count for a port. Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx64BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx64BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were 64 octets in length (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx65To127BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx128To255BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx256To511BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx512To1023BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx1024To1518BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx1024To1518BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx1024To1518BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx1519To2047BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx1519To2047BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx1519To2047BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 1519 and 2047 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx2048To4095BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx2048To4095BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx2048To4095BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 2048 and 4095 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTx4096To9216BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx4096To9216BytePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTx4096To9216BytePkts.setDescription('The total number of packets (including bad packets) transmitted that were between 4096 and 9216 octets in length inclusive (excluding framing bits but including FCS octets). Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsRxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxUcastPkts.setDescription('The total number of Unicast packets received by this port. Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsTxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsTxUcastPkts.setDescription('The total number of Unicast packets transmitted by this port. Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsRxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxDropPkts.setDescription('The total number of discarded received frames for this port.')
wwpLeosPortTotalHCStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxDiscardPkts.setDescription('The total number of discarded received frames for this port including IPv6 L3, L3 IP Header and runt discards.')
wwpLeosPortTotalHCStatsRxLOutRangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxLOutRangePkts.setDescription('The total number of frames received by this port that exceeded the maximum permitted frame size. Not Supported in leos 4.x')
wwpLeosPortTotalHCStatsRxInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsRxInErrorPkts.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
wwpLeosPortTotalHCStatsLastRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsLastRefresh.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsLastRefresh.setDescription('The time system uptime of the last statistics refresh on the port.')
wwpLeosPortTotalHCStatsLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 3, 1, 1, 5, 1, 55), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsLastChange.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortTotalHCStatsLastChange.setDescription('The value of sysUpTime at the time of the last state change for the port. If the port state has been unchanged since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
mibBuilder.exportSymbols("WWP-LEOS-PORT-STATS-MIB", wwpLeosPortTotalHCStatsOversizePkts=wwpLeosPortTotalHCStatsOversizePkts, wwpLeosPortTotalHCStatsRxPausePkts=wwpLeosPortTotalHCStatsRxPausePkts, wwpLeosPortHCStatsPortId=wwpLeosPortHCStatsPortId, wwpLeosPortStatsTxPausePkts=wwpLeosPortStatsTxPausePkts, wwpLeosPortTotalStatsTxCrcErrorPkts=wwpLeosPortTotalStatsTxCrcErrorPkts, wwpLeosPortStatsTx1519To2047BytePkts=wwpLeosPortStatsTx1519To2047BytePkts, wwpLeosPortHCStatsTx4096To9216BytePkts=wwpLeosPortHCStatsTx4096To9216BytePkts, wwpLeosPortStatsTxUcastPkts=wwpLeosPortStatsTxUcastPkts, wwpLeosPortTotalHCStatsTx1519To2047BytePkts=wwpLeosPortTotalHCStatsTx1519To2047BytePkts, wwpLeosPortHCStatsRxUcastPkts=wwpLeosPortHCStatsRxUcastPkts, wwpLeosPortTotalHCStats512To1023BytePkts=wwpLeosPortTotalHCStats512To1023BytePkts, wwpLeosPortTotalStatsPortLinkUp=wwpLeosPortTotalStatsPortLinkUp, wwpLeosPortHCStatsTxLateCollPkts=wwpLeosPortHCStatsTxLateCollPkts, wwpLeosPortTotalStatsTx128To255BytePkts=wwpLeosPortTotalStatsTx128To255BytePkts, wwpLeosPortTotalHCStatsTxLateCollPkts=wwpLeosPortTotalHCStatsTxLateCollPkts, wwpLeosPortTotalHCStatsTxUcastPkts=wwpLeosPortTotalHCStatsTxUcastPkts, wwpLeosPortStatsRxDropPkts=wwpLeosPortStatsRxDropPkts, wwpLeosPortTotalStats256To511BytePkts=wwpLeosPortTotalStats256To511BytePkts, wwpLeosPortTotalStatsPortLinkFlap=wwpLeosPortTotalStatsPortLinkFlap, wwpLeosPortTotalHCStatsTxUnderRunPkts=wwpLeosPortTotalHCStatsTxUnderRunPkts, wwpLeosPortTotalHCStatsRxDiscardPkts=wwpLeosPortTotalHCStatsRxDiscardPkts, wwpLeosPortTotalStatsTxLCheckErrorPkts=wwpLeosPortTotalStatsTxLCheckErrorPkts, wwpLeosPortHCStatsOversizePkts=wwpLeosPortHCStatsOversizePkts, wwpLeosPortTotalHCStatsRxUcastPkts=wwpLeosPortTotalHCStatsRxUcastPkts, wwpLeosPortStatsEntry=wwpLeosPortStatsEntry, wwpLeosPortHCStatsTable=wwpLeosPortHCStatsTable, wwpLeosPortHCStatsRxBytes=wwpLeosPortHCStatsRxBytes, wwpLeosPortTotalStatsTxUnderRunPkts=wwpLeosPortTotalStatsTxUnderRunPkts, wwpLeosPortTotalStatsTx64BytePkts=wwpLeosPortTotalStatsTx64BytePkts, wwpLeosPortTotalHCStatsRxMcastPkts=wwpLeosPortTotalHCStatsRxMcastPkts, wwpLeosPortStats1519To2047BytePkts=wwpLeosPortStats1519To2047BytePkts, wwpLeosPortHCStats65To127BytePkts=wwpLeosPortHCStats65To127BytePkts, wwpLeosPortStatsTxCollPkts=wwpLeosPortStatsTxCollPkts, wwpLeosPortTotalStats65To127BytePkts=wwpLeosPortTotalStats65To127BytePkts, wwpLeosPortTotalHCStatsTxBcastPkts=wwpLeosPortTotalHCStatsTxBcastPkts, wwpLeosPortTotalHCStatsTx64BytePkts=wwpLeosPortTotalHCStatsTx64BytePkts, wwpLeosPortStats128To255BytePkts=wwpLeosPortStats128To255BytePkts, wwpLeosPortStatsRxPausePkts=wwpLeosPortStatsRxPausePkts, wwpLeosPortStatsTxTBytes=wwpLeosPortStatsTxTBytes, wwpLeosPortStatsOversizePkts=wwpLeosPortStatsOversizePkts, wwpLeosPortStatsTxLOutRangePkts=wwpLeosPortStatsTxLOutRangePkts, wwpLeosPortTotalStats128To255BytePkts=wwpLeosPortTotalStats128To255BytePkts, wwpLeosPortTotalStats1024To1518BytePkts=wwpLeosPortTotalStats1024To1518BytePkts, wwpLeosPortTotalStatsTxSingleCollPkts=wwpLeosPortTotalStatsTxSingleCollPkts, wwpLeosPortHCStatsTxLOutRangePkts=wwpLeosPortHCStatsTxLOutRangePkts, wwpLeosPortHCStatsTx128To255BytePkts=wwpLeosPortHCStatsTx128To255BytePkts, wwpLeosPortTotalHCStatsTx256To511BytePkts=wwpLeosPortTotalHCStatsTx256To511BytePkts, wwpLeosPortHCStatsRxDiscardPkts=wwpLeosPortHCStatsRxDiscardPkts, PYSNMP_MODULE_ID=wwpLeosPortStatsMIB, wwpLeosPortStatsRxFpgaBufferDropPkts=wwpLeosPortStatsRxFpgaBufferDropPkts, wwpLeosPortTotalHCStatsTxGiantPkts=wwpLeosPortTotalHCStatsTxGiantPkts, wwpLeosPortTotalStatsRxDiscardPkts=wwpLeosPortTotalStatsRxDiscardPkts, wwpLeosPortTotalStatsOversizePkts=wwpLeosPortTotalStatsOversizePkts, wwpLeosPortTotalHCStats64BytePkts=wwpLeosPortTotalHCStats64BytePkts, wwpLeosPortStatsMIBNotifications=wwpLeosPortStatsMIBNotifications, wwpLeosPortStatsTxBcastPkts=wwpLeosPortStatsTxBcastPkts, wwpLeosPortStats=wwpLeosPortStats, wwpLeosPortStatsTxExCollPkts=wwpLeosPortStatsTxExCollPkts, wwpLeosPortHCStatsTxUnderRunPkts=wwpLeosPortHCStatsTxUnderRunPkts, wwpLeosPortTotalStatsTxTBytes=wwpLeosPortTotalStatsTxTBytes, wwpLeosPortStatsTx4096To9216BytePkts=wwpLeosPortStatsTx4096To9216BytePkts, wwpLeosPortHCStats64BytePkts=wwpLeosPortHCStats64BytePkts, wwpLeosPortTotalStatsTx1024To1518BytePkts=wwpLeosPortTotalStatsTx1024To1518BytePkts, wwpLeosPortTotalHCStatsTxDeferPkts=wwpLeosPortTotalHCStatsTxDeferPkts, wwpLeosPortStatsRxUcastPkts=wwpLeosPortStatsRxUcastPkts, wwpLeosPortTotalHCStatsPortReset=wwpLeosPortTotalHCStatsPortReset, wwpLeosPortHCStatsTxCrcErrorPkts=wwpLeosPortHCStatsTxCrcErrorPkts, wwpLeosPortTotalHCStatsTxLOutRangePkts=wwpLeosPortTotalHCStatsTxLOutRangePkts, wwpLeosPortTotalStatsTxDeferPkts=wwpLeosPortTotalStatsTxDeferPkts, wwpLeosPortTotalHCStatsPortId=wwpLeosPortTotalHCStatsPortId, wwpLeosPortStatsPortReset=wwpLeosPortStatsPortReset, wwpLeosPortTotalStatsFpgaVlanPriFilterDropPkts=wwpLeosPortTotalStatsFpgaVlanPriFilterDropPkts, wwpLeosPortTotalHCStatsFragmentPkts=wwpLeosPortTotalHCStatsFragmentPkts, wwpLeosPortStatsTable=wwpLeosPortStatsTable, wwpLeosPortTotalHCStatsTx512To1023BytePkts=wwpLeosPortTotalHCStatsTx512To1023BytePkts, wwpLeosPortHCStatsTxUcastPkts=wwpLeosPortHCStatsTxUcastPkts, wwpLeosPortTotalHCStatsTxExCollPkts=wwpLeosPortTotalHCStatsTxExCollPkts, wwpLeosPortTotalHCStatsTxPkts=wwpLeosPortTotalHCStatsTxPkts, wwpLeosPortStatsRxDiscardPkts=wwpLeosPortStatsRxDiscardPkts, wwpLeosPortTotalStatsTx256To511BytePkts=wwpLeosPortTotalStatsTx256To511BytePkts, wwpLeosPortHCStatsPortReset=wwpLeosPortHCStatsPortReset, wwpLeosPortHCStatsTx2048To4095BytePkts=wwpLeosPortHCStatsTx2048To4095BytePkts, wwpLeosPortStatsMIBNotificationPrefix=wwpLeosPortStatsMIBNotificationPrefix, wwpLeosPortHCStatsTxSingleCollPkts=wwpLeosPortHCStatsTxSingleCollPkts, wwpLeosPortTotalHCStats4096To9216BytePkts=wwpLeosPortTotalHCStats4096To9216BytePkts, wwpLeosPortTotalStatsTx1519To2047BytePkts=wwpLeosPortTotalStatsTx1519To2047BytePkts, wwpLeosPortTotalStatsTxExCollPkts=wwpLeosPortTotalStatsTxExCollPkts, wwpLeosPortTotalStatsTxExDeferPkts=wwpLeosPortTotalStatsTxExDeferPkts, wwpLeosPortHCStats4096To9216BytePkts=wwpLeosPortHCStats4096To9216BytePkts, wwpLeosPortStatsFpgaVlanPriFilterDropPkts=wwpLeosPortStatsFpgaVlanPriFilterDropPkts, wwpLeosPortTotalStatsEntry=wwpLeosPortTotalStatsEntry, wwpLeosPortTotalHCStatsLastChange=wwpLeosPortTotalHCStatsLastChange, wwpLeosPortTotalStats2048To4095BytePkts=wwpLeosPortTotalStats2048To4095BytePkts, wwpLeosPortStatsTxUnderRunPkts=wwpLeosPortStatsTxUnderRunPkts, wwpLeosPortTotalStatsTx4096To9216BytePkts=wwpLeosPortTotalStatsTx4096To9216BytePkts, wwpLeosPortHCStatsRxDropPkts=wwpLeosPortHCStatsRxDropPkts, wwpLeosPortTotalStatsPortLinkDown=wwpLeosPortTotalStatsPortLinkDown, wwpLeosPortStatsTxMcastPkts=wwpLeosPortStatsTxMcastPkts, wwpLeosPortHCStats2048To4095BytePkts=wwpLeosPortHCStats2048To4095BytePkts, wwpLeosPortTotalHCStatsTxLCheckErrorPkts=wwpLeosPortTotalHCStatsTxLCheckErrorPkts, wwpLeosPortTotalHCStatsTable=wwpLeosPortTotalHCStatsTable, wwpLeosPortHCStatsEntry=wwpLeosPortHCStatsEntry, wwpLeosPortTotalStatsRxFpgaDropPkts=wwpLeosPortTotalStatsRxFpgaDropPkts, wwpLeosPortHCStatsRxLOutRangePkts=wwpLeosPortHCStatsRxLOutRangePkts, wwpLeosPortStatsMIBObjects=wwpLeosPortStatsMIBObjects, wwpLeosPortTotalStatsTx2048To4095BytePkts=wwpLeosPortTotalStatsTx2048To4095BytePkts, wwpLeosPortStatsRxLOutRangePkts=wwpLeosPortStatsRxLOutRangePkts, wwpLeosPortTotalStatsPortReset=wwpLeosPortTotalStatsPortReset, wwpLeosPortTotalHCStatsUndersizePkts=wwpLeosPortTotalHCStatsUndersizePkts, wwpLeosPortStatsRxBcastPkts=wwpLeosPortStatsRxBcastPkts, wwpLeosPortStatsRxFpgaDropPkts=wwpLeosPortStatsRxFpgaDropPkts, wwpLeosPortHCStats256To511BytePkts=wwpLeosPortHCStats256To511BytePkts, wwpLeosPortHCStatsTxDeferPkts=wwpLeosPortHCStatsTxDeferPkts, wwpLeosPortStatsTxPkts=wwpLeosPortStatsTxPkts, wwpLeosPortHCStatsTx65To127BytePkts=wwpLeosPortHCStatsTx65To127BytePkts, wwpLeosPortHCStatsTxExCollPkts=wwpLeosPortHCStatsTxExCollPkts, wwpLeosPortHCStatsTxGiantPkts=wwpLeosPortHCStatsTxGiantPkts, wwpLeosPortTotalHCStatsRxInErrorPkts=wwpLeosPortTotalHCStatsRxInErrorPkts, wwpLeosPortTotalStatsTxBytes=wwpLeosPortTotalStatsTxBytes, wwpLeosPortTotalStatsRxPausePkts=wwpLeosPortTotalStatsRxPausePkts, wwpLeosPortTotalStatsRxMcastPkts=wwpLeosPortTotalStatsRxMcastPkts, wwpLeosPortTotalStatsTable=wwpLeosPortTotalStatsTable, wwpLeosPortStatsPortLinkDown=wwpLeosPortStatsPortLinkDown, wwpLeosPortHCStatsRxPkts=wwpLeosPortHCStatsRxPkts, wwpLeosPortStatsMIBCompliances=wwpLeosPortStatsMIBCompliances, wwpLeosPortStatsTxLCheckErrorPkts=wwpLeosPortStatsTxLCheckErrorPkts, wwpLeosPortStatsMIB=wwpLeosPortStatsMIB, wwpLeosPortTotalStatsRxCrcErrorPkts=wwpLeosPortTotalStatsRxCrcErrorPkts, wwpLeosPortStats64BytePkts=wwpLeosPortStats64BytePkts, wwpLeosPortTotalStatsRxBcastPkts=wwpLeosPortTotalStatsRxBcastPkts, wwpLeosPortStatsReset=wwpLeosPortStatsReset, wwpLeosPortStatsPortId=wwpLeosPortStatsPortId, wwpLeosPortTotalHCStatsTxCollPkts=wwpLeosPortTotalHCStatsTxCollPkts, wwpLeosPortTotalStatsTxPkts=wwpLeosPortTotalStatsTxPkts, wwpLeosPortTotalHCStatsTxMcastPkts=wwpLeosPortTotalHCStatsTxMcastPkts, wwpLeosPortStatsFpgaRxCrcErrorPkts=wwpLeosPortStatsFpgaRxCrcErrorPkts, wwpLeosPortTotalHCStatsRxLOutRangePkts=wwpLeosPortTotalHCStatsRxLOutRangePkts, wwpLeosPortTotalStatsRxUcastPkts=wwpLeosPortTotalStatsRxUcastPkts, wwpLeosPortHCStatsRxMcastPkts=wwpLeosPortHCStatsRxMcastPkts, wwpLeosPortStats512To1023BytePkts=wwpLeosPortStats512To1023BytePkts, wwpLeosPortTotalHCStatsRxCrcErrorPkts=wwpLeosPortTotalHCStatsRxCrcErrorPkts, wwpLeosPortStats65To127BytePkts=wwpLeosPortStats65To127BytePkts, wwpLeosPortHCStatsRxInErrorPkts=wwpLeosPortHCStatsRxInErrorPkts, wwpLeosPortHCStatsRxBcastPkts=wwpLeosPortHCStatsRxBcastPkts, wwpLeosPortStatsTxExDeferPkts=wwpLeosPortStatsTxExDeferPkts, wwpLeosPortHCStatsTx64BytePkts=wwpLeosPortHCStatsTx64BytePkts, wwpLeosPortStats4096To9216BytePkts=wwpLeosPortStats4096To9216BytePkts, wwpLeosPortStatsTxGiantPkts=wwpLeosPortStatsTxGiantPkts, wwpLeosPortStatsFpgaRxErrorPkts=wwpLeosPortStatsFpgaRxErrorPkts, wwpLeosPortTotalHCStatsTxTBytes=wwpLeosPortTotalHCStatsTxTBytes, wwpLeosPortStatsRxBytes=wwpLeosPortStatsRxBytes, wwpLeosPortTotalStats512To1023BytePkts=wwpLeosPortTotalStats512To1023BytePkts, wwpLeosPortStats1024To1518BytePkts=wwpLeosPortStats1024To1518BytePkts, wwpLeosPortTotalStatsTxBcastPkts=wwpLeosPortTotalStatsTxBcastPkts, wwpLeosPortHCStats1024To1518BytePkts=wwpLeosPortHCStats1024To1518BytePkts, wwpLeosPortStatsUndersizePkts=wwpLeosPortStatsUndersizePkts, wwpLeosPortTotalStatsRxPkts=wwpLeosPortTotalStatsRxPkts, wwpLeosPortHCStatsTx1024To1518BytePkts=wwpLeosPortHCStatsTx1024To1518BytePkts, wwpLeosPortStatsPortLinkFlap=wwpLeosPortStatsPortLinkFlap, wwpLeosPortTotalStatsTxPausePkts=wwpLeosPortTotalStatsTxPausePkts, wwpLeosPortHCStatsRxCrcErrorPkts=wwpLeosPortHCStatsRxCrcErrorPkts, wwpLeosPortStatsTxLateCollPkts=wwpLeosPortStatsTxLateCollPkts, wwpLeosPortTotalHCStats1024To1518BytePkts=wwpLeosPortTotalHCStats1024To1518BytePkts, wwpLeosPortStatsTxDeferPkts=wwpLeosPortStatsTxDeferPkts, wwpLeosPortTotalStatsPortId=wwpLeosPortTotalStatsPortId, wwpLeosPortStats256To511BytePkts=wwpLeosPortStats256To511BytePkts, wwpLeosPortTotalStatsUndersizePkts=wwpLeosPortTotalStatsUndersizePkts, wwpLeosPortTotalStatsRxDropPkts=wwpLeosPortTotalStatsRxDropPkts, wwpLeosPortStatsRxCrcErrorPkts=wwpLeosPortStatsRxCrcErrorPkts, wwpLeosPortHCStats128To255BytePkts=wwpLeosPortHCStats128To255BytePkts, wwpLeosPortTotalHCStatsRxBcastPkts=wwpLeosPortTotalHCStatsRxBcastPkts, wwpLeosPortTotalStats4096To9216BytePkts=wwpLeosPortTotalStats4096To9216BytePkts, wwpLeosPortHCStatsTxPausePkts=wwpLeosPortHCStatsTxPausePkts, wwpLeosPortHCStatsTx256To511BytePkts=wwpLeosPortHCStatsTx256To511BytePkts, wwpLeosPortTotalStatsRxBytes=wwpLeosPortTotalStatsRxBytes, wwpLeosPortTotalHCStatsTxPausePkts=wwpLeosPortTotalHCStatsTxPausePkts, wwpLeosPortHCStatsTxLCheckErrorPkts=wwpLeosPortHCStatsTxLCheckErrorPkts, wwpLeosPortStatsJabberPkts=wwpLeosPortStatsJabberPkts, wwpLeosPortStatsRxMcastPkts=wwpLeosPortStatsRxMcastPkts, wwpLeosPortHCStatsTxMcastPkts=wwpLeosPortHCStatsTxMcastPkts, wwpLeosPortHCStatsLastChange=wwpLeosPortHCStatsLastChange, wwpLeosPortTotalHCStatsTxBytes=wwpLeosPortTotalHCStatsTxBytes, wwpLeosPortTotalHCStatsTxSingleCollPkts=wwpLeosPortTotalHCStatsTxSingleCollPkts, wwpLeosPortTotalHCStatsTx128To255BytePkts=wwpLeosPortTotalHCStatsTx128To255BytePkts, wwpLeosPortTotalHCStats65To127BytePkts=wwpLeosPortTotalHCStats65To127BytePkts, wwpLeosPortStatsTx512To1023BytePkts=wwpLeosPortStatsTx512To1023BytePkts, wwpLeosPortTotalStatsTxCollPkts=wwpLeosPortTotalStatsTxCollPkts, wwpLeosPortHCStatsTxPkts=wwpLeosPortHCStatsTxPkts, wwpLeosPortTotalHCStatsRxBytes=wwpLeosPortTotalHCStatsRxBytes, wwpLeosPortTotalHCStatsTxExDeferPkts=wwpLeosPortTotalHCStatsTxExDeferPkts, wwpLeosPortStatsTxSingleCollPkts=wwpLeosPortStatsTxSingleCollPkts, wwpLeosPortTotalHCStatsRxDropPkts=wwpLeosPortTotalHCStatsRxDropPkts, wwpLeosPortTotalStatsFragmentPkts=wwpLeosPortTotalStatsFragmentPkts, wwpLeosPortTotalStatsFpgaRxErrorPkts=wwpLeosPortTotalStatsFpgaRxErrorPkts, wwpLeosPortStatsFragmentPkts=wwpLeosPortStatsFragmentPkts, wwpLeosPortTotalStatsRxInErrorPkts=wwpLeosPortTotalStatsRxInErrorPkts, wwpLeosPortTotalHCStats256To511BytePkts=wwpLeosPortTotalHCStats256To511BytePkts, wwpLeosPortTotalHCStats128To255BytePkts=wwpLeosPortTotalHCStats128To255BytePkts, wwpLeosPortStatsRxInErrorPkts=wwpLeosPortStatsRxInErrorPkts, wwpLeosPortTotalStatsTxUcastPkts=wwpLeosPortTotalStatsTxUcastPkts, wwpLeosPortTotalHCStatsTx4096To9216BytePkts=wwpLeosPortTotalHCStatsTx4096To9216BytePkts, wwpLeosPortStatsTx2048To4095BytePkts=wwpLeosPortStatsTx2048To4095BytePkts, wwpLeosPortStatsTxFpgaBufferDropPkts=wwpLeosPortStatsTxFpgaBufferDropPkts, wwpLeosPortTotalHCStatsTx1024To1518BytePkts=wwpLeosPortTotalHCStatsTx1024To1518BytePkts, wwpLeosPortHCStatsJabberPkts=wwpLeosPortHCStatsJabberPkts, wwpLeosPortStatsMIBGroups=wwpLeosPortStatsMIBGroups, wwpLeosPortStatsMIBConformance=wwpLeosPortStatsMIBConformance, wwpLeosPortHCStatsTxBytes=wwpLeosPortHCStatsTxBytes, wwpLeosPortTotalHCStatsTx2048To4095BytePkts=wwpLeosPortTotalHCStatsTx2048To4095BytePkts, wwpLeosPortStatsTxCrcErrorPkts=wwpLeosPortStatsTxCrcErrorPkts, wwpLeosPortHCStatsLastRefresh=wwpLeosPortHCStatsLastRefresh, wwpLeosPortTotalHCStats2048To4095BytePkts=wwpLeosPortTotalHCStats2048To4095BytePkts, wwpLeosPortHCStatsTx1519To2047BytePkts=wwpLeosPortHCStatsTx1519To2047BytePkts, wwpLeosPortStatsTx128To255BytePkts=wwpLeosPortStatsTx128To255BytePkts, wwpLeosPortTotalHCStatsTxCrcErrorPkts=wwpLeosPortTotalHCStatsTxCrcErrorPkts, wwpLeosPortTotalStatsTxFpgaBufferDropPkts=wwpLeosPortTotalStatsTxFpgaBufferDropPkts, wwpLeosPortHCStatsTx512To1023BytePkts=wwpLeosPortHCStatsTx512To1023BytePkts, wwpLeosPortStatsTx65To127BytePkts=wwpLeosPortStatsTx65To127BytePkts, wwpLeosPortStatsTx1024To1518BytePkts=wwpLeosPortStatsTx1024To1518BytePkts, wwpLeosPortHCStatsUndersizePkts=wwpLeosPortHCStatsUndersizePkts, wwpLeosPortStatsTx64BytePkts=wwpLeosPortStatsTx64BytePkts, wwpLeosPortTotalStatsTxGiantPkts=wwpLeosPortTotalStatsTxGiantPkts, wwpLeosPortTotalStatsTx65To127BytePkts=wwpLeosPortTotalStatsTx65To127BytePkts, wwpLeosPortTotalStatsTxLOutRangePkts=wwpLeosPortTotalStatsTxLOutRangePkts, wwpLeosPortTotalStatsRxFpgaBufferDropPkts=wwpLeosPortTotalStatsRxFpgaBufferDropPkts, wwpLeosPortHCStatsFragmentPkts=wwpLeosPortHCStatsFragmentPkts, wwpLeosPortHCStatsTxTBytes=wwpLeosPortHCStatsTxTBytes, wwpLeosPortStatsTxBytes=wwpLeosPortStatsTxBytes, wwpLeosPortTotalStatsTxLateCollPkts=wwpLeosPortTotalStatsTxLateCollPkts, wwpLeosPortTotalStatsTxMcastPkts=wwpLeosPortTotalStatsTxMcastPkts, wwpLeosPortTotalStats1519To2047BytePkts=wwpLeosPortTotalStats1519To2047BytePkts, wwpLeosPortHCStats1519To2047BytePkts=wwpLeosPortHCStats1519To2047BytePkts, wwpLeosPortTotalHCStatsEntry=wwpLeosPortTotalHCStatsEntry, wwpLeosPortStatsFpgaRxIpCrcErrorPkts=wwpLeosPortStatsFpgaRxIpCrcErrorPkts, wwpLeosPortTotalStatsRxLOutRangePkts=wwpLeosPortTotalStatsRxLOutRangePkts, wwpLeosPortTotalHCStatsLastRefresh=wwpLeosPortTotalHCStatsLastRefresh, wwpLeosPortTotalHCStats1519To2047BytePkts=wwpLeosPortTotalHCStats1519To2047BytePkts, wwpLeosPortHCStatsTxExDeferPkts=wwpLeosPortHCStatsTxExDeferPkts, wwpLeosPortStats2048To4095BytePkts=wwpLeosPortStats2048To4095BytePkts, wwpLeosPortStatsPortLinkUp=wwpLeosPortStatsPortLinkUp, wwpLeosPortTotalStatsFpgaRxCrcErrorPkts=wwpLeosPortTotalStatsFpgaRxCrcErrorPkts, wwpLeosPortHCStatsTxBcastPkts=wwpLeosPortHCStatsTxBcastPkts, wwpLeosPortHCStats512To1023BytePkts=wwpLeosPortHCStats512To1023BytePkts, wwpLeosPortStatsRxPkts=wwpLeosPortStatsRxPkts, wwpLeosPortTotalStatsFpgaRxIpCrcErrorPkts=wwpLeosPortTotalStatsFpgaRxIpCrcErrorPkts, wwpLeosPortTotalStats64BytePkts=wwpLeosPortTotalStats64BytePkts, wwpLeosPortHCStatsRxPausePkts=wwpLeosPortHCStatsRxPausePkts, wwpLeosPortTotalHCStatsTx65To127BytePkts=wwpLeosPortTotalHCStatsTx65To127BytePkts, wwpLeosPortHCStatsTxCollPkts=wwpLeosPortHCStatsTxCollPkts, wwpLeosPortTotalStatsTx512To1023BytePkts=wwpLeosPortTotalStatsTx512To1023BytePkts, wwpLeosPortTotalHCStatsJabberPkts=wwpLeosPortTotalHCStatsJabberPkts, wwpLeosPortTotalHCStatsRxPkts=wwpLeosPortTotalHCStatsRxPkts, wwpLeosPortStatsTx256To511BytePkts=wwpLeosPortStatsTx256To511BytePkts, wwpLeosPortTotalStatsJabberPkts=wwpLeosPortTotalStatsJabberPkts)
mibBuilder.exportSymbols("WWP-LEOS-PORT-STATS-MIB", )
