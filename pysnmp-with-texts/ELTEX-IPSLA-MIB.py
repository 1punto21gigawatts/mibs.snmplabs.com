#
# PySNMP MIB module ELTEX-IPSLA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-IPSLA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:00:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
eltexLtd, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "eltexLtd")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, IpAddress, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, TimeTicks, ModuleIdentity, MibIdentifier, Counter64, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "IpAddress", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64", "Integer32", "Bits")
TimeStamp, TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
eltexIpSlaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 32))
if mibBuilder.loadTexts: eltexIpSlaMIB.setLastUpdated('201505250000Z')
if mibBuilder.loadTexts: eltexIpSlaMIB.setOrganization('Eltex Ltd.')
if mibBuilder.loadTexts: eltexIpSlaMIB.setContactInfo('http://www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltexIpSlaMIB.setDescription('This module defines a MIB for IP Service Level Agreements Application. IP SLA operations allows to analyze IP service levels by using active traffic monitoring. Each of IP SLA operation is described by protocol it uses and type of performance metric. IP SLA Objects |--- Application Group | |--- Responder Administration | |--- UDP Jitter Responder Defenitions | |--- Administration Group | |--- Overall Control Administration | |--- ICMP Echo Administration Definitions | |--- UDP Jitter Administration Definitions | |--- Statistics Collection Group | |--- Overall Control Statistics | |--- ICMP Echo Statistics Definitions | |--- UDP Jitter Statistics Definitions | |--- Schedule Configuration | |--- History Collection Group IP SLA Notifications | ')
eltexIpSlaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 32, 1))
eltexIpSlaAppl = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 32, 1, 1))
eltexIpSlaAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2))
eltexIpSlaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3))
eltexIpSlaSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 32, 1, 4))
class EltexIpSlaOperationType(TextualConvention, Integer32):
    description = 'Specifies the type of IP SLA operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("icmp-echo", 1), ("udp-jitter", 2))

class EltexIpSlaOperationStatus(TextualConvention, Integer32):
    description = 'Specifies the status of IP SLA operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

eltexIpSlaApplResponder = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 32, 1, 1, 13))
eltexIpSlaApplResponderUdpJitterPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 32, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaApplResponderUdpJitterPort.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaApplResponderUdpJitterPort.setDescription('Defines UDP port number which is listened by IP SLA responder for UDP Jitter operations')
eltexIpSlaAdminCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlTable.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlTable.setDescription("A table of IP SLA overall control administration definitions. The IP SLA control is located in multiple tables. This first table defines the most common SLA configuration. The following tables contain objects which configure scheduling, information gathering, and notification generation. All of these tables using this table's index as their own.")
eltexIpSlaAdminCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ELTEX-IPSLA-MIB", "eltexIpSlaAdminCtrlIndex"))
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlEntry.setDescription('A row entry representing a single IP SLA operation.')
eltexIpSlaAdminCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlIndex.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlIndex.setDescription('This field specifies index for all IP SLA tables. Rows with identic index in each of following tables describes the same IP SLA operation as this table does.')
eltexIpSlaAdminCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 2), EltexIpSlaOperationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlType.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlType.setDescription('This field specifies type of IP SLA operation.')
eltexIpSlaAdminCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 3), EltexIpSlaOperationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlStatus.setDescription('This field specifies status of IP SLA operation.')
eltexIpSlaAdminCtrlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlFrequency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlFrequency.setDescription('Specifies the duration between initiating each IP SLA operation. This object cannot be set to a value which would be a shorter duration than operation timeout.')
eltexIpSlaAdminCtrlTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlTag.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlTag.setDescription('The field provides description tag for IP SLA operation.')
eltexIpSlaAdminCtrlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlOwner.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlOwner.setDescription('The field describes owner of the IP SLA operation.')
eltexIpSlaAdminCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminCtrlRowStatus.setDescription('The status of the MIB entry.')
eltexIpSlaAdminIcmpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTable.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTable.setDescription('A table of ICMP Echo operation definitions.')
eltexIpSlaAdminIcmpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ELTEX-IPSLA-MIB", "eltexIpSlaAdminIcmpEchoIndex"))
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoEntry.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoEntry.setDescription('A row entry representing a single ICMP Echo operation.')
eltexIpSlaAdminIcmpEchoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoIndex.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoIndex.setDescription('This field specifies index for ICMP Echo operation. Index of each row must match the index in eltexIpSlaAdminCtrl table.')
eltexIpSlaAdminIcmpEchoTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTargetAddress.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTargetAddress.setDescription('A string which specifies IP address of the destination.')
eltexIpSlaAdminIcmpEchoSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoSourceAddress.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoSourceAddress.setDescription('A string which specifies the source IP address.')
eltexIpSlaAdminIcmpEchoSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoSourceInterface.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoSourceInterface.setDescription('A string which specifies the source interface.')
eltexIpSlaAdminIcmpEchoTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTimeOut.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTimeOut.setDescription('Specifies the duration to wait for a IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
eltexIpSlaAdminIcmpEchoReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1432)).clone(56)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoReqDataSize.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoReqDataSize.setDescription('This object represents the number of octets to be placed into packages send during IP SLA operation')
eltexIpSlaAdminIcmpEchoTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTOS.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoTOS.setDescription('This object represents the type of service octet in an IP header.')
eltexIpSlaAdminIcmpEchoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminIcmpEchoRowStatus.setDescription('The status of the MIB entry.')
class EltexIpSlaStatsOperStatus(TextualConvention, Integer32):
    description = 'Specifies the status of IP SLA operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("ok", 1), ("failed", 2))

eltexIpSlaAdminUdpJitterTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTable.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTable.setDescription('A table of UDP Jitter operation definitions.')
eltexIpSlaAdminUdpJitterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ELTEX-IPSLA-MIB", "eltexIpSlaAdminUdpJitterIndex"))
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterEntry.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterEntry.setDescription('A row entry representing a single UDP Jitter operation.')
eltexIpSlaAdminUdpJitterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterIndex.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterIndex.setDescription('This field specifies index for UdpJitter operation. Index of each row must match the index in eltexIpSlaAdminCtrl table.')
eltexIpSlaAdminUdpJitterTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTargetAddress.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTargetAddress.setDescription('A string which specifies IP address of the destination.')
eltexIpSlaAdminUdpJitterTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTargetPort.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTargetPort.setDescription('A number of destination UDP port.')
eltexIpSlaAdminUdpJitterSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterSourceAddress.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterSourceAddress.setDescription('A string which specifies the source IP address.')
eltexIpSlaAdminUdpJitterSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterSourcePort.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterSourcePort.setDescription('A number of source UDP port.')
eltexIpSlaAdminUdpJitterSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterSourceInterface.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterSourceInterface.setDescription('A string which specifies the source interface.')
eltexIpSlaAdminUdpJitterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(20)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterInterval.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterInterval.setDescription('This value represents the inter-packet delay between packets and is in milliseconds. This value is currently used for Jitter probe. This object is applicable to jitter probe only.')
eltexIpSlaAdminUdpJitterNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterNumPackets.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterNumPackets.setDescription('This value represents the number of packets that need to be transmitted. This value is currently used for Jitter probe. This object is applicable to jitter probe only.')
eltexIpSlaAdminUdpJitterTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTimeOut.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTimeOut.setDescription('Specifies the duration to wait for a IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
eltexIpSlaAdminUdpJitterReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1432)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterReqDataSize.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterReqDataSize.setDescription('This object represents the number of octets to be placed into packages send during IP SLA operation')
eltexIpSlaAdminUdpJitterTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTOS.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterTOS.setDescription('This object represents the type of service octet in an IP header.')
eltexIpSlaAdminUdpJitterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 2, 3, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaAdminUdpJitterRowStatus.setDescription('The status of the MIB entry.')
eltexIpSlaStatsIcmpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoTable.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoTable.setDescription('The database of ICMP Echo operation statistics.')
eltexIpSlaStatsIcmpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ELTEX-IPSLA-MIB", "eltexIpSlaStatsIcmpEchoIndex"))
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoEntry.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoEntry.setDescription('A row entry representing an IP SLA operation.')
eltexIpSlaStatsIcmpEchoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoIndex.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoIndex.setDescription('The index of ICMP Echo statistics row. It matches the indexes of operations in the Overall Control Group tables.')
eltexIpSlaStatsIcmpEchoLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 2), EltexIpSlaStatsOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoLastStatus.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoLastStatus.setDescription('The string contains a status of the last completed operation.')
eltexIpSlaStatsIcmpEchoLastLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 3), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoLastLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoLastLatency.setDescription('A latency measured during the last completed operation.')
eltexIpSlaStatsIcmpEchoMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 4), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoMinLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoMinLatency.setDescription('The lowest latency measured during all successfully completed operations.')
eltexIpSlaStatsIcmpEchoAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 5), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoAvgLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoAvgLatency.setDescription('The average of latencies measured during all successfully completed operations.')
eltexIpSlaStatsIcmpEchoMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 6), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoMaxLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoMaxLatency.setDescription('The highest of latencies measured during all successfully completed operations.')
eltexIpSlaStatsIcmpEchoOperationsCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoOperationsCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoOperationsCtr.setDescription('Indicates the number of all operations which were tried to perform.')
eltexIpSlaStatsIcmpEchoSuccessesCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoSuccessesCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoSuccessesCtr.setDescription('Indicates the number of successfully completed operations.')
eltexIpSlaStatsIcmpEchoFailuresCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoFailuresCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoFailuresCtr.setDescription('Indicates the number of unsuccessfully completed operations.')
eltexIpSlaStatsIcmpEchoTimeoutCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoTimeoutCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoTimeoutCtr.setDescription('Indicates the number of operations which were failed by timeout.')
eltexIpSlaStatsIcmpEchoUnreachNetCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnreachNetCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnreachNetCtr.setDescription('Indicates the number of operations which were failed due to unreachable net.')
eltexIpSlaStatsIcmpEchoUnreachHostCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnreachHostCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnreachHostCtr.setDescription('Indicates the number of operations which were failed due to unreachable host.')
eltexIpSlaStatsIcmpEchoUnreachProtCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnreachProtCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnreachProtCtr.setDescription('Indicates the number of operations which were failed due to unreachable protocol.')
eltexIpSlaStatsIcmpEchoExTimeTransCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoExTimeTransCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoExTimeTransCtr.setDescription('Indicates the number of operations which were failed due to exceeded TTL in transit.')
eltexIpSlaStatsIcmpEchoExTimeReassCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoExTimeReassCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoExTimeReassCtr.setDescription('Indicates the number of operations which were failed due to exceeded time of fragment reassembly.')
eltexIpSlaStatsIcmpEchoUnableSendCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnableSendCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoUnableSendCtr.setDescription('Indicates the number of operations which were failed while sending a request packet.')
eltexIpSlaStatsIcmpEchoBadReplyCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoBadReplyCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsIcmpEchoBadReplyCtr.setDescription('Indicates the number of operations which were failed due to bad reply data.')
eltexIpSlaStatsUdpJitterTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterTable.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterTable.setDescription('The database of UDP Jitter operation statistics.')
eltexIpSlaStatsUdpJitterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ELTEX-IPSLA-MIB", "eltexIpSlaStatsUdpJitterIndex"))
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterEntry.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterEntry.setDescription('A row entry representing an IP SLA operation.')
eltexIpSlaStatsUdpJitterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterIndex.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterIndex.setDescription('The index of UDP Jitter statistics row. It matches the indexes of operations in the Overall Control Group tables.')
eltexIpSlaStatsUdpJitterLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 2), EltexIpSlaStatsOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterLastStatus.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterLastStatus.setDescription('The string contains a status of the last completed operation.')
eltexIpSlaStatsUdpJitterLastLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 3), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterLastLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterLastLatency.setDescription('A two-way latency measured during the last completed operation.')
eltexIpSlaStatsUdpJitterNumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 4), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumLatency.setDescription('The number of two-way latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 5), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumLatency.setDescription('The sum of two-way latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 6), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinLatency.setDescription('The lowest two-way latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgLatency.setDescription('The average of two-way latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 8), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxLatency.setDescription('The highest of two-way latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterNumSDLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumSDLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumSDLatency.setDescription('The number of one-way source-to-destination latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumSDLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 10), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumSDLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumSDLatency.setDescription('The sum of one-way source-to-destination latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinSDLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 11), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinSDLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinSDLatency.setDescription('The lowest one-way source-to-destination latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgSDLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 12), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgSDLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgSDLatency.setDescription('The average one-way source-to-destination latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxSDLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 13), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxSDLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxSDLatency.setDescription('The maximum one-way source-to-destination latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterNumDSLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumDSLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumDSLatency.setDescription('The number of one-way destination-to-source latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumDSLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 15), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumDSLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumDSLatency.setDescription('The sum of one-way destination-to-source latencies measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinDSLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 16), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinDSLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinDSLatency.setDescription('The lowest one-way destination-to-source latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgDSLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 17), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgDSLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgDSLatency.setDescription('The average one-way destination-to-source latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxDSLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 18), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxDSLatency.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxDSLatency.setDescription('The maximum one-way destination-to-source latency measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterNumSDPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumSDPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumSDPosJitter.setDescription('The number of one-way source-to-destination positive jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumSDPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumSDPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumSDPosJitter.setDescription('The sum of one-way source-to-destination positive jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinSDPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 21), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinSDPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinSDPosJitter.setDescription('The lowest one-way source-to-destination positive jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgSDPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 22), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgSDPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgSDPosJitter.setDescription('The average one-way source-to-destination positive jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxSDPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 23), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxSDPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxSDPosJitter.setDescription('The maximum one-way source-to-destination positive jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterNumDSPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumDSPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumDSPosJitter.setDescription('The number of one-way destination-to-source positive jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumDSPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 25), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumDSPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumDSPosJitter.setDescription('The sum of one-way destination-to-source positive jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinDSPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 26), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinDSPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinDSPosJitter.setDescription('The lowest one-way destination-to-source positive jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgDSPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 27), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgDSPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgDSPosJitter.setDescription('The average one-way destination-to-source positive jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxDSPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 28), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxDSPosJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxDSPosJitter.setDescription('The maximum one-way destination-to-source positive jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterNumSDNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumSDNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumSDNegJitter.setDescription('The number of one-way source-to-destination negative jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumSDNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumSDNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumSDNegJitter.setDescription('The sum of one-way source-to-destination negative jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinSDNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 31), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinSDNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinSDNegJitter.setDescription('The lowest one-way source-to-destination negative jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgSDNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 32), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgSDNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgSDNegJitter.setDescription('The average one-way source-to-destination negative jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxSDNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 33), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxSDNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxSDNegJitter.setDescription('The maximum one-way source-to-destination negative jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterNumDSNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumDSNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterNumDSNegJitter.setDescription('The number of one-way destination-to-source negative jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterSumDSNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 35), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumDSNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSumDSNegJitter.setDescription('The sum oflowest one-way destination-to-source negative jitters measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMinDSNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 36), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinDSNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMinDSNegJitter.setDescription('The lowest one-way destination-to-source negative jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterAvgDSNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 37), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgDSNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterAvgDSNegJitter.setDescription('The average one-way destination-to-source negative jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterMaxDSNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 38), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxDSNegJitter.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterMaxDSNegJitter.setDescription('The maximum one-way destination-to-source negative jitter measured during all successfully completed operations.')
eltexIpSlaStatsUdpJitterOperationsCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterOperationsCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterOperationsCtr.setDescription('Indicates the number of all operations which were tried to perform.')
eltexIpSlaStatsUdpJitterSuccessesCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSuccessesCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterSuccessesCtr.setDescription('Indicates the number of successfully completed operations.')
eltexIpSlaStatsUdpJitterFailuresCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterFailuresCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterFailuresCtr.setDescription('Indicates the number of unsuccessfully completed operations.')
eltexIpSlaStatsUdpJitterTimeoutCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterTimeoutCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterTimeoutCtr.setDescription('Indicates the number of operations which were failed by timeout.')
eltexIpSlaStatsUdpJitterUnreachNetCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachNetCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachNetCtr.setDescription('Indicates the number of operations which were failed due to unreachable net.')
eltexIpSlaStatsUdpJitterUnreachHostCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachHostCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachHostCtr.setDescription('Indicates the number of operations which were failed due to unreachable host.')
eltexIpSlaStatsUdpJitterUnreachPortCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachPortCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachPortCtr.setDescription('Indicates the number of operations which were failed due to unreachable UDP port.')
eltexIpSlaStatsUdpJitterUnreachProtCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachProtCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnreachProtCtr.setDescription('Indicates the number of operations which were failed due to unreachable protocol.')
eltexIpSlaStatsUdpJitterExTimeTransCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterExTimeTransCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterExTimeTransCtr.setDescription('Indicates the number of operations which were failed due to exceeded TTL in transit.')
eltexIpSlaStatsUdpJitterExTimeReassCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterExTimeReassCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterExTimeReassCtr.setDescription('Indicates the number of operations which were failed due to exceeded time of fragment reassembly.')
eltexIpSlaStatsUdpJitterUnableSendCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnableSendCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterUnableSendCtr.setDescription('Indicates the number of operations which were failed while sending a request packet.')
eltexIpSlaStatsUdpJitterBadReplyCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterBadReplyCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterBadReplyCtr.setDescription('Indicates the number of operations which were failed due to bad reply data.')
eltexIpSlaStatsUdpJitterPacketsOOSCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 32, 1, 3, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterPacketsOOSCtr.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaStatsUdpJitterPacketsOOSCtr.setDescription('Indicates the number of packets recievied out of sequence.')
eltexIpSlaScheduleStartTrigger = MibScalar((1, 3, 6, 1, 4, 1, 35265, 32, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaScheduleStartTrigger.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaScheduleStartTrigger.setDescription("Writing operation's index in this scalar triggers starting of the operation.")
eltexIpSlaScheduleStopTrigger = MibScalar((1, 3, 6, 1, 4, 1, 35265, 32, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexIpSlaScheduleStopTrigger.setStatus('current')
if mibBuilder.loadTexts: eltexIpSlaScheduleStopTrigger.setDescription("Writing operation's index in this scalar triggers stopping of the operation.")
mibBuilder.exportSymbols("ELTEX-IPSLA-MIB", eltexIpSlaStatsUdpJitterAvgSDPosJitter=eltexIpSlaStatsUdpJitterAvgSDPosJitter, eltexIpSlaStatsUdpJitterMaxSDPosJitter=eltexIpSlaStatsUdpJitterMaxSDPosJitter, eltexIpSlaAdminIcmpEchoTable=eltexIpSlaAdminIcmpEchoTable, eltexIpSlaStatsUdpJitterSumDSLatency=eltexIpSlaStatsUdpJitterSumDSLatency, eltexIpSlaStatsIcmpEchoExTimeReassCtr=eltexIpSlaStatsIcmpEchoExTimeReassCtr, eltexIpSlaAdminIcmpEchoSourceAddress=eltexIpSlaAdminIcmpEchoSourceAddress, eltexIpSlaStatsUdpJitterSumSDNegJitter=eltexIpSlaStatsUdpJitterSumSDNegJitter, eltexIpSlaAdminIcmpEchoSourceInterface=eltexIpSlaAdminIcmpEchoSourceInterface, eltexIpSlaAdminIcmpEchoTOS=eltexIpSlaAdminIcmpEchoTOS, eltexIpSlaAdmin=eltexIpSlaAdmin, eltexIpSlaStatsUdpJitterTable=eltexIpSlaStatsUdpJitterTable, eltexIpSlaStatsUdpJitterSuccessesCtr=eltexIpSlaStatsUdpJitterSuccessesCtr, eltexIpSlaScheduleStopTrigger=eltexIpSlaScheduleStopTrigger, eltexIpSlaStatsIcmpEchoEntry=eltexIpSlaStatsIcmpEchoEntry, eltexIpSlaAdminUdpJitterRowStatus=eltexIpSlaAdminUdpJitterRowStatus, eltexIpSlaStatsUdpJitterBadReplyCtr=eltexIpSlaStatsUdpJitterBadReplyCtr, eltexIpSlaAdminUdpJitterSourceAddress=eltexIpSlaAdminUdpJitterSourceAddress, eltexIpSlaAdminIcmpEchoTargetAddress=eltexIpSlaAdminIcmpEchoTargetAddress, eltexIpSlaApplResponder=eltexIpSlaApplResponder, eltexIpSlaStatsUdpJitterMaxSDNegJitter=eltexIpSlaStatsUdpJitterMaxSDNegJitter, eltexIpSlaAdminCtrlFrequency=eltexIpSlaAdminCtrlFrequency, eltexIpSlaStatsUdpJitterLastLatency=eltexIpSlaStatsUdpJitterLastLatency, eltexIpSlaStatsUdpJitterMinDSPosJitter=eltexIpSlaStatsUdpJitterMinDSPosJitter, eltexIpSlaStatsUdpJitterNumDSNegJitter=eltexIpSlaStatsUdpJitterNumDSNegJitter, eltexIpSlaAdminCtrlStatus=eltexIpSlaAdminCtrlStatus, eltexIpSlaStatsIcmpEchoLastStatus=eltexIpSlaStatsIcmpEchoLastStatus, eltexIpSlaStatsUdpJitterNumLatency=eltexIpSlaStatsUdpJitterNumLatency, eltexIpSlaStatsUdpJitterAvgDSPosJitter=eltexIpSlaStatsUdpJitterAvgDSPosJitter, eltexIpSlaStatsUdpJitterSumDSNegJitter=eltexIpSlaStatsUdpJitterSumDSNegJitter, eltexIpSlaStatsUdpJitterMinLatency=eltexIpSlaStatsUdpJitterMinLatency, eltexIpSlaStatsUdpJitterSumLatency=eltexIpSlaStatsUdpJitterSumLatency, eltexIpSlaSchedule=eltexIpSlaSchedule, eltexIpSlaStatsUdpJitterUnreachProtCtr=eltexIpSlaStatsUdpJitterUnreachProtCtr, eltexIpSlaStatsIcmpEchoAvgLatency=eltexIpSlaStatsIcmpEchoAvgLatency, eltexIpSlaStatsUdpJitterAvgSDLatency=eltexIpSlaStatsUdpJitterAvgSDLatency, EltexIpSlaOperationStatus=EltexIpSlaOperationStatus, eltexIpSlaStatsIcmpEchoExTimeTransCtr=eltexIpSlaStatsIcmpEchoExTimeTransCtr, EltexIpSlaOperationType=EltexIpSlaOperationType, eltexIpSlaStatsUdpJitterExTimeReassCtr=eltexIpSlaStatsUdpJitterExTimeReassCtr, eltexIpSlaAdminUdpJitterTOS=eltexIpSlaAdminUdpJitterTOS, eltexIpSlaStatsUdpJitterUnreachPortCtr=eltexIpSlaStatsUdpJitterUnreachPortCtr, eltexIpSlaStatsUdpJitterMinSDLatency=eltexIpSlaStatsUdpJitterMinSDLatency, eltexIpSlaAppl=eltexIpSlaAppl, eltexIpSlaStatsUdpJitterMinDSLatency=eltexIpSlaStatsUdpJitterMinDSLatency, eltexIpSlaStatsUdpJitterSumDSPosJitter=eltexIpSlaStatsUdpJitterSumDSPosJitter, eltexIpSlaStatsUdpJitterUnreachHostCtr=eltexIpSlaStatsUdpJitterUnreachHostCtr, eltexIpSlaStatsUdpJitterAvgDSLatency=eltexIpSlaStatsUdpJitterAvgDSLatency, eltexIpSlaStatsUdpJitterSumSDLatency=eltexIpSlaStatsUdpJitterSumSDLatency, eltexIpSlaStatsUdpJitterNumDSPosJitter=eltexIpSlaStatsUdpJitterNumDSPosJitter, eltexIpSlaStatsUdpJitterIndex=eltexIpSlaStatsUdpJitterIndex, eltexIpSlaStatsUdpJitterUnreachNetCtr=eltexIpSlaStatsUdpJitterUnreachNetCtr, eltexIpSlaObjects=eltexIpSlaObjects, PYSNMP_MODULE_ID=eltexIpSlaMIB, eltexIpSlaStats=eltexIpSlaStats, eltexIpSlaStatsUdpJitterLastStatus=eltexIpSlaStatsUdpJitterLastStatus, eltexIpSlaStatsIcmpEchoTimeoutCtr=eltexIpSlaStatsIcmpEchoTimeoutCtr, eltexIpSlaAdminCtrlType=eltexIpSlaAdminCtrlType, eltexIpSlaStatsUdpJitterTimeoutCtr=eltexIpSlaStatsUdpJitterTimeoutCtr, eltexIpSlaStatsUdpJitterMinDSNegJitter=eltexIpSlaStatsUdpJitterMinDSNegJitter, eltexIpSlaStatsUdpJitterUnableSendCtr=eltexIpSlaStatsUdpJitterUnableSendCtr, eltexIpSlaStatsUdpJitterNumDSLatency=eltexIpSlaStatsUdpJitterNumDSLatency, eltexIpSlaStatsIcmpEchoMaxLatency=eltexIpSlaStatsIcmpEchoMaxLatency, eltexIpSlaStatsUdpJitterMaxLatency=eltexIpSlaStatsUdpJitterMaxLatency, EltexIpSlaStatsOperStatus=EltexIpSlaStatsOperStatus, eltexIpSlaStatsUdpJitterMaxDSLatency=eltexIpSlaStatsUdpJitterMaxDSLatency, eltexIpSlaStatsIcmpEchoUnreachProtCtr=eltexIpSlaStatsIcmpEchoUnreachProtCtr, eltexIpSlaStatsUdpJitterAvgLatency=eltexIpSlaStatsUdpJitterAvgLatency, eltexIpSlaAdminUdpJitterTable=eltexIpSlaAdminUdpJitterTable, eltexIpSlaStatsIcmpEchoLastLatency=eltexIpSlaStatsIcmpEchoLastLatency, eltexIpSlaStatsUdpJitterExTimeTransCtr=eltexIpSlaStatsUdpJitterExTimeTransCtr, eltexIpSlaAdminIcmpEchoReqDataSize=eltexIpSlaAdminIcmpEchoReqDataSize, eltexIpSlaAdminCtrlRowStatus=eltexIpSlaAdminCtrlRowStatus, eltexIpSlaStatsIcmpEchoUnreachNetCtr=eltexIpSlaStatsIcmpEchoUnreachNetCtr, eltexIpSlaStatsUdpJitterFailuresCtr=eltexIpSlaStatsUdpJitterFailuresCtr, eltexIpSlaStatsIcmpEchoUnableSendCtr=eltexIpSlaStatsIcmpEchoUnableSendCtr, eltexIpSlaStatsIcmpEchoIndex=eltexIpSlaStatsIcmpEchoIndex, eltexIpSlaStatsIcmpEchoSuccessesCtr=eltexIpSlaStatsIcmpEchoSuccessesCtr, eltexIpSlaStatsUdpJitterMaxDSPosJitter=eltexIpSlaStatsUdpJitterMaxDSPosJitter, eltexIpSlaAdminUdpJitterTargetAddress=eltexIpSlaAdminUdpJitterTargetAddress, eltexIpSlaStatsUdpJitterAvgSDNegJitter=eltexIpSlaStatsUdpJitterAvgSDNegJitter, eltexIpSlaStatsUdpJitterNumSDNegJitter=eltexIpSlaStatsUdpJitterNumSDNegJitter, eltexIpSlaStatsUdpJitterMinSDPosJitter=eltexIpSlaStatsUdpJitterMinSDPosJitter, eltexIpSlaStatsUdpJitterNumSDLatency=eltexIpSlaStatsUdpJitterNumSDLatency, eltexIpSlaAdminCtrlTable=eltexIpSlaAdminCtrlTable, eltexIpSlaAdminUdpJitterNumPackets=eltexIpSlaAdminUdpJitterNumPackets, eltexIpSlaAdminCtrlTag=eltexIpSlaAdminCtrlTag, eltexIpSlaStatsIcmpEchoBadReplyCtr=eltexIpSlaStatsIcmpEchoBadReplyCtr, eltexIpSlaAdminIcmpEchoTimeOut=eltexIpSlaAdminIcmpEchoTimeOut, eltexIpSlaAdminIcmpEchoIndex=eltexIpSlaAdminIcmpEchoIndex, eltexIpSlaAdminUdpJitterReqDataSize=eltexIpSlaAdminUdpJitterReqDataSize, eltexIpSlaAdminCtrlOwner=eltexIpSlaAdminCtrlOwner, eltexIpSlaAdminCtrlIndex=eltexIpSlaAdminCtrlIndex, eltexIpSlaStatsUdpJitterNumSDPosJitter=eltexIpSlaStatsUdpJitterNumSDPosJitter, eltexIpSlaStatsUdpJitterSumSDPosJitter=eltexIpSlaStatsUdpJitterSumSDPosJitter, eltexIpSlaApplResponderUdpJitterPort=eltexIpSlaApplResponderUdpJitterPort, eltexIpSlaAdminUdpJitterInterval=eltexIpSlaAdminUdpJitterInterval, eltexIpSlaStatsIcmpEchoMinLatency=eltexIpSlaStatsIcmpEchoMinLatency, eltexIpSlaStatsUdpJitterPacketsOOSCtr=eltexIpSlaStatsUdpJitterPacketsOOSCtr, eltexIpSlaStatsIcmpEchoUnreachHostCtr=eltexIpSlaStatsIcmpEchoUnreachHostCtr, eltexIpSlaAdminUdpJitterTargetPort=eltexIpSlaAdminUdpJitterTargetPort, eltexIpSlaAdminUdpJitterEntry=eltexIpSlaAdminUdpJitterEntry, eltexIpSlaAdminUdpJitterSourceInterface=eltexIpSlaAdminUdpJitterSourceInterface, eltexIpSlaStatsIcmpEchoOperationsCtr=eltexIpSlaStatsIcmpEchoOperationsCtr, eltexIpSlaStatsIcmpEchoFailuresCtr=eltexIpSlaStatsIcmpEchoFailuresCtr, eltexIpSlaAdminIcmpEchoRowStatus=eltexIpSlaAdminIcmpEchoRowStatus, eltexIpSlaAdminCtrlEntry=eltexIpSlaAdminCtrlEntry, eltexIpSlaAdminIcmpEchoEntry=eltexIpSlaAdminIcmpEchoEntry, eltexIpSlaStatsUdpJitterMaxSDLatency=eltexIpSlaStatsUdpJitterMaxSDLatency, eltexIpSlaStatsUdpJitterOperationsCtr=eltexIpSlaStatsUdpJitterOperationsCtr, eltexIpSlaScheduleStartTrigger=eltexIpSlaScheduleStartTrigger, eltexIpSlaStatsUdpJitterEntry=eltexIpSlaStatsUdpJitterEntry, eltexIpSlaMIB=eltexIpSlaMIB, eltexIpSlaStatsUdpJitterMinSDNegJitter=eltexIpSlaStatsUdpJitterMinSDNegJitter, eltexIpSlaStatsUdpJitterMaxDSNegJitter=eltexIpSlaStatsUdpJitterMaxDSNegJitter, eltexIpSlaStatsIcmpEchoTable=eltexIpSlaStatsIcmpEchoTable, eltexIpSlaAdminUdpJitterTimeOut=eltexIpSlaAdminUdpJitterTimeOut, eltexIpSlaStatsUdpJitterAvgDSNegJitter=eltexIpSlaStatsUdpJitterAvgDSNegJitter, eltexIpSlaAdminUdpJitterSourcePort=eltexIpSlaAdminUdpJitterSourcePort, eltexIpSlaAdminUdpJitterIndex=eltexIpSlaAdminUdpJitterIndex)
