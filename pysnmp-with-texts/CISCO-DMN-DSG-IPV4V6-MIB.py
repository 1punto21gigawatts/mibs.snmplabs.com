#
# PySNMP MIB module CISCO-DMN-DSG-IPV4V6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-IPV4V6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, IpAddress, ObjectIdentity, ModuleIdentity, Integer32, Unsigned32, Counter32, NotificationType, TimeTicks, Bits, Counter64, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Integer32", "Unsigned32", "Counter32", "NotificationType", "TimeTicks", "Bits", "Counter64", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoDSGIPv4v6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25))
ciscoDSGIPv4v6.setRevisions(('2012-03-20 11:00', '2010-08-30 11:00', '2010-04-30 05:00', '2010-04-12 05:00', '2010-03-22 05:00', '2009-12-20 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGIPv4v6.setRevisionsDescriptions(('V01.00.05 2012-03-20 Updated for D9854 R4 Release.', 'V01.00.04 2010-08-30 Updated for adherence to SNMPv2 format.', 'V01.00.03 2010-04-30 The access type of ipConfigV4V6Flag is changed to read-only. IPV6 settings objects are commented.', 'V01.00.02 2010-04-12 New IP config (IPV6) objects are added.', 'V01.00.01 2010-03-22 The Syntax of Unsigned32 MIB objects whose range is within the range of Integer32, is updated to Integer32.', 'V01.00.00 2009-12-20 Initial Version.',))
if mibBuilder.loadTexts: ciscoDSGIPv4v6.setLastUpdated('201203201100Z')
if mibBuilder.loadTexts: ciscoDSGIPv4v6.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGIPv4v6.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGIPv4v6.setDescription('Cisco IPv4v6 MIB.')
ipV4v6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2))
macInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 1), )
if mibBuilder.loadTexts: macInfoTable.setStatus('current')
if mibBuilder.loadTexts: macInfoTable.setDescription('Media Access Control( MAC ) information Table.')
macInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-IPV4V6-MIB", "macInfoMacIndex"))
if mibBuilder.loadTexts: macInfoEntry.setStatus('current')
if mibBuilder.loadTexts: macInfoEntry.setDescription('Port Entry index.')
macInfoMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macInfoMacIndex.setStatus('current')
if mibBuilder.loadTexts: macInfoMacIndex.setDescription('Port Index.')
macInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macInfoMacAddr.setStatus('current')
if mibBuilder.loadTexts: macInfoMacAddr.setDescription('Port MAC Address.')
ipConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2), )
if mibBuilder.loadTexts: ipConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipConfigTable.setDescription('IP configuration table.')
ipConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-IPV4V6-MIB", "ipConfigPortIdKey"))
if mibBuilder.loadTexts: ipConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ipConfigEntry.setDescription('Entry for IP configuration table.')
ipConfigPortIdKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipConfigPortIdKey.setStatus('current')
if mibBuilder.loadTexts: ipConfigPortIdKey.setDescription('The port Id.')
ipConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigName.setStatus('current')
if mibBuilder.loadTexts: ipConfigName.setDescription('Port(Interface) name.')
ipConfigCurIPAddressV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigCurIPAddressV4.setStatus('current')
if mibBuilder.loadTexts: ipConfigCurIPAddressV4.setDescription('The decoder IPv4 address. Format: ###.###.###.###, Range of ### is 0 to 255.')
ipConfigCurNetworkMaskV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigCurNetworkMaskV4.setStatus('current')
if mibBuilder.loadTexts: ipConfigCurNetworkMaskV4.setDescription('Unit IPv4 CIDR Mask: 8-30 bits.')
ipConfigCurDefaultGatewayV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigCurDefaultGatewayV4.setStatus('current')
if mibBuilder.loadTexts: ipConfigCurDefaultGatewayV4.setDescription('The default gateway IPv4 address. Format: ###.###.###.###, Range of ### is 0 to 255.')
ipConfigV4V6Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipConfigV4V6Flag.setStatus('current')
if mibBuilder.loadTexts: ipConfigV4V6Flag.setDescription('IPv4 or IPv6 IP address type.')
ipConfigPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto", 1), ("hd10", 2), ("fd10", 3), ("hd100", 4), ("fd100", 5), ("hd1000", 6), ("fd1000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigPortMode.setStatus('current')
if mibBuilder.loadTexts: ipConfigPortMode.setDescription('Interface connection mode.')
ethStatusLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatusLink.setStatus('current')
if mibBuilder.loadTexts: ethStatusLink.setDescription('Port link state.')
ethStatusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatusSpeed.setStatus('current')
if mibBuilder.loadTexts: ethStatusSpeed.setDescription('Port link speed.')
ethStatusDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatusDuplex.setStatus('current')
if mibBuilder.loadTexts: ethStatusDuplex.setDescription('Port link duplex state.')
ethStatusXover = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatusXover.setStatus('current')
if mibBuilder.loadTexts: ethStatusXover.setDescription('Port link crossover mode.')
ethBackupTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3), )
if mibBuilder.loadTexts: ethBackupTable.setStatus('current')
if mibBuilder.loadTexts: ethBackupTable.setDescription('Ethernet Backup table.')
ethBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3, 1), ).setIndexNames((0, "CISCO-DMN-DSG-IPV4V6-MIB", "ethBackupIndex"))
if mibBuilder.loadTexts: ethBackupEntry.setStatus('current')
if mibBuilder.loadTexts: ethBackupEntry.setDescription('Entry for Ethernet Backup table.')
ethBackupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBackupIndex.setStatus('current')
if mibBuilder.loadTexts: ethBackupIndex.setDescription('Index into Ethernet Backup Table.')
ethBackupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mirroring", 1), ("backupPrimaryData1", 2), ("backupPrimaryData2", 3), ("manualData1", 4), ("manualData2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBackupMode.setStatus('current')
if mibBuilder.loadTexts: ethBackupMode.setDescription('Ethernet Backup Mode.')
ethBackupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonRevertive", 1), ("revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBackupDirection.setStatus('current')
if mibBuilder.loadTexts: ethBackupDirection.setDescription('Ethernet Backup Direction.')
ethBackupDelayForward = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBackupDelayForward.setStatus('current')
if mibBuilder.loadTexts: ethBackupDelayForward.setDescription('Ethernet Backup Forward Delay in ms.')
ethBackupDelayBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBackupDelayBack.setStatus('current')
if mibBuilder.loadTexts: ethBackupDelayBack.setDescription('Ethernet Backup Back Delay in seconds.')
ethBackupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 4), )
if mibBuilder.loadTexts: ethBackupStatusTable.setStatus('current')
if mibBuilder.loadTexts: ethBackupStatusTable.setDescription('Ethernet Backup Status table.')
ethBackupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 4, 1), ).setIndexNames((0, "CISCO-DMN-DSG-IPV4V6-MIB", "ethBackupStatusIndex"))
if mibBuilder.loadTexts: ethBackupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ethBackupStatusEntry.setDescription('Entry for Ethernet Backup Status table.')
ethBackupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBackupStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ethBackupStatusIndex.setDescription('Index into Ethernet Backup Status Table.')
ethBackupStatusPortsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBackupStatusPortsInUse.setStatus('current')
if mibBuilder.loadTexts: ethBackupStatusPortsInUse.setDescription('Ethernet ports in use.')
ethBackupStatusChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBackupStatusChangeReason.setStatus('current')
if mibBuilder.loadTexts: ethBackupStatusChangeReason.setDescription('Ethernet backup change reason.')
ethBackupStatusChangeDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 25, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBackupStatusChangeDateTime.setStatus('current')
if mibBuilder.loadTexts: ethBackupStatusChangeDateTime.setDescription('Time of last ethernet backup change.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-IPV4V6-MIB", macInfoMacAddr=macInfoMacAddr, ethBackupMode=ethBackupMode, macInfoMacIndex=macInfoMacIndex, ipConfigPortIdKey=ipConfigPortIdKey, ipConfigName=ipConfigName, ethBackupIndex=ethBackupIndex, ipConfigPortMode=ipConfigPortMode, ethBackupStatusChangeReason=ethBackupStatusChangeReason, macInfoEntry=macInfoEntry, ethStatusSpeed=ethStatusSpeed, ethBackupStatusEntry=ethBackupStatusEntry, ciscoDSGIPv4v6=ciscoDSGIPv4v6, ipConfigTable=ipConfigTable, ethBackupDelayBack=ethBackupDelayBack, ethStatusXover=ethStatusXover, ethBackupDelayForward=ethBackupDelayForward, ethBackupStatusChangeDateTime=ethBackupStatusChangeDateTime, ethBackupTable=ethBackupTable, ethBackupEntry=ethBackupEntry, PYSNMP_MODULE_ID=ciscoDSGIPv4v6, ethBackupDirection=ethBackupDirection, ipConfigCurDefaultGatewayV4=ipConfigCurDefaultGatewayV4, ethBackupStatusTable=ethBackupStatusTable, ipConfigEntry=ipConfigEntry, ethBackupStatusPortsInUse=ethBackupStatusPortsInUse, ipConfigCurIPAddressV4=ipConfigCurIPAddressV4, ipConfigV4V6Flag=ipConfigV4V6Flag, ethStatusLink=ethStatusLink, ipConfigCurNetworkMaskV4=ipConfigCurNetworkMaskV4, ipV4v6Table=ipV4v6Table, ethBackupStatusIndex=ethBackupStatusIndex, macInfoTable=macInfoTable, ethStatusDuplex=ethStatusDuplex)
