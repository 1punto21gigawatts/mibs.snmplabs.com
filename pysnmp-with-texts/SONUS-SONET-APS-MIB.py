#
# PySNMP MIB module SONUS-SONET-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-SONET-APS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, NotificationType, TimeTicks, ObjectIdentity, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Integer32, Unsigned32, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "NotificationType", "TimeTicks", "ObjectIdentity", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Integer32", "Unsigned32", "MibIdentifier", "IpAddress")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
sonusServicesMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusServicesMIBs")
sonusSonetApsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9))
if mibBuilder.loadTexts: sonusSonetApsMIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusSonetApsMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusSonetApsMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusSonetApsMIB.setDescription("The MIB module for managing SONET linear Automatic Protection Switching (APS) architectures. The objects defined in this MIB are based on the following industry references: 1. ANSI T1.105.01-1995, 'Synchronous Optical Network (SONET) - Automatic Protection Switching'. 2. Telcordia Technologies (Bellcore) GR-253-CORE, Issue 2, Revision 2 (January 1999), 'SONET Transport Systems: Common Criteria References' sections 5.3 and 6.2.1.1.6.")
class ApsK1K2(TextualConvention, Integer32):
    reference = 'This Textual Convention describes an object that contains the K1 and K2 bytes in the SONET APS channel protocol message field. K1 is located in the first octet. Bits 1-4 of the K1 byte indicate a request. 1111 Lockout of Protection 1110 Forced Switch 1101 SF - High Priority 1100 SF - Low Priority 1011 SD - High Priority 1010 SD - Low Priority 1001 not used 1000 Manual Switch 0111 not used 0110 Wait-to-Restore 0101 not used 0100 Exercise 0011 not used 0010 Reverse Request 0001 Do Not Revert 0000 No Request Bits 5-8 of the K1 byte indicate the channel associated with the request defined in bits 1-4. 0 is the Null channel 1-14 are working channels. 15 is the extra traffic channel K2 is located in the second octet. Bits 1-4 of the K2 byte indicate a channel. The channel is defined with the same syntax as K1 Bits 5-8. Bits 5 of the K2 byte indicates the architecture. 0 if the architecture is 1+1 1 if the architecture is 1:n Bits 6-8 of the K2 byte indicates the mode. 000 - 011 are reserved for future use 100 indicates the mode is unidirectional 101 indicates the mode is bidirectional 110 RDI-L 111 AIS-L '
    description = 'This Textual Convention describes an object that contains the K1 and K2 bytes in the SONET APS channel protocol message field. K1 is located in the first octet. Bits 1-4 of the K1 byte indicate a request. 1111 Lockout of Protection 1110 Forced Switch 1101 SF - High Priority 1100 SF - Low Priority 1011 SD - High Priority 1010 SD - Low Priority 1001 not used 1000 Manual Switch 0111 not used 0110 Wait-to-Restore 0101 not used 0100 Exercise 0011 not used 0010 Reverse Request 0001 Do Not Revert 0000 No Request Bits 5-8 of the K1 byte indicate the channel associated with the request defined in bits 1-4. 0 is the Null channel 1-14 are working channels. 15 is the extra traffic channel K2 is located in the second octet. Bits 1-4 of the K2 byte indicate a channel. The channel is defined with the same syntax as K1 Bits 5-8. Bits 5 of the K2 byte indicates the architecture. 0 if the architecture is 1+1 1 if the architecture is 1:n Bits 6-8 of the K2 byte indicates the mode. 000 - 011 are reserved for future use 100 indicates the mode is unidirectional 101 indicates the mode is bidirectional 110 RDI-L 111 AIS-L '
    status = 'current'

sonusSonetApsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1))
sonusApsGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupCount.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupCount.setDescription('The number of APS groups currently active.')
sonusApsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2), )
if mibBuilder.loadTexts: sonusApsGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupTable.setDescription('This table provides the configuration and status information for SONET APS groups.')
sonusApsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1), ).setIndexNames((0, "SONUS-SONET-APS-MIB", "sonusApsGroupId"))
if mibBuilder.loadTexts: sonusApsGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupEntry.setDescription('An entry in the SONET APS group table.')
sonusApsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: sonusApsGroupId.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupId.setDescription("The ifIndex for the SONET line that is the designated Protection line. The protection line's ifIndex provides a unique id for the group which it protects.")
sonusApsGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupStatus.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupStatus.setDescription('The status of the MIB table entry (row). See SNMPv2-TC for the definition and use of RowStatus.')
sonusApsGroupArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToN", 2), ("resilientUNI", 3))).clone('onePlusOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupArchitecture.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupArchitecture.setDescription('The linear APS architecure for this group of lines. An attempt to create a row in this table indicating the 1:n architecture on an LTE that only supports the 1+1 architecture shall result in an inconstentValue error.')
sonusApsGroupAdminDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupAdminDirection.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupAdminDirection.setDescription('The desired APS directional mode that the APS group is to operate in. The default for the 1+1 architecture is unidirectional. The default for the 1:n architecture is bidirectional.')
sonusApsGroupAdminSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2))).clone('nonrevertive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupAdminSwitching.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupAdminSwitching.setDescription('The desired APS switching mode that the APS channel is to operate in. This variable is only provided if the sonusApsGroupArchitecture is onePlusOne(1).')
sonusApsGroupExtraTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupExtraTraffic.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupExtraTraffic.setDescription("Extra traffic may be carried on the protection channel in a 1:n architecture if this variable is enabled. It may be necessary to disable this in order to interwork with other SONET network elements that don't support extra traffic. This variable is not provided if the sonusApsGroupArchitecture is onePlusOne(1).")
sonusApsGroupSignalFailBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupSignalFailBerThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupSignalFailBerThreshold.setDescription('The BER threshold at which a Signal Fail is declared. The value is the negative power of 10 (n - where threshold is 1x10**-n).')
sonusApsGroupSignalDegradeBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupSignalDegradeBerThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupSignalDegradeBerThreshold.setDescription('The BER threshold at which a Signal Degrade is declared. The value is the negative power of 10 (n - where threshold is 1x10**-n).')
sonusApsGroupWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupWaitToRestoreTime.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupWaitToRestoreTime.setDescription('The Wait to Restore (WTR) Time in minutes.')
sonusApsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsGroupName.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupName.setDescription('A textual name for the APS group.')
sonusApsGroupSwitchedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupSwitchedChannel.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupSwitchedChannel.setDescription('The number of the working channel that is currently being switched to the protection line. If no working channel is being switched, this value is zero (0). If the protection line is being used for extra traffic, this value is 15.')
sonusApsGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 12), Bits().clone(namedValues=NamedValues(("extraTraffic", 0), ("protectionSwitchingByteDefect", 1), ("channelMismatch", 2), ("apsModeMismatch", 3), ("farEndProtectionLineDefect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupOperStatus.setDescription("The current status of the APS group. Bit 0 - Extra Traffic. Indicates that extra traffic is currently being accepted on the protection line. Bit 1 - Protection Switching Byte Defect. Indicates that either an inconsistent APS byte or an invalid code has been detected. Bit 2 - Channel Mismatch. Indicates that a mismatch between the transmitted K1 channel and the received K2 channel has been detected. Bit 3 - APS Mode Mismatch. Indicates a conflict between the current local mode and the received K2 mode information. Modes other than 1+1 unidirectional monitor protection line: K2 bit 5 indicates the architecture; K2 bits 6-8 indicate if the mode is unidirectional or bidirectional. Bit 4 - Far-End Protection-Line Defect. Indicates the LTE received an SF code for the protection line, which means that the far-end LTE is no longer receiving its request, or (in bidirectional operation) the far-end LTE considers the near-end LTE's request to be invalid.")
sonusApsGroupK1K2Received = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 13), ApsK1K2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupK1K2Received.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupK1K2Received.setDescription('The current value of the K1 and K2 bytes received on the protection line.')
sonusApsGroupK1K2Transmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 14), ApsK1K2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupK1K2Transmitted.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupK1K2Transmitted.setDescription('The current value of the K1 and K2 bytes transmitted on the protection line.')
sonusApsGroupProtectionSwitchingByteFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupProtectionSwitchingByteFailures.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupProtectionSwitchingByteFailures.setDescription('A count of APS Protection Switching Byte failures. A Protection Switching Byte defect occurs when either an inconsistent APS byte or an invalid code is detected. An inconsistent APS byte occurs when no three consecutive K1 bytes of the last 12 successive frames are identical, starting with the last frame containing a previously consistent byte. An invalid code occurs when the incoming K1 byte contains an unused code, or a code irrelevant for the specific switching operation (e.g., Reverse Request while no switching request is outstanding) in three consecutive frames. An invalid code also occurs when the incoming K1 byte contains an invalid channel number in three consecutive frames.')
sonusApsGroupChannelMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupChannelMismatches.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupChannelMismatches.setDescription('A count of Channel Mismatch failures. A Channel Mismatch indicates that a mismatch between the transmitted K1 channel and the received K2 channel has been detected. Under normal conditions, a mismatch will occure each time the LTE changes the channel number on its transmitted K1 byte (i.e., when the channel with the highest priority switch request changes). A mismatch could also occur if the channel number on the incoming K2 byte changes (e.g., due to a failure at the far-end LTE).')
sonusApsGroupModeMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupModeMismatches.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupModeMismatches.setDescription('A count of APS Mode Mismatch failures. An APS Mode Mismatch is a conflict between the current local mode and the received K2 mode information. An LTE in a mode other than 1+1 unidirectional must monitor the mode of operation indicators in the incoming K2 byte of the protection line for APS Mode Mismatch failures. K2 bit 5 indicates the architecture; K2 bits 6-8 indicate if the mode is unidirectional or bidirectional.')
sonusApsGroupFarEndProtectionLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupFarEndProtectionLineFailures.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupFarEndProtectionLineFailures.setDescription('A count of APS Far-End Protection-Line failures. Unless it is operating in the 1+1 unidirectional mode, the LTE must monitor the K1 byte for Far-End Protection-Line failures.')
sonusApsGroupCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsGroupCreationTime.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupCreationTime.setDescription('The value of SNMPv2-MIB:sysUpTime at the time the associated sonusApsGroupStatus variable was set to active(1).')
sonusApsChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3), )
if mibBuilder.loadTexts: sonusApsChannelTable.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelTable.setDescription('This table provides the control and status information for individual SONET APS channels.')
sonusApsChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1), ).setIndexNames((0, "SONUS-SONET-APS-MIB", "sonusApsGroupId"), (0, "SONUS-SONET-APS-MIB", "sonusApsChannelNumber"))
if mibBuilder.loadTexts: sonusApsChannelEntry.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelEntry.setDescription('An entry in the SONET APS channel table.')
sonusApsChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: sonusApsChannelNumber.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelNumber.setDescription('The number for the APS channel within the APS group. Number 0 is for the null channel (associated with the protection line). Number 15 designates the extra traffic channel. Numbers 1 thru 14 are for working channels. For an APS group in the 1+1 architecture, there are only two channels: the null channel (0) and the first working channel (1).')
sonusApsChannelLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsChannelLineId.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelLineId.setDescription('The ifIndex for the SONET line that is associated with this APS channel. This variable is used to add working channels to an APS group; a channel is not configured without a valid SONET line interface to use as a working line.')
sonusApsChannelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsChannelPriority.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelPriority.setDescription('The priority of the channel. This variable deterimines whether high or low priority SD and SF codes are used in K1 requests. This variable is not present if the channel belongs to an APS group using the 1+1 architecture.')
sonusApsChannelSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("clear", 1), ("lockoutOfProtection", 2), ("forcedSwitchOfWorking", 3), ("forcedSwitchOfProtection", 4), ("manualSwitchOfWorking", 5), ("manualSwitchOfProtection", 6), ("exercise", 7))).clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsChannelSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelSwitchCommand.setDescription('A switch command initiates one external request for evaluation. (1) Clear - Clears all switch commands on the channel. (2) Lockout Of Protection - Prevents any of the working channels from switching to the protection line by issuing a Lockout of Protection request [unless a request of equal priority (i.e., a Lockout of Protection) is already in effect]. (3) Forced Switch of Working (to Protection) - Switches the working channel to the protection line unless a request of equal or higher priority is in effect, by issuing a Forced Switch request. (4) Forced Switch of Protection (to Working) - Switches the working channel back from the protection line to the working line unless a request of equal or higher priority is in effect, by issuing a Forced Switch request. This command applies only in the 1+1 architecture. (5) Manual Switch of Working (to Protection) - Switches the working channel to the protection line unless a request of equal or higher priority is in effect, by issuing a Manual Switch request. (6) Manual Switch of Protection (to Working) - Switches the working channel back from the protection line to the working line unless a request of equal or higher priority is in effect, by issuing a Manual Switch request. This command applies only in the 1+1 architecture for the null. (7) Exercise - Exercises the protocol for a protection switch unless a request of equal or higher priority is in effect, by issuing an Exercise request and checking the response on the APS channel. Reading this variable always returns zero (0).')
sonusApsChannelControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockoutWorkingChannel", 1), ("clearLockout", 2))).clone('clearLockout')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsChannelControlCommand.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelControlCommand.setDescription("A control command controls the APS operation. (1) Lockout a Working Channel - Prevents the specified working channel from switching to the protection line. (2) Clear Lockout-a-Working-Channel - Clears the Lockout a Working Channel command for the specified channel. Reading this variable always returns zero (0). This variable is not provided if the channels's GroupArchitecture is onePlusOne(1).")
sonusApsChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 6), Bits().clone(namedValues=NamedValues(("sdCondition", 0), ("sfCondition", 1), ("lockedOut", 2), ("switched", 3), ("bothLinesFailed", 4), ("protectionLineBusy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsChannelStatus.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelStatus.setDescription("Indicates the current state of the channel. Bit 0 - Signal Degrade (SD) Condition. Indicates a 'soft failure' condition resulting from the Line BER exceeding a pre-selected threshold. Bit 1 - Signal Fail (SF) Condition. Indicates a 'hard failure' condition detected on the incoming OC-N signal. Bit 2 - Locked Out. This bit, when applied to a working channel, indicates that the channel is prevented from switching to the protection line. When applied to the null channel, this bit indicates that no working channel may switch to the protection line. The remaining states only apply to working channels which have attempted to initiate an automatic protection switch. Bit 3 - Switched. Indictes that the working channel is currently switched to the protection line. Bit 4 - Both Lines Failed. Indictes that both the working line and the protection line are currently in a failure state. Bit 5 - Protection Line Busy. Indictes that the protection line is busy servicing a different working channel. (This condition can only occur in the 1:n architecture.)")
sonusApsChannelOperDirectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsChannelOperDirectionMode.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelOperDirectionMode.setDescription('The current APS directional mode that the APS channel is operating in.')
sonusApsChannelSignalDegrades = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsChannelSignalDegrades.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelSignalDegrades.setDescription('A count of Signal Degrade conditions. This condition occurs when the line Bit Error Rate exceeds the currently configured threshold.')
sonusApsChannelSignalFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsChannelSignalFails.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelSignalFails.setDescription('A count of Signal Fail conditions that have been detected on the incoming signal. This condition occurs when a loss of signal, loss of frame, AIS-L or a Line bit error rate exceeding 10^-3 is detected on an incoming line.')
sonusApsChannelSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsChannelSwitchovers.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelSwitchovers.setDescription('The number of switchovers that have occurred on this channel.')
sonusApsChannelLastSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsChannelLastSwitchover.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelLastSwitchover.setDescription('The value of sysUpTime when this channel last switched over.')
sonusApsChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusApsChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelRowStatus.setDescription('The status of the MIB table entry (row). See SNMPv2-TC for the definition and use of RowStatus.')
sonusApsLineTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 4), )
if mibBuilder.loadTexts: sonusApsLineTable.setStatus('current')
if mibBuilder.loadTexts: sonusApsLineTable.setDescription('This table provides a mapping of ifIndex values for SONET lines to their corresponding APS channels. Only interfaces whose ifType value is sonet(39) will have entries in this table.')
sonusApsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonusApsLineEntry.setStatus('current')
if mibBuilder.loadTexts: sonusApsLineEntry.setDescription('An entry in the APS line table.')
sonusApsLineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsLineGroupId.setStatus('current')
if mibBuilder.loadTexts: sonusApsLineGroupId.setDescription('The ifIndex that provides a unique id for the APS group.')
sonusApsLineChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusApsLineChannelNumber.setStatus('current')
if mibBuilder.loadTexts: sonusApsLineChannelNumber.setDescription('The identifying number of the APS channel within the APS group.')
sonusSonetApsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2))
sonusSonetApsMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2, 0))
sonusSonetApsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3))
sonusSonetApsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 1))
sonusSonetApsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 2))
sonusApsTrapProtectionSwitchingByteFailure = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2, 0, 1)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsGroupProtectionSwitchingByteFailures"), ("SONUS-SONET-APS-MIB", "sonusApsGroupOperStatus"))
if mibBuilder.loadTexts: sonusApsTrapProtectionSwitchingByteFailure.setStatus('current')
if mibBuilder.loadTexts: sonusApsTrapProtectionSwitchingByteFailure.setDescription('A sonusApsTrapProtectionSwitchingByteFailure notification is sent when the value of an instance of sonusApsGroupProtectionSwitchingByteFailures increments.')
sonusApsTrapChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2, 0, 2)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsGroupChannelMismatches"), ("SONUS-SONET-APS-MIB", "sonusApsGroupOperStatus"))
if mibBuilder.loadTexts: sonusApsTrapChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: sonusApsTrapChannelMismatch.setDescription('A sonusApsTrapChannelMismatch notification is sent when the value of an instance of sonusApsStatusChannelMismatches increments.')
sonusApsTrapModeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2, 0, 3)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsGroupModeMismatches"), ("SONUS-SONET-APS-MIB", "sonusApsGroupOperStatus"))
if mibBuilder.loadTexts: sonusApsTrapModeMismatch.setStatus('current')
if mibBuilder.loadTexts: sonusApsTrapModeMismatch.setDescription('A sonusApsTrapModeMismatch notification is sent when the value of an instance of sonusApsStatusModeMismatches increments.')
sonusApsTrapFarEndProtectionLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2, 0, 4)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsGroupFarEndProtectionLineFailures"), ("SONUS-SONET-APS-MIB", "sonusApsGroupOperStatus"))
if mibBuilder.loadTexts: sonusApsTrapFarEndProtectionLineFailure.setStatus('current')
if mibBuilder.loadTexts: sonusApsTrapFarEndProtectionLineFailure.setDescription('A sonusApsTrapFarEndProtectionLineFailure notification is sent when the value of an instance of sonusApsGroupFarEndProtectionLineFailures increments.')
sonusApsTrapSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 2, 0, 5)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsChannelSwitchovers"), ("SONUS-SONET-APS-MIB", "sonusApsChannelStatus"))
if mibBuilder.loadTexts: sonusApsTrapSwitchover.setStatus('current')
if mibBuilder.loadTexts: sonusApsTrapSwitchover.setDescription('A sonusApsTrapSwitchover notification is sent when the value of an instance of sonusApsChanSwitchovers for a working channel increments.')
sonusApsGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 1, 1)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsGroupCount"), ("SONUS-SONET-APS-MIB", "sonusApsGroupStatus"), ("SONUS-SONET-APS-MIB", "sonusApsGroupArchitecture"), ("SONUS-SONET-APS-MIB", "sonusApsGroupAdminDirection"), ("SONUS-SONET-APS-MIB", "sonusApsGroupAdminSwitching"), ("SONUS-SONET-APS-MIB", "sonusApsGroupExtraTraffic"), ("SONUS-SONET-APS-MIB", "sonusApsGroupSignalFailBerThreshold"), ("SONUS-SONET-APS-MIB", "sonusApsGroupSignalDegradeBerThreshold"), ("SONUS-SONET-APS-MIB", "sonusApsGroupWaitToRestoreTime"), ("SONUS-SONET-APS-MIB", "sonusApsGroupName"), ("SONUS-SONET-APS-MIB", "sonusApsGroupSwitchedChannel"), ("SONUS-SONET-APS-MIB", "sonusApsGroupOperStatus"), ("SONUS-SONET-APS-MIB", "sonusApsGroupK1K2Received"), ("SONUS-SONET-APS-MIB", "sonusApsGroupK1K2Transmitted"), ("SONUS-SONET-APS-MIB", "sonusApsGroupProtectionSwitchingByteFailures"), ("SONUS-SONET-APS-MIB", "sonusApsGroupChannelMismatches"), ("SONUS-SONET-APS-MIB", "sonusApsGroupModeMismatches"), ("SONUS-SONET-APS-MIB", "sonusApsGroupFarEndProtectionLineFailures"), ("SONUS-SONET-APS-MIB", "sonusApsGroupCreationTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonusApsGroupGroup = sonusApsGroupGroup.setStatus('current')
if mibBuilder.loadTexts: sonusApsGroupGroup.setDescription('The objects which are used to provide SONET APS group configuration and status.')
sonusApsChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 1, 2)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsChannelLineId"), ("SONUS-SONET-APS-MIB", "sonusApsChannelPriority"), ("SONUS-SONET-APS-MIB", "sonusApsChannelSwitchCommand"), ("SONUS-SONET-APS-MIB", "sonusApsChannelControlCommand"), ("SONUS-SONET-APS-MIB", "sonusApsChannelStatus"), ("SONUS-SONET-APS-MIB", "sonusApsChannelOperDirectionMode"), ("SONUS-SONET-APS-MIB", "sonusApsChannelSignalDegrades"), ("SONUS-SONET-APS-MIB", "sonusApsChannelSignalFails"), ("SONUS-SONET-APS-MIB", "sonusApsChannelSwitchovers"), ("SONUS-SONET-APS-MIB", "sonusApsChannelLastSwitchover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonusApsChannelGroup = sonusApsChannelGroup.setStatus('current')
if mibBuilder.loadTexts: sonusApsChannelGroup.setDescription('The objects which are used to provide SONET APS channel configuration and status.')
sonusApsLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 1, 3)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsLineGroupId"), ("SONUS-SONET-APS-MIB", "sonusApsLineChannelNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonusApsLineGroup = sonusApsLineGroup.setStatus('current')
if mibBuilder.loadTexts: sonusApsLineGroup.setDescription('The objects which are used to provide the mapping of SONET lines to APS channels.')
sonusApsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 1, 4)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsTrapProtectionSwitchingByteFailure"), ("SONUS-SONET-APS-MIB", "sonusApsTrapChannelMismatch"), ("SONUS-SONET-APS-MIB", "sonusApsTrapModeMismatch"), ("SONUS-SONET-APS-MIB", "sonusApsTrapFarEndProtectionLineFailure"), ("SONUS-SONET-APS-MIB", "sonusApsTrapSwitchover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonusApsNotificationGroup = sonusApsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: sonusApsNotificationGroup.setDescription('The notifications (traps) that may be supported for the LTE.')
sonusSonetApsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2879, 2, 5, 9, 3, 2, 1)).setObjects(("SONUS-SONET-APS-MIB", "sonusApsGroupGroup"), ("SONUS-SONET-APS-MIB", "sonusApsChannelGroup"), ("SONUS-SONET-APS-MIB", "sonusApsLineGroup"), ("SONUS-SONET-APS-MIB", "sonusApsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonusSonetApsCompliance = sonusSonetApsCompliance.setStatus('current')
if mibBuilder.loadTexts: sonusSonetApsCompliance.setDescription('The compliance statement for this MIB.')
mibBuilder.exportSymbols("SONUS-SONET-APS-MIB", sonusApsGroupSignalDegradeBerThreshold=sonusApsGroupSignalDegradeBerThreshold, sonusApsGroupWaitToRestoreTime=sonusApsGroupWaitToRestoreTime, sonusApsChannelGroup=sonusApsChannelGroup, sonusApsTrapFarEndProtectionLineFailure=sonusApsTrapFarEndProtectionLineFailure, sonusApsTrapSwitchover=sonusApsTrapSwitchover, sonusApsGroupK1K2Transmitted=sonusApsGroupK1K2Transmitted, sonusApsGroupEntry=sonusApsGroupEntry, sonusSonetApsConformance=sonusSonetApsConformance, sonusApsGroupGroup=sonusApsGroupGroup, sonusApsGroupOperStatus=sonusApsGroupOperStatus, sonusApsChannelLastSwitchover=sonusApsChannelLastSwitchover, sonusApsChannelTable=sonusApsChannelTable, sonusApsChannelRowStatus=sonusApsChannelRowStatus, sonusSonetApsMIB=sonusSonetApsMIB, sonusSonetApsMIBNotifications=sonusSonetApsMIBNotifications, sonusApsTrapModeMismatch=sonusApsTrapModeMismatch, sonusApsChannelSignalDegrades=sonusApsChannelSignalDegrades, sonusApsChannelSignalFails=sonusApsChannelSignalFails, sonusApsGroupAdminDirection=sonusApsGroupAdminDirection, sonusApsGroupProtectionSwitchingByteFailures=sonusApsGroupProtectionSwitchingByteFailures, sonusApsChannelNumber=sonusApsChannelNumber, sonusSonetApsGroups=sonusSonetApsGroups, sonusApsGroupTable=sonusApsGroupTable, sonusApsGroupModeMismatches=sonusApsGroupModeMismatches, sonusApsChannelControlCommand=sonusApsChannelControlCommand, sonusApsChannelSwitchovers=sonusApsChannelSwitchovers, sonusApsNotificationGroup=sonusApsNotificationGroup, PYSNMP_MODULE_ID=sonusSonetApsMIB, sonusApsGroupK1K2Received=sonusApsGroupK1K2Received, sonusApsGroupId=sonusApsGroupId, sonusApsChannelOperDirectionMode=sonusApsChannelOperDirectionMode, sonusApsGroupSignalFailBerThreshold=sonusApsGroupSignalFailBerThreshold, sonusApsGroupFarEndProtectionLineFailures=sonusApsGroupFarEndProtectionLineFailures, sonusApsGroupCreationTime=sonusApsGroupCreationTime, sonusApsTrapProtectionSwitchingByteFailure=sonusApsTrapProtectionSwitchingByteFailure, sonusApsChannelStatus=sonusApsChannelStatus, sonusApsLineTable=sonusApsLineTable, sonusSonetApsCompliance=sonusSonetApsCompliance, sonusApsGroupAdminSwitching=sonusApsGroupAdminSwitching, sonusApsLineEntry=sonusApsLineEntry, sonusApsChannelPriority=sonusApsChannelPriority, sonusApsLineGroupId=sonusApsLineGroupId, sonusApsGroupExtraTraffic=sonusApsGroupExtraTraffic, sonusApsTrapChannelMismatch=sonusApsTrapChannelMismatch, sonusSonetApsMIBObjects=sonusSonetApsMIBObjects, sonusApsGroupArchitecture=sonusApsGroupArchitecture, sonusApsChannelSwitchCommand=sonusApsChannelSwitchCommand, sonusSonetApsMIBNotificationsPrefix=sonusSonetApsMIBNotificationsPrefix, sonusApsGroupStatus=sonusApsGroupStatus, sonusSonetApsCompliances=sonusSonetApsCompliances, sonusApsChannelLineId=sonusApsChannelLineId, sonusApsGroupCount=sonusApsGroupCount, sonusApsLineGroup=sonusApsLineGroup, sonusApsGroupName=sonusApsGroupName, sonusApsLineChannelNumber=sonusApsLineChannelNumber, sonusApsChannelEntry=sonusApsChannelEntry, sonusApsGroupChannelMismatches=sonusApsGroupChannelMismatches, sonusApsGroupSwitchedChannel=sonusApsGroupSwitchedChannel, ApsK1K2=ApsK1K2)
